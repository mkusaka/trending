<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T01:54:20Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CodeEditApp/CodeEdit</title>
    <updated>2022-06-03T01:54:20Z</updated>
    <id>tag:github.com,2022-06-03:/CodeEditApp/CodeEdit</id>
    <link href="https://github.com/CodeEditApp/CodeEdit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CodeEdit App for macOS ‚Äì Elevate your code editing experience. Open source, free forever.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/806104/163099605-4eaedd33-8441-4125-9ca1-a7ccb2f62a74.png&#34; height=&#34;128&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;CodeEdit for macOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;Follow CodeEdit on Twitter&#34; href=&#34;https://twitter.com/CodeEditApp&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/Follow%20@CodeEditApp-black.svg?style=for-the-badge&amp;amp;logo=Twitter&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Join the community on Discord&#34; href=&#34;https://discord.gg/vChUXVf9Em&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/Join%20the%20community-black.svg?style=for-the-badge&amp;amp;logo=Discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;CodeEdit is a code editor built by the community, for the community, written entirely and unapologetically for macOS. Features include syntax highlighting, code completion, project find and replace, snippets, terminal, task running, debugging, git integration, code review, extensions, and more.&lt;/p&gt; &#xA;&lt;img width=&#34;1012&#34; alt=&#34;github-banner&#34; src=&#34;https://user-images.githubusercontent.com/806104/163101427-4787970f-c78b-4a98-a29b-1ef26b62fd40.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#contributors-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/all_contributors-16-orange.svg?style=flat-square&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/checks-status/CodeEditApp/CodeEdit/main?style=flat-square&#34; alt=&#34;GitHub branch checks state&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/CodeEditApp/CodeEdit?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/CodeEditApp/CodeEdit?style=flat-square&#34; alt=&#34;GitHub forks&#34;&gt; &lt;a href=&#34;https://discord.gg/vChUXVf9Em&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/951544472238444645?color=5865F2&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;span&gt;‚ö†&lt;/span&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;CodeEdit is currently in development and we do not yet offer a download.&lt;/strong&gt; &lt;br&gt; We will post a link here when we have an alpha release ready for testing. Until then, we welcome contributors to help bring this project to life.&lt;/th&gt; &#xA;   &lt;th&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTE&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#mission&#34;&gt;Mission&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#backers&#34;&gt;Backers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Developers that use a Mac should be able to use an editor that feels at home on the Mac. Comparable editors are built on Electron. This is a huge limitation because it cannot utilize system resources to their fullest potential.&lt;/p&gt; &#xA;&lt;p&gt;Electron requires a Chromium instance to run. This can mean massive performance losses and high RAM usage even for small apps built on it. Additionally, the overall code footprint is much larger and animations are slower. More frames are lost and things like window resizing feels laggy. Native apps are smooth as butter and utilize system resources much more efficiently for better performance and reliability. For more information on this, we&#39;ll point you to &lt;a href=&#34;https://www.remotion.com/blog/why-remotion-is-a-native-macos-app-not-electron&#34;&gt;a fantastic article&lt;/a&gt; by the nice folks at Remotion.&lt;/p&gt; &#xA;&lt;p&gt;Xcode offers this great native experience however it mostly supports projects written specifically for Apple platforms. There are many projects not written for Apple platforms that deserve that same macOS-native experience that developers get with Xcode.&lt;/p&gt; &#xA;&lt;p&gt;This raised the question, what if such an editor existed? We think developers deserve a native experience. This led to the creation of &lt;a href=&#34;https://www.figma.com/proto/qj6raZbQsZpGO0NAVi4qsv/CodeEdit-Concept?node-id=1%3A870&#34;&gt;this concept&lt;/a&gt; which our project aims to make a reality.&lt;/p&gt; &#xA;&lt;h2&gt;Mission&lt;/h2&gt; &#xA;&lt;p&gt;We think there is room to streamline the developer experience. To gain maximum adoption, CodeEdit should be open source, free to use, and supported by the community.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/806104/163101287-feba5466-dde0-450c-a9ac-8f9dd3d00e52.png&#34; alt=&#34;github-equation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like to keep our application light as TextEdit, but provide an experience similar to Xcode. In other words, we&#39;d like to offer developers the power of a full IDE while remaining lightweight.&lt;/p&gt; &#xA;&lt;p&gt;Our goal is to develop an app that looks and feels like it was designed and developed by Apple and to closely stick to their design standards and development patterns even down to the application icon and naming strategy.&lt;/p&gt; &#xA;&lt;p&gt;It might sound crazy, but it is our hope that at some point Apple adopts this project or at least feels like they could.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join our growing community on &lt;a href=&#34;https://discord.gg/vChUXVf9Em&#34;&gt;Discord&lt;/a&gt; where we discuss and collaborate on all things CodeEdit. Don&#39;t be shy, jump right in and be part of the discussion!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Be part of the next revolution in code editing by contributing to the project. This is a community-led effort, so we welcome as many contributors who can help. Read the &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/raw/main/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://www.austincondiff.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/806104?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Austin Condiff&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#design-austincondiff&#34; title=&#34;Design&#34;&gt;üé®&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=austincondiff&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://lukaspistrol.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9460130?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lukas Pistrol&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#infra-lukepistrol&#34; title=&#34;Infrastructure (Hosting, Build-Tools, etc)&#34;&gt;üöá&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=lukepistrol&#34; title=&#34;Tests&#34;&gt;‚ö†Ô∏è&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=lukepistrol&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pkasila&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/17158860?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Pavel Kasila&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#infra-pkasila&#34; title=&#34;Infrastructure (Hosting, Build-Tools, etc)&#34;&gt;üöá&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=pkasila&#34; title=&#34;Tests&#34;&gt;‚ö†Ô∏è&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=pkasila&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/MarcoCarnevali&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9656572?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Marco Carnevali&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#infra-MarcoCarnevali&#34; title=&#34;Infrastructure (Hosting, Build-Tools, etc)&#34;&gt;üöá&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=MarcoCarnevali&#34; title=&#34;Tests&#34;&gt;‚ö†Ô∏è&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=MarcoCarnevali&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://wdg.codes&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1290461?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Wesley De Groot&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#infra-wdg&#34; title=&#34;Infrastructure (Hosting, Build-Tools, etc)&#34;&gt;üöá&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=wdg&#34; title=&#34;Tests&#34;&gt;‚ö†Ô∏è&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=wdg&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/nanashili&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/63672227?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nanashi Li&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=nanashili&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ninjiacoder.me&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/22616933?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;ninjiacoder&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=RayZhao1998&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitch.tv/Jeehut&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/6942160?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Cihat G√ºnd√ºz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=Jeehut&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/MysteryCoder456&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/43755491?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rehatbir Singh&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=MysteryCoder456&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Angelk90&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/20476002?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Angelk90&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=Angelk90&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.stefkors.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/11800807?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Stef Kors&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=StefKors&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://akringblog.com/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/6525286?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Chris Akring&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=akring&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/highjeans&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/77588045?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;highjeans&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=highjeans&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://blog.windchillmedia.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/35942988?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Khan Winter&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=thecoolwinter&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jasonplatts&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/48892071?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jason Platts&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#infra-jasonplatts&#34; title=&#34;Infrastructure (Hosting, Build-Tools, etc)&#34;&gt;üöá&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/#plugin-jasonplatts&#34; title=&#34;Plugin/utility libraries&#34;&gt;üîå&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/dzign1&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/44317715?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rob Hughes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=dzign1&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://lingxi.li&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/36816148?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lingxi Li&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=lilingxi01&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Alilingxi01&#34; title=&#34;Bug reports&#34;&gt;üêõ&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/octree&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7934444?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;HZ.Liu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=octree&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Aoctree&#34; title=&#34;Bug reports&#34;&gt;üêõ&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCx1gvWpy5zjOd7yZyDwmXEA?sub_confirmation=1&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/8013017?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Richard Topchii&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=richardtop&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Pythonen&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/53183345?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Pythonen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=Pythonen&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jav-solo&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/10246220?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Javier Solorzano&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=jav-solo&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt; &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/issues?q=author%3Ajav-solo&#34; title=&#34;Bug reports&#34;&gt;üêõ&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://angcosmin.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/8146514?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Cosmin Anghel&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=AngCosmin&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://mmshivesh.ml&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/23611514?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shivesh&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=mmshivesh&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/drucelweisse&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/36012972?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Andrey Plotnikov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=drucelweisse&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/POPOBE97&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7891810?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;POPOBE97&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/commits?author=POPOBE97&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support CodeEdit&#39;s development by &lt;a href=&#34;https://github.com/sponsors/CodeEditApp&#34;&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a title=&#34;Vercel&#34; href=&#34;https://vercel.com/?utm_source=codeedit&amp;amp;utm_campaign=oss&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/806104/162766170-60f3b95a-ca30-4015-a3e3-a605df78b98a.png&#34; width=&#34;128&#34;&gt;&lt;/a&gt; &lt;a title=&#34;MacStadium&#34; href=&#34;https://macstadium.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/806104/162766594-eff7f985-31a9-48c5-9e58-139794fefa10.png&#34; width=&#34;128&#34;&gt;&lt;/a&gt; &lt;a title=&#34;GitBook&#34; href=&#34;https://www.gitbook.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/806104/162766464-c10dc9fc-088a-4945-a0e1-17bd42705b70.png&#34; width=&#34;128&#34;&gt;&lt;/a&gt; &lt;a title=&#34;panascais&#34; href=&#34;https://github.com/panascais&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/19628635?s=200&amp;amp;v=4&#34; width=&#34;128&#34;&gt;&lt;/a&gt; &lt;a title=&#34;DevUtilsApp&#34; href=&#34;https://devutils.app/?utm_source=codeedit&amp;amp;utm_campaign=oss&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://devutils.app/512.png&#34; width=&#34;128&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Support CodeEdit&#39;s development by &lt;a href=&#34;https://github.com/sponsors/CodeEditApp&#34;&gt;becoming a backer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a title=&#34;dannydorazio&#34; href=&#34;https://github.com/dannydorazio&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/21158275?v=4&#34; width=&#34;64&#34;&gt;&lt;/a&gt; &lt;a title=&#34;omrd&#34; href=&#34;https://github.com/omrd&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/34616424?v=4&#34; width=&#34;64&#34;&gt;&lt;/a&gt; &lt;a title=&#34;sparrowcode&#34; href=&#34;https://github.com/sparrowcode&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/98487302?s=200&amp;amp;v=4&#34; width=&#34;64&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Gebes&#34; href=&#34;https://github.com/Gebes&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/35232234?v=4&#34; width=&#34;64&#34;&gt;&lt;/a&gt; &lt;a title=&#34;lovetodream&#34; href=&#34;https://github.com/lovetodream&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/38291523?v=4&#34; width=&#34;64&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Thanks to all of our other backers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ivanvorobei&#34;&gt;@ivanvorobei&lt;/a&gt; &lt;a href=&#34;https://github.com/albertorestifo&#34;&gt;@albertorestifo&lt;/a&gt; &lt;a href=&#34;https://github.com/rkusa&#34;&gt;@rkusa&lt;/a&gt; &lt;a href=&#34;https://github.com/cadenkriese&#34;&gt;@cadenkriese&lt;/a&gt; &lt;a href=&#34;https://github.com/petrjahoda&#34;&gt;@petrjahoda&lt;/a&gt; &lt;a href=&#34;https://github.com/allejo&#34;&gt;@allejo&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/CodeEditApp/CodeEdit/main/frousselet&#34;&gt;@frousselet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/raw/main/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bizz84/SwiftyStoreKit</title>
    <updated>2022-06-03T01:54:20Z</updated>
    <id>tag:github.com,2022-06-03:/bizz84/SwiftyStoreKit</id>
    <link href="https://github.com/bizz84/SwiftyStoreKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight In App Purchases Swift framework for iOS 8.0+, tvOS 9.0+ and macOS 10.10+ ‚õ∫&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/bizz84/SwiftyStoreKit/raw/master/SwiftyStoreKit-logo.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://mit-license.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/resources/&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-lightgrey.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.0-orange.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/bizz84/SwiftyStoreKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/bizz84/SwiftyStoreKit.svg?style=flat&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/bizz84/SwiftyStoreKit.svg?style=flat&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/swiftystorekit/shared_invite/enQtODY3OTYxOTExMzE5LWVkNGY4MzcwY2VjNGM4MGU4NDFhMGE5YmUxMGM3ZTQ4NjVjNTRkNTJhNDAyMWZmY2M5OWE5MDE0ODc3OGJjMmM&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-Join-green.svg?style=flat&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SwiftyStoreKit is a lightweight In App Purchases framework for iOS, tvOS, watchOS, macOS, and Mac Catalyst.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Super easy-to-use block-based API&lt;/li&gt; &#xA; &lt;li&gt;Support for consumable and non-consumable in-app purchases&lt;/li&gt; &#xA; &lt;li&gt;Support for free, auto-renewable and non-renewing subscriptions&lt;/li&gt; &#xA; &lt;li&gt;Support for in-app purchases started in the App Store (iOS 11)&lt;/li&gt; &#xA; &lt;li&gt;Support for subscription discounts and offers&lt;/li&gt; &#xA; &lt;li&gt;Remote receipt verification&lt;/li&gt; &#xA; &lt;li&gt;Verify purchases, subscriptions, subscription groups&lt;/li&gt; &#xA; &lt;li&gt;Downloading content hosted with Apple&lt;/li&gt; &#xA; &lt;li&gt;iOS, tvOS, watchOS, macOS, and Catalyst compatible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SwiftyStoreKit Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;During WWDC21, Apple introduced &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2021/10114/&#34;&gt;StoreKit 2&lt;/a&gt;, a brand new Swift API for in-app purchases and auto-renewable subscriptions.&lt;/p&gt; &#xA;&lt;p&gt;While it would be highly desirable to support StoreKit 2 in this project, &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/issues/550&#34;&gt;little progress&lt;/a&gt; has been made over the last year and most issues &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/issues&#34;&gt;remain unanswered&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Fortunately, there are some very good alternatives to SwiftyStoreKit, backed by real companies. By choosing their products, you&#39;ll make a safe choice and get much better support.&lt;/p&gt; &#xA;&lt;h3&gt;RevenueCat&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.revenuecat.com/&#34;&gt;RevenueCat&lt;/a&gt; is a great alternative to SwiftyStoreKit, offering great APIs, support, and much more at a very &lt;a href=&#34;https://www.revenuecat.com/pricing&#34;&gt;reasonable price&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve been using SwiftyStoreKit and want to migrate to RevenueCat, this guide covers everything you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs/swiftystorekit&#34;&gt;SwiftyStoreKit Migration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or if you&#39;re just getting started, consider skipping SwiftyStoreKit altogether and signing up for &lt;a href=&#34;https://www.revenuecat.com/&#34;&gt;RevenueCat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Glassfy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://glassfy.io/&#34;&gt;Glassfy&lt;/a&gt; makes it easy to build, handle, and optimize in-app subscriptions. If you switch to Glassfy from SwiftyStoreKit, you&#39;ll get a 20% discount by using this &lt;a href=&#34;https://dashboard.glassfy.io/referral?code=SWIFTYSTOREKIT20&#34;&gt;affiliate link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Glassfy &lt;a href=&#34;https://glassfy.io/pricing.html&#34;&gt;pricing page&lt;/a&gt; - 20% off&lt;/li&gt; &#xA; &lt;li&gt;Glassfy &lt;a href=&#34;https://docs.glassfy.io/get-started/migrate-ssk&#34;&gt;migration guide&lt;/a&gt; to support you with the migration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note from the author: if you sign up with the link above, I will receive an affiliate commission from Glassfy, at no cost to yourself. I only recommend products that I personally know and believe will help you.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributions Wanted&lt;/h2&gt; &#xA;&lt;p&gt;SwiftyStoreKit makes it easy for an incredible number of developers to seemlessly integrate in-App Purchases. This project, however, is now &lt;strong&gt;community-led&lt;/strong&gt;. We need help building out features and writing tests (see &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/issues/550&#34;&gt;issue #550&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Maintainers Wanted&lt;/h3&gt; &#xA;&lt;p&gt;The author is no longer maintaining this project actively. If you&#39;d like to become a maintainer, &lt;a href=&#34;https://join.slack.com/t/swiftystorekit/shared_invite/enQtODY3OTYxOTExMzE5LWVkNGY4MzcwY2VjNGM4MGU4NDFhMGE5YmUxMGM3ZTQ4NjVjNTRkNTJhNDAyMWZmY2M5OWE5MDE0ODc3OGJjMmM&#34;&gt;join the Slack workspace&lt;/a&gt; and enter the &lt;a href=&#34;https://app.slack.com/client/TL2JYQ458/CLG62K26A/details/&#34;&gt;#maintainers&lt;/a&gt; channel. Going forward, SwiftyStoreKit should be made for the community, by the community.&lt;/p&gt; &#xA;&lt;p&gt;More info here: &lt;a href=&#34;https://medium.com/@biz84/the-future-of-swiftystorekit-maintainers-needed-f60d01572c91&#34;&gt;The Future of SwiftyStoreKit: Maintainers Wanted&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve shipped an app in the last five years, you&#39;re probably good to go. Some features (like discounts) are only available on new OS versions, but most features are available as far back as:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;watchOS&lt;/th&gt; &#xA;   &lt;th&gt;tvOS&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Mac Catalyst&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8.0&lt;/td&gt; &#xA;   &lt;td&gt;6.2&lt;/td&gt; &#xA;   &lt;td&gt;9.0&lt;/td&gt; &#xA;   &lt;td&gt;10.10&lt;/td&gt; &#xA;   &lt;td&gt;13.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of ways to install SwiftyStoreKit for your project. Swift Package Manager, CocoaPods, and Carthage integrations are the preferred and recommended approaches.&lt;/p&gt; &#xA;&lt;p&gt;Regardless, make sure to import the project wherever you may use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftyStoreKit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into Xcode and the Swift compiler. &lt;strong&gt;This is the recommended installation method.&lt;/strong&gt; Updates to SwiftyStoreKit will always be available immediately to projects with SPM. SPM is also integrated directly with Xcode.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Xcode 11 or later:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click &lt;code&gt;File&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Swift Packages&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Add Package Dependency...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Specify the git URL for SwiftyStoreKit.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;https://github.com/bizz84/SwiftyStoreKit.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To integrate SwiftyStoreKit into your Xcode project using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, specify it in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;bizz84/SwiftyStoreKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Please ensure that you have the &lt;a href=&#34;https://github.com/Carthage/Carthage/releases&#34;&gt;latest&lt;/a&gt; Carthage installed.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;SwiftyStoreKit can be installed as a &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPod&lt;/a&gt; and builds as a Swift framework. To install, include this in your Podfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&#xA;pod &#39;SwiftyStoreKit&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Got issues / pull requests / want to contribute? &lt;a href=&#34;https://raw.githubusercontent.com/bizz84/SwiftyStoreKit/master/CONTRIBUTING.md&#34;&gt;Read here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Full documentation is available on the &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/wiki&#34;&gt;SwiftyStoreKit Wiki&lt;/a&gt;. As SwiftyStoreKit (and Apple&#39;s StoreKit) gains features, platforms, and implementation approaches, new information will be added to the Wiki. Essential documentation is available here in the README and should be enough to get you up and running.&lt;/p&gt; &#xA;&lt;h2&gt;App startup&lt;/h2&gt; &#xA;&lt;h3&gt;Complete Transactions&lt;/h3&gt; &#xA;&lt;p&gt;Apple recommends to register a transaction observer &lt;a href=&#34;https://developer.apple.com/library/ios/technotes/tn2387/_index.html&#34;&gt;as soon as the app starts&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Adding your app&#39;s observer at launch ensures that it will persist during all launches of your app, thus allowing your app to receive all the payment queue notifications.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;SwiftyStoreKit supports this by calling &lt;code&gt;completeTransactions()&lt;/code&gt; when the app starts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {&#xA;&#x9;// see notes below for the meaning of Atomic / Non-Atomic&#xA;&#x9;SwiftyStoreKit.completeTransactions(atomically: true) { purchases in&#xA;&#x9;    for purchase in purchases {&#xA;&#x9;        switch purchase.transaction.transactionState {&#xA;&#x9;        case .purchased, .restored:&#xA;&#x9;            if purchase.needsFinishTransaction {&#xA;&#x9;                // Deliver content from server, then:&#xA;&#x9;                SwiftyStoreKit.finishTransaction(purchase.transaction)&#xA;&#x9;            }&#xA;&#x9;            // Unlock content&#xA;&#x9;        case .failed, .purchasing, .deferred:&#xA;&#x9;            break // do nothing&#xA;&#x9;        }&#xA;&#x9;    }&#xA;&#x9;}&#xA;    return true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there are any pending transactions at this point, these will be reported by the completion block so that the app state and UI can be updated.&lt;/p&gt; &#xA;&lt;p&gt;If there are no pending transactions, the completion block will &lt;strong&gt;not&lt;/strong&gt; be called.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;completeTransactions()&lt;/code&gt; &lt;strong&gt;should only be called once&lt;/strong&gt; in your code, in &lt;code&gt;application(:didFinishLaunchingWithOptions:)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Purchases&lt;/h2&gt; &#xA;&lt;h3&gt;Retrieve products info&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftyStoreKit.retrieveProductsInfo([&#34;com.musevisions.SwiftyStoreKit.Purchase1&#34;]) { result in&#xA;    if let product = result.retrievedProducts.first {&#xA;        let priceString = product.localizedPrice!&#xA;        print(&#34;Product: \(product.localizedDescription), price: \(priceString)&#34;)&#xA;    }&#xA;    else if let invalidProductId = result.invalidProductIDs.first {&#xA;        print(&#34;Invalid product identifier: \(invalidProductId)&#34;)&#xA;    }&#xA;    else {&#xA;        print(&#34;Error: \(result.error)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Purchase a product (given a product id)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Atomic&lt;/strong&gt;: to be used when the content is delivered immediately.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftyStoreKit.purchaseProduct(&#34;com.musevisions.SwiftyStoreKit.Purchase1&#34;, quantity: 1, atomically: true) { result in&#xA;    switch result {&#xA;    case .success(let purchase):&#xA;        print(&#34;Purchase Success: \(purchase.productId)&#34;)&#xA;    case .error(let error):&#xA;        switch error.code {&#xA;        case .unknown: print(&#34;Unknown error. Please contact support&#34;)&#xA;        case .clientInvalid: print(&#34;Not allowed to make the payment&#34;)&#xA;        case .paymentCancelled: break&#xA;        case .paymentInvalid: print(&#34;The purchase identifier was invalid&#34;)&#xA;        case .paymentNotAllowed: print(&#34;The device is not allowed to make the payment&#34;)&#xA;        case .storeProductNotAvailable: print(&#34;The product is not available in the current storefront&#34;)&#xA;        case .cloudServicePermissionDenied: print(&#34;Access to cloud service information is not allowed&#34;)&#xA;        case .cloudServiceNetworkConnectionFailed: print(&#34;Could not connect to the network&#34;)&#xA;        case .cloudServiceRevoked: print(&#34;User has revoked permission to use this cloud service&#34;)&#xA;        default: print((error as NSError).localizedDescription)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-Atomic&lt;/strong&gt;: to be used when the content is delivered by the server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftyStoreKit.purchaseProduct(&#34;com.musevisions.SwiftyStoreKit.Purchase1&#34;, quantity: 1, atomically: false) { result in&#xA;    switch result {&#xA;    case .success(let product):&#xA;        // fetch content from your server, then:&#xA;        if product.needsFinishTransaction {&#xA;            SwiftyStoreKit.finishTransaction(product.transaction)&#xA;        }&#xA;        print(&#34;Purchase Success: \(product.productId)&#34;)&#xA;    case .error(let error):&#xA;        switch error.code {&#xA;        case .unknown: print(&#34;Unknown error. Please contact support&#34;)&#xA;        case .clientInvalid: print(&#34;Not allowed to make the payment&#34;)&#xA;        case .paymentCancelled: break&#xA;        case .paymentInvalid: print(&#34;The purchase identifier was invalid&#34;)&#xA;        case .paymentNotAllowed: print(&#34;The device is not allowed to make the payment&#34;)&#xA;        case .storeProductNotAvailable: print(&#34;The product is not available in the current storefront&#34;)&#xA;        case .cloudServicePermissionDenied: print(&#34;Access to cloud service information is not allowed&#34;)&#xA;        case .cloudServiceNetworkConnectionFailed: print(&#34;Could not connect to the network&#34;)&#xA;        case .cloudServiceRevoked: print(&#34;User has revoked permission to use this cloud service&#34;)&#xA;        default: print((error as NSError).localizedDescription)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Additional Purchase Documentation&lt;/h3&gt; &#xA;&lt;p&gt;These additional topics are available on the Wiki:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/wiki/Purchasing#purchase-a-product-given-a-skproduct&#34;&gt;Purchase a product (given a SKProduct)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/wiki/App-Store-Purchases&#34;&gt;Handle purchases started on the App Store (iOS 11)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Restore Previous Purchases&lt;/h3&gt; &#xA;&lt;p&gt;According to &lt;a href=&#34;https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Chapters/Restoring.html#//apple_ref/doc/uid/TP40008267-CH8-SW9&#34;&gt;Apple - Restoring Purchased Products&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In most cases, all your app needs to do is refresh its receipt and deliver the products in its receipt. The refreshed receipt contains a record of the user‚Äôs purchases in this app, on this device or any other device.&lt;/p&gt; &#xA; &lt;p&gt;Restoring completed transactions creates a new transaction for every completed transaction the user made, essentially replaying history for your transaction queue observer.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See the &lt;strong&gt;Receipt Verification&lt;/strong&gt; section below for how to restore previous purchases using the receipt.&lt;/p&gt; &#xA;&lt;p&gt;This section shows how to restore completed transactions with the &lt;code&gt;restorePurchases&lt;/code&gt; method instead. When successful, the method returns all non-consumable purchases, as well as all auto-renewable subscription purchases, &lt;strong&gt;regardless of whether they are expired or not&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Atomic&lt;/strong&gt;: to be used when the content is delivered immediately.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftyStoreKit.restorePurchases(atomically: true) { results in&#xA;    if results.restoreFailedPurchases.count &amp;gt; 0 {&#xA;        print(&#34;Restore Failed: \(results.restoreFailedPurchases)&#34;)&#xA;    }&#xA;    else if results.restoredPurchases.count &amp;gt; 0 {&#xA;        print(&#34;Restore Success: \(results.restoredPurchases)&#34;)&#xA;    }&#xA;    else {&#xA;        print(&#34;Nothing to Restore&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Non-Atomic&lt;/strong&gt;: to be used when the content is delivered by the server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftyStoreKit.restorePurchases(atomically: false) { results in&#xA;    if results.restoreFailedPurchases.count &amp;gt; 0 {&#xA;        print(&#34;Restore Failed: \(results.restoreFailedPurchases)&#34;)&#xA;    }&#xA;    else if results.restoredPurchases.count &amp;gt; 0 {&#xA;        for purchase in results.restoredPurchases {&#xA;            // fetch content from your server, then:&#xA;            if purchase.needsFinishTransaction {&#xA;                SwiftyStoreKit.finishTransaction(purchase.transaction)&#xA;            }&#xA;        }&#xA;        print(&#34;Restore Success: \(results.restoredPurchases)&#34;)&#xA;    }&#xA;    else {&#xA;        print(&#34;Nothing to Restore&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;What does atomic / non-atomic mean?&lt;/h4&gt; &#xA;&lt;p&gt;For more information about atomic vs. non-atomic restorations, &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/wiki/Restoring#what-does-atomic--non-atomic-mean&#34;&gt;view the Wiki page here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Downloading content hosted with Apple&lt;/h3&gt; &#xA;&lt;p&gt;More information about downloading hosted content is &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/wiki/Downloading-Content&#34;&gt;available on the Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To start downloads (this can be done in &lt;code&gt;purchaseProduct()&lt;/code&gt;, &lt;code&gt;completeTransactions()&lt;/code&gt; or &lt;code&gt;restorePurchases()&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftyStoreKit.purchaseProduct(&#34;com.musevisions.SwiftyStoreKit.Purchase1&#34;, quantity: 1, atomically: false) { result in&#xA;    switch result {&#xA;    case .success(let product):&#xA;        let downloads = purchase.transaction.downloads&#xA;        if !downloads.isEmpty {&#xA;            SwiftyStoreKit.start(downloads)&#xA;        }&#xA;    case .error(let error):&#xA;        print(&#34;\(error)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check the updated downloads, setup a &lt;code&gt;updatedDownloadsHandler&lt;/code&gt; block in your AppDelegate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftyStoreKit.updatedDownloadsHandler = { downloads in&#xA;    // contentURL is not nil if downloadState == .finished&#xA;    let contentURLs = downloads.flatMap { $0.contentURL }&#xA;    if contentURLs.count == downloads.count {&#xA;        // process all downloaded files, then finish the transaction&#xA;        SwiftyStoreKit.finishTransaction(downloads[0].transaction)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To control the state of the downloads, SwiftyStoreKit offers &lt;code&gt;start()&lt;/code&gt;, &lt;code&gt;pause()&lt;/code&gt;, &lt;code&gt;resume()&lt;/code&gt;, &lt;code&gt;cancel()&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;h2&gt;Receipt verification&lt;/h2&gt; &#xA;&lt;p&gt;This helper can be used to retrieve the (encrypted) local receipt data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let receiptData = SwiftyStoreKit.localReceiptData&#xA;let receiptString = receiptData.base64EncodedString(options: [])&#xA;// do your receipt validation here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, the receipt file may be missing or outdated. Use this method to get the updated receipt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftyStoreKit.fetchReceipt(forceRefresh: true) { result in&#xA;    switch result {&#xA;    case .success(let receiptData):&#xA;        let encryptedReceipt = receiptData.base64EncodedString(options: [])&#xA;        print(&#34;Fetch receipt success:\n\(encryptedReceipt)&#34;)&#xA;    case .error(let error):&#xA;        print(&#34;Fetch receipt failed: \(error)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use this method to (optionally) refresh the receipt and perform validation in one step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let appleValidator = AppleReceiptValidator(service: .production, sharedSecret: &#34;your-shared-secret&#34;)&#xA;SwiftyStoreKit.verifyReceipt(using: appleValidator, forceRefresh: false) { result in&#xA;    switch result {&#xA;    case .success(let receipt):&#xA;        print(&#34;Verify receipt success: \(receipt)&#34;)&#xA;    case .error(let error):&#xA;        print(&#34;Verify receipt failed: \(error)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional details about receipt verification are &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/wiki/Verify-Receipt&#34;&gt;available on the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Verifying purchases and subscriptions&lt;/h2&gt; &#xA;&lt;p&gt;Once you have retrieved the receipt using the &lt;code&gt;verifyReceipt&lt;/code&gt; method, you can verify your purchases and subscriptions by product identifier.&lt;/p&gt; &#xA;&lt;h3&gt;Verify Purchase&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let appleValidator = AppleReceiptValidator(service: .production, sharedSecret: &#34;your-shared-secret&#34;)&#xA;SwiftyStoreKit.verifyReceipt(using: appleValidator) { result in&#xA;    switch result {&#xA;    case .success(let receipt):&#xA;        let productId = &#34;com.musevisions.SwiftyStoreKit.Purchase1&#34;&#xA;        // Verify the purchase of Consumable or NonConsumable&#xA;        let purchaseResult = SwiftyStoreKit.verifyPurchase(&#xA;            productId: productId,&#xA;            inReceipt: receipt)&#xA;            &#xA;        switch purchaseResult {&#xA;        case .purchased(let receiptItem):&#xA;            print(&#34;\(productId) is purchased: \(receiptItem)&#34;)&#xA;        case .notPurchased:&#xA;            print(&#34;The user has never purchased \(productId)&#34;)&#xA;        }&#xA;    case .error(let error):&#xA;        print(&#34;Receipt verification failed: \(error)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verify Subscription&lt;/h3&gt; &#xA;&lt;p&gt;This can be used to check if a subscription was previously purchased, and whether it is still active or if it&#39;s expired.&lt;/p&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Chapters/Subscriptions.html#//apple_ref/doc/uid/TP40008267-CH7-SW6&#34;&gt;Apple - Working with Subscriptions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Keep a record of the date that each piece of content is published. Read the Original Purchase Date and Subscription Expiration Date field from each receipt entry to determine the start and end dates of the subscription.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When one or more subscriptions are found for a given product id, they are returned as a &lt;code&gt;ReceiptItem&lt;/code&gt; array ordered by &lt;code&gt;expiryDate&lt;/code&gt;, with the first one being the newest.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let appleValidator = AppleReceiptValidator(service: .production, sharedSecret: &#34;your-shared-secret&#34;)&#xA;SwiftyStoreKit.verifyReceipt(using: appleValidator) { result in&#xA;    switch result {&#xA;    case .success(let receipt):&#xA;        let productId = &#34;com.musevisions.SwiftyStoreKit.Subscription&#34;&#xA;        // Verify the purchase of a Subscription&#xA;        let purchaseResult = SwiftyStoreKit.verifySubscription(&#xA;            ofType: .autoRenewable, // or .nonRenewing (see below)&#xA;            productId: productId,&#xA;            inReceipt: receipt)&#xA;            &#xA;        switch purchaseResult {&#xA;        case .purchased(let expiryDate, let items):&#xA;            print(&#34;\(productId) is valid until \(expiryDate)\n\(items)\n&#34;)&#xA;        case .expired(let expiryDate, let items):&#xA;            print(&#34;\(productId) is expired since \(expiryDate)\n\(items)\n&#34;)&#xA;        case .notPurchased:&#xA;            print(&#34;The user has never purchased \(productId)&#34;)&#xA;        }&#xA;&#xA;    case .error(let error):&#xA;        print(&#34;Receipt verification failed: \(error)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further documentation on verifying subscriptions is &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/wiki/Verify-Subscription&#34;&gt;available on the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Subscription Groups&lt;/h3&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://developer.apple.com/app-store/subscriptions/&#34;&gt;Apple Docs - Offering Subscriptions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A subscription group is a set of in-app purchases that you can create to provide users with a range of content offerings, service levels, or durations to best meet their needs. Users can only buy one subscription within a subscription group at a time. If users would want to buy more that one type of subscription ‚Äî for example, to subscribe to more than one channel in a streaming app ‚Äî you can put these in-app purchases in different subscription groups.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can verify all subscriptions within the same group with the &lt;code&gt;verifySubscriptions&lt;/code&gt; method. &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/wiki/Subscription-Groups&#34;&gt;Learn more on the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;The framework provides a simple block based API with robust error handling on top of the existing StoreKit framework. It does &lt;strong&gt;NOT&lt;/strong&gt; persist in app purchases data locally. It is up to clients to do this with a storage solution of choice (i.e. NSUserDefaults, CoreData, Keychain).&lt;/p&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/releases&#34;&gt;Releases Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Code&lt;/h2&gt; &#xA;&lt;p&gt;The project includes demo apps &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/raw/master/SwiftyStoreKit-iOS-Demo/ViewController.swift&#34;&gt;for iOS&lt;/a&gt; &lt;a href=&#34;https://github.com/bizz84/SwiftyStoreKit/raw/master/SwiftyStoreKit-macOS-Demo/ViewController.swift&#34;&gt;and macOS&lt;/a&gt; showing how to use SwiftyStoreKit. Note that the pre-registered in app purchases in the demo apps are for illustration purposes only and may not work as iTunes Connect may invalidate them.&lt;/p&gt; &#xA;&lt;h2&gt;Essential Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2016/702/&#34;&gt;Apple - WWDC16, Session 702: Using Store Kit for In-app Purchases with Swift 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/technotes/tn2387/_index.html&#34;&gt;Apple - TN2387: In-App Purchase Best Practices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/technotes/tn2413/_index.html&#34;&gt;Apple - TN2413: In-App Purchase FAQ&lt;/a&gt; (also see &lt;a href=&#34;https://developer.apple.com/library/content/technotes/tn2413/_index.html#//apple_ref/doc/uid/DTS40016228-CH1-ERROR_MESSAGES-CANNOT_CONNECT_TO_ITUNES_STORE&#34;&gt;Cannot connect to iTunes Store&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/technotes/tn2259/_index.html&#34;&gt;Apple - TN2259: Adding In-App Purchase to Your Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.apple.com/itunes-connect/developer/#/devb57be10e7&#34;&gt;iTunes Connect Developer Help - Workflow for configuring in-app purchases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Introduction.html&#34;&gt;Apple - About Receipt Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Chapters/ReceiptFields.html#//apple_ref/doc/uid/TP40010573-CH106-SW1&#34;&gt;Apple - Receipt Validation Programming Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateLocally.html&#34;&gt;Apple - Validating Receipts Locally&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Chapters/Subscriptions.html#//apple_ref/doc/uid/TP40008267-CH7-SW6&#34;&gt;Apple - Working with Subscriptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/app-store/subscriptions/&#34;&gt;Apple - Offering Subscriptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Chapters/Restoring.html#//apple_ref/doc/uid/TP40008267-CH8-SW9&#34;&gt;Apple - Restoring Purchased Products&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectInAppPurchase_Guide/Chapters/TestingInAppPurchases.html&#34;&gt;Apple - Testing In-App Purchase Products&lt;/a&gt;: includes info on duration of subscriptions in sandbox mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.objc.io/issues/17-security/receipt-validation/&#34;&gt;objc.io - Receipt Validation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I have also written about building SwiftyStoreKit on Medium:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/ios-os-x-development/how-i-got-1000-%EF%B8%8F-on-my-github-project-654d3d394ca6#.1idp27olf&#34;&gt;How I got 1000 ‚≠êÔ∏è on my GitHub Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@biz84/maintaining-a-growing-open-source-project-1d385ca84c5#.4cv2g7tdc&#34;&gt;Maintaining a Growing Open Source Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/technotes/tn2413/_index.html#//apple_ref/doc/uid/DTS40016228-CH1-TROUBLESHOOTING-WHY_ARE_MY_PRODUCT_IDENTIFIERS_BEING_RETURNED_IN_THE_INVALIDPRODUCTIDENTIFIERS_ARRAY_&#34;&gt;Apple TN 2413 - Why are my product identifiers being returned in the invalidProductIdentifiers array?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://troybrant.net/blog/2010/01/invalid-product-ids/&#34;&gt;Invalid Product IDs&lt;/a&gt;: Checklist of common mistakes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://davidbarnard.com/post/164337147440/testing-auto-renewable-subscriptions-on-ios&#34;&gt;Testing Auto-Renewable Subscriptions on iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.developer.apple.com/message/261428#261428&#34;&gt;Apple forums - iOS 11 beta sandbox - cannot connect to App Store&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Video Tutorials&lt;/h2&gt; &#xA;&lt;h4&gt;Jared Davidson: In App Purchases! (Swift 3 in Xcode : Swifty Store Kit)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dwPFtwDJ7tcb&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bizz84/SwiftyStoreKit/master/Screenshots/VideoTutorial-JaredDavidson.jpg&#34; width=&#34;50%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/rebeloper&#34;&gt;@rebeloper&lt;/a&gt;: Ultimate In-app Purchases Guide&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MP-U5gQylHc&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2488011/65576278-55cccc80-df7a-11e9-8db5-244e2afa3e46.png&#34; width=&#34;50%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Written Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://levelup.gitconnected.com/beginner-ios-dev-in-app-purchase-iap-made-simple-with-swiftystorekit-3add60e9065d&#34;&gt;In App Purchase (IAP) made simple with SwiftyStoreKit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to &lt;a href=&#34;https://github.com/phimage&#34;&gt;phimage&lt;/a&gt; for adding macOS support and receipt verification.&lt;/p&gt; &#xA;&lt;h2&gt;Apps using SwiftyStoreKit&lt;/h2&gt; &#xA;&lt;p&gt;It would be great to showcase apps using SwiftyStoreKit here. Pull requests welcome :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/every-plant-ever/id1433967019&#34;&gt;Every Plant, Ever&lt;/a&gt; - The sticker pack of every plant, ever.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://countdowns.download/ssk&#34;&gt;Countdown&lt;/a&gt; - Countdown the days until your next vacation, deadline, or event&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id1044050208&#34;&gt;MDacne&lt;/a&gt; - Acne analysis and treatment&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id930804327&#34;&gt;Pixel Picker&lt;/a&gt; - Image Color Picker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id1037000234&#34;&gt;KType&lt;/a&gt; - Space shooter game&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id1101244278&#34;&gt;iPic&lt;/a&gt; - Automatically upload images and save Markdown links&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id1102004240&#34;&gt;iHosts&lt;/a&gt; - Perfect for editing /etc/hosts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.abnehm-app.de/&#34;&gt;Arise&lt;/a&gt; - Calorie counter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id1130832864&#34;&gt;Truth Truth Lie&lt;/a&gt; - iMessage game, featured by Apple&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id557446352&#34;&gt;Tactus Music Player&lt;/a&gt; - Alternative music player app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id939540371&#34;&gt;Drops&lt;/a&gt; - Language learning app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id1063000470&#34;&gt;Fresh Snow&lt;/a&gt; - Colorado Ski Report&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://grandcanyon.zmeu.guide/&#34;&gt;Zmeu Grand Canyon&lt;/a&gt; - Interactive hiking map &amp;amp; planner&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id1073398446&#34;&gt;OB Monitor&lt;/a&gt; - The app for Texas Longhorns athletics fans&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/talk-dim-sum/id953929066&#34;&gt;Talk Dim Sum&lt;/a&gt; - Your dim sum companion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/id1160131071&#34;&gt;Sluggard&lt;/a&gt; - Perform simple exercises to reduce the risks of sedentary lifestyle&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://debts.ivanvorobei.by/ios&#34;&gt;Debts iOS&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://debts.ivanvorobei.by/macos&#34;&gt;Debts macOS&lt;/a&gt; - Track amounts owed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/id1522337788&#34;&gt;Botcher&lt;/a&gt; - Good for finding something to do&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/id1166499829&#34;&gt;Hashr&lt;/a&gt; - Generate unique password hashes based on website and master password&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/id1535761355&#34;&gt;QRFi&lt;/a&gt; - Create stylish QR Codes for WiFi&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A full list of apps is published &lt;a href=&#34;https://www.appsight.io/sdk/574154&#34;&gt;on AppSight&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SwiftGen/SwiftGen</title>
    <updated>2022-06-03T01:54:20Z</updated>
    <id>tag:github.com,2022-06-03:/SwiftGen/SwiftGen</id>
    <link href="https://github.com/SwiftGen/SwiftGen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Swift code generator for your assets, storyboards, Localizable.strings, ‚Ä¶ ‚Äî Get rid of all String-based APIs!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftGen&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.shields.io/cocoapods/v/SwiftGen.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SwiftGen.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/SwiftGen&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/SwiftGen.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-4.x-orange&#34; alt=&#34;Swift 4.x&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5.x-orange&#34; alt=&#34;Swift 5.x&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;SwiftGen is a tool to automatically generate Swift code for resources of your projects (like images, localised strings, etc), to make them type-safe to use.&lt;/p&gt; &#xA;&lt;table border=&#34;0&#34;&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img alt=&#34;SwiftGen Logo&#34; src=&#34;https://github.com/SwiftGen/Eve/raw/master/logo/logo-256.png&#34;&gt; &lt;/td&gt;&#xA;   &lt;td&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#installation&#34;&gt;Installation&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#configuration-file&#34;&gt;Configuration File&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#choosing-your-template&#34;&gt;Choosing your template&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#additional-documentation&#34;&gt;Additional documentation&lt;/a&gt; &lt;/li&gt;&#xA;    &lt;/ul&gt; Then generate constants for: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#asset-catalog&#34;&gt;Assets Catalogs&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#colors&#34;&gt;Colors&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#core-data&#34;&gt;Core Data&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#files&#34;&gt;Files&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#fonts&#34;&gt;Fonts&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#interface-builder&#34;&gt;Interface Builder files&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#json-and-yaml&#34;&gt;JSON and YAML files&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#plists&#34;&gt;Plists&lt;/a&gt; &lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/#strings&#34;&gt;Localizable strings&lt;/a&gt; &lt;/li&gt;&#xA;    &lt;/ul&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;span style=&#34;float:none&#34;&gt;&lt;/span&gt; &#xA;&lt;p&gt;There are multiple benefits in using this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avoid any risk of typo when using a String&lt;/li&gt; &#xA; &lt;li&gt;Free auto-completion&lt;/li&gt; &#xA; &lt;li&gt;Avoid the risk of using a non-existing asset name&lt;/li&gt; &#xA; &lt;li&gt;All this will be ensured by the compiler and thus avoid the risk of crashing at runtime.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, it&#39;s fully customizable thanks to Stencil templates, so even if it comes with predefined templates, you can make your own to generate whatever code fits your needs and your guidelines!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple possibilities to install SwiftGen on your machine or in your project, depending on your preferences and needs:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Download the ZIP&lt;/strong&gt; for the latest release&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/SwiftGen/SwiftGen/releases/latest&#34;&gt;Go to the GitHub page for the latest release&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Download the &lt;code&gt;swiftgen-x.y.z.zip&lt;/code&gt; file associated with that release&lt;/li&gt; &#xA;  &lt;li&gt;Extract the content of the zip archive in your project directory&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;We recommend that you &lt;strong&gt;unarchive the ZIP inside your project directory&lt;/strong&gt; and &lt;strong&gt;commit its content&lt;/strong&gt; to git. This way, &lt;strong&gt;all coworkers will use the same version of SwiftGen for this project&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you unarchived the ZIP file in a folder e.g. called &lt;code&gt;swiftgen&lt;/code&gt; at the root of your project directory, you can then invoke SwiftGen in your Script Build Phase using:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&#34;${PROJECT_DIR}/swiftgen/bin/swiftgen&#34; ‚Ä¶&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Via &lt;strong&gt;CocoaPods&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you&#39;re using CocoaPods, simply add &lt;code&gt;pod &#39;SwiftGen&#39;, &#39;~&amp;gt; 6.0&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Then execute &lt;code&gt;pod install --repo-update&lt;/code&gt; (or &lt;code&gt;pod update SwiftGen&lt;/code&gt; if you want to update an existing SwiftGen installation) to download and install the &lt;code&gt;SwiftGen&lt;/code&gt; binaries and dependencies in &lt;code&gt;Pods/SwiftGen/bin/swiftgen&lt;/code&gt; next to your project.&lt;/p&gt; &#xA; &lt;p&gt;Given that you can specify an exact version for &lt;code&gt;SwiftGen&lt;/code&gt; in your &lt;code&gt;Podfile&lt;/code&gt;, this allows you to ensure &lt;strong&gt;all coworkers will use the same version of SwiftGen for this project&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;You can then invoke SwiftGen in your Script Build Phase using:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;if [[ -f &#34;${PODS_ROOT}/SwiftGen/bin/swiftgen&#34; ]]; then&#xA;  &#34;${PODS_ROOT}/SwiftGen/bin/swiftgen&#34; ‚Ä¶&#xA;else&#xA;  echo &#34;warning: SwiftGen is not installed. Run &#39;pod install --repo-update&#39; to install it.&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Similarly, be sure to use &lt;code&gt;Pods/SwiftGen/bin/swiftgen&lt;/code&gt; instead of just &lt;code&gt;swiftgen&lt;/code&gt; where we mention commands with &lt;code&gt;swiftgen&lt;/code&gt; in the rest of the documentation.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note: SwiftGen isn&#39;t really a pod, as it&#39;s not a library your code will depend on at runtime; so the installation via CocoaPods is just a trick that installs the SwiftGen binaries in the Pods/ folder, but you won&#39;t see any swift files in the Pods/SwiftGen group in your Xcode&#39;s Pods.xcodeproj. That&#39;s normal; the SwiftGen binary is still present in that folder in the Finder.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Via &lt;strong&gt;Homebrew&lt;/strong&gt; &lt;em&gt;(system-wide installation)&lt;/em&gt;&lt;/summary&gt; &#xA; &lt;p&gt;To install SwiftGen via &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;, simply use:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew update&#xA;$ brew install swiftgen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will install SwiftGen &lt;strong&gt;system-wide&lt;/strong&gt;. The same version of SwiftGen will be used for all projects on that machine, and you should make sure all your coworkers have the same version of SwiftGen installed on their machine too.&lt;/p&gt; &#xA; &lt;p&gt;You can then invoke &lt;code&gt;swiftgen&lt;/code&gt; directly in your Script Build Phase (as it will be in your &lt;code&gt;$PATH&lt;/code&gt; already):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swiftgen ‚Ä¶ &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Via &lt;strong&gt;Mint&lt;/strong&gt; &lt;em&gt;(system-wide installation)&lt;/em&gt;&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;‚ùóÔ∏èSwiftGen 6.0 or higher only.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;To install SwiftGen via &lt;a href=&#34;https://github.com/yonaskolb/Mint&#34;&gt;Mint&lt;/a&gt;, simply use:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mint install SwiftGen/SwiftGen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Compile from source&lt;/strong&gt; &lt;em&gt;(only recommended if you need features from the `stable` branch or want to test a PR)&lt;/em&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This solution is when you want to build and install the latest version from &lt;code&gt;stable&lt;/code&gt; and have access to features which might not have been released yet.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you have &lt;code&gt;homebrew&lt;/code&gt; installed, you can use the following command to build and install the latest commit:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install swiftgen --HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Alternatively, you can clone the repository and use &lt;code&gt;rake cli:install&lt;/code&gt; to build the tool and install it from any branch, which could be useful to test SwiftGen in a fork or a Pull Request branch.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Some Ruby tools are used in the build process, and the system Ruby works well if you are running a recent macOS. However, if you are using &lt;code&gt;rbenv&lt;/code&gt; you can run &lt;code&gt;rbenv install&lt;/code&gt; to make sure you have a matching version of Ruby installed.&lt;/p&gt; &#xA; &lt;p&gt;Then install the Ruby Gems:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install bundle if it isn&#39;t installed&#xA;gem install bundle&#xA;# Install the Ruby gems from Gemfile&#xA;bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can now install to the default locations (no parameter) or to custom locations:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Binary is installed in `./.build/swiftgen/bin`&#xA;$ rake cli:install&#xA;# - OR -&#xA;# Binary will be installed in `~/swiftgen/bin``&#xA;$ rake cli:install[~/swiftgen/bin]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can then invoke SwiftGen using the path to the binary where you installed it:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/swiftgen/bin/swiftgen ‚Ä¶&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or add the path to the &lt;code&gt;bin&lt;/code&gt; folder to your &lt;code&gt;$PATH&lt;/code&gt; and invoke &lt;code&gt;swiftgen&lt;/code&gt; directly.&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Known Installation Issues On macOS Before 10.14.4&lt;/h3&gt; &#xA;&lt;p&gt;Starting with &lt;a href=&#34;https://github.com/SwiftGen/SwiftGen/releases/6.2.1&#34;&gt;SwiftGen 6.2.1&lt;/a&gt;, if you get an error similar to &lt;code&gt;dyld: Symbol not found: _$s11SubSequenceSlTl&lt;/code&gt; when running SwiftGen, you&#39;ll need to install the &lt;a href=&#34;https://support.apple.com/kb/DL1998&#34;&gt;Swift 5 Runtime Support for Command Line Tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update to macOS 10.14.4 or later&lt;/li&gt; &#xA; &lt;li&gt;Install Xcode 10.2 or later at &lt;code&gt;/Applications/Xcode.app&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rebuild SwiftGen from source using Xcode 10.2 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration File&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùóÔ∏è If you&#39;re migrating from older SwiftGen versions, don&#39;t forget to &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/MigrationGuide.md&#34;&gt;read the Migration Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;SwiftGen is provided as a single command-line tool which uses a configuration file to define the various parsers to run (depending on the type of input files you need to parse) and their parameters.&lt;/p&gt; &#xA;&lt;p&gt;To create a sample configuration file as a starting point to adapt to your needs, run &lt;code&gt;swiftgen config init&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each parser described in the &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/ConfigFile.md&#34;&gt;configuration file&lt;/a&gt; (&lt;code&gt;strings&lt;/code&gt;, &lt;code&gt;fonts&lt;/code&gt;, &lt;code&gt;ib&lt;/code&gt;, ‚Ä¶) typically corresponds to a type of input resources to parse (strings files, IB files, Font files, JSON files, ‚Ä¶), allowing you to generate constants for each types of those input files.&lt;/p&gt; &#xA;&lt;p&gt;To use SwiftGen, simply create a &lt;code&gt;swiftgen.yml&lt;/code&gt; YAML file (either manually or using &lt;code&gt;swiftgen config init&lt;/code&gt;) then edit it to adapt to your project. The config file should list all the parsers to invoke, and for each parser, the list of inputs/outputs/templates/parameters to use for it.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;strings:&#xA;  inputs: Resources/Base.lproj&#xA;  outputs:&#xA;    - templateName: structured-swift5&#xA;      output: Generated/Strings.swift&#xA;xcassets:&#xA;  inputs:&#xA;    - Resources/Images.xcassets&#xA;    - Resources/MoreImages.xcassets&#xA;    - Resources/Colors.xcassets&#xA;  outputs:&#xA;    - templateName: swift5&#xA;      output: Generated/Assets.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you just have to invoke &lt;code&gt;swiftgen config run&lt;/code&gt;, or even just &lt;code&gt;swiftgen&lt;/code&gt; for short, and it will execute what&#39;s described in the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/ConfigFile.md&#34;&gt;The dedicated documentation&lt;/a&gt; explains the syntax and possibilities in details ‚Äì like how to pass custom parameters to your templates, use &lt;code&gt;swiftgen config lint&lt;/code&gt; to validate your config file, how to use alternate config files, and other tips.&lt;/p&gt; &#xA;&lt;p&gt;There are also additional subcommands you can invoke from the command line to manage and configure SwiftGen:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;swiftgen config&lt;/code&gt; subcommand to help you with the configuration file, especially &lt;code&gt;swiftgen config init&lt;/code&gt; to create a starting point for your config and &lt;code&gt;swiftgen config lint&lt;/code&gt; to validate that your Config file is valid and has no errors&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;swiftgen template&lt;/code&gt; subcommands to help you print, duplicate, find and manage templates bundled with SwiftGen&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lastly, you can use &lt;code&gt;--help&lt;/code&gt; on &lt;code&gt;swiftgen&lt;/code&gt; or one of its subcommand to see the detailed usage.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Directly invoking a parser without a config file&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;While we highly recommend the use a configuration file for performance reasons (especially if you have multiple outputs, but also because it&#39;s more flexible), it&#39;s also possible to directly invoke the available parsers individually using &lt;code&gt;swiftgen run&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;swiftgen run colors [OPTIONS] DIRORFILE1 ‚Ä¶&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;swiftgen run coredata [OPTIONS] DIRORFILE1 ‚Ä¶&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;swiftgen run files [OPTIONS] DIRORFILE1 ‚Ä¶&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;swiftgen run fonts [OPTIONS] DIRORFILE1 ‚Ä¶&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;swiftgen run ib [OPTIONS] DIRORFILE1 ‚Ä¶&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;swiftgen run json [OPTIONS] DIRORFILE1 ‚Ä¶&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;swiftgen run plist [OPTIONS] DIRORFILE1 ‚Ä¶&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;swiftgen run strings [OPTIONS] DIRORFILE1 ‚Ä¶&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;swiftgen run xcassets [OPTIONS] DIRORFILE1 ‚Ä¶&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;swiftgen run yaml [OPTIONS] DIRORFILE1 ‚Ä¶&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;One rare cases where this might be useful ‚Äî as opposed to using a config file ‚Äî is if you are working on a custom template and want to quickly test the specific parser you&#39;re working on at each iteration/version of your custom template, until you&#39;re happy with it.&lt;/p&gt; &#xA; &lt;p&gt;Each parser command generally accepts the same options and syntax, and they mirror the options and parameters from the configuration file:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;--output FILE&lt;/code&gt; or &lt;code&gt;-o FILE&lt;/code&gt;: set the file where to write the generated code. If omitted, the generated code will be printed on &lt;code&gt;stdout&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--templateName NAME&lt;/code&gt; or &lt;code&gt;-n NAME&lt;/code&gt;: define the Stencil template to use (by name, see &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/templates&#34;&gt;here for more info&lt;/a&gt;) to generate the output.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--templatePath PATH&lt;/code&gt; or &lt;code&gt;-p PATH&lt;/code&gt;: define the Stencil template to use, using a full path.&lt;/li&gt; &#xA;  &lt;li&gt;Note: you should specify one and only one template when invoking SwiftGen. You have to use either &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; but should not use both at the same time (it wouldn&#39;t make sense anyway and you&#39;ll get an error if you try)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--filter REGEX&lt;/code&gt; or &lt;code&gt;-f REGEX&lt;/code&gt;: the filter to apply to each input path. Filters are applied to actual (relative) paths, not just the filename. Each command has a default filter that you can override with this option.&lt;/li&gt; &#xA;  &lt;li&gt;Note: use &lt;code&gt;.+&lt;/code&gt; to match multiple characters (at least one), and don&#39;t forget to escape the dot (&lt;code&gt;\.&lt;/code&gt;) if you want to match a literal dot like for an extension. Add &lt;code&gt;$&lt;/code&gt; at the end to ensure the path ends with the extension you want. Regular expressions will be case sensitive by default, and not anchored to the start/end of a path. For example, use &lt;code&gt;.+\.xib$&lt;/code&gt; to match files with a &lt;code&gt;.xib&lt;/code&gt; extension. Use a tool such as &lt;a href=&#34;https://regexr.com&#34;&gt;RegExr&lt;/a&gt; to ensure you&#39;re using a valid regular expression.&lt;/li&gt; &#xA;  &lt;li&gt;Each command supports multiple input files (or directories where applicable).&lt;/li&gt; &#xA;  &lt;li&gt;You can always use the &lt;code&gt;--help&lt;/code&gt; flag to see what options a command accept, e.g. &lt;code&gt;swiftgen run xcassets --help&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Choosing your template&lt;/h2&gt; &#xA;&lt;p&gt;SwiftGen is based on templates (it uses &lt;a href=&#34;https://github.com/stencilproject/Stencil&#34;&gt;Stencil&lt;/a&gt; as its template engine). This means that &lt;strong&gt;you can choose the template that fits the Swift version you&#39;re using&lt;/strong&gt; ‚Äî and also the one that best fits your preferences ‚Äî to &lt;strong&gt;adapt the generated code to your own conventions and Swift version&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bundled templates vs. Custom ones&lt;/h3&gt; &#xA;&lt;p&gt;SwiftGen comes bundled with some templates for each of the parsers (&lt;code&gt;colors&lt;/code&gt;, &lt;code&gt;coredata&lt;/code&gt;, &lt;code&gt;files&lt;/code&gt;, &lt;code&gt;fonts&lt;/code&gt;, &lt;code&gt;ib&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;plist&lt;/code&gt;, &lt;code&gt;strings&lt;/code&gt;, &lt;code&gt;xcassets&lt;/code&gt;, &lt;code&gt;yaml&lt;/code&gt;), which will fit most needs; simply use the &lt;code&gt;templateName&lt;/code&gt; output option to specify the name of the template to use. But you can also create your own templates if the bundled ones don&#39;t suit your coding conventions or needs: just store them anywhere (like in your project repository) and use the &lt;code&gt;templatePath&lt;/code&gt; output option instead of &lt;code&gt;templateName&lt;/code&gt;, to specify their path.&lt;/p&gt; &#xA;&lt;p&gt;üí° You can use the &lt;code&gt;swiftgen template list&lt;/code&gt; command to list all the available bundled templates for each parser, and use &lt;code&gt;swiftgen template cat&lt;/code&gt; to show a template&#39;s content and duplicate it to create your own variation.&lt;/p&gt; &#xA;&lt;p&gt;For more information about how to create your own templates, &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/Articles/Creating-custom-templates.md&#34;&gt;see the dedicated documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Templates bundled with SwiftGen:&lt;/h3&gt; &#xA;&lt;p&gt;As explained above, you can use &lt;code&gt;swiftgen template list&lt;/code&gt; to list all templates bundled with SwiftGen. For most SwiftGen parsers, we provide, among others:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;swift4&lt;/code&gt; template, compatible with Swift 4&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;swift5&lt;/code&gt; template, compatible with Swift 5&lt;/li&gt; &#xA; &lt;li&gt;Other variants, like &lt;code&gt;flat-swift4/5&lt;/code&gt; and &lt;code&gt;structured-swift4/5&lt;/code&gt; templates for Strings, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can &lt;strong&gt;find the documentation for each bundled template &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/templates&#34;&gt;here in the repo&lt;/a&gt;&lt;/strong&gt;, with documentation organized as one folder per SwiftGen parser, then one MarkDown file per template. You can also use &lt;code&gt;swiftgen template doc&lt;/code&gt; to open that documentation page in your browser directly from your terminal.&lt;/p&gt; &#xA;&lt;p&gt;Each MarkDown file documents the Swift Version it&#39;s aimed for, the use case for that template (in which cases you might favor that template over others), the available parameters to customize it on invocation (using the &lt;code&gt;params:&lt;/code&gt; key in your config file), and some code examples.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Don&#39;t hesitate to make PRs to share your improvements suggestions on the bundled templates üòâ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Additional documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Playground&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;SwiftGen.playground&lt;/code&gt; available in this repository will allow you to play with the code that the tool typically generates, and see some examples of how you can take advantage of it.&lt;/p&gt; &#xA;&lt;p&gt;This allows you to have a quick look at how typical code generated by SwiftGen looks like, and how you will then use the generated constants in your code.&lt;/p&gt; &#xA;&lt;h3&gt;Dedicated Documentation in Markdown&lt;/h3&gt; &#xA;&lt;p&gt;There is a lot of documentation in the form of Markdown files in this repository, and in the related &lt;a href=&#34;https://github.com/SwiftGen/StencilSwiftKit&#34;&gt;StencilSwiftKit&lt;/a&gt; repository as well.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/&#34;&gt;check the &#34;Documentation&#34; folder&lt;/a&gt; of each repository.&lt;/p&gt; &#xA;&lt;p&gt;Especially, in addition to the previously mentioned &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/MigrationGuide.md&#34;&gt;Migration Guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/ConfigFile.md&#34;&gt;Configuration File&lt;/a&gt; documentation, the &lt;code&gt;Documentation/&lt;/code&gt; folder in the SwiftGen repository also includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/templates/&#34;&gt;&lt;code&gt;templates&lt;/code&gt; subdirectory&lt;/a&gt; that details the documentation for each of the templates bundled with SwiftGen (when to use each template, what the output will look like, and custom parameters to adjust them, ‚Ä¶)&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/SwiftGenKit%20Contexts/&#34;&gt;&lt;code&gt;SwiftGenKit Contexts&lt;/code&gt; subdirectory&lt;/a&gt; that details the structure of the &#34;Stencil Contexts&#34;, i.e. the Dictionary/YAML representation resulting of parsing your input files. This documentation is useful for people wanting to write their own templates, so that they know the structure and various keys available when writing their template, to construct the wanted generated output accordingly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/Articles/&#34;&gt;Various articles&lt;/a&gt; to provide best practices &amp;amp; tips on how to better take advantage of SwiftGen in your projects: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/Articles/Xcode-Integration.md&#34;&gt;Integrate SwiftGen in your Xcode project&lt;/a&gt; ‚Äî so it rebuilds the constants every time you build&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/Articles/SwiftLint-Integration.md&#34;&gt;Configure SwiftLint to help your developers use constants generated by SwiftGen&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/Articles/Creating-custom-templates.md&#34;&gt;Create a custom template&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/Articles/Watch-a-folder-for-changes.md&#34;&gt;watch a folder to auto-regenerate an output every time you save the template you&#39;re working on&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;‚Ä¶and more&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tutorials&lt;/h3&gt; &#xA;&lt;p&gt;You can also find other help &amp;amp; tutorial material on the internet, like &lt;a href=&#34;https://github.com/FrenchKit/Mastering-code-generation-Classroom&#34;&gt;this classroom about Code Generation I gave at FrenchKit in Sept&#39;17&lt;/a&gt; ‚Äî and its wiki detailing a step-by-step tutorial about installing and using SwiftGen (and Sourcery too)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Available Parsers&lt;/h1&gt; &#xA;&lt;h2&gt;Asset Catalog&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;xcassets:&#xA;  inputs: /dir/to/search/for/imageset/assets&#xA;  outputs:&#xA;    templateName: swift5&#xA;    output: Assets.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate an &lt;code&gt;enum Asset&lt;/code&gt; with one &lt;code&gt;static let&lt;/code&gt; per asset (image set, color set, data set, ‚Ä¶) in your assets catalog, so that you can use them as constants.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;internal enum Asset {&#xA;  internal enum Files {&#xA;    internal static let data = DataAsset(value: &#34;Data&#34;)&#xA;    internal static let readme = DataAsset(value: &#34;README&#34;)&#xA;  }&#xA;  internal enum Food {&#xA;    internal enum Exotic {&#xA;      internal static let banana = ImageAsset(value: &#34;Exotic/Banana&#34;)&#xA;      internal static let mango = ImageAsset(value: &#34;Exotic/Mango&#34;)&#xA;    }&#xA;    internal static let `private` = ImageAsset(value: &#34;private&#34;)&#xA;  }&#xA;  internal enum Styles {&#xA;    internal enum Vengo {&#xA;      internal static let primary = ColorAsset(value: &#34;Vengo/Primary&#34;)&#xA;      internal static let tint = ColorAsset(value: &#34;Vengo/Tint&#34;)&#xA;    }&#xA;  }&#xA;  internal enum Symbols {&#xA;    internal static let exclamationMark = SymbolAsset(name: &#34;Exclamation Mark&#34;)&#xA;    internal static let plus = SymbolAsset(name: &#34;Plus&#34;)&#xA;  }&#xA;  internal enum Targets {&#xA;    internal static let bottles = ARResourceGroupAsset(name: &#34;Bottles&#34;)&#xA;    internal static let paintings = ARResourceGroupAsset(name: &#34;Paintings&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Usage Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// You can create new images by referring to the enum instance and calling `.image` on it:&#xA;let bananaImage = Asset.Exotic.banana.image&#xA;let privateImage = Asset.private.image&#xA;&#xA;// You can create colors by referring to the enum instance and calling `.color` on it:&#xA;let primaryColor = Asset.Styles.Vengo.primary.color&#xA;let tintColor = Asset.Styles.Vengo.tint.color&#xA;&#xA;// You can create data items by referring to the enum instance and calling `.data` on it:&#xA;let data = Asset.data.data&#xA;let readme = Asset.readme.data&#xA;&#xA;// You can load an AR resource group&#39;s items using:&#xA;let bottles = Asset.Targets.bottles.referenceObjects&#xA;let paintings = Asset.Targets.paintings.referenceImages&#xA;&#xA;// You can create new symbol images by referring to the enum instance and calling `.image` on it (with or without configuration)&#xA;let plus = Asset.Symbols.plus.image&#xA;let style = UIImage.SymbolConfiguration(textStyle: .headline)&#xA;let styled = Asset.Symbols.exclamationMark.image(with: style)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Colors&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùóÔ∏è We recommend to define your colors in your Assets Catalogs and use the &lt;code&gt;xcassets&lt;/code&gt; parser (see above) to generate color constants, instead of using this &lt;code&gt;colors&lt;/code&gt; parser described below.&lt;br&gt; The &lt;code&gt;colors&lt;/code&gt; parser below is mainly useful if you support older versions of iOS where colors can&#39;t be defined in Asset Catalogs, or if you want to use Android&#39;s &lt;code&gt;colors.xml&lt;/code&gt; files as input.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;colors:&#xA;  inputs: /path/to/colors-file.txt&#xA;  outputs:&#xA;    templateName: swift5&#xA;    output: Colors.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a &lt;code&gt;enum ColorName&lt;/code&gt; with one &lt;code&gt;static let&lt;/code&gt; per color listed in the text file passed as argument.&lt;/p&gt; &#xA;&lt;p&gt;The input file is expected to be either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Sources/TestUtils/Fixtures/Resources/Colors/extra.txt&#34;&gt;plain text file&lt;/a&gt;, with one line per color to register, each line being composed by the Name to give to the color, followed by &#34;:&#34;, followed by the Hex representation of the color (like &lt;code&gt;rrggbb&lt;/code&gt; or &lt;code&gt;rrggbbaa&lt;/code&gt;, optionally prefixed by &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;0x&lt;/code&gt;) or the name of another color in the file. Whitespaces are ignored.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Sources/TestUtils/Fixtures/Resources/Colors/colors.json&#34;&gt;JSON file&lt;/a&gt;, representing a dictionary of names -&amp;gt; values, each value being the hex representation of the color&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Sources/TestUtils/Fixtures/Resources/Colors/colors.xml&#34;&gt;XML file&lt;/a&gt;, expected to be the same format as the Android colors.xml files, containing tags &lt;code&gt;&amp;lt;color name=&#34;AColorName&#34;&amp;gt;AColorHexRepresentation&amp;lt;/color&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/DrawColor/Concepts/AboutColorLists.html#//apple_ref/doc/uid/20000757-BAJHJEDI&#34;&gt;&lt;code&gt;*.clr&lt;/code&gt; file&lt;/a&gt; used by Apple&#39;s Color Palettes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example you can use this command to generate colors from one of your system color lists:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;colors:&#xA;  inputs: ~/Library/Colors/MyColors.clr&#xA;  outputs:&#xA;    templateName: swift5&#xA;    output: Colors.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generated code will look the same as if you&#39;d use a text file.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt; &#xA; &lt;p&gt;Given the following &lt;code&gt;colors.txt&lt;/code&gt; file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;Cyan-Color       : 0xff66ccff&#xA;ArticleTitle     : #33fe66&#xA;ArticleBody      : 339666&#xA;ArticleFootnote  : ff66ccff&#xA;Translucent      : ffffffcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The generated code will look like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;internal struct ColorName {&#xA;  internal let rgbaValue: UInt32&#xA;  internal var color: Color { return Color(named: self) }&#xA;&#xA;  /// &amp;lt;span style=&#34;display:block;width:3em;height:2em;border:1px solid black;background:#339666&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;  /// Alpha: 100% &amp;lt;br/&amp;gt; (0x339666ff)&#xA;  internal static let articleBody = ColorName(rgbaValue: 0x339666ff)&#xA;  /// &amp;lt;span style=&#34;display:block;width:3em;height:2em;border:1px solid black;background:#ff66cc&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;  /// Alpha: 100% &amp;lt;br/&amp;gt; (0xff66ccff)&#xA;  internal static let articleFootnote = ColorName(rgbaValue: 0xff66ccff)&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Usage Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// You can create colors with the convenience constructor like this:&#xA;let title = UIColor(named: .articleBody)  // iOS&#xA;let footnote = NSColor(named: .articleFootnote) // macOS&#xA;&#xA;// Or as an alternative, you can refer to enum instance and call .color on it:&#xA;let sameTitle = ColorName.articleBody.color&#xA;let sameFootnote = ColorName.articleFootnote.color&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, no need to enter the color red, green, blue, alpha values each time and create ugly constants in the global namespace for them.&lt;/p&gt; &#xA;&lt;h2&gt;Core Data&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;coredata:&#xA;  inputs: /path/to/model.xcdatamodeld&#xA;  outputs:&#xA;    templateName: swift5&#xA;    output: CoreData.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will parse the specified core data model(s), generate a class for each entity in your model containing all the attributes, and a few extensions if needed for relationships and predefined fetch requests.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;internal class MainEntity: NSManagedObject {&#xA;  internal class var entityName: String {&#xA;    return &#34;MainEntity&#34;&#xA;  }&#xA;&#xA;  internal class func entity(in managedObjectContext: NSManagedObjectContext) -&amp;gt; NSEntityDescription? {&#xA;    return NSEntityDescription.entity(forEntityName: entityName, in: managedObjectContext)&#xA;  }&#xA;&#xA;  @nonobjc internal class func makeFetchRequest() -&amp;gt; NSFetchRequest&amp;lt;MainEntity&amp;gt; {&#xA;    return NSFetchRequest&amp;lt;MainEntity&amp;gt;(entityName: entityName)&#xA;  }&#xA;&#xA;  @NSManaged internal var attributedString: NSAttributedString?&#xA;  @NSManaged internal var binaryData: Data?&#xA;  @NSManaged internal var boolean: Bool&#xA;  @NSManaged internal var date: Date?&#xA;  @NSManaged internal var float: Float&#xA;  @NSManaged internal var int64: Int64&#xA;  internal var integerEnum: IntegerEnum {&#xA;    get {&#xA;      let key = &#34;integerEnum&#34;&#xA;      willAccessValue(forKey: key)&#xA;      defer { didAccessValue(forKey: key) }&#xA;&#xA;      guard let value = primitiveValue(forKey: key) as? IntegerEnum.RawValue,&#xA;        let result = IntegerEnum(rawValue: value) else {&#xA;        fatalError(&#34;Could not convert value for key &#39;\(key)&#39; to type &#39;IntegerEnum&#39;&#34;)&#xA;      }&#xA;      return result&#xA;    }&#xA;    set {&#xA;      let key = &#34;integerEnum&#34;&#xA;      willChangeValue(forKey: key)&#xA;      defer { didChangeValue(forKey: key) }&#xA;&#xA;      setPrimitiveValue(newValue.rawValue, forKey: key)&#xA;    }&#xA;  }&#xA;  @NSManaged internal var manyToMany: Set&amp;lt;SecondaryEntity&amp;gt;&#xA;}&#xA;&#xA;// MARK: Relationship ManyToMany&#xA;&#xA;extension MainEntity {&#xA;  @objc(addManyToManyObject:)&#xA;  @NSManaged public func addToManyToMany(_ value: SecondaryEntity)&#xA;&#xA;  @objc(removeManyToManyObject:)&#xA;  @NSManaged public func removeFromManyToMany(_ value: SecondaryEntity)&#xA;&#xA;  @objc(addManyToMany:)&#xA;  @NSManaged public func addToManyToMany(_ values: Set&amp;lt;SecondaryEntity&amp;gt;)&#xA;&#xA;  @objc(removeManyToMany:)&#xA;  @NSManaged public func removeFromManyToMany(_ values: Set&amp;lt;SecondaryEntity&amp;gt;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Usage Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Fetch all the instances of MainEntity&#xA;let request = MainEntity.makeFetchRequest()&#xA;let mainItems = try myContext.execute(request)&#xA;&#xA;// Type-safe relationships: `relatedItem` will be a `SecondaryEntity?` in this case&#xA;let relatedItem = myMainItem.manyToMany.first&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;files:&#xA;  inputs: path/to/search&#xA;  filter: .+\.mp4$&#xA;  outputs:&#xA;    templateName: structured-swift5&#xA;    output: Files.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The files parser is intended to just list the name and mimetype of the files and subdirectories in a given directory. This will recursively search the specified directory using the given filter (default &lt;code&gt;.*&lt;/code&gt;), defining a &lt;code&gt;struct File&lt;/code&gt; for each matching file, and an hierarchical enum representing the directory structure of files.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;internal enum Files {&#xA;  /// test.txt&#xA;  internal static let testTxt = File(name: &#34;test&#34;, ext: &#34;txt&#34;, path: &#34;&#34;, mimeType: &#34;text/plain&#34;)&#xA;  /// subdir/&#xA;  internal enum Subdir {&#xA;    /// subdir/A Video With Spaces.mp4&#xA;    internal static let aVideoWithSpacesMp4 = File(name: &#34;A Video With Spaces&#34;, ext: &#34;mp4&#34;, path: &#34;subdir&#34;, mimeType: &#34;video/mp4&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Usage Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Access files using the `url` or `path` fields&#xA;let txt = Files.testTxt.url&#xA;let video = Files.Subdir.aVideoWithSpacesMp4.path&#xA;&#xA;// In addition, there are `url(locale:)` and `path(locale:)` to specify a locale&#xA;let localeTxt = Files.testTxt.url(locale: Locale.current)&#xA;let localeVideo = Files.Subdir.aVideoWithSpacesMp4.path(locale: Locale.current)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flat Structure Support&lt;/h3&gt; &#xA;&lt;p&gt;SwiftGen also has a template if you&#39;re not interested in keeping the folder structure in the generated code.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the flat bundled template&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;internal enum Files {&#xA;  /// test.txt&#xA;  internal static let testTxt = File(name: &#34;test&#34;, ext: &#34;txt&#34;, path: &#34;&#34;, mimeType: &#34;text/plain&#34;)&#xA;  /// subdir/A Video With Spaces.mp4&#xA;  internal static let aVideoWithSpacesMp4 = File(name: &#34;A Video With Spaces&#34;, ext: &#34;mp4&#34;, path: &#34;subdir&#34;, mimeType: &#34;video/mp4&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Given the same file and folder structure as above the usage will now be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Access files using the `url` or `path` fields&#xA;let txt = Files.testTxt.url&#xA;let video = Files.aVideoWithSpacesMp4.path&#xA;&#xA;// In addition, there are `url(locale:)` and `path(locale:)` to specify a locale&#xA;let localeTxt = Files.testTxt.url(locale: Locale.current)&#xA;let localeVideo = Files.aVideoWithSpacesMp4.path(locale: Locale.current)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fonts&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;fonts:&#xA;  inputs: /path/to/font/dir&#xA;  outputs:&#xA;    templateName: swift5&#xA;    output: Fonts.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will recursively go through the specified directory, finding any typeface files (TTF, OTF, ‚Ä¶), defining a &lt;code&gt;struct FontFamily&lt;/code&gt; for each family, and an enum nested under that family that will represent the font styles.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;internal enum FontFamily {&#xA;  internal enum SFNSDisplay: String, FontConvertible {&#xA;    internal static let regular = FontConvertible(name: &#34;.SFNSDisplay-Regular&#34;, family: &#34;.SF NS Display&#34;, path: &#34;SFNSDisplay-Regular.otf&#34;)&#xA;  }&#xA;  internal enum ZapfDingbats: String, FontConvertible {&#xA;    internal static let regular = FontConvertible(name: &#34;ZapfDingbatsITC&#34;, family: &#34;Zapf Dingbats&#34;, path: &#34;ZapfDingbats.ttf&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Usage Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// You can create fonts with the convenience constructor like this:&#xA;let displayRegular = UIFont(font: FontFamily.SFNSDisplay.regular, size: 20.0) // iOS&#xA;let dingbats = NSFont(font: FontFamily.ZapfDingbats.regular, size: 20.0)  // macOS&#xA;&#xA;// Or as an alternative, you can refer to enum instance and call .font on it:&#xA;let sameDisplayRegular = FontFamily.SFNSDisplay.regular.font(size: 20.0)&#xA;let sameDingbats = FontFamily.ZapfDingbats.regular.font(size: 20.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interface Builder&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ib:&#xA;  inputs: /dir/to/search/for/storyboards&#xA;  outputs:&#xA;    - templateName: scenes-swift5&#xA;      output: Storyboard Scenes.swift&#xA;    - templateName: segues-swift5&#xA;      output: Storyboard Segues.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate an &lt;code&gt;enum&lt;/code&gt; for each of your &lt;code&gt;NSStoryboard&lt;/code&gt;/&lt;code&gt;UIStoryboard&lt;/code&gt;, with respectively one &lt;code&gt;static let&lt;/code&gt; per storyboard scene or segue.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt; &#xA; &lt;p&gt;The generated code will look like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// output from the scenes template&#xA;&#xA;internal enum StoryboardScene {&#xA;  internal enum Dependency: StoryboardType {&#xA;    internal static let storyboardName = &#34;Dependency&#34;&#xA;&#xA;    internal static let dependent = SceneType&amp;lt;UIViewController&amp;gt;(storyboard: Dependency.self, identifier: &#34;Dependent&#34;)&#xA;  }&#xA;  internal enum Message: StoryboardType {&#xA;    internal static let storyboardName = &#34;Message&#34;&#xA;&#xA;    internal static let messagesList = SceneType&amp;lt;UITableViewController&amp;gt;(storyboard: Message.self, identifier: &#34;MessagesList&#34;)&#xA;  }&#xA;}&#xA;&#xA;// output from the segues template&#xA;&#xA;internal enum StoryboardSegue {&#xA;  internal enum Message: String, SegueType {&#xA;    case customBack = &#34;CustomBack&#34;&#xA;    case embed = &#34;Embed&#34;&#xA;    case nonCustom = &#34;NonCustom&#34;&#xA;    case showNavCtrl = &#34;Show-NavCtrl&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Usage Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// You can instantiate scenes using the `instantiate` method:&#xA;let vc = StoryboardScene.Dependency.dependent.instantiate()&#xA;&#xA;// You can perform segues using:&#xA;vc.perform(segue: StoryboardSegue.Message.embed)&#xA;&#xA;// or match them (in prepareForSegue):&#xA;override func prepare(for segue: UIStoryboardSegue, sender: Any?) {&#xA;  switch StoryboardSegue.Message(segue) {&#xA;  case .embed?:&#xA;    // Prepare for your custom segue transition, passing information to the destination VC&#xA;  case .customBack?:&#xA;    // Prepare for your custom segue transition, passing information to the destination VC&#xA;  default:&#xA;    // Other segues from other scenes, not handled by this VC&#xA;    break&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JSON and YAML&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;json:&#xA;  inputs: /path/to/json/dir-or-file&#xA;  outputs:&#xA;    templateName: runtime-swift5&#xA;    output: JSON.swift&#xA;yaml:&#xA;  inputs: /path/to/yaml/dir-or-file&#xA;  outputs:&#xA;    templateName: inline-swift5&#xA;    output: YAML.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will parse the given file, or when given a directory, recursively search for JSON and YAML files. It will define an &lt;code&gt;enum&lt;/code&gt; for each file (and documents in a file where needed), and type-safe constants for the content of the file.&lt;/p&gt; &#xA;&lt;p&gt;Unlike other parsers, this one is intended to allow you to use more custom inputs (as the formats are quite open to your needs) to generate your code. This means that for these parsers (and the &lt;code&gt;plist&lt;/code&gt; one), you&#39;ll probably be more likely to use custom templates to generate code properly adapted/tuned to your inputs, rather than using the bundled templates. To read more about writing your own custom templates, see &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/Articles/Creating-custom-templates.md&#34;&gt;see the dedicated documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;internal enum JSONFiles {&#xA;  internal enum Info {&#xA;    private static let _document = JSONDocument(path: &#34;info.json&#34;)&#xA;    internal static let key1: String = _document[&#34;key1&#34;]&#xA;    internal static let key2: String = _document[&#34;key2&#34;]&#xA;    internal static let key3: [String: Any] = _document[&#34;key3&#34;]&#xA;  }&#xA;  internal enum Sequence {&#xA;    internal static let items: [Int] = objectFromJSON(at: &#34;sequence.json&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Usage Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// This will be a dictionary&#xA;let foo = JSONFiles.Info.key3&#xA;&#xA;// This will be an [Int]&#xA;let bar = JSONFiles.Sequence.items&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plists&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;plist:&#xA;  inputs: /path/to/plist/dir-or-file&#xA;  outputs:&#xA;    templateName: runtime-swift5&#xA;    output: Plist.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will parse the given file, or when given a directory, recursively search for Plist files. It will define an &lt;code&gt;enum&lt;/code&gt; for each file (and documents in a file where needed), and type-safe constants for the content of the file.&lt;/p&gt; &#xA;&lt;p&gt;Unlike other parsers, this one is intended to allow you to use more custom inputs (as the format is quite open to your needs) to generate your code. This means that for this parser (and the &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;yaml&lt;/code&gt; ones), you&#39;ll probably be more likely to use custom templates to generate code properly adapted/tuned to your inputs, rather than using the bundled templates. To read more about writing your own custom templates, see &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/Articles/Creating-custom-templates.md&#34;&gt;see the dedicated documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the bundled template&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;internal enum PlistFiles {&#xA;  internal enum Test {&#xA;    internal static let items: [String] = arrayFromPlist(at: &#34;array.plist&#34;)&#xA;  }&#xA;  internal enum Stuff {&#xA;    private static let _document = PlistDocument(path: &#34;dictionary.plist&#34;)&#xA;    internal static let key1: Int = _document[&#34;key1&#34;]&#xA;    internal static let key2: [String: Any] = _document[&#34;key2&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Usage Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// This will be an array&#xA;let foo = PlistFiles.Test.items&#xA;&#xA;// This will be an Int&#xA;let bar = PlistFiles.Stuff.key1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Strings&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;strings:&#xA;  inputs: /path/to/language.lproj&#xA;  outputs:&#xA;    templateName: structured-swift5&#xA;    output: Strings.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a Swift &lt;code&gt;enum L10n&lt;/code&gt; that will map all your &lt;code&gt;Localizable.strings&lt;/code&gt; and &lt;code&gt;Localizable.stringsdict&lt;/code&gt; (or other tables) keys to a &lt;code&gt;static let&lt;/code&gt; constant. And if it detects placeholders like &lt;code&gt;%@&lt;/code&gt;,&lt;code&gt;%d&lt;/code&gt;,&lt;code&gt;%f&lt;/code&gt;, it will generate a &lt;code&gt;static func&lt;/code&gt; with the proper argument types instead, to provide type-safe formatting.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that all dots within the key names are converted to dots in code (by using nested enums). You can provide a different separator than &lt;code&gt;.&lt;/code&gt; to split key names into substructures by using a parser option ‚Äì see &lt;a href=&#34;https://raw.githubusercontent.com/SwiftGen/SwiftGen/stable/Documentation/Parsers/strings.md&#34;&gt;the parser documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the structured bundled template&lt;/summary&gt; &#xA; &lt;p&gt;Given the following &lt;code&gt;Localizable.strings&lt;/code&gt; file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#34;alert_title&#34; = &#34;Title of the alert&#34;;&#xA;&#34;alert_message&#34; = &#34;Some alert body there&#34;;&#xA;&#34;bananas.owner&#34; = &#34;Those %d bananas belong to %@.&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And the following &lt;code&gt;Localizable.stringsdict&lt;/code&gt; file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;apples.count&amp;lt;/key&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;        &amp;lt;key&amp;gt;NSStringLocalizedFormatKey&amp;lt;/key&amp;gt;&#xA;        &amp;lt;string&amp;gt;%#@apples@&amp;lt;/string&amp;gt;&#xA;        &amp;lt;key&amp;gt;apples&amp;lt;/key&amp;gt;&#xA;        &amp;lt;dict&amp;gt;&#xA;            &amp;lt;key&amp;gt;NSStringFormatSpecTypeKey&amp;lt;/key&amp;gt;&#xA;            &amp;lt;string&amp;gt;NSStringPluralRuleType&amp;lt;/string&amp;gt;&#xA;            &amp;lt;key&amp;gt;NSStringFormatValueTypeKey&amp;lt;/key&amp;gt;&#xA;            &amp;lt;string&amp;gt;d&amp;lt;/string&amp;gt;&#xA;            &amp;lt;key&amp;gt;zero&amp;lt;/key&amp;gt;&#xA;            &amp;lt;string&amp;gt;You have no apples&amp;lt;/string&amp;gt;&#xA;            &amp;lt;key&amp;gt;one&amp;lt;/key&amp;gt;&#xA;            &amp;lt;string&amp;gt;You have one apple&amp;lt;/string&amp;gt;&#xA;            &amp;lt;key&amp;gt;other&amp;lt;/key&amp;gt;&#xA;            &amp;lt;string&amp;gt;You have %d apples. Wow that is a lot!&amp;lt;/string&amp;gt;&#xA;        &amp;lt;/dict&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;em&gt;Reminder: Don&#39;t forget to end each line in your &lt;code&gt;*.strings&lt;/code&gt; files with a semicolon &lt;code&gt;;&lt;/code&gt;! Now that in Swift code we don&#39;t need semi-colons, it&#39;s easy to forget it&#39;s still required by the &lt;code&gt;Localizable.strings&lt;/code&gt; file format üòâ&lt;/em&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;The generated code will contain this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;internal enum L10n {&#xA;  /// Some alert body there&#xA;  internal static let alertMessage = L10n.tr(&#34;alert_message&#34;)&#xA;  /// Title of the alert&#xA;  internal static let alertTitle = L10n.tr(&#34;alert_title&#34;)&#xA;&#xA;  internal enum Apples {&#xA;    /// Plural format key: &#34;%#@apples@&#34;&#xA;    internal static func count(_ p1: Int) -&amp;gt; String {&#xA;      return L10n.tr(&#34;apples.count&#34;, p1)&#xA;    }&#xA;  }&#xA;&#xA;  internal enum Bananas {&#xA;    /// Those %d bananas belong to %@.&#xA;    internal static func owner(_ p1: Int, _ p2: Any) -&amp;gt; String {&#xA;      return L10n.tr(&#34;bananas.owner&#34;, p1, String(describing: p2))&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note that if the same key is present in both the &lt;code&gt;.strings&lt;/code&gt; and the &lt;code&gt;.stringsdict&lt;/code&gt; files, SwiftGen will only consider the one in the &lt;code&gt;.stringsdict&lt;/code&gt; file, as that&#39;s also how Foundation behaves at runtime.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Usage Example&lt;/h3&gt; &#xA;&lt;p&gt;Once the code has been generated by the script, you can use it this way in your Swift code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Simple strings&#xA;let message = L10n.alertMessage&#xA;let title = L10n.alertTitle&#xA;&#xA;// with parameters, note that each argument needs to be of the correct type&#xA;let apples = L10n.Apples.count(3)&#xA;let bananas = L10n.Bananas.owner(5, &#34;Olivier&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flat Strings Support&lt;/h3&gt; &#xA;&lt;p&gt;SwiftGen also has a template to support flat strings files (i.e. without splitting the keys in substructures using &#34;dot syntax&#34;). The advantage is that your keys won&#39;t be mangled in any way; the disadvantage is that auto-completion won&#39;t be as nice.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example of code generated by the flat bundled template&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;internal enum L10n {&#xA;  /// Some alert body there&#xA;  internal static let alertMessage = L10n.tr(&#34;Localizable&#34;, &#34;alert__message&#34;)&#xA;  /// Title of the alert&#xA;  internal static let alertTitle = L10n.tr(&#34;Localizable&#34;, &#34;alert__title&#34;)&#xA;  /// Plural format key: &#34;%#@apples@&#34;&#xA;  internal static func applesCount(_ p1: Int) -&amp;gt; String {&#xA;    return L10n.tr(&#34;Localizable&#34;, &#34;apples.count&#34;, p1)&#xA;  }&#xA;  /// Those %d bananas belong to %@.&#xA;  internal static func bananasOwner(_ p1: Int, _ p2: Any) -&amp;gt; String {&#xA;    return L10n.tr(&#34;Localizable&#34;, &#34;bananas.owner&#34;, p1, String(describing: p2))&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Given the same &lt;code&gt;Localizable.strings&lt;/code&gt; and &lt;code&gt;Localizable.stringsdict&lt;/code&gt; as above the usage will now be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Simple strings&#xA;let message = L10n.alertMessage&#xA;let title = L10n.alertTitle&#xA;&#xA;// with parameters, note that each argument needs to be of the correct type&#xA;let apples = L10n.applesCount(3)&#xA;let bananas = L10n.bananasOwner(5, &#34;Olivier&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Licence&lt;/h1&gt; &#xA;&lt;p&gt;This code and tool is under the MIT Licence. See the &lt;code&gt;LICENCE&lt;/code&gt; file in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;p&gt;This tool is powered by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stencilproject/Stencil&#34;&gt;Stencil&lt;/a&gt; and few other libs by &lt;a href=&#34;https://github.com/kylef&#34;&gt;Kyle Fuller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SwiftGenKit and &lt;a href=&#34;https://github.com/SwiftGen/StencilSwiftKit&#34;&gt;StencilSwiftKit&lt;/a&gt;, our internal frameworks at SwiftGen&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is currently mainly maintained by &lt;a href=&#34;https://github.com/AliSoftware&#34;&gt;@AliSoftware&lt;/a&gt; and &lt;a href=&#34;https://github.com/djbe&#34;&gt;@djbe&lt;/a&gt;. But I couldn&#39;t thank enough all the other &lt;a href=&#34;https://github.com/SwiftGen/SwiftGen/graphs/contributors&#34;&gt;contributors&lt;/a&gt; to this tool along the different versions which helped make SwiftGen awesome! üéâ&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute, don&#39;t hesitate to open a Pull Request, or even join the team!&lt;/p&gt; &#xA;&lt;h2&gt;Other Libraries / Tools&lt;/h2&gt; &#xA;&lt;p&gt;If you want to also get rid of String-based APIs not only for your resources, but also for &lt;code&gt;UITableViewCell&lt;/code&gt;, &lt;code&gt;UICollectionViewCell&lt;/code&gt; and XIB-based views, you should take a look at my Mixin &lt;a href=&#34;https://github.com/AliSoftware/Reusable&#34;&gt;Reusable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to generate Swift code from your own Swift code (so meta!), like generate &lt;code&gt;Equatable&lt;/code&gt; conformance to your types and a lot of other similar things, use &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;Sourcery&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;SwiftGen and Sourcery are complementary tools. In fact, Sourcery uses &lt;code&gt;Stencil&lt;/code&gt; too, as well as SwiftGen&#39;s &lt;code&gt;StencilSwiftKit&lt;/code&gt; so you can use the exact same syntax for your templates for both!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;http://twitter.com/aligatr&#34;&gt;follow me on twitter&lt;/a&gt; for news/updates about other projects I am creating, or &lt;a href=&#34;https://alisoftware.github.io&#34;&gt;read my blog&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RobotsAndPencils/XcodesApp</title>
    <updated>2022-06-03T01:54:20Z</updated>
    <id>tag:github.com,2022-06-03:/RobotsAndPencils/XcodesApp</id>
    <link href="https://github.com/RobotsAndPencils/XcodesApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The easiest way to install and switch between multiple versions of Xcode - with a mouse click.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/icon.png&#34; align=&#34;center&#34; width=&#34;50&#34; height=&#34;50&#34;&gt; Xcodes.app&lt;/h1&gt; &#xA;&lt;p&gt;The easiest way to install and switch between multiple versions of Xcode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you&#39;re looking for a command-line version of Xcodes.app, try &lt;a href=&#34;https://github.com/RobotsAndPencils/xcodes&#34;&gt;&lt;code&gt;xcodes&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/RobotsAndPencils/Xcodes.app/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/screenshot_light.png#gh-light-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/screenshot_dark.png#gh-dark-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List all available Xcode versions from &lt;a href=&#34;https://xcodereleases.com&#34;&gt;Xcode Releases&#39;&lt;/a&gt; data or the Apple Developer website.&lt;/li&gt; &#xA; &lt;li&gt;Install any Xcode version, fully automated from start to finish. Xcodes uses &lt;a href=&#34;https://aria2.github.io&#34;&gt;&lt;code&gt;aria2&lt;/code&gt;&lt;/a&gt;, which uses up to 16 connections to download 3-5x faster than URLSession.&lt;/li&gt; &#xA; &lt;li&gt;Automatically install new releases!&lt;/li&gt; &#xA; &lt;li&gt;Just click a button to make a version active with &lt;code&gt;xcode-select&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;View release notes, OS compatibility, included SDKs and compilers from &lt;a href=&#34;https://xcodereleases.com&#34;&gt;Xcode Releases&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dark/Light Mode supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Experiments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to the wonderful work of &lt;a href=&#34;https://github.com/saagarjha/unxip&#34;&gt;https://github.com/saagarjha/unxip&lt;/a&gt;, turn on the experiment to increase your unxipping time by up to 70%! More can be found on his repo, but bugs, high memory may occur if used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/experiment_light.jpg#gh-light-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/experiment_dark.jpg#gh-dark-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;Xcodes supports localization in several languages.&lt;/p&gt; &#xA;&lt;p&gt;The following languages are supported because of the following community users!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dompepin&#34;&gt;@dompepin&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cesartru88&#34;&gt;@cesartru88&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alexmazlov&#34;&gt;@alexmazlov&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Want to add more languages? Simply create a PR with the updated strings file.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Xcodes.app runs on macOS Big Sur 11.0 or later.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew Cask&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install --cask xcodes&#xA;&#xA;# These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download a release&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version &lt;a href=&#34;https://github.com/RobotsAndPencils/XcodesApp/releases/latest&#34;&gt;here&lt;/a&gt; using the &lt;strong&gt;Xcodes.zip&lt;/strong&gt; asset. These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/li&gt; &#xA; &lt;li&gt;Move the unzipped &lt;code&gt;Xcodes.app&lt;/code&gt; to your &lt;code&gt;/Applications&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need macOS 12 Big Sur and Xcode 13 in order to build and run Xcodes.app.&lt;/p&gt; &#xA;&lt;p&gt;If you aren&#39;t a Robots and Pencils employee you&#39;ll need to change the CODE_SIGNING_SUBJECT_ORGANIZATIONAL_UNIT build setting to your Apple Developer team ID in order for code signing validation to succeed between the main app and the privileged helper.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Unxip&lt;/code&gt; and &lt;code&gt;aria2&lt;/code&gt; must be compiled as a universal binary&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# compile for Intel&#xA; swiftc -parse-as-library -O -target x86_64-apple-macos11 unxip.swift&#xA;# compile for M1&#xA; swiftc -parse-as-library -O -target arm64-apple-macos11 unxip.swift&#xA;&#xA;# combine for universal binary&#xA; lipo -create -output unxip unxip_intel unxip_m1  &#xA;# check it&#xA; lipo -archs unxip &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notable design decisions are recorded in &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/DECISIONS.md&#34;&gt;DECISIONS.md&lt;/a&gt;. The Apple authentication flow is described in &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/Apple.paw&#34;&gt;Apple.paw&lt;/a&gt;, which will allow you to play with the API endpoints that are involved using the &lt;a href=&#34;https://paw.cloud&#34;&gt;Paw&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xcpretty/xcode-install&#34;&gt;&lt;code&gt;xcode-install&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/spaceship&#34;&gt;fastlane/spaceship&lt;/a&gt; both deserve credit for figuring out the hard parts of what makes this possible.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Releasing a new version&lt;/summary&gt; &#xA; &lt;p&gt;Follow the steps below to build and release a new version of Xcodes.app. For any of the git steps, you can use your preferred tool, but please sign the tag.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Update the version number in Xcode and commit the change, if necessary&#xA;&#xA;# Question: Did anything in XPCHelper change?&#xA;# - com.robotsandpencils.XcodesApp.Helper folder and HelperXPCShared&#xA;# - if so, bump the version number in com.robotsandpencils.XcodesApp.Helper target.&#xA;# Note: you do not have to bump the version number if nothing has changed.&#xA;# Note2: If you do bump the version, the end user, must re-install the XPCHelper and give permission again.&#xA;&#xA;# Increment the build number&#xA;scripts/increment_build_number.sh&#xA;&#xA;# Commit the change&#xA;git add Xcodes/Resources/Info.plist&#xA;git commit -asm &#34;Increment build number&#34;&#xA;&#xA;# Tag the latest commit&#xA;# Replace $VERSION and $BUILD below with the latest real values&#xA;git tag -asm &#34;v$VERSIONb$BUILD&#34; &#34;v$VERSIONb$BUILD&#34;&#xA;&#xA;# Push to origin&#xA;git push --follow-tags&#xA;&#xA;# Build the app&#xA;# Make sure you have the Xcode Selected you want to build with&#xA;scripts/package_release.sh&#xA;&#xA;# Notarize the app&#xA;# Do this from the Product directory so the app is zipped without being nested inside Product&#xA;# Create a app specific password on appleid.apple.com if you haven&#39;t already&#xA;# xcrun notarytool store-credentials &#34;AC_PASSWORD&#34; \&#xA;#              --apple-id &#34;test@example.com&#34; \&#xA;#              --team-id &#34;teamid&#34; \&#xA;#               --password &#34;app specific password&#34;&#xA;&#xA;pushd Product&#xA;../scripts/notarize.sh Xcodes.zip &amp;lt;MYORG&amp;gt;&#xA;&#xA;# Sign the .zip for Sparkle, note the signature in the output for later&#xA;# If you&#39;re warned about the signing key not being found, see the Xcodes 1Password vault for the key and installation instructions.&#xA;../scripts/sign_update Xcodes.zip&#xA;popd&#xA;&#xA;# Go to https://github.com/RobotsAndPencils/XcodesApp/releases&#xA;# If there are uncategorized PRs, add the appropriate label and run the Release Drafter action manually&#xA;# Edit the latest draft release&#xA;# Set its tag to the tag you just pushed&#xA;# Set its title to a string with the format &#34;$VERSION ($BUILD)&#34;&#xA;# Polish the draft release notes, if necessary&#xA;# Add the signature to the bottom of the release notes in a comment, like:&#xA;&amp;lt;!-- sparkle:edSignature=$SIGNATURE --&amp;gt;&#xA;# Attach the zip that was created in the Product directory to the release&#xA;# Publish the release&#xA;&#xA;# Update the [Homebrew Cask](https://github.com/RobotsAndPencils/homebrew-cask/blob/master/Casks/xcodes.rb).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.robotsandpencils.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/R&amp;amp;PLogo.png&#34; width=&#34;153&#34; height=&#34;74&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Made with ‚ù§Ô∏è by &lt;a href=&#34;http://www.robotsandpencils.com&#34;&gt;Robots &amp;amp; Pencils&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/robotsNpencils&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://github.com/robotsandpencils&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jtrivedi/Wave</title>
    <updated>2022-06-03T01:54:20Z</updated>
    <id>tag:github.com,2022-06-03:/jtrivedi/Wave</id>
    <link href="https://github.com/jtrivedi/Wave" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wave is a spring-based animation engine for iOS that makes it easy to create fluid, interruptible animations that feel great.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/jtrivedi/Wave/main/Assets/Logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Wave&lt;/h2&gt; &#xA;&lt;p&gt;Wave is a spring-based animation engine for iOS and iPadOS. It makes it easy to create fluid, interactive, and interruptible animations that feel great.&lt;/p&gt; &#xA;&lt;p&gt;Wave has no external dependencies, and can be easily dropped into existing UIKit-based projects and apps.&lt;/p&gt; &#xA;&lt;p&gt;The core feature of Wave is that all animations are &lt;em&gt;re-targetable&lt;/em&gt;, meaning that you can change an animation‚Äôs destination value in-flight, and the animation will gracefully &lt;em&gt;redirect&lt;/em&gt; to that new value.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jtrivedi/Wave/main/#features&#34;&gt;Understanding Retargeting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jtrivedi/Wave/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jtrivedi/Wave/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jtrivedi/Wave/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jtrivedi/Wave/main/#block-based-animation&#34;&gt;Block-Based Animation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jtrivedi/Wave/main/#property-based-animation&#34;&gt;Property-Based Animation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jtrivedi/Wave/main/#example-code&#34;&gt;Example Code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Understanding Retargeting&lt;/h4&gt; &#xA;&lt;p&gt;Consider these demos of the iOS Picture-in-Picture feature. The screen on the left is created with standard UIKit animations, and the one on the right is created with Wave.&lt;/p&gt; &#xA;&lt;p&gt;Though both are ‚Äúinterruptible‚Äù, the Wave-based implementation handles the interruption much better, and fluidly &lt;em&gt;arcs&lt;/em&gt; to its new destination. The UIKit animation feels stiff and jerky in comparison.&lt;/p&gt; &#xA;&lt;p&gt;At its core, &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2018/803/&#34;&gt;retargeting&lt;/a&gt; is the process of preserving an animation‚Äôs velocity even as its target changes, which Wave does automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jtrivedi/Wave/main/Assets/Retargeting.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Add Wave to your app&#39;s &lt;code&gt;Package.swift&lt;/code&gt; file, or selecting &lt;code&gt;File -&amp;gt; Add Packages&lt;/code&gt; in Xcode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/jtrivedi/Wave&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you clone the repo, you can run the sample app, which contains a few interactive demos to understand what Wave provides.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;There‚Äôs a full Wave &lt;a href=&#34;https://Wave-jtrivedi.structure.sh&#34;&gt;documentation site&lt;/a&gt; available for full API and usage documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways you can interact with Wave, depending on your needs: the block-based and property-based animations:&lt;/p&gt; &#xA;&lt;h4&gt;Block-Based Animation&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to get started is by using Wave‚Äôs block-based APIs that resemble the &lt;code&gt;UIView.animateWithDuration()&lt;/code&gt; APIs.&lt;/p&gt; &#xA;&lt;p&gt;This API lets you animate several common UIView and CALayer properties, like &lt;code&gt;frame&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt;, &lt;code&gt;backgroundColor&lt;/code&gt;, and more.&lt;/p&gt; &#xA;&lt;p&gt;For these supported properties, Wave will create, manage, and execute the required spring animations under-the-hood.&lt;/p&gt; &#xA;&lt;p&gt;For example, animating the above PiP view to its final destination is extremely simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if panGestureRecognizer.state == .ended {&#xA;&#xA;    // Create a spring with some bounciness. `response` affects the animation&#39;s duration.&#xA;    let animatedSpring = Spring(dampingRatio: 0.68, response: 0.80)&#xA;&#xA;    // Get the gesture&#39;s lift-off velocity&#xA;    let gestureVelocity = panGestureRecognizer.velocity(in: view)&#xA;&#xA;    Wave.animate(withSpring: animatedSpring, gestureVelocity: touchVelocity) {&#xA;        // Update the `center` and `scale` properties of the view&#39;s _animator_, not the view itself.&#xA;        pipView.animator.center = pipViewDestination&#xA;        pipView.animator.scale = CGPoint(x: 1.1, y: 1.1)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that at &lt;em&gt;any&lt;/em&gt; time, you can &lt;em&gt;retarget&lt;/em&gt; the view‚Äôs &lt;code&gt;center&lt;/code&gt; property to somewhere else, and it‚Äôll gracefully animate.&lt;/p&gt; &#xA;&lt;h5&gt;Supported Animatable Properties&lt;/h5&gt; &#xA;&lt;p&gt;The block-based API currently supports animating the following properties. For other properties, you can use the property-based animation API below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;frame&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bounds&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;center&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cornerRadius&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scale&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;translation&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Upcoming properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rotation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shadow color/radius/offset/opacity&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Property-Based Animation&lt;/h4&gt; &#xA;&lt;p&gt;While the block-based API is often most convenient, you may want to animate something that the block-based API doesn‚Äôt yet support (e.x. rotation). Or, you may want the flexibility of getting the intermediate spring values and driving an animation yourself (e.x. a progress value).&lt;/p&gt; &#xA;&lt;p&gt;For example, to draw the orange path of the PiP demo, we need to know the value of every &lt;code&gt;CGPoint&lt;/code&gt; from the view‚Äôs initial center, to its destination center:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// When the gesture ends, create a `CGPoint` animation from the PiP view&#39;s initial center, to its target.&#xA;// The `valueChanged` callback provides the intermediate locations of the callback, allowing us to draw the path.&#xA;&#xA;let positionAnimator = Animation&amp;lt;CGPoint&amp;gt;(spring: animatedSpring)&#xA;positionAnimator.value = pipView.center           // The presentation value&#xA;positionAnimator.target = pipView.animator.center // The target value&#xA;positionAnimator.velocity = touchVelocity&#xA;&#xA;positionAnimator.valueChanged = { [weak self] location in&#xA;    self?.drawPathPoint(at: location)&#xA;}&#xA;&#xA;positionAnimator.start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Completion Blocks&lt;/h5&gt; &#xA;&lt;p&gt;Both the block-based and property-based APIs support completion blocks. If an animation completes fully, the completion block‚Äôs &lt;code&gt;finished&lt;/code&gt; flag will be true.&lt;/p&gt; &#xA;&lt;p&gt;However, if an animation‚Äôs target was changed in-flight (‚Äúretargeted‚Äù), &lt;code&gt;finished&lt;/code&gt; will be false, while &lt;code&gt;retargeted&lt;/code&gt; will be true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Wave.animate(withSpring: Spring.defaultAnimated) {&#xA;    myView.animator.backgroundColor = .systemBlue&#xA;} completion: { finished, retargeted in&#xA;    print(finished, retargeted)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example Code&lt;/h3&gt; &#xA;&lt;p&gt;Exploring the provided sample app is a great way to get started with Wave.&lt;/p&gt; &#xA;&lt;p&gt;Simply open the &lt;code&gt;Wave-Sample&lt;/code&gt; Xcode project and hit ‚ÄúRun‚Äù. The full source code for the Picture-in-Picture demo is available there, too!&lt;/p&gt; &#xA;&lt;h3&gt;Acknowledgements&lt;/h3&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/boztalay&#34;&gt;Ben Oztalay&lt;/a&gt; for helping architect the underlying physics of Wave!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kuglee/TermiWatch</title>
    <updated>2022-06-03T01:54:20Z</updated>
    <id>tag:github.com,2022-06-03:/kuglee/TermiWatch</id>
    <link href="https://github.com/kuglee/TermiWatch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terminal Watch Face for Apple Watch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TermiWatch&lt;/h1&gt; &#xA;&lt;p&gt;Terminal Watch Face for Apple Watch.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/38mm.png&#34; alt=&#34;38 mm&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/42mm.png&#34; alt=&#34;42 mm&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/40mm.png&#34; alt=&#34;40 mm&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/44mm.png&#34; alt=&#34;44 mm&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38 mm&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;42 mm&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;40 mm&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;44 mm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://www.reddit.com/r/unixporn/comments/9ndo8o/oc_always_keep_some_terminal_with_you/&#34;&gt;this&lt;/a&gt; post on Reddit by u/quarl0w.&lt;/p&gt; &#xA;&lt;p&gt;For devices running watchOS 5 or higher.&lt;/p&gt; &#xA;&lt;h1&gt;How to install&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://itunes.apple.com/app/xcode/id497799835&#34;&gt;Xcode&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Become an Apple Developer by logging in &lt;a href=&#34;https://developer.apple.com&#34;&gt;here&lt;/a&gt;. (Select &lt;strong&gt;Account&lt;/strong&gt; and log in with your Apple ID.)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Adding a developer account to Xcode&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;strong&gt;Xcode&lt;/strong&gt; menu -&amp;gt; &lt;strong&gt;Xcode&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Preferences‚Ä¶&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Accounts&lt;/strong&gt; tab. &lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/Add_develper_account_to_xcode.png&#34; alt=&#34;Add developer account to Xcode&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button in the bottom left corner. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Select &lt;strong&gt;Apple ID&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Provide your Apple ID and password. &lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/Add_develper_account_to_xcode_2.png&#34; alt=&#34;Add developer account to Xcode 2&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;strong&gt;Manage Certificates‚Ä¶&lt;/strong&gt; button. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Click the &lt;strong&gt;+&lt;/strong&gt; button in the bottom left corner.&lt;/li&gt; &#xA;   &lt;li&gt;Select &lt;strong&gt;Apple Development&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Click the &lt;strong&gt;Done&lt;/strong&gt; button. &lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/Manage_certificates.png&#34; alt=&#34;Manage Certificates&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuring the project&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Xcode 11 or later&lt;/strong&gt;: &lt;a href=&#34;https://github.com/kuglee/TermiWatch/archive/master.zip&#34;&gt;https://github.com/kuglee/TermiWatch/archive/master.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.2: &lt;a href=&#34;https://github.com/kuglee/TermiWatch/releases/latest&#34;&gt;https://github.com/kuglee/TermiWatch/releases/latest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.1 and older: &lt;a href=&#34;https://github.com/kuglee/TermiWatch/releases/1.1.1&#34;&gt;https://github.com/kuglee/TermiWatch/releases/1.1.1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;strong&gt;TermiWatch.xcodeproj&lt;/strong&gt; in &lt;strong&gt;Xcode&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Change the project&#39;s developer account: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Select the project in the &lt;strong&gt;Project Navigator&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Click the &lt;strong&gt;Show project and targets list&lt;/strong&gt; button in the top left corner. &lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/Show_project_and_targets_list.png&#34; alt=&#34;Show project and targets list&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select the &lt;strong&gt;General&lt;/strong&gt; tab:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/Change_bundle_identifier1.png&#34; alt=&#34;Change bundle identifier 1&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For each of the 3 &lt;strong&gt;targets&lt;/strong&gt; replece &lt;em&gt;kuglee&lt;/em&gt; in the &lt;strong&gt;Bundle Identifier&lt;/strong&gt; field with the name of your developer account. (The name of your Apple ID without the &lt;em&gt;@xxxx.com&lt;/em&gt;.) &lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/Change_bundle_identifier2.png&#34; alt=&#34;Change bundle identifier 2&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Change the project&#39;s team: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Select the &lt;strong&gt;Signing &amp;amp; Capabilities&lt;/strong&gt; tab:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/Change_team1.png&#34; alt=&#34;Change team 1&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For each of the 3 &lt;strong&gt;targets&lt;/strong&gt; change the &lt;strong&gt;Team&lt;/strong&gt; to your team. (Usually this is your name.)&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/Change_team2.png&#34; alt=&#34;Change team 2&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Manually replace bundle identifiers: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Select &lt;strong&gt;Xcode&lt;/strong&gt; menu -&amp;gt; &lt;strong&gt;Find&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Find and Replace in Project‚Ä¶&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;In the &lt;strong&gt;Text&lt;/strong&gt; field type &lt;em&gt;kuglee&lt;/em&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;In the &lt;strong&gt;With&lt;/strong&gt; field type the name of your developer account. (The name of your Apple ID without the @xxxx.com.)&lt;/li&gt; &#xA;   &lt;li&gt;Click the &lt;strong&gt;Replace All&lt;/strong&gt; button. &lt;img src=&#34;https://raw.githubusercontent.com/kuglee/TermiWatch/master/Screenshots/Change_bundle_identifier3.png&#34; alt=&#34;Change bundle identifier 3&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installing the app&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Plug your phone into your computer.&lt;/li&gt; &#xA; &lt;li&gt;Unlock your phone and trust your computer.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;Xcode&lt;/strong&gt; menu -&amp;gt; &lt;strong&gt;Product&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Destination&lt;/strong&gt;. At the &lt;strong&gt;Device&lt;/strong&gt; section select your phone.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;Xcode&lt;/strong&gt; menu -&amp;gt; &lt;strong&gt;Product&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Run&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Wait for the app to install on your phone.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;strong&gt;Settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;General&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Profiles &amp;amp; Device Management&lt;/strong&gt; on your phone to trust the app.&lt;/li&gt; &#xA; &lt;li&gt;Install the watchOS app from the &lt;strong&gt;Watch&lt;/strong&gt; app.&lt;/li&gt; &#xA; &lt;li&gt;Change your watch settings to Always show last used app.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>Carthage/Carthage</title>
    <updated>2022-06-03T01:54:20Z</updated>
    <id>tag:github.com,2022-06-03:/Carthage/Carthage</id>
    <link href="https://github.com/Carthage/Carthage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, decentralized dependency manager for Cocoa&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Logo/PNG/header.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Carthage &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-lightgrey.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/carthage/carthage.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Carthage is intended to be the simplest way to add frameworks to your Cocoa application.&lt;/p&gt; &#xA;&lt;p&gt;Carthage builds your dependencies and provides you with binary frameworks, but you retain full control over your project structure and setup. Carthage does not automatically modify your project files or your build settings.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#installing-carthage&#34;&gt;Installing Carthage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#adding-frameworks-to-an-application&#34;&gt;Adding frameworks to an application&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#building-platform-independent-xcframeworks-xcode-12-and-above&#34;&gt;Building platform-independent XCFrameworks&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#migrating-a-project-from-framework-bundles-to-xcframeworks&#34;&gt;Migrating a project from framework bundles to XCFrameworks&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#building-platform-specific-framework-bundles-default-for-xcode-11-and-below&#34;&gt;Building platform-specific framework bundles&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#if-youre-building-for-macos&#34;&gt;If you&#39;re building for macOS&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;If you&#39;re building for iOS, tvOS, or watchOS&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#for-all-platforms&#34;&gt;For all platforms&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#optionally-add-build-phase-to-warn-about-outdated-dependencies&#34;&gt;(Optionally) Add build phase to warn about outdated dependencies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#swift-binary-framework-download-compatibility&#34;&gt;Swift binary framework download compatibility&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#running-a-project-that-uses-carthage&#34;&gt;Running a project that uses Carthage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#adding-frameworks-to-unit-tests-or-a-framework&#34;&gt;Adding frameworks to unit tests or a framework&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#upgrading-frameworks&#34;&gt;Upgrading frameworks&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#experimental-resolver&#34;&gt;Experimental Resolver&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#nested-dependencies&#34;&gt;Nested dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#using-submodules-for-dependencies&#34;&gt;Using submodules for dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#automatically-rebuilding-dependencies&#34;&gt;Automatically rebuilding dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#caching-builds&#34;&gt;Caching builds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#bashzshfish-completion&#34;&gt;Bash/Zsh/Fish completion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#supporting-carthage-for-your-framework&#34;&gt;Supporting Carthage for your framework&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#share-your-xcode-schemes&#34;&gt;Share your Xcode schemes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#resolve-build-failures&#34;&gt;Resolve build failures&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#tag-stable-releases&#34;&gt;Tag stable releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#archive-prebuilt-frameworks-into-zip-files&#34;&gt;Archive prebuilt frameworks into zip files&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#use-travis-ci-to-upload-your-tagged-prebuilt-frameworks&#34;&gt;Use travis-ci to upload your tagged prebuilt frameworks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#build-static-frameworks-to-speed-up-your-apps-launch-times&#34;&gt;Build static frameworks to speed up your app‚Äôs launch times&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#declare-your-compatibility&#34;&gt;Declare your compatibility&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#known-issues&#34;&gt;Known issues&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#dwarfs-symbol-problem&#34;&gt;DWARFs symbol problem&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#carthagekit&#34;&gt;CarthageKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#differences-between-carthage-and-cocoapods&#34;&gt;Differences between Carthage and CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Get Carthage by running &lt;code&gt;brew install carthage&lt;/code&gt; or choose &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#installing-carthage&#34;&gt;another installation method&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt; in the same directory where your &lt;code&gt;.xcodeproj&lt;/code&gt; or &lt;code&gt;.xcworkspace&lt;/code&gt; is&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;List the desired dependencies in the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt;, for example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;github &#34;Alamofire/Alamofire&#34; ~&amp;gt; 5.5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;Cartfile.resolved&lt;/code&gt; file and a &lt;code&gt;Carthage&lt;/code&gt; directory will appear in the same directory where your &lt;code&gt;.xcodeproj&lt;/code&gt; or &lt;code&gt;.xcworkspace&lt;/code&gt; is&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag the built &lt;code&gt;.xcframework&lt;/code&gt; bundles from &lt;code&gt;Carthage/Build&lt;/code&gt; into the &#34;Frameworks and Libraries&#34; section of your application‚Äôs Xcode project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using Carthage for an application, select &#34;Embed &amp;amp; Sign&#34;, otherwise &#34;Do Not Embed&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For an in depth guide, read on from &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#adding-frameworks-to-an-application&#34;&gt;Adding frameworks to an application&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing Carthage&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple options for installing Carthage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Installer:&lt;/strong&gt; Download and run the &lt;code&gt;Carthage.pkg&lt;/code&gt; file for the latest &lt;a href=&#34;https://github.com/Carthage/Carthage/releases&#34;&gt;release&lt;/a&gt;, then follow the on-screen instructions. If you are installing the pkg via CLI, you might need to run &lt;code&gt;sudo chown -R $(whoami) /usr/local&lt;/code&gt; first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Homebrew:&lt;/strong&gt; You can use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; and install the &lt;code&gt;carthage&lt;/code&gt; tool on your system simply by running &lt;code&gt;brew update&lt;/code&gt; and &lt;code&gt;brew install carthage&lt;/code&gt;. (note: if you previously installed the binary version of Carthage, you should delete &lt;code&gt;/Library/Frameworks/CarthageKit.framework&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MacPorts:&lt;/strong&gt; You can use &lt;a href=&#34;https://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt; and install the &lt;code&gt;carthage&lt;/code&gt; tool on your system simply by running &lt;code&gt;sudo port selfupdate&lt;/code&gt; and &lt;code&gt;sudo port install carthage&lt;/code&gt;. (note: if you previously installed the binary version of Carthage, you should delete &lt;code&gt;/Library/Frameworks/CarthageKit.framework&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;From source:&lt;/strong&gt; If you‚Äôd like to run the latest development version (which may be highly unstable or incompatible), simply clone the &lt;code&gt;master&lt;/code&gt; branch of the repository, then run &lt;code&gt;make install&lt;/code&gt;. Requires Xcode 10.0 (Swift 4.2).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding frameworks to an application&lt;/h2&gt; &#xA;&lt;p&gt;Once you have Carthage &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#installing-carthage&#34;&gt;installed&lt;/a&gt;, you can begin adding frameworks to your project. Note that Carthage only supports dynamic frameworks, which are &lt;strong&gt;only available on iOS 8 or later&lt;/strong&gt; (or any version of OS X).&lt;/p&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;h4&gt;Building platform-independent XCFrameworks (Xcode 12 and above)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt; that lists the frameworks you‚Äôd like to use in your project.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;. This will fetch dependencies into a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagecheckouts&#34;&gt;Carthage/Checkouts&lt;/a&gt; folder and build each one or download a pre-compiled XCFramework.&lt;/li&gt; &#xA; &lt;li&gt;On your application targets‚Äô &lt;em&gt;General&lt;/em&gt; settings tab, in the &lt;em&gt;Frameworks, Libraries, and Embedded Content&lt;/em&gt; section, drag and drop each XCFramework you want to use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Migrating a project from framework bundles to XCFrameworks&lt;/h5&gt; &#xA;&lt;p&gt;We encourage using XCFrameworks as of version 0.37.0 (January 2021), and require XCFrameworks when building on an Apple Silicon Mac. Switching from discrete framework bundles to XCFrameworks requires a few changes to your project:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Migration steps&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Delete your &lt;code&gt;Carthage/Build&lt;/code&gt; folder to remove any existing framework bundles.&lt;/li&gt; &#xA;  &lt;li&gt;Build new XCFrameworks by running &lt;code&gt;carthage build --use-xcframeworks&lt;/code&gt;. Any other arguments you build with can be provided like normal.&lt;/li&gt; &#xA;  &lt;li&gt;Remove references to the old frameworks in each of your targets: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Delete references to Carthage frameworks from the target&#39;s &lt;em&gt;Frameworks, Libraries, and Embedded Content&lt;/em&gt; section and/or its &lt;em&gt;Link Binary with Libraries&lt;/em&gt; build phase.&lt;/li&gt; &#xA;    &lt;li&gt;Delete references to Carthage frameworks from any &lt;em&gt;Copy Files&lt;/em&gt; build phases.&lt;/li&gt; &#xA;    &lt;li&gt;Delete the target&#39;s &lt;code&gt;carthage copy-frameworks&lt;/code&gt; build phase, if present.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Add references to XCFrameworks in each of your targets: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;For an application target: In the &lt;em&gt;General&lt;/em&gt; settings tab, in the &lt;em&gt;Frameworks, Libraries, and Embedded Content&lt;/em&gt; section, drag and drop each XCFramework you use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/li&gt; &#xA;    &lt;li&gt;For a framework target: In the &lt;em&gt;Build Phases&lt;/em&gt; tab, in a &lt;em&gt;Link Binary with Libraries&lt;/em&gt; phase, drag and drop each XCFramework you use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Building platform-specific framework bundles (default for Xcode 11 and below)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Xcode 12+ incompatibility&lt;/strong&gt;: Multi-architecture platforms are not supported when building framework bundles in Xcode 12 and above. Prefer &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#building-platform-independent-xcframeworks-xcode-12-and-above&#34;&gt;building with XCFrameworks&lt;/a&gt;. If you need to build discrete framework bundles, &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Xcode12Workaround.md&#34;&gt;use a workaround xcconfig file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;If you&#39;re building for macOS&lt;/h5&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;macOS-specific instructions&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt; that lists the frameworks you‚Äôd like to use in your project.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;carthage update --platform macOS&lt;/code&gt;. This will fetch dependencies into a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagecheckouts&#34;&gt;Carthage/Checkouts&lt;/a&gt; folder and build each one or download a pre-compiled framework.&lt;/li&gt; &#xA;  &lt;li&gt;On your application targets‚Äô &lt;em&gt;General&lt;/em&gt; settings tab, in the &lt;em&gt;Embedded Binaries&lt;/em&gt; section, drag and drop each framework you want to use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;Additionally, you&#39;ll need to copy debug symbols for debugging and crash reporting on OS X.&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;On your application target‚Äôs &lt;em&gt;Build Phases&lt;/em&gt; settings tab, click the &lt;em&gt;+&lt;/em&gt; icon and choose &lt;em&gt;New Copy Files Phase&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Click the &lt;em&gt;Destination&lt;/em&gt; drop-down menu and select &lt;em&gt;Products Directory&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;For each framework you‚Äôre using, drag and drop its corresponding dSYM file.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h5&gt;If you&#39;re building for iOS, tvOS, or watchOS&lt;/h5&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Platform-specific instructions&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt; that lists the frameworks you‚Äôd like to use in your project.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;. This will fetch dependencies into a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagecheckouts&#34;&gt;Carthage/Checkouts&lt;/a&gt; folder, then build each one or download a pre-compiled framework.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Open your application targets‚Äô &lt;em&gt;General&lt;/em&gt; settings tab. For Xcode 11.0 and higher, in the &#34;Frameworks, Libraries, and Embedded Content&#34; section, drag and drop each framework you want to use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk. Then, in the &#34;Embed&#34; section, select &#34;Do Not Embed&#34; from the pulldown menu for each item added. For Xcode 10.x and lower, in the &#34;Linked Frameworks and Libraries&#34; section, drag and drop each framework you want to use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;On your application targets‚Äô &lt;em&gt;Build Phases&lt;/em&gt; settings tab, click the &lt;em&gt;+&lt;/em&gt; icon and choose &lt;em&gt;New Run Script Phase&lt;/em&gt;. Create a Run Script in which you specify your shell (ex: &lt;code&gt;/bin/sh&lt;/code&gt;), add the following contents to the script area below the shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/usr/local/bin/carthage copy-frameworks&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a file named &lt;code&gt;input.xcfilelist&lt;/code&gt; and a file named &lt;code&gt;output.xcfilelist&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add the paths to the frameworks you want to use to your &lt;code&gt;input.xcfilelist&lt;/code&gt;. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/Result.framework&#xA;$(SRCROOT)/Carthage/Build/iOS/ReactiveSwift.framework&#xA;$(SRCROOT)/Carthage/Build/iOS/ReactiveCocoa.framework&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add the paths to the copied frameworks to the &lt;code&gt;output.xcfilelist&lt;/code&gt;. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/Result.framework&#xA;$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/ReactiveSwift.framework&#xA;$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/ReactiveCocoa.framework&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With output files specified alongside the input files, Xcode only needs to run the script when the input files have changed or the output files are missing. This means dirty builds will be faster when you haven&#39;t rebuilt frameworks with Carthage.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;input.xcfilelist&lt;/code&gt; to the &#34;Input File Lists&#34; section of the Carthage run script phase&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;output.xcfilelist&lt;/code&gt; to the &#34;Output File Lists&#34; section of the Carthage run script phase&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;This script works around an &lt;a href=&#34;http://www.openradar.me/radar?id=6409498411401216&#34;&gt;App Store submission bug&lt;/a&gt; triggered by universal binaries and ensures that necessary bitcode-related files and dSYMs are copied when archiving.&lt;/p&gt; &#xA; &lt;p&gt;With the debug information copied into the built products directory, Xcode will be able to symbolicate the stack trace whenever you stop at a breakpoint. This will also enable you to step through third-party code in the debugger.&lt;/p&gt; &#xA; &lt;p&gt;When archiving your application for submission to the App Store or TestFlight, Xcode will also copy these files into the dSYMs subdirectory of your application‚Äôs &lt;code&gt;.xcarchive&lt;/code&gt; bundle.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;For all platforms&lt;/h4&gt; &#xA;&lt;p&gt;Along the way, Carthage will have created some &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md&#34;&gt;build artifacts&lt;/a&gt;. The most important of these is the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfileresolved&#34;&gt;Cartfile.resolved&lt;/a&gt; file, which lists the versions that were actually built for each framework. &lt;strong&gt;Make sure to commit your &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfileresolved&#34;&gt;Cartfile.resolved&lt;/a&gt;&lt;/strong&gt;, because anyone else using the project will need that file to build the same framework versions.&lt;/p&gt; &#xA;&lt;h4&gt;(Optionally) Add build phase to warn about outdated dependencies&lt;/h4&gt; &#xA;&lt;p&gt;You can add a Run Script phase to automatically warn you when one of your dependencies is out of date.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;On your application targets‚Äô &lt;code&gt;Build Phases&lt;/code&gt; settings tab, click the &lt;code&gt;+&lt;/code&gt; icon and choose &lt;code&gt;New Run Script Phase&lt;/code&gt;. Create a Run Script in which you specify your shell (ex: &lt;code&gt;/bin/sh&lt;/code&gt;), add the following contents to the script area below the shell:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/usr/local/bin/carthage outdated --xcode-warnings 2&amp;gt;/dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift binary framework download compatibility&lt;/h4&gt; &#xA;&lt;p&gt;Carthage will check to make sure that downloaded Swift (and mixed Objective-C/Swift) frameworks were built with the same version of Swift that is in use locally. If there is a version mismatch, Carthage will proceed to build the framework from source. If the framework cannot be built from source, Carthage will fail.&lt;/p&gt; &#xA;&lt;p&gt;Because Carthage uses the output of &lt;code&gt;xcrun swift --version&lt;/code&gt; to determine the local Swift version, make sure to run Carthage commands with the Swift toolchain that you intend to use. For many use cases, nothing additional is needed. However, for example, if you are building a Swift 2.3 project using Xcode 8.x, one approach to specifying your default &lt;code&gt;swift&lt;/code&gt; for &lt;code&gt;carthage bootstrap&lt;/code&gt; is to use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TOOLCHAINS=com.apple.dt.toolchain.Swift_2_3 carthage bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a project that uses Carthage&lt;/h3&gt; &#xA;&lt;p&gt;After you‚Äôve finished the above steps and pushed your changes, other users of the project only need to fetch the repository and run &lt;code&gt;carthage bootstrap&lt;/code&gt; to get started with the frameworks you‚Äôve added.&lt;/p&gt; &#xA;&lt;h3&gt;Adding frameworks to unit tests or a framework&lt;/h3&gt; &#xA;&lt;p&gt;Using Carthage for the dependencies of any arbitrary target is fairly similar to &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#adding-frameworks-to-an-application&#34;&gt;using Carthage for an application&lt;/a&gt;. The main difference lies in how the frameworks are actually set up and linked in Xcode.&lt;/p&gt; &#xA;&lt;p&gt;Because unit test targets are missing the &lt;em&gt;Linked Frameworks and Libraries&lt;/em&gt; section in their &lt;em&gt;General&lt;/em&gt; settings tab, you must instead drag the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;built frameworks&lt;/a&gt; to the &lt;em&gt;Link Binaries With Libraries&lt;/em&gt; build phase.&lt;/p&gt; &#xA;&lt;p&gt;In the Test target under the &lt;em&gt;Build Settings&lt;/em&gt; tab, add &lt;code&gt;@loader_path/Frameworks&lt;/code&gt; to the &lt;em&gt;Runpath Search Paths&lt;/em&gt; if it isn&#39;t already present.&lt;/p&gt; &#xA;&lt;p&gt;In rare cases, you may want to also copy each dependency into the build product (e.g., to embed dependencies within the outer framework, or make sure dependencies are present in a test bundle). To do this, create a new &lt;em&gt;Copy Files&lt;/em&gt; build phase with the &lt;em&gt;Frameworks&lt;/em&gt; destination, then add the framework reference there as well. You shouldn&#39;t use the &lt;code&gt;carthage copy-frameworks&lt;/code&gt; command since test bundles don&#39;t need frameworks stripped, and running concurrent instances of &lt;code&gt;copy-frameworks&lt;/code&gt; (with parallel builds turn on) is not supported.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading frameworks&lt;/h3&gt; &#xA;&lt;p&gt;If you‚Äôve modified your &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt;, or you want to update to the newest versions of each framework (subject to the requirements you‚Äôve specified), simply run the &lt;code&gt;carthage update&lt;/code&gt; command again.&lt;/p&gt; &#xA;&lt;p&gt;If you only want to update one, or specific, dependencies, pass them as a space-separated list to the &lt;code&gt;update&lt;/code&gt; command. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;carthage update Box&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;carthage update Box Result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Experimental Resolver&lt;/h5&gt; &#xA;&lt;p&gt;A rewrite of the logic for upgrading frameworks was done with the aim of increasing speed and reducing memory usage. It is currently an opt-in feature. It can be used by passing &lt;code&gt;--new-resolver&lt;/code&gt; to the update command, e.g.,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;carthage update --new-resolver Box&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are experiencing performance problems during updates, please give the new resolver a try&lt;/p&gt; &#xA;&lt;h3&gt;Nested dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If the framework you want to add to your project has dependencies explicitly listed in a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt;, Carthage will automatically retrieve them for you. You will then have to &lt;strong&gt;drag them yourself into your project&lt;/strong&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If the embedded framework in your project has dependencies to other frameworks you must &lt;strong&gt;link them to application target&lt;/strong&gt; (even if application target does not have dependency to that frameworks and never uses them).&lt;/p&gt; &#xA;&lt;h3&gt;Using submodules for dependencies&lt;/h3&gt; &#xA;&lt;p&gt;By default, Carthage will directly &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagecheckouts&#34;&gt;check out&lt;/a&gt; dependencies‚Äô source files into your project folder, leaving you to commit or ignore them as you choose. If you‚Äôd like to have dependencies available as Git submodules instead (perhaps so you can commit and push changes within them), you can run &lt;code&gt;carthage update&lt;/code&gt; or &lt;code&gt;carthage checkout&lt;/code&gt; with the &lt;code&gt;--use-submodules&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;When run this way, Carthage will write to your repository‚Äôs &lt;code&gt;.gitmodules&lt;/code&gt; and &lt;code&gt;.git/config&lt;/code&gt; files, and automatically update the submodules when the dependencies‚Äô versions change.&lt;/p&gt; &#xA;&lt;h3&gt;Automatically rebuilding dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If you want to work on your dependencies during development, and want them to be automatically rebuilt when you build your parent project, you can add a Run Script build phase that invokes Carthage like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/usr/local/bin/carthage build --platform &#34;$PLATFORM_NAME&#34; --project-directory &#34;$SRCROOT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you should be &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#using-submodules-for-dependencies&#34;&gt;using submodules&lt;/a&gt; before doing this, because plain checkouts &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagecheckouts&#34;&gt;should not be modified&lt;/a&gt; directly.&lt;/p&gt; &#xA;&lt;h3&gt;Caching builds&lt;/h3&gt; &#xA;&lt;p&gt;By default Carthage will rebuild a dependency regardless of whether it&#39;s the same resolved version as before. Passing the &lt;code&gt;--cache-builds&lt;/code&gt; will cause carthage to avoid rebuilding a dependency if it can. See information on &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/VersionFile.md&#34;&gt;version files&lt;/a&gt; for details on how Carthage performs this caching.&lt;/p&gt; &#xA;&lt;p&gt;Note: At this time &lt;code&gt;--cache-builds&lt;/code&gt; is incompatible with &lt;code&gt;--use-submodules&lt;/code&gt;. Using both will result in working copy and committed changes to your submodule dependency not being correctly rebuilt. See &lt;a href=&#34;https://github.com/Carthage/Carthage/issues/1785&#34;&gt;#1785&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Bash/Zsh/Fish completion&lt;/h3&gt; &#xA;&lt;p&gt;Auto completion of Carthage commands and options are available as documented in &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/BashZshFishCompletion.md&#34;&gt;Bash/Zsh/Fish Completion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Carthage for your framework&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Carthage only officially supports dynamic frameworks&lt;/strong&gt;. Dynamic frameworks can be used on any version of OS X, but only on &lt;strong&gt;iOS 8 or later&lt;/strong&gt;. Additionally, since version 0.30.0 Carthage supports &lt;strong&gt;static&lt;/strong&gt; frameworks.&lt;/p&gt; &#xA;&lt;p&gt;Because Carthage has no centralized package list, and no project specification format, &lt;strong&gt;most frameworks should build automatically&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The specific requirements of any framework project are listed below.&lt;/p&gt; &#xA;&lt;h3&gt;Share your Xcode schemes&lt;/h3&gt; &#xA;&lt;p&gt;Carthage will only build Xcode schemes that are shared from your &lt;code&gt;.xcodeproj&lt;/code&gt;. You can see if all of your intended schemes build successfully by running &lt;code&gt;carthage build --no-skip-current&lt;/code&gt;, then checking the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If an important scheme is not built when you run that command, open Xcode and make sure that the &lt;a href=&#34;https://developer.apple.com/library/content/documentation/IDEs/Conceptual/xcode_guide-continuous_integration/ConfigureBots.html#//apple_ref/doc/uid/TP40013292-CH9-SW3&#34;&gt;scheme is marked as &lt;em&gt;Shared&lt;/em&gt;&lt;/a&gt;, so Carthage can discover it.&lt;/p&gt; &#xA;&lt;h3&gt;Resolve build failures&lt;/h3&gt; &#xA;&lt;p&gt;If you encounter build failures in &lt;code&gt;carthage build --no-skip-current&lt;/code&gt;, try running &lt;code&gt;xcodebuild -scheme SCHEME -workspace WORKSPACE build&lt;/code&gt; or &lt;code&gt;xcodebuild -scheme SCHEME -project PROJECT build&lt;/code&gt; (with the actual values) and see if the same failure occurs there. This should hopefully yield enough information to resolve the problem.&lt;/p&gt; &#xA;&lt;p&gt;If you have multiple versions of the Apple developer tools installed (an Xcode beta, for example), use &lt;code&gt;xcode-select&lt;/code&gt; to change which version Carthage uses.&lt;/p&gt; &#xA;&lt;p&gt;If you‚Äôre still not able to build your framework with Carthage, please &lt;a href=&#34;https://github.com/Carthage/Carthage/issues/new&#34;&gt;open an issue&lt;/a&gt; and we‚Äôd be happy to help!&lt;/p&gt; &#xA;&lt;h3&gt;Tag stable releases&lt;/h3&gt; &#xA;&lt;p&gt;Carthage determines which versions of your framework are available by searching through the tags published on the repository, and trying to interpret each tag name as a &lt;a href=&#34;https://semver.org/&#34;&gt;semantic version&lt;/a&gt;. For example, in the tag &lt;code&gt;v1.2&lt;/code&gt;, the semantic version is 1.2.0.&lt;/p&gt; &#xA;&lt;p&gt;Tags without any version number, or with any characters following the version number (e.g., &lt;code&gt;1.2-alpha-1&lt;/code&gt;) are currently unsupported, and will be ignored.&lt;/p&gt; &#xA;&lt;h3&gt;Archive prebuilt frameworks into zip files&lt;/h3&gt; &#xA;&lt;p&gt;Carthage can automatically use prebuilt frameworks, instead of building from scratch, if they are attached to a &lt;a href=&#34;https://help.github.com/articles/about-releases/&#34;&gt;GitHub Release&lt;/a&gt; on your project‚Äôs repository or via a binary project definition file.&lt;/p&gt; &#xA;&lt;p&gt;To offer prebuilt frameworks for a specific tag, the binaries for &lt;em&gt;all&lt;/em&gt; supported platforms should be zipped up together into &lt;em&gt;one&lt;/em&gt; archive, and that archive should be attached to a published Release corresponding to that tag. The attachment should include &lt;code&gt;.framework&lt;/code&gt; in its name (e.g., &lt;code&gt;ReactiveCocoa.framework.zip&lt;/code&gt;), to indicate to Carthage that it contains binaries. The directory structure of the archive is free form but, &lt;strong&gt;frameworks should only appear once in the archive&lt;/strong&gt; as they will be copied to &lt;code&gt;Carthage/Build/&amp;lt;platform&amp;gt;&lt;/code&gt; based on their name (e.g. &lt;code&gt;ReactiveCocoa.framework&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To offer prebuilt XCFrameworks, build with &lt;code&gt;--use-xcframeworks&lt;/code&gt; and follow the same process to zip up all XCFrameworks into one archive. Include &lt;code&gt;.xcframework&lt;/code&gt; in the attachment name. Starting in version 0.38.0, Carthage prefers downloading &lt;code&gt;.xcframework&lt;/code&gt; attachments when &lt;code&gt;--use-xcframeworks&lt;/code&gt; is passed.&lt;/p&gt; &#xA;&lt;p&gt;You can perform the archiving operation with carthage itself using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;-carthage build --no-skip-current&#xA;-carthage archive YourFrameworkName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or alternatively&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;carthage build --archive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Draft Releases will be automatically ignored, even if they correspond to the desired tag.&lt;/p&gt; &#xA;&lt;h4&gt;Use travis-ci to upload your tagged prebuilt frameworks&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to use travis-ci in order to build and upload your tagged releases.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/travis-ci/travis.rb#installation&#34;&gt;Install travis CLI&lt;/a&gt; with &lt;code&gt;gem install travis&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.travis-ci.com/user/getting-started/&#34;&gt;Setup&lt;/a&gt; travis-ci for your repository (Steps 1 and 2)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;.travis.yml&lt;/code&gt; file at the root of your repository based on that template. Set &lt;code&gt;FRAMEWORK_NAME&lt;/code&gt; to the correct value.&lt;/p&gt; &lt;p&gt;Replace PROJECT_PLACEHOLDER and SCHEME_PLACEHOLDER&lt;/p&gt; &lt;p&gt;If you are using a &lt;em&gt;workspace&lt;/em&gt; instead of a &lt;em&gt;project&lt;/em&gt; remove the xcode_project line and uncomment the xcode_workspace line.&lt;/p&gt; &lt;p&gt;The project should be in the format: MyProject.xcodeproj&lt;/p&gt; &lt;p&gt;The workspace should be in the format: MyWorkspace.xcworkspace&lt;/p&gt; &lt;p&gt;Feel free to update the &lt;code&gt;xcode_sdk&lt;/code&gt; value to another SDK, note that testing on iphoneos SDK would require you to upload a code signing identity&lt;/p&gt; &lt;p&gt;For more informations you can visit &lt;a href=&#34;https://docs.travis-ci.com/user/languages/objective-c&#34;&gt;travis docs for objective-c projects&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;language: objective-c&#xA;osx_image: xcode7.3&#xA;xcode_project: &amp;lt;PROJECT_PLACEHOLDER&amp;gt;&#xA;# xcode_workspace: &amp;lt;WORKSPACE_PLACEHOLDER&amp;gt;&#xA;xcode_scheme: &amp;lt;SCHEME_PLACEHOLDER&amp;gt;&#xA;xcode_sdk: iphonesimulator9.3&#xA;env:&#xA;  global:&#xA;    - FRAMEWORK_NAME=&amp;lt;THIS_IS_A_PLACEHOLDER_REPLACE_ME&amp;gt;&#xA;before_install:&#xA;  - brew update&#xA;  - brew outdated carthage || brew upgrade carthage&#xA;before_script:&#xA;  # bootstrap the dependencies for the project&#xA;  # you can remove if you don&#39;t have dependencies&#xA;  - carthage bootstrap&#xA;before_deploy:&#xA;  - carthage build --no-skip-current&#xA;  - carthage archive $FRAMEWORK_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;travis setup releases&lt;/code&gt;, follow documentation &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/releases/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This command will encode your GitHub credentials into the &lt;code&gt;.travis.yml&lt;/code&gt; file in order to let travis upload the release to GitHub.com When prompted for the file to upload, enter &lt;code&gt;$FRAMEWORK_NAME.framework.zip&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the deploy section to run on tags:&lt;/p&gt; &lt;p&gt;In &lt;code&gt;.travis.yml&lt;/code&gt; locate:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;on:&#xA;  repo: repo/repo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And add &lt;code&gt;tags: true&lt;/code&gt; and &lt;code&gt;skip_cleanup: true&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;skip_cleanup: true&#xA;on:&#xA;  repo: repo/repo&#xA;  tags: true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;That will let travis know to create a deployment when a new tag is pushed and prevent travis to cleanup the generated zip file&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build static frameworks to speed up your app‚Äôs launch times&lt;/h3&gt; &#xA;&lt;p&gt;If you embed many dynamic frameworks into your app, its pre-main launch times may be quite slow. Carthage is able to help mitigate this by building your dynamic frameworks as static frameworks instead. Static frameworks can be linked directly into your application or merged together into a larger dynamic framework with a few simple modifications to your workflow, which can result in dramatic reductions in pre-main launch times.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage 0.30.0 or higher&lt;/h4&gt; &#xA;&lt;p&gt;Since version 0.30.0 Carthage project rolls out support for statically linked frameworks written in Swift or Objective-C, support for which has been introduced in Xcode 9.4. Please note however that it specifically says &lt;em&gt;frameworks&lt;/em&gt;, hence Darwin bundles with &lt;strong&gt;.framework&lt;/strong&gt; extension and statically linked object archives inside. Carthage does not currently support static &lt;em&gt;library&lt;/em&gt; schemes, nor are there any plans to introduce their support in the future.&lt;/p&gt; &#xA;&lt;p&gt;The workflow differs barely:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You still need to tick your Carthage-compliant project&#39;s schemes as &lt;em&gt;shared&lt;/em&gt; in &lt;em&gt;Product &amp;gt; Scheme &amp;gt; Manage Schemes...&lt;/em&gt;, just as with dynamic binaries&lt;/li&gt; &#xA; &lt;li&gt;You still need to link against static &lt;strong&gt;.frameworks&lt;/strong&gt; in your project&#39;s &lt;em&gt;Build Phases&lt;/em&gt; just as with dynamic binaries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In your Carthage-compliant project&#39;s Cocoa Framework target&#39;s &lt;em&gt;Build Settings&lt;/em&gt;, &lt;em&gt;Linking&lt;/em&gt; section, set &lt;strong&gt;Mach-O Type&lt;/strong&gt; to &lt;strong&gt;Static Library&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Your statically linked frameworks will be built at &lt;em&gt;./Carthage/Build/$(PLATFORM_NAME)/Static&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;You should not add any of static frameworks as input/output files in &lt;strong&gt;carthage copy-frameworks&lt;/strong&gt; &lt;em&gt;Build Phase&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Carthage 0.29.0 or lower&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/StaticFrameworks.md&#34;&gt;StaticFrameworks&lt;/a&gt; doc for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that a few caveats apply to this approach:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift static frameworks are not officially supported by Apple&lt;/li&gt; &#xA; &lt;li&gt;This is an advanced workflow that is not built into Carthage, YMMV&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Declare your compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Want to advertise that your project can be used with Carthage? You can add a compatibility badge:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚Ä¶ to your &lt;code&gt;README&lt;/code&gt;, by simply inserting the following Markdown:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;h5&gt;DWARFs symbol problem&lt;/h5&gt; &#xA;&lt;p&gt;Pre-built framework cannot be debugged using step execution on other machine than on which the framework was built. Simply &lt;code&gt;carthage bootstrap/build/update --no-use-binaries&lt;/code&gt; should fix this, but for more automated workaround, see &lt;a href=&#34;https://github.com/Carthage/Carthage/issues/924&#34;&gt;#924&lt;/a&gt;. Dupe &lt;a href=&#34;http://www.openradar.me/23551273&#34;&gt;rdar://23551273&lt;/a&gt; if you want Apple to fix the root cause of this problem.&lt;/p&gt; &#xA;&lt;h2&gt;CarthageKit&lt;/h2&gt; &#xA;&lt;p&gt;Most of the functionality of the &lt;code&gt;carthage&lt;/code&gt; command line tool is actually encapsulated in a framework named CarthageKit.&lt;/p&gt; &#xA;&lt;p&gt;If you‚Äôre interested in using Carthage as part of another tool, or perhaps extending the functionality of Carthage, take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Source/CarthageKit&#34;&gt;CarthageKit&lt;/a&gt; source code to see if the API fits your needs.&lt;/p&gt; &#xA;&lt;h2&gt;Differences between Carthage and CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is a long-standing dependency manager for Cocoa. So why was Carthage created?&lt;/p&gt; &#xA;&lt;p&gt;Firstly, CocoaPods (by default) automatically creates and updates an Xcode workspace for your application and all dependencies. Carthage builds framework binaries using &lt;code&gt;xcodebuild&lt;/code&gt;, but leaves the responsibility of integrating them up to the user. CocoaPods‚Äô approach is easier to use, while Carthage‚Äôs is flexible and unintrusive.&lt;/p&gt; &#xA;&lt;p&gt;The goal of CocoaPods is listed in its &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/raw/1703a3464674baecf54bd7e766f4b37ed8fc43f7/README.md&#34;&gt;README&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚Ä¶ to improve discoverability of, and engagement in, third party open-source libraries, by creating a more centralized ecosystem.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By contrast, Carthage has been created as a &lt;em&gt;decentralized&lt;/em&gt; dependency manager. There is no central list of projects, which reduces maintenance work and avoids any central point of failure. However, project discovery is more difficult‚Äîusers must resort to GitHub‚Äôs &lt;a href=&#34;https://github.com/trending?l=swift&#34;&gt;Trending&lt;/a&gt; pages or similar.&lt;/p&gt; &#xA;&lt;p&gt;CocoaPods projects must also have what‚Äôs known as a &lt;a href=&#34;https://guides.cocoapods.org/syntax/podspec.html&#34;&gt;podspec&lt;/a&gt; file, which includes metadata about the project and specifies how it should be built. Carthage uses &lt;code&gt;xcodebuild&lt;/code&gt; to build dependencies, instead of integrating them into a single workspace, it doesn‚Äôt have a similar specification file but your dependencies must include their own Xcode project that describes how to build their products.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, we created Carthage because we wanted the simplest tool possible‚Äîa dependency manager that gets the job done without taking over the responsibility of Xcode, and without creating extra work for framework authors. CocoaPods offers many amazing features that Carthage will never have, at the expense of additional complexity.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Carthage is released under the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Header backdrop photo is released under the &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/2.0/&#34;&gt;CC BY-NC-SA 2.0&lt;/a&gt; license. Original photo by &lt;a href=&#34;https://www.flickr.com/photos/prof_richard/&#34;&gt;Richard Mortel&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-collections</title>
    <updated>2022-06-03T01:54:20Z</updated>
    <id>tag:github.com,2022-06-03:/apple/swift-collections</id>
    <link href="https://github.com/apple/swift-collections" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Commonly used data structures for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Collections&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift Collections&lt;/strong&gt; is an open-source package of data structure implementations for the Swift programming language.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the package, and the intent behind it, in the &lt;a href=&#34;https://swift.org/blog/swift-collections&#34;&gt;announcement on swift.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;The package currently provides the following implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Deque.md&#34;&gt;&lt;code&gt;Deque&amp;lt;Element&amp;gt;&lt;/code&gt;&lt;/a&gt;, a double-ended queue backed by a ring buffer. Deques are range-replaceable, mutable, random-access collections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/OrderedSet.md&#34;&gt;&lt;code&gt;OrderedSet&amp;lt;Element&amp;gt;&lt;/code&gt;&lt;/a&gt;, a variant of the standard &lt;code&gt;Set&lt;/code&gt; where the order of items is well-defined and items can be arbitrarily reordered. Uses a &lt;code&gt;ContiguousArray&lt;/code&gt; as its backing store, augmented by a separate hash table of bit packed offsets into it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/OrderedDictionary.md&#34;&gt;&lt;code&gt;OrderedDictionary&amp;lt;Key, Value&amp;gt;&lt;/code&gt;&lt;/a&gt;, an ordered variant of the standard &lt;code&gt;Dictionary&lt;/code&gt;, providing similar benefits.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following data structures are currently being worked on but they aren&#39;t ready for inclusion in a tagged release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Heap.md&#34;&gt;&lt;code&gt;Heap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/apple/swift-collections/pull/51&#34;&gt;&lt;code&gt;PriorityQueue&lt;/code&gt;&lt;/a&gt;, min-max heaps backed by an array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/pull/65&#34;&gt;&lt;code&gt;SortedSet&lt;/code&gt; and &lt;code&gt;SortedDictionary&lt;/code&gt;&lt;/a&gt;, sorted collections backed by in-memory persistent b-trees.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/pull/31&#34;&gt;&lt;code&gt;HashSet&lt;/code&gt; and &lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;, persistent hashed collections implemented as Compressed Hash-Array Mapped Prefix-Trees (CHAMP).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/pull/83&#34;&gt;&lt;code&gt;BitArray&lt;/code&gt; and &lt;code&gt;BitSet&lt;/code&gt;&lt;/a&gt;, dynamic bit vectors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/pull/80&#34;&gt;&lt;code&gt;SparseSet&lt;/code&gt;&lt;/a&gt;, a constant time set construct, trading off memory for speed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Swift Collections uses the same modularization approach as &lt;a href=&#34;https://github.com/apple/swift-numerics&#34;&gt;&lt;strong&gt;Swift Numerics&lt;/strong&gt;&lt;/a&gt;: it provides a standalone module for each thematic group of data structures it implements. For instance, if you only need a double-ended queue type, you can pull in only that by importing &lt;code&gt;DequeModule&lt;/code&gt;. &lt;code&gt;OrderedSet&lt;/code&gt; and &lt;code&gt;OrderedDictionary&lt;/code&gt; share much of the same underlying implementation, so they are provided by a single module, called &lt;code&gt;OrderedCollections&lt;/code&gt;. However, there is also a top-level &lt;code&gt;Collections&lt;/code&gt; module that gives you every collection type with a single import statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Collections&#xA;&#xA;var deque: Deque&amp;lt;String&amp;gt; = [&#34;Ted&#34;, &#34;Rebecca&#34;]&#xA;deque.prepend(&#34;Keeley&#34;)&#xA;deque.append(&#34;Nathan&#34;)&#xA;print(deque) // [&#34;Keeley&#34;, &#34;Ted&#34;, &#34;Rebecca&#34;, &#34;Nathan&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Collections package is source stable. The version numbers follow &lt;a href=&#34;https://semver.org&#34;&gt;Semantic Versioning&lt;/a&gt; -- source breaking changes to public API can only land in a new major version.&lt;/p&gt; &#xA;&lt;p&gt;The public API of version 1.0 of the &lt;code&gt;swift-collections&lt;/code&gt; package consists of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;Collections&lt;/code&gt;, &lt;code&gt;DequeModule&lt;/code&gt; and &lt;code&gt;OrderedCollections&lt;/code&gt; modules.&lt;/p&gt; &#xA;&lt;p&gt;Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases. If you have a use case that requires using underscored APIs, please &lt;a href=&#34;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&#34;&gt;submit a Feature Request&lt;/a&gt; describing it! We&#39;d like the public interface to be as useful as possible -- although preferably without compromising safety or limiting future evolution.&lt;/p&gt; &#xA;&lt;p&gt;By &#34;underscored declarations&#34; we mean declarations that have a leading underscore anywhere in their fully qualified name. For instance, here are some names that wouldn&#39;t be considered part of the public API, even if they were technically marked public:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule.Bar._someMember(value:)&lt;/code&gt; (underscored member)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule._Bar.someMember&lt;/code&gt; (underscored type)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_FooModule.Bar&lt;/code&gt; (underscored module)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule.Bar.init(_value:)&lt;/code&gt; (underscored initializer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that contents of the &lt;code&gt;Tests&lt;/code&gt;, &lt;code&gt;Utils&lt;/code&gt; and &lt;code&gt;Benchmarks&lt;/code&gt; subdirectories aren&#39;t public API. We don&#39;t make any source compatibility promises about them -- they may change at whim, and code may be removed in any new release. Do not rely on anything about them.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may update these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. (This allows the package to make use of new language/stdlib features, build on compiler bug fixes, and adopt new package manager functionality as soon as they are available.) Requiring a new Swift release will only need a minor version bump.&lt;/p&gt; &#xA;&lt;h2&gt;Using &lt;strong&gt;Swift Collections&lt;/strong&gt; in your project&lt;/h2&gt; &#xA;&lt;p&gt;To use this package in a SwiftPM project, you need to set it up as a package dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.4&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;MyPackage&#34;,&#xA;  dependencies: [&#xA;    .package(&#xA;      url: &#34;https://github.com/apple/swift-collections.git&#34;, &#xA;      .upToNextMajor(from: &#34;1.0.0&#34;) // or `.upToNextMinor&#xA;    )&#xA;  ],&#xA;  targets: [&#xA;    .target(&#xA;      name: &#34;MyTarget&#34;,&#xA;      dependencies: [&#xA;        .product(name: &#34;Collections&#34;, package: &#34;swift-collections&#34;)&#xA;      ]&#xA;    )&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing to Swift Collections&lt;/h2&gt; &#xA;&lt;p&gt;We have a dedicated &lt;a href=&#34;https://forums.swift.org/c/related-projects/collections&#34;&gt;Swift Collections Forum&lt;/a&gt; where people can ask and answer questions on how to use or work on this package. It&#39;s also a great place to discuss its evolution.&lt;/p&gt; &#xA;&lt;p&gt;If you find something that looks like a bug, please open a &lt;a href=&#34;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=BUG_REPORT.md&#34;&gt;Bug Report&lt;/a&gt;! Fill out as many details as you can.&lt;/p&gt; &#xA;&lt;h3&gt;Working on the package&lt;/h3&gt; &#xA;&lt;p&gt;We have some basic &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Internals/README.md&#34;&gt;documentation on package internals&lt;/a&gt; that will help you get started.&lt;/p&gt; &#xA;&lt;p&gt;By submitting a pull request, you represent that you have the right to license your contribution to Apple and the community, and agree by submitting the patch that your contributions are licensed under the &lt;a href=&#34;https://swift.org/LICENSE.txt&#34;&gt;Swift License&lt;/a&gt;, a copy of which is &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/LICENSE.txt&#34;&gt;provided in this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Fixing a bug or making a small improvement&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/compare&#34;&gt;Submit a PR&lt;/a&gt; with your change. If there is an &lt;a href=&#34;https://github.com/apple/swift-collections/issues&#34;&gt;existing issue&lt;/a&gt; for the bug you&#39;re fixing, please include a reference to it.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to add tests covering whatever changes you are making.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Proposing a small enhancement&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Raise a &lt;a href=&#34;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&#34;&gt;Feature Request&lt;/a&gt;. Discuss why it would be important to implement it.&lt;/li&gt; &#xA; &lt;li&gt;Submit a PR with your implementation, participate in the review discussion.&lt;/li&gt; &#xA; &lt;li&gt;When there is a consensus that the feature is desirable, and the implementation works well, it is fully tested and documented, then it will be merged.&lt;/li&gt; &#xA; &lt;li&gt;Rejoice!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Proposing the addition of a new data structure&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start a topic on the &lt;a href=&#34;https://forums.swift.org/c/related-projects/collections&#34;&gt;forum&lt;/a&gt;, explaining why you believe it would be important to implement the data structure. This way we can figure out if it would be right for the package, discuss implementation strategies, and plan to allocate capacity to help.&lt;/li&gt; &#xA; &lt;li&gt;When maintainers agreed to your implementation plan, start work on it, and submit a PR with your implementation as soon as you have something that&#39;s ready to show! We&#39;d love to get involved as early as you like.&lt;/li&gt; &#xA; &lt;li&gt;Participate in the review discussion, and adapt the code accordingly. Sometimes we may need to go through several revisions! This is fine -- it makes the end result that much better.&lt;/li&gt; &#xA; &lt;li&gt;When there is a consensus that the feature is ready, and the implementation is fully tested and documented, the PR will be merged by a maintainer.&lt;/li&gt; &#xA; &lt;li&gt;Celebrate! You&#39;ve achieved something great!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;Like all Swift.org projects, we would like the Swift Collections project to foster a diverse and friendly community. We expect contributors to adhere to the &lt;a href=&#34;https://swift.org/code-of-conduct/&#34;&gt;Swift.org Code of Conduct&lt;/a&gt;. A copy of this document is &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/CODE_OF_CONDUCT.md&#34;&gt;available in this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contact information&lt;/h3&gt; &#xA;&lt;p&gt;The current code owner of this package is Karoy Lorentey (&lt;a href=&#34;https://github.com/lorentey&#34;&gt;@lorentey&lt;/a&gt;). You can contact him &lt;a href=&#34;https://forums.swift.org/u/lorentey/summary&#34;&gt;on the Swift forums&lt;/a&gt;, or by writing an email to klorentey at apple dot com. (Please keep it related to this project.)&lt;/p&gt; &#xA;&lt;p&gt;In case of moderation issues, you can also directly contact a member of the &lt;a href=&#34;https://swift.org/community/#community-structure&#34;&gt;Swift Core Team&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>airbnb/lottie-ios</title>
    <updated>2022-06-03T01:54:20Z</updated>
    <id>tag:github.com,2022-06-03:/airbnb/lottie-ios</id>
    <link href="https://github.com/airbnb/lottie-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An iOS library to natively render After Effects vector animations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lottie for iOS, macOS (and &lt;a href=&#34;https://github.com/airbnb/lottie-android&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://github.com/airbnb/lottie-react-native&#34;&gt;React Native&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/lottie-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/lottie-ios.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/lottie-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/lottie-ios.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/airbnb/lottie-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/airbnb/lottie-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;Swift Versions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;View documentation, FAQ, help, examples, and more at &lt;a href=&#34;http://airbnb.io/lottie/&#34;&gt;airbnb.io/lottie&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Lottie is a mobile library for Android and iOS that natively renders vector based animations and art in realtime with minimal code.&lt;/p&gt; &#xA;&lt;p&gt;Lottie loads and renders animations and vectors exported in the bodymovin JSON format. Bodymovin JSON can be created and exported from After Effects with &lt;a href=&#34;https://github.com/bodymovin/bodymovin&#34;&gt;bodymovin&lt;/a&gt;, Sketch with &lt;a href=&#34;https://github.com/buba447/Lottie-Sketch-Export&#34;&gt;Lottie Sketch Export&lt;/a&gt;, and from &lt;a href=&#34;https://www.haiku.ai&#34;&gt;Haiku&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the first time, designers can create &lt;strong&gt;and ship&lt;/strong&gt; beautiful animations without an engineer painstakingly recreating it by hand. Since the animation is backed by JSON they are extremely small in size but can be large in complexity! Animations can be played, resized, looped, sped up, slowed down, reversed, and even interactively scrubbed. Lottie can play or loop just a portion of the animation as well, the possibilities are endless! Animations can even be &lt;em&gt;&lt;strong&gt;changed at runtime&lt;/strong&gt;&lt;/em&gt; in various ways! Change the color, position or any keyframable value! Lottie also supports native UIViewController Transitions out of the box!&lt;/p&gt; &#xA;&lt;p&gt;Here is just a small sampling of the power of Lottie&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples1.gif&#34; alt=&#34;Example1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples2.gif&#34; alt=&#34;Example2&#34;&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;_Gifs/Community 2_3.gif&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples3.gif&#34; alt=&#34;Example3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples4.gif&#34; alt=&#34;Abcs&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing Lottie&lt;/h2&gt; &#xA;&lt;p&gt;Lottie supports &lt;a href=&#34;https://www.swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; and &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; (Both dynamic and static).&lt;/p&gt; &#xA;&lt;h3&gt;Github Repo&lt;/h3&gt; &#xA;&lt;p&gt;You can pull the &lt;a href=&#34;https://github.com/airbnb/lottie-ios/&#34;&gt;Lottie Github Repo&lt;/a&gt; and include the Lottie.xcodeproj to build a dynamic or static library.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add the pod to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;lottie-ios&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing the cocoapod into your project import Lottie with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Lottie&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add Lottie to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;airbnb/lottie-ios&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your application targets ‚ÄúGeneral‚Äù tab under the ‚ÄúLinked Frameworks and Libraries‚Äù section, drag and drop lottie-ios.framework from the Carthage/Build/iOS directory that &lt;code&gt;carthage update&lt;/code&gt; produced.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.1&#xA;&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;YourTestProject&#34;,&#xA;  platforms: [&#xA;       .iOS(.v12),&#xA;  ],&#xA;  dependencies: [&#xA;    .package(name: &#34;Lottie&#34;, url: &#34;https://github.com/airbnb/lottie-ios.git&#34;, from: &#34;3.2.1&#34;)&#xA;  ],&#xA;  targets: [&#xA;    .target(name: &#34;YourTestProject&#34;, dependencies: [&#34;Lottie&#34;])&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then import wherever needed: &lt;code&gt;import Lottie&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Adding it to an existent iOS Project via Swift Package Manager&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using Xcode 11 go to File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/li&gt; &#xA; &lt;li&gt;Paste the project URL: &lt;a href=&#34;https://github.com/airbnb/lottie-ios&#34;&gt;https://github.com/airbnb/lottie-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click on next and select the project target&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t forget to set &lt;code&gt;DEAD_CODE_STRIPPING = NO&lt;/code&gt; in your &lt;code&gt;Build Settings&lt;/code&gt; (&lt;a href=&#34;https://bugs.swift.org/plugins/servlet/mobile#issue/SR-11564&#34;&gt;https://bugs.swift.org/plugins/servlet/mobile#issue/SR-11564&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you have doubts, please, check the following links:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2019/408/&#34;&gt;How to use&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2019/410/&#34;&gt;Creating Swift Packages&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After successfully retrieved the package and added it to your project, just import &lt;code&gt;Lottie&lt;/code&gt; and you can get the full benefits of it.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Objective-C Support&lt;/h3&gt; &#xA;&lt;p&gt;As of 3.0 Lottie has been completely rewritten in Swift!&lt;/p&gt; &#xA;&lt;p&gt;For Objective-C support please use Lottie 2.5.3. Alternatively an Objective-C branch exists and is still active.&lt;/p&gt; &#xA;&lt;p&gt;The official objective c branch can be found here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/airbnb/lottie-ios/tree/lottie/objectiveC&#34;&gt;Objective-C Branch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also check out the documentation regarding it here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://airbnb.io/lottie/#/ios-migration&#34;&gt;iOS Migration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Data collection&lt;/h3&gt; &#xA;&lt;p&gt;The Lottie SDK does not collect any data. We provide this notice to help you fill out &lt;a href=&#34;https://developer.apple.com/app-store/app-privacy-details/&#34;&gt;App Privacy Details&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>