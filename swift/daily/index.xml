<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-04T01:37:23Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>godly-devotion/MochiDiffusion</title>
    <updated>2023-01-04T01:37:23Z</updated>
    <id>tag:github.com,2023-01-04:/godly-devotion/MochiDiffusion</id>
    <link href="https://github.com/godly-devotion/MochiDiffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run Stable Diffusion on Apple Silicon Macs natively&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;256&#34; src=&#34;https://github.com/godly-devotion/MochiDiffusion/raw/main/Mochi Diffusion/Assets.xcassets/AppIcon.appiconset/AppIcon.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Mochi Diffusion&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Run Stable Diffusion on Apple Silicon Macs natively&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/raw/main/README.md&#34;&gt;English&lt;/a&gt;, &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/raw/main/README.ko.md&#34;&gt;한국어&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/godly-devotion/MochiDiffusion/main/.github/images/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This app uses &lt;a href=&#34;https://github.com/apple/ml-stable-diffusion&#34;&gt;Apple&#39;s Core ML Stable Diffusion implementation&lt;/a&gt; to achieve maximum performance and speed on Apple Silicon based Macs while reducing memory requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extremely fast and memory efficient (~150MB with Neural Engine)&lt;/li&gt; &#xA; &lt;li&gt;Runs well on all Apple Silicon Macs by fully utilizing Neural Engine&lt;/li&gt; &#xA; &lt;li&gt;Generate images locally and completely offline&lt;/li&gt; &#xA; &lt;li&gt;Generated images are saved with prompt info inside EXIF metadata&lt;/li&gt; &#xA; &lt;li&gt;Convert generated images to high resolution (using RealESRGAN)&lt;/li&gt; &#xA; &lt;li&gt;Use custom Stable Diffusion Core ML models&lt;/li&gt; &#xA; &lt;li&gt;No worries about pickled models&lt;/li&gt; &#xA; &lt;li&gt;macOS native app using SwiftUI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest version from the &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;When using a model for the very first time, it may take up to 30 seconds for the Neural Engine to compile a cached version. Afterwards, subsequent generations will be much faster.&lt;/p&gt; &#xA;&lt;h2&gt;Compute Unit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CPU &amp;amp; Neural Engine&lt;/code&gt; provides a good balance between speed and low memory usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CPU &amp;amp; GPU&lt;/code&gt; may be faster on M1 Max, Ultra and later but will use more memory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Depending on the option chosen, you will need to use the correct model version (see Models section for details).&lt;/p&gt; &#xA;&lt;h2&gt;Models&lt;/h2&gt; &#xA;&lt;p&gt;You will need to convert or download Core ML models in order to use Mochi Diffusion.&lt;/p&gt; &#xA;&lt;p&gt;A few models have been converted and uploaded &lt;a href=&#34;https://huggingface.co/godly-devotion&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/ml-stable-diffusion#-converting-models-to-core-ml&#34;&gt;Convert&lt;/a&gt; or download Core ML models &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;split_einsum&lt;/code&gt; version is compatible with all compute unit options including Neural Engine&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;original&lt;/code&gt; version is only compatible with &lt;code&gt;CPU &amp;amp; GPU&lt;/code&gt; option&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;By default, the app&#39;s working directory will be created under the Documents folder. This location can be customized under Settings&lt;/li&gt; &#xA; &lt;li&gt;In the working folder, create a new folder with the name you&#39;d like displayed in the app then move or extract the converted models here&lt;/li&gt; &#xA; &lt;li&gt;Your directory should look like this: &lt;code&gt;~/Documents/MochiDiffusion/models/[Model Folder Name]/[Model&#39;s Files]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple Silicon (M1 and later)&lt;/li&gt; &#xA; &lt;li&gt;macOS Ventura 13.1 and later&lt;/li&gt; &#xA; &lt;li&gt;Xcode 14.2 (to build)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;p&gt;All generation happens locally and absolutely nothing is sent to the cloud.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Mochi Diffusion is always looking for contributions, whether it&#39;s through bug reports, code, or new translations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you find a bug, or would like to suggest a new feature or enhancement, try &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/discussions&#34;&gt;searching for your problem first&lt;/a&gt; as it helps avoid duplicates. If you can&#39;t find your issue, feel free to &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/discussions/new&#34;&gt;create a new discussion&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re looking to contribute code, feel free to &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/pulls&#34;&gt;open a Pull Request&lt;/a&gt; or &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/discussions&#34;&gt;create a new discussion&lt;/a&gt; to talk about it first.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/ml-stable-diffusion&#34;&gt;Apple&#39;s Core ML Stable Diffusion implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/swift-coreml-diffusers&#34;&gt;HuggingFace&#39;s Swift UI sample implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;App Icon by &lt;a href=&#34;https://github.com/Zabriskije&#34;&gt;Zabriskije&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>xtro/SwiftMVI</title>
    <updated>2023-01-04T01:37:23Z</updated>
    <id>tag:github.com,2023-01-04:/xtro/SwiftMVI</id>
    <link href="https://github.com/xtro/SwiftMVI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight MVI framework for Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xtro/SwiftMVI/main/Documentation/SwiftMVI.docc/Resources/swiftmvi_icon_338@2x.png&#34; alt=&#34;SwiftMVI Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SwiftMVI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xtro/SwiftMVI/actions/workflows/swift.yml&#34;&gt;&lt;img src=&#34;https://github.com/xtro/SwiftMVI/actions/workflows/swift.yml/badge.svg?branch=main&#34; alt=&#34;Swift&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-iOS%20%7C%20watchOS%20%7C%20tvOS%20%7C%20macOS-333333&#34; alt=&#34;platforms&#34;&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/xtro/SwiftMVI&#34; alt=&#34;GitHub&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/xtro/SwiftMVI&#34; alt=&#34;Current version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SwiftMVI&lt;/strong&gt; is an open-source library of definitions and related extensions for modern swift application development.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SwiftMVI&lt;/strong&gt; provides the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lightweight &amp;amp; scalable: Wide range of possible implementations from a single reducer to complex feature&lt;/li&gt; &#xA; &lt;li&gt;Able to publish events&lt;/li&gt; &#xA; &lt;li&gt;A simple but very effective API bind your combine publishers to reducers and publishers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xtro/SwiftMVI/main/Documentation/SwiftMVI.docc/Resources/processing_feature_schema@2x.png&#34; alt=&#34;Schema about current architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goal is a set of protocols for archiving structured data flow that takes minimal effort. There are some important differences compared to other MVI implementations. First of all, in SwiftMVI state is a mutable &lt;code&gt;ObservableObject&lt;/code&gt;, therefore the reducers are not return anything not even an effect. The reducers can connect using the &lt;code&gt;Processing&lt;/code&gt; protocol and its api. Your existing Combine publishers can be connected using &lt;code&gt;.bind&lt;/code&gt; method and your implemented &lt;code&gt;Feature&lt;/code&gt; can be inserted as A &lt;strong&gt;Publisher&lt;/strong&gt; instance. in any process using &lt;code&gt;EventReducer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can use Swift Package Manager to integrate the library by adding the following dependency in your Package.swift file or by adding directly within Xcode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/xtro/SwiftMVI.git&#34;, .upToNextMajor(from: &#34;0.0.2&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xtro/SwiftMVI/main/Documentation/Getting_Started.md&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xtro/SwiftMVI-Examples&#34;&gt;Example application&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;SwiftMVI is an MIT-licensed open-source project with its ongoing development made possible entirely by the support of awesome backers. If you&#39;d like to join them, please consider sponsoring this development.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to update tests as appropriate.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is released under the &lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt; license. See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
</feed>