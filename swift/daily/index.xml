<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-28T01:41:04Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>migueldeicaza/SwiftGodot</title>
    <updated>2023-09-28T01:41:04Z</updated>
    <id>tag:github.com,2023-09-28:/migueldeicaza/SwiftGodot</id>
    <link href="https://github.com/migueldeicaza/SwiftGodot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;New Godot bindings for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftGodot&lt;/h1&gt; &#xA;&lt;p&gt;SwiftGodot provides Swift language bindings for the Godot 4.1 game engine using the new GDExtension system.&lt;/p&gt; &#xA;&lt;p&gt;SwiftGodot can be used to either build an extension that can be added to an existing Godot project, where your code is providing services to the game engine, or it can be used as an API with SwiftGodotKit which embeds Godot as an application that is driven directly from Swift.&lt;/p&gt; &#xA;&lt;p&gt;Driving Godot from Swift has the advantage that on MacOS you can debug your code from Xcode as well as the Godot code.&lt;/p&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://migueldeicaza.github.io/SwiftGodotDocs/documentation/swiftgodot/&#34;&gt;browse the API documentation&lt;/a&gt;, and it can also be edited for local use, if you enable it in the Generator.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/36863/232163186-dc7c0290-71db-49f2-b812-c775c55b8b77.mov&#34;&gt;https://user-images.githubusercontent.com/36863/232163186-dc7c0290-71db-49f2-b812-c775c55b8b77.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Consuming SwiftGodot&lt;/h1&gt; &#xA;&lt;p&gt;There are two ways of consuming SwiftGodot, you can either reference this module in SwiftPM by using this address - and it will trigger a complete source code build for you, or to quickly iterate on MacOS, you can use a convenient binary in the peer &lt;a href=&#34;https://github.com/migueldeicaza/SwiftGodotBinary&#34;&gt;https://github.com/migueldeicaza/SwiftGodotBinary&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently this requires Swift 5.9 or Xcode 15.&lt;/p&gt; &#xA;&lt;h1&gt;Working with this Repository&lt;/h1&gt; &#xA;&lt;p&gt;You should be all set by referencing this as a package from SwiftPM but if you want to just work on the binding generator, you may want to open the Generator project and edit the &lt;code&gt;okList&lt;/code&gt; variable to trim the build times.&lt;/p&gt; &#xA;&lt;h1&gt;Driving Godot From Swift&lt;/h1&gt; &#xA;&lt;p&gt;To drive Godot from Swift, use the companion &lt;a href=&#34;https://github.com/migueldeicaza/SwiftGodotKit&#34;&gt;&lt;code&gt;SwiftGodotKit&lt;/code&gt;&lt;/a&gt; module which embeds Godot directly into your application, which allows you to to launch the Godot runtime from your code.&lt;/p&gt; &#xA;&lt;h1&gt;Creating an Extension&lt;/h1&gt; &#xA;&lt;p&gt;Creating an extension that can be used in Godot requires a few components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your Swift code: this is where you bring the magic&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;.gdextension&lt;/code&gt; file that describes where to find the requires Swift library assets&lt;/li&gt; &#xA; &lt;li&gt;Some Swift registation code and bootstrap code&lt;/li&gt; &#xA; &lt;li&gt;Importing your extension into your project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Your Swift Code&lt;/h2&gt; &#xA;&lt;p&gt;Your Swift code will be compiled into a shared library that Godot will call. To get started, the simplest thing to do is to create a Swift Library Package that references the Swift Godot package, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version: 5.8&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyFirstGame&#34;,&#xA;    products: [&#xA;        .library(name: &#34;MyFirstGame&#34;, type: .dynamic, targets: [&#34;MyFirstGame&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/migueldeicaza/SwiftGodot&#34;, branch: &#34;main&#34;)&#xA;    ],&#xA;    targets: [&#xA;        .target(&#xA;            name: &#34;MyFirstGame&#34;,&#xA;            dependencies: [&#34;SwiftGodot&#34;, .product (name: &#34;SwiftGodotMacros&#34;, package: &#34;SwiftGodot&#34;)],&#xA;            swiftSettings: [.unsafeFlags([&#34;-suppress-warnings&#34;])],&#xA;            linkerSettings: [.unsafeFlags(&#xA;                [&#34;-Xlinker&#34;, &#34;-undefined&#34;,&#xA;                 &#34;-Xlinker&#34;, &#34;dynamic_lookup&#34;]&#xA;            )]&#xA;        )&#xA;&#x9;&#x9;            &#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will compile all of SwiftGodot for you - alternatively, if you do not need access to the source, you can use the &lt;code&gt;.binaryTarget&lt;/code&gt; feature of SwiftPM and reference an &lt;code&gt;.xcframework&lt;/code&gt; that I have conveniently published on GitHub at &lt;a href=&#34;https://github.com/migueldeicaza/SwiftGodotBinary&#34;&gt;https://github.com/migueldeicaza/SwiftGodotBinary&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The next step is to create your source file with the magic on it, here we declare a spinning cube:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import SwiftGodot&#xA;import SwiftGodotMacros&#xA;&#xA;@Godot&#xA;class SpinningCube: Node3D {&#xA;    public override func _ready () {&#xA;        let meshRender = MeshInstance3D()&#xA;        meshRender.mesh = BoxMesh()&#xA;        addChild(node: meshRender)&#xA;    }&#xA;&#xA;    public override func _process(delta: Double) {&#xA;        rotateY(angle: delta)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you need to write some glue code for your project to be loadable by Godot, you can do it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/// We register our new type when we are told that the scene is being loaded&#xA;func setupScene (level: GDExtension.InitializationLevel) {&#xA;    if level == .scene {&#xA;        register(type: SpinningCube.self)&#xA;    }&#xA;}&#xA;&#xA;// Export our entry point to Godot:&#xA;@_cdecl (&#34;swift_entry_point&#34;)&#xA;public func swift_entry_point(&#xA;    interfacePtr: OpaquePointer?,&#xA;    libraryPtr: OpaquePointer?,&#xA;    extensionPtr: OpaquePointer?) -&amp;gt; UInt8&#xA;{&#xA;    print (&#34;SwiftGodot Extension loaded&#34;)&#xA;    guard let interfacePtr, let libraryPtr, let extensionPtr else {&#xA;        print (&#34;Error: some parameters were not provided&#34;)&#xA;        return 0&#xA;    }&#xA;    initializeSwiftModule(interfacePtr, libraryPtr, extensionPtr, initHook: setupScene, deInitHook: { x in })&#xA;    return 1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the &lt;code&gt;#initSwiftExtension&lt;/code&gt; macro:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import SwiftGodotMacros&#xA;&#xA;#initSwiftExtension(name: &#34;swift_entry_point&#34;, types: [SpinningCube.self])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bundling Your Extension&lt;/h2&gt; &#xA;&lt;p&gt;To make your extension available to Godot, you will need to build the binaries for all of your target platforms, as well as creating a &lt;code&gt;.gdextension&lt;/code&gt; file that lists this payload, along with the entry point you declared above.&lt;/p&gt; &#xA;&lt;p&gt;You would create something like this in a file called &lt;code&gt;MyFirstGame.gdextension&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[configuration]&#xA;entry_symbol = &#34;swift_entry_point&#34;&#xA;&#xA;[libraries]&#xA;macos.debug = &#34;res://bin/MyFirstGame&#34;&#xA;macos.release = &#34;res://bin/MyFirstGame&#34;&#xA;windows.debug.x86_32 = &#34;res://bin/MyFirstGame&#34;&#xA;windows.release.x86_32 = &#34;res://bin/MyFirstGame&#34;&#xA;windows.debug.x86_64 = &#34;res://bin/MyFirstGame&#34;&#xA;windows.release.x86_64 = &#34;res://bin/MyFirstGame&#34;&#xA;linux.debug.x86_64 = &#34;res://bin/MyFirstGame&#34;&#xA;linux.release.x86_64 = &#34;res://bin/MyFirstGame&#34;&#xA;linux.debug.arm64 = &#34;res://bin/MyFirstGame&#34;&#xA;linux.release.arm64 = &#34;res://bin/MyFirstGame&#34;&#xA;linux.debug.rv64 = &#34;res://bin/MyFirstGame&#34;&#xA;linux.release.rv64 = &#34;res://bin/MyFirstGame&#34;&#xA;android.debug.x86_64 = &#34;res://bin/MyFirstGame&#34;&#xA;android.release.x86_64 = &#34;res://bin/MyFirstGame&#34;&#xA;android.debug.arm64 = &#34;res://bin/MyFirstGame&#34;&#xA;android.release.arm64 = &#34;res://bin/MyFirstGame&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above, the extension always expects the platform specific payload to be called &#34;MyFirstGame&#34;, regarless of the platform. If you want to distribute your extension to other users and have a single payload, you will need to manually set different names for those.&lt;/p&gt; &#xA;&lt;h2&gt;Installing your Extension&lt;/h2&gt; &#xA;&lt;p&gt;You need to copy both the new &lt;code&gt;.gdextension&lt;/code&gt; file into an existing project, along with the resources it references.&lt;/p&gt; &#xA;&lt;p&gt;Once it is there, Godot will load it for you.&lt;/p&gt; &#xA;&lt;h2&gt;Using your Extension&lt;/h2&gt; &#xA;&lt;p&gt;Once you create your extension and have loaded it into Godot, you can reference it from your code by using the &#34;Add Child Node&#34; command in Godot (Command-A on MacOS) and then finding it in the hierarchy.&lt;/p&gt; &#xA;&lt;p&gt;In our example above, it would appear under Node3D, as it is a Node3D subclass.&lt;/p&gt;</summary>
  </entry>
</feed>