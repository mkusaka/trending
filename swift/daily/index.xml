<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-08T01:59:19Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Daltron/NotificationBanner</title>
    <updated>2022-06-08T01:59:19Z</updated>
    <id>tag:github.com,2022-06-08:/Daltron/NotificationBanner</id>
    <link href="https://github.com/Daltron/NotificationBanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The easiest way to display highly customizable in app notification banners in iOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/header.png&#34; alt=&#34;Notification Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/NotificationBannerSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/NotificationBannerSwift.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/NotificationBannerSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/NotificationBannerSwift.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5-4BC51D.svg?style=flat&#34; alt=&#34;Language: Swift&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/NotificationBannerSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/NotificationBannerSwift.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Written in Swift 5&lt;/h2&gt; &#xA;&lt;p&gt;NotificationBanner is an extremely customizable and lightweight library that makes the task of displaying in app notification banners and drop down alerts an absolute breeze in iOS.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Basic Banners&lt;/th&gt; &#xA;   &lt;th&gt;Banners with Side Views&lt;/th&gt; &#xA;   &lt;th&gt;Status Bar Banners&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/basic.gif&#34; alt=&#34;Basic Banners&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/side_views.gif&#34; alt=&#34;Banners with Side Views&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/status_bar.gif&#34; alt=&#34;Status Bar Banners&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Growing Banners&lt;/th&gt; &#xA;   &lt;th&gt;Floating Banners&lt;/th&gt; &#xA;   &lt;th&gt;Stacked Banners&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/growing.gif&#34; alt=&#34;Growing Banners&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/floating.gif&#34; alt=&#34;Floating Banners&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/stacked.gif&#34; alt=&#34;Floating Banners&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Highly customizable ✅&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSAttributedString&lt;/code&gt; support ✅&lt;/li&gt; &#xA; &lt;li&gt;iPhone, iPhoneX, &amp;amp; iPad Support ✅&lt;/li&gt; &#xA; &lt;li&gt;Orientation change support ✅&lt;/li&gt; &#xA; &lt;li&gt;Custom &lt;code&gt;UIView&lt;/code&gt; support ✅&lt;/li&gt; &#xA; &lt;li&gt;Custom colors support ✅&lt;/li&gt; &#xA; &lt;li&gt;Support for long titles/ subtitles ✅ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;NotificationBanner&lt;/code&gt; uses horizontal scrolling labels&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GrowingNotificationBanner&lt;/code&gt; grows in height as needed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Presenting from top or bottom support ✅&lt;/li&gt; &#xA; &lt;li&gt;Haptic feeback support ✅&lt;/li&gt; &#xA; &lt;li&gt;Built in banner queue ✅&lt;/li&gt; &#xA; &lt;li&gt;Allow to display several banners simultaneously, configurable in banners queue ✅&lt;/li&gt; &#xA; &lt;li&gt;Accessibility support ✅&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;NotificationBanner is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;h4&gt;Swift 5 + Xcode 11 + iOS 13 Support&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;NotificationBannerSwift&#39;, &#39;~&amp;gt; 3.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift 5 + Xcode 10.x&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;NotificationBannerSwift&#39;, &#39;2.5.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift 4.2&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;NotificationBannerSwift&#39;, &#39;2.0.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift 4.0&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;NotificationBannerSwift&#39;, &#39;1.6.3&#39;&#xA;pod &#39;MarqueeLabel/Swift&#39;, &#39;3.1.6&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add &lt;code&gt;import NotificationBannerSwift&lt;/code&gt; at the top of each file you use NotificationBanner in your project.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To use NotificationBanner via Carthage simply add this line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h4&gt;Swift 5&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;github &#34;Daltron/NotificationBanner&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add &lt;code&gt;NotificationBanner.framework&lt;/code&gt; and the dependencies &lt;code&gt;SnapKit.framework&lt;/code&gt; and &lt;code&gt;MarqueeLabel.framework&lt;/code&gt; in your project.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;You can also add this library as swift package manager.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to File &amp;gt; Add Packages&lt;/li&gt; &#xA; &lt;li&gt;The Add Package dialog appears, by default with Apple packages.&lt;/li&gt; &#xA; &lt;li&gt;In the upper right hand corner, paste &lt;a href=&#34;https://github.com/Daltron/NotificationBanner&#34;&gt;https://github.com/Daltron/NotificationBanner&lt;/a&gt; into the search bar&lt;/li&gt; &#xA; &lt;li&gt;Hit Return to kick off the search&lt;/li&gt; &#xA; &lt;li&gt;Click Add Package.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Creating drop down alerts with NotificationBanner is easy. To create a regular banner (with scrolling labels) and show it, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner = NotificationBanner(title: title, subtitle: subtitle, style: .success)&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to create a banner which grows in height as needed and show it accordingly just use &lt;code&gt;GrowingNotificationBanner&lt;/code&gt; instead of &lt;code&gt;NotificationBanner&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner = GrowingNotificationBanner(title: title, subtitle: subtitle, style: .success)&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a status bar alert, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner = StatusBarNotificationBanner(title: title, style: .success)&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, each banner will be displayed on the main application window. If you are wanting to show a banner below a navigation bar, simply show on the view controller that is within the navigation system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.show(on: viewController)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, each banner will present from the top. If you are wanting to display from the bottom, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.show(bannerPosition: .bottom)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each of the show properties defined above can be mixed and matched to work flawlessly with eachother.&lt;/p&gt; &#xA;&lt;p&gt;By default, each banner will automatically dismiss after 5 seconds. To dismiss programatically, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.dismiss()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To show a banner infinitely until it is manually dismissed, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.autoDismiss = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NotificationBanner has five prebuilt styles that you can choose from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum BannerStyle {&#xA;    case danger&#xA;    case info&#xA;    case customView&#xA;    case success&#xA;    case warning&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override the predefined colors that NotificationBanner uses for any style by conforming to the &lt;code&gt;BannerColorsProtocol&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol BannerColorsProtocol {&#xA;    func color(for style: BannerStyle) -&amp;gt; UIColor&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Its as easy as creating a custom banner colors class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class CustomBannerColors: BannerColorsProtocol {&#xA;&#xA;    internal func color(for style: BannerStyle) -&amp;gt; UIColor {&#xA;        switch style {&#xA;            case .danger:&#x9;// Your custom .danger color&#xA;            case .info:&#x9;&#x9;// Your custom .info color&#xA;            case .customView:&#x9;// Your custom .customView color&#xA;            case .success:&#x9;// Your custom .success color&#xA;            case .warning:&#x9;// Your custom .warning color&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then passing in that class to any notification banner you create:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner = NotificationBanner(title: title, style: .success, colors: CustomBannerColors())&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;.info&lt;/code&gt; style will be applied to the banner if no style is provided in the init method. You can set the background color of a banner at any time by simply setting the &lt;code&gt;backgroundColor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Banners with Side Views&lt;/h3&gt; &#xA;&lt;p&gt;A notification banner can have a left accessory view, a right accessory view, or both:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Success Style Notification with Left View&#xA;let leftView = UIImageView(image: #imageLiteral(resourceName: &#34;success&#34;))&#xA;let banner = NotificationBanner(title: title, subtitle: subtitle, leftView: leftView, style: .success)&#xA;banner.show()&#xA;&#xA; // Danger Style Notification with Right View&#xA;let rightView = UIImageView(image: #imageLiteral(resourceName: &#34;danger&#34;))&#xA;let banner = NotificationBanner(title: title, subtitle: subtitle, rightView: rightView, style: .danger)&#xA;banner.show()    &#xA;&#xA;// Info Style Notification with Left and Right Views&#xA;let leftView = UIImageView(image: #imageLiteral(resourceName: &#34;info&#34;))&#xA;let rightView = UIImageView(image: #imageLiteral(resourceName: &#34;right_chevron&#34;))&#xA;let banner = NotificationBanner(title: title, subtitle: subtitle, leftView: leftView, rightView: rightView, style: .info)&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/side_views.gif&#34; alt=&#34;Banners with Side Views&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each side view will be automically reisized to fit perfectly&lt;/p&gt; &#xA;&lt;h3&gt;Banners with a Custom View&lt;/h3&gt; &#xA;&lt;p&gt;A notification banner can also be initalized with a custom view:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner = NotificationBanner(customView: NorthCarolinaBannerView())&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/custom.gif&#34; alt=&#34;Custom Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Handling User Interaction&lt;/h3&gt; &#xA;&lt;p&gt;By default, when a banner is tapped or swiped up by a user, it will be dismissed. If you want to detect when the user taps or swipes up on a banner, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.onTap = {&#xA;&#x9;// Do something regarding the banner&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.onSwipeUp = {&#xA;&#x9;// Do something regarding the banner&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Banner Events&lt;/h3&gt; &#xA;&lt;p&gt;You can choose to opt into a notification banner&#39;s events by registering as its delegate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.delegate = self&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just make sure to implement the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func notificationBannerWillAppear(_ banner: BaseNotificationBanner)&#xA;func notificationBannerDidAppear(_ banner: BaseNotificationBanner)&#xA;func notificationBannerWillDisappear(_ banner: BaseNotificationBanner)&#xA;func notificationBannerDidDisappear(_ banner: BaseNotificationBanner)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Haptic Feedback Support&lt;/h2&gt; &#xA;&lt;p&gt;By default, when a banner is displayed, a haptic feedback will be generated on devices that support it. The types of haptic feedback are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum BannerHaptic {&#xA;&#x9;case light&#xA;   &#x9;case medium&#xA;&#x9;case heavy&#xA;  &#x9;case none&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the type of haptic feedback to generate when a banner is shown, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.haptic = .heavy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Banner Queue&lt;/h2&gt; &#xA;&lt;p&gt;By default, each notification banner is placed onto a singleton of an auto-managed &lt;code&gt;NotificationBannerQueue&lt;/code&gt;. This allows an infinite amount of banners to be displayed without one hiding the other. If you have multiple controllers within your navigation stack that need to be managed by a seperate queue (like a tab bar controller), simply create an instance of a &lt;code&gt;NotificationBannerQueue&lt;/code&gt; and pass it in to the show function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.show(queue: customQueue)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, each notification banner is placed on the back of the queue. If you would rather place the banner in the front and show it immediately no matter how many banners are in the queue, simply state it in the &lt;code&gt;show()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.show(queuePosition: .front)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding a banner to the front of the queue will temporarily suspend the currently displayed banner (if there is one) and will resume it after the banner in front of it dismisses.&lt;/p&gt; &#xA;&lt;p&gt;To get the number of banners currently on the queue, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let numberOfBanners = NotificationBannerQueue.default.numberOfBanners&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;This is all automatically managed!&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Banner Queue and display banners simultaneously (stacked)&lt;/h2&gt; &#xA;&lt;p&gt;You can also create the queue to display several banners at once with controlling of maximum number of banners to be displayed simultaneously. You can &#34;show&#34; more banners than allowed by queue settings - banners what exceed this value will be displayed some time later, after some banners already displayed on screen will be closed. In example below we create queue with maximum simultaneous banners allowed - 3:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bannerQueueToDisplaySeveralBanners = NotificationBannerQueue(maxBannersOnScreenSimultaneously: 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create five different banners:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner1 = FloatingNotificationBanner(&#xA;&#x9;title: &#34;Success Notification - 1&#34;,&#xA;&#x9;subtitle: &#34;First Notification from 5 in current queue with 3 banners allowed simultaneously&#34;,&#xA;&#x9;style: .success&#xA;)&#xA;banner1.delegate = self&#xA;&#xA;let banner2 = FloatingNotificationBanner(&#xA;&#x9;title: &#34;Danger Notification - 2&#34;,&#xA;&#x9;subtitle: &#34;Second Notification from 5 in current queue with 3 banners allowed simultaneously&#34;,&#xA;&#x9;style: .danger&#xA;)&#xA;banner2.delegate = self&#xA;&#xA;let banner3 = FloatingNotificationBanner(&#xA;&#x9;title: &#34;Info Notification - 3&#34;,&#xA;&#x9;subtitle: &#34;Third Notification from 5 in current queue with 3 banners allowed simultaneously&#34;,&#xA;&#x9;style: .info&#xA;)&#xA;banner3.delegate = self&#xA;&#xA;let banner4 = FloatingNotificationBanner(&#xA;&#x9;title: &#34;Success Notification - 4&#34;,&#xA;&#x9;subtitle: &#34;Fourth Notification from 5 in current queue with 3 banners allowed simultaneously&#34;,&#xA;&#x9;style: .success&#xA;)&#xA;banner4.delegate = self&#xA;&#xA;let banner5 = FloatingNotificationBanner(&#xA;&#x9;title: &#34;Info Notification - 5&#34;,&#xA;&#x9;subtitle: &#34;Fifth Notification from 5 in current queue with 3 banners allowed simultaneously&#34;,&#xA;&#x9;style: .info&#xA;)&#xA;banner5.delegate = self&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and show all five banners at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;showBanners(&#xA;&#x9;[banner1, banner2, banner3, banner4, banner5],&#xA;&#x9;in: bannerQueue5AllowedMixed&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;using this supporting method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func showBanners(&#xA;&#x9;_ banners: [FloatingNotificationBanner],&#xA;&#x9;in notificationBannerQueue: NotificationBannerQueue&#xA;) {&#xA;    banners.forEach { banner in&#xA;      &#x9;banner.show(&#xA;&#x9;      &#x9;bannerPosition: selectedBannerPosition(),&#xA;&#x9;&#x9; &#x9;queue: notificationBannerQueue,&#xA;&#x9;&#x9; &#x9;cornerRadius: 8,&#xA;&#x9;&#x9;&#x9;shadowColor: UIColor(red: 0.431, green: 0.459, blue: 0.494, alpha: 1),&#xA;&#x9;&#x9;  &#x9;shadowBlurRadius: 16,&#xA;&#x9;&#x9;&#x9;shadowEdgeInsets: UIEdgeInsets(top: 8, left: 8, bottom: 0, right: 8)&#xA;&#x9;   )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will display first three banners at once, and after some time (or by user tap) it will be hidden and 4 and 5 banner will be displayed when. All it with fancy animation.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;d love to know anything that you think NotificationBanner is missing. Open an issue and I&#39;ll add the &lt;code&gt;feature request&lt;/code&gt; label to it and I&#39;ll do everything I can to accomodate that request if it is in the library&#39;s best interest. 😄&lt;/p&gt; &#xA;&lt;h2&gt;Apps that Use NotificationBanner&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/q-talk-about-music/id1071551321?mt=8&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/q_talk_about_music.jpg&#34; alt=&#34;Q - Talk About Music&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/vh-dispatch/id1249569084&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/vh_dispatch.png&#34; alt=&#34;VH Dispatch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/stikkr/id851375015&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/stikkr.png&#34; alt=&#34;Stikkr&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/cardcast-business-cards/id1269278947&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/cardcast.png&#34; alt=&#34;CardCast&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/happy-scale/id532430574&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/happy_scale.png&#34; alt=&#34;Happy Scale&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/wanderings-travel-tracking/id1292503352&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/wanderings.png&#34; alt=&#34;Wanderings&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/modern-magic-8-ball/id1381145384&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/modernmagic8ball.png&#34; alt=&#34;Modern Magic 8 Ball&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/envision-habits-tracker/id1423771095&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/envision.png&#34; alt=&#34;Envision: Habits Tracker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/ru/app/%D1%86%D1%83%D0%BC-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%BD%D0%B5%D1%82-%D0%BC%D0%B0%D0%B3%D0%B0%D0%B7%D0%B8%D0%BD-%D0%BE%D0%B4%D0%B5%D0%B6%D0%B4%D1%8B/id1089560311&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/tsum.png&#34; alt=&#34;TSUM&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/ru/app/%D1%80%D0%B5%D1%81%D1%82%D0%BE%D1%80%D0%B0%D0%BD%D1%8B-%D1%80%D0%B8%D1%81-%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7-%D0%B4%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BA%D0%B0/id932844115&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/ris.png&#34; alt=&#34;RIS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/ru/app/luka-pizza-%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7-%D0%B8-%D0%B4%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BA%D0%B0/id1202155629&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/lukapizza.png&#34; alt=&#34;LukaPizza&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Feel free to add yours!&lt;/h4&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Dalton Hinterscher, &lt;a href=&#34;mailto:daltonhint4@gmail.com&#34;&gt;daltonhint4@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;NotificationBanner is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SwipeCellKit/SwipeCellKit</title>
    <updated>2022-06-08T01:59:19Z</updated>
    <id>tag:github.com,2022-06-08:/SwipeCellKit/SwipeCellKit</id>
    <link href="https://github.com/SwipeCellKit/SwipeCellKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swipeable UITableViewCell/UICollectionViewCell based on the stock Mail.app, implemented in Swift.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwipeCellKit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/jerkoch/SwipeCellKit&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jerkoch/SwipeCellKit.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SwipeCellKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SwipeCellKit.svg?sanitize=true&#34; alt=&#34;Version Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-5.0-orange.svg?style=flat&#34; alt=&#34;Swift 5.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/SwipeCellKit.svg?sanitize=true&#34; alt=&#34;license MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swipecellkit.github.io/SwipeCellKit/&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/SwipeCellKit.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/mkurabi&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@mkurabi-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Swipeable UITableViewCell/UICollectionViewCell based on the stock Mail.app, implemented in Swift.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jerkoch/SwipeCellKit/develop/Screenshots/Hero.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;A swipeable &lt;code&gt;UITableViewCell&lt;/code&gt; or &lt;code&gt;UICollectionViewCell&lt;/code&gt; with support for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Left and right swipe actions&lt;/li&gt; &#xA; &lt;li&gt;Action buttons with: &lt;em&gt;text only, text + image, image only&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haptic Feedback&lt;/li&gt; &#xA; &lt;li&gt;Customizable transitions: &lt;em&gt;Border, Drag, and Reveal&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customizable action button behavior during swipe&lt;/li&gt; &#xA; &lt;li&gt;Animated expansion when dragging past threshold&lt;/li&gt; &#xA; &lt;li&gt;Customizable expansion animations&lt;/li&gt; &#xA; &lt;li&gt;Support for both &lt;code&gt;UITableView&lt;/code&gt; and &lt;code&gt;UICollectionView&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Accessibility&lt;/li&gt; &#xA; &lt;li&gt;Dark Mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;Check out my &lt;a href=&#34;https://jerkoch.com/2017/02/07/swiper-no-swiping.html&#34;&gt;blog post&lt;/a&gt; on how &lt;em&gt;SwipeCellKit&lt;/em&gt; came to be.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;h3&gt;Transition Styles&lt;/h3&gt; &#xA;&lt;p&gt;The transition style describes how the action buttons are exposed during the swipe.&lt;/p&gt; &#xA;&lt;h4&gt;Border&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jerkoch/SwipeCellKit/develop/Screenshots/Transition-Border.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Drag&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jerkoch/SwipeCellKit/develop/Screenshots/Transition-Drag.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Reveal&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jerkoch/SwipeCellKit/develop/Screenshots/Transition-Reveal.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Customized&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jerkoch/SwipeCellKit/develop/Screenshots/Transition-Delegate.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Expansion Styles&lt;/h3&gt; &#xA;&lt;p&gt;The expansion style describes the behavior when the cell is swiped past a defined threshold.&lt;/p&gt; &#xA;&lt;h4&gt;None&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jerkoch/SwipeCellKit/develop/Screenshots/Expansion-None.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Selection&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jerkoch/SwipeCellKit/develop/Screenshots/Expansion-Selection.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Destructive&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jerkoch/SwipeCellKit/develop/Screenshots/Expansion-Destructive.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Customized&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jerkoch/SwipeCellKit/develop/Screenshots/Expansion-Delegate.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift 5.0&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.3+&lt;/li&gt; &#xA; &lt;li&gt;iOS 9.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; (recommended)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&#xA;# Latest release in CocoaPods&#xA;pod &#39;SwipeCellKit&#39;&#xA;&#xA;# Get the latest on develop&#xA;pod &#39;SwipeCellKit&#39;, :git =&amp;gt; &#39;https://github.com/SwipeCellKit/SwipeCellKit.git&#39;, :branch =&amp;gt; &#39;develop&#39;&#xA;&#xA;# If you have NOT upgraded to Xcode 11, use the last Swift Xcode 10.X compatible release&#xA;pod &#39;SwipeCellKit&#39;, &#39;2.6.0&#39;&#xA;&#xA;# If you have NOT upgraded to Swift 5.0, use the last Swift 4.2/Xcode 10.2 compatible release&#xA;pod &#39;SwipeCellKit&#39;, &#39;2.5.4&#39;&#xA;&#xA;# If you have NOT upgraded to Swift 4.2, use the last non-swift 4.2 compatible release&#xA;pod &#39;SwipeCellKit&#39;, &#39;2.4.3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;github &#34;SwipeCellKit/SwipeCellKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/SwipeCellKit/SwipeCellKit&#34;, from: &#34;2.7.1&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://swipecellkit.github.io/SwipeCellKit/&#34;&gt;docs&lt;/a&gt;. Generated with &lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;jazzy&lt;/a&gt;. Hosted by &lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage for UITableView&lt;/h2&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;delegate&lt;/code&gt; property on &lt;code&gt;SwipeTableViewCell&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {&#xA;    let cell = tableView.dequeueReusableCell(withIdentifier: &#34;Cell&#34;) as! SwipeTableViewCell&#xA;    cell.delegate = self&#xA;    return cell&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adopt the &lt;code&gt;SwipeTableViewCellDelegate&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath, for orientation: SwipeActionsOrientation) -&amp;gt; [SwipeAction]? {&#xA;    guard orientation == .right else { return nil }&#xA;&#xA;    let deleteAction = SwipeAction(style: .destructive, title: &#34;Delete&#34;) { action, indexPath in&#xA;        // handle action by updating model with deletion&#xA;    }&#xA;&#xA;    // customize the action appearance&#xA;    deleteAction.image = UIImage(named: &#34;delete&#34;)&#xA;&#xA;    return [deleteAction]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can implement the &lt;code&gt;editActionsOptionsForRowAt&lt;/code&gt; method to customize the behavior of the swipe actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func tableView(_ tableView: UITableView, editActionsOptionsForRowAt indexPath: IndexPath, for orientation: SwipeActionsOrientation) -&amp;gt; SwipeOptions {&#xA;    var options = SwipeOptions()&#xA;    options.expansionStyle = .destructive&#xA;    options.transitionStyle = .border&#xA;    return options&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage for UICollectionView&lt;/h2&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;delegate&lt;/code&gt; property on &lt;code&gt;SwipeCollectionViewCell&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&amp;gt; UICollectionViewCell {&#xA;    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: &#34;Cell&#34;, for: indexPath) as! SwipeCollectionViewCell&#xA;    cell.delegate = self&#xA;    return cell&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adopt the &lt;code&gt;SwipeCollectionViewCellDelegate&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func collectionView(_ collectionView: UICollectionView, editActionsForItemAt indexPath: IndexPath, for orientation: SwipeActionsOrientation) -&amp;gt; [SwipeAction]? {&#xA;    guard orientation == .right else { return nil }&#xA;&#xA;    let deleteAction = SwipeAction(style: .destructive, title: &#34;Delete&#34;) { action, indexPath in&#xA;        // handle action by updating model with deletion&#xA;    }&#xA;&#xA;    // customize the action appearance&#xA;    deleteAction.image = UIImage(named: &#34;delete&#34;)&#xA;&#xA;    return [deleteAction]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can implement the &lt;code&gt;editActionsOptionsForItemAt&lt;/code&gt; method to customize the behavior of the swipe actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func collectionView(_ collectionView: UICollectionView, editActionsOptionsForItemAt indexPath: IndexPath, for orientation: SwipeActionsOrientation) -&amp;gt; SwipeOptions {&#xA;    var options = SwipeOptions()&#xA;    options.expansionStyle = .destructive&#xA;    options.transitionStyle = .border&#xA;    return options&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Transitions&lt;/h3&gt; &#xA;&lt;p&gt;Three built-in transition styles are provided by &lt;code&gt;SwipeTransitionStyle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.border: The visible action area is equally divide between all action buttons.&lt;/li&gt; &#xA; &lt;li&gt;.drag: The visible action area is dragged, pinned to the cell, with each action button fully sized as it is exposed.&lt;/li&gt; &#xA; &lt;li&gt;.reveal: The visible action area sits behind the cell, pinned to the edge of the table view, and is revealed as the cell is dragged aside.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/SwipeCellKit/SwipeCellKit/raw/develop/Guides/Advanced.md&#34;&gt;Customizing Transitions&lt;/a&gt; for more details on customizing button appearance as the swipe is performed.&lt;/p&gt; &#xA;&lt;h4&gt;Transition Delegate&lt;/h4&gt; &#xA;&lt;p&gt;Transition for a &lt;code&gt;SwipeAction&lt;/code&gt; can be observered by setting a &lt;code&gt;SwipeActionTransitioning&lt;/code&gt; on the &lt;code&gt;transitionDelegate&lt;/code&gt; property. This allows you to observe what percentage is visible and access to the underlying &lt;code&gt;UIButton&lt;/code&gt; for that &lt;code&gt;SwipeAction&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Expansion&lt;/h3&gt; &#xA;&lt;p&gt;Four built-in expansion styles are provided by &lt;code&gt;SwipeExpansionStyle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.selection&lt;/li&gt; &#xA; &lt;li&gt;.destructive (like Mail.app)&lt;/li&gt; &#xA; &lt;li&gt;.destructiveAfterFill (like Mailbox/Tweetbot)&lt;/li&gt; &#xA; &lt;li&gt;.fill&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Much effort has gone into making &lt;code&gt;SwipeExpansionStyle&lt;/code&gt; extremely customizable. If these built-in styles do not meet your needs, see &lt;a href=&#34;https://github.com/SwipeCellKit/SwipeCellKit/raw/develop/Guides/Advanced.md&#34;&gt;Customizing Expansion&lt;/a&gt; for more details on creating custom styles.&lt;/p&gt; &#xA;&lt;p&gt;The built-in &lt;code&gt;.fill&lt;/code&gt; expansion style requires manual action fulfillment. This means your action handler must call &lt;code&gt;SwipeAction.fulfill(style:)&lt;/code&gt; at some point during or after invocation to resolve the fill expansion. The supplied &lt;code&gt;ExpansionFulfillmentStyle&lt;/code&gt; allows you to delete or reset the cell at some later point (possibly after further user interaction).&lt;/p&gt; &#xA;&lt;p&gt;The built-in &lt;code&gt;.destructive&lt;/code&gt;, and &lt;code&gt;.destructiveAfterFill&lt;/code&gt; expansion styles are configured to automatically perform row deletion when the action handler is invoked (automatic fulfillment). Your deletion behavior may require coordination with other row animations (eg. inside &lt;code&gt;beginUpdates&lt;/code&gt; and &lt;code&gt;endUpdates&lt;/code&gt;). In this case, you can easily create a custom &lt;code&gt;SwipeExpansionStyle&lt;/code&gt; which requires manual fulfillment to trigger deletion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var options = SwipeTableOptions()&#xA;options.expansionStyle = .destructive(automaticallyDelete: false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You must call &lt;code&gt;SwipeAction.fulfill(with style:)&lt;/code&gt; at some point while/after your action handler is invoked to trigger deletion. Do not call &lt;code&gt;deleteRows&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let delete = SwipeAction(style: .destructive, title: nil) { action, indexPath in&#xA;    // Update model&#xA;    self.emails.remove(at: indexPath.row)&#xA;    action.fulfill(with: .delete)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/SwipeCellKit/SwipeCellKit/raw/develop/Guides/Advanced.md&#34;&gt;Advanced Guide&lt;/a&gt; for more details on customization.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Maintained by &lt;a href=&#34;https://twitter.com/mkurabi&#34;&gt;&lt;strong&gt;@mkurabi&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re interested in knowing &lt;a href=&#34;https://github.com/SwipeCellKit/SwipeCellKit/raw/develop/SHOWCASE.md&#34;&gt;who&#39;s using &lt;em&gt;SwipeCellKit&lt;/em&gt;&lt;/a&gt; in their app. Please submit a pull request to add your app!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SwipeCellKit&lt;/code&gt; is released under an &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;. See &lt;code&gt;LICENSE&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please provide attribution, it is greatly appreciated.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Planetable/Planet</title>
    <updated>2022-06-08T01:59:19Z</updated>
    <id>tag:github.com,2022-06-08:/Planetable/Planet</id>
    <link href="https://github.com/Planetable/Planet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Decentralized blogs and websites powered by IPFS and Ethereum Name System&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Planet&lt;/h1&gt; &#xA;&lt;p&gt;Planet is a free and open-source software for publishing and following web content, and it does not require a centralized server or service. It uses IPFS to achieve peer-to-peer content distribution. Furthermore, you can link your content to an Ethereum Name (.eth) so that others can follow you via Planet by the .eth name. Since both IPFS and ENS are decentralized, you can build your websites or follow others, all in a decentralized manner.&lt;/p&gt; &#xA;&lt;h2&gt;Build the macOS App&lt;/h2&gt; &#xA;&lt;p&gt;To use your own build config for setting &lt;code&gt;DEVELOPMENT_TEAM&lt;/code&gt;, please create a &lt;code&gt;local.xcconfig&lt;/code&gt; file alongside the &lt;code&gt;Planet.xcconfig&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;The following configuration variables can be overridden:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DEVELOPMENT_TEAM&lt;/li&gt; &#xA; &lt;li&gt;CODE_SIGN_STYLE&lt;/li&gt; &#xA; &lt;li&gt;ORGANIZATION_IDENTIFIER_PREFIX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://github.com/Planetable/Planet/raw/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>