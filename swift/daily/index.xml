<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-06T01:39:10Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>marcoarment/Blackbird</title>
    <updated>2022-12-06T01:39:10Z</updated>
    <id>tag:github.com,2022-12-06:/marcoarment/Blackbird</id>
    <link href="https://github.com/marcoarment/Blackbird" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Blackbird&lt;/h1&gt; &#xA;&lt;p&gt;A small, fast, lightweight SQLite database wrapper and model layer, based on modern Swift concurrency and &lt;code&gt;Codable&lt;/code&gt;, with no other dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/marcoarment/Blackbird/main/#project-status&#34;&gt;Project Status&lt;/a&gt; before using this for anything!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Database&lt;/h2&gt; &#xA;&lt;p&gt;A lightweight async wrapper around &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let db = try Blackbird.Database(path: &#34;/tmp/whatever.sqlite&#34;)&#xA;&#xA;// SELECT with structure&#xA;for row in try await db.query(&#34;SELECT id FROM posts WHERE state = ?&#34;, 1) {&#xA;    let id = row[&#34;id&#34;]&#xA;    // ...&#xA;}&#xA;&#xA;// Run direct queries&#xA;try await db.execute(&#34;UPDATE posts SET comments = NULL&#34;)&#xA;&#xA;// Transactions with the actor isolated&#xA;try await db.transaction { core in&#xA;    try core.query(&#34;INSERT INTO posts VALUES (?, ?)&#34;, 16, &#34;Sports!&#34;)&#xA;    try core.query(&#34;INSERT INTO posts VALUES (?, ?)&#34;, 17, &#34;Dewey Defeats Truman&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;BlackbirdModel&lt;/h2&gt; &#xA;&lt;p&gt;A model protocol, using Swift&#39;s &lt;code&gt;Codable&lt;/code&gt;, stored in a &lt;code&gt;Database&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Post: BlackbirdModel {&#xA;    static var table = Blackbird.Table(&#xA;        columns: [&#xA;            Blackbird.Column(name: &#34;id&#34;,    type: .integer),&#xA;            Blackbird.Column(name: &#34;title&#34;, type: .text),&#xA;            Blackbird.Column(name: &#34;url&#34;,   type: .text, mayBeNull: true),&#xA;            Blackbird.Column(name: &#34;image&#34;, type: .data, mayBeNull: true),&#xA;        ]&#xA;    )&#xA;&#xA;    let id: Int&#xA;    var title: String&#xA;    var url: URL?&#xA;    var image: Data?&#xA;}&#xA;&#xA;let post = Post(id: 1, title: &#34;What I had for breakfast&#34;)&#xA;try await post.write(to: db)&#xA;&#xA;// Fetch by primary key&#xA;let anotherPost = try await Post.read(from: db, id: 2)&#xA;&#xA;// Or with a WHERE query, parameterized with SQLite data types&#xA;let theSportsPost = try await Post.read(from: db, where: &#34;title = ?&#34;, &#34;Sports&#34;)&#xA;&#xA;// Monitor for changes&#xA;let listener = Post.changePublisher(in: db).sink { changedPrimaryKeys in&#xA;    print(&#34;Post IDs changed: \(changedPrimaryKeys ?? &#34;all of them&#34;)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;Blackbird is an &lt;strong&gt;alpha at best&lt;/strong&gt;. It&#39;s brand new.&lt;/p&gt; &#xA;&lt;p&gt;Nobody should be using it more than I do, and I&#39;ve barely used it.&lt;/p&gt; &#xA;&lt;p&gt;The API might change dramatically at any time.&lt;/p&gt; &#xA;&lt;p&gt;Really, don&#39;t build anything against this yet.&lt;/p&gt; &#xA;&lt;p&gt;Immediate to-do list:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More tests, especially around performance, multicolumn primary keys, legacy change notifications, and any Obj-C sync-method deadlock potential&lt;/li&gt; &#xA; &lt;li&gt;Actually start using Blackbird in &lt;a href=&#34;https://overcast.fm/&#34;&gt;my app&lt;/a&gt; to refine the API/conventions, find any edge-case bugs, and ensure Obj-C compatibility layer is useful enough&lt;/li&gt; &#xA; &lt;li&gt;More examples in the documentation&lt;/li&gt; &#xA; &lt;li&gt;Query-performance metrics (@siracusa)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wishlist for future Swift-language capabilities&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Type reflection for automatic/cleaner schema definitions:&lt;/strong&gt; Swift currently has no way to reflect a type&#39;s properties ‚Äî &lt;a href=&#34;https://developer.apple.com/documentation/swift/mirror&#34;&gt;Mirror&lt;/a&gt; only reflects property names and values of given instances. If the language adds type reflection in the future, I&#39;d love to add optional automatic table definitions that didn&#39;t require repeating the column names and types in my &lt;code&gt;static var table = ‚Ä¶&lt;/code&gt; definition. (Could also be based on property wrappers, e.g. &lt;code&gt;@Column&lt;/code&gt; and &lt;code&gt;@IndexedColumn&lt;/code&gt;.)&lt;/p&gt; &lt;p&gt;Ideally, any future language capabilities regarding type reflection would also include the default values of each property if set.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cleaner protocol name (&lt;code&gt;Blackbird.Model&lt;/code&gt;):&lt;/strong&gt; Swift protocols can&#39;t contain dots or be nested within another type.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;why is it called blackbird&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lockheed_SR-71_Blackbird&#34;&gt;The plane&lt;/a&gt;, of course.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s old, awesome, and ridiculously fast. Well, this database library is based on old, awesome tech (SQLite), and it&#39;s ridiculously fast.&lt;/p&gt; &#xA;&lt;p&gt;(If I&#39;m honest, though, it&#39;s mostly because it&#39;s a cool-ass plane. I don&#39;t even really care about planes, generally. Just that one.)&lt;/p&gt; &#xA;&lt;h3&gt;you know there are lots of other things called that&lt;/h3&gt; &#xA;&lt;p&gt;Of course &lt;a href=&#34;https://en.wikipedia.org/wiki/Blackbird&#34;&gt;there are&lt;/a&gt;. Who cares?&lt;/p&gt; &#xA;&lt;p&gt;This is a database engine that&#39;ll be used by, at most, a handful of nerds. It doesn&#39;t matter what it&#39;s called.&lt;/p&gt; &#xA;&lt;p&gt;I like unique names (rather than generic or descriptive names, like &lt;code&gt;Model&lt;/code&gt; or &lt;code&gt;SwiftSQLite&lt;/code&gt;) because they&#39;re easier to search for and harder to confuse with other types. So I wanted something memorable. I suppose I could&#39;ve called it something like &lt;code&gt;ButtDB&lt;/code&gt; ‚Äî memorable! ‚Äî but as I use it over the coming years, I wanted to type something cooler after all of my &lt;code&gt;struct&lt;/code&gt; definitions.&lt;/p&gt; &#xA;&lt;h3&gt;why didn&#39;t you just use [other SQLite-based Swift library]&lt;/h3&gt; &#xA;&lt;p&gt;I like to write my own libraries.&lt;/p&gt; &#xA;&lt;p&gt;My libraries can perfectly match my needs and the way I expect them to work. And if my needs or expectations change, I can change the libraries.&lt;/p&gt; &#xA;&lt;p&gt;I also learn a great deal when writing them, exercising and improving my skills to benefit the rest of my work.&lt;/p&gt; &#xA;&lt;p&gt;And when I write the libraries, I understand how everything works as I&#39;m using them, therefore creating fewer bugs and writing more efficient software.&lt;/p&gt; &#xA;&lt;h3&gt;why doesn&#39;t it abstract more of SQLite with more compile-time restrictions or query builders or dot-chaining or&lt;/h3&gt; &#xA;&lt;p&gt;I didn&#39;t want to get too far from using SQLite.&lt;/p&gt; &#xA;&lt;p&gt;This is for people who want the CRUD basics taken care of, but might sometimes want to write their own custom &lt;code&gt;SELECT&lt;/code&gt; or &lt;code&gt;UPDATE&lt;/code&gt; queries or control their own indexes without fighting the library or incurring unnecessary overhead.&lt;/p&gt; &#xA;&lt;p&gt;Also, dot-chaining sucks.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pointfreeco/swift-tagged</title>
    <updated>2022-12-06T01:39:10Z</updated>
    <id>tag:github.com,2022-12-06:/pointfreeco/swift-tagged</id>
    <link href="https://github.com/pointfreeco/swift-tagged" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üè∑ A wrapper type for safer, expressive code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üè∑ Tagged&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://actions-badge.atrox.dev/pointfreeco/swift-tagged/goto&#34;&gt;&lt;img src=&#34;https://github.com/pointfreeco/swift-tagged/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-tagged&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-tagged%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-tagged&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-tagged%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A wrapper type for safer, expressive code.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#the-problem&#34;&gt;The problem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#the-solution&#34;&gt;The solution&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#handling-tag-collisions&#34;&gt;Handling tag collisions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#accessing-raw-values&#34;&gt;Accessing raw values&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#nanolibraries&#34;&gt;Nanolibraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#interested-in-learning-more&#34;&gt;Interested in learning more?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;We often work with types that are far too general or hold far too many values than what is necessary for our domain. Sometimes we just want to differentiate between two seemingly equivalent values at the type level.&lt;/p&gt; &#xA;&lt;p&gt;An email address is nothing but a &lt;code&gt;String&lt;/code&gt;, but it should be restricted in the ways in which it can be used. And while a &lt;code&gt;User&lt;/code&gt; id may be represented with an &lt;code&gt;Int&lt;/code&gt;, it should be distinguishable from an &lt;code&gt;Int&lt;/code&gt;-based &lt;code&gt;Subscription&lt;/code&gt; id.&lt;/p&gt; &#xA;&lt;p&gt;Tagged can help solve serious runtime bugs at compile time by wrapping basic types in more specific contexts with ease.&lt;/p&gt; &#xA;&lt;h2&gt;The problem&lt;/h2&gt; &#xA;&lt;p&gt;Swift has an incredibly powerful type system, yet it&#39;s still common to model most data like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User {&#xA;  let id: Int&#xA;  let email: String&#xA;  let address: String&#xA;  let subscriptionId: Int?&#xA;}&#xA;&#xA;struct Subscription {&#xA;  let id: Int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;re modeling user and subscription ids using &lt;em&gt;the same type&lt;/em&gt;, but our app logic shouldn&#39;t treat these values interchangeably! We might write a function to fetch a subscription:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func fetchSubscription(byId id: Int) -&amp;gt; Subscription? {&#xA;  return subscriptions.first(where: { $0.id == id })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Code like this is super common, but it allows for serious runtime bugs and security issues! The following compiles, runs, and even reads reasonably at a glance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subscription = fetchSubscription(byId: user.id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code will fail to find a user&#39;s subscription. Worse yet, if a user id and subscription id overlap, it will display the &lt;em&gt;wrong&lt;/em&gt; subscription to the &lt;em&gt;wrong&lt;/em&gt; user! It may even surface sensitive data like billing details!&lt;/p&gt; &#xA;&lt;h2&gt;The solution&lt;/h2&gt; &#xA;&lt;p&gt;We can use Tagged to succinctly differentiate types.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Tagged&#xA;&#xA;struct User {&#xA;  let id: Id&#xA;  let email: String&#xA;  let address: String&#xA;  let subscriptionId: Subscription.Id?&#xA;&#xA;  typealias Id = Tagged&amp;lt;User, Int&amp;gt;&#xA;}&#xA;&#xA;struct Subscription {&#xA;  let id: Id&#xA;&#xA;  typealias Id = Tagged&amp;lt;Subscription, Int&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tagged depends on a generic &#34;tag&#34; parameter to make each type unique. Here we&#39;ve used the container type to uniquely tag each id.&lt;/p&gt; &#xA;&lt;p&gt;We can now update &lt;code&gt;fetchSubscription&lt;/code&gt; to take a &lt;code&gt;Subscription.Id&lt;/code&gt; where it previously took any &lt;code&gt;Int&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func fetchSubscription(byId id: Subscription.Id) -&amp;gt; Subscription? {&#xA;  return subscriptions.first(where: { $0.id == id })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And there&#39;s no chance we&#39;ll accidentally pass a user id where we expect a subscription id.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subscription = fetchSubscription(byId: user.id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üõë Cannot convert value of type &#39;User.Id&#39; (aka &#39;Tagged&amp;lt;User, Int&amp;gt;&#39;) to expected argument type &#39;Subscription.Id&#39; (aka &#39;Tagged&amp;lt;Subscription, Int&amp;gt;&#39;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We&#39;ve prevented a couple serious bugs at compile time!&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s another bug lurking in these types. We&#39;ve written a function with the following signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;sendWelcomeEmail(toAddress address: String)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It contains logic that sends an email to an email address. Unfortunately, it takes &lt;em&gt;any&lt;/em&gt; string as input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;sendWelcomeEmail(toAddress: user.address)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This compiles and runs, but &lt;code&gt;user.address&lt;/code&gt; refers to our user&#39;s &lt;em&gt;billing&lt;/em&gt; address, &lt;em&gt;not&lt;/em&gt; their email! None of our users are getting welcome emails! Worse yet, calling this function with invalid data may cause server churn and crashes.&lt;/p&gt; &#xA;&lt;p&gt;Tagged again can save the day.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User {&#xA;  let id: Id&#xA;  let email: Email&#xA;  let address: String&#xA;  let subscriptionId: Subscription.Id?&#xA;&#xA;  typealias Id = Tagged&amp;lt;User, Int&amp;gt;&#xA;  typealias Email = Tagged&amp;lt;User, String&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now update &lt;code&gt;sendWelcomeEmail&lt;/code&gt; and have another compile time guarantee.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;sendWelcomeEmail(toAddress address: Email)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;sendWelcomeEmail(toAddress: user.address)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üõë Cannot convert value of type &#39;String&#39; to expected argument type &#39;Email&#39; (aka &#39;Tagged&amp;lt;EmailTag, String&amp;gt;&#39;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Handling Tag Collisions&lt;/h3&gt; &#xA;&lt;p&gt;What if we want to tag two string values within the same type?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User {&#xA;  let id: Id&#xA;  let email: Email&#xA;  let address: Address&#xA;  let subscriptionId: Subscription.Id?&#xA;&#xA;  typealias Id = Tagged&amp;lt;User, Int&amp;gt;&#xA;  typealias Email = Tagged&amp;lt;User, String&amp;gt;&#xA;  typealias Address = Tagged&amp;lt;/* What goes here? */, String&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We shouldn&#39;t reuse &lt;code&gt;Tagged&amp;lt;User, String&amp;gt;&lt;/code&gt; because the compiler would treat &lt;code&gt;Email&lt;/code&gt; and &lt;code&gt;Address&lt;/code&gt; as the same type! We need a new tag, which means we need a new type. We can use any type, but an uninhabited enum is nestable and uninstantiable, which is perfect here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User {&#xA;  let id: Id&#xA;  let email: Email&#xA;  let address: Address&#xA;  let subscriptionId: Subscription.Id?&#xA;&#xA;  typealias Id = Tagged&amp;lt;User, Int&amp;gt;&#xA;  enum EmailTag {}&#xA;  typealias Email = Tagged&amp;lt;EmailTag, String&amp;gt;&#xA;  enum AddressTag {}&#xA;  typealias Address = Tagged&amp;lt;AddressTag, String&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;ve now distinguished &lt;code&gt;User.Email&lt;/code&gt; and &lt;code&gt;User.Address&lt;/code&gt; at the cost of an extra line per type, but things are documented very explicitly.&lt;/p&gt; &#xA;&lt;p&gt;If we want to save this extra line, we could instead take advantage of the fact that tuple labels are encoded in the type system and can be used to differentiate two seemingly equivalent tuple types.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User {&#xA;  let id: Id&#xA;  let email: Email&#xA;  let address: Address&#xA;  let subscriptionId: Subscription.Id?&#xA;&#xA;  typealias Id = Tagged&amp;lt;User, Int&amp;gt;&#xA;  typealias Email = Tagged&amp;lt;(User, email: ()), String&amp;gt;&#xA;  typealias Address = Tagged&amp;lt;(User, address: ()), String&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This may look a bit strange with the dangling &lt;code&gt;()&lt;/code&gt;, but it&#39;s otherwise nice and succinct, and the type safety we get is more than worth it.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing Raw Values&lt;/h3&gt; &#xA;&lt;p&gt;Tagged uses the same interface as &lt;code&gt;RawRepresentable&lt;/code&gt; to expose its raw values, &lt;em&gt;via&lt;/em&gt; a &lt;code&gt;rawValue&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;user.id.rawValue // Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also manually instantiate tagged types using &lt;code&gt;init(rawValue:)&lt;/code&gt;, though you can often avoid this using the &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#codable&#34;&gt;&lt;code&gt;Decodable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#expressibleby-literal&#34;&gt;&lt;code&gt;ExpressibleBy&lt;/code&gt;-&lt;code&gt;Literal&lt;/code&gt;&lt;/a&gt; family of protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Tagged uses &lt;a href=&#34;https://github.com/apple/swift-evolution/raw/master/proposals/0143-conditional-conformances.md&#34;&gt;conditional conformance&lt;/a&gt;, so you don&#39;t have to sacrifice expressiveness for safety. If the raw values are encodable or decodable, equatable, hashable, comparable, or expressible by literals, the tagged values follow suit. This means we can often avoid unnecessary (and potentially dangerous) &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#accessing-raw-values&#34;&gt;wrapping and unwrapping&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Equatable&lt;/h3&gt; &#xA;&lt;p&gt;A tagged type is automatically equatable if its raw value is equatable. We took advantage of this in &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#the-problem&#34;&gt;our example&lt;/a&gt;, above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;subscriptions.first(where: { $0.id == user.subscriptionId })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hashable&lt;/h3&gt; &#xA;&lt;p&gt;We can use underlying hashability to create a set or lookup dictionary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var userIds: Set&amp;lt;User.Id&amp;gt; = []&#xA;var users: [User.Id: User] = [:]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comparable&lt;/h3&gt; &#xA;&lt;p&gt;We can sort directly on a comparable tagged type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;userIds.sorted(by: &amp;lt;)&#xA;users.values.sorted(by: { $0.email &amp;lt; $1.email })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Codable&lt;/h3&gt; &#xA;&lt;p&gt;Tagged types are as encodable and decodable as the types they wrap.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User: Decodable {&#xA;  let id: Id&#xA;  let email: Email&#xA;  let address: Address&#xA;  let subscriptionId: Subscription.Id?&#xA;&#xA;  typealias Id = Tagged&amp;lt;User, Int&amp;gt;&#xA;  typealias Email = Tagged&amp;lt;(User, email: ()), String&amp;gt;&#xA;  typealias Address = Tagged&amp;lt;(User, address: ()), String&amp;gt;&#xA;}&#xA;&#xA;JSONDecoder().decode(User.self, from: Data(&#34;&#34;&#34;&#xA;{&#xA;  &#34;id&#34;: 1,&#xA;  &#34;email&#34;: &#34;blob@pointfree.co&#34;,&#xA;  &#34;address&#34;: &#34;1 Blob Ln&#34;,&#xA;  &#34;subscriptionId&#34;: null&#xA;}&#xA;&#34;&#34;&#34;.utf8))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ExpressiblyBy-Literal&lt;/h3&gt; &#xA;&lt;p&gt;Tagged types inherit literal expressibility. This is helpful for working with constants, like instantiating test data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;User(&#xA;  id: 1,&#xA;  email: &#34;blob@pointfree.co&#34;,&#xA;  address: &#34;1 Blob Ln&#34;,&#xA;  subscriptionId: 1&#xA;)&#xA;&#xA;// vs.&#xA;&#xA;User(&#xA;  id: User.Id(rawValue: 1),&#xA;  email: User.Email(rawValue: &#34;blob@pointfree.co&#34;),&#xA;  address: User.Address(rawValue: &#34;1 Blob Ln&#34;),&#xA;  subscriptionId: Subscription.Id(rawValue: 1)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Numeric&lt;/h3&gt; &#xA;&lt;p&gt;Numeric tagged types get mathematical operations for free!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Product {&#xA;  let amount: Cents&#xA;&#xA;  typealias Cents = Tagged&amp;lt;Product, Int&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let totalCents = products.reduce(0) { $0 + $1.amount }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nanolibraries&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Tagged&lt;/code&gt; library also comes with a few nanolibraries for handling common types in a type safe way.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;TaggedTime&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The API&#39;s we interact with often return timestamps in seconds or milliseconds measured from an epoch time. Keeping track of the units can be messy, either being done via documentation or by naming fields in a particular way, e.g. &lt;code&gt;publishedAtMs&lt;/code&gt;. Mixing up the units on accident can lead to wildly inaccurate logic.&lt;/p&gt; &#xA;&lt;p&gt;By importing &lt;code&gt;TaggedTime&lt;/code&gt; you will get access to two generic types, &lt;code&gt;Milliseconds&amp;lt;A&amp;gt;&lt;/code&gt; and &lt;code&gt;Seconds&amp;lt;A&amp;gt;&lt;/code&gt;, that allow the compiler to sort out the differences for you. You can use them in your models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BlogPost: Decodable {&#xA;  typealias Id = Tagged&amp;lt;BlogPost, Int&amp;gt;&#xA;&#xA;  let id: Id&#xA;  let publishedAt: Seconds&amp;lt;Int&amp;gt;&#xA;  let title: String&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you have documentation of the unit in the type automatically, and you can never accidentally compare seconds to milliseconds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let futureTime: Milliseconds&amp;lt;Int&amp;gt; = 1528378451000&#xA;&#xA;breakingBlogPost.publishedAt &amp;lt; futureTime&#xA;// üõë Binary operator &#39;&amp;lt;&#39; cannot be applied to operands of type&#xA;// &#39;Tagged&amp;lt;SecondsTag, Double&amp;gt;&#39; and &#39;Tagged&amp;lt;MillisecondsTag, Double&amp;gt;&#39;&#xA;&#xA;breakingBlogPost.publishedAt.milliseconds &amp;lt; futureTime&#xA;// ‚úÖ true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more on our blog post: &lt;a href=&#34;https://www.pointfree.co/blog/posts/6-tagged-seconds-and-milliseconds&#34;&gt;Tagged Seconds and Milliseconds&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;TaggedMoney&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;API&#39;s can also send back money amounts in two standard units: whole dollar amounts or cents (1/100 of a dollar). Keeping track of this distinction can also be messy and error prone.&lt;/p&gt; &#xA;&lt;p&gt;Importing the &lt;code&gt;TaggedMoney&lt;/code&gt; libary gives you access to two generic types, &lt;code&gt;Dollars&amp;lt;A&amp;gt;&lt;/code&gt; and &lt;code&gt;Cents&amp;lt;A&amp;gt;&lt;/code&gt;, that give you compile-time guarantees in keeping the two units separate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Prize {&#xA;  let amount: Dollars&amp;lt;Int&amp;gt; &#xA;  let name: String&#xA;}&#xA;&#xA;let moneyRaised: Cents&amp;lt;Int&amp;gt; = 50_000&#xA;&#xA;theBigPrize.amount &amp;lt; moneyRaised&#xA;// üõë Binary operator &#39;&amp;lt;&#39; cannot be applied to operands of type&#xA;// &#39;Tagged&amp;lt;DollarsTag, Int&amp;gt;&#39; and &#39;Tagged&amp;lt;CentsTag, Int&amp;gt;&#39;&#xA;&#xA;theBigPrize.amount.cents &amp;lt; moneyRaised&#xA;// ‚úÖ true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is important to note that these types do not encapsulate &lt;em&gt;currency&lt;/em&gt;, but rather just the abstract notion of the whole and fractional unit of money. You will still need to track particular currencies, like USD, EUR, MXN, alongside these values.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why not use a type alias?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Type aliases are just that: aliases. A type alias can be used interchangeably with the original type and offers no additional safety or guarantees.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why not use &lt;code&gt;RawRepresentable&lt;/code&gt;, or some other protocol?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Protocols like &lt;code&gt;RawRepresentable&lt;/code&gt; are useful, but they can&#39;t be extended conditionally, so you miss out on all of Tagged&#39;s free &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/#features&#34;&gt;features&lt;/a&gt;. Using a protocol means you need to manually opt each type into synthesizing &lt;code&gt;Equatable&lt;/code&gt;, &lt;code&gt;Hashable&lt;/code&gt;, &lt;code&gt;Decodable&lt;/code&gt; and &lt;code&gt;Encodable&lt;/code&gt;, and to achieve the same level of expressiveness as Tagged, you need to manually conform to other protocols, like &lt;code&gt;Comparable&lt;/code&gt;, the &lt;code&gt;ExpressibleBy&lt;/code&gt;-&lt;code&gt;Literal&lt;/code&gt; family of protocols, and &lt;code&gt;Numeric&lt;/code&gt;. That&#39;s a &lt;em&gt;lot&lt;/em&gt; of boilerplate you need to write or generate, but Tagged gives it to you for free!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can add Tagged to an Xcode project by adding it as a package dependency.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-tagged&#34;&gt;https://github.com/pointfreeco/swift-tagged&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you want to use Tagged in a &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;SwiftPM&lt;/a&gt; project, it&#39;s as simple as adding it to a &lt;code&gt;dependencies&lt;/code&gt; clause in your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(url: &#34;https://github.com/pointfreeco/swift-tagged&#34;, from: &#34;0.6.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interested in learning more?&lt;/h2&gt; &#xA;&lt;p&gt;These concepts (and more) are explored thoroughly in &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt;, a video series exploring functional programming and Swift hosted by &lt;a href=&#34;https://twitter.com/mbrandonw&#34;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Tagged was first explored in &lt;a href=&#34;https://www.pointfree.co/episodes/ep12-tagged&#34;&gt;Episode #12&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.pointfree.co/episodes/ep12-tagged&#34;&gt; &lt;img alt=&#34;video poster image&#34; src=&#34;https://d1hf1soyumxcgv.cloudfront.net/0012-tagged/0012-poster.jpg&#34; width=&#34;480&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All modules are released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-tagged/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jacklandrin/OnlySwitch</title>
    <updated>2022-12-06T01:39:10Z</updated>
    <id>tag:github.com,2022-12-06:/jacklandrin/OnlySwitch</id>
    <link href="https://github.com/jacklandrin/OnlySwitch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚öôÔ∏è All-in-One menu bar app, hide üíªMacBook Pro&#39;s notch, dark mode, AirPods, Shortcuts&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://badgen.net/github/release/jacklandrin/onlyswitch&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/UI-SwiftUI-green&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-Monterey-purple&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-orange&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img alt=&#34;AppIcon&#34; src=&#34;http://www.jacklandrin.com/wp-content/uploads/2021/12/only_switch_256.png&#34; width=&#34;128px&#34; align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;OnlySwitch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Menubar is smaller, you only need an All-in-One switch.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install by Homebrew&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install only-switch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manually Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jacklandrin/OnlySwitch/releases/download/release_2.3.9/OnlySwitch.dmg&#34;&gt;&lt;strong&gt;Download the app&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Communities&lt;/h2&gt; &#xA;&lt;p&gt;Telegram group: &lt;a href=&#34;https://t.me/OnlySwitchforMac&#34;&gt;https://t.me/OnlySwitchforMac&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Discord: &lt;a href=&#34;https://discord.gg/UzSNpYdPZj&#34;&gt;https://discord.gg/UzSNpYdPZj&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s the OnlySwitch?&lt;/h2&gt; &#xA;&lt;p&gt;OnlySwitch provides a series of toggle switches to simplify your routine work, such as Hidden desktop icons, dark mode, and hide notch of the new Macbook Pro. The switches show on your status bar, you can control them effortlessly. Switch and Shortcuts items can be customized (remove/add or sort) to show on the list.&lt;/p&gt; &#xA;&lt;p&gt;Since Version 1.7, &lt;strong&gt;Shortcuts&lt;/strong&gt; can be imported into OnlySwitch.&lt;/p&gt; &#xA;&lt;p&gt;Since Version 2.0, supports &lt;strong&gt;keyboard shortcuts&lt;/strong&gt;. You can control your all switches and Shortcuts with the keyboard.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Sits in the status bar&#34; src=&#34;https://www.jacklandrin.com/wp-content/uploads/2022/01/onlySwitch_19.png&#34; width=&#34;60%&#34; align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Since Version 2.3.6, the Switches Availability (including Player and Hide Menu Bar Icons) is moved to System&#39;s menu bar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.jacklandrin.com/wp-content/uploads/2022/08/Screenshot-2022-08-16-at-10.11.35.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Shortcuts Gallery&lt;/h2&gt; &#xA;&lt;p&gt;Everyone can contribute macOS Shortcuts for OnlySwitch now. Please read &lt;a href=&#34;https://raw.githubusercontent.com/jacklandrin/OnlySwitch/main/ShortcutsGalleryContributing.md&#34;&gt;How to contribute for Shortcuts Gallery&lt;/a&gt;. The shared Shortcuts will be displayed here:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Sits in the status bar&#34; src=&#34;https://www.jacklandrin.com/wp-content/uploads/2022/01/shortcutsgallery.png&#34; width=&#34;60%&#34; align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Switch list&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Switch&lt;/th&gt; &#xA;   &lt;th&gt;status&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Switch&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Hide desktop&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Hide notch&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;exist some issues&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Dark mode&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Low power mode&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;require password&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Screen Saver&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Show Finder Path Bar&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Night Shift&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mute mic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Autohide Dock&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Small launchpad icon&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Airpods&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pomodoro timer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bluetooth&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Show extension name&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode cache&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Show user library folder&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Autohide Menu Bar&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mute&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Show hidden files&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Empty pasteboard&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Radio Station&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Empty trash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Keep awake&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Show Recent Apps on Dock&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Spotify&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apple Music&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Screen Test&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Hide Menu Bar Icons&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;partly finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FKey&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Back Noises&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Dim Screen&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Eject Discs&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Since Version 1.3, switches can be added to or removed from the list.&lt;/p&gt; &#xA;&lt;h2&gt;Shortcuts Actions&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Actions&lt;/th&gt; &#xA;   &lt;th&gt;status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get wallpaper image&lt;/td&gt; &#xA;   &lt;td&gt;exist some issues&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get wallpaper url&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Is dark mode&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Set dark mode&lt;/td&gt; &#xA;   &lt;td&gt;finished&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Supported Languages üá∫üá≥&lt;/h2&gt; &#xA;&lt;p&gt;English, Simplified Chinese, German, Croatian, Turkish, Polish, Filipino, Dutch, Italian, Russian, Spanish, Japanese, Somali, Korean&lt;/p&gt; &#xA;&lt;h2&gt;Welcome to pull requests for these&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;support other languages&lt;/li&gt; &#xA; &lt;li&gt;fix bugs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have other good ideas üí°, feel free to send an E-mail to me.&lt;/p&gt; &#xA;&lt;p&gt;üöÄThe future plan is to make OnlySwitch become a toolkit-sharing platform. OnlySwitch will allow developers to distribute javascript code to create more features. @AruSeito and I are implementing this plan. If you are also interested in it, feel free to join us.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If you like it, help support this app by giving me a cup of tea for me to keep coding.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Sits in the status bar&#34; src=&#34;http://www.jacklandrin.com/wp-content/uploads/2021/12/donation.jpeg&#34; width=&#34;20%&#34; align=&#34;medium&#34; title=&#34;Made by QRCobot&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About hiding new Macbook Notch&lt;/h2&gt; &#xA;&lt;p&gt;The Hide notch switch only shows on the built-in display of M1 Pro/Max Macbook Pro. The switch just controls the current desktop, not all work desktops. Now, the Hide notch switch supports dynamic wallpaper, just the processing takes a much longer time.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Sits in the status bar&#34; src=&#34;http://www.jacklandrin.com/wp-content/uploads/2021/12/hidenotch.png&#34; width=&#34;60%&#34; align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About AirPods Switch&lt;/h2&gt; &#xA;&lt;p&gt;I use &lt;code&gt;classOfDevice&lt;/code&gt;(2360344) to check if a Bluetooth device is Airpods Pro, but I&#39;m not sure whether other AirPods modules are also 2360344, since I only have two AirPods Pros. If you are using AirPods 1~3, please tell me what the &lt;code&gt;classOfDevice&lt;/code&gt; is. Or I can detect the count of battery value to check if AirPods (when the count is 3, it&#39;s AirPods), like &lt;strong&gt;AirPods Battery Monitor For MAC OS&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About Radio Player&lt;/h2&gt; &#xA;&lt;p&gt;Radio Player supports m3u, and aac stream, but without sound wave effect. Please send me the crash log and stream URL if your Radio Player crashes. You can close the sound wave effect on the Radio setting, and that player is AVPlayer, more stable. In version 2.3.5, the radio play can be set to enable/disabled. If the function is disabled, the switch will be invisible in the list, and the radio player will be unregistered from Now Playing(But I don&#39;t know why there will be a little delay. It should be a problem by macOS).&lt;/p&gt; &#xA;&lt;h2&gt;About Low Power Mode&lt;/h2&gt; &#xA;&lt;p&gt;Low Power Mode uses Terminal commands that require root access, so the app will ask you to enter the password on every toggle.&lt;/p&gt; &#xA;&lt;h2&gt;About Screen Test&lt;/h2&gt; &#xA;&lt;p&gt;In Version 2.3, Only Switch brings a new feature, Screen Test. It provides a pure color view in full-screen mode, you can check dead pixels via it. Press the left and right arrow keys, the color will change from black, white, red, green, and blue. This function also can be used for screen cleaning, as you can see the stains on the screen.&lt;/p&gt; &#xA;&lt;h2&gt;About Hide Menu Bar Icons&lt;/h2&gt; &#xA;&lt;p&gt;This feature is new in version 2.3.2. To be honest, Hidden and Dozer are both good apps for this function. Many users install OnlySwitch and them simultaneously, but this also squeezes the menu bar, which is already lacking in space. Therefore, the feature integrates into OnlySwitch. &lt;img src=&#34;https://www.jacklandrin.com/wp-content/uploads/2022/06/mark_icon_guide.png&#34; alt=&#34;&#34;&gt; When the switch is on, items on the left of the split(arrow-pointing) icon are hidden. Hold ‚åò (command) and drag the icon to configure the hidden section. If you want to use it no longer, you can disable it in preferences, the split icon will disappear. You also can set the interval of autohide for it here. If your date on the menu bar is truncated when it&#39;s on, you can set this: System Preferences -&amp;gt; Dock &amp;amp; Menu Bar -&amp;gt; Clock -&amp;gt; Show date -&amp;gt; always.&lt;/p&gt; &#xA;&lt;h2&gt;About Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcuts&lt;/strong&gt; is a powerful iOS app that can help people make fantastic automation functions. It comes to macOS in Monterey as well. Many users are eager OnlySwitch to have more customizable features, and one good news is that the app supports Shortcuts display since Version 1.7. More menubar space, therefore, is saved. In the next versions, OnlySwitch will also provide more Shortcuts actions to improve user experience.&lt;/p&gt; &#xA;&lt;p&gt;Since Version 2.0, keyboard shortcuts can be set for Shortcuts.&lt;/p&gt; &#xA;&lt;p&gt;OnlySwitch offers some Shortcuts actions since Version 1.8. For example, you can config your dark mode switch. (&lt;strong&gt;Set Appearance&lt;/strong&gt; action by Shortcuts can also set dark mode, but the appearance status cannot be detected. So, OnlySwitch provides a set dark mode action)&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Sits in the status bar&#34; src=&#34;http://www.jacklandrin.com/wp-content/uploads/2022/01/shortcutsdarkmode.png&#34; width=&#34;60%&#34; align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;They talk about it&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.itopnews.de/?s=OnlySwitch&#34;&gt;itopnews.de&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ifun.de/suche/OnlySwitch&#34;&gt;Ifun.de&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appgefahren.de/onlyswitch-kleines-tool-mit-wichtigen-aktionen-fuer-die-mac-menueleiste-312135.html&#34;&gt;appgefahren.de&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://stadt-bremerhaven.de/only-switch-fuer-macos-schnellzugriff-auf-einige-systemoptionen/&#34;&gt;CASCHYS BLOG&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mac.softpedia.com/get/System-Utilities/OnlySwitch.shtml&#34;&gt;softpedia&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.macupdate.com/app/mac/63719/onlyswitch&#34;&gt;macupdate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.v1tx.com/post/onlyswitch/&#34;&gt;v1tx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.oschina.net/p/onlyswitch&#34;&gt;OSCHINA&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.macken.xyz/2021/12/gratis-ar-gott-alla-installningar-pa-ett-stalle-onlyswitch/&#34;&gt;Macken&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://applech2.com/archives/20220111-onlyswitch-all-in-one-status-bar-button-for-mac.html&#34;&gt;AAPL Ch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://appsofter.com/download/1265.html&#34;&gt;appsofter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://lifehacker.ru/onlyswitch&#34;&gt;lifehacker&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://appletechnikblog.com/de/2022/02/25/app-tipp-der-woche-only-switch-fuer-die-menueleiste-auf-dem-mac/&#34;&gt;appletechnikblog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.blog.themarfa.name/how-to-quickly-manage-macos-system-settings/&#34;&gt;All-in-One person&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.macgadget.de/News/2022/03/24/OnlySwitch-Schnellzugriff-auf-viele-Systemfunktionen-per-Mac-Menueleiste&#34;&gt;Mac Gadget&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.maxiapple.com/2022/05/onlyswitch-macos-mac-gratuit.html&#34;&gt;MaxiApple&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://insmac.org/macosx/5018-onlyswitch.html&#34;&gt;insmac&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tchgdns.de/onlyswitch-macos-open-source/&#34;&gt;tchgdns&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://insmac.org/macosx/5018-onlyswitch.html&#34;&gt;insmac&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://macbff.com/onlyswitch-2-3-1/&#34;&gt;macbff&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NightShift switch refers to &lt;a href=&#34;https://github.com/joshjon/nocturnal&#34;&gt;Nocturnal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/LaunchAtLogin&#34;&gt;LaunchAtLogin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AirPods Battery refers to &lt;a href=&#34;https://github.com/mohamed-arradi/AirpodsBattery-Monitor-For-Mac&#34;&gt;AirPods Battery Monitor For MAC OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dynamic Wallpaper processing refer to &lt;a href=&#34;https://itnext.io/macos-mojave-dynamic-wallpaper-fd26b0698223&#34;&gt;https://itnext.io/macos-mojave-dynamic-wallpaper-fd26b0698223&lt;/a&gt; and &lt;a href=&#34;https://github.com/mczachurski/wallpapper&#34;&gt;wallpapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elai950/AlertToast&#34;&gt;AlertToast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/syedhali/AudioStreamer&#34;&gt;AudioStreamer&lt;/a&gt; modified for live streaming&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/potato04/AudioSpectrum&#34;&gt;AudioSpectrum&lt;/a&gt; modified for AppKit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sound Source: &lt;a href=&#34;https://mixkit.co&#34;&gt;mixkit&lt;/a&gt; and &lt;a href=&#34;https://pixabay.com&#34;&gt;pixabay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/KeyboardShortcuts&#34;&gt;KeyboardShortcuts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Apple Music &amp;amp; Spotify Switch refer to &lt;a href=&#34;https://github.com/kmikiy/SpotMenu&#34;&gt;SpotMenu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The idea of hiding menu bar icons from &lt;a href=&#34;https://github.com/dwarvesf/hidden&#34;&gt;Hidden&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FKey refer to &lt;a href=&#34;https://github.com/Pyroh/Fluor&#34;&gt;Fluor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;@C0d3Br3aker for German translation&lt;/p&gt; &#xA;&lt;p&gt;@milotype for Croatian translation&lt;/p&gt; &#xA;&lt;p&gt;@berkbatuhans for Turkish translation&lt;/p&gt; &#xA;&lt;p&gt;@wrngwrld for volume slider of the radio player&lt;/p&gt; &#xA;&lt;p&gt;@kpacholak for Polish translation&lt;/p&gt; &#xA;&lt;p&gt;Alex for Dutch translation&lt;/p&gt; &#xA;&lt;p&gt;Rosel for Filipino translation&lt;/p&gt; &#xA;&lt;p&gt;@bellaposa for Italian translation&lt;/p&gt; &#xA;&lt;p&gt;@kirillyakopov for Russian translation&lt;/p&gt; &#xA;&lt;p&gt;@kant for syntax issue and Spanish translation&lt;/p&gt; &#xA;&lt;p&gt;@ShogoKoyama for Japanese translation&lt;/p&gt; &#xA;&lt;p&gt;@abdorizak for Somali translation&lt;/p&gt; &#xA;&lt;p&gt;@iosdevted for Korean translation&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>