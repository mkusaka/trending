<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T01:57:17Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>marmelroy/PhoneNumberKit</title>
    <updated>2022-06-04T01:57:17Z</updated>
    <id>tag:github.com,2022-06-04:/marmelroy/PhoneNumberKit</id>
    <link href="https://github.com/marmelroy/PhoneNumberKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift framework for parsing, formatting and validating international phone numbers. Inspired by Google&#39;s libphonenumber.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/889949/20864386/a1307950-b9ef-11e6-8a58-e9c5103738e7.png&#34; alt=&#34;PhoneNumberKit&#34;&gt; &lt;a href=&#34;http://cocoapods.org/?q=PhoneNumberKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/PhoneNumberKit.svg?maxAge=2592000&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/marmelroy/PhoneNumberKit&#34;&gt;&lt;img src=&#34;https://travis-ci.org/marmelroy/PhoneNumberKit.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/?q=PhoneNumberKit&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/PhoneNumberKit.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PhoneNumberKit&lt;/h1&gt; &#xA;&lt;p&gt;Swift 5.3 framework for parsing, formatting and validating international phone numbers. Inspired by Google&#39;s libphonenumber.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Features&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚òé&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Validate, normalize and extract the elements of any phone number string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;üíØ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple Swift syntax and a lightweight readable codebase.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;üèÅ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast. 1000 parses -&amp;gt; ~0.4 seconds.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;üìö&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Best-in-class metadata from Google&#39;s libPhoneNumber project.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;üèÜ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fully tested to match the accuracy of Google&#39;s JavaScript implementation of libPhoneNumber.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;üì±&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Built for iOS. Automatically grabs the default region code from the phone.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìù&lt;/td&gt; &#xA;   &lt;td&gt;Editable (!) AsYouType formatter for UITextField.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;span&gt;üá∫üá∏&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert country codes to country names and vice versa&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Import PhoneNumberKit at the top of the Swift file that will interact with a phone number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PhoneNumberKit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of your interactions with PhoneNumberKit happen through a PhoneNumberKit object. The first step you should take is to allocate one.&lt;/p&gt; &#xA;&lt;p&gt;A PhoneNumberKit instance is relatively expensive to allocate (it parses the metadata and keeps it in memory for the object&#39;s lifecycle), you should try and make sure PhoneNumberKit is allocated once and deallocated when no longer needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let phoneNumberKit = PhoneNumberKit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To parse a string, use the parse function. The region code is automatically computed but can be overridden if needed. PhoneNumberKit automatically does a hard type validation to ensure that the object created is valid, this can be quite costly performance-wise and can be turned off if needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let phoneNumber = try phoneNumberKit.parse(&#34;+33 6 89 017383&#34;)&#xA;    let phoneNumberCustomDefaultRegion = try phoneNumberKit.parse(&#34;+44 20 7031 3000&#34;, withRegion: &#34;GB&#34;, ignoreType: true)&#xA;}&#xA;catch {&#xA;    print(&#34;Generic parser error&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to parse and validate a large amount of numbers at once, PhoneNumberKit has a special, lightning fast array parsing function. The default region code is automatically computed but can be overridden if needed. Here you can also ignore hard type validation if it is not necessary. Invalid numbers are ignored in the resulting array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rawNumberArray = [&#34;0291 12345678&#34;, &#34;+49 291 12345678&#34;, &#34;04134 1234&#34;, &#34;09123 12345&#34;]&#xA;let phoneNumbers = phoneNumberKit.parse(rawNumberArray)&#xA;let phoneNumbersCustomDefaultRegion = phoneNumberKit.parse(rawNumberArray, withRegion: &#34;DE&#34;,  ignoreType: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PhoneNumber objects are immutable Swift structs with the following properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;phoneNumber.numberString&#xA;phoneNumber.countryCode&#xA;phoneNumber.nationalNumber&#xA;phoneNumber.numberExtension&#xA;phoneNumber.type // e.g Mobile or Fixed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Formatting a PhoneNumber object into a string is also very easy&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;phoneNumberKit.format(phoneNumber, toType: .e164) // +61236618300&#xA;phoneNumberKit.format(phoneNumber, toType: .international) // +61 2 3661 8300&#xA;phoneNumberKit.format(phoneNumber, toType: .national) // (02) 3661 8300&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PhoneNumberTextField&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7651280/67554038-e6512500-f751-11e9-93c9-9111e899a2ef.gif&#34; alt=&#34;AsYouTypeFormatter&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use the AsYouTypeFormatter, just replace your UITextField with a PhoneNumberTextField (if you are using Interface Builder make sure the module field is set to PhoneNumberKit).&lt;/p&gt; &#xA;&lt;p&gt;You can customize your TextField UI in the following ways&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;withFlag&lt;/code&gt; will display the country code for the &lt;code&gt;currentRegion&lt;/code&gt;. The &lt;code&gt;flagButton&lt;/code&gt; is displayed in the &lt;code&gt;leftView&lt;/code&gt; of the text field with it&#39;s size set based off your text size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;withExamplePlaceholder&lt;/code&gt; uses &lt;code&gt;attributedPlaceholder&lt;/code&gt; to show an example number for the &lt;code&gt;currentRegion&lt;/code&gt;. In addition when &lt;code&gt;withPrefix&lt;/code&gt; is set, the country code&#39;s prefix will automatically be inserted and removed when editing changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PhoneNumberTextField automatically formats phone numbers and gives the user full editing capabilities. If you want to customize you can use the PartialFormatter directly. The default region code is automatically computed but can be overridden if needed (see the example given below).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyGBTextField: PhoneNumberTextField {&#xA;    override var defaultRegion: String {&#xA;        get {&#xA;            return &#34;GB&#34;&#xA;        }&#xA;        set {} // exists for backward compatibility&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let textField = PhoneNumberTextField()&#xA;&#xA;PartialFormatter().formatPartial(&#34;+336895555&#34;) // +33 6 89 55 55&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also query countries for a dialing code or the dialing code for a given country&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;phoneNumberKit.countries(withCode: 33)&#xA;phoneNumberKit.countryCode(for: &#34;FR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Need more customization?&lt;/h2&gt; &#xA;&lt;p&gt;You can access the metadata powering PhoneNumberKit yourself, this enables you to program any behaviours as they may be implemented in PhoneNumberKit itself. It does mean you are exposed to the less polished interface of the underlying file format. If you program something you find useful please push it upstream!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;phoneNumberKit.metadata(for: &#34;AU&#34;)?.mobile?.exampleNumber // 412345678&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[Preferred] Setting up with &lt;a href=&#34;https://swiftpm.co/?query=PhoneNumberKit&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is now the preferred tool for distributing PhoneNumberKit.&lt;/p&gt; &#xA;&lt;p&gt;From Xcode 11+ :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select File &amp;gt; Swift Packages &amp;gt; Add Package Dependency. Enter &lt;code&gt;https://github.com/marmelroy/PhoneNumberKit.git&lt;/code&gt; in the &#34;Choose Package Repository&#34; dialog.&lt;/li&gt; &#xA; &lt;li&gt;In the next page, specify the version resolving rule as &#34;Up to Next Major&#34; from &#34;3.4.0&#34;.&lt;/li&gt; &#xA; &lt;li&gt;After Xcode checked out the source and resolving the version, you can choose the &#34;PhoneNumberKit&#34; library and add it to your app target.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more info, read &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;Adding Package Dependencies to Your App&lt;/a&gt; from Apple.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can also add PhoneNumberKit to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/marmelroy/PhoneNumberKit&#34;, from: &#34;3.4.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up with Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that automates the process of adding frameworks to your Cocoa application.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate PhoneNumberKit into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;marmelroy/PhoneNumberKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up with &lt;a href=&#34;http://cocoapods.org/?q=PhoneNumberKit&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;pod &#39;PhoneNumberKit&#39;, &#39;~&amp;gt; 3.4&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>AppPear/ChartView</title>
    <updated>2022-06-04T01:57:17Z</updated>
    <id>tag:github.com,2022-06-04:/AppPear/ChartView</id>
    <link href="https://github.com/AppPear/ChartView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChartView made in SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUICharts&lt;/h1&gt; &#xA;&lt;p&gt;Swift package for displaying charts effortlessly.&lt;/p&gt; &#xA;&lt;h2&gt;V2 Beta is here üéâüéâüéâ&lt;/h2&gt; &#xA;&lt;p&gt;V2 focuses on providing a strong and easy to use base, on which you can build your beautiful custom charts. It provides basic building blocks, like a chart view (bar, pie, line and ring chart), grid view, card view, interactive label for displaying the curent chart value. So you decide, whether you build a fully fledged interactive view, or just display a bare bone chart&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/AppPear/ChartView/wiki/How-to-install-SwiftUI-ChartView&#34;&gt;How to install SwiftUI ChartView&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/AppPear/ChartView/wiki/How-to-create-your-first-chart&#34;&gt;How to create your first chart&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;It supports interactions and animations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2826764/130787802-9aa619ee-05de-4343-ba3c-1796e4d05e08.gif&#34; width=&#34;26%&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2826764/130787814-283f3d26-6c9d-448b-b2c7-879e60a3b05d.gif&#34; width=&#34;26%&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;It is fully customizable, and works together with native SwiftUI elements well&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2826764/130785262-010d6791-16cf-485d-b920-29e4086477e2.png&#34; width=&#34;45%&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2826764/130785266-94a08622-2963-4177-8777-8bd3ad463809.png&#34; width=&#34;45%&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2826764/130785268-284314de-ba96-4fb7-a1e5-8a46578e1f0e.png&#34; width=&#34;45%&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Original (stable) version:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2826764/131211993-5d33312b-09af-44b4-a32e-ffaad739adfe.gif&#34; width=&#34;45%&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2826764/131211994-48c9ce4e-2e67-40a0-b727-c88bdbd22cd0.gif&#34; width=&#34;45%&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;It supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Line charts&lt;/li&gt; &#xA; &lt;li&gt;Bar charts&lt;/li&gt; &#xA; &lt;li&gt;Pie charts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Slack&lt;/h3&gt; &#xA;&lt;p&gt;Join our Slack channel for day to day conversation and more insights:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/swiftuichartview/shared_invite/zt-g6mxioq8-j3iUTF1YKX7D23ML3qcc4g&#34;&gt;Slack invite link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation:&lt;/h3&gt; &#xA;&lt;p&gt;It requires iOS 13 and Xcode 11!&lt;/p&gt; &#xA;&lt;p&gt;In Xcode go to &lt;code&gt;File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency&lt;/code&gt; and paste in the repo&#39;s url: &lt;code&gt;https://github.com/AppPear/ChartView&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;p&gt;import the package in the file you would like to use it: &lt;code&gt;import SwiftUICharts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can display a Chart by adding a chart view to your parent view:&lt;/p&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;Added an example project, with &lt;strong&gt;iOS, watchOS&lt;/strong&gt; target: &lt;a href=&#34;https://github.com/AppPear/ChartViewDemo&#34;&gt;https://github.com/AppPear/ChartViewDemo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Line charts&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;LineChartView with multiple lines!&lt;/strong&gt; First release of this feature, interaction is disabled for now, I&#39;ll figure it out how could be the best to interact with multiple lines with a single touch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2826764/131211991-eca64276-cf05-423f-a78a-697c55e44bbc.gif&#34; width=&#34;50%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;MultiLineChartView(data: [([8,32,11,23,40,28], GradientColors.green), ([90,99,78,111,70,60,77], GradientColors.purple), ([34,56,72,38,43,100,50], GradientColors.orngPink)], title: &#34;Title&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Gradient colors are now under the &lt;code&gt;GradientColor&lt;/code&gt; struct you can create your own gradient by &lt;code&gt;GradientColor(start: Color, end: Color)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Available preset gradients:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;orange&lt;/li&gt; &#xA; &lt;li&gt;blue&lt;/li&gt; &#xA; &lt;li&gt;green&lt;/li&gt; &#xA; &lt;li&gt;blu&lt;/li&gt; &#xA; &lt;li&gt;bluPurpl&lt;/li&gt; &#xA; &lt;li&gt;purple&lt;/li&gt; &#xA; &lt;li&gt;prplPink&lt;/li&gt; &#xA; &lt;li&gt;prplNeon&lt;/li&gt; &#xA; &lt;li&gt;orngPink&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Full screen view called LineView!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt; LineView(data: [8,23,54,32,12,37,7,23,43], title: &#34;Line chart&#34;, legend: &#34;Full screen&#34;) // legend is optional, use optional .padding()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adopts to dark mode automatically&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2826764/131211977-27439357-491d-4872-a6bd-f696edac4c7f.gif&#34; width=&#34;45%&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2826764/131211985-f77464d6-7fd8-429d-9e77-9f9bc7424d32.gif&#34; width=&#34;45%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can add your custom darkmode style by specifying:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let myCustomStyle = ChartStyle(...)&#xA;let myCutsomDarkModeStyle = ChartStyle(...)&#xA;myCustomStyle.darkModeStyle = myCutsomDarkModeStyle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Line chart is interactive, so you can drag across to reveal the data points&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can add a line chart with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt; LineChartView(data: [8,23,54,32,12,37,7,23,43], title: &#34;Title&#34;, legend: &#34;Legendary&#34;) // legend is optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Turn drop shadow off by adding to the Initialiser: &lt;code&gt;dropShadow: false&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bar charts&lt;/h2&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/2826764/131211994-48c9ce4e-2e67-40a0-b727-c88bdbd22cd0.gif&#34; width=&#34;45%&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;[New feature] you can display labels also along values and points for each bar to descirbe your data better!&lt;/strong&gt; &lt;strong&gt;Bar chart is interactive, so you can drag across to reveal the data points&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can add a bar chart with the following code:&lt;/p&gt; &#xA;&lt;p&gt;Labels and points:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt; BarChartView(data: ChartData(values: [(&#34;2018 Q4&#34;,63150), (&#34;2019 Q1&#34;,50900), (&#34;2019 Q2&#34;,77550), (&#34;2019 Q3&#34;,79600), (&#34;2019 Q4&#34;,92550)]), title: &#34;Sales&#34;, legend: &#34;Quarterly&#34;) // legend is optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only points:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt; BarChartView(data: ChartData(points: [8,23,54,32,12,37,7,23,43]), title: &#34;Title&#34;, legend: &#34;Legendary&#34;) // legend is optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;ChartData&lt;/strong&gt; structure Stores values in data pairs (actually tuple): &lt;code&gt;(String,Double)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you can have duplicate values&lt;/li&gt; &#xA; &lt;li&gt;keeps the data order&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can initialise ChartData multiple ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For integer values: &lt;code&gt;ChartData(points: [8,23,54,32,12,37,7,23,43])&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For floating point values: &lt;code&gt;ChartData(points: [2.34,3.14,4.56])&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For label,value pairs: &lt;code&gt;ChartData(values: [(&#34;2018 Q4&#34;,63150), (&#34;2019 Q1&#34;,50900)])&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can add different formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Small &lt;code&gt;ChartForm.small&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Medium &lt;code&gt;ChartForm.medium&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Large &lt;code&gt;ChartForm.large&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;BarChartView(data: ChartData(points: [8,23,54,32,12,37,7,23,43]), title: &#34;Title&#34;, form: ChartForm.small)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For floating point numbers, you can set a custom specifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;BarChartView(data: ChartData(points:[1.23,2.43,3.37]) ,title: &#34;A&#34;, valueSpecifier: &#34;%.2f&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For integers you can disable by passing: &lt;code&gt;valueSpecifier: &#34;%.0f&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can set your custom image in the upper right corner by passing in the initialiser: &lt;code&gt;cornerImage:Image(systemName: &#34;waveform.path.ecg&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Turn drop shadow off by adding to the Initialiser: &lt;code&gt;dropShadow: false&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;You can customize styling of the chart with a ChartStyle object:&lt;/h3&gt; &#xA;&lt;p&gt;Customizable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;background color&lt;/li&gt; &#xA; &lt;li&gt;accent color&lt;/li&gt; &#xA; &lt;li&gt;second gradient color&lt;/li&gt; &#xA; &lt;li&gt;text color&lt;/li&gt; &#xA; &lt;li&gt;legend text color&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt; let chartStyle = ChartStyle(backgroundColor: Color.black, accentColor: Colors.OrangeStart, secondGradientColor: Colors.OrangeEnd, chartFormSize: ChartForm.medium, textColor: Color.white, legendTextColor: Color.white )&#xA; ...&#xA; BarChartView(data: [8,23,54,32,12,37,7,23,43], title: &#34;Title&#34;, style: chartStyle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access built-in styles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt; BarChartView(data: [8,23,54,32,12,37,7,23,43], title: &#34;Title&#34;, style: Styles.barChartMidnightGreen)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;All styles available as a preset:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;barChartStyleOrangeLight&lt;/li&gt; &#xA; &lt;li&gt;barChartStyleOrangeDark&lt;/li&gt; &#xA; &lt;li&gt;barChartStyleNeonBlueLight&lt;/li&gt; &#xA; &lt;li&gt;barChartStyleNeonBlueDark&lt;/li&gt; &#xA; &lt;li&gt;barChartMidnightGreenLight&lt;/li&gt; &#xA; &lt;li&gt;barChartMidnightGreenDark&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/2826764/131211990-e41cec90-38f4-4965-8bdc-41c30b79acea.gif&#34; width=&#34;45%&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/2826764/131211999-6ec4f13b-0465-4135-b576-76e31b11a2c6.png&#34; width=&#34;45%&#34;&gt; &#xA;&lt;h3&gt;You can customize the size of the chart with a ChartForm object:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ChartForm&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.small&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.medium&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.large&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.detail&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;BarChartView(data: [8,23,54,32,12,37,7,23,43], title: &#34;Title&#34;, form: ChartForm.small)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;You can choose whether bar is animated or not after completing your gesture.&lt;/h3&gt; &#xA;&lt;p&gt;If you want to animate back movement after completing your gesture, you set &lt;code&gt;animatedToBack&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;WatchOS support for Bar charts:&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/2826764/131212000-a058fdd9-af40-4e64-adc3-82201ea2484d.png&#34; width=&#34;45%&#34;&gt; &#xA;&lt;h2&gt;Pie charts&lt;/h2&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/2826764/131211998-e142657d-0ebc-43b7-aeda-07cae4d9e34b.png&#34; width=&#34;45%&#34;&gt; &#xA;&lt;p&gt;You can add a pie chart with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt; PieChartView(data: [8,23,54,32], title: &#34;Title&#34;, legend: &#34;Legendary&#34;) // legend is optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Turn drop shadow off by adding to the Initialiser: &lt;code&gt;dropShadow: false&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twostraws/CodeScanner</title>
    <updated>2022-06-04T01:57:17Z</updated>
    <id>tag:github.com,2022-06-04:/twostraws/CodeScanner</id>
    <link href="https://github.com/twostraws/CodeScanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A SwiftUI view that is able to scan barcodes, QR codes, and more, and send back what was found.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CodeScanner&lt;/h1&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://img.shields.io/badge/iOS-13.0+-blue.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5.1-ff69b4.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://twitter.com/twostraws&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Contact-@twostraws-lightgrey.svg?style=flat&#34; alt=&#34;Twitter: @twostraws&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;CodeScanner is a SwiftUI framework that makes it easy to scan codes such as QR codes and barcodes. It provides a view struct, &lt;code&gt;CodeScannerView&lt;/code&gt;, that can be shown inside a sheet so that all scanning occurs in one place.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;You should create an instance of &lt;code&gt;CodeScannerView&lt;/code&gt; with at least two parameters: an array of the types to scan for, and a closure that will be called when a result is ready.&lt;/p&gt; &#xA;&lt;p&gt;Your completion closure must accept a &lt;code&gt;Result&amp;lt;ScanResult, ScanError&amp;gt;&lt;/code&gt;, where the success case is the code string and type that was found. For example, if you asked to scan for QR codes and bar codes, you might be told that a QR code containing the email address &lt;a href=&#34;mailto:paul@hackingwithswift.com&#34;&gt;paul@hackingwithswift.com&lt;/a&gt; was found.&lt;/p&gt; &#xA;&lt;p&gt;If things go wrong, your result will contain a &lt;code&gt;ScanError&lt;/code&gt; set to one of these three cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;badInput&lt;/code&gt;, if the camera cannot be accessed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;badOutput&lt;/code&gt;, if the camera is not capable of detecting codes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;initError&lt;/code&gt;, if initialization failed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; iOS &lt;em&gt;requires&lt;/em&gt; you to add the &#34;Privacy - Camera Usage Description&#34; key to your Info.plist file, providing a reason for why you want to access the camera.&lt;/p&gt; &#xA;&lt;h2&gt;Customization options&lt;/h2&gt; &#xA;&lt;p&gt;You can provide a variety of extra customization options to &lt;code&gt;CodeScannerView&lt;/code&gt; in its initializer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scanMode&lt;/code&gt; can be &lt;code&gt;.once&lt;/code&gt; to scan a single code, &lt;code&gt;.oncePerCode&lt;/code&gt; to scan many codes but only trigger finding each unique code once, and &lt;code&gt;.continuous&lt;/code&gt; will keep finding codes until you dismiss the scanner. Default: &lt;code&gt;.once&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scanInterval&lt;/code&gt; controls how fast individual codes should be scanned when running in &lt;code&gt;.continuous&lt;/code&gt; scan mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showViewfinder&lt;/code&gt; determines whether to show a box-like viewfinder over the UI. Default: false.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;simulatedData&lt;/code&gt; allows you to provide some test data to use in Simulator, when real scanning isn‚Äôt available. Default: an empty string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shouldVibrateOnSuccess&lt;/code&gt; allows you to determine whether device should vibrate when a code is found. Default: true.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to add UI customization, such as a dedicated Cancel button, you should wrap your &lt;code&gt;CodeScannerView&lt;/code&gt; instance in a &lt;code&gt;NavigationView&lt;/code&gt; and use a &lt;code&gt;toolbar()&lt;/code&gt; modifier to add whatever buttons you want.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s some example code to create a QR code-scanning view that prints the code that was found or any error. If it&#39;s used in the simulator it will return a name, because that&#39;s provided as the simulated data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;CodeScannerView(codeTypes: [.qr], simulatedData: &#34;Paul Hudson&#34;) { response in                    &#xA;    switch response {&#xA;    case .success(let result):&#xA;        print(&#34;Found code: \(result.string)&#34;)&#xA;    case .failure(let error):&#xA;        print(error.localizedDescription)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your completion closure is probably where you want to dismiss the &lt;code&gt;CodeScannerView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example on how to present the QR code-scanning view as a sheet and how the scanned barcode can be passed to the next view in a &lt;code&gt;NavigationView&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct QRCodeScannerExampleView: View {&#xA;    @State private var isPresentingScanner = false&#xA;    @State private var scannedCode: String?&#xA;&#xA;    var body: some View {&#xA;        VStack(spacing: 10) {&#xA;            if let code = scannedCode {&#xA;                NavigationLink(&#34;Next page&#34;, destination: NextView(scannedCode: code), isActive: .constant(true)).hidden()&#xA;            }&#xA;&#xA;            Button(&#34;Scan Code&#34;) {&#xA;                isPresentingScanner = true&#xA;            }&#xA;&#xA;            Text(&#34;Scan a QR code to begin&#34;)&#xA;        }&#xA;        .sheet(isPresented: $isPresentingScanner) {&#xA;            CodeScannerView(codeTypes: [.qr]) { response in&#xA;                if case let .success(result) = response {&#xA;                    scannedCode = result.string&#xA;                    isPresentingScanner = false&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;CodeScanner was made by &lt;a href=&#34;https://twitter.com/twostraws&#34;&gt;Paul Hudson&lt;/a&gt;, who writes &lt;a href=&#34;https://www.hackingwithswift.com&#34;&gt;free Swift tutorials over at Hacking with Swift&lt;/a&gt;. It‚Äôs available under the MIT license, which permits commercial use, modification, distribution, and private use.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2021 Paul Hudson&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
</feed>