<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-25T01:55:17Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>simibac/ConfettiSwiftUI</title>
    <updated>2022-07-25T01:55:17Z</updated>
    <id>tag:github.com,2022-07-25:/simibac/ConfettiSwiftUI</id>
    <link href="https://github.com/simibac/ConfettiSwiftUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SwiftUI Package for Configurable Confetti Animation üéâ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ConfettiSwiftUI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/PLATFORM-IOS%20|%20MACOS-lightgray?style=for-the-badge&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/badge/LICENSE-MIT-lightgray?style=for-the-badge&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/badge/MADE WITH-SWIFTUI-orange?style=for-the-badge&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Customizable Confetti Animations in SwiftUI&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/native_default_iphone.png&#34; width=&#34;480&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üåÑ Example&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/default.gif&#34; width=&#34;150&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/make-it-rain.gif&#34; width=&#34;150&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/explosion.gif&#34; width=&#34;150&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/color.gif&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üî≠ Overview&lt;/h2&gt; &#xA;&lt;p&gt;This is an open-source library to use with SwiftUI. It allows you to create and customize confetti animations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built with pure SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;Select from default confetti shapes or inject emojis as text.&lt;/li&gt; &#xA; &lt;li&gt;Configure the radius and angles of the explosion.&lt;/li&gt; &#xA; &lt;li&gt;Trigger animation with one state change multiple times.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üî®Support&lt;/h2&gt; &#xA;&lt;p&gt;If you like the project, don&#39;t forget to &lt;code&gt;put star üåü&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://brianmacdonald.github.io/Ethonate/address#0xCBa97323b4cA2fF9330827faF306065da7aA338F&#34;&gt; &lt;img src=&#34;https://brianmacdonald.github.io/Ethonate/svg/eth-donate-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;!-- &lt;a href=&#34;mailto:simibac2@icloud.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/EMAIL-SIMON-informational?style=for-the-badge&amp;logo=minutemailer&amp;logoColor=white&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.linkedin.com/in/simon-bachmann-73b695151/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LINKEDIN-informational?style=for-the-badge&amp;logo=linkedin&amp;logoColor=white&#34; &gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.paypal.com/donate?business=6H8D2EDR6LBX6&amp;no_recurring=0&amp;item_name=Thanks+for+supporting+open+source+contributions%21&amp;currency_code=CHF&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-informational?style=for-the-badge&amp;logo=paypal&amp;logoColor=white&#34; &gt;&lt;/a&gt; --&gt; &#xA;&lt;h2&gt;üß≠ Navigation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#-installation&#34;&gt;üíª Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#manually&#34;&gt;Manually&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#-requirements&#34;&gt;üß≥ Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#-usage&#34;&gt;üõ† Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#parameters&#34;&gt;Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#configurator-application-with-live-preview&#34;&gt;Configurator Application With Live Preview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#-contributors&#34;&gt;üë®‚Äçüíª Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#-author&#34;&gt;‚úçÔ∏è Author&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#-license&#34;&gt;üìÉ License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#-projects&#34;&gt;üì¶ Projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíª Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code. It‚Äôs integrated with the Swift build system to automate the process of downloading, compiling, and linking dependencies.&lt;/p&gt; &#xA;&lt;p&gt;To integrate &lt;code&gt;ConfettiSwiftUI&lt;/code&gt; into your Xcode project using Xcode 12, specify it in &lt;code&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency...&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;https://github.com/simibac/ConfettiSwiftUI.git, :branch=&#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use any of dependency managers, you can integrate &lt;code&gt;ConfettiSwiftUI&lt;/code&gt; into your project manually. Put &lt;code&gt;Sources/ConfettiSwiftUI&lt;/code&gt; folder in your Xcode project. Make sure to enable &lt;code&gt;Copy items if needed&lt;/code&gt; and &lt;code&gt;Create groups&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üß≥ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 14.0+ | macOS 11+&lt;/li&gt; &#xA; &lt;li&gt;Swift 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üõ† Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, add &lt;code&gt;import ConfettiSwiftUI&lt;/code&gt; on every &lt;code&gt;swift&lt;/code&gt; file you would like to use &lt;code&gt;ConfettiSwiftUI&lt;/code&gt;. Define a integer as a state varable which is responsible for triggering the animation. Any change to that variable will span a new animation (increment and decrement).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import ConfettiSwiftUI&#xA;import SwiftUI&#xA;&#xA;struct ContentView: View {&#xA;    &#xA;    @State private var counter: Int = 0&#xA;    &#xA;    var body: some View {&#xA;        Button(&#34;üéâ&#34;) {&#xA;            counter += 1&#xA;        }&#xA;        .confettiCannon(counter: $counter)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;counter&lt;/td&gt; &#xA;   &lt;td&gt;Binding&#xA;    &lt;int&gt;&lt;/int&gt;&lt;/td&gt; &#xA;   &lt;td&gt;on any change of this variable triggers the animation&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;num&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;amount of confettis&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;confettis&lt;/td&gt; &#xA;   &lt;td&gt;[ConfettiType]&lt;/td&gt; &#xA;   &lt;td&gt;list of shapes and text&lt;/td&gt; &#xA;   &lt;td&gt;[.shape(.circle), .shape(.triangle), .shape(.square), .shape(.slimRectangle), .shape(.roundedCross)]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;colors&lt;/td&gt; &#xA;   &lt;td&gt;[Color]&lt;/td&gt; &#xA;   &lt;td&gt;list of colors applied to the default shapes&lt;/td&gt; &#xA;   &lt;td&gt;[.blue, .red, .green, .yellow, .pink, .purple, .orange]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;confettiSize&lt;/td&gt; &#xA;   &lt;td&gt;CGFloat&lt;/td&gt; &#xA;   &lt;td&gt;size that confettis and emojis are scaled to&lt;/td&gt; &#xA;   &lt;td&gt;10.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rainHeight&lt;/td&gt; &#xA;   &lt;td&gt;CGFloat&lt;/td&gt; &#xA;   &lt;td&gt;vertical distance that confettis pass&lt;/td&gt; &#xA;   &lt;td&gt;600.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fadesOut&lt;/td&gt; &#xA;   &lt;td&gt;Bool&lt;/td&gt; &#xA;   &lt;td&gt;size that confettis and emojis are scaled to&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opacity&lt;/td&gt; &#xA;   &lt;td&gt;Double&lt;/td&gt; &#xA;   &lt;td&gt;maximum opacity during the animation&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openingAngle&lt;/td&gt; &#xA;   &lt;td&gt;Angle&lt;/td&gt; &#xA;   &lt;td&gt;boundary that defines the opening angle in degrees&lt;/td&gt; &#xA;   &lt;td&gt;Angle.degrees(60)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;closingAngle&lt;/td&gt; &#xA;   &lt;td&gt;Angle&lt;/td&gt; &#xA;   &lt;td&gt;boundary that defines the closing angle in degrees&lt;/td&gt; &#xA;   &lt;td&gt;Angle.degrees(120)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;radius&lt;/td&gt; &#xA;   &lt;td&gt;CGFloat&lt;/td&gt; &#xA;   &lt;td&gt;explosion radius&lt;/td&gt; &#xA;   &lt;td&gt;300.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;repetitions&lt;/td&gt; &#xA;   &lt;td&gt;Int&lt;/td&gt; &#xA;   &lt;td&gt;number of repetitions for the explosion&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;repetitionInterval&lt;/td&gt; &#xA;   &lt;td&gt;Double&lt;/td&gt; &#xA;   &lt;td&gt;duration between the repetitions&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Configurator Application With Live Preview&lt;/h3&gt; &#xA;&lt;p&gt;You can use the configurator app in &lt;a href=&#34;https://github.com/simibac/ConfettiSwiftUIDemo&#34;&gt;demo project here&lt;/a&gt; to make your desired animation or get inspired by one of the many examples.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/configurator.png&#34; width=&#34;150&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/examples.png&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Color and Size Configuration&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/color.gif&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.confettiCannon(counter: $counter, colors: [.red, .black], confettiSize: 20)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Repeat Configuration&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/repeat.gif&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.confettiCannon(counter: $counter, repetitions: 3, repetitionInterval: 0.7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Firework Configuration&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/explosion.gif&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.confettiCannon(counter: $counter, num: 50, openingAngle: Angle(degrees: 0), closingAngle: Angle(degrees: 360), radius: 200)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Emoji Configuration&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/heart.gif&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.confettiCannon(counter: $counter, confettis: [.text(&#34;‚ù§Ô∏è&#34;), .text(&#34;üíô&#34;), .text(&#34;üíö&#34;), .text(&#34;üß°&#34;)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Endless Configuration&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/constant.gif&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.confettiCannon(counter: $counter, num:1, confettis: [.text(&#34;üí©&#34;)], confettiSize: 20, repetitions: 100, repetitionInterval: 0.1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Make-it-Rain Configuration&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/Gifs/make-it-rain.gif&#34; width=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.confettiCannon(counter: $counter, num:1, confettis: [.text(&#34;üíµ&#34;), .text(&#34;üí∂&#34;), .text(&#34;üí∑&#34;), .text(&#34;üí¥&#34;)], confettiSize: 30, repetitions: 50, repetitionInterval: 0.1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üë®‚Äçüíª Contributors&lt;/h2&gt; &#xA;&lt;p&gt;All issue reports, feature requests, pull requests and GitHub stars are welcomed and much appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;‚úçÔ∏è Author&lt;/h2&gt; &#xA;&lt;p&gt;Simon Bachmann&lt;/p&gt; &#xA;&lt;h2&gt;üìÉ License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ConfettiSwiftUI&lt;/code&gt; is available under the MIT license. See the &lt;a href=&#34;https://github.com/simibac/ConfettiSwiftUI/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ Projects&lt;/h2&gt; &#xA;&lt;p&gt;The following projects have integrated ConfettiSwiftUI in their App.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://basiccode.de&#34;&gt;Basic Code&lt;/a&gt; available on the &lt;a href=&#34;https://apps.apple.com/de/app/basiccode/id1562309250&#34;&gt;AppStore&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simibac/ConfettiSwiftUI/master/#-overview&#34;&gt;Jump Up&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ddddxxx/LyricsX</title>
    <updated>2022-07-25T01:55:17Z</updated>
    <id>tag:github.com,2022-07-25:/ddddxxx/LyricsX</id>
    <link href="https://github.com/ddddxxx/LyricsX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üé∂ Ultimate lyrics app for macOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LyricsX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crowdin.com/project/lyricsx&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/lyricsx/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://telegram.me/LyricsXApp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-Telegram-blue.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-ddddxxx-lyricsx-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/d4ea2fbf-89a0-4490-875f-857a1568ec16&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ddddxxx/LyricsX/master/docs/img/icon.png&#34; width=&#34;128px&#34;&gt; &#xA;&lt;p&gt;Ultimate lyrics app for macOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ddddxxx/LyricsX-iOS&#34;&gt;LyricsX for iOS&lt;/a&gt; and &lt;a href=&#34;https://github.com/ddddxxx/lyricsx-cli&#34;&gt;lyricsx-cli for Linux&lt;/a&gt; is in early development.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install --cask lyricsx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac App Store&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/lyricsx/id1254743014?mt=12&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddddxxx/LyricsX/master/docs/img/MAS_badge.svg?sanitize=true&#34; alt=&#34;download on the Mac App Store&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Download from &lt;a href=&#34;https://github.com/ddddxxx/LyricsX/releases&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 10.11+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work perfectly with your favorite music players. &lt;a href=&#34;https://github.com/ddddxxx/MusicPlayer#supported-players&#34;&gt;List of supported players&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Automatically search &amp;amp; download live lyrics from various lyrics sources. &lt;a href=&#34;https://github.com/ddddxxx/LyricsKit#supported-sources&#34;&gt;List of supported sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Display lyrics on desktop and menubar. you can customize font, color and position.&lt;/li&gt; &#xA; &lt;li&gt;Adjust lyrics offset on status menu.&lt;/li&gt; &#xA; &lt;li&gt;Navigate the song with lyrics - Double click a line to jump to specific position.&lt;/li&gt; &#xA; &lt;li&gt;Drag &amp;amp; Drop to import/export lyrics file.&lt;/li&gt; &#xA; &lt;li&gt;Auto launch &amp;amp; quit with music player.&lt;/li&gt; &#xA; &lt;li&gt;Automatic conversion between Traditional Chinese and Simplified Chinese.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Lyrics Editor&lt;/h3&gt; &#xA;&lt;p&gt;LyricsX use custom lyrics file format &#34;LRCX&#34; which support word time tag, multi-language translation and more. Currently there&#39;s no official LRCX editor. You can use &lt;a href=&#34;https://github.com/Doublefire-Chen/Lrcx_Creator&#34;&gt;Lrcx_Creator&lt;/a&gt; for now (see &lt;a href=&#34;https://github.com/ddddxxx/LyricsX/issues/544&#34;&gt;#544&lt;/a&gt;, thanks to &lt;a href=&#34;https://github.com/Doublefire-Chen&#34;&gt;@Doublefire-Chen&lt;/a&gt;). Or use normal LRC editor, as LRCX is compatible with LRC.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ddddxxx/LyricsX/master/docs/img/desktop_lyrics.gif&#34; width=&#34;480px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ddddxxx/LyricsX/master/docs/img/preview_1.jpg&#34; width=&#34;1280px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ddddxxx/LyricsX/master/docs/img/preview_2.jpg&#34; width=&#34;1280px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ddddxxx/LyricsX/master/docs/img/preview_3.jpg&#34; width=&#34;1280px&#34;&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;h4&gt;Components&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddddxxx/LyricsKit&#34;&gt;LyricsKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddddxxx/MusicPlayer&#34;&gt;MusicPlayer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Open Source Libraries&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddddxxx/SwiftyOpenCC&#34;&gt;SwiftyOpenCC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddddxxx/GenericID&#34;&gt;GenericID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddddxxx/SwiftCF&#34;&gt;SwiftCF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddddxxx/Regex&#34;&gt;Regex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddddxxx/Semver&#34;&gt;Semver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddddxxx/TouchBarHelper&#34;&gt;TouchBarHelper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cx-org/CombineX&#34;&gt;CombineX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SnapKit/SnapKit&#34;&gt;SnapKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shpakovski/MASShortcut&#34;&gt;MASShortcut&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sparkle-project/Sparkle&#34;&gt;Sparkle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devxoul/Then&#34;&gt;Then&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Special Thanks&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MichaelRow/Lyrics&#34;&gt;Lyrics Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö†Ô∏è Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;All lyrics are property and copyright of their owners.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>blinksh/blink</title>
    <updated>2022-07-25T01:55:17Z</updated>
    <id>tag:github.com,2022-07-25:/blinksh/blink</id>
    <link href="https://github.com/blinksh/blink" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blink Mobile Shell for iOS (Mosh based)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Blink Shell for iOS&lt;/h1&gt; &#xA;&lt;p&gt;Do Blink! &lt;a href=&#34;https://blink.sh&#34;&gt;Blink&lt;/a&gt; is the first professional, desktop-grade terminal for iOS that leverages the support of Mosh and SSH. Thus, we can unequivocally guarantee stable connections, lightning-fast speeds, and full configurations. It can and should be your all-day-long tool.&lt;/p&gt; &#xA;&lt;p&gt;We did not create another terminal to fix your website on the go. Blink was built as a professional grade product from the onset. We started by analyzing what the must-haves were and we ended up grounding Blink on these three concepts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast rendering: dmesg in your Unix server should be instantaneous. We can&#39;t wait even a second to render. We didn&#39;t need to reinvent the wheel to make this happen. We simply used Chromium&#39;s HTerm to ensure that rendering is perfect and fast, even with those special, tricky encodings.&lt;/li&gt; &#xA; &lt;li&gt;Always on: Mosh transcends SSH&#39;s variability. Mosh overcomes the unstable and intermittent connectivity that we all associate with mobile connections. You can check your Safari without fear of having to restart the SSH connection. You can flawlessly jump from home, to the train, and then the office thanks to Mosh. Blink is rock-solid connected all the way. Mosh is readily available and can be easily installed on your server. Go to &lt;a href=&#34;https://mosh.org&#34;&gt;https://mosh.org&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Fully configurable: Blink embraces Bluetooth-coupled keyboards with gusto. Some like Caps as Esc on Vim, others Caps as Ctrl on Emacs. Blink champions them all. But there&#39;s more, because we want more. You can also add your own custom themes and fonts to Blink. During your always-on sessions, you&#39;re in your zone.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But, Blink is much more. Please read on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You should command your terminal, not navigate it. Blink will jump you right into a friendly shell and it&#39;ll be clear to you how to roll.&lt;/li&gt; &#xA; &lt;li&gt;The interface is straightforward. We dumped all menus and went full screen for your terminal.&lt;/li&gt; &#xA; &lt;li&gt;Use swipe to move between your open connections, slide down to close them, and even pinch to zoom!&lt;/li&gt; &#xA; &lt;li&gt;Configure your Blink connections by adding your own Hosts and RSA Encryption keys. Everything will look familiar and you get to work, fast!&lt;/li&gt; &#xA; &lt;li&gt;We&#39;ve incorporated SplitView, for those necessary Google searches and chats with coworkers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information, please visit &lt;a href=&#34;https://blink.sh&#34;&gt;Blink Shell&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Additions:&lt;/h1&gt; &#xA;&lt;p&gt;Blink also contains a set of shell utilities, so you can add / remove files, list them, etc.&lt;/p&gt; &#xA;&lt;p&gt;Specifically, the commands available (as of now) are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;cd, setenv, ls, touch, cp, rm, ln, mv, mkdir, rmdir, df, du, chksum, chmod, chflags, chgrp, stat, readlink, compress, uncompress, gzip, gunzip,&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;pwd, env, printenv, date, uname, id, groups, whoami, uptime&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;cat, grep, wc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;curl (includes http, https, scp, sftp...), scp, sftp&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;tar&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can call commands individually, or use small scripts using python or lua. There is redirection (&#34;&amp;gt;&#34;, &#34;&amp;lt;&#34;, &#34;&amp;amp;&amp;gt;&#34; ...), but no pipe.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All these commands are inside the &lt;code&gt;ios_system.framework&lt;/code&gt; (precompiled, for facility). If you want to edit the source (to add more commands), see: &lt;a href=&#34;https://github.com/holzschu/ios_system&#34;&gt;https://github.com/holzschu/ios_system&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;curl opens access to file transfers to and from your iPad (ftp, http, scp, sftp...). It uses the key management of BLINKSHELL (the keys you created with &#34;config&#34;). You can also specify keys with a path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl scp://host.name.edu/filename -o filename --key $SHARED/id_rsa --pass MyPassword &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the scp and sftp commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scp user@host.name.edu:filename . &#xA;sftp localFilename user@host.name.edu:~/ &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;scp and sftp are implemented through curl, by rewriting the arguments to follow the curl syntax. Pro: lighter implementation, smaller memory cost, less likely to have function name collisions. Con: some switches might not have exactly the same meaning.&lt;/p&gt; &#xA;&lt;h1&gt;Environment variables&lt;/h1&gt; &#xA;&lt;p&gt;In iOS, because of sandbox restrictions, you cannot write in the &lt;code&gt;~&lt;/code&gt; directory, only in &lt;code&gt;~/Documents/&lt;/code&gt;, &lt;code&gt;~/Library/&lt;/code&gt; and &lt;code&gt;~/tmp&lt;/code&gt;. Most Unix programs assume the configuration files are in &lt;code&gt;$HOME&lt;/code&gt;. So either you redefine &lt;code&gt;$HOME&lt;/code&gt; to &lt;code&gt;~/Documents/&lt;/code&gt; or you set configuration variables (using &lt;code&gt;setenv&lt;/code&gt;) to some other place.&lt;/p&gt; &#xA;&lt;p&gt;I do this in Blink, inside the &lt;code&gt;MCPSession.m&lt;/code&gt; file. The following variables are defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;setenv PATH = $PATH:~/Library/bin:~/Documents/bin&#xA;setenv PYTHONHOME = $HOME/Library/&#xA;setenv SSH_HOME = $HOME/Documents/&#xA;setenv CURL_HOME = $HOME/Documents/&#xA;setenv HGRCPATH = $HOME/Documents/.hgrc/&#xA;setenv SSL_CERT_FILE = $HOME/Documents/cacert.pem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change them permanently, it&#39;s probably best to edit &lt;code&gt;MCPSession.m&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Obtaining Blink&lt;/h1&gt; &#xA;&lt;p&gt;Blink is available now on the &lt;a href=&#34;https://itunes.apple.com/app/id1156707581&#34;&gt;AppStore&lt;/a&gt;. Check it out!&lt;/p&gt; &#xA;&lt;p&gt;If you would like to participate on its development, we would love to have you on board! There are two ways to collaborate with the project: you can download and build Blink yourself, or you can request an invitation to help us test future versions (on the raw branch). If you want to participate on the testing, follow and tweet us &lt;a href=&#34;https://twitter.com/BlinkShell&#34;&gt;@BlinkShell&lt;/a&gt; about your usage scenarios. Invitations will be sent out in waves, please be patient if you do not receive yours immediately.&lt;/p&gt; &#xA;&lt;p&gt;Bugs should be reported here on GitHub. Crash reports will be automatically reported back to us thanks to HockeyApp. If you have any questions or want to make sure we do not miss on an interesting feature, please send your suggestions to our Twitter account &lt;a href=&#34;https://twitter.com/BlinkShell&#34;&gt;@BlinkShell&lt;/a&gt;. We would love to discuss them with you! Please do not use Twitter to report bugs.&lt;/p&gt; &#xA;&lt;p&gt;We can&#39;t wait to receive your valuable feedback. Enjoy!&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/blinksh/blink/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We made a ton easier to build and install Blink yourself on your iOS devices through XCode. We provide a precompiled package with all the libraries for the master branch. Here are the steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/blinksh/blink.git &amp;amp;&amp;amp; \&#xA;    cd blink &amp;amp;&amp;amp; ./get_frameworks.sh &amp;amp;&amp;amp; \&#xA;    rm -rf Blink.xcodeproj/project.xcworkspace/xcshareddata/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Change developer ids&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp template_setup.xcconfig developer_setup.xcconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;edit developer_setup.xcconfig (change apple developer id etc).&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Open the project in XCode&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;3a. If you want to build without iCloud, Push Notificationa and/or Keychain sharing, Before doing anything else, go into the capabilities for the project and turn off Push Notifications, iCloud, and Keychain Sharing&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Connect the device you want to build for and select it in Product -&amp;gt; Destination&lt;/li&gt; &#xA; &lt;li&gt;Build and run on the device&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will download Blink and the associated frameworks: &lt;code&gt;libssh2&lt;/code&gt;, &lt;code&gt;OpenSSL&lt;/code&gt;, &lt;code&gt;libmoshios&lt;/code&gt;, &lt;code&gt;protobuf&lt;/code&gt; and &lt;code&gt;ios_system&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Although this is the quickest method to get you up and running, if you would like to compile all libraries and resources yourself, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/blinksh/blink/raw/BUILD.md&#34;&gt;BUILD.md&lt;/a&gt; file. Please let us know if you find any issues. Blink is a complex project with multiple low level dependencies and we are still looking for ways to simplify and automate the full compilation process.&lt;/p&gt; &#xA;&lt;h1&gt;Using Blink&lt;/h1&gt; &#xA;&lt;p&gt;Our UI is very straightforward and optimizes the experience on touch devices for the really important part, the terminal. You will jump right into a very simple shell, so you will know what to do. Here are a few more tricks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type &#39;help&#39; to find information at the shell.&lt;/li&gt; &#xA; &lt;li&gt;Use two fingers tap to create a new shell.&lt;/li&gt; &#xA; &lt;li&gt;Move between shells by swiping your finger.&lt;/li&gt; &#xA; &lt;li&gt;You can exit the session and get back to the shell to open a new connection.&lt;/li&gt; &#xA; &lt;li&gt;Use pinch gesture to increase or reduce size of text. You can also use Cmd+ or Cmd- if using the keyboard.&lt;/li&gt; &#xA; &lt;li&gt;Copy and Paste by selecting text o tapping the screen.&lt;/li&gt; &#xA; &lt;li&gt;Run &#39;config&#39; to setup your keys. Install them to a server through ssh-copy-id.&lt;/li&gt; &#xA; &lt;li&gt;Ctrl and Alt modifiers at the SmartKeys bar allow for continuous presses, like in a real keyboard.&lt;/li&gt; &#xA; &lt;li&gt;Use 3 finger tap to menu.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Changelog&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/blinksh/blink/raw/CHANGELOG.md&#34;&gt;View all changes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Attributions&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mosh.org&#34;&gt;Mosh&lt;/a&gt; was written by Keith Winstein, along with Anders Kaseorg, Quentin Smith, Richard Tibbetts, Keegan McAllister, and John Hood.&lt;/li&gt; &#xA; &lt;li&gt;This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit. (&lt;a href=&#34;https://www.openssl.org/&#34;&gt;https://www.openssl.org/&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.libssh2.org&#34;&gt;Libssh2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Entypo pictograms by Bruce Daniel &lt;a href=&#34;http://www.entypo.com&#34;&gt;www.entypo.com&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>