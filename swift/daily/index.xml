<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-19T01:41:54Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JamesSedlacek/Routing</title>
    <updated>2023-12-19T01:41:54Z</updated>
    <id>tag:github.com,2023-12-19:/JamesSedlacek/Routing</id>
    <link href="https://github.com/JamesSedlacek/Routing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Framework for abstracting navigation logic from views in SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/JamesSedlacek/Routing/raw/main/Assets/RoutingBannerArt.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift Package Manager&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamesSedlacek/Routing/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/JamesSedlacek/Routing.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamesSedlacek/Routing/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/JamesSedlacek/Routing.svg?color=blue&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamesSedlacek/Routing/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/JamesSedlacek/Routing.svg?color=blue&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamesSedlacek/Routing/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/JamesSedlacek/Routing&#34; alt=&#34;Pull Requests Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamesSedlacek/Routing/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/JamesSedlacek/Routing&#34; alt=&#34;Issues Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Routing&lt;/code&gt; is a framework for abstracting navigation logic from views in SwiftUI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simplifies code by removing navigation responsibilities from views.&lt;/li&gt; &#xA; &lt;li&gt;Leads to cleaner, more manageable code.&lt;/li&gt; &#xA; &lt;li&gt;Promotes better separation of concerns.&lt;/li&gt; &#xA; &lt;li&gt;Ridiculously &lt;strong&gt;lightweight&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type-safe&lt;/strong&gt; routing using enums and associated values.&lt;/li&gt; &#xA; &lt;li&gt;Unit Tested protocol implementations.&lt;/li&gt; &#xA; &lt;li&gt;Zero 3rd party dependencies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;iOS&lt;/strong&gt;: Requires iOS 16.0 or later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: Requires macOS 13.0 or later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;Routing&lt;/code&gt; using the Swift Package Manager.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In Xcode, select &#34;File&#34; &amp;gt; &#34;Add Package Dependencies&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Copy &amp;amp; paste the following into the &#34;Search or Enter Package URL&#34; search bar.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/JamesSedlacek/Routing.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Xcode will fetch the repository &amp;amp; the &#34;Routing&#34; library will be added to your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create the &#34;Route&#34; enum where views will navigate to.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import Routing&#xA;&#xA;enum Route: ViewDisplayable {&#xA;    case detail&#xA;    case settings&#xA;    &#xA;    @ViewBuilder&#xA;    var viewToDisplay: some View {&#xA;        switch self {&#xA;        case .detail:&#xA;            DetailView()&#xA;        case .settings:&#xA;            SettingsView()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;The RoutingView will be used instead of a NavigationStack. Pass in the Route enumeration, so that the RouterView can use them.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import Routing&#xA;&#xA;struct ContentView: View {&#xA;    var body: some View {&#xA;        RoutingView(Route.self) { router in&#xA;            // Main Content goes here&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Handle navigation using the Router functions&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// NavigationPath&#xA;func pop(_ count: Int)&#xA;func popToRoot()&#xA;func push(_ destination: Destination)&#xA;func push(_ destinations: [Destination])&#xA;&#xA;// Sheet&#xA;func presentSheet(_ destination: Destination)&#xA;func dismissSheet()&#xA;&#xA;// FullScreenCover&#xA;func presentFullScreenCover(_ destination: Destination)&#xA;func dismissFullScreenCover()&#xA;&#xA;// Alert&#xA;func presentAlert(_ alert: Alert)&#xA;func dismissAlert()&#xA;&#xA;// Toast&#xA;func presentToast(on edge: VerticalEdge = .top,&#xA;                  _ toast: Toast,&#xA;                  isAutoDismissed: Bool = true)&#xA;func dismissToast()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Router In View Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import Routing&#xA;&#xA;enum ExampleRoute: ViewDisplayable {&#xA;    case detail&#xA;    case settings&#xA;    &#xA;    @ViewBuilder&#xA;    var viewToDisplay: some View {&#xA;        switch self {&#xA;        case .detail:&#xA;            DetailView()&#xA;        case .settings:&#xA;            SettingsView()&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;struct ExampleView: View {&#xA;    var body: some View {&#xA;        RoutingView(ExampleRoute.self) { router in&#xA;    &#xA;            // Example of using `push`&#xA;            Button(&#34;Go to Detail View&#34;) {&#xA;                router.push(.detail)&#xA;            }&#xA;    &#xA;            // Example of using `pop`&#xA;            Button(&#34;Go back&#34;) {&#xA;                router.pop()&#xA;            }&#xA;        &#xA;            // Example of using `popToRoot`&#xA;            Button(&#34;Go back to Root&#34;) {&#xA;                router.popToRoot()&#xA;            }&#xA;            &#xA;            // Example of using `presentSheet`&#xA;            Button(&#34;Present Settings View&#34;) {&#xA;                router.presentSheet(.settings)&#xA;            }&#xA;            &#xA;            // Example of using `presentFullScreenCover`&#xA;            Button(&#34;Present Settings View&#34;) {&#xA;                router.presentFullScreenCover(.settings)&#xA;            }&#xA;&#xA;            // Example of using `presentAlert`&#xA;            Button(&#34;Show alert&#34;) {&#xA;                router.presentAlert(.init(title: Text(&#34;Testing alerts&#34;),&#xA;                                          primaryButton: .default(Text(&#34;OK&#34;)),&#xA;                                          secondaryButton: .cancel(Text(&#34;Cancel&#34;))))&#xA;            }&#xA;            &#xA;            // Example of using `presentToast`&#xA;            Button(&#34;Show toast&#34;) {&#xA;                router.presentToast(on: .bottom,&#xA;                                    .success(&#34;Testing toast&#34;),&#xA;                                    isAutoDismissed: false)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ViewModel Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import Routing&#xA;&#xA;enum ExampleRoute: ViewDisplayable {&#xA;    case detail&#xA;    case settings&#xA;    &#xA;    @ViewBuilder&#xA;    var viewToDisplay: some View {&#xA;        switch self {&#xA;        case .detail:&#xA;            DetailView()&#xA;        case .settings:&#xA;            SettingsView()&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;class ExampleViewModel: ObservableObject {&#xA;    private let router: Router&amp;lt;ExampleRoute&amp;gt;&#xA;&#xA;    init(router: Router&amp;lt;ExampleRoute&amp;gt;) {&#xA;        self.router = router&#xA;    }&#xA;&#xA;    func goToDetailView() {&#xA;        router.push(.detail)&#xA;    }&#xA;&#xA;    func goBack() {&#xA;        router.pop()&#xA;    }&#xA;&#xA;    func goBackToRoot() {&#xA;        router.popToRoot()&#xA;    }&#xA;}&#xA;&#xA;struct ExampleView: View {&#xA;    @StateObject var viewModel: ExampleViewModel&#xA;&#xA;    var body: some View {&#xA;        VStack {&#xA;            Button(&#34;Go to Detail View&#34;) {&#xA;                viewModel.goToDetailView()&#xA;            }&#xA;&#xA;            Button(&#34;Go back&#34;) {&#xA;                viewModel.goBack()&#xA;            }&#xA;&#xA;            Button(&#34;Go back to Root&#34;) {&#xA;                viewModel.goBackToRoot()&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;struct ContentView: View {&#xA;    var body: some View {&#xA;        RoutingView(ExampleRoute.self) { router in&#xA;            ExampleView(viewModel: .init(router: router))&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;James Sedlacek, find me on &lt;a href=&#34;https://twitter.com/jsedlacekjr&#34;&gt;X/Twitter&lt;/a&gt; or &lt;a href=&#34;https://www.linkedin.com/in/jamessedlacekjr/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Routing is available under the MIT license.&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Copyright (c) 2023 James Sedlacek&lt;/p&gt; &#xA; &lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA; &lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA; &lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>