<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-08T01:49:07Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>insidegui/WWDC</title>
    <updated>2023-06-08T01:49:07Z</updated>
    <id>tag:github.com,2023-06-08:/insidegui/WWDC</id>
    <link href="https://github.com/insidegui/WWDC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The unofficial WWDC app for macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The unofficial WWDC app for macOS&lt;/h1&gt; &#xA;&lt;p&gt;Enjoy WWDC from the comfort of your Mac with the unofficial WWDC app for macOS.&lt;/p&gt; &#xA;&lt;p&gt;Watch the Keynote and Platforms State of the Union live, as well as the videos for all sessions released during WWDC week and other video content you can find on Apple&#39;s website or &lt;a href=&#34;https://apps.apple.com/app/apple-developer/id640199958&#34;&gt;Developer&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;Keep track of the videos you‚Äôd like to watch or the ones you‚Äôve already watched and take notes that you can reference later when trying out new technologies you learned about in the sessions.&lt;/p&gt; &#xA;&lt;p&gt;‚¨áÔ∏è If you just want to download the latest release, go to &lt;a href=&#34;https://github.com/insidegui/WWDC/releases/latest&#34;&gt;the releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Explore&lt;/h2&gt; &#xA;&lt;p&gt;The Explore tab shows an overview of the latest content available, the videos you haven‚Äôt finished watching yet, recently favorited videos, as well as any special events that are currently live.&lt;/p&gt; &#xA;&lt;h2&gt;Schedule&lt;/h2&gt; &#xA;&lt;p&gt;The Schedule tab shows the schedule for each day in the current edition of WWDC and allows you to watch live streams for the Keynote and other sessions throughout the week.&lt;/p&gt; &#xA;&lt;h2&gt;Videos&lt;/h2&gt; &#xA;&lt;p&gt;Watch this year‚Äôs videos as they‚Äôre released and access videos from previous years. You can also read transcripts of sessions and easily jump to a specific point in the relevant video. Transcripts are also searchable and available in multiple languages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insidegui/WWDC/master/img/v7/Transcript.webp&#34; alt=&#34;videos&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Watch videos in 0.5x, 1x, 1.25x, 1.5x, 1.75x or 2x speeds&lt;/li&gt; &#xA; &lt;li&gt;Fullscreen and native picture-in-picture support&lt;/li&gt; &#xA; &lt;li&gt;Navigate video contents easily with the help of transcripts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Clip Sharing&lt;/h3&gt; &#xA;&lt;p&gt;Clip Sharing allows you to share a short segment (up to 5 minutes) from a session‚Äôs video. This is a great feature for quickly sharing snippets of content from the conference.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insidegui/WWDC/master/img/v7/ClipSharing.webp&#34; alt=&#34;clipsharing&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bookmarks&lt;/h2&gt; &#xA;&lt;p&gt;Have you ever found yourself watching a WWDC session and wishing you could take notes at a specific point in the video to refer back to later on? This is now possible with bookmarks.&lt;/p&gt; &#xA;&lt;p&gt;With bookmarks, you can create a reference point within a video and add an annotation to it. Your bookmark annotations can also be considered while using the search, so it‚Äôs easier than ever to find the content you&#39;ve bookmarked before.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insidegui/WWDC/master/img/v7/Video-Bookmark.webp&#34; alt=&#34;bookmarks&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;iCloud Sync&lt;/h2&gt; &#xA;&lt;p&gt;Enable the iCloud sync feature in preferences and your favorites, bookmarks and progress in sessions will be synced across your Macs.&lt;/p&gt; &#xA;&lt;h2&gt;Sharing&lt;/h2&gt; &#xA;&lt;p&gt;You can easily share links to sessions or videos by using the share button. The links shared are universal links that redirect to Apple‚Äôs developer website, so if they‚Äôre opened on a Mac which has the app installed, they will open in the app. The links are also compatible with iOS devices using the Apple Developer app.&lt;/p&gt; &#xA;&lt;h2&gt;Nerdy bits ü§ì&lt;/h2&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;We expect all of our contributors to help uphold the values set out in our &lt;a href=&#34;https://raw.githubusercontent.com/insidegui/WWDC/master/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;. We fundamentally believe this will help us build a better community, and with it a better app.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/insidegui/WWDC/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; before opening an issue or pull request.&lt;/p&gt; &#xA;&lt;h3&gt;External libraries&lt;/h3&gt; &#xA;&lt;p&gt;A number of third-party libraries are used by the app:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://realm.io&#34;&gt;Realm&lt;/a&gt;: data storage and caching&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sparkle-project.org/&#34;&gt;Sparkle&lt;/a&gt;: automatic updates&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/insidegui/CloudKitCodable&#34;&gt;CloudKitCodable&lt;/a&gt;: sync support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bustoutsolutions.github.io/siesta/&#34;&gt;Siesta&lt;/a&gt;: networking&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt;: reactive extensions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RxSwiftCommunity/RxRealm&#34;&gt;RxRealm&lt;/a&gt;: reactive extensions for Realm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Internal libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ConfCore&lt;/strong&gt; is the core of the app that deals with Apple&#39;s WWDC API, data storage, caching, syncing and transcripts (everything that has to do with data, basically)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ConfUIFoundation&lt;/strong&gt; contains shared color, font definitions and other useful extensions used by the main app target and &lt;code&gt;PlayerUI&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PlayerUI&lt;/strong&gt; contains the UI components for the video player and some general-purpose UI components used throughout the app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building the app&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Building requires Xcode 14 or later.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Clone this branch and before opening the project, run &lt;code&gt;./bootstrap.sh&lt;/code&gt;&lt;/strong&gt; to setup the environment. The script will ask for your Apple Developer team ID in order to configure the project. There&#39;s no need to change any code signing settings in Xcode. The bootstrap script will also install &lt;code&gt;swiftlint&lt;/code&gt; for you using &lt;code&gt;brew&lt;/code&gt; if you don‚Äôt have it yet.&lt;/p&gt; &#xA;&lt;p&gt;Since the app uses CloudKit, when you build it yourself, all CloudKit-related functionality will be disabled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Always use the &lt;code&gt;WWDC&lt;/code&gt; scheme when building&lt;/strong&gt; (the one that doesn&#39;t mention iCloud in its name).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insidegui/WWDC/master/img/v7/BuildTarget.webp&#34; alt=&#34;schedule&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Clearing app data during development&lt;/h3&gt; &#xA;&lt;p&gt;If you need to clear the app‚Äôs preferences and stored data during development, you can run &lt;code&gt;./cleardata.sh&lt;/code&gt; in the project folder. &lt;strong&gt;This will delete all of your preferences and data like favorites, bookmarks and progress in videos, so be careful&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://macstadium.com&#34; title=&#34;The unofficial WWDC app is using MacStadium&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insidegui/WWDC/master/img/MacStadiumOSS.png&#34; alt=&#34;Powered by MacStadium&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-atomics</title>
    <updated>2023-06-08T01:49:07Z</updated>
    <id>tag:github.com,2023-06-08:/apple/swift-atomics</id>
    <link href="https://github.com/apple/swift-atomics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Low-level atomic operations for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Atomics ‚öõÔ∏éÔ∏é&lt;/h1&gt; &#xA;&lt;p&gt;This package implements an atomics library for Swift, providing atomic operations for a variety of Swift types, including integers and pointer values. The goal is to enable intrepid developers to start building synchronization constructs directly in Swift.&lt;/p&gt; &#xA;&lt;p&gt;Atomic operations aren&#39;t subject to the usual exclusivity rules. The same memory location may be safely read and updated from multiple concurrent threads of execution, as long as all such access is done through atomic operations. For example, here is a trivial atomic counter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Atomics&#xA;import Dispatch&#xA;&#xA;let counter = ManagedAtomic&amp;lt;Int&amp;gt;(0)&#xA;&#xA;DispatchQueue.concurrentPerform(iterations: 10) { _ in&#xA;  for _ in 0 ..&amp;lt; 1_000_000 {&#xA;    counter.wrappingIncrement(ordering: .relaxed)&#xA;  }&#xA;}&#xA;counter.load(ordering: .relaxed) // ‚üπ 10_000_000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The only way to access the counter value is to use one of the methods provided by &lt;code&gt;ManagedAtomic&lt;/code&gt;, each of which implement a particular atomic operation, and each of which require an explicit ordering value. (Swift supports a subset of the C/C++ memory orderings.)&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/#word-of-warning&#34;&gt;Word of Warning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/#lock-free-vs-wait-free-operations&#34;&gt;Lock-Free vs Wait-Free Operations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/#portability-concerns&#34;&gt;Portability Concerns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/#memory-management&#34;&gt;Memory Management&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/#source-stability&#34;&gt;Source Stability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/#contributing-to-swift-atomics&#34;&gt;Contributing to Swift Atomics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Word of Warning&lt;/h2&gt; &#xA;&lt;p&gt;Atomic values are fundamental to managing concurrency. However, they are far too low level to be used lightly. These things are full of traps. They are extremely difficult to use correctly -- far trickier than, say, unsafe pointers.&lt;/p&gt; &#xA;&lt;p&gt;The best way to deal with atomics is to avoid directly using them. It&#39;s always better to rely on higher-level constructs, whenever possible.&lt;/p&gt; &#xA;&lt;p&gt;This package exists to support the few cases where the use of atomics is unavoidable -- such as when implementing those high-level synchronization/concurrency constructs.&lt;/p&gt; &#xA;&lt;p&gt;The primary focus is to provide systems programmers access to atomic operations with an API design that emphasizes clarity over superficial convenience:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Each atomic operation is invoked in client code using a clear, unabbreviated name that directly specifies what that operation does. Atomic operations are never implicit -- they are always clearly spelled out.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is no default memory ordering, to avoid accidental (and costly) use of sequential consistency. (This is surprisingly common issue in C/C++.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Operations such as compare/exchange prefer to keep input values cleanly separated from results. There are no &lt;code&gt;inout&lt;/code&gt; parameters.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To use &lt;code&gt;Atomics&lt;/code&gt; in your own project, you need to set it up as a package dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.6&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;MyPackage&#34;,&#xA;  dependencies: [&#xA;    .package(&#xA;      url: &#34;https://github.com/apple/swift-atomics.git&#34;, &#xA;      .upToNextMajor(from: &#34;1.1.0&#34;) // or `.upToNextMinor&#xA;    )&#xA;  ],&#xA;  targets: [&#xA;    .target(&#xA;      name: &#34;MyTarget&#34;,&#xA;      dependencies: [&#xA;        .product(name: &#34;Atomics&#34;, package: &#34;swift-atomics&#34;)&#xA;      ]&#xA;    )&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The package implements atomic operations for the following Swift constructs, all of which conform to the public &lt;code&gt;AtomicValue&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standard signed integer types (&lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;Int8&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Standard unsigned integer types (&lt;code&gt;UInt&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;UInt8&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Booleans (&lt;code&gt;Bool&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Standard pointer types (&lt;code&gt;UnsafeRawPointer&lt;/code&gt;, &lt;code&gt;UnsafeMutableRawPointer&lt;/code&gt;, &lt;code&gt;UnsafePointer&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;UnsafeMutablePointer&amp;lt;T&amp;gt;&lt;/code&gt;), along with their optional-wrapped forms (such as &lt;code&gt;Optional&amp;lt;UnsafePointer&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Unmanaged references (&lt;code&gt;Unmanaged&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Optional&amp;lt;Unmanaged&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A special &lt;code&gt;DoubleWord&lt;/code&gt; type that consists of two &lt;code&gt;UInt&lt;/code&gt; values, &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt;, providing double-wide atomic primitives&lt;/li&gt; &#xA; &lt;li&gt;Any &lt;code&gt;RawRepresentable&lt;/code&gt; type whose &lt;code&gt;RawValue&lt;/code&gt; is in turn an atomic type (such as simple custom enum types)&lt;/li&gt; &#xA; &lt;li&gt;Strong references to class instances that opted into atomic use (by conforming to the &lt;code&gt;AtomicReference&lt;/code&gt; protocol)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of particular note is full support for atomic strong references. This provides a convenient memory reclamation solution for concurrent data structures that fits perfectly with Swift&#39;s reference counting memory management model. (Atomic strong references are implemented in terms of &lt;code&gt;DoubleWord&lt;/code&gt; operations.) However, accessing an atomic strong reference is (relatively) expensive, so we also provide a separate set of efficient constructs (&lt;code&gt;ManagedAtomicLazyReference&lt;/code&gt; and &lt;code&gt;UnsafeAtomicLazyReference&lt;/code&gt;) for the common case of a lazily initialized (but otherwise constant) atomic strong reference.&lt;/p&gt; &#xA;&lt;h3&gt;Lock-Free vs Wait-Free Operations&lt;/h3&gt; &#xA;&lt;p&gt;All atomic operations exposed by this package are guaranteed to have lock-free implementations. However, we do not guarantee wait-free operation -- depending on the capabilities of the target platform, some of the exposed operations may be implemented by compare-and-exchange loops. That said, all atomic operations map directly to dedicated CPU instructions where available -- to the extent supported by llvm &amp;amp; Clang.&lt;/p&gt; &#xA;&lt;h3&gt;Memory Management&lt;/h3&gt; &#xA;&lt;p&gt;Atomic access is implemented in terms of dedicated atomic storage representations that are kept distinct from the corresponding regular (non-atomic) type. (E.g., the actual integer value underlying the counter above isn&#39;t directly accessible.) This has several advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;it helps prevent accidental non-atomic access to atomic variables,&lt;/li&gt; &#xA; &lt;li&gt;it enables custom storage representations (such as the one used by atomic strong references), and&lt;/li&gt; &#xA; &lt;li&gt;it is a better fit with the standard C atomics library that we use to implement the actual operations (as enabled by &lt;a href=&#34;https://github.com/apple/swift-evolution/raw/master/proposals/0282-atomics.md&#34;&gt;SE-0282&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While the underlying pointer-based atomic operations are exposed as static methods on the corresponding &lt;code&gt;AtomicStorage&lt;/code&gt; types, we strongly recommend the use of higher-level atomic wrappers to manage the details of preparing/disposing atomic storage. This version of the library provides two wrapper types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;an easy to use, memory-safe &lt;code&gt;ManagedAtomic&amp;lt;T&amp;gt;&lt;/code&gt; generic class and&lt;/li&gt; &#xA; &lt;li&gt;a less convenient, but more flexible &lt;code&gt;UnsafeAtomic&amp;lt;T&amp;gt;&lt;/code&gt; generic struct.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both constructs provide the following operations on all &lt;code&gt;AtomicValue&lt;/code&gt; types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func load(ordering: AtomicLoadOrdering) -&amp;gt; Value&#xA;func store(_ desired: Value, ordering: AtomicStoreOrdering)&#xA;func exchange(_ desired: Value, ordering: AtomicUpdateOrdering) -&amp;gt; Value&#xA;&#xA;func compareExchange(&#xA;    expected: Value,&#xA;    desired: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; (exchanged: Bool, original: Value)&#xA;&#xA;func compareExchange(&#xA;    expected: Value,&#xA;    desired: Value,&#xA;    successOrdering: AtomicUpdateOrdering,&#xA;    failureOrdering: AtomicLoadOrdering&#xA;) -&amp;gt; (exchanged: Bool, original: Value)&#xA;&#xA;func weakCompareExchange(&#xA;    expected: Value,&#xA;    desired: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; (exchanged: Bool, original: Value)&#xA;&#xA;func weakCompareExchange(&#xA;    expected: Value,&#xA;    desired: Value,&#xA;    successOrdering: AtomicUpdateOrdering,&#xA;    failureOrdering: AtomicLoadOrdering&#xA;) -&amp;gt; (exchanged: Bool, original: Value)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Integer types come with additional atomic operations for incrementing or decrementing values and bitwise logical operations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func loadThenWrappingIncrement(&#xA;    by operand: Value = 1,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func loadThenWrappingDecrement(&#xA;    by operand: Value = 1,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func loadThenBitwiseAnd(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func loadThenBitwiseOr(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func loadThenBitwiseXor(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func wrappingIncrementThenLoad(&#xA;    by operand: Value = 1,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func wrappingDecrementThenLoad(&#xA;    by operand: Value = 1,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func bitwiseAndThenLoad(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func bitwiseOrThenLoad(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func bitwiseXorThenLoad(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;&#xA;func wrappingIncrement(&#xA;    by operand: Value = 1,&#xA;    ordering: AtomicUpdateOrdering&#xA;)&#xA;&#xA;func wrappingDecrement(&#xA;    by operand: Value = 1,&#xA;    ordering: AtomicUpdateOrdering&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Bool&lt;/code&gt; provides select additional boolean operations along the same vein.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func loadThenLogicalAnd(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func loadThenLogicalOr(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func loadThenLogicalXor(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func logicalAndThenLoad(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func logicalOrThenLoad(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&#xA;func logicalXorThenLoad(&#xA;    with operand: Value,&#xA;    ordering: AtomicUpdateOrdering&#xA;) -&amp;gt; Value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an introduction to the APIs provided by this package, for now please see the &lt;a href=&#34;https://github.com/apple/swift-evolution/raw/3a358a07e878a58bec256639d2beb48461fc3177/proposals/0282-atomics.md&#34;&gt;first version of SE-0282&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The current version of the &lt;code&gt;Atomics&lt;/code&gt; module does not implement APIs for tagged atomics (see &lt;a href=&#34;https://github.com/apple/swift-atomics/issues/1&#34;&gt;issue #1&lt;/a&gt;), although it does expose a &lt;code&gt;DoubleWord&lt;/code&gt; type that can be used to implement them. (Atomic strong references are already implemented in terms of &lt;code&gt;DoubleWord&lt;/code&gt;, although in their current form they do not expose any user-customizable bits.)&lt;/p&gt; &#xA;&lt;h2&gt;Source Stability&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Atomics package is source stable. The version numbers follow &lt;a href=&#34;https://semver.org&#34;&gt;Semantic Versioning&lt;/a&gt; -- source breaking changes to public API can only land in a new major version.&lt;/p&gt; &#xA;&lt;p&gt;The public API of version 1.1 of the &lt;code&gt;swift-atomics&lt;/code&gt; package consists of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;Atomics&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;By &#34;underscored declarations&#34; we mean declarations that have a leading underscore anywhere in their fully qualified name. For instance, here are some names that wouldn&#39;t be considered part of the public API, even if they were technically marked public:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule.Bar._someMember(value:)&lt;/code&gt; (underscored member)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule._Bar.someMember&lt;/code&gt; (underscored type)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_FooModule.Bar&lt;/code&gt; (underscored module)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule.Bar.init(_value:)&lt;/code&gt; (underscored initializer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases.&lt;/p&gt; &#xA;&lt;p&gt;Note that contents of the &lt;code&gt;_AtomicsShims&lt;/code&gt; module explicitly aren&#39;t public API. (As implied by its underscored module name.) The definitions therein may therefore change at whim, and the entire module may be removed in any new release -- do not import this module directly. We also don&#39;t make any source compatibility promises about the contents of the &lt;code&gt;Utilities&lt;/code&gt;, &lt;code&gt;Tests&lt;/code&gt;, &lt;code&gt;Xcode&lt;/code&gt; and &lt;code&gt;cmake&lt;/code&gt; subdirectories.&lt;/p&gt; &#xA;&lt;p&gt;If you have a use case that requires using underscored APIs, please &lt;a href=&#34;https://github.com/apple/swift-atomics/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&#34;&gt;submit a Feature Request&lt;/a&gt; describing it! We&#39;d like the public interface to be as useful as possible -- although preferably without compromising safety or limiting future evolution.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may introduce changes to these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, new versions of this package will require clients to upgrade to a more recent Swift toolchain release. (This allows the package to make use of new language/stdlib features, build on compiler bug fixes, and adopt new package manager functionality as soon as they are available.)&lt;/p&gt; &#xA;&lt;p&gt;Requiring a new Swift release will only require a minor version bump.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Swift Atomics&lt;/h2&gt; &#xA;&lt;p&gt;Swift Atomics is a standalone library separate from the core Swift project. We expect some of the atomics APIs may eventually get incorporated into the Swift Standard Library. If and when that happens such changes will be proposed to the Swift Standard Library using the established evolution process of the Swift project.&lt;/p&gt; &#xA;&lt;p&gt;This library is licensed under the &lt;a href=&#34;https://swift.org/LICENSE.txt&#34;&gt;Swift License&lt;/a&gt;. For more information, see the Swift.org &lt;a href=&#34;https://swift.org/community/&#34;&gt;Community Guidelines&lt;/a&gt;, &lt;a href=&#34;https://swift.org/contributing/&#34;&gt;Contribution Guidelines&lt;/a&gt;, as well as the files &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT.md&lt;/a&gt; at the root of this repository.&lt;/p&gt; &#xA;&lt;p&gt;Swift Atomics uses GitHub issues to track bugs and enhancement requests. We use pull requests for development.&lt;/p&gt; &#xA;&lt;p&gt;We have a dedicated &lt;a href=&#34;https://forums.swift.org/c/related-projects/swift-atomics&#34;&gt;Swift Atomics Forum&lt;/a&gt; where people can ask and answer questions on how to use or work on this package. It&#39;s also a great place to discuss its evolution.&lt;/p&gt; &#xA;&lt;p&gt;If you find something that looks like a bug, please open a &lt;a href=&#34;https://github.com/apple/swift-atomics/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=BUG_REPORT.md&#34;&gt;Bug Report&lt;/a&gt;! Fill out as many details as you can.&lt;/p&gt; &#xA;&lt;p&gt;To fix a small issue or make a tiny improvement, simply &lt;a href=&#34;https://github.com/apple/swift-atomics/compare&#34;&gt;submit a PR&lt;/a&gt; with the changes you want to make. If there is an &lt;a href=&#34;https://github.com/apple/swift-atomics/issues&#34;&gt;existing issue&lt;/a&gt; for the bug you&#39;re fixing, please include a reference to it. Make sure to add tests covering whatever changes you are making.&lt;/p&gt; &#xA;&lt;p&gt;For larger feature additions, it&#39;s a good idea to discuss your idea in a new &lt;a href=&#34;https://github.com/apple/swift-atomics/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&#34;&gt;Feature Request&lt;/a&gt; or on the &lt;a href=&#34;https://forums.swift.org/c/related-projects/swift-atomics&#34;&gt;forum&lt;/a&gt; before starting to work on it. If the discussions indicate the feature would be desirable, submit the implementation in a PR, and participate in its review discussion.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;This package defines a large number of similar-but-not-quite-the-same operations. To make it easier to maintain these, we use code generation to produce them.&lt;/p&gt; &#xA;&lt;p&gt;A number of &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/Sources/Atomics&#34;&gt;source files&lt;/a&gt; have a &lt;code&gt;.swift.gyb&lt;/code&gt; extension. These are using a Python-based code generation utility called &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/Utilities/gyb.py&#34;&gt;gyb&lt;/a&gt; which we also use within the Swift Standard Library (the name is short for Generate Your Boilerplate). To make sure the package remains buildable by SPM, the autogenerated output files are committed into this repository. You should not edit the contents of &lt;code&gt;autogenerated&lt;/code&gt; subdirectories, or your changes will get overwritten the next time the code is regenerated.&lt;/p&gt; &#xA;&lt;p&gt;To regenerate sources (and to update the inventory of XCTest tests), you need to manually run the script &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/Utilities/generate-sources.sh&#34;&gt;&lt;code&gt;generate-sources.sh&lt;/code&gt;&lt;/a&gt; in the Utilities folder of this repository. This needs to be done every time you modify one of the template files.&lt;/p&gt; &#xA;&lt;p&gt;In addition to gyb, the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-atomics/main/Sources/_AtomicsShims/include/_AtomicsShims.h&#34;&gt;&lt;code&gt;_AtomicsShims.h&lt;/code&gt;&lt;/a&gt; header file uses the C preprocessor to define trivial wrapper functions for every supported atomic operation -- memory ordering pairing.&lt;/p&gt; &#xA;&lt;p&gt;‚öõÔ∏éÔ∏é&lt;/p&gt; &#xA;&lt;!-- Local Variables: --&gt; &#xA;&lt;!-- mode: markdown --&gt; &#xA;&lt;!-- fill-column: 10000 --&gt; &#xA;&lt;!-- eval: (setq-local whitespace-style &#39;(face tabs newline empty)) --&gt; &#xA;&lt;!-- eval: (whitespace-mode 1) --&gt; &#xA;&lt;!-- eval: (visual-line-mode 1) --&gt; &#xA;&lt;!-- End: --&gt;</summary>
  </entry>
  <entry>
    <title>buresdv/Mlem</title>
    <updated>2023-06-08T01:49:07Z</updated>
    <id>tag:github.com,2023-06-08:/buresdv/Mlem</id>
    <link href="https://github.com/buresdv/Mlem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Lemmy client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mlem&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://testflight.apple.com/join/xQfmkJhc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Download-TestFlight-blue&#34; alt=&#34;Download on TestFlight&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Lemmy client for iOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elk.zone/mstdn.social/@davidbures&#34;&gt;&lt;img src=&#34;https://img.shields.io/mastodon/follow/108939255808776594?domain=https%3A%2F%2Fmstdn.social&amp;amp;label=Follow%20me%20for%20updates&amp;amp;style=flat&#34; alt=&#34;Mastodon Link&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Mlem?&lt;/h2&gt; &#xA;&lt;p&gt;Mlem is a client for &lt;a href=&#34;https://join-lemmy.org&#34;&gt;Lemmy&lt;/a&gt;, a Reddit-esque, open-source link aggregator. With Mlem, you can effortlessly participate in the conversation across all Lemmy servers.&lt;/p&gt; &#xA;&lt;h2&gt;Why Use Mlem?&lt;/h2&gt; &#xA;&lt;p&gt;Unlike many other clients, Mlem is designed to be easy to use first. Its UI is beautiful and intuitive, and it just gets out of your way so you can enjoy participating in the communities that matter to you the most.&lt;/p&gt; &#xA;&lt;p&gt;And that&#39;s not all; Mlem is also extensively optimized and performant, which means it will never be a performance and battery hog. You can scroll all day and night long!&lt;/p&gt; &#xA;&lt;h2&gt;See Mlem&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Beautiful Post Previews&lt;/strong&gt; &lt;img src=&#34;https://files.catbox.moe/5ize2z.png&#34; alt=&#34;Community View&#34;&gt; &lt;img src=&#34;https://files.catbox.moe/gk7nlq.png&#34; alt=&#34;Beautiful Post Previews&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Follow the Discussion&lt;/strong&gt; &lt;img src=&#34;https://files.catbox.moe/cfcxkq.png&#34; alt=&#34;Easily Follow the Discussion&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Take Part in the Conversation&lt;/strong&gt; &lt;img src=&#34;https://files.catbox.moe/wpzfri.png&#34; alt=&#34;Take Part in the Conversation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Post Your Experiences&lt;/strong&gt; &lt;img src=&#34;https://files.catbox.moe/9xg13j.png&#34; alt=&#34;Post Your Experiences&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Find Your Hobbies&lt;/strong&gt; &lt;img src=&#34;https://files.catbox.moe/kmtqxm.png&#34; alt=&#34;Find Your Hobbies&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Infinitely Customizable, Dark Mode Included!&lt;/strong&gt; &lt;img src=&#34;https://files.catbox.moe/sxlwgv.png&#34; alt=&#34;Customizability&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Mlem supports any iPhone running iOS 16 and later.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;As of now, Mlem is still in beta. While it already has many core features, there is still a lot to do. Follow me on my socials to always be up-to-date on Mlem&#39;s development!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Mlem is licensed under &lt;a href=&#34;https://commonsclause.com&#34;&gt;Commons Clause&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This means that Mlem is open-source and you can do whatever you want with its source, like modifying it, contributing to it etc., but you can&#39;t sell Mlem or modified versions of it.&lt;/p&gt;</summary>
  </entry>
</feed>