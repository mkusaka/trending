<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-06T01:54:54Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RobotsAndPencils/xcodes</title>
    <updated>2022-07-06T01:54:54Z</updated>
    <id>tag:github.com,2022-07-06:/RobotsAndPencils/xcodes</id>
    <link href="https://github.com/RobotsAndPencils/xcodes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The best command-line tool to install and switch between multiple versions of Xcode.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xcodes&lt;/h1&gt; &#xA;&lt;p&gt;The best command-line tool to install and switch between multiple versions of Xcode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you&#39;re looking for an app version of &lt;code&gt;xcodes&lt;/code&gt;, try &lt;a href=&#34;https://github.com/RobotsAndPencils/XcodesApp&#34;&gt;Xcodes.app&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/RobotsAndPencils/xcodes/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/Header.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew (Preferred)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install robotsandpencils/made/xcodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Download a release&lt;/summary&gt; &#xA; &lt;p&gt;Download the latest release from the &lt;a href=&#34;https://github.com/RobotsAndPencils/xcodes/releases&#34;&gt;Releases&lt;/a&gt; page. These are Developer ID-signed release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using &lt;a href=&#34;https://github.com/yonaskolb/Mint&#34;&gt;Mint&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mint install RobotsAndPencils/xcodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Build from source&lt;/summary&gt; &#xA; &lt;p&gt;Building from source requires Xcode 12.0 or later, so it&#39;s not an option for setting up a computer from scratch.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/RobotsAndPencils/xcodes&#xA;cd xcodes&#xA;make install&#xA;# or, if /usr/local/ isn&#39;t in your PATH&#xA;PREFIX=/your/install/directory make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;While installing, you may get the following output:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;swift build&#xA;error: terminated(72): xcrun --sdk macosx --find xctest output:&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If that occurs, it means you need to select a version of Xcode. You can do this with &lt;code&gt;xcode-select&lt;/code&gt; or by choosing a Command Line Tools option in Xcode&#39;s preferences Locations tab.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install a specific version of Xcode using a command like one of these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xcodes install 10.2.1&#xA;xcodes install 11 Beta 7&#xA;xcodes install 11.2 GM seed&#xA;xcodes install 9.0 --path ~/Archive/Xcode_9.xip&#xA;xcodes install --latest-prerelease&#xA;xcodes install --latest --directory &#34;/Volumes/Bag Of Holding/&#34;&#xA;xcodes install --latest --experimental-unxip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll then be prompted to enter your Apple ID username and password. You can also provide these with the &lt;code&gt;XCODES_USERNAME&lt;/code&gt; and &lt;code&gt;XCODES_PASSWORD&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;After successfully authenticating, xcodes will save your Apple ID password into the keychain and will remember your Apple ID for future use. If you need to use a different Apple ID than the one that&#39;s remembered, set the &lt;code&gt;XCODES_USERNAME&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;xcodes will download and install the version you asked for so that it&#39;s ready to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(1/6) Downloading Xcode 11.2.0: 100%&#xA;(2/6) Unarchiving Xcode (This can take a while)&#xA;(3/6) Moving Xcode to /Applications/Xcode-11.2.0.app&#xA;(4/6) Moving Xcode archive Xcode-11.2.0.xip to the Trash&#xA;(5/6) Checking security assessment and code signing&#xA;(6/6) Finishing installation&#xA;xcodes requires superuser privileges in order to finish installation.&#xA;macOS User Password:&#xA;&#xA;Xcode 11.2.0 has been installed to /Applications/Xcode-11.2.0.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://aria2.github.io&#34;&gt;aria2&lt;/a&gt; installed (it&#39;s available in Homebrew, &lt;code&gt;brew install aria2&lt;/code&gt;), then xcodes will default to use it for downloads. It uses up to 16 connections to download Xcode 3-5x faster than URLSession.&lt;/p&gt; &#xA;&lt;p&gt;Xcode will be installed to /Applications by default, but you can provide the path to a different directory with the &lt;code&gt;--directory&lt;/code&gt; option or the &lt;code&gt;XCODES_DIRECTORY&lt;/code&gt; environment variable. All of the xcodes commands support this option, like &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;uninstall&lt;/code&gt;, so you can manage Xcode versions that aren&#39;t in /Applications. xcodes supports having all of your Xcode versions installed in &lt;em&gt;one&lt;/em&gt; directory, wherever that may be.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;download &amp;lt;version&amp;gt;&lt;/code&gt;: Download a specific version of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;install &amp;lt;version&amp;gt;&lt;/code&gt;: Download and install a specific version of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;installed&lt;/code&gt;: List the versions of Xcode that are installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt;: List all versions of Xcode that are available to install&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;select&lt;/code&gt;: Change the selected Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uninstall&lt;/code&gt;: Uninstall a specific version of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;update&lt;/code&gt;: Update the list of available versions of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: Print the version number of xcodes itself&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;signout&lt;/code&gt;: Clears the stored username and password&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Experimental Unxip - for faster unxipping&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to the amazing work by &lt;a href=&#34;https://github.com/saagarjha/unxip&#34;&gt;saagarjhi&lt;/a&gt; - Xcodes now includes the ability to unxip up to 70% faster on some systems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xcodes install --latest --experimental-unxip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell Completion Scripts&lt;/h3&gt; &#xA;&lt;p&gt;xcodes can generate completion scripts which allow you to press the tab key on your keyboard to autocomplete commands and arguments when typing an xcodes command. The steps to install a completion script depend on the shell that you use. More information about installation instructions for different shells and the underlying implementation is available in the &lt;a href=&#34;https://github.com/apple/swift-argument-parser/raw/main/Sources/ArgumentParser/Documentation.docc/Articles/InstallingCompletionScripts.md&#34;&gt;swift-argument-parser repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Zsh, with oh-my-zsh:&lt;/summary&gt; &#xA; &lt;p&gt;Run the following commands:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir ~/.oh-my-zsh/completions&#xA;xcodes --generate-completion-script &amp;gt; ~/.oh-my-zsh/completions/_xcodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need Xcode 13 in order to build and run xcodes.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Xcode&lt;/summary&gt; Even though xcodes is a command-line app, lll of the normal functionality works in Xcode, like building, running, and running tests. You can even type text into Xcode&#39;s console when it prompts you for input like your Apple ID or 2FA code. &#xA; &lt;p&gt;When running xcodes from Xcode, if you want to run a particular command or pass some arguments, you can hold the option key to present a sheet with more options. This means you&#39;d use &lt;kbd&gt;Option&lt;/kbd&gt; + &lt;kbd&gt;Command&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt; or hold &lt;kbd&gt;Option&lt;/kbd&gt; while clicking the Run button. Here you can add, remove, and toggle arguments that will be passed to xcodes when it&#39;s launched.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/XcodeRunSheet.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Swift command line tools&lt;/summary&gt; You can also use the Swift command line tools once you have Xcode installed: &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Build: &lt;code&gt;swift build&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Run: &lt;code&gt;swift run&lt;/code&gt;, or commands like &lt;code&gt;swift run xcodes list&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Run tests: &lt;code&gt;swift test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;There&#39;s a Makefile to help build xcodes for distribution. We already do this for you in order to provide Developer ID-signed and notarized release builds via Homebrew (see &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/#installation&#34;&gt;Installation&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Releasing a new version of xcodes&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Bump the version number in Version.swift, commit the change, and tag it&#xA;vim Sources/XcodesKit/Version.swift&#xA;git add Sources/XcodesKit/Version.swift&#xA;git commit -m &#34;Bump version to $VERSION&#34;&#xA;git tag -asm &#34;$VERSION&#34; &#34;$VERSION&#34;&#xA;&#xA;# Clean first&#xA;make clean&#xA;&#xA;# Make a release build of xcodes, sign it, and zip it&#xA;make zip&#xA;# Create a Homebrew bottle&#xA;make bottle VERSION=&#34;$VERSION&#34;&#xA;&#xA;# Notarize the release build&#xA;# This can take a while&#xA;make notarize \&#xA;    TEAMID=&#34;ABC123&#34; &#xA;&#xA;# Push the new version bump commit and tag&#xA;git push --follow-tags&#xA;&#xA;# Edit the draft release created by Release Drafter to point at the new tag&#xA;# Set the release title to the new version&#xA;# Add the xcodes.zip and xcodes-$VERSION.mojave.tar.gz files to the release&#xA;# Publish the release&#xA;&#xA;# Update the Homebrew Bottle: https://github.com/RobotsAndPencils/homebrew-made/blob/master/Formula/xcodes.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Notable design decisions are recorded in &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/DECISIONS.md&#34;&gt;DECISIONS.md&lt;/a&gt;. The Apple authentication flow is described in &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/Apple.paw&#34;&gt;Apple.paw&lt;/a&gt;, which will allow you to play with the API endpoints that are involved using the &lt;a href=&#34;https://paw.cloud&#34;&gt;Paw&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xcpretty/xcode-install&#34;&gt;&lt;code&gt;xcode-install&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/spaceship&#34;&gt;fastlane/spaceship&lt;/a&gt; both deserve credit for figuring out the hard parts of what makes this possible.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.robotsandpencils.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/R&amp;amp;PLogo.png&#34; width=&#34;153&#34; height=&#34;74&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Made with ❤️ by &lt;a href=&#34;http://www.robotsandpencils.com&#34;&gt;Robots &amp;amp; Pencils&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/robotsNpencils&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://github.com/robotsandpencils&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ruiaureliano/X-SwiftFormat</title>
    <updated>2022-07-06T01:54:54Z</updated>
    <id>tag:github.com,2022-07-06:/ruiaureliano/X-SwiftFormat</id>
    <link href="https://github.com/ruiaureliano/X-SwiftFormat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;X-SwiftFormat extension for Xcode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🛠 X-SwiftFormat&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruiaureliano/X-SwiftFormat/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/MIT-License-0f73b4.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/blog/swift-5-6-released/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.6-0f73b4.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ruiaureliano/X-SwiftFormat/master/DOCS.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-1.2-0f73b4.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ruiaureliano/X-SwiftFormat/master/assets/readme/xsf_header.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using Github&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ruiaureliano/X-SwiftFormat/releases/download/1.2/x-swiftformat_1.2.zip&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Download-1.2-0f73b4.svg?logo=github&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using Cask&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;brew install --cask x-swiftformat&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1) Open X-SwiftFormat&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;X-SwiftFormat&lt;/strong&gt; works as Xcode Extension to format your swift code. You will need to open this once to activate it 👍&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ruiaureliano/X-SwiftFormat/master/assets/readme/xsf_running.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;a)&lt;/strong&gt; You case use the &lt;strong&gt;Preview&lt;/strong&gt; to see the format running in the app 💪&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ruiaureliano/X-SwiftFormat/master/assets/readme/xsf_format.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;b)&lt;/strong&gt; You can export a configuration file ( &lt;code&gt;.swift-format&lt;/code&gt; ) to use later 🖥&lt;/p&gt; &#xA;&lt;h3&gt;2) Enable X-SwiftFormat&lt;/h3&gt; &#xA;&lt;p&gt;Open &lt;strong&gt;System Preferences&lt;/strong&gt; ▸ &lt;strong&gt;Extensions&lt;/strong&gt; ▸ &lt;strong&gt;Xcode Source Editor&lt;/strong&gt; and make sure &lt;strong&gt;X-SwiftFormat&lt;/strong&gt; is selected ✅&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ruiaureliano/X-SwiftFormat/master/assets/readme/xsf_extensions.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3) Use X-SwiftFormat&lt;/h3&gt; &#xA;&lt;p&gt;Open Xcode and use the &lt;strong&gt;Format Swift Code&lt;/strong&gt; command in Xcode&#39;s &lt;strong&gt;Editor&lt;/strong&gt; menu 🚀&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ruiaureliano/X-SwiftFormat/master/assets/readme/xsf_usage.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4) Add X-SwiftFormat Shortcut&lt;/h3&gt; &#xA;&lt;p&gt;Open &lt;strong&gt;System Preferences&lt;/strong&gt;, click on &lt;strong&gt;Keyboard&lt;/strong&gt; and switch to the &lt;strong&gt;Shortcuts&lt;/strong&gt; tab. Select &lt;strong&gt;App Shortcuts&lt;/strong&gt;, then hit the &lt;kbd&gt;+&lt;/kbd&gt; button. Select &lt;strong&gt;Xcode&lt;/strong&gt;, enter &lt;code&gt;Format Swift Code&lt;/code&gt; and set your &lt;strong&gt;Shortcut&lt;/strong&gt;.👏&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ruiaureliano/X-SwiftFormat/master/assets/readme/xsf_shortcuts.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Installing &lt;a href=&#34;https://github.com/apple/swift-format&#34;&gt;Apple Swift Format&lt;/a&gt; (Xcode or Mint)&lt;/h1&gt; &#xA;&lt;h2&gt;a) Using Xcode&lt;/h2&gt; &#xA;&lt;p&gt;if you are using &lt;strong&gt;Xcode 13.4 (Swift 5.6)&lt;/strong&gt;, you can check out and build swift-format using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone -b release/5.6 https://github.com/apple/swift-format.git&#xA;cd swift-format&#xA;swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Build complete! (51.82s)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;👍👍👍&lt;/p&gt; &#xA;&lt;h2&gt;b) Using Mint&lt;/h2&gt; &#xA;&lt;p&gt;If you dint have &lt;strong&gt;Homebrew&lt;/strong&gt;, install &lt;a href=&#34;https://brew.sh&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install mint&#xA;mint install apple/swift-format@release/5.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;🌱 Cloning swift-format release/5.6&#xA;🌱 Resolving package&#xA;🌱 Building package&#xA;🌱 Installed swift-format release/5.6&#xA;🌱 Linked swift-format release/5.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;👍👍👍&lt;/p&gt; &#xA;&lt;h3&gt;Command Line Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;swift-format -v&#xA;0.50600.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;swift-format swift&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display formatted code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;swift-format -i file.swift&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Overwrites formatted code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;swift-format -r folder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Format all files in a folder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;swift-format -r -i folder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Format all files in a folder and overwrites&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Check more info here: &lt;a href=&#34;https://github.com/apple/swift-format&#34;&gt;https://github.com/apple/swift-format&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;I&#39;m &lt;a href=&#34;http://ruiaureliano.com&#34;&gt;Rui Aureliano&lt;/a&gt;, iOS and macOS Engineer at &lt;a href=&#34;https://theolabrothers.com&#34;&gt;Olá Brothers&lt;/a&gt;. We make &lt;a href=&#34;https://sipapp.io&#34;&gt;Sip&lt;/a&gt; 🤓&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/ruiaureliano&#34;&gt;Linkedin&lt;/a&gt; | &lt;a href=&#34;https://angel.co/ruiaureliano&#34;&gt;AngelList&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/ruiaureliano&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://github.com/ruiaureliano&#34;&gt;Github&lt;/a&gt; | &lt;a href=&#34;https://medium.com/@ruiaureliano&#34;&gt;Medium&lt;/a&gt; | &lt;a href=&#34;https://stackoverflow.com/users/881095/ruiaureliano&#34;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>krzysztofzablocki/Inject</title>
    <updated>2022-07-06T01:54:54Z</updated>
    <id>tag:github.com,2022-07-06:/krzysztofzablocki/Inject</id>
    <link href="https://github.com/krzysztofzablocki/Inject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hot Reloading for Swift applications!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Inject&lt;/h1&gt; &#xA;&lt;p&gt;Hot reloading workflow helper that enables you to save hours of time each week, regardless if you are using &lt;code&gt;UIKit&lt;/code&gt;, &lt;code&gt;AppKit&lt;/code&gt; or &lt;code&gt;SwiftUI&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TLDR: A single line of code&lt;/strong&gt; change allows you to live code &lt;code&gt;UIKit&lt;/code&gt; screen:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/26660989/161756368-b150bc25-b66f-4822-86ee-2e4aed713932.mp4&#34;&gt;https://user-images.githubusercontent.com/26660989/161756368-b150bc25-b66f-4822-86ee-2e4aed713932.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://merowing.info/2022/04/hot-reloading-in-swift/&#34;&gt;Read detailed article about this&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The heavy lifting is done by the amazing &lt;a href=&#34;https://github.com/johnno1962/InjectionIII&#34;&gt;InjectionForXcode&lt;/a&gt;. This library is just a thin wrapper to provide the best developer experience possible while requiring minimum effort.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve been using it for years.&lt;/p&gt; &#xA;&lt;h2&gt;What is hot reloading?&lt;/h2&gt; &#xA;&lt;p&gt;Hot reloading is a technique allowing you to get rid of compiling your whole application and avoiding deploy/restart cycles as much as possible, all while allowing you to edit your running application code and see changes reflected as close as possible to real-time.&lt;/p&gt; &#xA;&lt;p&gt;This makes you significantly more productive by reducing the time you spend waiting for apps to rebuild, restart, re-navigate to the previous location where you were in the app itself, re-produce the data you need.&lt;/p&gt; &#xA;&lt;p&gt;This can save you literal hours off development time, &lt;strong&gt;each day&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Does it add manual overhead to my workflows?&lt;/h2&gt; &#xA;&lt;p&gt;Once you configured your project initially, it&#39;s practically free.&lt;/p&gt; &#xA;&lt;p&gt;You don’t need to add conditional compilation or remove &lt;code&gt;Inject&lt;/code&gt; code from your applications for production, it&#39;s already designed to behave as no-op inlined code that will get stripped by LLVM in non-debug builds.&lt;/p&gt; &#xA;&lt;p&gt;Which means that you can enable it once per view and keep using it for years to come.&lt;/p&gt; &#xA;&lt;h1&gt;Integration&lt;/h1&gt; &#xA;&lt;h3&gt;Initial project setup&lt;/h3&gt; &#xA;&lt;p&gt;To integrate &lt;code&gt;Inject&lt;/code&gt; just add it as SPM dependency:&lt;/p&gt; &#xA;&lt;h3&gt;via Xcode&lt;/h3&gt; &#xA;&lt;p&gt;Open your project, click on File → Swift Packages → Add Package Dependency…, enter the repository url (&lt;code&gt;https://github.com/krzysztofzablocki/Inject.git&lt;/code&gt;) and add the package product to your app target.&lt;/p&gt; &#xA;&lt;h3&gt;via SPM package.swift&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(&#xA;      name: &#34;Inject&#34;,&#xA;      url: &#34;https://github.com/krzysztofzablocki/Inject.git&#34;,&#xA;      from: &#34;1.0.5&#34;&#xA;    )&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Individual Developer setup (once per machine)&lt;/h3&gt; &#xA;&lt;p&gt;If anyone in your project wants to use injection, they only need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must add &#34;-Xlinker -interposable&#34; (without the double quotes) to the &#34;Other Linker Flags&#34; of all targets in your project for the Debug configuration (qualified by the simulator SDK to avoid complications with bitcode), refer to &lt;a href=&#34;https://github.com/johnno1962/InjectionIII#limitationsfaq&#34;&gt;InjectionForXcode documentation&lt;/a&gt; if you run into any issues&lt;/li&gt; &#xA; &lt;li&gt;Download newest version of Xcode Injection from it&#39;s &lt;a href=&#34;https://github.com/johnno1962/InjectionIII/releases&#34;&gt;GitHub Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unpack it and place under &lt;code&gt;/Applications&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the Xcode version you are using to compile our projects is under the default location: &lt;code&gt;/Applications/Xcode.app&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the injection application&lt;/li&gt; &#xA; &lt;li&gt;Select open project / open recent from it&#39;s menu and pick the right workspace file you are using&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After choosing the project in Injection app, launch the app&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If everything is configured correctly you should see similar log in the console:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;💉 InjectionIII connected /Users/merowing/work/SourceryPro/App.xcworkspace&#xA;💉 Watching files under /Users/merowing/work/SourceryPro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Workflow integration&lt;/h2&gt; &#xA;&lt;p&gt;You can either add &lt;code&gt;import Inject&lt;/code&gt; in individual files in your project or use &lt;code&gt;@_exported import Inject&lt;/code&gt; in your project target to have it automatically available in all its files.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;SwiftUI&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Just 2 steps to enable injection in your &lt;code&gt;SwiftUI&lt;/code&gt; Views&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;call &lt;code&gt;.enableInjection()&lt;/code&gt; at the end of your body definition&lt;/li&gt; &#xA; &lt;li&gt;add &lt;code&gt;@ObserveInjection var inject&lt;/code&gt; to your view struct&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Remember you &lt;strong&gt;don&#39;t need&lt;/strong&gt; to remove this code when you are done, it&#39;s NO-OP in production builds.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you want to see your changes in action, you can enable an optional &lt;code&gt;Animation&lt;/code&gt; variable on &lt;code&gt;Inject.animation&lt;/code&gt; that will be used when ever new source code is injected into your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Inject.animation = .interactiveSpring()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;Inject&lt;/code&gt; is demoed in this &lt;a href=&#34;https://github.com/MarcoEidinger/InjectSwiftUIExample&#34;&gt;example app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;UIKit / AppKit&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For standard imperative UI frameworks we need a way to clean-up state between code injection phases.&lt;/p&gt; &#xA;&lt;p&gt;I create the concept of &lt;strong&gt;Hosts&lt;/strong&gt; that work really well in that context, there are 2:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Inject.ViewControllerHost&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Inject.ViewHost&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;How do we integrate this? We wrap the class we want to iterate on at the parent level, so we don’t modify the class we want to be injecting but we modify the parent callsite.&lt;/p&gt; &#xA;&lt;p&gt;Eg. If you have a &lt;code&gt;SplitViewController&lt;/code&gt; that creates &lt;code&gt;PaneA&lt;/code&gt; and &lt;code&gt;PaneB &lt;/code&gt;, and you want to iterate on layout/logic code in &lt;code&gt;PaneA&lt;/code&gt;, you modify the callsite in &lt;code&gt;SplitViewController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;paneA = Inject.ViewHost(&#xA;  PaneAView(whatever: arguments, you: want)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is all the changes you need to do, your app now allows you to change anything in &lt;code&gt;PaneAView&lt;/code&gt; except for its initialiser API and the changes will be almost immediately reflected in your App.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to call initializer inside &lt;code&gt;Inject.ViewControllerHost(...)&lt;/code&gt; or &lt;code&gt;Inject.ViewHost(...)&lt;/code&gt;. Inject relies on &lt;code&gt;@autoclosure&lt;/code&gt; to reload views when hot-reload happens. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WRONG&#xA;let viewController = YourViewController()&#xA;rootViewController.pushViewController(Inject.ViewControllerHost(viewController), animated: true)&#xA;&#xA;// CORRECT&#xA;let viewController = Inject.ViewControllerHost(YourViewController())&#xA;rootViewController.pushViewController(viewController, animated: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Remember you &lt;strong&gt;don&#39;t need&lt;/strong&gt; to remove this code when you are done, it&#39;s NO-OP in production builds.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;The Composable Architecture&lt;/h4&gt; &#xA;&lt;p&gt;If like myself you love &lt;a href=&#34;https://pointfree.co/&#34;&gt;PointFree&lt;/a&gt; Composable Architecture, you’d probably want to inject reducer code, this isn’t possible in vanilla TCA because reducer code is a free function which isn’t as straightforward to replace with injection, but &lt;a href=&#34;https://github.com/thebrowsercompany/swift-composable-architecture&#34;&gt;our fork&lt;/a&gt; at &lt;a href=&#34;https://thebrowser.company/&#34;&gt;The Browser Company&lt;/a&gt; supports it.&lt;/p&gt;</summary>
  </entry>
</feed>