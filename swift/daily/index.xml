<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-15T01:51:26Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ReactiveCocoa/ReactiveCocoa</title>
    <updated>2023-06-15T01:51:26Z</updated>
    <id>tag:github.com,2023-06-15:/ReactiveCocoa/ReactiveCocoa</id>
    <link href="https://github.com/ReactiveCocoa/ReactiveCocoa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cocoa framework and Obj-C dynamism bindings for ReactiveSwift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveCocoa/ReactiveCocoa/master/Logo/PNG/logo.png&#34; alt=&#34;ReactiveCocoa&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt; Reactive extensions to Cocoa frameworks, built on top of &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift/&#34;&gt;ReactiveSwift&lt;/a&gt;.&lt;br&gt;&lt;br&gt; &lt;a href=&#34;http://reactivecocoa.io/slack/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveCocoa/ReactiveCocoa/master/Logo/PNG/JoinSlack.png&#34; alt=&#34;Join the ReactiveSwift Slack community.&#34; width=&#34;143&#34; height=&#34;40&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveCocoa/ReactiveCocoa/master/#carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveCocoa/ReactiveCocoa/master/#cocoapods&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/ReactiveCocoa.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveCocoa/ReactiveCocoa/master/#swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-orange.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/ReactiveCocoa/ReactiveCocoa.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5.1-orange.svg?sanitize=true&#34; alt=&#34;Swift 5.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%20%7C%20OS%20X%20%7C%20watchOS%20%7C%20tvOS%20-lightgrey.svg?sanitize=true&#34; alt=&#34;platforms&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚ö†Ô∏è &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveObjC&#34;&gt;Looking for the Objective-C API?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üéâ &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveCocoa/ReactiveCocoa/master/CHANGELOG.md&#34;&gt;Migrating from RAC 4.x?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üöÑ &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveCocoa/ReactiveCocoa/master/#release-roadmap&#34;&gt;Release Roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is ReactiveSwift?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;ReactiveSwift&lt;/strong&gt; offers composable, declarative and flexible primitives that are built around the grand concept of &lt;em&gt;&lt;strong&gt;streams of values over time&lt;/strong&gt;&lt;/em&gt;. These primitives can be used to uniformly represent common Cocoa and generic programming patterns that are fundamentally an act of observation.&lt;/p&gt; &#xA;&lt;p&gt;For more information about the core primitives, see &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift&#34;&gt;ReactiveSwift&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is ReactiveCocoa?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;ReactiveCocoa&lt;/strong&gt; wraps various aspects of Cocoa frameworks with the declarative &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift&#34;&gt;ReactiveSwift&lt;/a&gt; primitives.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;UI Bindings&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;UI components expose &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift/raw/master/Documentation/FrameworkOverview.md#properties&#34;&gt;&lt;code&gt;BindingTarget&lt;/code&gt;&lt;/a&gt;s, which accept bindings from any kind of streams of values via the &lt;code&gt;&amp;lt;~&lt;/code&gt; operator.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Bind the `name` property of `person` to the text value of an `UILabel`.&#xA;nameLabel.reactive.text &amp;lt;~ person.name&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: You&#39;ll need to import ReactiveSwift as well to make use of the &lt;code&gt;&amp;lt;~&lt;/code&gt; operator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Controls and User Interactions&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Interactive UI components expose &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift/raw/master/Documentation/FrameworkOverview.md#signals&#34;&gt;&lt;code&gt;Signal&lt;/code&gt;&lt;/a&gt;s for control events and updates in the control value upon user interactions.&lt;/p&gt; &lt;p&gt;A selected set of controls provide a convenience, expressive binding API for &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift/raw/master/Documentation/FrameworkOverview.md#actions&#34;&gt;&lt;code&gt;Action&lt;/code&gt;&lt;/a&gt;s.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Update `allowsCookies` whenever the toggle is flipped.&#xA;preferences.allowsCookies &amp;lt;~ toggle.reactive.isOnValues&#xA;&#xA;// Compute live character counts from the continuous stream of user initiated&#xA;// changes in the text.&#xA;textField.reactive.continuousTextValues.map { $0.characters.count }&#xA;&#xA;// Trigger `commit` whenever the button is pressed.&#xA;button.reactive.pressed = CocoaAction(viewModel.commit)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Declarative Objective-C Dynamism&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create signals that are sourced by intercepting Objective-C objects, e.g. method call interception and object deinitialization.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Notify after every time `viewWillAppear(_:)` is called.&#xA;let appearing = viewController.reactive.trigger(for: #selector(UIViewController.viewWillAppear(_:)))&#xA;&#xA;// Observe the lifetime of `object`.&#xA;object.reactive.lifetime.ended.observeCompleted(doCleanup)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Expressive, Safe Key Path Observation&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Establish key-value observations in the form of &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift/raw/master/Documentation/FrameworkOverview.md#signal-producers&#34;&gt;&lt;code&gt;SignalProducer&lt;/code&gt;&lt;/a&gt;s and &lt;code&gt;DynamicProperty&lt;/code&gt;s, and enjoy the inherited composability.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A producer that sends the current value of `keyPath`, followed by&#xA;// subsequent changes.&#xA;//&#xA;// Terminate the KVO observation if the lifetime of `self` ends.&#xA;let producer = object.reactive.producer(forKeyPath: #keyPath(key))&#xA;&#x9;.take(during: self.reactive.lifetime)&#xA;&#xA;// A parameterized property that represents the supplied key path of the&#xA;// wrapped object. It holds a weak reference to the wrapped object.&#xA;let property = DynamicProperty&amp;lt;String&amp;gt;(object: person,&#xA;                                       keyPath: #keyPath(person.name))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;But there are still more to be discovered and introduced. Read our in-code documentations and release notes to find out more.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;ReactiveCocoa supports macOS 10.9+, iOS 8.0+, watchOS 2.0+, and tvOS 9.0+.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; to manage your dependencies, simply add ReactiveCocoa to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;ReactiveCocoa/ReactiveCocoa&#34; ~&amp;gt; 10.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use Carthage to build your dependencies, make sure you have added &lt;code&gt;ReactiveCocoa.framework&lt;/code&gt; and &lt;code&gt;ReactiveSwift.framework&lt;/code&gt; to the &#34;&lt;em&gt;Linked Frameworks and Libraries&lt;/em&gt;&#34; section of your target, and have included them in your Carthage framework copying build phase.&lt;/p&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; to manage your dependencies, simply add ReactiveCocoa to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;ReactiveCocoa&#39;, &#39;~&amp;gt; 10.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;If you use Swift Package Manager, simply add ReactiveCocoa as a dependency of your package in &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.package(url: &#34;https://github.com/ReactiveCocoa/ReactiveCocoa.git&#34;, branch: &#34;master&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Git submodule&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the ReactiveCocoa repository as a &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;submodule&lt;/a&gt; of your application‚Äôs repository.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; from within the ReactiveCocoa folder.&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop &lt;code&gt;ReactiveCocoa.xcodeproj&lt;/code&gt; and &lt;code&gt;Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcodeproj&lt;/code&gt; into your application‚Äôs Xcode project or workspace.&lt;/li&gt; &#xA; &lt;li&gt;On the ‚ÄúGeneral‚Äù tab of your application target‚Äôs settings, add &lt;code&gt;ReactiveCocoa.framework&lt;/code&gt; and &lt;code&gt;ReactiveSwift.framework&lt;/code&gt; to the ‚ÄúEmbedded Binaries‚Äù section.&lt;/li&gt; &#xA; &lt;li&gt;If your application target does not contain Swift code at all, you should also set the &lt;code&gt;EMBEDDED_CONTENT_CONTAINS_SWIFT&lt;/code&gt; build setting to ‚ÄúYes‚Äù.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Have a question?&lt;/h2&gt; &#xA;&lt;p&gt;If you need any help, please visit our &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/issues?q=is%3Aissue+label%3Aquestion+&#34;&gt;GitHub issues&lt;/a&gt; or &lt;a href=&#34;http://stackoverflow.com/questions/tagged/reactive-cocoa&#34;&gt;Stack Overflow&lt;/a&gt;. Feel free to file an issue if you do not manage to find any solution from the archives.&lt;/p&gt; &#xA;&lt;h2&gt;Release Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Current Stable Release:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/ReactiveCocoa/ReactiveCocoa.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;In Development&lt;/h3&gt; &#xA;&lt;h3&gt;Plan of Record&lt;/h3&gt; &#xA;&lt;h4&gt;ABI stability release&lt;/h4&gt; &#xA;&lt;p&gt;ReactiveCocoa is expected to declare library ABI stability when Swift rolls out resilience support in Swift 5. Until then, ReactiveCocoa will incrementally adopt new language features.&lt;/p&gt;</summary>
  </entry>
</feed>