<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-25T01:47:51Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BastiaanJansen/toast-swift</title>
    <updated>2023-02-25T01:47:51Z</updated>
    <id>tag:github.com,2023-02-25:/BastiaanJansen/toast-swift</id>
    <link href="https://github.com/BastiaanJansen/toast-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift Toast view - iOS 14 style and newer - built with UIKit. üçû&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Toast-Swift&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.codacy.com/gh/BastiaanJansen/Toast-Swift/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=BastiaanJansen/Toast-Swift&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://app.codacy.com/project/badge/Grade/6eeb888f65db4c168435e739cb7c84e3&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/BastiaanJansen/Toast-Swift&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/BastiaanJansen/Toast-Swift&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Swift Toast view - iOS 14 style - built with UIKit. üçû&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/BastiaanJansen/toast-swift/main/Screenshots/Grid.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;You can use The Swift Package Manager to install Toast-Swift by adding the description to your Package.swift file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/BastiaanJansen/toast-swift&#34;, from: &#34;1.3.1&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pod &#34;ToastViewSwift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To create a simple text based toast:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let toast = Toast.text(&#34;Safari pasted from Notes&#34;)&#xA;toast.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or add a subtitle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let toast = Toast.text(&#34;Safari pasted from Notes&#34;, subtitle: &#34;A few seconds ago&#34;)&#xA;toast.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you want to use your own font(NSAttributedString is supported):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let attributes = [&#xA;    NSAttributedStringKey.font: UIFont(name: &#34;HelveticaNeue-Bold&#34;, size: 17)!, &#xA;    NSAttributedStringKey.foregroundColor: UIColor.black&#xA;]&#xA;let attributedString  = NSMutableAttributedString(string: &#34;Safari pasted from Notes&#34; , attributes: attributes)&#xA;let toast = Toast.text(attributedString)&#xA;toast.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to add an icon, use the &lt;code&gt;default&lt;/code&gt; method to construct a toast:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let toast = Toast.default(&#xA;    image: UIImage(systemName: &#34;airpodspro&#34;)!,&#xA;    title: &#34;Airpods Pro&#34;,&#xA;    subtitle: &#34;Connected&#34;&#xA;)&#xA;toast.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want to use a different layout, but still use the Apple style? Create your own view and inject it into the &lt;code&gt;AppleToastView&lt;/code&gt; class when creating a custom toast:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let customView: UIView = // Custom view&#xA;&#xA;let appleToastView = AppleToastView(child: customView)&#xA;&#xA;let toast = Toast.custom(view: appleToastView)&#xA;toast.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;show&lt;/code&gt; method accepts several optional parameters. &lt;code&gt;haptic&lt;/code&gt; of type &lt;code&gt;UINotificationFeedbackGenerator.FeedbackType&lt;/code&gt; to use haptics and &lt;code&gt;after&lt;/code&gt; of type &lt;code&gt;TimeInterval&lt;/code&gt; to show the toast after a certain amount of time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;toast.show(haptic: .success, after: 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration options&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;custom&lt;/code&gt; methods support custom configuration options. The following options are available:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Where the toast will be shown.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.bottom&lt;/code&gt; or &lt;code&gt;.up&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.up&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;autoHide&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to true, the toast will automatically close itself after display time has elapsed.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enablePanToClose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When set to true, the toast will be able to close by swiping up.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;displayTime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The duration the toast will be displayed before it will close when autoHide set to true in seconds.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TimeInterval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;animationTime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Duration of the show and close animation in seconds.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TimeInterval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.2&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enteringAnimation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The type of animation that will be used when toast is showing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.slide&lt;/code&gt;, &lt;code&gt;.fade&lt;/code&gt;, &lt;code&gt;.scaleAndSlide&lt;/code&gt;, &lt;code&gt;.scale&lt;/code&gt; and &lt;code&gt;.custom&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.default&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;exitingAnimation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The type of animation that will be used when toast is exiting&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.slide&lt;/code&gt;, &lt;code&gt;.fade&lt;/code&gt;, &lt;code&gt;.scaleAndSlide&lt;/code&gt;, &lt;code&gt;.scale&lt;/code&gt; and &lt;code&gt;.custom&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.default&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;attachTo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The view which the toast view will be attached to.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UIView&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let config = ToastConfiguration(&#xA;    direction: .top,&#xA;    autoHide: true,&#xA;    enablePanToClose: true,&#xA;    displayTime: 5,&#xA;    animationTime: 0.2&#xA;)&#xA;&#xA;let toast = toast.text(&#34;Safari pasted from Notes&#34;, config: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom entering/exiting animations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.toast = Toast.text(&#xA;            &#34;Safari pasted from Noted&#34;,&#xA;            config: .init(&#xA;                direction: .bottom,&#xA;                enteringAnimation: .fade(alphaValue: 0.5),&#xA;                exitingAnimation: .slide(x: 0, y: 100))&#xA;            ).show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above configuration will show a toast that will appear on screen with an animation of fade-in. And then when exiting will go down and disapear.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.toast = Toast.text(&#xA;            &#34;Safari pasted from Noted&#34;,&#xA;            config: .init(&#xA;                direction: .bottom,&#xA;                enteringAnimation: .scale(scaleX: 0.6, scaleY: 0.6),&#xA;                exitingAnimation: .default&#xA;            ).show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above configuration will show a toast that will appear on screen with scaling up animation from 0.6 to 1.0. And then when exiting will use our default animation (which is scaleAndSlide)&lt;/p&gt; &#xA;&lt;p&gt;For more on animation see the &lt;code&gt;Toast.AnimationType&lt;/code&gt; enum.&lt;/p&gt; &#xA;&lt;h3&gt;Custom toast view&lt;/h3&gt; &#xA;&lt;p&gt;Don&#39;t like the default Apple&#39;ish style? No problem, it is also possible to use a custom toast view with the &lt;code&gt;custom&lt;/code&gt; method. Firstly, create a class that confirms to the &lt;code&gt;ToastView&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class CustomToastView : UIView, ToastView {&#xA;    private let text: String&#xA;&#xA;    public init(text: String) {&#xA;        self.text = text&#xA;    }&#xA;&#xA;    func createView(for toast: Toast) {&#xA;        // View is added to superview, create and style layout and add constraints&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use your custom view with the &lt;code&gt;custom&lt;/code&gt; construct method on &lt;code&gt;Toast&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let customToastView: ToastView = CustomToastView(text: &#34;Safari pasted from Notes&#34;)&#xA;&#xA;let toast = Toast.custom(view: customToastView)&#xA;toast.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delegates&lt;/h3&gt; &#xA;&lt;p&gt;Below delegate functions are optional to implement when implementing &lt;code&gt;ToastDelegate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension MyViewController: ToastDelegate {&#xA;    func willShowToast(_ toast: Toast) {&#xA;        print(&#34;Toast will be shown after this&#34;)&#xA;    }&#xA;&#xA;    func didShowToast(_ toast: Toast) {&#xA;        print(&#34;Toast was shown&#34;)&#xA;    }&#xA;&#xA;    func willCloseToast(_ toast: Toast) {&#xA;        print(&#34;Toast will be closed after this&#34;)&#xA;    }&#xA;&#xA;    func didCloseToast(_ toast: Toast) {&#xA;        print(&#34;Toast was closed (either automatically, dismissed by user or programmatically)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;Toast-Swift is available under the MIT licence. See the LICENCE for more info.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BastiaanJansen/Toast-Swift/stargazers&#34;&gt;&lt;img src=&#34;https://reporoster.com/stars/BastiaanJansen/Toast-Swift&#34; alt=&#34;Stargazers repo roster for @BastiaanJansen/Toast-Swift&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>