<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-22T01:45:40Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MacPaw/OpenAI</title>
    <updated>2023-01-22T01:45:40Z</updated>
    <id>tag:github.com,2023-01-22:/MacPaw/OpenAI</id>
    <link href="https://github.com/MacPaw/OpenAI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift package for OpenAI public API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1411778/208467048-8b9c53f9-42aa-421e-bf6f-2b0f6e7b8a9d.png&#34; alt=&#34;logoo2&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MacPaw/OpenAI/actions/workflows/swift.yml/badge.svg?sanitize=true&#34; alt=&#34;Swift Workflow&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=Platforms&amp;amp;message=iOS,%20macOS,%20tvOS&amp;amp;color=3876D3&#34; alt=&#34;Platforms Badge&#34;&gt; &lt;a href=&#34;https://twitter.com/MacPaw&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Twitter&amp;amp;message=@MacPaw&amp;amp;color=CA1F67&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repositorty contains Swift implementation over &lt;a href=&#34;https://beta.openai.com/docs/api-reference/&#34;&gt;OpenAI&lt;/a&gt; public API.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#what-is-openai&#34;&gt;What is OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#completions&#34;&gt;Completions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#embeddings&#34;&gt;Embeddings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#utilities&#34;&gt;Utilities&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#links&#34;&gt;Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is OpenAI&lt;/h2&gt; &#xA;&lt;p&gt;OpenAI is a non-profit artificial intelligence research organization founded in San Francisco, California in 2015. It was created with the purpose of advancing digital intelligence in ways that benefit humanity as a whole and promote societal progress. The organization strives to develop AI (Artificial Intelligence) programs and systems that can think, act and adapt quickly on their own – autonomously. OpenAI&#39;s mission is to ensure safe and responsible use of AI for civic good, economic growth and other public benefits; this includes cutting-edge research into important topics such as general AI safety, natural language processing, applied reinforcement learning methods, machine vision algorithms etc.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The OpenAI API can be applied to virtually any task that involves understanding or generating natural language or code. We offer a spectrum of models with different levels of power suitable for different tasks, as well as the ability to fine-tune your own custom models. These models can be used for everything from content generation to semantic search and classification.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;OpenAI is available with Swift Package Manager. The Swift Package Manager is a tool for automating the distribution of Swift code and is integrated into the swift compiler. Once you have your Swift package set up, adding OpenAI as a dependency is as easy as adding it to the dependencies value of your Package.swift.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/MacPaw/OpenAI.git&#34;, .branch(&#34;main&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;To initialize API instance you need to &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;obtain&lt;/a&gt; API token from your Open AI organization.&lt;/p&gt; &#xA;&lt;img width=&#34;1081&#34; alt=&#34;company&#34; src=&#34;https://user-images.githubusercontent.com/1411778/213204726-0772373e-14db-4d5d-9a58-bc249bac4c57.png&#34;&gt; &#xA;&lt;p&gt;Once you have a token, you can initialize &lt;code&gt;OpenAI&lt;/code&gt; class, which is an entry point to the API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let openAI = OpenAI(apiToken: &#34;YOUR_TOKEN_HERE&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once token you posses the token, and the instance is initialized you are ready to make requests.&lt;/p&gt; &#xA;&lt;h3&gt;Completions&lt;/h3&gt; &#xA;&lt;p&gt;Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    struct CompletionsQuery: Codable {&#xA;        /// ID of the model to use.&#xA;        let model: Model&#xA;        /// The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.&#xA;        let prompt: String&#xA;        /// What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.&#xA;        let temperature: Double&#xA;        /// The maximum number of tokens to generate in the completion.&#xA;        let max_tokens: Int&#xA;        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.&#xA;        let top_p: Double&#xA;        /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.&#xA;        let frequency_penalty: Double&#xA;        /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.&#xA;        let presence_penalty: Double&#xA;        /// Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.&#xA;        let stop: [String]?&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct CompletionsResult: Codable {&#xA;    struct Choice: Codable {&#xA;        public let text: String&#xA;        public let index: Int&#xA;    }&#xA;&#xA;    let id: String&#xA;    let object: String&#xA;    let created: TimeInterval&#xA;    let model: Model&#xA;    let choices: [Choice]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;openAI.completions(query: .init(model: .textDavinci_003, prompt: &#34;What is 42?&#34;, temperature: 0, max_tokens: 100, top_p: 1, frequency_penalty: 0, presence_penalty: 0, stop: [&#34;\\n&#34;])) { result in&#xA;  //Handle response here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;(lldb) po result&#xA;▿ CompletionsResult&#xA;  - id : &#34;cmpl-6P9be2p2fQlwB7zTOl0NxCOetGmX3&#34;&#xA;  - object : &#34;text_completion&#34;&#xA;  - created : 1671453146.0&#xA;  - model : OpenAI.Model.textDavinci_003&#xA;  ▿ choices : 1 element&#xA;    ▿ 0 : Choice&#xA;      - text : &#34;\n\n42 is the answer to the ultimate question of life, the universe, and everything, according to the book The Hitchhiker\&#39;s Guide to the Galaxy.&#34;&#xA;      - index : 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Review &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions&#34;&gt;Completions Documentation&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;p&gt;Given a prompt and/or an input image, the model will generate a new image.&lt;/p&gt; &#xA;&lt;p&gt;As Artificial Intelligence continues to develop, so too does the intriguing concept of Dall-E. Developed by OpenAI, a research lab for artificial intelligence purposes, Dall-E has been classified as an AI system that can generate images based on descriptions provided by humans. With its potential applications spanning from animation and illustration to design and engineering - not to mention the endless possibilities in between - it&#39;s easy to see why there is such excitement over this new technology.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ImagesQuery: Codable {&#xA;    /// A text description of the desired image(s). The maximum length is 1000 characters.&#xA;    let prompt: String&#xA;    /// The number of images to generate. Must be between 1 and 10.&#xA;    let n: Int?&#xA;    /// The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.&#xA;    let size: String?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ImagesResult: Codable {&#xA;    struct URLResult: Codable {&#xA;        public let url: String&#xA;    }&#xA;    let created: TimeInterval&#xA;    let data: [URLResult]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;openAI.images(query: .init(prompt: &#34;White cat with heterochromia sitting on the kitchen table&#34;, n: 1, size: &#34;1024x1024&#34;)) { result in&#xA;  //Handle response here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;(lldb) po result&#xA;▿ ImagesResult&#xA;  - created : 1671453505.0&#xA;  ▿ data : 1 element&#xA;    ▿ 0 : URLResult&#xA;      - url : &#34;https://oaidalleapiprodscus.blob.core.windows.net/private/org-CWjU5cDIzgCcVjq10pp5yX5Q/user-GoBXgChvLBqLHdBiMJBUbPqF/img-WZVUK2dOD4HKbKwW1NeMJHBd.png?st=2022-12-19T11%3A38%3A25Z&amp;amp;se=2022-12-19T13%3A38%3A25Z&amp;amp;sp=r&amp;amp;sv=2021-08-06&amp;amp;sr=b&amp;amp;rscd=inline&amp;amp;rsct=image/png&amp;amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;amp;skt=2022-12-19T09%3A35%3A16Z&amp;amp;ske=2022-12-20T09%3A35%3A16Z&amp;amp;sks=b&amp;amp;skv=2021-08-06&amp;amp;sig=mh52rmtbQ8CXArv5bMaU6lhgZHFBZz/ePr4y%2BJwLKOc%3D&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Generated image&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1411778/213134082-ba988a72-fca0-4213-8805-63e5f8324cab.png&#34; alt=&#34;Generated Image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Review &lt;a href=&#34;https://beta.openai.com/docs/api-reference/images&#34;&gt;Images Documentation&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Embeddings&lt;/h3&gt; &#xA;&lt;p&gt;Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct EmbeddingsQuery: Codable {&#xA;    /// ID of the model to use.&#xA;    let model: Model&#xA;    /// Input text to get embeddings for&#xA;    let input: String&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct EmbeddingsResult: Codable {&#xA;&#xA;    struct Embedding: Codable {&#xA;&#xA;        public let object: String&#xA;        public let embedding: [Double]&#xA;        public let index: Int&#xA;    }&#xA;    let data: [Embedding]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;openAI.embeddings(query: .init(model: .textSearchBabbadgeDoc, input: &#34;The food was delicious and the waiter...&#34;)) { result in&#xA;  //Handle response here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;(lldb) po result&#xA;▿ EmbeddingsResult&#xA;  ▿ data : 1 element&#xA;    ▿ 0 : Embedding&#xA;      - object : &#34;embedding&#34;&#xA;      ▿ embedding : 2048 elements&#xA;        - 0 : 0.0010535449&#xA;        - 1 : 0.024234328&#xA;        - 2 : -0.0084999&#xA;        - 3 : 0.008647452&#xA;    .......&#xA;        - 2044 : 0.017536353&#xA;        - 2045 : -0.005897616&#xA;        - 2046 : -0.026559394&#xA;        - 2047 : -0.016633155&#xA;      - index : 0&#xA;&#xA;(lldb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Review &lt;a href=&#34;https://beta.openai.com/docs/api-reference/embeddings&#34;&gt;Embeddings Documentation&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Utilities&lt;/h3&gt; &#xA;&lt;p&gt;The component comes with several handy utility functions to work with the vectors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public struct Vector {&#xA;&#xA;    /// Returns the similarity between two vectors&#xA;    ///&#xA;    /// - Parameters:&#xA;    ///     - a: The first vector&#xA;    ///     - b: The second vector&#xA;    public static func cosineSimilarity(a: [Double], b: [Double]) -&amp;gt; Double {&#xA;        return dot(a, b) / (mag(a) * mag(b))&#xA;    }&#xA;&#xA;    /// Returns the difference between two vectors. Cosine distance is defined as `1 - cosineSimilarity(a, b)`&#xA;    ///&#xA;    /// - Parameters:&#xA;    ///     - a: The first vector&#xA;    ///     - b: The second vector&#xA;    public func cosineDifference(a: [Double], b: [Double]) -&amp;gt; Double {&#xA;        return 1 - Self.cosineSimilarity(a: a, b: b)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let vector1 = [0.213123, 0.3214124, 0.421412, 0.3214521251, 0.412412, 0.3214124, 0.1414124, 0.3214521251, 0.213123, 0.3214124, 0.1414124, 0.4214214, 0.213123, 0.3214124, 0.1414124, 0.3214521251, 0.213123, 0.3214124, 0.1414124, 0.3214521251]&#xA;let vector2 = [0.213123, 0.3214124, 0.1414124, 0.3214521251, 0.213123, 0.3214124, 0.1414124, 0.3214521251, 0.213123, 0.511515, 0.1414124, 0.3214521251, 0.213123, 0.3214124, 0.1414124, 0.3214521251, 0.213123, 0.3214124, 0.1414124, 0.3213213]&#xA;let similarity = Vector.cosineSimilarity(a: vector1, b: vector2)&#xA;print(similarity) //0.9510201910206734&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In data analysis, cosine similarity is a measure of similarity between two sequences of numbers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img width=&#34;574&#34; alt=&#34;Screenshot 2022-12-19 at 6 00 33 PM&#34; src=&#34;https://user-images.githubusercontent.com/1411778/208467903-000b52d8-6589-40dd-b020-eeed69e8d284.png&#34;&gt; &#xA;&lt;p&gt;Read more about Cosine Similarity &lt;a href=&#34;https://en.wikipedia.org/wiki/Cosine_similarity&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/docs/introduction&#34;&gt;OpenAI Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/playground&#34;&gt;OpenAI Playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/examples&#34;&gt;OpenAI Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://labs.openai.com/&#34;&gt;Dall-E&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cosine_similarity&#34;&gt;Cosine Similarity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2022 MacPaw Inc.&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>