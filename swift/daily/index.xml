<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:37:40Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AssistoLab/DropDown</title>
    <updated>2022-09-25T01:37:40Z</updated>
    <id>tag:github.com,2022-09-25:/AssistoLab/DropDown</id>
    <link href="https://github.com/AssistoLab/DropDown" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Material Design drop down for iOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/logo.png&#34; alt=&#34;DropDown&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/kevinh6113&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/contact-%40kevinh6113-70a1fb.svg?style=flat&#34; alt=&#34;Twitter: @kevinh6113&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AssistoLab/DropDown/raw/master/README.md&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-70a1fb.svg?style=flat&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AssistoLab/DropDown&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/version-2.3.13-green.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/DropDown/&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/Cocoapods-available-green.svg?style=flat&#34; alt=&#34;Cocoapods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Material Design drop down for iOS written in Swift.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/1.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/2.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/2.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/3.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/3.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Do &lt;code&gt;pod try DropDown&lt;/code&gt; in your console and run the project to try a demo. To install &lt;a href=&#34;http://www.cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, run &lt;code&gt;sudo gem install cocoapods&lt;/code&gt; in your console.&lt;/p&gt; &#xA;&lt;h2&gt;Installation üì±&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;DropDown&lt;/code&gt; supports Swift 5.0 since version &lt;code&gt;2.3.13&lt;/code&gt;. &lt;code&gt;DropDown&lt;/code&gt; supports Swift 4.2 since version &lt;code&gt;2.3.4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need Swift 4.0, use version 2.3.2:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manually: use tag &lt;code&gt;2.3.2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;CocoaPods: &lt;code&gt;pod &#39;DropDown&#39;, &#39;2.3.2&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Carthage: &lt;code&gt;github &#34;AssistoLab/DropDown&#34; == 2.3.2&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;http://www.cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;DropDown&#39;&lt;/code&gt; to your &lt;em&gt;Podfile&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install the pod(s) by running &lt;code&gt;pod install&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;import DropDown&lt;/code&gt; in the .swift files where you want to use it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a file name &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the line &lt;code&gt;github &#34;AssistoLab/DropDown&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Drag the built &lt;code&gt;DropDown.framework&lt;/code&gt; into your Xcode project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Source files&lt;/h3&gt; &#xA;&lt;p&gt;A regular way to use DropDown in your project would be using Embedded Framework. There are two approaches, using source code and adding submodule.&lt;/p&gt; &#xA;&lt;p&gt;Add source code:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;http://github.com/AssistoLab/DropDown/archive/master.zip&#34;&gt;latest code version&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Unzip the download file, copy &lt;code&gt;DropDown&lt;/code&gt; folder to your project folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Add submodule&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In your favorite terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and entering the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add git@github.com:AssistoLab/DropDown.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you get the source code either by adding it directly or using submodule, then do the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open &lt;code&gt;DropDown&lt;/code&gt; folder, and drag &lt;code&gt;DropDown.xcodeproj&lt;/code&gt; into the file navigator of your app project, under you app project.&lt;/li&gt; &#xA; &lt;li&gt;In Xcode, navigate to the target configuration window by clicking the blue project icon, and selecting the application target under the &#34;Targets&#34; heading in the sidebar.&lt;/li&gt; &#xA; &lt;li&gt;Open &#34;Build Phases&#34; panel in the tab bar at the top of the window, expend the &#34;Target Dependencies&#34; group and add &lt;code&gt;DropDown.framework&lt;/code&gt; under DropDown icon in the popup window by clicking &lt;code&gt;+&lt;/code&gt;. Similarly, you can also add &lt;code&gt;DropDown.framework&lt;/code&gt; in &#34;Embedded Binaries&#34; under &#34;General&#34; tab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic usage ‚ú®&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dropDown = DropDown()&#xA;&#xA;// The view to which the drop down will appear on&#xA;dropDown.anchorView = view // UIView or UIBarButtonItem&#xA;&#xA;// The list of items to display. Can be changed dynamically&#xA;dropDown.dataSource = [&#34;Car&#34;, &#34;Motorcycle&#34;, &#34;Truck&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Action triggered on selection&#xA;dropDown.selectionAction = { [unowned self] (index: Int, item: String) in&#xA;  print(&#34;Selected item: \(item) at index: \(index)&#34;)&#xA;}&#xA;&#xA;// Will set a custom width instead of the anchor view width&#xA;dropDownLeft.width = 200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Display actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dropDown.show()&#xA;dropDown.hide()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Important ‚ö†Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;Don&#39;t forget to put:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;DropDown.startListeningToKeyboard()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in your &lt;code&gt;AppDelegate&lt;/code&gt;&#39;s &lt;code&gt;didFinishLaunching&lt;/code&gt; method so that the drop down will handle its display with the keyboard displayed even the first time a drop down is showed.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced usage üõ†&lt;/h2&gt; &#xA;&lt;h3&gt;Direction&lt;/h3&gt; &#xA;&lt;p&gt;The drop down can be shown below or above the anchor view with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dropDown.direction = .any&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;.any&lt;/code&gt; the drop down will try to displa itself below the anchor view when possible, otherwise above if there is more place than below. You can restrict the possible directions by using &lt;code&gt;.top&lt;/code&gt; or &lt;code&gt;.bottom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Offset&lt;/h3&gt; &#xA;&lt;p&gt;By default, the drop down will be shown onto to anchor view. It will hide it. If you need the drop down to be below your anchor view when the direction of the drop down is &lt;code&gt;.bottom&lt;/code&gt;, you can precise an offset like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Top of drop down will be below the anchorView&#xA;dropDown.bottomOffset = CGPoint(x: 0, y:(dropDown.anchorView?.plainView.bounds.height)!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you set the drop down direction to &lt;code&gt;.any&lt;/code&gt; or &lt;code&gt;.top&lt;/code&gt; you can also precise the offset when the drop down will shown above like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// When drop down is displayed with `Direction.top`, it will be above the anchorView&#xA;dropDown.topOffset = CGPoint(x: 0, y:-(dropDown.anchorView?.plainView.bounds.height)!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note the minus sign here that is use to offset to the top.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cell configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Formatted text&lt;/h4&gt; &#xA;&lt;p&gt;By default, the cells in the drop down have the &lt;code&gt;dataSource&lt;/code&gt; values as text. If you want a custom formatted text for the cells, you can set &lt;code&gt;cellConfiguration&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dropDown.cellConfiguration = { [unowned self] (index, item) in&#xA;  return &#34;- \(item) (option \(index))&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom cell&lt;/h4&gt; &#xA;&lt;p&gt;You can also create your own custom cell, from your .xib file. To have something like this for example: &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/3.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/3.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can check out a concrete example in the Demo inside this project (go to &lt;code&gt;ViewController.swift&lt;/code&gt;, line 125).&lt;/p&gt; &#xA;&lt;p&gt;For this you have to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/DropDown/src/DropDownCell.swift&#34;&gt;&lt;code&gt;DropDownCell&lt;/code&gt;&lt;/a&gt; subclass (e.g. &lt;em&gt;MyCell.swift&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyCell: DropDownCell {&#xA;   @IBOutlet weak var logoImageView: UIImageView!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create your custom xib (e.g. &lt;em&gt;MyCell.xib&lt;/em&gt;) and design your cell view in it&lt;/li&gt; &#xA; &lt;li&gt;Link the cell in your xib to your custom class&lt;/li&gt; &#xA; &lt;li&gt;At least have a label in your xib to link to the &lt;a href=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/DropDown/src/DropDownCell.swift#L14&#34;&gt;&lt;code&gt;optionLabel&lt;/code&gt;&lt;/a&gt; &lt;code&gt;IBOutlet&lt;/code&gt; in code (&lt;code&gt;optionLabel&lt;/code&gt; is a property of &lt;code&gt;DropDownCell&lt;/code&gt;) &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/customCells/links.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/customCells/links.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/customCells/xib.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/Screenshots/customCells/xib.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Then, you simply need to do this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dropDown = DropDown()&#xA;&#xA;// The view to which the drop down will appear on&#xA;dropDown.anchorView = view // UIView or UIBarButtonItem&#xA;&#xA;// The list of items to display. Can be changed dynamically&#xA;dropDown.dataSource = [&#34;Car&#34;, &#34;Motorcycle&#34;, &#34;Truck&#34;]&#xA;&#xA;/*** IMPORTANT PART FOR CUSTOM CELLS ***/&#xA;dropDown.cellNib = UINib(nibName: &#34;MyCell&#34;, bundle: nil)&#xA;&#xA;dropDown.customCellConfiguration = { (index: Index, item: String, cell: DropDownCell) -&amp;gt; Void in&#xA;   guard let cell = cell as? MyCell else { return }&#xA;&#xA;   // Setup your custom UI components&#xA;   cell.logoImageView.image = UIImage(named: &#34;logo_\(index)&#34;)&#xA;}&#xA;/*** END - IMPORTANT PART FOR CUSTOM CELLS ***/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;And you&#39;re good to go! üôÜ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a complete example, don&#39;t hesitate to check the demo app and code.&lt;/p&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dropDown.cancelAction = { [unowned self] in&#xA;  println(&#34;Drop down dismissed&#34;)&#xA;}&#xA;&#xA;dropDown.willShowAction = { [unowned self] in&#xA;  println(&#34;Drop down will show&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dismiss modes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dropDown.dismissMode = .onTap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You have 3 dismiss mode with the &lt;code&gt;DismissMode&lt;/code&gt; enum:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;onTap&lt;/code&gt;: A tap oustide the drop down is needed to dismiss it (Default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;automatic&lt;/code&gt;: No tap is needed to dismiss the drop down. As soon as the user interact with anything else than the drop down, the drop down is dismissed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;manual&lt;/code&gt;: The drop down can only be dismissed manually (in code)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;p&gt;You can manually (pre)select a row with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dropDown.selectRow(at: 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The data source is reloaded automatically when changing the &lt;code&gt;dataSource&lt;/code&gt; property. If needed, you can reload the data source manually by doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dropDown.reloadAllComponents()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get info about the selected item at any time with this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dropDown.selectedItem // String?&#xA;dropDown.indexForSelectedRow // Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customize UI üñå&lt;/h2&gt; &#xA;&lt;p&gt;You can customize these properties of the drop down:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;textFont&lt;/code&gt;: the font of the text for each cells of the drop down.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;textColor&lt;/code&gt;: the color of the text for each cells of the drop down.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;selectedTextColor&lt;/code&gt;: the color of the text for selected cells of the drop down.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;backgroundColor&lt;/code&gt;: the background color of the drop down.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;selectionBackgroundColor&lt;/code&gt;: the background color of the selected cell in the drop down.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cellHeight&lt;/code&gt;: the height of the drop down cells.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dimmedBackgroundColor&lt;/code&gt;: the color of the background (behind the drop down, covering the entire screen).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cornerRadius&lt;/code&gt;: the corner radius of the drop down (see &lt;a href=&#34;https://raw.githubusercontent.com/AssistoLab/DropDown/master/#Issues&#34;&gt;info&lt;/a&gt; below if you encounter any issue)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setupMaskedCorners&lt;/code&gt;: the masked corners of the dropdown. Use this along with &lt;code&gt;cornerRadius&lt;/code&gt; to set the corner radius only on certain corners.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can change them through each instance of &lt;code&gt;DropDown&lt;/code&gt; or via &lt;code&gt;UIAppearance&lt;/code&gt; like this for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;DropDown.appearance().textColor = UIColor.black&#xA;DropDown.appearance().selectedTextColor = UIColor.red&#xA;DropDown.appearance().textFont = UIFont.systemFont(ofSize: 15)&#xA;DropDown.appearance().backgroundColor = UIColor.white&#xA;DropDown.appearance().selectionBackgroundColor = UIColor.lightGray&#xA;DropDown.appearance().cellHeight = 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Expert mode ü§ì&lt;/h2&gt; &#xA;&lt;p&gt;when calling the &lt;code&gt;show&lt;/code&gt; method, it returns a tuple like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;(canBeDisplayed: Bool, offscreenHeight: CGFloat?)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;canBeDisplayed&lt;/code&gt;: Tells if there is enough height to display the drop down. If its value is &lt;code&gt;false&lt;/code&gt;, the drop down is not showed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;offscreenHeight&lt;/code&gt;: If the drop down was not able to show all cells from the data source at once, &lt;code&gt;offscreenHeight&lt;/code&gt; will contain the height needed to display all cells at once (without having to scroll through them). This can be used in a scroll view or table view to scroll enough before showing the drop down.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you experience the compiler error &lt;em&gt;&#34;Ambiguous use of &#39;cornerRadius&#39;&#34;&lt;/em&gt; on line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;DropDown.appearance().cornerRadius = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please use intead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;DropDown.appearance().setupCornerRadius(10) // available since v2.3.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 8+&lt;/li&gt; &#xA; &lt;li&gt;Swift 3.0&lt;/li&gt; &#xA; &lt;li&gt;iOS 8+&lt;/li&gt; &#xA; &lt;li&gt;ARC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is under MIT license. For more information, see &lt;code&gt;LICENSE&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;DropDown was inspired by the Material Design version of the &lt;a href=&#34;http://www.google.com/design/spec/components/menus.html#menus-simple-menus&#34;&gt;Simple Menu&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;DropDown was done to integrate in a project I work on:&lt;br&gt; &lt;a href=&#34;https://assis.to&#34;&gt;&lt;img src=&#34;https://assis.to/images/logouser_dark.png&#34; alt=&#34;Assisto&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will be updated when necessary and fixes will be done as soon as discovered to keep it up to date.&lt;/p&gt; &#xA;&lt;p&gt;I work at&lt;br&gt; &lt;a href=&#34;http://pinch.eu&#34;&gt;&lt;img src=&#34;http://pinch.eu/img/pinch-logo.png&#34; alt=&#34;Pinch&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find me on Twitter &lt;a href=&#34;https://twitter.com/kevinh6113&#34;&gt;@kevinh6113&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xiaogdgenuine/Doll</title>
    <updated>2022-09-25T01:37:40Z</updated>
    <id>tag:github.com,2022-09-25:/xiaogdgenuine/Doll</id>
    <link href="https://github.com/xiaogdgenuine/Doll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A mac app to help monitor your app badges!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Doll is a Mac app that help you catch up important messages!&lt;/h1&gt; &#xA;&lt;p&gt;In &lt;strong&gt;macOS&lt;/strong&gt;, It feels really great when you hide the &lt;strong&gt;Dock&lt;/strong&gt;, open a &lt;strong&gt;full screen&lt;/strong&gt; window and focus on your task.&lt;/p&gt; &#xA;&lt;p&gt;But we are not living in an ideal world, your teammates may need your help anytime, and when you are in focus mode, occasionally you just &lt;em&gt;&lt;strong&gt;forgot to respond&lt;/strong&gt;&lt;/em&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Message apps like &lt;strong&gt;Mail&lt;/strong&gt;, &lt;strong&gt;Slack&lt;/strong&gt; and &lt;strong&gt;Microsoft Teams&lt;/strong&gt; don&#39;t even offer a &lt;strong&gt;&lt;em&gt;menu bar icon&lt;/em&gt;&lt;/strong&gt; at all, so if you&#39;re working in a full screen window, or looking at another extra Monitor screen which can&#39;t show the Dock, there is no way you will notice the unread messages!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaogdgenuine/Doll/main/Doll/Docs/Images/dock-only.png&#34; alt=&#34;Basic usage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(Sorry the notification center did notice you, but they will soon dismiss after a short period, if you miss that, you miss the message)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaogdgenuine/Doll/main/Doll/Docs/Images/notification.png&#34; alt=&#34;Notification center&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It would be great if we could put the icon and badge of these apps into the &lt;strong&gt;&lt;em&gt;Menu bar&lt;/em&gt;&lt;/strong&gt;, that way we can always easily notice new messages across screens, just like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaogdgenuine/Doll/main/Doll/Docs/Images/showcase.png&#34; alt=&#34;Show case&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Doll?&lt;/h1&gt; &#xA;&lt;p&gt;In my favor animation &lt;a href=&#34;https://en.wikipedia.org/wiki/Darker_than_Black&#34;&gt;„ÄäDarker than dark„Äã&lt;/a&gt;, if a &lt;strong&gt;&lt;em&gt;Contractor&lt;/em&gt;&lt;/strong&gt; use his power and never willing to pay the cost, eventually he will lose control of his power, become an emotionless &lt;strong&gt;&lt;em&gt;Doll&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If we use too much &lt;strong&gt;focus power&lt;/strong&gt; without paying the cost, what will we become &amp;gt;&amp;gt;__&amp;lt;&amp;lt;.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;You can download the latest dmg file from &lt;a href=&#34;https://github.com/xiaogdgenuine/Doll/releases/latest&#34;&gt;here&lt;/a&gt; Minimum system requirement: &lt;strong&gt;&lt;em&gt;macOS 11.0&lt;/em&gt;&lt;/strong&gt; (Big Sur)&lt;/p&gt; &#xA;&lt;h1&gt;How to use?&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s simple, click on &#34;+&#34; button at the left bottom corner, search and select the app you want to monitor:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaogdgenuine/Doll/main/Doll/Docs/Images/usage-0.png&#34; alt=&#34;Add monitor&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaogdgenuine/Doll/main/Doll/Docs/Images/search-and-select.png&#34; alt=&#34;Search and select&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then Doll will ask for your permission to use the Accessibility API:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaogdgenuine/Doll/main/Doll/Docs/Images/ask-for-permission.png&#34; alt=&#34;ask-for-permission.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please make sure you grant that permission to &lt;strong&gt;Doll.app&lt;/strong&gt; otherwise nothing will be monitored!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaogdgenuine/Doll/main/Doll/Docs/Images/grant-permission.png&#34; alt=&#34;grant-permission.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Done, you are all setup! Doll now will monitor all the badge update in the Dock, and sync the numbers into the menu bar!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaogdgenuine/Doll/main/Doll/Docs/Images/running.png&#34; alt=&#34;running.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Doll also can show new notification as red badge, just like in dock!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaogdgenuine/Doll/main/Doll/Docs/Images/show-as-badge.png&#34; alt=&#34;show as badge&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;I want to change the Monitor apps&lt;/h1&gt; &#xA;&lt;p&gt;If the monitored app is running, click on the menu bar icon will simply open that app.&lt;/p&gt; &#xA;&lt;p&gt;But if you want to change stuffs, use right click, or left click while holding the &#34;&lt;strong&gt;&lt;em&gt;Option key(‚å•)&lt;/em&gt;&lt;/strong&gt;&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaogdgenuine/Doll/main/Doll/Docs/Images/config.png&#34; alt=&#34;config.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Security concern about the permission?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Never! Ever! Trust! Anybody! in Internet!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Doll&lt;/strong&gt; is open source, you are free to download, review, modify and compile your own version of the app, go ahead and happy coding~&lt;/p&gt; &#xA;&lt;h1&gt;How the app works?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Doll&lt;/strong&gt; utils the &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/Accessibility/Conceptual/AccessibilityMacOSX/OSXAXmodel.html#//apple_ref/doc/uid/TP40001078-CH208-TPXREF101&#34;&gt;macOS Accessibility API&lt;/a&gt;, it will sync the latest badge text to menu bar from every Monitored app in the &lt;strong&gt;Dock&lt;/strong&gt; element.&lt;/p&gt; &#xA;&lt;p&gt;Due to the limitation of Accessibility API(Can&#39;t watch for element&#39;s attribute value change), Doll has to sync badges by every second(Yep, the infamy &lt;strong&gt;&lt;em&gt;Polling&lt;/em&gt;&lt;/strong&gt; style).&lt;/p&gt; &#xA;&lt;p&gt;But don&#39;t worry about the performance, after all the synchronization happens only 864000 times per day, and all it does is just read and set few element&#39;s text, that&#39;s an operation executed less than &lt;strong&gt;1ms&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;p&gt;If you found any potential Bug or Performance issue, feel free to submit a PR!&lt;/p&gt;</summary>
  </entry>
</feed>