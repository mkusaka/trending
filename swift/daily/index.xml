<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-27T01:45:35Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>italomandara/CXPatcher</title>
    <updated>2023-06-27T01:45:35Z</updated>
    <id>tag:github.com,2023-06-27:/italomandara/CXPatcher</id>
    <link href="https://github.com/italomandara/CXPatcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A patcher to upgrade Crossover dependencies and improve compatibility&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/italomandara/CXPatcher/raw/main/pacher%20icon.png&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &#xA;&lt;h1&gt;CXPatcher&lt;/h1&gt; &#xA;&lt;p&gt;A patcher to upgrade Crossover dependencies and improve compatibility&lt;/p&gt; &#xA;&lt;p&gt;This is an &lt;strong&gt;unofficial patcher&lt;/strong&gt; for Crossover and codeweavers is not - by any means - involved in this or has anything to do with this app, and although has been tested, this software may render the app unusable or unstable, &lt;strong&gt;USE AT YOUR OWN RISK&lt;/strong&gt;, this also will void any official support from Codeweavers, If you still need support from codeweavers, download the original unmodified app and please don&#39;t report problems to them after your app is patched.&lt;/p&gt; &#xA;&lt;p&gt;if you have any issues after your app has been patched you can download a new copy of Crossover.&lt;/p&gt; &#xA;&lt;p&gt;for more info: &lt;a href=&#34;https://www.codeweavers.com/support/forums/general/?t=27;msg=257865&#34;&gt;https://www.codeweavers.com/support/forums/general/?t=27;msg=257865&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What does it do?&lt;/h1&gt; &#xA;&lt;p&gt;This patcher will upgrade your crossover app with the latest dxvk and moltenvk patched for improved compatibility, and dramatically extends compatibility with Unreal engine 4 games.&lt;/p&gt; &#xA;&lt;h1&gt;What does it NOT do?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Games with anti-cheat or anti-tamper will not work&lt;/li&gt; &#xA; &lt;li&gt;Dx12 games will not work unless playable via the popular -dx11 option&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Instructions&lt;/h1&gt; &#xA;&lt;p&gt;You need to have an unmodified version of Crossover, you can download it at: &lt;a href=&#34;https://www.codeweavers.com/account/downloads&#34;&gt;https://www.codeweavers.com/account/downloads&lt;/a&gt;, please make sure the app has been registered or ran at least once, to make sure the latest dxvk is activated properly You may need to switch off dxvk and on again, if you don&#39;t you will need to re-download it. If the patcher renders the app unusable you can either use the restore function (see instructions below) or download it again from the website, it doesn&#39;t do any permanent modifications to your &#39;bottles&#39;.&lt;/p&gt; &#xA;&lt;h2&gt;Restoring a patched app to the original app&lt;/h2&gt; &#xA;&lt;p&gt;Maybe you changed your mind and prefer to use your original crossover app. You can restore by going to the &lt;code&gt;file -&amp;gt; restore menu&lt;/code&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;399&#34; alt=&#34;Screenshot 2023-04-25 at 21 32 58&#34; src=&#34;https://user-images.githubusercontent.com/12135454/234406600-f7a903fe-c34f-4d11-8154-476028870053.png&#34;&gt; &#xA;&lt;h2&gt;Patching other versions of crossover&lt;/h2&gt; &#xA;&lt;p&gt;From V0.2.12 I&#39;m dropping support for Crossover 21, it lacks the base work for the hacked ntdll and dxvk.&lt;/p&gt; &#xA;&lt;h2&gt;Patching with a new external framework&lt;/h2&gt; &#xA;&lt;p&gt;There are new upcoming technologies developed this year that are capable of running directx 12 games and now you can have those embedded in crossover! in order to integrate that in crossover you need to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download the dmg image file (gptk)&lt;/li&gt; &#xA; &lt;li&gt;mount the dmg image&lt;/li&gt; &#xA; &lt;li&gt;switch on &#34;integrate external resources&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;Screenshot 2023-06-24 at 22 51 53&#34; src=&#34;https://github.com/italomandara/CXPatcher/assets/12135454/12b5413e-5f50-468c-8c82-28e8e237f408&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;click the &#34;locate external resources&#34; button and select the volume you just mounted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;Screenshot 2023-06-24 at 22 51 58&#34; src=&#34;https://github.com/italomandara/CXPatcher/assets/12135454/8b5a0f55-8058-467d-a143-475e1abab0f7&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;now you can patch CrossOver as usual via either drag&#39;n&#39;drop or file selector (click in the drop area)&lt;/li&gt; &#xA; &lt;li&gt;enjoy your dx12 games!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Upgrade from an old patch&lt;/h2&gt; &#xA;&lt;p&gt;If you patched from an old version and you just want to update the patched crossover app just turn on the option and drag &#39;n drop&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/italomandara/CXPatcher/assets/12135454/5bb3c410-0a02-42d0-9024-eb3dfde5ed96&#34; alt=&#34;Screenshot 2023-05-10 at 10 55 42&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshoting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;If your env vars doesn&#39;t work anymore or can&#39;t enable/disable fast math&lt;/strong&gt;: use the env variable &lt;code&gt;CXPATCHER_SKIP_NTDLLHACKS=1&lt;/code&gt; and then any env var should work as usual &lt;strong&gt;For other issues&lt;/strong&gt;: try: &lt;code&gt;NAS_DISABLE_UE4_HACK=1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Color profiles for UE4 games:&lt;/h2&gt; &#xA;&lt;p&gt;You can change the way the colors are processed in ue4 games.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;examples:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;disable color profiles&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;(old greyish colors but may improve performance or fix dark or oversaturated colors)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;NAS_TONEMAP_C=0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Color profile for Stray&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;NAS_TONEMAP_C=clamp({inputColor} * float3x3( 0.2126 + 0.7874 * 1.5, 0.7152 - 0.7152 * 1.5, 0.0722 - 0.0722 * 1.5, 0.2126 - 0.2126 * 1.5, 0.7152 + 0.2848 * 1.5, 0.0722 - 0.0722 * 1.5, 0.2126 - 0.2126 * 1.5, 0.7152 - 0.7152 * 1.5, 0.0722 + 0.9278 * 1.5 ) * 2 - float3(0.28, 0.2, 0.16), 0.0, 1.0)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;NAS_TONEMAP_C&lt;/code&gt; uses standard MSL shading language, as long as it&#39;s done in one line, you can use {inputColor} as a variable and modify the colors, or give any effect you like using matrix transforms, WARNING: do not copy paste any code from unknown sources, and do this only if you know what you&#39;re doing, otherwise, have fun!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you may need to use &lt;code&gt;CXPATCHER_SKIP_DXVK_ENV=1&lt;/code&gt; to override built in settings for games that already have a profile &lt;code&gt;NAS_TONEMAP_C&lt;/code&gt;, also only works for UE4 games.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Many thanks to the developers behind DXVK and MoltenVK patches:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@gcenx (&lt;a href=&#34;https://github.com/Gcenx&#34;&gt;https://github.com/Gcenx&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;@nastys (&lt;a href=&#34;https://github.com/nastys&#34;&gt;https://github.com/nastys&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;thanks for the great help and for providing the latest binaries.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WeTransfer/WeScan</title>
    <updated>2023-06-27T01:45:35Z</updated>
    <id>tag:github.com,2023-06-27:/WeTransfer/WeScan</id>
    <link href="https://github.com/WeTransfer/WeScan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Document Scanning Made Easy for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WeScan&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;900px&#34; src=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/Assets/WeScan-Banner.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://app.bitrise.io/app/df00af454f27891d.svg?token=spjxNvzjnRqug6GfGM3_Lg&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/l/WeScan.svg?style=flat&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/WeScan.svg?style=flat&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?style=flat&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WeScan&lt;/strong&gt; makes it easy to add scanning functionalities to your iOS app! It&#39;s modelled after &lt;code&gt;UIImagePickerController&lt;/code&gt;, which makes it a breeze to use.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fast and lightweight&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Live scanning of documents&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Edit detected rectangle&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Auto scan and flash support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for both PDF and UIImage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Translated to English, Chinese, Italian, Portuguese, and French&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Batch scanning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img width=&#34;350px&#34; src=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/Assets/WeScan.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift 5.0&lt;/li&gt; &#xA; &lt;li&gt;iOS 10.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler. It is in early development, but WeScan does support its use on supported platforms.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding WeScan as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/WeTransfer/WeScan.git&#34;, .upToNextMajor(from: &#34;1.7.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;To integrate &lt;strong&gt;WeScan&lt;/strong&gt; into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;WeTransfer/WeScan&#34; &amp;gt;= 0.9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; to build the framework and drag the built &lt;code&gt;WeScan.framework&lt;/code&gt; into your Xcode project.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Just download the project, and drag and drop the &#34;WeScan&#34; folder in your project.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;900px&#34; src=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/Assets/project.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Simply add the WeScan framework in the project&#39;s Embedded Binaries and Linked Frameworks and Libraries.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;900px&#34; src=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/Assets/LinkedFrameworks.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In order to make the framework available, add &lt;code&gt;import WeScan&lt;/code&gt; at the top of the Swift source file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the Info.plist, add the &lt;code&gt;NSCameraUsageDescription&lt;/code&gt; key and set the appropriate value in which you have to inform the user of the reason to allow the camera permission&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that your view controller conforms to the &lt;code&gt;ImageScannerControllerDelegate&lt;/code&gt; protocol:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class YourViewController: UIViewController, ImageScannerControllerDelegate {&#xA;    // YourViewController code here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Implement the delegate functions inside your view controller:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func imageScannerController(_ scanner: ImageScannerController, didFailWithError error: Error) {&#xA;    // You are responsible for carefully handling the error&#xA;    print(error)&#xA;}&#xA;&#xA;func imageScannerController(_ scanner: ImageScannerController, didFinishScanningWithResults results: ImageScannerResults) {&#xA;    // The user successfully scanned an image, which is available in the ImageScannerResults&#xA;    // You are responsible for dismissing the ImageScannerController&#xA;    scanner.dismiss(animated: true)&#xA;}&#xA;&#xA;func imageScannerControllerDidCancel(_ scanner: ImageScannerController) {&#xA;    // The user tapped &#39;Cancel&#39; on the scanner&#xA;    // You are responsible for dismissing the ImageScannerController&#xA;    scanner.dismiss(animated: true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Finally, create and present a &lt;code&gt;ImageScannerController&lt;/code&gt; instance somewhere within your view controller:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let scannerViewController = ImageScannerController()&#xA;scannerViewController.imageScannerDelegate = self&#xA;present(scannerViewController, animated: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Objective-C&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a dummy swift class in your project. When Xcode asks if you&#39;d like to create a bridging header, press &#39;Create Bridging Header&#39;&lt;/li&gt; &#xA; &lt;li&gt;In the new header, add the Objective-C class (&lt;code&gt;#import myClass.h&lt;/code&gt;) where you want to use WeScan&lt;/li&gt; &#xA; &lt;li&gt;In your class, import the header (&lt;code&gt;import &amp;lt;yourProjectName.swift.h&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop the WeScan folder to add it to your project&lt;/li&gt; &#xA; &lt;li&gt;In your class, add &lt;code&gt;@Class ImageScannerController;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Example Implementation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;ImageScannerController *scannerViewController = [[ImageScannerController alloc] init];&#xA;[self presentViewController:scannerViewController animated:YES completion:nil];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;As the creators, and maintainers of this project, we&#39;re glad to invite contributors to help us stay up to date. Please take a moment to review &lt;a href=&#34;https://raw.githubusercontent.com/WeTransfer/WeScan/master/CONTRIBUTING.md&#34;&gt;the contributing document&lt;/a&gt; in order to make the contribution process easy and effective for everyone involved.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an &lt;a href=&#34;https://github.com/WeTransfer/WeScan/issues&#34;&gt;issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an &lt;a href=&#34;https://github.com/WeTransfer/WeScan/issues&#34;&gt;issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a &lt;a href=&#34;https://github.com/WeTransfer/WeScan/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;WeScan&lt;/strong&gt; is available under the MIT license. See the &lt;a href=&#34;https://github.com/WeTransfer/WeScan/raw/develop/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>