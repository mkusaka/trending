<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-16T01:47:32Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dylanshine/openai-kit</title>
    <updated>2023-02-16T01:47:32Z</updated>
    <id>tag:github.com,2023-02-16:/dylanshine/openai-kit</id>
    <link href="https://github.com/dylanshine/openai-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community Swift package used to interact with the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAIKit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://img.shields.io/badge/swift-5.7-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenAIKit is a Swift package used to communicate with the &lt;a href=&#34;https://beta.openai.com/docs/api-reference/introduction&#34;&gt;OpenAI API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Add the dependency to Package.swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    ...&#xA;    .package(url: &#34;https://github.com/dylanshine/openai-kit.git&#34;, from: &#34;1.0.0&#34;)&#xA;],&#xA;targets: [&#xA;    .target(name: &#34;App&#34;, dependencies: [&#xA;        .product(name: &#34;OpenAIKit&#34;, package: &#34;openai-kit&#34;),&#xA;    ]),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is encouraged to use environment variables to inject the OpenAI API key, instead of hardcoding it in the source code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# .env&#xA;&#xA;OPENAI_API_KEY=&#34;YOUR-API-KEY&#34;&#xA;OPENAI_ORGANIZATION=&#34;YOUR-ORGANIZATION&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;⚠️ OpenAI strongly recommends developers of client-side applications proxy requests through a separate backend service to keep their API key safe. API keys can access and manipulate customer billing, usage, and organizational data, so it&#39;s a significant risk to &lt;a href=&#34;https://nshipster.com/secrets/&#34;&gt;expose&lt;/a&gt; them.&lt;/p&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;OpenAIKit.Client&lt;/code&gt; using a httpClient and configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;var apiKey: String {&#xA;&#x9;ProcessInfo.processInfo.environment[&#34;OPENAI_API_KEY&#34;]!&#xA;}&#xA;&#xA;var organization: String {&#xA;&#x9;ProcessInfo.processInfo.environment[&#34;OPENAI_ORGANIZATION&#34;]!&#xA;}&#xA;&#xA;...&#xA;&#xA;let httpClient = HTTPClient(eventLoopGroupProvider: .createNew)&#xA;let configuration = Configuration(apiKey: apiKey, organization: organization)&#xA;&#xA;let openAIClient = OpenAIKit.Client(httpClient: httpClient, configuration: configuration)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the API&lt;/h2&gt; &#xA;&lt;p&gt;The OpenAIKit.Client implements a handful of methods to interact with the OpenAI API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import OpenAIKit&#xA;&#xA;let completion = try await openAIClient.completions.create(&#xA;    model: Model.GPT3.davinci,&#xA;    prompts: [&#34;Write a haiku&#34;]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What&#39;s Implemented&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://beta.openai.com/docs/api-reference/models&#34;&gt;Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions&#34;&gt;Completions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://beta.openai.com/docs/api-reference/edits&#34;&gt;Edits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://beta.openai.com/docs/api-reference/images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://beta.openai.com/docs/api-reference/embeddings&#34;&gt;Embeddings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://beta.openai.com/docs/api-reference/files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://beta.openai.com/docs/api-reference/moderations&#34;&gt;Moderations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://beta.openai.com/docs/api-reference/fine-tunes&#34;&gt;Fine-tunes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Error handling&lt;/h2&gt; &#xA;&lt;p&gt;If the request to the API failed for any reason an &lt;code&gt;OpenAIKit.APIErrorResponse&lt;/code&gt; is &lt;code&gt;thrown&lt;/code&gt;. Simply ensure you catch errors thrown like any other throwing function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;   ...&#xA;} catch let error as APIErrorResponse {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>