<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-16T01:34:28Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>marmelroy/Zip</title>
    <updated>2024-08-16T01:34:28Z</updated>
    <id>tag:github.com,2024-08-16:/marmelroy/Zip</id>
    <link href="https://github.com/marmelroy/Zip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift framework for zipping and unzipping files.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/889949/12374908/252373d0-bcac-11e5-8ece-6933aeae8222.png&#34; alt=&#34;Zip - Zip and unzip files in Swift&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/marmelroy/Zip&#34;&gt;&lt;img src=&#34;https://travis-ci.org/marmelroy/Zip.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/?q=Zip&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/v/Zip.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-brightgreen.svg?style=flat&#34; alt=&#34;SPM supported&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Zip&lt;/h1&gt; &#xA;&lt;p&gt;A Swift framework for zipping and unzipping files. Simple and quick to use. Built on top of &lt;a href=&#34;https://github.com/nmoinvaz/minizip&#34;&gt;minizip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Import Zip at the top of the Swift file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick functions&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to use Zip is through quick functions. Both take local file paths as NSURLs, throw if an error is encountered and return an NSURL to the destination if successful.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let filePath = Bundle.main.url(forResource: &#34;file&#34;, withExtension: &#34;zip&#34;)!&#xA;    let unzipDirectory = try Zip.quickUnzipFile(filePath) // Unzip&#xA;    let zipFilePath = try Zip.quickZipFiles([filePath], fileName: &#34;archive&#34;) // Zip&#xA;}&#xA;catch {&#xA;  print(&#34;Something went wrong&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Zip&lt;/h2&gt; &#xA;&lt;p&gt;For more advanced usage, Zip has functions that let you set custom destination paths, work with password protected zips and use a progress handling closure. These functions throw if there is an error but don&#39;t return.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let filePath = Bundle.main.url(forResource: &#34;file&#34;, withExtension: &#34;zip&#34;)!&#xA;    let documentsDirectory = FileManager.default.urls(for:.documentDirectory, in: .userDomainMask)[0]&#xA;    try Zip.unzipFile(filePath, destination: documentsDirectory, overwrite: true, password: &#34;password&#34;, progress: { (progress) -&amp;gt; () in&#xA;        print(progress)&#xA;    }) // Unzip&#xA;&#xA;    let zipFilePath = documentsFolder.appendingPathComponent(&#34;archive.zip&#34;)&#xA;    try Zip.zipFiles([filePath], zipFilePath: zipFilePath, password: &#34;password&#34;, progress: { (progress) -&amp;gt; () in&#xA;        print(progress)&#xA;    }) //Zip&#xA;&#xA;}&#xA;catch {&#xA;  print(&#34;Something went wrong&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom File Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Zip supports &#39;.zip&#39; and &#39;.cbz&#39; files out of the box. To support additional zip-derivative file extensions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Zip.addCustomFileExtension(&#34;file-extension-here&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;[Preferred] Setting up with &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To use Zip with Swift Package Manager, add it to your package&#39;s dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/marmelroy/Zip.git&#34;, .upToNextMinor(from: &#34;2.1&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up with &lt;a href=&#34;http://cocoapods.org/?q=Zip&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;pod &#39;Zip&#39;, &#39;~&amp;gt; 2.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up with &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To integrate Zip into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;marmelroy/Zip&#34; ~&amp;gt; 2.1&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>