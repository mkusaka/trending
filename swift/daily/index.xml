<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:56:46Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pointfreeco/swiftui-navigation</title>
    <updated>2022-08-02T01:56:46Z</updated>
    <id>tag:github.com,2022-08-02:/pointfreeco/swiftui-navigation</id>
    <link href="https://github.com/pointfreeco/swiftui-navigation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for making SwiftUI navigation simpler, more ergonomic and more precise.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUI Navigation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swiftui-navigation/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/pointfreeco/swiftui-navigation/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swiftui-navigation&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswiftui-navigation%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swiftui-navigation&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswiftui-navigation%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tools for making SwiftUI navigation simpler, more ergonomic and more precise.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/#tools&#34;&gt;Tools&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/#navigation-api-overloads&#34;&gt;Navigation overloads&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/#navigation-views&#34;&gt;Navigation views&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/#binding-transformations&#34;&gt;Binding transformations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/#learn-more&#34;&gt;Learn more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;SwiftUI comes with many forms of navigation (tabs, alerts, dialogs, modal sheets, popovers, navigation links, and more), and each comes with a few ways to construct them. These ways roughly fall in two categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;Fire-and-forget&#34;: These are initializers and methods that do not take binding arguments, which means SwiftUI fully manages navigation state internally. This makes it is easy to get something on the screen quickly, but you also have no programmatic control over the navigation. Examples of this are the initializers on &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/tabview/init(content:)&#34;&gt;&lt;code&gt;TabView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/navigationlink/init(destination&lt;span&gt;üè∑&lt;/span&gt;)-27n7s&#34;&gt;&lt;code&gt;NavigationLink&lt;/code&gt;&lt;/a&gt; that do not take a binding.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#34;State-driven&#34;: Most other initializers and methods do take a binding, which means you can mutate state in your domain to tell SwiftUI when it should activate or deactivate navigation. Using these APIs is more complicated than the &#34;fire-and-forget&#34; style, but doing so instantly gives you the ability to deep-link into any state of your application by just constructing a piece of data, handing it to a SwiftUI view, and letting SwiftUI handle the rest.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Navigation that is &#34;state-driven&#34; is the more powerful form of navigation, albeit slightly more complicated, but unfortunately SwiftUI does not ship with all the tools necessary to model our domains as concisely as possible and use these navigation APIs.&lt;/p&gt; &#xA;&lt;p&gt;For example, to show a modal sheet in SwiftUI you can provide a binding of some optional state so that when the state flips to non-&lt;code&gt;nil&lt;/code&gt; the modal is presented. However, the content closure of the sheet is handed a plain value, not a binding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;  @State var draft: Post?&#xA;&#xA;  var body: some View {&#xA;    Button(&#34;Edit&#34;) {&#xA;      self.draft = Post()&#xA;    }&#xA;    .sheet(item: self.$draft) { (draft: Post) in&#xA;      EditPostView(post: draft)&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;struct EditPostView: View {&#xA;  let post: Post&#xA;  var body: some View { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means that the &lt;code&gt;Post&lt;/code&gt; handed to the &lt;code&gt;EditPostView&lt;/code&gt; is fully disconnected from the source of truth &lt;code&gt;draft&lt;/code&gt; that powers the presentation of the modal. Ideally we should be able to derive a &lt;code&gt;Binding&amp;lt;Post&amp;gt;&lt;/code&gt; for the draft so that any mutations &lt;code&gt;EditPostView&lt;/code&gt; makes will be instantly visible in &lt;code&gt;ContentView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another problem arises when trying to model multiple navigation destinations as multiple optional values. For example, suppose there are 3 different sheets that can be shown in a screen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;  @State var draft: Post?&#xA;  @State var settings: Settings?&#xA;  @State var userProfile: UserProfile?&#xA;&#xA;  var body: some View {&#xA;    /* Main view omitted */&#xA;&#xA;    .sheet(item: self.$draft) { (draft: Post) in&#xA;      EditPostView(post: draft)&#xA;    }&#xA;    .sheet(item: self.$settings) { (settings: Settings) in&#xA;      SettingsView(settings: settings)&#xA;    }&#xA;    .sheet(item: self.$userProfile) { (userProfile: Profile) in&#xA;      UserProfile(profile: userProfile)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This forces us to hold 3 optional values in state, which has 2^3=8 different states, 4 of which are invalid. The only valid states is for all values to be &lt;code&gt;nil&lt;/code&gt; or exactly one be non-&lt;code&gt;nil&lt;/code&gt;. It makes no sense if two or more values are non-&lt;code&gt;nil&lt;/code&gt;, for that would representing wanting to show two modal sheets at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Ideally we&#39;d like to represent these navigation destinations as 3 mutually exclusive states so that we could guarantee at compile time that only one can be active at a time. Luckily for us Swift‚Äôs enums are perfect for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Route {&#xA;  case draft(Post)&#xA;  case settings(Settings)&#xA;  case userProfile(Profile)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we could hold an optional &lt;code&gt;Route&lt;/code&gt; in state to represent that we are either navigating to a specific destination or we are not navigating anywhere:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@State var route: Route?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would be the most optimal way to model our navigation domain, but unfortunately SwiftUI&#39;s tools do not make easy for us to drive navigation off of enums.&lt;/p&gt; &#xA;&lt;p&gt;This library comes with a number of &lt;code&gt;Binding&lt;/code&gt; transformations and navigation API overloads that allow you to model your domain as concisely as possible, using enums, while still allowing you to use SwiftUI&#39;s navigation tools.&lt;/p&gt; &#xA;&lt;p&gt;For example, powering multiple modal sheets off a single &lt;code&gt;Route&lt;/code&gt; enum looks like this with the tools in this library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView {&#xA;  @State var route: Route?&#xA;&#xA;  enum Route {&#xA;    case draft(Post)&#xA;    case settings(Settings)&#xA;    case userProfile(Profile)&#xA;  }&#xA;&#xA;  var body: some View {&#xA;    /* Main view omitted */&#xA;&#xA;    .sheet(unwrapping: self.$route, case: /Route.draft) { $draft in&#xA;      EditPostView(post: $draft)&#xA;    }&#xA;    .sheet(unwrapping: self.$route, case: /Route.settings) { $settings in&#xA;      SettingsView(settings: $settings)&#xA;    }&#xA;    .sheet(unwrapping: self.$route, case: /Route.userProfile) { $userProfile in&#xA;      UserProfile(profile: $userProfile)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The forward-slash syntax you see above represents a &lt;a href=&#34;https://github.com/pointfreeco/swift-case-paths&#34;&gt;case path&lt;/a&gt; to a particular case of an enum. Case paths are our imagining of what key paths could look like for enums, and every concept for key paths has an analogous concept for case paths:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each property of an struct is naturally endowed with a key path, and so each case of an enum is endowed with a case path.&lt;/li&gt; &#xA; &lt;li&gt;Key paths are constructed using a back slash, name of the type and name of the property (&lt;em&gt;e.g.&lt;/em&gt;, &lt;code&gt;\User.name&lt;/code&gt;), and case paths are constructed similarly, but with a forward slash (&lt;em&gt;e.g.&lt;/em&gt;, &lt;code&gt;/Route.draft&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Key paths describe how to get and set a value in some root structure, whereas case paths describe how to extract and embed a value into a root structure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Case paths are crucial for allowing us to build the tools to drive navigation off of enum state.&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;p&gt;This library comes with many tools that allow you to model your domain as concisely as possible, using enums, while still allowing you to use SwiftUI&#39;s navigation APIs.&lt;/p&gt; &#xA;&lt;h3&gt;Navigation API overloads&lt;/h3&gt; &#xA;&lt;p&gt;This library provides additional overloads for all of SwiftUI&#39;s &#34;state-driven&#34; navigation APIs that allow you to activate navigation based on a particular case of an enum. Further, all overloads unify presentation in a single, consistent API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NavigationLink.init(unwrapping:case:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;View.alert(unwrapping:case:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;View.confirmationDialog(unwrapping:case:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;View.fullScreenCover(unwrapping:case:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;View.popover(unwrapping:case:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;View.sheet(unwrapping:case:)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, here is how a navigation link, a modal sheet and an alert can all be driven off a single enum with 3 cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Route {&#xA;  case add(Post)&#xA;  case alert(Alert)&#xA;  case edit(Post)&#xA;}&#xA;&#xA;struct ContentView {&#xA;  @State var posts: [Post]&#xA;  @State var route: Route?&#xA;&#xA;  var body: some View {&#xA;    ForEach(self.posts) { post in&#xA;      NavigationLink(unwrapping: self.$route, case: /Route.edit) { $post in &#xA;        EditPostView(post: $post)&#xA;      } onNavigate: { isActive in &#xA;        self.route = isActive ? .edit(post) : nil &#xA;      } label: {&#xA;        Text(post.title)&#xA;      }&#xA;    }&#xA;    .sheet(unwrapping: self.$route, case: /Route.add) { $post in&#xA;      EditPostView(post: $post)&#xA;    }&#xA;    .alert(&#xA;      title: { Text(&#34;Delete \($0.title)?&#34;) },&#xA;      unwrapping: self.$route,&#xA;      case: /Route.alert&#xA;      actions: { post in&#xA;        Button(&#34;Delete&#34;) { self.posts.remove(post) }&#xA;      },&#xA;      message: { Text($0.summary) }&#xA;    )&#xA;  }&#xA;}&#xA;&#xA;struct EditPostView: View {&#xA;  @Binding var post: Post&#xA;  var body: some View { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Navigation views&lt;/h3&gt; &#xA;&lt;p&gt;This library comes with additional SwiftUI views that transform and destructure bindings, allowing you to better handle optional and enum state:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IfLet&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IfCaseLet&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Switch&lt;/code&gt;/&lt;code&gt;CaseLet&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, suppose you were working on an inventory application that modeled in-stock and out-of-stock as an enum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum ItemStatus {&#xA;  case inStock(quantity: Int)&#xA;  case outOfStock(isOnBackorder: Bool)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to conditionally show a stepper view for the quantity when in-stock and a toggle for the backorder when out-of-stock, you&#39;re out of luck when it comes to using SwiftUI&#39;s standard tools. However, the &lt;code&gt;Switch&lt;/code&gt; view that comes with this library allows you to destructure a &lt;code&gt;Binding&amp;lt;ItemStatus&amp;gt;&lt;/code&gt; into bindings of each case so that you can present different views:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct InventoryItemView {&#xA;  @State var status: ItemStatus&#xA;&#xA;  var body: some View {&#xA;    Switch(self.$status) {&#xA;      CaseLet(/ItemStatus.inStock) { $quantity in&#xA;        HStack {&#xA;          Text(&#34;Quantity: \(quantity)&#34;)&#xA;          Stepper(&#34;Quantity&#34;, value: $quantity)&#xA;        }&#xA;        Button(&#34;Out of stock&#34;) { self.status = .outOfStock(isOnBackorder: false) }&#xA;      }&#xA;&#xA;      CaseLet(/ItemStatus.outOfStock) { $isOnBackorder in&#xA;        Toggle(&#34;Is on back order?&#34;, isOn: $isOnBackorder)&#xA;        Button(&#34;In stock&#34;) { self.status = .inStock(quantity: 1) }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binding transformations&lt;/h3&gt; &#xA;&lt;p&gt;This library comes with tools that transform and destructure bindings of optional and enum state, which allows you to build your own navigation views similar to the ones that ship in this library.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Binding.init(unwrapping:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Binding.case(_:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Binding.isPresent()&lt;/code&gt; and &lt;code&gt;Binding.isPresent(_:)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, suppose you have built a &lt;code&gt;BottomSheet&lt;/code&gt; view for presenting a modal-like view that only takes up the bottom half of the screen. You can build the entire view using the most simplistic domain modeling where navigation is driven off a single boolean binding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BottomSheet&amp;lt;Content&amp;gt;: View where Content: View {&#xA;  @Binding var isActive: Bool&#xA;  let content: () -&amp;gt; Content&#xA;&#xA;  var body: some View {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, additional convenience initializers can be introduced that allow the bottom sheet to be created with a more concisely modeled domain.&lt;/p&gt; &#xA;&lt;p&gt;For example, an initializer that allows the bottom sheet to be presented and dismissed with optional state, and further the content closure is provided a binding of the non-optional state. We can accomplish this using the &lt;code&gt;isPresent()&lt;/code&gt; method and &lt;code&gt;Binding.init(unwrapping:)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension BottomSheet {&#xA;  init&amp;lt;Value, WrappedContent&amp;gt;(&#xA;    unwrapping value: Binding&amp;lt;Value?&amp;gt;,&#xA;    @ViewBuilder content: @escaping (Binding&amp;lt;Value&amp;gt;) -&amp;gt; WrappedContent&#xA;  )&#xA;  where Content == WrappedContent?&#xA;  {&#xA;    self.init(&#xA;      isActive: value.isPresent(),&#xA;      content: { Binding(unwrapping: value).map(content) }&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An even more robust initializer can be provided by providing a binding to an optional enum &lt;em&gt;and&lt;/em&gt; a case path to specify which case of the enum triggers navigation. This can be accomplished using the &lt;code&gt;case(_:)&lt;/code&gt; method on binding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension BottomSheet {&#xA;  init&amp;lt;Enum, Case, WrappedContent&amp;gt;(&#xA;    unwrapping enum: Binding&amp;lt;Enum?&amp;gt;,&#xA;    case casePath: CasePath&amp;lt;Enum, Case&amp;gt;,&#xA;    @ViewBuilder content: @escaping (Binding&amp;lt;Case&amp;gt;) -&amp;gt; WrappedContent&#xA;  )&#xA;  where Content == WrappedContent?&#xA;  {&#xA;    self.init(&#xA;      unwrapping: `enum`.case(casePath),&#xA;      content: content&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both of these more powerful initializers are just conveniences. If the user of &lt;code&gt;BottomSheet&lt;/code&gt; does not want to worry about concise domain modeling they are free to continue using the &lt;code&gt;isActive&lt;/code&gt; boolean binding. But the day they need the more powerful APIs they will be available.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;This repo comes with lots of examples to demonstrate how to solve common and complex navigation problems with the library. Check out &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/Examples&#34;&gt;this&lt;/a&gt; directory to see them all, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/Examples/CaseStudies&#34;&gt;Case Studies&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Alerts &amp;amp; Confirmation Dialogs&lt;/li&gt; &#xA;   &lt;li&gt;Sheets &amp;amp; Popovers &amp;amp; Fullscreen Covers&lt;/li&gt; &#xA;   &lt;li&gt;Navigation Links&lt;/li&gt; &#xA;   &lt;li&gt;Routing&lt;/li&gt; &#xA;   &lt;li&gt;Custom Components&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/Examples/Inventory&#34;&gt;Inventory&lt;/a&gt;: A multi-screen application with lists, sheets, popovers and alerts, all driven by state and deep-linkable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;SwiftUI Navigation&#39;s tools were motivated and designed over the course of many episodes on &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt;, a video series exploring functional programming and the Swift language, hosted by &lt;a href=&#34;https://twitter.com/mbrandonw&#34;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can watch all of the episodes &lt;a href=&#34;https://www.pointfree.co/collections/swiftui/navigation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.pointfree.co/collections/swiftui/navigation&#34;&gt; &lt;img alt=&#34;video poster image&#34; src=&#34;https://d3rccdn33rt8ze.cloudfront.net/episodes/0166.jpeg&#34; width=&#34;600&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can add SwiftUI Navigation to an Xcode project by adding it as a package dependency.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swiftui-navigation&#34;&gt;https://github.com/pointfreeco/swiftui-navigation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you want to use SwiftUI Navigation in a &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;SwiftPM&lt;/a&gt; project, it&#39;s as simple as adding it to a &lt;code&gt;dependencies&lt;/code&gt; clause in your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(url: &#34;https://github.com/pointfreeco/swiftui-navigation&#34;, from: &#34;0.1.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The latest documentation for the SwiftUI Navigation APIs is available &lt;a href=&#34;https://pointfreeco.github.io/swiftui-navigation/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swiftui-navigation/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>duckduckgo/iOS</title>
    <updated>2022-08-02T01:56:46Z</updated>
    <id>tag:github.com,2022-08-02:/duckduckgo/iOS</id>
    <link href="https://github.com/duckduckgo/iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DuckDuckGo iOS Application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DuckDuckGo iOS&lt;/h1&gt; &#xA;&lt;p&gt;We are excited to engage the community in development!&lt;/p&gt; &#xA;&lt;h2&gt;We are hiring!&lt;/h2&gt; &#xA;&lt;p&gt;DuckDuckGo is growing fast and we continue to expand our fully distributed team. We embrace diverse perspectives, and seek out passionate, self-motivated people, committed to our shared vision of raising the standard of trust online. If you are a senior software engineer capable in either iOS or Android, visit our &lt;a href=&#34;https://duckduckgo.com/hiring/#open&#34;&gt;careers&lt;/a&gt; page to find out more about our openings!&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Submodules&lt;/h3&gt; &#xA;&lt;p&gt;We use submodules, so you will need to bring them into the project in order to build and run it:&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Developer details&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re not part of the DuckDuckGo team, you should provide your Apple developer account id, app id, and group id prefix in an &lt;code&gt;ExternalDeveloper.xcconfig&lt;/code&gt; file. To do that:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cp Configuration/DuckDuckGoDeveloper.xcconfig Configuration/ExternalDeveloper.xcconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;Configuration/ExternalDeveloper.xcconfig&lt;/code&gt; and change the values of all fields&lt;/li&gt; &#xA; &lt;li&gt;Clean and rebuild the project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;We use Swift Package Manager for dependency management, which shouldn&#39;t require any additional set up.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftLint&lt;/h3&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwifLint&lt;/a&gt; for enforcing Swift style and conventions, so you&#39;ll need to &lt;a href=&#34;https://github.com/realm/SwiftLint#installation&#34;&gt;install it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Fonts&lt;/h3&gt; &#xA;&lt;p&gt;We use Proxima Nova fonts which are proprietary and cannot be committed to source control, see &lt;a href=&#34;https://github.com/duckduckgo/iOS/tree/develop/fonts/licensed&#34;&gt;fonts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;h3&gt;Instruments&lt;/h3&gt; &#xA;&lt;p&gt;We have Custom Instruments tool to help visualize and track events that happen during runtime.&lt;/p&gt; &#xA;&lt;p&gt;In order to run it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build a Debug version and install it on Simulator/Device.&lt;/li&gt; &#xA; &lt;li&gt;Select Instruments target and run it on a Mac. A New instance of Instruments app will be run that has a grayed out icon indicating that it works in debug mode with custom instruments attached.&lt;/li&gt; &#xA; &lt;li&gt;Select &#39;DDG Trace&#39; template or set up a custom one by importing &#39;DDG Timeline&#39; instrument from Library.&lt;/li&gt; &#xA; &lt;li&gt;Start recording.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://help.apple.com/instruments/developer/mac/current/&#34;&gt;Instruments Developer Help&lt;/a&gt; for reference how to create custom instruments.&lt;/p&gt; &#xA;&lt;h2&gt;Terminology&lt;/h2&gt; &#xA;&lt;p&gt;We have taken steps to update our terminology and remove words with problematic racial connotations, most notably the change to &lt;code&gt;main&lt;/code&gt; branches, &lt;code&gt;allow lists&lt;/code&gt;, and &lt;code&gt;blocklists&lt;/code&gt;. Closed issues or PRs may contain deprecated terminology that should not be used going forward.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/duckduckgo/iOS/develop/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Discuss&lt;/h2&gt; &#xA;&lt;p&gt;Contact us at &lt;a href=&#34;https://duckduckgo.com/feedback&#34;&gt;https://duckduckgo.com/feedback&lt;/a&gt; if you have feedback, questions or want to chat. You can also use the feedback form embedded within our Mobile App - to do so please navigate to Settings and select &#34;Send Feedback&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;DuckDuckGo is distributed under the Apache 2.0 &lt;a href=&#34;https://github.com/duckduckgo/ios/raw/master/LICENSE.md&#34;&gt;license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bitgapp/eqMac</title>
    <updated>2022-08-02T01:56:46Z</updated>
    <id>tag:github.com,2022-08-02:/bitgapp/eqMac</id>
    <link href="https://github.com/bitgapp/eqMac" rel="alternate"></link>
    <summary type="html">&lt;p&gt;macOS System-wide Audio Equalizer &amp; Volume Mixer üéß&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;512&#34; src=&#34;https://github.com/bitgapp/eqMac/raw/master/assets/logos/promo-dark.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;512&#34; src=&#34;https://github.com/bitgapp/eqMac/raw/master/assets/screenshots/main.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.eqmac.app&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-black?style=flat&amp;amp;logo=discord&#34; alt=&#34;discord chat&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Notice: Currently the code in this repository corresponds to v1.3.2 of eqMac and all the newer releases are done on a private fork. I&#39;m still unsure if new releases will be open sourced, mostly because I don&#39;t see the benefit of open sourcing the app anymore. Change my mind.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Current&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System audio Source&lt;/li&gt; &#xA; &lt;li&gt;Volume Booster&lt;/li&gt; &#xA; &lt;li&gt;HDMI Volume Support&lt;/li&gt; &#xA; &lt;li&gt;Volume Balance support for all devices (including HDMI)&lt;/li&gt; &#xA; &lt;li&gt;Basic EQ - Bass, Mids, Treble control&lt;/li&gt; &#xA; &lt;li&gt;Advanced EQ - Fixed 10 bands&lt;/li&gt; &#xA; &lt;li&gt;Expert EQ* - Unlimited bands, fully customizable (Filter Type, Frequency, Gain, Bandwidth)&lt;/li&gt; &#xA; &lt;li&gt;Spectrum analyzer*&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jaakkopasanen/AutoEq?referrer=eqMac&amp;amp;referer=eqMac&amp;amp;utm_source=eqMac&#34;&gt;AutoEQ&lt;/a&gt; Integration*&lt;/li&gt; &#xA; &lt;li&gt;Reverb* - Spatial audio enhancement&lt;/li&gt; &#xA; &lt;li&gt;Volume Mixer* - Apply different volume levels per each application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*Not Open Sourced&lt;/p&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;Idea is to become the ultimate Audio toolbox for macOS (some features might not be open sourced)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Input Audio Source - Apply effects to any device: guitar, microphone etc.&lt;/li&gt; &#xA; &lt;li&gt;Virtual Output - Export the Adjusted audio to any application&lt;/li&gt; &#xA; &lt;li&gt;Custom UI - Fully customize the look and feel of eqMac by changing the User Interface Colors, Feature visibility and arrangement.&lt;/li&gt; &#xA; &lt;li&gt;Hotkeys - Control eqMac with Keyboard Shortcuts&lt;/li&gt; &#xA; &lt;li&gt;Recorder - save any audio playback (System, Input device, File)&lt;/li&gt; &#xA; &lt;li&gt;Remote control from your phone&lt;/li&gt; &#xA; &lt;li&gt;Separate L/R Channel EQ - Fix hearing impairements&lt;/li&gt; &#xA; &lt;li&gt;API - Control all aspects of eqMac through a WebSocket API. Works with any programming language that supports WebSockets.&lt;/li&gt; &#xA; &lt;li&gt;File playback and rendering - Apply effects to audio files and instantly render them&lt;/li&gt; &#xA; &lt;li&gt;and more...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://eqmac.app/#coming-soon&#34;&gt;Vote on the Features you want to see sooner&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;User support&lt;/h2&gt; &#xA;&lt;p&gt;This project is heavily reliant on the whole community helping each other out. If you have an issue with eqMac please go through &lt;a href=&#34;https://github.com/bitgapp/eqMac/issues&#34;&gt;Issues&lt;/a&gt; to see if it&#39;s already being discussed, if not create a new one. Also you can &lt;a href=&#34;https://discord.eqmac.app&#34;&gt;join our Discord&lt;/a&gt;, I&#39;m there all the time and I like to chat with people.&lt;/p&gt; &#xA;&lt;h2&gt;Technology&lt;/h2&gt; &#xA;&lt;p&gt;eqMac was built using these technologies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitgapp/eqMac/tree/master/native/driver&#34;&gt;Driver&lt;/a&gt; - System Audio loopback/passthrough device based on &lt;a href=&#34;https://developer.apple.com/documentation/coreaudio/creating_an_audio_server_driver_plug-in&#34;&gt;Apple&#39;s Null Audio Server Driver Plug-in&lt;/a&gt; example. One of the first Examples of a macOS System Capture drivers written in Swift. The driver grabs the system audio stream and sends it to the input channels (similar to &lt;a href=&#34;https://github.com/ExistentialAudio/BlackHole&#34;&gt;BlackHole&lt;/a&gt;). eqMac can grab this stream, process it and send to the appropriate audio device. The driver runs in User space instead of Kernel like the previous drivers (i.e SoundFlower), which means it&#39;s much more secure and stable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitgapp/eqMac/tree/master/native/app&#34;&gt;App&lt;/a&gt; - Native backend to the whole app. Responsible for audio processing, filesystem access, window management, API and general lifecycle of eqMac. Written in Swift and uses Apple&#39;s more modern &lt;a href=&#34;https://developer.apple.com/documentation/avfoundation/avaudioengine&#34;&gt;AVAudioEngine API&lt;/a&gt;, unlike the previous version that used a deprecated AUGraph API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitgapp/eqMac/tree/master/ui&#34;&gt;UI&lt;/a&gt; - Web based user interface that is hosted remotely and thus allows for over the air updates &amp;amp; bug fixes. Built with &lt;a href=&#34;https://angular.io/&#34;&gt;Angular&lt;/a&gt; + &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; and is cached for offline availability.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;At the moment eqMac is going through a major rewrite and it&#39;s hard to coordinate the development of big features. But bug fixes, performance optimizations and refactoring PR&#39;s are welcomed! Please create an issue on GitHub (please check if your issue is already being discussed) or &lt;a href=&#34;https://discord.eqmac.app&#34;&gt;join our Discord&lt;/a&gt; to discuss. Once a piece of work has been agreed - fork, build, debug, fix, merge and create a Pull Request to get your work merged in :) Check the documentation below to understand how to start eqMac debug process from Xcode&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Fork the repository, then run these commands in Terminal.app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/YOUR_USERNAME/eqMac.git&#xA;cd eqMac/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Native app + driver&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://apps.apple.com/us/app/xcode/id497799835?mt=12&#34;&gt;Xcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; by &lt;code&gt;sudo gem install cocoapods&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Building and running the App&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go into the native/app directory from root of the repo by: &lt;code&gt;cd native/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Cocoapod dependencies: &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the Xcode workspace: &lt;code&gt;open eqMac.xcworkspace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launch eqMac in debug mode by running the &lt;strong&gt;App - Debug&lt;/strong&gt; Scheme:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;512&#34; src=&#34;https://user-images.githubusercontent.com/8472525/83069640-279c1100-a062-11ea-85a7-45aa5253771b.png&#34;&gt; &#xA;&lt;h3&gt;Web User Interface&lt;/h3&gt; &#xA;&lt;p&gt;You don&#39;t need to run the UI code locally to debug just the Swift side of the app, unless you want to debug the UI code :) If you want to run the web based User Interface locally then you need to follow these steps to make that happen:&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; LTS version preferrably using &lt;a href=&#34;https://github.com/nvm-sh/nvm#installing-and-updating&#34;&gt;NVM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://classic.yarnpkg.com/en/&#34;&gt;Yarn&lt;/a&gt; v1 globally: &lt;code&gt;npm i -g yarn&lt;/code&gt; (this is needed because the project uses &lt;a href=&#34;https://classic.yarnpkg.com/en/docs/workspaces/&#34;&gt;Yarn Workspaces&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Building and running the Web UI&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn&lt;/code&gt; from the root directory of the Monorepo&lt;/li&gt; &#xA; &lt;li&gt;Go into the ui/ directory by &lt;code&gt;cd ui/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start local development server with &lt;code&gt;yarn start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nodeful&#34;&gt;@nodeful&lt;/a&gt; - Creator and Developer of eqMac&lt;/p&gt; &#xA;&lt;p&gt;Apple Inc. - For open sourcing this &lt;a href=&#34;https://developer.apple.com/documentation/coreaudio/creating_an_audio_server_driver_plug-in&#34;&gt;HAL Driver Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/titanicbobo&#34;&gt;@titanicbobo&lt;/a&gt; - For the &lt;a href=&#34;https://github.com/bitgapp/eqMac/raw/master/assets/icon/icon.svg&#34;&gt;Big Sur icon design&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/0bmxa&#34;&gt;Max Heim&lt;/a&gt; - For his research and work on creating the first Swift based Audio Server Plug-in Driver - &lt;a href=&#34;https://github.com/0bmxa/Pancake&#34;&gt;Pancake&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>