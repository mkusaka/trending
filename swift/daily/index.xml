<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-22T01:56:28Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aheze/Popovers</title>
    <updated>2022-07-22T01:56:28Z</updated>
    <id>tag:github.com,2022-07-22:/aheze/Popovers</id>
    <link href="https://github.com/aheze/Popovers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library to present popovers. Simple, modern, and highly customizable. Not boring!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/Header.png&#34; alt=&#34;Header Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Popovers&lt;/h1&gt; &#xA;&lt;p&gt;A library to present popovers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Present &lt;strong&gt;any&lt;/strong&gt; view above your app&#39;s main content.&lt;/li&gt; &#xA; &lt;li&gt;Attach to source views or use picture-in-picture positioning.&lt;/li&gt; &#xA; &lt;li&gt;Display multiple popovers at the same time with smooth transitions.&lt;/li&gt; &#xA; &lt;li&gt;Supports SwiftUI, UIKit, and multitasking windows on iPadOS.&lt;/li&gt; &#xA; &lt;li&gt;Highly customizable API that&#39;s super simple ‚Äî just add &lt;code&gt;.popover&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Drop-in replacement for iOS 14&#39;s &lt;code&gt;Menu&lt;/code&gt; that works on iOS 13.&lt;/li&gt; &#xA; &lt;li&gt;SwiftUI-based core for a lightweight structure. 0 dependencies.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s 2022 ‚Äî about time that popovers got interesting!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showroom&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; Alert &lt;/td&gt; &#xA;   &lt;td&gt; Color &lt;/td&gt; &#xA;   &lt;td&gt; Menu &lt;/td&gt; &#xA;   &lt;td&gt; Tip &lt;/td&gt; &#xA;   &lt;td&gt; Standard &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Alert.gif&#34; alt=&#34;Alert&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Color.gif&#34; alt=&#34;Color&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Menu.gif&#34; alt=&#34;Menu&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Tip.gif&#34; alt=&#34;Tip&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Standard.gif&#34; alt=&#34;Standard&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; Tutorial &lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; Picture-in-Picture &lt;/td&gt; &#xA;   &lt;td&gt; Notification &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Tutorial.gif&#34; alt=&#34;Tutorial&#34;&gt; &lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/PIP.gif&#34; alt=&#34;Picture in Picture&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Notification.gif&#34; alt=&#34;Notification&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;I wrote the example app with Swift Playgrounds 4, so you can run it right on your iPad. If you&#39;re using a Mac, download the Xcode version. &lt;a href=&#34;https://github.com/aheze/Popovers/raw/main/Examples/PopoversPlaygroundsApp.swiftpm.zip&#34;&gt;Download for Swift Playgrounds 4&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/aheze/Popovers/raw/main/Examples/PopoversXcodeApp.zip&#34;&gt;Download for Xcode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/ExampleApp.png&#34; alt=&#34;Example app&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requires iOS 13+. Popovers can be installed through the &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app&#34;&gt;Swift Package Manager&lt;/a&gt; (recommended) or &lt;a href=&#34;https://cocoapods.org/&#34;&gt;Cocoapods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; Swift Package Manager &lt;/strong&gt; &lt;br&gt; Add the Package URL: &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; Cocoapods &lt;/strong&gt; &lt;br&gt; Add this to your Podfile: &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code&gt;https://github.com/aheze/Popovers&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code&gt;pod &#39;Popovers&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To present a popover in SwiftUI, use the &lt;code&gt;.popover(present:attributes:view)&lt;/code&gt; modifier. By default, the popover uses its parent view as the source frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import Popovers&#xA;&#xA;struct ContentView: View {&#xA;    @State var present = false&#xA;    &#xA;    var body: some View {&#xA;        Button(&#34;Present popover!&#34;) {&#xA;            present = true&#xA;        }&#xA;        .popover(present: $present) { /// here!&#xA;            Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;                .padding()&#xA;                .foregroundColor(.white)&#xA;                .background(.blue)&#xA;                .cornerRadius(16)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In UIKit, create a &lt;code&gt;Popover&lt;/code&gt; instance, then present with &lt;code&gt;UIViewController.present(_:)&lt;/code&gt;. You should also set the source frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import Popovers&#xA;&#xA;class ViewController: UIViewController {&#xA;    @IBOutlet weak var button: UIButton!&#xA;    @IBAction func buttonPressed(_ sender: Any) {&#xA;        var popover = Popover { PopoverView() }&#xA;        popover.attributes.sourceFrame = { [weak button] in&#xA;            button.windowFrame()&#xA;        }&#xA;        &#xA;        present(popover) /// here!&#xA;    }&#xA;}&#xA;&#xA;struct PopoverView: View {&#xA;    var body: some View {&#xA;        Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;            .padding()&#xA;            .foregroundColor(.white)&#xA;            .background(.blue)&#xA;            .cornerRadius(16)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/UsagePopover.png&#34; width=&#34;300&#34; alt=&#34;Button &#39;Present popover!&#39; with a popover underneath.&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#tag--string&#34;&gt;üîñ&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#position--position&#34;&gt;üí†&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#source-frame-----cgrect&#34;&gt;‚¨ú&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#source-frame-inset--uiedgeinsets&#34;&gt;üî≤&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#screen-edge-padding--uiedgeinsets&#34;&gt;‚èπ&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#presentation--presentation&#34;&gt;üü©&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#dismissal--dismissal&#34;&gt;üü•&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#rubber-banding-mode--rubberbandingmode&#34;&gt;üéæ&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#blocks-background-touches--bool&#34;&gt;üõë&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#accessibility--accessibility--v120&#34;&gt;üëì&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#on-tap-outside-----void&#34;&gt;üëâ&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#on-dismiss-----void&#34;&gt;üéà&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#on-context-change--context---void&#34;&gt;üî∞&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Customize popovers through the &lt;code&gt;Attributes&lt;/code&gt; struct. Pretty much everything is customizable, including positioning, animations, and dismissal behavior.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; SwiftUI &lt;/strong&gt; &lt;br&gt; Configure in the &lt;code&gt;attributes&lt;/code&gt; parameter. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; UIKit &lt;/strong&gt; &lt;br&gt; Modify the &lt;code&gt;attributes&lt;/code&gt; property. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.popover(&#xA;    present: $present,&#xA;    attributes: {&#xA;        $0.position = .absolute(&#xA;            originAnchor: .bottom,&#xA;            popoverAnchor: .topLeft&#xA;        )&#xA;    }&#xA;) {&#xA;    Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var popover = Popover {&#xA;    Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;}&#xA;&#xA;popover.attributes.position = .absolute(&#xA;    originAnchor: .bottom,&#xA;    popoverAnchor: .topLeft&#xA;)&#xA;&#xA;present(popover)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;üîñ‚ÄÑTag ‚Ä¢ &lt;code&gt;AnyHashable?&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Tag popovers to access them later from anywhere. This is useful for updating existing popovers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Set the tag.&#xA;$0.tag = &#34;Your Tag&#34;&#xA;&#xA;/// Access it later.&#xA;let popover = popover(tagged: &#34;Your Tag&#34;) /// Where `self` is a `UIView` or `UIViewController`.&#xA;&#xA;/// If inside a SwiftUI View, use a `WindowReader`:&#xA;WindowReader { window in&#xA;    let popover = window.popover(tagged: &#34;Your Tag&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When you use the &lt;code&gt;.popover(selection:tag:attributes:view:)&lt;/code&gt; modifier, this &lt;code&gt;tag&lt;/code&gt; is automatically set to what you provide in the parameter.&lt;/p&gt; &#xA;&lt;h3&gt;üí†‚ÄÑPosition ‚Ä¢ &lt;code&gt;Position&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The popover&#39;s position can either be &lt;code&gt;.absolute&lt;/code&gt; (attached to a view) or &lt;code&gt;.relative&lt;/code&gt; (picture-in-picture). The enum&#39;s associated value additionally configures which sides and corners are used.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Anchor&lt;/code&gt;s represent sides and corners.&lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;.absolute&lt;/code&gt;, provide the origin anchor and popover anchor.&lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;.relative&lt;/code&gt;, provide the popover anchors. If there&#39;s multiple, the user will be able to drag between them like a PIP.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Anchor Reference&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;.absolute(originAnchor: .bottom, popoverAnchor: .topLeft)&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;.relative(popoverAnchors: [.right])&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/Anchors.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/Absolute.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/Relative.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;‚¨ú‚ÄÑSource Frame ‚Ä¢ &lt;code&gt;(() -&amp;gt; CGRect)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is the frame that the popover attaches to or is placed within, depending on its position. This must be in global window coordinates. Because frames are can change so often, this property is a closure. Whenever the device rotates or some other bounds update happens, the closure will be called.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; SwiftUI &lt;/strong&gt; &lt;br&gt; By default, the source frame is automatically set to the parent view. Setting this will override it. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; UIKit &lt;/strong&gt; &lt;br&gt; It&#39;s highly recommended to provide a source frame, otherwise the popover will appear in the top-left of the screen. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;$0.sourceFrame = {&#xA;    /** some CGRect here */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt; /// use `weak` to prevent a retain cycle&#xA;attributes.sourceFrame = { [weak button] in&#xA;    button.windowFrame()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;üî≤‚ÄÑSource Frame Inset ‚Ä¢ &lt;code&gt;UIEdgeInsets&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Edge insets to apply to the source frame. Positive values inset the frame, negative values expand it.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Absolute&lt;/th&gt; &#xA;   &lt;th&gt;Relative&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/SourceFrameInsetAbsolute.png&#34; alt=&#34;Source view has padding around it, so the popover is offset down.&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/SourceFrameInsetRelative.png&#34; alt=&#34;Source view is inset, so the popover is brought more towards the center of the screen.&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;‚èπ‚ÄÑScreen Edge Padding ‚Ä¢ &lt;code&gt;UIEdgeInsets&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Global insets for all popovers to prevent them from overflowing off the screen. Kind of like a safe area. Default value is &lt;code&gt;UIEdgeInsets(top: 16, left: 16, bottom: 16, right: 16)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üü©‚ÄÑPresentation ‚Ä¢ &lt;code&gt;Presentation&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This property stores the animation and transition that&#39;s applied when the popover appears.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Default values:&#xA;$0.presentation.animation = .easeInOut&#xA;$0.presentation.transition = .opacity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üü•‚ÄÑDismissal ‚Ä¢ &lt;code&gt;Dismissal&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This property stores the popover&#39;s dismissal behavior. There&#39;s a couple sub-properties here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Same thing as `Presentation`.&#xA;$0.dismissal.animation = .easeInOut&#xA;$0.dismissal.transition = .opacity&#xA;&#xA;/// Advanced stuff! Here&#39;s their default values:&#xA;$0.dismissal.mode = .tapOutside&#xA;$0.dismissal.tapOutsideIncludesOtherPopovers = false&#xA;$0.dismissal.excludedFrames = { [] }&#xA;$0.dismissal.dragMovesPopoverOffScreen = true&#xA;$0.dismissal.dragDismissalProximity = CGFloat(0.25)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mode:&lt;/strong&gt; Configure how the popover should auto-dismiss. You can have multiple at the same time!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.tapOutside&lt;/code&gt; - dismiss the popover when the user taps outside it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.dragDown&lt;/code&gt; - dismiss the popover when the user drags it down.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.dragUp&lt;/code&gt; - dismiss the popover when the user drags it up.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.none&lt;/code&gt; - don&#39;t automatically dismiss the popover.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tap Outside Includes Other Popovers:&lt;/strong&gt; Only applies when &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;.tapOutside&lt;/code&gt;. If this is enabled, the popover will be dismissed when the user taps outside, &lt;strong&gt;even when another presented popover is what&#39;s tapped&lt;/strong&gt;. Normally when you tap another popover that&#39;s presented, the current one will not dismiss.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Excluded Frames:&lt;/strong&gt; Only applies when &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;.tapOutside&lt;/code&gt;. When the user taps outside the popover, but the tap lands on one of these frames, the popover will stay presented. If you want multiple popovers, you should set the source frames of your other popovers as the excluded frames.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Set one popover&#39;s source frame as the other&#39;s excluded frame.&#xA;/// This prevents the the current popover from being dismissed before animating to the other one.&#xA;&#xA;let popover1 = Popover { Text(&#34;Hello&#34;) }&#xA;popover1.attributes.sourceFrame = { [weak button1] in button1.windowFrame() }&#xA;popover1.attributes.dismissal.excludedFrames = { [weak button2] in [ button2.windowFrame() ] }&#xA;&#xA;let popover2 = Popover { Text(&#34;Hello&#34;) }&#xA;popover2.attributes.sourceFrame = { [weak button2] in button2.windowFrame() }&#xA;popover2.attributes.dismissal.excludedFrames = { [weak button1] in [ button1.windowFrame() ] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Drag Moves Popover Off Screen:&lt;/strong&gt; Only applies when &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;.dragDown&lt;/code&gt; or &lt;code&gt;.dragUp&lt;/code&gt;. If this is enabled, the popover will continue moving off the screen after the user drags.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Drag Dismissal Proximity:&lt;/strong&gt; Only applies when &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;.dragDown&lt;/code&gt; or &lt;code&gt;.dragUp&lt;/code&gt;. Represents the point on the screen that the drag must reach in order to auto-dismiss. This property is multiplied by the screen&#39;s height.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/DragDismissalProximity.png&#34; width=&#34;300&#34; alt=&#34;Diagram with the top 25% of the screen highlighted in blue.&#34;&gt; &#xA;&lt;h3&gt;üéæ‚ÄÑRubber Banding Mode ‚Ä¢ &lt;code&gt;RubberBandingMode&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Configures which axes the popover can &#34;rubber-band&#34; on when dragged. The default is &lt;code&gt;[.xAxis, .yAxis]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.xAxis&lt;/code&gt; - enable rubber banding on the x-axis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.yAxis&lt;/code&gt; - enable rubber banding on the y-axis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.none&lt;/code&gt; - disable rubber banding.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üõë‚ÄÑBlocks Background Touches ‚Ä¢ &lt;code&gt;Bool&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Set this to true to prevent underlying views from being pressed.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/BlocksBackgroundTouches.png&#34; width=&#34;300&#34; alt=&#34;Popover overlaid over some buttons. Tapping on the buttons has no effect.&#34;&gt; &#xA;&lt;h3&gt;üëì‚ÄÑAccessibility ‚Ä¢ &lt;code&gt;Accessibility&lt;/code&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/aheze/Popovers/releases/tag/1.2.0&#34;&gt;&lt;em&gt;&lt;code&gt;v1.2.0&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Popovers is fully accessible! The &lt;code&gt;Accessibility&lt;/code&gt; struct provides additional options for how VoiceOver should read out content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Default values:&#xA;$0.accessibility.shiftFocus = true&#xA;$0.accessibility.dismissButtonLabel = defaultDismissButtonLabel /// An X icon wrapped in `AnyView?`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shift Focus:&lt;/strong&gt; If enabled, VoiceOver will focus the popover as soon as it&#39;s presented.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dismiss Button Label:&lt;/strong&gt; A button next to the popover that appears when VoiceOver is on. By default, this is an &lt;kbd&gt;X&lt;/kbd&gt; circle.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/Accessibility.png&#34; width=&#34;300&#34; alt=&#34;VoiceOver highlights the popover, which has a X button next to id.&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Tip: You can also use the accessibility escape gesture (a 2-fingered Z-shape swipe) to dismiss all popovers.&lt;/p&gt; &#xA;&lt;h3&gt;üëâ‚ÄÑOn Tap Outside ‚Ä¢ &lt;code&gt;(() -&amp;gt; Void)?&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A closure that&#39;s called whenever the user taps outside the popover.&lt;/p&gt; &#xA;&lt;h3&gt;üéà‚ÄÑOn Dismiss ‚Ä¢ &lt;code&gt;(() -&amp;gt; Void)?&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A closure that&#39;s called when the popover is dismissed.&lt;/p&gt; &#xA;&lt;h3&gt;üî∞‚ÄÑOn Context Change ‚Ä¢ &lt;code&gt;((Context) -&amp;gt; Void)?&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A closure that&#39;s called whenever the context changed. The context contains the popover&#39;s attributes, current frame, and other visible traits.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Utilities&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#menus&#34;&gt;üìò&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#animating-between-popovers&#34;&gt;üß©&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#background&#34;&gt;üåÉ&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#popover-reader&#34;&gt;üìñ&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#frame-tags&#34;&gt;üè∑&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#templates&#34;&gt;üìÑ&lt;/a&gt;‚ÄÑ&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Popovers comes with some features to make your life easier.&lt;/p&gt; &#xA;&lt;h3&gt;üìò‚ÄÑMenus&lt;/h3&gt; &#xA;&lt;p&gt;New in &lt;a href=&#34;https://github.com/aheze/Popovers/releases/tag/1.3.0&#34;&gt;v1.3.0&lt;/a&gt;! The template &lt;code&gt;Menu&lt;/code&gt; looks and behaves pretty much exactly like the system menu, but also works on iOS 13. It&#39;s also extremely customizable with support for manual presentation and custom views.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/MenuComparison.gif&#34; width=&#34;500&#34; alt=&#34;The system menu and Popovers&#39; custom menu, side by side&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SwiftUI (Basic)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    var body: some View {&#xA;        Templates.Menu {&#xA;            Templates.MenuButton(title: &#34;Button 1&#34;, systemImage: &#34;1.circle.fill&#34;) { print(&#34;Button 1 pressed&#34;) }&#xA;            Templates.MenuButton(title: &#34;Button 2&#34;, systemImage: &#34;2.circle.fill&#34;) { print(&#34;Button 2 pressed&#34;) }&#xA;        } label: { fade in&#xA;            Text(&#34;Present Menu!&#34;)&#xA;                .opacity(fade ? 0.5 : 1)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SwiftUI (Customized)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Templates.Menu(&#xA;    configuration: {&#xA;        $0.width = 360&#xA;        $0.backgroundColor = .blue.opacity(0.2)&#xA;    }&#xA;) {&#xA;    Text(&#34;Hi, I&#39;m a menu!&#34;)&#xA;        .padding()&#xA;&#xA;    Templates.MenuDivider()&#xA;&#xA;    Templates.MenuItem {&#xA;        print(&#34;Item tapped&#34;)&#xA;    } label: { fade in&#xA;        Color.clear.overlay(&#xA;            AsyncImage(url: URL(string: &#34;https://getfind.app/image.png&#34;)) {&#xA;                $0.resizable().aspectRatio(contentMode: .fill)&#xA;            } placeholder: {&#xA;                Color.clear&#xA;            }&#xA;        )&#xA;        .frame(height: 180)&#xA;        .clipped()&#xA;        .opacity(fade ? 0.5 : 1)&#xA;    }&#xA;&#xA;} label: { fade in&#xA;    Text(&#34;Present Menu!&#34;)&#xA;        .opacity(fade ? 0.5 : 1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SwiftUI (Manual Presentation)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    @State var present = false&#xA;    var body: some View {&#xA;        VStack {&#xA;            Toggle(&#34;Activate&#34;, isOn: $present)&#xA;                .padding()&#xA;                .background(.regularMaterial)&#xA;                .cornerRadius(12)&#xA;                .padding()&#xA;            &#xA;            Templates.Menu(present: $present) {&#xA;                Templates.MenuButton(title: &#34;Button 1&#34;, systemImage: &#34;1.circle.fill&#34;) { print(&#34;Button 1 pressed&#34;) }&#xA;                Templates.MenuButton(title: &#34;Button 2&#34;, systemImage: &#34;2.circle.fill&#34;) { print(&#34;Button 2 pressed&#34;) }&#xA;            } label: { fade in&#xA;                Text(&#34;Present Menu!&#34;)&#xA;                    .opacity(fade ? 0.5 : 1)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;UIKit (Basic)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController {&#xA;    @IBOutlet var label: UILabel!&#xA;&#xA;    lazy var menu = Templates.UIKitMenu(sourceView: label) {&#xA;        Templates.MenuButton(title: &#34;Button 1&#34;, systemImage: &#34;1.circle.fill&#34;) { print(&#34;Button 1 pressed&#34;) }&#xA;        Templates.MenuButton(title: &#34;Button 2&#34;, systemImage: &#34;2.circle.fill&#34;) { print(&#34;Button 2 pressed&#34;) }&#xA;    } fadeLabel: { [weak self] fade in&#xA;        self?.label.alpha = fade ? 0.5 : 1&#xA;    }&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        _ = menu /// Create the menu.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;UIKit (Customized)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController {&#xA;    @IBOutlet var label: UILabel!&#xA;&#xA;    lazy var menu = Templates.UIKitMenu(&#xA;        sourceView: label,&#xA;        configuration: {&#xA;            $0.width = 360&#xA;            $0.backgroundColor = .blue.opacity(0.2)&#xA;        }&#xA;    ) {&#xA;        Text(&#34;Hi, I&#39;m a menu!&#34;)&#xA;            .padding()&#xA;&#xA;        Templates.MenuDivider()&#xA;&#xA;        Templates.MenuItem {&#xA;            print(&#34;Item tapped&#34;)&#xA;        } label: { fade in&#xA;            Color.clear.overlay(&#xA;                AsyncImage(url: URL(string: &#34;https://getfind.app/image.png&#34;)) {&#xA;                    $0.resizable().aspectRatio(contentMode: .fill)&#xA;                } placeholder: {&#xA;                    Color.clear&#xA;                }&#xA;            )&#xA;            .frame(height: 180)&#xA;            .clipped()&#xA;            .opacity(fade ? 0.5 : 1)&#xA;        }&#xA;    } fadeLabel: { [weak self] fade in&#xA;        UIView.animate(withDuration: 0.15) {&#xA;            self?.label.alpha = fade ? 0.5 : 1&#xA;        }&#xA;    }&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        _ = menu /// Create the menu.&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;UIKit (Manual Presentation)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController {&#xA;    /// ...&#xA;&#xA;    @IBAction func switchPressed(_ sender: UISwitch) {&#xA;        if menu.isPresented {&#xA;            menu.dismiss()&#xA;        } else {&#xA;            menu.present()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Basic&lt;/th&gt; &#xA;   &lt;th&gt;Customized&lt;/th&gt; &#xA;   &lt;th&gt;Manual Presentation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/MenuBasic.png&#34; alt=&#34;Menu with 2 buttons&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/MenuCustomized.png&#34; alt=&#34;Menu with image and divider&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/MenuManual.png&#34; alt=&#34;Manually activate the menu with a toggle switch&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;üß©‚ÄÑAnimating Between Popovers&lt;/h3&gt; &#xA;&lt;p&gt;As long as the view structure is the same, you can smoothly transition from one popover to another.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; SwiftUI &lt;/strong&gt; &lt;br&gt; Use the &lt;code&gt;.popover(selection:tag:attributes:view:)&lt;/code&gt; modifier. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; UIKit &lt;/strong&gt; &lt;br&gt; Get the existing popover using &lt;code&gt;UIResponder.popover(tagged:)&lt;/code&gt;, then call &lt;code&gt;UIResponder.replace(_:with:)&lt;/code&gt;. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    @State var selection: String?&#xA;    &#xA;    var body: some View {&#xA;        HStack {&#xA;            Button(&#34;Present First Popover&#34;) { selection = &#34;1&#34; }&#xA;            .popover(selection: $selection, tag: &#34;1&#34;) {&#xA;&#xA;                /// Will be presented when selection == &#34;1&#34;.&#xA;                Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;                    .background(.blue)&#xA;            }&#xA;            &#xA;            Button(&#34;Present Second Popover&#34;) { selection = &#34;2&#34; }&#xA;            .popover(selection: $selection, tag: &#34;2&#34;) {&#xA;&#xA;                /// Will be presented when selection == &#34;2&#34;.&#xA;                Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;                    .background(.green)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@IBAction func button1Pressed(_ sender: Any) {&#xA;    var newPopover = Popover { Text(&#34;Hi, I&#39;m a popover.&#34;).background(.blue) }&#xA;    newPopover.attributes.sourceFrame = { [weak button1] in button1.windowFrame() }&#xA;    newPopover.attributes.dismissal.excludedFrames = { [weak button2] in [button2.windowFrame()] }&#xA;    newPopover.attributes.tag = &#34;Popover 1&#34;&#xA;    &#xA;    if let oldPopover = popover(tagged: &#34;Popover 2&#34;) {&#xA;        replace(oldPopover, with: newPopover)&#xA;    } else {&#xA;        present(newPopover) /// Present if the old popover doesn&#39;t exist.&#xA;    }&#xA;}&#xA;@IBAction func button2Pressed(_ sender: Any) {&#xA;    var newPopover = Popover { Text(&#34;Hi, I&#39;m a popover.&#34;).background(.green) }&#xA;    newPopover.attributes.sourceFrame = { [weak button2] in button2.windowFrame() }&#xA;    newPopover.attributes.dismissal.excludedFrames = { [weak button1] in [button1.windowFrame()] }&#xA;    newPopover.attributes.tag = &#34;Popover 2&#34;&#xA;    &#xA;    if let oldPopover = popover(tagged: &#34;Popover 1&#34;) {&#xA;        replace(oldPopover, with: newPopover)&#xA;    } else {&#xA;        present(newPopover)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/AnimatingBetweenPopovers.gif&#34; width=&#34;300&#34; alt=&#34;Smooth transition between popovers (from blue to green and back.&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;üåÉ‚ÄÑBackground&lt;/h3&gt; &#xA;&lt;p&gt;You can put anything in a popover&#39;s background.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; SwiftUI &lt;/strong&gt; &lt;br&gt; Use the &lt;code&gt;.popover(present:attributes:view:background:)&lt;/code&gt; modifier. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; UIKit &lt;/strong&gt; &lt;br&gt; Use the &lt;code&gt;Popover(attributes:view:background:)&lt;/code&gt; initializer. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.popover(present: $present) {&#xA;    PopoverView()&#xA;} background: { /// here!&#xA;    Color.green.opacity(0.5)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var popover = Popover {&#xA;    PopoverView()&#xA;} background: { /// here!&#xA;    Color.green.opacity(0.5)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/PopoverBackground.png&#34; width=&#34;200&#34; alt=&#34;Green background over the entire screen, but underneath the popover&#34;&gt; &#xA;&lt;h3&gt;üìñ‚ÄÑPopover Reader&lt;/h3&gt; &#xA;&lt;p&gt;This reads the popover&#39;s context, which contains its frame, window, attributes, and various other properties. It&#39;s kind of like &lt;a href=&#34;https://www.hackingwithswift.com/quick-start/swiftui/how-to-provide-relative-sizes-using-geometryreader&#34;&gt;&lt;code&gt;GeometryReader&lt;/code&gt;&lt;/a&gt;, but cooler. You can put it in the popover&#39;s view or its background.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.popover(present: $present) {&#xA;    PopoverView()&#xA;} background: {&#xA;    PopoverReader { context in&#xA;        Path {&#xA;            $0.move(to: context.frame.point(at: .bottom))&#xA;            $0.addLine(to: context.windowBounds.point(at: .bottom))&#xA;        }&#xA;        .stroke(Color.blue, lineWidth: 4)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/PopoverReader.gif&#34; width=&#34;200&#34; alt=&#34;Line connects the bottom of the popover with the bottom of the screen&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;üè∑‚ÄÑFrame Tags&lt;/h3&gt; &#xA;&lt;p&gt;Popovers includes a mechanism for tagging and reading SwiftUI view frames. You can use this to provide a popover&#39;s &lt;code&gt;sourceFrame&lt;/code&gt; or &lt;code&gt;excludedFrames&lt;/code&gt;. Also works great when combined with &lt;code&gt;PopoverReader&lt;/code&gt;, for connecting lines with anchor views.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;This is a view&#34;)&#xA;    .frameTag(&#34;Your Tag Name&#34;) /// Adds a tag inside the window.&#xA;&#xA;/// ...&#xA;&#xA;WindowReader { window in&#xA;    Text(&#34;Click me!&#34;)&#xA;    .popover(&#xA;        present: $present,&#xA;        attributes: {&#xA;            $0.sourceFrame = window.frameTagged(&#34;Your Tag Name&#34;) /// Retrieves a tag from the window.&#xA;        }&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üìÑ‚ÄÑTemplates&lt;/h3&gt; &#xA;&lt;p&gt;Get started quickly with some templates. All of them are inside &lt;a href=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Sources/Templates&#34;&gt;&lt;code&gt;Templates&lt;/code&gt;&lt;/a&gt; with example usage in the example app.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AlertButtonStyle&lt;/code&gt; - a button style resembling a system alert.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;VisualEffectView&lt;/code&gt; - lets you use UIKit blurs in SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Container&lt;/code&gt; - a wrapper view for the &lt;code&gt;BackgroundWithArrow&lt;/code&gt; shape.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shadow&lt;/code&gt; - an easier way to apply shadows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BackgroundWithArrow&lt;/code&gt; - a shape with an arrow that looks like the system popover.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CurveConnector&lt;/code&gt; - an animatable shape with endpoints that you can set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Menu&lt;/code&gt; - the system menu, but built from scratch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;h3&gt;State Re-Rendering&lt;/h3&gt; &#xA;&lt;p&gt;If you directly pass a variable down to the popover&#39;s view, it might not update. Instead, move the view into its own struct and pass down a &lt;code&gt;Binding&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; Yes &lt;/strong&gt; &lt;br&gt; The popover&#39;s view is in a separate struct, with &lt;code&gt;$string&lt;/code&gt; passed down. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; No &lt;/strong&gt; &lt;br&gt; The button is directly inside the &lt;code&gt;view&lt;/code&gt; parameter and receives &lt;code&gt;string&lt;/code&gt;. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    @State var present = false&#xA;    @State var string = &#34;Hello, I&#39;m a popover.&#34;&#xA;&#xA;    var body: some View {&#xA;        Button(&#34;Present popover!&#34;) { present = true }&#xA;        .popover(present: $present) {&#xA;            PopoverView(string: $string) /// Pass down a Binding ($).&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;/// Create a separate view to ensure that the button updates.&#xA;struct PopoverView: View {&#xA;    @Binding var string: String&#xA;&#xA;    var body: some View {&#xA;        Button(string) { string = &#34;The string changed.&#34; }&#xA;        .background(.mint)&#xA;        .cornerRadius(16)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    @State var present = false&#xA;    @State var string = &#34;Hello, I&#39;m a popover.&#34;&#xA;&#xA;    var body: some View {&#xA;        Button(&#34;Present popover!&#34;) {&#xA;            present = true&#xA;        }&#xA;        .popover(present: $present) {&#xA;&#xA;            /// Directly passing down the variable (without $) is unsupported.&#xA;            /// The button might not update.&#xA;            Button(string) { &#xA;                string = &#34;The string changed.&#34;&#xA;            }&#xA;            .background(.mint)&#xA;            .cornerRadius(16)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Supporting Multiple Screens ‚Ä¢ &lt;a href=&#34;https://github.com/aheze/Popovers/releases/tag/1.1.0&#34;&gt;&lt;em&gt;&lt;code&gt;v1.1.0&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Popovers comes with built-in support for multiple screens, but retrieving frame tags requires a reference to the hosting window. You can get this via &lt;code&gt;WindowReader&lt;/code&gt; or &lt;code&gt;PopoverReader&lt;/code&gt;&#39;s context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;WindowReader { window in &#xA;&#xA;}&#xA;&#xA;/// If inside a popover&#39;s `view` or `background`, use `PopoverReader` instead.&#xA;PopoverReader { context in&#xA;    let window = context.window&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Popover Hierarchy&lt;/h3&gt; &#xA;&lt;p&gt;Manage a popover&#39;s z-axis level by attaching &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/view/zindex(_:)&#34;&gt;&lt;code&gt;.zIndex(_:)&lt;/code&gt;&lt;/a&gt; to its view. A higher index will bring it forwards.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Author&lt;/h3&gt; &#xA;&lt;p&gt;Popovers is made by &lt;a href=&#34;https://github.com/aheze&#34;&gt;aheze&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;All contributions are welcome. Just &lt;a href=&#34;https://github.com/aheze/Popovers/fork&#34;&gt;fork&lt;/a&gt; the repo, then make a pull request.&lt;/p&gt; &#xA;&lt;h3&gt;Need Help?&lt;/h3&gt; &#xA;&lt;p&gt;Open an &lt;a href=&#34;https://github.com/aheze/Popovers/issues&#34;&gt;issue&lt;/a&gt; or join the &lt;a href=&#34;https://discord.com/invite/Pmq8fYcus2&#34;&gt;Discord server&lt;/a&gt;. You can also ping me on &lt;a href=&#34;https://twitter.com/aheze0&#34;&gt;Twitter&lt;/a&gt;. Or read the source code ‚Äî there&#39;s lots of comments.&lt;/p&gt; &#xA;&lt;h3&gt;Apps Using Popovers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://getfind.app/&#34;&gt;Find&lt;/a&gt; is an app that lets you find text in real life. Popovers is currently used for the search bar settings and the camera message view ‚Äî download to check it out!&lt;/p&gt; &#xA;&lt;a href=&#34;http://getfind.app&#34;&gt; &lt;img src=&#34;https://getfind.app/assets/SocialPreview.png&#34; height=&#34;300&#34; alt=&#34;Find App&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;If you have an app that uses Popovers, just make a PR or &lt;a href=&#34;https://twitter.com/aheze0&#34;&gt;message me&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2022 A. Zheng&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/7b2a5202040079bf91e27a5195d30e8ebd06dd06.svg?sanitize=true&#34; alt=&#34;Stats&#34; title=&#34;Stats&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scalessec/Toast-Swift</title>
    <updated>2022-07-22T01:56:28Z</updated>
    <id>tag:github.com,2022-07-22:/scalessec/Toast-Swift</id>
    <link href="https://github.com/scalessec/Toast-Swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift extension that adds toast notifications to the UIView object class.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Toast-Swift&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/scalessec/Toast-Swift&#34;&gt;&lt;img src=&#34;https://travis-ci.org/scalessec/Toast-Swift.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/Toast-Swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Toast-Swift.svg?sanitize=true&#34; alt=&#34;CocoaPods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Toast-Swift is a Swift extension that adds toast notifications to the &lt;code&gt;UIView&lt;/code&gt; object class. It is intended to be simple, lightweight, and easy to use. Most toast notifications can be triggered with a single line of code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Toast-Swift is a native Swift port of &lt;a href=&#34;https://github.com/scalessec/Toast&#34; title=&#34;Toast for iOS&#34;&gt;Toast for iOS&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/scalessec/Toast-Swift/master/toast_swift_screenshot.jpg&#34; alt=&#34;Toast-Swift Screenshots&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// basic usage&#xA;self.view.makeToast(&#34;This is a piece of toast&#34;)&#xA;&#xA;// toast with a specific duration and position&#xA;self.view.makeToast(&#34;This is a piece of toast&#34;, duration: 3.0, position: .top)&#xA;&#xA;// toast presented with multiple options and with a completion closure&#xA;self.view.makeToast(&#34;This is a piece of toast&#34;, duration: 2.0, point: CGPoint(x: 110.0, y: 110.0), title: &#34;Toast Title&#34;, image: UIImage(named: &#34;toast.png&#34;)) { didTap in&#xA;    if didTap {&#xA;        print(&#34;completion from tap&#34;)&#xA;    } else {&#xA;        print(&#34;completion without tap&#34;)&#xA;    }&#xA;}&#xA;&#xA;// display toast with an activity spinner&#xA;self.view.makeToastActivity(.center)&#xA;&#xA;// display any view as toast&#xA;self.view.showToast(myView)&#xA;&#xA;// immediately hides all toast views in self.view&#xA;self.view.hideAllToasts()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;But wait, there&#39;s more!&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// create a new style&#xA;var style = ToastStyle()&#xA;&#xA;// this is just one of many style options&#xA;style.messageColor = .blue&#xA;&#xA;// present the toast with the new style&#xA;self.view.makeToast(&#34;This is a piece of toast&#34;, duration: 3.0, position: .bottom, style: style)&#xA;&#xA;// or perhaps you want to use this style for all toasts going forward?&#xA;// just set the shared style and there&#39;s no need to provide the style again&#xA;ToastManager.shared.style = style&#xA;self.view.makeToast(&#34;This is a piece of toast&#34;) // now uses the shared style&#xA;&#xA;// toggle &#34;tap to dismiss&#34; functionality&#xA;ToastManager.shared.isTapToDismissEnabled = true&#xA;&#xA;// toggle queueing behavior&#xA;ToastManager.shared.isQueueEnabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the demo project for more examples.&lt;/p&gt; &#xA;&lt;h2&gt;Setup Instructions&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To integrate Toast-Swift into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Toast-Swift&#39;, &#39;~&amp;gt; 5.0.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and in your code add &lt;code&gt;import Toast_Swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;To integrate Toast-Swift into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;scalessec/Toast-Swift&#34; ~&amp;gt; 5.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; to build the framework and drag the built &lt;code&gt;ToastSwiftFramework.framework&lt;/code&gt; into your Xcode project.&lt;/p&gt; &#xA;&lt;p&gt;and in your code add &lt;code&gt;import ToastSwiftFramework&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When using Xcode 11 or later, you can install &lt;code&gt;Toast&lt;/code&gt; by going to your Project settings &amp;gt; &lt;code&gt;Swift Packages&lt;/code&gt; and add the repository by providing the GitHub URL. Alternatively, you can go to &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Swift Packages&lt;/code&gt; &amp;gt; &lt;code&gt;Add Package Dependencies...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Manually&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;Toast.swift&lt;/code&gt; to your project.&lt;/li&gt; &#xA; &lt;li&gt;Grab yourself a cold üç∫.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version &lt;code&gt;5.x.x&lt;/code&gt; requires Swift 5 and Xcode 10.2 (or newer versions of Xcode).&lt;/li&gt; &#xA; &lt;li&gt;Version &lt;code&gt;4.x.x&lt;/code&gt; requires Swift 4.2 and Xcode 10.&lt;/li&gt; &#xA; &lt;li&gt;Version &lt;code&gt;3.x.x&lt;/code&gt; requires Swift 4 and Xcode 9.&lt;/li&gt; &#xA; &lt;li&gt;Version &lt;code&gt;2.x.x&lt;/code&gt; requires Swift 3 and Xcode 8.&lt;/li&gt; &#xA; &lt;li&gt;Version &lt;code&gt;1.4.x&lt;/code&gt; requires Swift 2.2 and Xcode 7.3.&lt;/li&gt; &#xA; &lt;li&gt;Version &lt;code&gt;1.0.0&lt;/code&gt; can be used with Swift 2.1 and earlier versions of Xcode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MIT License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2015-2019 Charles Scalesse.&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a&#xA;copy of this software and associated documentation files (the&#xA;&#34;Software&#34;), to deal in the Software without restriction, including&#xA;without limitation the rights to use, copy, modify, merge, publish,&#xA;distribute, sublicense, and/or sell copies of the Software, and to&#xA;permit persons to whom the Software is furnished to do so, subject to&#xA;the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included&#xA;in all copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS&#xA;OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF&#xA;MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.&#xA;IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY&#xA;CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,&#xA;TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE&#xA;SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>