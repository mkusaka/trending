<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-19T01:42:18Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sparrowcode/PermissionsKit</title>
    <updated>2022-09-19T01:42:18Z</updated>
    <id>tag:github.com,2022-09-19:/sparrowcode/PermissionsKit</id>
    <link href="https://github.com/sparrowcode/PermissionsKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal API for request permission and get its statuses.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PermissionsKit&lt;/h1&gt; &#xA;&lt;p&gt;Universal API for request permission and get its statuses. Available &lt;code&gt;.authorized&lt;/code&gt;, &lt;code&gt;.denied&lt;/code&gt; &amp;amp; &lt;code&gt;.notDetermined&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/camera.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/photos.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/notifications.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/location.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/microphone.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/calendar.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/contacts.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/reminders.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/motion.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/music.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/speech.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/bluetooth.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/health.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/tracking.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/faceid.png&#34; width=&#34;38&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/siri.png&#34; width=&#34;38&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#apps-using&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/badges/download-on-the-appstore.png?version=2&#34; height=&#34;52&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/sparrowcode&#34;&gt; &lt;img src=&#34;https://cdn.sparrowcode.io/github/badges/github-sponsor.png?version=3&#34; height=&#34;52&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Navigate&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#permissions&#34;&gt;Permissions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#request-permission&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#request-permission&#34;&gt;Request Permission&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#status-permission&#34;&gt;Status Permission&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#keys-in-infoplist&#34;&gt;Keys in Info.plist&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#localisation&#34;&gt;Localisations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#apps-using&#34;&gt;Apps Using&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Permissions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Icon&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Permission&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Key for &lt;code&gt;Info.plist&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Get Status&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Make Request&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/bluetooth.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bluetooth&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSBluetoothAlwaysUsageDescription, NSBluetoothPeripheralUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/calendar.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Calendar&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSCalendarsUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/camera.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Camera&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSCameraUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/contacts.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Contacts&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSContactsUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/faceid.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FaceID&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSFaceIDUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/health.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Health&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSHealthUpdateUsageDescription, NSHealthShareUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/location.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Location Always&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSLocationAlwaysAndWhenInUseUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/location.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Location When In Use&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSLocationWhenInUseUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/music.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Media Library&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSAppleMusicUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/microphone.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Microphone&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSMicrophoneUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/motion.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Motion&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSMotionUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/notifications.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Notification&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/photos.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Photo Library&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSPhotoLibraryUsageDescription, NSPhotoLibraryAddUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/reminders.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Reminders&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSRemindersUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/siri.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Siri&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSSiriUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/speech.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Speech Recognizer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSSpeechRecognitionUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/permissionskit/icons/tracking.png&#34; width=&#34;38&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tracking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSUserTrackingUsageDescription&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Ready to use on iOS 11+. Supports iOS, tvOS and &lt;code&gt;SwiftUI&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode go to &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Packages&lt;/code&gt; -&amp;gt; &lt;code&gt;Update to Latest Package Versions&lt;/code&gt; and insert url:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/sparrowcode/PermissionsKit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/sparrowcode/PermissionsKit&#34;, .upToNextMajor(from: &#34;9.0.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, choose the permissions you need. But don&#39;t add all of them, because apple &lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#apple-review&#34;&gt;will reject app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods:&lt;/h3&gt; &#xA;&lt;p&gt;This is an outdated way of doing things. I advise you to use &lt;a href=&#34;https://raw.githubusercontent.com/sparrowcode/PermissionsKit/main/#swift-package-manager&#34;&gt;SPM&lt;/a&gt;. However, I will continue to support Cocoapods for some time.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Cocoapods Instalation&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager. For usage and installation instructions, visit their website. To integrate using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;PermissionsKit/NotificationPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Due to Apple&#39;s new policy regarding permission access you need to specifically define what kind of permissions you want to access using subspecs.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;PermissionsKit/CameraPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/ContactsPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/CalendarPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/PhotoLibraryPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/NotificationPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/MicrophonePermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/RemindersPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/SpeechRecognizerPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/LocationWhenInUsePermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/LocationAlwaysPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/MotionPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/MediaLibraryPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/BluetoothPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/TrackingPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/FaceIDPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/SiriPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;pod &#39;PermissionsKit/HealthPermission&#39;, :git =&amp;gt; &#39;https://github.com/sparrowcode/PermissionsKit&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Request Permission&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PermissionsKit&#xA;import NotificationPermission&#xA;&#xA;Permission.notification.request {&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Status Permission&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PermissionsKit&#xA;import NotificationPermission&#xA;&#xA;let authorized = Permission.notification.authorized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keys in Info.plist&lt;/h2&gt; &#xA;&lt;p&gt;You need to add some keys to the &lt;code&gt;Info.plist&lt;/code&gt; file with descriptions, per Apple&#39;s requirements. You can get a plist of keys for permissions as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let key = Permission.bluetooth.usageDescriptionKey&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Do not use the description as the name of the key.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Localisation&lt;/h3&gt; &#xA;&lt;p&gt;If you use xliff localization export, keys will be create automatically. If you prefer do the localization file manually, you need to create &lt;code&gt;InfoPlist.strings&lt;/code&gt;, select languages on the right side menu and add keys as keys in plist-file. See:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;NSCameraUsageDescription&#34; = &#34;Here description of usage camera&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Apps Using&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;a href=&#34;https://apps.apple.com/app/id1487937127&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/apps-using/id1487937127.png?version=2&#34; height=&#34;65&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/id1624477055&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/apps-using/id1624477055.png?version=2&#34; height=&#34;65&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/id1625641322&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/apps-using/id1625641322.png?version=2&#34; height=&#34;65&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/id875280793&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/apps-using/id875280793.png?version=2&#34; height=&#34;65&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/id743843090&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/apps-using/id743843090.png?version=2&#34; height=&#34;65&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/id537070378&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/apps-using/id537070378.png?version=2&#34; height=&#34;65&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/id1570676244&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/apps-using/id1570676244.png?version=2&#34; height=&#34;65&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/id1617055933&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/apps-using/id1617055933.png?version=2&#34; height=&#34;65&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/id1596657751&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/apps-using/id1596657751.png?version=2&#34; height=&#34;65&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/id1459483980&#34;&gt;&lt;img src=&#34;https://cdn.sparrowcode.io/github/apps-using/id1459483980.png?version=2&#34; height=&#34;65&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;If you use a &lt;code&gt;PermissionsKit&lt;/code&gt;, add your application via Pull Request.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Finb/Bark</title>
    <updated>2022-09-19T01:42:18Z</updated>
    <id>tag:github.com,2022-09-19:/Finb/Bark</id>
    <link href="https://github.com/Finb/Bark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bark is an iOS App which allows you to push custom notifications to your iPhone&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://day.app/2021/06/barkfaq/&#34;&gt;https://day.app/2021/06/barkfaq/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;问题反馈 Telegram 群&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/joinchat/OsCbLzovUAE0YjY1&#34;&gt;Bark反馈群&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;发送推送&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;打开APP，复制测试URL&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://wx4.sinaimg.cn/mw2000/003rYfqply1grd1meqrvcj60bi08zt9i02.jpg&#34; width=&#34;365&#34;&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;修改内容，请求这个URL&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;可以发 get 或者 post 请求 ，请求成功会立即收到推送 &#xA;&#xA;URL 组成: 第一个部分是 key , 之后有三个匹配 &#xA;/:key/:body &#xA;/:key/:title/:body &#xA;/:key/:category/:title/:body &#xA;&#xA;title 推送标题 比 body 字号粗一点 &#xA;body 推送内容 换行请使用换行符 &#39;\n&#39;&#xA;category 另外的功能占用的字段，还没开放 忽略就行 &#xA;post 请求 参数名也是上面这些&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;复制推送内容&lt;/h2&gt; &#xA;&lt;p&gt;收到推送时下拉推送（或在通知中心左滑查看推送）有一个&lt;code&gt;复制&lt;/code&gt;按钮，点击即可复制推送内容。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;img src=&#34;http://wx4.sinaimg.cn/mw690/0060lm7Tly1g0btjhgimij30ku0a60v1.jpg&#34; width=&#34;375&#34;&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//将复制“验证码是9527”&#xA;https://api.day.app/yourkey/验证码是9527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;携带参数 automaticallyCopy=1， 收到推送时，推送内容会自动复制到粘贴板（如发现不能自动复制，可尝试重启一下手机）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//自动复制 “验证码是9527” 到粘贴板&#xA;https://api.day.app/yourkey/验证码是9527?automaticallyCopy=1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;携带copy参数， 则上面两种复制操作，将只复制copy参数的值&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//自动复制 “9527” 到粘贴板&#xA;https://api.day.app/yourkey/验证码是9527?automaticallyCopy=1&amp;amp;copy=9527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;其他参数&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;url&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 点击推送将跳转到url的地址（发送时，URL参数需要编码）&#xA;https://api.day.app/yourkey/百度网址?url=https://www.baidu.com &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;isArchive&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 指定是否需要保存推送信息到历史记录，1 为保存，其他值为不保存。&#xA;// 如果不指定这个参数，推送信息将按照APP内设置来决定是否保存。&#xA;https://api.day.app/yourkey/需要保存的推送?isArchive=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;group&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 指定推送消息分组，可在历史记录中按分组查看推送。&#xA;https://api.day.app/yourkey/需要分组的推送?group=groupName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;icon (仅 iOS15 或以上支持）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 指定推送消息图标&#xA;https://api.day.app/yourkey/需要自定义图标的推送?icon=http://day.app/assets/images/avatar.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;时效性通知&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 设置时效性通知&#xA;https://api.day.app/yourkey/时效性通知?level=timeSensitive&#xA;&#xA;// 可选参数值&#xA;// active：不设置时的默认值，系统会立即亮屏显示通知。&#xA;// timeSensitive：时效性通知，可在专注状态下显示通知。&#xA;// passive：仅将通知添加到通知列表，不会亮屏提醒&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;后端代码&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Finb/bark-server&#34;&gt;bark-server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;将后端代码部署在你自己的服务器上。支持Docker&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Chrome 插件&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xlvecle/Bark-Chrome-Extension&#34;&gt;Bark-Chrome-Extension&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这是一款chrome插件能帮你方便地把网页上的文本或者网址推送到Bark手机端。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;效果展示&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://wx4.sinaimg.cn/mw690/0060lm7Tly1fyaqyhzdnxg30660dcu0h.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;在线定时发送&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://api.ihint.me/bark.html&#34;&gt;https://api.ihint.me/bark.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Windows推送客户端&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HsuDan/BarkHelper&#34;&gt;https://github.com/HsuDan/BarkHelper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;跨平台的命令行应用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JasonkayZK/bark-cli&#34;&gt;https://github.com/JasonkayZK/bark-cli&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quicker 动作&lt;/h2&gt; &#xA;&lt;p&gt;使用 Quicker 软件在 Windows 上将选中文字一键推送到iPhone，支持打开URL和自动复制推送内容 &lt;a href=&#34;https://getquicker.net/Sharedaction?code=e927d844-d212-4428-758d-08d69de12a3b&#34;&gt;https://getquicker.net/Sharedaction?code=e927d844-d212-4428-758d-08d69de12a3b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bark for Wox&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Zeroto521/Wox.Plugin.Bark&#34;&gt;https://github.com/Zeroto521/Wox.Plugin.Bark&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>johnpatrickmorgan/FlowStacks</title>
    <updated>2022-09-19T01:42:18Z</updated>
    <id>tag:github.com,2022-09-19:/johnpatrickmorgan/FlowStacks</id>
    <link href="https://github.com/johnpatrickmorgan/FlowStacks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FlowStacks allows you to hoist SwiftUI navigation and presentation state into a Coordinator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlowStacks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Coordinator pattern in SwiftUI&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;FlowStacks&lt;/em&gt; allow you to manage complex SwiftUI navigation and presentation flows with a simple array. This makes it easy to hoist navigation state into a higher-level coordinator, allowing you to write isolated views that have zero knowledge of their context within the navigation flow of an app.&lt;/p&gt; &#xA;&lt;p&gt;You might like this library if:&lt;/p&gt; &#xA;&lt;p&gt;✅ You want to be able support deeplinks into deeply nested navigation routes in your app.&lt;br&gt; ✅ You want to be able to easily reuse views within different navigation contexts.&lt;br&gt; ✅ You want to easily go back to the root screen or a specific screen in the navigation stack.&lt;br&gt; ✅ You want to use the coordinator pattern to keep navigation logic in a single place.&lt;br&gt; ✅ You want to break an app&#39;s navigation into multiple reusable coordinators and compose them together.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;The library works by translating the array of screens into a hierarchy of nested NavigationLinks and presentation calls, so:&lt;/p&gt; &#xA;&lt;p&gt;🚫 It does not rely on UIKit at all.&lt;br&gt; 🚫 It does not use &lt;code&gt;AnyView&lt;/code&gt; to type-erase screens.&lt;br&gt; 🚫 It does not try to recreate NavigationView from scratch.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To begin, create an enum encompassing each of the screens your flow might contain, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Screen {&#xA;  case home&#xA;  case numberList&#xA;  case numberDetail(Int)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A coordinator view can then manage an array of &lt;code&gt;Route&amp;lt;Screen&amp;gt;&lt;/code&gt;s, representing a stack of these screens, each one either pushed or presented. In the body of the coordinator view, initialize a &lt;code&gt;Router&lt;/code&gt; with a binding to the routes array, and a &lt;code&gt;ViewBuilder&lt;/code&gt; closure. The closure builds a view for a given screen, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AppCoordinator: View {&#xA;  @State var routes: Routes&amp;lt;Screen&amp;gt; = [.root(.home)]&#xA;    &#xA;  var body: some View {&#xA;    Router($routes) { screen, _ in&#xA;      switch screen {&#xA;      case .home:&#xA;        HomeView(onGoTapped: showNumberList)&#xA;      case .numberList:&#xA;        NumberListView(onNumberSelected: showNumber, cancel: goBack)&#xA;      case .numberDetail(let number):&#xA;        NumberDetailView(number: number, cancel: goBackToRoot)&#xA;      }&#xA;    }&#xA;  }&#xA;    &#xA;  private func showNumberList() {&#xA;    routes.presentSheet(.numberList, embedInNavigationView: true)&#xA;  }&#xA;    &#xA;  private func showNumber(_ number: Int) {&#xA;    routes.push(.numberDetail(number))&#xA;  }&#xA;    &#xA;  private func goBack() {&#xA;    routes.goBack()&#xA;  }&#xA;    &#xA;  private func goBackToRoot() {&#xA;    routes.goBackToRoot()&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Convenience methods&lt;/h3&gt; &#xA;&lt;p&gt;The routes array can be managed using normal Array methods, but a number of convenience methods are available for common transformations, such as:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Effect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;push&lt;/td&gt; &#xA;   &lt;td&gt;Pushes a new screen onto the stack.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;presentSheet&lt;/td&gt; &#xA;   &lt;td&gt;Presents a new screen as a sheet.†&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;presentCover&lt;/td&gt; &#xA;   &lt;td&gt;Presents a new screen as a full-screen cover.†&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;goBack&lt;/td&gt; &#xA;   &lt;td&gt;Goes back one screen in the stack.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;goBackToRoot&lt;/td&gt; &#xA;   &lt;td&gt;Goes back to the very first screen in the stack.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;goBackTo&lt;/td&gt; &#xA;   &lt;td&gt;Goes back to a specific screen in the stack.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pop&lt;/td&gt; &#xA;   &lt;td&gt;Pops the current screen if it was pushed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dismiss&lt;/td&gt; &#xA;   &lt;td&gt;Dismisses the most recently presented screen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;† &lt;em&gt;Pass &lt;code&gt;embedInNavigationView: true&lt;/code&gt; if you want to be able to push screens from the presented screen.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Routes array automatically updated&lt;/h3&gt; &#xA;&lt;p&gt;If the user taps the back button, the routes array will be automatically updated to reflect the new navigation state. Navigating back with an edge swipe gesture or via a long-press gesture on the back button will also update the routes array automatically, as will swiping to dismiss a sheet.&lt;/p&gt; &#xA;&lt;h3&gt;Bindings&lt;/h3&gt; &#xA;&lt;p&gt;The Router can be configured to work with a binding to the screen state, rather than just a read-only value - just add &lt;code&gt;$&lt;/code&gt; before the screen argument in the view-builder closure. The screen itself can then be responsible for updating its state within the routes array. Normally an enum is used to represent the screen, so it might be necessary to further extract the associated value for a particular screen as a binding. You can do that using the &lt;a href=&#34;https://github.com/pointfreeco/swiftui-navigation&#34;&gt;SwiftUINavigation&lt;/a&gt; library, which includes a number of helpful Binding transformations for optional and enum state, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUINavigation&#xA;&#xA;struct BindingExampleCoordinator: View {&#xA;  enum Screen {&#xA;    case start&#xA;    case number(Int)&#xA;  }&#xA;  &#xA;  @State var routes: Routes&amp;lt;Screen&amp;gt; = [.root(.start, embedInNavigationView: true)]&#xA;    &#xA;  var body: some View {&#xA;    Router($routes) { $screen, _ in&#xA;      if let number = Binding(unwrapping: $screen, case: /Screen.number) {&#xA;        // Here number is a Binding&amp;lt;Int&amp;gt;, so EditableNumberView can change its&#xA;        // value in the routes array.&#xA;        EditableNumberView(number: number)&#xA;      } else {&#xA;        StartView(goTapped: goTapped)&#xA;      }&#xA;    }&#xA;  }&#xA;  &#xA;  func goTapped() {&#xA;    routes.push(.number(42))&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Child coordinators&lt;/h3&gt; &#xA;&lt;p&gt;Coordinators are just views themselves, so they can be presented, pushed, added to a &lt;code&gt;TabView&lt;/code&gt; or a &lt;code&gt;WindowGroup&lt;/code&gt;, and can be configured in all the normal ways views can. They can even be pushed onto a parent coordinator&#39;s navigation stack, allowing you to break out parts of your navigation flow into separate child coordinators. When doing so, it is best that the child coordinator is always at the top of the parent&#39;s routes stack, as it will take over responsibility for pushing and presenting new screens. Otherwise, the parent might attempt to push screen(s) when the child is already pushing screen(s), causing a conflict.&lt;/p&gt; &#xA;&lt;h3&gt;Using View Models&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;Router&lt;/code&gt;s in the coordinator pattern also works well when using View Models. In these cases, the navigation state can live in the coordinator&#39;s own view model, and the Screen enum can include each screen&#39;s view model. With view models, the first example above can be re-written:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Screen {&#xA;  case home(HomeViewModel)&#xA;  case numberList(NumberListViewModel)&#xA;  case numberDetail(NumberDetailViewModel)&#xA;}&#xA;&#xA;class AppCoordinatorViewModel: ObservableObject {&#xA;  @Published var routes: Routes&amp;lt;Screen&amp;gt;&#xA;    &#xA;  init() {&#xA;    self.routes = [.root(.home(.init(onGoTapped: showNumberList)))]&#xA;  }&#xA;    &#xA;  func showNumberList() {&#xA;    routes.presentSheet(.numberList(.init(onNumberSelected: showNumber, cancel: goBack)), embedInNavigationView: true)&#xA;  }&#xA;    &#xA;  func showNumber(_ number: Int) {&#xA;    routes.push(.numberDetail(.init(number: number, cancel: goBackToRoot)))&#xA;  }&#xA;    &#xA;  func goBack() {&#xA;    routes.goBack()&#xA;  }&#xA;    &#xA;  func goBackToRoot() {&#xA;    routes.goBackToRoot()&#xA;  }&#xA;}&#xA;&#xA;struct AppCoordinator: View {&#xA;  @ObservedObject var viewModel: AppCoordinatorViewModel&#xA;    &#xA;  var body: some View {&#xA;    Router($viewModel.routes) { screen in&#xA;      switch screen {&#xA;      case .home(let viewModel):&#xA;        HomeView(viewModel: viewModel)&#xA;      case .numberList(let viewModel):&#xA;        NumberListView(viewModel: viewModel)&#xA;      case .number(let viewModel):&#xA;        NumberView(viewModel: viewModel)&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making complex navigation updates&lt;/h3&gt; &#xA;&lt;p&gt;SwiftUI does not allow more than one screen to be pushed, presented or dismissed within a single update. This makes it tricky to make large updates to the navigation state, e.g. when deeplinking straight to a view deep in the navigation hierarchy, when going back several presentation layers to the root, or when restoring arbitrary navigation state. With &lt;em&gt;FlowStacks&lt;/em&gt;, you can wrap such changes within a call to &lt;code&gt;withDelaysIfUnsupported&lt;/code&gt;, and the library will break down the large update into a series of smaller updates that SwiftUI supports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;$routes.withDelaysIfUnsupported {&#xA;  $0.goBackToRoot()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if using a view model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;RouteSteps.withDelaysIfUnsupported(self, \.routes) {&#xA;  $0.push(...)&#xA;  $0.push(...)&#xA;  $0.presentSheet(...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fixed root screen&lt;/h3&gt; &#xA;&lt;p&gt;Often the root screen in a screen flow is static - always the same screen is in the root position. In this case you can use the &lt;code&gt;showing&lt;/code&gt; function on the root screen view to simplify matters. It takes the same parameters as the &lt;code&gt;Router&lt;/code&gt; initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ShowingCoordinator: View {&#xA;  enum Screen {&#xA;    case detail, edit, confirm&#xA;  }&#xA;  &#xA;  @State var routes: Routes&amp;lt;Screen&amp;gt; = []&#xA;  &#xA;  var body: some View {&#xA;    HomeView(onGoTapped: { routes.presentSheet(.detail) })&#xA;      .showing($routes) { $number, index in&#xA;        ...&#xA;      }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://johnpatrickmorgan.github.io/2021/07/03/NStack/&#34;&gt;blog post&lt;/a&gt; outlines how an array of screens can be translated into a hierarchy of views and &lt;code&gt;NavigationLink&lt;/code&gt;s. &lt;code&gt;Router&lt;/code&gt; uses a similar approach to allow both navigation and presentation.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Currently only the &lt;code&gt;.stack&lt;/code&gt; navigation view style is supported. There are some unexpected behaviours with the &lt;code&gt;.column&lt;/code&gt; navigation view style that make it problematic for the approach used in this library.&lt;/p&gt; &#xA;&lt;p&gt;Be careful that your screens do not inadvertently end up observing the navigation state, e.g. if you were to pass a coordinator object to its screens as an &lt;code&gt;ObservableObject&lt;/code&gt; or &lt;code&gt;EnvironmentObject&lt;/code&gt;. Not only would that cause your screens to be re-rendered unnecessarily whenever the navigation state changes, it can also cause SwiftUI&#39;s navigation state to deviate from your app&#39;s state.&lt;/p&gt; &#xA;&lt;h2&gt;Using The Composable Architecture?&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/johnpatrickmorgan/TCACoordinators&#34;&gt;TCACoordinators&lt;/a&gt; which uses FlowStacks to help navigation in TCA.&lt;/p&gt;</summary>
  </entry>
</feed>