<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-07T01:57:53Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rileytestut/AltStore</title>
    <updated>2022-06-07T01:57:53Z</updated>
    <id>tag:github.com,2022-06-07:/rileytestut/AltStore</id>
    <link href="https://github.com/rileytestut/AltStore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AltStore&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.0-orange.svg?sanitize=true&#34; alt=&#34;Swift Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: AGPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AltStore is an iOS application that allows you to sideload other apps (.ipa files) onto your iOS device with just your Apple ID. AltStore resigns apps with your personal development certificate and sends them to a desktop app, AltServer, which installs the resigned apps back to your device using iTunes WiFi sync. To prevent apps from expiring, AltStore will also periodically refresh your apps in the background when on the same WiFi as AltServer.&lt;/p&gt; &#xA;&lt;p&gt;For the initial release, I focused on building a solid foundation for distributing my own apps â€” primarily Delta, &lt;a href=&#34;https://github.com/rileytestut/Delta&#34;&gt;my all-in-one emulator for iOS&lt;/a&gt;. Now that Delta has been released, however, I&#39;m beginning work on adding support for &lt;em&gt;anyone&lt;/em&gt; to list and distribute their apps through AltStore (contributions welcome! ðŸ™‚).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs apps over WiFi using AltServer&lt;/li&gt; &#xA; &lt;li&gt;Resigns and installs any app with your Apple ID&lt;/li&gt; &#xA; &lt;li&gt;Refreshes apps periodically in the background to prevent them from expiring (when on same WiFi as AltServer)&lt;/li&gt; &#xA; &lt;li&gt;Handles app updates directly through AltStore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11&lt;/li&gt; &#xA; &lt;li&gt;iOS 12.2+ (AltStore)&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.14.4+ (AltServer)&lt;/li&gt; &#xA; &lt;li&gt;Swift 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why iOS 12.2+ and macOS 10.14.4+? Doing so allows me to distribute all AltStore apps without embedding Swift libraries inside them. This helps me afford bandwidth costs by reducing download sizes by roughly 30%, but also noticeably improves how long it takes to install/refresh apps with AltStore. If you&#39;re compiling AltStore and/or AltServer yourself, however, you should be able to lower their deployment targets to iOS 12.0 and macOS 10.14.0, respectively, without any issues.&lt;/p&gt; &#xA;&lt;h2&gt;Project Overview&lt;/h2&gt; &#xA;&lt;h3&gt;AltStore&lt;/h3&gt; &#xA;&lt;p&gt;AltStore is a just regular, sandboxed iOS application. The AltStore app target contains the vast majority of AltStore&#39;s functionality, including all the logic for downloading and updating apps through AltStore. AltStore makes heavy use of standard iOS frameworks and technologies most iOS developers are familiar with, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core Data&lt;/li&gt; &#xA; &lt;li&gt;Storyboards/Nibs&lt;/li&gt; &#xA; &lt;li&gt;Auto Layout&lt;/li&gt; &#xA; &lt;li&gt;Background App Refresh&lt;/li&gt; &#xA; &lt;li&gt;Network.framework (new in iOS 12)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;AltServer&lt;/h3&gt; &#xA;&lt;p&gt;AltServer is also just a regular, sandboxed macOS application. AltServer is significantly less complex than AltStore though, and for that reason consists of only a handful of files.&lt;/p&gt; &#xA;&lt;h3&gt;AltKit&lt;/h3&gt; &#xA;&lt;p&gt;AltKit is a shared framework that includes common code between AltStore and AltServer.&lt;/p&gt; &#xA;&lt;h3&gt;AltSign&lt;/h3&gt; &#xA;&lt;p&gt;AltSign is my internal framework used by both AltStore and AltServer to communicate with Apple&#39;s servers and resign apps. For more info, check the &lt;a href=&#34;https://github.com/rileytestut/altsign&#34;&gt;AltSign repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Roxas&lt;/h3&gt; &#xA;&lt;p&gt;Roxas is my internal framework used across all my iOS projects, developed to simplify a variety of common tasks used in iOS development. For more info, check the &lt;a href=&#34;https://github.com/rileytestut/roxas&#34;&gt;Roxas repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation Instructions&lt;/h2&gt; &#xA;&lt;p&gt;AltStore and AltServer are both fairly straightforward to compile and run if you&#39;re already an iOS or macOS developer. To compile AltStore and/or AltServer:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository &lt;pre&gt;&lt;code&gt;git clone https://github.com/rileytestut/AltStore.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update submodules: &lt;pre&gt;&lt;code&gt;cd AltStore &#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;AltStore.xcworkspace&lt;/code&gt; and select the AltStore project in the project navigator. On the &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt; tab, change the team from &lt;code&gt;Yvette Testut&lt;/code&gt; to your own account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTDeviceID&lt;/code&gt; in the Info.plist to your device&#39;s UDID. Normally, AltServer embeds the device&#39;s UDID in AltStore&#39;s Info.plist during installation. When running through Xcode you&#39;ll need to set the value yourself or else AltStore won&#39;t resign (or even install) apps for the proper device.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTServerID&lt;/code&gt; in the Info.plist to your AltServer&#39;s serverID. This is embedded by AltServer during installation to help AltStore distinguish between multiple AltServers on the same network, and you can find this by using a Bonjour browsing application and noting the serverID advertised by AltServer. This isn&#39;t strictly necessary, because if AltStore can&#39;t find the AltServer with the embedded serverID it still falls back to trying another AltServer. However, this will help in cases where there are multiple AltServers running (plus the error messages are more helpful).&lt;/li&gt; &#xA; &lt;li&gt;Build + run app! ðŸŽ‰&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Due to the licensing of some dependencies used by AltStore, I have no choice but to distribute AltStore under the &lt;strong&gt;AGPLv3 license&lt;/strong&gt;. That being said, my goal for AltStore is for it to be an open source project &lt;em&gt;anyone&lt;/em&gt; can use without restrictions, so I explicitly give permission for anyone to use, modify, and distribute all &lt;em&gt;my&lt;/em&gt; original code for this project in any form, with or without attribution, without fear of legal consequences (dependencies remain under their original licenses, however).&lt;/p&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:riley@rileytestut.com&#34;&gt;riley@rileytestut.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/rileytestut&#34;&gt;@rileytestut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Questions about AltStore in general? Make sure to read the FAQ at &lt;a href=&#34;https://altstore.io/faq/&#34;&gt;https://altstore.io/faq/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenEmu/OpenEmu</title>
    <updated>2022-06-07T01:57:53Z</updated>
    <id>tag:github.com,2022-06-07:/OpenEmu/OpenEmu</id>
    <link href="https://github.com/OpenEmu/OpenEmu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ•¹ Retro video game emulation for macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenEmu&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://openemu.org/img/intro-md.png&#34; alt=&#34;alt text&#34; title=&#34;OpenEmu Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenEmu is an open-source project whose purpose is to bring macOS game emulation into the realm of first-class citizenship. The project leverages modern macOS technologies, such as Cocoa, Core Animation, and other third-party libraries. One third-party library example is Sparkle, which is used for auto-updating. OpenEmu uses a modular architecture, allowing for game-engine plugins, allowing OpenEmu to support a host of different emulation engines and back ends while retaining the familiar macOS native front end.&lt;/p&gt; &#xA;&lt;p&gt;Currently, OpenEmu can load the following game engines as plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Atari 2600 (&lt;a href=&#34;https://stella-emu.github.io&#34;&gt;Stella&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Atari 5200 (&lt;a href=&#34;https://atari800.github.io&#34;&gt;Atari800&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Atari 7800 (&lt;a href=&#34;https://github.com/raz0red/wii7800&#34;&gt;ProSystem&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Atari Lynx (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ColecoVision (&lt;a href=&#34;http://crabemu.sourceforge.net&#34;&gt;CrabEmu&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Famicom Disk System (&lt;a href=&#34;https://github.com/0ldsk00l/nestopia&#34;&gt;Nestopia&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Game Boy / Game Boy Color (&lt;a href=&#34;https://github.com/sinamas/gambatte&#34;&gt;Gambatte&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Game Boy Advance (&lt;a href=&#34;https://mgba.io&#34;&gt;mGBA&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Game Gear (&lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Intellivision (&lt;a href=&#34;https://github.com/jeremiah-sypult/BlissEmu&#34;&gt;Bliss&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;NeoGeo Pocket (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo (NES) / Famicom (&lt;a href=&#34;https://github.com/TASVideos/fceux&#34;&gt;FCEUX&lt;/a&gt;, &lt;a href=&#34;https://github.com/0ldsk00l/nestopia&#34;&gt;Nestopia&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo 64 (&lt;a href=&#34;http://www.mupen64plus.org&#34;&gt;Mupen64Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo DS (&lt;a href=&#34;http://desmume.org&#34;&gt;DeSmuME&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo GameCube (&lt;a href=&#34;https://dolphin-emu.org&#34;&gt;Dolphin&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OdysseyÂ² / Videopac+ (&lt;a href=&#34;https://sourceforge.net/projects/o2em/&#34;&gt;O2EM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PC-FX (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SG-1000 (&lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sega 32X (&lt;a href=&#34;https://github.com/notaz/picodrive&#34;&gt;picodrive&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sega CD / Mega CD (&lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sega Genesis / Mega Drive (&lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sega Master System (&lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sega Saturn (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sony PSP (&lt;a href=&#34;https://github.com/hrydgard/ppsspp&#34;&gt;PPSSPP&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sony PlayStation (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Super Nintendo (SNES) (&lt;a href=&#34;https://bsnes.dev&#34;&gt;BSNES&lt;/a&gt;, &lt;a href=&#34;https://github.com/snes9xgit/snes9x&#34;&gt;Snes9x&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TurboGrafx-16 / PC Engine (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TurboGrafx-CD / PCE-CD (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Vectrex (&lt;a href=&#34;https://github.com/james7780/VecXGL&#34;&gt;VecXGL&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Virtual Boy (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;WonderSwan (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Minimum Requirements&lt;/h2&gt; &#xA;&lt;p&gt;macOS Mojave 10.14.4&lt;/p&gt; &#xA;&lt;p&gt;Building the default branch requires Xcode 12.5 and macOS Big Sur 11.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>siteline/SwiftUI-Introspect</title>
    <updated>2022-06-07T01:57:53Z</updated>
    <id>tag:github.com,2022-06-07:/siteline/SwiftUI-Introspect</id>
    <link href="https://github.com/siteline/SwiftUI-Introspect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Introspect underlying UIKit components from SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introspect for SwiftUI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/siteline/SwiftUI-Introspect&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/siteline/SwiftUI-Introspect.svg?style=svg&amp;amp;circle-token=6f995f204d4d417d31f79e7257f6e1ecf430ae07&#34; alt=&#34;CircleCI_Status&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://github.com/siteline/SwiftUI-Introspect/actions/workflows/build-and-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/siteline/swiftui-introspect/actions/workflows/build-and-test.yml/badge.svg?branch=master&#34; alt=&#34;GithubCI_Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://siteline.com&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Built%20by/Siteline/blue?icon=https://uploads-ssl.webflow.com/5f4513afbbfc64c4777fcccf/5f525b122370d681879e170e_siteline-icon.svg?sanitize=true&#34; alt=&#34;Siteline_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quintschaf.com&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Maintained%20by/Quintschaf/cyan?icon=https://quintschaf.com/assets/logo.svg?sanitize=true&#34; alt=&#34;Quintschaf_Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Introspect allows you to get the underlying UIKit or AppKit element of a SwiftUI view.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For instance, with Introspect you can access &lt;code&gt;UITableView&lt;/code&gt; to modify separators, or &lt;code&gt;UINavigationController&lt;/code&gt; to customize the tab bar.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Introspect works by adding a custom &lt;code&gt;IntrospectionView&lt;/code&gt; to the view hierarchy, then looking into the UIKit hierarchy to find the relevant view.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siteline/SwiftUI-Introspect/master/docs/diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For instance, when introspecting a &lt;code&gt;TextField&lt;/code&gt;, it will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;IntrospectionView&lt;/code&gt; as an overlay of &lt;code&gt;TextField&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get the view host of the introspection view (which is alongside the view host of the &lt;code&gt;UITextField&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Get the previous sibling containing &lt;code&gt;UITextField&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note that this introspection method might break in future SwiftUI releases.&lt;/strong&gt; Future implementations might not use the same hierarchy, or might not use UIKit elements that are being looked for. Though the library is unlikely to crash, the &lt;code&gt;.introspect()&lt;/code&gt; method will not be called in those cases.&lt;/p&gt; &#xA;&lt;h3&gt;Usage in production&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Introspect&lt;/code&gt; is meant to be used in production. It does not use any private API. It only inspects the view hierarchy using publicly available methods. The library takes a defensive approach to inspecting the view hierarchy: there is no hard assumption that elements are laid out a certain way, there is no force-cast to UIKit classes, and the &lt;code&gt;introspect()&lt;/code&gt; methods are simply ignored if UIKit views cannot be found.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;SwiftPM&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/siteline/SwiftUI-Introspect.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;Introspect&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introspection&lt;/h2&gt; &#xA;&lt;h3&gt;Implemented&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI&lt;/th&gt; &#xA;   &lt;th&gt;UIKit&lt;/th&gt; &#xA;   &lt;th&gt;AppKit&lt;/th&gt; &#xA;   &lt;th&gt;Introspect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NavigationView (StackNavigationViewStyle)&lt;/td&gt; &#xA;   &lt;td&gt;UINavigationController&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectNavigationController()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NavigationView (DoubleColumnNavigationViewStyle)&lt;/td&gt; &#xA;   &lt;td&gt;UISplitViewController&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectSplitViewController()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Any embedded view&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;UIViewController&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectViewController()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScrollView&lt;/td&gt; &#xA;   &lt;td&gt;UIScrollView&lt;/td&gt; &#xA;   &lt;td&gt;NSScrollView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectScrollView()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;UITableView&lt;/td&gt; &#xA;   &lt;td&gt;NSTableView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectTableView()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;View in List&lt;/td&gt; &#xA;   &lt;td&gt;UITableViewCell&lt;/td&gt; &#xA;   &lt;td&gt;NSTableCellView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;introspectTableViewCell()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TabView&lt;/td&gt; &#xA;   &lt;td&gt;UITabBarController&lt;/td&gt; &#xA;   &lt;td&gt;NSTabView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectTabBarController()&lt;/code&gt; (iOS) &lt;br&gt; &lt;code&gt;.introspectTabView()&lt;/code&gt; (macOS)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TextField&lt;/td&gt; &#xA;   &lt;td&gt;UITextField&lt;/td&gt; &#xA;   &lt;td&gt;NSTextField&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectTextField()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Toggle&lt;/td&gt; &#xA;   &lt;td&gt;UISwitch&lt;/td&gt; &#xA;   &lt;td&gt;NSButton&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectSwitch()&lt;/code&gt; (iOS) &lt;br&gt; &lt;code&gt;.introspectButton()&lt;/code&gt; (macOS)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slider&lt;/td&gt; &#xA;   &lt;td&gt;UISlider&lt;/td&gt; &#xA;   &lt;td&gt;NSSlider&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectSlider()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stepper&lt;/td&gt; &#xA;   &lt;td&gt;UIStepper&lt;/td&gt; &#xA;   &lt;td&gt;NSStepper&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectStepper()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DatePicker&lt;/td&gt; &#xA;   &lt;td&gt;UIDatePicker&lt;/td&gt; &#xA;   &lt;td&gt;NSDatePicker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectDatePicker()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Picker (SegmentedPickerStyle)&lt;/td&gt; &#xA;   &lt;td&gt;UISegmentedControl&lt;/td&gt; &#xA;   &lt;td&gt;NSSegmentedControl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectSegmentedControl()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NSButton&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectButton()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ColorPicker&lt;/td&gt; &#xA;   &lt;td&gt;UIColorWell&lt;/td&gt; &#xA;   &lt;td&gt;NSColorWell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectColorWell()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TextEditor&lt;/td&gt; &#xA;   &lt;td&gt;UITextView&lt;/td&gt; &#xA;   &lt;td&gt;NSTextView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectTextView()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&#34;https://github.com/timbersoftware/SwiftUI-Introspect/issues&#34;&gt;create an issue&lt;/a&gt;. As a temporary solution, you can &lt;a href=&#34;https://raw.githubusercontent.com/siteline/SwiftUI-Introspect/master/#implement-your-own-selector&#34;&gt;implement your own selector&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cannot implement&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI&lt;/th&gt; &#xA;   &lt;th&gt;Affected Frameworks&lt;/th&gt; &#xA;   &lt;th&gt;Why&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text&lt;/td&gt; &#xA;   &lt;td&gt;UIKit, AppKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UILabel / NSLabel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;UIKit, AppKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UIImageView / NSImageView&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button&lt;/td&gt; &#xA;   &lt;td&gt;UIKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UIButton&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;List&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;List {&#xA;    Text(&#34;Item 1&#34;)&#xA;    Text(&#34;Item 2&#34;)&#xA;}&#xA;.introspectTableView { tableView in&#xA;    tableView.separatorStyle = .none&#xA;}&#xA;.introspectTableViewCell { cell in&#xA;    let backgroundView = UIView()&#xA;    backgroundView.backgroundColor = .clear&#xA;    cell.selectedBackgroundView = backgroundView&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ScrollView&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item 2&#34;)&#xA;}&#xA;.introspectScrollView { scrollView in&#xA;    scrollView.refreshControl = UIRefreshControl()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NavigationView&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;NavigationView {&#xA;    Text(&#34;Item 2&#34;)&#xA;    .introspectNavigationController { navigationController in&#xA;        navigationController.navigationBar.backgroundColor = .red&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TextField&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;TextField(&#34;Text Field&#34;, text: $textFieldValue)&#xA;.introspectTextField { textField in&#xA;    textField.layer.backgroundColor = UIColor.red.cgColor&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implement your own selector&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&#34;https://github.com/timbersoftware/SwiftUI-Introspect/issues&#34;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case Introspect doesn&#39;t support the SwiftUI element that you&#39;re looking for, you can implement your own selector. For example, to look for a &lt;code&gt;UITextField&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension View {&#xA;    public func introspectTextField(customize: @escaping (UITextField) -&amp;gt; ()) -&amp;gt; some View {&#xA;        return inject(UIKitIntrospectionView(&#xA;            selector: { introspectionView in&#xA;                guard let viewHost = Introspect.findViewHost(from: introspectionView) else {&#xA;                    return nil&#xA;                }&#xA;                return Introspect.previousSibling(containing: UITextField.self, from: viewHost)&#xA;            },&#xA;            customize: customize&#xA;        ))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use any of the following &lt;a href=&#34;https://github.com/timbersoftware/SwiftUI-Introspect/raw/master/Introspect/Introspect.swift#L3-L71&#34;&gt;methods&lt;/a&gt; to inspect the hierarchy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.findChild(ofType:in:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.findChildUsingFrame(ofType:in:from:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.previousSibling(containing:from:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.nextSibling(containing:from:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.findAncestor(ofType:from:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.findHostingView(from:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.findViewHost(from:)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Releasing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increment version number:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec fastlane run increment_version_number bump_type:minor # major|minor|patch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update changelog with new version&lt;/li&gt; &#xA; &lt;li&gt;Bump version in &lt;code&gt;Introspect.podspec&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commit and push changes&lt;/li&gt; &#xA; &lt;li&gt;Tag new version:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git tag -a &amp;lt;VERSION&amp;gt; -m &#34;&amp;lt;MESSAGE&amp;gt;&#34;&#xA;$ git push origin --tags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Push to cocoapods trunk:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec pod trunk push .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- References --&gt;</summary>
  </entry>
</feed>