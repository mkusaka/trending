<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-16T01:55:46Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>guoyingtao/Mantis</title>
    <updated>2022-07-16T01:55:46Z</updated>
    <id>tag:github.com,2022-07-16:/guoyingtao/Mantis</id>
    <link href="https://github.com/guoyingtao/Mantis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An iOS Image cropping library, which mimics the Photo App written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/guoyingtao/Mantis/master/logo.png&#34; height=&#34;80&#34; max-width=&#34;90%&#34; alt=&#34;Mantis&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/swift-5.0-orange.svg?sanitize=true&#34; alt=&#34;swift 5.0 badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-iOS-lightgrey.svg?sanitize=true&#34; alt=&#34;platform iOS badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-black.svg?sanitize=true&#34; alt=&#34;license MIT badge&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Mantis&lt;/h1&gt; &#xA;&lt;p&gt;Mantis is an iOS Image cropping library, which mimics the Photo App written in Swift and provides rich cropping interactions for your iOS/Mac app (Catalyst only).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;Images/Mantis on all devices.png&#34; height=&#34;400&#34; alt=&#34;Mantis&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Mantis also provides rich crop shapes from the basic circle/square to polygon to arbitrary paths(We even provide a heart shape ‚ù§Ô∏è üòè).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/guoyingtao/Mantis/master/Images/cropshapes.png&#34; height=&#34;450&#34; alt=&#34;Mantis&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 11.0+&lt;/li&gt; &#xA; &lt;li&gt;MacOS 10.15+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;CocoaPods&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Mantis&#39;, &#39;~&amp;gt; 1.9.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Carthage&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;guoyingtao/Mantis&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Swift Packages&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Respository: &lt;a href=&#34;https://github.com/guoyingtao/Mantis.git&#34;&gt;https://github.com/guoyingtao/Mantis.git&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Rules: Version - Exact - 1.9.0&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Basic&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a cropViewController in Mantis with default config and default mode&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;You need set (cropViewController or its navigation controller).modalPresentationStyle = .fullscreen for iOS 13+ when the cropViewController is presented&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;    let cropViewController = Mantis.cropViewController(image: &amp;lt;Your Image&amp;gt;)&#xA;    cropViewController.delegate = self&#xA;    &amp;lt;Your ViewController&amp;gt;.present(cropViewController, animated: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The caller needs to conform CropViewControllerDelegate&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol CropViewControllerDelegate: class {&#xA;    func cropViewControllerDidCrop(_ cropViewController: CropViewController, cropped: UIImage, transformation: Transformation, cropInfo: CropInfo)&#xA;    func cropViewControllerDidCancel(_ cropViewController: CropViewController, original: UIImage)&#xA;    &#xA;    // The implementaion of the following functions are optional&#xA;    func cropViewControllerDidFailToCrop(_ cropViewController: CropViewController, original: UIImage)     &#xA;    func cropViewControllerDidBeginResize(_ cropViewController: CropViewController)&#xA;    func cropViewControllerDidEndResize(_ cropViewController: CropViewController, original: UIImage, cropInfo: CropInfo)    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;UI mode&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;CropViewController has two modes:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;normal mode&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;p&gt;In normal mode, you can use a set of standard CropViewController photo editing features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;Images/Screen Shot.png&#34; height=&#34;300&#34; alt=&#34;Mantis&#34;&gt; &lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let cropViewController = Mantis.cropViewController(image: &amp;lt;Your Image&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;customizable mode&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;This mode includes the standard cropping feature, while enabling users to customize other edit features.&lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/guoyingtao/Mantis/master/Images/customizable.jpg&#34; height=&#34;300&#34; alt=&#34;Mantis&#34;&gt; &lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let cropViewController = Mantis.cropCustomizableViewController(image: &amp;lt;Your Image&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Add your own ratio&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;            // Add a custom ratio 1:2 for portrait orientation&#xA;            let config = Mantis.Config()&#xA;            config.addCustomRatio(byVerticalWidth: 1, andVerticalHeight: 2)            &#xA;            &amp;lt;Your Crop ViewController&amp;gt; = Mantis.cropViewController(image: &amp;lt;Your Image&amp;gt;, config: config)&#xA;            &#xA;            // Set the ratioOptions of the config if you don&#39;t want to keep all default ratios&#xA;            let config = Mantis.Config() &#xA;            //config.ratioOptions = [.original, .square, .custom]&#xA;            config.ratioOptions = [.custom]&#xA;            config.addCustomRatio(byVerticalWidth: 1, andVerticalHeight: 2)            &#xA;            &amp;lt;Your Crop ViewController&amp;gt; = Mantis.cropViewController(image: &amp;lt;Your Image&amp;gt;, config: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you always want to use only one fixed ratio, set Mantis.Config.presetFixedRatioType = alwaysUsingOnePresetFixedRatio&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    &amp;lt;Your Crop ViewController&amp;gt;.config.presetFixedRatioType = .alwaysUsingOnePresetFixedRatio(ratio: 16.0 / 9.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;When choose alwaysUsingOnePresetFixedRatio, fixed-ratio setting button does not show.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you want to hide rotation dial, set Mantis.Config.showRotationDial = false&lt;/li&gt; &#xA;  &lt;li&gt;If you want to use ratio list instead of presenter, set Mantis.CropToolbarConfig.ratioCandidatesShowType = .alwaysShowRatioList&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum RatioCandidatesShowType {&#xA;    case presentRatioList&#xA;    case alwaysShowRatioList&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you build your custom toolbar you can add your own fixed ratio buttons&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// set a custom fixed ratio&#xA;cropToolbarDelegate?.didSelectRatio(ratio: 9 / 16)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Crop shapes&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you want to set different crop shape, set Mantis.Config.cropShapeType&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum CropShapeType {&#xA;    case rect&#xA;    case square&#xA;    case ellipse&#xA;    case circle(maskOnly: Bool = false)&#xA;    case diamond(maskOnly: Bool = false)&#xA;    case heart(maskOnly: Bool = false)&#xA;    case polygon(sides: Int, offset: CGFloat = 0, maskOnly: Bool = false)&#xA;    case path(points: [CGPoint], maskOnly: Bool = false)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Preset transformations&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you want to apply transformations when showing an image, set Mantis.Config.presetTransformationType&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum PresetTransformationType {&#xA;    case none&#xA;    case presetInfo(info: Transformation)&#xA;    case presetNormalizedInfo(normailizedInfo: CGRect)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Please use the transformation infomation obtained previously from delegate method cropViewControllerDidCrop(_ cropViewController: CropViewController, cropped: UIImage, transformation: Transformation, , cropInfo: CropInfo).&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Localization&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;UIKit project&lt;br&gt; Add more languages support to the Localizaions section for Project Info tab&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/26723384/128650945-5a1da648-7e7d-4faf-9c95-232725b05dcc.png&#34; height=&#34;200&#34; alt=&#34;Mantis&#34;&gt; &lt;br&gt;fig 1&lt;br&gt; &lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;SwiftUI project&lt;br&gt; Please check this &lt;a href=&#34;https://github.com/guoyingtao/Mantis/discussions/123#discussioncomment-1127611&#34;&gt;link&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Static frameworks If you use static frameworks in CocoaPods, you need to add the code below in order to find the correct resource bundle.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code&gt;    Mantis.locateResourceBundle(by: Self.self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Custom localization tables and bundle&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;By default mantis will use built in localization tables to get string resources not every language is supported out of the box (see fig 1).&lt;/p&gt; &#xA; &lt;p&gt;However if your app support multiple languages and those languages are not &#39;built in&#39;, then you can define your own strings table and localize them in the application target or framework. By doing so you&#39;ll need to configure Mantis localization.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;IMPORTANT!&lt;/strong&gt; Firstly you&#39;ll need to create strings file with these keys:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;&#34;Mantis.Done&#34; = &#34;&#34;;&#xA;&#34;Mantis.Cancel&#34; = &#34;&#34;;&#xA;&#34;Mantis.Reset&#34; = &#34;&#34;;&#xA;&#34;Mantis.Original&#34; = &#34;&#34;;&#xA;&#34;Mantis.Square&#34; = &#34;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then you&#39;ll need to configure Mantis:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;let config = Mantis.Config()&#xA;config.localizationConfig.bundle = // a bundle where strings file is located&#xA;config.localizationConfig.tableName = // a localizaed strings file name within the bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Demo projects&lt;/h3&gt; &#xA;&lt;p&gt;Mantis provide two demo projects&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MantisExample (using Storyboard)&lt;/li&gt; &#xA; &lt;li&gt;MantisSwiftUIExample (using SwiftUI)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The crop are strongly inspired by &lt;a href=&#34;https://github.com/TimOliver/TOCropViewController&#34;&gt;TOCropViewController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The rotation feature is inspired by &lt;a href=&#34;https://github.com/IGRSoft/IGRPhotoTweaks&#34;&gt;IGRPhotoTweaks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The rotation dial is inspired by &lt;a href=&#34;https://github.com/joedaniels29/10Clock&#34;&gt;10clock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Thanks &lt;a href=&#34;https://stackoverflow.com/users/2303865/leo-dabus&#34;&gt;Leo Dabus&lt;/a&gt; for helping me to solve the problem of cropping an ellipse image with transparent background &lt;a href=&#34;https://stackoverflow.com/a/59805317/288724&#34;&gt;https://stackoverflow.com/a/59805317/288724&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;div&gt;&#xA;   Icons made by &#xA;   &lt;a href=&#34;https://www.freepik.com&#34; title=&#34;Freepik&#34;&gt;Freepik&lt;/a&gt; from &#xA;   &lt;a href=&#34;https://www.flaticon.com/&#34; title=&#34;Flaticon&#34;&gt;www.flaticon.com&lt;/a&gt; is licensed by &#xA;   &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons BY 3.0&#34; target=&#34;_blank&#34;&gt;CC 3.0 BY&lt;/a&gt;&#xA;  &lt;/div&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ninxsoft/Mist</title>
    <updated>2022-07-16T01:55:46Z</updated>
    <id>tag:github.com,2022-07-16:/ninxsoft/Mist</id>
    <link href="https://github.com/ninxsoft/Mist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Mac utility that automatically downloads macOS Firmwares / Installers.&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; width=&#34;128&#34; height=&#34;128&#34; src=&#34;https://raw.githubusercontent.com/ninxsoft/Mist/main/Readme%20Resources/App%20Icon.png&#34;&gt; &#xA;&lt;h1&gt;MIST - macOS Installer Super Tool&lt;/h1&gt; &#xA;&lt;p&gt;A Mac utility that automatically downloads macOS Firmwares / Installers:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ninxsoft/Mist/main/Readme%20Resources/Example%20-%20Firmwares.png&#34; alt=&#34;Example - Firmwares&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ninxsoft/Mist/main/Readme%20Resources/Example%20-%20Installers.png&#34; alt=&#34;Example - Installers&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚Ñπ&lt;/span&gt; Check out &lt;a href=&#34;https://github.com/ninxsoft/mist-cli&#34;&gt;mist-cli&lt;/a&gt; for the companion command-line tool!&lt;/h2&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List all available macOS Firmwares / Installers available for download: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Display names, versions, builds, release dates and sizes&lt;/li&gt; &#xA;   &lt;li&gt;Show / hide betas&lt;/li&gt; &#xA;   &lt;li&gt;Show / hide macOS versions compatible with the Mac the app is being run from&lt;/li&gt; &#xA;   &lt;li&gt;Export lists as &lt;strong&gt;CSV&lt;/strong&gt;, &lt;strong&gt;JSON&lt;/strong&gt;, &lt;strong&gt;Property List&lt;/strong&gt; or &lt;strong&gt;YAML&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Download an available macOS Firmware / Installer: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For Apple Silicon Macs: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Download a Firmware Restore file (.ipsw)&lt;/li&gt; &#xA;     &lt;li&gt;Validates the SHA-1 checksum upon download&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;For Intel based Macs (Universal for macOS Big Sur and later): &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Generate an Application Bundle (.app)&lt;/li&gt; &#xA;     &lt;li&gt;Generate a Disk Image (.dmg)&lt;/li&gt; &#xA;     &lt;li&gt;Generate a Bootable Disk Image (.iso) &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;For use with virtualization software (ie. Parallels Desktop, UTM, VMware Fusion, VirtualBox)&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Generate a macOS Installer Package (.pkg) &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Supports packages on &lt;strong&gt;macOS Big Sur and newer&lt;/strong&gt; with a massive 12GB+ payload!&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Optionally codesign Disk Images and macOS Installer Packages&lt;/li&gt; &#xA;     &lt;li&gt;Cache downloads to speed up build operations&lt;/li&gt; &#xA;     &lt;li&gt;Optionally specify custom catalog URLs, allowing you to list and download macOS Installers from the following: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Customer Seed&lt;/strong&gt; - AppleSeed Program&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Developer Seed&lt;/strong&gt; - Apple Developer Program&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Public Seed&lt;/strong&gt; - Apple Beta Software Program&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Validates the Chunklist checksums upon download&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Automatic retries for failed downloads!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift &lt;strong&gt;5.5&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Xcode &lt;strong&gt;14.0&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Runs on macOS Monterey &lt;strong&gt;12.0&lt;/strong&gt; and later.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Grab the latest version of &lt;strong&gt;Mist&lt;/strong&gt; from the &lt;a href=&#34;https://github.com/ninxsoft/Mist/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits / Thank You&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project created and maintained by Nindi Gill (&lt;a href=&#34;https://github.com/ninxsoft&#34;&gt;ninxsoft&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;JP Simard (&lt;a href=&#34;https://github.com/jpsim&#34;&gt;jpsim&lt;/a&gt;) for &lt;a href=&#34;https://github.com/jpsim/Yams&#34;&gt;Yams&lt;/a&gt;, used to export lists as YAML.&lt;/li&gt; &#xA; &lt;li&gt;Josh Kaplan (&lt;a href=&#34;https://github.com/jakaplan&#34;&gt;jakaplan&lt;/a&gt;) for &lt;a href=&#34;https://github.com/trilemma-dev/Blessed&#34;&gt;Blessed&lt;/a&gt;, &lt;a href=&#34;https://github.com/trilemma-dev/EmbeddedPropertyList&#34;&gt;EmbeddedPropertyList&lt;/a&gt;, and &lt;a href=&#34;https://github.com/trilemma-dev/SecureXPC&#34;&gt;SecureXPC&lt;/a&gt;, which are all used to support the Privileged Helper Tool.&lt;/li&gt; &#xA; &lt;li&gt;The Sparkle Project (&lt;a href=&#34;https://github.com/sparkle-project&#34;&gt;sparkle-project&lt;/a&gt;) for &lt;a href=&#34;https://github.com/sparkle-project/Sparkle&#34;&gt;Sparkle&lt;/a&gt;, used to auto update Mist.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version History&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;0.2&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Users are now notified of incompatible macOS Firmwares / Installers before downloading&lt;/li&gt; &#xA;   &lt;li&gt;Placeholder icons for macOS Ventura have been updated with the real deal&lt;/li&gt; &#xA;   &lt;li&gt;Custom Catalog URLs are no longer being ignored&lt;/li&gt; &#xA;   &lt;li&gt;The Catalog URLs heading is now aligned correctly under Preferences&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;0.1.1&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Intermediate cache directories are now created if required&lt;/li&gt; &#xA;   &lt;li&gt;Downloads no longer retry indefinitely&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;0.1&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Initial release&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Copyright ¬© 2022 Nindi Gill&lt;/p&gt; &#xA; &lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA; &lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA; &lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>CombineCommunity/CombineCocoa</title>
    <updated>2022-07-16T01:55:46Z</updated>
    <id>tag:github.com,2022-07-16:/CombineCommunity/CombineCocoa</id>
    <link href="https://github.com/CombineCommunity/CombineCocoa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Combine publisher bridges for UIKit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CombineCocoa&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/freak4pc/CombineCocoa/raw/main/Resources/logo.png&#34; width=&#34;45%&#34;&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/CombineCommunity/CombineCocoa/goto&#34; target=&#34;_blank&#34; alt=&#34;Build Status&#34; title=&#34;Build Status&#34;&gt;&lt;img src=&#34;https://github.com/CombineCommunity/CombineCocoa/workflows/CombineCocoa/badge.svg?branch=main&#34; alt=&#34;Build Status&#34; title=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://cocoapods.org/pods/CombineCocoa&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/CombineCocoa.svg?1&#34; alt=&#34;CombineCocoa supports CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;CombineCocoa supports Swift Package Manager (SPM)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;CombineCocoa supports Carthage&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%2013.0-333333.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;CombineCocoa attempts to provide publishers for common UIKit controls so you can consume user interaction as Combine emissions and compose them into meaningful, logical publisher chains.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is still a primal version of this, with much more to be desired. I gladly accept PRs, ideas, opinions, or improvements. Thank you ! :)&lt;/p&gt; &#xA;&lt;h2&gt;Basic Examples&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/freak4pc/CombineCocoa/raw/main/Example/Example/ControlsViewController.swift#L27&#34;&gt;Example in the &lt;strong&gt;Example&lt;/strong&gt; folder&lt;/a&gt;. Open the project in Xcode 11 and Swift Package Manager should automatically resolve the required dependencies.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/freak4pc/CombineCocoa/raw/main/Resources/example.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;tl;dr:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Combine&#xA;import CombineCocoa&#xA;&#xA;textField.textPublisher // AnyPublisher&amp;lt;String, Never&amp;gt;&#xA;segmented.selectedSegmentIndexPublisher // AnyPublisher&amp;lt;Int, Never&amp;gt;&#xA;slider.valuePublisher // AnyPublisher&amp;lt;Float, Never&amp;gt;&#xA;button.tapPublisher // AnyPublisher&amp;lt;Void, Never&amp;gt;&#xA;barButtonItem.tapPublisher // AnyPublisher&amp;lt;Void, Never&amp;gt;&#xA;switch.isOnPublisher // AnyPublisher&amp;lt;Bool, Never&amp;gt;&#xA;stepper.valuePublisher // AnyPublisher&amp;lt;Double, Never&amp;gt;&#xA;datePicker.datePublisher // AnyPublisher&amp;lt;Date, Never&amp;gt;&#xA;refreshControl.isRefreshingPublisher // AnyPublisher&amp;lt;Bool, Never&amp;gt;&#xA;pageControl.currentPagePublisher // AnyPublisher&amp;lt;Int, Never&amp;gt;&#xA;tapGesture.tapPublisher // AnyPublisher&amp;lt;UITapGestureRecognizer, Never&amp;gt;&#xA;pinchGesture.pinchPublisher // AnyPublisher&amp;lt;UIPinchGestureRecognizer, Never&amp;gt;&#xA;rotationGesture.rotationPublisher // AnyPublisher&amp;lt;UIRotationGestureRecognizer, Never&amp;gt;&#xA;swipeGesture.swipePublisher // AnyPublisher&amp;lt;UISwipeGestureRecognizer, Never&amp;gt;&#xA;panGesture.panPublisher // AnyPublisher&amp;lt;UIPanGestureRecognizer, Never&amp;gt;&#xA;screenEdgePanGesture.screenEdgePanPublisher // AnyPublisher&amp;lt;UIScreenEdgePanGestureRecognizer, Never&amp;gt;&#xA;longPressGesture.longPressPublisher // AnyPublisher&amp;lt;UILongPressGestureRecognizer, Never&amp;gt;&#xA;scrollView.contentOffsetPublisher // AnyPublisher&amp;lt;CGPoint, Never&amp;gt;&#xA;scrollView.reachedBottomPublisher(offset:) // AnyPublisher&amp;lt;Void, Never&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to your &lt;strong&gt;Podfile&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;pod &#39;CombineCocoa&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add the following dependency to your &lt;strong&gt;Package.swift&lt;/strong&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/CombineCommunity/CombineCocoa.git&#34;, from: &#34;0.2.1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your &lt;strong&gt;Cartfile&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;CombineCommunity/CombineCocoa&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Future ideas&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support non &lt;code&gt;UIControl.Event&lt;/code&gt;-based publishers (e.g. delegates).&lt;/li&gt; &#xA; &lt;li&gt;... your ideas? :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CombineCocoa is highly inspired by RxSwift&#39;s &lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxCocoa&lt;/a&gt; in its essence, kudos to &lt;a href=&#34;https://twitter.com/KrunoslavZaher&#34;&gt;Krunoslav Zaher&lt;/a&gt; for all of his amazing work on this.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://twitter.com/twannl&#34;&gt;Antoine van der Lee&lt;/a&gt; for his tutorial on &lt;a href=&#34;https://www.avanderlee.com/swift/custom-combine-publisher/&#34;&gt;Creating Custom Publishers&lt;/a&gt;. The idea to set up a control target inside the publisher was inspired by it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT, of course ;-) See the &lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineCocoa/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;The Apple logo and the Combine framework are property of Apple Inc.&lt;/p&gt;</summary>
  </entry>
</feed>