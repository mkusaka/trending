<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-23T01:54:16Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RxSwiftCommunity/RxDataSources</title>
    <updated>2022-06-23T01:54:16Z</updated>
    <id>tag:github.com,2022-06-23:/RxSwiftCommunity/RxDataSources</id>
    <link href="https://github.com/RxSwiftCommunity/RxDataSources" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UITableView and UICollectionView Data Sources for RxSwift (sections, animated updates, editing ...)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/RxSwiftCommunity/RxDataSources&#34;&gt;&lt;img src=&#34;https://travis-ci.org/RxSwiftCommunity/RxDataSources.svg?branch=main&#34; alt=&#34;Travis CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table and Collection view data sources&lt;/h1&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;O(N)&lt;/strong&gt; algorithm for calculating differences &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the algorithm has the assumption that all sections and items are unique so there is no ambiguity&lt;/li&gt; &#xA;   &lt;li&gt;in case there is ambiguity, fallbacks automagically on non animated refresh&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; it applies additional heuristics to send the least number of commands to sectioned view &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;even though the running time is linear, preferred number of sent commands is usually a lot less than linear&lt;/li&gt; &#xA;   &lt;li&gt;it is preferred (and possible) to cap the number of changes to some small number, and in case the number of changes grows towards linear, just do normal reload&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports &lt;strong&gt;extending your item and section structures&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;just extend your item with &lt;code&gt;IdentifiableType&lt;/code&gt; and &lt;code&gt;Equatable&lt;/code&gt;, and your section with &lt;code&gt;AnimatableSectionModelType&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports all combinations of two level hierarchical animations for &lt;strong&gt;both sections and items&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Section animations: Insert, Delete, Move&lt;/li&gt; &#xA;   &lt;li&gt;Item animations: Insert, Delete, Move, Reload (if old value is not equal to new value)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Configurable animation types for &lt;code&gt;Insert&lt;/code&gt;, &lt;code&gt;Reload&lt;/code&gt; and &lt;code&gt;Delete&lt;/code&gt; (Automatic, Fade, ...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Example app&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Randomized stress tests (example app)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports editing out of the box (example app)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Works with &lt;code&gt;UITableView&lt;/code&gt; and &lt;code&gt;UICollectionView&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;Writing table and collection view data sources is tedious. There is a large number of delegate methods that need to be implemented for the simplest case possible.&lt;/p&gt; &#xA;&lt;p&gt;RxSwift helps alleviate some of the burden with a simple data binding mechanism:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Turn your data into an Observable sequence&lt;/li&gt; &#xA; &lt;li&gt;Bind the data to the tableView/collectionView using one of:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rx.items(dataSource:protocol&amp;lt;RxTableViewDataSourceType, UITableViewDataSource&amp;gt;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rx.items(cellIdentifier:String)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rx.items(cellIdentifier:String:Cell.Type:_:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rx.items(_:_:)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let data = Observable&amp;lt;[String]&amp;gt;.just([&#34;first element&#34;, &#34;second element&#34;, &#34;third element&#34;])&#xA;&#xA;data.bind(to: tableView.rx.items(cellIdentifier: &#34;Cell&#34;)) { index, model, cell in&#xA;  cell.textLabel?.text = model&#xA;}&#xA;.disposed(by: disposeBag)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This works well with simple data sets but does not handle cases where you need to bind complex data sets with multiples sections, or when you need to perform animations when adding/modifying/deleting items.&lt;/p&gt; &#xA;&lt;p&gt;These are precisely the use cases that RxDataSources helps solve.&lt;/p&gt; &#xA;&lt;p&gt;With RxDataSources, it is super easy to just write&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dataSource = RxTableViewSectionedReloadDataSource&amp;lt;SectionModel&amp;lt;String, Int&amp;gt;&amp;gt;(configureCell: configureCell)&#xA;Observable.just([SectionModel(model: &#34;title&#34;, items: [1, 2, 3])])&#xA;    .bind(to: tableView.rx.items(dataSource: dataSource))&#xA;    .disposed(by: disposeBag)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kzaher/rxswiftcontent/rxdatasources/RxDataSources.gif&#34; alt=&#34;RxDataSources example app&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How&lt;/h2&gt; &#xA;&lt;p&gt;Given the following custom data structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct CustomData {&#xA;  var anInt: Int&#xA;  var aString: String&#xA;  var aCGPoint: CGPoint&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start by defining your sections with a struct that conforms to the &lt;code&gt;SectionModelType&lt;/code&gt; protocol:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;define the &lt;code&gt;Item&lt;/code&gt; typealias: equal to the type of items that the section will contain&lt;/li&gt; &#xA; &lt;li&gt;declare an &lt;code&gt;items&lt;/code&gt; property: of type array of &lt;code&gt;Item&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct SectionOfCustomData {&#xA;  var header: String    &#xA;  var items: [Item]&#xA;}&#xA;extension SectionOfCustomData: SectionModelType {&#xA;  typealias Item = CustomData&#xA;&#xA;   init(original: SectionOfCustomData, items: [Item]) {&#xA;    self = original&#xA;    self.items = items&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create a dataSource object and pass it your &lt;code&gt;SectionOfCustomData&lt;/code&gt; type:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dataSource = RxTableViewSectionedReloadDataSource&amp;lt;SectionOfCustomData&amp;gt;(&#xA;  configureCell: { dataSource, tableView, indexPath, item in&#xA;    let cell = tableView.dequeueReusableCell(withIdentifier: &#34;Cell&#34;, for: indexPath)&#xA;    cell.textLabel?.text = &#34;Item \(item.anInt): \(item.aString) - \(item.aCGPoint.x):\(item.aCGPoint.y)&#34;&#xA;    return cell&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Customize closures on the dataSource as needed:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;titleForHeaderInSection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;titleForFooterInSection&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataSource.titleForHeaderInSection = { dataSource, index in&#xA;  return dataSource.sectionModels[index].header&#xA;}&#xA;&#xA;dataSource.titleForFooterInSection = { dataSource, index in&#xA;  return dataSource.sectionModels[index].footer&#xA;}&#xA;&#xA;dataSource.canEditRowAtIndexPath = { dataSource, indexPath in&#xA;  return true&#xA;}&#xA;&#xA;dataSource.canMoveRowAtIndexPath = { dataSource, indexPath in&#xA;  return true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Define the actual data as an Observable sequence of CustomData objects and bind it to the tableView&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sections = [&#xA;  SectionOfCustomData(header: &#34;First section&#34;, items: [CustomData(anInt: 0, aString: &#34;zero&#34;, aCGPoint: CGPoint.zero), CustomData(anInt: 1, aString: &#34;one&#34;, aCGPoint: CGPoint(x: 1, y: 1)) ]),&#xA;  SectionOfCustomData(header: &#34;Second section&#34;, items: [CustomData(anInt: 2, aString: &#34;two&#34;, aCGPoint: CGPoint(x: 2, y: 2)), CustomData(anInt: 3, aString: &#34;three&#34;, aCGPoint: CGPoint(x: 3, y: 3)) ])&#xA;]&#xA;&#xA;Observable.just(sections)&#xA;  .bind(to: tableView.rx.items(dataSource: dataSource))&#xA;  .disposed(by: disposeBag)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animated Data Sources&lt;/h3&gt; &#xA;&lt;p&gt;RxDataSources provides two special data source types that automatically take care of animating changes in the bound data source: &lt;code&gt;RxTableViewSectionedAnimatedDataSource&lt;/code&gt; and &lt;code&gt;RxCollectionViewSectionedAnimatedDataSource&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use one of the two animated data sources, you must take a few extra steps on top of those outlined above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SectionOfCustomData needs to conform to &lt;code&gt;AnimatableSectionModelType&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Your data model must conform to &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;IdentifiableType&lt;/code&gt;: The &lt;code&gt;identity&lt;/code&gt; provided by the &lt;code&gt;IdentifiableType&lt;/code&gt; protocol must be an &lt;strong&gt;immutable identifier representing an instance of the model&lt;/strong&gt;. For example, in case of a &lt;code&gt;Car&lt;/code&gt; model, you might want to use the car&#39;s &lt;code&gt;plateNumber&lt;/code&gt; as its identity.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Equatable&lt;/code&gt;: Conforming to &lt;code&gt;Equatable&lt;/code&gt; helps &lt;code&gt;RxDataSources&lt;/code&gt; determine which cells have changed so it can animate only these specific cells. Meaning, changing &lt;strong&gt;any&lt;/strong&gt; of the &lt;code&gt;Car&lt;/code&gt; model&#39;s properties will trigger an animated reload of that cell.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Xcode 10.2&lt;/p&gt; &#xA;&lt;p&gt;Swift 5.0&lt;/p&gt; &#xA;&lt;p&gt;For Swift 4.x version please use versions &lt;code&gt;3.0.0 ... 3.1.0&lt;/code&gt; For Swift 3.x version please use versions &lt;code&gt;1.0 ... 2.0.2&lt;/code&gt; For Swift 2.3 version please use versions &lt;code&gt;0.1 ... 0.9&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;We&#39;ll try to keep the API as stable as possible, but breaking API changes can occur.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Podfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;RxDataSources&#39;, &#39;~&amp;gt; 5.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Cartfile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;RxSwiftCommunity/RxDataSources&#34; ~&amp;gt; 5.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;SampleProject&#34;,&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/RxSwiftCommunity/RxDataSources.git&#34;, from: &#34;5.0.0&#34;)&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using Xcode 11 or higher, go to &lt;strong&gt;File / Swift Packages / Add Package Dependency...&lt;/strong&gt; and enter package repository URL &lt;strong&gt;&lt;a href=&#34;https://github.com/RxSwiftCommunity/RxDataSources.git&#34;&gt;https://github.com/RxSwiftCommunity/RxDataSources.git&lt;/a&gt;&lt;/strong&gt;, then follow the instructions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-protobuf</title>
    <updated>2022-06-23T01:54:16Z</updated>
    <id>tag:github.com,2022-06-23:/apple/swift-protobuf</id>
    <link href="https://github.com/apple/swift-protobuf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Plugin and runtime library for using protobuf with Swift&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://swift.org/assets/images/swift.svg?sanitize=true&#34; alt=&#34;Swift logo&#34; height=&#34;70&#34;&gt; &#xA;&lt;h1&gt;Swift Protobuf&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Welcome to Swift Protobuf!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/&#34;&gt;Apple&#39;s Swift programming language&lt;/a&gt; is a perfect complement to &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Google&#39;s Protocol Buffer&lt;/a&gt; (&#34;protobuf&#34;) serialization technology. They both emphasize high performance and programmer safety.&lt;/p&gt; &#xA;&lt;p&gt;This project provides both the command-line program that adds Swift code generation to Google&#39;s &lt;code&gt;protoc&lt;/code&gt; and the runtime library that is necessary for using the generated code. After using the protoc plugin to generate Swift code from your .proto files, you will need to add this library to your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Build+and+Test%22&#34;&gt;&lt;img src=&#34;https://github.com/apple/swift-protobuf/workflows/Build%20and%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build and Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Check+Upstream+Proto+Files%22&#34;&gt;&lt;img src=&#34;https://github.com/apple/swift-protobuf/workflows/Check%20Upstream%20Proto%20Files/badge.svg?sanitize=true&#34; alt=&#34;Check Upstream Protos&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Run+Conformance+Tests%22&#34;&gt;&lt;img src=&#34;https://github.com/apple/swift-protobuf/workflows/Run%20Conformance%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Run Conformance Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features of SwiftProtobuf&lt;/h1&gt; &#xA;&lt;p&gt;SwiftProtobuf offers many advantages over alternative serialization systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Safety: The protobuf code-generation system avoids the errors that are common with hand-built serialization code.&lt;/li&gt; &#xA; &lt;li&gt;Correctness: SwiftProtobuf passes both its own extensive test suite and Google&#39;s full conformance test for protobuf correctness.&lt;/li&gt; &#xA; &lt;li&gt;Schema-driven: Defining your data structures in a separate &lt;code&gt;.proto&lt;/code&gt; schema file clearly documents your communications conventions.&lt;/li&gt; &#xA; &lt;li&gt;Idiomatic: SwiftProtobuf takes full advantage of the Swift language. In particular, all generated types provide full Swift copy-on-write value semantics.&lt;/li&gt; &#xA; &lt;li&gt;Efficient binary serialization: The &lt;code&gt;.serializedData()&lt;/code&gt; method returns a &lt;code&gt;Data&lt;/code&gt; with a compact binary form of your data. You can deserialize the data using the &lt;code&gt;init(serializedData:)&lt;/code&gt; initializer.&lt;/li&gt; &#xA; &lt;li&gt;Standard JSON serialization: The &lt;code&gt;.jsonUTF8Data()&lt;/code&gt; method returns a JSON form of your data that can be parsed with the &lt;code&gt;init(jsonUTF8Data:)&lt;/code&gt; initializer.&lt;/li&gt; &#xA; &lt;li&gt;Hashable, Equatable: The generated struct can be put into a &lt;code&gt;Set&amp;lt;&amp;gt;&lt;/code&gt; or &lt;code&gt;Dictionary&amp;lt;&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Performant: The binary and JSON serializers have been extensively optimized.&lt;/li&gt; &#xA; &lt;li&gt;Extensible: You can add your own Swift extensions to any of the generated types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Best of all, you can take the same &lt;code&gt;.proto&lt;/code&gt; file and generate Java, C++, Python, or Objective-C for use on other platforms. The generated code for those languages will use the exact same serialization and deserialization conventions as SwiftProtobuf, making it easy to exchange serialized data in binary or JSON forms, with no additional effort on your part.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;More information is available in the associated documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Google&#39;s protobuf documentation&lt;/a&gt; provides general information about protocol buffers, the protoc compiler, and how to use protocol buffers with C++, Java, and other languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/PLUGIN.md&#34;&gt;PLUGIN.md&lt;/a&gt; documents the &lt;code&gt;protoc-gen-swift&lt;/code&gt; plugin that adds Swift support to the &lt;code&gt;protoc&lt;/code&gt; program&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/API.md&#34;&gt;API.md&lt;/a&gt; documents how to use the generated code. This is recommended reading for anyone using SwiftProtobuf in their project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/SwiftProtobuf/&#34;&gt;cocoadocs.org&lt;/a&gt; has the generated API documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/INTERNALS.md&#34;&gt;INTERNALS.md&lt;/a&gt; documents the internal structure of the generated code and the library. This should only be needed by folks interested in working on SwiftProtobuf itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/STYLE_GUIDELINES.md&#34;&gt;STYLE_GUIDELINES.md&lt;/a&gt; documents the style guidelines we have adopted in our codebase if you are interested in contributing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;ve worked with Protocol Buffers before, adding Swift support is very simple: you just need to build the &lt;code&gt;protoc-gen-swift&lt;/code&gt; program and copy it into your PATH. The &lt;code&gt;protoc&lt;/code&gt; program will find and use it automatically, allowing you to build Swift sources for your proto files. You will also, of course, need to add the SwiftProtobuf runtime library to your project as explained below.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To use Swift with Protocol buffers, you&#39;ll need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A Swift 5.0 or later compiler (Xcode 10.2 or later). Support is included for the Swift Package Manager. The Swift protobuf project is being developed and tested against the latest release version of Swift available from &lt;a href=&#34;https://swift.org&#34;&gt;Swift.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Google&#39;s protoc compiler. The Swift protoc plugin is being actively developed and tested against the latest protobuf sources. The SwiftProtobuf tests need a version of protoc which supports the &lt;code&gt;swift_prefix&lt;/code&gt; option (introduced in protoc 3.2.0). It may work with earlier versions of protoc. You can get recent versions from &lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;Google&#39;s github repository&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building and Installing the Code Generator Plugin&lt;/h2&gt; &#xA;&lt;p&gt;To translate &lt;code&gt;.proto&lt;/code&gt; files into Swift, you will need both Google&#39;s protoc compiler and the SwiftProtobuf code generator plugin.&lt;/p&gt; &#xA;&lt;p&gt;Building the plugin should be simple on any supported Swift platform:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/apple/swift-protobuf.git&#xA;$ cd swift-protobuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pick what released version of SwiftProtobuf you are going to use. You can get a list of tags with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git tag -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you pick the version you will use, set your local state to match, and build the protoc plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git checkout tags/[tag_name]&#xA;$ swift build -c release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a binary called &lt;code&gt;protoc-gen-swift&lt;/code&gt; in the &lt;code&gt;.build/release&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To install, just copy this one executable into a directory that is part of your &lt;code&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: The Swift runtime support is now included with macOS. If you are using old Xcode versions or are on older system versions, you might need to use also use &lt;code&gt;--static-swift-stdlib&lt;/code&gt; with &lt;code&gt;swift build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Alternatively install via Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install swift-protobuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install &lt;code&gt;protoc&lt;/code&gt; compiler and Swift code generator plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Converting .proto files into Swift&lt;/h2&gt; &#xA;&lt;p&gt;To generate Swift output for your .proto files, you run the &lt;code&gt;protoc&lt;/code&gt; command as usual, using the &lt;code&gt;--swift_out=&amp;lt;directory&amp;gt;&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ protoc --swift_out=. my.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;protoc&lt;/code&gt; program will automatically look for &lt;code&gt;protoc-gen-swift&lt;/code&gt; in your &lt;code&gt;PATH&lt;/code&gt; and use it.&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;.proto&lt;/code&gt; input file will get translated to a corresponding &lt;code&gt;.pb.swift&lt;/code&gt; file in the output directory.&lt;/p&gt; &#xA;&lt;p&gt;More information about building and using &lt;code&gt;protoc-gen-swift&lt;/code&gt; can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/PLUGIN.md&#34;&gt;detailed Plugin documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Adding the SwiftProtobuf library to your project...&lt;/h2&gt; &#xA;&lt;p&gt;To use the generated code, you need to include the &lt;code&gt;SwiftProtobuf&lt;/code&gt; library module in your project. How you do this will vary depending on how you&#39;re building your project. Note that in all cases, we strongly recommend that you use the version of the SwiftProtobuf library that corresponds to the version of &lt;code&gt;protoc-gen-swift&lt;/code&gt; you used to generate the code.&lt;/p&gt; &#xA;&lt;h3&gt;...using &lt;code&gt;swift build&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;After copying the &lt;code&gt;.pb.swift&lt;/code&gt; files into your project, you will need to add the &lt;a href=&#34;https://github.com/apple/swift-protobuf&#34;&gt;SwiftProtobuf library&lt;/a&gt; to your project to support the generated code. If you are using the Swift Package Manager, add a dependency to your &lt;code&gt;Package.swift&lt;/code&gt; file and import the &lt;code&gt;SwiftProtobuf&lt;/code&gt; library into the desired targets. Adjust the &lt;code&gt;&#34;1.6.0&#34;&lt;/code&gt; here to match the &lt;code&gt;[tag_name]&lt;/code&gt; you used to build the plugin above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(name: &#34;SwiftProtobuf&#34;, url: &#34;https://github.com/apple/swift-protobuf.git&#34;, from: &#34;1.6.0&#34;),&#xA;],&#xA;targets: [&#xA;    .target(name: &#34;MyTarget&#34;, dependencies: [&#34;SwiftProtobuf&#34;]),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;...using Xcode&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Xcode, then you should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;.pb.swift&lt;/code&gt; source files generated from your protos directly to your project&lt;/li&gt; &#xA; &lt;li&gt;Add this SwiftPM package as dependency of your xcode project: &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app&#34;&gt;Apple Docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;...using CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using CocoaPods, add this to your &lt;code&gt;Podfile&lt;/code&gt; adjusting the &lt;code&gt;:tag&lt;/code&gt; to match the &lt;code&gt;[tag_name]&lt;/code&gt; you used to build the plugin above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftProtobuf&#39;, &#39;~&amp;gt; 1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: CocoaPods 1.7 or newer is required.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;p&gt;Once you have installed the code generator, used it to generate Swift code from your &lt;code&gt;.proto&lt;/code&gt; file, and added the SwiftProtobuf library to your project, you can just use the generated types as you would any other Swift struct.&lt;/p&gt; &#xA;&lt;p&gt;For example, you might start with the following very simple proto file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;syntax = &#34;proto3&#34;;&#xA;&#xA;message BookInfo {&#xA;   int64 id = 1;&#xA;   string title = 2;&#xA;   string author = 3;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then generate Swift code using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ protoc --swift_out=. DataModel.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated code will expose a Swift property for each of the proto fields as well as a selection of serialization and deserialization capabilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a BookInfo object and populate it:&#xA;var info = BookInfo()&#xA;info.id = 1734&#xA;info.title = &#34;Really Interesting Book&#34;&#xA;info.author = &#34;Jane Smith&#34;&#xA;&#xA;// As above, but generating a read-only value:&#xA;let info2 = BookInfo.with {&#xA;    $0.id = 1735&#xA;    $0.title = &#34;Even More Interesting&#34;&#xA;    $0.author = &#34;Jane Q. Smith&#34;&#xA;  }&#xA;&#xA;// Serialize to binary protobuf format:&#xA;let binaryData: Data = try info.serializedData()&#xA;&#xA;// Deserialize a received Data object from `binaryData`&#xA;let decodedInfo = try BookInfo(serializedData: binaryData)&#xA;&#xA;// Serialize to JSON format as a Data object&#xA;let jsonData: Data = try info.jsonUTF8Data()&#xA;&#xA;// Deserialize from JSON format from `jsonData`&#xA;let receivedFromJSON = try BookInfo(jsonUTF8Data: jsonData)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more information in the detailed &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/API.md&#34;&gt;API Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Report any issues&lt;/h2&gt; &#xA;&lt;p&gt;If you run into problems, please send us a detailed report. At a minimum, please include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The specific operating system and version (for example, &#34;macOS 10.12.1&#34; or &#34;Ubuntu 16.10&#34;)&lt;/li&gt; &#xA; &lt;li&gt;The version of Swift you have installed (from &lt;code&gt;swift --version&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The version of the protoc compiler you are working with from &lt;code&gt;protoc --version&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The specific version of this source code (you can use &lt;code&gt;git log -1&lt;/code&gt; to get the latest commit ID)&lt;/li&gt; &#xA; &lt;li&gt;Any local changes you may have&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>raywenderlich/swift-algorithm-club</title>
    <updated>2022-06-23T01:54:16Z</updated>
    <id>tag:github.com,2022-06-23:/raywenderlich/swift-algorithm-club</id>
    <link href="https://github.com/raywenderlich/swift-algorithm-club" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Algorithms and data structures in Swift, with explanations!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Images/SwiftAlgorithm-410-transp.png&#34; alt=&#34;Swift Algorithm Club&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to the Swift Algorithm Club!&lt;/h1&gt; &#xA;&lt;p&gt;Here you&#39;ll find implementations of popular algorithms and data structures in everyone&#39;s favorite new language Swift, with detailed explanations of how they work.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a computer science student who needs to learn this stuff for exams -- or if you&#39;re a self-taught programmer who wants to brush up on the theory behind your craft -- you&#39;ve come to the right place!&lt;/p&gt; &#xA;&lt;p&gt;The goal of this project is to &lt;strong&gt;explain how algorithms work&lt;/strong&gt;. The focus is on clarity and readability of the code, not on making a reusable library that you can drop into your own projects. That said, most of the code should be ready for production use but you may need to tweak it to fit into your own codebase.&lt;/p&gt; &#xA;&lt;p&gt;Code is compatible with &lt;strong&gt;Xcode 10&lt;/strong&gt; and &lt;strong&gt;Swift 4.2&lt;/strong&gt;. We&#39;ll keep this updated with the latest version of Swift. If you&#39;re interested in a GitHub pages version of the repo, check out &lt;a href=&#34;https://aquarchitect.github.io/swift-algorithm-club/&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;😍&lt;/span&gt; &lt;strong&gt;Suggestions and contributions are welcome!&lt;/strong&gt; &lt;span&gt;😍&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Important links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/What%20are%20Algorithms.markdown&#34;&gt;What are algorithms and data structures?&lt;/a&gt; Pancakes!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Why%20Algorithms.markdown&#34;&gt;Why learn algorithms?&lt;/a&gt; Worried this isn&#39;t your cup of tea? Then read this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Big-O%20Notation.markdown&#34;&gt;Big-O notation&lt;/a&gt;. We often say things like, &#34;This algorithm is &lt;strong&gt;O(n)&lt;/strong&gt;.&#34; If you don&#39;t know what that means, read this first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Algorithm%20Design.markdown&#34;&gt;Algorithm design techniques&lt;/a&gt;. How do you create your own algorithms?&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raywenderlich/swift-algorithm-club/raw/master/.github/CONTRIBUTING.md&#34;&gt;How to contribute&lt;/a&gt;. Report an issue to leave feedback, or submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Where to start?&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re new to algorithms and data structures, here are a few good ones to start out with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Stack/&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Queue/&#34;&gt;Queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Insertion%20Sort/&#34;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Binary%20Search/&#34;&gt;Binary Search&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Binary%20Search%20Tree/&#34;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Merge%20Sort/&#34;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Boyer-Moore-Horspool/&#34;&gt;Boyer-Moore string search&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The algorithms&lt;/h2&gt; &#xA;&lt;h3&gt;Searching&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Linear%20Search/&#34;&gt;Linear Search&lt;/a&gt;. Find an element in an array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Binary%20Search/&#34;&gt;Binary Search&lt;/a&gt;. Quickly find elements in a sorted array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Count%20Occurrences/&#34;&gt;Count Occurrences&lt;/a&gt;. Count how often a value appears in an array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Select%20Minimum%20Maximum&#34;&gt;Select Minimum / Maximum&lt;/a&gt;. Find the minimum/maximum value in an array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Kth%20Largest%20Element/&#34;&gt;k-th Largest Element&lt;/a&gt;. Find the &lt;em&gt;k&lt;/em&gt;-th largest element in an array, such as the median.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Selection%20Sampling/&#34;&gt;Selection Sampling&lt;/a&gt;. Randomly choose a bunch of items from a collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Union-Find/&#34;&gt;Union-Find&lt;/a&gt;. Keeps track of disjoint sets and lets you quickly merge them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;String Search&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Brute-Force%20String%20Search/&#34;&gt;Brute-Force String Search&lt;/a&gt;. A naive method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Boyer-Moore-Horspool/&#34;&gt;Boyer-Moore&lt;/a&gt;. A fast method to search for substrings. It skips ahead based on a look-up table, to avoid looking at every character in the text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Knuth-Morris-Pratt/&#34;&gt;Knuth-Morris-Pratt&lt;/a&gt;. A linear-time string algorithm that returns indexes of all occurrencies of a given pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Rabin-Karp/&#34;&gt;Rabin-Karp&lt;/a&gt; Faster search by using hashing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Longest%20Common%20Subsequence/&#34;&gt;Longest Common Subsequence&lt;/a&gt;. Find the longest sequence of characters that appear in the same order in both strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Z-Algorithm/&#34;&gt;Z-Algorithm&lt;/a&gt;. Finds all instances of a pattern in a String, and returns the indexes of where the pattern starts within the String.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sorting&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s fun to see how sorting algorithms work, but in practice you&#39;ll almost never have to provide your own sorting routines. Swift&#39;s own &lt;code&gt;sort()&lt;/code&gt; is more than up to the job. But if you&#39;re curious, read on...&lt;/p&gt; &#xA;&lt;p&gt;Basic sorts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Insertion%20Sort/&#34;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Selection%20Sort/&#34;&gt;Selection Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Shell%20Sort/&#34;&gt;Shell Sort&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Fast sorts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Quicksort/&#34;&gt;Quicksort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Merge%20Sort/&#34;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Heap%20Sort/&#34;&gt;Heap Sort&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hybrid sorts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Introsort/&#34;&gt;Introsort&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Special-purpose sorts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Counting%20Sort/&#34;&gt;Counting Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Radix%20Sort/&#34;&gt;Radix Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Topological%20Sort/&#34;&gt;Topological Sort&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bad sorting algorithms (don&#39;t use these!):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Bubble%20Sort/&#34;&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Slow%20Sort/&#34;&gt;Slow Sort&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compression&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Run-Length%20Encoding/&#34;&gt;Run-Length Encoding (RLE)&lt;/a&gt;. Store repeated values as a single byte and a count.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Huffman%20Coding/&#34;&gt;Huffman Coding&lt;/a&gt;. Store more common elements using a smaller number of bits.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Shuffle/&#34;&gt;Shuffle&lt;/a&gt;. Randomly rearranges the contents of an array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Comb%20Sort/&#34;&gt;Comb Sort&lt;/a&gt;. An improve upon the Bubble Sort algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Convex%20Hull/&#34;&gt;Convex Hull&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Miller-Rabin%20Primality%20Test/&#34;&gt;Miller-Rabin Primality Test&lt;/a&gt;. Is the number a prime number?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/MinimumCoinChange/&#34;&gt;MinimumCoinChange&lt;/a&gt;. A showcase for dynamic programming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Genetic/&#34;&gt;Genetic&lt;/a&gt;. A simple example on how to slowly mutate a value to its ideal form, in the context of biological evolution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Myers%20Difference%20Algorithm/&#34;&gt;Myers Difference Algorithm&lt;/a&gt;. Finding the longest common subsequence of two sequences.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mathematics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/GCD/&#34;&gt;Greatest Common Divisor (GCD)&lt;/a&gt;. Special bonus: the least common multiple.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Combinatorics/&#34;&gt;Permutations and Combinations&lt;/a&gt;. Get your combinatorics on!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Shunting%20Yard/&#34;&gt;Shunting Yard Algorithm&lt;/a&gt;. Convert infix expressions to postfix.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Karatsuba%20Multiplication/&#34;&gt;Karatsuba Multiplication&lt;/a&gt;. Another take on elementary multiplication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/HaversineDistance/&#34;&gt;Haversine Distance&lt;/a&gt;. Calculating the distance between 2 points from a sphere.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Strassen%20Matrix%20Multiplication/&#34;&gt;Strassen&#39;s Multiplication Matrix&lt;/a&gt;. Efficient way to handle matrix multiplication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/CounterClockWise/&#34;&gt;CounterClockWise&lt;/a&gt;. Determining the area of a simple polygon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Machine learning&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/K-Means/&#34;&gt;k-Means Clustering&lt;/a&gt;. Unsupervised classifier that partitions data into &lt;em&gt;k&lt;/em&gt; clusters.&lt;/li&gt; &#xA; &lt;li&gt;k-Nearest Neighbors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Linear%20Regression/&#34;&gt;Linear Regression&lt;/a&gt;. A technique for creating a model of the relationship between two (or more) variable quantities.&lt;/li&gt; &#xA; &lt;li&gt;Logistic Regression&lt;/li&gt; &#xA; &lt;li&gt;Neural Networks&lt;/li&gt; &#xA; &lt;li&gt;PageRank&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Naive%20Bayes%20Classifier/&#34;&gt;Naive Bayes Classifier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Simulated%20annealing/&#34;&gt;Simulated annealing&lt;/a&gt;. Probabilistic technique for approximating the global maxima in a (often discrete) large search space.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data structures&lt;/h2&gt; &#xA;&lt;p&gt;The choice of data structure for a particular task depends on a few things.&lt;/p&gt; &#xA;&lt;p&gt;First, there is the shape of your data and the kinds of operations that you&#39;ll need to perform on it. If you want to look up objects by a key you need some kind of dictionary; if your data is hierarchical in nature you want a tree structure of some sort; if your data is sequential you want a stack or queue.&lt;/p&gt; &#xA;&lt;p&gt;Second, it matters what particular operations you&#39;ll be performing most, as certain data structures are optimized for certain actions. For example, if you often need to find the most important object in a collection, then a heap or priority queue is more optimal than a plain array.&lt;/p&gt; &#xA;&lt;p&gt;Most of the time using just the built-in &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Dictionary&lt;/code&gt;, and &lt;code&gt;Set&lt;/code&gt; types is sufficient, but sometimes you may want something more fancy...&lt;/p&gt; &#xA;&lt;h3&gt;Variations on arrays&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Array2D/&#34;&gt;Array2D&lt;/a&gt;. A two-dimensional array with fixed dimensions. Useful for board games.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Bit%20Set/&#34;&gt;Bit Set&lt;/a&gt;. A fixed-size sequence of &lt;em&gt;n&lt;/em&gt; bits.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Fixed%20Size%20Array/&#34;&gt;Fixed Size Array&lt;/a&gt;. When you know beforehand how large your data will be, it might be more efficient to use an old-fashioned array with a fixed size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Ordered%20Array/&#34;&gt;Ordered Array&lt;/a&gt;. An array that is always sorted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Rootish%20Array%20Stack/&#34;&gt;Rootish Array Stack&lt;/a&gt;. A space and time efficient variation on Swift arrays.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Queues&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Stack/&#34;&gt;Stack&lt;/a&gt;. Last-in, first-out!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Queue/&#34;&gt;Queue&lt;/a&gt;. First-in, first-out!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Deque/&#34;&gt;Deque&lt;/a&gt;. A double-ended queue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Priority%20Queue&#34;&gt;Priority Queue&lt;/a&gt;. A queue where the most important element is always at the front.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Ring%20Buffer/&#34;&gt;Ring Buffer&lt;/a&gt;. Also known as a circular buffer. An array of a certain size that conceptually wraps around back to the beginning.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Lists&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Linked%20List/&#34;&gt;Linked List&lt;/a&gt;. A sequence of data items connected through links. Covers both singly and doubly linked lists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Skip-List/&#34;&gt;Skip-List&lt;/a&gt;. Skip List is a probabilistic data-structure with same logarithmic time bound and efficiency as AVL/ or Red-Black tree and provides a clever compromise to efficiently support search and update operations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Trees&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Tree/&#34;&gt;Tree&lt;/a&gt;. A general-purpose tree structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Binary%20Tree/&#34;&gt;Binary Tree&lt;/a&gt;. A tree where each node has at most two children.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Binary%20Search%20Tree/&#34;&gt;Binary Search Tree (BST)&lt;/a&gt;. A binary tree that orders its nodes in a way that allows for fast queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Red-Black%20Tree/&#34;&gt;Red-Black Tree&lt;/a&gt;. A self balancing binary search tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Splay%20Tree/&#34;&gt;Splay Tree&lt;/a&gt;. A self balancing binary search tree that enables fast retrieval of recently updated elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Threaded%20Binary%20Tree/&#34;&gt;Threaded Binary Tree&lt;/a&gt;. A binary tree that maintains a few extra variables for cheap and fast in-order traversals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Segment%20Tree/&#34;&gt;Segment Tree&lt;/a&gt;. Can quickly compute a function over a portion of an array. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/raywenderlich/swift-algorithm-club/tree/master/Segment%20Tree/LazyPropagation&#34;&gt;Lazy Propagation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;kd-Tree&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Sparse%20Table/&#34;&gt;Sparse Table&lt;/a&gt;. Another take on quickly computing a function over a portion of an array, but this time we&#39;ll make it even quicker!.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Heap/&#34;&gt;Heap&lt;/a&gt;. A binary tree stored in an array, so it doesn&#39;t use pointers. Makes a great priority queue.&lt;/li&gt; &#xA; &lt;li&gt;Fibonacci Heap&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Trie/&#34;&gt;Trie&lt;/a&gt;. A special type of tree used to store associative data structures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/B-Tree/&#34;&gt;B-Tree&lt;/a&gt;. A self-balancing search tree, in which nodes can have more than two children.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/QuadTree/&#34;&gt;QuadTree&lt;/a&gt;. A tree with 4 children.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Octree/&#34;&gt;Octree&lt;/a&gt;. A tree with 8 children.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hashing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Hash%20Table/&#34;&gt;Hash Table&lt;/a&gt;. Allows you to store and retrieve objects by a key. This is how the dictionary type is usually implemented.&lt;/li&gt; &#xA; &lt;li&gt;Hash Functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Bloom%20Filter/&#34;&gt;Bloom Filter&lt;/a&gt;. A constant-memory data structure that probabilistically tests whether an element is in a set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Hash%20Set/&#34;&gt;Hash Set&lt;/a&gt;. A set implemented using a hash table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Multiset/&#34;&gt;Multiset&lt;/a&gt;. A set where the number of times an element is added matters. (Also known as a bag.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Ordered%20Set/&#34;&gt;Ordered Set&lt;/a&gt;. A set where the order of items matters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Graphs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Graph/&#34;&gt;Graph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Breadth-First%20Search/&#34;&gt;Breadth-First Search (BFS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Depth-First%20Search/&#34;&gt;Depth-First Search (DFS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Shortest%20Path%20%28Unweighted%29/&#34;&gt;Shortest Path&lt;/a&gt; on an unweighted tree&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Single-Source%20Shortest%20Paths%20(Weighted)/&#34;&gt;Single-Source Shortest Paths&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Minimum%20Spanning%20Tree%20%28Unweighted%29/&#34;&gt;Minimum Spanning Tree&lt;/a&gt; on an unweighted tree&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Minimum%20Spanning%20Tree/&#34;&gt;Minimum Spanning Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/All-Pairs%20Shortest%20Paths/&#34;&gt;All-Pairs Shortest Paths&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Dijkstra%20Algorithm/&#34;&gt;Dijkstra&#39;s shortest path algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/A-Star/&#34;&gt;A-Star&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Puzzles&lt;/h2&gt; &#xA;&lt;p&gt;A lot of software developer interview questions consist of algorithmic puzzles. Here is a small selection of fun ones. For more puzzles (with answers), see &lt;a href=&#34;http://elementsofprogramminginterviews.com/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://www.crackingthecodinginterview.com&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Two-Sum%20Problem/&#34;&gt;Two-Sum Problem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/3Sum%20and%204Sum/&#34;&gt;Three-Sum/Four-Sum Problem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Fizz%20Buzz/&#34;&gt;Fizz Buzz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Monty%20Hall%20Problem/&#34;&gt;Monty Hall Problem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Palindromes/&#34;&gt;Finding Palindromes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/DiningPhilosophers/&#34;&gt;Dining Philosophers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Egg%20Drop%20Problem/&#34;&gt;Egg Drop Problem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Encode%20and%20Decode%20Tree/&#34;&gt;Encoding and Decoding Binary Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Closest%20Pair/&#34;&gt;Closest Pair&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn more!&lt;/h2&gt; &#xA;&lt;p&gt;Like what you see? Check out &lt;a href=&#34;https://store.raywenderlich.com/products/data-structures-and-algorithms-in-swift&#34;&gt;Data Structures &amp;amp; Algorithms in Swift&lt;/a&gt;, the official book by the Swift Algorithm Club team!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/Images/DataStructuresAndAlgorithmsInSwiftBook.png&#34; alt=&#34;Data Structures &amp;amp; Algorithms in Swift Book&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You’ll start with the fundamental structures of linked lists, queues and stacks, and see how to implement them in a highly Swift-like way. Move on to working with various types of trees, including general purpose trees, binary trees, AVL trees, binary search trees, and tries.&lt;/p&gt; &#xA;&lt;p&gt;Go beyond bubble and insertion sort with better-performing algorithms, including mergesort, radix sort, heap sort, and quicksort. Learn how to construct directed, non-directed and weighted graphs to represent many real-world models, and traverse graphs and trees efficiently with breadth-first, depth-first, Dijkstra’s and Prim’s algorithms to solve problems such as finding the shortest path or lowest cost in a network.&lt;/p&gt; &#xA;&lt;p&gt;By the end of this book, you’ll have hands-on experience solving common issues with data structures and algorithms — and you’ll be well on your way to developing your own efficient and useful implementations!&lt;/p&gt; &#xA;&lt;p&gt;You can find the book on the &lt;a href=&#34;https://store.raywenderlich.com/products/data-structures-and-algorithms-in-swift&#34;&gt;raywenderlich.com store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Algorithm Club was originally created by &lt;a href=&#34;https://github.com/hollance&#34;&gt;Matthijs Hollemans&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is now maintained by &lt;a href=&#34;https://www.raywenderlich.com/u/jomoka&#34;&gt;Vincent Ngo&lt;/a&gt;, &lt;a href=&#34;https://github.com/kelvinlauKL&#34;&gt;Kelvin Lau&lt;/a&gt;, and &lt;a href=&#34;https://github.com/richard-ash&#34;&gt;Richard Ash&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Swift Algorithm Club is a collaborative effort from the &lt;a href=&#34;https://github.com/raywenderlich/swift-algorithm-club/graphs/contributors&#34;&gt;most algorithmic members&lt;/a&gt; of the &lt;a href=&#34;https://www.raywenderlich.com&#34;&gt;raywenderlich.com&lt;/a&gt; community. We&#39;re always looking for help - why not &lt;a href=&#34;https://raw.githubusercontent.com/raywenderlich/swift-algorithm-club/master/.github/CONTRIBUTING.md&#34;&gt;join the club&lt;/a&gt;? :]&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All content is licensed under the terms of the MIT open source license.&lt;/p&gt; &#xA;&lt;p&gt;By posting here, or by submitting any pull request through this forum, you agree that all content you submit or create, both code and text, is subject to this license. Razeware, LLC, and others will have all the rights described in the license regarding this content. The precise terms of this license may be found &lt;a href=&#34;https://github.com/raywenderlich/swift-algorithm-club/raw/master/LICENSE.txt&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/raywenderlich/swift-algorithm-club&#34;&gt;&lt;img src=&#34;https://travis-ci.org/raywenderlich/swift-algorithm-club.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>