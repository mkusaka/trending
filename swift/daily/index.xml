<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-04T01:46:36Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alexwidua/prototypes</title>
    <updated>2023-03-04T01:46:36Z</updated>
    <id>tag:github.com,2023-03-04:/alexwidua/prototypes</id>
    <link href="https://github.com/alexwidua/prototypes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;little monorepo of misc prototypes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prototypes&lt;/h1&gt; &#xA;&lt;p&gt;A little monorepo of prototypes and explorations I&#39;ve shared on &lt;a href=&#34;https://twitter.com/alexwidua&#34;&gt;Twitter&lt;/a&gt;. The prototypes are usually built using React and/or SwiftUI.&lt;/p&gt; &#xA;&lt;h2&gt;Shared Prototypes&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Twitter&lt;/th&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shiny Button ü´≥ ü™©&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/alexwidua/status/1630998774247030786&#34;&gt;Tweet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://shiny-button.vercel.app/&#34;&gt;shiny-button.vercel.app&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solar Eclipse üåô&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/alexwidua/status/1628435490910179328&#34;&gt;Tweet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://solareclipse.vercel.app/&#34;&gt;solareclipse.vercel.app&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;p&gt;These prototypes are built purely out of curiosity and joy. Expect a lot of hot glue and scraps. I appreciate you checking out this repository and hope that you get something out of it :-)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shogo4405/HaishinKit.swift</title>
    <updated>2023-03-04T01:46:36Z</updated>
    <id>tag:github.com,2023-03-04:/shogo4405/HaishinKit.swift</id>
    <link href="https://github.com/shogo4405/HaishinKit.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Camera and Microphone streaming library via RTMP, HLS for iOS, macOS and tvOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HaishinKit for iOS, macOS, tvOS, and &lt;a href=&#34;https://github.com/shogo4405/HaishinKit.kt&#34;&gt;Android&lt;/a&gt;.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/HaishinKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/HaishinKit.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/language-Swift%205.3-orange.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt; &lt;a href=&#34;http://cocoapods.org/pods/HaishinKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/HaishinKit.svg?style=flat&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/shogo4405/HaishinKit.swift/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD%203--Clause-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Camera and Microphone streaming library via RTMP, HLS for iOS, macOS, tvOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shogo4405.github.io/HaishinKit.swift/&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;Sponsored with üíñ by&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://getstream.io/chat/sdk/ios/?utm_source=https://github.com/shogo4405/HaishinKit.swift&amp;amp;utm_medium=github&amp;amp;utm_content=developer&amp;amp;utm_term=swift&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://stream-blog-v2.imgix.net/blog/wp-content/uploads/f7401112f41742c4e173c30d4f318cb8/stream_logo_white.png?w=350&#34; alt=&#34;Stream Chat&#34; style=&#34;margin: 8px&#34;&gt; &lt;/a&gt; &lt;br&gt; Enterprise Grade APIs for Feeds &amp;amp; Chat. &lt;a href=&#34;https://getstream.io/tutorials/ios-chat/?utm_source=github.com/shogo4405/HaishinKit.swift&amp;amp;utm_medium=github&amp;amp;utm_campaign=oss_sponsorship&#34; target=&#34;_blank&#34;&gt;Try the iOS Chat tutorial&lt;/a&gt; üí¨ &lt;/p&gt; &#xA;&lt;h2&gt;üí¨ Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you need help with making LiveStreaming requests using HaishinKit, use a &lt;a href=&#34;https://github.com/shogo4405/HaishinKit.swift/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; with &lt;strong&gt;Q&amp;amp;A&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to discuss a feature request, use a &lt;a href=&#34;https://github.com/shogo4405/HaishinKit.swift/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; with &lt;strong&gt;Idea&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you met a HaishinKit&#39;s bugüêõ, use a &lt;a href=&#34;https://github.com/shogo4405/HaishinKit.swift/issues&#34;&gt;GitHub Issue&lt;/a&gt; with &lt;strong&gt;Bug report template&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The trace level log is very useful. Please set &lt;code&gt;LBLogger.with(HaishinKitIdentifier).level = .trace&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you don&#39;t use an issue template. I will immediately close the your issue without a comment.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request!&lt;/li&gt; &#xA; &lt;li&gt;If you want to support e-mail based communication without GitHub. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Consulting fee is &lt;a href=&#34;https://www.paypal.me/shogo4405/50USD&#34;&gt;$50&lt;/a&gt;/1 incident. I&#39;m able to response a few days.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/invite/8nkshPnanr&#34;&gt;Discord chatroom&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Êó•Êú¨Ë™û„ÅåÂàÜ„Åã„ÇãÊñπ„ÅØ„ÄÅÊó•Êú¨Ë™û„Åß„ÅÆ„Ç≥„Éü„Éã„Ç±„Éº„Ç∑„Éß„É≥„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„ÅôÔºÅ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíñ Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://streamlabs.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/810189/206836172-9c360977-ab6b-4eff-860b-82d0e7b06318.png&#34; width=&#34;350px&#34; alt=&#34;Streamlabs&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üé® Features&lt;/h2&gt; &#xA;&lt;h3&gt;RTMP&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Publish and Recording (H264/AAC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;em&gt;Playback (Beta)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Adaptive bitrate streaming &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Handling (see also &lt;a href=&#34;https://raw.githubusercontent.com/shogo4405/issues/126&#34;&gt;#126&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatic drop frames&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Action Message Format &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AMF0&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; AMF3&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SharedObject&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RTMPS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Native (RTMP over SSL/TLS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;em&gt;Tunneled (RTMPT over SSL/TLS) (Technical Preview)&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;em&gt;RTMPT (Technical Preview)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ReplayKit Live as a Broadcast Upload Extension&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;HLS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTPService&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HLS Publish&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Multi Camera&lt;/h3&gt; &#xA;&lt;p&gt;Supports two camera video sources. A picture-in-picture display that shows the image of the secondary camera of the primary camera. Supports camera split display that displays horizontally and vertically.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Picture-In-Picture&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Split&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1382&#34; alt=&#34;„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà 2022-12-30 15 57 38&#34; src=&#34;https://user-images.githubusercontent.com/810189/210043421-ceb18cb7-9b50-43fa-a0a2-8b92b78d9df1.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img width=&#34;1382&#34; alt=&#34;„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà 2022-12-30 15 55 13&#34; src=&#34;https://user-images.githubusercontent.com/810189/210043687-a99f21b6-28b2-4170-96de-6c814debd84d.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let back = AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .back)&#xA;stream.attachCamera(back)&#xA;&#xA;if #available(iOS 13.0, *) {&#xA;  let front = AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .front)&#xA;  stream.attachMultiCamera(front)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;-&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://shogo4405.github.io/HaishinKit.swift/Classes/HKView.html&#34;&gt;HKView&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://shogo4405.github.io/HaishinKit.swift/Classes/PiPHKView.html&#34;&gt;PiPHKView&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://shogo4405.github.io/HaishinKit.swift/Classes/MTHKView.html&#34;&gt;MTHKView&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Engine&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AVCaptureVideoPreviewLayer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AVSampleBufferDisplayLayer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Metal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Publish&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚óã&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚óØ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚óã&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Playback&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√ó&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚óØ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚óã&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VisualEffect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;√ó&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚óØ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚óã&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://developer.apple.com/documentation/avfoundation/capture_setup/accessing_the_camera_while_multitasking&#34;&gt;Support multitasking camera access.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;em&gt;Support tvOS 11.0+ (Technical Preview)&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;tvOS can&#39;t use camera and microphone devices.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Hardware acceleration for H264 video encoding, AAC audio encoding&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support &#34;Allow app extension API only&#34; option&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;Support GPUImage framework (~&amp;gt; 0.5.12)&lt;/del&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/shogo4405/GPUHaishinKit.swift/raw/master/README.md&#34;&gt;https://github.com/shogo4405/GPUHaishinKit.swift/blob/master/README.md&lt;/a&gt;&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;Objective-C Bridging&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üåè Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;-&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OSX&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;tvOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Xcode&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Swift&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.4.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.13+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.2+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.7+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.3.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.13+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.2+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.7+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.2.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.11+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10.2+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13.0+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5.5+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üêæ Examples&lt;/h2&gt; &#xA;&lt;p&gt;Examples project are available for iOS with UIKit, iOS with SwiftUI, macOS and tvOS.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Camera and microphone publish.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RTMP Playback&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/shogo4405/HaishinKit.swift.git&#xA;cd HaishinKit.swift&#xA;carthage bootstrap --use-xcframeworks&#xA;open HaishinKit.xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚òï Cocoa Keys&lt;/h2&gt; &#xA;&lt;p&gt;Please contains Info.plist.&lt;/p&gt; &#xA;&lt;p&gt;iOS 10.0+&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NSMicrophoneUsageDescription&lt;/li&gt; &#xA; &lt;li&gt;NSCameraUsageDescription&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;macOS 10.14+&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NSMicrophoneUsageDescription&lt;/li&gt; &#xA; &lt;li&gt;NSCameraUsageDescription&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üîß Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;use_frameworks!&#xA;&#xA;def import_pods&#xA;    pod &#39;HaishinKit&#39;, &#39;~&amp;gt; 1.4.2&#xA;end&#xA;&#xA;target &#39;Your Target&#39;  do&#xA;    platform :ios, &#39;11.0&#39;&#xA;    import_pods&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;shogo4405/HaishinKit.swift&#34; ~&amp;gt; 1.4.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/shogo4405/HaishinKit.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üîß Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you setup and activate your AVAudioSession iOS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AVFoundation&#xA;let session = AVAudioSession.sharedInstance()&#xA;do {&#xA;    try session.setCategory(.playAndRecord, mode: .default, options: [.defaultToSpeaker, .allowBluetooth])&#xA;    try session.setActive(true)&#xA;} catch {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìì RTMP Usage&lt;/h2&gt; &#xA;&lt;p&gt;Real Time Messaging Protocol (RTMP).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rtmpConnection = RTMPConnection()&#xA;let rtmpStream = RTMPStream(connection: rtmpConnection)&#xA;rtmpStream.attachAudio(AVCaptureDevice.default(for: .audio)) { error in&#xA;    // print(error)&#xA;}&#xA;rtmpStream.attachCamera(AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .back)) { error in&#xA;    // print(error)&#xA;}&#xA;&#xA;let hkView = HKView(frame: view.bounds)&#xA;hkView.videoGravity = AVLayerVideoGravity.resizeAspectFill&#xA;hkView.attachStream(rtmpStream)&#xA;&#xA;// add ViewController#view&#xA;view.addSubview(hkView)&#xA;&#xA;rtmpConnection.connect(&#34;rtmp://localhost/appName/instanceName&#34;)&#xA;rtmpStream.publish(&#34;streamName&#34;)&#xA;// if you want to record a stream.&#xA;// rtmpStream.publish(&#34;streamName&#34;, type: .localRecord)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RTMP URL Format&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rtmp://server-ip-address[:port]/application/[appInstance]/[prefix:[path1[/path2/]]]streamName &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[] mark is an Optional.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;rtmpConneciton.connect(&#34;rtmp://server-ip-address[:port]/application/[appInstance]&#34;)&#xA;rtmpStream.publish(&#34;[prefix:[path1[/path2/]]]streamName&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;rtmp://localhost/live/streamName &lt;pre&gt;&lt;code&gt;rtmpConneciton.connect(&#34;rtmp://localhost/live&#34;)&#xA;rtmpStream.publish(&#34;streamName&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var stream = RTMPStream(connection: rtmpConnection)&#xA;&#xA;stream.frameRate = 30&#xA;stream.sessionPreset = AVCaptureSession.Preset.medium&#xA;&#xA;/// Specifies the video capture settings.&#xA;stream.videoCapture(for: 0).isVideoMirrored = false&#xA;stream.videoCapture(for: 0).preferredVideoStabilizationMode = .auto&#xA;// rtmpStream.videoCapture(for: 1).isVideoMirrored = false&#xA;&#xA;// Specifies the audio codec settings.&#xA;stream.audioSettings = [&#xA;  .bitrate: 32 * 1000,&#xA;]&#xA;&#xA;// Specifies the video codec settings.&#xA;stream.videoSettings = [&#xA;  .width: 640, // video output width&#xA;  .height: 360, // video output height&#xA;  .bitrate: 160 * 1000, // video output bitrate&#xA;  .profileLevel: kVTProfileLevel_H264_Baseline_3_1, // H264 Profile require &#34;import VideoToolbox&#34;&#xA;  .maxKeyFrameIntervalDuration: 2, // key frame / sec&#xA;]&#xA;&#xA;// Specifies the recording settings. 0&#34; means the same of input.&#xA;stream.startRecording([&#xA;  AVMediaType.audio: [&#xA;    AVFormatIDKey: Int(kAudioFormatMPEG4AAC),&#xA;    AVSampleRateKey: 0,&#xA;    AVNumberOfChannelsKey: 0,&#xA;    // AVEncoderBitRateKey: 128000,&#xA;  ],&#xA;  AVMediaType.video: [&#xA;    AVVideoCodecKey: AVVideoCodecH264,&#xA;    AVVideoHeightKey: 0,&#xA;    AVVideoWidthKey: 0,&#xA;    /*&#xA;    AVVideoCompressionPropertiesKey: [&#xA;      AVVideoMaxKeyFrameIntervalDurationKey: 2,&#xA;      AVVideoProfileLevelKey: AVVideoProfileLevelH264Baseline30,&#xA;      AVVideoAverageBitRateKey: 512000&#xA;    ]&#xA;    */&#xA;  ]&#xA;])&#xA;&#xA;// 2nd arguemnt set false&#xA;stream.attachAudio(AVCaptureDevice.default(for: .audio), automaticallyConfiguresApplicationAudioSession: false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// picrure in picrure settings.&#xA;stream.multiCamCaptureSettings = MultiCamCaptureSetting(&#xA;  mode: .pip,&#xA;  cornerRadius: 16.0,&#xA;  regionOfInterest: .init(&#xA;    origin: CGPoint(x: 16, y: 16),&#xA;    size: .init(width: 160, height: 160)&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// split settings.&#xA;stream.multiCamCaptureSettings = MultiCamCaptureSetting(&#xA;  mode: .split(direction: .east),&#xA;  cornerRadius: 0.0,&#xA;  regionOfInterest: .init(&#xA;    origin: .zero,&#xA;    size: .zero&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authentication&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var rtmpConnection = RTMPConnection()&#xA;rtmpConnection.connect(&#34;rtmp://username:password@localhost/appName/instanceName&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Screen Capture&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// iOS&#xA;let screen = IOUIScreenCaptureUnit(shared: UIApplication.shared)&#xA;screen.delegate = rtmpStream&#xA;screen.startRunning()&#xA;&#xA;// macOS&#xA;rtmpStream.attachScreen(AVCaptureScreenInput(displayID: CGMainDisplayID()))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìì HTTP Usage&lt;/h2&gt; &#xA;&lt;p&gt;HTTP Live Streaming (HLS). Your iPhone/Mac become a IP Camera. Basic snipet. You can see &lt;a href=&#34;http://ip.address:8080/hello/playlist.m3u8&#34;&gt;http://ip.address:8080/hello/playlist.m3u8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var httpStream = HTTPStream()&#xA;httpStream.attachCamera(AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .back))&#xA;httpStream.attachAudio(AVCaptureDevice.default(for: .audio))&#xA;httpStream.publish(&#34;hello&#34;)&#xA;&#xA;var hkView = HKView(frame: view.bounds)&#xA;hkView.attachStream(httpStream)&#xA;&#xA;var httpService = HLSService(domain: &#34;&#34;, type: &#34;_http._tcp&#34;, name: &#34;HaishinKit&#34;, port: 8080)&#xA;httpService.startRunning()&#xA;httpService.addHTTPStream(httpStream)&#xA;&#xA;// add ViewController#view&#xA;view.addSubview(hkView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üí† Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;Looking for sponsors. Sponsoring I will enable us to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Purchase smartphones or peripheral devices for testing purposes.&lt;/li&gt; &#xA; &lt;li&gt;Pay for testing on a specific streaming service or for testing on mobile lines.&lt;/li&gt; &#xA; &lt;li&gt;Potentially private use to continue the OSS development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use any of our libraries for work, see if your employers would be interested in sponsorship. I have some special offers.„ÄÄI would greatly appreciate. Thank you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you request I will note your name product our README.&lt;/li&gt; &#xA; &lt;li&gt;If you mention on a discussion, an issue or pull request that you are sponsoring us I will prioritise helping you even higher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;„Çπ„Éù„É≥„Çµ„Éº„ÇíÂãüÈõÜ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÂà©Áî®Áî®ÈÄî„Å®„Åó„Å¶„ÅØ„ÄÅ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;„ÉÜ„Çπ„ÉàÁõÆÁöÑ„Åß„ÄÅ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÅÆË≥ºÂÖ•„ÇÑÂë®Ëæ∫Ê©üÂô®„ÅÆË≥ºÂÖ•„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÁâπÂÆö„ÅÆ„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞„Çµ„Éº„Éì„Çπ„Å∏„ÅÆ„ÉÜ„Çπ„Éà„ÅÆÊîØÊâï„ÅÑ„ÇÑ„ÄÅ„É¢„Éê„Ç§„É´ÂõûÁ∑ö„Åß„ÅÆ„ÉÜ„Çπ„Éà„ÅÆÊîØÊâï„ÅÑ„Å´Âà©Áî®„Åó„Åæ„Åô„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ËëóÊõ∏„ÅÆOSSÈñãÁô∫„ÇíÁ∂ôÁ∂öÁöÑ„Å´Ë°å„ÅÜÁÇ∫„Å´ÁßÅÁöÑ„Å´Âà©Áî®„Åô„ÇãÂèØËÉΩÊÄß„ÇÇ„ÅÇ„Çä„Åæ„Åô„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;„Åì„ÅÆ„É©„Ç§„Éñ„É©„É™„Éº„Çí‰ªï‰∫ã„ÅßÁ∂ôÁ∂öÁöÑ„Å´Âà©Áî®„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åú„Å≤„ÄÇÈõáÁî®‰∏ª„Å´„ÄÅ„Çπ„Éù„É≥„Çµ„Éº„Å´ËààÂë≥„Åå„Å™„ÅÑ„ÅãÁ¢∫Ë™ç„ÅÑ„Åü„Å†„Åë„Çã„Å®Âπ∏„ÅÑ„Åß„Åô„ÄÇ„ÅÑ„Åè„Å§„ÅãÁâπÂÖ∏„ÇíÁî®ÊÑè„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;README.md„Å∏„ÅÆ‰ºÅÊ•≠„É≠„Ç¥„ÅÆÊé≤Ëºâ&lt;/li&gt; &#xA; &lt;li&gt;Issue„ÇÑPull Request„ÅÆÂÑ™ÂÖàÁöÑ„Å™ÂØæÂøú&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/shogo4405&#34;&gt;Sponsorship&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adobe‚Äôs Real Time Messaging Protocol &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.adobe.com/content/dam/Adobe/en/devnet/rtmp/pdf/rtmp_specification_1.0.pdf&#34;&gt;http://www.adobe.com/content/dam/Adobe/en/devnet/rtmp/pdf/rtmp_specification_1.0.pdf&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Action Message Format -- AMF 0 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.adobe.com/content/dam/acom/en/devnet/pdf/amf0-file-format-specification.pdf&#34;&gt;https://www.adobe.com/content/dam/acom/en/devnet/pdf/amf0-file-format-specification.pdf&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Action Message Format -- AMF 3 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.adobe.com/content/dam/acom/en/devnet/pdf/amf-file-format-spec.pdf&#34;&gt;https://www.adobe.com/content/dam/acom/en/devnet/pdf/amf-file-format-spec.pdf&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Video File Format Specification Version 10 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.adobe.com/content/dam/acom/en/devnet/flv/video_file_format_spec_v10.pdf&#34;&gt;https://www.adobe.com/content/dam/acom/en/devnet/flv/video_file_format_spec_v10.pdf&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Adobe Flash Video File Format Specification Version 10.1 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf&#34;&gt;http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìú License&lt;/h2&gt; &#xA;&lt;p&gt;BSD-3-Clause&lt;/p&gt;</summary>
  </entry>
</feed>