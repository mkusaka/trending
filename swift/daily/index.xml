<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-15T01:35:24Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pointfreeco/swift-issue-reporting</title>
    <updated>2025-05-15T01:35:24Z</updated>
    <id>tag:github.com,2025-05-15:/pointfreeco/swift-issue-reporting</id>
    <link href="https://github.com/pointfreeco/swift-issue-reporting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Report issues in your application and library code as Xcode runtime warnings, breakpoints, assertions, and do so in a testable manner.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Issue Reporting&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-issue-reporting/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/pointfreeco/xctest-dynamic-overlay/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-issue-reporting&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-issue-reporting%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-issue-reporting&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-issue-reporting%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Report issues in your application and library code as Xcode runtime warnings, breakpoints, assertions, and do so in a testable manner.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Important] Issue Reporting is an evolution of our previous library, XCTestDynamicOverlay. As such, to use this library you must depend on the old repository URL:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;https://github.com/pointfreeco/xctest-dynamic-overlay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library provides robust tools for reporting issues in your application with a customizable degree of granularity and severity. In its most basic form you use the &lt;code&gt;reportIssue&lt;/code&gt; function anywhere in your application to flag an issue in your code, such as a code path that you think should never be executed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let lastItem = items.last&#xA;else {&#xA;  reportIssue(&#34;&#39;items&#39; should never be empty.&#34;)&#xA;  return &#xA;}&#xA;â€¦&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this will trigger an unobtrusive, purple runtime warning when running your app in Xcode (simulator and device):&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;Sources/IssueReporting/Documentation.docc/Resources/runtime-warning~dark.png&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;Sources/IssueReporting/Documentation.docc/Resources/runtime-warning.png&#34;&gt; &#xA; &lt;img alt=&#34;A purple runtime warning in Xcode showing that an issue has been reported.&#34; src=&#34;https://raw.githubusercontent.com/pointfreeco/swift-issue-reporting/main/Sources/IssueReporting/Documentation.docc/Resources/runtime-warning.png&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;This provides a very visual way of seeing when an issue has occurred in your application without stopping the app&#39;s execution or interrupting your workflow.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;reportIssue&lt;/code&gt; tool can also be customized to allow for other ways of reporting issues. It can be configured to trigger a breakpoint if you want to do some debugging when an issue is reported, or a precondition or fatal error if you want to truly stop execution. And you can create your own custom issue reporter to send issues to OSLog or an external server.&lt;/p&gt; &#xA;&lt;p&gt;Further, when running your code in a testing context (both Swift&#39;s native Testing framework as well as XCTest), all reported issues become &lt;em&gt;test failures&lt;/em&gt;. This helps you get test coverage that problematic code paths are not executed, and makes it possible to build testing tools for libraries that ship in the same target as the library itself.&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;Sources/IssueReporting/Documentation.docc/Resources/test-failure~dark.png&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;Sources/IssueReporting/Documentation.docc/Resources/test-failure.png&#34;&gt; &#xA; &lt;img alt=&#34;A test failure in Xcode where an issue has been reported.&#34; src=&#34;https://raw.githubusercontent.com/pointfreeco/swift-issue-reporting/main/Sources/IssueReporting/Documentation.docc/Resources/test-failure.png&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;Issue Reporting comes with a number of reporters, custom reporting functionality, and more. To learn about these features, see &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-issue-reporting/main/Sources/IssueReporting/Documentation.docc/Articles/GettingStarted.md&#34;&gt;Getting started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Case studies&lt;/h2&gt; &#xA;&lt;p&gt;There are many popular libraries out there using Issue Reporting. To name a few:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-perception&#34;&gt;&lt;strong&gt;Perception&lt;/strong&gt;&lt;/a&gt; is a back-port of Swift&#39;s Observation framework that can be deployed all the way back to the iOS 13 generation of devices, but requires a special SwiftUI view to observe changes to objects annotated with the macro. When the library detects this view is missing, it uses Issue Reporting to warn developers with a trace pointing to the view.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-dependencies&#34;&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/a&gt; is a general purpose dependency injection library inspired by SwiftUI&#39;s environment. It uses Swift Issue Reporting to notify users when they access dependencies without overridding them. This results in runtime warnings when running in the simulator, and test failures when testing. It forces each test to explicitly declare its dependencies, and when a new dependency is introduced to a feature, existing tests will fail until they account for it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-navigation&#34;&gt;&lt;strong&gt;Swift Navigation&lt;/strong&gt;&lt;/a&gt; provides concise domain modeling tools for UI frameworks including SwiftUI, UIKit, and more; and it uses Swift Issue Reporting to raise runtime warnings when APIs are used in unexpected ways.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture&#34;&gt;&lt;strong&gt;The Composable Architecture&lt;/strong&gt;&lt;/a&gt; comes with powerful testing tools that support both Swift Testing and XCTest out of the box thanks to Swift Issue Reporting. In addition, the library is heavily instrumented with issue reporting to help developers catch bugs in their code early.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-custom-dump&#34;&gt;&lt;strong&gt;Custom Dump&lt;/strong&gt;&lt;/a&gt; is an improved version of Swift&#39;s &lt;code&gt;dump&lt;/code&gt; function, and a whole lot more. It provides well-formatted dumps of data types that read like Swift code, as well as well-formatted diffs when data types are compared. It also ships several test helpers powered by Swift Issue Reporting, including drop-in replacements for &lt;code&gt;#expect(_ == _)&lt;/code&gt; and &lt;code&gt;XCTAssertEqual&lt;/code&gt; that render failures as concise diffs, as well as helpers that allow you to assert against changes to data structures over time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-clocks&#34;&gt;&lt;strong&gt;Swift Clocks&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/pointfreeco/combine-schedulers&#34;&gt;&lt;strong&gt;Combine Schedulers&lt;/strong&gt;&lt;/a&gt; are sibling packages that use issue reporting to drive their &#34;test&#34; and &#34;unimplemented&#34; clocks and schedulers. &#34;Test&#34; clocks/schedulers allow you to &lt;em&gt;control time&lt;/em&gt; in tests, and will emit failures when expectations aren&#39;t met. &#34;Unimplemented&#34; clocks/schedulers record unexpected usage as issues.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have another case study to share? &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-issue-reporting/main/edit/main/README.md&#34;&gt;Let us know!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation can be found &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-issue-reporting/main/documentation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-issue-reporting/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>