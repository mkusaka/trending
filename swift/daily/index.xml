<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T01:57:25Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JohnSundell/Publish</title>
    <updated>2022-07-13T01:57:25Z</updated>
    <id>tag:github.com,2022-07-13:/JohnSundell/Publish</id>
    <link href="https://github.com/JohnSundell/Publish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A static site generator for Swift developers&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/JohnSundell/Publish/master/Logo.png&#34; width=&#34;400&#34; max-width=&#34;90%&#34; alt=&#34;Publish&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5.5-orange.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/swiftpm-compatible-brightgreen.svg?style=flat&#34; alt=&#34;Swift Package Manager&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-mac+linux-brightgreen.svg?style=flat&#34; alt=&#34;Mac + Linux&#34;&gt; &lt;a href=&#34;https://twitter.com/johnsundell&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/twitter-@johnsundell-blue.svg?style=flat&#34; alt=&#34;Twitter: @johnsundell&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Welcome to &lt;strong&gt;Publish&lt;/strong&gt;, a static site generator built specifically for Swift developers. It enables entire websites to be built using Swift, and supports themes, plugins and tons of other powerful customization options.&lt;/p&gt; &#xA;&lt;p&gt;Publish is used to build all of &lt;a href=&#34;https://swiftbysundell.com&#34;&gt;swiftbysundell.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Websites as Swift packages&lt;/h2&gt; &#xA;&lt;p&gt;When using Publish, each website is defined as a Swift package, which acts as the configuration as to how the website should be generated and deployed — all using native, type-safe Swift code. For example, here’s what the configuration for a food recipe website might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct DeliciousRecipes: Website {&#xA;    enum SectionID: String, WebsiteSectionID {&#xA;        case recipes&#xA;        case links&#xA;        case about&#xA;    }&#xA;&#xA;    struct ItemMetadata: WebsiteItemMetadata {&#xA;        var ingredients: [String]&#xA;        var preparationTime: TimeInterval&#xA;    }&#xA;&#xA;    var url = URL(string: &#34;https://cooking-with-john.com&#34;)!&#xA;    var name = &#34;Delicious Recipes&#34;&#xA;    var description = &#34;Many very delicious recipes.&#34;&#xA;    var language: Language { .english }&#xA;    var imagePath: Path? { &#34;images/logo.png&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each website built using Publish can freely decide what kind of sections and metadata that it wants to support. Above, we’ve added three sections — &lt;em&gt;Recipes&lt;/em&gt;, &lt;em&gt;Links&lt;/em&gt;, and &lt;em&gt;About&lt;/em&gt; — which can then contain any number of items. We’ve also added support for our own, site-specific item metadata through the &lt;code&gt;ItemMetadata&lt;/code&gt; type, which we’ll be able to use in a fully type-safe manner all throughout our publishing process.&lt;/p&gt; &#xA;&lt;h2&gt;Start out simple, and customize when needed&lt;/h2&gt; &#xA;&lt;p&gt;While Publish offers a really powerful API that enables almost every aspect of the website generation process to be customized and tweaked, it also ships with a suite of convenience APIs that aims to make it as quick and easy as possible to get started.&lt;/p&gt; &#xA;&lt;p&gt;To start generating the &lt;em&gt;Delicious Recipes&lt;/em&gt; website we defined above, all we need is a single line of code, that tells Publish which theme to use to generate our website’s HTML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try DeliciousRecipes().publish(withTheme: .foundation)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Not only does the above call render our website’s HTML, it also generates an RSS feed, a site map, and more.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Above we’re using Publish’s built-in Foundation theme, which is a very basic theme mostly provided as a starting point, and as an example of how Publish themes may be built. We can of course at any time replace that theme with our own, custom one, which can include any sort of HTML and resources that we’d like.&lt;/p&gt; &#xA;&lt;p&gt;By default, Publish will generate a website’s content based on Markdown files placed within that project’s &lt;code&gt;Content&lt;/code&gt; folder, but any number of content items and custom pages can also be added programmatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Publish supports three types of content:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sections&lt;/strong&gt;, which are created based on the members of each website’s &lt;code&gt;SectionID&lt;/code&gt; enum. Each section both has its own HTML page, and can also act as a container for a list of &lt;strong&gt;Items&lt;/strong&gt;, which represent the nested HTML pages within that section. Finally, &lt;strong&gt;Pages&lt;/strong&gt; provide a way to build custom free-form pages that can be placed into any kind of folder hierarchy.&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;Section&lt;/code&gt;, &lt;code&gt;Item&lt;/code&gt;, and &lt;code&gt;Page&lt;/code&gt; can define its own set of Content — which can range from text (like titles and descriptions), to HTML, audio, video and various kinds of metadata.&lt;/p&gt; &#xA;&lt;p&gt;Here’s how we could extend our basic &lt;code&gt;publish()&lt;/code&gt; call from before to inject our own custom publishing pipeline — which enables us to define new items, modify sections, and much more:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try DeliciousRecipes().publish(&#xA;    withTheme: .foundation,&#xA;    additionalSteps: [&#xA;        // Add an item programmatically&#xA;        .addItem(Item(&#xA;            path: &#34;my-favorite-recipe&#34;,&#xA;            sectionID: .recipes,&#xA;            metadata: DeliciousRecipes.ItemMetadata(&#xA;                ingredients: [&#34;Chocolate&#34;, &#34;Coffee&#34;, &#34;Flour&#34;],&#xA;                preparationTime: 10 * 60&#xA;            ),&#xA;            tags: [&#34;favorite&#34;, &#34;featured&#34;],&#xA;            content: Content(&#xA;                title: &#34;Check out my favorite recipe!&#34;&#xA;            )&#xA;        )),&#xA;        // Add default titles to all sections&#xA;        .step(named: &#34;Default section titles&#34;) { context in&#xA;            context.mutateAllSections { section in&#xA;                guard section.title.isEmpty else { return }&#xA;                &#xA;                switch section.id {&#xA;                case .recipes:&#xA;                    section.title = &#34;My recipes&#34;&#xA;                case .links:&#xA;                    section.title = &#34;External links&#34;&#xA;                case .about:&#xA;                    section.title = &#34;About this site&#34;&#xA;                }&#xA;            }&#xA;        }&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, defining all of a program’s code in one single place is rarely a good idea, so it’s recommended to split up a website’s various generation operations into clearly separated steps — which can be defined by extending the &lt;code&gt;PublishingStep&lt;/code&gt; type with static properties or methods, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension PublishingStep where Site == DeliciousRecipes {&#xA;    static func addDefaultSectionTitles() -&amp;gt; Self {&#xA;        .step(named: &#34;Default section titles&#34;) { context in&#xA;            context.mutateAllSections { section in&#xA;                guard section.title.isEmpty else { return }&#xA;&#xA;                switch section.id {&#xA;                case .recipes:&#xA;                    section.title = &#34;My recipes&#34;&#xA;                case .links:&#xA;                    section.title = &#34;External links&#34;&#xA;                case .about:&#xA;                    section.title = &#34;About this site&#34;&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Each publishing step is passed an instance of &lt;code&gt;PublishingContext&lt;/code&gt;, which it can use to mutate the current context in which the website is being published — including its files, folders, and content.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using the above pattern, we can implement any number of custom publishing steps that’ll fit right in alongside all of the default steps that Publish ships with. This enables us to construct really powerful pipelines in which each step performs a single part of the generation process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try DeliciousRecipes().publish(using: [&#xA;    .addMarkdownFiles(),&#xA;    .copyResources(),&#xA;    .addFavoriteItems(),&#xA;    .addDefaultSectionTitles(),&#xA;    .generateHTML(withTheme: .delicious),&#xA;    .generateRSSFeed(including: [.recipes]),&#xA;    .generateSiteMap()&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Above we’re constructing a completely custom publishing pipeline by calling the &lt;code&gt;publish(using:)&lt;/code&gt; API.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To learn more about Publish’s built-in publishing steps, &lt;a href=&#34;https://github.com/JohnSundell/Publish/raw/master/Sources/Publish/API/PublishingStep.swift&#34;&gt;check out this file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building an HTML theme&lt;/h2&gt; &#xA;&lt;p&gt;Publish uses &lt;a href=&#34;https://github.com/johnsundell/plot&#34;&gt;Plot&lt;/a&gt; as its HTML theming engine, which enables entire HTML pages to be defined using Swift. When using Publish, it’s recommended that you build your own website-specific theme — that can make full use of your own custom metadata, and be completely tailored to fit your website’s design.&lt;/p&gt; &#xA;&lt;p&gt;Themes are defined using the &lt;code&gt;Theme&lt;/code&gt; type, which uses an &lt;code&gt;HTMLFactory&lt;/code&gt; implementation to create all of a website’s HTML pages. Here’s an excerpt of what the implementation for the custom &lt;code&gt;.delicious&lt;/code&gt; theme used above may look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Theme where Site == DeliciousRecipes {&#xA;    static var delicious: Self {&#xA;        Theme(htmlFactory: DeliciousHTMLFactory())&#xA;    }&#xA;&#xA;    private struct DeliciousHTMLFactory: HTMLFactory {&#xA;        ...&#xA;        func makeItemHTML(&#xA;            for item: Item&amp;lt;DeliciousRecipes&amp;gt;,&#xA;            context: PublishingContext&amp;lt;DeliciousRecipes&amp;gt;&#xA;        ) throws -&amp;gt; HTML {&#xA;            HTML(&#xA;                .head(for: item, on: context.site),&#xA;                .body(&#xA;                    .ul(&#xA;                        .class(&#34;ingredients&#34;),&#xA;                        .forEach(item.metadata.ingredients) {&#xA;                            .li(.text($0))&#xA;                        }&#xA;                    ),&#xA;                    .p(&#xA;                        &#34;This will take around &#34;,&#xA;                        &#34;\(Int(item.metadata.preparationTime / 60)) &#34;,&#xA;                        &#34;minutes to prepare&#34;&#xA;                    ),&#xA;                    .contentBody(item.body)&#xA;                )&#xA;            )&#xA;        }&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above we’re able to access both built-in item properties, and the custom metadata properties that we defined earlier as part of our website’s &lt;code&gt;ItemMetadata&lt;/code&gt; struct, all in a way that retains full type safety.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;More thorough documentation on how to build Publish themes, and some of the recommended best practices for doing so, will be added shortly.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building plugins&lt;/h2&gt; &#xA;&lt;p&gt;Publish also supports plugins, which can be used to share setup code between various projects, or to extend Publish’s built-in functionality in various ways. Just like publishing steps, plugins perform their work by modifying the current &lt;code&gt;PublishingContext&lt;/code&gt; — for example by adding files or folders, by mutating the website’s existing content, or by adding Markdown parsing modifiers.&lt;/p&gt; &#xA;&lt;p&gt;Here’s an example of a plugin that ensures that all of a website’s items have tags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Plugin {&#xA;    static var ensureAllItemsAreTagged: Self {&#xA;        Plugin(name: &#34;Ensure that all items are tagged&#34;) { context in&#xA;            let allItems = context.sections.flatMap { $0.items }&#xA;&#xA;            for item in allItems {&#xA;                guard !item.tags.isEmpty else {&#xA;                    throw PublishingError(&#xA;                        path: item.path,&#xA;                        infoMessage: &#34;Item has no tags&#34;&#xA;                    )&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Plugins are then installed by adding the &lt;code&gt;installPlugin&lt;/code&gt; step to any publishing pipeline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try DeliciousRecipes().publish(using: [&#xA;    ...&#xA;    .installPlugin(.ensureAllItemsAreTagged)&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;If your plugin is hosted on GitHub you can use the &lt;code&gt;publish-plugin&lt;/code&gt; &lt;a href=&#34;https://help.github.com/en/github/administering-a-repository/classifying-your-repository-with-topics#adding-topics-to-your-repository&#34;&gt;topic&lt;/a&gt; so it can be found with the rest of &lt;a href=&#34;https://github.com/topics/publish-plugin?l=swift&#34;&gt;community plugins&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a real-world example of a Publish plugin, check out the &lt;a href=&#34;https://github.com/johnsundell/splashpublishplugin&#34;&gt;official Splash plugin&lt;/a&gt;, which makes it really easy to integrate the &lt;a href=&#34;https://github.com/johnsundell/splash&#34;&gt;Splash syntax highlighter&lt;/a&gt; with Publish.&lt;/p&gt; &#xA;&lt;h2&gt;System requirements&lt;/h2&gt; &#xA;&lt;p&gt;To be able to successfully use Publish, make sure that your system has Swift version 5.4 (or later) installed. If you’re using a Mac, also make sure that &lt;code&gt;xcode-select&lt;/code&gt; is pointed at an Xcode installation that includes the required version of Swift, and that you’re running macOS Big Sur (11.0) or later.&lt;/p&gt; &#xA;&lt;p&gt;Please note that Publish &lt;strong&gt;does not&lt;/strong&gt; officially support any form of beta software, including beta versions of Xcode and macOS, or unreleased versions of Swift.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Publish is distributed using the &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;. To install it into a project, add it as a dependency within your &lt;code&gt;Package.swift&lt;/code&gt; manifest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    ...&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/johnsundell/publish.git&#34;, from: &#34;0.1.0&#34;)&#xA;    ],&#xA;    ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then import Publish wherever you’d like to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on how to use the Swift Package Manager, check out &lt;a href=&#34;https://www.swiftbysundell.com/articles/managing-dependencies-using-the-swift-package-manager&#34;&gt;this article&lt;/a&gt;, or &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;its official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Publish also ships with a command line tool that makes it easy to set up new website projects, and to generate and deploy existing ones. To install that command line tool, simply run &lt;code&gt;make&lt;/code&gt; within a local copy of the Publish repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/JohnSundell/Publish.git&#xA;$ cd Publish&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;publish help&lt;/code&gt; for instructions on how to use it.&lt;/p&gt; &#xA;&lt;p&gt;The Publish command line tool is also available via &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; and can be installed using the following command if you have Homebrew installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, please note that Homebrew support is not officially maintained by John Sundell, and you might therefore be installing an older version of the Publish command line tool when using Homebrew. Using &lt;code&gt;make&lt;/code&gt;, as described above, is the preferred way to install the Publish command line tool.&lt;/p&gt; &#xA;&lt;h2&gt;Running and deploying&lt;/h2&gt; &#xA;&lt;p&gt;Since all Publish websites are implemented as Swift packages, they can be generated simply by opening up a website’s package in Xcode (by opening its &lt;code&gt;Package.swift&lt;/code&gt; file), and then running it using the &lt;code&gt;Product &amp;gt; Run&lt;/code&gt; command (or &lt;code&gt;⌘+R&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Publish can also facilitate the deployment of websites to external servers through its &lt;code&gt;DeploymentMethod&lt;/code&gt; API, and ships with built-in implementations for Git and GitHub-based deployments. To define a deployment method for a website, add the &lt;code&gt;deploy&lt;/code&gt; step to your publishing pipeline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try DeliciousRecipes().publish(using: [&#xA;    ...&#xA;    .deploy(using: .gitHub(&#34;johnsundell/delicious-recipes&#34;))&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even when added to a pipeline, deployment steps are disabled by default, and are only executed when the &lt;code&gt;--deploy&lt;/code&gt; command line flag was passed (which can be added through Xcode’s &lt;code&gt;Product &amp;gt; Scheme &amp;gt; Edit Scheme...&lt;/code&gt; menu), or by running the command line tool using &lt;code&gt;publish deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Publish can also start a &lt;code&gt;localhost&lt;/code&gt; web server for local testing and development, by using the &lt;code&gt;publish run&lt;/code&gt; command. To regenerate site content with the server running, use Product &amp;gt; Run on your site&#39;s package in Xcode.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;To quickly get started with Publish, install the command line tool by first cloning this repository, and then run &lt;code&gt;make&lt;/code&gt; within the cloned folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/JohnSundell/Publish.git&#xA;$ cd Publish&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you encounter an error while running &lt;code&gt;make&lt;/code&gt;, ensure that you have your Command Line Tools location set from Xcode&#39;s preferences. It&#39;s in Preferences &amp;gt; Locations &amp;gt; Locations &amp;gt; Command Line Tools. The dropdown will be blank if it hasn&#39;t been set yet.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, create a new folder for your new website project and simply run &lt;code&gt;publish new&lt;/code&gt; within it to get started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir MyWebsite&#xA;$ cd MyWebsite&#xA;$ publish new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, run &lt;code&gt;open Package.swift&lt;/code&gt; to open up the project in Xcode to start building your new website.&lt;/p&gt; &#xA;&lt;h2&gt;Additional documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find a growing collection of additional documentation about Publish’s various features and capabilities within the &lt;a href=&#34;https://raw.githubusercontent.com/JohnSundell/Publish/master/Documentation&#34;&gt;Documentation folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Design and goals&lt;/h2&gt; &#xA;&lt;p&gt;Publish was first and foremost designed to be a powerful and heavily customizable tool for building static websites in Swift — starting with &lt;a href=&#34;https://swiftbysundell.com&#34;&gt;Swift by Sundell&lt;/a&gt;, a website which has over 300 individual pages and a pipeline consisting of over 25 publishing steps.&lt;/p&gt; &#xA;&lt;p&gt;While the goal is definitely also to make Publish as accessible and easy to use as possible, it will most likely keep being a quite low-level tool that favors code-level control over file system configuration files, and customizability over strongly held conventions.&lt;/p&gt; &#xA;&lt;p&gt;The main trade-off of that design is that Publish will likely have a steeper learning curve than most other static site generators, but hopefully it’ll also offer a much greater degree of power, flexibility and type safety as a result. Over time, and with the community’s help, we should be able to make that learning curve much less steep though — through much more thorough documentation and examples, and through shared tools and convenience APIs.&lt;/p&gt; &#xA;&lt;p&gt;Publish was also designed with code reuse in mind, and hopefully a much larger selection of themes, tools, plugins and other extensions will be developed by the community over time.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions and support&lt;/h2&gt; &#xA;&lt;p&gt;Publish is developed completely in the open, and your contributions are more than welcome.&lt;/p&gt; &#xA;&lt;p&gt;Before you start using Publish in any of your projects, it’s highly recommended that you spend a few minutes familiarizing yourself with its documentation and internal implementation, so that you’ll be ready to tackle any issues or edge cases that you might encounter.&lt;/p&gt; &#xA;&lt;p&gt;Since this is a very young project, it’s likely to have many limitations and missing features, which is something that can really only be discovered and addressed as more people start using it. While Publish is used in production to build all of &lt;a href=&#34;https://swiftbysundell.com&#34;&gt;Swift by Sundell&lt;/a&gt;, it’s recommended that you first try it out for your specific use case, to make sure it supports the features that you need.&lt;/p&gt; &#xA;&lt;p&gt;This project does not come with GitHub Issues-based support, and users are instead encouraged to become active participants in its continued development — by fixing any bugs that they encounter, or by improving the documentation wherever it’s found to be lacking.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to make a change, &lt;a href=&#34;https://github.com/JohnSundell/Publish/pull/new&#34;&gt;open a Pull Request&lt;/a&gt; — even if it just contains a draft of the changes you’re planning, or a test that reproduces an issue — and we can discuss it further from there.&lt;/p&gt; &#xA;&lt;p&gt;Hope you’ll enjoy using Publish!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JohnEstropia/CoreStore</title>
    <updated>2022-07-13T01:57:25Z</updated>
    <id>tag:github.com,2022-07-13:/JohnEstropia/CoreStore</id>
    <link href="https://github.com/JohnEstropia/CoreStore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unleashing the real power of Core Data with the elegance and safety of Swift&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;CoreStore&#34; src=&#34;https://github.com/JohnEstropia/CoreStore/raw/develop/CoreStore.png&#34; width=&#34;614&#34;&gt; &lt;br&gt; &lt;br&gt; Unleashing the real power of Core Data with the elegance and safety of Swift &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://app.bitrise.io/app/e736852157296019#/builds&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;https://img.shields.io/bitrise/e736852157296019/master.svg?label=build&amp;amp;token=vhgAmaiF3tWZoQyFLkKM7g&amp;amp;logo=bitrise&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/commits&#34;&gt;&lt;img alt=&#34;Last Commit&#34; src=&#34;https://img.shields.io/github/last-commit/johnestropia/corestore.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/CoreStore&#34;&gt;&lt;img alt=&#34;Platform&#34; src=&#34;https://img.shields.io/cocoapods/p/CoreStore.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/master/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/cocoapods/l/CoreStore.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt;Dependency managers&lt;br&gt; &lt;a href=&#34;https://cocoapods.org/pods/CoreStore&#34;&gt;&lt;img alt=&#34;Cocoapods compatible&#34; src=&#34;https://img.shields.io/cocoapods/v/CoreStore.svg?style=flat&amp;amp;label=Cocoapods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img alt=&#34;Carthage compatible&#34; src=&#34;https://img.shields.io/badge/Carthage-compatible-16a085.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/source-compatibility/#current-list-of-projects&#34;&gt;&lt;img alt=&#34;Swift Package Manager compatible&#34; src=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt;Contact&lt;br&gt; &lt;a href=&#34;http://swift-corestore-slack.herokuapp.com/&#34;&gt;&lt;img alt=&#34;Join us on Slack!&#34; src=&#34;http://swift-corestore-slack.herokuapp.com/badge.svg?logo=slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/JohnEstropia&#34;&gt;&lt;img alt=&#34;Reach me on Twitter!&#34; src=&#34;https://img.shields.io/badge/twitter-%40JohnEstropia-3498db.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/JohnEstropia&#34;&gt;&lt;img alt=&#34;Sponsor&#34; src=&#34;https://img.shields.io/badge/%E2%9D%A4-Sponsor-ff69bf&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swift 5.5:&lt;/strong&gt; iOS 11+ / macOS 10.13+ / watchOS 4.0+ / tvOS 11.0+&lt;/li&gt; &#xA; &lt;li&gt;Previously supported Swift versions: &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/tree/8.0.1&#34;&gt;Swift 5.4&lt;/a&gt;, &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/tree/7.3.1&#34;&gt;Swift 5.3&lt;/a&gt;, &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/tree/7.0.4&#34;&gt;Swift 5.1&lt;/a&gt;, &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/tree/6.3.2&#34;&gt;Swift 5.0&lt;/a&gt;, &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/tree/6.2.1&#34;&gt;Swift 4.2&lt;/a&gt;, &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/tree/4.2.3&#34;&gt;Swift 3.2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Upgrading from previous CoreStore versions? Check out the &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#features&#34;&gt;🆕 features&lt;/a&gt; and make sure to read the &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/releases&#34;&gt;Change logs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CoreStore is part of the &lt;a href=&#34;https://swift.org/source-compatibility/#current-list-of-projects&#34;&gt;Swift Source Compatibility projects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#tldr-aka-sample-codes&#34;&gt;TL;DR (a.k.a. sample codes)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#why-use-corestore&#34;&gt;Why use CoreStore?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CoreStore Tutorials (All of these have demos in the &lt;strong&gt;Demo&lt;/strong&gt; app project!) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#setting-up&#34;&gt;Setting up&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#in-memory-store&#34;&gt;In-memory store&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#local-store&#34;&gt;Local store&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#migrations&#34;&gt;Migrations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#declaring-model-versions&#34;&gt;Declaring model versions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#starting-migrations&#34;&gt;Starting migrations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#progressive-migrations&#34;&gt;Progressive migrations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#forecasting-migrations&#34;&gt;Forecasting migrations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#custom-migrations&#34;&gt;Custom migrations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#saving-and-processing-transactions&#34;&gt;Saving and processing transactions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#transaction-types&#34;&gt;Transaction types&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#asynchronous-transactions&#34;&gt;Asynchronous transactions&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#synchronous-transactions&#34;&gt;Synchronous transactions&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#unsafe-transactions&#34;&gt;Unsafe transactions&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#creating-objects&#34;&gt;Creating objects&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#updating-objects&#34;&gt;Updating objects&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#deleting-objects&#34;&gt;Deleting objects&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#passing-objects-safely&#34;&gt;Passing objects safely&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#importing-data&#34;&gt;Importing data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#fetching-and-querying&#34;&gt;Fetching and querying&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#from-clause&#34;&gt;&lt;code&gt;From&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#fetching&#34;&gt;Fetching&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#where-clause&#34;&gt;&lt;code&gt;Where&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#orderby-clause&#34;&gt;&lt;code&gt;OrderBy&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#tweak-clause&#34;&gt;&lt;code&gt;Tweak&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#querying&#34;&gt;Querying&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#selectt-clause&#34;&gt;&lt;code&gt;Select&amp;lt;T&amp;gt;&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#groupby-clause&#34;&gt;&lt;code&gt;GroupBy&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#logging-and-error-reporting&#34;&gt;Logging and error reporting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observing-changes-and-notifications&#34;&gt;Observing changes and notifications&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-a-single-property&#34;&gt;Observe a single property&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-a-single-objects-updates&#34;&gt;Observe a single object&#39;s updates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-a-single-objects-per-property-updates&#34;&gt;Observe a single object&#39;s per-property updates&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-a-diffable-list&#34;&gt;Observe a diffable list&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-detailed-list-changes&#34;&gt;Observe detailed list changes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#type-safe-corestoreobjects&#34;&gt;Type-safe &lt;code&gt;CoreStoreObject&lt;/code&gt;s&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#new-field-property-wrapper-syntax&#34;&gt;New &lt;code&gt;@Field&lt;/code&gt; Property Wrapper syntax&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#fieldstored&#34;&gt;&lt;code&gt;@Field.Stored&lt;/code&gt; &lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#fieldvirtual&#34;&gt;&lt;code&gt;@Field.Virtual&lt;/code&gt; &lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#fieldcoded&#34;&gt;&lt;code&gt;@Field.Coded&lt;/code&gt; &lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#fieldrelationship&#34;&gt;&lt;code&gt;@Field.Relationship&lt;/code&gt; &lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#field-usage-notes&#34;&gt;&lt;code&gt;@Field&lt;/code&gt; usage notes&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#versionlocks&#34;&gt;&lt;code&gt;VersionLock&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#reactive-programming&#34;&gt;Reactive Programming&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#rxswift&#34;&gt;RxSwift&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#combine&#34;&gt;Combine&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#datastackreactive&#34;&gt;&lt;code&gt;DataStack.reactive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#listpublisherreactive&#34;&gt;&lt;code&gt;ListPublisher.reactive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#objectpublisherreactive&#34;&gt;&lt;code&gt;ObjectPublisher.reactive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#swiftui-utilities&#34;&gt;SwiftUI Utilities&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#swiftui-views&#34;&gt;SwiftUI Views`&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#listreader&#34;&gt;&lt;code&gt;ListReader&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#objectreader&#34;&gt;&lt;code&gt;ObjectReader&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#swiftui-property-wrappers&#34;&gt;SwiftUI Property Wrappers&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#liststate&#34;&gt;&lt;code&gt;ListState&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#objectstate&#34;&gt;&lt;code&gt;ObjectState&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#swiftui-extensions&#34;&gt;SwiftUI Extensions&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#foreach&#34;&gt;&lt;code&gt;ForEach&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#changesets&#34;&gt;Changesets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#who-uses-corestore&#34;&gt;Who uses CoreStore?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TL;DR (a.k.a. sample codes)&lt;/h2&gt; &#xA;&lt;p&gt;Pure-Swift models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Person: CoreStoreObject {&#xA;    @Field.Stored(&#34;name&#34;)&#xA;    var name: String = &#34;&#34;&#xA;    &#xA;    @Field.Relationship(&#34;pets&#34;, inverse: \Dog.$master)&#xA;    var pets: Set&amp;lt;Dog&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Classic &lt;code&gt;NSManagedObject&lt;/code&gt;s also supported)&lt;/p&gt; &#xA;&lt;p&gt;Setting-up with progressive migration support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack = DataStack(&#xA;    xcodeModelName: &#34;MyStore&#34;,&#xA;    migrationChain: [&#34;MyStore&#34;, &#34;MyStoreV2&#34;, &#34;MyStoreV3&#34;]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding a store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.addStorage(&#xA;    SQLiteStore(fileName: &#34;MyStore.sqlite&#34;),&#xA;    completion: { (result) -&amp;gt; Void in&#xA;        // ...&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting transactions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let person = transaction.create(Into&amp;lt;Person&amp;gt;())&#xA;        person.name = &#34;John Smith&#34;&#xA;        person.age = 42&#xA;    },&#xA;    completion: { (result) -&amp;gt; Void in&#xA;        switch result {&#xA;        case .success: print(&#34;success!&#34;)&#xA;        case .failure(let error): print(error)&#xA;        }&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fetching objects (simple):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let people = try dataStack.fetchAll(From&amp;lt;Person&amp;gt;())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fetching objects (complex):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let people = try dataStack.fetchAll(&#xA;    From&amp;lt;Person&amp;gt;()&#xA;        .where(\.age &amp;gt; 30),&#xA;        .orderBy(.ascending(\.name), .descending(.\age)),&#xA;        .tweak({ $0.includesPendingChanges = false })&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Querying values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let maxAge = try dataStack.queryValue(&#xA;    From&amp;lt;Person&amp;gt;()&#xA;        .select(Int.self, .maximum(\.age))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But really, there&#39;s a reason I wrote this huge &lt;em&gt;README&lt;/em&gt;. Read up on the details!&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;strong&gt;Demo&lt;/strong&gt; app project for sample codes as well!&lt;/p&gt; &#xA;&lt;h2&gt;Why use CoreStore?&lt;/h2&gt; &#xA;&lt;p&gt;CoreStore was (and is) heavily shaped by real-world needs of developing data-dependent apps. It enforces safe and convenient Core Data usage while letting you take advantage of the industry&#39;s encouraged best practices.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#swiftui-utilities&#34;&gt;SwiftUI&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#combine&#34;&gt;Combine&lt;/a&gt; API utilities.&lt;/strong&gt; &lt;code&gt;ListPublisher&lt;/code&gt;s and &lt;code&gt;ObjectPublisher&lt;/code&gt;s now have their &lt;code&gt;@ListState&lt;/code&gt; and &lt;code&gt;@ObjectState&lt;/code&gt; SwiftUI property wrappers. Combine &lt;code&gt;Publisher&lt;/code&gt; s are also available through the &lt;code&gt;ListPublisher.reactive&lt;/code&gt;, &lt;code&gt;ObjectPublisher.reactive&lt;/code&gt;, and &lt;code&gt;DataStack.reactive&lt;/code&gt; namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backwards-portable &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-a-diffable-list&#34;&gt;DiffableDataSources implementation&lt;/a&gt;!&lt;/strong&gt; &lt;code&gt;UITableViews&lt;/code&gt; and &lt;code&gt;UICollectionViews&lt;/code&gt; now have a new ally: &lt;code&gt;ListPublisher&lt;/code&gt;s provide diffable snapshots that make reloading animations very easy and very safe. Say goodbye to &lt;code&gt;UITableViews&lt;/code&gt; and &lt;code&gt;UICollectionViews&lt;/code&gt; reload errors!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;💎Tight design around Swift’s code elegance and type safety.&lt;/strong&gt; CoreStore fully utilizes Swift&#39;s community-driven language features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🚦Safer concurrency architecture.&lt;/strong&gt; CoreStore makes it hard to fall into common concurrency mistakes. The main &lt;code&gt;NSManagedObjectContext&lt;/code&gt; is strictly read-only, while all updates are done through serial &lt;em&gt;transactions&lt;/em&gt;. &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#saving-and-processing-transactions&#34;&gt;Saving and processing transactions&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🔍Clean fetching and querying API.&lt;/strong&gt; Fetching objects is easy, but querying for raw aggregates (&lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, etc.) and raw property values is now just as convenient. &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#fetching-and-querying&#34;&gt;Fetching and querying&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🔭Type-safe, easy to configure observers.&lt;/strong&gt; You don&#39;t have to deal with the burden of setting up &lt;code&gt;NSFetchedResultsController&lt;/code&gt;s and KVO. As an added bonus, list and object observable types all support multiple observers. This means you can have multiple view controllers efficiently share a single resource! &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observing-changes-and-notifications&#34;&gt;Observing changes and notifications&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📥Efficient importing utilities.&lt;/strong&gt; Map your entities once with their corresponding import source (JSON for example), and importing from &lt;em&gt;transactions&lt;/em&gt; becomes elegant. Uniquing is also done with an efficient find-and-replace algorithm. &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#importing-data&#34;&gt;Importing data&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🗑Say goodbye to &lt;em&gt;.xcdatamodeld&lt;/em&gt; files!&lt;/strong&gt; While CoreStore supports &lt;code&gt;NSManagedObject&lt;/code&gt;s, it offers &lt;code&gt;CoreStoreObject&lt;/code&gt; whose subclasses can declare type-safe properties all in Swift code without the need to maintain separate resource files for the models. As bonus, these special properties support custom types, and can be used to create type-safe keypaths and queries. &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#type-safe-corestoreobjects&#34;&gt;Type-safe &lt;code&gt;CoreStoreObject&lt;/code&gt;s&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🔗Progressive migrations.&lt;/strong&gt; No need to think how to migrate from all previous model versions to your latest model. Just tell the &lt;code&gt;DataStack&lt;/code&gt; the sequence of version strings (&lt;code&gt;MigrationChain&lt;/code&gt;s) and CoreStore will automatically use progressive migrations when needed. &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#migrations&#34;&gt;Migrations&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easier custom migrations.&lt;/strong&gt; Say goodbye to &lt;em&gt;.xcmappingmodel&lt;/em&gt; files; CoreStore can now infer entity mappings when possible, while still allowing an easy way to write custom mappings. &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#migrations&#34;&gt;Migrations&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📝Plug-in your own logging framework.&lt;/strong&gt; Although a default logger is built-in, all logging, asserting, and error reporting can be funneled to &lt;code&gt;CoreStoreLogger&lt;/code&gt; protocol implementations. &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#logging-and-error-reporting&#34;&gt;Logging and error reporting&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;⛓Heavy support for multiple persistent stores per data stack.&lt;/strong&gt; CoreStore lets you manage separate stores in a single &lt;code&gt;DataStack&lt;/code&gt;, just the way &lt;em&gt;.xcdatamodeld&lt;/em&gt; configurations are designed to. CoreStore will also manage one stack by default, but you can create and manage as many as you need. &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#setting-up&#34;&gt;Setting up&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🎯Free to name entities and their class names independently.&lt;/strong&gt; CoreStore gets around a restriction with other Core Data wrappers where the entity name should be the same as the &lt;code&gt;NSManagedObject&lt;/code&gt; subclass name. CoreStore loads entity-to-class mappings from the managed object model file, so you can assign independent names for the entities and their class names.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;📙Full Documentation.&lt;/strong&gt; No magic here; all public classes, functions, properties, etc. have detailed &lt;em&gt;Apple Docs&lt;/em&gt;. This &lt;em&gt;README&lt;/em&gt; also introduces a lot of concepts and explains a lot of CoreStore&#39;s behavior.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ℹ️Informative (and pretty) logs.&lt;/strong&gt; All CoreStore and Core Data-related types now have very informative and pretty print outputs! &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#logging-and-error-reporting&#34;&gt;Logging and error reporting&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;🛡More extensive Unit Tests.&lt;/strong&gt; Extending CoreStore is safe without having to worry about breaking old behavior.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Have ideas that may benefit other Core Data users? &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/issues&#34;&gt;Feature Request&lt;/a&gt;s are welcome!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;For maximum safety and performance, CoreStore will enforce coding patterns and practices it was designed for. (Don&#39;t worry, it&#39;s not as scary as it sounds.) But it is advisable to understand the &#34;magic&#34; of CoreStore before you use it in your apps.&lt;/p&gt; &#xA;&lt;p&gt;If you are already familiar with the inner workings of CoreData, here is a mapping of &lt;code&gt;CoreStore&lt;/code&gt; abstractions:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;em&gt;Core Data&lt;/em&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;em&gt;CoreStore&lt;/em&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NSPersistentContainer&lt;/code&gt;&lt;br&gt;(.xcdatamodeld file)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DataStack&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NSPersistentStoreDescription&lt;/code&gt;&lt;br&gt;(&#34;Configuration&#34;s in the .xcdatamodeld file)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StorageInterface&lt;/code&gt; implementations&lt;br&gt;(&lt;code&gt;InMemoryStore&lt;/code&gt;, &lt;code&gt;SQLiteStore&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NSManagedObjectContext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;BaseDataTransaction&lt;/code&gt; subclasses&lt;br&gt;(&lt;code&gt;SynchronousDataTransaction&lt;/code&gt;, &lt;code&gt;AsynchronousDataTransaction&lt;/code&gt;, &lt;code&gt;UnsafeDataTransaction&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A lot of Core Data wrapper libraries set up their &lt;code&gt;NSManagedObjectContext&lt;/code&gt;s this way:&lt;/p&gt; &#xA;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3029684/16707160/984ef25c-4600-11e6-869f-8db7d2c63668.png&#34; alt=&#34;nested contexts&#34; height=&#34;380&#34;&gt; &#xA;&lt;p&gt;Nesting saves from child context to the root context ensures maximum data integrity between contexts without blocking the main queue. But &lt;a href=&#34;http://floriankugler.com/2013/04/29/concurrent-core-data-stack-performance-shootout/&#34;&gt;in reality&lt;/a&gt;, merging contexts is still by far faster than saving contexts. CoreStore&#39;s &lt;code&gt;DataStack&lt;/code&gt; takes the best of both worlds by treating the main &lt;code&gt;NSManagedObjectContext&lt;/code&gt; as a read-only context (or &#34;viewContext&#34;), and only allows changes to be made within &lt;em&gt;transactions&lt;/em&gt; on the child context:&lt;/p&gt; &#xA;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3029684/16707161/9adeb962-4600-11e6-8bc8-4ec85764dba4.png&#34; alt=&#34;nested contexts and merge hybrid&#34; height=&#34;292&#34;&gt; &#xA;&lt;p&gt;This allows for a butter-smooth main thread, while still taking advantage of safe nested contexts.&lt;/p&gt; &#xA;&lt;h2&gt;Setting up&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to initialize CoreStore is to add a default store to the default stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try CoreStoreDefaults.dataStack.addStorageAndWait()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This one-liner does the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Triggers the lazy-initialization of &lt;code&gt;CoreStoreDefaults.dataStack&lt;/code&gt; with a default &lt;code&gt;DataStack&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sets up the stack&#39;s &lt;code&gt;NSPersistentStoreCoordinator&lt;/code&gt;, the root saving &lt;code&gt;NSManagedObjectContext&lt;/code&gt;, and the read-only main &lt;code&gt;NSManagedObjectContext&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adds an &lt;code&gt;SQLiteStore&lt;/code&gt; in the &lt;em&gt;&#34;Application Support/&#xA;   &lt;bundle id&gt;&#xA;    &#34;&#xA;   &lt;/bundle&gt;&lt;/em&gt; directory (or the &lt;em&gt;&#34;Caches/&#xA;   &lt;bundle id&gt;&#xA;    &#34;&#xA;   &lt;/bundle&gt;&lt;/em&gt; directory on tvOS) with the file name &lt;em&gt;&#34;[App bundle name].sqlite&#34;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Creates and returns the &lt;code&gt;NSPersistentStore&lt;/code&gt; instance on success, or an &lt;code&gt;NSError&lt;/code&gt; on failure&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For most cases, this configuration is enough as it is. But for more hardcore settings, refer to this extensive example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dataStack = DataStack(&#xA;    xcodeModelName: &#34;MyModel&#34;, // loads from the &#34;MyModel.xcdatamodeld&#34; file&#xA;    migrationChain: [&#34;MyStore&#34;, &#34;MyStoreV2&#34;, &#34;MyStoreV3&#34;] // model versions for progressive migrations&#xA;)&#xA;let migrationProgress = dataStack.addStorage(&#xA;    SQLiteStore(&#xA;        fileURL: sqliteFileURL, // set the target file URL for the sqlite file&#xA;        configuration: &#34;Config2&#34;, // use entities from the &#34;Config2&#34; configuration in the .xcdatamodeld file&#xA;        localStorageOptions: .recreateStoreOnModelMismatch // if migration paths cannot be resolved, recreate the sqlite file&#xA;    ),&#xA;    completion: { (result) -&amp;gt; Void in&#xA;        switch result {&#xA;        case .success(let storage):&#xA;            print(&#34;Successfully added sqlite store: \(storage)&#34;)&#xA;        case .failure(let error):&#xA;            print(&#34;Failed adding sqlite store with error: \(error)&#34;)&#xA;        }&#xA;    }&#xA;)&#xA;&#xA;CoreStoreDefaults.dataStack = dataStack // pass the dataStack to CoreStore for easier access later on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡If you have never heard of &#34;Configurations&#34;, you&#39;ll find them in your &lt;em&gt;.xcdatamodeld&lt;/em&gt; file &lt;img src=&#34;https://cloud.githubusercontent.com/assets/3029684/8333192/e52cfaac-1acc-11e5-9902-08724f9f1324.png&#34; alt=&#34;xcode configurations screenshot&#34; height=&#34;212&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In our sample code above, note that you don&#39;t need to do the &lt;code&gt;CoreStoreDefaults.dataStack = dataStack&lt;/code&gt; line. You can just as well hold a reference to the &lt;code&gt;DataStack&lt;/code&gt; like below and call all its instance methods directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyViewController: UIViewController {&#xA;    let dataStack = DataStack(xcodeModelName: &#34;MyModel&#34;) // keep reference to the stack&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        do {&#xA;            try self.dataStack.addStorageAndWait(SQLiteStore.self)&#xA;        }&#xA;        catch { // ...&#xA;        }&#xA;    }&#xA;    func methodToBeCalledLaterOn() {&#xA;        let objects = self.dataStack.fetchAll(From&amp;lt;MyEntity&amp;gt;())&#xA;        print(objects)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡By default, CoreStore will initialize &lt;code&gt;NSManagedObject&lt;/code&gt;s from &lt;em&gt;.xcdatamodeld&lt;/em&gt; files, but you can create models completely from source code using &lt;code&gt;CoreStoreObject&lt;/code&gt;s and &lt;code&gt;CoreStoreSchema&lt;/code&gt;. To use this feature, refer to &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#type-safe-corestoreobjects&#34;&gt;Type-safe &lt;code&gt;CoreStoreObject&lt;/code&gt;s&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Notice that in our previous examples, &lt;code&gt;addStorageAndWait(_:)&lt;/code&gt; and &lt;code&gt;addStorage(_:completion:)&lt;/code&gt; both accept either &lt;code&gt;InMemoryStore&lt;/code&gt;, or &lt;code&gt;SQLiteStore&lt;/code&gt;. These implement the &lt;code&gt;StorageInterface&lt;/code&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;In-memory store&lt;/h3&gt; &#xA;&lt;p&gt;The most basic &lt;code&gt;StorageInterface&lt;/code&gt; concrete type is the &lt;code&gt;InMemoryStore&lt;/code&gt;, which just stores objects in memory. Since &lt;code&gt;InMemoryStore&lt;/code&gt;s always start with a fresh empty data, they do not need any migration information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dataStack.addStorageAndWait(&#xA;    InMemoryStore(&#xA;        configuration: &#34;Config2&#34; // optional. Use entities from the &#34;Config2&#34; configuration in the .xcdatamodeld file&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asynchronous variant:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dataStack.addStorage(&#xA;    InMemoryStore(&#xA;        configuration: &#34;Config2&#xA;    ),&#xA;    completion: { storage in&#xA;        // ...&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(A reactive-programming variant of this method is explained in detail in the section on &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#datastackreactive&#34;&gt;&lt;code&gt;DataStack&lt;/code&gt; Combine publishers&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Local Store&lt;/h3&gt; &#xA;&lt;p&gt;The most common &lt;code&gt;StorageInterface&lt;/code&gt; you will probably use is the &lt;code&gt;SQLiteStore&lt;/code&gt;, which saves data in a local SQLite file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let migrationProgress = dataStack.addStorage(&#xA;    SQLiteStore(&#xA;        fileName: &#34;MyStore.sqlite&#34;,&#xA;        configuration: &#34;Config2&#34;, // optional. Use entities from the &#34;Config2&#34; configuration in the .xcdatamodeld file&#xA;        migrationMappingProviders: [Bundle.main], // optional. The bundles that contain required .xcmappingmodel files&#xA;        localStorageOptions: .recreateStoreOnModelMismatch // optional. Provides settings that tells the DataStack how to setup the persistent store&#xA;    ),&#xA;    completion: { /* ... */ }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;em&gt;SQLiteStore.swift&lt;/em&gt; source documentation for detailed explanations for each of the default values.&lt;/p&gt; &#xA;&lt;p&gt;CoreStore can decide the default values for these properties, so &lt;code&gt;SQLiteStore&lt;/code&gt;s can be initialized with no arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dataStack.addStorageAndWait(SQLiteStore())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The asynchronous variant of this method is explained further in the next section on &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#starting-migrations&#34;&gt;Migrations&lt;/a&gt;, and a reactive-programming variant in the section on &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#datastackreactive&#34;&gt;&lt;code&gt;DataStack&lt;/code&gt; Combine publishers&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;The file-related properties of &lt;code&gt;SQLiteStore&lt;/code&gt; are actually requirements of another protocol that it implements, the &lt;code&gt;LocalStorage&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol LocalStorage: StorageInterface {&#xA;    var fileURL: NSURL { get }&#xA;    var migrationMappingProviders: [SchemaMappingProvider] { get }&#xA;    var localStorageOptions: LocalStorageOptions { get }&#xA;    func dictionary(forOptions: LocalStorageOptions) -&amp;gt; [String: AnyObject]?&#xA;    func cs_eraseStorageAndWait(metadata: [String: Any], soureModelHint: NSManagedObjectModel?) throws&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have custom &lt;code&gt;NSIncrementalStore&lt;/code&gt; or &lt;code&gt;NSAtomicStore&lt;/code&gt; subclasses, you can implement this protocol and use it similarly to &lt;code&gt;SQLiteStore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migrations&lt;/h2&gt; &#xA;&lt;h3&gt;Declaring model versions&lt;/h3&gt; &#xA;&lt;p&gt;Model versions are now expressed as a first-class protocol, &lt;code&gt;DynamicSchema&lt;/code&gt;. CoreStore currently supports the following schema classes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;XcodeDataModelSchema&lt;/code&gt;&lt;/strong&gt;: a model version with entities loaded from a &lt;em&gt;.xcdatamodeld&lt;/em&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;CoreStoreSchema&lt;/code&gt;&lt;/strong&gt;: a model version created with &lt;code&gt;CoreStoreObject&lt;/code&gt; entities. &lt;em&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#type-safe-corestore-objects&#34;&gt;Type-safe &lt;code&gt;CoreStoreObject&lt;/code&gt;s&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;UnsafeDataModelSchema&lt;/code&gt;&lt;/strong&gt;: a model version created with an existing &lt;code&gt;NSManagedObjectModel&lt;/code&gt; instance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the &lt;code&gt;DynamicSchema&lt;/code&gt; for all model versions are then collected within a single &lt;code&gt;SchemaHistory&lt;/code&gt; instance, which is then handed to the &lt;code&gt;DataStack&lt;/code&gt;. Here are some common use cases:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Multiple model versions grouped in a &lt;em&gt;.xcdatamodeld&lt;/em&gt; file (Core Data standard method)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;CoreStoreDefaults.dataStack = DataStack(&#xA;    xcodeModelName: &#34;MyModel&#34;,&#xA;    bundle: Bundle.main,&#xA;    migrationChain: [&#34;MyAppModel&#34;, &#34;MyAppModelV2&#34;, &#34;MyAppModelV3&#34;, &#34;MyAppModelV4&#34;]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;CoreStoreSchema&lt;/code&gt;-based model version (No &lt;em&gt;.xcdatamodeld&lt;/em&gt; file needed)&lt;/strong&gt; &lt;em&gt;(For more details, see also &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#type-safe-corestore-objects&#34;&gt;Type-safe &lt;code&gt;CoreStoreObject&lt;/code&gt;s&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Animal: CoreStoreObject {&#xA;    // ...&#xA;}&#xA;class Dog: Animal {&#xA;    // ...&#xA;}&#xA;class Person: CoreStoreObject {&#xA;    // ...&#xA;}&#xA;&#xA;CoreStoreDefaults.dataStack = DataStack(&#xA;    CoreStoreSchema(&#xA;        modelVersion: &#34;V1&#34;,&#xA;        entities: [&#xA;            Entity&amp;lt;Animal&amp;gt;(&#34;Animal&#34;, isAbstract: true),&#xA;            Entity&amp;lt;Dog&amp;gt;(&#34;Dog&#34;),&#xA;            Entity&amp;lt;Person&amp;gt;(&#34;Person&#34;)&#xA;        ]&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Models in a &lt;em&gt;.xcdatamodeld&lt;/em&gt; file during past app versions, but migrated to the new &lt;code&gt;CoreStoreSchema&lt;/code&gt; method&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Animal: CoreStoreObject {&#xA;    // ...&#xA;}&#xA;class Dog: Animal {&#xA;    // ...&#xA;}&#xA;class Person: CoreStoreObject {&#xA;    // ...&#xA;}&#xA;&#xA;let legacySchema = XcodeDataModelSchema.from(&#xA;    modelName: &#34;MyModel&#34;, // .xcdatamodeld name&#xA;    bundle: bundle,&#xA;    migrationChain: [&#34;MyAppModel&#34;, &#34;MyAppModelV2&#34;, &#34;MyAppModelV3&#34;, &#34;MyAppModelV4&#34;]&#xA;)&#xA;let newSchema = CoreStoreSchema(&#xA;    modelVersion: &#34;V1&#34;,&#xA;    entities: [&#xA;        Entity&amp;lt;Animal&amp;gt;(&#34;Animal&#34;, isAbstract: true),&#xA;        Entity&amp;lt;Dog&amp;gt;(&#34;Dog&#34;),&#xA;        Entity&amp;lt;Person&amp;gt;(&#34;Person&#34;)&#xA;    ]&#xA;)&#xA;CoreStoreDefaults.dataStack = DataStack(&#xA;    schemaHistory: SchemaHistory(&#xA;        legacySchema + [newSchema],&#xA;        migrationChain: [&#34;MyAppModel&#34;, &#34;MyAppModelV2&#34;, &#34;MyAppModelV3&#34;, &#34;MyAppModelV4&#34;, &#34;V1&#34;] &#xA;    )&#xA;)   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;CoreStoreSchema&lt;/code&gt;-based model versions with progressive migration&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias Animal = V2.Animal&#xA;typealias Dog = V2.Dog&#xA;typealias Person = V2.Person&#xA;enum V2 {&#xA;    class Animal: CoreStoreObject {&#xA;        // ...&#xA;    }&#xA;    class Dog: Animal {&#xA;        // ...&#xA;    }&#xA;    class Person: CoreStoreObject {&#xA;        // ...&#xA;    }&#xA;}&#xA;enum V1 {&#xA;    class Animal: CoreStoreObject {&#xA;        // ...&#xA;    }&#xA;    class Dog: Animal {&#xA;        // ...&#xA;    }&#xA;    class Person: CoreStoreObject {&#xA;        // ...&#xA;    }&#xA;}&#xA;&#xA;CoreStoreDefaults.dataStack = DataStack(&#xA;    CoreStoreSchema(&#xA;        modelVersion: &#34;V1&#34;,&#xA;        entities: [&#xA;            Entity&amp;lt;V1.Animal&amp;gt;(&#34;Animal&#34;, isAbstract: true),&#xA;            Entity&amp;lt;V1.Dog&amp;gt;(&#34;Dog&#34;),&#xA;            Entity&amp;lt;V1.Person&amp;gt;(&#34;Person&#34;)&#xA;        ]&#xA;    ),&#xA;    CoreStoreSchema(&#xA;        modelVersion: &#34;V2&#34;,&#xA;        entities: [&#xA;            Entity&amp;lt;V2.Animal&amp;gt;(&#34;Animal&#34;, isAbstract: true),&#xA;            Entity&amp;lt;V2.Dog&amp;gt;(&#34;Dog&#34;),&#xA;            Entity&amp;lt;V2.Person&amp;gt;(&#34;Person&#34;)&#xA;        ]&#xA;    ),&#xA;    migrationChain: [&#34;V1&#34;, &#34;V2&#34;]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Starting migrations&lt;/h3&gt; &#xA;&lt;p&gt;We have seen &lt;code&gt;addStorageAndWait(...)&lt;/code&gt; used to initialize our persistent store. As the method name&#39;s &lt;em&gt;~AndWait&lt;/em&gt; suffix suggests though, this method blocks so it should not do long tasks such as data migrations. In fact CoreStore will only attempt a synchronous &lt;strong&gt;lightweight&lt;/strong&gt; migration if you explicitly provide the &lt;code&gt;.allowSynchronousLightweightMigration&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dataStack.addStorageAndWait(&#xA;    SQLiteStore(&#xA;        fileURL: sqliteFileURL,&#xA;        localStorageOptions: .allowSynchronousLightweightMigration&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you do so, any model mismatch will be thrown as an error.&lt;/p&gt; &#xA;&lt;p&gt;In general though, if migrations are expected the asynchronous variant &lt;code&gt;addStorage(_:completion:)&lt;/code&gt; method is recommended instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let migrationProgress: Progress? = try dataStack.addStorage(&#xA;    SQLiteStore(&#xA;        fileName: &#34;MyStore.sqlite&#34;,&#xA;        configuration: &#34;Config2&#34;&#xA;    ),&#xA;    completion: { (result) -&amp;gt; Void in&#xA;        switch result {&#xA;        case .success(let storage):&#xA;            print(&#34;Successfully added sqlite store: \(storage)&#34;)&#xA;        case .failure(let error):&#xA;            print(&#34;Failed adding sqlite store with error: \(error)&#34;)&#xA;        }&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;completion&lt;/code&gt; block reports a &lt;code&gt;SetupResult&lt;/code&gt; that indicates success or failure.&lt;/p&gt; &#xA;&lt;p&gt;(A reactive-programming variant of this method is explained further in the section on &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#datastackreactive&#34;&gt;&lt;code&gt;DataStack&lt;/code&gt; Combine publishers&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Notice that this method also returns an optional &lt;code&gt;Progress&lt;/code&gt;. If &lt;code&gt;nil&lt;/code&gt;, no migrations are needed, thus progress reporting is unnecessary as well. If not &lt;code&gt;nil&lt;/code&gt;, you can use this to track migration progress by using standard KVO on the &lt;code&gt;&#34;fractionCompleted&#34;&lt;/code&gt; key, or by using a closure-based utility exposed in &lt;em&gt;Progress+Convenience.swift&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;migrationProgress?.setProgressHandler { [weak self] (progress) -&amp;gt; Void in&#xA;    self?.progressView?.setProgress(Float(progress.fractionCompleted), animated: true)&#xA;    self?.percentLabel?.text = progress.localizedDescription // &#34;50% completed&#34;&#xA;    self?.stepLabel?.text = progress.localizedAdditionalDescription // &#34;0 of 2&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This closure is executed on the main thread so UIKit and AppKit calls can be done safely.&lt;/p&gt; &#xA;&lt;h3&gt;Progressive migrations&lt;/h3&gt; &#xA;&lt;p&gt;By default, CoreStore uses Core Data&#39;s default automatic migration mechanism. In other words, CoreStore will try to migrate the existing persistent store until it matches the &lt;code&gt;SchemaHistory&lt;/code&gt;&#39;s &lt;code&gt;currentModelVersion&lt;/code&gt;. If no mapping model path is found from the store&#39;s version to the data model&#39;s version, CoreStore gives up and reports an error.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;DataStack&lt;/code&gt; lets you specify hints on how to break a migration into several sub-migrations using a &lt;code&gt;MigrationChain&lt;/code&gt;. This is typically passed to the &lt;code&gt;DataStack&lt;/code&gt; initializer and will be applied to all stores added to the &lt;code&gt;DataStack&lt;/code&gt; with &lt;code&gt;addSQLiteStore(...)&lt;/code&gt; and its variants:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dataStack = DataStack(migrationChain: &#xA;    [&#34;MyAppModel&#34;, &#34;MyAppModelV2&#34;, &#34;MyAppModelV3&#34;, &#34;MyAppModelV4&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The most common usage is to pass in the model version (&lt;em&gt;.xcdatamodeld&lt;/em&gt; version names for &lt;code&gt;NSManagedObject&lt;/code&gt;s, or the &lt;code&gt;modelName&lt;/code&gt; for &lt;code&gt;CoreStoreSchema&lt;/code&gt;s) in increasing order as above.&lt;/p&gt; &#xA;&lt;p&gt;For more complex, non-linear migration paths, you can also pass in a version tree that maps the key-values to the source-destination versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dataStack = DataStack(migrationChain: [&#xA;    &#34;MyAppModel&#34;: &#34;MyAppModelV3&#34;,&#xA;    &#34;MyAppModelV2&#34;: &#34;MyAppModelV4&#34;,&#xA;    &#34;MyAppModelV3&#34;: &#34;MyAppModelV4&#34;&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows for different migration paths depending on the starting version. The example above resolves to the following paths:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MyAppModel-MyAppModelV3-MyAppModelV4&lt;/li&gt; &#xA; &lt;li&gt;MyAppModelV2-MyAppModelV4&lt;/li&gt; &#xA; &lt;li&gt;MyAppModelV3-MyAppModelV4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Initializing with empty values (either &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, or &lt;code&gt;[:]&lt;/code&gt;) instructs the &lt;code&gt;DataStack&lt;/code&gt; to disable progressive migrations and revert to the default migration behavior (i.e. use the &lt;em&gt;.xcdatamodeld&lt;/em&gt;&#39;s current version as the final version):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dataStack = DataStack(migrationChain: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;MigrationChain&lt;/code&gt; is validated when passed to the &lt;code&gt;DataStack&lt;/code&gt; and unless it is empty, will raise an assertion if any of the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a version appears twice in an array&lt;/li&gt; &#xA; &lt;li&gt;a version appears twice as a key in a dictionary literal&lt;/li&gt; &#xA; &lt;li&gt;a loop is found in any of the paths&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️&lt;strong&gt;Important: If a &lt;code&gt;MigrationChain&lt;/code&gt; is specified, the &lt;em&gt;.xcdatamodeld&lt;/em&gt;&#39;s &#34;Current Version&#34; will be bypassed&lt;/strong&gt; and the &lt;code&gt;MigrationChain&lt;/code&gt;&#39;s leafmost version will be the &lt;code&gt;DataStack&lt;/code&gt;&#39;s base model version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Forecasting migrations&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes migrations are huge and you may want prior information so your app could display a loading screen, or to display a confirmation dialog to the user. For this, CoreStore provides a &lt;code&gt;requiredMigrationsForStorage(_:)&lt;/code&gt; method you can use to inspect a persistent store before you actually call &lt;code&gt;addStorageAndWait(_:)&lt;/code&gt; or &lt;code&gt;addStorage(_:completion:)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let storage = SQLiteStorage(fileName: &#34;MyStore.sqlite&#34;)&#xA;    let migrationTypes: [MigrationType] = try dataStack.requiredMigrationsForStorage(storage)&#xA;    if migrationTypes.count &amp;gt; 1&#xA;        || (migrationTypes.filter { $0.isHeavyweightMigration }.count) &amp;gt; 0 {&#xA;        // ... will migrate more than once. Show special waiting screen&#xA;    }&#xA;    else if migrationTypes.count &amp;gt; 0 {&#xA;        // ... will migrate just once. Show simple activity indicator&#xA;    }&#xA;    else {&#xA;        // ... Do nothing&#xA;    }&#xA;    dataStack.addStorage(storage, completion: { /* ... */ })&#xA;}&#xA;catch {&#xA;    // ... either inspection of the store failed, or if no mapping model was found/inferred&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;requiredMigrationsForStorage(_:)&lt;/code&gt; returns an array of &lt;code&gt;MigrationType&lt;/code&gt;s, where each item in the array may be either of the following values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;case lightweight(sourceVersion: String, destinationVersion: String)&#xA;case heavyweight(sourceVersion: String, destinationVersion: String)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each &lt;code&gt;MigrationType&lt;/code&gt; indicates the migration type for each step in the &lt;code&gt;MigrationChain&lt;/code&gt;. Use these information as fit for your app.&lt;/p&gt; &#xA;&lt;h3&gt;Custom migrations&lt;/h3&gt; &#xA;&lt;p&gt;CoreStore offers several ways to declare migration mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CustomSchemaMappingProvider&lt;/code&gt;: A mapping provider that infers mapping initially, but also accepts custom mappings for specified entities. This was added to support custom migrations with &lt;code&gt;CoreStoreObject&lt;/code&gt;s as well, but may also be used with &lt;code&gt;NSManagedObject&lt;/code&gt;s.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XcodeSchemaMappingProvider&lt;/code&gt;: A mapping provider which loads entity mappings from &lt;em&gt;.xcmappingmodel&lt;/em&gt; files in a specified &lt;code&gt;Bundle&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;InferredSchemaMappingProvider&lt;/code&gt;: The default mapping provider which tries to infer model migration between two &lt;code&gt;DynamicSchema&lt;/code&gt; versions either by searching all &lt;em&gt;.xcmappingmodel&lt;/em&gt; files from &lt;code&gt;Bundle.allBundles&lt;/code&gt;, or by relying on lightweight migration if possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These mapping providers conform to &lt;code&gt;SchemaMappingProvider&lt;/code&gt; and can be passed to &lt;code&gt;SQLiteStore&lt;/code&gt;&#39;s initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dataStack = DataStack(migrationChain: [&#34;MyAppModel&#34;, &#34;MyAppModelV2&#34;, &#34;MyAppModelV3&#34;, &#34;MyAppModelV4&#34;])&#xA;_ = try dataStack.addStorage(&#xA;    SQLiteStore(&#xA;        fileName: &#34;MyStore.sqlite&#34;,&#xA;        migrationMappingProviders: [&#xA;            XcodeSchemaMappingProvider(from: &#34;V1&#34;, to: &#34;V2&#34;, mappingModelBundle: Bundle.main),&#xA;            CustomSchemaMappingProvider(from: &#34;V2&#34;, to: &#34;V3&#34;, entityMappings: [.deleteEntity(&#34;Person&#34;) ])&#xA;        ]&#xA;    ),&#xA;    completion: { (result) -&amp;gt; Void in&#xA;        // ...&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For version migrations present in the &lt;code&gt;DataStack&lt;/code&gt;&#39;s &lt;code&gt;MigrationChain&lt;/code&gt; but not handled by any of the &lt;code&gt;SQLiteStore&lt;/code&gt;&#39;s &lt;code&gt;migrationMappingProviders&lt;/code&gt; array, CoreStore will automatically try to use &lt;code&gt;InferredSchemaMappingProvider&lt;/code&gt; as fallback. Finally if the &lt;code&gt;InferredSchemaMappingProvider&lt;/code&gt; could not resolve any mapping, the migration will fail and the &lt;code&gt;DataStack.addStorage(...)&lt;/code&gt; method will report the failure.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;CustomSchemaMappingProvider&lt;/code&gt;, more granular updates are supported through the dynamic objects &lt;code&gt;UnsafeSourceObject&lt;/code&gt; and &lt;code&gt;UnsafeDestinationObject&lt;/code&gt;. The example below allows the migration to conditionally ignore some objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person_v2_to_v3_mapping = CustomSchemaMappingProvider(&#xA;    from: &#34;V2&#34;,&#xA;    to: &#34;V3&#34;,&#xA;    entityMappings: [&#xA;        .transformEntity(&#xA;            sourceEntity: &#34;Person&#34;,&#xA;            destinationEntity: &#34;Person&#34;,&#xA;            transformer: { (sourceObject: UnsafeSourceObject, createDestinationObject: () -&amp;gt; UnsafeDestinationObject) in&#xA;                &#xA;                if (sourceObject[&#34;isVeryOldAccount&#34;] as! Bool?) == true {&#xA;                    return // this account is too old, don&#39;t migrate &#xA;                }&#xA;                // migrate the rest&#xA;                let destinationObject = createDestinationObject()&#xA;                destinationObject.enumerateAttributes { (attribute, sourceAttribute) in&#xA;                &#xA;                if let sourceAttribute = sourceAttribute {&#xA;                    destinationObject[attribute] = sourceObject[sourceAttribute]&#xA;                }&#xA;            }&#xA;        ) &#xA;    ]&#xA;)&#xA;SQLiteStore(&#xA;    fileName: &#34;MyStore.sqlite&#34;,&#xA;    migrationMappingProviders: [person_v2_to_v3_mapping]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;UnsafeSourceObject&lt;/code&gt; is a read-only proxy for an object existing in the source model version. The &lt;code&gt;UnsafeDestinationObject&lt;/code&gt; is a read-write object that is inserted (optionally) to the destination model version. Both classes&#39; properties are accessed through key-value-coding.&lt;/p&gt; &#xA;&lt;h2&gt;Saving and processing transactions&lt;/h2&gt; &#xA;&lt;p&gt;To ensure deterministic state for objects in the read-only &lt;code&gt;NSManagedObjectContext&lt;/code&gt;, CoreStore does not expose API&#39;s for updating and saving directly from the main context (or any other context for that matter.) Instead, you spawn &lt;em&gt;transactions&lt;/em&gt; from &lt;code&gt;DataStack&lt;/code&gt; instances:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dataStack = self.dataStack&#xA;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        // make changes&#xA;    },&#xA;    completion: { (result) -&amp;gt; Void in&#xA;        // ...&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Transaction closures automatically save changes once the closures completes. To cancel and rollback a transaction, throw a &lt;code&gt;CoreStoreError.userCancelled&lt;/code&gt; from inside the closure by calling &lt;code&gt;try transaction.cancel()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        // ...&#xA;        if shouldCancel {&#xA;            try transaction.cancel()&#xA;        }&#xA;        // ...&#xA;    },&#xA;    completion: { (result) -&amp;gt; Void in&#xA;        if case .failure(.userCancelled) = result {&#xA;            // ... cancelled&#xA;        }&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️&lt;strong&gt;Important:&lt;/strong&gt; Never use &lt;code&gt;try?&lt;/code&gt; or &lt;code&gt;try!&lt;/code&gt; on a &lt;code&gt;transaction.cancel()&lt;/code&gt; call. Always use &lt;code&gt;try&lt;/code&gt;. Using &lt;code&gt;try?&lt;/code&gt; will swallow the cancellation and the transaction will proceed to save as normal. Using &lt;code&gt;try!&lt;/code&gt; will crash the app as &lt;code&gt;transaction.cancel()&lt;/code&gt; will &lt;em&gt;always&lt;/em&gt; throw an error.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The examples above use &lt;code&gt;perform(asynchronous:...)&lt;/code&gt;, but there are actually 3 types of transactions at your disposal: &lt;em&gt;asynchronous&lt;/em&gt;, &lt;em&gt;synchronous&lt;/em&gt;, and &lt;em&gt;unsafe&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Transaction types&lt;/h3&gt; &#xA;&lt;h4&gt;Asynchronous transactions&lt;/h4&gt; &#xA;&lt;p&gt;are spawned from &lt;code&gt;perform(asynchronous:...)&lt;/code&gt;. This method returns immediately and executes its closure from a background serial queue. The return value for the closure is declared as a generic type, so any value returned from the closure can be passed to the completion result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Bool in&#xA;        // make changes&#xA;        return transaction.hasChanges&#xA;    },&#xA;    completion: { (result) -&amp;gt; Void in&#xA;        switch result {&#xA;        case .success(let hasChanges): print(&#34;success! Has changes? \(hasChanges)&#34;)&#xA;        case .failure(let error): print(error)&#xA;        }&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The success and failure can also be declared as separate handlers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Int in&#xA;        // make changes&#xA;        return transaction.delete(objects)&#xA;    },&#xA;    success: { (numberOfDeletedObjects: Int) -&amp;gt; Void in&#xA;        print(&#34;success! Deleted \(numberOfDeletedObjects) objects&#34;)&#xA;    },&#xA;    failure: { (error) -&amp;gt; Void in&#xA;        print(error)&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️Be careful when returning &lt;code&gt;NSManagedObject&lt;/code&gt;s or &lt;code&gt;CoreStoreObject&lt;/code&gt;s from the transaction closure. Those instances are for the transaction&#39;s use only. See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#passing-objects-safely&#34;&gt;Passing objects safely&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Transactions created from &lt;code&gt;perform(asynchronous:...)&lt;/code&gt; are instances of &lt;code&gt;AsynchronousDataTransaction&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Synchronous transactions&lt;/h4&gt; &#xA;&lt;p&gt;are created from &lt;code&gt;perform(synchronous:...)&lt;/code&gt;. While the syntax is similar to its asynchronous counterpart, &lt;code&gt;perform(synchronous:...)&lt;/code&gt; waits for its transaction block to complete before returning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let hasChanges = dataStack.perform(&#xA;    synchronous: { (transaction) -&amp;gt; Bool in&#xA;        // make changes&#xA;        return transaction.hasChanges&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;transaction&lt;/code&gt; above is a &lt;code&gt;SynchronousDataTransaction&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;code&gt;perform(synchronous:...)&lt;/code&gt; technically blocks two queues (the caller&#39;s queue and the transaction&#39;s background queue), it is considered less safe as it&#39;s more prone to deadlock. Take special care that the closure does not block on any other external queues.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;perform(synchronous:...)&lt;/code&gt; will wait for observers such as &lt;code&gt;ListMonitor&lt;/code&gt;s to be notified before the method returns. This may cause deadlocks, especially if you are calling this from the main thread. To reduce this risk, you may try to set the &lt;code&gt;waitForAllObservers:&lt;/code&gt; parameter to &lt;code&gt;false&lt;/code&gt;. Doing so tells the &lt;code&gt;SynchronousDataTransaction&lt;/code&gt; to block only until it completes saving. It will not wait for other context&#39;s to receive those changes. This reduces deadlock risk but may have surprising side-effects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    synchronous: { (transaction) in&#xA;        let person = transaction.create(Into&amp;lt;Person&amp;gt;())&#xA;        person.name = &#34;John&#34;&#xA;    },&#xA;    waitForAllObservers: false&#xA;)&#xA;let newPerson = dataStack.fetchOne(From&amp;lt;Person&amp;gt;.where(\.name == &#34;John&#34;))&#xA;// newPerson may be nil!&#xA;// The DataStack may have not yet received the update notification.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Due to this complicated nature of synchronous transactions, if your app has very heavy transaction throughput it is highly recommended to use &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#asynchronous-transactions&#34;&gt;asynchronous transactions&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h4&gt;Unsafe transactions&lt;/h4&gt; &#xA;&lt;p&gt;are special in that they do not enclose updates within a closure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let transaction = dataStack.beginUnsafe()&#xA;// make changes&#xA;downloadJSONWithCompletion({ (json) -&amp;gt; Void in&#xA;&#xA;    // make other changes&#xA;    transaction.commit()&#xA;})&#xA;downloadAnotherJSONWithCompletion({ (json) -&amp;gt; Void in&#xA;&#xA;    // make some other changes&#xA;    transaction.commit()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows for non-contiguous updates. Do note that this flexibility comes with a price: you are now responsible for managing concurrency for the transaction. As uncle Ben said, &#34;with great power comes great race conditions.&#34;&lt;/p&gt; &#xA;&lt;p&gt;As the above example also shows, with unsafe transactions &lt;code&gt;commit()&lt;/code&gt; can be called multiple times.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ve seen how to create transactions, but we have yet to see how to make &lt;em&gt;creates&lt;/em&gt;, &lt;em&gt;updates&lt;/em&gt;, and &lt;em&gt;deletes&lt;/em&gt;. The 3 types of transactions above are all subclasses of &lt;code&gt;BaseDataTransaction&lt;/code&gt;, which implements the methods shown below.&lt;/p&gt; &#xA;&lt;h3&gt;Creating objects&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;create(...)&lt;/code&gt; method accepts an &lt;code&gt;Into&lt;/code&gt; clause which specifies the entity for the object you want to create:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person = transaction.create(Into&amp;lt;MyPersonEntity&amp;gt;())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While the syntax is straightforward, CoreStore does not just naively insert a new object. This single line does the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Checks that the entity type exists in any of the transaction&#39;s parent persistent store&lt;/li&gt; &#xA; &lt;li&gt;If the entity belongs to only one persistent store, a new object is inserted into that store and returned from &lt;code&gt;create(...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If the entity does not belong to any store, an assertion failure will be raised. &lt;strong&gt;This is a programmer error and should never occur in production code.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;If the entity belongs to multiple stores, an assertion failure will be raised. &lt;strong&gt;This is also a programmer error and should never occur in production code.&lt;/strong&gt; Normally, with Core Data you can insert an object in this state but saving the &lt;code&gt;NSManagedObjectContext&lt;/code&gt; will always fail. CoreStore checks this for you at creation time when it makes sense (not during save).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the entity exists in multiple configurations, you need to provide the configuration name for the destination persistent store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person = transaction.create(Into&amp;lt;MyPersonEntity&amp;gt;(&#34;Config1&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if the persistent store is the auto-generated &#34;Default&#34; configuration, specify &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person = transaction.create(Into&amp;lt;MyPersonEntity&amp;gt;(nil))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you do explicitly specify the configuration name, CoreStore will only try to insert the created object to that particular store and will fail if that store is not found; it will not fall back to any other configuration that the entity belongs to.&lt;/p&gt; &#xA;&lt;h3&gt;Updating objects&lt;/h3&gt; &#xA;&lt;p&gt;After creating an object from the transaction, you can simply update its properties as normal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let person = transaction.create(Into&amp;lt;MyPersonEntity&amp;gt;())&#xA;        person.name = &#34;John Smith&#34;&#xA;        person.age = 30&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update an existing object, fetch the object&#39;s instance from the transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let person = try transaction.fetchOne(&#xA;            From&amp;lt;MyPersonEntity&amp;gt;()&#xA;                .where(\.name == &#34;Jane Smith&#34;)&#xA;        )&#xA;        person.age = person.age + 1&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(For more about fetching, see &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#fetching-and-querying&#34;&gt;Fetching and querying&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do not update an instance that was not created/fetched from the transaction.&lt;/strong&gt; If you have a reference to the object already, use the transaction&#39;s &lt;code&gt;edit(...)&lt;/code&gt; method to get an editable proxy instance for that object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jane: MyPersonEntity = // ...&#xA;&#xA;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        // WRONG: jane.age = jane.age + 1&#xA;        // RIGHT:&#xA;        let jane = transaction.edit(jane)! // using the same variable name protects us from misusing the non-transaction instance&#xA;        jane.age = jane.age + 1&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is also true when updating an object&#39;s relationships. Make sure that the object assigned to the relationship is also created/fetched from the transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jane: MyPersonEntity = // ...&#xA;let john: MyPersonEntity = // ...&#xA;&#xA;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        // WRONG: jane.friends = [john]&#xA;        // RIGHT:&#xA;        let jane = transaction.edit(jane)!&#xA;        let john = transaction.edit(john)!&#xA;        jane.friends = NSSet(array: [john])&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deleting objects&lt;/h3&gt; &#xA;&lt;p&gt;Deleting an object is simpler because you can tell a transaction to delete an object directly without fetching an editable proxy (CoreStore does that for you):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let john: MyPersonEntity = // ...&#xA;&#xA;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        transaction.delete(john)&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or several objects at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let john: MyPersonEntity = // ...&#xA;let jane: MyPersonEntity = // ...&#xA;&#xA;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        try transaction.delete(john, jane)&#xA;        // try transaction.delete([john, jane]) is also allowed&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not have references yet to the objects to be deleted, transactions have a &lt;code&gt;deleteAll(...)&lt;/code&gt; method you can pass a query to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        try transaction.deleteAll(&#xA;            From&amp;lt;MyPersonEntity&amp;gt;()&#xA;                .where(\.age &amp;gt; 30)&#xA;        )&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passing objects safely&lt;/h3&gt; &#xA;&lt;p&gt;Always remember that the &lt;code&gt;DataStack&lt;/code&gt; and individual transactions manage different &lt;code&gt;NSManagedObjectContext&lt;/code&gt;s so you cannot just use objects between them. That&#39;s why transactions have an &lt;code&gt;edit(...)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jane: MyPersonEntity = // ...&#xA;&#xA;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let jane = transaction.edit(jane)!&#xA;        jane.age = jane.age + 1&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But &lt;code&gt;CoreStore&lt;/code&gt;, &lt;code&gt;DataStack&lt;/code&gt; and &lt;code&gt;BaseDataTransaction&lt;/code&gt; have a very flexible &lt;code&gt;fetchExisting(...)&lt;/code&gt; method that you can pass instances back and forth with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jane: MyPersonEntity = // ...&#xA;&#xA;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; MyPersonEntity in&#xA;        let jane = transaction.fetchExisting(jane)! // instance for transaction&#xA;        jane.age = jane.age + 1&#xA;        return jane&#xA;    },&#xA;    success: { (transactionJane) in&#xA;        let jane = dataStack.fetchExisting(transactionJane)! // instance for DataStack&#xA;        print(jane.age)&#xA;    },&#xA;    failure: { (error) in&#xA;        // ...&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fetchExisting(...)&lt;/code&gt; also works with multiple &lt;code&gt;NSManagedObject&lt;/code&gt;s, &lt;code&gt;CoreStoreObject&lt;/code&gt;s, or with &lt;code&gt;NSManagedObjectID&lt;/code&gt;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var peopleIDs: [NSManagedObjectID] = // ...&#xA;&#xA;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let jane = try transaction.fetchOne(&#xA;            From&amp;lt;MyPersonEntity&amp;gt;()&#xA;                .where(\.name == &#34;Jane Smith&#34;)&#xA;        )&#xA;        jane.friends = NSSet(array: transaction.fetchExisting(peopleIDs)!)&#xA;        // ...&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Importing data&lt;/h2&gt; &#xA;&lt;p&gt;Some times, if not most of the time, the data that we save to Core Data comes from external sources such as web servers or external files. If you have a JSON dictionary for example, you may be extracting values as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json: [String: Any] = // ...&#xA;person.name = json[&#34;name&#34;] as? NSString&#xA;person.age = json[&#34;age&#34;] as? NSNumber&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have many attributes, you don&#39;t want to keep repeating this mapping everytime you want to import data. CoreStore lets you write the data mapping code just once, and all you have to do is call &lt;code&gt;importObject(...)&lt;/code&gt; or &lt;code&gt;importUniqueObject(...)&lt;/code&gt; through &lt;code&gt;BaseDataTransaction&lt;/code&gt; subclasses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let json: [String: Any] = // ...&#xA;        try! transaction.importObject(&#xA;            Into&amp;lt;MyPersonEntity&amp;gt;(),&#xA;            source: json&#xA;        )&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To support data import for an entity, implement either &lt;code&gt;ImportableObject&lt;/code&gt; or &lt;code&gt;ImportableUniqueObject&lt;/code&gt; on the &lt;code&gt;NSManagedObject&lt;/code&gt; or &lt;code&gt;CoreStoreObject&lt;/code&gt; subclass:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ImportableObject&lt;/code&gt;: Use this protocol if the object have no inherent uniqueness and new objects should always be added when calling &lt;code&gt;importObject(...)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ImportableUniqueObject&lt;/code&gt;: Use this protocol to specify a unique ID for an object that will be used to distinguish whether a new object should be created or if an existing object should be updated when calling &lt;code&gt;importUniqueObject(...)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both protocols require implementers to specify an &lt;code&gt;ImportSource&lt;/code&gt; which can be set to any type that the object can extract data from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias ImportSource = NSDictionary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias ImportSource = [String: Any]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias ImportSource = NSData&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even use external types from popular 3rd-party JSON libraries, or just simple tuples or primitives.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;ImportableObject&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;ImportableObject&lt;/code&gt; is a very simple protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol ImportableObject: AnyObject {&#xA;    typealias ImportSource&#xA;    static func shouldInsert(from source: ImportSource, in transaction: BaseDataTransaction) -&amp;gt; Bool&#xA;    func didInsert(from source: ImportSource, in transaction: BaseDataTransaction) throws&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, set &lt;code&gt;ImportSource&lt;/code&gt; to the expected type of the data source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias ImportSource = [String: Any]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This lets us call &lt;code&gt;importObject(_:source:)&lt;/code&gt; with any &lt;code&gt;[String: Any]&lt;/code&gt; type as the argument to &lt;code&gt;source&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let json: [String: Any] = // ...&#xA;        try! transaction.importObject(&#xA;            Into&amp;lt;MyPersonEntity&amp;gt;(),&#xA;            source: json&#xA;        )&#xA;        // ...&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The actual extraction and assignment of values should be implemented in the &lt;code&gt;didInsert(from:in:)&lt;/code&gt; method of the &lt;code&gt;ImportableObject&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func didInsert(from source: ImportSource, in transaction: BaseDataTransaction) throws {&#xA;    self.name = source[&#34;name&#34;] as? NSString&#xA;    self.age = source[&#34;age&#34;] as? NSNumber&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Transactions also let you import multiple objects at once using the &lt;code&gt;importObjects(_:sourceArray:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let jsonArray: [[String: Any]] = // ...&#xA;        try! transaction.importObjects(&#xA;            Into&amp;lt;MyPersonEntity&amp;gt;(),&#xA;            sourceArray: jsonArray // make sure this is of type Array&amp;lt;MyPersonEntity.ImportSource&amp;gt;&#xA;        )&#xA;        // ...&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Doing so tells the transaction to iterate through the array of import sources and calls &lt;code&gt;shouldInsert(from:in:)&lt;/code&gt; on the &lt;code&gt;ImportableObject&lt;/code&gt; to determine which instances should be created. You can do validations and return &lt;code&gt;false&lt;/code&gt; from &lt;code&gt;shouldInsert(from:in:)&lt;/code&gt; if you want to skip importing from a source and continue on with the other sources in the array.&lt;/p&gt; &#xA;&lt;p&gt;If on the other hand, your validation in one of the sources failed in such a manner that all other sources should also be rolled back and cancelled, you can &lt;code&gt;throw&lt;/code&gt; from within &lt;code&gt;didInsert(from:in:)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func didInsert(from source: ImportSource, in transaction: BaseDataTransaction) throws {&#xA;    self.name = source[&#34;name&#34;] as? NSString&#xA;    self.age = source[&#34;age&#34;] as? NSNumber&#xA;    // ...&#xA;    if self.name == nil {&#xA;        throw Errors.InvalidNameError&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Doing so can let you abandon an invalid transaction immediately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let jsonArray: [[String: Any]] = // ...&#xA;&#xA;        try transaction.importObjects(&#xA;            Into&amp;lt;MyPersonEntity&amp;gt;(),&#xA;            sourceArray: jsonArray&#xA;        )&#xA;    },&#xA;    success: {&#xA;        // ...&#xA;    },&#xA;    failure: { (error) in&#xA;        switch error {&#xA;        case Errors.InvalidNameError: print(&#34;Invalid name&#34;)&#xA;        // ...&#xA;        }&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;ImportableUniqueObject&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Typically, we don&#39;t just keep creating objects every time we import data. Usually we also need to update already existing objects. Implementing the &lt;code&gt;ImportableUniqueObject&lt;/code&gt; protocol lets you specify a &#34;unique ID&#34; that transactions can use to search existing objects before creating new ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol ImportableUniqueObject: ImportableObject {&#xA;    typealias ImportSource&#xA;    typealias UniqueIDType: ImportableAttributeType&#xA;&#xA;    static var uniqueIDKeyPath: String { get }&#xA;    var uniqueIDValue: UniqueIDType { get set }&#xA;&#xA;    static func shouldInsert(from source: ImportSource, in transaction: BaseDataTransaction) -&amp;gt; Bool&#xA;    static func shouldUpdate(from source: ImportSource, in transaction: BaseDataTransaction) -&amp;gt; Bool&#xA;    static func uniqueID(from source: ImportSource, in transaction: BaseDataTransaction) throws -&amp;gt; UniqueIDType?&#xA;    func didInsert(from source: ImportSource, in transaction: BaseDataTransaction) throws&#xA;    func update(from source: ImportSource, in transaction: BaseDataTransaction) throws&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that it has the same insert methods as &lt;code&gt;ImportableObject&lt;/code&gt;, with additional methods for updates and for specifying the unique ID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class var uniqueIDKeyPath: String {&#xA;    return #keyPath(MyPersonEntity.personID) &#xA;}&#xA;var uniqueIDValue: Int { &#xA;    get { return self.personID }&#xA;    set { self.personID = newValue }&#xA;}&#xA;class func uniqueID(from source: ImportSource, in transaction: BaseDataTransaction) throws -&amp;gt; Int? {&#xA;    return source[&#34;id&#34;] as? Int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;ImportableUniqueObject&lt;/code&gt;, the extraction and assignment of values should be implemented from the &lt;code&gt;update(from:in:)&lt;/code&gt; method. The &lt;code&gt;didInsert(from:in:)&lt;/code&gt; by default calls &lt;code&gt;update(from:in:)&lt;/code&gt;, but you can separate the implementation for inserts and updates if needed.&lt;/p&gt; &#xA;&lt;p&gt;You can then create/update an object by calling a transaction&#39;s &lt;code&gt;importUniqueObject(...)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let json: [String: Any] = // ...&#xA;        try! transaction.importUniqueObject(&#xA;            Into&amp;lt;MyPersonEntity&amp;gt;(),&#xA;            source: json&#xA;        )&#xA;        // ...&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or multiple objects at once with the &lt;code&gt;importUniqueObjects(...)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.perform(&#xA;    asynchronous: { (transaction) -&amp;gt; Void in&#xA;        let jsonArray: [[String: AnyObject]] = // ...&#xA;        try! transaction.importUniqueObjects(&#xA;            Into&amp;lt;MyPersonEntity&amp;gt;(),&#xA;            sourceArray: jsonArray&#xA;        )&#xA;        // ...&#xA;    },&#xA;    completion: { _ in }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As with &lt;code&gt;ImportableObject&lt;/code&gt;, you can control whether to skip importing an object by implementing &lt;code&gt;shouldInsert(from:in:)&lt;/code&gt; and &lt;code&gt;shouldUpdate(from:in:)&lt;/code&gt;, or to cancel all objects by &lt;code&gt;throw&lt;/code&gt;ing an error from the &lt;code&gt;uniqueID(from:in:)&lt;/code&gt;, &lt;code&gt;didInsert(from:in:)&lt;/code&gt; or &lt;code&gt;update(from:in:)&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;h2&gt;Fetching and Querying&lt;/h2&gt; &#xA;&lt;p&gt;Before we dive in, be aware that CoreStore distinguishes between &lt;em&gt;fetching&lt;/em&gt; and &lt;em&gt;querying&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;em&gt;fetch&lt;/em&gt; executes searches from a specific &lt;em&gt;transaction&lt;/em&gt; or &lt;em&gt;data stack&lt;/em&gt;. This means fetches can include pending objects (i.e. before a transaction calls on &lt;code&gt;commit()&lt;/code&gt;.) Use fetches when: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;results need to be &lt;code&gt;NSManagedObject&lt;/code&gt; or &lt;code&gt;CoreStoreObject&lt;/code&gt; instances&lt;/li&gt; &#xA;   &lt;li&gt;unsaved objects should be included in the search (though fetches can be configured to exclude unsaved ones)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A &lt;em&gt;query&lt;/em&gt; pulls data straight from the persistent store. This means faster searches when computing aggregates such as &lt;em&gt;count&lt;/em&gt;, &lt;em&gt;min&lt;/em&gt;, &lt;em&gt;max&lt;/em&gt;, etc. Use queries when: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;you need to compute aggregate functions (see below for a list of supported functions)&lt;/li&gt; &#xA;   &lt;li&gt;results can be raw values like &lt;code&gt;NSString&lt;/code&gt;s, &lt;code&gt;NSNumber&lt;/code&gt;s, &lt;code&gt;Int&lt;/code&gt;s, &lt;code&gt;NSDate&lt;/code&gt;s, an &lt;code&gt;NSDictionary&lt;/code&gt; of key-values, or any type that conform to &lt;code&gt;QueryableAttributeType&lt;/code&gt;. (See &lt;em&gt;QueryableAttributeType.swift&lt;/em&gt; for a list of built-in types)&lt;/li&gt; &#xA;   &lt;li&gt;only values for specified attribute keys need to be included in the results&lt;/li&gt; &#xA;   &lt;li&gt;unsaved objects should be ignored&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;From&lt;/code&gt; clause&lt;/h4&gt; &#xA;&lt;p&gt;The search conditions for fetches and queries are specified using &lt;em&gt;clauses&lt;/em&gt;. All fetches and queries require a &lt;code&gt;From&lt;/code&gt; clause that indicates the target entity type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let people = try dataStack.fetchAll(From&amp;lt;MyPersonEntity&amp;gt;())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;people&lt;/code&gt; in the example above will be of type &lt;code&gt;[MyPersonEntity]&lt;/code&gt;. The &lt;code&gt;From&amp;lt;MyPersonEntity&amp;gt;()&lt;/code&gt; clause indicates a fetch to all persistent stores that &lt;code&gt;MyPersonEntity&lt;/code&gt; belong to.&lt;/p&gt; &#xA;&lt;p&gt;If the entity exists in multiple configurations and you need to only search from a particular configuration, indicate in the &lt;code&gt;From&lt;/code&gt; clause the configuration name for the destination persistent store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let people = try dataStack.fetchAll(From&amp;lt;MyPersonEntity&amp;gt;(&#34;Config1&#34;)) // ignore objects in persistent stores other than the &#34;Config1&#34; configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if the persistent store is the auto-generated &#34;Default&#34; configuration, specify &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person = try dataStack.fetchAll(From&amp;lt;MyPersonEntity&amp;gt;(nil))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we know how to use a &lt;code&gt;From&lt;/code&gt; clause, let&#39;s move on to fetching and querying.&lt;/p&gt; &#xA;&lt;h3&gt;Fetching&lt;/h3&gt; &#xA;&lt;p&gt;There are currently 5 fetch methods you can call from &lt;code&gt;CoreStore&lt;/code&gt;, from a &lt;code&gt;DataStack&lt;/code&gt; instance, or from a &lt;code&gt;BaseDataTransaction&lt;/code&gt; instance. All of the methods below accept the same parameters: a required &lt;code&gt;From&lt;/code&gt; clause, and an optional series of &lt;code&gt;Where&lt;/code&gt;, &lt;code&gt;OrderBy&lt;/code&gt;, and/or &lt;code&gt;Tweak&lt;/code&gt; clauses.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fetchAll(...)&lt;/code&gt; - returns an array of all objects that match the criteria.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetchOne(...)&lt;/code&gt; - returns the first object that match the criteria.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetchCount(...)&lt;/code&gt; - returns the number of objects that match the criteria.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetchObjectIDs(...)&lt;/code&gt; - returns an array of &lt;code&gt;NSManagedObjectID&lt;/code&gt;s for all objects that match the criteria.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fetchObjectID(...)&lt;/code&gt; - returns the &lt;code&gt;NSManagedObjectID&lt;/code&gt;s for the first objects that match the criteria.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each method&#39;s purpose is straightforward, but we need to understand how to set the clauses for the fetch.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Where&lt;/code&gt; clause&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;Where&lt;/code&gt; clause is CoreStore&#39;s &lt;code&gt;NSPredicate&lt;/code&gt; wrapper. It specifies the search filter to use when fetching (or querying). It implements all initializers that &lt;code&gt;NSPredicate&lt;/code&gt; does (except for &lt;code&gt;-predicateWithBlock:&lt;/code&gt;, which Core Data does not support):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var people = try dataStack.fetchAll(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Where&amp;lt;MyPersonEntity&amp;gt;(&#34;%K &amp;gt; %d&#34;, &#34;age&#34;, 30) // string format initializer&#xA;)&#xA;people = try dataStack.fetchAll(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Where&amp;lt;MyPersonEntity&amp;gt;(true) // boolean initializer&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do have an existing &lt;code&gt;NSPredicate&lt;/code&gt; instance already, you can pass that to &lt;code&gt;Where&lt;/code&gt; as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let predicate = NSPredicate(...)&#xA;var people = dataStack.fetchAll(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Where&amp;lt;MyPersonEntity&amp;gt;(predicate) // predicate initializer&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Where&lt;/code&gt; clauses are generic types. To avoid verbose repetition of the generic object type, fetch methods support &lt;strong&gt;Fetch Chain builders&lt;/strong&gt;. We can also use Swift&#39;s Smart KeyPaths as the &lt;code&gt;Where&lt;/code&gt; clause expression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var people = try dataStack.fetchAll(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;()&#xA;        .where(\.age &amp;gt; 30) // Type-safe!&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Where&lt;/code&gt; clauses also implement the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, and &lt;code&gt;!&lt;/code&gt; logic operators, so you can provide logical conditions without writing too much &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, and &lt;code&gt;NOT&lt;/code&gt; strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var people = try dataStack.fetchAll(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;()&#xA;        .where(\.age &amp;gt; 30 &amp;amp;&amp;amp; \.gender == &#34;M&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not provide a &lt;code&gt;Where&lt;/code&gt; clause, all objects that belong to the specified &lt;code&gt;From&lt;/code&gt; will be returned.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;OrderBy&lt;/code&gt; clause&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;OrderBy&lt;/code&gt; clause is CoreStore&#39;s &lt;code&gt;NSSortDescriptor&lt;/code&gt; wrapper. Use it to specify attribute keys in which to sort the fetch (or query) results with.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var mostValuablePeople = try dataStack.fetchAll(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    OrderBy&amp;lt;MyPersonEntity&amp;gt;(.descending(&#34;rating&#34;), .ascending(&#34;surname&#34;))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As seen above, &lt;code&gt;OrderBy&lt;/code&gt; accepts a list of &lt;code&gt;SortKey&lt;/code&gt; enumeration values, which can be either &lt;code&gt;.ascending&lt;/code&gt; or &lt;code&gt;.descending&lt;/code&gt;. As with &lt;code&gt;Where&lt;/code&gt; clauses, &lt;code&gt;OrderBy&lt;/code&gt; clauses are also generic types. To avoid verbose repetition of the generic object type, fetch methods support &lt;strong&gt;Fetch Chain builders&lt;/strong&gt;. We can also use Swift&#39;s Smart KeyPaths as the &lt;code&gt;OrderBy&lt;/code&gt; clause expression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var people = try dataStack.fetchAll(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;()&#xA;        .orderBy(.descending(\.rating), .ascending(\.surname)) // Type-safe!&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;+=&lt;/code&gt; operator to append &lt;code&gt;OrderBy&lt;/code&gt;s together. This is useful when sorting conditionally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var orderBy = OrderBy&amp;lt;MyPersonEntity&amp;gt;(.descending(\.rating))&#xA;if sortFromYoungest {&#xA;    orderBy += OrderBy(.ascending(\.age))&#xA;}&#xA;var mostValuablePeople = try dataStack.fetchAll(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    orderBy&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Tweak&lt;/code&gt; clause&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;Tweak&lt;/code&gt; clause lets you, uh, &lt;em&gt;tweak&lt;/em&gt; the fetch (or query). &lt;code&gt;Tweak&lt;/code&gt; exposes the &lt;code&gt;NSFetchRequest&lt;/code&gt; in a closure where you can make changes to its properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var people = try dataStack.fetchAll(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Where&amp;lt;MyPersonEntity&amp;gt;(&#34;age &amp;gt; %d&#34;, 30),&#xA;    OrderBy&amp;lt;MyPersonEntity&amp;gt;(.ascending(&#34;surname&#34;)),&#xA;    Tweak { (fetchRequest) -&amp;gt; Void in&#xA;        fetchRequest.includesPendingChanges = false&#xA;        fetchRequest.returnsObjectsAsFaults = false&#xA;        fetchRequest.includesSubentities = false&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Tweak&lt;/code&gt; also supports &lt;strong&gt;Fetch Chain builders&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var people = try dataStack.fetchAll(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;        .where(\.age &amp;gt; 30)&#xA;        .orderBy(.ascending(\.surname))&#xA;        .tweak {&#xA;            $0.includesPendingChanges = false&#xA;            $0.returnsObjectsAsFaults = false&#xA;            $0.includesSubentities = false&#xA;        }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The clauses are evaluated the order they appear in the fetch/query, so you typically need to set &lt;code&gt;Tweak&lt;/code&gt; as the last clause. &lt;code&gt;Tweak&lt;/code&gt;&#39;s closure is executed only just before the fetch occurs, so make sure that any values captured by the closure is not prone to race conditions.&lt;/p&gt; &#xA;&lt;p&gt;While &lt;code&gt;Tweak&lt;/code&gt; lets you micro-configure the &lt;code&gt;NSFetchRequest&lt;/code&gt;, note that CoreStore already preconfigured that &lt;code&gt;NSFetchRequest&lt;/code&gt; to suitable defaults. Only use &lt;code&gt;Tweak&lt;/code&gt; when you know what you are doing!&lt;/p&gt; &#xA;&lt;h3&gt;Querying&lt;/h3&gt; &#xA;&lt;p&gt;One of the functionalities overlooked by other Core Data wrapper libraries is raw properties fetching. If you are familiar with &lt;code&gt;NSDictionaryResultType&lt;/code&gt; and &lt;code&gt;-[NSFetchedRequest propertiesToFetch]&lt;/code&gt;, you probably know how painful it is to setup a query for raw values and aggregate values. CoreStore makes this easy by exposing the 2 methods below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;queryValue(...)&lt;/code&gt; - returns a single raw value for an attribute or for an aggregate value. If there are multiple results, &lt;code&gt;queryValue(...)&lt;/code&gt; only returns the first item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;queryAttributes(...)&lt;/code&gt; - returns an array of dictionaries containing attribute keys with their corresponding values.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both methods above accept the same parameters: a required &lt;code&gt;From&lt;/code&gt; clause, a required &lt;code&gt;Select&amp;lt;T&amp;gt;&lt;/code&gt; clause, and an optional series of &lt;code&gt;Where&lt;/code&gt;, &lt;code&gt;OrderBy&lt;/code&gt;, &lt;code&gt;GroupBy&lt;/code&gt;, and/or &lt;code&gt;Tweak&lt;/code&gt; clauses.&lt;/p&gt; &#xA;&lt;p&gt;Setting up the &lt;code&gt;From&lt;/code&gt;, &lt;code&gt;Where&lt;/code&gt;, &lt;code&gt;OrderBy&lt;/code&gt;, and &lt;code&gt;Tweak&lt;/code&gt; clauses is similar to how you would when fetching. For querying, you also need to know how to use the &lt;code&gt;Select&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;GroupBy&lt;/code&gt; clauses.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Select&amp;lt;T&amp;gt;&lt;/code&gt; clause&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;Select&amp;lt;T&amp;gt;&lt;/code&gt; clause specifies the target attribute/aggregate key, as well as the expected return type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let johnsAge = try dataStack.queryValue(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Select&amp;lt;Int&amp;gt;(&#34;age&#34;),&#xA;    Where&amp;lt;MyPersonEntity&amp;gt;(&#34;name == %@&#34;, &#34;John Smith&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above queries the &#34;age&#34; property for the first object that matches the &lt;code&gt;Where&lt;/code&gt; condition. &lt;code&gt;johnsAge&lt;/code&gt; will be bound to type &lt;code&gt;Int?&lt;/code&gt;, as indicated by the &lt;code&gt;Select&amp;lt;Int&amp;gt;&lt;/code&gt; generic type. For &lt;code&gt;queryValue(...)&lt;/code&gt;, types that conform to &lt;code&gt;QueryableAttributeType&lt;/code&gt; are allowed as the return type (and therefore as the generic type for &lt;code&gt;Select&amp;lt;T&amp;gt;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;queryAttributes(...)&lt;/code&gt;, only &lt;code&gt;NSDictionary&lt;/code&gt; is valid for &lt;code&gt;Select&lt;/code&gt;, thus you are allowed to omit the generic type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let allAges = try dataStack.queryAttributes(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Select(&#34;age&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;query methods also support &lt;strong&gt;Query Chain builders&lt;/strong&gt;. We can also use Swift&#39;s Smart KeyPaths to use in the expressions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let johnsAge = try dataStack.queryValue(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;()&#xA;        .select(\.age) // binds the result to Int&#xA;        .where(\.name == &#34;John Smith&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you only need a value for a particular attribute, you can just specify the key name (like we did with &lt;code&gt;Select&amp;lt;Int&amp;gt;(&#34;age&#34;)&lt;/code&gt;), but several aggregate functions can also be used as parameter to &lt;code&gt;Select&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.average(...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.count(...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.maximum(...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.minimum(...)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.sum(...)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let oldestAge = try dataStack.queryValue(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Select&amp;lt;Int&amp;gt;(.maximum(&#34;age&#34;))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;queryAttributes(...)&lt;/code&gt; which returns an array of dictionaries, you can specify multiple attributes/aggregates to &lt;code&gt;Select&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let personJSON = try dataStack.queryAttributes(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Select(&#34;name&#34;, &#34;age&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;personJSON&lt;/code&gt; will then have the value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;[&#xA;    [&#xA;        &#34;name&#34;: &#34;John Smith&#34;,&#xA;        &#34;age&#34;: 30&#xA;    ],&#xA;    [&#xA;        &#34;name&#34;: &#34;Jane Doe&#34;,&#xA;        &#34;age&#34;: 22&#xA;    ]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also include an aggregate as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let personJSON = try dataStack.queryAttributes(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Select(&#34;name&#34;, .count(&#34;friends&#34;))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which returns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;[&#xA;    [&#xA;        &#34;name&#34;: &#34;John Smith&#34;,&#xA;        &#34;count(friends)&#34;: 42&#xA;    ],&#xA;    [&#xA;        &#34;name&#34;: &#34;Jane Doe&#34;,&#xA;        &#34;count(friends)&#34;: 231&#xA;    ]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;&#34;count(friends)&#34;&lt;/code&gt; key name was automatically used by CoreStore, but you can specify your own key alias if you need:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let personJSON = try dataStack.queryAttributes(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Select(&#34;name&#34;, .count(&#34;friends&#34;, as: &#34;friendsCount&#34;))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which now returns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;[&#xA;    [&#xA;        &#34;name&#34;: &#34;John Smith&#34;,&#xA;        &#34;friendsCount&#34;: 42&#xA;    ],&#xA;    [&#xA;        &#34;name&#34;: &#34;Jane Doe&#34;,&#xA;        &#34;friendsCount&#34;: 231&#xA;    ]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;GroupBy&lt;/code&gt; clause&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;GroupBy&lt;/code&gt; clause lets you group results by a specified attribute/aggregate. This is useful only for &lt;code&gt;queryAttributes(...)&lt;/code&gt; since &lt;code&gt;queryValue(...)&lt;/code&gt; just returns the first value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let personJSON = try dataStack.queryAttributes(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;(),&#xA;    Select(&#34;age&#34;, .count(&#34;age&#34;, as: &#34;count&#34;)),&#xA;    GroupBy(&#34;age&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;GroupBy&lt;/code&gt; clauses are also generic types and support &lt;strong&gt;Query Chain builders&lt;/strong&gt;. We can also use Swift&#39;s Smart KeyPaths to use in the expressions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let personJSON = try dataStack.queryAttributes(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;()&#xA;        .select(.attribute(\.age), .count(\.age, as: &#34;count&#34;))&#xA;        .groupBy(\.age)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;this returns dictionaries that shows the count for each &lt;code&gt;&#34;age&#34;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;[&#xA;    [&#xA;        &#34;age&#34;: 42,&#xA;        &#34;count&#34;: 1&#xA;    ],&#xA;    [&#xA;        &#34;age&#34;: 22,&#xA;        &#34;count&#34;: 1&#xA;    ]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging and error reporting&lt;/h2&gt; &#xA;&lt;p&gt;One unfortunate thing when using some third-party libraries is that they usually pollute the console with their own logging mechanisms. CoreStore provides its own default logging class, but you can plug-in your own favorite logger by implementing the &lt;code&gt;CoreStoreLogger&lt;/code&gt; protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol CoreStoreLogger {&#xA;    func log(level level: LogLevel, message: String, fileName: StaticString, lineNumber: Int, functionName: StaticString)&#xA;    func log(error error: CoreStoreError, message: String, fileName: StaticString, lineNumber: Int, functionName: StaticString)&#xA;    func assert(@autoclosure condition: () -&amp;gt; Bool, @autoclosure message: () -&amp;gt; String, fileName: StaticString, lineNumber: Int, functionName: StaticString)&#xA;    func abort(message: String, fileName: StaticString, lineNumber: Int, functionName: StaticString)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Implement this protocol with your custom class then pass the instance to &lt;code&gt;CoreStoreDefaults.logger&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;CoreStoreDefaults.logger = MyLogger()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Doing so channels all logging calls to your logger.&lt;/p&gt; &#xA;&lt;p&gt;Note that to keep the call stack information intact, all calls to these methods are &lt;strong&gt;NOT&lt;/strong&gt; thread-managed. Therefore you have to make sure that your logger is thread-safe or you may otherwise have to dispatch your logging implementation to a serial queue.&lt;/p&gt; &#xA;&lt;p&gt;Take special care when implementing &lt;code&gt;CoreStoreLogger&lt;/code&gt;&#39;s &lt;code&gt;assert(...)&lt;/code&gt; and &lt;code&gt;abort(...)&lt;/code&gt; functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;assert(...)&lt;/code&gt;: The behavior between &lt;code&gt;DEBUG&lt;/code&gt; and release builds, or &lt;code&gt;-O&lt;/code&gt; and &lt;code&gt;-Onone&lt;/code&gt;, are all left to the implementers&#39; responsibility. CoreStore calls &lt;code&gt;CoreStoreLogger.assert(...)&lt;/code&gt; only for invalid but usually recoverable errors (for example, early validation failures that may cause an error thrown and handled somewhere else)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;abort(...)&lt;/code&gt;: This method is &lt;em&gt;the&lt;/em&gt; last-chance for your app to &lt;em&gt;synchronously&lt;/em&gt; log a fatal error within CoreStore. The app will be terminated right after this function is called (CoreStore calls &lt;code&gt;fatalError()&lt;/code&gt; internally)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All CoreStore types have very useful (and pretty formatted!) &lt;code&gt;print(...)&lt;/code&gt; outputs. A couple of examples, &lt;code&gt;ListMonitor&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;img width=&#34;369&#34; alt=&#34;screen shot 2016-07-10 at 22 56 44&#34; src=&#34;https://cloud.githubusercontent.com/assets/3029684/16713994/ae06e702-46f1-11e6-83a8-dee48b480bab.png&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;CoreStoreError.mappingModelNotFoundError&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;img width=&#34;506&#34; alt=&#34;MappingModelNotFoundError&#34; src=&#34;https://cloud.githubusercontent.com/assets/3029684/16713962/e021f548-46f0-11e6-8100-f9b5ea6b4a08.png&#34;&gt; &#xA;&lt;p&gt;These are all implemented with &lt;code&gt;CustomDebugStringConvertible.debugDescription&lt;/code&gt;, so they work with lldb&#39;s &lt;code&gt;po&lt;/code&gt; command as well.&lt;/p&gt; &#xA;&lt;h2&gt;Observing changes and notifications&lt;/h2&gt; &#xA;&lt;p&gt;CoreStore provides type-safe wrappers for observing managed objects:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-a-single-objects-updates&#34;&gt;&lt;em&gt;ObjectPublisher&lt;/em&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-a-single-objects-per-property-updates&#34;&gt;&lt;em&gt;ObjectMonitor&lt;/em&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;🆕&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-a-diffable-list&#34;&gt;&lt;em&gt;ListPublisher&lt;/em&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-detailed-list-changes&#34;&gt;&lt;em&gt;ListMonitor&lt;/em&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Number of objects&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Allows multiple observers&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Emits fine-grained changes&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Emits DiffableDataSource snapshots&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Delegate methods&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Closure callback&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;SwiftUI support&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Observe a single property&lt;/h3&gt; &#xA;&lt;p&gt;To get notifications for single property changes in an object, there are two methods depending on the object&#39;s base class.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;code&gt;NSManagedObject&lt;/code&gt; subclasses: Use the standard KVO method:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observer = person.observe(\.age, options: [.new]) { (person, change)&#xA;    print(&#34;Happy \(change.newValue)th birthday!&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;code&gt;CoreStoreObject&lt;/code&gt; subclasses: Call the &lt;code&gt;observe(...)&lt;/code&gt; method directly on the property. You&#39;ll notice that the API itself is a bit similar to the KVO method:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observer = person.age.observe(options: [.new]) { (person, change)&#xA;    print(&#34;Happy \(change.newValue)th birthday!&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For both methods, you will need to keep a reference to the returned &lt;code&gt;observer&lt;/code&gt; for the duration of the observation.&lt;/p&gt; &#xA;&lt;h3&gt;Observe a single object&#39;s updates&lt;/h3&gt; &#xA;&lt;p&gt;Observers of an &lt;code&gt;ObjectPublisher&lt;/code&gt; can receive notifications if any of the object&#39;s property changes. You can create an &lt;code&gt;ObjectPublisher&lt;/code&gt; from the object directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let objectPublisher: ObjectPublisher&amp;lt;Person&amp;gt; = person.asPublisher(in: dataStack)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or by indexing a &lt;code&gt;ListPublisher&lt;/code&gt;&#39;s &lt;code&gt;ListSnapshot&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let listPublisher: ListPublisher&amp;lt;Person&amp;gt; = // ...&#xA;// ...&#xA;let objectPublisher = listPublisher.snapshot[indexPath]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-a-diffable-list&#34;&gt;&lt;code&gt;ListPublisher&lt;/code&gt; examples&lt;/a&gt; below)&lt;/p&gt; &#xA;&lt;p&gt;To receive notifications, call the &lt;code&gt;ObjectPublisher&lt;/code&gt;&#39;s &lt;code&gt;addObserve(...)&lt;/code&gt; method passing the owner of the callback closure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;objectPublisher.addObserver(self) { [weak self] (objectPublisher) in&#xA;    let snapshot: ObjectSnapshot&amp;lt;Person&amp;gt; = objectPublisher.snapshot&#xA;    // handle changes&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the owner instance will not be retained. You may call &lt;code&gt;ObjectPublisher.removeObserver(...)&lt;/code&gt; explicitly to stop receiving notifications, but the &lt;code&gt;ObjectPublisher&lt;/code&gt; also discontinues sending events to deallocated observers.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;ObjectSnapshot&lt;/code&gt; returned from the &lt;code&gt;ObjectPublisher.snapshot&lt;/code&gt; property returns a full-copy &lt;code&gt;struct&lt;/code&gt; of all properties of the object. This is ideal for managing states as they are thread-safe and are not affected by further changes to the actual object. &lt;code&gt;ObjectPublisher&lt;/code&gt; automatically updates its &lt;code&gt;snapshot&lt;/code&gt; value to the latest state of the object.&lt;/p&gt; &#xA;&lt;p&gt;(A reactive-programming variant of this method is explained in detail in the section on &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#objectpublisherreactive&#34;&gt;&lt;code&gt;ObjectPublisher&lt;/code&gt; Combine publishers&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Observe a single object&#39;s per-property updates&lt;/h3&gt; &#xA;&lt;p&gt;If you need to track specifically which properties change in an object, implement the &lt;code&gt;ObjectObserver&lt;/code&gt; protocol and specify the &lt;code&gt;EntityType&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyViewController: UIViewController, ObjectObserver {&#xA;    func objectMonitor(monitor: ObjectMonitor&amp;lt;MyPersonEntity&amp;gt;, willUpdateObject object: MyPersonEntity) {&#xA;        // ...&#xA;    }&#xA;    &#xA;    func objectMonitor(monitor: ObjectMonitor&amp;lt;MyPersonEntity&amp;gt;, didUpdateObject object: MyPersonEntity, changedPersistentKeys: Set&amp;lt;KeyPathString&amp;gt;) {&#xA;        // ...&#xA;    }&#xA;    &#xA;    func objectMonitor(monitor: ObjectMonitor&amp;lt;MyPersonEntity&amp;gt;, didDeleteObject object: MyPersonEntity) {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We then need to keep an &lt;code&gt;ObjectMonitor&lt;/code&gt; instance and register our &lt;code&gt;ObjectObserver&lt;/code&gt; as an observer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person: MyPersonEntity = // ...&#xA;self.monitor = dataStack.monitorObject(person)&#xA;self.monitor.addObserver(self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The controller will then notify our observer whenever the object&#39;s attributes change. You can add multiple &lt;code&gt;ObjectObserver&lt;/code&gt;s to a single &lt;code&gt;ObjectMonitor&lt;/code&gt; without any problem. This means you can just share around the &lt;code&gt;ObjectMonitor&lt;/code&gt; instance to different screens without problem.&lt;/p&gt; &#xA;&lt;p&gt;You can get &lt;code&gt;ObjectMonitor&lt;/code&gt;&#39;s object through its &lt;code&gt;object&lt;/code&gt; property. If the object is deleted, the &lt;code&gt;object&lt;/code&gt; property will become &lt;code&gt;nil&lt;/code&gt; to prevent further access.&lt;/p&gt; &#xA;&lt;p&gt;While &lt;code&gt;ObjectMonitor&lt;/code&gt; exposes &lt;code&gt;removeObserver(...)&lt;/code&gt; as well, it only stores &lt;code&gt;weak&lt;/code&gt; references of the observers and will safely unregister deallocated observers.&lt;/p&gt; &#xA;&lt;h3&gt;Observe a diffable list&lt;/h3&gt; &#xA;&lt;p&gt;Observers of a &lt;code&gt;ListPublisher&lt;/code&gt; can receive notifications whenever its fetched result set changes. You can create a &lt;code&gt;ListPublisher&lt;/code&gt; by fetching from the &lt;code&gt;DataStack&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let listPublisher = dataStack.listPublisher(&#xA;    From&amp;lt;Person&amp;gt;()&#xA;        .sectionBy(\.age&#34;) { &#34;Age \($0)&#34; } // sections are optional&#xA;        .where(\.title == &#34;Engineer&#34;)&#xA;        .orderBy(.ascending(\.lastName))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To receive notifications, call the &lt;code&gt;ListPublisher&lt;/code&gt;&#39;s &lt;code&gt;addObserve(...)&lt;/code&gt; method passing the owner of the callback closure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;listPublisher.addObserver(self) { [weak self] (listPublisher) in&#xA;    let snapshot: ListSnapshot&amp;lt;Person&amp;gt; = listPublisher.snapshot&#xA;    // handle changes&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the owner instance will not be retained. You may call &lt;code&gt;ListPublisher.removeObserver(...)&lt;/code&gt; explicitly to stop receiving notifications, but the &lt;code&gt;ListPublisher&lt;/code&gt; also discontinues sending events to deallocated observers.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;ListSnapshot&lt;/code&gt; returned from the &lt;code&gt;ListPublisher.snapshot&lt;/code&gt; property returns a full-copy &lt;code&gt;struct&lt;/code&gt; of all sections and &lt;code&gt;NSManagedObject&lt;/code&gt; items in the list. This is ideal for managing states as they are thread-safe and are not affected by further changes to the result set. &lt;code&gt;ListPublisher&lt;/code&gt; automatically updates its &lt;code&gt;snapshot&lt;/code&gt; value to the latest state of the fetch.&lt;/p&gt; &#xA;&lt;p&gt;(A reactive-programming variant of this method is explained in detail in the section on &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#listpublisherreactive&#34;&gt;&lt;code&gt;ListPublisher&lt;/code&gt; Combine publishers&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Unlike &lt;code&gt;ListMonitor&lt;/code&gt;s (See &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#observe-detailed-list-changes&#34;&gt;&lt;code&gt;ListMonitor&lt;/code&gt; examples&lt;/a&gt; below), a &lt;code&gt;ListPublisher&lt;/code&gt; does not track detailed inserts, deletes, and moves. In return, a &lt;code&gt;ListPublisher&lt;/code&gt; is a lot more lightweight and are designed to work well with &lt;code&gt;DiffableDataSource.TableViewAdapter&lt;/code&gt;s and &lt;code&gt;DiffableDataSource.CollectionViewAdapter&lt;/code&gt;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.dataSource = DiffableDataSource.CollectionViewAdapter&amp;lt;Person&amp;gt;(&#xA;    collectionView: self.collectionView,&#xA;    dataStack: CoreStoreDefaults.dataStack,&#xA;    cellProvider: { (collectionView, indexPath, person) in&#xA;        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: &#34;PersonCell&#34;) as! PersonCell&#xA;        cell.setPerson(person)&#xA;        return cell&#xA;    }&#xA;)&#xA;&#xA;// ...&#xA;&#xA;listPublisher.addObserver(self) { [weak self] (listPublisher) in&#xA;   self?.dataSource?.apply(&#xA;       listPublisher.snapshot, animatingDifferences: true&#xA;   )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Observe detailed list changes&lt;/h3&gt; &#xA;&lt;p&gt;If you need to track each object&#39;s inserts, deletes, moves, and updates, implement one of the &lt;code&gt;ListObserver&lt;/code&gt; protocols and specify the &lt;code&gt;EntityType&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyViewController: UIViewController, ListObserver {&#xA;    func listMonitorDidChange(monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;) {&#xA;        // ...&#xA;    }&#xA;    &#xA;    func listMonitorDidRefetch(monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;) {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Including &lt;code&gt;ListObserver&lt;/code&gt;, there are 3 observer protocols you can implement depending on how detailed you need to handle a change notification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ListObserver&lt;/code&gt;: lets you handle these callback methods:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    func listMonitorWillChange(_ monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;)&#xA;    func listMonitorDidChange(_ monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;)&#xA;    func listMonitorWillRefetch(_ monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;)&#xA;    func listMonitorDidRefetch(_ monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;listMonitorDidChange(_:)&lt;/code&gt; and &lt;code&gt;listMonitorDidRefetch(_:)&lt;/code&gt; implementations are both required. &lt;code&gt;listMonitorDidChange(_:)&lt;/code&gt; is called whenever the &lt;code&gt;ListMonitor&lt;/code&gt;&#39;s count, order, or filtered objects change. &lt;code&gt;listMonitorDidRefetch(_:)&lt;/code&gt; is called when the &lt;code&gt;ListMonitor.refetch()&lt;/code&gt; was executed or if the internal persistent store was changed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ListObjectObserver&lt;/code&gt;: in addition to &lt;code&gt;ListObserver&lt;/code&gt; methods, also lets you handle object inserts, updates, and deletes:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    func listMonitor(_ monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;, didInsertObject object: MyPersonEntity, toIndexPath indexPath: IndexPath)&#xA;    func listMonitor(_ monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;, didDeleteObject object: MyPersonEntity, fromIndexPath indexPath: IndexPath)&#xA;    func listMonitor(_ monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;, didUpdateObject object: MyPersonEntity, atIndexPath indexPath: IndexPath)&#xA;    func listMonitor(_ monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;, didMoveObject object: MyPersonEntity, fromIndexPath: IndexPath, toIndexPath: IndexPath)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ListSectionObserver&lt;/code&gt;: in addition to &lt;code&gt;ListObjectObserver&lt;/code&gt; methods, also lets you handle section inserts and deletes:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    func listMonitor(_ monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;, didInsertSection sectionInfo: NSFetchedResultsSectionInfo, toSectionIndex sectionIndex: Int)&#xA;    func listMonitor(_ monitor: ListMonitor&amp;lt;MyPersonEntity&amp;gt;, didDeleteSection sectionInfo: NSFetchedResultsSectionInfo, fromSectionIndex sectionIndex: Int)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We then need to create a &lt;code&gt;ListMonitor&lt;/code&gt; instance and register our &lt;code&gt;ListObserver&lt;/code&gt; as an observer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.monitor = dataStack.monitorList(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;()&#xA;        .where(\.age &amp;gt; 30)&#xA;        .orderBy(.ascending(\.name))&#xA;        .tweak { $0.fetchBatchSize = 20 }&#xA;)&#xA;self.monitor.addObserver(self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;ObjectMonitor&lt;/code&gt;, a &lt;code&gt;ListMonitor&lt;/code&gt; can also have multiple &lt;code&gt;ListObserver&lt;/code&gt;s registered to a single &lt;code&gt;ListMonitor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have noticed, the &lt;code&gt;monitorList(...)&lt;/code&gt; method accepts &lt;code&gt;Where&lt;/code&gt;, &lt;code&gt;OrderBy&lt;/code&gt;, and &lt;code&gt;Tweak&lt;/code&gt; clauses exactly like a fetch. As the list maintained by &lt;code&gt;ListMonitor&lt;/code&gt; needs to have a deterministic order, at least the &lt;code&gt;From&lt;/code&gt; and &lt;code&gt;OrderBy&lt;/code&gt; clauses are required.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;ListMonitor&lt;/code&gt; created from &lt;code&gt;monitorList(...)&lt;/code&gt; will maintain a single-section list. You can therefore access its contents with just an index:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let firstPerson = self.monitor[0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the list needs to be grouped into sections, create the &lt;code&gt;ListMonitor&lt;/code&gt; instance with the &lt;code&gt;monitorSectionedList(...)&lt;/code&gt; method and a &lt;code&gt;SectionBy&lt;/code&gt; clause:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.monitor = dataStack.monitorSectionedList(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;()&#xA;        .sectionBy(\.age)&#xA;        .where(\.gender == &#34;M&#34;)&#xA;        .orderBy(.ascending(\.age), .ascending(\.name))&#xA;        .tweak { $0.fetchBatchSize = 20 }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A list controller created this way will group the objects by the attribute key indicated by the &lt;code&gt;SectionBy&lt;/code&gt; clause. One more thing to remember is that the &lt;code&gt;OrderBy&lt;/code&gt; clause should sort the list in such a way that the &lt;code&gt;SectionBy&lt;/code&gt; attribute would be sorted together (a requirement shared by &lt;code&gt;NSFetchedResultsController&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;SectionBy&lt;/code&gt; clause can also be passed a closure to transform the section name into a displayable string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.monitor = dataStack.monitorSectionedList(&#xA;    From&amp;lt;MyPersonEntity&amp;gt;()&#xA;        .sectionBy(\.age) { (sectionName) -&amp;gt; String? in&#xA;            &#34;\(sectionName) years old&#34;&#xA;        }&#xA;        .orderBy(.ascending(\.age), .ascending(\.name))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful when implementing a &lt;code&gt;UITableViewDelegate&lt;/code&gt;&#39;s section header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&amp;gt; String? {&#xA;    let sectionInfo = self.monitor.sectionInfoAtIndex(section)&#xA;    return sectionInfo.name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To access the objects of a sectioned list, use an &lt;code&gt;IndexPath&lt;/code&gt; or a tuple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let indexPath = IndexPath(row: 2, section: 1)&#xA;let person1 = self.monitor[indexPath]&#xA;let person2 = self.monitor[1, 2]&#xA;// person1 and person2 are the same object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Type-safe &lt;code&gt;CoreStoreObject&lt;/code&gt;s&lt;/h2&gt; &#xA;&lt;p&gt;Starting CoreStore 4.0, we can now create persisted objects without depending on &lt;em&gt;.xcdatamodeld&lt;/em&gt; Core Data files. The new &lt;code&gt;CoreStoreObject&lt;/code&gt; subclass replaces &lt;code&gt;NSManagedObject&lt;/code&gt;, and specially-typed properties declared on these classes will be synthesized as Core Data attributes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Animal: CoreStoreObject {&#xA;    @Field.Stored(&#34;species&#34;)&#xA;    var species: String = &#34;&#34;&#xA;}&#xA;&#xA;class Dog: Animal {&#xA;    @Field.Stored(&#34;nickname&#34;)&#xA;    var nickname: String?&#xA;    &#xA;    @Field.Relationship(&#34;master&#34;)&#xA;    var master: Person?&#xA;}&#xA;&#xA;class Person: CoreStoreObject {&#xA;    @Field.Stored(&#34;name&#34;)&#xA;    var name: String = &#34;&#34;&#xA;    &#xA;    @Field.Relationship(&#34;pets&#34;, inverse: \Dog.$master)&#xA;    var pets: Set&amp;lt;Dog&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The property names to be saved to Core Data is specified as the &lt;code&gt;keyPath&lt;/code&gt; argument. This lets us refactor our Swift code without affecting the underlying database. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Person: CoreStoreObject {&#xA;    @Field.Stored(&#34;name&#34;)&#xA;    private var internalName: String = &#34;&#34;&#xA;    // note property name is independent of the storage key name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we used the property name &lt;code&gt;internalName&lt;/code&gt; and made it &lt;code&gt;private&lt;/code&gt;, but the underlying key-path &lt;code&gt;&#34;name&#34;&lt;/code&gt; was unchanged so our model will not trigger a data migration.&lt;/p&gt; &#xA;&lt;p&gt;To tell the &lt;code&gt;DataStack&lt;/code&gt; about these types, add all &lt;code&gt;CoreStoreObject&lt;/code&gt;s&#39; entities to a &lt;code&gt;CoreStoreSchema&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;CoreStoreDefaults.dataStack = DataStack(&#xA;    CoreStoreSchema(&#xA;        modelVersion: &#34;V1&#34;,&#xA;        entities: [&#xA;            Entity&amp;lt;Animal&amp;gt;(&#34;Animal&#34;, isAbstract: true),&#xA;            Entity&amp;lt;Dog&amp;gt;(&#34;Dog&#34;),&#xA;            Entity&amp;lt;Person&amp;gt;(&#34;Person&#34;)&#xA;        ]&#xA;    )&#xA;)&#xA;CoreStoreDefaults.dataStack.addStorage(/* ... */)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that&#39;s all CoreStore needs to build the model; &lt;strong&gt;we don&#39;t need &lt;em&gt;.xcdatamodeld&lt;/em&gt; files anymore.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In addition, &lt;code&gt;@Field&lt;/code&gt; properties can be used to create type-safe key-path strings&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keyPath = String(keyPath: \Dog.$nickname)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as well as &lt;code&gt;Where&lt;/code&gt; and &lt;code&gt;OrderBy&lt;/code&gt; clauses&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let puppies = try dataStack.fetchAll(&#xA;    From&amp;lt;Dog&amp;gt;()&#xA;        .where(\.$age &amp;lt; 5)&#xA;        .orderBy(.ascending(\.$age))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All CoreStore APIs that are usable with &lt;code&gt;NSManagedObject&lt;/code&gt;s are also available for &lt;code&gt;CoreStoreObject&lt;/code&gt;s. These include &lt;code&gt;ListMonitor&lt;/code&gt;s, &lt;code&gt;ImportableObject&lt;/code&gt;s, fetching, etc.&lt;/p&gt; &#xA;&lt;h3&gt;New &lt;code&gt;@Field&lt;/code&gt; Property Wrapper syntax&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️&lt;strong&gt;Important:&lt;/strong&gt; &lt;code&gt;@Field&lt;/code&gt; properties are only supported for &lt;code&gt;CoreStoreObject&lt;/code&gt; subclasses. If you are using &lt;code&gt;NSManagedObject&lt;/code&gt;s, you need to keep using &lt;code&gt;@NSManaged&lt;/code&gt; for your attributes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Starting CoreStore 7.1.0, &lt;code&gt;CoreStoreObject&lt;/code&gt; properties may be converted to &lt;code&gt;@Field&lt;/code&gt; Property Wrappers.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‼️ Please take note of the warnings below before converting or else the model&#39;s hash might change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;If conversion is too risky, the current &lt;code&gt;Value.Required&lt;/code&gt;, &lt;code&gt;Value.Optional&lt;/code&gt;, &lt;code&gt;Transformable.Required&lt;/code&gt;, &lt;code&gt;Transformable.Optional&lt;/code&gt;, &lt;code&gt;Relationship.ToOne&lt;/code&gt;, &lt;code&gt;Relationship.ToManyOrdered&lt;/code&gt;, and &lt;code&gt;Relationship.ToManyUnordered&lt;/code&gt; will all be supported for while so you can opt to use them as is for now.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‼️ This cannot be stressed enough, but please make sure to set your schema&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#versionlocks&#34;&gt;&lt;code&gt;VersionLock&lt;/code&gt;&lt;/a&gt; before converting!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;&lt;code&gt;@Field.Stored&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@Field.Stored&lt;/code&gt; property wrapper is used for persisted value types. This is the replacement for &#34;non-transient&#34; &lt;code&gt;Value.Required&lt;/code&gt; and &lt;code&gt;Value.Optional&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th&gt;Before&lt;/th&gt;&#xA;   &lt;th&gt;&lt;pre lang=&#34;swift&#34;&gt;@Field.Stored&lt;/pre&gt;&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;class Person: CoreStoreObject {&#xA;    &lt;br&gt;&#xA;    let title = Value.Required&amp;lt;String&amp;gt;(&#34;title&#34;, initial: &#34;Mr.&#34;)&#xA;    let nickname = Value.Optional&amp;lt;String&amp;gt;(&#34;nickname&#34;)&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;class Person: CoreStoreObject {&#xA;    &lt;br&gt;&#xA;    @Field.Stored(&#34;title&#34;)&#xA;    var title: String = &#34;Mr.&#34;&#xA;    &lt;br&gt;&#xA;    @Field.Stored(&#34;nickname&#34;)&#xA;    var nickname: String?&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Only &lt;code&gt;Value.Required&lt;/code&gt; and &lt;code&gt;Value.Optional&lt;/code&gt; that are NOT transient values can be converted to &lt;code&gt;Field.Stored&lt;/code&gt;. For transient/computed properties, refer to &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#fieldvirtual&#34;&gt;&lt;code&gt;@Field.Virtual&lt;/code&gt;&lt;/a&gt; properties in the next section. ⚠️ When converting, make sure that all parameters, including the default values, are exactly the same or else the model&#39;s hash might change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;&lt;code&gt;@Field.Virtual&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@Field.Virtual&lt;/code&gt; property wrapper is used for unsaved, computed value types. This is the replacement for &#34;transient&#34; &lt;code&gt;Value.Required&lt;/code&gt; and &lt;code&gt;Value.Optional&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th&gt;Before&lt;/th&gt;&#xA;   &lt;th&gt;&lt;pre lang=&#34;swift&#34;&gt;@Field.Virtual&lt;/pre&gt;&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;class Animal: CoreStoreObject {&#xA;    &lt;br&gt;&#xA;    let speciesPlural = Value.Required&amp;lt;String&amp;gt;(&#xA;        &#34;speciesPlural&#34;,&#xA;        transient: true,&#xA;        customGetter: Animal.getSpeciesPlural(_:)&#xA;    )&#xA;    &lt;br&gt;&#xA;    let species = Value.Required&amp;lt;String&amp;gt;(&#34;species&#34;, initial: &#34;&#34;)&#xA;    &lt;br&gt;&#xA;    static func getSpeciesPlural(_ partialObject: PartialObject&amp;lt;Animal&amp;gt;) -&amp;gt; String? {&#xA;        let species = partialObject.value(for: { $0.species })&#xA;        return species + &#34;s&#34;&#xA;    }&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;class Animal: CoreStoreObject {&#xA;    &lt;br&gt;&#xA;    @Field.Virtual(&#xA;        &#34;speciesPlural&#34;,&#xA;        customGetter: { (object, field) in&#xA;            return object.$species.value + &#34;s&#34;&#xA;        }&#xA;    )&#xA;    var speciesPlural: String&#xA;    &lt;br&gt;&#xA;    @Field.Stored(&#34;species&#34;)&#xA;    var species: String = &#34;&#34;&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Only &lt;code&gt;Value.Required&lt;/code&gt; and &lt;code&gt;Value.Optional&lt;/code&gt; that ARE transient values can be converted to &lt;code&gt;Field.Virtual&lt;/code&gt;. For non-transient properties, refer to &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#fieldstored&#34;&gt;&lt;code&gt;@Field.Stored&lt;/code&gt;&lt;/a&gt; properties in the previous section. ⚠️ When converting, make sure that all parameters, including the default values, are exactly the same or else the model&#39;s hash might change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;&lt;code&gt;@Field.Coded&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@Field.Coded&lt;/code&gt; property wrapper is used for binary-codable values. This is the new counterpart, &lt;strong&gt;not replacement&lt;/strong&gt;, for &lt;code&gt;Transformable.Required&lt;/code&gt; and &lt;code&gt;Transformable.Optional&lt;/code&gt; properties. &lt;code&gt;@Field.Coded&lt;/code&gt; also supports other encodings such as JSON and custom binary converters.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‼️ The current &lt;code&gt;Transformable.Required&lt;/code&gt; and &lt;code&gt;Transformable.Optional&lt;/code&gt; mechanism have no safe one-to-one conversion to &lt;code&gt;@Field.Coded&lt;/code&gt;. Please use &lt;code&gt;@Field.Coded&lt;/code&gt; only for newly added attributes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th&gt;Before&lt;/th&gt;&#xA;   &lt;th&gt;&lt;pre lang=&#34;swift&#34;&gt;@Field.Coded&lt;/pre&gt;&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;class Vehicle: CoreStoreObject {&#xA;    &lt;br&gt;&#xA;    let color = Transformable.Optional&amp;lt;UIColor&amp;gt;(&#34;color&#34;, initial: .white)&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;class Vehicle: CoreStoreObject {&#xA;    &lt;br&gt;&#xA;    @Field.Coded(&#34;color&#34;, coder: FieldCoders.NSCoding.self)&#xA;    var color: UIColor? = .white&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Built-in encoders such as &lt;code&gt;FieldCoders.NSCoding&lt;/code&gt;, &lt;code&gt;FieldCoders.Json&lt;/code&gt;, and &lt;code&gt;FieldCoders.Plist&lt;/code&gt; are available, and custom encoding/decoding is also supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Person: CoreStoreObject {&#xA;    &#xA;    struct CustomInfo: Codable {&#xA;        // ...&#xA;    }&#xA;    &#xA;    @Field.Coded(&#34;otherInfo&#34;, coder: FieldCoders.Json.self)&#xA;    var otherInfo: CustomInfo?&#xA;    &#xA;    @Field.Coded(&#xA;        &#34;photo&#34;,&#xA;        coder: {&#xA;            encode: { $0.toData() },&#xA;            decode: { Photo(fromData: $0) }&#xA;        }&#xA;    )&#xA;    var photo: Photo?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‼️&lt;strong&gt;Important:&lt;/strong&gt; Any changes in the encoders/decoders are not reflected in the &lt;code&gt;VersionLock&lt;/code&gt;, so make sure that the encoder and decoder logic is compatible for all versions of your persistent store.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;&lt;code&gt;@Field.Relationship&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;@Field.Relationship&lt;/code&gt; property wrapper is used for link relationships with other &lt;code&gt;CoreStoreObject&lt;/code&gt;s. This is the replacement for &lt;code&gt;Relationship.ToOne&lt;/code&gt;, &lt;code&gt;Relationship.ToManyOrdered&lt;/code&gt;, and &lt;code&gt;Relationship.ToManyUnordered&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;p&gt;The type of relationship is determined by the &lt;code&gt;@Field.Relationship&lt;/code&gt; generic type:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; : To-one relationship&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt; : To-many ordered relationship&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Set&amp;lt;T&amp;gt;&lt;/code&gt; : To-many unordered relationship&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th&gt;Before&lt;/th&gt;&#xA;   &lt;th&gt;&lt;pre lang=&#34;swift&#34;&gt;@Field.Stored&lt;/pre&gt;&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;class Pet: CoreStoreObject {&#xA;    &lt;br&gt;&#xA;    let master = Relationship.ToOne&amp;lt;Person&amp;gt;(&#34;master&#34;)&#xA;}&#xA;class Person: CoreStoreObject {&#xA;    &lt;br&gt;&#xA;    let pets: Relationship.ToManyUnordered&amp;lt;Pet&amp;gt;(&#34;pets&#34;, inverse: \.$master)&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;class Pet: CoreStoreObject {&#xA;    &lt;br&gt;&#xA;    @Field.Relationship(&#34;master&#34;)&#xA;    var master: Person?&#xA;}&#xA;class Person: CoreStoreObject {&#xA;    &lt;br&gt;&#xA;    @Field.Relationship(&#34;pets&#34;, inverse: \.$master)&#xA;    var pets: Set&amp;lt;Pet&amp;gt;&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ When converting, make sure that all parameters, including the default values, are exactly the same or else the model&#39;s hash might change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Also note how &lt;code&gt;Relationship&lt;/code&gt;s are linked statically with the &lt;code&gt;inverse:&lt;/code&gt; argument. &lt;strong&gt;All relationships are required to have an &#34;inverse&#34; relationship&lt;/strong&gt;. Unfortunately, due to Swift compiler limitation we can declare the &lt;code&gt;inverse:&lt;/code&gt; on only one of the relationship-pair.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;@Field&lt;/code&gt; usage notes&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Accessor syntax&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When using key-path utilities, properties using &lt;code&gt;@Field&lt;/code&gt; property wrappers need to use the &lt;code&gt;$&lt;/code&gt; syntax:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Before: &lt;code&gt;From&amp;lt;Person&amp;gt;.where(\.title == &#34;Mr.&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;After: &lt;code&gt;From&amp;lt;Person&amp;gt;.where(\.$title == &#34;Mr.&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This applies to property access using &lt;code&gt;ObjectPublisher&lt;/code&gt;s and &lt;code&gt;ObjectSnapshot&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Before: &lt;code&gt;let name = personSnapshot.name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;After: &lt;code&gt;let name = personSnapshot.$name&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default values vs. Initial values&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;One common mistake when assigning default values to &lt;code&gt;CoreStoreObject&lt;/code&gt; properties is to assign it a value and expect it to be evaluated whenever an object is created:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// ❌&#xA;class Person: CoreStoreObject {&#xA;&#xA;    @Field.Stored(&#34;identifier&#34;)&#xA;    var identifier: UUID = UUID() // Wrong!&#xA;    &#xA;    @Field.Stored(&#34;createdDate&#34;)&#xA;    var createdDate: Date = Date() // Wrong!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This default value will be evaluated only when the &lt;code&gt;DataStack&lt;/code&gt; sets up the schema, and all instances will end up having the same values. This syntax for &#34;default values&#34; are usually used only for actual reasonable constant values, or sentinel values such as &lt;code&gt;&#34;&#34;&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For actual &#34;initial values&#34;, &lt;code&gt;@Field.Stored&lt;/code&gt; and &lt;code&gt;@Field.Coded&lt;/code&gt; now supports dynamic evaluation during object creation via the &lt;code&gt;dynamicInitialValue:&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// ✅&#xA;class Person: CoreStoreObject {&#xA;&#xA;    @Field.Stored(&#34;identifier&#34;, dynamicInitialValue: { UUID() })&#xA;    var identifier: UUID&#xA;    &#xA;    @Field.Stored(&#34;createdDate&#34;, dynamicInitialValue: { Date() })&#xA;    var createdDate: Date&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using this feature, a &#34;default value&#34; should not be assigned (i.e. no &lt;code&gt;=&lt;/code&gt; expression).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;VersionLock&lt;/code&gt;s&lt;/h3&gt; &#xA;&lt;p&gt;While it is convenient to be able to declare entities only in code, it is worrying that we might accidentally change the &lt;code&gt;CoreStoreObject&lt;/code&gt;&#39;s properties and break our users&#39; model version history. For this, the &lt;code&gt;CoreStoreSchema&lt;/code&gt; allows us to &#34;lock&#34; our properties to a particular configuration. Any changes to that &lt;code&gt;VersionLock&lt;/code&gt; will raise an assertion failure during the &lt;code&gt;CoreStoreSchema&lt;/code&gt; initialization, so you can then look for the commit which changed the &lt;code&gt;VersionLock&lt;/code&gt; hash.&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;code&gt;VersionLock&lt;/code&gt;s, create the &lt;code&gt;CoreStoreSchema&lt;/code&gt;, run the app, and look for a similar log message that is automatically printed to the console:&lt;/p&gt; &#xA;&lt;img width=&#34;700&#34; alt=&#34;VersionLock&#34; src=&#34;https://cloud.githubusercontent.com/assets/3029684/26525632/757f1bd0-4398-11e7-9795-4132a2df0538.png&#34;&gt; &#xA;&lt;p&gt;Copy this dictionary value and use it as the &lt;code&gt;versionLock:&lt;/code&gt; argument of the &lt;code&gt;CoreStoreSchema&lt;/code&gt; initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;CoreStoreSchema(&#xA;    modelVersion: &#34;V1&#34;,&#xA;    entities: [&#xA;        Entity&amp;lt;Animal&amp;gt;(&#34;Animal&#34;, isAbstract: true),&#xA;        Entity&amp;lt;Dog&amp;gt;(&#34;Dog&#34;),&#xA;        Entity&amp;lt;Person&amp;gt;(&#34;Person&#34;),&#xA;    ],&#xA;    versionLock: [&#xA;        &#34;Animal&#34;: [0x1b59d511019695cf, 0xdeb97e86c5eff179, 0x1cfd80745646cb3, 0x4ff99416175b5b9a],&#xA;        &#34;Dog&#34;: [0xe3f0afeb109b283a, 0x29998d292938eb61, 0x6aab788333cfc2a3, 0x492ff1d295910ea7],&#xA;        &#34;Person&#34;: [0x66d8bbfd8b21561f, 0xcecec69ecae3570f, 0xc4b73d71256214ef, 0x89b99bfe3e013e8b]&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also get this hash after the &lt;code&gt;DataStack&lt;/code&gt; has been fully set up by printing to the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;print(CoreStoreDefaults.dataStack.modelSchema.printCoreStoreSchema())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the version lock is set, any changes in the properties or to the model will trigger an assertion failure similar to this:&lt;/p&gt; &#xA;&lt;img width=&#34;700&#34; alt=&#34;VersionLock failure&#34; src=&#34;https://cloud.githubusercontent.com/assets/3029684/26525666/92f46f0c-4399-11e7-9395-4379f6f20876.png&#34;&gt; &#xA;&lt;h2&gt;Reactive Programming&lt;/h2&gt; &#xA;&lt;h3&gt;RxSwift&lt;/h3&gt; &#xA;&lt;p&gt;RxSwift utilities are available through the &lt;a href=&#34;https://github.com/JohnEstropia/RxCoreStore&#34;&gt;RxCoreStore&lt;/a&gt; external module.&lt;/p&gt; &#xA;&lt;h3&gt;Combine&lt;/h3&gt; &#xA;&lt;p&gt;Combine publishers are available from the &lt;code&gt;DataStack&lt;/code&gt;, &lt;code&gt;ListPublisher&lt;/code&gt;, and &lt;code&gt;ObjectPublisher&lt;/code&gt;&#39;s &lt;code&gt;.reactive&lt;/code&gt; namespace property.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;DataStack.reactive&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Adding a storage through &lt;code&gt;DataStack.reactive.addStorage(_:)&lt;/code&gt; returns a publisher that reports a &lt;code&gt;MigrationProgress&lt;/code&gt; &lt;code&gt;enum&lt;/code&gt; value. The &lt;code&gt;.migrating&lt;/code&gt; value is only emitted if the storage goes through a migration. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#setting-up&#34;&gt;Setting up&lt;/a&gt; section for details on the storage setup process itself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.reactive&#xA;    .addStorage(&#xA;        SQLiteStore(fileName: &#34;core_data.sqlite&#34;)&#xA;    )&#xA;    .sink(&#xA;        receiveCompletion: { result in&#xA;            // ...&#xA;        },&#xA;        receiveValue: { (progress) in&#xA;            print(&#34;\(round(progress.fractionCompleted * 100)) %&#34;) // 0.0 ~ 1.0&#xA;            switch progress {&#xA;            case .migrating(let storage, let nsProgress):&#xA;                // ...&#xA;            case .finished(let storage, let migrationRequired):&#xA;                // ...&#xA;            }&#xA;        }&#xA;    )&#xA;    .store(in: &amp;amp;cancellables)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#saving-and-processing-transactions&#34;&gt;Transactions&lt;/a&gt; are also available as publishers through &lt;code&gt;DataStack.reactive.perform(_:)&lt;/code&gt;, which returns a Combine &lt;code&gt;Future&lt;/code&gt; that emits any type returned from the closure parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.reactive&#xA;    .perform(&#xA;        asynchronous: { (transaction) -&amp;gt; (inserted: Set&amp;lt;NSManagedObject&amp;gt;, deleted: Set&amp;lt;NSManagedObject&amp;gt;) in&#xA;&#xA;            // ...&#xA;            return (&#xA;                transaction.insertedObjects(),&#xA;                transaction.deletedObjects()&#xA;            )&#xA;        }&#xA;    )&#xA;    .sink(&#xA;        receiveCompletion: { result in&#xA;            // ...&#xA;        },&#xA;        receiveValue: { value in&#xA;            let inserted = dataStack.fetchExisting(value0.inserted)&#xA;            let deleted = dataStack.fetchExisting(value0.deleted)&#xA;            // ...&#xA;        }&#xA;    )&#xA;    .store(in: &amp;amp;cancellables)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For importing convenience, &lt;code&gt;ImportableObject&lt;/code&gt; and &lt;code&gt;ImportableUniqueObjects&lt;/code&gt; can be imported directly through &lt;code&gt;DataStack.reactive.import[Unique]Object(_:source:)&lt;/code&gt; and &lt;code&gt;DataStack.reactive.import[Unique]Objects(_:sourceArray:)&lt;/code&gt; without having to create a transaction block. In this case the publisher emits objects that are already usable directly from the main queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dataStack.reactive&#xA;    .importUniqueObjects(&#xA;        Into&amp;lt;Person&amp;gt;(),&#xA;        sourceArray: [&#xA;            [&#34;name&#34;: &#34;John&#34;],&#xA;            [&#34;name&#34;: &#34;Bob&#34;],&#xA;            [&#34;name&#34;: &#34;Joe&#34;]&#xA;        ]&#xA;    )&#xA;    .sink(&#xA;        receiveCompletion: { result in&#xA;            // ...&#xA;        },&#xA;        receiveValue: { (people) in&#xA;            XCTAssertEqual(people?.count, 3)&#xA;            // ...&#xA;        }&#xA;    )&#xA;    .store(in: &amp;amp;cancellables)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;ListPublisher.reactive&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;ListPublisher&lt;/code&gt;s can be used to emit &lt;code&gt;ListSnapshot&lt;/code&gt;s through Combine using &lt;code&gt;ListPublisher.reactive.snapshot(emitInitialValue:)&lt;/code&gt;. The snapshot values are emitted in the main queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;listPublisher.reactive&#xA;    .snapshot(emitInitialValue: true)&#xA;    .sink(&#xA;        receiveCompletion: { result in&#xA;            // ...&#xA;        },&#xA;        receiveValue: { (listSnapshot) in&#xA;            dataSource.apply(&#xA;                listSnapshot,&#xA;                animatingDifferences: true&#xA;            )&#xA;        }&#xA;    )&#xA;    .store(in: &amp;amp;cancellables)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;ObjectPublisher.reactive&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;ObjectPublisher&lt;/code&gt;s can be used to emit &lt;code&gt;ObjectSnapshot&lt;/code&gt;s through Combine using &lt;code&gt;ObjectPublisher.reactive.snapshot(emitInitialValue:)&lt;/code&gt;. The snapshot values are emitted in the main queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;objectPublisher.reactive&#xA;    .snapshot(emitInitialValue: true)&#xA;    .sink(&#xA;        receiveCompletion: { result in&#xA;            // ...&#xA;        },&#xA;        receiveValue: { (objectSnapshot) in&#xA;            tableViewCell.setObject(objectSnapshot)&#xA;        }&#xA;    )&#xA;    .store(in: &amp;amp;tableViewCell.cancellables)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SwiftUI Utilities&lt;/h2&gt; &#xA;&lt;p&gt;Observing list and object changes in SwiftUI can be done through a couple of approaches. One is by creating &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#swiftui-views&#34;&gt;views that autoupdates their contents&lt;/a&gt;, or by declaring &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#swiftui-property-wrappers&#34;&gt;property wrappers that trigger view updates&lt;/a&gt;. Both approaches are implemented almost the same internally, but this lets you be flexible depending on the structure of your custom &lt;code&gt;View&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftUI Views&lt;/h3&gt; &#xA;&lt;p&gt;CoreStore provides &lt;code&gt;View&lt;/code&gt; containers that automatically update their contents when data changes.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;ListReader&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;code&gt;ListReader&lt;/code&gt; observes changes to a &lt;code&gt;ListPublisher&lt;/code&gt; and creates its content views dynamically. The builder closure receives a &lt;code&gt;ListSnapshot&lt;/code&gt; value that can be used to create the contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let people: ListPublisher&amp;lt;Person&amp;gt;&#xA;&#xA;var body: some View {&#xA;   List {&#xA;       ListReader(self.people) { listSnapshot in&#xA;           ForEach(objectIn: listSnapshot) { person in&#xA;               // ...&#xA;           }&#xA;       }&#xA;   }&#xA;   .animation(.default)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As shown above, a typical use case is to use it together with CoreStore&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#foreach&#34;&gt;&lt;code&gt;ForEach&lt;/code&gt; extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;KeyPath&lt;/code&gt; can also be optionally provided to extract specific properties of the &lt;code&gt;ListSnapshot&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let people: ListPublisher&amp;lt;Person&amp;gt;&#xA;&#xA;var body: some View {&#xA;    ListReader(self.people, keyPath: \.count) { count in&#xA;        Text(&#34;Number of members: \(count)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;ObjectReader&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;code&gt;ObjectReader&lt;/code&gt; observes changes to an &lt;code&gt;ObjectPublisher&lt;/code&gt; and creates its content views dynamically. The builder closure receives an &lt;code&gt;ObjectSnapshot&lt;/code&gt; value that can be used to create the contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person: ObjectPublisher&amp;lt;Person&amp;gt;&#xA;&#xA;var body: some View {&#xA;   ObjectReader(self.person) { objectSnapshot in&#xA;       // ...&#xA;   }&#xA;   .animation(.default)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;KeyPath&lt;/code&gt; can also be optionally provided to extract specific properties of the &lt;code&gt;ObjectSnapshot&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person: ObjectPublisher&amp;lt;Person&amp;gt;&#xA;&#xA;var body: some View {&#xA;    ObjectReader(self.person, keyPath: \.fullName) { fullName in&#xA;        Text(&#34;Name: \(fullName)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, an &lt;code&gt;ObjectReader&lt;/code&gt; does not create its views wheen the object observed is deleted from the store. In those cases, the &lt;code&gt;placeholder:&lt;/code&gt; argument can be used to provide a custom &lt;code&gt;View&lt;/code&gt; to display when the object is deleted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person: ObjectPublisher&amp;lt;Person&amp;gt;&#xA;&#xA;var body: some View {&#xA;   ObjectReader(&#xA;       self.person,&#xA;       content: { objectSnapshot in&#xA;           // ...&#xA;       },&#xA;       placeholder: { Text(&#34;Record not found&#34;) }&#xA;   )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SwiftUI Property Wrappers&lt;/h3&gt; &#xA;&lt;p&gt;As an alternative to &lt;code&gt;ListReader&lt;/code&gt; and &lt;code&gt;ObjectReader&lt;/code&gt;, CoreStore also provides property wrappers that trigger view updates when the data changes.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;ListState&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;code&gt;@ListState&lt;/code&gt; property exposes a &lt;code&gt;ListSnapshot&lt;/code&gt; value that automatically updates to the latest changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@ListState&#xA;var people: ListSnapshot&amp;lt;Person&amp;gt;&#xA;&#xA;init(listPublisher: ListPublisher&amp;lt;Person&amp;gt;) {&#xA;   self._people = .init(listPublisher)&#xA;}&#xA;&#xA;var body: some View {&#xA;   List {&#xA;       ForEach(objectIn: self.people) { objectSnapshot in&#xA;           // ...&#xA;       }&#xA;   }&#xA;   .animation(.default)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As shown above, a typical use case is to use it together with CoreStore&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/develop/#foreach&#34;&gt;&lt;code&gt;ForEach&lt;/code&gt; extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If a &lt;code&gt;ListPublisher&lt;/code&gt; instance is not available yet, the fetch can be done inline by providing the fetch clauses and the &lt;code&gt;DataStack&lt;/code&gt; instance. By doing so the property can be declared without an initial value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@ListState(&#xA;    From&amp;lt;Person&amp;gt;()&#xA;        .sectionBy(\.age)&#xA;        .where(\.isMember == true)&#xA;        .orderBy(.ascending(\.lastName))&#xA;)&#xA;var people: ListSnapshot&amp;lt;Person&amp;gt;&#xA;&#xA;var body: some View {&#xA;    List {&#xA;        ForEach(sectionIn: self.people) { section in&#xA;            Section(header: Text(section.sectionID)) {&#xA;                ForEach(objectIn: section) { person in&#xA;                    // ...&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;    .animation(.default)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For other initialization variants, refer to the &lt;em&gt;ListState.swift&lt;/em&gt; source documentations.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;ObjectState&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;code&gt;@ObjectState&lt;/code&gt; property exposes an optional &lt;code&gt;ObjectSnapshot&lt;/code&gt; value that automatically updates to the latest changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@ObjectState&#xA;var person: ObjectSnapshot&amp;lt;Person&amp;gt;?&#xA;&#xA;init(objectPublisher: ObjectPublisher&amp;lt;Person&amp;gt;) {&#xA;   self._person = .init(objectPublisher)&#xA;}&#xA;&#xA;var body: some View {&#xA;   HStack {&#xA;       if let person = self.person {&#xA;           AsyncImage(person.$avatarURL)&#xA;           Text(person.$fullName)&#xA;       }&#xA;       else {&#xA;           Text(&#34;Record removed&#34;)&#xA;       }&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As shown above, the property&#39;s value will be &lt;code&gt;nil&lt;/code&gt; if the object has been deleted, so this can be used to display placeholders if needed.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftUI Extensions&lt;/h3&gt; &#xA;&lt;p&gt;For convenience, CoreStore provides extensions to the standard SwiftUI types.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;ForEach&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Several &lt;code&gt;ForEach&lt;/code&gt; initializer overloads are available. Choose depending on your input data and the expected closure data. Refer to the table below (Take note of the argument labels as they are important):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th&gt;Data&lt;/th&gt;&#xA;   &lt;th&gt;Example&lt;/th&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; Signature: &lt;pre lang=&#34;swift&#34;&gt;&#xA;ForEach(_: [ObjectSnapshot&amp;lt;O&amp;gt;])&#xA;&lt;/pre&gt; Closure: &lt;pre lang=&#34;swift&#34;&gt;&#xA;ObjectSnapshot&amp;lt;O&amp;gt;&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;let array: [ObjectSnapshot&amp;lt;Person&amp;gt;]&#xA;&lt;br&gt;&#xA;var body: some View {&#xA;    &lt;br&gt;&#xA;    List {&#xA;        &lt;br&gt;&#xA;        ForEach(self.array) { objectSnapshot in&#xA;            &lt;br&gt;&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; Signature: &lt;pre lang=&#34;swift&#34;&gt;&#xA;ForEach(objectIn: ListSnapshot&amp;lt;O&amp;gt;)&#xA;&lt;/pre&gt; Closure: &lt;pre lang=&#34;swift&#34;&gt;&#xA;ObjectPublisher&amp;lt;O&amp;gt;&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;let listSnapshot: ListSnapshot&amp;lt;Person&amp;gt;&#xA;&lt;br&gt;&#xA;var body: some View {&#xA;    &lt;br&gt;&#xA;    List {&#xA;        &lt;br&gt;&#xA;        ForEach(objectIn: self.listSnapshot) { objectPublisher in&#xA;            &lt;br&gt;&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; Signature: &lt;pre lang=&#34;swift&#34;&gt;&#xA;ForEach(objectIn: [ObjectSnapshot&amp;lt;O&amp;gt;])&#xA;&lt;/pre&gt; Closure: &lt;pre lang=&#34;swift&#34;&gt;&#xA;ObjectPublisher&amp;lt;O&amp;gt;&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;let array: [ObjectSnapshot&amp;lt;Person&amp;gt;]&#xA;&lt;br&gt;&#xA;var body: some View {&#xA;    &lt;br&gt;&#xA;    List {&#xA;        &lt;br&gt;&#xA;        ForEach(objectIn: self.array) { objectPublisher in&#xA;            &lt;br&gt;&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; Signature: &lt;pre lang=&#34;swift&#34;&gt;&#xA;ForEach(sectionIn: ListSnapshot&amp;lt;O&amp;gt;)&#xA;&lt;/pre&gt; Closure: &lt;pre lang=&#34;swift&#34;&gt;&#xA;[ListSnapshot&amp;lt;O&amp;gt;.SectionInfo]&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;let listSnapshot: ListSnapshot&amp;lt;Person&amp;gt;&#xA;&lt;br&gt;&#xA;var body: some View {&#xA;    &lt;br&gt;&#xA;    List {&#xA;        &lt;br&gt;&#xA;        ForEach(sectionIn: self.listSnapshot) { sectionInfo in&#xA;            &lt;br&gt;&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; Signature: &lt;pre lang=&#34;swift&#34;&gt;&#xA;ForEach(objectIn: ListSnapshot&amp;lt;O&amp;gt;.SectionInfo)&#xA;&lt;/pre&gt; Closure: &lt;pre lang=&#34;swift&#34;&gt;&#xA;ObjectPublisher&amp;lt;O&amp;gt;&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;pre lang=&#34;swift&#34;&gt;&#xA;let listSnapshot: ListSnapshot&amp;lt;Person&amp;gt;&#xA;&lt;br&gt;&#xA;var body: some View {&#xA;    &lt;br&gt;&#xA;    List {&#xA;        &lt;br&gt;&#xA;        ForEach(sectionIn: self.listSnapshot) { sectionInfo in&#xA;            &lt;br&gt;&#xA;            ForEach(objectIn: sectionInfo) { objectPublisher in&#xA;               &lt;br&gt;&#xA;                // ...&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/pre&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;h3&gt;Prototyping stage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Widget/Extensions storage-sharing support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; CloudKit support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Under consideration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Derived attributes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cross-storage relationships (via Fetched Attributes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iOS 10 SDK and above&lt;/li&gt; &#xA;   &lt;li&gt;Swift 5.2 (Xcode 11.4+)&lt;/li&gt; &#xA;   &lt;li&gt;For previous Swift versions: &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/tree/4.2.3&#34;&gt;Swift 3.2&lt;/a&gt;, &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/tree/6.2.1&#34;&gt;Swift 4.2&lt;/a&gt;, &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/tree/6.3.2&#34;&gt;Swift 5.0&lt;/a&gt;, &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/tree/7.0.4&#34;&gt;Swift 5.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dependencies: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;None&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other notes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;com.apple.CoreData.ConcurrencyDebug&lt;/code&gt; debug argument should be turned off for the app. CoreStore already guarantees safety for you by making the main context read-only, and by only executing transactions serially.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install with CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;In your &lt;code&gt;Podfile&lt;/code&gt;, add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;CoreStore&#39;, &#39;~&amp;gt; 8.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs CoreStore as a framework. Declare &lt;code&gt;import CoreStore&lt;/code&gt; in your swift file to use the library.&lt;/p&gt; &#xA;&lt;h3&gt;Install with Carthage&lt;/h3&gt; &#xA;&lt;p&gt;In your &lt;code&gt;Cartfile&lt;/code&gt;, add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;JohnEstropia/CoreStore&#34; &amp;gt;= 8.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs CoreStore as a framework. Declare &lt;code&gt;import CoreStore&lt;/code&gt; in your swift file to use the library.&lt;/p&gt; &#xA;&lt;h4&gt;Install with Swift Package Manager:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/JohnEstropia/CoreStore.git&#34;, from: &#34;8.0.1&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Declare &lt;code&gt;import CoreStore&lt;/code&gt; in your swift file to use the library.&lt;/p&gt; &#xA;&lt;h3&gt;Install as Git Submodule&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/JohnEstropia/CoreStore.git &amp;lt;destination directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Drag and drop &lt;strong&gt;CoreStore.xcodeproj&lt;/strong&gt; to your project.&lt;/p&gt; &#xA;&lt;h3&gt;Install through Xcode&#39;s Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;From the &lt;strong&gt;File&lt;/strong&gt; - &lt;strong&gt;Swift Packages&lt;/strong&gt; - &lt;strong&gt;Add Package Dependency…&lt;/strong&gt; menu, search for&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CoreStore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;JohnEstropia&lt;/code&gt; is the &lt;em&gt;Owner&lt;/em&gt; (forks may appear as well). Then add to your project&lt;/p&gt; &#xA;&lt;h1&gt;Changesets&lt;/h1&gt; &#xA;&lt;p&gt;For the full Changelog, refer to the &lt;a href=&#34;https://github.com/JohnEstropia/CoreStore/releases&#34;&gt;Releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;You can reach me on Twitter &lt;a href=&#34;https://twitter.com/JohnEstropia&#34;&gt;@JohnEstropia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;or join our Slack team at &lt;a href=&#34;http://swift-corestore-slack.herokuapp.com/&#34;&gt;swift-corestore.slack.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;日本語の対応も可能なので是非！&lt;/p&gt; &#xA;&lt;h1&gt;Who uses CoreStore?&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;d love to hear about apps using CoreStore. Send me a message and I&#39;ll welcome any feedback!&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;CoreStore is released under an MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/JohnEstropia/CoreStore/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more information&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>grpc/grpc-swift</title>
    <updated>2022-07-13T01:57:25Z</updated>
    <id>tag:github.com,2022-07-13:/grpc/grpc-swift</id>
    <link href="https://github.com/grpc/grpc-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Swift language implementation of gRPC.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/grpc-swift/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/grpc/grpc-swift/CI?event=push&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/v/release/grpc/grpc-swift?include_prereleases&amp;amp;sort=semver&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/grpc/grpc-swift?include_prereleases&amp;amp;sort=semver&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swift-server/sswg/raw/main/process/incubation.md#graduated-level&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sswg-graduated-green.svg?sanitize=true&#34; alt=&#34;sswg:graduated|104x20&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;gRPC Swift&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a gRPC Swift API and code generator.&lt;/p&gt; &#xA;&lt;p&gt;It is intended for use with Apple&#39;s &lt;a href=&#34;https://github.com/apple/swift-protobuf&#34;&gt;SwiftProtobuf&lt;/a&gt; support for Protocol Buffers. Both projects contain code generation plugins for &lt;code&gt;protoc&lt;/code&gt;, Google&#39;s Protocol Buffer compiler, and both contain libraries of supporting code that is needed to build and run the generated code.&lt;/p&gt; &#xA;&lt;p&gt;APIs and generated code is provided for both gRPC clients and servers, and can be built either with Xcode or the Swift Package Manager. Support is provided for all four gRPC API styles (Unary, Server Streaming, Client Streaming, and Bidirectional Streaming) and connections can be made either over secure (TLS) or insecure channels.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;gRPC Swift has recently been rewritten on top of &lt;a href=&#34;https://github.com/apple/swift-nio&#34;&gt;SwiftNIO&lt;/a&gt; as opposed to the core library provided by the &lt;a href=&#34;https://github.com/grpc/grpc&#34;&gt;gRPC project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Implementation&lt;/th&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;protoc&lt;/code&gt; Plugin&lt;/th&gt; &#xA;   &lt;th&gt;Support&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.x&lt;/td&gt; &#xA;   &lt;td&gt;SwiftNIO&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-swift/tree/main&#34;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;protoc-gen-grpc-swift&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Actively developed and supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.x&lt;/td&gt; &#xA;   &lt;td&gt;gRPC C library&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-swift/tree/cgrpc&#34;&gt;&lt;code&gt;cgrpc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;protoc-gen-swiftgrpc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No longer developed; security fixes only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The remainder of this README refers to the 1.x version of gRPC Swift.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;gRPC Swift&#39;s platform support is identical to the &lt;a href=&#34;https://github.com/apple/swift-nio#supported-platforms&#34;&gt;platform support of Swift NIO&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The earliest supported Swift version for gRPC Swift 1.8.x and newer is 5.4. For 1.7.x and earlier the oldest supported Swift version is 5.2.&lt;/p&gt; &#xA;&lt;p&gt;Versions of clients and services which are use Swift&#39;s Concurrency support are available from gRPC Swift 1.8.0 and require Swift 5.6 and newer.&lt;/p&gt; &#xA;&lt;h2&gt;Getting gRPC Swift&lt;/h2&gt; &#xA;&lt;p&gt;There are two parts to gRPC Swift: the gRPC library and an API code generator.&lt;/p&gt; &#xA;&lt;h3&gt;Getting the gRPC library&lt;/h3&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;The Swift Package Manager is the preferred way to get gRPC Swift. Simply add the package dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(url: &#34;https://github.com/grpc/grpc-swift.git&#34;, from: &#34;1.0.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...and depend on &lt;code&gt;&#34;GRPC&#34;&lt;/code&gt; in the necessary targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(&#xA;  name: ...,&#xA;  dependencies: [.product(name: &#34;GRPC&#34;, package: &#34;grpc-swift&#34;)]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Xcode&lt;/h5&gt; &#xA;&lt;p&gt;From Xcode 11 it is possible to &lt;a href=&#34;https://help.apple.com/xcode/mac/current/#/devb83d64851&#34;&gt;add Swift Package dependencies to Xcode projects&lt;/a&gt; and link targets to products of those packages; this is the easiest way to integrate gRPC Swift with an existing &lt;code&gt;xcodeproj&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Manual Integration&lt;/h5&gt; &#xA;&lt;p&gt;Alternatively, gRPC Swift can be manually integrated into a project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build an Xcode project: &lt;code&gt;swift package generate-xcodeproj&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Add the generated project to your own project, and&lt;/li&gt; &#xA; &lt;li&gt;Add a build dependency on &lt;code&gt;GRPC&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Getting the &lt;code&gt;protoc&lt;/code&gt; Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Binary releases of &lt;code&gt;protoc&lt;/code&gt;, the Protocol Buffer Compiler, are available on &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/releases&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build the plugins, run &lt;code&gt;make plugins&lt;/code&gt; in the main directory. This uses the Swift Package Manager to build both of the necessary plugins: &lt;code&gt;protoc-gen-swift&lt;/code&gt;, which generates Protocol Buffer support code and &lt;code&gt;protoc-gen-grpc-swift&lt;/code&gt;, which generates gRPC interface code.&lt;/p&gt; &#xA;&lt;p&gt;To install these plugins, just copy the two executables (&lt;code&gt;protoc-gen-swift&lt;/code&gt; and &lt;code&gt;protoc-gen-grpc-swift&lt;/code&gt;) that show up in the main directory into a directory that is part of your &lt;code&gt;PATH&lt;/code&gt; environment variable. Alternatively the full path to the plugins can be specified when using &lt;code&gt;protoc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;p&gt;The plugins are available from &lt;a href=&#34;https://brew.sh&#34;&gt;homebrew&lt;/a&gt; and can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    $ brew install swift-protobuf grpc-swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;gRPC Swift has a number of tutorials and examples available. They are split across two directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-swift/tree/main/Sources/Examples&#34;&gt;&lt;code&gt;/Sources/Examples&lt;/code&gt;&lt;/a&gt; contains examples which do not require additional dependencies and may be built using the Swift Package Manager.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-swift/tree/main/Examples&#34;&gt;&lt;code&gt;/Examples&lt;/code&gt;&lt;/a&gt; contains examples which rely on external dependencies or may not be built by the Swift Package Manager (such as an iOS app).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some of the examples are accompanied by tutorials, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-swift/main/docs/quick-start.md&#34;&gt;quick start guide&lt;/a&gt; for creating and running your first gRPC service.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-swift/main/docs/basic-tutorial.md&#34;&gt;basic tutorial&lt;/a&gt; covering the creation and implementation of a gRPC service using all four call types as well as the code required to setup and run a server and make calls to it using a generated client.&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-swift/main/docs/interceptors-tutorial.md&#34;&gt;interceptors&lt;/a&gt; tutorial covering how to create and use interceptors with gRPC Swift.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;docs&lt;/code&gt; directory contains documentation, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Options for the &lt;code&gt;protoc&lt;/code&gt; plugin in &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-swift/main/docs/plugin.md&#34;&gt;&lt;code&gt;docs/plugin.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;How to configure TLS in &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-swift/main/docs/tls.md&#34;&gt;&lt;code&gt;docs/tls.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;How to configure keepalive in &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-swift/main/docs/keepalive.md&#34;&gt;&lt;code&gt;docs/keepalive.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for Apple Platforms and NIO Transport Services in &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-swift/main/docs/apple-platforms.md&#34;&gt;&lt;code&gt;docs/apple-platforms.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-swift/main/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;gRPC Swift is released under the same license as &lt;a href=&#34;https://github.com/grpc/grpc&#34;&gt;gRPC&lt;/a&gt;, repeated in &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-swift/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please get involved! See our &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-swift/main/CONTRIBUTING.md&#34;&gt;guidelines for contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>