<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-30T01:56:08Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>insidegui/VirtualBuddy</title>
    <updated>2022-06-30T01:56:08Z</updated>
    <id>tag:github.com,2022-06-30:/insidegui/VirtualBuddy</id>
    <link href="https://github.com/insidegui/VirtualBuddy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtualize macOS 12 and later on Apple Silicon&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VirtualBuddy&lt;/h1&gt; &#xA;&lt;p&gt;VirtualBuddy can virtualize macOS 12 and later on Apple Silicon, with the goal of offering features that are useful to developers who need to test their apps on multiple versions of macOS, especially betas.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requires macOS 12.3 and an Apple Silicon Mac&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚ö†Ô∏è WARNING: This project is experimental. Things might break or not work as expected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/insidegui/VirtualBuddy/releases&#34;&gt;Download from GitHub Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insidegui/VirtualBuddy/main/Screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Feature Checklist&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ability to boot any version of macOS 12 or macOS 13, including betas&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built-in installation wizard &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Select from a collection of restore images available on Apple&#39;s servers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Install the latest stable version of macOS&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Local restore image IPSW file&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom restore image URL&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Boot into recovery mode (in order to disable SIP, for example)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Networking and file sharing support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Clipboard sharing (without the need to be running macOS Ventura) (experimental ¬π)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Edit NVRAM variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Customize virtual machine hardware configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;¬π To enable clipboard sharing, build the &lt;code&gt;VirtualBuddyGuest&lt;/code&gt; scheme, then copy the &lt;code&gt;VirtualBuddyGuest&lt;/code&gt; app to the virtual machine (through file sharing, for example) and run it. This will keep the clipboard in sync between the guest and host machines. The feature is experimental, so it might be buggy and it&#39;s definitely not secure.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tips and Tricks&lt;/h3&gt; &#xA;&lt;h4&gt;Taking Advantage of APFS&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes when trying things out in the OS installed in one of the virtual machines, things might break, requiring a full install of the guest operating system again, which is a pain.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to APFS cloning though, you can just duplicate a virtual machine within your library folder (using Command + D in Finder), and the copy will take almost no additional disk space. This way you can have a &#34;clean&#34; copy of your VM, do whatever you want with a duplicate of it, and then throw the copy away and re-duplicate the clean version if things break.&lt;/p&gt; &#xA;&lt;h4&gt;Screen Resolution&lt;/h4&gt; &#xA;&lt;p&gt;VirtualBuddy sets up its virtual machines to have the same screen resolution as the host&#39;s main screen. This is great if you want to use the VM in full screen and take advantage of the entire resolution of your Mac&#39;s display.&lt;/p&gt; &#xA;&lt;p&gt;The default mode the VM OS selects for the display uses the native resolution that&#39;s available to it though, which can make things look really small. In order to address this, go into System Preferences &amp;gt; Displays within the guest operating system and choose a scaled resolution.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Xcode 14 is recommended.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;Main.xcconfig&lt;/code&gt; and set the &lt;code&gt;VB_BUNDLE_ID_PREFIX&lt;/code&gt; variable to something unique like &lt;code&gt;com.yourname.&lt;/code&gt;, then select a team under Signing &amp;amp; Capabilities. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You may optionally run with the &#34;Sign to run locally&#34; option to skip this step&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build the &lt;code&gt;VirtualBuddy&lt;/code&gt; scheme&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SvenTiigi/WhatsNewKit</title>
    <updated>2022-06-30T01:56:08Z</updated>
    <id>tag:github.com,2022-06-30:/SvenTiigi/WhatsNewKit</id>
    <link href="https://github.com/SvenTiigi/WhatsNewKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Showcase your awesome new app features üì±&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SvenTiigi/WhatsNewKit/gh-pages/readMeAssets/logo.png&#34; width=&#34;30%&#34; alt=&#34;logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; WhatsNewKit &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A Swift Package to easily showcase your new app features. &lt;br&gt; It&#39;s designed from the ground up to be fully customized to your needs. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/SvenTiigi/WhatsNewKit/actions?query=workflow%3ACI&#34;&gt; &lt;img src=&#34;https://github.com/SvenTiigi/WhatsNewKit/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://sventiigi.github.io/WhatsNewKit&#34;&gt; &lt;img src=&#34;https://github.com/SvenTiigi/WhatsNewKit/raw/gh-pages/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-iOS%20%7C%20macOS-F05138&#34; alt=&#34;Platform&#34;&gt; &lt;a href=&#34;https://twitter.com/SvenTiigi/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Twitter-@SvenTiigi-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;315&#34; src=&#34;https://raw.githubusercontent.com/SvenTiigi/WhatsNewKit/gh-pages/readMeAssets/example.png&#34; alt=&#34;Example&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import WhatsNewKit&#xA;&#xA;struct ContentView: View {&#xA;    &#xA;    var body: some View {&#xA;        NavigationView {&#xA;            // ...&#xA;        }&#xA;        .whatsNewSheet()&#xA;    }&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Easily present your new app features ü§©&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatic &amp;amp; Manual presentation mode ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for SwiftUI, UIKit and AppKit üßë‚Äçüé®&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Runs on iOS and macOS üì± üñ•&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Adjustable layout üîß&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;To integrate using Apple&#39;s &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;, add the following as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/SvenTiigi/WhatsNewKit.git&#34;, from: &#34;2.0.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or navigate to your Xcode project then select &lt;code&gt;Swift Packages&lt;/code&gt;, click the ‚Äú+‚Äù icon and search for &lt;code&gt;WhatsNewKit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Check out the example application to see WhatsNewKit in action. Simply open the &lt;code&gt;Example/Example.xcodeproj&lt;/code&gt; and run the &#34;Example&#34; scheme.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;95%&#34; src=&#34;https://raw.githubusercontent.com/SvenTiigi/WhatsNewKit/gh-pages/readMeAssets/example-app.png&#34; alt=&#34;Example Applications&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Table of contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SvenTiigi/WhatsNewKit/tree/master#manual-presentation&#34;&gt;Manual Presentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SvenTiigi/WhatsNewKit/tree/master#automatic-presentation&#34;&gt;Automatic Presentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SvenTiigi/WhatsNewKit/tree/master#whatsnewenvironment&#34;&gt;WhatsNewEnvironment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SvenTiigi/WhatsNewKit/tree/master#whatsnewversionstore&#34;&gt;WhatsNewVersionStore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SvenTiigi/WhatsNewKit/tree/master#whatsnew&#34;&gt;WhatsNew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SvenTiigi/WhatsNewKit/tree/master#layout&#34;&gt;Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SvenTiigi/WhatsNewKit/tree/master#whatsnewviewcontroller&#34;&gt;WhatsNewViewController&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Manual Presentation&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to manually present a &lt;code&gt;WhatsNewView&lt;/code&gt; you can make use of the &lt;code&gt;sheet(whatsNew:)&lt;/code&gt; modifier.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;&#xA;    @State&#xA;    var whatsNew: WhatsNew? = WhatsNew(&#xA;        title: &#34;WhatsNewKit&#34;,&#xA;        features: [&#xA;            .init(&#xA;                image: .init(&#xA;                    systemName: &#34;star.fill&#34;,&#xA;                    foregroundColor: .orange&#xA;                ),&#xA;                title: &#34;Showcase your new App Features&#34;,&#xA;                subtitle: &#34;Present your new app features...&#34;&#xA;            ),&#xA;            // ...&#xA;        ]&#xA;    )&#xA;    &#xA;    var body: some View {&#xA;        NavigationView {&#xA;            // ...&#xA;        }&#xA;        .sheet(&#xA;            whatsNew: self.$whatsNew&#xA;        )&#xA;    }&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatic Presentation&lt;/h3&gt; &#xA;&lt;p&gt;The automatic presentation mode allows you to simply declare your new features via the SwiftUI Environment and WhatsNewKit will take care to present the corresponding &lt;code&gt;WhatsNewView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First add a &lt;code&gt;.whatsNewSheet()&lt;/code&gt; modifier to the view where the &lt;code&gt;WhatsNewView&lt;/code&gt; should be presented on.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;&#xA;    var body: some View {&#xA;        NavigationView {&#xA;            // ...&#xA;        }&#xA;        // Automatically present a WhatsNewView, if needed.&#xA;        // The WhatsNew that should be presented to the user&#xA;        // is automatically retrieved from the `WhatsNewEnvironment`&#xA;        .whatsNewSheet()&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;.whatsNewSheet()&lt;/code&gt; modifier is making use of the &lt;code&gt;WhatsNewEnvironment&lt;/code&gt; to retrieve an optional WhatsNew object that should be presented to the user for the current version. Therefore you can easily configure the &lt;code&gt;WhatsNewEnvironment&lt;/code&gt; via the &lt;code&gt;environment&lt;/code&gt; modifier.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension App: SwiftUI.App {&#xA;    &#xA;    var body: some Scene {&#xA;        WindowGroup {&#xA;            ContentView()&#xA;                .environment(&#xA;                    \.whatsNew, &#xA;                    WhatsNewEnvironment(&#xA;                        // Specify in which way the presented WhatsNew Versions are stored.&#xA;                        // In default the `UserDefaultsWhatsNewVersionStore` is used.&#xA;                        versionStore: UserDefaultsWhatsNewVersionStore(),&#xA;                        // Pass a `WhatsNewCollectionProvider` or an array of WhatsNew instances&#xA;                        whatsNewCollection: self&#xA;                    )&#xA;                )&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&#xA;// MARK: - App+WhatsNewCollectionProvider&#xA;&#xA;extension App: WhatsNewCollectionProvider {&#xA;&#xA;    /// Declare your WhatsNew instances per version&#xA;    var whatsNewCollection: WhatsNewCollection {&#xA;        WhatsNew(&#xA;            version: &#34;1.0.0&#34;,&#xA;            // ...&#xA;        )&#xA;        WhatsNew(&#xA;            version: &#34;1.1.0&#34;,&#xA;            // ...&#xA;        )&#xA;        WhatsNew(&#xA;            version: &#34;1.2.0&#34;,&#xA;            // ...&#xA;        )&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WhatsNewEnvironment&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;WhatsNewEnvironment&lt;/code&gt; will take care to determine the matching WhatsNew object that should be presented to the user for the current version.&lt;/p&gt; &#xA;&lt;p&gt;As seen in the previous example you can initialize a &lt;code&gt;WhatsNewEnvironment&lt;/code&gt; by specifying the &lt;code&gt;WhatsNewVersionStore&lt;/code&gt; and providing a &lt;code&gt;WhatsNewCollection&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Initialize WhatsNewEnvironment by passing an array of WhatsNew Instances.&#xA;// UserDefaultsWhatsNewVersionStore is used as default WhatsNewVersionStore&#xA;let whatsNewEnvironment = WhatsNewEnvironment(&#xA;    whatsNewCollection: [&#xA;        WhatsNew(&#xA;            version: &#34;1.0.0&#34;,&#xA;            // ...&#xA;        )&#xA;    ]&#xA;)&#xA;&#xA;// Initialize WhatsNewEnvironment with NSUbiquitousKeyValueWhatsNewVersionStore&#xA;// which stores the presented versions in iCloud.&#xA;// WhatsNewCollection is provided by a `WhatsNewBuilder` closure&#xA;let whatsNewEnvironment = WhatsNewEnvironment(&#xA;    versionStore: NSUbiquitousKeyValueWhatsNewVersionStore(),&#xA;    whatsNewCollection: {&#xA;        WhatsNew(&#xA;            version: &#34;1.0.0&#34;,&#xA;            // ...&#xA;        )&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, the &lt;code&gt;WhatsNewEnvironment&lt;/code&gt; includes a fallback for patch versions. For example when a user installs version &lt;code&gt;1.0.1&lt;/code&gt; and you only have declared a &lt;code&gt;WhatsNew&lt;/code&gt; for version &lt;code&gt;1.0.0&lt;/code&gt; the environment will automatically fallback to version &lt;code&gt;1.0.0&lt;/code&gt; and present the &lt;code&gt;WhatsNewView&lt;/code&gt; to the user if needed.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to further customize the behaviour of the &lt;code&gt;WhatsNewEnvironment&lt;/code&gt; you can easily subclass it and override the &lt;code&gt;whatsNew()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyCustomWhatsNewEnvironment: WhatsNewEnvironment {&#xA;    &#xA;    /// Retrieve a WhatsNew that should be presented to the user, if available.&#xA;    override func whatsNew() -&amp;gt; WhatsNew? {&#xA;        // The current version&#xA;        let currentVersion = self.currentVersion&#xA;        // Your declared WhatsNew objects&#xA;        let whatsNewCollection = self.whatsNewCollection&#xA;        // The WhatsNewVersionStore used to determine the already presented versions&#xA;        let versionStore = self.whatsNewVersionStore&#xA;        // TODO: Determine WhatsNew that should be presented to the user...&#xA;    }&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WhatsNewVersionStore&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;WhatsNewVersionStore&lt;/code&gt; is a protocol type which is responsible for saving and retrieving versions that have been presented to the user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let whatsNewVersionStore: WhatsNewVersionStore&#xA;&#xA;// Save presented versions&#xA;whatsNewVersionStore.save(presentedVersion: &#34;1.0.0&#34;)&#xA;&#xA;// Retrieve presented versions&#xA;let presentedVersions = whatsNewVersionStore.presentedVersions&#xA;&#xA;// Retrieve bool value if a given version has already been presented&#xA;let hasPresented = whatsNewVersionStore.hasPresented(&#34;1.0.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;WhatsNewKit comes along with three predefined implementations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Persists presented versions in the UserDefaults&#xA;let userDefaultsWhatsNewVersionStore = UserDefaultsWhatsNewVersionStore()&#xA;&#xA;// Persists presented versions in iCloud using the NSUbiquitousKeyValueStore&#xA;let ubiquitousKeyValueWhatsNewVersionStore = NSUbiquitousKeyValueWhatsNewVersionStore()&#xA;&#xA;// Stores presented versions in memory. Perfect for testing purposes&#xA;let inMemoryWhatsNewVersionStore = InMemoryWhatsNewVersionStore()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already have a specific implementation to store user related settings like Realm or Core Data you can easily adopt your existing implementation to the &lt;code&gt;WhatsNewVersionStore&lt;/code&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;NSUbiquitousKeyValueWhatsNewVersionStore&lt;/h3&gt; &#xA;&lt;p&gt;If you are making use of the &lt;code&gt;NSUbiquitousKeyValueWhatsNewVersionStore&lt;/code&gt; please ensure to enable the &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/General/Conceptual/iCloudDesignGuide/Chapters/DesigningForKey-ValueDataIniCloud.html&#34;&gt;iCloud Key-value storage&lt;/a&gt; capability in the &#34;Signing &amp;amp; Capabilities&#34; section of your Xcode project.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SvenTiigi/WhatsNewKit/gh-pages/readMeAssets/icloud-key-value-storage.png&#34; alt=&#34;iCloud Key-value storage&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;WhatsNew&lt;/h2&gt; &#xA;&lt;p&gt;The following sections explains how a &lt;code&gt;WhatsNew&lt;/code&gt; struct can be initialized in order to describe the new features for a given version of your app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let whatsnew = WhatsNew(&#xA;    // The Version that relates to the features you want to showcase&#xA;    version: &#34;1.0.0&#34;,&#xA;    // The title that is shown at the top&#xA;    title: &#34;What&#39;s New&#34;,&#xA;    // The features you want to showcase&#xA;    features: [&#xA;        WhatsNew.Feature(&#xA;            image: .init(systemName: &#34;star.fill&#34;),&#xA;            title: &#34;Title&#34;,&#xA;            subtitle: &#34;Subtitle&#34;&#xA;        )&#xA;    ],&#xA;    // The primary action that is used to dismiss the WhatsNewView&#xA;    primaryAction: WhatsNew.PrimaryAction(&#xA;        title: &#34;Continue&#34;,&#xA;        backgroundColor: .accentColor,&#xA;        foregroundColor: .white,&#xA;        hapticFeedback: .notification(.success),&#xA;        onDismiss: {&#xA;            print(&#34;WhatsNewView has been dismissed&#34;)&#xA;        }&#xA;    ),&#xA;    // The optional secondary action that is displayed above the primary action&#xA;    secondaryAction: WhatsNew.SecondaryAction(&#xA;        title: &#34;Learn more&#34;,&#xA;        foregroundColor: .accentColor,&#xA;        hapticFeedback: .selection,&#xA;        action: .openURL(&#xA;            .init(string: &#34;https://github.com/SvenTiigi/WhatsNewKit&#34;)&#xA;        )&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WhatsNew.Version&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;WhatsNew.Version&lt;/code&gt; specifies the version that has introduced certain features to your app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Initialize with major, minor, and patch&#xA;let version = WhatsNew.Version(&#xA;    major: 1, &#xA;    minor: 0, &#xA;    patch: 0&#xA;)&#xA;&#xA;// Initialize by string literal&#xA;let version: WhatsNew.Version = &#34;1.0.0&#34;&#xA;&#xA;// Initialize WhatsNew Version by using the current version of your bundle&#xA;let version: WhatsNew.Version = .current()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WhatsNew.Title&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;WhatsNew.Title&lt;/code&gt; represents the title text that is rendered above the features.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Initialize by string literal&#xA;let title: WhatsNew.Title = &#34;Continue&#34;&#xA;&#xA;// Initialize with text and foreground color&#xA;let title = WhatsNew.Title(&#xA;    text: &#34;Continue&#34;,&#xA;    foregroundColor: .primary&#xA;)&#xA;&#xA;// On &amp;gt;= iOS 15 initialize with AttributedString using Markdown&#xA;let title = WhatsNew.Title(&#xA;    text: try AttributedString(&#xA;        markdown: &#34;What&#39;s **New**&#34;&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WhatsNew.Feature&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;WhatsNew.Feature&lt;/code&gt; describe a specific feature of your app and generally consist of an image, title, and subtitle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let feature = WhatsNew.Feature(&#xA;    image: .init(&#xA;        systemName: &#34;wand.and.stars&#34;&#xA;    ),&#xA;    title: &#34;New Design&#34;,&#xA;    subtitle: .init(&#xA;        try AttributedString(&#xA;            markdown: &#34;An awesome new _Design_&#34;&#xA;        )&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WhatsNew.PrimaryAction&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;WhatsNew.PrimaryAction&lt;/code&gt; allows you to configure the behaviour of the primary button which is used to dismiss the presented &lt;code&gt;WhatsNewView&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let primaryAction = WhatsNew.PrimaryAction(&#xA;    title: &#34;Continue&#34;,&#xA;    backgroundColor: .blue,&#xA;    foregroundColor: .white,&#xA;    hapticFeedback: .notification(.success),&#xA;    onDismiss: {&#xA;        print(&#34;WhatsNewView has been dismissed&#34;)&#xA;    }   &#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: HapticFeedback will only be executed on iOS&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;WhatsNew.SecondaryAction&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;WhatsNew.SecondaryAction&lt;/code&gt; which is displayed above the &lt;code&gt;WhatsNew.PrimaryAction&lt;/code&gt; can be optionally supplied when initializing a &lt;code&gt;WhatsNew&lt;/code&gt; instance and allows you to present an additional View, perform a custom action or open an URL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SecondaryAction that presents a View&#xA;let secondaryActionPresentAboutView = WhatsNew.SecondaryAction(&#xA;    title: &#34;Learn more&#34;,&#xA;    foregroundColor: .blue,&#xA;    hapticFeedback: .selection,&#xA;    action: .present {&#xA;        AboutView()&#xA;    }  &#xA;)&#xA;&#xA;// SecondaryAction that opens a URL&#xA;let secondaryActionOpenURL = WhatsNew.SecondaryAction(&#xA;    title: &#34;Read more&#34;,&#xA;    foregroundColor: .blue,&#xA;    hapticFeedback: .selection,&#xA;    action: .open(&#xA;        url: .init(string: &#34;https://github.com/SvenTiigi/WhatsNewKit&#34;)&#xA;    )  &#xA;)&#xA;&#xA;// SecondaryAction with custom execution&#xA;let secondaryActionCustom = WhatsNew.SecondaryAction(&#xA;    title: &#34;Custom&#34;,&#xA;    action: .custom { presentationMode in&#xA;        // ...&#xA;    }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: HapticFeedback will only be executed on iOS&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Layout&lt;/h2&gt; &#xA;&lt;p&gt;WhatsNewKit allows you to adjust the layout of a presented &lt;code&gt;WhatsNewView&lt;/code&gt; in various ways.&lt;/p&gt; &#xA;&lt;p&gt;The most simple way is by mutating the &lt;code&gt;WhatsNew.Layout.default&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;WhatsNew.Layout.default.featureListSpacing = 35&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using the automatic presentation style you can supply a default layout when initializing the WhatsNewEnvironment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.environment(&#xA;    \.whatsNew,&#xA;    .init(&#xA;        defaultLayout: WhatsNew.Layout(&#xA;            showsScrollViewIndicators: true,&#xA;            featureListSpacing: 35&#xA;        ),&#xA;        whatsNew: self&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can pass a &lt;code&gt;WhatsNew.Layout&lt;/code&gt; when automatically or manually presenting the WhatsNewView&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.whatsNewSheet(&#xA;    layout: WhatsNew.Layout(&#xA;        contentPadding: .init(&#xA;            top: 80, &#xA;            leading: 0,&#xA;            bottom: 0,&#xA;            trailing: 0&#xA;        )&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.sheet(&#xA;    whatsNew: self.$whatsNew,&#xA;    layout: WhatsNew.Layout(&#xA;        footerActionSpacing: 20&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WhatsNewViewController&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;UIKit&lt;/code&gt; or &lt;code&gt;AppKit&lt;/code&gt; you can make use of the &lt;code&gt;WhatsNewViewController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let whatsNewViewController = WhatsNewViewController(&#xA;    whatsNew: WhatsNew(&#xA;        version: &#34;1.0.0&#34;,&#xA;        // ...&#xA;    ),&#xA;    layout: WhatsNew.Layout(&#xA;        contentSpacing: 80&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to present a &lt;code&gt;WhatsNewViewController&lt;/code&gt; only if the version of the WhatsNew instance has not been presented you can make use of the convenience failable initializer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Verify WhatsNewViewController is available for presentation&#xA;guard let whatsNewViewController = WhatsNewViewController(&#xA;    whatsNew: WhatsNew(&#xA;        version: &#34;1.0.0&#34;,&#xA;        // ...&#xA;    ),&#xA;    versionStore: UserDefaultsWhatsNewVersionStore()&#xA;) else {&#xA;    // Version of WhatsNew has already been presented&#xA;    return&#xA;}&#xA;&#xA;// Present WhatsNewViewController&#xA;// Version will be automatically saved in the provided&#xA;// WhatsNewVersionStore when the WhatsNewViewController gets dismissed&#xA;self.present(whatsNewViewController, animated: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;WhatsNewKit&#xA;Copyright (c) 2022 Sven Tiigi sven.tiigi@gmail.com&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in&#xA;all copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#xA;THE SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>simonbs/KeyboardToolbar</title>
    <updated>2022-06-30T01:56:08Z</updated>
    <id>tag:github.com,2022-06-30:/simonbs/KeyboardToolbar</id>
    <link href="https://github.com/simonbs/KeyboardToolbar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚å®Ô∏è Add tools above your keyboard with iOS-like keyboard buttons.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KeyboardToolbar&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simonbs/KeyboardToolbar/main/Sources/KeyboardToolbar/Documentation.docc/Resources/keyboard.png#gh-light-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simonbs/KeyboardToolbar/main/Sources/KeyboardToolbar/Documentation.docc/Resources/keyboard~dark.png#gh-dark-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swiftpackageindex.com/simonbs/KeyboardToolbar&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsimonbs%2FKeyboardToolbar%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/simonbs/KeyboardToolbar&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsimonbs%2FKeyboardToolbar%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/simonbs/KeyboardToolbar/main/%5Bhttps://swiftpackageindex.com/simonbs/Runestone%5D(https://twitter.com/simonbs)&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@simonbs-blue.svg?style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üëÄ Overview&lt;/h2&gt; &#xA;&lt;p&gt;Use KeyboardToolbar to add tools as an input accessory view to a UITextField, UITextView, or any other view conforming to UITextInput.&lt;/p&gt; &#xA;&lt;p&gt;KeyboardToolbar creates buttons with an iOS-like appearance and behavior.&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The public interface is documented in the Swift files and can be found in &lt;a href=&#34;https://github.com/simonbs/KeyboardToolbar/tree/main/Sources/KeyboardToolbar&#34;&gt;KeyboardToolbar/Sources/KeyboardToolbar&lt;/a&gt;. You can also &lt;a href=&#34;https://swiftpackageindex.com/simonbs/KeyboardToolbar&#34;&gt;read the documention on Swift Package Index&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, you can also build the documentation yourself by opening the Swift package in Xcode and selecting Product &amp;gt; Build Documentation in the menu bar.&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ Adding the Package&lt;/h2&gt; &#xA;&lt;p&gt;KeyboardToolbar is distributed using the &lt;a href=&#34;https://www.swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;. Install it in a project by adding it as a dependency in your Package.swift manifest or through ‚ÄúPackage Dependencies‚Äù in project settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    dependencies: [&#xA;        .package(url: &#34;git@github.com:simonbs/KeyboardToolbar.git&#34;, from: &#34;0.1.0&#34;)&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The best way to understand how KeyboardToolbar is integrated into your project is by having a look at the &lt;a href=&#34;https://raw.githubusercontent.com/simonbs/KeyboardToolbar/main/Example/Example&#34;&gt;Example project&lt;/a&gt; in this repository.&lt;/p&gt; &#xA;&lt;p&gt;At a high level there are two steps required to setting up the keyboard toolbar.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create an instance of &lt;a href=&#34;https://github.com/simonbs/KeyboardToolbar/raw/main/Sources/KeyboardToolbar/KeyboardToolbarView.swift&#34;&gt;KeyboardToolbarView&lt;/a&gt; and assign it to &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uitextfield/1619627-inputaccessoryview&#34;&gt;inputAccessoryView&lt;/a&gt; on a UITextField, UITextView, or any other view that conforms to the UITextInput protocol.&lt;/li&gt; &#xA; &lt;li&gt;Assign an array of &lt;a href=&#34;https://github.com/simonbs/KeyboardToolbar/raw/main/Sources/KeyboardToolbar/KeyboardToolGroup.swift&#34;&gt;KeyboardToolGroup&lt;/a&gt; items to the &lt;code&gt;groups&lt;/code&gt; property on your instance of KeyboardToolbarView.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The below code snippet shows how the two steps can be performed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Create our instance of KeyboardToolbarView and pass it to an instance of UITextView.&#xA;let keyboardToolbarView = KeyboardToolbarView()&#xA;textView.inputAccessoryView = keyboardToolbarView&#xA;// Setup our tool groups.&#xA;let canUndo = textView.undoManager?.canUndo ?? false&#xA;let canRedo = textView.undoManager?.canRedo ?? false&#xA;keyboardToolbarView.groups = [&#xA;    // Tools for undoing and redoing text in the text view.&#xA;    KeyboardToolGroup(items: [&#xA;        KeyboardToolGroupItem(style: .secondary, representativeTool: BlockKeyboardTool(symbolName: &#34;arrow.uturn.backward&#34;) { [weak self] in&#xA;            self?.textView.undoManager?.undo()&#xA;            self?.setupKeyboardTools()&#xA;        }, isEnabled: canUndo),&#xA;        KeyboardToolGroupItem(style: .secondary, representativeTool: BlockKeyboardTool(symbolName: &#34;arrow.uturn.forward&#34;) { [weak self] in&#xA;            self?.textView.undoManager?.redo()&#xA;            self?.setupKeyboardTools()&#xA;        }, isEnabled: canRedo)&#xA;    ]),&#xA;    // Tools for inserting characters into our text view.&#xA;    KeyboardToolGroup(items: [&#xA;        KeyboardToolGroupItem(representativeTool: InsertTextKeyboardTool(text: &#34;(&#34;, textView: textView), tools: [&#xA;            InsertTextKeyboardTool(text: &#34;(&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;{&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;[&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;]&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;}&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;)&#34;, textView: textView)&#xA;        ]),&#xA;        KeyboardToolGroupItem(representativeTool: InsertTextKeyboardTool(text: &#34;.&#34;, textView: textView), tools: [&#xA;            InsertTextKeyboardTool(text: &#34;.&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;,&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;;&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;!&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;&amp;amp;&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;|&#34;, textView: textView)&#xA;        ]),&#xA;        KeyboardToolGroupItem(representativeTool: InsertTextKeyboardTool(text: &#34;=&#34;, textView: textView), tools: [&#xA;            InsertTextKeyboardTool(text: &#34;=&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;+&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;-&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;/&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;*&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;&amp;lt;&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;&amp;gt;&#34;, textView: textView)&#xA;        ]),&#xA;        KeyboardToolGroupItem(representativeTool: InsertTextKeyboardTool(text: &#34;#&#34;, textView: textView), tools: [&#xA;            InsertTextKeyboardTool(text: &#34;#&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;\&#34;&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;&#39;&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;$&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;\\&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;@&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;%&#34;, textView: textView),&#xA;            InsertTextKeyboardTool(text: &#34;~&#34;, textView: textView)&#xA;        ])&#xA;    ]),&#xA;    KeyboardToolGroup(items: [&#xA;        // Tool to present the find navigator.&#xA;        KeyboardToolGroupItem(style: .secondary, representativeTool: BlockKeyboardTool(symbolName: &#34;magnifyingglass&#34;) { [weak self] in&#xA;            self?.textView.findInteraction?.presentFindNavigator(showingReplace: false)&#xA;        }),&#xA;        // Tool to dismiss the keyboard.&#xA;        KeyboardToolGroupItem(style: .secondary, representativeTool: BlockKeyboardTool(symbolName: &#34;keyboard.chevron.compact.down&#34;) { [weak self] in&#xA;            self?.textView.resignFirstResponder()&#xA;        })&#xA;    ])&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>