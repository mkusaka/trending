<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-03T01:41:17Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mikaelacaron/Basic-Car-Maintenance</title>
    <updated>2023-10-03T01:41:17Z</updated>
    <id>tag:github.com,2023-10-03:/mikaelacaron/Basic-Car-Maintenance</id>
    <link href="https://github.com/mikaelacaron/Basic-Car-Maintenance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A basic app to track your car&#39;s maintenance. Open source for Hacktoberfest 2023. Beginners are welcome!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Basic Car Maintenance&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to my open source app! At this moment it&#39;s a work in progress, but it will be ready for contributors for &lt;a href=&#34;https://hacktoberfest.com/&#34;&gt;Hacktoberfest&lt;/a&gt;! Use this app to gain experience getting started in open source for iOS and macOS development using Swift!&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/mikaelacaron/Basic-Car-Maintenance/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://github.com/mikaelacaron/Basic-Car-Maintenance/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; guidelines&lt;/li&gt; &#xA; &lt;li&gt;Download Xcode 15 or later, and macOS 14.0 or later&lt;/li&gt; &#xA; &lt;li&gt;Browse the open &lt;a href=&#34;https://github.com/mikaelacaron/Basic-Car-Maintenance/issues&#34;&gt;issues&lt;/a&gt; and &lt;strong&gt;comment&lt;/strong&gt; which you would like to work on &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is only one person per issue, except where noted.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fork this repo&lt;/li&gt; &#xA; &lt;li&gt;Clone the repo to your machine&lt;/li&gt; &#xA; &lt;li&gt;In the same folder that contains the &lt;code&gt;Basic-Car-Maintenance.xcconfig.template&lt;/code&gt;, run this command, in Terminal, to create a new Xcode configuration file (which properly sets up the signing information)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp Basic-Car-Maintenance.xcconfig.template Basic-Car-Maintenance.xcconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In the Basic-Car-Maintenance.xcconfig file, fill in your &lt;code&gt;DEVELOPMENT_TEAM&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: &lt;code&gt;DEVELOPMENT_TEAM = IdNumber&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;You can find this by logging into the Apple Developer Portal&lt;/li&gt; &#xA;   &lt;li&gt;This is only needed when running on a real device for iOS, this works with both free or paid Apple Developer accounts.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project :white-check-mark:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Checkout a new branch (from the &lt;code&gt;dev&lt;/code&gt; branch) to work on an issue&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;To start contributing, review &lt;a href=&#34;https://github.com/mikaelacaron/Basic-Car-Maintenance/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. New contributors are always welcome to support this project. Issues labeled &lt;code&gt;good-first-issue&lt;/code&gt; are great for beginners.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ‘€&lt;/span&gt; &lt;strong&gt;Please be sure to comment on an issue you&#39;d like to work on and &lt;a href=&#34;https://github.com/mikaelacaron&#34;&gt;Mikaela Caron&lt;/a&gt;, the maintainer of this project, will assign it to you!&lt;/strong&gt; You can only work on &lt;strong&gt;ONE&lt;/strong&gt; issue at a time.&lt;/p&gt; &#xA;&lt;p&gt;Checkout any issue labeled &lt;code&gt;hacktoberfest&lt;/code&gt; to start contributing.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/mikaelacaron/Basic-Car-Maintenance/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=mikaelacaron/Basic-Car-Maintenance&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://star-history.com/#mikaelacaron/Basic-Car-Maintenance&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=mikaelacaron/Basic-Car-Maintenance&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=mikaelacaron/Basic-Car-Maintenance&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=mikaelacaron/Basic-Car-Maintenance&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a href=&#34;https://github.com/mikaelacaron/Basic-Car-Maintenance/raw/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Data-swift/ManagedModels</title>
    <updated>2023-10-03T01:41:17Z</updated>
    <id>tag:github.com,2023-10-03:/Data-swift/ManagedModels</id>
    <link href="https://github.com/Data-swift/ManagedModels" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A SwiftData like `@Model` infrastructure for CoreData.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ManagedModels for CoreData &lt;img src=&#34;https://zeezide.com/img/managedmodels/ManagedModels128.png&#34; align=&#34;right&#34; width=&#34;64&#34; height=&#34;64&#34;&gt; &lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Instead of wrapping CoreData, use it directly :-)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The key thing &lt;strong&gt;ManagedModels&lt;/strong&gt; provides is a &lt;code&gt;@Model&lt;/code&gt; macro, that works similar (but not identical) to the SwiftData &lt;a href=&#34;https://developer.apple.com/documentation/swiftdata/model()&#34;&gt;&lt;code&gt;@Model&lt;/code&gt;&lt;/a&gt; macro. It generates an &lt;a href=&#34;https://developer.apple.com/documentation/coredata/nsmanagedobjectmodel&#34;&gt;&lt;code&gt;NSManagedObjectModel&lt;/code&gt;&lt;/a&gt; straight from the code. I.e. no CoreData modeler / data model file is necessary.&lt;/p&gt; &#xA;&lt;p&gt;A small sample model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Model class Item: NSManagedObject {&#xA;  var timestamp : Date&#xA;  var title     : String?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;The full CoreData template application converted to ManagedModels&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import ManagedModels&#xA;&#xA;@Model class Item: NSManagedObject {&#xA;  var timestamp : Date&#xA;}&#xA;&#xA;struct ContentView: View {&#xA;&#xA;  @Environment(\.modelContext) private var viewContext&#xA;  &#xA;  @FetchRequest(sort: \.timestamp, animation: .default)&#xA;  private var items: FetchedResults&amp;lt;Item&amp;gt;&#xA;  &#xA;  var body: some View {&#xA;    NavigationView {&#xA;      List {&#xA;        ForEach(items) { item in&#xA;          NavigationLink {&#xA;            Text(&#34;Item at \(item.timestamp!, format: .dateTime)&#34;)&#xA;          } label: {&#xA;            Text(&#34;\(item.timestamp!, format: .dateTime)&#34;)&#xA;          }&#xA;        }&#xA;        .onDelete(perform: deleteItems)&#xA;      }&#xA;      .toolbar {&#xA;        ToolbarItem(placement: .navigationBarTrailing) {&#xA;          EditButton()&#xA;        }&#xA;        ToolbarItem {&#xA;          Button(action: addItem) {&#xA;            Label(&#34;Add Item&#34;, systemImage: &#34;plus&#34;)&#xA;          }&#xA;        }&#xA;      }&#xA;      Text(&#34;Select an item&#34;)&#xA;    }&#xA;  }&#xA;  &#xA;  private func addItem() {&#xA;    withAnimation {&#xA;      let newItem = Item(context: viewContext)&#xA;      newItem.timestamp = Date()&#xA;      try! viewContext.save()&#xA;    }&#xA;  }&#xA;  &#xA;  private func deleteItems(offsets: IndexSet) {&#xA;    withAnimation {&#xA;      offsets.map { items[$0] }.forEach(viewContext.delete)&#xA;      try! viewContext.save()&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;#Preview {&#xA;  ContentView()&#xA;    .modelContainer(for: Item.self, inMemory: true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; intended as a replacement implementation of &lt;a href=&#34;https://developer.apple.com/documentation/swiftdata&#34;&gt;SwiftData&lt;/a&gt;. I.e. the API is kept &lt;em&gt;similar&lt;/em&gt; to SwiftData, but not exactly the same. It doesn&#39;t try to hide CoreData, but rather provides utilities to work &lt;em&gt;with&lt;/em&gt; CoreData in a similar way to SwiftData.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A full To-Do list application example: &lt;a href=&#34;https://github.com/Data-swift/ManagedToDosApp&#34;&gt;ManagedToDos.app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Blog article describing the thing: &lt;a href=&#34;https://www.alwaysrightinstitute.com/managedmodels/&#34;&gt;&lt;code&gt;@Model&lt;/code&gt; for CoreData&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;p&gt;The macro implementation requires Xcode 15/Swift 5.9 for compilation. The generated code itself though should backport way back to iOS 10 / macOS 10.12 though (when &lt;code&gt;NSPersistentContainer&lt;/code&gt; was introduced).&lt;/p&gt; &#xA;&lt;p&gt;Package URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/Data-swift/ManagedModels.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ManagedModels has no other dependencies.&lt;/p&gt; &#xA;&lt;h4&gt;Differences to SwiftData&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The model class must explicitly inherit from &lt;a href=&#34;https://developer.apple.com/documentation/coredata/nsmanagedobject&#34;&gt;&lt;code&gt;NSManagedObject&lt;/code&gt;&lt;/a&gt; (superclasses can&#39;t be added by macros), e.g. &lt;code&gt;@Model class Person: NSManagedObject&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ToMany relationships must be a &lt;code&gt;Set&amp;lt;Target&amp;gt;&lt;/code&gt;, a plain &lt;code&gt;[ Target ]&lt;/code&gt; cannot be used (yet?). E.g. &lt;code&gt;var contacts : Set&amp;lt;Contact&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Properties cannot be initialized in the declaration, e.g. this doesn&#39;t work: &lt;code&gt;var uuid = UUID()&lt;/code&gt;. Must be done in an initializers (requirement by &lt;code&gt;@NSManaged&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;CoreData doesn&#39;t seem to support optional Swift base types like &lt;code&gt;Int?&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Uses the CoreData &lt;code&gt;@FetchRequest&lt;/code&gt; property wrapper instead &lt;code&gt;@Query&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t use the new &lt;a href=&#34;https://developer.apple.com/documentation/observation&#34;&gt;Observation&lt;/a&gt; framework (which requires iOS 17+), but uses &lt;a href=&#34;https://developer.apple.com/documentation/combine/observableobject&#34;&gt;ObservableObject&lt;/a&gt; (which is directly supported by CoreData).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;TODO&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Archiving/Unarchiving, required for migration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Figure out whether we can do ordered attributes: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/1&#34;&gt;Issue #1&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Figure out whether we can add support for array toMany properties: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/2&#34;&gt;Issue #2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for &#34;autosave&#34;: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/3&#34;&gt;Issue #3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support transformable types, not sure they work right yet: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/4&#34;&gt;Issue #4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generate property initializers if the user didn&#39;t specify any inits: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/5&#34;&gt;Issue #5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate &lt;code&gt;fetchRequest()&lt;/code&gt; class function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support SchemaMigrationPlan/MigrationStage: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/6&#34;&gt;Issue #6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write more tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write DocC docs: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/7&#34;&gt;Issue #7&lt;/a&gt;, &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/8&#34;&gt;Issue #8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for entity inheritance: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/9&#34;&gt;Issue #9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add support for originalName/versionHash in &lt;code&gt;@Model&lt;/code&gt;: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/10&#34;&gt;Issue 10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generate &#34;To Many&#34; accessor function prototypes (&lt;code&gt;addItemToGroup&lt;/code&gt; etc): &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/11&#34;&gt;Issue 11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Foundation Predicate support (would require iOS 17+) - this seems actually supported by CoreData! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SwiftUI &lt;code&gt;@Query&lt;/code&gt; property wrapper/macro?: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/12&#34;&gt;Issue 12&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Figure out all the cloud sync options SwiftData has and whether CoreData can do them: &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/13&#34;&gt;Issue 13&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Figure out whether we can allow initialized properties (&lt;code&gt;var title = &#34;No Title&#34;&lt;/code&gt;): &lt;a href=&#34;https://github.com/Data-swift/ManagedModels/issues/14&#34;&gt;Issue 14&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pull requests are very welcome! Even just DocC documentation or more tests would be welcome contributions.&lt;/p&gt; &#xA;&lt;h4&gt;Links&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Data-swift/ManagedModels/&#34;&gt;ManagedModels&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Data-swift/ManagedToDosApp&#34;&gt;ManagedToDos.app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Blog article: &lt;a href=&#34;https://www.alwaysrightinstitute.com/managedmodels/&#34;&gt;&lt;code&gt;@Model&lt;/code&gt; for CoreData&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apple: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/coredata&#34;&gt;CoreData&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/swiftdata&#34;&gt;SwiftData&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2023/10187&#34;&gt;Meet SwiftData&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2023/10154&#34;&gt;Build an App with SwiftData&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2023/10195&#34;&gt;Model your Schema with SwiftData&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Enterprise_Objects_Framework&#34;&gt;Enterprise Objects Framework&lt;/a&gt; / aka EOF &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_4.5/System/Documentation/Developer/EnterpriseObjects/DevGuide/EOFDevGuide.pdf&#34;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lighter-swift&#34;&gt;Lighter.swift&lt;/a&gt;, typesafe and superfast &lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite&lt;/a&gt; Swift tooling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://zeeql.io&#34;&gt;ZeeQL&lt;/a&gt;, prototype of an &lt;a href=&#34;https://en.wikipedia.org/wiki/Enterprise_Objects_Framework&#34;&gt;EOF&lt;/a&gt; for Swift, with many database backends.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Disclaimer&lt;/h4&gt; &#xA;&lt;p&gt;SwiftData and SwiftUI are trademarks owned by Apple Inc. Software maintained as a part of the this project is not affiliated with Apple Inc.&lt;/p&gt; &#xA;&lt;h3&gt;Who&lt;/h3&gt; &#xA;&lt;p&gt;ManagedModels are brought to you by &lt;a href=&#34;https://github.com/helje5/&#34;&gt;Helge HeÃŸ&lt;/a&gt; / &lt;a href=&#34;https://zeezide.de&#34;&gt;ZeeZide&lt;/a&gt;. We like feedback, GitHub stars, cool contract work, presumably any form of praise you can think of.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SwiftyLab/MetaCodable</title>
    <updated>2023-10-03T01:41:17Z</updated>
    <id>tag:github.com,2023-10-03:/SwiftyLab/MetaCodable</id>
    <link href="https://github.com/SwiftyLab/MetaCodable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Supercharge Swift&#39;s Codable implementations with macros meta-programming.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MetaCodable&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swiftylab.github.io/MetaCodable/documentation/metacodable/&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/Read_the-docs-2196f3.svg?sanitize=true&#34; alt=&#34;API Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/gh/SwiftyLab%2FMetaCodable&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/SwiftyLab/MetaCodable?label=SPM&amp;amp;color=orange&#34; alt=&#34;Swift Package Manager Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Swift-5-DE5D43&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-5.9+-orange&#34; alt=&#34;Swift&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Platforms-all-sucess&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platforms-all-sucess&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SwiftyLab/MetaCodable/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/SwiftyLab/MetaCodable/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI/CD&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/swiftylab/metacodable&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/swiftylab/metacodable/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/SwiftyLab/MetaCodable&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/SwiftyLab/MetaCodable/branch/main/graph/badge.svg?token=jKxMv5oFeA&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![CodeQL](https://github.com/SwiftyLab/MetaCodable/actions/workflows/codeql-analysis.yml/badge.svg?event=schedule)](https://github.com/SwiftyLab/MetaCodable/actions/workflows/codeql-analysis.yml) --&gt; &#xA;&lt;p&gt;Supercharge &lt;code&gt;Swift&lt;/code&gt;&#39;s &lt;code&gt;Codable&lt;/code&gt; implementations with macros.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;MetaCodable&lt;/code&gt; framework exposes custom macros which can be used to generate dynamic &lt;code&gt;Codable&lt;/code&gt; implementations. The core of the framework is &lt;code&gt;Codable()&lt;/code&gt; macro which generates the implementation aided by data provided with using other macros.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MetaCodable&lt;/code&gt; aims to supercharge your &lt;code&gt;Codable&lt;/code&gt; implementations by providing these inbox features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allows custom &lt;code&gt;CodingKey&lt;/code&gt; value declaration per variable, instead of requiring you to write all the &lt;code&gt;CodingKey&lt;/code&gt; values with &lt;code&gt;CodedAt(_:)&lt;/code&gt; passing single argument.&lt;/li&gt; &#xA; &lt;li&gt;Allows to create flattened model for nested &lt;code&gt;CodingKey&lt;/code&gt; values with &lt;code&gt;CodedAt(_:)&lt;/code&gt; and &lt;code&gt;CodedIn(_:)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Allows to create composition of multiple &lt;code&gt;Codable&lt;/code&gt; types with &lt;code&gt;CodedAt(_:)&lt;/code&gt; passing no arguments.&lt;/li&gt; &#xA; &lt;li&gt;Allows to provide default value in case of decoding failures with &lt;code&gt;Default(_:)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Allows to create custom decoding/encoding strategies with &lt;code&gt;HelperCoder&lt;/code&gt; and using them with &lt;code&gt;CodedBy(_:)&lt;/code&gt;. i.e. &lt;code&gt;LossySequenceCoder&lt;/code&gt; etc.&lt;/li&gt; &#xA; &lt;li&gt;Allows to ignore specific properties from decoding/encoding with &lt;code&gt;IgnoreCoding()&lt;/code&gt;, &lt;code&gt;IgnoreDecoding()&lt;/code&gt; and &lt;code&gt;@IgnoreEncoding()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Allows to use camel-case names for variables according to &lt;a href=&#34;https://www.swift.org/documentation/api-design-guidelines/#general-conventions&#34;&gt;Swift API Design Guidelines&lt;/a&gt;, while enabling a type to work with different case style keys with &lt;code&gt;CodingKeys(_:)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Allows to ignore all initialized properties of a type from decoding/encoding with &lt;code&gt;IgnoreCodingInitialized()&lt;/code&gt; unless explicitly asked to decode/encode by attaching any coding attributes, i.e. &lt;code&gt;CodedIn(_:)&lt;/code&gt;, &lt;code&gt;CodedAt(_:)&lt;/code&gt;, &lt;code&gt;CodedBy(_:)&lt;/code&gt;, &lt;code&gt;Default(_:)&lt;/code&gt; etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Minimum Swift Version&lt;/th&gt; &#xA;   &lt;th&gt;Installation&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS 13.0+ / macOS 10.15+ / tvOS 13.0+ / watchOS 6.0+&lt;/td&gt; &#xA;   &lt;td&gt;5.9&lt;/td&gt; &#xA;   &lt;td&gt;Swift Package Manager&lt;/td&gt; &#xA;   &lt;td&gt;Fully Tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;5.9&lt;/td&gt; &#xA;   &lt;td&gt;Swift Package Manager&lt;/td&gt; &#xA;   &lt;td&gt;Fully Tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;5.9&lt;/td&gt; &#xA;   &lt;td&gt;Swift Package Manager&lt;/td&gt; &#xA;   &lt;td&gt;Fully Tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Swift Package Manager&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler.&lt;/p&gt; &#xA; &lt;p&gt;Once you have your Swift package set up, adding &lt;code&gt;MetaCodable&lt;/code&gt; as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/SwiftyLab/MetaCodable.git&#34;, from: &#34;1.0.0&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then you can add the &lt;code&gt;MetaCodable&lt;/code&gt; module product as dependency to the &lt;code&gt;target&lt;/code&gt;s of your choosing, by adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;target&lt;/code&gt;s.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.product(name: &#34;MetaCodable&#34;, package: &#34;MetaCodable&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;MetaCodable&lt;/code&gt; allows to get rid of boiler plate that was often needed in some typical &lt;code&gt;Codable&lt;/code&gt; implementations with features like:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Custom `CodingKey` value declaration per variable, instead of requiring you to write for all fields.&lt;/summary&gt; &#xA; &lt;p&gt;i.e. in the official &lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types#2904057&#34;&gt;docs&lt;/a&gt;, to define custom &lt;code&gt;CodingKey&lt;/code&gt; for 2 fields of &lt;code&gt;Landmark&lt;/code&gt; type you had to write:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Landmark: Codable {&#xA;    var name: String&#xA;    var foundingYear: Int&#xA;    var location: Coordinate&#xA;    var vantagePoints: [Coordinate]&#xA;&#xA;    enum CodingKeys: String, CodingKey {&#xA;        case name = &#34;title&#34;&#xA;        case foundingYear = &#34;founding_date&#34;&#xA;        case location&#xA;        case vantagePoints&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;But with &lt;code&gt;MetaCodable&lt;/code&gt; all you have to write is this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Codable&#xA;struct Landmark {&#xA;    @CodedAt(&#34;title&#34;)&#xA;    var name: String&#xA;    @CodedAt(&#34;founding_date&#34;)&#xA;    var foundingYear: Int&#xA;&#xA;    var location: Coordinate&#xA;    var vantagePoints: [Coordinate]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Create flattened model for nested `CodingKey` values.&lt;/summary&gt; &#xA; &lt;p&gt;i.e. in official &lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types#2904058&#34;&gt;docs&lt;/a&gt; to decode a JSON like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;latitude&#34;: 0,&#xA;  &#34;longitude&#34;: 0,&#xA;  &#34;additionalInfo&#34;: {&#xA;      &#34;elevation&#34;: 0&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You had to write all these boilerplate:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Coordinate {&#xA;    var latitude: Double&#xA;    var longitude: Double&#xA;    var elevation: Double&#xA;&#xA;    enum CodingKeys: String, CodingKey {&#xA;        case latitude&#xA;        case longitude&#xA;        case additionalInfo&#xA;    }&#xA;&#xA;    enum AdditionalInfoKeys: String, CodingKey {&#xA;        case elevation&#xA;    }&#xA;}&#xA;&#xA;extension Coordinate: Decodable {&#xA;    init(from decoder: Decoder) throws {&#xA;        let values = try decoder.container(keyedBy: CodingKeys.self)&#xA;        latitude = try values.decode(Double.self, forKey: .latitude)&#xA;        longitude = try values.decode(Double.self, forKey: .longitude)&#xA;&#xA;        let additionalInfo = try values.nestedContainer(keyedBy: AdditionalInfoKeys.self, forKey: .additionalInfo)&#xA;        elevation = try additionalInfo.decode(Double.self, forKey: .elevation)&#xA;    }&#xA;}&#xA;&#xA;extension Coordinate: Encodable {&#xA;    func encode(to encoder: Encoder) throws {&#xA;        var container = encoder.container(keyedBy: CodingKeys.self)&#xA;        try container.encode(latitude, forKey: .latitude)&#xA;        try container.encode(longitude, forKey: .longitude)&#xA;&#xA;        var additionalInfo = container.nestedContainer(keyedBy: AdditionalInfoKeys.self, forKey: .additionalInfo)&#xA;        try additionalInfo.encode(elevation, forKey: .elevation)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;But with &lt;code&gt;MetaCodable&lt;/code&gt; all you have to write is this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Codable&#xA;struct Coordinate {&#xA;    var latitude: Double&#xA;    var longitude: Double&#xA;&#xA;    @CodedAt(&#34;additionalInfo&#34;, &#34;elevation&#34;)&#xA;    var elevation: Double&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can even minimize further using &lt;code&gt;CodedIn&lt;/code&gt; macro since the final &lt;code&gt;CodingKey&lt;/code&gt; value is the same as field name:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Codable&#xA;struct Coordinate {&#xA;    var latitude: Double&#xA;    var longitude: Double&#xA;&#xA;    @CodedIn(&#34;additionalInfo&#34;)&#xA;    var elevation: Double&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Provide default value in case of decoding failures.&lt;/summary&gt; &#xA; &lt;p&gt;Instead of throwing error in case of missing data or type mismatch, you can provide a default value that will be assigned in this case. The following definition with &lt;code&gt;MetaCodable&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Codable&#xA;struct CodableData {&#xA;    @Default(&#34;some&#34;)&#xA;    let field: String&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;will not throw any error when empty JSON(&lt;code&gt;{}&lt;/code&gt;) or JSON with type mismatch(&lt;code&gt;{ &#34;field&#34;: 5 }&lt;/code&gt;) is provided. The default value will be assigned in such case.&lt;/p&gt; &#xA; &lt;p&gt;Also, memberwise initializer can be generated that uses this default value for the field.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Codable&#xA;@MemberInit&#xA;struct CodableData {&#xA;    @Default(&#34;some&#34;)&#xA;    let field: String&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The memberwise initializer generated will look like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;init(field: String = &#34;some&#34;) {&#xA;    self.field = field&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;See the full &lt;a href=&#34;https://swiftylab.github.io/MetaCodable/documentation/metacodable/&#34;&gt;documentation&lt;/a&gt; for API details and advanced use cases.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to contribute a change, suggest any improvements, please review our &lt;a href=&#34;https://raw.githubusercontent.com/SwiftyLab/MetaCodable/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;, check for open &lt;a href=&#34;https://github.com/SwiftyLab/MetaCodable/issues&#34;&gt;issues&lt;/a&gt;, if it is already being worked upon or open a &lt;a href=&#34;https://github.com/SwiftyLab/MetaCodable/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;MetaCodable&lt;/code&gt; is released under the MIT license. &lt;a href=&#34;https://raw.githubusercontent.com/SwiftyLab/MetaCodable/main/LICENSE&#34;&gt;See LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>