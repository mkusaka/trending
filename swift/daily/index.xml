<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-02T01:41:30Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>EmergeTools/Pow</title>
    <updated>2023-12-02T01:41:30Z</updated>
    <id>tag:github.com,2023-12-02:/EmergeTools/Pow</id>
    <link href="https://github.com/EmergeTools/Pow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Delightful SwiftUI effects for your app&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/images/og-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Pow&lt;/h1&gt; &#xA;&lt;p&gt;Delightful SwiftUI effects for your app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.emergetools.com/open-source&#34;&gt;Check out other open source projects from Emerge Tools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To add a package dependency to your Xcode project, select &lt;em&gt;File&lt;/em&gt; &amp;gt; &lt;em&gt;Add Package&lt;/em&gt; and enter this repository&#39;s URL (&lt;a href=&#34;https://github.com/EmergeTools/Pow&#34;&gt;https://github.com/EmergeTools/Pow&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To add a package dependency to Swift Package, add this repository to your list of dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/EmergeTools/Pow&#34;, from: Version(1, 0, 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to your target as a product:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.product(name: &#34;Pow&#34;, package: &#34;Pow&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are moving from the previously closed source Pow framework to the new open source package, please refer to our &lt;a href=&#34;&#34;&gt;Transition Guide&lt;/a&gt;. If you have any problems please file an &lt;a href=&#34;https://github.com/EmergeTools/Pow/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;Pow features a selection of &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#transitions&#34;&gt;SwiftUI transitions&lt;/a&gt; as well as &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#change-effects&#34;&gt;Change Effects&lt;/a&gt; that trigger every time a value is updated.&lt;/p&gt; &#xA;&lt;p&gt;You can find previews of all effects &lt;a href=&#34;https://movingparts.io/pow&#34;&gt;on the Pow website&lt;/a&gt;. If you have an iOS Developer Environment, you can check out the &lt;a href=&#34;https://github.com/movingparts-io/Pow-Examples&#34;&gt;Pow Example App&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Feedback &amp;amp; Contribution&lt;/h1&gt; &#xA;&lt;p&gt;This project provides multiple forms of delivering feedback to maintainers.&lt;/p&gt; &#xA;&lt;p&gt;If you are figuring out how to use about Pow or one of it&#39;s effects we ask that you first consult the &lt;a href=&#34;https://movingparts.io/pow&#34;&gt;effects examples page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you still have a question, enhancement, or a way to improve Pow, this project leverages GitHub&#39;s &lt;a href=&#34;https://github.com/EmergeTools/Pow/issues&#34;&gt;Issues&lt;/a&gt; to manage your requests. If you find a bug and wish to report it, an issue would be greatly appreciated.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 15.0+&lt;/li&gt; &#xA; &lt;li&gt;macOS 12.0&lt;/li&gt; &#xA; &lt;li&gt;Mac Catalyst 15.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change Effects&lt;/h2&gt; &#xA;&lt;p&gt;Change Effects are effects that will trigger a visual or haptic every time a value changes.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;changeEffect&lt;/code&gt; modifier and pass in an &lt;code&gt;AnyChangeEffect&lt;/code&gt; as well as a value to watch for changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Button {&#xA;    post.toggleLike()&#xA;} label: {&#xA;    Label(post.likes.formatted(), systemName: &#34;heart.fill&#34;)&#xA;}&#xA;.changeEffect(.spray { heart }, value: post.likes, isEnabled: post.isLiked)&#xA;.tint(post.isLiked ? .red : .gray)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can choose from the following Change Effects: &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#spray&#34;&gt;Spray&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#haptic-feedback&#34;&gt;Haptic Feedback&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#jump&#34;&gt;Jump&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#ping&#34;&gt;Ping&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#rise&#34;&gt;Rise&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#shake&#34;&gt;Shake&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#shine&#34;&gt;Shine&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#spin&#34;&gt;Spin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Spray&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#spray&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An effect that emits multiple particles in different shades and sizes moving up from the origin point.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;likeButton&#xA;  .changeEffect(&#xA;    .spray(origin: .center) { Image(systemName: &#34;heart.fill&#34;) },&#xA;    value: likes&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;origin&lt;/code&gt;: The origin of the particles.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;layer&lt;/code&gt;: The &lt;code&gt;ParticleLayer&lt;/code&gt; on which to render the effect, default is &lt;code&gt;local&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;particles&lt;/code&gt;: The particles to emit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func spray(origin: UnitPoint = .center, layer: ParticleLayer = .local, @ViewBuilder _ particles: () -&amp;gt; some View) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Haptic Feedback&lt;/h3&gt; &#xA;&lt;p&gt;Triggers haptic feedback to communicate successes, failures, and warnings whenever a value changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;notification&lt;/code&gt;: The feedback type to trigger.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func feedback(hapticNotification type: UINotificationFeedbackGenerator.FeedbackType) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Triggers haptic feedback to simulate physical impacts whenever a value changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;impact&lt;/code&gt;: The feedback style to trigger.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func feedback(hapticImpact style: UIImpactFeedbackGenerator.FeedbackStyle) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Triggers haptic feedback to indicate a change in selection whenever a value changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var feedbackHapticSelection: AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jump&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#jump&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Makes the view jump the given height and then bounces a few times before settling.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: The height of the jump.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func jump(height: CGFloat) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ping&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#ping&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Adds one or more shapes that slowly grow and fade-out behind the view.&lt;/p&gt; &#xA;&lt;p&gt;The shape will be colored by the current tint style.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;shape&lt;/code&gt;: The shape to use for the effect.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;count&lt;/code&gt;: The number of shapes to emit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  static func ping(shape: some InsettableShape, count: Int) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An effect that adds one or more shapes that slowly grow and fade-out behind the view.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;shape&lt;/code&gt;: The shape to use for the effect.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;style&lt;/code&gt;: The style to use for the effect.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;count&lt;/code&gt;: The number of shapes to emit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func ping(shape: some InsettableShape, style: some ShapeStyle, count: Int) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rise&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#rise&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An effect that emits the provided particles from the origin point and slowly float up while moving side to side.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;origin&lt;/code&gt;: The origin of the particle.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;layer&lt;/code&gt;: The &lt;code&gt;ParticleLayer&lt;/code&gt; on which to render the effect, default is &lt;code&gt;local&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;particles&lt;/code&gt;: The particles to emit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func rise(origin: UnitPoint = .center, layer: ParticleLayer = .local, @ViewBuilder _ particles: () -&amp;gt; some View) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shake&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#shake&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shakes the view when a change happens.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var shake: AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An effect that shakes the view when a change happens.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rate&lt;/code&gt;: The rate of the shake.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func shake(rate: ShakeRate) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shine&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#shine&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Highlights the view with a shine moving over the view.&lt;/p&gt; &#xA;&lt;p&gt;The shine moves from the top leading edge to bottom trailing edge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var shine: AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Highlights the view with a shine moving over the view.&lt;/p&gt; &#xA;&lt;p&gt;The shine moves from the top leading edge to bottom trailing edge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func shine(duration: Double) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Highlights the view with a shine moving over the view.&lt;/p&gt; &#xA;&lt;p&gt;The angle is relative to the current &lt;code&gt;layoutDirection&lt;/code&gt;, such that 0° represents sweeping towards the trailing edge and 90° represents sweeping towards the bottom edge.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;angle&lt;/code&gt;: The angle of the animation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;duration&lt;/code&gt;: The duration of the animation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func shine(angle: Angle, duration: Double = 1.0) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sound Effect Feedback&lt;/h3&gt; &#xA;&lt;p&gt;Triggers a sound effect as feedback whenever a value changes.&lt;/p&gt; &#xA;&lt;p&gt;This effect will not interrupt or duck any other audio that may currently playing. It may also not triggered based on the setting of the user&#39;s silent switch or playback device.&lt;/p&gt; &#xA;&lt;p&gt;To relay important information to the user, you should always accompany audio effects with visual cues.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;soundEffect&lt;/code&gt;: The sound effect to trigger.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func feedback(_ soundEffect: SoundEffect) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spin&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#spin&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spins the view around the given axis when a change happens.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var spin: AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Spins the view around the given axis when a change happens.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;axis: The x, y and z elements that specify the axis of rotation.&lt;/li&gt; &#xA;   &lt;li&gt;anchor: The location with a default of center that defines a point in 3D space about which the rotation is anchored.&lt;/li&gt; &#xA;   &lt;li&gt;anchorZ: The location with a default of 0 that defines a point in 3D space about which the rotation is anchored.&lt;/li&gt; &#xA;   &lt;li&gt;perspective: The relative vanishing point with a default of 1 / 6 for this rotation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func spin(axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint = .center, anchorZ: CGFloat = 0, perspective: CGFloat = 1 / 6) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delay&lt;/h3&gt; &#xA;&lt;p&gt;Every change effect can be delayed to trigger the effect after some time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Button(&#34;Submit&#34;) { &#xA;    &amp;lt;#code#&amp;gt;&#xA;}&#xA;.buttonStyle(.borderedProminent)&#xA;.disabled(name.isEmpty)&#xA;.changeEffect(.shine.delay(1), value: name.isEmpty, isEnabled: !name.isEmpty)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;delay&lt;/code&gt;: The delay in seconds.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func delay(_ delay: Double) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Particle Layer&lt;/h2&gt; &#xA;&lt;p&gt;A particle layer is a context in which particle effects draw their particles.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;particleLayer(name:)&lt;/code&gt; view modifier wraps the view in a particle layer with the given name.&lt;/p&gt; &#xA;&lt;p&gt;Particle effects such as &lt;code&gt;AnyChangeEffect.spray&lt;/code&gt; can render their particles on this position in the view tree to avoid being clipped by their immediate ancestor.&lt;/p&gt; &#xA;&lt;p&gt;For example, certain &lt;code&gt;List&lt;/code&gt; styles may clip their rows. Use &lt;code&gt;particleLayer(_:)&lt;/code&gt; to render particles on top of the entire &lt;code&gt;List&lt;/code&gt; or even its enclosing &lt;code&gt;NavigationStack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func particleLayer(name: AnyHashable) -&amp;gt; some View&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transitions&lt;/h2&gt; &#xA;&lt;p&gt;All transitions are namespaced under the &lt;code&gt;movingParts&lt;/code&gt; static variable, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;myView.transition(.movingParts.anvil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Anvil&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#anvil&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that drops the view down from the top with matching haptic feedback.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on insertion and takes 1.4 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var anvil: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Blinds&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#blinds&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that reveals the view as if it was behind window blinds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var blinds: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that reveals the view as if it was behind window blinds.&lt;/p&gt; &#xA;&lt;p&gt;Parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;slatWidth&lt;/code&gt;: The width of each slat.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;style&lt;/code&gt;: The style of blinds, either &lt;code&gt;.venetian&lt;/code&gt; or &lt;code&gt;.vertical&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isStaggered&lt;/code&gt;: Whether all slats opens at the same time or in sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func blinds(slatWidth: CGFloat, style: BlindsStyle = .venetian, isStaggered: Bool = false) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Blur&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#blur&#34;&gt;Preview &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition from blurry to sharp on insertion, and from sharp to blurry on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var blur: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Boing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#boing&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that moves the view down with any overshoot resulting in an elastic deformation of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var boing: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that moves the view from the specified edge on insertion,&lt;br&gt; and towards it on removal, with any overshoot resulting in an elastic&lt;br&gt; deformation of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func boing(edge: Edge) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clock&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#clock&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition using a clockwise sweep around the centerpoint of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var clock: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition using a clockwise sweep around the centerpoint of the view.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func clock(blurRadius: CGFloat)  -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flicker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#flicker&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that toggles the visibility of the view multiple times before settling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var flicker: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that toggles the visibility of the view multiple times before settling.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;count&lt;/code&gt;: The number of times the visibility is toggled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func flicker(count: Int) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Film Exposure&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#film-exposure&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition from completely dark to fully visible on insertion, and from fully visible to completely dark on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var filmExposure: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flip&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#flip&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that inserts by rotating the view towards the viewer, and removes by rotating the view away from the viewer.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Any overshoot of the animation will result in the view continuing the rotation past the view&#39;s normal state before eventually settling.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var flip: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Glare&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#glare&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transitions that shows the view by combining a diagonal wipe with a white streak.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var glare: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transitions that shows the view by combining a wipe with a colored streak.&lt;/p&gt; &#xA;&lt;p&gt;The angle is relative to the current &lt;code&gt;layoutDirection&lt;/code&gt;, such that 0° represents sweeping towards the trailing edge on insertion and 90° represents sweeping towards the bottom edge.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the removal of the view is using a glare with an exponential ease-in curve, combined with a anticipating scale animation, making for a more dramatic exit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;infoBox&#xA;  .transition(&#xA;    .asymmetric(&#xA;      insertion: .movingParts.glare(angle: .degrees(225)),&#xA;      removal: .movingParts.glare(angle: .degrees(45)&#xA;    )&#xA;    .animation(.movingParts.easeInExponential(duration: 0.9))&#xA;        .combined(with:&#xA;          .scale(scale: 1.4)&#xA;            .animation(.movingParts.anticipate(duration: 0.9).delay(0.1)&#xA;        )&#xA;      )&#xA;    )&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: The angle of the wipe.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;color&lt;/code&gt;: The color of the glare effect.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func glare(angle: Angle, color: Color = .white) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Iris&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#iris&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that takes the shape of a growing circle when inserting, and a shrinking circle when removing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;origin&lt;/code&gt;: The center point of the circle as it grows or shrinks.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func iris(origin: UnitPoint = .center, blurRadius: CGFloat = 0) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Move&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#move&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that moves the view from the specified edge of the on insertion and towards it on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func move(edge: Edge) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that moves the view at the specified angle.&lt;/p&gt; &#xA;&lt;p&gt;The angle is relative to the current &lt;code&gt;layoutDirection&lt;/code&gt;, such that 0° represents animating towards the trailing edge on insertion and 90° represents inserting towards the bottom edge.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the view insertion is animated by moving it towards the top trailing corner and the removal is animated by moving it towards the bottom edge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Hello&#34;)&#xA;  .transition(&#xA;    .asymmetric(&#xA;      insertion: .movingParts.move(angle: .degrees(45)),&#xA;      removal:   .movingParts.move(angle: .degrees(90))&#xA;    )&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;angle&lt;/code&gt;: The direction of the animation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func move(angle: Angle) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pop&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#pop&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that shows a view with a ripple effect and a flurry of tint-colored particles.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on insertion and takes 1.2 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var pop: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that shows a view with a ripple effect and a flurry of colored particles.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the star uses the pop effect only when transitioning from &lt;code&gt;starred == false&lt;/code&gt; to &lt;code&gt;starred == true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Button {&#xA;  starred.toggle()&#xA;} label: {&#xA;  if starred {&#xA;    Image(systemName: &#34;star.fill&#34;)&#xA;      .foregroundStyle(.orange)&#xA;      .transition(.movingParts.pop(.orange))&#xA;  } else {&#xA;    Image(systemName: &#34;star&#34;)&#xA;      .foregroundStyle(.gray)&#xA;      .transition(.identity)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The transition is only performed on insertion.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;style&lt;/code&gt;: The style to use for the effect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func pop&amp;lt;S: ShapeStyle&amp;gt;(_ style: S) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Poof&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#poof&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that removes the view in a dissolving cartoon style cloud.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on removal and takes 0.4 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var poof: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rotate3D&lt;/h3&gt; &#xA;&lt;p&gt;A transition that inserts by rotating from the specified rotation, and removes by rotating to the specified rotation in three dimensions.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the view is rotated 90˚ about the y axis around its bottom edge as if it was rising from lying on its back face:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Hello&#34;)&#xA;  .transition(.movingParts.rotate3D(&#xA;    .degrees(90),&#xA;      axis: (1, 0, 0),&#xA;      anchor: .bottom,&#xA;      perspective: 1.0 / 6.0)&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Any overshoot of the animation will result in the view continuing the rotation past the view&#39;s normal state before eventually settling.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;angle&lt;/code&gt;: The angle from which to rotate the view.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;axis&lt;/code&gt;: The x, y and z elements that specify the axis of rotation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;anchor&lt;/code&gt;: The location with a default of center that defines a point in 3D space about which the rotation is anchored.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;anchorZ&lt;/code&gt;: The location with a default of 0 that defines a point in 3D space about which the rotation is anchored.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perspective&lt;/code&gt;: The relative vanishing point with a default of 1 for this rotation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func rotate3D(_ angle: Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint = .center, anchorZ: CGFloat = 0, perspective: CGFloat = 1) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snapshot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#snapshot&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition from completely bright to fully visible on insertion, and from fully visible to completely bright on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var snapshot: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Skid&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#skid&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that moves the view in from its leading edge with any overshoot resulting in an elastic deformation of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var skid: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that moves the view in from the specified edge during insertion and towards it during removal with any overshoot resulting in an elastic deformation of the view.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;direction&lt;/code&gt;: The direction of the transition.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func skid(direction: SkidDirection) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swoosh&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#swoosh&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A three-dimensional transition from the back of the towards the front during insertion and from the front towards the back during removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var swoosh: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vanish&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#vanish&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that dissolves the view into many small particles.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on removal.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This transition will use an ease-out animation with a duration of 900ms if the current &lt;code&gt;Animation&lt;/code&gt; is &lt;code&gt;.default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var vanish: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that dissolves the view into many small particles.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on removal.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This transition will use an ease-out animation with a duration of 900ms if the current &lt;code&gt;Animation&lt;/code&gt; is &lt;code&gt;.default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;style&lt;/code&gt;: The style to use for the particles.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func vanish&amp;lt;S: ShapeStyle&amp;gt;(_ style: S) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that dissolves the view into many small particles following a given shape.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on removal.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This transition will use an ease-out animation with a duration of 900ms if the current &lt;code&gt;Animation&lt;/code&gt; is &lt;code&gt;.default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;style&lt;/code&gt;: The style to use for the particles.&lt;/li&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;mask&lt;/code&gt;: The mask that determines where particles should be placed.&lt;/li&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;eoFill&lt;/code&gt;: A Boolean that indicates whether the shape is interpreted with the even-odd winding number rule.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func vanish&amp;lt;T: ShapeStyle, S: Shape&amp;gt;(_ style: T, mask: S, eoFill: Bool = false) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wipe&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#wipe&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition using a sweep from the specified edge on insertion, and towards it on removal.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;edge&lt;/code&gt;: The edge at which the sweep starts or ends.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func wipe(edge: Edge, blurRadius: CGFloat = 0) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition using a sweep at the specified angle.&lt;/p&gt; &#xA;&lt;p&gt;The angle is relative to the current &lt;code&gt;layoutDirection&lt;/code&gt;, such that 0° represents sweeping towards the trailing edge on insertion and 90° represents sweeping towards the bottom edge.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;angle&lt;/code&gt;: The angle of the animation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func wipe(angle: Angle, blurRadius: CGFloat = 0) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>