<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-09T01:49:06Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DougGregor/swift-macro-examples</title>
    <updated>2023-06-09T01:49:06Z</updated>
    <id>tag:github.com,2023-06-09:/DougGregor/swift-macro-examples</id>
    <link href="https://github.com/DougGregor/swift-macro-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Example macros for the Swift macros effort&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Macro Examples&lt;/h1&gt; &#xA;&lt;p&gt;There is an active effort to introduce &lt;a href=&#34;https://forums.swift.org/t/a-possible-vision-for-macros-in-swift/60900&#34;&gt;macros&lt;/a&gt; into the Swift programming language. This repository includes some example macros that can be used to explore the macro proposals and experiment with the current implementation of the feature.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Macros are an experimental feature, so you will need a custom Swift toolchain and some extra compiler flags. The Xcode project in this repository is a good starting point. To use it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a &lt;a href=&#34;https://www.swift.org/download/#snapshots&#34;&gt;development snapshot&lt;/a&gt; of the compiler from Swift.org from May 10, 2023 or later. At present, we only have these working on macOS, but are working to get other platforms working with other build systems.&lt;/li&gt; &#xA; &lt;li&gt;To use SwiftPM to build the example project, use &lt;code&gt;swift build&lt;/code&gt; from the toolchain, e.g.: &lt;pre&gt;&lt;code&gt;/Library/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-03-08-a.xctoolchain/usr/bin/swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To use Xcode to build the example project: a. Open &lt;code&gt;MacroExamples.xcodeproj&lt;/code&gt; in Xcode b. Go to the Xcode -&amp;gt; Toolchains menu and select the development toolchain you downloaded. c. Make sure the &lt;code&gt;MacroExamples&lt;/code&gt; scheme is selected, then build and run! If the first build fails, build again--there&#39;s something funky going on with the dependencies. Then build again!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The output of the &lt;code&gt;MacroExamples&lt;/code&gt; program is pretty simple: it shows the result of running the example macro(s). The &lt;code&gt;main.swift&lt;/code&gt; file is annotated to describe what the macros are actually doing.&lt;/p&gt; &#xA;&lt;h2&gt;Example macros&lt;/h2&gt; &#xA;&lt;p&gt;A number of macros in this package are designed to illustrate different capabilities of the macro system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@AddCompletionHandler&lt;/code&gt;: Adds a completion-handler form of an &lt;code&gt;async&lt;/code&gt; function that creates a new task, calls the async function, and delivers the result to a completion handler. There&#39;s also the opposite form, &lt;code&gt;@AddAsync&lt;/code&gt;, to add an &lt;code&gt;async&lt;/code&gt; version for a synchronous function with a completion handler, automating the use of &lt;code&gt;withCheckedContinuation&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@CaseDetectionMacro&lt;/code&gt;: Augments an enum with &lt;code&gt;isXXX&lt;/code&gt; properties corresponding to each enum case, so one can easily test for a specific case, e.g., &lt;code&gt;filePath.isAbsolute&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@Observable&lt;/code&gt;: Observation facilities for a property, using a combination of macro kinds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#addBlocker&lt;/code&gt;: Demonstrates how a freestanding macro can emit compiler diagnostics based on the source code for the macro argument, by producing a warning for each use of the binary &lt;code&gt;+&lt;/code&gt; operator with range highlighting and a Fix-It to replace the &lt;code&gt;+&lt;/code&gt; with &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding your own macro&lt;/h2&gt; &#xA;&lt;p&gt;This examples package is meant to grow to include additional macros that have interesting behavior. To add a macro requires both &lt;em&gt;declaring&lt;/em&gt; the macro and also &lt;em&gt;implementing&lt;/em&gt; the macro, which happen in separate targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;: a macro is defined in the &lt;code&gt;MacroExamplesPlugin&lt;/code&gt; target, by creating a new &lt;code&gt;public struct&lt;/code&gt; type that implements one of the macro protocols. The &lt;code&gt;stringify&lt;/code&gt; macro implements the &lt;code&gt;ExpressionMacro&lt;/code&gt; protocol, e.g.,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public struct StringifyMacro: ExpressionMacro { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test a macro implementation, introduce new tests into the &lt;code&gt;MacroExamplesPluginTest&lt;/code&gt; target. These tests start with source code (like &lt;code&gt;#stringify(x + y)&lt;/code&gt;) and will run the macro implementation to produce new source code. The translation can make use of the &lt;a href=&#34;https://github.com/apple/swift-syntax&#34;&gt;swift-syntax&lt;/a&gt; package, a copy of which is included in the toolchain. We recommend implementing and testing your macro this way first so you know it does the source translation you want.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Declaration&lt;/strong&gt;: a macro is declared in the &lt;code&gt;MacroExamplesLib&lt;/code&gt; target, using the &lt;code&gt;macro&lt;/code&gt; introducer. For example, the simple &lt;code&gt;stringify&lt;/code&gt; macro is declared like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@freestanding(expression)&#xA;public macro stringify&amp;lt;T&amp;gt;(_ value: T) -&amp;gt; (T, String) = #externalMacro(module: &#34;MacroExamplesPlugin&#34;, type: &#34;StringifyMacro&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The name after &lt;code&gt;macro&lt;/code&gt; is the name to be used in source code, whereas the name after the &lt;code&gt;=&lt;/code&gt; is the module and type name for your macro implementation. If you haven&#39;t implemented that type, or get the name wrong, you will get a compiler warning.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have both a declaration and an implementation, it&#39;s time to use your macro! Go back to &lt;code&gt;MacroExamples&lt;/code&gt; and write some code there to exercise your macro however you want.&lt;/p&gt; &#xA;&lt;h2&gt;Macros proposals&lt;/h2&gt; &#xA;&lt;p&gt;The introduction of macros into Swift will involve a number of different proposals. The &lt;a href=&#34;https://gist.github.com/DougGregor/de840fcf6d6f307792121eee11c0da85&#34;&gt;Swift macros dashboard&lt;/a&gt; keeps track of all of them.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/app-store-server-library-swift</title>
    <updated>2023-06-09T01:49:06Z</updated>
    <id>tag:github.com,2023-06-09:/apple/app-store-server-library-swift</id>
    <link href="https://github.com/apple/app-store-server-library-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apple App Store Server Swift Library&lt;/h1&gt; &#xA;&lt;p&gt;The Swift server library for the &lt;a href=&#34;https://developer.apple.com/documentation/appstoreserverapi&#34;&gt;App Store Server API&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/appstoreservernotifications&#34;&gt;App Store Server Notifications&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/app-store-server-library-swift/main/#-beta-&#34;&gt;Beta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/app-store-server-library-swift/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/app-store-server-library-swift/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/app-store-server-library-swift/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/app-store-server-library-swift/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;⚠️ Beta ⚠️&lt;/h2&gt; &#xA;&lt;p&gt;This software is currently in Beta testing. Therefore, it should only be used for testing purposes, like for the Sandbox environment. API signatures may change between releases and signature verification may receive security updates.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Add the following dependency&#xA;&#xA;.package(url: &#34;https://github.com/apple/app-store-server-library-swift.git&#34;, .upToNextMinor(from: &#34;0.1.0&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apple.github.io/app-store-server-library-swift/documentation/appstoreserverlibrary/&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2023/10143/&#34;&gt;WWDC Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;API Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AppStoreServerLibrary&#xA;&#xA;let issuerId = &#34;99b16628-15e4-4668-972b-eeff55eeff55&#34;&#xA;let keyId = &#34;ABCDEFGHIJ&#34;&#xA;let bundleId = &#34;com.example&#34;&#xA;let encodedKey = try! String(contentsOfFile: &#34;/path/to/key/SubscriptionKey_ABCDEFGHIJ.p8&#34;)&#xA;let environment = Environment.sandbox&#xA;&#xA;// try! used for example purposes only&#xA;let client = try! AppStoreServerAPIClient(signingKey: encodedKey, keyId: keyId, issuerId: issuerId, bundleId: bundleId, environment: environment)&#xA;&#xA;let response = await client.requestTestNotification()&#xA;switch response {&#xA;case .success(let response):&#xA;    print(response.testNotificationToken)&#xA;case .failure(let errorCode, let apiError, let causedBy):&#xA;    print(errorCode)&#xA;    print(apiError)&#xA;    print(causedBy)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verification Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AppStoreServerLibrary&#xA;&#xA;let bundleId = &#34;com.example&#34;&#xA;let appleRootCAs = loadRootCAs() // Specific implementation may vary&#xA;let enableOnlineChecks = true&#xA;let environment = Environment.sandbox&#xA;&#xA;// try! used for example purposes only&#xA;let verifier = try! SignedDataVerifier(rootCertificates: appleRootCAs, bundleId: bundleId, appAppleId: nil, environment: environment, enableOnlineChecks: enableOnlineChecks)&#xA;&#xA;let notificationPayload = &#34;ey...&#34;&#xA;let notificationResult = await verifier.verifyAndDecodeNotification(signedPayload: notificationPayload)&#xA;switch notificationResult {&#xA;case .valid(let decodedNotificaiton):&#xA;    ...&#xA;case .invalid(let error):&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Receipt Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AppStoreServerLibrary&#xA;&#xA;let issuerId = &#34;99b16628-15e4-4668-972b-eeff55eeff55&#34;&#xA;let keyId = &#34;ABCDEFGHIJ&#34;&#xA;let bundleId = &#34;com.example&#34;&#xA;let encodedKey = try! String(contentsOfFile: &#34;/path/to/key/SubscriptionKey_ABCDEFGHIJ.p8&#34;)&#xA;let environment = Environment.SANDBOX&#xA;&#xA;// try! used for example purposes only&#xA;let client = try! AppStoreServerAPIClient(signingKey: encodedKey, keyId: keyId, issuerId: issuerId, bundleId: bundleId, environment: environment)&#xA;&#xA;let appReceipt = &#34;MI...&#34;&#xA;let receiptUtil = ReceiptUtility()&#xA;let transactionIdOptional = receiptUtil.extractTransactionId(appReceipt: appReceipt)&#xA;if let transactionId = transactionIdOptional {&#xA;    var transactionHistoryRequest = TransactionHistoryRequest()&#xA;    transactionHistoryRequest.sort = TransactionHistoryRequest.Order.ascending&#xA;    transactionHistoryRequest.revoked = false&#xA;    transactionHistoryRequest.productTypes = [TransactionHistoryRequest.ProductType.autoRenewable]&#xA;&#xA;    var response: HistoryResponse?&#xA;    var transactions: [String] = []&#xA;    repeat {&#xA;        let revisionToken = response?.revision&#xA;        let apiResponse = await client.getTransactionHistory(originalTransactionId: transactionId, revision: revisionToken, transactionHistoryRequest: transactionHistoryRequest)&#xA;        switch apiResponse {&#xA;        case .success(let successfulResponse):&#xA;            response = successfulResponse&#xA;        case .failure:&#xA;            // Handle Failure&#xA;            throw&#xA;        }&#xA;        if let signedTransactions = response?.signedTransactions {&#xA;            transactions.append(contentsOf: signedTransactions)&#xA;        }&#xA;    } while (response?.hasMore ?? false)&#xA;    print(transactions)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Promotional Offer Signature Creation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AppStoreServerLibrary&#xA;&#xA;let keyId = &#34;ABCDEFGHIJ&#34;&#xA;let bundleId = &#34;com.example&#34;&#xA;let encodedKey = try! String(contentsOfFile: &#34;/path/to/key/SubscriptionKey_ABCDEFGHIJ.p8&#34;)&#xA;&#xA;let productId = &#34;&amp;lt;product_id&amp;gt;&#34;&#xA;let subscriptionOfferId = &#34;&amp;lt;subscription_offer_id&amp;gt;&#34;&#xA;let applicationUsername = &#34;&amp;lt;application_username&amp;gt;&#34;&#xA;&#xA;// try! used for example purposes only&#xA;let signatureCreator = try! PromotionalOfferSignatureCreator(privateKey: encodedKey, keyId: keyId, bundleId: bundleId)&#xA;&#xA;let nonce = UUID()&#xA;let timestamp = Int64(Date().timeIntervalSince1970) * 1000&#xA;let signature = signatureCreator.createSignature(productIdentifier: productIdentifier, subscriptionOfferID: subscriptionOfferID, applicationUsername: applicationUsername, nonce: nonce, timestamp: timestamp)&#xA;print(signature)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Only the latest major version of the library will receive updates, including security updates. Therefore, it is recommended to update to new major versions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-openapi-generator</title>
    <updated>2023-06-09T01:49:06Z</updated>
    <id>tag:github.com,2023-06-09:/apple/swift-openapi-generator</id>
    <link href="https://github.com/apple/swift-openapi-generator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift OpenAPI Generator package plugin.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift OpenAPI Generator&lt;/h1&gt; &#xA;&lt;p&gt;Generate Swift client and server code from an OpenAPI document.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openapis.org&#34;&gt;OpenAPI&lt;/a&gt; is an open specification for documenting HTTP APIs.&lt;/p&gt; &#xA;&lt;p&gt;Swift OpenAPI Generator is a Swift package plugin that can generate the ceremony code required to make API calls, or implement API servers.&lt;/p&gt; &#xA;&lt;h2&gt;Repository organization&lt;/h2&gt; &#xA;&lt;p&gt;The Swift OpenAPI Generator project is split across multiple repositories to enable extensibility and minimize dependencies in your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;swift-openapi-generator&lt;/strong&gt; (&lt;a href=&#34;https://github.com/apple/swift-openapi-generator&#34;&gt;source&lt;/a&gt;, &lt;a href=&#34;https://swiftpackageindex.com/apple/swift-openapi-generator/documentation&#34;&gt;docs&lt;/a&gt;) provides the plugin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;swift-openapi-runtime&lt;/strong&gt; (&lt;a href=&#34;https://github.com/apple/swift-openapi-runtime&#34;&gt;source&lt;/a&gt;, &lt;a href=&#34;https://swiftpackageindex.com/apple/swift-openapi-runtime/documentation&#34;&gt;docs&lt;/a&gt;) provides a library with common types and abstractions used by the generated code.&lt;/p&gt; &#xA;&lt;p&gt;Choose one of the transports listed below, or create your own by adopting the &lt;code&gt;ClientTransport&lt;/code&gt; or &lt;code&gt;ServerTransport&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-openapi-urlsession&#34;&gt;apple/swift-openapi-urlsession&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Client&lt;/td&gt; &#xA;   &lt;td&gt;Uses &lt;code&gt;URLSession&lt;/code&gt; from &lt;a href=&#34;https://developer.apple.com/documentation/foundation&#34;&gt;Foundation&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/swift-server/swift-openapi-async-http-client&#34;&gt;swift-server/swift-openapi-async-http-client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Client&lt;/td&gt; &#xA;   &lt;td&gt;Uses &lt;code&gt;HTTPClient&lt;/code&gt; from &lt;a href=&#34;https://github.com/swift-server/async-http-client&#34;&gt;AsyncHTTPClient&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/swift-server/swift-openapi-vapor&#34;&gt;swift-server/swift-openapi-vapor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Server&lt;/td&gt; &#xA;   &lt;td&gt;Uses &lt;a href=&#34;https://github.com/vapor/vapor&#34;&gt;Vapor&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/swift-server/swift-openapi-hummingbird&#34;&gt;swift-server/swift-openapi-hummingbird&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Server&lt;/td&gt; &#xA;   &lt;td&gt;Uses &lt;a href=&#34;https://github.com/hummingbird-project/hummingbird&#34;&gt;Hummingbird&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements and supported features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift 5.8&lt;/li&gt; &#xA; &lt;li&gt;OpenAPI 3.0.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported platforms and minimum versions&lt;/h3&gt; &#xA;&lt;p&gt;The generator is used during development and is supported on macOS and Linux.&lt;/p&gt; &#xA;&lt;p&gt;The generated code, runtime library, and transports are supported on more platforms, listed below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Component&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;macOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;tvOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;watchOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Generator plugin and CLI&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅ 13+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Generated code, runtime, transports&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅ 13+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅ 16+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅ 16+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅ 9+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To get started, check out the full &lt;a href=&#34;https://swiftpackageindex.com/apple/swift-openapi-generator/documentation&#34;&gt;documentation&lt;/a&gt;, which contains step-by-step tutorials!&lt;/p&gt;</summary>
  </entry>
</feed>