<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-08T01:42:26Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pedrommcarrasco/Brooklyn</title>
    <updated>2022-09-08T01:42:26Z</updated>
    <id>tag:github.com,2022-09-08:/pedrommcarrasco/Brooklyn</id>
    <link href="https://github.com/pedrommcarrasco/Brooklyn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üçé Screensaver inspired by Apple&#39;s Event on October 30, 2018&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/pedrommcarrasco/Brooklyn/raw/master/Design/logo.jpg?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Screen Saver by &lt;a href=&#34;https://twitter.com/pedrommcarrasco&#34;&gt;Pedro Carrasco&lt;/a&gt; based on the animations presented during &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bfHEnw6Rm-4&#34;&gt;Apple Special Event&lt;/a&gt;&lt;/strong&gt; (October 30, 2018) from the Brooklyn Academy of Music, Howard Gilman Opera House.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/pedrommcarrasco/Brooklyn/raw/master/Design/showcase.gif?raw=true&#34; alt=&#34;Example&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/pedrommcarrasco/brooklyn/total.svg?sanitize=true&#34; alt=&#34;GitHub All Releases&#34;&gt; &lt;a href=&#34;https://travis-ci.org/pedrommcarrasco/Brooklyn&#34;&gt;&lt;img src=&#34;https://travis-ci.org/pedrommcarrasco/Brooklyn.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/pedrommcarrasco/brooklyn.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt; &lt;a href=&#34;https://github.com/pedrommcarrasco/Brooklyn/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/apm/l/vim-mode.svg?sanitize=true&#34; alt=&#34;apm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features ‚úÖ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Doesn&#39;t require internet connection&lt;/li&gt; &#xA; &lt;li&gt;Homebrew support&lt;/li&gt; &#xA; &lt;li&gt;Light &amp;amp; Dark theme&lt;/li&gt; &#xA; &lt;li&gt;Select which animations you want to see&lt;/li&gt; &#xA; &lt;li&gt;Loop each animation how many times you want&lt;/li&gt; &#xA; &lt;li&gt;Make the animations&#39; order random&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/pedrommcarrasco/Brooklyn/raw/master/Design/preferenceMenu.png?raw=true&#34; alt=&#34;Example&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation üì¶&lt;/h2&gt; &#xA;&lt;p&gt;Independently of how you install &lt;strong&gt;Brooklyn&lt;/strong&gt;, please &lt;strong&gt;close your System Preferences&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual &lt;span&gt;‚úã&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pedrommcarrasco/Brooklyn/releases/download/2.1.0/Brooklyn.saver.zip&#34;&gt;Click here to Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;strong&gt;Brooklyn.saver&lt;/strong&gt; (double click)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;Brooklyn.saver&#34; can&#39;t be opened because it is from an unidentified developer&lt;/code&gt; will appear, press &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Preferences&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Security &amp;amp; Privacy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;General&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;On the bottom side, select &lt;code&gt;Open Anyway&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Homebrew üç∫&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open terminal&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;brew install --cask brooklyn&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Uninstallation üóëÔ∏è&lt;/h2&gt; &#xA;&lt;h3&gt;Manual &lt;span&gt;‚úã&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Right-click on Brooklyn in System Preferences and select &lt;code&gt;Delete Brooklyn&lt;/code&gt;, or&lt;/li&gt; &#xA; &lt;li&gt;Delete &lt;code&gt;Brooklyn.saver&lt;/code&gt; either in &lt;code&gt;/Library/Screen Savers&lt;/code&gt; or &lt;code&gt;/Users/USERNAME/Library/Screen Savers&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Homebrew üç∫&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open terminal&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;brew uninstall --cask brooklyn&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Compatibility üîß&lt;/h2&gt; &#xA;&lt;p&gt;Requires OS X El Capitan (10.11) or above.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting ü§ï&lt;/h2&gt; &#xA;&lt;p&gt;The Brooklyn screen saver can be blocked by the system as a malicious software. Sometimes on macOS Big Sur clicking &lt;code&gt;Open Anyway&lt;/code&gt; in &lt;code&gt;Security &amp;amp; Privacy&lt;/code&gt; is not fixing the issue.&lt;/p&gt; &#xA;&lt;p&gt;To bypass this quarantine made by apple, you can use this command in your terminal :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo xattr -d com.apple.quarantine ~/&#34;Library/Screen Savers/Brooklyn.saver&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support Brooklyn ‚ù§Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;Hello there üëã&lt;/p&gt; &#xA;&lt;p&gt;I‚Äôm Pedro, a Portuguese iOS Engineer since February 2017. I‚Äôm an avid OSS enthusiast and contributor - help by sharing, learn by what‚Äôs shared.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve built and open-sourced multiple frameworks and applications, including &lt;strong&gt;&lt;a href=&#34;https://github.com/pedrommcarrasco/Brooklyn&#34;&gt;Brooklyn&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://cocoahub.app&#34;&gt;CocoaHub&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m also a conference and meetup organizer, being part of &lt;strong&gt;&lt;a href=&#34;https://swiftaveiro.xyz&#34;&gt;SwiftAveiro&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://www.meetup.com/CocoaHeads-Porto/&#34;&gt;CocoaHeads Porto&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you enjoy my work and would like to help me continue it, please consider:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/users/pedrommcarrasco/sponsorship&#34;&gt;https://github.com/users/pedrommcarrasco/sponsorship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buymeacoffee.com/pedrommcarrasco&#34;&gt;https://www.buymeacoffee.com/pedrommcarrasco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paypal.me/pedrommcarrasco&#34;&gt;https://www.paypal.me/pedrommcarrasco&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing üôå&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to contribute to this project by providing &lt;a href=&#34;https://github.com/pedrommcarrasco/Brooklyn/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc&#34;&gt;ideas&lt;/a&gt; or opening &lt;a href=&#34;https://github.com/pedrommcarrasco/Brooklyn/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc&#34;&gt;pull requests&lt;/a&gt; with new features or solving an existing issue.&lt;/p&gt; &#xA;&lt;h2&gt;License ‚õî&lt;/h2&gt; &#xA;&lt;p&gt;Brooklyn&#39;s available under the MIT license. See the &lt;a href=&#34;https://github.com/pedrommcarrasco/Brooklyn/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more information. Logo &amp;amp; original animations are Apple&#39;s property.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>icanzilb/MarkCodable</title>
    <updated>2022-09-08T01:42:26Z</updated>
    <id>tag:github.com,2022-09-08:/icanzilb/MarkCodable</id>
    <link href="https://github.com/icanzilb/MarkCodable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift Codable with human-friendly Markdown storage&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MarkCodable&lt;/h1&gt; &#xA;&lt;p&gt;Markdown Swift coding with an eye on human interaction.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This library is still in flux until we find together what&#39;s the best way to use markdown encoding, check the issues and/or leave some feedback.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;MarkCodable&lt;/strong&gt; encodes &lt;code&gt;Codable&lt;/code&gt; values as Markdown text and decodes Markdown strings as Swift values. Markdown-representation allows humans to easily edit values by hand using their favorite text editor on any operating system or in a web interface.&lt;/p&gt; &#xA;&lt;p&gt;JSON is flexible but either too compact or too verbose to edit meaningfully by hand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[{&#34;number&#34;:134,&#34;street&#34;:&#34;main st.&#34;,&#34;isSocial&#34;:false,&#34;price&#34;:{&#34;price&#34;:1234.3199999999999,&#34;currency&#34;:&#34;USD&#34;}},{&#34;number&#34;:24,&#34;street&#34;:&#34;Secondary st.&#34;,&#34;isSocial&#34;:true,&#34;price&#34;:{&#34;price&#34;:9234.3199999999997,&#34;currency&#34;:&#34;JPY&#34;}}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In comparison, Markdown isn&#39;t as expressive but it&#39;s far simpler to view and edit by a human:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;|isSocial|number|price.currency|price.price|street       |&#xA;|--------|------|--------------|-----------|-------------|&#xA;|false   |134   |USD           |1234.32    |main st.     |&#xA;|true    |24    |JPY           |9234.32    |Secondary st.|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thus, for the smaller scope of encoding data in an edit-friendly format, Markdown is a great choice.&lt;/p&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;p&gt;You encode or decode &lt;code&gt;Codable&lt;/code&gt; values as with any other decoder, bar some limitations on nested data types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Encode into a Markdown string&#xA;let markdown = try MarkEncoder().encode([house1, house2])&#xA;&#xA;// Decode from a Markdown string&#xA;let houses = try MarkDecoder()&#xA;    .decode([House].self, string: markdown)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Markdown is a viable alternative to json or yml files, especially for multiple configuration entries like per-environment or per-domain configurations, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;| environment | host      | port | user | schema |&#xA;|-------------|-----------|------|------|--------|&#xA;| qa          | 127.0.0.1 | 8080 | test | http   |&#xA;| production  | 2.317.1.2 | 9999 | app  | https  |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test and mock objects&lt;/h3&gt; &#xA;&lt;p&gt;In unit tests you often times need a number of test objects to create the test setup. Those are sometimes a bit clunky to always create in code so you can either include the Markdown in your tests or have it as an &lt;code&gt;.md&lt;/code&gt; file in your test bundle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;| userID | name | age | permissions |&#xA;|--------|------|-----|-------------|&#xA;|1       |peter | 32  |read         |&#xA;|2       |admin | 100 |read,write   |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;p&gt;For simple relational data, using &lt;code&gt;MarkCodable&lt;/code&gt; will allow you or your users to simply edit the data in any plain text editor. This is how a small podcast database might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Users.md:&#xA;| userID | name |&#xA;|--------|------|&#xA;|1       | John |&#xA;|2       | Gui  |&#xA;&#xA;Podcasts.md:&#xA;| podcastID | name            | hosts |&#xA;|-----------|-----------------|-------|&#xA;|1          |Swift by Sundell | 1     |&#xA;|2          |Stacktrace       | 1,2   |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load the items by reading the files, decoding the values, and optionally store them as indexed dictionaries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let users = try MarkDecoder()&#xA;    .decode([User].self, string: String(contentsOfFile: &#34;Users.md&#34;))&#xA;    .reduce(into: [Int: User](), { $0[$1.id] = $1 })&#xA;&#xA;print(users[2]) // [userID: 2, name: Gui]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use the package directly in Xcode or via SwiftPM.&lt;/p&gt; &#xA;&lt;p&gt;For the time being the package depends on &lt;code&gt;swift-markdown&lt;/code&gt; which does not support semantic versioning and thus &lt;code&gt;MarkCodable&lt;/code&gt; also doesn&#39;t support it: &lt;a href=&#34;https://github.com/icanzilb/MarkCodable/issues/15&#34;&gt;issue #15&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(url: &#34;https://github.com/icanzilb/MarkCodable&#34;, branch: &#34;main&#34;),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo App&lt;/h2&gt; &#xA;&lt;p&gt;This package contains a target called &lt;code&gt;marktest&lt;/code&gt; that showcases some demo code. Run that demo from the package folder via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;swift run marktest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a demo of a full SwiftUI app (~70 lines of Swift) using a GitHub-hosted Markdown file as backend, check out &lt;a href=&#34;https://github.com/icanzilb/MarkCodingDemoApp&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/icanzilb/MarkCodingDemoApp/main/etc/app-screen.png&#34; width=&#34;320&#34;&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;MIT License, Marin Todorov (2022)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/icanzilb&#34;&gt;@icanzilb on Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help, feedback or suggestions?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;There is a list of current &lt;a href=&#34;https://github.com/icanzilb/MarkCodable/issues?q=is%3Aissue+is%3Aopen+label%3Abug&#34;&gt;bugs&lt;/a&gt; if you&#39;d like to pick one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is also a list of currently planned &lt;a href=&#34;https://github.com/icanzilb/MarkCodable/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement&#34;&gt;enhancements&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/icanzilb/MarkCodable/issues&#34;&gt;Open an issue&lt;/a&gt; if you need help, if you found a bug, or if you want to discuss a feature request.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/icanzilb/MarkCodable/pulls&#34;&gt;Open a PR&lt;/a&gt; if you want to make a change to the code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Skittyblock/WallpaperSetter</title>
    <updated>2022-09-08T01:42:26Z</updated>
    <id>tag:github.com,2022-09-08:/Skittyblock/WallpaperSetter</id>
    <link href="https://github.com/Skittyblock/WallpaperSetter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS application for setting separate light and dark mode wallpapers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WallpaperSetter&lt;/h1&gt; &#xA;&lt;p&gt;iOS application for setting separate light and dark mode wallpapers. Usable with &lt;a href=&#34;https://github.com/opa334/TrollStore&#34;&gt;TrollStore&lt;/a&gt; on iOS 14-15.1.1.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;WallpaperSetter requires the &lt;code&gt;com.apple.springboard.wallpaper-access&lt;/code&gt; entitlement, meaning you won&#39;t be able to codesign it with an Apple Developer account to run on a real device. You will need to use &lt;code&gt;xcodebuild&lt;/code&gt; to build without codesigning.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xcodebuild build CODE_SIGN_IDENTITY= CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To package it, copy the resulting .app in the &lt;code&gt;build/Release-iphoneos&lt;/code&gt; directory into a &lt;code&gt;Payload&lt;/code&gt; folder, fakesign it, zip it, and then rename to an ipa file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd build/Release-iphoneos/&#xA;mkdir Payload&#xA;ldid -S../../WallpaperSetter/WallpaperSetter.entitlements WPSetter.app&#xA;cp -r WPSetter.app Payload&#xA;zip -r WallpaperSetter.ipa Payload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running on the simulator should work fine.&lt;/p&gt;</summary>
  </entry>
</feed>