<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-16T01:40:05Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>huggingface/swift-transformers</title>
    <updated>2023-08-16T01:40:05Z</updated>
    <id>tag:github.com,2023-08-16:/huggingface/swift-transformers</id>
    <link href="https://github.com/huggingface/swift-transformers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift Package to implement a transformers-like API in Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;swift-transformers&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is a collection of utilities to help adopt language models in Swift apps. It tries to follow the Python &lt;code&gt;transformers&lt;/code&gt; API and abstractions whenever possible, but it also aims to provide an idiomatic Swift interface and does not assume prior familiarity with &lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;&lt;code&gt;transformers&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/huggingface/tokenizers&#34;&gt;&lt;code&gt;tokenizers&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Rationale and Overview&lt;/h2&gt; &#xA;&lt;p&gt;Please, check &lt;a href=&#34;https://huggingface.co/blog/swift-coreml-llm&#34;&gt;our post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Tokenizers&lt;/code&gt;. Utilities to convert text to tokens and back. Follows the abstractions in &lt;a href=&#34;https://github.com/huggingface/tokenizers&#34;&gt;&lt;code&gt;tokenizers&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/xenova/transformers.js&#34;&gt;&lt;code&gt;transformers.js&lt;/code&gt;&lt;/a&gt;. Usage example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Tokenizers&#xA;&#xA;func testTokenizer() async throws {&#xA;    let tokenizer = try await AutoTokenizer.from(pretrained: &#34;pcuenq/Llama-2-7b-chat-coreml&#34;)&#xA;    let inputIds = tokenizer(&#34;Today she took a train to the West&#34;)&#xA;    assert(inputIds == [1, 20628, 1183, 3614, 263, 7945, 304, 278, 3122])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, you don&#39;t usually need to tokenize the input text yourself - the &lt;a href=&#34;https://github.com/huggingface/swift-transformers/raw/17d4bfae3598482fc7ecf1a621aa77ab586d379a/Sources/Generation/Generation.swift#L82&#34;&gt;&lt;code&gt;Generation&lt;/code&gt; code&lt;/a&gt; will take care of it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Hub&lt;/code&gt;. Utilities to download configuration files from the Hub, used to instantiate tokenizers and learn about language model characteristics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Generation&lt;/code&gt;. Algorithms for text generation. Currently supported ones are greedy search and top-k sampling.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Models&lt;/code&gt;. Language model abstraction over a Core ML package.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Models&lt;/h2&gt; &#xA;&lt;p&gt;This package has been tested with autoregressive language models such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GPT, GPT-Neox, GPT-J.&lt;/li&gt; &#xA; &lt;li&gt;SantaCoder.&lt;/li&gt; &#xA; &lt;li&gt;StarCoder.&lt;/li&gt; &#xA; &lt;li&gt;Falcon.&lt;/li&gt; &#xA; &lt;li&gt;Llama 2.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Encoder-decoder models such as T5 and Flan are currently &lt;em&gt;not supported&lt;/em&gt;. They are high up in our &lt;a href=&#34;https://raw.githubusercontent.com/huggingface/swift-transformers/main/#roadmap&#34;&gt;priority list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/swift-chat&#34;&gt;&lt;code&gt;swift-chat&lt;/code&gt;&lt;/a&gt;, a simple app demonstrating how to use this package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/exporters&#34;&gt;&lt;code&gt;exporters&lt;/code&gt;&lt;/a&gt;, a Core ML conversion package for transformers models, based on Apple&#39;s &lt;a href=&#34;https://github.com/apple/coremltools&#34;&gt;&lt;code&gt;coremltools&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/spaces/coreml-projects/transformers-to-coreml&#34;&gt;&lt;code&gt;transformers-to-coreml&lt;/code&gt;&lt;/a&gt;, a no-code Core ML conversion tool built on &lt;code&gt;exporters&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;roadmap&#34;&gt;&lt;/a&gt; Roadmap / To Do&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tokenizers: download from the Hub, port from &lt;a href=&#34;https://github.com/huggingface/tokenizers&#34;&gt;&lt;code&gt;tokenizers&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BPE family&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix Falcon, broken while porting BPE&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Improve tests, add edge cases, see &lt;a href=&#34;https://github.com/xenova/transformers.js/raw/27920d84831e323275b38f0b5186644b7936e1a2/tests/generate_tests.py#L24&#34;&gt;https://github.com/xenova/transformers.js/blob/27920d84831e323275b38f0b5186644b7936e1a2/tests/generate_tests.py#L24&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Include fallback &lt;code&gt;tokenizer_config.json&lt;/code&gt; for known architectures whose models don&#39;t have a configuration in the Hub (GPT2)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Port other tokenizer types: Unigram, WordPiece&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/huggingface/exporters&#34;&gt;&lt;code&gt;exporters&lt;/code&gt;&lt;/a&gt; â€“ Core ML conversion tool. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow max sequence length to be specified.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Allow discrete shapes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Return &lt;code&gt;logits&lt;/code&gt; from converted Core ML model&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;coremltools&lt;/code&gt; @ &lt;code&gt;main&lt;/code&gt; for latest fixes. In particular, &lt;a href=&#34;https://github.com/apple/coremltools/pull/1915&#34;&gt;this merged PR&lt;/a&gt; makes it easier to use recent versions of transformers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Nucleus sampling (we currently have greedy and top-k sampling)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Use &lt;a href=&#34;https://developer.apple.com/documentation/accelerate/bnns#4164142&#34;&gt;new &lt;code&gt;top-k&lt;/code&gt; implementation in &lt;code&gt;Accelerate&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support discrete shapes in the underlying Core ML model by selecting the smallest sequence length larger than the input.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Optimization: cache past key-values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Encoder-decoder models (T5)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/huggingface/swift-chat&#34;&gt;Demo app&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Allow system prompt to be specified.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; How to define a system prompt template?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test a code model (to stretch system prompt definition)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huggingface/swift-transformers/main/LICENSE&#34;&gt;Apache 2&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hylo-lang/hyloc</title>
    <updated>2023-08-16T01:40:05Z</updated>
    <id>tag:github.com,2023-08-16:/hylo-lang/hyloc</id>
    <link href="https://github.com/hylo-lang/hyloc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The hylo compiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hylo&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Val is getting renamed to Hylo. We apologize for any broken links and confusion this may cause. We&#39;re working on it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Hylo is a programming language that leverages &lt;a href=&#34;https://www.jot.fm/issues/issue_2022_02/article2.pdf&#34;&gt;mutable value semantics&lt;/a&gt; and &lt;a href=&#34;https://fm2gp.com&#34;&gt;generic programming&lt;/a&gt; for high-level systems programming.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the sources of the reference implementation of Hylo. Please visit our &lt;a href=&#34;https://hylo-lang.org&#34;&gt;website&lt;/a&gt; to get more information about the language itself.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This project is written in &lt;a href=&#34;https://swift.org&#34;&gt;Swift&lt;/a&gt; and distributed in the form of a package, built with &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;. You will need Swift 5.7 or higher to build the compiler from sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note to Windows users: although this project is &lt;strong&gt;not&lt;/strong&gt; Unix-specific, Windows support is not guaranteed due to the instability of continuous integration (see &lt;a href=&#34;https://github.com/hylo-lang/hyloc/issues/252&#34;&gt;https://github.com/hylo-lang/hyloc/issues/252&lt;/a&gt; and &lt;a href=&#34;https://github.com/hylo-lang/hyloc/issues/805&#34;&gt;https://github.com/hylo-lang/hyloc/issues/805&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;You can skip directly to step 3 if you&#39;re doing development exclusively in a &lt;a href=&#34;https://raw.githubusercontent.com/hylo-lang/hyloc/main/#building-a-hylo-devcontainer-with-vscode&#34;&gt;devcontainer&lt;/a&gt;. Otherwise:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install LLVM 15 or later on your system (e.g. &lt;code&gt;brew install llvm&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Have the above installation&#39;s &lt;code&gt;llvm-config&lt;/code&gt; in your &lt;code&gt;PATH&lt;/code&gt; (homebrew doesn&#39;t do that automatically; you&#39;d need &lt;code&gt;export PATH=&#34;$HOMEBREW_PREFIX/opt/llvm/bin:$PATH&#34;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;In this project&#39;s root directory. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;swift package resolve&lt;/code&gt; to get the &lt;code&gt;make-pkgconfig&lt;/code&gt; tool.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.build/checkouts/Swifty-LLVM/Tools/make-pkgconfig.sh llvm.pc&lt;/code&gt; to generate LLVM&#39;s library description&lt;/li&gt; &#xA;   &lt;li&gt;Either &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;code&gt;sudo mkdir -p /usr/local/lib/pkgconfig &amp;amp;&amp;amp; sudo mv llvm.pc /usr/local/lib/pkgconfig/&lt;/code&gt; (if you want to use Xcode)&lt;/li&gt; &#xA;     &lt;li&gt;or, &lt;code&gt;export PKG_CONFIG_PATH=$PWD&lt;/code&gt; in any shell where you want to work on this project&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building the compiler&lt;/h3&gt; &#xA;&lt;p&gt;You may compile Hylo&#39;s compiler with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift build -c release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That command will create an executable named &lt;code&gt;hyloc&lt;/code&gt; in &lt;code&gt;.build/release&lt;/code&gt;. That&#39;s Hylo&#39;s compiler!&lt;/p&gt; &#xA;&lt;h3&gt;Running the tests&lt;/h3&gt; &#xA;&lt;p&gt;To test your compiler,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift test -c release --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building a Hylo Devcontainer with VSCode&lt;/h3&gt; &#xA;&lt;p&gt;While Hylo supports Linux natively, it also provides a &lt;a href=&#34;https://containers.dev/&#34;&gt;Devcontainer&lt;/a&gt; specification to develop for Linux on other platforms through a Docker container. Our &lt;a href=&#34;https://raw.githubusercontent.com/hylo-lang/hyloc/main/.github/workflows/build-and-test.yml&#34;&gt;Linux CI&lt;/a&gt; uses this specification; this makes it possible to run Linux CI locally on other operating systems like macOS. While this specification should work for any IDE that supports devcontainers, keep in mind this team only uses VSCode.&lt;/p&gt; &#xA;&lt;p&gt;When opening the Hylo project in VSCode for the first time, you should be prompted to install the extension &lt;code&gt;recommendations&lt;/code&gt; in &lt;code&gt;.vscode/extensions.json&lt;/code&gt;. If you are not prompted, manually install the extensions by searching for the extension identifiers in the Extensions Marketplace.&lt;/p&gt; &#xA;&lt;p&gt;Then, build the Devcontainer with the VSCode command: &lt;code&gt;&amp;gt; Dev Containers: Rebuild and Reopen in Container&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, open a new integrated terminal in VSCode and confirm that the shell user is &lt;code&gt;vscode&lt;/code&gt;. You can run &lt;code&gt;whoami&lt;/code&gt; to check this.&lt;/p&gt; &#xA;&lt;p&gt;That integrated terminal is connected to the Devcontainer, as if by ssh. Use the &lt;code&gt;make-pkgconfig&lt;/code&gt; tool to configure LLVM&#39;s library description (see steps 3 in &lt;a href=&#34;https://raw.githubusercontent.com/hylo-lang/hyloc/main/#prerequisites&#34;&gt;prerequisites&lt;/a&gt;). You can now run &lt;code&gt;swift test -c release&lt;/code&gt; to build and test for Linux.&lt;/p&gt; &#xA;&lt;p&gt;The Hylo repository files are mounted into the container, so any changes made locally (in VSCode or in other editors) will be automatically propagated into the Devcontainer. However, if you need to modifiy any of the files in the &lt;code&gt;.devcontainer&lt;/code&gt; directory, you will need to rebuild the container with &lt;code&gt;&amp;gt; Dev Containers: Rebuild and Reopen in Container&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Implementation status&lt;/h2&gt; &#xA;&lt;p&gt;This project is under active development; expect things to break and APIs to change.&lt;/p&gt; &#xA;&lt;p&gt;The compiler pipeline is organized as below. Incidentally, early stages of this pipeline are more stable than later ones. &lt;em&gt;(Note: completion percentages are very rough estimations.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Parsing (100%)&lt;/li&gt; &#xA; &lt;li&gt;Type checking (50%)&lt;/li&gt; &#xA; &lt;li&gt;IR lowering (30%)&lt;/li&gt; &#xA; &lt;li&gt;IR analysis and transformations (30%)&lt;/li&gt; &#xA; &lt;li&gt;Machine code generation (20%)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can select how deep the compiler should go through the pipeline with the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit raw-ast&lt;/code&gt;: Only parse the input files and output an untyped AST as a JSON file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--typecheck&lt;/code&gt;: Run the type checker on the input.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit raw-ir&lt;/code&gt;: Lower the typed AST into Hylo IR and output the result in a file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit ir&lt;/code&gt;: Run mandatory IR passes and output the result in a file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit llvm&lt;/code&gt;: Transpile the program to LLVM and output LLVM IR.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit intel-asm&lt;/code&gt;: Output Intel assembly for all user module(s).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit binary&lt;/code&gt; (default): Produce an executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;hyloc --emit raw-ast -o main.json main.hylo&lt;/code&gt; will parse &lt;code&gt;main.hylo&lt;/code&gt;, write the untyped AST in &lt;code&gt;main.json&lt;/code&gt;, and exit the pipeline.&lt;/p&gt; &#xA;&lt;p&gt;A more detailed description of the current implementation status is available on our &lt;a href=&#34;https://www.hylo-lang.org/pages/implementation-status.html&#34;&gt;roadmap page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related video and audio&lt;/h2&gt; &#xA;&lt;h3&gt;Conference Talks&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Conference&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Year&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Speaker&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Title&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C++Now&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2022-05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dave Abrahams&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4Ri8bly-dJs&#34;&gt;Keynote: A Future of Value Semantics and Generic Programming Part 1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C++Now&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2022-05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dave Abrahams &amp;amp; Dimi Racordon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GsxYnEAZoNI&#34;&gt;Keynote: A Future of Value Semantics and Generic Programming Part 2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CppNorth&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2022-07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dave Abrahams&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KGL02mSaplE&#34;&gt;Lightning Talk: An Object Model for Safety and Efficiency by Definition&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CppCon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2022-09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dave Abrahams&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QthAU-t3PQ4&#34;&gt;Value Semantics: Safety, Independence, Projection, &amp;amp; Future of Programming&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CppCon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2022-09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dimi Racordon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ws-Z8xKbP4w&#34;&gt;Val: A Safe Language to Interoperate with C++&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ACCU&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2023-03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Lucian Radu Teodorescu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uSG240pJGPM&#34;&gt;Concurrency Approaches: Past, Present, and Future&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Podcasts&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Podcast&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Episode&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Date&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Guest&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Title&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CppCast&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;352&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2023-01-20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dimi Racordon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://cppcast.com/val-and-mutable-value-semantics&#34;&gt;Val and Mutable Value Semantics&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADSP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;137&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2023-07-07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Sean Parent&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://adspthepodcast.com/2023/07/07/Episode-137.html&#34;&gt;Sean Parent on Hylo (vs Rust)!&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADSP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;138&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2023-07-14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Sean Parent&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://adspthepodcast.com/2023/07/14/Episode-138.html&#34;&gt;Sean Parent on Hylo! (Part 2)&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Hylo. Please read through &lt;a href=&#34;https://raw.githubusercontent.com/hylo-lang/hyloc/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on how to get started.&lt;/p&gt; &#xA;&lt;p&gt;You can also get in touch with the community by joining our &lt;a href=&#34;https://join.slack.com/t/val-qs97696/shared_invite/zt-1z3dsblrq-y4qXfEE6wr6uMEJSN9uFyg&#34;&gt;Slack&lt;/a&gt; or one of our &lt;a href=&#34;https://teams.microsoft.com/l/meetup-join/19%3ameeting_YjZmOTJiMjUtNDZhNy00MTcxLWJjY2YtMTQ0ZGEzY2RkY2E4%40thread.v2/0?context=%7b%22Tid%22%3a%22fa7b1b5a-7b34-4387-94ae-d2c178decee1%22%2c%22Oid%22%3a%22a102b458-98db-4c5e-acad-cfa08a096ae3%22%7d&#34;&gt;Teams Meetings&lt;/a&gt; (ID: 298 158 296 273, Passcode: D2beKF) on Tuesdays and Thursdays, 12:30-1:00 Pacific time.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Hylo is distributed under the terms of the Apache-2.0 license. See &lt;a href=&#34;https://raw.githubusercontent.com/hylo-lang/hyloc/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>