<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-23T01:48:03Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>amiantos/ealain</title>
    <updated>2023-06-23T01:48:03Z</updated>
    <id>tag:github.com,2023-06-23:/amiantos/ealain</id>
    <link href="https://github.com/amiantos/ealain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ealain is a macOS screensaver that generates abstract art using Stable Diffusion&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ealain for macOS&lt;/h1&gt; &#xA;&lt;p&gt;Ealain is a macOS screensaver that displays abstract art generated by Stable Diffusion using the &lt;a href=&#34;https://aihorde.net&#34;&gt;AI Horde&lt;/a&gt;. Limitless generative art gracing your screen, forever.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;These are some examples of the kind of art you may see on your screen, but you will never see these specific images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amiantos/ealain/main/imageExamples.jpg?raw=true&#34; alt=&#34;Ealain generative art example images, showing abstract are in the bauhaus, de stijl, and more geometric styles&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amiantos.s3.amazonaws.com/ealain-0.1.zip&#34;&gt;Download Ealain v0.1 for macOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In &lt;code&gt;Backend&lt;/code&gt; there is a node script I run at home periodically that generates new images and stores them in S3.&lt;/li&gt; &#xA; &lt;li&gt;The screensaver downloads a JSON file that is a simple array of image URLs, it then shows a randomized slidehow of these images. Easy!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>lukepistrol/SFSymbolsMacro</title>
    <updated>2023-06-23T01:48:03Z</updated>
    <id>tag:github.com,2023-06-23:/lukepistrol/SFSymbolsMacro</id>
    <link href="https://github.com/lukepistrol/SFSymbolsMacro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift Macro for &#34;type-safe&#34; SF Symbols.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5.9-f05318.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/iOS-&gt;= 13.0-blue.svg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/macOS-&gt;= 11.0-blue.svg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/watchOS-&gt;= 6.0-blue.svg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/tvOS-&gt;= 13.0-blue.svg&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/lukepistrol/SFSymbolsMacro&#34;&gt; &lt;a href=&#34;https://twitter.com/lukeeep_&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Twitter-@lukeeep_-1e9bf0.svg?style=flat&#34; alt=&#34;Twitter: @lukeeep_&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;SFSymbolsMacro&lt;/h1&gt; &#xA;&lt;p&gt;This Swift Macro provides an easy way to make the use of SF Symbols in Swift more or less &lt;em&gt;&#34;type-safe&#34;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Xcode&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click File &amp;gt; Add Package Dependencies&lt;/li&gt; &#xA; &lt;li&gt;Paste the following link into the search field on the upper-right: &lt;pre&gt;&lt;code&gt;https://github.com/lukepistrol/SFSymbolsMacro.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/lukepistrol/SFSymbolsMacro.git&#34;, from: &#34;0.1.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then add the dependency to your targets.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply create an &lt;code&gt;enum&lt;/code&gt; which will hold all the SF Symbols for your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Symbols: String {&#xA;    case circle&#xA;    case circleFill = &#34;circle.fill&#34;&#xA;    case shareIcon = &#34;square.and.arrow.up&#34;&#xA;    case globe&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then simply import &lt;code&gt;SFSymbolsMacro&lt;/code&gt; and add the &lt;code&gt;@SFSymbol&lt;/code&gt; macro annotation to the enum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SFSymbolsMacro&#xA;import SwiftUI&#xA;&#xA;@SFSymbol&#xA;enum Symbols: String { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The macro will then validate each &lt;code&gt;case&lt;/code&gt; and the expanded macro will look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Symbols: String {&#xA;    case circle&#xA;    case circleFill = &#34;circle.fill&#34;&#xA;    case shareIcon = &#34;square.and.arrow.up&#34;&#xA;    case globe&#xA;&#xA;    var image: Image {&#xA;        Image(systemName: self.rawValue)&#xA;    }&#xA;    var name: String {&#xA;        self.rawValue&#xA;    }&#xA;    #if canImport(UIKit)&#xA;    func uiImage(configuration: UIImage.Configuration? = nil) -&amp;gt; UIImage {&#xA;        UIImage(systemName: self.rawValue, withConfiguration: configuration)!&#xA;    }&#xA;    #else&#xA;    func nsImage(accessibilityDescription: String? = nil) -&amp;gt; NSImage {&#xA;        return NSImage(systemSymbolName: self.rawValue, accessibilityDescription: accessibilityDescription)!&#xA;    }&#xA;    #endif&#xA;    func callAsFunction() -&amp;gt; String {&#xA;        return self.rawValue&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your code you can then call a symbol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {&#xA;    VStack {&#xA;        Symbols.circleFill.image&#xA;        Label(&#34;Globe&#34;, systemImage: Symbols.globe.name)&#xA;        // the above can also be written as&#xA;        Label(&#34;Globe&#34;, systemImage: Symbols.globe())&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case the provided raw value is not a valid SF Symbol, Xcode will show a compile error at the &lt;code&gt;enum-case&lt;/code&gt; in question:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lukepistrol/SFSymbolsMacro/assets/9460130/36713049-6b14-4fc4-8a07-df86837e4704&#34; alt=&#34;explicit raw value&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lukepistrol/SFSymbolsMacro/assets/9460130/9db30861-4b98-4e31-9c41-0b5e0a553293&#34; alt=&#34;inferred raw value&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;If you have any ideas on how to take this further I&#39;m happy to discuss things in an issue.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/lukeeep&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>