<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T01:55:54Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MonitorControl/MonitorControl</title>
    <updated>2022-07-01T01:55:54Z</updated>
    <id>tag:github.com,2022-07-01:/MonitorControl/MonitorControl</id>
    <link href="https://github.com/MonitorControl/MonitorControl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🖥 Control your display&#39;s brightness &amp; volume on your Mac as if it was a native Apple Display. Use Apple Keyboard keys or custom shortcuts. Shows the native macOS OSDs.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/Icon-cropped.png&#34; width=&#34;220&#34; alt=&#34;App icon&#34; align=&#34;left&#34;&gt; &#xA;&lt;div&gt; &#xA; &lt;h2&gt;MonitorControl - for Apple Silicon and Intel&lt;/h2&gt; &#xA; &lt;p&gt;Controls your external display brightness and volume and shows native OSD. Use menulet sliders or the keyboard, including native Apple keys!&lt;/p&gt; &#xA; &lt;a href=&#34;https://github.com/MonitorControl/MonitorControl/releases&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/macos_badge_noborder.png&#34; width=&#34;175&#34; alt=&#34;Download for macOS&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- shields --&gt; &#xA; &lt;!-- downloads --&gt; &#xA; &lt;a href=&#34;https://github.com/MonitorControl/MonitorControl/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/MonitorControl/MonitorControl/total.svg?style=flat&#34; alt=&#34;downloads&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- version --&gt; &#xA; &lt;a href=&#34;https://github.com/MonitorControl/MonitorControl/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release-pre/MonitorControl/MonitorControl.svg?style=flat&#34; alt=&#34;latest version&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- license --&gt; &#xA; &lt;a href=&#34;https://github.com/MonitorControl/MonitorControl/raw/master/License.txt&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/MonitorControl/MonitorControl.svg?style=flat&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- platform --&gt; &#xA; &lt;a href=&#34;https://github.com/MonitorControl/MonitorControl&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-macOS-lightgrey.svg?style=flat&#34; alt=&#34;platform&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- backers --&gt; &#xA; &lt;a href=&#34;https://opencollective.com/monitorcontrol&#34;&gt; &lt;img src=&#34;https://opencollective.com/monitorcontrol/tiers/badge.svg?sanitize=true&#34; alt=&#34;backers&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/screenshot.png&#34; width=&#34;824&#34; alt=&#34;Screenshot&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://github.com/MonitorControl/MonitorControl/releases&#34;&gt;Releases&lt;/a&gt; and download the latest &lt;code&gt;.dmg&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Major features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Control your display&#39;s brightness, volume and contrast!&lt;/li&gt; &#xA; &lt;li&gt;Shows native OSD for brightness and volume.&lt;/li&gt; &#xA; &lt;li&gt;Supports multiple protocols to adjust brightness: DDC for external displays (brightness, contrast, volume), native Apple protocol for Apple and built-in displays, Gamma table control for software adjustment (recommended for OLED), shade control for AirPlay, Sidecar and Display Link devices.&lt;/li&gt; &#xA; &lt;li&gt;Supports smooth brightness transitions.&lt;/li&gt; &#xA; &lt;li&gt;Seamlessly combined hardware and software dimming extends dimming beyond the minimum brightness available on your display.&lt;/li&gt; &#xA; &lt;li&gt;Synchronize brightness from built-in and Apple screens - replicate Ambient light sensor and touch bar induced changes to a non-Apple external display!&lt;/li&gt; &#xA; &lt;li&gt;Sync up all your displays using a single slider or keyboard shortcuts.&lt;/li&gt; &#xA; &lt;li&gt;Allows dimming to full black (advanced feature).&lt;/li&gt; &#xA; &lt;li&gt;Support for custom keyboard shortcuts as well as standard brightness and media keys on Apple keyboards.&lt;/li&gt; &#xA; &lt;li&gt;Dozens of customization options to tweak the inner workings of the app to suit your hardware and needs (don&#39;t forget to enable &lt;code&gt;Show advanced settings&lt;/code&gt; in app Preferences).&lt;/li&gt; &#xA; &lt;li&gt;Modern, stylish and highly customizable menulet reflecting the design of Control Control introduced in Big Sur.&lt;/li&gt; &#xA; &lt;li&gt;Simple, unobstrusive UI to blend in to the general aesthetics of macOS (even the menu icon can be hidden).&lt;/li&gt; &#xA; &lt;li&gt;Supports automatic updates for a hassle-free experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;The best app of its kind, completely FREE (&lt;a href=&#34;https://opencollective.com/monitorcontrol&#34;&gt;donations welcome&lt;/a&gt;) with the source code transparently available!&lt;/b&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to install and use the app&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MonitorControl/MonitorControl/releases&#34;&gt;Download the app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy the MonitorControl app file from the .DMG to your Applications folder&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;code&gt;MonitorControl&lt;/code&gt; app file&lt;/li&gt; &#xA; &lt;li&gt;Add the app to &lt;code&gt;Accessibility&lt;/code&gt; under &lt;code&gt;System Preferences&lt;/code&gt; » &lt;code&gt;Security &amp;amp; Privacy&lt;/code&gt; » &lt;code&gt;Privacy&lt;/code&gt; as prompted (this is required only if you wish to use the native Apple keyboard brightness and media keys - if this is not the case, you can safely skip this step).&lt;/li&gt; &#xA; &lt;li&gt;Use your keyboard or the sliders in the app menu (a brightness symbol in the macOS menubar as shown on the screenshot above) to control your displays.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Preferences...&lt;/code&gt; for customization options (enable &lt;code&gt;Show advanced settings&lt;/code&gt; for even more options).&lt;/li&gt; &#xA; &lt;li&gt;You can set up custom keyboard shortcuts under the &lt;code&gt;Keyboard&lt;/code&gt; in Preferences (the app uses Apple media keys by default).&lt;/li&gt; &#xA; &lt;li&gt;If you have any questions, go to &lt;a href=&#34;https://github.com/MonitorControl/MonitorControl/discussions&#34;&gt;Discussions&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Screenshots (Preferences)&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_1.png&#34; width=&#34;392&#34; alt=&#34;Screenshot&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_2.png&#34; width=&#34;392&#34; alt=&#34;Screenshot&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_3.png&#34; width=&#34;392&#34; alt=&#34;Screenshot&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/MonitorControl/MonitorControl/main/.github/pref_4.png&#34; width=&#34;392&#34; alt=&#34;Screenshot&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;macOS compatibility&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;MonitorControl version&lt;/th&gt; &#xA;   &lt;th&gt;macOS version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v4.0.0&lt;/td&gt; &#xA;   &lt;td&gt;Catalina 10.15*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v3.1.1&lt;/td&gt; &#xA;   &lt;td&gt;Mojave 10.14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v2.1.0&lt;/td&gt; &#xA;   &lt;td&gt;Sierra 10.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;* With some limitations - full functionality available on macOS 11 Big Sur or newer.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported displays&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most modern LCD displays from all major manufacturers supported implemented DDC/CI protocol via DisplayPort, HDMI, USB-C or VGA to allow for hardware backlight control.&lt;/li&gt; &#xA; &lt;li&gt;Apple (and LG-Apple) displays and built-in displays are supported using native protocol.&lt;/li&gt; &#xA; &lt;li&gt;LCD and LED Televisions usually do not implement DDC, these are supported using software alternatives to dim the image (some higher-end sets are able to translate this into hardware backlight dimming).&lt;/li&gt; &#xA; &lt;li&gt;OLED or mini/micro-LED displays and televisions are fully supported using gamma table manipulation (this is a no-compromise solution for this class of displays).&lt;/li&gt; &#xA; &lt;li&gt;DisplayLink, Airplay and Sidecar are supported using shade (dark overlay) control.&lt;/li&gt; &#xA; &lt;li&gt;The app is compatible with &lt;a href=&#34;https://github.com/waydabber/BetterDummy&#34;&gt;BetterDummy&lt;/a&gt; mirrored sets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notable exceptions for hardware control compatibility:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some displays (notably EIZO) use MCCS over USB or an entirely custom protocol for control. These displays are supported with software dimming only.&lt;/li&gt; &#xA; &lt;li&gt;The HDMI port of the 2018 Intel Mac mini and 2020 M1 Mac mini prohibit DDC communication. Software control is still available. We recommend connecting the display via the USB-C port (USB-C to HDMI dongles usually work).&lt;/li&gt; &#xA; &lt;li&gt;DisplayLink docks and dongles do not allow for DDC control on Macs, only software dimming is available for these connections.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note to f.lux users - please activate &lt;code&gt;Avoid gamma table manipulation&lt;/code&gt; under &lt;code&gt;Preferences&lt;/code&gt; » &lt;code&gt;Displays&lt;/code&gt;! This step is not needed if you use Night Shift.&lt;/p&gt; &#xA;&lt;h2&gt;How to help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can greatly help out &lt;a href=&#34;https://opencollective.com/monitorcontrol&#34;&gt;by financing the project with your donation or by being a Sponsor&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;https://github.com/MonitorControl/MonitorControl/issues&#34;&gt;issues&lt;/a&gt; if you have a question, an enhancement to suggest or a bug you&#39;ve found.&lt;/li&gt; &#xA; &lt;li&gt;If you want, you can fork the code yourself and submit a pull request to improve the app (Note: accepting a PR is solely in the collective hands of the maintainers).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Localizations&lt;/h2&gt; &#xA;&lt;p&gt;MonitorControl supports localization. We gladly welcome your contribution with a new language! See the &lt;a href=&#34;https://github.com/MonitorControl/MonitorControl/discussions/637&#34;&gt;opening post of the relevant discussion&lt;/a&gt; on how to add your translation!&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;h3&gt;Required&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;Swiftlint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;SwiftFormat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Flinesoft/BartyCrouch&#34;&gt;BartyCrouch&lt;/a&gt; (for updating localizations)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build steps&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the project via this Terminal command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/MonitorControl/MonitorControl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to clone one of the branches, add &lt;code&gt;--single-branch --branch [branchname]&lt;/code&gt; after the &lt;code&gt;clone&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re all set! Now open the &lt;code&gt;MonitorControl.xcodeproj&lt;/code&gt; with Xcode! The dependencies will automatically get downloaded once you open the project. If they don&#39;t: &lt;code&gt;File &amp;gt; Packages &amp;gt; Resolve Package Versions&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Third party dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MonitorControl/MediaKeyTap&#34;&gt;MediaKeyTap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/Preferences&#34;&gt;Preferences&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rnine/SimplyCoreAudio&#34;&gt;SimplyCoreAudio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/KeyboardShortcuts&#34;&gt;KeyboardShortcuts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sparkle-project/Sparkle&#34;&gt;Sparkle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/the0neyouseek&#34;&gt;@the0neyouseek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JoniVR&#34;&gt;@JoniVR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/waydabber&#34;&gt;@waydabber&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mathew-kurian/&#34;&gt;@mathew-kurian&lt;/a&gt; (original developer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tyilo/&#34;&gt;@Tyilo&lt;/a&gt; (fork)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bensge/&#34;&gt;@Bensge&lt;/a&gt; - (used some code from his project &lt;a href=&#34;https://github.com/Bensge/NativeDisplayBrightness&#34;&gt;NativeDisplayBrightness&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhurden/&#34;&gt;@nhurden&lt;/a&gt; (for the original MediaKeyTap)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kfix/ddcctl&#34;&gt;@kfix&lt;/a&gt; (for ddcctl)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reitermarkus&#34;&gt;@reitermarkus&lt;/a&gt; (for Intel DDC support)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alin23&#34;&gt;@alin23&lt;/a&gt; (generally spearheaded M1 DDC support and figured out a many of the caveats)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.deviantart.com/javierocasio&#34;&gt;javierocasio&lt;/a&gt; (app icon background)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>shaps80/SwiftUIBackports</title>
    <updated>2022-07-01T01:55:54Z</updated>
    <id>tag:github.com,2022-07-01:/shaps80/SwiftUIBackports</id>
    <link href="https://github.com/shaps80/SwiftUIBackports" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of SwiftUI backports for iOS, macOS, tvOS and watchOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/watchOS-DE1F51&#34; alt=&#34;watchOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/macOS-EE751F&#34; alt=&#34;macOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/tvOS-00B9BB&#34; alt=&#34;tvOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/iOS-0C62C7&#34; alt=&#34;ios&#34;&gt; &lt;a href=&#34;https://swiftpackageindex.com/shaps80/SwiftUIBackports&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fshaps80%2FSwiftUIBackports%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;swift&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SwiftUI Backports&lt;/h1&gt; &#xA;&lt;p&gt;Introducing a collection of SwiftUI backports to make your iOS development easier.&lt;/p&gt; &#xA;&lt;p&gt;Many backports support iOS 13+ but where UIKIt features were introduced in later versions, the same will be applicable to these backports, to keep parity with UIKit.&lt;/p&gt; &#xA;&lt;p&gt;In some cases, I&#39;ve also included additional APIs that bring more features to your SwiftUI development.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note, &lt;strong&gt;all&lt;/strong&gt; backports will be API-matching to Apple&#39;s offical APIs, any additional features will be provided separately.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;All backports are fully documented, in most cases using Apple&#39;s own documentation for consistency. Please refer to the header docs or Apple&#39;s original documentation for more details.&lt;/p&gt; &#xA;&lt;p&gt;There is also a &lt;a href=&#34;https://github.com/shaps80/SwiftUIBackportsDemo&#34;&gt;Demo project&lt;/a&gt; available where you can see full demonstrations of all backports and additional features, including reference code to help you get started.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Lastly, I hope this repo also serves as a great resource for &lt;em&gt;how&lt;/em&gt; you can backport effectively with minimal hacks 👍&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;Building useful libraries like these, takes time away from my family. I build these tools in my spare time because I feel its important to give back to the community. Please consider &lt;a href=&#34;https://github.com/sponsors/shaps80&#34;&gt;Sponsoring&lt;/a&gt; me as it helps keep me working on useful libraries like these 😬&lt;/p&gt; &#xA;&lt;p&gt;You can also give me a follow and a &#39;thanks&#39; anytime.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://twitter.com/shaps&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-@shaps-4AC71B&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The library adopts a backport design by &lt;a href=&#34;https://davedelong.com/blog/2021/10/09/simplifying-backwards-compatibility-in-swift/&#34;&gt;Dave DeLong&lt;/a&gt; that makes use of a single type to improve discoverability and maintainability when the time comes to remove your backport implementations, in favour of official APIs.&lt;/p&gt; &#xA;&lt;p&gt;Backports of pure types, can easily be discovered under the &lt;code&gt;Backport&lt;/code&gt; namespace. Similarly, modifiers are discoverable under the &lt;code&gt;.backport&lt;/code&gt; namespace.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Unfortuantely &lt;code&gt;Environment&lt;/code&gt; backports cannot be access this way, in those cases the Apple API values will be prefixed with &lt;code&gt;backport&lt;/code&gt; to simplify discovery.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Backport.AppStorage(&#34;filter-enabled&#34;)&#xA;private var filterEnabled: Bool = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Button(&#34;Show Prompt&#34;) {&#xA;    showPrompt = true&#xA;}&#xA;.sheet(isPresented: $showPrompt) {&#xA;    Prompt()&#xA;        .backport.presentationDetents([.medium, .large])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Environment(\.backportRefresh) private var refreshAction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Backports&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SwiftUI&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AsyncImage&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AppStorage&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;background&lt;/code&gt; – ViewBuilder API – &lt;code&gt;Label&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NavigationDestination&lt;/code&gt; – uses a standard NavigationView&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;navigationTitle&lt;/code&gt; – newer API&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;overlay&lt;/code&gt; – ViewBuilder API&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onChange&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ProgressView&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;presentationDetents&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;presentationDragIndicator&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Refreshable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScaledMetric&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StateObject&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Section(_ header:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;task&lt;/code&gt; – async/await modifier&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;UIKit&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;UIHostingConfiguration&lt;/code&gt; – simplifies embedding SwiftUI in &lt;code&gt;UICollectionViewCell&lt;/code&gt;&#39;s&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modal Presentations&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Adding this to your presented view, you can use the provided closure to present an &lt;code&gt;ActionSheet&lt;/code&gt; to a user when they attempt to dismiss interactively. You can also use this to disable interactive dismissals entirely.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;presentation(isModal: true) { /* attempt */ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;FittingGeometryReader&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A custom &lt;code&gt;GeometryReader&lt;/code&gt; implementation that correctly auto-sizes itself to its content. This is useful in many cases where you need a &lt;code&gt;GeometryReader&lt;/code&gt; but don&#39;t want it to implicitly take up its parent View&#39;s bounds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FittingScrollView&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A custom &lt;code&gt;ScrollView&lt;/code&gt; that respects &lt;code&gt;Spacer&lt;/code&gt;&#39;s when the content is not scrollable. This is useful when you need to place a view at the edges of your scrollview while its content is small enough to not require scrolling. Another great use case is vertically centered content that becomes &lt;code&gt;top&lt;/code&gt; aligned once the content requires scrolling.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PageView&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A pure SwiftUI implementation of a page-based view, using the native &lt;code&gt;TabView&lt;/code&gt; and my custom &lt;code&gt;FittingGeometryReader&lt;/code&gt; to size itself correctly. Since this uses a &lt;code&gt;TabView&lt;/code&gt; under-the-hood, this allows you to use the same APIs and features from that view.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install manually (by copying the files in the &lt;code&gt;Sources&lt;/code&gt; directory) or using Swift Package Manager (&lt;strong&gt;preferred&lt;/strong&gt;)&lt;/p&gt; &#xA;&lt;p&gt;To install using Swift Package Manager, add this to the &lt;code&gt;dependencies&lt;/code&gt; section of your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.package(url: &#34;https://github.com/shaps80/SwiftUIBackports.git&#34;, .upToNextMinor(from: &#34;1.0.0&#34;))&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kishikawakatsumi/KeychainAccess</title>
    <updated>2022-07-01T01:55:54Z</updated>
    <id>tag:github.com,2022-07-01:/kishikawakatsumi/KeychainAccess</id>
    <link href="https://github.com/kishikawakatsumi/KeychainAccess" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Swift wrapper for Keychain that works on iOS, watchOS, tvOS and macOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KeychainAccess&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/kishikawakatsumi/KeychainAccess&#34;&gt;&lt;img src=&#34;https://travis-ci.com/kishikawakatsumi/KeychainAccess.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&#34; alt=&#34;SPM supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/KeychainAccess&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/KeychainAccess.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/KeychainAccess&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/KeychainAccess.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;KeychainAccess is a simple Swift wrapper for Keychain that works on iOS and OS X. Makes using Keychain APIs extremely easy and much more palatable to use in Swift.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/Screenshots/01.png&#34; width=&#34;320px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/Screenshots/02.png&#34; width=&#34;320px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/Screenshots/03.png&#34; width=&#34;320px&#34;&gt; &#xA;&lt;h2&gt;&lt;span&gt;💡&lt;/span&gt; Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple interface&lt;/li&gt; &#xA; &lt;li&gt;Support access group&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#accessibility&#34;&gt;Support accessibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#icloud_sharing&#34;&gt;Support iCloud sharing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#touch_id_integration&#34;&gt;Support TouchID and Keychain integration (iOS 8+)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#shared_web_credentials&#34;&gt;Support Shared Web Credentials (iOS 8+)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;Works on both iOS &amp;amp; macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;watchOS and tvOS are supported&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;Mac Catalyst is supported&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;Swift 3, 4 and 5 compatible&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;📖&lt;/span&gt; Usage&lt;/h2&gt; &#xA;&lt;h5&gt;&lt;span&gt;👀&lt;/span&gt; See also:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kishikawakatsumi/KeychainAccess/tree/master/Examples/Example-iOS&#34;&gt;&lt;span&gt;🔗&lt;/span&gt; iOS Example Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Basics&lt;/h3&gt; &#xA;&lt;h4&gt;Saving Application Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Saving Internet Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Instantiation&lt;/h3&gt; &#xA;&lt;h4&gt;Create Keychain for Application Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;, accessGroup: &#34;12ABCD3E4F.shared&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create Keychain for Internet Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https, authenticationType: .htmlForm)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Adding an item&lt;/h3&gt; &#xA;&lt;h4&gt;subscripting&lt;/h4&gt; &#xA;&lt;h5&gt;for String&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[string: &#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;for NSData&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[data: &#34;secret&#34;] = NSData(contentsOfFile: &#34;secret.bin&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;set method&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain.set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;error handling&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try keychain.set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;}&#xA;catch let error {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Obtaining an item&lt;/h3&gt; &#xA;&lt;h4&gt;subscripting&lt;/h4&gt; &#xA;&lt;h5&gt;for String (If the value is NSData, attempt to convert to String)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = keychain[&#34;kishikawakatsumi&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = keychain[string: &#34;kishikawakatsumi&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;for NSData&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let secretData = keychain[data: &#34;secret&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;get methods&lt;/h4&gt; &#xA;&lt;h5&gt;as String&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = try? keychain.get(&#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = try? keychain.getString(&#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;as NSData&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let data = try? keychain.getData(&#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Removing an item&lt;/h3&gt; &#xA;&lt;h4&gt;subscripting&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[&#34;kishikawakatsumi&#34;] = nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;remove method&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try keychain.remove(&#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Set Label and Comment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;do {&#xA;    try keychain&#xA;        .label(&#34;github.com (kishikawakatsumi)&#34;)&#xA;        .comment(&#34;github access token&#34;)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Obtaining Other Attributes&lt;/h3&gt; &#xA;&lt;h4&gt;PersistentRef&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;let persistentRef = keychain[attributes: &#34;kishikawakatsumi&#34;]?.persistentRef&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Creation Date&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;let creationDate = keychain[attributes: &#34;kishikawakatsumi&#34;]?.creationDate&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;All Attributes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;do {&#xA;    let attributes = try keychain.get(&#34;kishikawakatsumi&#34;) { $0 }&#xA;    print(attributes?.comment)&#xA;    print(attributes?.label)&#xA;    print(attributes?.creator)&#xA;    ...&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;subscripting&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;if let attributes = keychain[attributes: &#34;kishikawakatsumi&#34;] {&#xA;    print(attributes.comment)&#xA;    print(attributes.label)&#xA;    print(attributes.creator)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Configuration (Accessibility, Sharing, iCloud Sync)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Provides fluent interfaces&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .label(&#34;github.com (kishikawakatsumi)&#34;)&#xA;    .synchronizable(true)&#xA;    .accessibility(.afterFirstUnlock)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;accessibility&#34;&gt; Accessibility&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;a name=&#34;accessibility&#34;&gt; &lt;h5&gt;Default accessibility matches background application (=kSecAttrAccessibleAfterFirstUnlock)&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h5&gt;For background application&lt;/h5&gt; &lt;h6&gt;Creating instance&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .accessibility(.afterFirstUnlock)&#xA;&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;One-shot&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain&#xA;        .accessibility(.afterFirstUnlock)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h5&gt;For foreground application&lt;/h5&gt; &lt;h6&gt;Creating instance&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .accessibility(.whenUnlocked)&#xA;&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;One-shot&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain&#xA;        .accessibility(.whenUnlocked)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;👫&lt;/span&gt; Sharing Keychain items&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;, accessGroup: &#34;12ABCD3E4F.shared&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h4&gt;&lt;a name=&#34;accessibility&#34;&gt;&lt;/a&gt;&lt;a name=&#34;icloud_sharing&#34;&gt; &lt;span&gt;🔄&lt;/span&gt; Synchronizing Keychain items with iCloud&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;a name=&#34;icloud_sharing&#34;&gt; &lt;h6&gt;Creating instance&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .synchronizable(true)&#xA;&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;One-shot&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain&#xA;        .synchronizable(true)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a name=&#34;icloud_sharing&#34;&gt;&lt;/a&gt;&lt;a name=&#34;touch_id_integration&#34;&gt; &lt;span&gt;🌀&lt;/span&gt; Touch ID (Face ID) integration&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a name=&#34;touch_id_integration&#34;&gt; &lt;p&gt;&lt;strong&gt;Any Operation that require authentication must be run in the background thread.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;If you run in the main thread, UI thread will lock for the system to try to display the authentication dialog.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;To use Face ID, add &lt;code&gt;NSFaceIDUsageDescription&lt;/code&gt; key to your &lt;code&gt;Info.plist&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Adding a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;If you want to store the Touch ID protected Keychain item, specify &lt;code&gt;accessibility&lt;/code&gt; and &lt;code&gt;authenticationPolicy&lt;/code&gt; attributes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;DispatchQueue.global().async {&#xA;    do {&#xA;        // Should be the secret invalidated when passcode is removed? If not then use `.WhenUnlocked`&#xA;        try keychain&#xA;            .accessibility(.whenPasscodeSetThisDeviceOnly, authenticationPolicy: [.biometryAny])&#xA;            .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;    } catch let error {&#xA;        // Error handling if needed...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Updating a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;The same way as when adding.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Do not run in the main thread if there is a possibility that the item you are trying to add already exists, and protected.&lt;/strong&gt; &lt;strong&gt;Because updating protected items requires authentication.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Additionally, you want to show custom authentication prompt message when updating, specify an &lt;code&gt;authenticationPrompt&lt;/code&gt; attribute. If the item not protected, the &lt;code&gt;authenticationPrompt&lt;/code&gt; parameter just be ignored.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;DispatchQueue.global().async {&#xA;    do {&#xA;        // Should be the secret invalidated when passcode is removed? If not then use `.WhenUnlocked`&#xA;        try keychain&#xA;            .accessibility(.whenPasscodeSetThisDeviceOnly, authenticationPolicy: [.biometryAny])&#xA;            .authenticationPrompt(&#34;Authenticate to update your access token&#34;)&#xA;            .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;    } catch let error {&#xA;        // Error handling if needed...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Obtaining a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;The same way as when you get a normal item. It will be displayed automatically Touch ID or passcode authentication If the item you try to get is protected.&lt;br&gt; If you want to show custom authentication prompt message, specify an &lt;code&gt;authenticationPrompt&lt;/code&gt; attribute. If the item not protected, the &lt;code&gt;authenticationPrompt&lt;/code&gt; parameter just be ignored.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;DispatchQueue.global().async {&#xA;    do {&#xA;        let password = try keychain&#xA;            .authenticationPrompt(&#34;Authenticate to login to server&#34;)&#xA;            .get(&#34;kishikawakatsumi&#34;)&#xA;&#xA;        print(&#34;password: \(password)&#34;)&#xA;    } catch let error {&#xA;        // Error handling if needed...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Removing a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;The same way as when you remove a normal item. There is no way to show Touch ID or passcode authentication when removing Keychain items.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain.remove(&#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    // Error handling if needed...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a name=&#34;touch_id_integration&#34;&gt;&lt;/a&gt;&lt;a name=&#34;shared_web_credentials&#34;&gt; &lt;span&gt;🔑&lt;/span&gt; Shared Web Credentials&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a name=&#34;shared_web_credentials&#34;&gt; &lt;/a&gt;&#xA;&lt;blockquote&gt;&#xA; &lt;a name=&#34;shared_web_credentials&#34;&gt; &lt;p&gt;Shared web credentials is a programming interface that enables native iOS apps to share credentials with their website counterparts. For example, a user may log in to a website in Safari, entering a user name and password, and save those credentials using the iCloud Keychain. Later, the user may run a native app from the same developer, and instead of the app requiring the user to reenter a user name and password, shared web credentials gives it access to the credentials that were entered earlier in Safari. The user can also create new accounts, update passwords, or delete her account from within the app. These changes are then saved and used by Safari.&lt;br&gt; &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&#34;&gt;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&lt;/a&gt;&lt;/p&gt;&lt;/a&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://www.kishikawakatsumi.com&#34;, protocolType: .HTTPS)&#xA;&#xA;let username = &#34;kishikawakatsumi@mac.com&#34;&#xA;&#xA;// First, check the credential in the app&#39;s Keychain&#xA;if let password = try? keychain.get(username) {&#xA;    // If found password in the Keychain,&#xA;    // then log into the server&#xA;} else {&#xA;    // If not found password in the Keychain,&#xA;    // try to read from Shared Web Credentials&#xA;    keychain.getSharedPassword(username) { (password, error) -&amp;gt; () in&#xA;        if password != nil {&#xA;            // If found password in the Shared Web Credentials,&#xA;            // then log into the server&#xA;            // and save the password to the Keychain&#xA;&#xA;            keychain[username] = password&#xA;        } else {&#xA;            // If not found password either in the Keychain also Shared Web Credentials,&#xA;            // prompt for username and password&#xA;&#xA;            // Log into server&#xA;&#xA;            // If the login is successful,&#xA;            // save the credentials to both the Keychain and the Shared Web Credentials.&#xA;&#xA;            keychain[username] = inputPassword&#xA;            keychain.setSharedPassword(inputPassword, account: username)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Request all associated domain&#39;s credentials&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Keychain.requestSharedWebCredential { (credentials, error) -&amp;gt; () in&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generate strong random password&lt;/h4&gt; &#xA;&lt;p&gt;Generate strong random password that is in the same format used by Safari autofill (xxx-xxx-xxx-xxx).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password = Keychain.generatePassword() // =&amp;gt; Nhu-GKm-s3n-pMx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to set up Shared Web Credentials&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add a com.apple.developer.associated-domains entitlement to your app. This entitlement must include all the domains with which you want to share credentials.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add an apple-app-site-association file to your website. This file must include application identifiers for all the apps with which the site wants to share credentials, and it must be properly signed.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;When the app is installed, the system downloads and verifies the site association file for each of its associated domains. If the verification is successful, the app is associated with the domain.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;More details:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&#34;&gt;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔍&lt;/span&gt; Debugging&lt;/h3&gt; &#xA;&lt;h4&gt;Display all stored items if print keychain object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;print(&#34;\(keychain)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt;&#xA;[&#xA;  [authenticationType: default, key: kishikawakatsumi, server: github.com, class: internetPassword, protocol: https]&#xA;  [authenticationType: default, key: hirohamada, server: github.com, class: internetPassword, protocol: https]&#xA;  [authenticationType: default, key: honeylemon, server: github.com, class: internetPassword, protocol: https]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Obtaining all stored keys&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;&#xA;let keys = keychain.allKeys()&#xA;for key in keys {&#xA;  print(&#34;key: \(key)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt;&#xA;key: kishikawakatsumi&#xA;key: hirohamada&#xA;key: honeylemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Obtaining all stored items&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;&#xA;let items = keychain.allItems()&#xA;for item in items {&#xA;  print(&#34;item: \(item)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt;&#xA;item: [authenticationType: Default, key: kishikawakatsumi, server: github.com, class: InternetPassword, protocol: https]&#xA;item: [authenticationType: Default, key: hirohamada, server: github.com, class: InternetPassword, protocol: https]&#xA;item: [authenticationType: Default, key: honeylemon, server: github.com, class: InternetPassword, protocol: https]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keychain sharing capability&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter the error below, you need to add an &lt;code&gt;Keychain.entitlements&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OSStatus error:[-34018] Internal error when a required entitlement isn&#39;t present, client has neither application-identifier nor keychain-access-groups entitlements.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Screen Shot 2019-10-27 at 8 08 50&#34; src=&#34;https://user-images.githubusercontent.com/40610/67627108-1a7f2f80-f891-11e9-97bc-7f7313cb63d1.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/40610/67627072-333b1580-f890-11e9-9feb-bf507abc2724.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v1.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+&lt;/td&gt; &#xA;   &lt;td&gt;1.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v1.2.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+&lt;/td&gt; &#xA;   &lt;td&gt;1.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.0.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+, watchOS 2+&lt;/td&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+, watchOS 2+&lt;/td&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.2.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;2.0, 2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.3.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;2.0, 2.1, 2.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.4.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;2.2, 2.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v3.0.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;3.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v3.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v3.2.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2, 5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v4.0.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2, 5.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v4.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 3+, tvOS 9+, Mac Catalyst 13+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2, 5.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;KeychainAccess is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following lines to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;pod &#39;KeychainAccess&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;KeychainAccess is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. To install it, simply add the following line to your Cartfile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;github &#34;kishikawakatsumi/KeychainAccess&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;KeychainAccess is also available through &lt;a href=&#34;https://github.com/apple/swift-package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Xcode&lt;/h4&gt; &#xA;&lt;p&gt;Select &lt;code&gt;File &amp;gt; Add Packages... &amp;gt; Add Package Dependency...&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/40610/67627000-2833b580-f88f-11e9-89ef-18819b1a6c67.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;h4&gt;CLI&lt;/h4&gt; &#xA;&lt;p&gt;First, create &lt;code&gt;Package.swift&lt;/code&gt; that its package declaration includes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.0&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyLibrary&#34;,&#xA;    products: [&#xA;        .library(name: &#34;MyLibrary&#34;, targets: [&#34;MyLibrary&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/kishikawakatsumi/KeychainAccess.git&#34;, from: &#34;3.0.0&#34;),&#xA;    ],&#xA;    targets: [&#xA;        .target(name: &#34;MyLibrary&#34;, dependencies: [&#34;KeychainAccess&#34;]),&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To manually add to your project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;Lib/KeychainAccess.xcodeproj&lt;/code&gt; to your project&lt;/li&gt; &#xA; &lt;li&gt;Link &lt;code&gt;KeychainAccess.framework&lt;/code&gt; with your target&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;Copy Files Build Phase&lt;/code&gt; to include the framework to your application bundle&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://github.com/kishikawakatsumi/KeychainAccess/tree/master/Examples/Example-iOS&#34;&gt;iOS Example Project&lt;/a&gt; as reference.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/Screenshots/Installation.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;kishikawa katsumi, &lt;a href=&#34;mailto:kishikawakatsumi@mac.com&#34;&gt;kishikawakatsumi@mac.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KeychainAccess is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>