<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-31T01:49:45Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dmrschmidt/DSWaveformImage</title>
    <updated>2023-01-31T01:49:45Z</updated>
    <id>tag:github.com,2023-01-31:/dmrschmidt/DSWaveformImage</id>
    <link href="https://github.com/dmrschmidt/DSWaveformImage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate waveform images from audio files on iOS &amp; macOS in Swift. Native SwiftUI &amp; UIKit views.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DSWaveformImage - iOS &amp;amp; macOS realtime audio waveform rendering&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/spm-compatible-brightgreen.svg?style=flat&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DSWaveformImage offers a native interfaces for drawing the envelope waveform of audio data in &lt;strong&gt;iOS&lt;/strong&gt;, &lt;strong&gt;iPadOS&lt;/strong&gt;, &lt;strong&gt;macOS&lt;/strong&gt; or via Catalyst. To do so, you can use&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Sources/DSWaveformImageViews/UIKit/WaveformImageView.swift&#34;&gt;&lt;code&gt;WaveformImageView&lt;/code&gt;&lt;/a&gt; (UIKit) / &lt;a href=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Sources/DSWaveformImageViews/SwiftUI/WaveformView.swift&#34;&gt;&lt;code&gt;WaveformView&lt;/code&gt;&lt;/a&gt; (SwiftUI) to render a static waveform from an audio file or&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Sources/DSWaveformImageViews/UIKit/WaveformLiveView.swift&#34;&gt;&lt;code&gt;WaveformLiveView&lt;/code&gt;&lt;/a&gt; (UIKit) / &lt;a href=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Sources/DSWaveformImageViews/SwiftUI/WaveformLiveCanvas.swift&#34;&gt;&lt;code&gt;WaveformLiveCanvas&lt;/code&gt;&lt;/a&gt; (SwiftUI) to realtime render a waveform of live audio data (e.g. from &lt;code&gt;AVAudioRecorder&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WaveformImageDrawer&lt;/code&gt; to generate a waveform &lt;code&gt;UIImage&lt;/code&gt; from an audio file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, you can get a waveform&#39;s (normalized) &lt;code&gt;[Float]&lt;/code&gt; samples directly as well by creating an instance of &lt;code&gt;WaveformAnalyzer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example UI (included in repository)&lt;/h2&gt; &#xA;&lt;p&gt;For a practical real-world example usage of a SwiftUI live audio recording waveform rendering, see &lt;a href=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Example/DSWaveformImageExample-iOS/SwiftUIExample/SwiftUIExampleView.swift&#34;&gt;RecordingIndicatorView&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Promotion/recorder-example.png&#34; alt=&#34;Audio Recorder Example&#34; width=&#34;358&#34;&gt; &#xA;&lt;h2&gt;More related iOS Controls&lt;/h2&gt; &#xA;&lt;p&gt;You may also find the following iOS controls written in Swift interesting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dmrschmidt/SwiftColorWheel&#34;&gt;SwiftColorWheel&lt;/a&gt; - a delightful color picker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dmrschmidt/QRCode&#34;&gt;QRCode&lt;/a&gt; - a customizable QR code generator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;If you really like this library (aka Sponsoring)&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m doing all this for fun and joy and because I strongly believe in the power of open source. On the off-chance though, that using my library has brought joy to you and you just feel like saying &#34;thank you&#34;, I would smile like a 4-year old getting a huge ice cream cone, if you&#39;d support my via one of the sponsoring buttons ‚ò∫Ô∏èüíï&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re feeling in the mood of sending someone else a lovely gesture of appreciation, maybe check out my iOS app &lt;a href=&#34;https://www.soundcard.io&#34;&gt;üíå SoundCard&lt;/a&gt; to send them a real postcard with a personal audio message.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/dmrschmidt&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use SPM: add &lt;code&gt;https://github.com/dmrschmidt/DSWaveformImage&lt;/code&gt; and set &#34;Up to Next Major&#34; with &#34;12.0.0&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import DSWaveformImage // for core classes to generate `UIImage` / `NSImage` directly&#xA;import DSWaveformImageViews // if you want to use the native UIKit / SwiftUI views&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deprecated or discouraged&lt;/strong&gt; but still possible alternative ways for older apps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;since it has no other dependencies you may simply copy the &lt;code&gt;Sources&lt;/code&gt; folder directly into your project&lt;/li&gt; &#xA; &lt;li&gt;use carthage: &lt;code&gt;github &#34;dmrschmidt/DSWaveformImage&#34; ~&amp;gt; 7.0&lt;/code&gt; (last supported version is 10)&lt;/li&gt; &#xA; &lt;li&gt;or, sunset since 6.1.1: &lt;del&gt;use cocoapods: &lt;code&gt;pod &#39;DSWaveformImage&#39;, &#39;~&amp;gt; 6.1&#39;&lt;/code&gt;&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;DSWaveformImage&lt;/code&gt; provides 3 kinds of tools to use&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;native SwiftUI views - &lt;a href=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Example/DSWaveformImageExample-iOS/SwiftUIExample/SwiftUIExampleView.swift&#34;&gt;SwiftUI example usage code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;native UIKit views - &lt;a href=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Example/DSWaveformImageExample-iOS/ViewController.swift&#34;&gt;UIKit example usage code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;access to the raw renderes and processors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The core renderes and processors as well as SwiftUI views natively support iOS &amp;amp; macOS, using &lt;code&gt;UIImage&lt;/code&gt; &amp;amp; &lt;code&gt;NSImage&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftUI&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;WaveformView&lt;/code&gt; - renders a one-off waveform from an audio file:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@State var audioURL = Bundle.main.url(forResource: &#34;example_sound&#34;, withExtension: &#34;m4a&#34;)!&#xA;WaveformView(audioURL: audioURL)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;WaveformLiveCanvas&lt;/code&gt; - renders a live waveform from &lt;code&gt;(0...1)&lt;/code&gt; normalized samples:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@StateObject private var audioRecorder: AudioRecorder = AudioRecorder() // just an example&#xA;WaveformLiveCanvas(samples: audioRecorder.samples)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UIKit&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;WaveformImageView&lt;/code&gt; - renders a one-off waveform from an audio file:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let audioURL = Bundle.main.url(forResource: &#34;example_sound&#34;, withExtension: &#34;m4a&#34;)!&#xA;waveformImageView = WaveformImageView(frame: CGRect(x: 0, y: 0, width: 500, height: 300)&#xA;waveformImageView.waveformAudioURL = audioURL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;WaveformLiveView&lt;/code&gt; - renders a live waveform from &lt;code&gt;(0...1)&lt;/code&gt; normalized samples:&lt;/h4&gt; &#xA;&lt;p&gt;Find a full example in the &lt;a href=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Example/DSWaveformImageExample-iOS/RecordingViewController.swift&#34;&gt;sample project&#39;s RecordingViewController&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let waveformView = WaveformLiveView()&#xA;&#xA;// configure and start AVAudioRecorder&#xA;let recorder = AVAudioRecorder()&#xA;recorder.isMeteringEnabled = true // required to get current power levels&#xA;&#xA;// after all the other recording (omitted for focus) setup, periodically (every 20ms or so):&#xA;recorder.updateMeters() // gets the current value&#xA;let currentAmplitude = 1 - pow(10, recorder.averagePower(forChannel: 0) / 20)&#xA;waveformView.add(sample: currentAmplitude)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Raw API&lt;/h3&gt; &#xA;&lt;h4&gt;Configuration&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Calculations are always performed and returned on a background thread, so make sure to return to the main thread before doing any UI work.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;code&gt;Waveform.Configuration&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Sources/DSWaveformImage/WaveformImageTypes.swift&#34;&gt;WaveformImageTypes&lt;/a&gt; for various configuration options.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;WaveformImageDrawer&lt;/code&gt; - creates a &lt;code&gt;UIImage&lt;/code&gt; waveform from an audio file:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let waveformImageDrawer = WaveformImageDrawer()&#xA;let audioURL = Bundle.main.url(forResource: &#34;example_sound&#34;, withExtension: &#34;m4a&#34;)!&#xA;waveformImageDrawer.waveformImage(fromAudioAt: audioURL, with: .init(&#xA;                                  size: topWaveformView.bounds.size,&#xA;                                  style: .filled(UIColor.black)),&#xA;                                  renderer: LinearWaveformRenderer()) { image in&#xA;    // need to jump back to main queue&#xA;    DispatchQueue.main.async {&#xA;        self.topWaveformView.image = image&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;WaveformAnalyzer&lt;/code&gt; - calculates an audio file&#39;s waveform sample:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let audioURL = Bundle.main.url(forResource: &#34;example_sound&#34;, withExtension: &#34;m4a&#34;)!&#xA;waveformAnalyzer = WaveformAnalyzer(audioAssetURL: audioURL)&#xA;waveformAnalyzer.samples(count: 200) { samples in&#xA;    print(&#34;so many samples: \(samples)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; Support&lt;/h3&gt; &#xA;&lt;p&gt;The public API has been updated in 9.1 to support &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;. See the example app for an illustration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public class WaveformAnalyzer {&#xA;    func samples(count: Int, qos: DispatchQoS.QoSClass = .userInitiated) async throws -&amp;gt; [Float]&#xA;}&#xA;&#xA;public class WaveformImageDrawer {&#xA;    public func waveformImage(&#xA;        fromAudioAt audioAssetURL: URL,&#xA;        with configuration: Waveform.Configuration,&#xA;        qos: DispatchQoS.QoSClass = .userInitiated&#xA;    ) async throws -&amp;gt; UIImage&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Playback Progress Indication&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re playing back audio files and would like to indicate the playback progress to your users, you can &lt;a href=&#34;https://github.com/dmrschmidt/DSWaveformImage/issues/21&#34;&gt;find inspiration in this ticket&lt;/a&gt;. There&#39;s various other ways of course, depending on your use case and design. One way to achieve this in SwiftUI could be&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// @State var progress: CGFloat = 0 // must be between 0 and 1&#xA;&#xA;ZStack(alignment: .leading) {&#xA;    WaveformView(audioURL: audioURL, configuration: configuration)&#xA;    WaveformView(audioURL: audioURL, configuration: configuration.with(style: .filled(.red)))&#xA;        .mask(alignment: .leading) {&#xA;            GeometryReader { geometry in&#xA;                Rectangle().frame(width: geometry.size.width * progress)&#xA;            }&#xA;        }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will result in something like the image below.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Promotion/progress-example.png&#34; height=&#34;200&#34; alt=&#34;playback progress waveform&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Keep in mind though, that this approach will calculate and render the waveform twice initially. This will be more than fine for 95% of typical use cases. If you do have very strict performance requirements however, you may want to use &lt;code&gt;WaveformImageDrawer&lt;/code&gt; directly instead of the build-in views. There is currently no plan to integrate this as a 1st class citizen as every app will have different requirements, and &lt;code&gt;WaveformImageDrawer&lt;/code&gt; as well as &lt;code&gt;WaveformAnalyzer&lt;/code&gt; are as simple to use as the views themselves.&lt;/p&gt; &#xA;&lt;h3&gt;Loading remote audio files from URL&lt;/h3&gt; &#xA;&lt;p&gt;For one example way to display waveforms for audio files on remote URLs see &lt;a href=&#34;https://github.com/dmrschmidt/DSWaveformImage/issues/22&#34;&gt;https://github.com/dmrschmidt/DSWaveformImage/issues/22&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What it looks like&lt;/h2&gt; &#xA;&lt;p&gt;Waveforms can be rendered in 2 different ways and 5 different styles each.&lt;/p&gt; &#xA;&lt;p&gt;By default &lt;a href=&#34;https://github.com/dmrschmidt/DSWaveformImage/raw/main/Sources/DSWaveformImage/Renderers/LinearWaveformRenderer.swift&#34;&gt;&lt;code&gt;LinearWaveformRenderer&lt;/code&gt;&lt;/a&gt; is used, which draws a linear 2D amplitude envelope.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dmrschmidt/DSWaveformImage/raw/main/Sources/DSWaveformImage/Renderers/CircularWaveformRenderer.swift&#34;&gt;&lt;code&gt;CircularWaveformRenderer&lt;/code&gt;&lt;/a&gt; is available as an alternative, which can be passed in to the &lt;code&gt;WaveformView&lt;/code&gt; or &lt;code&gt;WaveformLiveView&lt;/code&gt; respectively. It draws a circular 2D amplitude envelope.&lt;/p&gt; &#xA;&lt;p&gt;You can implement your own renderer by implementing &lt;a href=&#34;https://github.com/dmrschmidt/DSWaveformImage/raw/main/Sources/DSWaveformImage/Renderers/WaveformRenderer.swift&#34;&gt;&lt;code&gt;WaveformRenderer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following styles can be applied to either renderer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;filled&lt;/strong&gt;: Use solid color for the waveform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;outlined&lt;/strong&gt;: Draws the envelope as an outline with the provided thickness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gradient&lt;/strong&gt;: Use gradient based on color for the waveform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gradientOutlined&lt;/strong&gt;: Use gradient based on color for the waveform. Draws the envelope as an outline with the provided thickness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;striped&lt;/strong&gt;: Use striped filling based on color for the waveform.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Promotion/screenshot.png&#34; width=&#34;500&#34; alt=&#34;Screenshot&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Live waveform rendering&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/69365/127739821-061a4345-0adc-4cc1-bfd6-f7cfbe1268c9.mov&#34;&gt;https://user-images.githubusercontent.com/69365/127739821-061a4345-0adc-4cc1-bfd6-f7cfbe1268c9.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Migration&lt;/h2&gt; &#xA;&lt;p&gt;In 12.0.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The rendering pipeline was split out from the analysis. You can now create your own renderes by subclassing &lt;a href=&#34;https://github.com/dmrschmidt/DSWaveformImage/raw/main/Sources/DSWaveformImage/Renderers/WaveformRenderer.swift&#34;&gt;&lt;code&gt;WaveformRenderer&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A new &lt;a href=&#34;https://github.com/dmrschmidt/DSWaveformImage/raw/main/Sources/DSWaveformImage/Renderers/CircularWaveformRenderer.swift&#34;&gt;&lt;code&gt;CircularWaveformRenderer&lt;/code&gt;&lt;/a&gt; has been added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;position&lt;/code&gt; was removed from &lt;code&gt;Waveform.Configuration&lt;/code&gt;, see &lt;a href=&#34;https://github.com/dmrschmidt/DSWaveformImage/commit/044773782092becec0424527f6feef061988db7a&#34;&gt;0447737&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;new &lt;code&gt;Waveform.Style&lt;/code&gt; option have been added and need to be accounted for in &lt;code&gt;switch&lt;/code&gt; statements etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In 11.0.0 the library was split into two: &lt;code&gt;DSWaveformImage&lt;/code&gt; and &lt;code&gt;DSWaveformImageViews&lt;/code&gt;. If you&#39;ve used any of the native views bevore, just add the additional &lt;code&gt;import DSWaveformImageViews&lt;/code&gt;. The SwiftUI views have changed from taking a Binding to the respective plain values instead.&lt;/p&gt; &#xA;&lt;p&gt;In 9.0.0 a few public API&#39;s have been slightly changed to be more concise. All types have also been grouped under the &lt;code&gt;Waveform&lt;/code&gt; enum-namespace. Meaning &lt;code&gt;WaveformConfiguration&lt;/code&gt; for instance has become &lt;code&gt;Waveform.Configuration&lt;/code&gt; and so on.&lt;/p&gt; &#xA;&lt;p&gt;In 7.0.0 colors have moved into associated values on the respective &lt;code&gt;style&lt;/code&gt; enum.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Waveform&lt;/code&gt; and the &lt;code&gt;UIImage&lt;/code&gt; category have been removed in 6.0.0 to simplify the API. See &lt;code&gt;Usage&lt;/code&gt; for current usage.&lt;/p&gt; &#xA;&lt;h2&gt;See it live in action&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.soundcard.io&#34;&gt;SoundCard - postcards with sound&lt;/a&gt; lets you send real, physical postcards with audio messages. Right from your iOS device.&lt;/p&gt; &#xA;&lt;p&gt;DSWaveformImage is used to draw the waveforms of the audio messages that get printed on the postcards sent by &lt;a href=&#34;https://www.soundcard.io&#34;&gt;SoundCard - postcards with audio&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;http://bit.ly/soundcardio&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dmrschmidt/DSWaveformImage/main/Promotion/appstore.svg?sanitize=true&#34; alt=&#34;Download SoundCard&#34;&gt; &lt;/a&gt;&#xA; &lt;p&gt;&lt;a href=&#34;http://bit.ly/soundcardio&#34;&gt;Download SoundCard on the App Store. &lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;a href=&#34;http://bit.ly/soundcardio&#34;&gt; &lt;img src=&#34;https://www.soundcard.io/images/opengraph-preview.jpg&#34; alt=&#34;Screenshot&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>