<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-15T01:56:17Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>twostraws/HackingWithSwift</title>
    <updated>2022-06-15T01:56:17Z</updated>
    <id>tag:github.com,2022-06-15:/twostraws/HackingWithSwift</id>
    <link href="https://github.com/twostraws/HackingWithSwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The project source code for hackingwithswift.com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hacking with Swift&lt;/h1&gt; &#xA;&lt;p&gt;This is the source code to accompany Hacking with Swift, &lt;a href=&#34;https://www.hackingwithswift.com&#34;&gt;a free tutorial series that teaches Swift coding for iOS&lt;/a&gt;. There is one folder for the classic Hacking with Swift course, which teaches UIKit and SpriteKit, and another folder for the SwiftUI edition.&lt;/p&gt; &#xA;&lt;p&gt;All projects should be compatible with Xcode 11 and iOS 13. Where appropriate, separate project files have been provided so that you can follow the tutorial from scratch without having to dig around in the completed project folder.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions, you can find me on Twitter &lt;a href=&#34;https://www.twitter.com/twostraws&#34;&gt;@twostraws&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Recommended links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gumroad.com/l/hws-book-pack&#34;&gt;Buy the Hacking with Swift book and support my work&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Hacking with Swift book contains over 1300 pages of tutorials and example code, and makes a great addition to any developer&#39;s collection. Thank you to everyone who bought the book ‚Äì your purchase helps me create more great Swift content in the future!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gumroad.com/l/proswift&#34;&gt;Buy the Pro Swift book and video course&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pro Swift is the sequel to Hacking with Swift, and includes a 250-page guide to helping you write faster, more efficient Swift, accompanied by over 70 videos demonstrating each technique. If you want to dive into functional programming, learn more about MVVM, get to grips with @autoclosure and @escaping, or try your hand at protocol-oriented development, Pro Swift is for you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gumroad.com/l/swiftcc&#34;&gt;Buy Swift Coding Challenges&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Swift Coding Challenges is an all-new book written from the ground up to put your Swift skills to the test. I&#39;ve written a variety of coding challenges that start off simple but slowly get harder, and it&#39;s down to you to solve them. I outline each problem, provide you with sample input and output, add in some hints in case you hit problems, then provide a sample solution and explain how it works.&lt;/p&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/249/whats-new-in-swift-5-7&#34;&gt;What&#39;s new in Swift 5.7?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/247/whats-new-in-swift-5-6&#34;&gt;What&#39;s new in Swift 5.6?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/233/whats-new-in-swift-5-5&#34;&gt;What&#39;s new in Swift 5.5?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/228/whats-new-in-swift-5-4&#34;&gt;What&#39;s new in Swift 5.4?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/218/whats-new-in-swift-5-3&#34;&gt;What&#39;s new in Swift 5.3?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/212/whats-new-in-swift-5-2&#34;&gt;What&#39;s new in Swift 5.2?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/182/whats-new-in-swift-5-1&#34;&gt;What&#39;s new in Swift 5.1?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/126/whats-new-in-swift-5-0&#34;&gt;What&#39;s new in Swift 5.0?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/77/whats-new-in-swift-4-2&#34;&gt;What&#39;s new in Swift 4.2?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/50/whats-new-in-swift-4-1&#34;&gt;What&#39;s new in Swift 4.1?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/swift4&#34;&gt;What&#39;s new in Swift 4?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/swift3&#34;&gt;What&#39;s new in Swift 3?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/250/whats-new-in-swiftui-for-ios-16&#34;&gt;What‚Äôs new in SwiftUI for iOS 16&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/235/whats-new-in-swiftui-for-ios-15&#34;&gt;What‚Äôs new in SwiftUI for iOS 15&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/221/whats-new-in-swiftui-for-ios-14&#34;&gt;What‚Äôs new in SwiftUI for iOS 14&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/193/whats-new-in-ios-13&#34;&gt;What&#39;s new in iOS 13?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/121/whats-new-in-ios-12&#34;&gt;What&#39;s new in iOS 12?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/whats-new-in-ios-11&#34;&gt;What&#39;s new in iOS 11?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/ios10&#34;&gt;What&#39;s new in iOS 10?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/example-code&#34;&gt;Free Swift example code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mapbox/mapbox-maps-ios</title>
    <updated>2022-06-15T01:56:17Z</updated>
    <id>tag:github.com,2022-06-15:/mapbox/mapbox-maps-ios</id>
    <link href="https://github.com/mapbox/mapbox-maps-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interactive, thoroughly customizable maps for iOS powered by vector tiles and Metal&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mapbox-maps-ios&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cla-assistant.io/mapbox/mapbox-maps-ios&#34;&gt;&lt;img src=&#34;https://cla-assistant.io/readme/badge/mapbox/mapbox-maps-ios&#34; alt=&#34;CLA assistant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Mapbox Maps SDK for iOS is a public library for displaying interactive, thoroughly customizable maps in native iOS. It takes map styles that conform to the &lt;a href=&#34;https://docs.mapbox.com/mapbox-gl-js/style-spec/&#34;&gt;Mapbox Style Specification&lt;/a&gt;, applies them to vector tiles that conform to the &lt;a href=&#34;https://github.com/mapbox/vector-tile-spec&#34;&gt;Mapbox Vector Tile Specification&lt;/a&gt;, and renders them using Metal.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This README is intended for developers who are interested in contributing to the Mapbox Maps SDK for iOS. Please visit &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/&#34;&gt;https://docs.mapbox.com/ios/maps/guides/&lt;/a&gt; for general information and instructions on using the Maps SDK in your iOS application.&lt;/p&gt; &#xA;&lt;h2&gt;Examples App&lt;/h2&gt; &#xA;&lt;p&gt;The Examples app shows how to use many of the features in the Maps SDK. See the &lt;a href=&#34;https://github.com/mapbox/mapbox-maps-ios/tree/main/Apps/Examples/README.md&#34;&gt;Examples README&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in contributing to the Maps SDK, please see the &lt;a href=&#34;https://github.com/mapbox/mapbox-maps-ios/tree/main/DEVELOPING.md&#34;&gt;DEVELOPING.md&lt;/a&gt; file for information on setting up, running and building the SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting issues / Need help?&lt;/h2&gt; &#xA;&lt;h4&gt;Report a bug &lt;span&gt;ü™≤&lt;/span&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Please use our &lt;a href=&#34;https://github.com/mapbox/mapbox-maps-ios/issues/new?labels=bug%20%3Abeetle%3A&amp;amp;template=bug.md&#34;&gt;bug template&lt;/a&gt; to report any issues.&lt;/p&gt; &#xA;&lt;h4&gt;Request a new feature or enhancement &lt;span&gt;üçè&lt;/span&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Please use our &lt;a href=&#34;https://github.com/mapbox/mapbox-maps-ios/issues/new?labels=feature%20%3Agreen_apple%3A&amp;amp;template=feature.md&#34;&gt;feature template&lt;/a&gt; to request new features or enhancements.&lt;/p&gt; &#xA;&lt;h4&gt;Other questions&lt;/h4&gt; &#xA;&lt;p&gt;Can&#39;t find the answer you&#39;re looking for? &lt;a href=&#34;https://www.mapbox.com/contact&#34;&gt;Contact support&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Historical Note&lt;/h2&gt; &#xA;&lt;p&gt;This repository is a continuation of the Mapbox Maps SDK for iOS available at &lt;a href=&#34;https://github.com/mapbox/mapbox-gl-native-ios&#34;&gt;mapbox/mapbox-gl-native-ios&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hmlongco/Resolver</title>
    <updated>2022-06-15T01:56:17Z</updated>
    <id>tag:github.com,2022-06-15:/hmlongco/Resolver</id>
    <link href="https://github.com/hmlongco/Resolver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift Ultralight Dependency Injection / Service Locator framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Resolver &lt;img src=&#34;https://user-images.githubusercontent.com/709283/32858974-cce8282a-ca12-11e7-944b-c8046156290b.png&#34; alt=&#34;icon&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;An ultralight Dependency Injection / Service Locator framework for Swift 5.x on iOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: Later in 2022 Resolver will be deprecated and replaced by my new dependency injection system, &lt;a href=&#34;https://github.com/hmlongco/Factory&#34;&gt;Factory&lt;/a&gt;. Factory is compile-time safe and is smaller, lighter, and faster than Resolver. As good as Resolver is, Factory is better.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Dependency Injection frameworks support the &lt;a href=&#34;https://en.wikipedia.org/wiki/Inversion_of_control&#34;&gt;Inversion of Control&lt;/a&gt; design pattern. Technical definitions aside, dependency injection pretty much boils down to:&lt;/p&gt; &#xA;&lt;p&gt;| &lt;strong&gt;Giving an object the things it needs to do its job.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it. Dependency injection allows us to write code that&#39;s loosely coupled, and as such, easier to reuse, to mock, and to test.&lt;/p&gt; &#xA;&lt;p&gt;For more, see: &lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Introduction.md&#34;&gt;A Gentle Introduction to Dependency Injection.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependency Injection Strategies&lt;/h2&gt; &#xA;&lt;p&gt;There are six classic dependency injection strategies:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Injection.md#interface&#34;&gt;Interface Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Injection.md#property&#34;&gt;Property Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Injection.md#constructor&#34;&gt;Constructor Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Injection.md#method&#34;&gt;Method Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Injection.md#locator&#34;&gt;Service Locator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Injection.md#annotation&#34;&gt;Annotation&lt;/a&gt; (NEW)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Resolver supports them all. Follow the links for a brief description, examples, and the pros and cons of each.&lt;/p&gt; &#xA;&lt;h2&gt;Property Wrappers&lt;/h2&gt; &#xA;&lt;p&gt;Speaking of Annotations, Resolver now supports resolving services using the new property wrapper syntax in Swift 5.1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class BasicInjectedViewController: UIViewController {&#xA;    @Injected var service: XYZService&#xA;    @LazyInjected var service2: XYZLazyService&#xA;    @WeakLazyInjected var service3: XYZAnotherLazyService?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just add the Injected keyword and your dependencies will be resolved automatically. See the &lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Annotation.md&#34;&gt;Annotation&lt;/a&gt; documentation for more on this and other strategies.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also an &lt;code&gt;@InjectedObject&lt;/code&gt; wrapper that can inject Observable Objects in SwiftUI views.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Resolver is implemented in just over 700 lines of actual code in a single file, but it packs a ton of features into those 700 lines.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Types.md&#34;&gt;Automatic Type Inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Scopes.md&#34;&gt;Scopes: Application, Cached, Graph, Shared, and Unique&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Protocols.md&#34;&gt;Protocols&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Optionals.md&#34;&gt;Optionals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Names.md&#34;&gt;Named Instances&lt;/a&gt; (Resolver 1.3 now supports safe name spaces!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Arguments.md&#34;&gt;Argument Passing&lt;/a&gt; (Resolver 1.2 now has built in support for multiple arguments!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Containers.md&#34;&gt;Custom Containers &amp;amp; Nested Containers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/CyclicDependencies.md&#34;&gt;Cyclic Dependency Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Storyboards.md&#34;&gt;Storyboard Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TLDR: If nothing else, make sure you read about &lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Types.md&#34;&gt;Automatic Type Inference&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Scopes.md&#34;&gt;Scopes&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Optionals.md&#34;&gt;Optionals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using Resolver&lt;/h2&gt; &#xA;&lt;p&gt;Using Resolver is a simple, three-step process:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Installation.md&#34;&gt;Add Resolver to your project.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Registration.md&#34;&gt;Register the classes and services your app requires.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Resolving.md&#34;&gt;Use Resolver to resolve those instances when needed.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Why Resolver?&lt;/h2&gt; &#xA;&lt;p&gt;As mentioned, Resolver is an ultralight Dependency Injection system, implemented in just over 700 lines of code and contained in a single file.&lt;/p&gt; &#xA;&lt;p&gt;Resolver is also designed for performance. &lt;a href=&#34;https://github.com/Swinject/SwinjectStoryboard&#34;&gt;SwinjectStoryboard&lt;/a&gt;, for example, is a great dependency injection system, but Resolver clocks out to be about 800% faster at resolving dependency chains than Swinject.&lt;/p&gt; &#xA;&lt;p&gt;And unlike some other systems, Resolver is written in 100% Swift 5, with no Objective-C code, method swizzling, or internal dependencies on the Objective-C runtime.&lt;/p&gt; &#xA;&lt;p&gt;Further, Resolver:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is tested in production code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Threads.md&#34;&gt;Is thread safe (assuming your objects are thread safe).&lt;/a&gt; (Updated in 1.4.)&lt;/li&gt; &#xA; &lt;li&gt;Has a complete set of unit tests.&lt;/li&gt; &#xA; &lt;li&gt;Is well-documented.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally, with &lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Types.md&#34;&gt;Automatic Type Inference&lt;/a&gt; you also tend to write about 40-60% less dependency injection code using Resolver.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Resolver supports CocoaPods and the Swift Package Manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pod &#34;Resolver&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resolver itself is just a single source file (Resolver.swift), so it&#39;s also easy to simply download the file and add it to your project.&lt;/p&gt; &#xA;&lt;p&gt;Note that the current version of Resolver (1.4) supports Swift 5.3 and that the minimum version of iOS currently supported with this release is iOS 11.&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Installation.md&#34;&gt;installation guide&lt;/a&gt; for information on supporting earlier versions.&lt;/p&gt; &#xA;&lt;h2&gt;Demo Application&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve made my &lt;a href=&#34;https://github.com/hmlongco/Builder&#34;&gt;Builder&lt;/a&gt; repositiory public. It&#39;s a simple master/detail-style iOS application that contains examples of...&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using the Resolver dependency injection system to construct MVVM architectures.&lt;/li&gt; &#xA; &lt;li&gt;Using Resolver to mock user data for application development.&lt;/li&gt; &#xA; &lt;li&gt;Using Resolver to mock user data for unit tests.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I also use it to play with some new code that uses SwiftUI-style builder patterns to constructing the user interface construction and to construct network requests. Check it out.&lt;/p&gt; &#xA;&lt;h2&gt;Resolver Update Notes&lt;a name=&#34;updates&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible that recent updates to Resolver could cause breaking changes in your code base.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Resolver 1.4 improved thread safety and performance. No breaking changes, though accessing Resolver&#39;s scopes directly is now deprecated. See: &lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Scopes.md&#34;&gt;Scopes&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Resolver 1.3 adds Name spaces to Resolver. Registering names allows for better autocompletion and makes your code safer by reducing potential runtime evaluation errors. This is a possible breaking change. See: &lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Names.md&#34;&gt;Named Instances&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Resolver 1.2 changed how arguments are passed to the registration factory in order to provide better support for passing and handling both single and multiple arguments. This is a breaking change. See: &lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/Arguments.md#multiple&#34;&gt;Passing and Handling Multiple Arguments&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Resolver 1.5 updated several of the registration and caching mechanisms used within Resolver. This one probably isn&#39;t an issue unless you wrote something that depended upon Resolver&#39;s internal behavior.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Resolver was designed, implemented, documented, and maintained by &lt;a href=&#34;https://www.linkedin.com/in/hmlong/&#34;&gt;Michael Long&lt;/a&gt;, a Senior Lead iOS engineer at &lt;a href=&#34;https://www.clientresourcesinc.com/solutions/&#34;&gt;CRi Solutions&lt;/a&gt;. CRi is a leader in developing cutting edge iOS, Android, and mobile web applications and solutions for our corporate and financial clients.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:mlong@clientresourcesinc.com&#34;&gt;mlong@clientresourcesinc.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: @hmlco&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;He was also one of Google&#39;s &lt;a href=&#34;https://opensource.googleblog.com/2021/09/announcing-latest-open-source-peer-bonus-winners.html&#34;&gt;Open Source Peer Reward&lt;/a&gt; winners in 2021 for his work on Resolver.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Resolver is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resouces&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hmlongco/Factory&#34;&gt;Factory: A Swift Dependency Injection System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/22203552-resolver-for-ios-dependency-injection-getting-started&#34;&gt;Resolver for iOS Dependency Injection: Getting Started | Ray Wenderlich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hmlongco/Resolver/master/Documentation/API/Classes/Resolver.html&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Inversion_of_control&#34;&gt;Inversion of Control Design Pattern ~ Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://martinfowler.com/articles/injection.html&#34;&gt;Inversion of Control Containers and the Dependency Injection pattern ~ Martin Fowler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cocoacasts.com/nuts-and-bolts-of-dependency-injection-in-swift/&#34;&gt;Nuts and Bolts of Dependency Injection in Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cocoacasts.com/dependency-injection-in-swift&#34;&gt;Dependency Injection in Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectStoryboard&#34;&gt;SwinjectStoryboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/better-programming/taking-swift-dependency-injection-to-the-next-level-b71114c6a9c6&#34;&gt;Swift 5.1 Takes Dependency Injection to the Next Level&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hmlongco/Builder&#34;&gt;Builder Demo Application&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>