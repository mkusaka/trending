<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-13T01:36:10Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>swiftlang/swift-java</title>
    <updated>2025-06-13T01:36:10Z</updated>
    <id>tag:github.com,2025-06-13:/swiftlang/swift-java</id>
    <link href="https://github.com/swiftlang/swift-java" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Java interopability support for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Java Interoperability Tools and Libraries&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains two approaches to Swift/Java interoperability.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Swift library (&lt;code&gt;JavaKit&lt;/code&gt;) and bindings generator that allows a Swift program to make use of Java libraries by wrapping Java classes in corresponding Swift types, allowing Swift to directly call any wrapped Java API.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;jextract-swift&lt;/code&gt; tool which is similar to the JDK&#39;s &lt;code&gt;jextract&lt;/code&gt; which allows to extract Java sources which are used to efficiently call into Swift &lt;em&gt;from Java&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;ðŸš§&lt;/span&gt; &lt;span&gt;ðŸš§&lt;/span&gt; &lt;span&gt;ðŸš§&lt;/span&gt; Early Development &lt;span&gt;ðŸš§&lt;/span&gt; &lt;span&gt;ðŸš§&lt;/span&gt; &lt;span&gt;ðŸš§&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;span&gt;ðŸš§&lt;/span&gt; &lt;span&gt;ðŸš§&lt;/span&gt; &lt;span&gt;ðŸš§&lt;/span&gt; This is a &lt;em&gt;very early&lt;/em&gt; prototype and everything is subject to change. &lt;span&gt;ðŸš§&lt;/span&gt; &lt;span&gt;ðŸš§&lt;/span&gt; &lt;span&gt;ðŸš§&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Parts of this project are incomplete, not fleshed out, and subject to change without any notice.&lt;/p&gt; &#xA;&lt;p&gt;The primary purpose of this repository is to create an environment for collaboration and joint exploration of the Swift/Java interoperability story. The project will transition to a more structured approach once key goals have been outlined.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;Required Swift Development Toolchains&lt;/h3&gt; &#xA;&lt;p&gt;To build and use this project, currently, you will need to download a custom toolchain which includes some improvements in Swift that this project relies on:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Required toolchain download:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently this project supports Swift &lt;code&gt;6.0.x&lt;/code&gt; and we are working on supporting later releases.&lt;/p&gt; &#xA;&lt;p&gt;You can use Swiftly (&lt;a href=&#34;https://www.swift.org/install/macos/swiftly/&#34;&gt;macOS&lt;/a&gt; / &lt;a href=&#34;https://www.swift.org/install/linux/swiftly/&#34;&gt;linux&lt;/a&gt;) the Swift toolchain installer to install the necessary Swift versions.&lt;/p&gt; &#xA;&lt;h3&gt;Required JDK versions&lt;/h3&gt; &#xA;&lt;p&gt;This project consists of different modules which have different Swift and Java runtime requirements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;JavaKit&lt;/strong&gt; â€“ the Swift macros allowing the invocation of Java libraries from Swift&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;JDK 17+&lt;/strong&gt;, any recent JDK installation should be sufficient, as only general reflection and JNI APIs are used by this integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swift 6.0.x&lt;/strong&gt;, because the library uses modern Swift macros&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;jextract-swift&lt;/strong&gt; â€“ the source generator that ingests .swiftinterface files and makes them available to be called from generated Java sources&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swift 6.0.x development snapshots&lt;/strong&gt;, because of dependence on rich swift interface files&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JDK 22+&lt;/strong&gt; because of dependence on &lt;a href=&#34;https://openjdk.org/jeps/454&#34;&gt;JEP-454: Foreign Function &amp;amp; Memory API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We are validating the implementation using the currently supported non-LTE release, which at present means JDK-23.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The extract tool may become able to generate legacy compatible sources, which would not require JEP-454 and would instead rely on existing JNI facilities. Currently though, efforts are focused on the forward-looking implementation using modern foreign function and memory APIs.&lt;/p&gt; &#xA;&lt;p&gt;Support for more recent Swift versions will be provided, for now please stick to 6.0 while evaluating this early version of swift-java.&lt;/p&gt; &#xA;&lt;h2&gt;Development and Testing&lt;/h2&gt; &#xA;&lt;p&gt;This project contains multiple builds, living side by side together.&lt;/p&gt; &#xA;&lt;p&gt;Depending on which part you are developing, you may want to run just the swift tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; swift test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the Java tests through the Gradle build. The Gradle build may also trigger some Swift compilation because of interlinked dependencies of the two parts of Swift-Java. To run the Java build and tests use the Gradle wrapper script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; ./gradlew test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently it is suggested to use Swift 6.0 and a Java 24+.&lt;/p&gt; &#xA;&lt;h3&gt;Sample Apps&lt;/h3&gt; &#xA;&lt;p&gt;Sample apps are located in the &lt;code&gt;Samples/&lt;/code&gt; directory, and they showcase full &#34;roundtrip&#34; usage of the library and/or tools.&lt;/p&gt; &#xA;&lt;h4&gt;JavaKit (Swift -&amp;gt; Java)&lt;/h4&gt; &#xA;&lt;p&gt;To run a simple app showcasing a Swift process calling into a Java library you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Samples/JavaKitSampleApp&#xA;./ci-validate.sh # which is just `swift build` and a `java -cp ...` invocation of the compiled program&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;jextract (Java -&amp;gt; Swift)&lt;/h4&gt; &#xA;&lt;p&gt;To run a simple example app showcasing the jextract (Java calling Swift) approach you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./gradlew Samples:SwiftKitSampleApp:run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will also generate the necessary sources (by invoking jextract, extracting the &lt;code&gt;Sources/ExampleSwiftLibrary&lt;/code&gt;) and generating Java sources in &lt;code&gt;src/generated/java&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;You can run Swift &lt;a href=&#34;https://github.com/ordo-one/package-benchmark&#34;&gt;ordo-one/package-benchmark&lt;/a&gt; and OpenJDK &lt;a href=&#34;https://github.com/openjdk/jmh&#34;&gt;JMH&lt;/a&gt; benchmarks in this project.&lt;/p&gt; &#xA;&lt;p&gt;Swift benchmarks are located under &lt;code&gt;Benchmarks/&lt;/code&gt; and JMH benchmarks are currently part of the SwiftKit sample project: &lt;code&gt;Samples/SwiftKitSampleApp/src/jmh&lt;/code&gt; because they depend on generated sources from the sample.&lt;/p&gt; &#xA;&lt;p&gt;To run &lt;strong&gt;Swift benchmarks&lt;/strong&gt; you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Benchmarks&#xA;swift package benchmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run JMH benchmarks you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Samples/SwiftKitSampleApp&#xA;gradle jmh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please read documentation of both performance testing tools and understand that results must be interpreted and not just taken at face value. Benchmarking is tricky and environment sensitive task, so please be careful when constructing and reading benchmarks and their results. If in doubt, please reach out on the forums.&lt;/p&gt; &#xA;&lt;h2&gt;User Guide&lt;/h2&gt; &#xA;&lt;p&gt;More details about the project and how it can be used are available in &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-java/main/USER_GUIDE.md&#34;&gt;USER_GUIDE.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>