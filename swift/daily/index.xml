<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-29T01:37:38Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danger/swift</title>
    <updated>2024-09-29T01:37:38Z</updated>
    <id>tag:github.com,2024-09-29:/danger/swift</id>
    <link href="https://github.com/danger/swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚠️ Stop saying &#34;you forgot to …&#34; in code review&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://danger.systems/images/js/danger-js-sw-logo-hero-cachable@2x.png&#34; width=&#34;350&#34;&gt;&lt;br&gt; Formalize your Pull Request etiquette. &lt;/p&gt; &#xA;&lt;p&gt;Write your Dangerfiles in Swift.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Latest version requires Swift 5.8&lt;/p&gt; &#xA;&lt;p&gt;If you are using an older Swift, use the supported version according to next table.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift version&lt;/th&gt; &#xA;   &lt;th&gt;Danger support version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.5-5.7&lt;/td&gt; &#xA;   &lt;td&gt;v3.18.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.4&lt;/td&gt; &#xA;   &lt;td&gt;v3.15.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.3&lt;/td&gt; &#xA;   &lt;td&gt;v3.13.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.2&lt;/td&gt; &#xA;   &lt;td&gt;v3.11.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.1&lt;/td&gt; &#xA;   &lt;td&gt;v3.8.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.2&lt;/td&gt; &#xA;   &lt;td&gt;v2.0.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.1&lt;/td&gt; &#xA;   &lt;td&gt;v0.4.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.0&lt;/td&gt; &#xA;   &lt;td&gt;v0.3.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;What it looks like today&lt;/h3&gt; &#xA;&lt;p&gt;You can make a Dangerfile that looks through PR metadata, it&#39;s fully typed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Danger&#xA;&#xA;let danger = Danger()&#xA;let allSourceFiles = danger.git.modifiedFiles + danger.git.createdFiles&#xA;&#xA;let changelogChanged = allSourceFiles.contains(&#34;CHANGELOG.md&#34;)&#xA;let sourceChanges = allSourceFiles.first(where: { $0.hasPrefix(&#34;Sources&#34;) })&#xA;&#xA;if !changelogChanged &amp;amp;&amp;amp; sourceChanges != nil {&#xA;  warn(&#34;No CHANGELOG entry added.&#34;)&#xA;}&#xA;&#xA;// You can use these functions to send feedback:&#xA;message(&#34;Highlight something in the table&#34;)&#xA;warn(&#34;Something pretty bad, but not important enough to fail the build&#34;)&#xA;fail(&#34;Something that must be changed&#34;)&#xA;&#xA;markdown(&#34;Free-form markdown that goes under the table, so you can do whatever.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Danger Swift&lt;/h3&gt; &#xA;&lt;p&gt;All of the docs are on the user-facing website: &lt;a href=&#34;https://danger.systems/swift/&#34;&gt;https://danger.systems/swift/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;danger-swift ci&lt;/code&gt; - Use this on CI&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;danger-swift pr https://github.com/Moya/Harvey/pull/23&lt;/code&gt; - Use this to build your Dangerfile&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;danger-swift local&lt;/code&gt; - Use this to run danger against your local changes from master&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;danger-swift edit&lt;/code&gt; - Creates a temporary Xcode project for working on a Dangerfile&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Plugins&lt;/h4&gt; &#xA;&lt;p&gt;Infrastructure exists to support plugins, which can help you avoid repeating the same Danger rules across separate repos.&lt;/p&gt; &#xA;&lt;p&gt;e.g. A plugin implemented with the following at &lt;a href=&#34;https://github.com/username/DangerPlugin.git&#34;&gt;https://github.com/username/DangerPlugin.git&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DangerPlugin.swift&#xA;import Danger&#xA;&#xA;public struct DangerPlugin {&#xA;    let danger = Danger()&#xA;    public static func doYourThing() {&#xA;        // Code goes here&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift Package Manager (More performant)&lt;/h4&gt; &#xA;&lt;p&gt;You can use Swift PM to install both &lt;code&gt;danger-swift&lt;/code&gt; and your plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Danger JS&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g danger&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    ...&#xA;    products: [&#xA;        ...&#xA;        .library(name: &#34;DangerDeps[Product name (optional)]&#34;, type: .dynamic, targets: [&#34;DangerDependencies&#34;]), // dev&#xA;        ...&#xA;    ],&#xA;    dependencies: [&#xA;        ...&#xA;        .package(url: &#34;https://github.com/danger/swift.git&#34;, from: &#34;3.0.0&#34;), // dev&#xA;        // Danger Plugins&#xA;        .package(url: &#34;https://github.com/username/DangerPlugin.git&#34;, from: &#34;0.1.0&#34;) // dev&#xA;        ...&#xA;    ],&#xA;    targets: [&#xA;        .target(name: &#34;DangerDependencies&#34;, dependencies: [&#34;Danger&#34;, &#34;DangerPlugin&#34;]), // dev&#xA;        ...&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the correct import to your &lt;code&gt;Dangerfile.swift&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import DangerPlugin&#xA;&#xA;DangerPlugin.doYourThing()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a folder called &lt;code&gt;DangerDependencies&lt;/code&gt; in &lt;code&gt;Sources&lt;/code&gt; with an empty file inside like &lt;a href=&#34;https://raw.githubusercontent.com/danger/swift/master/Sources/Danger-Swift/Fake.swift&#34;&gt;Fake.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To run &lt;code&gt;Danger&lt;/code&gt; use &lt;code&gt;swift run danger-swift command&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Recommended)&lt;/strong&gt; If you are using Swift PM to distribute your framework, use &lt;a href=&#34;https://github.com/f-meloni/Rocket&#34;&gt;Rocket&lt;/a&gt;, or a similar tool, to comment out all the dev dependencies from your &lt;code&gt;Package.swift&lt;/code&gt;. This prevents these dev dependencies from being downloaded and compiled with your framework by consumers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Recommended)&lt;/strong&gt; cache the &lt;code&gt;.build&lt;/code&gt; folder on your repo&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Marathon (Easy to use)&lt;/h4&gt; &#xA;&lt;p&gt;By suffixing &lt;code&gt;package: [url]&lt;/code&gt; to an import, you can directly import Swift PM package as a dependency&lt;/p&gt; &#xA;&lt;p&gt;For example, a plugin could be used by the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Dangerfile.swift&#xA;&#xA;import DangerPlugin // package: https://github.com/username/DangerPlugin.git&#xA;&#xA;DangerPlugin.doYourThing()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see an &lt;a href=&#34;https://github.com/ashfurrow/danger-swiftlint#danger-swiftlint&#34;&gt;example danger-swift plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Recommended)&lt;/strong&gt; Cache the &lt;code&gt;~/.danger-swift&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;For a Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install danger-swift, and a bundled danger-js locally&#xA;brew install danger/tap/danger-swift&#xA; # Run danger&#xA;danger-swift ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install danger-swift&#xA;git clone https://github.com/danger/danger-swift.git&#xA;cd danger-swift&#xA;make install&#xA;&#xA;# Install danger-js&#xA;npm install -g danger&#xA;&#xA; # Run danger&#xA;danger-swift ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GitHub Actions&lt;/p&gt; &#xA;&lt;p&gt;You can add danger/swift to your actions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;jobs:&#xA;  build:&#xA;    runs-on: ubuntu-latest&#xA;    name: &#34;Run Danger&#34;&#xA;    steps:&#xA;      - uses: actions/checkout@v1&#xA;      - name: Danger&#xA;        uses: danger/swift@3.15.0&#xA;        with:&#xA;            args: --failOnErrors --no-publish-check&#xA;        env:&#xA;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Danger has two different pre built images that you can use with your action:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/danger/packages/container/package/danger-swift&#34;&gt;https://github.com/orgs/danger/packages/container/package/danger-swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/danger/packages/container/package/danger-swift-with-swiftlint&#34;&gt;https://github.com/orgs/danger/packages/container/package/danger-swift-with-swiftlint&lt;/a&gt; (Danger + Swiftlint)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to import one of those use the &lt;code&gt;docker://&lt;/code&gt; prefix&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;jobs:&#xA;  build:&#xA;    runs-on: ubuntu-latest&#xA;    name: &#34;Run Danger&#34;&#xA;    steps:&#xA;      - uses: actions/checkout@v1&#xA;      - name: Danger&#xA;        uses: docker://ghcr.io/danger/danger-swift:3.15.0&#xA;        with:&#xA;            args: --failOnErrors --no-publish-check&#xA;        env:&#xA;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Local compiled danger-js&lt;/h4&gt; &#xA;&lt;p&gt;To use a local compiled copy of danger-js use the &lt;code&gt;danger-js-path&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;danger-swift command --danger-js-path path/to/danger-js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Current working directory&lt;/h4&gt; &#xA;&lt;p&gt;Many people prefer using Danger within a Swift Package via SPM, because is more performant.&lt;/p&gt; &#xA;&lt;p&gt;When doing so, however, having a &lt;code&gt;Package.swift&lt;/code&gt; in the root folder can be annoying, especially now that Xcode (since Xcode 11) doesn&#39;t show a &lt;code&gt;xcproj&lt;/code&gt; (or &lt;code&gt;xcworkspace&lt;/code&gt;) on the Open Recents menu when there is a &lt;code&gt;Package.swift&lt;/code&gt; in the same folder.&lt;/p&gt; &#xA;&lt;p&gt;With the &lt;code&gt;--cwd&lt;/code&gt; parameter you can specify a working directory. This allows you to have your &lt;code&gt;Package.swift&lt;/code&gt; in another directory and still run danger-swift as it was executed from your project root directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;swift run danger-swift command --cwd path/to/working-directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that to do this, you must run &lt;code&gt;danger-swift&lt;/code&gt; from the directory where the &lt;code&gt;Package.swift&lt;/code&gt; is located, and pass the top-level directory relative to this directory to the &lt;code&gt;--cwd&lt;/code&gt; command-line switch. For example, if you create a folder named &lt;strong&gt;Danger&lt;/strong&gt; in the top level of your repo for these files, you would need to &lt;code&gt;cd Danger&lt;/code&gt; and then run the command &lt;code&gt;[swift run] danger-swift cmd &amp;lt;cmd parameters&amp;gt; --cwd ..&lt;/code&gt; to tell Danger that it should look at the directory above where the command was executed to correctly invoke the tool.&lt;/p&gt; &#xA;&lt;h4&gt;Dev&lt;/h4&gt; &#xA;&lt;p&gt;You need to be using Xcode &amp;gt;= 13.2.1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/danger/danger-swift.git&#xA;cd danger-swift&#xA;swift build&#xA;swift run komondor install&#xA;swift package generate-xcodeproj&#xA;open danger-swift.xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then I tend to run &lt;code&gt;danger-swift&lt;/code&gt; using &lt;code&gt;swift run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift run danger-swift pr https://github.com/danger/swift/pull/95&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to emulate how DangerJS&#39;s &lt;code&gt;process&lt;/code&gt; will work entirely, then use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift build &amp;amp;&amp;amp; cat Fixtures/eidolon_609.json | ./.build/debug/danger-swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Deploying&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;swift run rocket $VERSION&lt;/code&gt; on &lt;code&gt;master&lt;/code&gt; e.g. &lt;code&gt;swift run rocket 1.0.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Maintainer&lt;/h3&gt; &#xA;&lt;p&gt;Danger Swift is maintained by &lt;a href=&#34;https://github.com/f-meloni&#34;&gt;@f-meloni&lt;/a&gt;, and maybe you?&lt;/p&gt;</summary>
  </entry>
</feed>