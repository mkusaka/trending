<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-22T01:40:45Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>laanlabs/metal-splats</title>
    <updated>2023-09-22T01:40:45Z</updated>
    <id>tag:github.com,2023-09-22:/laanlabs/metal-splats</id>
    <link href="https://github.com/laanlabs/metal-splats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toy iOS + Metal AR Gaussian Splat Renderer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AR Gaussian Splatting for iOS &amp;amp; Metal&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/laanlabs/metal-splats/main/media/lego-thumb.jpg&#34; height=&#34;200&#34;&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;A buggy + slow AR gaussian splat renderer for iOS + Metal. Based on several existing projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting/&#34;&gt;Original Gaussian Splatting Repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aras-p/UnityGaussianSplatting&#34;&gt;Unity Gaussian Splatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antimatter15/splat&#34;&gt;WebGL Gaussian Splats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cvlab-epfl/gaussian-splatting-web&#34;&gt;WebGPU Gaussian Splatting from cvlab-epfl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MrNeRF/gaussian-splatting-cuda&#34;&gt;MrNeRF gaussian splatting cuda&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Uses &lt;a href=&#34;https://github.com/Hi-Rez/Satin&#34;&gt;Satin + Forge&lt;/a&gt; for AR + 3d viewer ( by &lt;a href=&#34;https://twitter.com/RezaAli&#34;&gt;@rezaali&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;p&gt;Only tested on an iPhone 14 Pro. Older phones will probably struggle. You can adjust the render resolution when loading a model by increasing the rendererDownsample to 4x or more on the &#39;SplatModelInfo&#39; struct.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;âš &lt;/span&gt; This was a quick weekend hack project for educational purposes. As such the code is bad.&lt;/p&gt; &#xA;&lt;p&gt;ðŸ”¹ NOTE: PLY models use &lt;a href=&#34;https://git-lfs.com/&#34;&gt;git LFS&lt;/a&gt; for file storage. You may need to run &lt;code&gt;git lfs pull&lt;/code&gt; if PLYs are missing&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Does not use a tile based renderer, just basic quad rasterization&lt;/li&gt; &#xA; &lt;li&gt;Spherical harmonics are not supported&lt;/li&gt; &#xA; &lt;li&gt;Sorting is done on main thread with std::sort on CPU&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Todos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fix pan / drag / rotate gesture handling for moving the model - now it&#39;s broken&lt;/li&gt; &#xA; &lt;li&gt;snap models to AR planes&lt;/li&gt; &#xA; &lt;li&gt;GPU sorting&lt;/li&gt; &#xA; &lt;li&gt;detect centroids and model extents on load rather than hand specifying&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo Video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/2th0ejgNu4U&#34;&gt;Watch on YouTube&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://youtu.be/2th0ejgNu4U&#34;&gt;&lt;img src=&#34;https://github.com/laanlabs/metal-splats/assets/174185/5b73c660-8466-4b5d-b68d-2a44c0d1aff5&#34; alt=&#34;youtube-link&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;video credit: Nike shoe model from &lt;a href=&#34;https://twitter.com/alexcarliera&#34;&gt;Alex Carliera&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License(s)&lt;/h2&gt; &#xA;&lt;p&gt;Parts of the code are based on the original Gaussian-Splatting software and is governed by the &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting/raw/main/LICENSE.md&#34;&gt;Gaussian-Splatting License&lt;/a&gt;, which can be found in the &lt;a href=&#34;&#34;&gt;LICENSE&lt;/a&gt; file in this repository. The original software was developed by Inria and MPII.&lt;/p&gt; &#xA;&lt;p&gt;Please be advised that the software in this repository cannot be used for commercial purposes without explicit consent from the original licensors, Inria and MPII.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Hi-Rez/Satin&#34;&gt;Satin + Forge&lt;/a&gt; are released under the MIT license. See &lt;a href=&#34;https://github.com/Hi-Rez/Satin/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Train your own model&lt;/h2&gt; &#xA;&lt;p&gt;There are several &lt;a href=&#34;https://www.reshot.ai/3d-gaussian-splatting&#34;&gt;blog posts&lt;/a&gt; on how to train your own models from a set of images. The output PLY model is what you want to keep ( e.g. &#39;iteration_30000/point_cloud.ply&#39; ) The included models were trained on google colab with an A100 GPU.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1I8T2zlE7fQK06uNfezr4tOa_5xSq9XIg?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Models Attribution&lt;/h2&gt; &#xA;&lt;p&gt;Includes two models from the NeRF synthetic blender dataset&lt;/p&gt; &#xA;&lt;p&gt;The renders are from modified blender models located on blendswap.com:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lego by Heinzelnisse (CC-BY-NC): &lt;a href=&#34;https://www.blendswap.com/blend/11490&#34;&gt;https://www.blendswap.com/blend/11490&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;mic by up3d.de (CC-0): &lt;a href=&#34;https://www.blendswap.com/blend/23295&#34;&gt;https://www.blendswap.com/blend/23295&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>