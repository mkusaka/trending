<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-16T01:47:07Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aheze/SwipeActions</title>
    <updated>2023-04-16T01:47:07Z</updated>
    <id>tag:github.com,2023-04-16:/aheze/SwipeActions</id>
    <link href="https://github.com/aheze/SwipeActions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add customizable swipe actions to any view.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/#&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/Assets/Header.png&#34; width=&#34;400&#34; alt=&#34;SwipeActions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add customizable swipe actions to any view.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable swipe actions on any view, not just Lists.&lt;/li&gt; &#xA; &lt;li&gt;Customize literally everything â€” corner radius, color, etc...&lt;/li&gt; &#xA; &lt;li&gt;Supports drag-to-delete and advanced gesture handling.&lt;/li&gt; &#xA; &lt;li&gt;Fine-tune animations and styling to your taste.&lt;/li&gt; &#xA; &lt;li&gt;Programmatically show/hide swipe actions.&lt;/li&gt; &#xA; &lt;li&gt;Automatically close when interacting with other views.&lt;/li&gt; &#xA; &lt;li&gt;Made with 100% SwiftUI. Supports iOS 14+.&lt;/li&gt; &#xA; &lt;li&gt;Lightweight, no dependencies. One file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/Assets/General.png&#34; alt=&#34;General&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/Assets/Basics.png&#34; alt=&#34;Basics&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/Assets/Customization.png&#34; alt=&#34;Customization&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/Assets/Styles.png&#34; alt=&#34;Styles&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/Assets/Animations.png&#34; alt=&#34;Animations&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/Assets/Advanced.png&#34; alt=&#34;Advanced&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;SwipeActions is available via the &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app&#34;&gt;Swift Package Manager&lt;/a&gt;. Alternatively, because all of SwipeActions is contained within a single file, drag &lt;a href=&#34;https://github.com/aheze/SwipeActions/raw/main/Sources/SwipeActions.swift&#34;&gt;&lt;code&gt;SwipeActions.swift&lt;/code&gt;&lt;/a&gt; into your project. Requires iOS 14+.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/aheze/SwipeActions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import SwipeActions&#xA;&#xA;struct ContentView: View {&#xA;    var body: some View {&#xA;        SwipeView {&#xA;            Text(&#34;Hello&#34;)&#xA;                .frame(maxWidth: .infinity)&#xA;                .padding(.vertical, 32)&#xA;                .background(Color.blue.opacity(0.1))&#xA;                .cornerRadius(32)&#xA;        } trailingActions: { _ in&#xA;            SwipeAction(&#34;World&#34;) {&#xA;                print(&#34;Tapped!&#34;)&#xA;            }&#xA;        }&#xA;        .padding()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/Assets/Result.png&#34; width=&#34;300&#34; alt=&#34;The result, &#39;World&#39; displayed on the right.&#34;&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/aheze/SwipeActions/archive/refs/heads/main.zip&#34;&gt;example app&lt;/a&gt; for all examples and advanced usage!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/Assets/ExampleApp.png&#34; alt=&#34;2 screenshots of the example app&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;SwipeActions supports over 20 modifiers for customization. To use them, simply attach the modifier to &lt;code&gt;SwipeAction&lt;/code&gt;/&lt;code&gt;SwipeView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwipeView {&#xA;    Text(&#34;Hello&#34;)&#xA;} leadingActions: { _ in&#xA;} trailingActions: { _ in&#xA;    SwipeAction(&#34;World&#34;) {&#xA;        print(&#34;Tapped!&#34;)&#xA;    }&#xA;    .allowSwipeToTrigger() /// Modifiers for `SwipeAction` go here.&#xA;}&#xA;.swipeActionsStyle(.cascade) /// Modifiers for `SwipeView` go here.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// MARK: - Available modifiers for `SwipeAction` (the side views)&#xA;&#xA;/**&#xA; Apply this to the edge action to enable drag-to-trigger.&#xA;&#xA;     SwipeView {&#xA;         Text(&#34;Swipe&#34;)&#xA;     } leadingActions: { _ in&#xA;         SwipeAction(&#34;1&#34;) {}&#xA;             .allowSwipeToTrigger()&#xA;&#xA;         SwipeAction(&#34;2&#34;) {}&#xA;     } trailingActions: { _ in&#xA;         SwipeAction(&#34;3&#34;) {}&#xA;&#xA;         SwipeAction(&#34;4&#34;) {}&#xA;             .allowSwipeToTrigger()&#xA;     }&#xA; */&#xA;func allowSwipeToTrigger(_ value: Bool = true)&#xA;&#xA;/// Constrain the action&#39;s content size (helpful for text).&#xA;func swipeActionLabelFixedSize(_ value: Bool = true) &#xA;&#xA;/// Additional horizontal padding.&#xA;func swipeActionLabelHorizontalPadding(_ value: Double = 16)&#xA;&#xA;/// The opacity of the swipe actions, determined by `actionsVisibleStartPoint` and `actionsVisibleEndPoint`.&#xA;func swipeActionChangeLabelVisibilityOnly(_ value: Bool) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// MARK: - Available modifiers for `SwipeView` (the main view)&#xA;&#xA;/// The minimum distance needed to drag to start the gesture. Should be more than 0 for best compatibility with other gestures/buttons.&#xA;func swipeMinimumDistance(_ value: Double) &#xA;&#xA;/// The style to use (`mask`, `equalWidths`, or `cascade`).&#xA;func swipeActionsStyle(_ value: SwipeActionStyle) &#xA;&#xA;/// The corner radius that encompasses all actions.&#xA;func swipeActionsMaskCornerRadius(_ value: Double) &#xA;&#xA;/// At what point the actions start becoming visible.&#xA;func swipeActionsVisibleStartPoint(_ value: Double) &#xA;&#xA;/// At what point the actions become fully visible.&#xA;func swipeActionsVisibleEndPoint(_ value: Double)&#xA;&#xA;/// The corner radius for each action.&#xA;func swipeActionCornerRadius(_ value: Double) &#xA;&#xA;/// The width for each action.&#xA;func swipeActionWidth(_ value: Double) &#xA;&#xA;/// Spacing between actions and the label view.&#xA;func swipeSpacing(_ value: Double) &#xA;&#xA;/// The point where the user must drag to expand actions.&#xA;func swipeReadyToExpandPadding(_ value: Double) &#xA;&#xA;/// The point where the user must drag to enter the `triggering` state.&#xA;func swipeReadyToTriggerPadding(_ value: Double) &#xA;&#xA;/// Ensure that the user must drag a significant amount to trigger the edge action, even if the actions&#39; total width is small.&#xA;func swipeMinimumPointToTrigger(_ value: Double) &#xA;&#xA;/// Applies if `swipeToTriggerLeadingEdge/swipeToTriggerTrailingEdge` is true.&#xA;func swipeEnableTriggerHaptics(_ value: Bool) &#xA;&#xA;/// Applies if `swipeToTriggerLeadingEdge/swipeToTriggerTrailingEdge` is false, or when there&#39;s no actions on one side.&#xA;func swipeStretchRubberBandingPower(_ value: Double)&#xA;&#xA;/// If true, you can change from the leading to the trailing actions in one single swipe.&#xA;func swipeAllowSingleSwipeAcross(_ value: Bool) &#xA;&#xA;/// The animation used for adjusting the content&#39;s view when it&#39;s triggered.&#xA;func swipeActionContentTriggerAnimation(_ value: Animation)&#xA;&#xA;/// Values for controlling the close animation.&#xA;func swipeOffsetCloseAnimation(stiffness: Double, damping: Double)&#xA;&#xA;/// Values for controlling the expand animation.&#xA;func swipeOffsetExpandAnimation(stiffness: Double, damping: Double)&#xA;&#xA;/// Values for controlling the trigger animation.&#xA;func swipeOffsetTriggerAnimation(stiffness: Double, damping: Double)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example usage of these modifiers is available in the &lt;a href=&#34;https://github.com/aheze/SwipeActions/archive/refs/heads/main.zip&#34;&gt;example app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To automatically close swipe views when another one is swiped (accordion style), use &lt;code&gt;SwipeViewGroup&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwipeViewGroup {&#xA;    SwipeView {} /// Only one of the actions will be shown.&#xA;    SwipeView {}&#xA;    SwipeView {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To programmatically show/hide actions, use the &lt;code&gt;context&lt;/code&gt; parameter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Combine&#xA;import SwiftUI&#xA;import SwipeActions&#xA;&#xA;struct ProgrammaticSwipeView: View {&#xA;    @State var open = PassthroughSubject&amp;lt;Void, Never&amp;gt;()&#xA;&#xA;    var body: some View {&#xA;        SwipeView {&#xA;            Button {&#xA;                open.send() /// Fire the `PassthroughSubject`.&#xA;            } label: {&#xA;                Text(&#34;Tap to Open&#34;)&#xA;                    .frame(maxWidth: .infinity)&#xA;                    .padding(.vertical, 32)&#xA;                    .background(Color.blue.opacity(0.1))&#xA;                    .cornerRadius(32)&#xA;            }&#xA;        } trailingActions: { context in&#xA;            SwipeAction(&#34;Tap to Close&#34;) {&#xA;                context.wrappedValue.state = .closed&#xA;            }&#xA;            .onReceive(open) { _ in /// Receive the `PassthroughSubject`.&#xA;                context.wrappedValue.state = .expanded&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To enable swiping on transparent areas, add &lt;code&gt;.contentShape(Rectangle())&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwipeView {&#xA;    Text(&#34;Lots of empty space here.&#34;)&#xA;        .frame(maxWidth: .infinity)&#xA;        .padding(.vertical, 32)&#xA;        .contentShape(Rectangle()) /// Enable swiping on the empty space.&#xA;} trailingActions: { _ in&#xA;    SwipeAction(&#34;Hello!&#34;) { }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Everything in the example app is swipeable â€” even the gray-capsule headers!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwipeActions/main/Assets/ExampleAppHeaders.png&#34; width=&#34;300&#34; alt=&#34;The &#39;Styles&#39; header swiped to the left and the &#39;Open&#39; action shown on the right.&#34;&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Author&lt;/th&gt; &#xA;   &lt;th&gt;Contributing&lt;/th&gt; &#xA;   &lt;th&gt;Need Help?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SwipeActions is made by &lt;a href=&#34;https://github.com/aheze&#34;&gt;aheze&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;All contributions are welcome. Just &lt;a href=&#34;https://github.com/aheze/SwipeActions/fork&#34;&gt;fork&lt;/a&gt; the repo, then make a pull request.&lt;/td&gt; &#xA;   &lt;td&gt;Open an &lt;a href=&#34;https://github.com/aheze/SwipeActions/issues&#34;&gt;issue&lt;/a&gt; or join the &lt;a href=&#34;https://discord.com/invite/Pmq8fYcus2&#34;&gt;Discord server&lt;/a&gt;. You can also ping me on &lt;a href=&#34;https://twitter.com/aheze0&#34;&gt;Twitter&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2023 A. Zheng&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/49819455/231671743-baca394e-fc74-4062-83eb-2024b8add924.mp4&#34;&gt;https://user-images.githubusercontent.com/49819455/231671743-baca394e-fc74-4062-83eb-2024b8add924.mp4&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>