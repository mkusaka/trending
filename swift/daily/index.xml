<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-29T01:58:15Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dwarvesf/hidden</title>
    <updated>2022-06-29T01:58:15Z</updated>
    <id>tag:github.com,2022-06-29:/dwarvesf/hidden</id>
    <link href="https://github.com/dwarvesf/hidden" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An ultra-light MacOS utility that helps hide menu bar icons&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;200&#34; height=&#34;200&#34; margin-right=&#34;100%&#34; src=&#34;https://github.com/dwarvesf/hidden/raw/develop/img/icon_512%402x.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://webuild.community&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/webuild-community/badge/master/svg/love.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/dwarvesf/hidden/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/download-latest-brightgreen.svg?sanitize=true&#34; alt=&#34;download&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/platform-macOS-lightgrey.svg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-macOS-lightgrey.svg?sanitize=true&#34; alt=&#34;platform&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/requirements-macOS High Sierra+-ff69b4.svg&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/requirements-macOS High Sierra+-ff69b4.svg&#34; alt=&#34;systemrequirements&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Hidden Bar&lt;/h2&gt; &#xA;&lt;p&gt;Hidden Bar lets you hide menu bar items to give your Mac a cleaner look.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/dwarvesf/hidden/develop/img/screen1.png&#34;&gt; &lt;img width=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/dwarvesf/hidden/develop/img/screen2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Install&lt;/h2&gt; &#xA;&lt;h3&gt;Ô£ø App Store&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/app/hidden-bar/id1452453066&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dwarvesf/hidden/develop/img/appstore.svg?sanitize=true&#34; alt=&#34;AppStore&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;p&gt;The Hidden Bar is notarized before distributed out side App Store. It&#39;s safe to use üëç&lt;/p&gt; &#xA;&lt;h4&gt;Using Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install --cask hiddenbar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual download&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dwarvesf/hidden/releases/latest&#34;&gt;Download latest version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open and drag the app to the Applications folder.&lt;/li&gt; &#xA; &lt;li&gt;Launch Hidden and drag the icon in your menu bar (hold CMD) to the right so it is between some other icons.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üïπ Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;‚åò&lt;/code&gt; + drag to move the Hidden icons around in the menu bar.&lt;/li&gt; &#xA; &lt;li&gt;Click the Arrow icon to hide menu bar items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dwarvesf/hidden/develop/img/tutorial.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;‚ú®&lt;a href=&#34;https://github.com/dwarvesf/hidden/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. Thank you guys so much üëè&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/links/0&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/images/0&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/links/1&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/images/1&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/links/2&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/images/2&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/links/3&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/images/3&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/links/4&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/images/4&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/links/5&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/images/5&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/links/6&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/images/6&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/links/7&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/phucledien/dwarvesf/hidden/images/7&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/dwarvesf/hidden/develop/CONTRIBUTING.md&#34;&gt;this&lt;/a&gt; before you make a contribution.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;macOS version &amp;gt;= 10.13&lt;/p&gt; &#xA;&lt;h2&gt;You may also like&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dwarvesf/Blurred&#34;&gt;Blurred&lt;/a&gt; - A macOS utility that helps reduce distraction by dimming your inactive noise&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dwarvesf/micro-sniff&#34;&gt;Micro Sniff&lt;/a&gt; - An ultra-light macOS utility that notify whenever your micro-device is being used&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dwarvesf/VimMotionPublic&#34;&gt;VimMotion&lt;/a&gt; Vim style shortcut for MacOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT ¬© &lt;a href=&#34;https://github.com/dwarvesf&#34;&gt;Dwarves Foundation&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SDWebImage/SDWebImageSwiftUI</title>
    <updated>2022-06-29T01:58:15Z</updated>
    <id>tag:github.com,2022-06-29:/SDWebImage/SDWebImageSwiftUI</id>
    <link href="https://github.com/SDWebImage/SDWebImageSwiftUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SwiftUI Image loading and Animation framework powered by SDWebImage&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SDWebImageSwiftUI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SDWebImage/SDWebImageSwiftUI&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SDWebImage/SDWebImageSwiftUI.svg?branch=master&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SDWebImageSwiftUI&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SDWebImageSwiftUI.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SDWebImageSwiftUI&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/SDWebImageSwiftUI.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SDWebImageSwiftUI&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/SDWebImageSwiftUI.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/SDWebImage/SDWebImageSwiftUI&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/SDWebImage/SDWebImageSwiftUI/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s for&lt;/h2&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI is a SwiftUI image loading framework, which based on &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage&#34;&gt;SDWebImage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It brings all your favorite features from SDWebImage, like async image loading, memory/disk caching, animated image playback and performances.&lt;/p&gt; &#xA;&lt;p&gt;The framework provide the different View structs, which API match the SwiftUI framework guideline. If you&#39;re familiar with &lt;code&gt;Image&lt;/code&gt;, you&#39;ll find it easy to use &lt;code&gt;WebImage&lt;/code&gt; and &lt;code&gt;AnimatedImage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Since SDWebImageSwiftUI is built on top of SDWebImage, it provide both the out-of-box features as well as advanced powerful features you may want in real world Apps. Check our &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage&#34;&gt;Wiki&lt;/a&gt; when you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Animated Image full-stack solution, with balance of CPU &amp;amp;&amp;amp; RAM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Progressive image loading, with animation support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reusable download, never request single URL twice&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; URL Request / Response Modifier, provide custom HTTP Header&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Image Transformer, apply corner radius or CIFilter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple caches system, query from different source&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple loaders system, load from different resource&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also get all benefits from the existing community around with SDWebImage. You can have massive image format support (GIF/APNG/WebP/HEIF/AVIF/SVG/PDF) via &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Coder-Plugin-List&#34;&gt;Coder Plugins&lt;/a&gt;, PhotoKit support via &lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePhotosPlugin&#34;&gt;SDWebImagePhotosPlugin&lt;/a&gt;, Firebase integration via &lt;a href=&#34;https://github.com/firebase/FirebaseUI-iOS&#34;&gt;FirebaseUI&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Besides all these features, we do optimization for SwiftUI, like Binding, View Modifier, using the same design pattern to become a good SwiftUI citizen.&lt;/p&gt; &#xA;&lt;h2&gt;Version&lt;/h2&gt; &#xA;&lt;p&gt;This framework is under heavily development, it&#39;s recommended to use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSwiftUI/releases&#34;&gt;the latest release&lt;/a&gt; as much as possible (including SDWebImage dependency).&lt;/p&gt; &#xA;&lt;p&gt;This framework follows &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;. Each source-break API changes will bump to a major version.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;This project use &lt;a href=&#34;https://keepachangelog.com/en/1.0.0/&#34;&gt;keep a changelog&lt;/a&gt; format to record the changes. Check the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSwiftUI/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; about the changes between versions. The changes will also be updated in Release page.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;All issue reports, feature requests, contributions, and GitHub stars are welcomed. Hope for active feedback and promotion if you find this framework useful.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12+&lt;/li&gt; &#xA; &lt;li&gt;iOS 13+&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.15+&lt;/li&gt; &#xA; &lt;li&gt;tvOS 13+&lt;/li&gt; &#xA; &lt;li&gt;watchOS 6+&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.2+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SwiftUI 2.0 Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;iOS 14(macOS 11) introduce the SwiftUI 2.0, which keep the most API compatible, but changes many internal behaviors, which breaks the SDWebImageSwiftUI&#39;s function.&lt;/p&gt; &#xA;&lt;p&gt;From v2.0.0, we adopt SwiftUI 2.0 and iOS 14(macOS 11)&#39;s behavior. You can use &lt;code&gt;WebImage&lt;/code&gt; and &lt;code&gt;AnimatedImage&lt;/code&gt; inside the new &lt;code&gt;LazyVStack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {&#xA;    ScrollView {&#xA;        LazyVStack {&#xA;            ForEach(urls, id: \.self) { url in&#xA;                AnimatedImage(url: url)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: However, many differences behavior between iOS 13/14&#39;s is hard to fixup. Due to maintain issue, in the future release, we will drop the iOS 13 supports and always match SwiftUI 2.0&#39;s behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI is available through &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For App integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For App integration, you should using Xcode 12 or higher, to add this package to your App target. To do this, check &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app?language=objc&#34;&gt;Adding Package Dependencies to Your App&lt;/a&gt; about the step by step tutorial using Xcode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For downstream framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For downstream framework author, you should create a &lt;code&gt;Package.swift&lt;/code&gt; file into your git repo, then add the following line to mark your framework dependent our SDWebImageSwiftUI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/SDWebImage/SDWebImageSwiftUI.git&#34;, from: &#34;2.0.0&#34;)&#xA;    ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SDWebImageSwiftUI&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;SDWebImage/SDWebImageSwiftUI&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;WebImage&lt;/code&gt; to load network image&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports placeholder and detail options control for image loading as SDWebImage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports progressive image loading (like baseline)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports success/failure/progress changes event for custom handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports indicator with activity/progress indicator and customization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports built-in animation and transition, powered by SwiftUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports animated image as well!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {&#xA;    WebImage(url: URL(string: &#34;https://nokiatech.github.io/heif/content/images/ski_jump_1440x960.heic&#34;))&#xA;    // Supports options and context, like `.delayPlaceholder` to show placeholder only when error&#xA;    .onSuccess { image, data, cacheType in&#xA;        // Success&#xA;        // Note: Data exist only when queried from disk cache or network. Use `.queryMemoryData` if you really need data&#xA;    }&#xA;    .resizable() // Resizable like SwiftUI.Image, you must use this modifier or the view will use the image bitmap size&#xA;    .placeholder(Image(systemName: &#34;photo&#34;)) // Placeholder Image&#xA;    // Supports ViewBuilder as well&#xA;    .placeholder {&#xA;        Rectangle().foregroundColor(.gray)&#xA;    }&#xA;    .indicator(.activity) // Activity Indicator&#xA;    .transition(.fade(duration: 0.5)) // Fade Transition with duration&#xA;    .scaledToFit()&#xA;    .frame(width: 300, height: 300, alignment: .center)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: This &lt;code&gt;WebImage&lt;/code&gt; using &lt;code&gt;Image&lt;/code&gt; for internal implementation, which is the best compatible for SwiftUI layout and animation system. But unlike SwiftUI&#39;s &lt;code&gt;Image&lt;/code&gt; which does not support animated image or vector image, &lt;code&gt;WebImage&lt;/code&gt; supports animated image as well (by defaults from v2.0.0).&lt;/p&gt; &#xA;&lt;p&gt;However, The &lt;code&gt;WebImage&lt;/code&gt; animation provide simple common use case, so it&#39;s still recommend to use &lt;code&gt;AnimatedImage&lt;/code&gt; for advanced controls like progressive animation rendering, or vector image rendering.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@State var isAnimating: Bool = true&#xA;var body: some View {&#xA;    WebImage(url: URL(string: &#34;https://raw.githubusercontent.com/liyong03/YLGIFImage/master/YLGIFImageDemo/YLGIFImageDemo/joy.gif&#34;), isAnimating: $isAnimating)) // Animation Control, supports dynamic changes&#xA;    // The initial value of binding should be true&#xA;    .customLoopCount(1) // Custom loop count&#xA;    .playbackRate(2.0) // Playback speed rate&#xA;    .playbackMode(.bounce) // Playback normally to the end, then reversely back to the start&#xA;    // `WebImage` supports advanced control just like `AnimatedImage`, but without the progressive animation support&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: For indicator, you can custom your own as well. For example, iOS 14/watchOS 7 introduce the new &lt;code&gt;ProgressView&lt;/code&gt;, which can replace our built-in &lt;code&gt;ProgressIndicator/ActivityIndicator&lt;/code&gt; (where watchOS does not provide).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;WebImage(url: url)&#xA;.indicator {&#xA;    Indicator { _, _ in&#xA;        ProgressView()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;AnimatedImage&lt;/code&gt; to play animation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports network image as well as local data and bundle image&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports animated image format as well as vector image format&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports animated progressive image loading (like web browser)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports animation control using the SwiftUI Binding&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports indicator and transition, powered by SDWebImage and Core Animation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports advanced control like loop count, playback rate, buffer size, runloop mode, etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports coordinate with native UIKit/AppKit view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {&#xA;    Group {&#xA;        AnimatedImage(url: URL(string: &#34;https://raw.githubusercontent.com/liyong03/YLGIFImage/master/YLGIFImageDemo/YLGIFImageDemo/joy.gif&#34;))&#xA;        // Supports options and context, like `.progressiveLoad` for progressive animation loading&#xA;        .onFailure { error in&#xA;            // Error&#xA;        }&#xA;        .resizable() // Resizable like SwiftUI.Image, you must use this modifier or the view will use the image bitmap size&#xA;        .placeholder(UIImage(systemName: &#34;photo&#34;)) // Placeholder Image&#xA;        // Supports ViewBuilder as well&#xA;        .placeholder {&#xA;            Circle().foregroundColor(.gray)&#xA;        }&#xA;        .indicator(SDWebImageActivityIndicator.medium) // Activity Indicator&#xA;        .transition(.fade) // Fade Transition&#xA;        .scaledToFit() // Attention to call it on AnimatedImage, but not `some View` after View Modifier (Swift Protocol Extension method is static dispatched)&#xA;        &#xA;        // Data&#xA;        AnimatedImage(data: try! Data(contentsOf: URL(fileURLWithPath: &#34;/tmp/foo.webp&#34;)))&#xA;        .customLoopCount(1) // Custom loop count&#xA;        .playbackRate(2.0) // Playback speed rate&#xA;        &#xA;        // Bundle (not Asset Catalog)&#xA;        AnimatedImage(name: &#34;animation1.gif&#34;, isAnimating: $isAnimating) // Animation control binding&#xA;        .maxBufferSize(.max)&#xA;        .onViewUpdate { view, context in // Advanced native view coordinate&#xA;            // AppKit tooltip for mouse hover&#xA;            view.toolTip = &#34;Mouseover Tip&#34;&#xA;            // UIKit advanced content mode&#xA;            view.contentMode = .topLeft&#xA;            // Coordinator, used for Cocoa Binding or Delegate method&#xA;            let coordinator = context.coordinator&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;AnimatedImage&lt;/code&gt; supports both image url or image data for animated image format. Which use the SDWebImage&#39;s &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#animated-image-50&#34;&gt;Animated ImageView&lt;/a&gt; for internal implementation. Pay attention that since this base on UIKit/AppKit representable, some advanced SwiftUI layout and animation system may not work as expected. You may need UIKit/AppKit and Core Animation to modify the native view.&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;AnimatedImage&lt;/code&gt; some methods like &lt;code&gt;.transition&lt;/code&gt;, &lt;code&gt;.indicator&lt;/code&gt; and &lt;code&gt;.aspectRatio&lt;/code&gt; have the same naming as &lt;code&gt;SwiftUI.View&lt;/code&gt; protocol methods. But the args receive the different type. This is because &lt;code&gt;AnimatedImage&lt;/code&gt; supports to be used with UIKit/AppKit component and animation. If you find ambiguity, use full type declaration instead of the dot expression syntax.&lt;/p&gt; &#xA;&lt;p&gt;Note: some of methods on &lt;code&gt;AnimatedImage&lt;/code&gt; will return &lt;code&gt;some View&lt;/code&gt;, a new Modified Content. You&#39;ll lose the type related modifier method. For this case, you can either reorder the method call, or use Native View in &lt;code&gt;.onViewUpdate&lt;/code&gt; for rescue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;// Using UIKit components&#xA;var body: some View {&#xA;    AnimatedImage(name: &#34;animation2.gif&#34;) &#xA;    .indicator(SDWebImageProgressIndicator.default) // UIKit indicator component&#xA;    .transition(SDWebImageTransition.flipFromLeft) // UIKit animation transition&#xA;}&#xA;&#xA;// Using SwiftUI components&#xA;var body: some View {&#xA;    AnimatedImage(name: &#34;animation2.gif&#34;)&#xA;    .indicator(Indicator.progress) // SwiftUI indicator component&#xA;    .transition(AnyTransition.flipFromLeft) // SwiftUI animation transition&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Which View to choose&lt;/h3&gt; &#xA;&lt;p&gt;Why we have two different View types here, is because of current SwiftUI limit. But we&#39;re aimed to provide best solution for all use cases.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t need animated image, prefer to use &lt;code&gt;WebImage&lt;/code&gt; firstly. Which behaves the seamless as built-in SwiftUI View. If SwiftUI works, it works. If SwiftUI doesn&#39;t work, it either :)&lt;/p&gt; &#xA;&lt;p&gt;If you need simple animated image, use &lt;code&gt;WebImage&lt;/code&gt;. Which provide the basic animated image support. But it does not support progressive animation rendering, nor vector image, if you don&#39;t care about this.&lt;/p&gt; &#xA;&lt;p&gt;If you need powerful animated image, &lt;code&gt;AnimatedImage&lt;/code&gt; is the one to choose. Remember it supports static image as well, you don&#39;t need to check the format, just use as it. Also, some powerful feature like UIKit/AppKit tint color, vector image, symbol image configuration, tvOS layered image, only available in &lt;code&gt;AnimatedImage&lt;/code&gt; but not currently in SwfitUI.&lt;/p&gt; &#xA;&lt;p&gt;But, because &lt;code&gt;AnimatedImage&lt;/code&gt; use &lt;code&gt;UIViewRepresentable&lt;/code&gt; and driven by UIKit, currently there may be some small incompatible issues between UIKit and SwiftUI layout and animation system, or bugs related to SwiftUI itself. We try our best to match SwiftUI behavior, and provide the same API as &lt;code&gt;WebImage&lt;/code&gt;, which make it easy to switch between these two types if needed.&lt;/p&gt; &#xA;&lt;h3&gt;Use &lt;code&gt;ImageManager&lt;/code&gt; for your own View type&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;ImageManager&lt;/code&gt; is a class which conforms to Combine&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/combine/observableobject&#34;&gt;ObservableObject&lt;/a&gt; protocol. Which is the core fetching data source of &lt;code&gt;WebImage&lt;/code&gt; we provided.&lt;/p&gt; &#xA;&lt;p&gt;For advanced use case, like loading image into the complicated View graph which you don&#39;t want to use &lt;code&gt;WebImage&lt;/code&gt;. You can directly bind your own View type with the Manager.&lt;/p&gt; &#xA;&lt;p&gt;It looks familiar like &lt;code&gt;SDWebImageManager&lt;/code&gt;, but it&#39;s built for SwiftUI world, which provide the Source of Truth for loading images. You&#39;d better use SwiftUI&#39;s &lt;code&gt;@ObservedObject&lt;/code&gt; to bind each single manager instance for your View instance, which automatically update your View&#39;s body when image status changed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MyView : View {&#xA;    @ObservedObject var imageManager: ImageManager&#xA;    var body: some View {&#xA;        // Your custom complicated view graph&#xA;        Group {&#xA;            if imageManager.image != nil {&#xA;                Image(uiImage: imageManager.image!)&#xA;            } else {&#xA;                Rectangle().fill(Color.gray)&#xA;            }&#xA;        }&#xA;        // Trigger image loading when appear&#xA;        .onAppear { self.imageManager.load() }&#xA;        // Cancel image loading when disappear&#xA;        .onDisappear { self.imageManager.cancel() }&#xA;    }&#xA;}&#xA;&#xA;struct MyView_Previews: PreviewProvider {&#xA;    static var previews: some View {&#xA;        MyView(imageManager: ImageManager(url: URL(string: &#34;https://via.placeholder.com/200x200.jpg&#34;))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customization and configuration setup&lt;/h3&gt; &#xA;&lt;p&gt;This framework is based on SDWebImage, which supports advanced customization and configuration to meet different users&#39; demand.&lt;/p&gt; &#xA;&lt;p&gt;You can register multiple coder plugins for external image format. You can register multiple caches (different paths and config), multiple loaders (URLSession and Photos URLs). You can control the cache expiration date, size, download priority, etc. All in our &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The best place to put these setup code for SwiftUI App, it&#39;s the &lt;code&gt;AppDelegate.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;    // Add WebP/SVG/PDF support&#xA;    SDImageCodersManager.shared.addCoder(SDImageWebPCoder.shared)&#xA;    SDImageCodersManager.shared.addCoder(SDImageSVGCoder.shared)&#xA;    SDImageCodersManager.shared.addCoder(SDImagePDFCoder.shared)&#xA;    &#xA;    // Add default HTTP header&#xA;    SDWebImageDownloader.shared.setValue(&#34;image/webp,image/apng,image/*,*/*;q=0.8&#34;, forHTTPHeaderField: &#34;Accept&#34;)&#xA;    &#xA;    // Add multiple caches&#xA;    let cache = SDImageCache(namespace: &#34;tiny&#34;)&#xA;    cache.config.maxMemoryCost = 100 * 1024 * 1024 // 100MB memory&#xA;    cache.config.maxDiskSize = 50 * 1024 * 1024 // 50MB disk&#xA;    SDImageCachesManager.shared.addCache(cache)&#xA;    SDWebImageManager.defaultImageCache = SDImageCachesManager.shared&#xA;    &#xA;    // Add multiple loaders with Photos Asset support&#xA;    SDImageLoadersManager.shared.addLoader(SDImagePhotosLoader.shared)&#xA;    SDWebImageManager.defaultImageLoader = SDImageLoadersManager.shared&#xA;    return true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, it&#39;s really recommended to check our demo, to learn detailed API usage. You can also have a check at the latest API documentation, for advanced usage.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sdwebimage.github.io/SDWebImageSwiftUI/&#34;&gt;SDWebImageSwiftUI API documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sdwebimage.github.io/&#34;&gt;SDWebImage API documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Common Problems&lt;/h3&gt; &#xA;&lt;h4&gt;Using Image/WebImage/AnimatedImage in Button/NavigationLink&lt;/h4&gt; &#xA;&lt;p&gt;SwiftUI&#39;s &lt;code&gt;Button&lt;/code&gt; apply overlay to its content (except &lt;code&gt;Text&lt;/code&gt;) by default, this is common mistake to write code like this, which cause strange behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Wrong&#xA;Button(action: {&#xA;    // Clicked&#xA;}) {&#xA;    WebImage(url: url)&#xA;}&#xA;// NavigationLink create Button implicitly&#xA;NavigationView {&#xA;    NavigationLink(destination: Text(&#34;Detail view here&#34;)) {&#xA;        WebImage(url: url)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead, you must override the &lt;code&gt;.buttonStyle&lt;/code&gt; to use the plain style, or the &lt;code&gt;.renderingMode&lt;/code&gt; to use original mode. You can also use the &lt;code&gt;.onTapGesture&lt;/code&gt; modifier for touch handling. See &lt;a href=&#34;https://www.hackingwithswift.com/quick-start/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink&#34;&gt;How to disable the overlay color for images inside Button and NavigationLink&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Correct&#xA;Button(action: {&#xA;    // Clicked&#xA;}) {&#xA;    WebImage(url: url)&#xA;}&#xA;.buttonStyle(PlainButtonStyle())&#xA;// Or&#xA;NavigationView {&#xA;    NavigationLink(destination: Text(&#34;Detail view here&#34;)) {&#xA;        WebImage(url: url)&#xA;        .renderingMode(.original)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using with external loaders/caches/coders&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImage itself, supports many custom loaders (like &lt;a href=&#34;https://github.com/firebase/FirebaseUI-iOS&#34;&gt;Firebase Storage&lt;/a&gt; and &lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePhotosPlugin&#34;&gt;PhotosKit&lt;/a&gt;), caches (like &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageYYPlugin&#34;&gt;YYCache&lt;/a&gt; and &lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePINPlugin&#34;&gt;PINCache&lt;/a&gt;), and coders (like &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageWebPCoder&#34;&gt;WebP&lt;/a&gt; and &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageAVIFCoder&#34;&gt;AVIF&lt;/a&gt;, even &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageLottieCoder&#34;&gt;Lottie&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Here is the tutorial to setup these external components with SwiftUI environment.&lt;/p&gt; &#xA;&lt;h5&gt;Setup external SDKs&lt;/h5&gt; &#xA;&lt;p&gt;You can put the setup code inside your SwiftUI &lt;code&gt;App.init()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@main&#xA;struct MyApp: App {&#xA;    &#xA;    init() {&#xA;        // Custom Firebase Storage Loader&#xA;        FirebaseApp.configure()&#xA;        SDImageLoadersManager.shared.loaders = [FirebaseUI.StorageImageLoader.shared]&#xA;        SDWebImageManager.defaultImageLoader = SDImageLoadersManager.shared&#xA;        // WebP support&#xA;        SDImageCodersManager.shared.addCoder(SDImageWebPCoder.shared)&#xA;    }&#xA;    &#xA;    var body: some Scene {&#xA;        WindowGroup {&#xA;            ContentView()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, if your App have complicated &lt;code&gt;AppDelegate&lt;/code&gt; class, put setup code there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class AppDelegate: NSObject, UIApplicationDelegate {&#xA;    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -&amp;gt; Bool {&#xA;        SDImageCachesManager.shared.caches = [YYCache(name: &#34;default&#34;)]&#xA;        SDWebImageManager.defaultImageCache = SDImageCachesManager.shared&#xA;        return true&#xA;    }&#xA;}&#xA;&#xA;@main&#xA;struct MyApp: App {&#xA;    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate&#xA;&#xA;    var body: some Scene {&#xA;        WindowGroup {&#xA;            ContentView()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use external SDKs&lt;/h5&gt; &#xA;&lt;p&gt;For some of custom loaders, you need to create the &lt;code&gt;URL&lt;/code&gt; struct with some special APIs, so that SDWebImage can retrieve the context from other SDKs, like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FirebaseStorage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let storageRef: StorageReference&#xA;let storageURL = NSURL.sd_URL(with: storageRef) as URL?&#xA;// Or via convenience extension&#xA;let storageURL = storageRef.sd_URLRepresentation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PhotosKit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let asset: PHAsset&#xA;let photosURL = NSURL.sd_URL(with: asset) as URL?&#xA;// Or via convenience extension&#xA;let photosURL = asset.sd_URLRepresentation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For some of custom coders, you need to request the image with some options to control the behavior, like Vector Images SVG/PDF. Because SwiftUI.Image or WebImage does not supports vector graph at all.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SVG/PDF Coder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let vectorURL: URL? // URL to SVG or PDF&#xA;WebImage(url: vectorURL, context: [.imageThumbnailPixelSize: CGSize(width: 100, height: 100)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lottie Coder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let lottieURL: URL? // URL to Lottie.json&#xA;WebImage(url: lottieURL, isAnimating: $isAnimating)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For caches, you actually don&#39;t need to worry about anything. It just works after setup.&lt;/p&gt; &#xA;&lt;h4&gt;Using for backward deployment and weak linking SwiftUI&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI supports to use when your App Target has a deployment target version less than iOS 13/macOS 10.15/tvOS 13/watchOS 6. Which will weak linking of SwiftUI(Combine) to allows writing code with available check at runtime.&lt;/p&gt; &#xA;&lt;p&gt;To use backward deployment, you have to do the follow things:&lt;/p&gt; &#xA;&lt;h5&gt;Add weak linking framework&lt;/h5&gt; &#xA;&lt;p&gt;Add &lt;code&gt;-weak_framework SwiftUI -weak_framework Combine&lt;/code&gt; in your App Target&#39;s &lt;code&gt;Other Linker Flags&lt;/code&gt; build setting. You can also do this using Xcode&#39;s &lt;code&gt;Optional Framework&lt;/code&gt; checkbox, there have the same effect.&lt;/p&gt; &#xA;&lt;p&gt;You should notice that all the third party SwiftUI frameworks should have this build setting as well, not only just SDWebImageSwiftUI. Or when running on iOS 12 device, it will trigger the runtime dyld error on startup.&lt;/p&gt; &#xA;&lt;h5&gt;Backward deployment on iOS 12.1-&lt;/h5&gt; &#xA;&lt;p&gt;For deployment target version below iOS 12.2 (The first version which Swift 5 Runtime bundled in iOS system), you have to change the min deployment target version of SDWebImageSwiftUI. This may take some side effect on compiler&#39;s optimization and trigger massive warnings for some frameworks.&lt;/p&gt; &#xA;&lt;p&gt;However, for iOS 12.2+, you can still keep the min deployment target version to iOS 13, no extra warnings or performance slow down for iOS 13 client.&lt;/p&gt; &#xA;&lt;p&gt;Because Swift use the min deployment target version to detect whether to link the App bundled Swift runtime, or the System built-in one (&lt;code&gt;/usr/lib/swift/libswiftCore.dylib&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For CocoaPods user, you can change the min deployment target version in the Podfile via post installer:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post_install do |installer|&#xA;  installer.pods_project.targets.each do |target|&#xA;    target.build_configurations.each do |config|&#xA;      config.build_settings[&#39;IPHONEOS_DEPLOYMENT_TARGET&#39;] = &#39;11.0&#39; # version you need&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For Carthage user, you can use &lt;code&gt;carthage update --no-build&lt;/code&gt; to download the dependency, then change the Xcode Project&#39;s deployment target version and build the binary framework.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For SwiftPM user, you have to use the local dependency (with the Git submodule) to change the deployment target version.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Backward deployment on iOS 12.2+&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For Carthage user, the built binary framework will use &lt;a href=&#34;https://swift.org/blog/abi-stability-and-more/&#34;&gt;Library Evolution&lt;/a&gt; to support for backward deployment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For CocoaPods user, you can skip the platform version validation in Podfile with:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;13.0&#39; # This does not effect your App Target&#39;s deployment target version, just a hint for CocoaPods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For SwiftPM user, SwiftPM does not support weak linking nor Library Evolution, so it can not deployment to iOS 12+ user without changing the min deployment target.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Add available annotation&lt;/h5&gt; &#xA;&lt;p&gt;Add &lt;strong&gt;all the SwiftUI code&lt;/strong&gt; with the available annotation and runtime check, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// AppDelegate.swift&#xA;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;    // ...&#xA;    if #available(iOS 13, *) {&#xA;        window.rootViewController = UIHostingController(rootView: ContentView())&#xA;    } else {&#xA;        window.rootViewController = ViewController()&#xA;    }&#xA;    // ...&#xA;}&#xA;&#xA;// ViewController.swift&#xA;class ViewController: UIViewController {&#xA;    var label: UILabel = UILabel()&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        view.backgroundColor = .white&#xA;        view.addSubview(label)&#xA;        label.text = &#34;Hello World iOS 12!&#34;&#xA;        label.sizeToFit()&#xA;        label.center = view.center&#xA;    }&#xA;}&#xA;&#xA;// ContentView.swift&#xA;@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)&#xA;struct ContentView : View {&#xA;    var body: some View {&#xA;        Group {&#xA;            Text(&#34;Hello World iOS 13!&#34;)&#xA;            WebImage(url: URL(string: &#34;https://i.loli.net/2019/09/24/rX2RkVWeGKIuJvc.jpg&#34;))&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;To run the example using SwiftUI, following the steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd Example&#xA;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open the Xcode Workspace to run the demo application.&lt;/p&gt; &#xA;&lt;p&gt;Since SwiftUI is aimed to support all Apple platforms, our demo does this as well, one codebase including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS (iPhone/iPad/Mac Catalyst)&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;tvOS&lt;/li&gt; &#xA; &lt;li&gt;watchOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Demo Tips:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Switch&lt;/code&gt; (right-click on macOS/force press on watchOS) to switch between &lt;code&gt;WebImage&lt;/code&gt; and &lt;code&gt;AnimatedImage&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Reload&lt;/code&gt; (right-click on macOS/force press on watchOS) to clear cache.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Swipe Left&lt;/code&gt; (menu button on tvOS) to delete one image url from list.&lt;/li&gt; &#xA; &lt;li&gt;Pinch gesture (Digital Crown on watchOS, play button on tvOS) to zoom-in detail page image.&lt;/li&gt; &#xA; &lt;li&gt;Clear cache and go to detail page to see progressive loading.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI has Unit Test to increase code quality. For SwiftUI, there are no official Unit Test solution provided by Apple.&lt;/p&gt; &#xA;&lt;p&gt;However, since SwiftUI is State-Based and Attributed-Implemented layout system, there are open source projects who provide the solution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalexn/ViewInspector&#34;&gt;ViewInspector&lt;/a&gt;: Inspect View&#39;s runtime attribute value (like &lt;code&gt;.frame&lt;/code&gt; modifier, &lt;code&gt;.image&lt;/code&gt; value). We use this to test &lt;code&gt;AnimatedImage&lt;/code&gt; and &lt;code&gt;WebImage&lt;/code&gt;. It also allows the inspect to native UIView/NSView, which we use to test &lt;code&gt;ActivityIndicator&lt;/code&gt; and &lt;code&gt;ProgressIndicator&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run the test:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage build&lt;/code&gt; on root directory to install the dependency.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;SDWebImageSwiftUI.xcodeproj&lt;/code&gt;, wait for SwiftPM finishing downloading the test dependency.&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;code&gt;SDWebImageSwiftUITests&lt;/code&gt; scheme and start testing.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We&#39;ve already setup the CI pipeline, each PR will run the test case and upload the test report to &lt;a href=&#34;https://codecov.io/gh/SDWebImage/SDWebImageSwiftUI&#34;&gt;codecov&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImageSwiftUI/master/Example/Screenshot/Demo-iOS.jpg&#34; height=&#34;960&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImageSwiftUI/master/Example/Screenshot/Demo-macOS.jpg&#34; width=&#34;960&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tvOS Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImageSwiftUI/master/Example/Screenshot/Demo-tvOS.jpg&#34; width=&#34;960&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;watchOS Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImageSwiftUI/master/Example/Screenshot/Demo-watchOS.jpg&#34; width=&#34;480&#34;&gt; &#xA;&lt;h2&gt;Extra Notes&lt;/h2&gt; &#xA;&lt;p&gt;Besides all above things, this project can also ensure the following function available on Swift platform for SDWebImage itself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SwiftUI compatibility&lt;/li&gt; &#xA; &lt;li&gt;Swift Package Manager integration&lt;/li&gt; &#xA; &lt;li&gt;Swift source code compatibility and Swifty&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Which means, this project is one core use case and downstream dependency, which driven SDWebImage itself future development.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dreampiggy&#34;&gt;DreamPiggy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImage&#34;&gt;SDWebImage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/libwebp-Xcode&#34;&gt;libwebp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher&#34;&gt;Kingfisher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SwiftUIX/SwiftUIX&#34;&gt;SwiftUIX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JagCesar/Espera&#34;&gt;Espera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/siteline/SwiftUI-Introspect&#34;&gt;SwiftUI-Introspect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalexn/ViewInspector&#34;&gt;ViewInspector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>exyte/PopupView</title>
    <updated>2022-06-29T01:58:15Z</updated>
    <id>tag:github.com,2022-06-29:/exyte/PopupView</id>
    <link href="https://github.com/exyte/PopupView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toasts and popups library written with SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/exyte/media/master/common/header.png&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Floaters&lt;/th&gt; &#xA;   &lt;th&gt;Toasts&lt;/th&gt; &#xA;   &lt;th&gt;Popups&lt;/th&gt; &#xA;   &lt;th&gt;Sheets&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/exyte/media/master/PopupView/1.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/exyte/media/master/PopupView/2.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/exyte/media/master/PopupView/3.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/exyte/media/master/PopupView/4.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;left&#34;&gt;Popup View&lt;/h1&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt;&#xA;&lt;h4&gt;Toasts, alerts and popups library written with SwiftUI&lt;/h4&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt; We are a development agency building &lt;a href=&#34;https://clutch.co/profile/exyte#review-731233?utm_medium=referral&amp;amp;utm_source=github.com&amp;amp;utm_campaign=phenomenal_to_clutch&#34;&gt;phenomenal&lt;/a&gt; apps.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://exyte.com/contacts&#34;&gt;&lt;img src=&#34;https://i.imgur.com/vGjsQPt.png&#34; width=&#34;134&#34; height=&#34;34&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/exyteHQ&#34;&gt;&lt;img src=&#34;https://i.imgur.com/DngwSn1.png&#34; width=&#34;165&#34; height=&#34;34&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://twitter.com/exyteHQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-@exyteHQ-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/ExytePopupView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/ExytePopupView.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-0473B3.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/ExytePopupView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/ExytePopupView.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/ExytePopupView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/ExytePopupView.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add a binding bool to control popup presentation state&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;.popup&lt;/code&gt; modifier to your view&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;&#xA;    @State var showingPopup = false&#xA;&#xA;    var body: some View {&#xA;        YourView()&#xA;            .popup(isPresented: $showingPopup, autohideIn: 2) {&#xA;                Text(&#34;The popup&#34;)&#xA;                    .frame(width: 200, height: 60)&#xA;                    .background(Color(red: 0.85, green: 0.8, blue: 0.95))&#xA;                    .cornerRadius(30.0)&#xA;            }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Required parameters&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;isPresented&lt;/code&gt; - binding to determine if the popup should be seen on screen or hidden&lt;br&gt; &lt;code&gt;view&lt;/code&gt; - view you want to display on your popup&lt;/p&gt; &#xA;&lt;h3&gt;Available customizations - optional parameters&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;type&lt;/code&gt; - toast, float or default. Floater has parameters of its own:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;verticalPadding&lt;/code&gt; - padding which will define padding from the top or will be added to safe area if &lt;code&gt;useSafeAreaInset&lt;/code&gt; is true&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;useSafeAreaInset&lt;/code&gt; - whether to include safe area insets in floater padding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;position&lt;/code&gt; - top or bottom (for default case it just determines animation direction)&lt;br&gt; &lt;code&gt;animation&lt;/code&gt; - custom animation for popup sliding onto screen&lt;br&gt; &lt;code&gt;autohideIn&lt;/code&gt; - time after which popup should disappear&lt;br&gt; &lt;code&gt;dragToDismiss&lt;/code&gt; - true by default: enable/disable drag to dismiss (upwards for .top popup types, downwards for .bottom and default type)&lt;br&gt; &lt;code&gt;closeOnTap&lt;/code&gt; - true by default: enable/disable closing on tap on popup&lt;br&gt; &lt;code&gt;closeOnTapOutside&lt;/code&gt; - false by default: enable/disable closing on tap on outside of popup&lt;br&gt; &lt;code&gt;backgroundColor&lt;/code&gt; - Color.clear by default: change background color of outside area&lt;br&gt; &lt;code&gt;dismissCallback&lt;/code&gt; - custom callback to call once the popup is dismissed&lt;/p&gt; &#xA;&lt;h3&gt;Draggable card - sheet&lt;/h3&gt; &#xA;&lt;p&gt;To implement a sheet (like in 4th gif) enable dragToDismiss on bottom toast (see example project for implementation of the card itself)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.popup(isPresented: $show, type: .toast, position: .bottom, dragToDismiss: true) {&#xA;    // your content &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;To try PopupView examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repo &lt;code&gt;https://github.com/exyte/PopupView.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open terminal and run &lt;code&gt;cd &amp;lt;PopupViewRepo&amp;gt;/Example/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; to install all dependencies&lt;/li&gt; &#xA; &lt;li&gt;Run open &lt;code&gt;PopupViewExample.xcworkspace/&lt;/code&gt; to open project in the Xcode&lt;/li&gt; &#xA; &lt;li&gt;Try it!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To install &lt;code&gt;PopupView&lt;/code&gt;, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;ExytePopupView&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To integrate &lt;code&gt;PopupView&lt;/code&gt; into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;Exyte/PopupView&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/exyte/PopupView.git&#34;, from: &#34;1.0.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;Drop &lt;a href=&#34;https://github.com/exyte/PopupView/raw/master/Source/PopupView.swift&#34;&gt;PopupView.swift&lt;/a&gt; in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 13+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 11+&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>