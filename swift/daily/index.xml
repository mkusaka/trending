<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-29T01:36:06Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tombonez/noTunes</title>
    <updated>2023-09-29T01:36:06Z</updated>
    <id>tag:github.com,2023-09-29:/tombonez/noTunes</id>
    <link href="https://github.com/tombonez/noTunes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple macOS application that will prevent iTunes or Apple Music from launching.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tombonez/noTunes/master/screenshots/app-icon.png&#34; alt=&#34;noTunes Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/tombonez/notunes&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/tombonez/notunes/total&#34; alt=&#34;GitHub all releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/tombonez/notunes&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Notice&lt;/h1&gt; &#xA;&lt;p&gt;The certificate used in noTunes prior to version 3.2 is set to expire on the 14th January 2022.&lt;/p&gt; &#xA;&lt;p&gt;To continue using noTunes please update to version 3.2 or greater.&lt;/p&gt; &#xA;&lt;h1&gt;noTunes&lt;/h1&gt; &#xA;&lt;p&gt;noTunes is a macOS application that will prevent iTunes &lt;em&gt;or&lt;/em&gt; Apple Music from launching.&lt;/p&gt; &#xA;&lt;p&gt;Simply launch the noTunes app and iTunes/Music will no longer be able to launch. For example, when bluetooth headphones reconnect.&lt;/p&gt; &#xA;&lt;p&gt;You can toggle the apps functionality via the menu bar icon with a simple left click.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask notunes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Direct Download&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tombonez/noTunes/releases/download/v3.3/noTunes-3.3.zip&#34;&gt;noTunes-3.3.zip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Set noTunes to launch at startup&lt;/h3&gt; &#xA;&lt;h4&gt;Before Ventura:&lt;/h4&gt; &#xA;&lt;p&gt;Navigate to System Preferences -&amp;gt; Users &amp;amp; Groups. Under your user, select &#34;Login Items&#34;, click the lock on the bottom left and enter your login password to make changes. Click the plus sign (+) in the main panel and search for noTunes. Select it and click &#34;Add&#34;.&lt;/p&gt; &#xA;&lt;h4&gt;Ventura and later:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to System Settings&lt;/li&gt; &#xA; &lt;li&gt;Select General&lt;/li&gt; &#xA; &lt;li&gt;Select Login Items&lt;/li&gt; &#xA; &lt;li&gt;Click the + under Open at Login and select noTunes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Toggle noTunes Functionality&lt;/h3&gt; &#xA;&lt;p&gt;Left click the menu bar icon to toggle between its active states.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enabled (prevents iTunes/Music from opening)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tombonez/noTunes/master/screenshots/menubar-enabled.png&#34; alt=&#34;noTunes Enabled&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disabled (allows iTunes/Music to open)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tombonez/noTunes/master/screenshots/menubar-disabled.png&#34; alt=&#34;noTunes Disabled&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Hide Menu Bar Icon&lt;/h3&gt; &#xA;&lt;p&gt;Right click the menu bar icon and click &lt;code&gt;Hide Icon&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Restore Menu Bar Icon&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tombonez/noTunes/master/#quit-notunes&#34;&gt;Quit noTunes&lt;/a&gt;, run the following command in Terminal and re-open the app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults delete digital.twisted.noTunes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quit noTunes&lt;/h3&gt; &#xA;&lt;p&gt;To quit the app either:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;With menu bar icon visible&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Right click the menu bar icon and click quit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;With menu bar icon hidden&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quit the app via Activity Monitor or run the following command in Terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;osascript -e &#39;quit app &#34;noTunes&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set replacement for iTunes / Apple Music&lt;/h3&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;YOUR_MUSIC_APP&lt;/code&gt; with the name of your music app in the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write digital.twisted.noTunes replacement /Applications/YOUR_MUSIC_APP.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;/Applications/YOUR_MUSIC_APP.app&lt;/code&gt; will launch when iTunes/Music attempts to launch.&lt;/p&gt; &#xA;&lt;p&gt;The following command will disable the replacement.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults delete digital.twisted.noTunes replacement&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code is available under the &lt;a href=&#34;https://github.com/tombonez/notunes/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gordontucker/FittedSheets</title>
    <updated>2023-09-29T01:36:06Z</updated>
    <id>tag:github.com,2023-09-29:/gordontucker/FittedSheets</id>
    <link href="https://github.com/gordontucker/FittedSheets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bottom sheets for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FittedSheets&lt;/h1&gt; &#xA;&lt;p&gt;Bottom sheets for iOS&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://app.bitrise.io/app/13f283bd401bbe1c.svg?token=MGSP3TGNYPSgB5gWq4MEQg&#34; alt=&#34;Bitrise Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Minimum requirement:&lt;br&gt; &lt;img src=&#34;https://img.shields.io/badge/iOS-11-green.svg?sanitize=true&#34; alt=&#34;iOSVersion&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5-green.svg?sanitize=true&#34; alt=&#34;SwiftVersion&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Xcode-11-green.svg?sanitize=true&#34; alt=&#34;XcodeVersion&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This project is to enable easily presenting view controllers in a bottom sheet that supports scrollviews and multiple sizes. Contributions and feedback are very welcome.&lt;/p&gt; &#xA;&lt;p&gt;The bottom sheet tries to be smart about the height it takes. If the view controller is smaller than the sizes specified, it will only grow as large as the intrinsic height of the presented view controller. If it is larger, it will stop at each height specified in the initializer or setSizes function.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Intrinsic Heights&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Fullscreen Modal&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;True Fullscreen&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Scrolling&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Inline&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gordontucker/FittedSheets/main/Screens/IntrinsicHeight.gif&#34; alt=&#34;Intrinsic Heights&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gordontucker/FittedSheets/main/Screens/FullscreenHeight.gif&#34; alt=&#34;Fullscreen Modal&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gordontucker/FittedSheets/main/Screens/TrueFullscreenHeight.gif&#34; alt=&#34;True Fullscreen&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gordontucker/FittedSheets/main/Screens/Scrolling.gif&#34; alt=&#34;Scrolling&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gordontucker/FittedSheets/main/Screens/Inline.gif&#34; alt=&#34;Inline&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Some options can only be set when setting up the fitted sheets. These are set in the &lt;code&gt;SheetOptions&lt;/code&gt; property of the constructor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The constructor is &lt;code&gt;init(controller:, sizes:, options:)&lt;/code&gt;. Sizes is optional, but if specified, the first size in the array will determine the initial size of the sheet. Options is also optional, if not specified, the default options will be used.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using default settings&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import FittedSheets&#xA;&#xA;let controller = MyViewController()&#xA;&#xA;let sheetController = SheetViewController(controller: controller)&#xA;&#xA;self.present(sheetController, animated: true, completion: nil) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Customizing settings&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let controller = MyViewController()&#xA;&#xA;let options = SheetOptions(&#xA;    // The full height of the pull bar. The presented view controller will treat this area as a safearea inset on the top&#xA;    pullBarHeight: 24,&#xA;    &#xA;    // The corner radius of the shrunken presenting view controller&#xA;    presentingViewCornerRadius: 20, &#xA;    &#xA;    // Extends the background behind the pull bar or not&#xA;    shouldExtendBackground: true,&#xA;    &#xA;    // Attempts to use intrinsic heights on navigation controllers. This does not work well in combination with keyboards without your code handling it.&#xA;    setIntrinsicHeightOnNavigationControllers: true, &#xA;    &#xA;    // Pulls the view controller behind the safe area top, especially useful when embedding navigation controllers&#xA;    useFullScreenMode: true,&#xA;    &#xA;    // Shrinks the presenting view controller, similar to the native modal&#xA;    shrinkPresentingViewController: true,&#xA;    &#xA;    // Determines if using inline mode or not&#xA;    useInlineMode: false,&#xA;    &#xA;    // Adds a padding on the left and right of the sheet with this amount. Defaults to zero (no padding)&#xA;    horizontalPadding: 0,&#xA;    &#xA;    // Sets the maximum width allowed for the sheet. This defaults to nil and doesn&#39;t limit the width.&#xA;    maxWidth: nil&#xA;)&#xA;&#xA;let sheetController = SheetViewController(&#xA;    controller: controller, &#xA;    sizes: [.intrinsic, .percent(0.25), .fixed(200), .fullscreen])&#xA;    &#xA;    &#xA;// The size of the grip in the pull bar&#xA;sheetController.gripSize = CGSize(width: 50, height: 6)&#xA;&#xA;// The color of the grip on the pull bar&#xA;sheetController.gripColor = UIColor(white: 0.868, alpha: 1)&#xA;&#xA;// The corner curve of the sheet (iOS 13 or later)&#xA;sheetController.cornerCurve = .continuous&#xA;&#xA;// The corner radius of the sheet&#xA;sheetController.cornerRadius = 20&#xA;    &#xA;// minimum distance above the pull bar, prevents bar from coming right up to the edge of the screen&#xA;sheetController.minimumSpaceAbovePullBar = 0 &#xA;&#xA;// Set the pullbar&#39;s background explicitly&#xA;sheetController.pullBarBackgroundColor = UIColor.blue&#xA;&#xA;// Determine if the rounding should happen on the pullbar or the presented controller only (should only be true when the pull bar&#39;s background color is .clear)&#xA;sheetController.treatPullBarAsClear = false&#xA;&#xA;// Disable the dismiss on background tap functionality&#xA;sheetController.dismissOnOverlayTap = false&#xA;&#xA;// Disable the ability to pull down to dismiss the modal&#xA;sheetController.dismissOnPull = false&#xA;&#xA;/// Allow pulling past the maximum height and bounce back. Defaults to true.&#xA;sheetController.allowPullingPastMaxHeight = false&#xA;&#xA;/// Automatically grow/move the sheet to accomidate the keyboard. Defaults to true.&#xA;sheetController.autoAdjustToKeyboard = true&#xA;&#xA;// Color of the sheet anywhere the child view controller may not show (or is transparent), such as behind the keyboard currently&#xA;sheetController.contentBackgroundColor&#xA;&#xA;// Change the overlay color&#xA;sheetController.overlayColor = UIColor.red&#xA;&#xA;self.present(sheetController, animated: false, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Handling dismiss events&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sheet = SheetViewController(controller: controller, sizes: [.fixed(420), .fullScreen])&#xA;sheet.shouldDismiss = { _ in&#xA;// This is called just before the sheet is dismissed. Return false to prevent the build in dismiss events&#xA;    return true&#xA;}&#xA;sheet.didDismiss = { _ in&#xA;    // This is called after the sheet is dismissed&#xA;}&#xA;self.present(sheet, animated: false, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**&lt;/p&gt; &#xA;&lt;h2&gt;Inline presentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Starting with version 2.0.0, the ability to present inline was added. THis allows recreating behaviours like Maps&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let controller = MyViewController()&#xA;&#xA;let options = SheetOptions(&#xA;    useInlineMode: true&#xA;)&#xA;&#xA;let sheetController = SheetViewController(controller: controller, sizes: [.percent(0.3), .fullscreen], options: options)&#xA;sheetController.allowGestureThroughOverlay = true&#xA;&#xA;// animate in&#xA;sheetController.animateIn(to: view, in: self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scrolling&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// This should be called by any child view controller that expects the sheet to use be able to expand/collapse when the scroll view is at the top.&#xA;func handleScrollView(_ scrollView: UIScrollView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is an extension on UIViewController that gives you a &lt;code&gt;sheetViewController&lt;/code&gt; that attempts to find the current SheetViewController so you can attach like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLoad() {&#xA;  super.viewDidLoad()&#xA;  &#xA;  self.sheetViewController!.handleScrollView(self.scrollView) // or tableView/collectionView/etc&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Package Management&lt;/h2&gt; &#xA;&lt;p&gt;We support &lt;a href=&#34;http://cocoapods.org/&#34;&gt;cocoapods&lt;/a&gt;, carthage, and SPM.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cocoapods&lt;/strong&gt; Add this to your podfile to add FittedSheets to your project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;FittedSheets&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;FittedSheets uses the MIT License:&lt;/p&gt; &#xA;&lt;p&gt;Please see included &lt;a href=&#34;https://raw.githubusercontent.com/gordontucker/FittedSheets/master/LICENSE&#34;&gt;LICENSE file&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>