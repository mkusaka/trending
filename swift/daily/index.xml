<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T01:44:53Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ochococo/Design-Patterns-In-Swift</title>
    <updated>2023-02-19T01:44:53Z</updated>
    <id>tag:github.com,2023-02-19:/ochococo/Design-Patterns-In-Swift</id>
    <link href="https://github.com/ochococo/Design-Patterns-In-Swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📖 Design Patterns implemented in Swift 5.0&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Design Patterns implemented in Swift 5.0&lt;/h1&gt; &#xA;&lt;p&gt;A short cheat-sheet with Xcode 10.2 Playground (&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/Design-Patterns.playground.zip&#34;&gt;Design-Patterns.playground.zip&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/ochococo/Design-Patterns-In-Swift/raw/master/README-CN.md&#34;&gt;🇨🇳中文版&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;👷 Project started by: &lt;a href=&#34;http://twitter.com/nsmeme&#34;&gt;@nsmeme&lt;/a&gt; (Oktawian Chojnacki)&lt;/p&gt; &#xA;&lt;p&gt;👷 中文版由 &lt;a href=&#34;https://twitter.com/binglogo&#34;&gt;@binglogo&lt;/a&gt; (棒棒彬) 整理翻译。&lt;/p&gt; &#xA;&lt;p&gt;🚀 How to generate README, Playground and zip from source: &lt;a href=&#34;https://github.com/ochococo/Design-Patterns-In-Swift/raw/master/GENERATE.md&#34;&gt;GENERATE.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;print(&#34;Welcome!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#behavioral&#34;&gt;Behavioral&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#creational&#34;&gt;Creational&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#structural&#34;&gt;Structural&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-chain-of-responsibility&#34;&gt;🐝 Chain Of Responsibility&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-abstract-factory&#34;&gt;🌰 Abstract Factory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-adapter&#34;&gt;🔌 Adapter&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-command&#34;&gt;👫 Command&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-builder&#34;&gt;👷 Builder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-bridge&#34;&gt;🌉 Bridge&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-interpreter&#34;&gt;🎶 Interpreter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-factory-method&#34;&gt;🏭 Factory Method&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-composite&#34;&gt;🌿 Composite&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-iterator&#34;&gt;🍫 Iterator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-monostate&#34;&gt;🔂 Monostate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-decorator&#34;&gt;🍧 Decorator&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-mediator&#34;&gt;💐 Mediator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-prototype&#34;&gt;🃏 Prototype&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-fa-ade&#34;&gt;🎁 Façade&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-memento&#34;&gt;💾 Memento&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-singleton&#34;&gt;💍 Singleton&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-flyweight&#34;&gt;🍃 Flyweight&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-observer&#34;&gt;👓 Observer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-protection-proxy&#34;&gt;☔ Protection Proxy&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-state&#34;&gt;🐉 State&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-virtual-proxy&#34;&gt;🍬 Virtual Proxy&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-strategy&#34;&gt;💡 Strategy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-visitor&#34;&gt;🏃 Visitor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-template-method&#34;&gt;📝 Template Method&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Behavioral&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Behavioral_pattern&#34;&gt;wikipedia.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🐝 Chain Of Responsibility&lt;/h2&gt; &#xA;&lt;p&gt;The chain of responsibility pattern is used to process varied requests, each of which may be dealt with by a different handler.&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;protocol Withdrawing {&#xA;    func withdraw(amount: Int) -&amp;gt; Bool&#xA;}&#xA;&#xA;final class MoneyPile: Withdrawing {&#xA;&#xA;    let value: Int&#xA;    var quantity: Int&#xA;    var next: Withdrawing?&#xA;&#xA;    init(value: Int, quantity: Int, next: Withdrawing?) {&#xA;        self.value = value&#xA;        self.quantity = quantity&#xA;        self.next = next&#xA;    }&#xA;&#xA;    func withdraw(amount: Int) -&amp;gt; Bool {&#xA;&#xA;        var amount = amount&#xA;&#xA;        func canTakeSomeBill(want: Int) -&amp;gt; Bool {&#xA;            return (want / self.value) &amp;gt; 0&#xA;        }&#xA;&#xA;        var quantity = self.quantity&#xA;&#xA;        while canTakeSomeBill(want: amount) {&#xA;&#xA;            if quantity == 0 {&#xA;                break&#xA;            }&#xA;&#xA;            amount -= self.value&#xA;            quantity -= 1&#xA;        }&#xA;&#xA;        guard amount &amp;gt; 0 else {&#xA;            return true&#xA;        }&#xA;&#xA;        if let next = self.next {&#xA;            return next.withdraw(amount: amount)&#xA;        }&#xA;&#xA;        return false&#xA;    }&#xA;}&#xA;&#xA;final class ATM: Withdrawing {&#xA;&#xA;    private var hundred: Withdrawing&#xA;    private var fifty: Withdrawing&#xA;    private var twenty: Withdrawing&#xA;    private var ten: Withdrawing&#xA;&#xA;    private var startPile: Withdrawing {&#xA;        return self.hundred&#xA;    }&#xA;&#xA;    init(hundred: Withdrawing,&#xA;           fifty: Withdrawing,&#xA;          twenty: Withdrawing,&#xA;             ten: Withdrawing) {&#xA;&#xA;        self.hundred = hundred&#xA;        self.fifty = fifty&#xA;        self.twenty = twenty&#xA;        self.ten = ten&#xA;    }&#xA;&#xA;    func withdraw(amount: Int) -&amp;gt; Bool {&#xA;        return startPile.withdraw(amount: amount)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create piles of money and link them together 10 &amp;lt; 20 &amp;lt; 50 &amp;lt; 100.**&#xA;let ten = MoneyPile(value: 10, quantity: 6, next: nil)&#xA;let twenty = MoneyPile(value: 20, quantity: 2, next: ten)&#xA;let fifty = MoneyPile(value: 50, quantity: 2, next: twenty)&#xA;let hundred = MoneyPile(value: 100, quantity: 1, next: fifty)&#xA;&#xA;// Build ATM.&#xA;var atm = ATM(hundred: hundred, fifty: fifty, twenty: twenty, ten: ten)&#xA;atm.withdraw(amount: 310) // Cannot because ATM has only 300&#xA;atm.withdraw(amount: 100) // Can withdraw - 1x100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👫 Command&lt;/h2&gt; &#xA;&lt;p&gt;The command pattern is used to express a request, including the call to be made and all of its required parameters, in a command object. The command may then be executed immediately or held for later use.&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DoorCommand {&#xA;    func execute() -&amp;gt; String&#xA;}&#xA;&#xA;final class OpenCommand: DoorCommand {&#xA;    let doors:String&#xA;&#xA;    required init(doors: String) {&#xA;        self.doors = doors&#xA;    }&#xA;    &#xA;    func execute() -&amp;gt; String {&#xA;        return &#34;Opened \(doors)&#34;&#xA;    }&#xA;}&#xA;&#xA;final class CloseCommand: DoorCommand {&#xA;    let doors:String&#xA;&#xA;    required init(doors: String) {&#xA;        self.doors = doors&#xA;    }&#xA;    &#xA;    func execute() -&amp;gt; String {&#xA;        return &#34;Closed \(doors)&#34;&#xA;    }&#xA;}&#xA;&#xA;final class HAL9000DoorsOperations {&#xA;    let openCommand: DoorCommand&#xA;    let closeCommand: DoorCommand&#xA;    &#xA;    init(doors: String) {&#xA;        self.openCommand = OpenCommand(doors:doors)&#xA;        self.closeCommand = CloseCommand(doors:doors)&#xA;    }&#xA;    &#xA;    func close() -&amp;gt; String {&#xA;        return closeCommand.execute()&#xA;    }&#xA;    &#xA;    func open() -&amp;gt; String {&#xA;        return openCommand.execute()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let podBayDoors = &#34;Pod Bay Doors&#34;&#xA;let doorModule = HAL9000DoorsOperations(doors:podBayDoors)&#xA;&#xA;doorModule.open()&#xA;doorModule.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🎶 Interpreter&lt;/h2&gt; &#xA;&lt;p&gt;The interpreter pattern is used to evaluate sentences in a language.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;protocol IntegerExpression {&#xA;    func evaluate(_ context: IntegerContext) -&amp;gt; Int&#xA;    func replace(character: Character, integerExpression: IntegerExpression) -&amp;gt; IntegerExpression&#xA;    func copied() -&amp;gt; IntegerExpression&#xA;}&#xA;&#xA;final class IntegerContext {&#xA;    private var data: [Character:Int] = [:]&#xA;&#xA;    func lookup(name: Character) -&amp;gt; Int {&#xA;        return self.data[name]!&#xA;    }&#xA;&#xA;    func assign(expression: IntegerVariableExpression, value: Int) {&#xA;        self.data[expression.name] = value&#xA;    }&#xA;}&#xA;&#xA;final class IntegerVariableExpression: IntegerExpression {&#xA;    let name: Character&#xA;&#xA;    init(name: Character) {&#xA;        self.name = name&#xA;    }&#xA;&#xA;    func evaluate(_ context: IntegerContext) -&amp;gt; Int {&#xA;        return context.lookup(name: self.name)&#xA;    }&#xA;&#xA;    func replace(character name: Character, integerExpression: IntegerExpression) -&amp;gt; IntegerExpression {&#xA;        if name == self.name {&#xA;            return integerExpression.copied()&#xA;        } else {&#xA;            return IntegerVariableExpression(name: self.name)&#xA;        }&#xA;    }&#xA;&#xA;    func copied() -&amp;gt; IntegerExpression {&#xA;        return IntegerVariableExpression(name: self.name)&#xA;    }&#xA;}&#xA;&#xA;final class AddExpression: IntegerExpression {&#xA;    private var operand1: IntegerExpression&#xA;    private var operand2: IntegerExpression&#xA;&#xA;    init(op1: IntegerExpression, op2: IntegerExpression) {&#xA;        self.operand1 = op1&#xA;        self.operand2 = op2&#xA;    }&#xA;&#xA;    func evaluate(_ context: IntegerContext) -&amp;gt; Int {&#xA;        return self.operand1.evaluate(context) + self.operand2.evaluate(context)&#xA;    }&#xA;&#xA;    func replace(character: Character, integerExpression: IntegerExpression) -&amp;gt; IntegerExpression {&#xA;        return AddExpression(op1: operand1.replace(character: character, integerExpression: integerExpression),&#xA;                             op2: operand2.replace(character: character, integerExpression: integerExpression))&#xA;    }&#xA;&#xA;    func copied() -&amp;gt; IntegerExpression {&#xA;        return AddExpression(op1: self.operand1, op2: self.operand2)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var context = IntegerContext()&#xA;&#xA;var a = IntegerVariableExpression(name: &#34;A&#34;)&#xA;var b = IntegerVariableExpression(name: &#34;B&#34;)&#xA;var c = IntegerVariableExpression(name: &#34;C&#34;)&#xA;&#xA;var expression = AddExpression(op1: a, op2: AddExpression(op1: b, op2: c)) // a + (b + c)&#xA;&#xA;context.assign(expression: a, value: 2)&#xA;context.assign(expression: b, value: 1)&#xA;context.assign(expression: c, value: 3)&#xA;&#xA;var result = expression.evaluate(context)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍫 Iterator&lt;/h2&gt; &#xA;&lt;p&gt;The iterator pattern is used to provide a standard interface for traversing a collection of items in an aggregate object without the need to understand its underlying structure.&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Novella {&#xA;    let name: String&#xA;}&#xA;&#xA;struct Novellas {&#xA;    let novellas: [Novella]&#xA;}&#xA;&#xA;struct NovellasIterator: IteratorProtocol {&#xA;&#xA;    private var current = 0&#xA;    private let novellas: [Novella]&#xA;&#xA;    init(novellas: [Novella]) {&#xA;        self.novellas = novellas&#xA;    }&#xA;&#xA;    mutating func next() -&amp;gt; Novella? {&#xA;        defer { current += 1 }&#xA;        return novellas.count &amp;gt; current ? novellas[current] : nil&#xA;    }&#xA;}&#xA;&#xA;extension Novellas: Sequence {&#xA;    func makeIterator() -&amp;gt; NovellasIterator {&#xA;        return NovellasIterator(novellas: novellas)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let greatNovellas = Novellas(novellas: [Novella(name: &#34;The Mist&#34;)] )&#xA;&#xA;for novella in greatNovellas {&#xA;    print(&#34;I&#39;ve read: \(novella)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💐 Mediator&lt;/h2&gt; &#xA;&lt;p&gt;The mediator pattern is used to reduce coupling between classes that communicate with each other. Instead of classes communicating directly, and thus requiring knowledge of their implementation, the classes send messages via a mediator object.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Receiver {&#xA;    associatedtype MessageType&#xA;    func receive(message: MessageType)&#xA;}&#xA;&#xA;protocol Sender {&#xA;    associatedtype MessageType&#xA;    associatedtype ReceiverType: Receiver&#xA;    &#xA;    var recipients: [ReceiverType] { get }&#xA;    &#xA;    func send(message: MessageType)&#xA;}&#xA;&#xA;struct Programmer: Receiver {&#xA;    let name: String&#xA;    &#xA;    init(name: String) {&#xA;        self.name = name&#xA;    }&#xA;    &#xA;    func receive(message: String) {&#xA;        print(&#34;\(name) received: \(message)&#34;)&#xA;    }&#xA;}&#xA;&#xA;final class MessageMediator: Sender {&#xA;    internal var recipients: [Programmer] = []&#xA;    &#xA;    func add(recipient: Programmer) {&#xA;        recipients.append(recipient)&#xA;    }&#xA;    &#xA;    func send(message: String) {&#xA;        for recipient in recipients {&#xA;            recipient.receive(message: message)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func spamMonster(message: String, worker: MessageMediator) {&#xA;    worker.send(message: message)&#xA;}&#xA;&#xA;let messagesMediator = MessageMediator()&#xA;&#xA;let user0 = Programmer(name: &#34;Linus Torvalds&#34;)&#xA;let user1 = Programmer(name: &#34;Avadis &#39;Avie&#39; Tevanian&#34;)&#xA;messagesMediator.add(recipient: user0)&#xA;messagesMediator.add(recipient: user1)&#xA;&#xA;spamMonster(message: &#34;I&#39;d Like to Add you to My Professional Network&#34;, worker: messagesMediator)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💾 Memento&lt;/h2&gt; &#xA;&lt;p&gt;The memento pattern is used to capture the current state of an object and store it in such a manner that it can be restored at a later time without breaking the rules of encapsulation.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias Memento = [String: String]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Originator&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol MementoConvertible {&#xA;    var memento: Memento { get }&#xA;    init?(memento: Memento)&#xA;}&#xA;&#xA;struct GameState: MementoConvertible {&#xA;&#xA;    private enum Keys {&#xA;        static let chapter = &#34;com.valve.halflife.chapter&#34;&#xA;        static let weapon = &#34;com.valve.halflife.weapon&#34;&#xA;    }&#xA;&#xA;    var chapter: String&#xA;    var weapon: String&#xA;&#xA;    init(chapter: String, weapon: String) {&#xA;        self.chapter = chapter&#xA;        self.weapon = weapon&#xA;    }&#xA;&#xA;    init?(memento: Memento) {&#xA;        guard let mementoChapter = memento[Keys.chapter],&#xA;              let mementoWeapon = memento[Keys.weapon] else {&#xA;            return nil&#xA;        }&#xA;&#xA;        chapter = mementoChapter&#xA;        weapon = mementoWeapon&#xA;    }&#xA;&#xA;    var memento: Memento {&#xA;        return [ Keys.chapter: chapter, Keys.weapon: weapon ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Caretaker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum CheckPoint {&#xA;&#xA;    private static let defaults = UserDefaults.standard&#xA;&#xA;    static func save(_ state: MementoConvertible, saveName: String) {&#xA;        defaults.set(state.memento, forKey: saveName)&#xA;        defaults.synchronize()&#xA;    }&#xA;&#xA;    static func restore(saveName: String) -&amp;gt; Any? {&#xA;        return defaults.object(forKey: saveName)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var gameState = GameState(chapter: &#34;Black Mesa Inbound&#34;, weapon: &#34;Crowbar&#34;)&#xA;&#xA;gameState.chapter = &#34;Anomalous Materials&#34;&#xA;gameState.weapon = &#34;Glock 17&#34;&#xA;CheckPoint.save(gameState, saveName: &#34;gameState1&#34;)&#xA;&#xA;gameState.chapter = &#34;Unforeseen Consequences&#34;&#xA;gameState.weapon = &#34;MP5&#34;&#xA;CheckPoint.save(gameState, saveName: &#34;gameState2&#34;)&#xA;&#xA;gameState.chapter = &#34;Office Complex&#34;&#xA;gameState.weapon = &#34;Crossbow&#34;&#xA;CheckPoint.save(gameState, saveName: &#34;gameState3&#34;)&#xA;&#xA;if let memento = CheckPoint.restore(saveName: &#34;gameState1&#34;) as? Memento {&#xA;    let finalState = GameState(memento: memento)&#xA;    dump(finalState)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👓 Observer&lt;/h2&gt; &#xA;&lt;p&gt;The observer pattern is used to allow an object to publish changes to its state. Other objects subscribe to be immediately notified of any changes.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol PropertyObserver : class {&#xA;    func willChange(propertyName: String, newPropertyValue: Any?)&#xA;    func didChange(propertyName: String, oldPropertyValue: Any?)&#xA;}&#xA;&#xA;final class TestChambers {&#xA;&#xA;    weak var observer:PropertyObserver?&#xA;&#xA;    private let testChamberNumberName = &#34;testChamberNumber&#34;&#xA;&#xA;    var testChamberNumber: Int = 0 {&#xA;        willSet(newValue) {&#xA;            observer?.willChange(propertyName: testChamberNumberName, newPropertyValue: newValue)&#xA;        }&#xA;        didSet {&#xA;            observer?.didChange(propertyName: testChamberNumberName, oldPropertyValue: oldValue)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;final class Observer : PropertyObserver {&#xA;    func willChange(propertyName: String, newPropertyValue: Any?) {&#xA;        if newPropertyValue as? Int == 1 {&#xA;            print(&#34;Okay. Look. We both said a lot of things that you&#39;re going to regret.&#34;)&#xA;        }&#xA;    }&#xA;&#xA;    func didChange(propertyName: String, oldPropertyValue: Any?) {&#xA;        if oldPropertyValue as? Int == 0 {&#xA;            print(&#34;Sorry about the mess. I&#39;ve really let the place go since you killed me.&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var observerInstance = Observer()&#xA;var testChambers = TestChambers()&#xA;testChambers.observer = observerInstance&#xA;testChambers.testChamberNumber += 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🐉 State&lt;/h2&gt; &#xA;&lt;p&gt;The state pattern is used to alter the behaviour of an object as its internal state changes. The pattern allows the class for an object to apparently change at run-time.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class Context {&#xA;&#x9;private var state: State = UnauthorizedState()&#xA;&#xA;    var isAuthorized: Bool {&#xA;        get { return state.isAuthorized(context: self) }&#xA;    }&#xA;&#xA;    var userId: String? {&#xA;        get { return state.userId(context: self) }&#xA;    }&#xA;&#xA;&#x9;func changeStateToAuthorized(userId: String) {&#xA;&#x9;&#x9;state = AuthorizedState(userId: userId)&#xA;&#x9;}&#xA;&#xA;&#x9;func changeStateToUnauthorized() {&#xA;&#x9;&#x9;state = UnauthorizedState()&#xA;&#x9;}&#xA;}&#xA;&#xA;protocol State {&#xA;&#x9;func isAuthorized(context: Context) -&amp;gt; Bool&#xA;&#x9;func userId(context: Context) -&amp;gt; String?&#xA;}&#xA;&#xA;class UnauthorizedState: State {&#xA;&#x9;func isAuthorized(context: Context) -&amp;gt; Bool { return false }&#xA;&#xA;&#x9;func userId(context: Context) -&amp;gt; String? { return nil }&#xA;}&#xA;&#xA;class AuthorizedState: State {&#xA;&#x9;let userId: String&#xA;&#xA;&#x9;init(userId: String) { self.userId = userId }&#xA;&#xA;&#x9;func isAuthorized(context: Context) -&amp;gt; Bool { return true }&#xA;&#xA;&#x9;func userId(context: Context) -&amp;gt; String? { return userId }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let userContext = Context()&#xA;(userContext.isAuthorized, userContext.userId)&#xA;userContext.changeStateToAuthorized(userId: &#34;admin&#34;)&#xA;(userContext.isAuthorized, userContext.userId) // now logged in as &#34;admin&#34;&#xA;userContext.changeStateToUnauthorized()&#xA;(userContext.isAuthorized, userContext.userId)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💡 Strategy&lt;/h2&gt; &#xA;&lt;p&gt;The strategy pattern is used to create an interchangeable family of algorithms from which the required process is chosen at run-time.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;struct TestSubject {&#xA;    let pupilDiameter: Double&#xA;    let blushResponse: Double&#xA;    let isOrganic: Bool&#xA;}&#xA;&#xA;protocol RealnessTesting: AnyObject {&#xA;    func testRealness(_ testSubject: TestSubject) -&amp;gt; Bool&#xA;}&#xA;&#xA;final class VoightKampffTest: RealnessTesting {&#xA;    func testRealness(_ testSubject: TestSubject) -&amp;gt; Bool {&#xA;        return testSubject.pupilDiameter &amp;lt; 30.0 || testSubject.blushResponse == 0.0&#xA;    }&#xA;}&#xA;&#xA;final class GeneticTest: RealnessTesting {&#xA;    func testRealness(_ testSubject: TestSubject) -&amp;gt; Bool {&#xA;        return testSubject.isOrganic&#xA;    }&#xA;}&#xA;&#xA;final class BladeRunner {&#xA;    private let strategy: RealnessTesting&#xA;&#xA;    init(test: RealnessTesting) {&#xA;        self.strategy = test&#xA;    }&#xA;&#xA;    func testIfAndroid(_ testSubject: TestSubject) -&amp;gt; Bool {&#xA;        return !strategy.testRealness(testSubject)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;let rachel = TestSubject(pupilDiameter: 30.2,&#xA;                         blushResponse: 0.3,&#xA;                         isOrganic: false)&#xA;&#xA;// Deckard is using a traditional test&#xA;let deckard = BladeRunner(test: VoightKampffTest())&#xA;let isRachelAndroid = deckard.testIfAndroid(rachel)&#xA;&#xA;// Gaff is using a very precise method&#xA;let gaff = BladeRunner(test: GeneticTest())&#xA;let isDeckardAndroid = gaff.testIfAndroid(rachel)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📝 Template Method&lt;/h2&gt; &#xA;&lt;p&gt;The template method pattern defines the steps of an algorithm and allows the redefinition of one or more of these steps. In this way, the template method protects the algorithm, the order of execution and provides abstract methods that can be implemented by concrete types.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Garden {&#xA;    func prepareSoil()&#xA;    func plantSeeds()&#xA;    func waterPlants()&#xA;    func prepareGarden()&#xA;}&#xA;&#xA;extension Garden {&#xA;&#xA;    func prepareGarden() {&#xA;        prepareSoil()&#xA;        plantSeeds()&#xA;        waterPlants()&#xA;    }&#xA;}&#xA;&#xA;final class RoseGarden: Garden {&#xA;&#xA;    func prepare() {&#xA;        prepareGarden()&#xA;    }&#xA;&#xA;    func prepareSoil() {&#xA;        print (&#34;prepare soil for rose garden&#34;)&#xA;    }&#xA;&#xA;    func plantSeeds() {&#xA;        print (&#34;plant seeds for rose garden&#34;)&#xA;    }&#xA;&#xA;    func waterPlants() {&#xA;       print (&#34;water the rose garden&#34;)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;let roseGarden = RoseGarden()&#xA;roseGarden.prepare()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🏃 Visitor&lt;/h2&gt; &#xA;&lt;p&gt;The visitor pattern is used to separate a relatively complex set of structured data classes from the functionality that may be performed upon the data that they hold.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol PlanetVisitor {&#xA;&#x9;func visit(planet: PlanetAlderaan)&#xA;&#x9;func visit(planet: PlanetCoruscant)&#xA;&#x9;func visit(planet: PlanetTatooine)&#xA;    func visit(planet: MoonJedha)&#xA;}&#xA;&#xA;protocol Planet {&#xA;&#x9;func accept(visitor: PlanetVisitor)&#xA;}&#xA;&#xA;final class MoonJedha: Planet {&#xA;    func accept(visitor: PlanetVisitor) { visitor.visit(planet: self) }&#xA;}&#xA;&#xA;final class PlanetAlderaan: Planet {&#xA;    func accept(visitor: PlanetVisitor) { visitor.visit(planet: self) }&#xA;}&#xA;&#xA;final class PlanetCoruscant: Planet {&#xA;&#x9;func accept(visitor: PlanetVisitor) { visitor.visit(planet: self) }&#xA;}&#xA;&#xA;final class PlanetTatooine: Planet {&#xA;&#x9;func accept(visitor: PlanetVisitor) { visitor.visit(planet: self) }&#xA;}&#xA;&#xA;final class NameVisitor: PlanetVisitor {&#xA;&#x9;var name = &#34;&#34;&#xA;&#xA;&#x9;func visit(planet: PlanetAlderaan)  { name = &#34;Alderaan&#34; }&#xA;&#x9;func visit(planet: PlanetCoruscant) { name = &#34;Coruscant&#34; }&#xA;&#x9;func visit(planet: PlanetTatooine)  { name = &#34;Tatooine&#34; }&#xA;    func visit(planet: MoonJedha)     &#x9;{ name = &#34;Jedha&#34; }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let planets: [Planet] = [PlanetAlderaan(), PlanetCoruscant(), PlanetTatooine(), MoonJedha()]&#xA;&#xA;let names = planets.map { (planet: Planet) -&amp;gt; String in&#xA;&#x9;let visitor = NameVisitor()&#xA;    planet.accept(visitor: visitor)&#xA;&#xA;    return visitor.name&#xA;}&#xA;&#xA;names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Creational&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In software engineering, creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Creational_pattern&#34;&gt;wikipedia.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🌰 Abstract Factory&lt;/h2&gt; &#xA;&lt;p&gt;The abstract factory pattern is used to provide a client with a set of related or dependant objects. The &#34;family&#34; of objects created by the factory are determined at run-time.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Protocols&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;protocol BurgerDescribing {&#xA;    var ingredients: [String] { get }&#xA;}&#xA;&#xA;struct CheeseBurger: BurgerDescribing {&#xA;    let ingredients: [String]&#xA;}&#xA;&#xA;protocol BurgerMaking {&#xA;    func make() -&amp;gt; BurgerDescribing&#xA;}&#xA;&#xA;// Number implementations with factory methods&#xA;&#xA;final class BigKahunaBurger: BurgerMaking {&#xA;    func make() -&amp;gt; BurgerDescribing {&#xA;        return CheeseBurger(ingredients: [&#34;Cheese&#34;, &#34;Burger&#34;, &#34;Lettuce&#34;, &#34;Tomato&#34;])&#xA;    }&#xA;}&#xA;&#xA;final class JackInTheBox: BurgerMaking {&#xA;    func make() -&amp;gt; BurgerDescribing {&#xA;        return CheeseBurger(ingredients: [&#34;Cheese&#34;, &#34;Burger&#34;, &#34;Tomato&#34;, &#34;Onions&#34;])&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Abstract factory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;enum BurgerFactoryType: BurgerMaking {&#xA;&#xA;    case bigKahuna&#xA;    case jackInTheBox&#xA;&#xA;    func make() -&amp;gt; BurgerDescribing {&#xA;        switch self {&#xA;        case .bigKahuna:&#xA;            return BigKahunaBurger().make()&#xA;        case .jackInTheBox:&#xA;            return JackInTheBox().make()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bigKahuna = BurgerFactoryType.bigKahuna.make()&#xA;let jackInTheBox = BurgerFactoryType.jackInTheBox.make()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👷 Builder&lt;/h2&gt; &#xA;&lt;p&gt;The builder pattern is used to create complex objects with constituent parts that must be created in the same order or using a specific algorithm. An external class controls the construction algorithm.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class DeathStarBuilder {&#xA;&#xA;    var x: Double?&#xA;    var y: Double?&#xA;    var z: Double?&#xA;&#xA;    typealias BuilderClosure = (DeathStarBuilder) -&amp;gt; ()&#xA;&#xA;    init(buildClosure: BuilderClosure) {&#xA;        buildClosure(self)&#xA;    }&#xA;}&#xA;&#xA;struct DeathStar : CustomStringConvertible {&#xA;&#xA;    let x: Double&#xA;    let y: Double&#xA;    let z: Double&#xA;&#xA;    init?(builder: DeathStarBuilder) {&#xA;&#xA;        if let x = builder.x, let y = builder.y, let z = builder.z {&#xA;            self.x = x&#xA;            self.y = y&#xA;            self.z = z&#xA;        } else {&#xA;            return nil&#xA;        }&#xA;    }&#xA;&#xA;    var description:String {&#xA;        return &#34;Death Star at (x:\(x) y:\(y) z:\(z))&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let empire = DeathStarBuilder { builder in&#xA;    builder.x = 0.1&#xA;    builder.y = 0.2&#xA;    builder.z = 0.3&#xA;}&#xA;&#xA;let deathStar = DeathStar(builder:empire)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🏭 Factory Method&lt;/h2&gt; &#xA;&lt;p&gt;The factory pattern is used to replace class constructors, abstracting the process of object generation so that the type of the object instantiated can be determined at run-time.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol CurrencyDescribing {&#xA;    var symbol: String { get }&#xA;    var code: String { get }&#xA;}&#xA;&#xA;final class Euro: CurrencyDescribing {&#xA;    var symbol: String {&#xA;        return &#34;€&#34;&#xA;    }&#xA;    &#xA;    var code: String {&#xA;        return &#34;EUR&#34;&#xA;    }&#xA;}&#xA;&#xA;final class UnitedStatesDolar: CurrencyDescribing {&#xA;    var symbol: String {&#xA;        return &#34;$&#34;&#xA;    }&#xA;    &#xA;    var code: String {&#xA;        return &#34;USD&#34;&#xA;    }&#xA;}&#xA;&#xA;enum Country {&#xA;    case unitedStates&#xA;    case spain&#xA;    case uk&#xA;    case greece&#xA;}&#xA;&#xA;enum CurrencyFactory {&#xA;    static func currency(for country: Country) -&amp;gt; CurrencyDescribing? {&#xA;&#xA;        switch country {&#xA;            case .spain, .greece:&#xA;                return Euro()&#xA;            case .unitedStates:&#xA;                return UnitedStatesDolar()&#xA;            default:&#xA;                return nil&#xA;        }&#xA;        &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let noCurrencyCode = &#34;No Currency Code Available&#34;&#xA;&#xA;CurrencyFactory.currency(for: .greece)?.code ?? noCurrencyCode&#xA;CurrencyFactory.currency(for: .spain)?.code ?? noCurrencyCode&#xA;CurrencyFactory.currency(for: .unitedStates)?.code ?? noCurrencyCode&#xA;CurrencyFactory.currency(for: .uk)?.code ?? noCurrencyCode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔂 Monostate&lt;/h2&gt; &#xA;&lt;p&gt;The monostate pattern is another way to achieve singularity. It works through a completely different mechanism, it enforces the behavior of singularity without imposing structural constraints. So in that case, monostate saves the state as static instead of the entire instance as a singleton. &lt;a href=&#34;http://staff.cs.utu.fi/~jounsmed/doos_06/material/SingletonAndMonostate.pdf&#34;&gt;SINGLETON and MONOSTATE - Robert C. Martin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Settings {&#xA;&#xA;    enum Theme {&#xA;        case `default`&#xA;        case old&#xA;        case new&#xA;    }&#xA;&#xA;    private static var theme: Theme?&#xA;&#xA;    var currentTheme: Theme {&#xA;        get { Settings.theme ?? .default }&#xA;        set(newTheme) { Settings.theme = newTheme }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;import SwiftUI&#xA;&#xA;// When change the theme&#xA;let settings = Settings() // Starts using theme .old&#xA;settings.currentTheme = .new // Change theme to .new&#xA;&#xA;// On screen 1&#xA;let screenColor: Color = Settings().currentTheme == .old ? .gray : .white&#xA;&#xA;// On screen 2&#xA;let screenTitle: String = Settings().currentTheme == .old ? &#34;Itunes Connect&#34; : &#34;App Store Connect&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🃏 Prototype&lt;/h2&gt; &#xA;&lt;p&gt;The prototype pattern is used to instantiate a new object by copying all of the properties of an existing object, creating an independent clone. This practise is particularly useful when the construction of a new object is inefficient.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MoonWorker {&#xA;&#xA;    let name: String&#xA;    var health: Int = 100&#xA;&#xA;    init(name: String) {&#xA;        self.name = name&#xA;    }&#xA;&#xA;    func clone() -&amp;gt; MoonWorker {&#xA;        return MoonWorker(name: name)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let prototype = MoonWorker(name: &#34;Sam Bell&#34;)&#xA;&#xA;var bell1 = prototype.clone()&#xA;bell1.health = 12&#xA;&#xA;var bell2 = prototype.clone()&#xA;bell2.health = 23&#xA;&#xA;var bell3 = prototype.clone()&#xA;bell3.health = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💍 Singleton&lt;/h2&gt; &#xA;&lt;p&gt;The singleton pattern ensures that only one object of a particular class is ever created. All further references to objects of the singleton class refer to the same underlying instance. There are very few applications, do not overuse this pattern!&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class ElonMusk {&#xA;&#xA;    static let shared = ElonMusk()&#xA;&#xA;    private init() {&#xA;        // Private initialization to ensure just one instance is created.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let elon = ElonMusk.shared // There is only one Elon Musk folks.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Structural&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In software engineering, structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships between entities.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Structural_pattern&#34;&gt;wikipedia.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🔌 Adapter&lt;/h2&gt; &#xA;&lt;p&gt;The adapter pattern is used to provide a link between two otherwise incompatible types by wrapping the &#34;adaptee&#34; with a class that supports the interface required by the client.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol NewDeathStarSuperLaserAiming {&#xA;    var angleV: Double { get }&#xA;    var angleH: Double { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adaptee&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct OldDeathStarSuperlaserTarget {&#xA;    let angleHorizontal: Float&#xA;    let angleVertical: Float&#xA;&#xA;    init(angleHorizontal: Float, angleVertical: Float) {&#xA;        self.angleHorizontal = angleHorizontal&#xA;        self.angleVertical = angleVertical&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adapter&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct NewDeathStarSuperlaserTarget: NewDeathStarSuperLaserAiming {&#xA;&#xA;    private let target: OldDeathStarSuperlaserTarget&#xA;&#xA;    var angleV: Double {&#xA;        return Double(target.angleVertical)&#xA;    }&#xA;&#xA;    var angleH: Double {&#xA;        return Double(target.angleHorizontal)&#xA;    }&#xA;&#xA;    init(_ target: OldDeathStarSuperlaserTarget) {&#xA;        self.target = target&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let target = OldDeathStarSuperlaserTarget(angleHorizontal: 14.0, angleVertical: 12.0)&#xA;let newFormat = NewDeathStarSuperlaserTarget(target)&#xA;&#xA;newFormat.angleH&#xA;newFormat.angleV&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🌉 Bridge&lt;/h2&gt; &#xA;&lt;p&gt;The bridge pattern is used to separate the abstract elements of a class from the implementation details, providing the means to replace the implementation details without modifying the abstraction.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Switch {&#xA;    var appliance: Appliance { get set }&#xA;    func turnOn()&#xA;}&#xA;&#xA;protocol Appliance {&#xA;    func run()&#xA;}&#xA;&#xA;final class RemoteControl: Switch {&#xA;    var appliance: Appliance&#xA;&#xA;    func turnOn() {&#xA;        self.appliance.run()&#xA;    }&#xA;    &#xA;    init(appliance: Appliance) {&#xA;        self.appliance = appliance&#xA;    }&#xA;}&#xA;&#xA;final class TV: Appliance {&#xA;    func run() {&#xA;        print(&#34;tv turned on&#34;);&#xA;    }&#xA;}&#xA;&#xA;final class VacuumCleaner: Appliance {&#xA;    func run() {&#xA;        print(&#34;vacuum cleaner turned on&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let tvRemoteControl = RemoteControl(appliance: TV())&#xA;tvRemoteControl.turnOn()&#xA;&#xA;let fancyVacuumCleanerRemoteControl = RemoteControl(appliance: VacuumCleaner())&#xA;fancyVacuumCleanerRemoteControl.turnOn()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🌿 Composite&lt;/h2&gt; &#xA;&lt;p&gt;The composite pattern is used to create hierarchical, recursive tree structures of related objects where any element of the structure may be accessed and utilised in a standard manner.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Component&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Shape {&#xA;    func draw(fillColor: String)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Leafs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class Square: Shape {&#xA;    func draw(fillColor: String) {&#xA;        print(&#34;Drawing a Square with color \(fillColor)&#34;)&#xA;    }&#xA;}&#xA;&#xA;final class Circle: Shape {&#xA;    func draw(fillColor: String) {&#xA;        print(&#34;Drawing a circle with color \(fillColor)&#34;)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Composite&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class Whiteboard: Shape {&#xA;&#xA;    private lazy var shapes = [Shape]()&#xA;&#xA;    init(_ shapes: Shape...) {&#xA;        self.shapes = shapes&#xA;    }&#xA;&#xA;    func draw(fillColor: String) {&#xA;        for shape in self.shapes {&#xA;            shape.draw(fillColor: fillColor)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var whiteboard = Whiteboard(Circle(), Square())&#xA;whiteboard.draw(fillColor: &#34;Red&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍧 Decorator&lt;/h2&gt; &#xA;&lt;p&gt;The decorator pattern is used to extend or alter the functionality of objects at run- time by wrapping them in an object of a decorator class. This provides a flexible alternative to using inheritance to modify behaviour.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol CostHaving {&#xA;    var cost: Double { get }&#xA;}&#xA;&#xA;protocol IngredientsHaving {&#xA;    var ingredients: [String] { get }&#xA;}&#xA;&#xA;typealias BeverageDataHaving = CostHaving &amp;amp; IngredientsHaving&#xA;&#xA;struct SimpleCoffee: BeverageDataHaving {&#xA;    let cost: Double = 1.0&#xA;    let ingredients = [&#34;Water&#34;, &#34;Coffee&#34;]&#xA;}&#xA;&#xA;protocol BeverageHaving: BeverageDataHaving {&#xA;    var beverage: BeverageDataHaving { get }&#xA;}&#xA;&#xA;struct Milk: BeverageHaving {&#xA;&#xA;    let beverage: BeverageDataHaving&#xA;&#xA;    var cost: Double {&#xA;        return beverage.cost + 0.5&#xA;    }&#xA;&#xA;    var ingredients: [String] {&#xA;        return beverage.ingredients + [&#34;Milk&#34;]&#xA;    }&#xA;}&#xA;&#xA;struct WhipCoffee: BeverageHaving {&#xA;&#xA;    let beverage: BeverageDataHaving&#xA;&#xA;    var cost: Double {&#xA;        return beverage.cost + 0.5&#xA;    }&#xA;&#xA;    var ingredients: [String] {&#xA;        return beverage.ingredients + [&#34;Whip&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var someCoffee: BeverageDataHaving = SimpleCoffee()&#xA;print(&#34;Cost: \(someCoffee.cost); Ingredients: \(someCoffee.ingredients)&#34;)&#xA;someCoffee = Milk(beverage: someCoffee)&#xA;print(&#34;Cost: \(someCoffee.cost); Ingredients: \(someCoffee.ingredients)&#34;)&#xA;someCoffee = WhipCoffee(beverage: someCoffee)&#xA;print(&#34;Cost: \(someCoffee.cost); Ingredients: \(someCoffee.ingredients)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🎁 Façade&lt;/h2&gt; &#xA;&lt;p&gt;The facade pattern is used to define a simplified interface to a more complex subsystem.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class Defaults {&#xA;&#xA;    private let defaults: UserDefaults&#xA;&#xA;    init(defaults: UserDefaults = .standard) {&#xA;        self.defaults = defaults&#xA;    }&#xA;&#xA;    subscript(key: String) -&amp;gt; String? {&#xA;        get {&#xA;            return defaults.string(forKey: key)&#xA;        }&#xA;&#xA;        set {&#xA;            defaults.set(newValue, forKey: key)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let storage = Defaults()&#xA;&#xA;// Store&#xA;storage[&#34;Bishop&#34;] = &#34;Disconnect me. I’d rather be nothing&#34;&#xA;&#xA;// Read&#xA;storage[&#34;Bishop&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍃 Flyweight&lt;/h2&gt; &#xA;&lt;p&gt;The flyweight pattern is used to minimize memory usage or computational expenses by sharing as much as possible with other similar objects.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Instances of SpecialityCoffee will be the Flyweights&#xA;struct SpecialityCoffee {&#xA;    let origin: String&#xA;}&#xA;&#xA;protocol CoffeeSearching {&#xA;    func search(origin: String) -&amp;gt; SpecialityCoffee?&#xA;}&#xA;&#xA;// Menu acts as a factory and cache for SpecialityCoffee flyweight objects&#xA;final class Menu: CoffeeSearching {&#xA;&#xA;    private var coffeeAvailable: [String: SpecialityCoffee] = [:]&#xA;&#xA;    func search(origin: String) -&amp;gt; SpecialityCoffee? {&#xA;        if coffeeAvailable.index(forKey: origin) == nil {&#xA;            coffeeAvailable[origin] = SpecialityCoffee(origin: origin)&#xA;        }&#xA;&#xA;        return coffeeAvailable[origin]&#xA;    }&#xA;}&#xA;&#xA;final class CoffeeShop {&#xA;    private var orders: [Int: SpecialityCoffee] = [:]&#xA;    private let menu: CoffeeSearching&#xA;&#xA;    init(menu: CoffeeSearching) {&#xA;        self.menu = menu&#xA;    }&#xA;&#xA;    func takeOrder(origin: String, table: Int) {&#xA;        orders[table] = menu.search(origin: origin)&#xA;    }&#xA;&#xA;    func serve() {&#xA;        for (table, origin) in orders {&#xA;            print(&#34;Serving \(origin) to table \(table)&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let coffeeShop = CoffeeShop(menu: Menu())&#xA;&#xA;coffeeShop.takeOrder(origin: &#34;Yirgacheffe, Ethiopia&#34;, table: 1)&#xA;coffeeShop.takeOrder(origin: &#34;Buziraguhindwa, Burundi&#34;, table: 3)&#xA;&#xA;coffeeShop.serve()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;☔ Protection Proxy&lt;/h2&gt; &#xA;&lt;p&gt;The proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. Protection proxy is restricting access.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DoorOpening {&#xA;    func open(doors: String) -&amp;gt; String&#xA;}&#xA;&#xA;final class HAL9000: DoorOpening {&#xA;    func open(doors: String) -&amp;gt; String {&#xA;        return (&#34;HAL9000: Affirmative, Dave. I read you. Opened \(doors).&#34;)&#xA;    }&#xA;}&#xA;&#xA;final class CurrentComputer: DoorOpening {&#xA;    private var computer: HAL9000!&#xA;&#xA;    func authenticate(password: String) -&amp;gt; Bool {&#xA;&#xA;        guard password == &#34;pass&#34; else {&#xA;            return false&#xA;        }&#xA;&#xA;        computer = HAL9000()&#xA;&#xA;        return true&#xA;    }&#xA;&#xA;    func open(doors: String) -&amp;gt; String {&#xA;&#xA;        guard computer != nil else {&#xA;            return &#34;Access Denied. I&#39;m afraid I can&#39;t do that.&#34;&#xA;        }&#xA;&#xA;        return computer.open(doors: doors)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let computer = CurrentComputer()&#xA;let podBay = &#34;Pod Bay Doors&#34;&#xA;&#xA;computer.open(doors: podBay)&#xA;&#xA;computer.authenticate(password: &#34;pass&#34;)&#xA;computer.open(doors: podBay)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍬 Virtual Proxy&lt;/h2&gt; &#xA;&lt;p&gt;The proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. Virtual proxy is used for loading object on demand.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol HEVSuitMedicalAid {&#xA;    func administerMorphine() -&amp;gt; String&#xA;}&#xA;&#xA;final class HEVSuit: HEVSuitMedicalAid {&#xA;    func administerMorphine() -&amp;gt; String {&#xA;        return &#34;Morphine administered.&#34;&#xA;    }&#xA;}&#xA;&#xA;final class HEVSuitHumanInterface: HEVSuitMedicalAid {&#xA;&#xA;    lazy private var physicalSuit: HEVSuit = HEVSuit()&#xA;&#xA;    func administerMorphine() -&amp;gt; String {&#xA;        return physicalSuit.administerMorphine()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let humanInterface = HEVSuitHumanInterface()&#xA;humanInterface.administerMorphine()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Info&lt;/h1&gt; &#xA;&lt;p&gt;📖 Descriptions from: &lt;a href=&#34;http://www.blackwasp.co.uk/GangOfFour.aspx&#34;&gt;Gang of Four Design Patterns Reference Sheet&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>