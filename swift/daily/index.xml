<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-28T02:52:24Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AvdLee/SwiftUIKitView</title>
    <updated>2022-07-28T02:52:24Z</updated>
    <id>tag:github.com,2022-07-28:/AvdLee/SwiftUIKitView</id>
    <link href="https://github.com/AvdLee/SwiftUIKitView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily use UIKit views in your SwiftUI applications. Create Xcode Previews for UIView elements&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUIKitView&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-5.5-F16D39.svg?style=flat&#34; alt=&#34;Swift Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Supports-_Swift_Package_Manager-F16D39.svg?style=flat&#34; alt=&#34;Dependency frameworks&#34;&gt; &lt;a href=&#34;https://twitter.com/twannl&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@Twannl-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Easily use UIKit views in SwiftUI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Convert &lt;code&gt;UIView&lt;/code&gt; to SwiftUI &lt;code&gt;View&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create Xcode Previews from &lt;code&gt;UIView&lt;/code&gt; elements&lt;/li&gt; &#xA; &lt;li&gt;SwiftUI functional updating &lt;code&gt;UIView&lt;/code&gt; properties using a protocol with &lt;a href=&#34;https://www.avanderlee.com/swift/associated-types-protocols/&#34;&gt;Associated Types&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can read more about &lt;a href=&#34;https://www.avanderlee.com/swiftui/integrating-swiftui-with-uikit/&#34;&gt;Getting started with UIKit in SwiftUI and visa versa&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Using SwiftUIKitView in Production Code&lt;/h3&gt; &#xA;&lt;p&gt;Using a &lt;code&gt;UIKit&lt;/code&gt; view directly in SwiftUI for production code requires you to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;UIViewContainer(&amp;lt;YOUR UIKit View&amp;gt;, layout: &amp;lt;YOUR LAYOUT PREFERENCE&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is to prevent a UIKit view from being redrawn on every SwiftUI view redraw.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import SwiftUIKitView&#xA;&#xA;struct SwiftUIwithUIKitView: View {&#xA;    var body: some View {&#xA;        NavigationView {&#xA;            UIViewContainer(UILabel(), layout: .intrinsic) // &amp;lt;- This can be any `UIKit` view.&#xA;                .set(\.text, to: &#34;Hello, UIKit!&#34;) // &amp;lt;- Use key paths for updates.&#xA;                .set(\.backgroundColor, to: UIColor(named: &#34;swiftlee_orange&#34;))&#xA;                .fixedSize()&#xA;                .navigationTitle(&#34;Use UIKit in SwiftUI&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;SwiftUIKitView&lt;/code&gt; in Previews&lt;/h3&gt; &#xA;&lt;p&gt;Performance in Previews is less important, it&#39;s being redrawn either way.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, you can use the more convenient &lt;code&gt;swiftUIView()&lt;/code&gt; modifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;UILabel() // &amp;lt;- This is a `UIKit` view.&#xA;    .swiftUIView(layout: .intrinsic) // &amp;lt;- This is returning a SwiftUI `View`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Creating a preview provider for a &lt;code&gt;UIView&lt;/code&gt; looks as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import SwiftUIKitView&#xA;&#xA;struct UILabelExample_Preview: PreviewProvider {&#xA;    static var previews: some View {&#xA;        UILabel() // &amp;lt;- This is a `UIKit` view.&#xA;            .swiftUIView(layout: .intrinsic) // &amp;lt;- This is a SwiftUI `View`.&#xA;            .set(\.text, to: &#34;Hello, UIKit!&#34;) // &amp;lt;- Use key paths for updates.&#xA;            .fixedSize() // &amp;lt;- Make sure the size is set&#xA;            .previewLayout(.sizeThatFits)&#xA;            .previewDisplayName(&#34;UILabel Preview Example&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which results in the following preview:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AvdLee/SwiftUIKitView/main/Assets/uikit_uilabel_preview.png&#34; width=&#34;750&#34;&gt; &#xA;&lt;h3&gt;KeyPath updating&lt;/h3&gt; &#xA;&lt;p&gt;This framework also comes with a &lt;code&gt;KeyPathReferenceWritable&lt;/code&gt; protocol that allows to update objects using functions and writable KeyPath references:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Defines a type that is configurable using reference writeable keypaths.&#xA;public protocol KeyPathReferenceWritable {&#xA;    associatedtype T&#xA;    associatedtype U&#xA;    &#xA;    func set&amp;lt;Value&amp;gt;(_ keyPath: ReferenceWritableKeyPath&amp;lt;T, Value&amp;gt;, to value: Value) -&amp;gt; U&#xA;}&#xA;&#xA;public extension KeyPathReferenceWritable {&#xA;    func set&amp;lt;Value&amp;gt;(_ keyPath: ReferenceWritableKeyPath&amp;lt;Self, Value&amp;gt;, to value: Value) -&amp;gt; Self {&#xA;        self[keyPath: keyPath] = value&#xA;        return self&#xA;    }&#xA;}&#xA;&#xA;/// Add inheritance for NSObject types to make the methods accessible for many default types.&#xA;extension NSObject: KeyPathReferenceWritable { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;UILabel()&#xA;    .set(\.text, to: &#34;Example&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And allows to easily build up SwiftUI style view configurations to keep the same readability when working in SwiftUI.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler. It is in early development, but this SDK does support its use on supported platforms.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding the SDK as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/AvdLee/SwiftUIKitView.git&#34;, .upToNextMajor(from: &#34;2.0.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an &lt;a href=&#34;https://github.com/AvdLee/SwiftUIKitView/issues&#34;&gt;issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an &lt;a href=&#34;https://github.com/AvdLee/SwiftUIKitView/issues&#34;&gt;issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a &lt;a href=&#34;https://github.com/AvdLee/SwiftUIKitView/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SwiftUIKitView&lt;/strong&gt; is available under the MIT license, and uses source code from open source projects. See the &lt;a href=&#34;https://github.com/AvdLee/SwiftUIKitView/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;This project is originally created by &lt;a href=&#34;https://www.twitter.com/twannl&#34;&gt;Antoine van der Lee&lt;/a&gt;. I&#39;m open for contributions of any kind to make this project even better.&lt;/p&gt;</summary>
  </entry>
</feed>