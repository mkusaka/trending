<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-14T01:56:03Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>huri000/SwiftEntryKit</title>
    <updated>2022-07-14T01:56:03Z</updated>
    <id>tag:github.com,2022-07-14:/huri000/SwiftEntryKit</id>
    <link href="https://github.com/huri000/SwiftEntryKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SwiftEntryKit is a presentation library for iOS. It can be used to easily display overlays within your iOS apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftEntryKit &lt;img align=&#34;left&#34; height=&#34;42&#34; src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/project-icon.png&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/iphone/index.action&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/platform-iOS-blue.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/language-Swift-brightgreen.svg?style=flat&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/SwiftEntryKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SwiftEntryKit.svg?style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio: Supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://mit-license.org&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://travis-ci.com/huri000/SwiftEntryKit.svg?branch=master&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🤗 Donations can be made &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#donations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#overview&#34;&gt;Overview&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#example-project&#34;&gt;Example Project&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#example-project-installation&#34;&gt;Example Project Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#presets&#34;&gt;Presets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#playground&#34;&gt;Playground&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#quick-usage&#34;&gt;Quick Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#entry-attributes&#34;&gt;Entry Attributes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#entry-name&#34;&gt;Entry Name&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#window-level&#34;&gt;Window Level&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#display-position&#34;&gt;Display Position&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#precedence&#34;&gt;Precedence&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#override&#34;&gt;Override&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#enqueue&#34;&gt;Enqueue&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#heuristics&#34;&gt;Heuristics&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#display-priority&#34;&gt;Display Priority&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#display-duration&#34;&gt;Display Duration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#position-constraints&#34;&gt;Position Constraints&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#user-interaction&#34;&gt;User Interaction&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#scroll-behavior&#34;&gt;Scroll Behavior&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#haptic-feedback&#34;&gt;Haptic Feedback&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#lifecycle-events&#34;&gt;Lifecycle Events&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#display-mode&#34;&gt;Display Mode&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#background-style&#34;&gt;Background Style&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#shadow&#34;&gt;Shadow&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#round-corners&#34;&gt;Round Corners&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#border&#34;&gt;Border&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#animations&#34;&gt;Animations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#pop-behavior&#34;&gt;Pop Behavior&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#status-bar&#34;&gt;Status Bar&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#presets-usage-example&#34;&gt;Presets Usage Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#custom-view-usage-example&#34;&gt;Custom View Usage Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#displaying-a-view-controller&#34;&gt;Displaying a View Controller&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#alternative-rollback-window&#34;&gt;Alternative Rollback Window&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#dismissing-an-entry&#34;&gt;Dismissing an Entry&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#swiping-and-rubber-banding&#34;&gt;Swiping and Rubber Banding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#dealing-with-safe-area&#34;&gt;Dealing With Safe Area&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#dealing-with-orientation-change&#34;&gt;Dealing With Orientation Change&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#swift-and-objective-c-interoperability&#34;&gt;Swift and Objective-C Interoperability&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#author&#34;&gt;Author&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#donations&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;SwiftEntryKit is a simple yet versatile content presenter written in Swift.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;p&gt;Banners or pop-ups are called &lt;em&gt;Entries&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Entries are displayed inside a separate UIWindow (of type EKWindow), so users are able to navigate the app freely while entries are being displayed in a non intrusive manner.&lt;/li&gt; &#xA; &lt;li&gt;The kit offers beautiful &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#presets&#34;&gt;presets&lt;/a&gt; that can be themed with your own colors and fonts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customization&lt;/strong&gt;: Entries are highly customizable &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Can be &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#display-position&#34;&gt;positioned&lt;/a&gt; either at the top, center, or the bottom of the screen.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Can be displayed within or outside the screen safe area.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Can be stylized: have a &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#border&#34;&gt;border&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#shadow&#34;&gt;drop-shadow&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#round-corners&#34;&gt;round corners&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Their content and the surrounding background can be blurred, dimmed, colored or have a gradient &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#background-style&#34;&gt;style&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Transition &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#animations&#34;&gt;animations&lt;/a&gt; are customizable - entrance, exit and pop (by another entry).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; The &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#user-interaction&#34;&gt;user interaction&lt;/a&gt; with the entry or the screen can be intercepted.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Entries can be enqueued or override previous entries using the &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#precedence&#34;&gt;precedence&lt;/a&gt; attribute.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Each entry has a &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#display-priority&#34;&gt;display priority&lt;/a&gt; attribute. That means that it can be dismissed only by other entry with an equal or higher priority.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Presets support accessibility.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Entries have an optional rubber banding effect while panning.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Entries can be optionally dismissed using a simple &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#swiping-and-rubber-banding&#34;&gt;swipe gesture&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Entries can be optionally injected with &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#lifecycle-events&#34;&gt;lifecycle events&lt;/a&gt;: &lt;em&gt;will&lt;/em&gt; and &lt;em&gt;did&lt;/em&gt; appear/disappear.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; The &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#status-bar&#34;&gt;status bar style&lt;/a&gt; is settable for the display duration of the entry.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#presets&#34;&gt;navigation controllers&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#custom-view-usage-example&#34;&gt;custom views&lt;/a&gt; as well!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Project&lt;/h2&gt; &#xA;&lt;p&gt;The example project contains various presets and examples you can use and modify as your like.&lt;/p&gt; &#xA;&lt;h3&gt;Example Project Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can either use the terminal or git client such as Source Tree.&lt;/p&gt; &#xA;&lt;h4&gt;Terminal Users&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/huri000/SwiftEntryKit.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Git Client (Source Tree)&lt;/h4&gt; &#xA;&lt;p&gt;Clone &lt;a href=&#34;https://github.com/huri000/SwiftEntryKit.git&#34;&gt;https://github.com/huri000/SwiftEntryKit.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Presets&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Toasts&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;   &lt;th&gt;Floats&lt;/th&gt; &#xA;   &lt;th&gt;Popups&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/toasts.gif&#34; alt=&#34;toasts_example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/notes.gif&#34; alt=&#34;notes_example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/floats.gif&#34; alt=&#34;floats_example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/popups.gif&#34; alt=&#34;popup_example&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Alerts&lt;/th&gt; &#xA;   &lt;th&gt;Forms&lt;/th&gt; &#xA;   &lt;th&gt;Rating&lt;/th&gt; &#xA;   &lt;th&gt;More...&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/alerts.gif&#34; alt=&#34;alert_example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/forms.gif&#34; alt=&#34;form_example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/rating.gif&#34; alt=&#34;rating_example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/custom.gif&#34; alt=&#34;custom_example&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Playground&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;noun: a place where people can play 🏈&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The example app contains a playground screen, an interface that allows you to customize your preferable entries. The playground screen has some limitations (allows to select constant values) but you can easily modify the code to suit your needs. Check it out!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;The Playground Screen&lt;/th&gt; &#xA;   &lt;th&gt;Top Toast Sample&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/playground.gif&#34; alt=&#34;playground_example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/playground-sample-1.jpeg&#34; alt=&#34;playground-sample-1&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 9 or any higher version.&lt;/li&gt; &#xA; &lt;li&gt;Xcode 9 or any higher version.&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.0 or any higher version.&lt;/li&gt; &#xA; &lt;li&gt;The library has not been tested with iOS 8.x.y or a lower version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SwiftEntryKit is compatible with Swift 5 as of release &lt;em&gt;1.0.0&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;SwiftEntryKit is compatible with Swift 4.2 as of release &lt;em&gt;0.8.1&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Developers who use lower Swift version should install release &lt;em&gt;0.7.2&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. You can install it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate SwiftEntryKit into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/cocoapods/specs.git&#39;&#xA;platform :ios, &#39;9.0&#39;&#xA;use_frameworks!&#xA;&#xA;pod &#39;SwiftEntryKit&#39;, &#39;2.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate SwiftEntryKit into your Xcode project using Carthage, specify the following in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;huri000/SwiftEntryKit&#34; == 2.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accio&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;Accio&lt;/a&gt; is a decentralized dependency manager driven by SwiftPM that works for iOS/tvOS/watchOS/macOS projects.&lt;/p&gt; &#xA;&lt;p&gt;You can install Accio with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew tap JamitLabs/Accio https://github.com/JamitLabs/Accio.git&#xA;$ brew install accio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate SwiftEntryKit into your Xcode project using Accio, specify the following in your &lt;code&gt;Package.swift&lt;/code&gt; manifest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/huri000/SwiftEntryKit&#34;, .exact(&#34;2.0.0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After specifying &lt;code&gt;&#34;SwiftEntryKit&#34;&lt;/code&gt; as a dependency of the target in which you want to use it, run &lt;code&gt;accio install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Quick Usage&lt;/h3&gt; &#xA;&lt;p&gt;No setup is needed! Each time you wish to display an entry, just create your view and initialize an EKAttributes struct. See also the &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#presets-usage-example&#34;&gt;preset usage example&lt;/a&gt;, and the example project. likewise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;// Customized view&#xA;let customView = SomeCustomView()&#xA;/*&#xA;Do some customization on customView&#xA;*/&#xA;&#xA;// Attributes struct that describes the display, style, user interaction and animations of customView.&#xA;var attributes = EKAttributes()&#xA;/*&#xA;Adjust preferable attributes&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then, just call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;SwiftEntryKit.display(entry: customView, using: attributes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The kit will replace the application main window with the EKWindow instance and display the entry.&lt;/p&gt; &#xA;&lt;h3&gt;Entry Attributes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;EKAttributes&lt;/em&gt; is the entry&#39;s descriptor. Each time an entry is displayed, an EKAttributes struct is necessary to describe the entry&#39;s presentation, position inside the screen, the display duration, its frame constraints (if needed), its styling (corners, border and shadow), the user interaction events, the animations (in / out) and more.&lt;/p&gt; &#xA;&lt;p&gt;Create a mutable EKAttributes structure likewise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;var attributes = EKAttributes()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below are the properties that can be modified in the &lt;em&gt;EKAttributes&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;h4&gt;Entry Name&lt;/h4&gt; &#xA;&lt;p&gt;Entries can have names. When an EKAttributes struct is instantiated, it is nameless, meaning, the &lt;code&gt;name&lt;/code&gt; property is &lt;code&gt;nil&lt;/code&gt;. It is recommended to set a meaningful name for an entry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.name = &#34;Top Note&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Entries with names can be specifically referred to later, for example, you can inquire whether a &lt;strong&gt;specific&lt;/strong&gt; entry is currently displayed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;if SwiftEntryKit.isCurrentlyDisplaying(entryNamed: &#34;Top Note&#34;) {&#xA;    /* Do your things */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Window Level&lt;/h4&gt; &#xA;&lt;p&gt;Entries can be displayed above the application main window, above the status bar, above the alerts window or even have a custom level (UIWindowLevel).&lt;/p&gt; &#xA;&lt;p&gt;For example, set the window level to &lt;em&gt;normal&lt;/em&gt;, likewise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.windowLevel = .normal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This causes the entry to appear above the application key window and below the status bar.&lt;/p&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;windowLevel&lt;/code&gt; is &lt;code&gt;.statusBar&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Display Position&lt;/h4&gt; &#xA;&lt;p&gt;The entry can be displayed either at the &lt;em&gt;top&lt;/em&gt;, &lt;em&gt;center&lt;/em&gt;, or the &lt;em&gt;bottom&lt;/em&gt; of the screen.&lt;/p&gt; &#xA;&lt;p&gt;For example, set the display position to &lt;em&gt;bottom&lt;/em&gt;, likewise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.position = .bottom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;.top&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Precedence&lt;/h4&gt; &#xA;&lt;p&gt;The precedence attribute of an entry describes the manner in which entries are pushed in. It offers 2 approaches for managing the presentation priority of multiple simultaneous entries.&lt;/p&gt; &#xA;&lt;h5&gt;Override&lt;/h5&gt; &#xA;&lt;p&gt;If the &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#display-priority&#34;&gt;display priority&lt;/a&gt; is equal or higher than the currently displayed entry, override it.&lt;/p&gt; &#xA;&lt;p&gt;Example for setting &lt;code&gt;.override&lt;/code&gt; precedence with &lt;code&gt;.max&lt;/code&gt; display priority while ignoring entries that are already enqueued (leaving them to display after the new entry is dismissed).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.precedence = .override(priority: .max, dropEnqueuedEntries: false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally flush the entries that are inside the queue.&lt;/p&gt; &#xA;&lt;p&gt;In case &lt;code&gt;dropEnqueuedEntries&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, enqueued entries remain in the queue. The first enqueued entry will show right after the new entry pops out. In case &lt;code&gt;dropEnqueuedEntries&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the entry-queue is flushed as the new entry is being displayed.&lt;/p&gt; &#xA;&lt;h5&gt;Enqueue&lt;/h5&gt; &#xA;&lt;p&gt;If the queue is empty, display the entry immediately, otherwise, insert the entry into the queue until its turn to show arrives.&lt;/p&gt; &#xA;&lt;p&gt;Example for setting &lt;code&gt;.enqueue&lt;/code&gt; precedence with &lt;code&gt;.normal&lt;/code&gt; display priority:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.precedence = .enqueue(priority: .normal)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Heuristics&lt;/h6&gt; &#xA;&lt;p&gt;There are 2 possible heuristics for entries prioritization in the queue:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Display Priority Queue: The entries are sorted by their &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#display-priority&#34;&gt;display priority&lt;/a&gt;, then by chronological order.&lt;/li&gt; &#xA; &lt;li&gt;Chronological Queue: The entries are sorted only by their chronological order (standard queue).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Select the heuristic that suits you best by doing the following, only once, before using &lt;code&gt;SwiftEntryKit&lt;/code&gt; to display entries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;EKAttributes.Precedence.QueueingHeuristic.value = .priority&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;EKAttributes.Precedence.QueueingHeuristic.value = .chronological&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;EKAttributes.Precedence.QueueingHeuristic.value&lt;/code&gt; is &lt;code&gt;.priority&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default value of precedence is &lt;code&gt;.override(priority: .normal, dropEnqueuedEntries: false)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Display Priority&lt;/h5&gt; &#xA;&lt;p&gt;The display priority of the entry determines whether it dismisses other entries or is dismissed by them. An entry can be dismissed only by an entry with an equal or a higher display priority.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let highPriorityAttributes = EKAttributes()&#xA;highPriorityAttributes.precedence.priority = .high&#xA;&#xA;let normalPriorityAttributes = EKAttributes()&#xA;normalPriorityAttributes.precedence.priority = .normal&#xA;&#xA;// Display high priority entry&#xA;SwiftEntryKit.display(entry: view1, using: highPriorityAttributes)&#xA;&#xA;// Display normal priority entry (ignored!)&#xA;SwiftEntryKit.display(entry: view2, using: normalPriorityAttributes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;view2&lt;/em&gt; won&#39;t be displayed!&lt;/p&gt; &#xA;&lt;h4&gt;Display Duration&lt;/h4&gt; &#xA;&lt;p&gt;The display duration of the entry (Counted from the moment the entry has finished its entrance animation and until the exit animation begins).&lt;/p&gt; &#xA;&lt;p&gt;Display for 4 seconds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.displayDuration = 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Display for an infinite duration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.displayDuration = .infinity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;displayDuration&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Position Constraints&lt;/h4&gt; &#xA;&lt;p&gt;Constraints that tie the entry tightly to the screen context, for example: Height, Width, Max Width, Max Height, Additional Vertical Offset &amp;amp; Safe Area related info.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Entries that support Auto Layout - Their height is inferred from the constraints that applied to them.&lt;/li&gt; &#xA; &lt;li&gt;Entries that don&#39;t support Auto Layout - Their exact size must be explicitly set using &lt;code&gt;positionConstraints&lt;/code&gt;&#39;s &lt;code&gt;size&lt;/code&gt; property.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;Ratio edge - signifies that the ratio of the width edge has a ratio of 0.9 of the screen&#39;s width.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let widthConstraint = EKAttributes.PositionConstraints.Edge.ratio(value: 0.9)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Intrinsic edge - signifies that the wanted height value is the content height - Decided by the entries vertical constraints&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let heightConstraint = EKAttributes.PositionConstraints.Edge.intrinsic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the entry size constraints likewise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.positionConstraints.size = .init(width: widthConstraint, height: heightConstraint)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set &lt;em&gt;attributes.positionConstraints.maxSize&lt;/em&gt; in order to make sure the entry does not exceeds predefined limitations. This is useful on &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/#how-to-deal-with-orientation-change&#34;&gt;device orientation change&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Safe Area - can be used to override the safe area or to color it (More examples are in the example project) That snippet implies that the safe area insets should be kept and not be a part of the entry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.positionConstraints.safeArea = .empty(fillSafeArea: false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vertical Offset - an additional offset that can be applied to the entry (Other than the safe area).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.positionConstraints.verticalOffset = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Autorotation - whether the entry autorotates along with the orientation of the device. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.positionConstraints.rotation.isEnabled = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keyboard Releation - used to bind an entry to the keyboard once the keyboard is displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let offset = EKAttributes.PositionConstraints.KeyboardRelation.Offset(bottom: 10, screenEdgeResistance: 20)&#xA;let keyboardRelation = EKAttributes.PositionConstraints.KeyboardRelation.bind(offset: offset)&#xA;attributes.positionConstraints.keyboardRelation = keyboardRelation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above the entry&#39;s bottom is tuned to have a 10pts offset from the top of the keyboard (while it shows) Because the entry&#39;s frame might exceed the screen bounds, the user might not see all the entry - we wouldn&#39;t want that. Therefore, an additional associated value has been added - &lt;code&gt;screenEdgeResistance&lt;/code&gt; with value of 20pts. That is, to make sure that the entry remains within the bounds of the screen, and always visible to the user. The extreme situation might occur as the device orientation is landscape and the keyboard shows up (See example project form presets for more information).&lt;/p&gt; &#xA;&lt;h4&gt;User Interaction&lt;/h4&gt; &#xA;&lt;p&gt;The entry and the screen can be interacted by the user. User interaction be can intercepted in various ways:&lt;/p&gt; &#xA;&lt;p&gt;An interaction (Any touch whatsoever) with the entry delays its exit by 3s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.entryInteraction = .delayExit(by: 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A tap on the entry / screen dismisses it immediately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.entryInteraction = .dismiss&#xA;attributes.screenInteraction = .dismiss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A tap on the entry is swallowed (ignored):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.entryInteraction = .absorbTouches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A tap on the screen is forwarded to the lower level window, in most cases the receiver will be the application window. This is very useful when you want to display an unintrusive content like banners and push notification entries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.screenInteraction = .forward&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pass additional actions that are invoked when the user taps the entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let action = {&#xA;    // Do something useful&#xA;}&#xA;attributes.entryInteraction.customTapActions.append(action)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;screenInteraction&lt;/code&gt; is &lt;code&gt;.forward&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;entryInteraction&lt;/code&gt; is &lt;code&gt;.dismiss&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Scroll Behavior&lt;/h4&gt; &#xA;&lt;p&gt;Describes the entry behavior when it&#39;s being scrolled, that is, dismissal by a swipe gesture and a rubber band effect much similar to a UIScrollView.&lt;/p&gt; &#xA;&lt;p&gt;Disable the pan and swipe gestures on the entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.scroll = .disabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable swipe and stretch and pullback with jolt effect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.scroll = .enabled(swipeable: true, pullbackAnimation: .jolt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable swipe and stretch and pullback with an ease-out effect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.scroll = .enabled(swipeable: true, pullbackAnimation: .easeOut)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable swipe but disable stretch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.scroll = .edgeCrossingDisabled(swipeable: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;scroll&lt;/code&gt; is &lt;code&gt;.enabled(swipeable: true, pullbackAnimation: .jolt)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://developer.apple.com/ios/human-interface-guidelines/user-interaction/feedback/&#34;&gt;Haptic Feedback&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The device can produce a haptic feedback, thus adding an additional sensory depth to each entry.&lt;/p&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;hapticFeedbackType&lt;/code&gt; is &lt;code&gt;.none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Lifecycle Events&lt;/h4&gt; &#xA;&lt;p&gt;Events can be injected to the entry so that they are to be called during its lifecycle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.lifecycleEvents.willAppear = {&#xA;    // Executed before the entry animates inside &#xA;}&#xA;&#xA;attributes.lifecycleEvents.didAppear = {&#xA;    // Executed after the entry animates inside&#xA;}&#xA;&#xA;attributes.lifecycleEvents.willDisappear = {&#xA;    // Executed before the entry animates outside&#xA;}&#xA;&#xA;attributes.lifecycleEvents.didDisappear = {&#xA;    // Executed after the entry animates outside&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Display Mode&lt;/h4&gt; &#xA;&lt;p&gt;To allow you to fully support any user interface style, &lt;code&gt;SwiftEntryKit&lt;/code&gt; introduces two specialized types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;EKColor&lt;/code&gt; describes a color under light and dark modes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EKAttributes.BackgroundStyle.BlurStyle&lt;/code&gt; describes a blur effect under light and dark modes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following forces &lt;code&gt;SwiftEntryKit&lt;/code&gt; to display the entry on dark mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.displayMode = .dark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The possible values are: &lt;code&gt;.light&lt;/code&gt;, &lt;code&gt;.dark&lt;/code&gt;, &lt;code&gt;.inferred&lt;/code&gt;. The default value is &lt;code&gt;.inferred&lt;/code&gt;, which means that the entry will be displayed with the current user interface style.&lt;/p&gt; &#xA;&lt;h4&gt;Background Style&lt;/h4&gt; &#xA;&lt;p&gt;The entry and the screen can have various background styles, such as blur, color, gradient and even an image.&lt;/p&gt; &#xA;&lt;p&gt;The following example implies clear background for both the entry and the screen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.entryBackground = .clear&#xA;attributes.screenBackground = .clear&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Colored entry background and dimmed screen background:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.entryBackground = .color(color: .standardContent)&#xA;attributes.screenBackground = .color(color: EKColor(UIColor(white: 0.5, alpha: 0.5)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Gradient entry background (diagonal vector):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let colors: [EKColor] = ...&#xA;attributes.entryBackground = .gradient(gradient: .init(colors: colors, startPoint: .zero, endPoint: CGPoint(x: 1, y: 1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visual Effect entry background:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.entryBackground = .visualEffect(style: .dark)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;entryBackground&lt;/code&gt; and &lt;code&gt;screenBackground&lt;/code&gt; is &lt;code&gt;.clear&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Shadow&lt;/h4&gt; &#xA;&lt;p&gt;The shadow that surrounds the entry.&lt;/p&gt; &#xA;&lt;p&gt;Enable shadow around the entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.shadow = .active(with: .init(color: .black, opacity: 0.3, radius: 10, offset: .zero))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Disable shadow around the entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.shadow = .none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;shadow&lt;/code&gt; is &lt;code&gt;.none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Round Corners&lt;/h4&gt; &#xA;&lt;p&gt;Round corners around the entry.&lt;/p&gt; &#xA;&lt;p&gt;Only top left and right corners with radius of 10:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.roundCorners = .top(radius: 10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only bottom left and right corners with radius of 10:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.roundCorners = .bottom(radius: 10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All corners with radius of 10:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.roundCorners = .all(radius: 10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No round corners:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.roundCorners = .none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;roundCorners&lt;/code&gt; is &lt;code&gt;.none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Border&lt;/h4&gt; &#xA;&lt;p&gt;The border around the entry.&lt;/p&gt; &#xA;&lt;p&gt;Add a black border with thickness of 0.5pts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.border = .value(color: .black, width: 0.5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No border:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.border = .none&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;border&lt;/code&gt; is &lt;code&gt;.none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Animations&lt;/h4&gt; &#xA;&lt;p&gt;Describes how the entry animates into and out of the screen.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each animation descriptor can have up to 3 types of animations at the same time. Those can be combined to a single complex one!&lt;/li&gt; &#xA; &lt;li&gt;Translation animation anchor can be explicitly set but it receives a default value according to position of the entry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example for &lt;em&gt;translation&lt;/em&gt; from top with spring, &lt;em&gt;scale&lt;/em&gt; in and even &lt;em&gt;fade in&lt;/em&gt; as a single entrance animation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.entranceAnimation = .init(&#xA;                 translate: .init(duration: 0.7, anchorPosition: .top, spring: .init(damping: 1, initialVelocity: 0)), &#xA;                 scale: .init(from: 0.6, to: 1, duration: 0.7), &#xA;                 fade: .init(from: 0.8, to: 1, duration: 0.3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;entranceAnimation&lt;/code&gt; and &lt;code&gt;exitAnimation&lt;/code&gt; is &lt;code&gt;.translation&lt;/code&gt; - The entry translates in or out, respectively, with duration of 0.3 seconds.&lt;/p&gt; &#xA;&lt;h4&gt;Pop Behavior&lt;/h4&gt; &#xA;&lt;p&gt;Describes the entry behavior when it&#39;s being popped (dismissed by an entry with equal / higher display-priority.&lt;/p&gt; &#xA;&lt;p&gt;The entry is being popped animatedly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.popBehavior = .animated(animation: .init(translate: .init(duration: 0.2)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The entry is being overridden (Disappears promptly):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.popBehavior = .overridden&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;popBehavior&lt;/code&gt; is &lt;code&gt;.animated(animation: .translation)&lt;/code&gt; - It translates out with duration of 0.3 seconds.&lt;/p&gt; &#xA;&lt;h4&gt;Status Bar&lt;/h4&gt; &#xA;&lt;p&gt;The status bar appearance can be modified during the display of the entry. SwiftEntryKit supports both &lt;em&gt;View controller-based status bar appearance&lt;/em&gt; and manual setting.&lt;/p&gt; &#xA;&lt;p&gt;Setting the status bar style is fairly simple -&lt;/p&gt; &#xA;&lt;p&gt;Status bar becomes visible and gets a light style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.statusBar = .light&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The status bar becomes hidden:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.statusBar = .hidden&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The status bar appearance is inferred from the previous context (won&#39;t be changed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.statusBar = .inferred&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case there is an already presenting entry with lower/equal display priority, the status bar will change its style. When the entry is removed, the status bar gets its initial style back.&lt;/p&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;statusBar&lt;/code&gt; is &lt;code&gt;.inferred&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;EKAttributes&#39; interface is as follows:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;public struct EKAttributes&#xA;&#xA;    // Identification&#xA;    public var name: String?&#xA;&#xA;    // Display&#xA;    public var windowLevel: WindowLevel&#xA;    public var position: Position&#xA;    public var precedence: Precedence&#xA;    public var displayDuration: DisplayDuration&#xA;    public var positionConstraints: PositionConstraints&#xA;&#xA;    // User Interaction&#xA;    public var screenInteraction: UserInteraction&#xA;    public var entryInteraction: UserInteraction&#xA;    public var scroll: Scroll&#xA;    public var hapticFeedbackType: NotificationHapticFeedback&#xA;    public var lifecycleEvents: LifecycleEvents&#xA;&#xA;    // Theme &amp;amp; Style&#xA;    public var displayMode = DisplayMode.inferred&#xA;    public var entryBackground: BackgroundStyle&#xA;    public var screenBackground: BackgroundStyle&#xA;    public var shadow: Shadow&#xA;    public var roundCorners: RoundCorners&#xA;    public var border: Border&#xA;    public var statusBar: StatusBar&#xA;    &#xA;    // Animations&#xA;    public var entranceAnimation: Animation&#xA;    public var exitAnimation: Animation&#xA;    public var popBehavior: PopBehavior&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Presets Usage Example:&lt;/h3&gt; &#xA;&lt;p&gt;You can use one of the presets that come with SwiftEntryKit, doing these 4 simple steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create your &lt;em&gt;EKAttributes&lt;/em&gt; struct and set your preferable properties.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;em&gt;EKNotificationMessage&lt;/em&gt; struct (The Content) and set the content.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;em&gt;EKNotificationMessageView&lt;/em&gt; (The View) and inject &lt;em&gt;EKNotificationMessage&lt;/em&gt; struct to it.&lt;/li&gt; &#xA; &lt;li&gt;Display the entry using &lt;em&gt;SwiftEntryKit&lt;/em&gt; class method.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;EKNotificationMessageView preset example:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;// Generate top floating entry and set some properties&#xA;var attributes = EKAttributes.topFloat&#xA;attributes.entryBackground = .gradient(gradient: .init(colors: [EKColor(.red), EKColor(.green)], startPoint: .zero, endPoint: CGPoint(x: 1, y: 1)))&#xA;attributes.popBehavior = .animated(animation: .init(translate: .init(duration: 0.3), scale: .init(from: 1, to: 0.7, duration: 0.7)))&#xA;attributes.shadow = .active(with: .init(color: .black, opacity: 0.5, radius: 10, offset: .zero))&#xA;attributes.statusBar = .dark&#xA;attributes.scroll = .enabled(swipeable: true, pullbackAnimation: .jolt)&#xA;attributes.positionConstraints.maxSize = .init(width: .constant(value: UIScreen.main.minEdge), height: .intrinsic)&#xA;&#xA;let title = EKProperty.LabelContent(text: titleText, style: .init(font: titleFont, color: textColor))&#xA;let description = EKProperty.LabelContent(text: descText, style: .init(font: descFont, color: textColor))&#xA;let image = EKProperty.ImageContent(image: UIImage(named: imageName)!, size: CGSize(width: 35, height: 35))&#xA;let simpleMessage = EKSimpleMessage(image: image, title: title, description: description)&#xA;let notificationMessage = EKNotificationMessage(simpleMessage: simpleMessage)&#xA;&#xA;let contentView = EKNotificationMessageView(with: notificationMessage)&#xA;SwiftEntryKit.display(entry: contentView, using: attributes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom View Usage Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;// Create a basic toast that appears at the top&#xA;var attributes = EKAttributes.topToast&#xA;&#xA;// Set its background to white&#xA;attributes.entryBackground = .color(color: .white)&#xA;&#xA;// Animate in and out using default translation&#xA;attributes.entranceAnimation = .translation&#xA;attributes.exitAnimation = .translation&#xA;&#xA;let customView = UIView()&#xA;/*&#xA;... Customize the view as you like ...&#xA;*/&#xA;&#xA;// Display the view with the configuration&#xA;SwiftEntryKit.display(entry: customView, using: attributes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Displaying a View Controller&lt;/h3&gt; &#xA;&lt;p&gt;As from version 0.4.0, view controllers are supported as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;SwiftEntryKit.display(entry: customViewController, using: attributes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Alternative Rollback Window&lt;/h3&gt; &#xA;&lt;p&gt;By default, the window held by the application delegate becomes the key again right after SwiftEntryKit has finished displaying the entry. This behavior can be changed using &lt;code&gt;rollbackWindow&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;SwiftEntryKit.display(entry: view, using: attributes, rollbackWindow: .custom(window: alternativeWindow))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the entry has been dismissed, the given window &lt;code&gt;alternativeWindow&lt;/code&gt; would become the key instead of the window that is held by the application delegate.&lt;/p&gt; &#xA;&lt;h3&gt;Dismissing an Entry&lt;/h3&gt; &#xA;&lt;p&gt;You can dismiss the currently displayed entry by simply invoke &lt;em&gt;dismiss&lt;/em&gt; in the SwiftEntryKit class, likewise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;SwiftEntryKit.dismiss()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;SwiftEntryKit.dismiss(.displayed)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This dismisses the entry animatedly using its &lt;em&gt;exitAnimation&lt;/em&gt; attribute and on completion, the window would be removed as well.&lt;/p&gt; &#xA;&lt;p&gt;You can dismiss the currently displayed entry and flush the queue as well, likewise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;SwiftEntryKit.dismiss(.all)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Only flush the queue, leaving any currently displayed entry to its natural lifecycle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;SwiftEntryKit.dismiss(.queue)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dismiss a specific entry by name - either currently displayed or enqueued. All the entries with the given name are dismissed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;SwiftEntryKit.dismiss(.specific(entryName: &#34;Entry Name&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dismiss any entry with a lower or equal display priority of &lt;code&gt;.normal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;SwiftEntryKit.dismiss(.prioritizedLowerOrEqualTo(priority: .normal))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using a completion handler&lt;/h4&gt; &#xA;&lt;p&gt;Inject a trailing closure to be executed after the entry dismissal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;SwiftEntryKit.dismiss {&#xA;    // Executed right after the entry has been dismissed&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Is Currently Displaying&lt;/h3&gt; &#xA;&lt;p&gt;Inquire whether an entry is currently displayed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;if SwiftEntryKit.isCurrentlyDisplaying {&#xA;    /* Do your things */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inquire whether a &lt;strong&gt;specific&lt;/strong&gt; entry is currently displayed using the &lt;code&gt;name&lt;/code&gt; property inside &lt;code&gt;EKAttributes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;if SwiftEntryKit.isCurrentlyDisplaying(entryNamed: &#34;Top Note&#34;) {&#xA;/* Do your things */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Queue Contains&lt;/h3&gt; &#xA;&lt;p&gt;Inquire whether the queue of entries is not empty:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;if SwiftEntryKit.isQueueEmpty {&#xA;    /* Do your things */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inquire whether the queue of entries contains an entry with name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;if SwiftEntryKit.queueContains(entryNamed: &#34;Custom-Name&#34;) {&#xA;    /* Do your things */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swiping and Rubber Banding&lt;/h3&gt; &#xA;&lt;p&gt;Entries can be panned vertically (This ability can be enabled using the &lt;em&gt;scroll&lt;/em&gt; attributes). Thefore it&#39;s only natural that an entry can be dismissed using a swipe-like gesture.&lt;/p&gt; &#xA;&lt;p&gt;Enable swipe gesture. When the swipe gesture fails (doesn&#39;t pass the velocity threshold) ease it back.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.scroll = .enabled(swipeable: true, pullbackAnimation: .easeOut)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable swipe gesture. When the swipe gesture fails throw it back out with a jolt.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;attributes.scroll = .enabled(swipeable: true, pullbackAnimation: .jolt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;PullbackAnimation&lt;/em&gt; values (duration, damping &amp;amp; initialSpringVelocity) can be customized as well.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swipe&lt;/th&gt; &#xA;   &lt;th&gt;Jolt&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/swipe.gif&#34; alt=&#34;swipe_example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/rubber_band.gif&#34; alt=&#34;band_example&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Dealing with safe area:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;EKAttributes.PositionConstraints.SafeArea&lt;/em&gt; may be used to override the safe area with the entry&#39;s content, or to fill the safe area with a background color (like &lt;a href=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/toasts.gif&#34;&gt;Toasts&lt;/a&gt; do), or even leave the safe area empty (Like &lt;a href=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/floats.gif&#34;&gt;Floats&lt;/a&gt; do).&lt;/p&gt; &#xA;&lt;p&gt;SwiftEntryKit supports iOS 11.x.y and is backward compatible to iOS 9.x.y, so the status bar area is treated as same as the safe area in earlier iOS versions.&lt;/p&gt; &#xA;&lt;h3&gt;Dealing with orientation change:&lt;/h3&gt; &#xA;&lt;p&gt;SwiftEntryKit identifies orientation changes and adjust the entry&#39;s layout to those changes. Therefore, if you wish to limit the entries&#39;s width, you are able to do so by giving it a maximum value, likewise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;var attributes = EKAttributes.topFloat&#xA;&#xA;// Give the entry the width of the screen minus 20pts from each side, the height is decided by the content&#39;s contraint&#39;s&#xA;attributes.positionConstraints.size = .init(width: .offset(value: 20), height: .intrinsic)&#xA;&#xA;// Give the entry maximum width of the screen minimum edge - thus the entry won&#39;t grow much when the device orientation changes from portrait to landscape mode.&#xA;let edgeWidth = min(UIScreen.main.bounds.width, UIScreen.main.bounds.height)&#xA;attributes.positionConstraints.maxSize = .init(width: .constant(value: edgeWidth), height: .intrinsic)&#xA;&#xA;let customView = UIView()&#xA;/*&#xA;... Customize the view as you like ...&#xA;*/&#xA;&#xA;// Use class method of SwiftEntryKit to display the view using the desired attributes&#xA;SwiftEntryKit.display(entry: customView, using: attributes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Orientation Change Demonstration&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/orientation.gif&#34; alt=&#34;orientation_change&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Dark Mode in the Example Project&lt;/h3&gt; &#xA;&lt;p&gt;You can tinker with the display mode using a segmented control on presets screen, forcing light and dark modes. All the presets are dark mode ready, but only some in the example project demonstrate dark mode capabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/swift-entrykit/dark-light.gif&#34; alt=&#34;light_dark&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swift and Objective-C Interoperability&lt;/h3&gt; &#xA;&lt;p&gt;SwiftEntryKit&#39;s APIs use the Swift language exclusive syntax (enums, associated values, and more). Therefore, &lt;code&gt;SwiftEntryKit&lt;/code&gt; cannot be referenced directly from an Objective-C file (&lt;em&gt;.m&lt;/em&gt;, &lt;em&gt;.h&lt;/em&gt; or &lt;em&gt;.mm&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Yet, it is pretty easy to integrate SwiftEntryKit into an Objective-C project using a simple &lt;em&gt;.swift&lt;/em&gt; class that is a sort of adapter between &lt;code&gt;SwiftEntryKit&lt;/code&gt; and your Objective-C code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/huri000/ObjcEntryKitExample&#34;&gt;This project&lt;/a&gt; demonstrates that using Carthage and CocoaPods.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Daniel Huri, &lt;a href=&#34;mailto:huri000@gmail.com&#34;&gt;huri000@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;Donations can be made by sending either Bitcoin or Ether to the following addresses.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;BTC&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ETH&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;134TiBiUvVNt7Na5KXEFBSChLdgVDw1Hnr&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0xAe6616181FCdde4793AE749Ce21Cd5Af9333A3E2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/donate/btc-address.png&#34; alt=&#34;btc_address&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/huri000/assets/raw/master/donate/eth-address.png&#34; alt=&#34;eth_address&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Thank You&lt;/h2&gt; &#xA;&lt;p&gt;Thanks Lily Azar, &lt;a href=&#34;mailto:lilushkaa@gmail.com&#34;&gt;lilushkaa@gmail.com&lt;/a&gt; for those awesome preset icons.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/CREDITS.md&#34;&gt;&lt;strong&gt;Icons Credits&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SwiftEntryKit is available under the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Exceptions&lt;/h3&gt; &#xA;&lt;p&gt;Please be aware that any use of the icons inside the project requires attribution to the creator. See &lt;a href=&#34;https://raw.githubusercontent.com/huri000/SwiftEntryKit/master/CREDITS.md&#34;&gt;credits&lt;/a&gt; for the creators list.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RevenueCat/purchases-ios</title>
    <updated>2022-07-14T01:56:03Z</updated>
    <id>tag:github.com,2022-07-14:/RevenueCat/purchases-ios</id>
    <link href="https://github.com/RevenueCat/purchases-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In-app purchases and subscriptions made easy. Support for iOS, iPadOS, watchOS, and Mac.&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt;😻 In-App Subscriptions Made Easy 😻&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/RevenueCat&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/RevenueCat.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/RevenueCat&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/RevenueCat.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.revenuecat.com/docs/ios#section-install-via-carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.revenuecat.com/docs/ios#section-install-via-swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-orange.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/RevenueCat/purchases-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FRevenueCat%2Fpurchases-ios%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/RevenueCat/purchases-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FRevenueCat%2Fpurchases-ios%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RevenueCat is a powerful, reliable, and free to use in-app purchase server with cross-platform support. Our open-source framework provides a backend and a wrapper around StoreKit and Google Play Billing to make implementing in-app purchases and subscriptions easy.&lt;/p&gt; &#xA;&lt;p&gt;Whether you are building a new app or already have millions of customers, you can use RevenueCat to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetch products, make purchases, and check subscription status with our &lt;a href=&#34;https://docs.revenuecat.com/docs/installation&#34;&gt;native SDKs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Host and &lt;a href=&#34;https://docs.revenuecat.com/docs/entitlements&#34;&gt;configure products&lt;/a&gt; remotely from our dashboard.&lt;/li&gt; &#xA; &lt;li&gt;Analyze the most important metrics for your app business &lt;a href=&#34;https://docs.revenuecat.com/docs/charts&#34;&gt;in one place&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See customer transaction histories, chart lifetime value, and &lt;a href=&#34;https://docs.revenuecat.com/docs/customers&#34;&gt;grant promotional subscriptions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Get notified of real-time events through &lt;a href=&#34;https://docs.revenuecat.com/docs/webhooks&#34;&gt;webhooks&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Send enriched purchase events to analytics and attribution tools with our easy integrations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sign up to &lt;a href=&#34;https://app.revenuecat.com/signup&#34;&gt;get started for free&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;RevenueCat.framework&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;RevenueCat&lt;/em&gt; is the client for the &lt;a href=&#34;https://www.revenuecat.com/&#34;&gt;RevenueCat&lt;/a&gt; subscription and purchase tracking system. It&#39;s 100% &lt;code&gt;Swift&lt;/code&gt; and compatible with &lt;code&gt;Objective-C&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migrating from Purchases v3&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See our &lt;a href=&#34;https://revenuecat-docs.netlify.app/documentation/revenuecat/v4_api_migration_guide&#34;&gt;Migration guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RevenueCat SDK Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;RevenueCat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Server-side receipt validation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;➡️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs/webhooks&#34;&gt;Webhooks&lt;/a&gt; - enhanced server-to-server communication with events for purchases, renewals, cancellations, and more&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🖥&lt;/td&gt; &#xA;   &lt;td&gt;iOS, tvOS, macOS and watchOS support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🎯&lt;/td&gt; &#xA;   &lt;td&gt;Subscription status tracking - know whether a user is subscribed whether they&#39;re on iOS, Android or web&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📊&lt;/td&gt; &#xA;   &lt;td&gt;Analytics - automatic calculation of metrics like conversion, mrr, and churn&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📝&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs&#34;&gt;Online documentation&lt;/a&gt; up to date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔀&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.revenuecat.com/integrations&#34;&gt;Integrations&lt;/a&gt; - over a dozen integrations to easily send purchase data where you need it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;💯&lt;/td&gt; &#xA;   &lt;td&gt;Well maintained - &lt;a href=&#34;https://github.com/RevenueCat/purchases-ios/releases&#34;&gt;frequent releases&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📮&lt;/td&gt; &#xA;   &lt;td&gt;Great support - &lt;a href=&#34;https://community.revenuecat.com&#34;&gt;Help Center&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed information, you can view our complete documentation at &lt;a href=&#34;https://docs.revenuecat.com/docs&#34;&gt;docs.revenuecat.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or browse our iOS sample apps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RevenueCat/purchases-ios/main/Examples/MagicWeather&#34;&gt;MagicWeather&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RevenueCat/purchases-ios/main/Examples/MagicWeatherSwiftUI&#34;&gt;MagicWeather SwiftUI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! To learn how you can contribute, please see the &lt;a href=&#34;https://raw.githubusercontent.com/RevenueCat/purchases-ios/main/Contributing/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ReSwift/ReSwift</title>
    <updated>2022-07-14T01:56:03Z</updated>
    <id>tag:github.com,2022-07-14:/ReSwift/ReSwift</id>
    <link href="https://github.com/ReSwift/ReSwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unidirectional Data Flow in Swift - Inspired by Redux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ReSwift&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/ReSwift/ReSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/ReSwift/ReSwift/master.svg?style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://codecov.io/github/ReSwift/ReSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/ReSwift/ReSwift.svg?style=flat-square&#34; alt=&#34;Code coverage status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/ReSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/ReSwift.svg?style=flat-square&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ReSwift/ReSwift/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-ios%20%7C%20osx%20%7C%20tvos%20%7C%20watchos-lightgrey.svg?style=flat-square&#34; alt=&#34;Platform support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ReSwift/ReSwift/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&#34; alt=&#34;License MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?style=flat-square&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported Swift Versions:&lt;/strong&gt; Swift 4.2, 5.x&lt;/p&gt; &#xA;&lt;p&gt;For Swift 3.2 or 4.0 Support use &lt;a href=&#34;https://github.com/ReSwift/ReSwift/releases/tag/5.0.0&#34;&gt;Release 5.0.0&lt;/a&gt; or earlier. For Swift 2.2 Support use &lt;a href=&#34;https://github.com/ReSwift/ReSwift/releases/tag/2.0.0&#34;&gt;Release 2.0.0&lt;/a&gt; or earlier.&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;ReSwift is a &lt;a href=&#34;https://github.com/reactjs/redux&#34;&gt;Redux&lt;/a&gt;-like implementation of the unidirectional data flow architecture in Swift. ReSwift helps you to separate three important concerns of your app&#39;s components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: in a ReSwift app the entire app state is explicitly stored in a data structure. This helps avoid complicated state management code, enables better debugging and has many, many more benefits...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Views&lt;/strong&gt;: in a ReSwift app your views update when your state changes. Your views become simple visualizations of the current app state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;State Changes&lt;/strong&gt;: in a ReSwift app you can only perform state changes through actions. Actions are small pieces of data that describe a state change. By drastically limiting the way state can be mutated, your app becomes easier to understand and it gets easier to work with many collaborators.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The ReSwift library is tiny - allowing users to dive into the code, understand every single line and &lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#contributing&#34;&gt;hopefully contribute&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ReSwift is quickly growing beyond the core library, providing experimental extensions for routing and time traveling through past app states!&lt;/p&gt; &#xA;&lt;p&gt;Excited? So are we 🎉&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://gitter.im/ReSwift/public&#34;&gt;public gitter chat!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#about-reswift&#34;&gt;About ReSwift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#why-reswift&#34;&gt;Why ReSwift?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#getting-started-guide&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#checking-out-source-code&#34;&gt;Checking Out Source Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#extensions&#34;&gt;Extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#example-projects&#34;&gt;Example Projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/#get-in-touch&#34;&gt;Get in touch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;About ReSwift&lt;/h1&gt; &#xA;&lt;p&gt;ReSwift relies on a few principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Store&lt;/strong&gt; stores your entire app state in the form of a single data structure. This state can only be modified by dispatching Actions to the store. Whenever the state in the store changes, the store will notify all observers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt; are a declarative way of describing a state change. Actions don&#39;t contain any code, they are consumed by the store and forwarded to reducers. Reducers will handle the actions by implementing a different state change for each action.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reducers&lt;/strong&gt; provide pure functions, that based on the current action and the current app state, create a new app state&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/Docs/img/reswift_concept.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a very simple app, that maintains a counter that can be increased and decreased, you can define the app state as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AppState {&#xA;    var counter: Int = 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You would also define two actions, one for increasing and one for decreasing the counter. In the &lt;a href=&#34;http://reswift.github.io/ReSwift/master/getting-started-guide.html&#34;&gt;Getting Started Guide&lt;/a&gt; you can find out how to construct complex actions. For the simple actions in this example we can define empty structs that conform to action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct CounterActionIncrease: Action {}&#xA;struct CounterActionDecrease: Action {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your reducer needs to respond to these different action types, that can be done by switching over the type of action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func counterReducer(action: Action, state: AppState?) -&amp;gt; AppState {&#xA;    var state = state ?? AppState()&#xA;&#xA;    switch action {&#xA;    case _ as CounterActionIncrease:&#xA;        state.counter += 1&#xA;    case _ as CounterActionDecrease:&#xA;        state.counter -= 1&#xA;    default:&#xA;        break&#xA;    }&#xA;&#xA;    return state&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to have a predictable app state, it is important that the reducer is always free of side effects, it receives the current app state and an action and returns the new app state.&lt;/p&gt; &#xA;&lt;p&gt;To maintain our state and delegate the actions to the reducers, we need a store. Let&#39;s call it &lt;code&gt;mainStore&lt;/code&gt; and define it as a global constant, for example in the app delegate file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let mainStore = Store&amp;lt;AppState&amp;gt;(&#xA;&#x9;reducer: counterReducer,&#xA;&#x9;state: nil&#xA;)&#xA;&#xA;@UIApplicationMain&#xA;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;&#x9;[...]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, your view layer, in this case a view controller, needs to tie into this system by subscribing to store updates and emitting actions whenever the app state needs to be changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class CounterViewController: UIViewController, StoreSubscriber {&#xA;&#xA;    @IBOutlet var counterLabel: UILabel!&#xA;&#xA;    override func viewWillAppear(_ animated: Bool) {&#xA;        mainStore.subscribe(self)&#xA;    }&#xA;&#xA;    override func viewWillDisappear(_ animated: Bool) {&#xA;        mainStore.unsubscribe(self)&#xA;    }&#xA;&#xA;    func newState(state: AppState) {&#xA;        counterLabel.text = &#34;\(state.counter)&#34;&#xA;    }&#xA;&#xA;    @IBAction func increaseButtonTapped(_ sender: UIButton) {&#xA;        mainStore.dispatch(&#xA;            CounterActionIncrease()&#xA;        )&#xA;    }&#xA;&#xA;    @IBAction func decreaseButtonTapped(_ sender: UIButton) {&#xA;        mainStore.dispatch(&#xA;            CounterActionDecrease()&#xA;        )&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;newState&lt;/code&gt; method will be called by the &lt;code&gt;Store&lt;/code&gt; whenever a new app state is available, this is where we need to adjust our view to reflect the latest app state.&lt;/p&gt; &#xA;&lt;p&gt;Button taps result in dispatched actions that will be handled by the store and its reducers, resulting in a new app state.&lt;/p&gt; &#xA;&lt;p&gt;This is a very basic example that only shows a subset of ReSwift&#39;s features, read the Getting Started Guide to see how you can build entire apps with this architecture. For a complete implementation of this example see the &lt;a href=&#34;https://github.com/ReSwift/CounterExample&#34;&gt;CounterExample&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h3&gt;Create a subscription of several substates combined&lt;/h3&gt; &#xA;&lt;p&gt;Just create a struct representing the data model needed in the subscriber class, with a constructor that takes the whole app state as a param. Consider this constructor as a mapper/selector from the app state to the subscriber state. Being &lt;code&gt;MySubState&lt;/code&gt; a struct and conforming to &lt;code&gt;Equatable&lt;/code&gt;, ReSwift (by default) will not notify the subscriber if the computed output hasn&#39;t changed. Also, Swift will be able to infer the type of the subscription.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MySubState: Equatable {&#xA;    // Combined substate derived from the app state.&#xA;    &#xA;    init(state: AppState) {&#xA;        // Compute here the substate needed.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;store.subscribe(self) { $0.select(MySubState.init) }&#xA;    &#xA;func newState(state: MySubState) {&#xA;    // Profit!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Why ReSwift?&lt;/h1&gt; &#xA;&lt;p&gt;Model-View-Controller (MVC) is not a holistic application architecture. Typical Cocoa apps defer a lot of complexity to controllers since MVC doesn&#39;t offer other solutions for state management, one of the most complex issues in app development.&lt;/p&gt; &#xA;&lt;p&gt;Apps built upon MVC often end up with a lot of complexity around state management and propagation. We need to use callbacks, delegations, Key-Value-Observation and notifications to pass information around in our apps and to ensure that all the relevant views have the latest state.&lt;/p&gt; &#xA;&lt;p&gt;This approach involves a lot of manual steps and is thus error prone and doesn&#39;t scale well in complex code bases.&lt;/p&gt; &#xA;&lt;p&gt;It also leads to code that is difficult to understand at a glance, since dependencies can be hidden deep inside of view controllers. Lastly, you mostly end up with inconsistent code, where each developer uses the state propagation procedure they personally prefer. You can circumvent this issue by style guides and code reviews but you cannot automatically verify the adherence to these guidelines.&lt;/p&gt; &#xA;&lt;p&gt;ReSwift attempts to solve these problem by placing strong constraints on the way applications can be written. This reduces the room for programmer error and leads to applications that can be easily understood - by inspecting the application state data structure, the actions and the reducers.&lt;/p&gt; &#xA;&lt;p&gt;This architecture provides further benefits beyond improving your code base:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stores, Reducers, Actions and extensions such as ReSwift Router are entirely platform independent - you can easily use the same business logic and share it between apps for multiple platforms (iOS, tvOS, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Want to collaborate with a co-worker on fixing an app crash? Use &lt;a href=&#34;https://github.com/ReSwift/ReSwift-Recorder&#34;&gt;ReSwift Recorder&lt;/a&gt; to record the actions that lead up to the crash and send them the JSON file so that they can replay the actions and reproduce the issue right away.&lt;/li&gt; &#xA; &lt;li&gt;Maybe recorded actions can be used to build UI and integration tests?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The ReSwift tooling is still in a very early stage, but aforementioned prospects excite me and hopefully others in the community as well!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://academy.realm.io/posts/benji-encz-unidirectional-data-flow-swift/&#34;&gt;You can also watch this talk on the motivation behind ReSwift&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started Guide&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://reswift.github.io/ReSwift/master/getting-started-guide.html&#34;&gt;A Getting Started Guide that describes the core components of apps built with ReSwift lives here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get an understanding of the core principles we recommend reading the brilliant &lt;a href=&#34;http://redux.js.org/&#34;&gt;redux documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;You can install ReSwift via &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; by adding it to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use_frameworks!&#xA;&#xA;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;8.0&#39;&#xA;&#xA;pod &#39;ReSwift&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Carthage&lt;/h2&gt; &#xA;&lt;p&gt;You can install ReSwift via &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; by adding the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;ReSwift/ReSwift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accio&lt;/h2&gt; &#xA;&lt;p&gt;You can install ReSwift via &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;Accio&lt;/a&gt; by adding the following line to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/ReSwift/ReSwift.git&#34;, .upToNextMajor(from: &#34;5.0.0&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add &lt;code&gt;ReSwift&lt;/code&gt; to your App targets dependencies like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(&#xA;    name: &#34;App&#34;,&#xA;    dependencies: [&#xA;        &#34;ReSwift&#34;,&#xA;    ]&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;accio update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Package Manager&lt;/h2&gt; &#xA;&lt;p&gt;You can install ReSwift via &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; by adding the following line to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    [...]&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/ReSwift/ReSwift.git&#34;, from: &#34;5.0.0&#34;),&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Checking out Source Code&lt;/h1&gt; &#xA;&lt;p&gt;After checking out the project run &lt;code&gt;pod install&lt;/code&gt; to get the latest supported version of &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt;, which we use to ensure a consistent style in the codebase.&lt;/p&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;Using this library you can implement apps that have an explicit, reproducible state, allowing you, among many other things, to replay and rewind the app state, as shown below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/Docs/img/timetravel.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Extensions&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the core component for ReSwift, the following extensions are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ReSwift/ReSwift-Thunk&#34;&gt;ReSwift-Thunk&lt;/a&gt;: Provides a ReSwift middleware that lets you dispatch thunks (action creators) to encapsulate processes like API callbacks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ReSwift/ReSwift-Router&#34;&gt;ReSwift-Router&lt;/a&gt;: Provides a ReSwift compatible Router that allows declarative routing in iOS applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ReSwift/ReSwift-Recorder&#34;&gt;ReSwift-Recorder&lt;/a&gt;: Provides a &lt;code&gt;Store&lt;/code&gt; implementation that records all &lt;code&gt;Action&lt;/code&gt;s and allows for hot-reloading and time travel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Example Projects&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ReSwift/CounterExample&#34;&gt;CounterExample&lt;/a&gt;: A very simple counter app implemented with ReSwift.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ReSwift/CounterExample-Navigation-TimeTravel&#34;&gt;CounterExample-Navigation-TimeTravel&lt;/a&gt;: This example builds on the simple CounterExample app, adding time travel with &lt;a href=&#34;https://github.com/ReSwift/ReSwift-Recorder&#34;&gt;ReSwiftRecorder&lt;/a&gt; and routing with &lt;a href=&#34;https://github.com/ReSwift/ReSwift-Router&#34;&gt;ReSwiftRouter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ReSwift/GitHubBrowserExample&#34;&gt;GitHubBrowserExample&lt;/a&gt;: A real world example, involving authentication, network requests and navigation. Still WIP but should be the best resource for starting to adapt &lt;code&gt;ReSwift&lt;/code&gt; in your own app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cardoso/ReduxMovieDB&#34;&gt;ReduxMovieDB&lt;/a&gt;: A simple App that queries the tmdb.org API to display the latest movies. Allows searching and viewing details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ben-G/Meet&#34;&gt;Meet&lt;/a&gt;: A real world application being built with ReSwift - currently still very early on. It is not up to date with the latest version of ReSwift, but is the best project for demonstrating time travel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Goktug/Redux-Twitter&#34;&gt;Redux-Twitter&lt;/a&gt;: A basic Twitter search implementation built with ReSwift and RxSwift, involing Twitter authentication, network requests and navigation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Production Apps with Open Source Code&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danbee/persephone&#34;&gt;Persephone&lt;/a&gt;, a MPD music player daemon controller for macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/producthunt/producthunt-osx&#34;&gt;Product Hunt for OS X&lt;/a&gt; Official Product Hunt client for macOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;There&#39;s still a lot of work to do here! We would love to see you involved! You can find all the details on how to get started in the &lt;a href=&#34;https://raw.githubusercontent.com/ReSwift/ReSwift/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks a lot to &lt;a href=&#34;https://github.com/gaearon&#34;&gt;Dan Abramov&lt;/a&gt; for building &lt;a href=&#34;https://github.com/reactjs/redux&#34;&gt;Redux&lt;/a&gt; - all ideas in here and many implementation details were provided by his library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Get in touch&lt;/h1&gt; &#xA;&lt;p&gt;If you have any questions, you can find the core team on twitter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/benjaminencz&#34;&gt;@benjaminencz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/karlbowden&#34;&gt;@karlbowden&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ARendtslev&#34;&gt;@ARendtslev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ctietze&#34;&gt;@ctietze&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mjarvis&#34;&gt;@mjarvis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also have a &lt;a href=&#34;https://gitter.im/ReSwift/public&#34;&gt;public gitter chat!&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>