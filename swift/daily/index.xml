<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-07T01:27:57Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mono0926/LicensePlist</title>
    <updated>2024-03-07T01:27:57Z</updated>
    <id>tag:github.com,2024-03-07:/mono0926/LicensePlist</id>
    <link href="https://github.com/mono0926/LicensePlist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A license list generator of all your dependencies for iOS applications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/LicensePlist.png&#34; width=&#34;200&#34; height=&#34;200&#34; alt=&#34;LicensePlist Logo&#34;&gt; LicensePlist&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/platforms-iOS-333333.svg?sanitize=true&#34; alt=&#34;platforms&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mono0926/NativePopup/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-lightgrey.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.3-4BC51D.svg?style=flat&#34; alt=&#34;Language: Swift 5.3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mono0926/LicensePlist/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/mono0926/LicensePlist/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mono0926/LicensePlist/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/mono0926/LicensePlist/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;LicensePlist&lt;/code&gt; is a command-line tool that automatically generates a Plist of all your dependencies, including files added manually(specified by &lt;a href=&#34;https://github.com/mono0926/LicensePlist/raw/master/Tests/LicensePlistTests/Resources/license_plist.yml&#34;&gt;YAML config file&lt;/a&gt;) or using &lt;code&gt;Carthage&lt;/code&gt; or &lt;code&gt;CocoaPods&lt;/code&gt;. All these licenses then show up in the Settings app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/flow.png&#34; alt=&#34;Flow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mono0926/Resource/raw/master/LicensePlist/LicensePlist.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;App Setting Root&lt;/th&gt; &#xA;   &lt;th&gt;License List&lt;/th&gt; &#xA;   &lt;th&gt;License Detail&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/root.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/list.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/detail.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;br&gt; SPM(Swift Package Manager) are not supported.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;CocoaPods (Recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;LicensePlist&#39;&#xA;# Installation path: `${PODS_ROOT}/LicensePlist/license-plist`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew (Also Recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install licenseplist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mint (Also Recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mint run mono0926/LicensePlist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Xcode project - SPM&lt;/h3&gt; &#xA;&lt;p&gt;In Project Settings, on the tab &#34;Package Dependencies&#34;, click &#34;+&#34; and add &lt;code&gt;https://github.com/mono0926/LicensePlist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Click &#34;Add Package&#34; without selecting any package products.&lt;/p&gt; &#xA;&lt;h3&gt;Download the executable binary from &lt;a href=&#34;https://github.com/mono0926/LicensePlist/releases&#34;&gt;Releases&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Download from &lt;a href=&#34;https://github.com/mono0926/LicensePlist/releases&#34;&gt;Releases&lt;/a&gt;, then copy to &lt;code&gt;/usr/local/bin/license-plist&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;Or you can also download the latest binary and install it with a one-liner.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://raw.githubusercontent.com/mono0926/LicensePlist/master/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;Clone the master branch of the repository, then run &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/mono0926/LicensePlist.git&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When you are in the directory that contains your &lt;code&gt;Cartfile&lt;/code&gt; or &lt;code&gt;Pods&lt;/code&gt;, simply execute &lt;code&gt;license-plist&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.mono0926.LicensePlist.Output&lt;/code&gt; directory will be generated.&lt;/li&gt; &#xA; &lt;li&gt;Move the files in the output directory into your app&#39;s &lt;code&gt;Settings.bundle&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Settings.bundle.zip&#34;&gt;Settings.bundle&#39;s sample is here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The point is to &lt;a href=&#34;https://github.com/mono0926/LicensePlist/raw/master/Settings.bundle/Root.plist#L19&#34;&gt;specify &lt;code&gt;com.mono0926.LicensePlist&lt;/code&gt; as license list file on your &lt;code&gt;Root.plist&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;Settings.bundle&#xA;├── Root.plist&#xA;├── com.mono0926.LicensePlist&#xA;│&amp;nbsp;&amp;nbsp; ├── APIKit.plist&#xA;│&amp;nbsp;&amp;nbsp; ├── Alamofire.plist&#xA;│&amp;nbsp;&amp;nbsp; └── EditDistance.plist&#xA;├── com.mono0926.LicensePlist.plist&#xA;├── en.lproj&#xA;│&amp;nbsp;&amp;nbsp; └── Root.strings&#xA;└── ja.lproj&#xA;    └── Root.strings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;You can see options by &lt;code&gt;license-plist --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;--cartfile-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;Cartfile&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--mintfile-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;Mintfile&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--pods-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;Pods&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--package-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;Package.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LicensePlist&lt;/code&gt; tries to find &lt;code&gt;YourProjectName.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved&lt;/code&gt; and &lt;code&gt;YourProjectName.xcworkspace/xcshareddata/swiftpm/Package.resolved&lt;/code&gt;, then uses new one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--package-paths&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for multiple &lt;code&gt;Package.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Example: &lt;code&gt;license-plist --package-paths /path/to/package1/Package.swift /path/to/package2/Package.swift&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--package-sources-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: None.&lt;/li&gt; &#xA; &lt;li&gt;The directory with cloned Swift package sources. If specified &lt;code&gt;LicensePlist&lt;/code&gt; uses cloned files instead of GitHub API. For more information, see parameter &lt;code&gt;-clonedSourcePackagesDirPath&lt;/code&gt; of &lt;a href=&#34;https://developer.apple.com/library/archive/technotes/tn2339/_index.html&#34;&gt;xcodebuild&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Example: &lt;code&gt;license-plist --package-sources-path ./SourcePackages&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--xcodeproj-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;&#34;*.xcodeproj&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;By specifiying the path to the &lt;code&gt;.xcodeproj&lt;/code&gt; &lt;code&gt;LicensePlist&lt;/code&gt; will attempt to load the &lt;code&gt;Package.resolved&lt;/code&gt; from that Xcode project. If you specify &lt;code&gt;somedir/*.xcodeproj&lt;/code&gt; then &lt;code&gt;LicensePlist&lt;/code&gt; will load from the first &lt;code&gt;xcodeproj&lt;/code&gt; it finds in &lt;code&gt;somedir&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--xcworkspace-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;&#34;*.xcworkspace&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;By specifying the path to the &lt;code&gt;.xcworkspace&lt;/code&gt; &lt;code&gt;LicensePlist&lt;/code&gt; will load the &lt;code&gt;Package.resolved&lt;/code&gt; from that Xcode workspace. If you specify &lt;code&gt;somedir/*.xcworkspace&lt;/code&gt; then &lt;code&gt;LicensePlist&lt;/code&gt; will load from the first &lt;code&gt;xcworkspace&lt;/code&gt; it finds in &lt;code&gt;somedir&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--xcworkspace-path&lt;/code&gt; supersedes any provided &lt;code&gt;--xcodeproj-path&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--output-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;com.mono0926.LicensePlist.Output&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recommended: &lt;code&gt;--output-path YOUR_PRODUCT_DIR/Settings.bundle&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--github-token&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: None.&lt;/li&gt; &#xA; &lt;li&gt;LicensePlist uses GitHub API, so sometimes API limit errors occur. You can avoid those errors by specifying a GitHub token.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;You can generate a token here&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;repo&lt;/code&gt; scope is needed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also pass the GitHub token via the &lt;code&gt;LICENSE_PLIST_GITHUB_TOKEN&lt;/code&gt; environment variable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--config-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;license_plist.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can specify GitHub libraries(introduced by hand) and excluded libraries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mono0926/LicensePlist/raw/master/Tests/LicensePlistTests/Resources/license_plist.yml&#34;&gt;Example is here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/#Configuration&#34;&gt;Configuration&lt;/a&gt; for more information&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--prefix&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;com.mono0926.LicensePlist&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can specify output file names instead of default one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--html-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: None.&lt;/li&gt; &#xA; &lt;li&gt;If this path is specified, a html acknowledgements file will be generated. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mono0926/LicensePlist/raw/master/Assets/acknowledgements.html&#34;&gt;Example is here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--markdown-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: None.&lt;/li&gt; &#xA; &lt;li&gt;If this path is specified, a markdown acknowledgements file will be generated. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mono0926/LicensePlist/raw/master/Assets/acknowledgements.md&#34;&gt;Example is here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--csv-path&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: None.&lt;/li&gt; &#xA; &lt;li&gt;If this path is specified, a csv acknowledgements file will be generated. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mono0926/LicensePlist/raw/master/Assets/acknowledgements.csv&#34;&gt;Example is here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--license-file-names&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;LICENSE, LICENSE.*&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;License file name variants for cloned Swift packages. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Case insensitive.&lt;/li&gt; &#xA;   &lt;li&gt;Supports any non-empty path extensions if &lt;code&gt;FILENAME.*&lt;/code&gt; is specified.&lt;/li&gt; &#xA;   &lt;li&gt;Used only in combination with &lt;code&gt;--package-sources-path&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--force&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: false&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LicensePlist&lt;/code&gt; saves latest result summary, so if there are no changes, the program interrupts. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In this case, &lt;strong&gt;execution time is less than 100ms for the most case&lt;/strong&gt;, so &lt;strong&gt;you can run &lt;code&gt;LicensePlist&lt;/code&gt; at &lt;code&gt;Run Script Phase&lt;/code&gt; every time&lt;/strong&gt; 🎉&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can run all the way anyway, by using &lt;code&gt;--force&lt;/code&gt; flag.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--add-version-numbers&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: false&lt;/li&gt; &#xA; &lt;li&gt;When the library name is &lt;code&gt;SomeLibrary&lt;/code&gt;, by adding &lt;code&gt;--add-version-numbers&lt;/code&gt; flag, the name will be changed to &lt;code&gt;SomeLibrary (X.Y.Z)&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;X.Y.Z&lt;/code&gt; is parsed from CocoaPods and Cartfile information, and GitHub libraries specified at &lt;a href=&#34;https://github.com/mono0926/LicensePlist/raw/master/Tests/LicensePlistTests/Resources/license_plist.yml&#34;&gt;Config YAML&lt;/a&gt; also support this flag.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/list_version.png&#34; width=&#34;320&#34; height=&#34;568&#34; alt=&#34;License list with versions&#34;&gt; &#xA;&lt;h4&gt;&lt;code&gt;--add-sources&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: false&lt;/li&gt; &#xA; &lt;li&gt;Adds the source of the library to the output if there is one. The source for GitHub and CocoaPods libraries is generated. Manual libraries use the optional source field.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--suppress-opening-directory&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: false&lt;/li&gt; &#xA; &lt;li&gt;Only when the files are created or updated, the terminal or the finder opens. By adding &lt;code&gt;--suppress-opening-directory&lt;/code&gt; flag, this behavior is suppressed.&lt;/li&gt; &#xA; &lt;li&gt;Automatically enabled if &lt;code&gt;--sandbox-mode&lt;/code&gt; is specified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--single-page&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: false&lt;/li&gt; &#xA; &lt;li&gt;All licenses are listed on a single page, not separated pages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--fail-if-missing-license&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: false&lt;/li&gt; &#xA; &lt;li&gt;If there is even one package for which a license cannot be found, LicensePlist returns exit code 1.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--silence-mode&lt;/code&gt; / &lt;code&gt;--verbose&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By adding the &lt;code&gt;--silence-mode&lt;/code&gt; flag, the logger&#39;s output will not print.&lt;/li&gt; &#xA; &lt;li&gt;The logger&#39;s output will be more detailed than the average log level by adding the &lt;code&gt;--verbose&lt;/code&gt; flag.&lt;/li&gt; &#xA; &lt;li&gt;LicencePlist uses the latter option if you simultaneously set the &lt;code&gt;--silence-mode&lt;/code&gt; option and the &lt;code&gt;--verbose&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Default: average log level&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--no-color&lt;/code&gt; / &lt;code&gt;--color&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The logger&#39;s output is printed in monochrome by adding the &lt;code&gt;--no-color&lt;/code&gt; flag. If any escape characters in CI/CD log bother you, the &lt;code&gt;--no-color&lt;/code&gt; option will help.&lt;/li&gt; &#xA; &lt;li&gt;By adding the &lt;code&gt;--color&lt;/code&gt; flag, LicensePlist will always print the logger&#39;s output in color.&lt;/li&gt; &#xA; &lt;li&gt;LicencePlist uses the latter option if you simultaneously set the &lt;code&gt;--no-color&lt;/code&gt; option and the &lt;code&gt;--color&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;If neither option is specified, LicensePlist will look for the &lt;code&gt;NO_COLOR&lt;/code&gt; environment variable. If you set the &lt;code&gt;NO_COLOR&lt;/code&gt; environment variable to &lt;code&gt;&#34;1&#34;&lt;/code&gt;, LicensePlist runs without colors.&lt;/li&gt; &#xA; &lt;li&gt;Default: auto - LicensePlist decides its color mode depending on the terminal type.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;--sandbox-mode&lt;/code&gt; / &lt;code&gt;--no-sandbox-mode&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default: false&lt;/li&gt; &#xA; &lt;li&gt;Enables or disables the &#34;sandbox&#34; mode.&lt;/li&gt; &#xA; &lt;li&gt;In the sandbox mode, LicensePlist avoids network requests. That means Swift package licenses can not be fetched with GitHub API. To parse Swift package licenses &lt;code&gt;--package-sources-path&lt;/code&gt; must be specified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integrate into build - run script&lt;/h3&gt; &#xA;&lt;p&gt;Add a &lt;code&gt;Run Script Phase&lt;/code&gt; to &lt;code&gt;Build Phases&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;if [ $CONFIGURATION = &#34;Debug&#34; ]; then&#xA;/usr/local/bin/license-plist --output-path $PRODUCT_NAME/Settings.bundle --github-token YOUR_GITHUB_TOKEN&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/run_script_phase.png&#34; alt=&#34;Run Script Phase&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you&#39;ve installed LicensePlist via CocoaPods the script should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;if [ $CONFIGURATION = &#34;Debug&#34; ]; then&#xA;${PODS_ROOT}/LicensePlist/license-plist --output-path $PRODUCT_NAME/Settings.bundle --github-token YOUR_GITHUB_TOKEN&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integrate into build - build tool plugin&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;LicensePlist build tool plugins requires &lt;a href=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/#xcode-project---spm&#34;&gt;Swift package installation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/choose_plugin.png&#34; alt=&#34;Choose package plugins&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Select your target, on the tab &#34;Build Phases&#34;, in the section &#34;Run Build Tool Plug-ins&#34;, click &#34;+&#34; and add &lt;code&gt;LicensePlistBuildTool&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/run_build_tool_plugins.png&#34; alt=&#34;Run build tool plug-ins&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the case of using the build tool plugin, define all the settings in &lt;code&gt;license_plist.yml&lt;/code&gt; at the root of your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;license_plist.yml&lt;/code&gt; example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;options:&#xA;  xcworkspacePath: &#34;*.xcworkspace&#34;&#xA;  prefix: Acknowledgements&#xA;  singlePage: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: to process Swift Package licenses, the config must include one of the following parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;xcworkspacePath&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xcodeprojPath&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;packagePaths&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;outputPath&lt;/code&gt; and &lt;code&gt;packageSourcesPath&lt;/code&gt; config parameters are ignored by the build tool plugin.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/#configuration&#34;&gt;configuration&lt;/a&gt; section for more information.&lt;/p&gt; &#xA;&lt;p&gt;If you need to put license files to &lt;code&gt;Settings.bundle&lt;/code&gt; or any other specific place add the following script to build phases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;Will copy acknowledgements&#34;&#xA;ACKNOWLEDGEMENTS_DIR=${BUILT_PRODUCTS_DIR}/${CONTENTS_FOLDER_PATH}/com.mono0926.LicensePlist.Output&#xA;DESTINATION_PATH=${BUILT_PRODUCTS_DIR}/${CONTENTS_FOLDER_PATH}/Settings.bundle/&#xA;cp -r &#34;${ACKNOWLEDGEMENTS_DIR}&#34;/* &#34;${DESTINATION_PATH}&#34;&#xA;rm -rf &#34;${ACKNOWLEDGEMENTS_DIR}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in project contextual menu click &#34;AddAcknowledgementsCopyScriptCommand&#34; and select application target to create the build phase automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/copy_script_command.png&#34; alt=&#34;AddAcknowledgementsCopyScriptCommand&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build the app. At the first run, Xcode asks a permission to run the plugin. Click &#34;Trust &amp;amp; Enable All&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/trust_and_enable.png&#34; alt=&#34;Trust &amp;amp; Enable All&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For unattended use (e.g. on CI), you can disable the package validation dialog by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;individually passing &lt;code&gt;-skipPackagePluginValidation&lt;/code&gt; to &lt;code&gt;xcodebuild&lt;/code&gt; or&lt;/li&gt; &#xA; &lt;li&gt;globally setting &lt;code&gt;defaults write com.apple.dt.Xcode IDESkipPackagePluginFingerprintValidatation -bool YES&lt;/code&gt; for that user.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: This implicitly trusts all Xcode package plugins and bypasses Xcode&#39;s package validation dialogs, which has security implications.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contextual menu command&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;LicensePlist command requires &lt;a href=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/#xcode-project---spm&#34;&gt;Swift package installation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the project contextual menu click &#34;GenerateAcknowledgementsCommand&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/generate_acknowledgements_menu.png&#34; alt=&#34;Generate Acknowledgements menu command in Xcode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The command dialog allows to specify &lt;a href=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/#options&#34;&gt;command line arguments&lt;/a&gt;. Since Xcode doesn&#39;t save the arguments for future use, it&#39;s recommended to use a &lt;a href=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/#configuration&#34;&gt;configuration file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Click &#34;Run&#34; to run LicensePlist.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/generate_acknowledgements_command.png&#34; alt=&#34;Generate Acknowledgements command dialog in Xcode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Click &#34;Allow Command to Change files&#34;. This action provides LicensePlist write access to your project directory.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Don&#39;t ask again&#34; option prevents showing this dialog in the future.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/allow_command_to_change_files.png&#34; alt=&#34;Allow command to change files dialog in Xcode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;--package-sources-path&lt;/code&gt; option and &lt;code&gt;packageSourcesPath&lt;/code&gt; config parameter are ignored by the command plugin.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;General options&lt;/h3&gt; &#xA;&lt;p&gt;The main parameters from the &lt;a href=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/#Options&#34;&gt;Options&lt;/a&gt; can be defined in the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;All the parameters are optional.&lt;/p&gt; &#xA;&lt;p&gt;The tool uses the command line value if both the command line and the config specify values for the same attribute.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;options:&#xA;  outputPath: &#34;./com.mono0926.LicensePlist.Output&#34;&#xA;  cartfilePath: Cartfile&#xA;  mintfilePath: Mintfile&#xA;  podsPath: Pods&#xA;  packagePaths:&#xA;    - Package.swift&#xA;  packageSourcesPath: &#34;./SourcePackages&#34;&#xA;  xcodeprojPath: &#34;*.xcodeproj&#34;&#xA;  xcworkspacePath: &#34;*.xcworkspace&#34;&#xA;  prefix: com.mono0926.LicensePlist&#xA;  gitHubToken: YOUR_GITHUB_TOKEN&#xA;  htmlPath: acknowledgements.html&#xA;  markdownPath: acknowledgements.md&#xA;  licenseFileNames:&#xA;    - LICENSE&#xA;    - LICENSE.*&#xA;  force: false&#xA;  addVersionNumbers: false&#xA;  suppressOpeningDirectory: false&#xA;  singlePage: false&#xA;  failIfMissingLicense: false&#xA;  addSources: false&#xA;  sandboxMode: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual GitHub source&lt;/h3&gt; &#xA;&lt;p&gt;A GitHub source can be explicitly defined to include the license in the scenario where it can&#39;t be inferred from your dependency files.&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;github:&#xA;  - owner: mono0926&#xA;    name: LicensePlist&#xA;    version: 1.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual License Body&lt;/h3&gt; &#xA;&lt;p&gt;If you need to include a license that isn&#39;t available on GitHub, you can place the license text in the config file to be included in the output. The license text can also be read from a local file, to keep the config file clean.&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;License body directly in the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;manual:&#xA;  - source: https://webrtc.googlesource.com/src&#xA;    name: WebRTC&#xA;    version: M61&#xA;    body: |-&#xA;      Copyright (c) 2011, The WebRTC project authors. All rights reserved.&#xA;      ...&#xA;      ...&#xA;      ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;License body in local file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;manual:&#xA;  - name: &#34;Dummy License File&#34;&#xA;    file: &#34;dummy_license.txt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Excludes&lt;/h3&gt; &#xA;&lt;p&gt;Excludes can be defined to exclude matching libraries from the final output. An exclude is a dictionary containing any combination of &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;owner&lt;/code&gt;, or &lt;code&gt;licenseType&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using the dictionary format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The exclusion rule is only applied if &lt;em&gt;all&lt;/em&gt; properties match for a dependency. eg, &lt;code&gt;(name: LicensePlist) AND (owner: mono0926)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any property can be either a string or a regular expression.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;Exclude a package by name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;exclude:&#xA;  - name: LicensePlist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exclude packages using a specific license:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;exclude:&#xA;  - licenseType: &#34;Apache 2.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exclude packages using any matching licenses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;exclude:&#xA;  - licenseType: /BSD/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exclude packages from a specific github owner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;exclude:&#xA;  - owner: mycompany&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exclude packages from a specific github owner containing matching licenses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;exclude:&#xA;  - owner: mycompany&#xA;    licenseType: /^(?!.*MIT).*$/ # this regex excludes packages that do NOT use the MIT license&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exclude a package from a specific github owner and repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;exclude:&#xA;  - owner: mycompany&#xA;    name: private-repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rename&lt;/h3&gt; &#xA;&lt;p&gt;If a library name is unsuitable for the output bundle, you can explicitly rename it. This can be used when a library name is too vague, or if more human-readable names are needed.&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;rename:&#xA;  LicensePlist: License Plist # Rename LicensePlist to &#34;License Plist&#34;&#xA;  WebRTC: Web RTC # Rename WebRTC to &#34;Web RTC&#34; (which is faulty, but used for test)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;h3&gt;How to generate Xcode project?&lt;/h3&gt; &#xA;&lt;p&gt;Execute &lt;code&gt;swift package generate-xcodeproj&lt;/code&gt; or &lt;code&gt;make xcode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Related Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/swift-column/license-plist-c0363a008c67&#34;&gt;LicensePlist というiOSアプリ利用ライブラリのライセンス一覧生成するツールを作りました – Swift・iOSコラム – Medium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://qiita.com/mono0926/items/c32c008384df40bf4e41&#34;&gt;Swift Package Manager(SwiftPM)で作ったコマンドラインツールをHomebrewに登録する方法 - Qiita&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starcharts.herokuapp.com/mono0926/LicensePlist&#34;&gt;&lt;img src=&#34;https://starcharts.herokuapp.com/mono0926/LicensePlist.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;寄付(Donation)&lt;/h2&gt; &#xA;&lt;p&gt;Donations are welcome if you like LicensePlist🤗&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paypal.me/mono0926&#34;&gt;PayPal.Me&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Transfer commission will be charged (40 yen + 3.6%)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.patreon.com/licenseplist&#34;&gt;mono is creating LicensePlist | Patreon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B004N3APGO/mono0926-22/&#34;&gt;Amazonギフト券- Eメールタイプ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;メールアドレス: &lt;a href=&#34;mailto:mono0926@gmail.com&#34;&gt;mono0926@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/registry/wishlist/3P51MRDW2WBN6/ref=nav_wishlist_lists_1&#34;&gt;ほしい物リスト&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Send Money by &lt;a href=&#34;https://kyash.co/&#34;&gt;ウォレットアプリ Kyash&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mono0926/LicensePlist/main/Screenshots/kyash.jpeg&#34; alt=&#34;Kyash&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>