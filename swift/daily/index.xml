<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-13T01:45:14Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>VakhoKontridze/VComponents</title>
    <updated>2023-04-13T01:45:14Z</updated>
    <id>tag:github.com,2023-04-13:/VakhoKontridze/VComponents</id>
    <link href="https://github.com/VakhoKontridze/VComponents" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VComponents is a SwiftUI package that contains 30+ customizable UI components&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VComponents&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VakhoKontridze/VComponents/main/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VakhoKontridze/VComponents/main/#components&#34;&gt;Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VakhoKontridze/VComponents/main/#guidelines&#34;&gt;Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VakhoKontridze/VComponents/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VakhoKontridze/VComponents/main/#compatibility&#34;&gt;Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VakhoKontridze/VComponents/main/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;VComponents is a &lt;code&gt;SwiftUI&lt;/code&gt; package that contains 30+ customizable UI components.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;h4&gt;Buttons&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230779300-dc408524-ac16-4469-ba4f-195a05076154.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230779495-84b0e553-16af-4b51-82c4-6f15247c9d31.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230779544-7ee698d6-36d9-4715-bb3d-0082ee7ab016.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230779610-01ee42e6-3912-4316-acfb-e99d75bb0f3f.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230779758-5030b351-6d22-463b-8d63-91d9764eca66.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230779755-b15a2fc4-d811-4c96-888e-5b437495a484.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;State Pickers&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230779957-94c56311-167d-4087-a702-2c406ca9923d.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230780007-237b86c4-e9b2-4a65-9584-0a0fff4367af.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230780063-bb06c5cc-86e2-4f79-a01f-2351e01280ff.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Item Pickers&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230780284-aaacf102-e492-4146-8aa0-ddc4e8e47650.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230780344-9c49918b-5ef8-4e26-940e-5fbcef3ea657.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Value Pickers&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230780455-aa9ef2a0-aa27-4315-8f96-54804048b2bb.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230780537-a50527e1-a3f1-40c9-94b2-4f89bb63c847.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230780595-53c6ee12-1914-4b33-b2e4-8c2fc087c396.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Inputs&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230780686-891530b1-c9b2-4988-b3ee-0f101166bfbf.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782956-6050c117-b699-4887-86e5-03ed8eb4eb0c.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Containers&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230780884-25413248-e81e-422e-a4f5-25570498f58d.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230780974-03273059-5039-4412-9be4-07369808ba91.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Lists&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230781281-c75c219c-ac6d-4ad2-bcff-e8774687fed4.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Modals&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230781593-e4d86158-2b12-428b-96a0-b6b4cd2ac036.mp4&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230781706-354f5f84-2513-4371-aba2-9cf3f13b3a0b.mp4&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230781803-942f3023-7518-4eb7-bac8-52e1dad7d158.mp4&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230781879-befcedb5-d182-4611-9d89-1ff0c117457d.mp4&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782026-4ecfe120-7d91-436f-a999-5eba2f839ab1.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782027-583f42eb-f0a1-457f-a7f2-30e99be0aa27.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782028-be042565-d89d-49fc-ba1d-6babdc140b37.mp4&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Messages&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782129-22f4c6ff-7116-41fa-ae5a-0e8cd32c6039.mp4&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Indicators&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782380-ccd33ca5-1fdf-4c62-bee3-0091c9bcdaca.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782386-fcd6f14b-986a-482f-bbfe-86ecb92c3670.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782388-f55c43b9-7a2f-4bd2-a29a-ddfb262885d4.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782390-896d1182-e9d9-4cab-aa54-e71af922ae4d.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782391-52f2aa3c-fb7f-4a08-8457-23d462b6a520.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782392-7867a1c3-4408-4f14-bd2c-d2119b387b01.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Misc&lt;/h4&gt; &#xA;&lt;p&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782555-38ffbb66-3359-4181-9c6d-5bf57971e383.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782559-e42d5352-30c1-46e4-8461-7e0402111d68.png&#34;&gt; &lt;img width=&#34;350&#34; align=&#34;top&#34; src=&#34;https://user-images.githubusercontent.com/57289621/230782558-4275425e-62db-4d3e-9fd4-10855e073be3.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Guidelines&lt;/h2&gt; &#xA;&lt;h4&gt;UI Models&lt;/h4&gt; &#xA;&lt;p&gt;Components are not meant to be customized like you would a native &lt;code&gt;SwiftUI&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;p&gt;Instead, UI model can be passed as parameter to initializers. This parameter has default value, and is not required every time you create a view.&lt;/p&gt; &#xA;&lt;p&gt;UI Models are &lt;code&gt;struct&lt;/code&gt;s with default values. They break down into 5 models: &lt;code&gt;Layout&lt;/code&gt;, &lt;code&gt;Colors&lt;/code&gt;, &lt;code&gt;Fonts&lt;/code&gt;, &lt;code&gt;Animations&lt;/code&gt;, and &lt;code&gt;Misc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For instance, changing foreground color of &lt;code&gt;VPlainButton&lt;/code&gt; can be done by passing an UI model.&lt;/p&gt; &#xA;&lt;p&gt;Not Preferred:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {&#xA;    VPlainButton(&#xA;        action: doSomething,&#xA;        title: &#34;Lorem ipsum&#34;&#xA;    )&#xA;    .foregroundColor(.black)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Preferred:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let uiModel: VPlainButtonUIModel = {&#xA;    var UIModel: VPlainButtonUIModel = .init()&#xA;    &#xA;    uiModel.colors.title = VPlainButtonUIModel.Colors.StateColors(&#xA;        enabled: .black,&#xA;        pressed: .gray,&#xA;        disabled: .gray&#xA;    )&#xA;    &#xA;    return uiModel&#xA;}()&#xA;&#xA;var body: some View {&#xA;    VPlainButton(&#xA;        uiModel: uiModel,&#xA;        action: doSomething,&#xA;        title: &#34;Lorem ipsum&#34;&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternately, you can create static instances of UI models for reusability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension VPlainButtonUIModel {&#xA;    static let someUIModel: VPlainButtonUIModel = {&#xA;        var uiModel: VPlainButtonUIModel = .init()&#xA;        &#xA;        uiModel.colors.title = VPlainButtonUIModel.Colors.StateColors(&#xA;            enabled: .black,&#xA;            pressed: .gray,&#xA;            disabled: .gray&#xA;        )&#xA;        &#xA;        return uiModel&#xA;    }()&#xA;}&#xA;&#xA;var body: some View {&#xA;    VPlainButton(&#xA;        uiModel: .someUIModel,&#xA;        action: doSomething,&#xA;        title: &#34;Lorem ipsum&#34;&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Animations&lt;/h4&gt; &#xA;&lt;p&gt;VComponents approaches animations as bound to components and their UI models, and not to state. Which means, that to modify a state of component with an animation, you need to pass a custom UI model.&lt;/p&gt; &#xA;&lt;p&gt;For instance, by default, &lt;code&gt;VToggle&lt;/code&gt; uses &lt;code&gt;easeIn&lt;/code&gt; animation with duration &lt;code&gt;0.1&lt;/code&gt; to state change. This applies to both toggle press, as well as external modification of state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@State private var isOn: Bool = false&#xA;&#xA;var body: some View {&#xA;    VStack(content: {&#xA;        VToggle(isOn: $isOn)&#xA;        &#xA;        VPlainButton(&#xA;            action: { isOn.toggle() },&#xA;            title: &#34;Toggle&#34;&#xA;        )&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish to completely cancel animations, you have two options. First, is to set &lt;code&gt;stateChange&lt;/code&gt; animation to &lt;code&gt;nil&lt;/code&gt;, which still applies a &lt;code&gt;nil&lt;/code&gt; animation. Second, is to set &lt;code&gt;appliesStateChangeAnimation&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, which doesn&#39;t apply &lt;code&gt;stateChange&lt;/code&gt; animation at all.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@State private var isOn: Bool = false&#xA;&#xA;var body: some View {&#xA;    VStack(content: {&#xA;        VToggle(&#xA;            uiModel: {&#xA;                var uiModel: VToggleUIModel = .init()&#xA;                uiModel.animations.stateChange = nil&#xA;                return uiModel&#xA;            }(),&#xA;            isOn: $isOn&#xA;        )&#xA;        &#xA;        VPlainButton(&#xA;            action: { isOn.toggle() },&#xA;            title: &#34;Toggle&#34;&#xA;        )&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@State private var isOn: Bool = false&#xA;&#xA;var body: some View {&#xA;    VStack(content: {&#xA;        VToggle(&#xA;            uiModel: {&#xA;                var uiModel: VToggleUIModel = .init()&#xA;                uiModel.animations.appliesStateChangeAnimation = false&#xA;                return uiModel&#xA;            }(),&#xA;            isOn: $isOn&#xA;        )&#xA;        &#xA;        VPlainButton(&#xA;            action: { isOn.toggle() },&#xA;            title: &#34;Toggle&#34;&#xA;        )&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In some cases, the difference between these two may be significant. For instance, we can set the flag to &lt;code&gt;false&lt;/code&gt;, and mutate state with an external animation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@State private var isOn: Bool = false&#xA;&#xA;var body: some View {&#xA;    VStack(content: {&#xA;        VToggle(&#xA;            uiModel: {&#xA;                var uiModel: VToggleUIModel = .init()&#xA;                uiModel.animations.appliesStateChangeAnimation = false&#xA;                return uiModel&#xA;            }(),&#xA;            isOn: $isOn&#xA;        )&#xA;        &#xA;        VPlainButton(&#xA;            action: { &#xA;                withAnimation(.linear(duration: 1), {&#xA;                    isOn.toggle()&#xA;                })&#xA;            },&#xA;            title: &#34;Toggle&#34;&#xA;        )&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;https://github.com/VakhoKontridze/VComponents&lt;/code&gt; as a Swift Package in Xcode and follow the instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Package provides limited &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;tvOS&lt;/code&gt;, and &lt;code&gt;watchOS&lt;/code&gt; support.&lt;/p&gt; &#xA;&lt;p&gt;Versions with different majors are not directly compatible. When a new major is released, deprecated symbols are removed.&lt;/p&gt; &#xA;&lt;h4&gt;Versioning&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Major&lt;/strong&gt;&lt;/em&gt;. Major changes, such as big overhauls&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Minor&lt;/strong&gt;&lt;/em&gt;. Minor changes, such as new component, types, or properties in UI models&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Patch&lt;/strong&gt;&lt;/em&gt;. Bug fixes and improvements&lt;/p&gt; &#xA;&lt;h4&gt;History&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Ver&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Release Date&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Swift&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;SDK&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;VCore&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; 4.0&lt;br&gt;&lt;i&gt;&lt;sup&gt;(4.0.0 - 4.x.x)&lt;/sup&gt;&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;td&gt;2023 04 09&lt;/td&gt; &#xA;   &lt;td&gt; 5.8 &lt;/td&gt; &#xA;   &lt;td&gt; iOS 13.0&lt;br&gt; macOS 10.15&lt;br&gt; tvOS 13.0&lt;br&gt; watchOS 6.0 &lt;/td&gt; &#xA;   &lt;td&gt;4.7.0 - 4.x.x&lt;/td&gt; &#xA;   &lt;td&gt; iOS 13.0 support.&lt;br&gt; Multiplatform support.&lt;br&gt;RTL language support. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; 3.0&lt;br&gt;&lt;i&gt;&lt;sup&gt;(3.0.0 - 3.2.3)&lt;/sup&gt;&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;td&gt;2022 10 02&lt;/td&gt; &#xA;   &lt;td&gt;5.7&lt;/td&gt; &#xA;   &lt;td&gt;iOS 16.0&lt;/td&gt; &#xA;   &lt;td&gt;4.1.0 - 4.x.x&lt;/td&gt; &#xA;   &lt;td&gt; New SwiftUI API.&lt;br&gt; API changes. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; 2.0&lt;br&gt;&lt;i&gt;&lt;sup&gt;(2.0.0 - 2.3.4)&lt;/sup&gt;&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;td&gt;2022 05 26&lt;/td&gt; &#xA;   &lt;td&gt;5.6&lt;/td&gt; &#xA;   &lt;td&gt;iOS 15.0&lt;/td&gt; &#xA;   &lt;td&gt;3.2.0 - 3.x.x&lt;/td&gt; &#xA;   &lt;td&gt; New SwiftUI API.&lt;br&gt; API changes.&lt;br&gt; SPM support. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; 1.0&lt;br&gt;&lt;i&gt;&lt;sup&gt;(1.0.0 - 1.6.0)&lt;/sup&gt;&lt;/i&gt; &lt;/td&gt; &#xA;   &lt;td&gt;2021 02 07&lt;/td&gt; &#xA;   &lt;td&gt;5.3&lt;/td&gt; &#xA;   &lt;td&gt;iOS 14.0&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;e-mail: &lt;a href=&#34;mailto:vakho.kontridze@gmail.com&#34;&gt;vakho.kontridze@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kishikawakatsumi/swift-power-assert</title>
    <updated>2023-04-13T01:45:14Z</updated>
    <id>tag:github.com,2023-04-13:/kishikawakatsumi/swift-power-assert</id>
    <link href="https://github.com/kishikawakatsumi/swift-power-assert" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Power Assert in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;640px&#34; src=&#34;https://user-images.githubusercontent.com/40610/230884012-e70403f9-a1d2-471e-9328-efb3f5908d9f.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Swift Power Assert&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codemagic.io/apps/642dc9195f1acbc4a9aa8023/default-workflow/latest_build&#34;&gt;&lt;img src=&#34;https://api.codemagic.io/apps/642dc9195f1acbc4a9aa8023/default-workflow/status_badge.svg?sanitize=true&#34; alt=&#34;Codemagic build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Power asserts (also known as diagrammed assertions) augment your assertion failures with information about the values produced during evaluation of a condition, and present it in an easily digestible form. Power asserts are a popular feature of &lt;a href=&#34;https://github.com/spockframework/spock&#34;&gt;Spock&lt;/a&gt; (and later the entire &lt;a href=&#34;https://github.com/apache/groovy&#34;&gt;Groovy&lt;/a&gt; language independent of Spock), &lt;a href=&#34;http://www.scalatest.org/&#34;&gt;ScalaTest&lt;/a&gt; and &lt;a href=&#34;https://github.com/pniederw/expecty&#34;&gt;Expecty&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Power asserts provide descriptive assertion messages for your tests, like the following examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#expect(max(a, b) == c)&#xA;        |   |  |  |  |&#xA;        7   4  7  |  12&#xA;                  false&#xA;&#xA;#expect(xs.contains(4))&#xA;        |  |        |&#xA;        |  false    4&#xA;        [1, 2, 3]&#xA;&#xA;#expect(&#34;hello&#34;.hasPrefix(&#34;h&#34;) &amp;amp;&amp;amp; &#34;goodbye&#34;.hasSuffix(&#34;y&#34;))&#xA;        |       |         |    |  |         |         |&#xA;        &#34;hello&#34; true      &#34;h&#34;  |  &#34;goodbye&#34; false     &#34;y&#34;&#xA;                              false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why Power Assert?&lt;/h2&gt; &#xA;&lt;p&gt;When writing tests, we need to use different assertion functions. With Power Assert you only use the &lt;code&gt;#expect()&lt;/code&gt; function. There are many Assertion APIs, no need to remember them. Just create an expression that returns a boolean value and Power Assert will automatically display rich error information.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Swift Power Assert is implemented using &lt;a href=&#34;https://github.com/apple/swift-evolution/raw/main/proposals/0382-expression-macros.md&#34;&gt;macros&lt;/a&gt;, an experimental feature of Swift. Therefore, you must use the pre-release version of the Swift toolchain to use this library.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download and install the toolchain from &lt;a href=&#34;https://www.swift.org/download/&#34;&gt;the development snapshot on Swift.org&lt;/a&gt; after April 6, 2023.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the toolchain identifier in the &lt;code&gt;TOOLCHAINS&lt;/code&gt; environment variable to use the pre-release toolchain. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export TOOLCHAINS=org.swift.59202303301a&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: To find out the toolchain identifier, check the Info.plist in the toolchain. Toolchains are usually installed in `/Library/Developer/Toolchains/&#39;. Right-click on the toolchain icon and select &#34;Show Package Contents&#34; to find the Info.plist; the value of the Bundle Identifier key in the Info.plist is the toolchain identifier. For more information, see Sarun&#39;s excellent article. &lt;a href=&#34;https://sarunw.com/posts/how-to-use-pre-release-swift-version-with-command-line-tools/&#34;&gt;https://sarunw.com/posts/how-to-use-pre-release-swift-version-with-command-line-tools/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Check it out&lt;/h2&gt; &#xA;&lt;p&gt;To see PowerAssert in action, go to the Examples directory and run &lt;code&gt;swift test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd Example&#xA;$ swift test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the following results?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;...&#xA;Test Suite &#39;All tests&#39; started at 2023-04-05 07:17:58.800&#xA;Test Suite &#39;swift-power-assert-examplePackageTests.xctest&#39; started at 2023-04-05 07:17:58.801&#xA;Test Suite &#39;PowerAssertTests&#39; started at 2023-04-05 07:17:58.801&#xA;Test Case &#39;-[ExampleTests.PowerAssertTests testExample]&#39; started.&#xA;/swift-power-assert/Example/&#34;ExampleTests/ExampleTests.swift&#34;:8: error: -[ExampleTests.PowerAssertTests testExample] : failed -&#xA;#expect(a * b == 91)&#xA;        |   | |  |&#xA;        10  9 |  91&#xA;              false&#xA;/swift-power-assert/Example/&#34;ExampleTests/ExampleTests.swift&#34;:11: error: -[ExampleTests.PowerAssertTests testExample] : failed -&#xA;#expect(xs.contains(4))&#xA;        |  |        |&#xA;        |  false    4&#xA;        [1, 2, 3]&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify the code in &lt;code&gt;Example/Tests/ExampleTests.swift&lt;/code&gt; to try different patterns you like.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use Swift Power Assert in your library or application, first add SwiftPowerAssert to the Swift package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.8&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;MyLibrary&#34;,&#xA;  dependencies: [&#xA;    ...,&#xA;    .package(&#xA;        url: &#34;https://github.com/kishikawakatsumi/swift-power-assert.git&#34;,&#xA;        branch: &#34;main&#34;&#xA;    ),&#xA;  ],&#xA;  targets: [&#xA;    ...,&#xA;    .testTarget(&#xA;      name: &#34;MyLibraryTests&#34;,&#xA;      dependencies: [&#xA;        ...,&#xA;        .product(name: &#34;PowerAssert&#34;, package: &#34;swift-power-assert&#34;),&#xA;      ]&#xA;    ),&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, you can use Power Assert in your tests with the &lt;code&gt;#expect()&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// MyLibraryTests.swift&#xA;import XCTest&#xA;import PowerAssert&#xA;@testable import MyLibrary&#xA;&#xA;final class MyLibraryTests: XCTestCase {&#xA;  func testExample() {&#xA;    let a = 7&#xA;    let b = 4&#xA;    let c = 12&#xA;&#xA;    #expect(max(a, b) == c)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing assistance requested&lt;/h2&gt; &#xA;&lt;p&gt;Swift Power Assert is still in the early stages of development. If you could help us with testing, we would greatly appreciate it! Please try different code patterns using this library and report any problems you encounter. We welcome your feedback and improvement suggestions. Thank you very much!&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: I want to display the result even if the test is successful (i.e. the expression in the &lt;code&gt;#expect()&lt;/code&gt; function evaluates to &lt;code&gt;true&lt;/code&gt;).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: By default, the &lt;code&gt;#expect()&lt;/code&gt; function does not display the result if the expression evaluates to &lt;code&gt;true&lt;/code&gt;, because the test was successful. To always print the result, set the &lt;code&gt;verbose&lt;/code&gt; argument to true.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#expect(x == y, verbose: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: I want to know how the compiler actually expanded the macro.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A: You can use the &lt;code&gt;-dump-macro-expansions&lt;/code&gt; option to dump the macro expansion.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd Example&#xA;$ swift test -Xswiftc -Xfrontend -Xswiftc -dump-macro-expansions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run the above with the &lt;code&gt;-dump-macro-expansions&lt;/code&gt; option, you will get the following output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;...&#xA;@__swiftmacro_12ExampleTests011PowerAssertB0C04testA0yyF6expectfMf_.swift as ()&#xA;------------------------------&#xA;&#xA;        PowerAssert.Assertion(&#34;#expect(a * b == 91)&#34;, message: &#34;&#34;, file: #&#34;&#34;ExampleTests/ExampleTests.swift&#34;&#34;#, line: 8, verbose: false) {&#xA;  $0.capture($0.capture($0.capture(a .self, column: 8) * $0.capture(b .self, column: 12), column: 10) == $0.capture(91, column: 17), column: 14)&#xA;}&#xA;.render()&#xA;------------------------------&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kishikawakatsumi&#34;&gt;Kishikawa Katsumi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is released under the &lt;a href=&#34;https://github.com/kishikawakatsumi/SwiftPowerAssert/raw/master/LICENSE.txt&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>