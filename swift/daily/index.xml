<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-04T01:42:55Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ZhangDo/NeteaseTVDemo</title>
    <updated>2023-12-04T01:42:55Z</updated>
    <id>tag:github.com,2023-12-04:/ZhangDo/NeteaseTVDemo</id>
    <link href="https://github.com/ZhangDo/NeteaseTVDemo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NeteaseTVDemo (Vibefy) - 网易云音乐 tvOS 客户端&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NeteaseTVDemo - 网易云音乐 tvOS 客户端(已改名Vibefy)&lt;/h1&gt; &#xA;&lt;p&gt;代码完全开源，支持以下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;游客自动登录&lt;/li&gt; &#xA; &lt;li&gt;二维码登录&lt;/li&gt; &#xA; &lt;li&gt;每日推荐（歌单、单曲）&lt;/li&gt; &#xA; &lt;li&gt;歌单、播客、MV 分类&lt;/li&gt; &#xA; &lt;li&gt;音视频播放器&lt;/li&gt; &#xA; &lt;li&gt;歌词滚动&lt;/li&gt; &#xA; &lt;li&gt;最近播放（单曲 声音 歌单 专辑 播客）&lt;/li&gt; &#xA; &lt;li&gt;我的收藏（歌单 专辑 播客）&lt;/li&gt; &#xA; &lt;li&gt;我的歌单&lt;/li&gt; &#xA; &lt;li&gt;搜索&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;预览&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ZhangDo/NeteaseTVDemo/raw/main/images/preview.png&#34; alt=&#34;预览图&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;自行编译安装&lt;/li&gt; &#xA; &lt;li&gt;Vibefy: &lt;a href=&#34;https://testflight.apple.com/join/he8gBuuY&#34;&gt;TestFlight&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;提示&lt;/h2&gt; &#xA;&lt;p&gt;项目中的API服务是部署在我自己的腾讯云上的，但是为了自己的账号安全，请尽量使用自己部署的服务 这里 &lt;a href=&#34;https://github.com/ZhangDo/NeteaseRequest&#34;&gt;NeteaseRequest&lt;/a&gt; 有提示，或者直接到 &lt;a href=&#34;https://github.com/Binaryify/NeteaseCloudMusicApi&#34;&gt;NeteaseCloudMusicApi&lt;/a&gt; 有具体的部署方法&lt;/p&gt; &#xA;&lt;h2&gt;支持平台&lt;/h2&gt; &#xA;&lt;p&gt;Apple TV&lt;/p&gt; &#xA;&lt;h2&gt;开源代码：&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Client: &lt;a href=&#34;https://github.com/ZhangDo/NeteaseTVDemo&#34;&gt;https://github.com/ZhangDo/NeteaseTVDemo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NeteaseAPI: &lt;a href=&#34;https://github.com/ZhangDo/NeteaseRequest&#34;&gt;https://github.com/ZhangDo/NeteaseRequest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;QQ 交流群&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ZhangDo/NeteaseTVDemo/raw/main/images/WechatIMG95.png&#34; alt=&#34;预览图&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;参考及引用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Binaryify/NeteaseCloudMusicApi&#34;&gt;NeteaseCloudMusicApi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yichengchen/ATV-Bilibili-demo&#34;&gt;ATV-Bilibili-demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;声明&lt;/h2&gt; &#xA;&lt;p&gt;本项目的所有功能和资源都是基于公开的资料和技术开发的&lt;/p&gt; &#xA;&lt;p&gt;本项目的目的是促进知识共享和技术交流，欢迎开发者和用户积极参与并为项目做出贡献。&lt;/p&gt; &#xA;&lt;p&gt;本项目的所有代码和文档都是开放的&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nikitabobko/AeroSpace</title>
    <updated>2023-12-04T01:42:55Z</updated>
    <id>tag:github.com,2023-12-04:/nikitabobko/AeroSpace</id>
    <link href="https://github.com/nikitabobko/AeroSpace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AeroSpace is an i3-like tiling window manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AeroSpace Beta &lt;a href=&#34;https://github.com/nikitabobko/AeroSpace/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/nikitabobko/AeroSpace/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;AeroSpace is an i3-like tiling window manager for macOS&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UOl7ErqWbrk&#34;&gt;YouTube Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/guide.md&#34;&gt;AeroSpace Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/commands.md&#34;&gt;AeroSpace list of all commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/cli-commands.md&#34;&gt;AeroSpace list of additional CLI commands&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;Public Beta. Feedback is very much welcome&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I encourage you to try AeroSpace and file GitHub issues if something doesn&#39;t work for you. In particular, I&#39;m interested in issues that block you from using AeroSpace on daily basis.&lt;/li&gt; &#xA; &lt;li&gt;I already use AeroSpace on daily basis and I&#39;m happy with it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/guide.md&#34;&gt;The documentation&lt;/a&gt; covers all major things you need to know&lt;/li&gt; &#xA; &lt;li&gt;Expect minor breaking changes in the config format. Once the project reaches 1.0 the config is guaranteed to preserve backwards compatibility&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Manual&lt;/strong&gt; tiling window manager based on a &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/guide.md#tree&#34;&gt;tree paradigm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://i3wm.org/&#34;&gt;i3&lt;/a&gt; inspired&lt;/li&gt; &#xA; &lt;li&gt;AeroSpace employs its &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/guide.md#emulation-of-virtual-workspaces&#34;&gt;own emulation of virtual workspaces&lt;/a&gt; instead of relying on native macOS Spaces due to &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/guide.md#emulation-of-virtual-workspaces&#34;&gt;their considerable limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Plain text configuration (dotfiles friendly). See: &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/config-examples/default-config.toml&#34;&gt;default-config.toml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;CLI scriptable&lt;/del&gt; &lt;a href=&#34;https://github.com/nikitabobko/AeroSpace/issues/3&#34;&gt;[PLANNED]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t require disabling SIP (System Integrity Protection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/guide.md#multiple-monitors&#34;&gt;Proper multi-monitor support&lt;/a&gt; (i3-like paradigm)&lt;/li&gt; &#xA; &lt;li&gt;Status menu icon displays current workspace name&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; to get autoupdates (Preferred)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install --no-quarantine --cask nikitabobko/tap/aerospace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Brew problem&lt;/h3&gt; &#xA;&lt;p&gt;If you see this message&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Error: It seems there is already a Binary at &#39;/opt/homebrew/bin/aerospace&#39;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Please do &lt;code&gt;brew uninstall aerospace-cli &amp;amp;&amp;amp; brew reinstall aerospace&lt;/code&gt;. Consider voting for &lt;a href=&#34;https://github.com/Homebrew/homebrew-cask/issues/12822&#34;&gt;this homebrew issue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/manual-installation.md&#34;&gt;Manual installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to build the project&lt;/h2&gt; &#xA;&lt;p&gt;You would need a Mac.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install gsed xcodegen # https://github.com/yonaskolb/XcodeGen&#xA;./build-debug.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to run the tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install gsed xcodegen # https://github.com/yonaskolb/XcodeGen&#xA;./run-tests.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Values of the project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AeroSpace is targeted at advanced users and developers&lt;/li&gt; &#xA; &lt;li&gt;Keyboard centric&lt;/li&gt; &#xA; &lt;li&gt;Never break configuration files (Guaranteed once AeroSpace reaches 1.0 version)&lt;/li&gt; &#xA; &lt;li&gt;AeroSpace doesn&#39;t use GUI, unless necessarily &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AeroSpace will never provide a GUI for configuration. For advanced users, it&#39;s easier to edit a configuration file in text editor rather than navigating through checkboxes in GUI.&lt;/li&gt; &#xA;   &lt;li&gt;Status menu icon is ok, because visual feedback is needed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Provide &lt;em&gt;practical&lt;/em&gt; features. Fancy appearance features are not &lt;em&gt;practical&lt;/em&gt; (e.g. window borders, transparency, etc)&lt;/li&gt; &#xA; &lt;li&gt;If &#34;dark magic&#34; (aka &#34;private APIs&#34;, &#34;code injections&#34;, etc) can be avoided, it must be avoided &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Right now, AeroSpace uses only a &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/src/Bridged-Header.h&#34;&gt;single private API to get window ID of accessibility object&lt;/a&gt;. Everything else is &lt;a href=&#34;https://developer.apple.com/documentation/applicationservices/axuielement_h&#34;&gt;macOS public accessibility API&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;AeroSpace will never require you to disable SIP (System Integrity Protection). For example, yabai &lt;a href=&#34;https://github.com/koekeishiya/yabai/issues/1863&#34;&gt;requires you to disable SIP&lt;/a&gt; to use some of its features. AeroSpace will either find another way (e.g. &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/guide.md#emulation-of-virtual-workspaces&#34;&gt;emulation of workspaces&lt;/a&gt;) or will not implement this feature at all (window transparency and window shadowing are not &lt;em&gt;practical&lt;/em&gt; features)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Non Values&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Play nicely with existing macOS features. If limitations are imposed then AeroSpace won&#39;t play nicely with existing macOS features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;E.g. AeroSpace doesn&#39;t acknowledge the existence of macOS Spaces, and it uses &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/guide.md#emulation-of-virtual-workspaces&#34;&gt;emulation of its own workspaces&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tip of the day&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write -g NSWindowShouldDragOnGesture YES&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can move windows by holding &lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;cmd&lt;/code&gt; and dragging any part of the window (not necessarily the window title)&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://www.reddit.com/r/MacOS/comments/k6hiwk/keyboard_modifier_to_simplify_click_drag_of/&#34;&gt;reddit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ianyh/Amethyst&#34;&gt;Amethyst&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koekeishiya/yabai&#34;&gt;yabai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-aoc-starter-example</title>
    <updated>2023-12-04T01:42:55Z</updated>
    <id>tag:github.com,2023-12-04:/apple/swift-aoc-starter-example</id>
    <link href="https://github.com/apple/swift-aoc-starter-example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift starter project for solving Advent of Code challenges.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Advent of Code Swift Starter Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Swift-red.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Daily programming puzzles at &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;, by &lt;a href=&#34;http://was.tl/&#34;&gt;Eric Wastl&lt;/a&gt;. This is a small example starter project for building Advent of Code solutions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Swift comes with Xcode, or you can &lt;a href=&#34;https://www.swift.org/install/&#34;&gt;install it&lt;/a&gt; on a supported macOS, Linux, or Windows platform.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Xcode, you can open this project by choosing File / Open and select the parent directory.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer the command line, you can run the test suite with &lt;code&gt;swift test&lt;/code&gt;, and run the output with &lt;code&gt;swift run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Visual Studio Code to edit, you might find these Swift extensions useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sswg.swift-lang&#34;&gt;Swift&lt;/a&gt; (provides core language edit / debug / test features)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-apple-swift-format&#34;&gt;apple-swift-format&lt;/a&gt; (supports the &lt;a href=&#34;https://github.com/apple/swift-format&#34;&gt;swift-format&lt;/a&gt; package)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Challenges&lt;/h2&gt; &#xA;&lt;p&gt;The challenges assume three files (replace 00 with the day of the challenge).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Data/Day00.txt&lt;/code&gt;: the input data provided for the challenge&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Sources/Day00.swift&lt;/code&gt;: the code to solve the challenge&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Tests/Day00.swift&lt;/code&gt;: any unit tests that you want to include&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To start a new day&#39;s challenge, make a copy of these files and update as necessary. The &lt;code&gt;AdventOfCode.swift&lt;/code&gt; file controls which day&#39;s challenge is run with &lt;code&gt;swift run&lt;/code&gt;. By default that runs the most recent challenge in the package.&lt;/p&gt; &#xA;&lt;p&gt;To supply command line arguments use &lt;code&gt;swift run AdventOfCode&lt;/code&gt;. For example, &lt;code&gt;swift run -c release AdventOfCode --benchmark 3&lt;/code&gt; builds the binary with full optimizations, and benchmarks the challenge for day 3.&lt;/p&gt; &#xA;&lt;h2&gt;Linting and Formatting&lt;/h2&gt; &#xA;&lt;p&gt;Challenge source code can be linted and formatted automatically using the included dependency on &lt;code&gt;swift-format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lint source code with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ swift package lint-source-code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Format source code with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ swift package format-source-code&#xA;Plugin ‘Format Source Code’ wants permission to write to the package directory.&#xA;Stated reason: “This command formats the Swift source files”.&#xA;Allow this plugin to write to the package directory? (yes/no)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid the interactive prompt when formatting source code, use the &lt;code&gt;--allow-writing-to-package-directory&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ swift package format-source-code --allow-writing-to-package-directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;swift-format will use the built-in default style to lint and format code. A &lt;code&gt;.swift-format&lt;/code&gt; configuration file can be used to customize the style used, see &lt;a href=&#34;https://github.com/apple/swift-format/raw/main/Documentation/Configuration.md&#34;&gt;Configuration&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
</feed>