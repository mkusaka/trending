<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-07T01:47:46Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apple/swift-numerics</title>
    <updated>2023-03-07T01:47:46Z</updated>
    <id>tag:github.com,2023-03-07:/apple/swift-numerics</id>
    <link href="https://github.com/apple/swift-numerics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Advanced mathematical types and functions for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Numerics&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Swift Numerics provides a set of modules that support numerical computing in Swift. These modules fall broadly into two categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API that is too specialized to go into the standard library, but which is sufficiently general to be centralized in a single common package.&lt;/li&gt; &#xA; &lt;li&gt;API that is under active development toward possible future inclusion in the standard library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is some overlap between these two categories, and an API that begins in the first category may migrate into the second as it matures and new uses are discovered.&lt;/p&gt; &#xA;&lt;p&gt;Swift Numerics modules are fine-grained. For example, if you need support for Complex numbers, you can import ComplexModule[^1] as a standalone module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import ComplexModule&#xA;&#xA;let z = Complex&amp;lt;Double&amp;gt;.i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a top-level &lt;code&gt;Numerics&lt;/code&gt; module that re-exports the complete public interface of Swift Numerics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Numerics&#xA;&#xA;// The entire Swift Numerics API is now available&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swift Numerics modules have minimal dependencies on other projects.&lt;/p&gt; &#xA;&lt;p&gt;The current modules assume only the availability of the Swift and C standard libraries and the runtime support provided by compiler-rt.&lt;/p&gt; &#xA;&lt;p&gt;Future expansion may assume the availability of other standard interfaces, such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms&#34;&gt;BLAS (Basic Linear Algebra Subprograms)&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/LAPACK&#34;&gt;LAPACK (Linear Algebra Package)&lt;/a&gt;, but modules with more specialized dependencies (or dependencies that are not available on all platforms supported by Swift) belong in a separate package.&lt;/p&gt; &#xA;&lt;p&gt;Because we intend to make it possible to adopt Swift Numerics modules in the standard library at some future point, Swift Numerics uses the same license and contribution guidelines as the Swift project.&lt;/p&gt; &#xA;&lt;h2&gt;Using Swift Numerics in your project&lt;/h2&gt; &#xA;&lt;p&gt;To use Swift Numerics in a SwiftPM project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following line to the dependencies in your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/apple/swift-numerics&#34;, from: &#34;1.0.0&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;code&gt;Numerics&lt;/code&gt; as a dependency for your target:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(name: &#34;MyTarget&#34;, dependencies: [&#xA;  .product(name: &#34;Numerics&#34;, package: &#34;swift-numerics&#34;),&#xA;  &#34;AnotherModule&#34;&#xA;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add &lt;code&gt;import Numerics&lt;/code&gt; in your source code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Source stability&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Numerics package is source stable; version numbers follow &lt;a href=&#34;https://semver.org&#34;&gt;Semantic Versioning&lt;/a&gt;. The public API of the &lt;code&gt;swift-numerics&lt;/code&gt; package consists of non-underscored declarations that are marked either &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;usableFromInline&lt;/code&gt; in modules re-exported by the top-level &lt;code&gt;Numerics&lt;/code&gt; module. Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases.&lt;/p&gt; &#xA;&lt;p&gt;Note that contents of the &lt;code&gt;_NumericsShims&lt;/code&gt; and &lt;code&gt;_TestSupport&lt;/code&gt; modules, as well as contents of the &lt;code&gt;Tests&lt;/code&gt; directory, explicitly are not public API. The definitions therein may therefore change at whim, and the entire module may be removed in any new release. If you have a use case that requires underscored operations, please raise an issue to request that they be made public API.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may introduce changes to these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. Requiring a new Swift release will only require a minor version bump.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Swift Numerics&lt;/h2&gt; &#xA;&lt;p&gt;Swift Numerics is a standalone library that is separate from the core Swift project, but it will sometimes act as a staging ground for APIs that will later be incorporated into the Swift Standard Library. When that happens, such changes will be proposed to the Swift Standard Library using the established evolution process of the Swift project.&lt;/p&gt; &#xA;&lt;p&gt;Swift Numerics uses GitHub issues to track bugs and features. We use pull requests for development.&lt;/p&gt; &#xA;&lt;h3&gt;How to propose a new module&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Raise an issue with the [new module] tag.&lt;/li&gt; &#xA; &lt;li&gt;Raise a PR with an implementation sketch.&lt;/li&gt; &#xA; &lt;li&gt;Once you have some consensus, ask an admin to create a feature branch against which PRs can be raised.&lt;/li&gt; &#xA; &lt;li&gt;When the design has stabilized and is functional enough to be useful, raise a PR to merge the new module to master.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How to propose a new feature for an existing module&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Raise an issue with the [enhancement] tag.&lt;/li&gt; &#xA; &lt;li&gt;Raise a PR with your implementation, and discuss the implementation there.&lt;/li&gt; &#xA; &lt;li&gt;Once there is a consensus that the new feature is desirable and the design is suitable, it can be merged.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;How to fix a bug, or make smaller improvements&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Raise a PR with your change.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to add test coverage for whatever changes you are making.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Forums&lt;/h3&gt; &#xA;&lt;p&gt;Questions about how to use Swift Numerics modules, or issues that are not clearly bugs can be discussed in the &lt;a href=&#34;https://forums.swift.org/c/related-projects/swift-numerics&#34;&gt;&#34;Swift Numerics&#34; section of the Swift forums&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-numerics/main/Sources/RealModule/README.md&#34;&gt;&lt;code&gt;RealModule&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-numerics/main/Sources/ComplexModule/README.md&#34;&gt;&lt;code&gt;ComplexModule&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-numerics/main/Sources/IntegerUtilities/README.md&#34;&gt;&lt;code&gt;IntegerUtilities&lt;/code&gt;&lt;/a&gt; (on main only, not yet present in a released tag)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Future expansion&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-numerics/issues/4&#34;&gt;Large Fixed-Width Integers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-numerics/issues/5&#34;&gt;Arbitrary-Precision Integers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-numerics/issues/6&#34;&gt;Shaped Arrays&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-numerics/issues/7&#34;&gt;Decimal Floating-point&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;[^1]: The module is named &lt;code&gt;ComplexModule&lt;/code&gt; instead of &lt;code&gt;Complex&lt;/code&gt; because Swift is currently unable to use the fully-qualified name for types when a type and module have the same name (discussion here: &lt;a href=&#34;https://forums.swift.org/t/pitch-fully-qualified-name-syntax/28482&#34;&gt;https://forums.swift.org/t/pitch-fully-qualified-name-syntax/28482&lt;/a&gt;). This would prevent users of Swift Numerics who don&#39;t need generic types from doing things such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;```swift&#xA;import Complex&#xA;// I know I only ever want Complex&amp;lt;Double&amp;gt;, so I shouldn&#39;t need the generic parameter.&#xA;typealias Complex = Complex.Complex&amp;lt;Double&amp;gt; // This doesn&#39;t work, because name lookup fails.&#xA;```&#xA;&#xA;For this reason, modules that would have this ambiguity are suffixed with `Module` within Swift Numerics:&#xA;&#xA;```swift&#xA;import ComplexModule&#xA;// I know I only ever want Complex&amp;lt;Double&amp;gt;, so I shouldn&#39;t need the generic parameter.&#xA;typealias Complex = ComplexModule.Complex&amp;lt;Double&amp;gt;&#xA;// But I can still refer to the generic type by qualifying the name if I need it occasionally:&#xA;let a = ComplexModule.Complex&amp;lt;Float&amp;gt;&#xA;```&#xA;&#xA;The `Real` module does not contain a `Real` type, but does contain a `Real` protocol.&#xA;Users may want to define their own `Real` type (and possibly re-export the `Real` module)--that is why the suffix is also applied there.&#xA;New modules have to evaluate this decision carefully, but can err on the side of adding the suffix.&#xA;It&#39;s expected that most users will simply `import Numerics`, so this isn&#39;t an issue for them.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-asn1</title>
    <updated>2023-03-07T01:47:46Z</updated>
    <id>tag:github.com,2023-03-07:/apple/swift-asn1</id>
    <link href="https://github.com/apple/swift-asn1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of ASN.1 for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftASN1&lt;/h1&gt; &#xA;&lt;p&gt;An implementation of ASN.1 types and DER serialization.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;ASN.1, and the DER encoding scheme, is a commonly used object serialization format. The most common use-cases for ASN.1 in general computing are in the cryptographic space, but there are a number of use-cases in a wide range of fields. This module provides an implementation of a number of ASN.1 types, as well as the DER serialization format for ASN.1.&lt;/p&gt; &#xA;&lt;p&gt;ASN.1 can be used abstractly to describe essentially any kind of object. ASN.1 objects are made up of either primitive or composite (called &#34;constructed&#34;) types. Individual scalar objects can be combined into aggregate types, and composed essentially arbitrarily to form abstract object formats.&lt;/p&gt; &#xA;&lt;p&gt;Importantly, the ASN.1 object description does not define a specific encoding for these objects. Instead there are a wide range of possible ways to serialize or deserialize an ASN.1 object. Some of the most prominent are BER (the Basic Encoding Rules), CER (the Canonical Encoding Rules), DER (the Distinguished Encoding Rules), and XER (the XML Encoding Rules). For the cryptographic use-case DER is the standard choice, as a given ASN.1 object can be encoded in only one way under DER. This makes signing and verifying vastly easier, as it is at least in principle possible to perfectly reconstruct the serialization of a parsed object.&lt;/p&gt; &#xA;&lt;p&gt;This module provides several moving pieces:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A high-level representation of an ASN.1 object, in the form of a tree of object nodes (&lt;code&gt;ASN1Node&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;A DER parser that can construct the ASN.1 tree from serialized bytes (&lt;code&gt;DER.parse(_:)&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;A DER serializer that can construct serialized bytes from the ASN.1 tree (&lt;code&gt;DER.Serializer&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;A number of built-in ASN.1 types, representing common constructs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;These moving pieces combine to provide support for the DER representation of ASN.1 suitable for a wide range of cryptographic uses.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To use swift-asn1, add the following dependency to your Package.swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/apple/swift-asn1.git&#34;, upToNextMinor(from: &#34;0.6.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this repository does not have a 1.0 tag yet, so the API is not stable.&lt;/p&gt; &#xA;&lt;p&gt;You can then add the specific product dependency to your target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .product(name: &#34;SwiftASN1&#34;, package: &#34;swift-asn1&#34;),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consult &lt;a href=&#34;https://swiftpackageindex.com/apple/swift-asn1/main/documentation/swiftasn1&#34;&gt;the documentation&lt;/a&gt; for examples of how to use the code. A number of examples are also present in the repository itself.&lt;/p&gt;</summary>
  </entry>
</feed>