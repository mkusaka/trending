<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-14T01:47:38Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>teslamotors/react-native-camera-kit</title>
    <updated>2023-07-14T01:47:38Z</updated>
    <id>tag:github.com,2023-07-14:/teslamotors/react-native-camera-kit</id>
    <link href="https://github.com/teslamotors/react-native-camera-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A high performance, easy to use, rock solid camera library for React Native apps.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; ðŸŽˆ React Native Camera Kit &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A &lt;strong&gt;high performance, easy to use, rock solid&lt;/strong&gt;&lt;br&gt; camera library for React Native apps. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/teslamotors/react-native-camera-kit/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;React Native Camera Kit is released under the MIT license.&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.npmjs.org/package/react-native-camera-kit&#34;&gt; &lt;img src=&#34;https://badge.fury.io/js/react-native-camera-kit.svg?sanitize=true&#34; alt=&#34;Current npm package version.&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/teslamotors/react-native-camera-kit/master/images/screenshot.jpg&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;h3&gt;Cross Platform (iOS and Android)&lt;/h3&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;h3&gt;Optimized for performance and high photo capture rate&lt;/h3&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;h3&gt;QR / Barcode scanning support&lt;/h3&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;h3&gt;Camera preview support in iOS simulator&lt;/h3&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation (RN &amp;gt; 0.60)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add react-native-camera-kit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ios &amp;amp;&amp;amp; pod install &amp;amp;&amp;amp; cd ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Android: &lt;a href=&#34;https://raw.githubusercontent.com/teslamotors/react-native-camera-kit/master/docs/kotlin.md&#34;&gt;Add Kotlin to your project&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;Add the following uses-permission to your &lt;code&gt;AndroidManifest.xml&lt;/code&gt; (usually found at: &lt;code&gt;android/src/main/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.CAMERA&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.WRITE_EXTERNAL_STORAGE&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;Add the following usage descriptions to your &lt;code&gt;Info.plist&lt;/code&gt; (usually found at: &lt;code&gt;ios/PROJECT_NAME/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;NSCameraUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;For taking photos&amp;lt;/string&amp;gt;&#xA;&#xA;&amp;lt;key&amp;gt;NSPhotoLibraryUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;For saving photos&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the example project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn bootstrap&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn example ios&lt;/code&gt; or &lt;code&gt;yarn example android&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;h3&gt;Camera&lt;/h3&gt; &#xA;&lt;p&gt;Barebones camera component if you need advanced/customized interface&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Camera, CameraType } from &#39;react-native-camera-kit&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;Camera&#xA;  ref={(ref) =&amp;gt; (this.camera = ref)}&#xA;  cameraType={CameraType.Back} // front/back(default)&#xA;  flashMode=&#39;auto&#39;&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Barcode / QR Code Scanning&lt;/h4&gt; &#xA;&lt;p&gt;Additionally, the Camera can be used for barcode scanning&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;&amp;lt;Camera&#xA;  ...&#xA;  // Barcode props&#xA;  scanBarcode={true}&#xA;  onReadCode={(event) =&amp;gt; Alert.alert(&#39;QR code found&#39;)} // optional&#xA;  showFrame={true} // (default false) optional, show frame with transparent layer (qr code or barcode will be read on this area ONLY), start animation for scanner,that stoped when find any code. Frame always at center of the screen&#xA;  laserColor=&#39;red&#39; // (default red) optional, color of laser in scanner frame&#xA;  frameColor=&#39;white&#39; // (default white) optional, color of border of scanner frame&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Camera Props (Optional)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Props&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ref&lt;/td&gt; &#xA;   &lt;td&gt;Reference on the camera view&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;StyleProp&amp;lt;ViewStyle&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;Style to apply on the camera view&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;flashMode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;on&#39;&lt;/code&gt;/&lt;code&gt;&#39;off&#39;&lt;/code&gt;/&lt;code&gt;&#39;auto&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Camera flash mode. Default: &lt;code&gt;auto&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;focusMode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;on&#39;&lt;/code&gt;/&lt;code&gt;&#39;off&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Camera focus mode. Default: &lt;code&gt;on&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;zoomMode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;on&#39;&lt;/code&gt;/&lt;code&gt;&#39;off&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable pinch to zoom camera. Default: &lt;code&gt;on&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;torchMode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;on&#39;&lt;/code&gt;/&lt;code&gt;&#39;off&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle flash light when camera is active. Default: &lt;code&gt;off&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cameraType&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CameraType.Back/CameraType.Front&lt;/td&gt; &#xA;   &lt;td&gt;Choose what camera to use. Default: &lt;code&gt;CameraType.Back&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onOrientationChange&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Function&lt;/td&gt; &#xA;   &lt;td&gt;Callback when physical device orientation changes. Returned event contains &lt;code&gt;orientation&lt;/code&gt;. Ex: &lt;code&gt;onOrientationChange={(event) =&amp;gt; console.log(event.nativeEvent.orientation)}&lt;/code&gt;. Use &lt;code&gt;import { Orientation } from &#39;react-native-camera-kit&#39;; if (event.nativeEvent.orientation === Orientation.PORTRAIT) { ... }&lt;/code&gt; to understand the new value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;iOS only&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ratioOverlay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;int:int&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show a guiding overlay in the camera preview for the selected ratio. Does not crop image as of v9.0. Example: &lt;code&gt;&#39;16:9&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ratioOverlayColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Color&lt;/td&gt; &#xA;   &lt;td&gt;Any color with alpha. Default: &lt;code&gt;&#39;#ffffff77&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resetFocusTimeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number&lt;/td&gt; &#xA;   &lt;td&gt;Dismiss tap to focus after this many milliseconds. Default &lt;code&gt;0&lt;/code&gt; (disabled). Example: &lt;code&gt;5000&lt;/code&gt; is 5 seconds.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resetFocusWhenMotionDetected&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;Dismiss tap to focus when focus area content changes. Native iOS feature, see documentation: &lt;a href=&#34;https://developer.apple.com/documentation/avfoundation/avcapturedevice/1624644-subjectareachangemonitoringenabl?language=objc&#34;&gt;https://developer.apple.com/documentation/avfoundation/avcapturedevice/1624644-subjectareachangemonitoringenabl?language=objc&lt;/a&gt;). Default &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scanThrottleDelay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number&lt;/td&gt; &#xA;   &lt;td&gt;Duration between scan detection in milliseconds. Default 2000 (2s)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Barcode only&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scanBarcode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;Enable barcode scanner. Default: &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;showFrame&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;   &lt;td&gt;Show frame in barcode scanner. Default: &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;laserColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Color&lt;/td&gt; &#xA;   &lt;td&gt;Color of barcode scanner laser visualization. Default: &lt;code&gt;red&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;frameColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Color&lt;/td&gt; &#xA;   &lt;td&gt;Color of barcode scanner frame visualization. Default: &lt;code&gt;yellow&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onReadCode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Function&lt;/td&gt; &#xA;   &lt;td&gt;Callback when scanner successfully reads barcode. Returned event contains &lt;code&gt;codeStringValue&lt;/code&gt;. Default: &lt;code&gt;null&lt;/code&gt;. Ex: &lt;code&gt;onReadCode={(event) =&amp;gt; console.log(event.nativeEvent.codeStringValue)}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Imperative API&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Must be called on a valid camera ref&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;capture()&lt;/h4&gt; &#xA;&lt;p&gt;Capture image as JPEG.&lt;/p&gt; &#xA;&lt;p&gt;A temporary file is created. You &lt;em&gt;must&lt;/em&gt; move this file to a permanent location (e.g. the app&#39;s &#39;Documents&#39; folder) if you need it beyond the current session of the app as it may be deleted when the user leaves the app. You can move files by using a file system library such as &lt;a href=&#34;https://github.com/itinance/react-native-fs&#34;&gt;react-native-fs&lt;/a&gt; or &lt;a href=&#34;https://docs.expo.io/versions/latest/sdk/filesystem/&#34;&gt;expo-filesystem&lt;/a&gt;. (On Android we currently have an unsupported &lt;code&gt;outputPath&lt;/code&gt; prop but it&#39;s subject to change at any time).&lt;/p&gt; &#xA;&lt;p&gt;Note that the reason you&#39;re getting a URL despite it being a file is because Android 10+ encourages URIs. To keep things consistent regardless of settings or platform we always send back a URI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const { uri } = await this.camera.capture();&#xA;// uri = &#39;file:///data/user/0/com.myorg.myapp/cache/ckcap123123123123.jpg&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to store it permanently, here&#39;s an example using &lt;a href=&#34;https://github.com/itinance/react-native-fs&#34;&gt;react-native-fs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import RNFS from &#39;react-native-fs&#39;;&#xA;// [...]&#xA;let { uri } = await this.camera.capture();&#xA;if (uri.startsWith(&#39;file://&#39;)) {&#xA;  // Platform dependent, iOS &amp;amp; Android uses &#39;/&#39;&#xA;  const pathSplitter = &#39;/&#39;;&#xA;  // file:///foo/bar.jpg =&amp;gt; /foo/bar.jpg&#xA;  const filePath = uri.replace(&#39;file://&#39;, &#39;&#39;);&#xA;  // /foo/bar.jpg =&amp;gt; [foo, bar.jpg]&#xA;  const pathSegments = filePath.split(pathSplitter);&#xA;  // [foo, bar.jpg] =&amp;gt; bar.jpg&#xA;  const fileName = pathSegments[pathSegments.length - 1];&#xA;&#xA;  await RNFS.moveFile(filePath, `${RNFS.DocumentDirectoryPath}/${fileName}`);&#xA;  uri = `file://${destFilePath}`;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;checkDeviceCameraAuthorizationStatus (&lt;strong&gt;iOS only&lt;/strong&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const isCameraAuthorized = await Camera.checkDeviceCameraAuthorizationStatus();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;return values:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;AVAuthorizationStatusAuthorized&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;AVAuthorizationStatusNotDetermined&lt;/code&gt; returns &lt;code&gt;-1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;otherwise, returns &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;requestDeviceCameraAuthorization (&lt;strong&gt;iOS only&lt;/strong&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const isUserAuthorizedCamera = await Camera.requestDeviceCameraAuthorization();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;AVAuthorizationStatusAuthorized&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;otherwise, returns &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pull Requests are welcome, if you open a pull request we will do our best to get to it in a timely manner&lt;/li&gt; &#xA; &lt;li&gt;Pull Request Reviews are even more welcome! we need help testing, reviewing, and updating open PRs&lt;/li&gt; &#xA; &lt;li&gt;If you are interested in contributing more actively, please contact us.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/teslamotors/react-native-camera-kit/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>