<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-13T01:39:26Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LinusHenze/Fugu14</title>
    <updated>2022-09-13T01:39:26Z</updated>
    <id>tag:github.com,2022-09-13:/LinusHenze/Fugu14</id>
    <link href="https://github.com/LinusHenze/Fugu14" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fugu14 is an untethered iOS 14.3-14.5.1 jailbreak&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fugu14 - Untethered iOS 14 Jailbreak&lt;/h1&gt; &#xA;&lt;p&gt;Fugu14 is an (incomplete) iOS 14 Jailbreak, including an untether (persistence), kernel exploit, kernel PAC bypass and PPL bypass. The CVE numbers of the vulnerabilities are: CVE-2021-30740, CVE-2021-30768, CVE-2021-30769, CVE-2021-30770 and CVE-2021-30773.&lt;/p&gt; &#xA;&lt;h1&gt;Supported Devices/iOS Versions&lt;/h1&gt; &#xA;&lt;p&gt;Fugu14 &lt;em&gt;should&lt;/em&gt; support all arm64e devices (iPhone XS and newer) on iOS 14.3 - 14.5.1.&lt;br&gt; Support for lower versions (down to 14.2) can be added by editing &lt;code&gt;arm/shared/ClosurePwn/Sources/ClosurePwn/PwnClosure.swift&lt;/code&gt; and &lt;code&gt;arm/shared/KernelExploit/Sources/KernelExploit/offsets.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;arm64 devices are not supported because the exploit to install the Fugu14 App does not work on these devices.&lt;br&gt; However, it is in theory possible to install the untether on them (e.g. via checkra1n).&lt;br&gt; Note that all of this code was written specifically for arm64e, so some changes are required to add arm64 support to the untether.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The kernel exploit is extremely reliable (it will never trigger a kernel panic)&lt;/li&gt; &#xA; &lt;li&gt;A simple TCP shell is available on port 1337&lt;/li&gt; &#xA; &lt;li&gt;Trustcaches put in &lt;code&gt;/.Fugu14Untether/trustcaches/&lt;/code&gt; will be loaded automatically&lt;/li&gt; &#xA; &lt;li&gt;Executables put in &lt;code&gt;/.Fugu14Untether/autorun/&lt;/code&gt; will be launched during boot (make sure to also create a trust cache for your executable!)&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://twitter.com/s1guza&#34;&gt;Siguza&#39;s&lt;/a&gt; &lt;a href=&#34;https://github.com/Siguza/libkrw&#34;&gt;libkrw&lt;/a&gt; library (load &lt;code&gt;/usr/lib/libkrw/libFugu14Krw.dylib&lt;/code&gt; and call &lt;code&gt;krw_initializer&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;(Jailbreak Developers: You can make your jailbreak untethered just by creating a CLI version that supports libkrw, copying it to &lt;code&gt;/.Fugu14Untether/autorun/&lt;/code&gt; and writing a trust cache to &lt;code&gt;/.Fugu14Untether/trustcaches/&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;WARNING&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Messing around with the untether may BOOTLOOP your device&lt;/li&gt; &#xA; &lt;li&gt;The fast untether (disabled unless you edit the source code) HAS NOT BEEN TESTED ON A REAL DEVICE -- DO NOT USE IT&lt;/li&gt; &#xA; &lt;li&gt;Additionally, the fast untether (in case it actually works) is more UNSAFE than the &#34;slow&#34; untether&lt;/li&gt; &#xA; &lt;li&gt;Developers: PLEASE TEST ANY CHANGES YOU MAKE TO THE UNTETHER ON A VIRTUAL DEVICE FIRST&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building and Running&lt;/h1&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need a supported device running a supported iOS version (see above)&lt;/li&gt; &#xA; &lt;li&gt;The device must be connected via USB&lt;/li&gt; &#xA; &lt;li&gt;You need the IPSW for your device, &lt;em&gt;unzipped&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;You need to have Xcode installed&lt;/li&gt; &#xA; &lt;li&gt;You need to have iproxy and ideviceinstaller installed (brew install usbmuxd ideviceinstaller)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build and run the iOS Jailbreak, all you have to do is run the &lt;code&gt;ios_install.py&lt;/code&gt; script and follow the instructions. In case you get a code signing error, open &lt;code&gt;arm/iOS/Fugu14App/Fugu14App.xcodeproj&lt;/code&gt; and edit the code signing options.&lt;/p&gt; &#xA;&lt;h1&gt;Recovery&lt;/h1&gt; &#xA;&lt;p&gt;So you didn&#39;t read the warning section and your device is now in a bootloop. Let&#39;s hope you didn&#39;t enable the fast untether.&lt;br&gt; Anyway, before updating your device to the latest iOS version, try the following first:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install irecovery on your computer&lt;/li&gt; &#xA; &lt;li&gt;Connect your device via USB and boot into the recovery mode&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;irecovery -s&lt;/code&gt; on your computer, then enter the following commands:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;setenv boot-args no_untether&lt;/li&gt; &#xA; &lt;li&gt;saveenv&lt;/li&gt; &#xA; &lt;li&gt;reboot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Your device should now boot again. If it doesn&#39;t, repeat step two again, run &lt;code&gt;irecovery -s&lt;/code&gt; and then enter these commands:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;setenv boot-args untether_force_restore&lt;/li&gt; &#xA; &lt;li&gt;saveenv&lt;/li&gt; &#xA; &lt;li&gt;reboot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Device still won&#39;t boot? Then you&#39;ll have to update it to the latest version unfortunately :/&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Like most software, Fugu14 contains (derived) code which was written by others.&lt;br&gt; I would therefore like to thank the people below for open-sourcing their code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/5aelo&#34;&gt;Samuel Groß&lt;/a&gt;: SLOP technique (as used in the dyld exploit) and the JavaScript Int64 library (+ utils)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, the remount patch has copyright issues which I&#39;m trying to resolve ASAP. Apparently, multiple parties think the code is theirs so I don&#39;t know what to do right now. I just write this here and hope no one DMCA&#39;s me.&lt;/p&gt; &#xA;&lt;p&gt;Fugu14 also includes various header files from Apple.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see credits.txt.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Fugu14 is released under the MIT license. Please see the &lt;code&gt;LICENSE&lt;/code&gt; file for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CodeEditApp/CodeEditTextView</title>
    <updated>2022-09-13T01:39:26Z</updated>
    <id>tag:github.com,2022-09-13:/CodeEditApp/CodeEditTextView</id>
    <link href="https://github.com/CodeEditApp/CodeEditTextView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A code editor view written in Swift powered by tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/806104/175655252-d77cef62-31f5-4f40-a2ad-c1406a6dd1b9.png&#34; height=&#34;128&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;CodeEditTextView&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;Follow CodeEdit on Twitter&#34; href=&#34;https://twitter.com/CodeEditApp&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/Follow%20@CodeEditApp-black.svg?style=for-the-badge&amp;amp;logo=Twitter&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Join the community on Discord&#34; href=&#34;https://discord.gg/vChUXVf9Em&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/Join%20the%20community-black.svg?style=for-the-badge&amp;amp;logo=Discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;An Xcode-inspired code editor view written in Swift powered by tree-sitter for &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit&#34;&gt;&lt;code&gt;CodeEdit&lt;/code&gt;&lt;/a&gt;. Features include syntax highlighting (based on the provided theme), code completion, find and replace, text diff, validation, current line highlighting, minimap, inline messages (warnings and errors), bracket matching, and more.&lt;/p&gt; &#xA;&lt;img width=&#34;1012&#34; alt=&#34;github-cover-CodeEditTextView&#34; src=&#34;https://user-images.githubusercontent.com/806104/175662200-03db9e06-14b7-46ac-9cbd-07facb7bddb9.png&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/CodeEditApp/CodeEditTextView/tests/main?label=tests&amp;amp;style=flat-square&#34; alt=&#34;Github Tests&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/CodeEditApp/CodeEditTextView/build-documentation/main?label=docs&amp;amp;style=flat-square&#34; alt=&#34;Documentation&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/CodeEditApp/CodeEditTextView?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/CodeEditApp/CodeEditTextView?style=flat-square&#34; alt=&#34;GitHub forks&#34;&gt; &lt;a href=&#34;https://discord.gg/vChUXVf9Em&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/951544472238444645?color=5865F2&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;span&gt;⚠&lt;/span&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;CodeEditTextView is currently in development and it is not ready for production use.&lt;/strong&gt; &lt;br&gt; Please check back later for updates on this project. Contributors are welcome as we build out the features mentioned above!&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;This package is fully documented &lt;a href=&#34;https://codeeditapp.github.io/CodeEditTextView/documentation/codeedittextview/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import CodeEditTextView&#xA;&#xA;struct ContentView: View {&#xA;&#xA;    @State var text = &#34;let x = 1.0&#34;&#xA;    @State var theme = EditorTheme(...)&#xA;    @State var font = NSFont.monospacedSystemFont(ofSize: 11, weight: .regular)&#xA;    @State var tabWidth = 4&#xA;    @State var lineHeight = 1.2&#xA;&#xA;    var body: some View { &#xA;        CodeEditTextView(&#xA;            $text,&#xA;            language: .swift,&#xA;            theme: $theme,&#xA;            font: $font,&#xA;            tabWidth: $tabWidth,&#xA;            lineHeight: $lineHeight&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Currently Supported Languages&lt;/h2&gt; &#xA;&lt;p&gt;See issue &lt;a href=&#34;https://github.com/CodeEditApp/CodeEditTextView/issues/15&#34;&gt;https://github.com/CodeEditApp/CodeEditTextView/issues/15&lt;/a&gt; for more information on supported languages.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to both &lt;a href=&#34;https://twitter.com/krzyzanowskim&#34;&gt;Marcin Krzyzanowski&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/mattie&#34;&gt;Matt Massicotte&lt;/a&gt; for the great work they&#39;ve done!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Source&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Author&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;STTextView&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/krzyzanowskim/STTextView&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://twitter.com/krzyzanowskim&#34;&gt;Marcin Krzyzanowski&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;SwiftTreeSitter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/ChimeHQ/SwiftTreeSitter&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://twitter.com/mattie&#34;&gt;Matt Massicotte&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://github.com/CodeEditApp/CodeEdit/raw/main/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cirruslabs/tart</title>
    <updated>2022-09-13T01:39:26Z</updated>
    <id>tag:github.com,2022-09-13:/cirruslabs/tart</id>
    <link href="https://github.com/cirruslabs/tart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;macOS VMs on Apple Silicon to use in CI and other automations&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cirruslabs/tart/main/Resources/TartSocial.png&#34; alt=&#34;Tart – open source virtualization for your automation needs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tart&lt;/em&gt; is a virtualization toolset to build, run and manage macOS and Linux virtual machines on Apple Silicon. Built by CI engineers for your automation needs. Here are some highlights of Tart:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tart uses Apple&#39;s own &lt;code&gt;Virtualization.Framework&lt;/code&gt; for &lt;a href=&#34;https://browser.geekbench.com/v5/cpu/compare/14966395?baseline=14966339&#34;&gt;near-native performance&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Push/Pull virtual machines from any OCI-compatible container registry.&lt;/li&gt; &#xA; &lt;li&gt;Use Tart Packer Plugin to automate VM creation.&lt;/li&gt; &#xA; &lt;li&gt;Built-in CI integration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Tart&lt;/em&gt; is already adopted by several automation services:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cirrus-ci.org/guide/macOS/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/cirruslabs/tart/raw/main/Resources/Users/CirrusCI.png&#34; height=&#34;65&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codemagic.io/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/cirruslabs/tart/raw/main/Resources/Users/Codemagic.png&#34; height=&#34;65&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://testingbot.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/cirruslabs/tart/raw/main/Resources/Users/TestingBot.png&#34; height=&#34;65&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Try running a Tart VM on your Apple Silicon device running macOS Monterey or later (will download a 25 GB image):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install cirruslabs/cli/tart&#xA;tart clone ghcr.io/cirruslabs/macos-monterey-base:latest monterey-base&#xA;tart run monterey-base&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cirruslabs/tart/main/Resources/TartScreenshot.png&#34; alt=&#34;tart VM view app&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CI Integration&lt;/h2&gt; &#xA;&lt;p&gt;Tart itself is only responsible for managing virtual machines, but we&#39;ve built Tart support into a tool called Cirrus CLI also developed by Cirrus Labs. &lt;a href=&#34;https://github.com/cirruslabs/cirrus-cli&#34;&gt;Cirrus CLI&lt;/a&gt; is a command line tool with one configuration format to execute common CI steps (run a script, cache a folder, etc.) locally or in any CI system. We built Cirrus CLI to solve &#34;But it works on my machine!&#34; problem.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a &lt;code&gt;.cirrus.yml&lt;/code&gt; configuration file which will start a Tart VM, will copy over working directory and will run scripts and &lt;a href=&#34;https://cirrus-ci.org/guide/writing-tasks/#supported-instructions&#34;&gt;other instructions&lt;/a&gt; inside the virtual machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;task:&#xA;  name: hello&#xA;  macos_instance:&#xA;    # can be a remote or a local virtual machine&#xA;    image: ghcr.io/cirruslabs/macos-monterey-base:latest&#xA;  hello_script:&#xA;    - echo &#34;Hello from within a Tart VM!&#34;&#xA;    - echo &#34;Here is my CPU info:&#34;&#xA;    - sysctl -n machdep.cpu.brand_string&#xA;    - sleep 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Put the above &lt;code&gt;.cirrus.yml&lt;/code&gt; file in the root of your repository and run it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install cirruslabs/cli/cirrus&#xA;cirrus run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cirruslabs/tart/main/Resources/TartCirrusCLI.gif&#34; alt=&#34;Cirrus CLI Run&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cirrus-ci.org/&#34;&gt;Cirrus CI&lt;/a&gt; already leverages Tart to power its macOS cloud infrastructure. The &lt;code&gt;.cirrus.yml&lt;/code&gt; config from above will just work in Cirrus CI and your tasks will be executed inside Tart VMs in our cloud.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Cirrus CI only allows &lt;a href=&#34;https://github.com/orgs/cirruslabs/packages?tab=packages&amp;amp;q=macos&#34;&gt;images managed and regularly updated by us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Retrieving artifacts from within Tart VMs&lt;/h3&gt; &#xA;&lt;p&gt;In many cases there is a need to retrieve particular files or a folder from within a Tart virtual machine. For example, the below &lt;code&gt;.cirrus.yml&lt;/code&gt; configuration defines a single task that builds a &lt;code&gt;tart&lt;/code&gt; binary and exposes it via &lt;a href=&#34;https://cirrus-ci.org/guide/writing-tasks/#artifacts-instruction&#34;&gt;&lt;code&gt;artifacts&lt;/code&gt; instruction&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;task:&#xA;  name: Build&#xA;  macos_instance:&#xA;    image: ghcr.io/cirruslabs/macos-monterey-xcode:latest&#xA;  build_script: swift build --product tart&#xA;  binary_artifacts:&#xA;    path: .build/debug/tart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running Cirrus CLI with &lt;code&gt;--artifacts-dir&lt;/code&gt; will write defined &lt;code&gt;artifacts&lt;/code&gt; to the provided local directory on the host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cirrus run --artifacts-dir artifacts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that all retrieved artifacts will be prefixed with the associated task name and &lt;code&gt;artifacts&lt;/code&gt; instruction name. For the example above, &lt;code&gt;tart&lt;/code&gt; binary will be saved to &lt;code&gt;$PWD/artifacts/Build/binary/.build/debug/tart&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Virtual Machine Management&lt;/h2&gt; &#xA;&lt;h3&gt;Creating from scratch&lt;/h3&gt; &#xA;&lt;p&gt;Tart supports macOS and Linux virtual machines. All commands like &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;pull&lt;/code&gt; work the same way regarding of the underlying OS a particular VM image has. The only difference is how such VM images are created. Please check sections below for &lt;a href=&#34;https://raw.githubusercontent.com/cirruslabs/tart/main/#creating-a-macos-vm-image-from-scratch&#34;&gt;macOS&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/cirruslabs/tart/main/#creating-a-linux-vm-image-from-scratch&#34;&gt;Linux&lt;/a&gt; instructions.&lt;/p&gt; &#xA;&lt;h4&gt;Creating a macOS VM image from scratch&lt;/h4&gt; &#xA;&lt;p&gt;Tart can create VMs from &lt;code&gt;*.ipsw&lt;/code&gt; files. You can download a specific &lt;code&gt;*.ipsw&lt;/code&gt; file &lt;a href=&#34;https://ipsw.me/&#34;&gt;here&lt;/a&gt; or you can use &lt;code&gt;latest&lt;/code&gt; instead of a path to &lt;code&gt;*.ipsw&lt;/code&gt; to download the latest available version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tart create --from-ipsw=latest monterey-vanilla&#xA;tart run monterey-vanilla&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the initial booting of the VM you&#39;ll need to manually go through the macOS installation process. As a convention we recommend creating an &lt;code&gt;admin&lt;/code&gt; user with an &lt;code&gt;admin&lt;/code&gt; password. After the regular installation please do some additional modifications in the VM:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enable Auto-Login. Users &amp;amp; Groups -&amp;gt; Login Options -&amp;gt; Automatic login -&amp;gt; admin.&lt;/li&gt; &#xA; &lt;li&gt;Allow SSH. Sharing -&amp;gt; Remote Login&lt;/li&gt; &#xA; &lt;li&gt;Disable Lock Screen. Preferences -&amp;gt; Lock Screen -&amp;gt; disable &#34;Require Password&#34; after 5.&lt;/li&gt; &#xA; &lt;li&gt;Disable Screen Saver.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;sudo visudo&lt;/code&gt; in Terminal, find &lt;code&gt;%admin ALL=(ALL) ALL&lt;/code&gt; add &lt;code&gt;admin ALL=(ALL) NOPASSWD: ALL&lt;/code&gt; to allow sudo without a password.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Creating a Linux VM image from scratch&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create a bare VM&#xA;tart create --linux ubuntu&#xA;&#xA;# Install Ubuntu&#xA;tart run --disk focal-desktop-arm64.iso ubuntu&#xA;&#xA;# Run VM&#xA;tart run ubuntu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the initial setup please make sure your VM can be SSH-ed into by running the following commands inside your VM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt update&#xA;sudo apt install -y openssh-server&#xA;sudo ufw allow ssh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring a VM&lt;/h3&gt; &#xA;&lt;p&gt;By default, a tart VM uses 2 CPUs and 4 GB of memory with a &lt;code&gt;1024x768&lt;/code&gt; display. This can be changed with &lt;code&gt;tart set&lt;/code&gt; command. Please refer to &lt;code&gt;tart set --help&lt;/code&gt; for additional details.&lt;/p&gt; &#xA;&lt;h3&gt;Building with Packer&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/cirruslabs/packer-plugin-tart&#34;&gt;Tart Packer Plugin repository&lt;/a&gt; for setup instructions. Here is an example of a template to build &lt;code&gt;monterey-base&lt;/code&gt; local image based of a remote image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;builders&#34;: [&#xA;    {&#xA;      &#34;name&#34;: &#34;tart&#34;,&#xA;      &#34;type&#34;: &#34;tart-cli&#34;,&#xA;      &#34;vm_base_name&#34;: &#34;tartvm/vanilla:latest&#34;,&#xA;      &#34;vm_name&#34;: &#34;monterey-base&#34;,&#xA;      &#34;cpu_count&#34;: 4,&#xA;      &#34;memory_gb&#34;: 8,&#xA;      &#34;disk_size_gb&#34;: 32,&#xA;      &#34;ssh_username&#34;: &#34;admin&#34;,&#xA;      &#34;ssh_password&#34;: &#34;admin&#34;,&#xA;      &#34;ssh_timeout&#34;: &#34;120s&#34;&#xA;    }&#xA;  ],&#xA;  &#34;provisioners&#34;: [&#xA;    {&#xA;      &#34;inline&#34;: [&#xA;        &#34;echo &#39;Disabling spotlight indexing...&#39;&#34;,&#xA;        &#34;sudo mdutil -a -i off&#34;&#xA;      ],&#xA;      &#34;type&#34;: &#34;shell&#34;&#xA;    },&#xA;    # more provisioners&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a &lt;a href=&#34;https://github.com/cirruslabs/macos-image-templates&#34;&gt;repository with Packer templates&lt;/a&gt; used to build &lt;a href=&#34;https://github.com/orgs/cirruslabs/packages?tab=packages&amp;amp;q=macos&#34;&gt;all the images managed by us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Working with a Remote OCI Container Registry&lt;/h3&gt; &#xA;&lt;p&gt;For example, let&#39;s say you want to push/pull images to a registry hosted at &lt;a href=&#34;https://acme.io/&#34;&gt;https://acme.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Registry Authorization&lt;/h4&gt; &#xA;&lt;p&gt;First, you need to log in and save credential for &lt;code&gt;acme.io&lt;/code&gt; host via &lt;code&gt;tart login&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tart login acme.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Credentials are securely stored in Keychain.&lt;/p&gt; &#xA;&lt;h4&gt;Pushing a Local Image&lt;/h4&gt; &#xA;&lt;p&gt;Once credentials are saved for &lt;code&gt;acme.io&lt;/code&gt;, run the following command to push a local images remotely with two tags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tart push my-local-vm-name acme.io/remoteorg/name:latest acme.io/remoteorg/name:v1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pulling a Remote Image&lt;/h4&gt; &#xA;&lt;p&gt;You can either pull an image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tart pull acme.io/remoteorg/name:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or instantiate a VM from a remote image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tart clone acme.io/remoteorg/name:latest my-local-vm-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This invocation calls the &lt;code&gt;tart pull&lt;/code&gt; implicitly (if the image is not being present) before doing the actual cloning.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How Tart is different from Anka&lt;/summary&gt; &#xA; &lt;p&gt;Under the hood Tart is using the same technology as Anka 3.0 so there should be no real difference in performance or features supported. If there is some feature missing please don&#39;t hesitate to &lt;a href=&#34;https://github.com/cirruslabs/tart/issues&#34;&gt;create a feature request&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Instead of Anka Registry, Tart can work with any OCI-compatible container registry.&lt;/p&gt; &#xA; &lt;p&gt;Tart doesn&#39;t yet have an analogue of Anka Controller for managing long living VMs. Please take a look at &lt;a href=&#34;https://raw.githubusercontent.com/cirruslabs/tart/main/#ci-integration&#34;&gt;CI integration&lt;/a&gt; section for an option to run ephemeral VMs for your needs.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Why Tart is free and open sourced?&lt;/summary&gt; &#xA; &lt;p&gt;Tart is a relatively small project, and it didn&#39;t feel right to try to monetize it. Apple did all the heavy lifting with their &lt;code&gt;Virtualization.Framework&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to change VM&#39;s disk size?&lt;/summary&gt; &#xA; &lt;p&gt;You can choose disk size upon creation of a virtual machine:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tart create --from-ipsw=latest --disk-size=25 monterey-vanilla&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For an existing VM please use &lt;a href=&#34;https://github.com/cirruslabs/packer-plugin-tart&#34;&gt;Packer Plugin&lt;/a&gt; which can increase disk size for new virtual machines. Here is an example of &lt;a href=&#34;https://github.com/cirruslabs/macos-image-templates/raw/fb0bcf68e0b093129136875c050205a66729b596/templates/base.pkr.hcl#L15&#34;&gt;how to change disk size in a Packer template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;VM location on disk&lt;/summary&gt; &#xA; &lt;p&gt;Tart stores all it&#39;s files in &lt;code&gt;~/.tart/&lt;/code&gt; directory. Local images that you can run are stored in &lt;code&gt;~/.tart/vms/&lt;/code&gt;. Remote images are pulled into &lt;code&gt;~/.tart/vms/cache/OCIs/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Nested virtualization support?&lt;/summary&gt; &#xA; &lt;p&gt;Tart is limited by functionality of Apple&#39;s &lt;code&gt;Virtualization.Framework&lt;/code&gt;. At the moment &lt;code&gt;Virtualization.Framework&lt;/code&gt; doesn&#39;t support nested virtualization.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Changing the default NAT subnet&lt;/summary&gt; &#xA; &lt;p&gt;To change the default network to &lt;code&gt;192.168.77.1&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.vmnet.plist Shared_Net_Address -string 192.168.77.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note that even through a network would normally be specified as &lt;code&gt;192.168.77.0&lt;/code&gt;, the &lt;a href=&#34;https://developer.apple.com/documentation/vmnet&#34;&gt;vmnet framework&lt;/a&gt; seems to treat this as a starting address too and refuses to pick up such network-like values.&lt;/p&gt; &#xA; &lt;p&gt;The default subnet mask &lt;code&gt;255.255.255.0&lt;/code&gt; should suffice for most use-cases, however, you can also change it to &lt;code&gt;255.255.0.0&lt;/code&gt;, for example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.vmnet.plist Shared_Net_Mask -string 255.255.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>