<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T01:56:34Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vapor/vapor</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/vapor/vapor</id>
    <link href="https://github.com/vapor/vapor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💧 A server-side Swift HTTP web framework.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://discord.gg/vapor&#34;&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/vapor&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1342803/75634175-4876d680-5bd9-11ea-90d6-12c7b6a9ee3f.png&#34; alt=&#34;Vapor&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.vapor.codes/4.0/&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/read_the-docs-2196f3.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/vapor&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/431917998102675485.svg?sanitize=true&#34; alt=&#34;Team Chat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/vapor/vapor/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;MIT License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/vapor/vapor/actions&#34;&gt; &lt;img src=&#34;https://github.com/vapor/vapor/workflows/test/badge.svg?branch=main&#34; alt=&#34;Continuous Integration&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swift.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/swift-5.2-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift 5.2&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/codevapor&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/twitter-codevapor-5AA9E7.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Vapor is an HTTP web framework for Swift. It provides a beautifully expressive and easy-to-use foundation for your next website, API, or cloud project.&lt;/p&gt; &#xA;&lt;p&gt;Take a look at some of the &lt;a href=&#34;https://github.com/Cellane/awesome-vapor&#34;&gt;awesome stuff&lt;/a&gt; created with Vapor.&lt;/p&gt; &#xA;&lt;h3&gt;💧 Community&lt;/h3&gt; &#xA;&lt;p&gt;Join the welcoming community of fellow Vapor developers on &lt;a href=&#34;http://vapor.team&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🚀 Contributing&lt;/h3&gt; &#xA;&lt;p&gt;To contribute a &lt;strong&gt;feature or idea&lt;/strong&gt; to Vapor, &lt;a href=&#34;https://github.com/vapor/vapor/issues/new&#34;&gt;create an issue&lt;/a&gt; explaining your idea or bring it up on &lt;a href=&#34;http://vapor.team&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find a &lt;strong&gt;bug&lt;/strong&gt;, please &lt;a href=&#34;https://github.com/vapor/vapor/issues/new&#34;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find a &lt;strong&gt;security vulnerability&lt;/strong&gt;, please contact &lt;a href=&#34;mailto:security@vapor.codes&#34;&gt;security@vapor.codes&lt;/a&gt; as soon as possible.&lt;/p&gt; &#xA;&lt;h3&gt;💛 Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support Vapor&#39;s development by &lt;a href=&#34;https://github.com/sponsors/vapor&#34;&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.brokenhands.io&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9938337/137103192-21f99099-6aaa-4cc1-a1a7-21ee767a72d1.png&#34; height=&#34;100px&#34; alt=&#34;Broken Hands&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://monstar-lab.com&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1049951/110122158-89429600-7dbf-11eb-98c8-9f65dad29001.png&#34; height=&#34;100px&#34; alt=&#34;Monstarlab&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://gotranseo.com&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1342803/89341627-92c02000-d66f-11ea-8b29-c278386fdb09.png&#34; height=&#34;100px&#34; alt=&#34;Transeo&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;http://omrd.com&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9938337/112326871-d1f9ba80-8cac-11eb-88b2-b2ca23a80c03.png&#34; height=&#34;100px&#34; alt=&#34;omrd&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/MrLotU&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1342803/79599312-426a8580-80b3-11ea-89b3-8b2722485e37.png&#34; height=&#34;100px&#34; alt=&#34;Jari&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://macstadium.com&#34;&gt; &lt;img src=&#34;https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png&#34; height=&#34;100px&#34; alt=&#34;MacStadium&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;💚 Backers&lt;/h3&gt; &#xA;&lt;p&gt;Support Vapor&#39;s development by &lt;a href=&#34;https://github.com/sponsors/vapor&#34;&gt;becoming a backer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a data-amt=&#34;50&#34; data-since=&#34;10/09/20&#34; href=&#34;https://github.com/raphaelcruzeiro&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/425640?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;50&#34; data-since=&#34;05/20/21&#34; href=&#34;https://github.com/realityworks&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/21374160?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;25&#34; data-since=&#34;3/11/20&#34; href=&#34;https://github.com/hjuraev&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/5513926?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;25&#34; data-since=&#34;7/21/20&#34; href=&#34;https://github.com/ultim8p&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/4804985?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;25&#34; data-since=&#34;10/30/20&#34; href=&#34;https://github.com/0xLeif&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/8268288?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;25&#34; data-since=&#34;09/22/21&#34; href=&#34;https://github.com/kishikawakatsumi&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/40610?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/14/19&#34; href=&#34;https://github.com/tkrajacic&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/873717?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/14/19&#34; href=&#34;https://github.com/slashmo&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/16192401?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/14/19&#34; href=&#34;https://github.com/ScottRobbins&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/6894359?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/15/19&#34; href=&#34;https://github.com/twof&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/5561501?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/21/19&#34; href=&#34;https://github.com/mikkelu&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/17051694?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;5/20/20&#34; href=&#34;https://github.com/jdmcd&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/11842593?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/1/20&#34; href=&#34;https://github.com/GalenRhodes&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/16696128?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/09/20&#34; href=&#34;https://github.com/ArchieGoodwin&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/3480566?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;07/07/20&#34; href=&#34;https://github.com/PSchmiedmayer&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/28656495?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/12/20&#34; href=&#34;https://github.com/ScottRobbins&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/6894359?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/31/20&#34; href=&#34;https://github.com/masterofinsanity&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/31490164?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;02/09/21&#34; href=&#34;https://github.com/BAChapin&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/22135180?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;03/16/21&#34; href=&#34;https://github.com/viaaurelia&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/80760182?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;07/02/21&#34; href=&#34;https://github.com/corysullivan&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1440684?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;07/19/21&#34; href=&#34;https://github.com/saschasalles&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/43401678?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;07/31/21&#34; href=&#34;https://github.com/davdroman&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/2538074?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/15/19&#34; href=&#34;https://github.com/grundoon&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/876321?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/17/19&#34; href=&#34;https://github.com/maartene&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/5150271?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/23/19&#34; href=&#34;https://github.com/steve-h&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/1298089?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/25/19&#34; href=&#34;https://github.com/SpencerCurtis&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/16965587?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;11/17/19&#34; href=&#34;https://github.com/MaherKSantina&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/24646608?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;3/20/20&#34; href=&#34;https://github.com/lmcd&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/363540?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/07/20&#34; href=&#34;https://github.com/radude89&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/2872139?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/10/20&#34; href=&#34;https://github.com/wjosset&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/16748205?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/10/20&#34; href=&#34;https://github.com/Mattiav8&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/42816898?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/20/20&#34; href=&#34;https://github.com/klaas&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/320967?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/21/20&#34; href=&#34;https://github.com/MaxDesiatov&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/112310?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/30/20&#34; href=&#34;https://github.com/zachwick&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/406510?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;06/22/20&#34; href=&#34;https://github.com/rafaellevy&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/20618652?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;07/04/20&#34; href=&#34;https://github.com/rausnitz&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/6132143?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;07/31/20&#34; href=&#34;https://github.com/Mordil&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/3506776?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/09/20&#34; href=&#34;https://github.com/jessetipton&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/2132778?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/09/20&#34; href=&#34;https://github.com/g-Off&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/59969?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/13/20&#34; href=&#34;https://github.com/finestructure&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/65520?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/28/20&#34; href=&#34;https://github.com/avario&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/2192944?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;12/21/20&#34; href=&#34;https://github.com/doozMen&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/686038?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;12/08/21&#34; href=&#34;https://github.com/Andrewangeta&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/12012815?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;12/09/21&#34; href=&#34;https://github.com/addli&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/16063852?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;02/06/21&#34; href=&#34;https://github.com/nuno-vieira&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/12814114?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;02/10/21&#34; href=&#34;https://github.com/bitwit&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/707507?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;03/11/21&#34; href=&#34;https://github.com/shgew&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/5584672?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/16/21&#34; href=&#34;https://github.com/KombuchaPrivacy&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/78174960?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/21/21&#34; href=&#34;https://github.com/markuswntr&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/2485273?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;05/26/21&#34; href=&#34;https://github.com/bdrelling&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/3022693?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;06/05/21&#34; href=&#34;https://github.com/mayondigital&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/47883473?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;06/19/21&#34; href=&#34;https://github.com/mattesmohr&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/64681110?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;06/19/21&#34; href=&#34;https://github.com/amasson42&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/10562946?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;06/22/21&#34; href=&#34;https://github.com/scibidoo&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/243518?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;07/22/21&#34; href=&#34;https://github.com/litmaps&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/54196101?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;07/26/21&#34; href=&#34;https://github.com/kevinzhow&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1156192?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;08/09/21&#34; href=&#34;https://github.com/Strobocop&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/6342694?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;08/20/21&#34; href=&#34;https://github.com/j4nos&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/11924475?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;08/28/21&#34; href=&#34;https://github.com/JRHonda&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/29804812?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;09/11/21&#34; href=&#34;https://github.com/tristanbiesecker&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/12146879?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;09/23/21&#34; href=&#34;https://github.com/mkll&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1652009?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/vapor/backer/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/30/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/30/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/31/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/31/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/32/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/32/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/33/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/33/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/34/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/34/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/35/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/35/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/36/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/36/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/37/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/37/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/38/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/38/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/39/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/39/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/40/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/40/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/41/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/41/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/42/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/42/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/43/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/43/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/44/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/44/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/45/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/45/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/46/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/46/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/47/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/47/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/48/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/48/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;http://www.google-analytics.com/collect?v=1&amp;amp;t=pageview&amp;amp;_s=1&amp;amp;dl=https%3A%2F%2Fgithub.com%2Fvapor%2Fvapor&amp;amp;_u=MAC~&amp;amp;cid=1757014354.1393964045&amp;amp;tid=UA-76177358-6&#34; alt=&#34;analytics&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Juanpe/SkeletonView</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/Juanpe/SkeletonView</id>
    <link href="https://github.com/Juanpe/SkeletonView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;☠️ An elegant way to show users that something is happening and also prepare them to which contents they are awaiting&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/header2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Juanpe/SkeletonView/actions?query=workflow%3ACI&#34;&gt; &lt;img src=&#34;https://github.com/Juanpe/SkeletonView/workflows/CI/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-juanpe-skeletonview-main&#34;&gt;&lt;img alt=&#34;codebeat badge&#34; src=&#34;https://codebeat.co/badges/1f37bbab-a1c8-4a4a-94d7-f21740d461e9&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SkeletonView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SkeletonView.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-Green.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FJuanpe%2FSkeletonView%2Fbadge%3Ftype%3Dplatforms&#34;&gt; &lt;a href=&#34;https://badge.bow-swift.io/recipe?name=SkeletonView&amp;amp;description=An%20elegant%20way%20to%20show%20users%20that%20something%20is%20happening%20and%20also%20prepare%20them%20to%20which%20contents%20he%20is%20waiting&amp;amp;url=https://github.com/juanpe/skeletonview&amp;amp;owner=Juanpe&amp;amp;avatar=https://avatars0.githubusercontent.com/u/1409041?v=4&amp;amp;tag=1.20.0&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bow-swift/bow-art/master/badges/nef-playgrounds-badge.svg?sanitize=true&#34; alt=&#34;SkeletonView Playground&#34; style=&#34;height:20px&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-guides&#34;&gt;Guides&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt; • &lt;a href=&#34;#️-contributing&#34;&gt;Contributing&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🌎 README is available in other languages: &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Translations/README_es.md&#34;&gt;🇪🇸&lt;/a&gt; . &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Translations/README_zh.md&#34;&gt;🇨🇳&lt;/a&gt; . &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Translations/README_pt-br.md&#34;&gt;🇧🇷&lt;/a&gt; . &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Translations/README_ko.md&#34;&gt;🇰🇷&lt;/a&gt; . &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Translations/README_fr.md&#34;&gt;🇫🇷&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Today almost all apps have async processes, such as API requests, long running processes, etc. While the processes are working, usually developers place a loading view to show users that something is going on.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SkeletonView&lt;/strong&gt; has been conceived to address this need, an elegant way to show users that something is happening and also prepare them for which contents are waiting.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy it! 🙂&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-features&#34;&gt;🌟 Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-guides&#34;&gt;🎬 Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-installation&#34;&gt;📲 Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-usage&#34;&gt;🐒 Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-collections&#34;&gt;🌿 Collections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-texts&#34;&gt;🔠 Texts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-appearance&#34;&gt;🦋 Appearance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-custom-colors&#34;&gt;🎨 Custom colors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#%EF%B8%8F-animations&#34;&gt;🏃‍♀️ Animations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-transitions&#34;&gt;🏄 Transitions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-miscellaneous&#34;&gt;✨ Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#%EF%B8%8F-contributing&#34;&gt;❤️ Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-mentions&#34;&gt;📢 Mentions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-sponsors&#34;&gt;🏆 Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-author&#34;&gt;👨🏻‍💻 Author&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-license&#34;&gt;👮🏻 License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌟 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;All UIViews are skeletonables&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable&lt;/li&gt; &#xA; &lt;li&gt;Universal (iPhone &amp;amp; iPad)&lt;/li&gt; &#xA; &lt;li&gt;Interface Builder friendly&lt;/li&gt; &#xA; &lt;li&gt;Simple Swift syntax&lt;/li&gt; &#xA; &lt;li&gt;Lightweight readable codebase&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎬 Guides&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/75kgOhWsPNA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/75kgOhWsPNA/maxresdefault.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/MVCiM_VdxVA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/MVCiM_VdxVA/maxresdefault.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/Qq3Evspeea8&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/Qq3Evspeea8/maxresdefault.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Zx1Pg1gPfxA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/Zx1Pg1gPfxA/maxresdefault.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/75kgOhWsPNA&#34;&gt;&lt;strong&gt;SkeletonView Guides - Getting started&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/MVCiM_VdxVA&#34;&gt;&lt;strong&gt;How to Create Loading View with Skeleton View in Swift 5.2&lt;/strong&gt;&lt;/a&gt; by iKh4ever Studio&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/Qq3Evspeea8&#34;&gt;&lt;strong&gt;Create Skeleton Loading View in App (Swift 5) - Xcode 11, 2020&lt;/strong&gt;&lt;/a&gt; by iOS Academy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Zx1Pg1gPfxA&#34;&gt;&lt;strong&gt;Cómo crear una ANIMACIÓN de CARGA de DATOS en iOS&lt;/strong&gt;&lt;/a&gt; by MoureDev&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;📲 Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SkeletonView&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;Juanpe/SkeletonView&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(url: &#34;https://github.com/Juanpe/SkeletonView.git&#34;, from: &#34;1.7.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🐒 Usage&lt;/h2&gt; &#xA;&lt;p&gt;Only &lt;strong&gt;3&lt;/strong&gt; steps needed to use &lt;code&gt;SkeletonView&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;1️⃣ Import SkeletonView in proper place.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SkeletonView&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2️⃣ Now, set which views will be &lt;code&gt;skeletonables&lt;/code&gt;. You achieve this in two ways:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using code:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;avatarImageView.isSkeletonable = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using IB/Storyboards:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/storyboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;3️⃣ Once you&#39;ve set the views, you can show the &lt;strong&gt;skeleton&lt;/strong&gt;. To do so, you have &lt;strong&gt;4&lt;/strong&gt; choices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;(1) view.showSkeleton()                 // Solid&#xA;(2) view.showGradientSkeleton()         // Gradient&#xA;(3) view.showAnimatedSkeleton()         // Solid animated&#xA;(4) view.showAnimatedGradientSkeleton() // Gradient animated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     Solid&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     Gradient&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     Solid Animated&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     Gradient Animated&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/solid.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/gradient.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/solid_animated.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/gradient_animated.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📣 &lt;strong&gt;IMPORTANT!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;SkeletonView&lt;/code&gt; is recursive, so if you want show the skeleton in all skeletonable views, you only need to call the show method in the main container view. For example, with &lt;code&gt;UIViewControllers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🌿 Collections&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SkeletonView&lt;/code&gt; is compatible with &lt;code&gt;UITableView&lt;/code&gt; and &lt;code&gt;UICollectionView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UITableView&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to show the skeleton in a &lt;code&gt;UITableView&lt;/code&gt;, you need to conform to &lt;code&gt;SkeletonTableViewDataSource&lt;/code&gt; protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol SkeletonTableViewDataSource: UITableViewDataSource {&#xA;    func numSections(in collectionSkeletonView: UITableView) -&amp;gt; Int // Default: 1&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -&amp;gt; ReusableCellIdentifier&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, skeletonCellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell? // Default: nil&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, prepareCellForSkeleton cell: UITableViewCell, at indexPath: IndexPath)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, this protocol inherits from &lt;code&gt;UITableViewDataSource&lt;/code&gt;, so you can replace this protocol with the skeleton protocol.&lt;/p&gt; &#xA;&lt;p&gt;This protocol has a default implementation for some methods. For example, the number of rows for each section is calculated in runtime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func collectionSkeletonView(_ skeletonView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int&#xA;// Default:&#xA;// It calculates how many cells need to populate whole tableview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📣 &lt;strong&gt;IMPORTANT!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you return &lt;code&gt;UITableView.automaticNumberOfSkeletonRows&lt;/code&gt; in the above method, it acts like the default behavior (i.e. it calculates how many cells needed to populate the whole tableview).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There is only one method you need to implement to let Skeleton know the cell identifier. This method doesn&#39;t have default implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -&amp;gt; ReusableCellIdentifier {&#xA;   return &#34;CellIdentifier&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the library dequeues the cells from each indexPath, but you can also do this if you want to make some changes before the skeleton appears:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func collectionSkeletonView(_ skeletonView: UITableView, skeletonCellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell? {&#xA;    let cell = skeletonView.dequeueReusableCell(withIdentifier: &#34;CellIdentifier&#34;, for: indexPath) as? Cell&#xA;    cell?.textField.isHidden = indexPath.row == 0&#xA;    return cell&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to leave the deque part to the library you can configure the cell using this method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func collectionSkeletonView(_ skeletonView: UITableView, prepareCellForSkeleton cell: UITableViewCell, at indexPath: IndexPath) {&#xA;    let cell = cell as? Cell&#xA;    cell?.textField.isHidden = indexPath.row == 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides, you can skeletonize both the headers and footers. You need to conform to &lt;code&gt;SkeletonTableViewDelegate&lt;/code&gt; protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol SkeletonTableViewDelegate: UITableViewDelegate {&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, identifierForHeaderInSection section: Int) -&amp;gt; ReusableHeaderFooterIdentifier? // default: nil&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, identifierForFooterInSection section: Int) -&amp;gt; ReusableHeaderFooterIdentifier? // default: nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📣 &lt;strong&gt;IMPORTANT!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;1️⃣ If you are using resizable cells (&lt;strong&gt;&lt;code&gt;tableView.rowHeight = UITableViewAutomaticDimension&lt;/code&gt;&lt;/strong&gt;), it&#39;s mandatory define the &lt;strong&gt;&lt;code&gt;estimatedRowHeight&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;2️⃣ When you add elements in a &lt;strong&gt;&lt;code&gt;UITableViewCell&lt;/code&gt;&lt;/strong&gt; you should add it to &lt;strong&gt;&lt;code&gt;contentView&lt;/code&gt;&lt;/strong&gt; and not to the cell directly.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.contentView.addSubview(titleLabel) ✅         &#xA;self.addSubview(titleLabel) ❌&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;UICollectionView&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;UICollectionView&lt;/code&gt;, you need to conform to &lt;code&gt;SkeletonCollectionViewDataSource&lt;/code&gt; protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol SkeletonCollectionViewDataSource: UICollectionViewDataSource {&#xA;    func numSections(in collectionSkeletonView: UICollectionView) -&amp;gt; Int  // default: 1&#xA;    func collectionSkeletonView(_ skeletonView: UICollectionView, numberOfItemsInSection section: Int) -&amp;gt; Int&#xA;    func collectionSkeletonView(_ skeletonView: UICollectionView, cellIdentifierForItemAt indexPath: IndexPath) -&amp;gt; ReusableCellIdentifier&#xA;    func collectionSkeletonView(_ skeletonView: UICollectionView, supplementaryViewIdentifierOfKind: String, at indexPath: IndexPath) -&amp;gt; ReusableCellIdentifier? // default: nil&#xA;    func collectionSkeletonView(_ skeletonView: UICollectionView, skeletonCellForItemAt indexPath: IndexPath) -&amp;gt; UICollectionViewCell?  // default: nil&#xA;    func collectionSkeletonView(_ skeletonView: UICollectionView, prepareCellForSkeleton cell: UICollectionViewCell, at indexPath: IndexPath)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rest of the process is the same as &lt;code&gt;UITableView&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🔠 Texts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multilines2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When using elements with text, &lt;code&gt;SkeletonView&lt;/code&gt; draws lines to simulate text.&lt;/p&gt; &#xA;&lt;p&gt;You can set some properties for multilines elements.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;lastLineFillPercent&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CGFloat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;70&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_lastline.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;linesCornerRadius&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_corner.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;skeletonLineSpacing&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CGFloat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_lineSpacing.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;skeletonPaddingInsets&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UIEdgeInsets&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.zero&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_insets.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;skeletonTextLineHeight&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SkeletonTextLineHeight&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.fixed(15)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_lineHeight.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;skeletonTextNumberOfLines&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SkeletonTextNumberOfLines&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.inherited&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_corner.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;To modify the percent or radius &lt;strong&gt;using code&lt;/strong&gt;, set the properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;descriptionTextView.lastLineFillPercent = 50&#xA;descriptionTextView.linesCornerRadius = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you prefer use &lt;strong&gt;IB/Storyboard&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_customize.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to define the number of lines?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, the number of lines is the same as the value of the &lt;code&gt;numberOfLines&lt;/code&gt; property. And, if it&#39;s set to &lt;strong&gt;zero&lt;/strong&gt;, it&#39;ll calculate how many lines are needed to populate the whole skeleton and draw it.&lt;/p&gt; &#xA;&lt;p&gt;However, if you want to set a specific number of skeleton lines you can do it by setting the &lt;code&gt;skeletonTextNumberOfLines&lt;/code&gt; property. This property has two possible values, &lt;code&gt;inherited&lt;/code&gt; which returns &lt;code&gt;numberOfLines&lt;/code&gt; value and &lt;code&gt;custom(Int)&lt;/code&gt; which returns the specific number of lines specified as the associated value.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.skeletonTextNumberOfLines = 3   // .custom(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ DEPRECATED!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;useFontLineHeight&lt;/strong&gt; has been deprecated. You can use &lt;strong&gt;skeletonTextLineHeight&lt;/strong&gt; instead:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;descriptionTextView.skeletonTextLineHeight = .relativeToFont&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;📣 IMPORTANT!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Please note that for views without multiple lines, the single line will be considered as the last line.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🦋 Appearance&lt;/h3&gt; &#xA;&lt;p&gt;The skeletons have a default appearance. So, when you don&#39;t specify the color, gradient or multilines properties, &lt;code&gt;SkeletonView&lt;/code&gt; uses the default values.&lt;/p&gt; &#xA;&lt;p&gt;Default values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;tintColor&lt;/strong&gt;: &lt;code&gt;UIColor&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: &lt;code&gt;.skeletonDefault&lt;/code&gt; (same as &lt;code&gt;.clouds&lt;/code&gt; but adaptive to dark mode)&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gradient&lt;/strong&gt;: SkeletonGradient &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: &lt;code&gt;SkeletonGradient(baseColor: .skeletonDefault)&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;multilineHeight&lt;/strong&gt;: &lt;code&gt;CGFloat&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: 15&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;multilineSpacing&lt;/strong&gt;: &lt;code&gt;CGFloat&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: 10&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;multilineLastLineFillPercent&lt;/strong&gt;: &lt;code&gt;Int&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: 70&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;multilineCornerRadius&lt;/strong&gt;: &lt;code&gt;Int&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: 0&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;skeletonCornerRadius&lt;/strong&gt;: &lt;code&gt;CGFloat&lt;/code&gt; (IBInspectable) (Make your skeleton view with corner) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: 0&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get these default values you can use &lt;code&gt;SkeletonAppearance.default&lt;/code&gt;. Using this property you can set the values as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SkeletonAppearance.default.multilineHeight = 20&#xA;SkeletonAppearance.default.tintColor = .green&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ DEPRECATED!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;useFontLineHeight&lt;/strong&gt; has been deprecated. You can use &lt;strong&gt;textLineHeight&lt;/strong&gt; instead:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SkeletonAppearance.default.textLineHeight = .relativeToFont&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🎨 Custom colors&lt;/h3&gt; &#xA;&lt;p&gt;You can decide which color the skeleton is tinted with. You only need to pass as a parameter the color or gradient you want.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using solid colors&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.showSkeleton(usingColor: UIColor.gray) // Solid&#xA;// or&#xA;view.showSkeleton(usingColor: UIColor(red: 25.0, green: 30.0, blue: 255.0, alpha: 1.0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using gradients&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let gradient = SkeletonGradient(baseColor: UIColor.midnightBlue)&#xA;view.showGradientSkeleton(usingGradient: gradient) // Gradient&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides, &lt;strong&gt;SkeletonView&lt;/strong&gt; features 20 flat colors 🤙🏼&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;UIColor.turquoise, UIColor.greenSea, UIColor.sunFlower, UIColor.flatOrange ...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/flatcolors.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h6&gt;Image captured from website &lt;a href=&#34;https://flatuicolors.com&#34;&gt;https://flatuicolors.com&lt;/a&gt;&lt;/h6&gt; &#xA;&lt;h3&gt;🏃‍♀️ Animations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SkeletonView&lt;/strong&gt; has two built-in animations, &lt;em&gt;pulse&lt;/em&gt; for solid skeletons and &lt;em&gt;sliding&lt;/em&gt; for gradients.&lt;/p&gt; &#xA;&lt;p&gt;Besides, if you want to do your own skeleton animation, it&#39;s really easy.&lt;/p&gt; &#xA;&lt;p&gt;Skeleton provides the &lt;code&gt;showAnimatedSkeleton&lt;/code&gt; function which has a &lt;code&gt;SkeletonLayerAnimation&lt;/code&gt; closure where you can define your custom animation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public typealias SkeletonLayerAnimation = (CALayer) -&amp;gt; CAAnimation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can call the function like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.showAnimatedSkeleton { (layer) -&amp;gt; CAAnimation in&#xA;  let animation = CAAnimation()&#xA;  // Customize here your animation&#xA;&#xA;  return animation&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s available &lt;code&gt;SkeletonAnimationBuilder&lt;/code&gt;. It&#39;s a builder to make &lt;code&gt;SkeletonLayerAnimation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Today, you can create &lt;strong&gt;sliding animations&lt;/strong&gt; for gradients, deciding the &lt;strong&gt;direction&lt;/strong&gt; and setting the &lt;strong&gt;duration&lt;/strong&gt; of the animation (default = 1.5s).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// func makeSlidingAnimation(withDirection direction: GradientDirection, duration: CFTimeInterval = 1.5) -&amp;gt; SkeletonLayerAnimation&#xA;&#xA;let animation = SkeletonAnimationBuilder().makeSlidingAnimation(withDirection: .leftToRight)&#xA;view.showAnimatedGradientSkeleton(usingGradient: gradient, animation: animation)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;GradientDirection&lt;/code&gt; is an enum, with theses cases:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Direction&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.leftRight&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_left_to_right.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.rightLeft&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_right_to_left.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.topBottom&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_top_to_bottom.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.bottomTop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_bottom_to_top.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.topLeftBottomRight&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_topLeft_to_bottomRight.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.bottomRightTopLeft&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_bottomRight_to_topLeft.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;😉 TRICK!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Exist another way to create sliding animations, just using this shortcut:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let animation = GradientDirection.leftToRight.slidingAnimation()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🏄 Transitions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SkeletonView&lt;/strong&gt; has built-in transitions to &lt;strong&gt;show&lt;/strong&gt; or &lt;strong&gt;hide&lt;/strong&gt; the skeletons in a &lt;em&gt;smoother&lt;/em&gt; way 🤙&lt;/p&gt; &#xA;&lt;p&gt;To use the transition, simply add the &lt;code&gt;transition&lt;/code&gt; parameter to your &lt;code&gt;showSkeleton()&lt;/code&gt; or &lt;code&gt;hideSkeleton()&lt;/code&gt; function with the transition time, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.showSkeleton(transition: .crossDissolve(0.25))     //Show skeleton cross dissolve transition with 0.25 seconds fade time&#xA;view.hideSkeleton(transition: .crossDissolve(0.25))     //Hide skeleton cross dissolve transition with 0.25 seconds fade time&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value is &lt;code&gt;crossDissolve(0.25)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     None&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     Cross dissolve&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/skeleton_transition_nofade.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/skeleton_transition_fade.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;✨ Miscellaneous&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hierarchy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;code&gt;SkeletonView&lt;/code&gt; is recursive, and we want skeleton to be very efficient, we want to stop recursion as soon as possible. For this reason, you must set the container view as &lt;code&gt;Skeletonable&lt;/code&gt;, because Skeleton will stop looking for &lt;code&gt;skeletonable&lt;/code&gt; subviews as soon as a view is not Skeletonable, breaking then the recursion.&lt;/p&gt; &#xA;&lt;p&gt;Because an image is worth a thousand words:&lt;/p&gt; &#xA;&lt;p&gt;In this example we have a &lt;code&gt;UIViewController&lt;/code&gt; with a &lt;code&gt;ContainerView&lt;/code&gt; and a &lt;code&gt;UITableView&lt;/code&gt;. When the view is ready, we show the skeleton using this method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;view.showSkeleton()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;isSkeletonable&lt;/code&gt;= ☠️&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Configuration&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Result&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/no_skeletonable.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/no_skeletonables_result.png&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/container_no_skeletonable.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/no_skeletonables_result.png&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/container_skeletonable.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/container_skeletonable_result.png&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/all_skeletonables.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/all_skeletonables_result.png&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/tableview_no_skeletonable.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/tableview_no_skeletonable_result.png&#34; height=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/tableview_skeletonable.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/tableview_skeletonable_result.png&#34; height=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Skeleton views layout&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sometimes skeleton layout may not fit your layout because the parent view bounds have changed. &lt;del&gt;For example, rotating the device.&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can relayout the skeleton views like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLayoutSubviews() {&#xA;    view.layoutSkeletonIfNeeded()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📣 &lt;strong&gt;IMPORTANT!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;You shouldn&#39;t call this method. From &lt;strong&gt;version 1.8.1&lt;/strong&gt; you don&#39;t need to call this method, the library does automatically. So, you can use this method &lt;strong&gt;ONLY&lt;/strong&gt; in the cases when you need to update the layout of the skeleton manually.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update skeleton&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can change the skeleton configuration at any time like its colour, animation, etc. with the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;(1) view.updateSkeleton()                 // Solid&#xA;(2) view.updateGradientSkeleton()         // Gradient&#xA;(3) view.updateAnimatedSkeleton()         // Solid animated&#xA;(4) view.updateAnimatedGradientSkeleton() // Gradient animated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hiding views when the animation starts&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sometimes you wanna hide some view when the animation starts, so there is a quick property that you can use to make this happen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.isHiddenWhenSkeletonIsActive = true  // This works only when isSkeletonable = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t modify user interaction when the skeleton is active&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, the user interaction is disabled for skeletonized items, but if you don&#39;t want to modify the user interaction indicator when skeleton is active, you can use the &lt;code&gt;isUserInteractionDisabledWhenSkeletonIsActive&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.isUserInteractionDisabledWhenSkeletonIsActive = false  // The view will be active when the skeleton will be active.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t use the font line height for the skeleton lines in labels&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;False to disable skeleton to auto-adjust to font height for a &lt;code&gt;UILabel&lt;/code&gt; or &lt;code&gt;UITextView&lt;/code&gt;. By default, the skeleton lines height is auto-adjusted to font height to more accurately reflect the text in the label rect rather than using the bounding box.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.useFontLineHeight = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Delayed show skeleton&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can delay the presentation of the skeleton if the views update quickly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func showSkeleton(usingColor: UIColor,&#xA;                  animated: Bool,&#xA;                  delay: TimeInterval,&#xA;                  transition: SkeletonTransitionStyle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func showGradientSkeleton(usingGradient: SkeletonGradient,&#xA;                          animated: Bool,&#xA;                          delay: TimeInterval,&#xA;                          transition: SkeletonTransitionStyle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debug&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To facilitate the debug tasks when something is not working fine. &lt;strong&gt;&lt;code&gt;SkeletonView&lt;/code&gt;&lt;/strong&gt; has some new tools.&lt;/p&gt; &#xA;&lt;p&gt;First, &lt;code&gt;UIView&lt;/code&gt; has available a property with his skeleton info:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var sk.skeletonTreeDescription: String&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides, you can activate the new &lt;strong&gt;debug mode&lt;/strong&gt;. You just add the environment variable &lt;code&gt;SKELETON_DEBUG&lt;/code&gt; and activate it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/debug_mode.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, when the skeleton appears, you can see the view hierarchy in the Xcode console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{ &#xA;  &#34;type&#34; : &#34;UIView&#34;, // UITableView, UILabel...&#xA;  &#34;isSkeletonable&#34; : true,&#xA;  &#34;reference&#34; : &#34;0x000000014751ce30&#34;,&#xA;  &#34;children&#34; : [&#xA;    {&#xA;      &#34;type&#34; : &#34;UIView&#34;,&#xA;      &#34;isSkeletonable&#34; : true,&#xA;      &#34;children&#34; : [ ... ],&#xA;      &#34;reference&#34; : &#34;0x000000014751cfa0&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported OS &amp;amp; SDK Versions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;❤️ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This is an open source project, so feel free to contribute. How?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open an &lt;a href=&#34;https://github.com/Juanpe/SkeletonView/issues/new&#34;&gt;issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Send feedback via &lt;a href=&#34;mailto://juanpecatalan.com&#34;&gt;email&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Propose your own fixes, suggestions and open a pull request with the changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/Juanpe/SkeletonView/graphs/contributors&#34;&gt;all contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information, please read the &lt;a href=&#34;https://github.com/Juanpe/SkeletonView/raw/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📢 Mentions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iosdevweekly.com/issues/327#start&#34;&gt;iOS Dev Weekly #327&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/40/skeletonview-makes-loading-content-beautiful&#34;&gt;Hacking with Swift Articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.mybridge.co/swift-top-10-articles-for-the-past-month-v-nov-2017-dfed7861cd65&#34;&gt;Top 10 Swift Articles November&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.mybridge.co/30-amazing-ios-swift-libraries-for-the-past-year-v-2018-7cf15027eee9&#34;&gt;30 Amazing iOS Swift Libraries (v2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://digest.appcoda.com/issues/appcoda-weekly-issue-44-81899&#34;&gt;AppCoda Weekly #44&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://us11.campaign-archive.com/?u=cd1f3ed33c6527331d82107ba&amp;amp;id=48131a516d&#34;&gt;iOS Cookies Newsletter #103&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://andybargh.com/swiftdevelopments-113/&#34;&gt;Swift Developments Newsletter #113&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ios-goodies.com/post/167557280951/week-204&#34;&gt;iOS Goodies #204&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://digest.swiftweekly.com/issues/swift-weekly-issue-96-81759&#34;&gt;Swift Weekly #96&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cocoacontrols.com/controls/skeletonview&#34;&gt;CocoaControls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ios.libhunt.com/newsletter/74&#34;&gt;Awesome iOS Newsletter #74&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mAGpsQiy6so&#34;&gt;Swift News #36&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/flawless-app-stories/best-ios-articles-new-tools-more-fcbe673e10d&#34;&gt;Best iOS articles, new tools &amp;amp; more&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🏆 Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Open-source projects cannot live long without your help. If you find &lt;strong&gt;SkeletonView&lt;/strong&gt; is useful, please consider supporting this project by becoming a sponsor.&lt;/p&gt; &#xA;&lt;p&gt;Become a sponsor through &lt;a href=&#34;https://github.com/sponsors/Juanpe&#34;&gt;GitHub Sponsors&lt;/a&gt; &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👨🏻‍💻 Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.twitter.com/JuanpeCatalan&#34;&gt;Juanpe Catalán&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a class=&#34;bmc-button&#34; target=&#34;_blank&#34; href=&#34;https://www.buymeacoffee.com/CDou4xtIK&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy me a coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;span style=&#34;margin-left:5px&#34;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👮🏻 License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2017 Juanpe Catalán&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>exelban/stats</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/exelban/stats</id>
    <link href="https://github.com/exelban/stats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;macOS system monitor in your menu bar&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stats&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;img src=&#34;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/logo.png?raw=true&amp;amp;v=1&#34; width=&#34;120&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;img src=&#34;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/menus%3Fv2.3.2.png?v1&#34; alt=&#34;Stats&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;img src=&#34;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/popups%3Fv2.3.2.png?v3&#34; alt=&#34;Stats&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;macOS system monitor in your menu bar&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;You can download the latest version &lt;a href=&#34;https://github.com/exelban/stats/releases/latest/download/Stats.dmg&#34;&gt;here&lt;/a&gt;.&lt;br&gt; This will download a file called &lt;code&gt;Stats.dmg&lt;/code&gt;. Open it and move the app to the application folder.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;To install it using Homebrew, open the Terminal app and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask stats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Stats is currently supported on macOS 10.13 (High Sierra) and higher.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Stats is an application that allows you to monitor your macOS system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Battery level&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth devices&lt;/li&gt; &#xA; &lt;li&gt;CPU utilization&lt;/li&gt; &#xA; &lt;li&gt;Disk utilization&lt;/li&gt; &#xA; &lt;li&gt;Fan/s control&lt;/li&gt; &#xA; &lt;li&gt;GPU utilization&lt;/li&gt; &#xA; &lt;li&gt;Memory usage&lt;/li&gt; &#xA; &lt;li&gt;Network usage&lt;/li&gt; &#xA; &lt;li&gt;Sensors information (Temperature/Voltage/Power)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;How do you change the order of the menu bar icons?&lt;/h3&gt; &#xA;&lt;p&gt;macOS decides the order of the menu bar items not &lt;code&gt;Stats&lt;/code&gt; - it may change after the first reboot after installing Stats.&lt;/p&gt; &#xA;&lt;p&gt;To change the order of any menu bar icon - macOS Mojave (version 10.14) and up.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hold down ⌘ (command key).&lt;/li&gt; &#xA; &lt;li&gt;Drag the icon to the desired position on the menu bar.&lt;/li&gt; &#xA; &lt;li&gt;Release ⌘ (command key)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English&lt;/li&gt; &#xA; &lt;li&gt;Polski&lt;/li&gt; &#xA; &lt;li&gt;Українська&lt;/li&gt; &#xA; &lt;li&gt;Русский&lt;/li&gt; &#xA; &lt;li&gt;中文 (简体) (thanks to &lt;a href=&#34;https://github.com/chenguokai&#34;&gt;chenguokai&lt;/a&gt; and &lt;a href=&#34;https://github.com/Tai-Zhou&#34;&gt;Tai-Zhou&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Türkçe (thanks to &lt;a href=&#34;https://github.com/yusufozgul&#34;&gt;yusufozgul&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Korean (thanks to &lt;a href=&#34;https://github.com/escapeanaemia&#34;&gt;escapeanaemia&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;German (thanks to &lt;a href=&#34;https://github.com/natterstefan&#34;&gt;natterstefan&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;中文 (繁體) (thanks to &lt;a href=&#34;https://github.com/iamch15542&#34;&gt;iamch15542&lt;/a&gt; and &lt;a href=&#34;https://github.com/jrthsr700tmax&#34;&gt;jrthsr700tmax&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Spanish (thanks to &lt;a href=&#34;https://github.com/jcconca&#34;&gt;jcconca&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Vietnamese (thanks to &lt;a href=&#34;https://github.com/xuandung38&#34;&gt;xuandung38&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;French (thanks to &lt;a href=&#34;https://github.com/RomainLt&#34;&gt;RomainLt&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Italian (thanks to &lt;a href=&#34;https://github.com/gmcinalli&#34;&gt;gmcinalli&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Portuguese (Brazil) (thanks to &lt;a href=&#34;https://github.com/marcelochaves95&#34;&gt;marcelochaves95&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Norwegian Bokmål (thanks to &lt;a href=&#34;https://github.com/rubjo&#34;&gt;rubjo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;日本語 (thanks to &lt;a href=&#34;https://github.com/treastrain&#34;&gt;treastrain&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Portuguese (Portugal) (thanks to &lt;a href=&#34;https://github.com/AdamModus&#34;&gt;AdamModus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Czech (thanks to &lt;a href=&#34;https://github.com/mpl75&#34;&gt;mpl75&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Magyar (thanks to &lt;a href=&#34;https://github.com/moriczr&#34;&gt;moriczr&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Bulgarian (thanks to &lt;a href=&#34;https://github.com/zbrox&#34;&gt;zbrox&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Romanian (thanks to &lt;a href=&#34;https://github.com/razluta&#34;&gt;razluta&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dutch (thanks to &lt;a href=&#34;https://github.com/ngohungphuc&#34;&gt;ngohungphuc&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Hrvatski (thanks to &lt;a href=&#34;https://github.com/milotype&#34;&gt;milotype&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Danish (thanks to &lt;a href=&#34;https://github.com/casperes1996&#34;&gt;casperes1996&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Catalan (thanks to &lt;a href=&#34;https://github.com/davidalonso&#34;&gt;davidalonso&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Indonesian (thanks to &lt;a href=&#34;https://github.com/yooody&#34;&gt;yooody&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Hebrew (thanks to &lt;a href=&#34;https://github.com/BadSugar&#34;&gt;BadSugar&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Slovenian (thanks to &lt;a href=&#34;https://github.com/zigapovhe&#34;&gt;zigapovhe&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can help by adding a new language or improve the existing translation.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exelban/stats/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mrousavy/react-native-vision-camera</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/mrousavy/react-native-vision-camera</id>
    <link href="https://github.com/mrousavy/react-native-vision-camera" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📸 The Camera library that sees the vision.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://margelo.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/banner.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Vision Camera&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/11.png&#34; width=&#34;50%&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;blockquote&gt;&#xA;  &lt;b&gt;📸 The Camera library that sees the vision.&lt;/b&gt;&#xA; &lt;/blockquote&gt; &#xA; &lt;pre align=&#34;center&#34;&gt;npm i &lt;a href=&#34;https://www.npmjs.com/package/react-native-vision-camera&#34;&gt;react-native-vision-camera&lt;/a&gt;&lt;br&gt;npx pod-install                 &lt;/pre&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://ko-fi.com/F1F8CLXG&#34; target=&#34;_blank&#34;&gt; &lt;img height=&#34;36&#34; style=&#34;border:0px;height:36px;&#34; src=&#34;https://az743702.vo.msecnd.net/cdn/kofi2.png?v=0&#34; border=&#34;0&#34; alt=&#34;Buy Me a Coffee at ko-fi.com&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://github.com/mrousavy?tab=followers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/followers/mrousavy?label=Follow%20%40mrousavy&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://twitter.com/mrousavy&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/mrousavy?label=Follow%20%40mrousavy&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;div&gt; &#xA; &lt;img align=&#34;right&#34; width=&#34;35%&#34; src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/example.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/guides&#34;&gt;Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/example/&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Photo, Video and Snapshot capture&lt;/li&gt; &#xA; &lt;li&gt;Customizable devices and multi-cameras (smoothly zoom out to &#34;fish-eye&#34; camera)&lt;/li&gt; &#xA; &lt;li&gt;Customizable FPS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/guides/frame-processors&#34;&gt;Frame Processors&lt;/a&gt; (JS worklets to run QR-Code scanning, facial recognition, AI object detection, realtime video chats, ...)&lt;/li&gt; &#xA; &lt;li&gt;Smooth zooming (Reanimated)&lt;/li&gt; &#xA; &lt;li&gt;Fast pause and resume&lt;/li&gt; &#xA; &lt;li&gt;HDR &amp;amp; Night modes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/example/&#34;&gt;example&lt;/a&gt; app&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;function App() {&#xA;  const devices = useCameraDevices(&#39;wide-angle-camera&#39;)&#xA;  const device = devices.back&#xA;&#xA;  if (device == null) return &amp;lt;LoadingView /&amp;gt;&#xA;  return (&#xA;    &amp;lt;Camera&#xA;      style={StyleSheet.absoluteFill}&#xA;      device={device}&#xA;      isActive={true}&#xA;    /&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adopting at scale&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/sponsors/mrousavy&#34;&gt; &lt;img align=&#34;right&#34; width=&#34;160&#34; alt=&#34;This library helped you? Consider sponsoring!&#34; src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/.github/funding-octocat.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;VisionCamera is provided &lt;em&gt;as is&lt;/em&gt;, I work on it in my free time.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re integrating VisionCamera in a production app, consider &lt;a href=&#34;https://github.com/sponsors/mrousavy&#34;&gt;funding this project&lt;/a&gt; and &lt;a href=&#34;mailto:me@mrousavy.com?subject=Adopting VisionCamera at scale&#34;&gt;contact me&lt;/a&gt; to receive premium enterprise support, help with issues, prioritize bugfixes, request features, help at integrating VisionCamera and/or Frame Processors, and more.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;🚀 Get started by &lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/guides/&#34;&gt;setting up permissions&lt;/a&gt;!&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>facebook/facebook-ios-sdk</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/facebook/facebook-ios-sdk</id>
    <link href="https://github.com/facebook/facebook-ios-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Used to integrate the Facebook Platform with your iOS &amp; tvOS apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Facebook SDK for iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/FBSDKCoreKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/FBSDKCoreKit.svg?sanitize=true&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/facebook/facebook-ios-sdk/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/facebook/facebook-ios-sdk/tree/main.svg?style=shield&#34; alt=&#34;circleci&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/FBSDKCoreKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/FBSDKCoreKit.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This open-source library allows you to integrate Facebook into your iOS app.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about the provided samples, documentation, integrating the SDK into your app, accessing source code, and more at &lt;a href=&#34;https://developers.facebook.com/docs/ios&#34;&gt;https://developers.facebook.com/docs/ios&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please take a moment and &lt;a href=&#34;https://docs.github.com/en/enterprise/2.15/user/articles/watching-and-unwatching-repositories&#34;&gt;subscribe to releases&lt;/a&gt; so that you can be notified about new features, deprecations, and critical fixes. To see information about the latest release, consult our &lt;a href=&#34;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;👋&lt;/span&gt; The SDK team is eager to learn from you! Fill out &lt;a href=&#34;https://facebook.co1.qualtrics.com/jfe/form/SV_2hJ13Imkq1YF9Sm?TrackID=GitHub&#34;&gt;this survey&lt;/a&gt; to tell us what’s most important to you and how we can improve.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;span&gt;⚠&lt;/span&gt; Be Advised &lt;span&gt;⚠&lt;/span&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;p&gt;We have begun rewriting the iOS SDK in Swift in order to modernize the code base.&lt;/p&gt;&lt;p&gt;Please monitor the changelog for updates to existing interfaces but keep in mind that some interfaces will be unstable during this process. As such, updating to a minor version may introduce compilation issues related to language interoperability.&lt;/p&gt;Please bear with us as we work towards providing an improved experience for integrating with the Facebook platform.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TRY IT OUT&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In Xcode, select File &amp;gt; Swift Packages &amp;gt; Add Package Dependency.&lt;/li&gt; &#xA; &lt;li&gt;Follow the prompts using the URL for this repository&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;Facebook&lt;/code&gt;-prefixed libraries you want to use&lt;/li&gt; &#xA; &lt;li&gt;Check-out the tutorials available online at: &lt;a href=&#34;https://developers.facebook.com/docs/ios/getting-started&#34;&gt;https://developers.facebook.com/docs/ios/getting-started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start coding! Visit &lt;a href=&#34;https://developers.facebook.com/docs/ios&#34;&gt;https://developers.facebook.com/docs/ios&lt;/a&gt; for tutorials and reference documentation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;iOS 14 CHANGES&lt;/h2&gt; &#xA;&lt;h3&gt;Data Disclosure&lt;/h3&gt; &#xA;&lt;p&gt;Due to the release of iOS 14, tracking events that your app collects and sends to Facebook may require you to disclosed these data types in the App Store Connect questionnaire. It is your responsibility to ensure this is reflected in your application’s privacy policy. Visit our blogpost for information on affected Facebook SDKs, APIs, and products and the Apple App Store Privacy Details article to learn more about the data types you will need to disclose.&lt;/p&gt; &#xA;&lt;p&gt;link to FB blogpost &lt;a href=&#34;https://developers.facebook.com/blog/post/2020/10/22/preparing-for-apple-app-store-data-disclosure-requirements/&#34;&gt;https://developers.facebook.com/blog/post/2020/10/22/preparing-for-apple-app-store-data-disclosure-requirements/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;apple store details &lt;a href=&#34;https://developer.apple.com/app-store/app-privacy-details/&#34;&gt;https://developer.apple.com/app-store/app-privacy-details/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FEATURES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Login - &lt;a href=&#34;https://developers.facebook.com/docs/facebook-login&#34;&gt;https://developers.facebook.com/docs/facebook-login&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sharing - &lt;a href=&#34;https://developers.facebook.com/docs/sharing&#34;&gt;https://developers.facebook.com/docs/sharing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;App Links - &lt;a href=&#34;https://developers.facebook.com/docs/applinks&#34;&gt;https://developers.facebook.com/docs/applinks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Graph API - &lt;a href=&#34;https://developers.facebook.com/docs/ios/graph&#34;&gt;https://developers.facebook.com/docs/ios/graph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Analytics - &lt;a href=&#34;https://developers.facebook.com/docs/analytics&#34;&gt;https://developers.facebook.com/docs/analytics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GIVE FEEDBACK&lt;/h2&gt; &#xA;&lt;p&gt;Please report bugs or issues to our designated developer support team -- &lt;a href=&#34;https://developers.facebook.com/support/bugs/&#34;&gt;https://developers.facebook.com/support/bugs/&lt;/a&gt; -- as this will help us resolve them more quickly.&lt;/p&gt; &#xA;&lt;p&gt;You can also visit our &lt;a href=&#34;https://developers.facebook.com/community/&#34;&gt;Facebook Developer Community Forum&lt;/a&gt;, join the &lt;a href=&#34;https://www.facebook.com/groups/fbdevelopers/&#34;&gt;Facebook Developers Group on Facebook&lt;/a&gt;, ask questions on &lt;a href=&#34;http://facebook.stackoverflow.com&#34;&gt;Stack Overflow&lt;/a&gt;, or open an issue in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;CONTRIBUTE&lt;/h2&gt; &#xA;&lt;p&gt;Facebook welcomes contributions to our SDKs. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Copyright © Meta Platforms, Inc&lt;/p&gt; &#xA;&lt;h2&gt;SECURITY POLICY&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/facebook-ios-sdk/main/SECURITY.md&#34;&gt;SECURITY POLICY&lt;/a&gt; for more info on our bug bounty program.&lt;/p&gt; &#xA;&lt;h2&gt;DEVELOPER TERMS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By enabling Facebook integrations, including through this SDK, you can share information with Facebook, including information about people’s use of your app. Facebook will use information received in accordance with our &lt;a href=&#34;https://www.facebook.com/about/privacy/&#34;&gt;Data Use Policy&lt;/a&gt;, including to provide you with insights about the effectiveness of your ads and the use of your app. These integrations also enable us and our partners to serve ads on and off Facebook.&lt;/li&gt; &#xA; &lt;li&gt;You may limit your sharing of information with us by updating the Insights control in the developer tool &lt;code&gt;https://developers.facebook.com/apps/{app_id}/settings/advanced&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you use a Facebook integration, including to share information with us, you agree and confirm that you have provided appropriate and sufficiently prominent notice to and obtained the appropriate consent from your users regarding such collection, use, and disclosure (including, at a minimum, through your privacy policy). You further agree that you will not share information with us about children under the age of 13.&lt;/li&gt; &#xA; &lt;li&gt;You agree to comply with all applicable laws and regulations and also agree to our Terms &lt;a href=&#34;https://www.facebook.com/policies/&#34;&gt;https://www.facebook.com/policies/&lt;/a&gt;, including our Platform Policies &lt;a href=&#34;https://developers.facebook.com/policy/&#34;&gt;https://developers.facebook.com/policy/&lt;/a&gt; and Advertising Guidelines, as applicable &lt;a href=&#34;https://www.facebook.com/ad_guidelines.php&#34;&gt;https://www.facebook.com/ad_guidelines.php&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By using the Facebook SDK for iOS you agree to these terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tristanhimmelman/ObjectMapper</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/tristanhimmelman/ObjectMapper</id>
    <link href="https://github.com/tristanhimmelman/ObjectMapper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple JSON Object mapping written in Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ObjectMapper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tristanhimmelman/ObjectMapper&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/ObjectMapper.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://rawgit.com/jlyonsmith/artwork/master/SwiftPackageManager/swiftpackagemanager-compatible.svg?sanitize=true&#34; alt=&#34;Swift Package Manager&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/tristanhimmelman/ObjectMapper&#34;&gt;&lt;img src=&#34;https://travis-ci.org/tristanhimmelman/ObjectMapper.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ObjectMapper is a framework written in Swift that makes it easy for you to convert your model objects (classes and structs) to and from JSON.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#the-basics&#34;&gt;The Basics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#easy-mapping-of-nested-objects&#34;&gt;Mapping Nested Objects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#custom-transforms&#34;&gt;Custom Transformations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#subclasses&#34;&gt;Subclassing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#generic-objects&#34;&gt;Generic Objects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#mapping-context&#34;&gt;Mapping Context&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#objectmapper--alamofire&#34;&gt;ObjectMapper + Alamofire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#objectmapper--realm&#34;&gt;ObjectMapper + Realm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#projects-using-objectmapper&#34;&gt;Projects using ObjectMapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#to-do&#34;&gt;To Do&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mapping JSON to objects&lt;/li&gt; &#xA; &lt;li&gt;Mapping objects to JSON&lt;/li&gt; &#xA; &lt;li&gt;Nested Objects (stand alone, in arrays or in dictionaries)&lt;/li&gt; &#xA; &lt;li&gt;Custom transformations during mapping&lt;/li&gt; &#xA; &lt;li&gt;Struct support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tristanhimmelman/ObjectMapper/master/#immutablemappable-protocol&#34;&gt;Immutable support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;The Basics&lt;/h1&gt; &#xA;&lt;p&gt;To support mapping, a class or struct just needs to implement the &lt;code&gt;Mappable&lt;/code&gt; protocol which includes the following functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;init?(map: Map)&#xA;mutating func mapping(map: Map)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ObjectMapper uses the &lt;code&gt;&amp;lt;-&lt;/code&gt; operator to define how each member variable maps to and from JSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class User: Mappable {&#xA;    var username: String?&#xA;    var age: Int?&#xA;    var weight: Double!&#xA;    var array: [Any]?&#xA;    var dictionary: [String : Any] = [:]&#xA;    var bestFriend: User?                       // Nested User object&#xA;    var friends: [User]?                        // Array of Users&#xA;    var birthday: Date?&#xA;&#xA;    required init?(map: Map) {&#xA;&#xA;    }&#xA;&#xA;    // Mappable&#xA;    func mapping(map: Map) {&#xA;        username    &amp;lt;- map[&#34;username&#34;]&#xA;        age         &amp;lt;- map[&#34;age&#34;]&#xA;        weight      &amp;lt;- map[&#34;weight&#34;]&#xA;        array       &amp;lt;- map[&#34;arr&#34;]&#xA;        dictionary  &amp;lt;- map[&#34;dict&#34;]&#xA;        bestFriend  &amp;lt;- map[&#34;best_friend&#34;]&#xA;        friends     &amp;lt;- map[&#34;friends&#34;]&#xA;        birthday    &amp;lt;- (map[&#34;birthday&#34;], DateTransform())&#xA;    }&#xA;}&#xA;&#xA;struct Temperature: Mappable {&#xA;    var celsius: Double?&#xA;    var fahrenheit: Double?&#xA;&#xA;    init?(map: Map) {&#xA;&#xA;    }&#xA;&#xA;    mutating func mapping(map: Map) {&#xA;        celsius &#x9;&amp;lt;- map[&#34;celsius&#34;]&#xA;        fahrenheit &#x9;&amp;lt;- map[&#34;fahrenheit&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once your class implements &lt;code&gt;Mappable&lt;/code&gt;, ObjectMapper allows you to easily convert to and from JSON.&lt;/p&gt; &#xA;&lt;p&gt;Convert a JSON string to a model object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let user = User(JSONString: JSONString)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert a model object to a JSON string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let JSONString = user.toJSONString(prettyPrint: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, the &lt;code&gt;Mapper.swift&lt;/code&gt; class can also be used to accomplish the above (it also provides extra functionality for other situations):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Convert JSON String to Model&#xA;let user = Mapper&amp;lt;User&amp;gt;().map(JSONString: JSONString)&#xA;// Create JSON String from Model&#xA;let JSONString = Mapper().toJSONString(user, prettyPrint: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ObjectMapper can map classes composed of the following types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RawRepresentable&lt;/code&gt; (Enums)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dictionary&amp;lt;String, Any&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Object&amp;lt;T: Mappable&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array&amp;lt;T: Mappable&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array&amp;lt;Array&amp;lt;T: Mappable&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Set&amp;lt;T: Mappable&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dictionary&amp;lt;String, T: Mappable&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dictionary&amp;lt;String, Array&amp;lt;T: Mappable&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optionals of all the above&lt;/li&gt; &#xA; &lt;li&gt;Implicitly Unwrapped Optionals of the above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;Mappable&lt;/code&gt; Protocol&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;code&gt;mutating func mapping(map: Map)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This function is where all mapping definitions should go. When parsing JSON, this function is executed after successful object creation. When generating JSON, it is the only function that is called on the object.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;init?(map: Map)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This failable initializer is used by ObjectMapper for object creation. It can be used by developers to validate JSON prior to object serialization. Returning nil within the function will prevent the mapping from occuring. You can inspect the JSON stored within the &lt;code&gt;Map&lt;/code&gt; object to do your validation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;required init?(map: Map){&#xA;&#x9;// check if a required &#34;name&#34; property exists within the JSON.&#xA;&#x9;if map.JSON[&#34;name&#34;] == nil {&#xA;&#x9;&#x9;return nil&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;StaticMappable&lt;/code&gt; Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;StaticMappable&lt;/code&gt; is an alternative to &lt;code&gt;Mappable&lt;/code&gt;. It provides developers with a static function that is used by ObjectMapper for object initialization instead of &lt;code&gt;init?(map: Map)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;StaticMappable&lt;/code&gt;, like &lt;code&gt;Mappable&lt;/code&gt;, is a sub protocol of &lt;code&gt;BaseMappable&lt;/code&gt; which is where the &lt;code&gt;mapping(map: Map)&lt;/code&gt; function is defined.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;static func objectForMapping(map: Map) -&amp;gt; BaseMappable?&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;ObjectMapper uses this function to get objects to use for mapping. Developers should return an instance of an object that conforms to &lt;code&gt;BaseMappable&lt;/code&gt; in this function. This function can also be used to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;validate JSON prior to object serialization&lt;/li&gt; &#xA; &lt;li&gt;provide an existing cached object to be used for mapping&lt;/li&gt; &#xA; &lt;li&gt;return an object of another type (which also conforms to &lt;code&gt;BaseMappable&lt;/code&gt;) to be used for mapping. For instance, you may inspect the JSON to infer the type of object that should be used for mapping (&lt;a href=&#34;https://github.com/Hearst-DD/ObjectMapper/raw/master/Tests/ObjectMapperTests/ClassClusterTests.swift#L67&#34;&gt;see examples in ClassClusterTests.swift&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need to implement ObjectMapper in an extension, you will need to adopt this protocol instead of &lt;code&gt;Mappable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;ImmutableMappable&lt;/code&gt; Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ImmutableMappable&lt;/code&gt; provides the ability to map immutable properties. This is how &lt;code&gt;ImmutableMappable&lt;/code&gt; differs from &lt;code&gt;Mappable&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ImmutableMappable&lt;/th&gt; &#xA;   &lt;th&gt;Mappable&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th colspan=&#34;2&#34;&gt;Properties&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;&lt;strong&gt;let&lt;/strong&gt; id: Int&#xA;&lt;strong&gt;let&lt;/strong&gt; name: String?&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;var id: Int!&#xA;var name: String?&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th colspan=&#34;2&#34;&gt;JSON -&amp;gt; Model&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;init(map: Map) &lt;strong&gt;throws&lt;/strong&gt; {&#xA;  id   = &lt;strong&gt;try&lt;/strong&gt; map.value(&#34;id&#34;)&#xA;  name = &lt;strong&gt;try?&lt;/strong&gt; map.value(&#34;name&#34;)&#xA;}&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;mutating func mapping(map: Map) {&#xA;  id   &amp;lt;- map[&#34;id&#34;]&#xA;  name &amp;lt;- map[&#34;name&#34;]&#xA;}&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th colspan=&#34;2&#34;&gt;Model -&amp;gt; JSON&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;func mapping(map: Map) {&#xA;  id   &lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; map[&#34;id&#34;]&#xA;  name &lt;strong&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/strong&gt; map[&#34;name&#34;]&#xA;}&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;mutating func mapping(map: Map) {&#xA;  id   &amp;lt;- map[&#34;id&#34;]&#xA;  name &amp;lt;- map[&#34;name&#34;]&#xA;}&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th colspan=&#34;2&#34;&gt;Initializing&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;&lt;strong&gt;try&lt;/strong&gt; User(JSONString: JSONString)&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&#xA;User(JSONString: JSONString)&#xA;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;init(map: Map) throws&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This throwable initializer is used to map immutable properties from the given &lt;code&gt;Map&lt;/code&gt;. Every immutable property should be initialized in this initializer.&lt;/p&gt; &#xA;&lt;p&gt;This initializer throws an error when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Map&lt;/code&gt; fails to get a value for the given key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Map&lt;/code&gt; fails to transform a value using &lt;code&gt;Transform&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;ImmutableMappable&lt;/code&gt; uses &lt;code&gt;Map.value(_:using:)&lt;/code&gt; method to get values from the &lt;code&gt;Map&lt;/code&gt;. This method should be used with the &lt;code&gt;try&lt;/code&gt; keyword as it is throwable. &lt;code&gt;Optional&lt;/code&gt; properties can easily be handled using &lt;code&gt;try?&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;init(map: Map) throws {&#xA;    name      = try map.value(&#34;name&#34;) // throws an error when it fails&#xA;    createdAt = try map.value(&#34;createdAt&#34;, using: DateTransform()) // throws an error when it fails&#xA;    updatedAt = try? map.value(&#34;updatedAt&#34;, using: DateTransform()) // optional&#xA;    posts     = (try? map.value(&#34;posts&#34;)) ?? [] // optional + default value&#xA;    surname    = try? map.value(&#34;surname&#34;, default: &#34;DefaultSurname&#34;) // optional + default value as an argument&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;mutating func mapping(map: Map)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This method is where the reverse transform is performed (model to JSON). Since immutable properties cannot be mapped with the &lt;code&gt;&amp;lt;-&lt;/code&gt; operator, developers have to define the reverse transform using the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; operator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;mutating func mapping(map: Map) {&#xA;    name      &amp;gt;&amp;gt;&amp;gt; map[&#34;name&#34;]&#xA;    createdAt &amp;gt;&amp;gt;&amp;gt; (map[&#34;createdAt&#34;], DateTransform())&#xA;    updatedAt &amp;gt;&amp;gt;&amp;gt; (map[&#34;updatedAt&#34;], DateTransform())&#xA;    posts     &amp;gt;&amp;gt;&amp;gt; map[&#34;posts&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Easy Mapping of Nested Objects&lt;/h1&gt; &#xA;&lt;p&gt;ObjectMapper supports dot notation within keys for easy mapping of nested objects. Given the following JSON String:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;distance&#34; : {&#xA;     &#34;text&#34; : &#34;102 ft&#34;,&#xA;     &#34;value&#34; : 31&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access the nested objects as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func mapping(map: Map) {&#xA;    distance &amp;lt;- map[&#34;distance.value&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nested keys also support accessing values from an array. Given a JSON response with an array of distances, the value could be accessed as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;distance &amp;lt;- map[&#34;distances.0.value&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a key that contains &lt;code&gt;.&lt;/code&gt;, you can individually disable the above feature as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func mapping(map: Map) {&#xA;    identifier &amp;lt;- map[&#34;app.identifier&#34;, nested: false]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you have nested keys which contain &lt;code&gt;.&lt;/code&gt;, you can pass the custom nested key delimiter as follows (&lt;a href=&#34;https://github.com/tristanhimmelman/ObjectMapper/pull/629&#34;&gt;#629&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func mapping(map: Map) {&#xA;    appName &amp;lt;- map[&#34;com.myapp.info-&amp;gt;com.myapp.name&#34;, delimiter: &#34;-&amp;gt;&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Custom Transforms&lt;/h1&gt; &#xA;&lt;p&gt;ObjectMapper also supports custom transforms that convert values during the mapping process. To use a transform, simply create a tuple with &lt;code&gt;map[&#34;field_name&#34;]&lt;/code&gt; and the transform of your choice on the right side of the &lt;code&gt;&amp;lt;-&lt;/code&gt; operator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;birthday &amp;lt;- (map[&#34;birthday&#34;], DateTransform())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above transform will convert the JSON Int value to an Date when reading JSON and will convert the Date to an Int when converting objects to JSON.&lt;/p&gt; &#xA;&lt;p&gt;You can easily create your own custom transforms by adopting and implementing the methods in the &lt;code&gt;TransformType&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol TransformType {&#xA;    associatedtype Object&#xA;    associatedtype JSON&#xA;&#xA;    func transformFromJSON(_ value: Any?) -&amp;gt; Object?&#xA;    func transformToJSON(_ value: Object?) -&amp;gt; JSON?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TransformOf&lt;/h3&gt; &#xA;&lt;p&gt;In a lot of situations you can use the built-in transform class &lt;code&gt;TransformOf&lt;/code&gt; to quickly perform a desired transformation. &lt;code&gt;TransformOf&lt;/code&gt; is initialized with two types and two closures. The types define what the transform is converting to and from and the closures perform the actual transformation.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to transform a JSON &lt;code&gt;String&lt;/code&gt; value to an &lt;code&gt;Int&lt;/code&gt; you could use &lt;code&gt;TransformOf&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let transform = TransformOf&amp;lt;Int, String&amp;gt;(fromJSON: { (value: String?) -&amp;gt; Int? in &#xA;    // transform value from String? to Int?&#xA;    return Int(value!)&#xA;}, toJSON: { (value: Int?) -&amp;gt; String? in&#xA;    // transform value from Int? to String?&#xA;    if let value = value {&#xA;        return String(value)&#xA;    }&#xA;    return nil&#xA;})&#xA;&#xA;id &amp;lt;- (map[&#34;id&#34;], transform)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a more condensed version of the above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;id &amp;lt;- (map[&#34;id&#34;], TransformOf&amp;lt;Int, String&amp;gt;(fromJSON: { Int($0!) }, toJSON: { $0.map { String($0) } }))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Subclasses&lt;/h1&gt; &#xA;&lt;p&gt;Classes that implement the &lt;code&gt;Mappable&lt;/code&gt; protocol can easily be subclassed. When subclassing mappable classes, follow the structure below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Base: Mappable {&#xA;    var base: String?&#xA;    &#xA;    required init?(map: Map) {&#xA;&#xA;    }&#xA;&#xA;    func mapping(map: Map) {&#xA;        base &amp;lt;- map[&#34;base&#34;]&#xA;    }&#xA;}&#xA;&#xA;class Subclass: Base {&#xA;    var sub: String?&#xA;&#xA;    required init?(map: Map) {&#xA;        super.init(map)&#xA;    }&#xA;&#xA;    override func mapping(map: Map) {&#xA;        super.mapping(map)&#xA;        &#xA;        sub &amp;lt;- map[&#34;sub&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure your subclass implementation calls the right initializers and mapping functions to also apply the mappings from your superclass.&lt;/p&gt; &#xA;&lt;h1&gt;Generic Objects&lt;/h1&gt; &#xA;&lt;p&gt;ObjectMapper can handle classes with generic types as long as the generic type also conforms to &lt;code&gt;Mappable&lt;/code&gt;. See the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Result&amp;lt;T: Mappable&amp;gt;: Mappable {&#xA;    var result: T?&#xA;&#xA;    required init?(map: Map){&#xA;&#xA;    }&#xA;&#xA;    func mapping(map: Map) {&#xA;        result &amp;lt;- map[&#34;result&#34;]&#xA;    }&#xA;}&#xA;&#xA;let result = Mapper&amp;lt;Result&amp;lt;User&amp;gt;&amp;gt;().map(JSON)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Mapping Context&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;Map&lt;/code&gt; object which is passed around during mapping, has an optional &lt;code&gt;MapContext&lt;/code&gt; object that is available for developers to use if they need to pass information around during mapping.&lt;/p&gt; &#xA;&lt;p&gt;To take advantage of this feature, simply create an object that implements &lt;code&gt;MapContext&lt;/code&gt; (which is an empty protocol) and pass it into &lt;code&gt;Mapper&lt;/code&gt; during initialization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Context: MapContext {&#xA;&#x9;var importantMappingInfo = &#34;Info that I need during mapping&#34;&#xA;}&#xA;&#xA;class User: Mappable {&#xA;&#x9;var name: String?&#xA;&#x9;&#xA;&#x9;required init?(map: Map){&#xA;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;func mapping(map: Map){&#xA;&#x9;&#x9;if let context = map.context as? Context {&#xA;&#x9;&#x9;&#x9;// use context to make decisions about mapping&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;let context = Context()&#xA;let user = Mapper&amp;lt;User&amp;gt;(context: context).map(JSONString)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;ObjectMapper + Alamofire&lt;/h1&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; for networking and you want to convert your responses to Swift objects, you can use &lt;a href=&#34;https://github.com/tristanhimmelman/AlamofireObjectMapper&#34;&gt;AlamofireObjectMapper&lt;/a&gt;. It is a simple Alamofire extension that uses ObjectMapper to automatically map JSON response data to Swift objects.&lt;/p&gt; &#xA;&lt;h1&gt;ObjectMapper + Realm&lt;/h1&gt; &#xA;&lt;p&gt;ObjectMapper and Realm can be used together. Simply follow the class structure below and you will be able to use ObjectMapper to generate your Realm models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Model: Object, Mappable {&#xA;    dynamic var name = &#34;&#34;&#xA;&#xA;    required convenience init?(map: Map) {&#xA;        self.init()&#xA;    }&#xA;&#xA;    func mapping(map: Map) {&#xA;        name &amp;lt;- map[&#34;name&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to serialize associated RealmObjects, you can use &lt;a href=&#34;https://github.com/jakenberg/ObjectMapper-Realm&#34;&gt;ObjectMapper+Realm&lt;/a&gt;. It is a simple Realm extension that serializes arbitrary JSON into Realm&#39;s &lt;code&gt;List&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;To serialize Swift &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Bool&lt;/code&gt; arrays you can use &lt;a href=&#34;https://github.com/APUtils/ObjectMapperAdditions#realm-features&#34;&gt;ObjectMapperAdditions/Realm&lt;/a&gt;. It&#39;ll wrap Swift types into RealmValues that can be stored in Realm&#39;s &lt;code&gt;List&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;Note: Generating a JSON string of a Realm Object using ObjectMappers&#39; &lt;code&gt;toJSON&lt;/code&gt; function only works within a Realm write transaction. This is because ObjectMapper uses the &lt;code&gt;inout&lt;/code&gt; flag in its mapping functions (&lt;code&gt;&amp;lt;-&lt;/code&gt;) which are used both for serializing and deserializing. Realm detects the flag and forces the &lt;code&gt;toJSON&lt;/code&gt; function to be called within a write block even though the objects are not being modified.&lt;/p&gt; &#xA;&lt;h1&gt;Projects Using ObjectMapper&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/liyanhuadev/ObjectMapper-Plugin&#34;&gt;Xcode Plugin for generating &lt;code&gt;Mappable&lt;/code&gt; and &lt;code&gt;ImmutableMappable&lt;/code&gt; code&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.json4swift.com&#34;&gt;Json4Swift - Supports generating &lt;code&gt;ImmutableMappable&lt;/code&gt; structs online (no plugins needed)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/chanonly123/Json-Model-Generator&#34;&gt;JSON to Model - Template based MacOS app which generates structs with customisation.&lt;/a&gt; &lt;a href=&#34;https://github.com/chanonly123/Json-Model-Generator/raw/master/JsonToModel.zip&#34;&gt;⬇️Download App&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have a project that utilizes, extends or provides tooling for ObjectMapper, please submit a PR with a link to your project in this section of the README.&lt;/p&gt; &#xA;&lt;h1&gt;To Do&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve error handling. Perhaps using &lt;code&gt;throws&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Class cluster documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are very welcome 👍😃.&lt;/p&gt; &#xA;&lt;p&gt;Before submitting any pull request, please ensure you have run the included tests and they have passed. If you are including new functionality, please write test cases for it as well.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;ObjectMapper can be added to your project using &lt;a href=&#34;http://blog.cocoapods.org/Pod-Authors-Guide-to-CocoaPods-Frameworks/&#34;&gt;CocoaPods 0.36 or later&lt;/a&gt; by adding the following line to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;ObjectMapper&#39;, &#39;~&amp;gt; 3.5&#39; (check releases to make sure this is the latest version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; you can add a dependency on ObjectMapper by adding it to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;tristanhimmelman/ObjectMapper&#34; ~&amp;gt; 3.5 (check releases to make sure this is the latest version)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;To add ObjectMapper to a &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; based project, add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/tristanhimmelman/ObjectMapper.git&#34;, .upToNextMajor(from: &#34;4.1.0&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to your &lt;code&gt;Package.swift&lt;/code&gt; files &lt;code&gt;dependencies&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;h3&gt;Submodule&lt;/h3&gt; &#xA;&lt;p&gt;Otherwise, ObjectMapper can be added as a submodule:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add ObjectMapper as a &lt;a href=&#34;http://git-scm.com/docs/git-submodule&#34;&gt;submodule&lt;/a&gt; by opening the terminal, &lt;code&gt;cd&lt;/code&gt;-ing into your top-level project directory, and entering the command &lt;code&gt;git submodule add https://github.com/tristanhimmelman/ObjectMapper.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;ObjectMapper&lt;/code&gt; folder, and drag &lt;code&gt;ObjectMapper.xcodeproj&lt;/code&gt; into the file navigator of your app project.&lt;/li&gt; &#xA; &lt;li&gt;In Xcode, navigate to the target configuration window by clicking on the blue project icon, and selecting the application target under the &#34;Targets&#34; heading in the sidebar.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the deployment target of &lt;code&gt;ObjectMapper.framework&lt;/code&gt; matches that of the application target.&lt;/li&gt; &#xA; &lt;li&gt;In the tab bar at the top of that window, open the &#34;Build Phases&#34; panel.&lt;/li&gt; &#xA; &lt;li&gt;Expand the &#34;Target Dependencies&#34; group, and add &lt;code&gt;ObjectMapper.framework&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;code&gt;+&lt;/code&gt; button at the top left of the panel and select &#34;New Copy Files Phase&#34;. Rename this new phase to &#34;Copy Frameworks&#34;, set the &#34;Destination&#34; to &#34;Frameworks&#34;, and add &lt;code&gt;ObjectMapper.framework&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>pointfreeco/swift-snapshot-testing</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/pointfreeco/swift-snapshot-testing</id>
    <link href="https://github.com/pointfreeco/swift-snapshot-testing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📸 Delightful Swift snapshot testing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;📸 SnapshotTesting&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/download/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.1-ED523F.svg?style=flat&#34; alt=&#34;Swift 5.1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/pointfreeco/swift-snapshot-testing/goto&#34;&gt;&lt;img src=&#34;https://github.com/pointfreeco/swift-snapshot-testing/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pointfreeco&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contact-@pointfreeco-5AA9E7.svg?style=flat&#34; alt=&#34;@pointfreeco&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Delightful Swift snapshot testing.&lt;/p&gt; &#xA;&lt;!--&#xA;![An example of a snapshot failure in Xcode.](.github/snapshot-test-1.png)&#xA;--&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/#installation&#34;&gt;installed&lt;/a&gt;, &lt;em&gt;no additional configuration is required&lt;/em&gt;. You can import the &lt;code&gt;SnapshotTesting&lt;/code&gt; module and call the &lt;code&gt;assertSnapshot&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SnapshotTesting&#xA;import XCTest&#xA;&#xA;class MyViewControllerTests: XCTestCase {&#xA;  func testMyViewController() {&#xA;    let vc = MyViewController()&#xA;&#xA;    assertSnapshot(matching: vc, as: .image)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When an assertion first runs, a snapshot is automatically recorded to disk and the test will fail, printing out the file path of any newly-recorded reference.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🛑 failed - No reference was found on disk. Automatically recorded snapshot: …&lt;/p&gt; &#xA; &lt;p&gt;open &#34;…/MyAppTests/__Snapshots__/MyViewControllerTests/testMyViewController.png&#34;&lt;/p&gt; &#xA; &lt;p&gt;Re-run &#34;testMyViewController&#34; to test against the newly-recorded snapshot.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Repeat test runs will load this reference and compare it with the runtime value. If they don&#39;t match, the test will fail and describe the difference. Failures can be inspected from Xcode&#39;s Report Navigator or by inspecting the file URLs of the failure.&lt;/p&gt; &#xA;&lt;p&gt;You can record a new reference by setting the &lt;code&gt;record&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; on the assertion or setting &lt;code&gt;isRecording&lt;/code&gt; globally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: vc, as: .image, record: true)&#xA;&#xA;// or globally&#xA;&#xA;isRecording = true&#xA;assertSnapshot(matching: vc, as: .image)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Snapshot Anything&lt;/h2&gt; &#xA;&lt;p&gt;While most snapshot testing libraries in the Swift community are limited to &lt;code&gt;UIImage&lt;/code&gt;s of &lt;code&gt;UIView&lt;/code&gt;s, SnapshotTesting can work with &lt;em&gt;any&lt;/em&gt; format of &lt;em&gt;any&lt;/em&gt; value on &lt;em&gt;any&lt;/em&gt; Swift platform!&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;assertSnapshot&lt;/code&gt; function accepts a value and any snapshot strategy that value supports. This means that a &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#uiview&#34;&gt;view&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#uiviewcontroller&#34;&gt;view controller&lt;/a&gt; can be tested against an image representation &lt;em&gt;and&lt;/em&gt; against a textual representation of its properties and subview hierarchy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: vc, as: .image)&#xA;assertSnapshot(matching: vc, as: .recursiveDescription)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View testing is &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#uiviewcontroller&#34;&gt;highly configurable&lt;/a&gt;. You can override trait collections (for specific size classes and content size categories) and generate device-agnostic snapshots, all from a single simulator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: vc, as: .image(on: .iPhoneSe))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPhoneSe))&#xA;&#xA;assertSnapshot(matching: vc, as: .image(on: .iPhoneSe(.landscape)))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPhoneSe(.landscape)))&#xA;&#xA;assertSnapshot(matching: vc, as: .image(on: .iPhoneX))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPhoneX))&#xA;&#xA;assertSnapshot(matching: vc, as: .image(on: .iPadMini(.portrait)))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPadMini(.portrait)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Warning: Snapshots must be compared using a simulator with the same OS, device gamut, and scale as the simulator that originally took the reference to avoid discrepancies between images.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Better yet, SnapshotTesting isn&#39;t limited to views and view controllers! There are &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md&#34;&gt;a number of available snapshot strategies&lt;/a&gt; to choose from.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can snapshot test URL requests (&lt;em&gt;e.g.&lt;/em&gt;, those that your API client prepares).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: urlRequest, as: .raw)&#xA;// POST http://localhost:8080/account&#xA;// Cookie: pf_session={&#34;userId&#34;:&#34;1&#34;}&#xA;//&#xA;// email=blob%40pointfree.co&amp;amp;name=Blob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can snapshot test &lt;code&gt;Encodable&lt;/code&gt; values against their JSON &lt;em&gt;and&lt;/em&gt; property list representations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: user, as: .json)&#xA;// {&#xA;//   &#34;bio&#34; : &#34;Blobbed around the world.&#34;,&#xA;//   &#34;id&#34; : 1,&#xA;//   &#34;name&#34; : &#34;Blobby&#34;&#xA;// }&#xA;&#xA;assertSnapshot(matching: user, as: .plist)&#xA;// &amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;// &amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;// &amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;// &amp;lt;dict&amp;gt;&#xA;//   &amp;lt;key&amp;gt;bio&amp;lt;/key&amp;gt;&#xA;//   &amp;lt;string&amp;gt;Blobbed around the world.&amp;lt;/string&amp;gt;&#xA;//   &amp;lt;key&amp;gt;id&amp;lt;/key&amp;gt;&#xA;//   &amp;lt;integer&amp;gt;1&amp;lt;/integer&amp;gt;&#xA;//   &amp;lt;key&amp;gt;name&amp;lt;/key&amp;gt;&#xA;//   &amp;lt;string&amp;gt;Blobby&amp;lt;/string&amp;gt;&#xA;// &amp;lt;/dict&amp;gt;&#xA;// &amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In fact, &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#any&#34;&gt;any&lt;/a&gt;&lt;/em&gt; value can be snapshot-tested by default using its &lt;a href=&#34;https://developer.apple.com/documentation/swift/mirror&#34;&gt;mirror&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: user, as: .dump)&#xA;// ▿ User&#xA;//   - bio: &#34;Blobbed around the world.&#34;&#xA;//   - id: 1&#xA;//   - name: &#34;Blobby&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your data can be represented as an image, text, or data, you can write a snapshot test for it! Check out &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md&#34;&gt;all of the snapshot strategies&lt;/a&gt; that ship with SnapshotTesting and &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Defining-Custom-Snapshot-Strategies.md&#34;&gt;learn how to define your own custom strategies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Xcode 11&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Warning: By default, Xcode will try to add the SnapshotTesting package to your project&#39;s main application/framework target. Please ensure that SnapshotTesting is added to a &lt;em&gt;test&lt;/em&gt; target instead, as documented in the last step, below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, navigate through &lt;strong&gt;Swift Packages&lt;/strong&gt; and select &lt;strong&gt;Add Package Dependency…&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enter package repository URL: &lt;code&gt;https://github.com/pointfreeco/swift-snapshot-testing.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Confirm the version and let Xcode resolve the package&lt;/li&gt; &#xA; &lt;li&gt;On the final dialog, update SnapshotTesting&#39;s &lt;strong&gt;Add to Target&lt;/strong&gt; column to a test target that will contain snapshot tests (if you have more than one test target, you can later add SnapshotTesting to them by manually linking the library in its build phase)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use SnapshotTesting in any other project that uses &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;SwiftPM&lt;/a&gt;, add the package as a dependency in &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(&#xA;    url: &#34;https://github.com/pointfreeco/swift-snapshot-testing.git&#34;,&#xA;    from: &#34;1.9.0&#34;&#xA;  ),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add &lt;code&gt;SnapshotTesting&lt;/code&gt; as a dependency of your test target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;targets: [&#xA;  .target(name: &#34;MyApp&#34;),&#xA;  .testTarget(&#xA;    name: &#34;MyAppTests&#34;,&#xA;    dependencies: [&#xA;      &#34;MyApp&#34;,&#xA;      .product(name: &#34;SnapshotTesting&#34;, package: &#34;swift-snapshot-testing&#34;),&#xA;    ]&#xA;  )&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, you can add the following dependency to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;pointfreeco/swift-snapshot-testing&#34; ~&amp;gt; 1.9.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Warning: Carthage instructs you to drag frameworks into your Xcode project. Xcode may automatically attempt to link these frameworks to your app target. &lt;code&gt;SnapshotTesting.framework&lt;/code&gt; is only compatible with test targets, so when you first add it to your project:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Remove &lt;code&gt;SnapshotTesting.framework&lt;/code&gt; from any non-test target it may have been added to.&lt;/li&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;SnapshotTesting.framework&lt;/code&gt; to any applicable test targets.&lt;/li&gt; &#xA;  &lt;li&gt;Add a &lt;strong&gt;New Copy Build Phase&lt;/strong&gt; to any applicable test targets with &lt;strong&gt;Destination&lt;/strong&gt; set to &#34;Frameworks&#34;, and add &lt;code&gt;SnapshotTesting.framework&lt;/code&gt; as an item to this phase.&lt;/li&gt; &#xA;  &lt;li&gt;Do &lt;em&gt;not&lt;/em&gt; add &lt;code&gt;SnapshotTesting.framework&lt;/code&gt; to the &#34;Input Files&#34; or &#34;Output Files&#34; of your app target&#39;s Carthage &lt;code&gt;copy-frameworks&lt;/code&gt; &lt;strong&gt;Run Script Phase&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;See Carthage&#39;s &#34;&lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-unit-tests-or-a-framework&#34;&gt;Adding frameworks to unit tests or a framework&lt;/a&gt;&#34; documentation for more.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;If your project uses &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, add the pod to any applicable test targets in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;MyAppTests&#39; do&#xA;  pod &#39;SnapshotTesting&#39;, &#39;~&amp;gt; 1.9.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md&#34;&gt;&lt;strong&gt;Dozens of snapshot strategies&lt;/strong&gt;&lt;/a&gt;. Snapshot testing isn&#39;t just for &lt;code&gt;UIView&lt;/code&gt;s and &lt;code&gt;CALayer&lt;/code&gt;s. Write snapshots against &lt;em&gt;any&lt;/em&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Defining-Custom-Snapshot-Strategies.md&#34;&gt;&lt;strong&gt;Write your own snapshot strategies&lt;/strong&gt;&lt;/a&gt;. If you can convert it to an image, string, data, or your own diffable format, you can snapshot test it! Build your own snapshot strategies from scratch or transform existing ones.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No configuration required.&lt;/strong&gt; Don&#39;t fuss with scheme settings and environment variables. Snapshots are automatically saved alongside your tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;More hands-off.&lt;/strong&gt; New snapshots are recorded whether &lt;code&gt;isRecording&lt;/code&gt; mode is &lt;code&gt;true&lt;/code&gt; or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Subclass-free.&lt;/strong&gt; Assert from any XCTest case or Quick spec.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Device-agnostic snapshots.&lt;/strong&gt; Render views and view controllers for specific devices and trait collections from a single simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;First-class Xcode support.&lt;/strong&gt; Image differences are captured as XCTest attachments. Text differences are rendered in inline error messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supports any platform that supports Swift.&lt;/strong&gt; Write snapshot tests for iOS, Linux, macOS, and tvOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SceneKit, SpriteKit, and WebKit support.&lt;/strong&gt; Most snapshot testing libraries don&#39;t support these view subclasses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Codable&lt;/code&gt; support&lt;/strong&gt;. Snapshot encodable data structures into their &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#json&#34;&gt;JSON&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#plist&#34;&gt;property list&lt;/a&gt; representations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom diff tool integration&lt;/strong&gt;. Configure failure messages to print diff commands for &lt;a href=&#34;https://kaleidoscope.app&#34;&gt;Kaleidoscope&lt;/a&gt; (or your diff tool of choice). &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SnapshotTesting.diffTool = &#34;ksdiff&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plug-ins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Killectro/swift-snapshot-testing-nimble&#34;&gt;swift-snapshot-testing-nimble&lt;/a&gt; adds &lt;a href=&#34;https://github.com/Quick/Nimble&#34;&gt;Nimble&lt;/a&gt; matchers for SnapshotTesting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-html&#34;&gt;swift-html&lt;/a&gt; is a Swift DSL for type-safe, extensible, and transformable HTML documents and includes an &lt;code&gt;HtmlSnapshotTesting&lt;/code&gt; module to snapshot test its HTML documents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/SebastianOsinski/GRDBSnapshotTesting&#34;&gt;GRDBSnapshotTesting&lt;/a&gt; adds snapshot strategy for testing SQLite database migrations made with &lt;a href=&#34;https://github.com/groue/GRDB.swift&#34;&gt;GRDB&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cashapp/AccessibilitySnapshot&#34;&gt;AccessibilitySnapshot&lt;/a&gt; adds easy regression testing for iOS accessibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Sherlouk/AccessibilitySnapshotColorBlindness&#34;&gt;AccessibilitySnapshotColorBlindness&lt;/a&gt; adds snapshot strategies for color blindness simulation on iOS views, view controllers and images.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Sherlouk/swift-snapshot-testing-stitch/&#34;&gt;swift-snapshot-testing-stitch&lt;/a&gt; adds the ability to stitch multiple UIView&#39;s or UIViewController&#39;s together in a single test.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have you written your own SnapshotTesting plug-in? &lt;a href=&#34;https://github.com/pointfreeco/swift-snapshot-testing/edit/master/README.md&#34;&gt;Add it here&lt;/a&gt; and submit a pull request!&lt;/p&gt; &#xA;&lt;h2&gt;Related Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/&#34;&gt;&lt;code&gt;iOSSnapshotTestCase&lt;/code&gt;&lt;/a&gt; helped introduce screen shot testing to a broad audience in the iOS community. Experience with it inspired the creation of this library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://jestjs.io&#34;&gt;Jest&lt;/a&gt; brought generalized snapshot testing to the JavaScript community with a polished user experience. Several features of this library (diffing, automatically capturing new snapshots) were directly influenced.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;SnapshotTesting was designed with &lt;a href=&#34;https://www.pointfree.co/episodes/ep39-witness-oriented-library-design&#34;&gt;witness-oriented programming&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This concept (and more) are explored thoroughly in a series of episodes on &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt;, a video series exploring functional programming and Swift hosted by &lt;a href=&#34;https://twitter.com/mbrandonw&#34;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Witness-oriented programming and the design of this library was explored in the following &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt; episodes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep33-protocol-witnesses-part-1&#34;&gt;Episode 33&lt;/a&gt;: Protocol Witnesses: Part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep34-protocol-witnesses-part-1&#34;&gt;Episode 34&lt;/a&gt;: Protocol Witnesses: Part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep35-advanced-protocol-witnesses-part-1&#34;&gt;Episode 35&lt;/a&gt;: Advanced Protocol Witnesses: Part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep36-advanced-protocol-witnesses-part-2&#34;&gt;Episode 36&lt;/a&gt;: Advanced Protocol Witnesses: Part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep37-protocol-oriented-library-design-part-1&#34;&gt;Episode 37&lt;/a&gt;: Protocol-Oriented Library Design: Part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep38-protocol-oriented-library-design-part-2&#34;&gt;Episode 38&lt;/a&gt;: Protocol-Oriented Library Design: Part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep39-witness-oriented-library-design&#34;&gt;Episode 39&lt;/a&gt;: Witness-Oriented Library Design&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep40-async-functional-refactoring&#34;&gt;Episode 40&lt;/a&gt;: Async Functional Refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing&#34;&gt;Episode 41&lt;/a&gt;: A Tour of Snapshot Testing 🆓&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing&#34;&gt; &lt;img alt=&#34;video poster image&#34; src=&#34;https://d1hf1soyumxcgv.cloudfront.net/0041-tour-of-snapshot-testing/0041-poster.jpg&#34; width=&#34;480&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>krzyzanowskim/CryptoSwift</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/krzyzanowskim/CryptoSwift</id>
    <link href="https://github.com/krzyzanowskim/CryptoSwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CryptoSwift is a growing collection of standard and secure cryptographic algorithms implemented in Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#installation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platforms-iOS%20%7C%20Android%20%7CmacOS%20%7C%20watchOS%20%7C%20tvOS%20%7C%20Linux-4E4E4E.svg?colorA=28a745&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#swift-versions-support&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-3.1%20%7C%203.2%20%7C%204.0%20%7C%204.1%20%7C%204.2%20%7C%205.0-lightgrey.svg?colorA=28a745&amp;amp;colorB=4E4E4E&#34; alt=&#34;Swift support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-compatible-brightgreen.svg?style=flat&amp;amp;colorA=28a745&amp;amp;&amp;amp;colorB=4E4E4E&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/CryptoSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/CryptoSwift.svg?style=flat&amp;amp;label=CocoaPods&amp;amp;colorA=28a745&amp;amp;&amp;amp;colorB=4E4E4E&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&amp;amp;colorA=28a745&amp;amp;&amp;amp;colorB=4E4E4E&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CryptoSwift&lt;/h1&gt; &#xA;&lt;p&gt;Crypto related functions and helpers for &lt;a href=&#34;https://swift.org&#34;&gt;Swift&lt;/a&gt; implemented in Swift. (&lt;a href=&#34;https://twitter.com/hashtag/pureswift&#34;&gt;#PureSwift&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;main&lt;/code&gt; branch follows the latest currently released &lt;strong&gt;version of Swift&lt;/strong&gt;. If you need an earlier version for an older version of Swift, you can specify its version in your &lt;code&gt;Podfile&lt;/code&gt; or use the code on the branch for that version. Older branches are unsupported. Check &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#swift-versions-support&#34;&gt;versions&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#requirements&#34;&gt;Requirements&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#features&#34;&gt;Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#contribution&#34;&gt;Contribution&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#installation&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#swift-versions-support&#34;&gt;Swift versions&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#how-to&#34;&gt;How-to&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#author&#34;&gt;Author&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#license&#34;&gt;License&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;It takes some time to keep it all for your convenience, so maybe spare $1, so I can keep working on that. There are more than 8000 clones daily. If I&#39;d get $1/month from each company that uses my work here, I&#39;d say we&#39;re even. Hurry up, find the &lt;a href=&#34;https://github.com/users/krzyzanowskim/sponsorship&#34;&gt;Sponsorship&lt;/a&gt; button, and fulfill your duty.&lt;/p&gt; &#xA;&lt;p&gt;CryptoSwift isn&#39;t backed by any big company and is developer in my spare time that I also use to as a freelancer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://twitter.com/krzyzanowskim&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-@krzyzanowskim-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Good mood&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;Convenient extensions for String and Data&lt;/li&gt; &#xA; &lt;li&gt;Support for incremental updates (stream, ...)&lt;/li&gt; &#xA; &lt;li&gt;iOS, Android, macOS, AppleTV, watchOS, Linux support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Hash (Digest)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc1321&#34;&gt;MD5&lt;/a&gt; | &lt;a href=&#34;http://tools.ietf.org/html/rfc3174&#34;&gt;SHA1&lt;/a&gt; | &lt;a href=&#34;http://tools.ietf.org/html/rfc6234&#34;&gt;SHA2-224&lt;/a&gt; | &lt;a href=&#34;http://tools.ietf.org/html/rfc6234&#34;&gt;SHA2-256&lt;/a&gt; | &lt;a href=&#34;http://tools.ietf.org/html/rfc6234&#34;&gt;SHA2-384&lt;/a&gt; | &lt;a href=&#34;http://tools.ietf.org/html/rfc6234&#34;&gt;SHA2-512&lt;/a&gt; | &lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf&#34;&gt;SHA3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Cyclic Redundancy Check (CRC)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Cyclic_redundancy_check&#34;&gt;CRC32&lt;/a&gt; | &lt;a href=&#34;http://en.wikipedia.org/wiki/Cyclic_redundancy_check&#34;&gt;CRC32C&lt;/a&gt; | &lt;a href=&#34;http://en.wikipedia.org/wiki/Cyclic_redundancy_check&#34;&gt;CRC16&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Cipher&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf&#34;&gt;AES-128, AES-192, AES-256&lt;/a&gt; | &lt;a href=&#34;http://cr.yp.to/chacha/chacha-20080128.pdf&#34;&gt;ChaCha20&lt;/a&gt; | &lt;a href=&#34;https://tools.ietf.org/html/rfc4503&#34;&gt;Rabbit&lt;/a&gt; | &lt;a href=&#34;https://www.schneier.com/academic/blowfish/&#34;&gt;Blowfish&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Message authenticators&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cr.yp.to/mac/poly1305-20050329.pdf&#34;&gt;Poly1305&lt;/a&gt; | &lt;a href=&#34;https://www.ietf.org/rfc/rfc2104.txt&#34;&gt;HMAC (MD5, SHA1, SHA256)&lt;/a&gt; | &lt;a href=&#34;https://tools.ietf.org/html/rfc4493&#34;&gt;CMAC&lt;/a&gt; | &lt;a href=&#34;https://en.wikipedia.org/wiki/CBC-MAC&#34;&gt;CBC-MAC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Cipher mode of operation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Electronic codebook (&lt;a href=&#34;http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_.28ECB.29&#34;&gt;ECB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cipher-block chaining (&lt;a href=&#34;http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher-block_chaining_.28CBC.29&#34;&gt;CBC&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Propagating Cipher Block Chaining (&lt;a href=&#34;http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Propagating_Cipher_Block_Chaining_.28PCBC.29&#34;&gt;PCBC&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cipher feedback (&lt;a href=&#34;http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_feedback_.28CFB.29&#34;&gt;CFB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Output Feedback (&lt;a href=&#34;http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Output_Feedback_.28OFB.29&#34;&gt;OFB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Counter Mode (&lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_.28CTR.29&#34;&gt;CTR&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Galois/Counter Mode (&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-38d/final&#34;&gt;GCM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Counter with Cipher Block Chaining-Message Authentication Code (&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-38c/final&#34;&gt;CCM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OCB Authenticated-Encryption Algorithm (&lt;a href=&#34;https://tools.ietf.org/html/rfc7253&#34;&gt;OCB&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Password-Based Key Derivation Function&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc2898#section-5.1&#34;&gt;PBKDF1&lt;/a&gt; (Password-Based Key Derivation Function 1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc2898#section-5.2&#34;&gt;PBKDF2&lt;/a&gt; (Password-Based Key Derivation Function 2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5869&#34;&gt;HKDF&lt;/a&gt; (HMAC-based Extract-and-Expand Key Derivation Function)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7914&#34;&gt;Scrypt&lt;/a&gt; (The scrypt Password-Based Key Derivation Function)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Data padding&lt;/h4&gt; &#xA;&lt;p&gt;PKCS#5 | &lt;a href=&#34;http://tools.ietf.org/html/rfc5652#section-6.3&#34;&gt;PKCS#7&lt;/a&gt; | &lt;a href=&#34;https://en.wikipedia.org/wiki/Padding_(cryptography)#Zero_padding&#34;&gt;Zero padding&lt;/a&gt; | &lt;a href=&#34;http://www.embedx.com/pdfs/ISO_STD_7816/info_isoiec7816-4%7Bed21.0%7Den.pdf&#34;&gt;ISO78164&lt;/a&gt; | &lt;a href=&#34;https://en.wikipedia.org/wiki/Padding_(cryptography)#ISO_10126&#34;&gt;ISO10126&lt;/a&gt; | No padding&lt;/p&gt; &#xA;&lt;h4&gt;Authenticated Encryption with Associated Data (AEAD)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7539#section-2.8&#34;&gt;AEAD_CHACHA20_POLY1305&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/issues/5&#34;&gt;Why?&lt;/a&gt; &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/issues/5#issuecomment-53379391&#34;&gt;Because I can&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How do I get involved?&lt;/h2&gt; &#xA;&lt;p&gt;You want to help, great! Go ahead and fork our repo, make your changes and send us a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information on how to help with CryptoSwift.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you found a bug, &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/issues&#34;&gt;open an issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you have a feature request, &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/issues&#34;&gt;open an issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Hardened Runtime (macOS) and Xcode&lt;/h3&gt; &#xA;&lt;p&gt;Binary CryptoSwift.xcframework (Used by Swift Package Manager package integration) won&#39;t load properly in your app if the app uses &lt;strong&gt;Sign to Run Locally&lt;/strong&gt; Signing Certificate with Hardened Runtime enabled. It is possible to setup Xcode like this. To solve the problem you have two options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use proper Signing Certificate, eg. &lt;em&gt;Development&lt;/em&gt; &amp;lt;- this is the proper action&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Disable Library Validation&lt;/code&gt; aka &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt; entitlement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Xcode Project&lt;/h4&gt; &#xA;&lt;p&gt;To install CryptoSwift, add it as a submodule to your project (on the top level project directory):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/krzyzanowskim/CryptoSwift.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended to enable &lt;a href=&#34;https://swift.org/blog/whole-module-optimizations/&#34;&gt;Whole-Module Optimization&lt;/a&gt; to gain better performance. Non-optimized build results in significantly worse performance.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; and specify dependency in &lt;code&gt;Package.swift&lt;/code&gt; by adding this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/krzyzanowskim/CryptoSwift.git&#34;, .upToNextMajor(from: &#34;1.5.1&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;http://blog.krzyzanowskim.com/2016/08/09/package-swift-manual/&#34;&gt;Package.swift - manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Notice: Swift Package Manager uses debug configuration for debug Xcode build, that may result in significant (up to x10000) worse performance. Performance characteristic is different in Release build. To overcome this prolem, consider embed &lt;code&gt;CryptoSwift.xcframework&lt;/code&gt; described below.&lt;/p&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://cocoapods.org/pods/CryptoSwift&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;CryptoSwift&#39;, &#39;~&amp;gt; 1.4.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bear in mind that CocoaPods will build CryptoSwift without &lt;a href=&#34;https://swift.org/blog/whole-module-optimizations/&#34;&gt;Whole-Module Optimization&lt;/a&gt; that may impact performance. You can change it manually after installation, or use &lt;a href=&#34;https://github.com/jedlewison/cocoapods-wholemodule&#34;&gt;cocoapods-wholemodule&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. Specify in Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;krzyzanowskim/CryptoSwift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage&lt;/code&gt; to build the framework and drag the built CryptoSwift.framework into your Xcode project. Follow &lt;a href=&#34;https://github.com/Carthage/Carthage#getting-started&#34;&gt;build instructions&lt;/a&gt;. &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/issues/492#issuecomment-330822874&#34;&gt;Common issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;XCFramework&lt;/h4&gt; &#xA;&lt;p&gt;XCFrameworks require Xcode 11 or later and they can be integrated similarly to how we’re used to integrating the &lt;code&gt;.framework&lt;/code&gt; format. Please use script &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/scripts/build-framework.sh&#34;&gt;scripts/build-framework.sh&lt;/a&gt; to generate binary &lt;code&gt;CryptoSwift.xcframework&lt;/code&gt; archive that you can use as a dependency in Xcode.&lt;/p&gt; &#xA;&lt;p&gt;CryptoSwift.xcframework is a Release (Optimized) binary that offer best available Swift code performance.&lt;/p&gt; &#xA;&lt;img width=&#34;320&#34; alt=&#34;Screen Shot 2020-10-27 at 00 06 32&#34; src=&#34;https://user-images.githubusercontent.com/758033/97240586-f0878280-17ee-11eb-9119-e5a960417d04.png&#34;&gt; &#xA;&lt;h4&gt;Embedded Framework&lt;/h4&gt; &#xA;&lt;p&gt;Embedded frameworks require a minimum deployment target of iOS 9 or macOS Sierra (10.12). Drag the &lt;code&gt;CryptoSwift.xcodeproj&lt;/code&gt; file into your Xcode project, and add appropriate framework as a dependency to your target. Now select your App and choose the General tab for the app target. Find &lt;em&gt;Embedded Binaries&lt;/em&gt; and press &#34;+&#34;, then select &lt;code&gt;CryptoSwift.framework&lt;/code&gt; (iOS, macOS, watchOS or tvOS)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/758033/10834511/25a26852-7e9a-11e5-8c01-6cc8f1838459.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sometimes &#34;embedded framework&#34; option is not available. In that case, you have to add new build phase for the target.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/758033/18415615/d5edabb0-77f8-11e6-8c94-f41d9fc2b8cb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;iOS, macOS, watchOS, tvOS&lt;/h5&gt; &#xA;&lt;p&gt;In the project, you&#39;ll find &lt;a href=&#34;https://mxcl.dev/PromiseKit/news/2016/08/Multiplatform-Single-Scheme-Xcode-Projects/&#34;&gt;single scheme&lt;/a&gt; for all platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CryptoSwift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Swift versions support&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift 1.2: branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift12&#34;&gt;swift12&lt;/a&gt; version &amp;lt;= 0.0.13&lt;/li&gt; &#xA; &lt;li&gt;Swift 2.1: branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift21&#34;&gt;swift21&lt;/a&gt; version &amp;lt;= 0.2.3&lt;/li&gt; &#xA; &lt;li&gt;Swift 2.2, 2.3: branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift2&#34;&gt;swift2&lt;/a&gt; version &amp;lt;= 0.5.2&lt;/li&gt; &#xA; &lt;li&gt;Swift 3.1, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift3&#34;&gt;swift3&lt;/a&gt; version &amp;lt;= 0.6.9&lt;/li&gt; &#xA; &lt;li&gt;Swift 3.2, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift32&#34;&gt;swift32&lt;/a&gt; version = 0.7.0&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.0, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift4&#34;&gt;swift4&lt;/a&gt; version &amp;lt;= 0.12.0&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.2, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift42&#34;&gt;swift42&lt;/a&gt; version &amp;lt;= 0.15.0&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.0, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift5&#34;&gt;swift5&lt;/a&gt; version &amp;lt;= 1.2.0&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.1, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift51&#34;&gt;swift5&lt;/a&gt; version &amp;lt;= 1.3.3&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.3 and newer, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/main&#34;&gt;main&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How-to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#basics&#34;&gt;Basics (data types, conversion, ...)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#calculate-digest&#34;&gt;Digest (MD5, SHA...)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#message-authenticators-1&#34;&gt;Message authenticators (HMAC, CMAC...)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#password-based-key-derivation-functions&#34;&gt;Password-Based Key Derivation Function (PBKDF2, ...)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#hmac-based-key-derivation-function&#34;&gt;HMAC-based Key Derivation Function (HKDF)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#data-padding&#34;&gt;Data Padding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#chacha20&#34;&gt;ChaCha20&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#rabbit&#34;&gt;Rabbit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#blowfish&#34;&gt;Blowfish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#aes&#34;&gt;AES - Advanced Encryption Standard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#aes-gcm&#34;&gt;AES-GCM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#aead&#34;&gt;Authenticated Encryption with Associated Data (AEAD)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Basics&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import CryptoSwift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CryptoSwift uses array of bytes aka &lt;code&gt;Array&amp;lt;UInt8&amp;gt;&lt;/code&gt; as a base type for all operations. Every data may be converted to a stream of bytes. You will find convenience functions that accept &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Data&lt;/code&gt;, and it will be internally converted to the array of bytes.&lt;/p&gt; &#xA;&lt;h5&gt;Data types conversion&lt;/h5&gt; &#xA;&lt;p&gt;For your convenience, &lt;strong&gt;CryptoSwift&lt;/strong&gt; provides two functions to easily convert an array of bytes to &lt;code&gt;Data&lt;/code&gt; or &lt;code&gt;Data&lt;/code&gt; to an array of bytes:&lt;/p&gt; &#xA;&lt;p&gt;Data from bytes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let data = Data( [0x01, 0x02, 0x03])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Data&lt;/code&gt; to &lt;code&gt;Array&amp;lt;UInt8&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bytes = data.bytes                     // [1,2,3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hexadecimal&#34;&gt;Hexadecimal&lt;/a&gt; encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bytes = Array&amp;lt;UInt8&amp;gt;(hex: &#34;0x010203&#34;)  // [1,2,3]&#xA;let hex   = bytes.toHexString()            // &#34;010203&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build bytes out of &lt;code&gt;String&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bytes: Array&amp;lt;UInt8&amp;gt; = &#34;cipherkey&#34;.bytes  // Array(&#34;cipherkey&#34;.utf8)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also... check out helpers that work with &lt;strong&gt;Base64&lt;/strong&gt; encoded data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#34;aPf/i9th9iX+vf49eR7PYk2q7S5xmm3jkRLejgzHNJs=&#34;.decryptBase64ToString(cipher)&#xA;&#34;aPf/i9th9iX+vf49eR7PYk2q7S5xmm3jkRLejgzHNJs=&#34;.decryptBase64(cipher)&#xA;bytes.toBase64()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Calculate Digest&lt;/h5&gt; &#xA;&lt;p&gt;Hashing a data or array of bytes (aka &lt;code&gt;Array&amp;lt;UInt8&amp;gt;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/* Hash struct usage */&#xA;let bytes: Array&amp;lt;UInt8&amp;gt; = [0x01, 0x02, 0x03]&#xA;let digest = input.md5()&#xA;let digest = Digest.md5(bytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let data = Data([0x01, 0x02, 0x03])&#xA;&#xA;let hash = data.md5()&#xA;let hash = data.sha1()&#xA;let hash = data.sha224()&#xA;let hash = data.sha256()&#xA;let hash = data.sha384()&#xA;let hash = data.sha512()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    var digest = MD5()&#xA;    let partial1 = try digest.update(withBytes: [0x31, 0x32])&#xA;    let partial2 = try digest.update(withBytes: [0x33])&#xA;    let result = try digest.finish()&#xA;} catch { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hashing a String and printing result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let hash = &#34;123&#34;.md5() // &#34;123&#34;.bytes.md5()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Calculate CRC&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;bytes.crc16()&#xA;data.crc16()&#xA;&#xA;bytes.crc32()&#xA;data.crc32()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Message authenticators&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Calculate Message Authentication Code (MAC) for message&#xA;let key: Array&amp;lt;UInt8&amp;gt; = [1,2,3,4,5,6,7,8,9,10,...]&#xA;&#xA;try Poly1305(key: key).authenticate(bytes)&#xA;try HMAC(key: key, variant: .sha256).authenticate(bytes)&#xA;try CMAC(key: key).authenticate(bytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Password-Based Key Derivation Functions&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password: Array&amp;lt;UInt8&amp;gt; = Array(&#34;s33krit&#34;.utf8)&#xA;let salt: Array&amp;lt;UInt8&amp;gt; = Array(&#34;nacllcan&#34;.utf8)&#xA;&#xA;let key = try PKCS5.PBKDF2(password: password, salt: salt, iterations: 4096, keyLength: 32, variant: .sha256).calculate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password: Array&amp;lt;UInt8&amp;gt; = Array(&#34;s33krit&#34;.utf8)&#xA;let salt: Array&amp;lt;UInt8&amp;gt; = Array(&#34;nacllcan&#34;.utf8)&#xA;// Scrypt implementation does not implement work parallelization, so `p` parameter will&#xA;// increase the work time even in multicore systems&#xA;let key = try Scrypt(password: password, salt: salt, dkLen: 64, N: 16384, r: 8, p: 1).calculate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;HMAC-based Key Derivation Function&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password: Array&amp;lt;UInt8&amp;gt; = Array(&#34;s33krit&#34;.utf8)&#xA;let salt: Array&amp;lt;UInt8&amp;gt; = Array(&#34;nacllcan&#34;.utf8)&#xA;&#xA;let key = try HKDF(password: password, salt: salt, variant: .sha256).calculate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Data Padding&lt;/h5&gt; &#xA;&lt;p&gt;Some content-encryption algorithms assume the input length is a multiple of &lt;code&gt;k&lt;/code&gt; octets, where &lt;code&gt;k&lt;/code&gt; is greater than one. For such algorithms, the input shall be padded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Padding.pkcs7.add(to: bytes, blockSize: AES.blockSize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Working with Ciphers&lt;/h4&gt; &#xA;&lt;h5&gt;ChaCha20&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encrypted = try ChaCha20(key: key, iv: iv).encrypt(message)&#xA;let decrypted = try ChaCha20(key: key, iv: iv).decrypt(encrypted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Rabbit&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encrypted = try Rabbit(key: key, iv: iv).encrypt(message)&#xA;let decrypted = try Rabbit(key: key, iv: iv).decrypt(encrypted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Blowfish&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encrypted = try Blowfish(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).encrypt(message)&#xA;let decrypted = try Blowfish(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).decrypt(encrypted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;AES&lt;/h5&gt; &#xA;&lt;p&gt;Notice regarding padding: &lt;em&gt;Manual padding of data is optional, and CryptoSwift is using PKCS7 padding by default. If you need to manually disable/enable padding, you can do this by setting parameter for &lt;strong&gt;AES&lt;/strong&gt; class&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Variant of AES encryption (AES-128, AES-192, AES-256) depends on given key length:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AES-128 = 16 bytes&lt;/li&gt; &#xA; &lt;li&gt;AES-192 = 24 bytes&lt;/li&gt; &#xA; &lt;li&gt;AES-256 = 32 bytes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AES-256 example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encryptedBytes = try AES(key: [1,2,3,...,32], blockMode: CBC(iv: [1,2,3,...,16]), padding: .pkcs7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password: [UInt8] = Array(&#34;s33krit&#34;.utf8)&#xA;let salt: [UInt8] = Array(&#34;nacllcan&#34;.utf8)&#xA;&#xA;/* Generate a key from a `password`. Optional if you already have a key */&#xA;let key = try PKCS5.PBKDF2(&#xA;    password: password,&#xA;    salt: salt,&#xA;    iterations: 4096,&#xA;    keyLength: 32, /* AES-256 */&#xA;    variant: .sha256&#xA;).calculate()&#xA;&#xA;/* Generate random IV value. IV is public value. Either need to generate, or get it from elsewhere */&#xA;let iv = AES.randomIV(AES.blockSize)&#xA;&#xA;/* AES cryptor instance */&#xA;let aes = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7)&#xA;&#xA;/* Encrypt Data */&#xA;let inputData = Data()&#xA;let encryptedBytes = try aes.encrypt(inputData.bytes)&#xA;let encryptedData = Data(encryptedBytes)&#xA;&#xA;/* Decrypt Data */&#xA;let decryptedBytes = try aes.decrypt(encryptedData.bytes)&#xA;let decryptedData = Data(decryptedBytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;All at once&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let aes = try AES(key: &#34;keykeykeykeykeyk&#34;, iv: &#34;drowssapdrowssap&#34;) // aes128&#xA;    let ciphertext = try aes.encrypt(Array(&#34;Nullam quis risus eget urna mollis ornare vel eu leo.&#34;.utf8))&#xA;} catch { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Incremental updates&lt;/h6&gt; &#xA;&lt;p&gt;Incremental operations use instance of Cryptor and encrypt/decrypt one part at a time, this way you can save on memory for large files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    var encryptor = try AES(key: &#34;keykeykeykeykeyk&#34;, iv: &#34;drowssapdrowssap&#34;).makeEncryptor()&#xA;&#xA;    var ciphertext = Array&amp;lt;UInt8&amp;gt;()&#xA;    // aggregate partial results&#xA;    ciphertext += try encryptor.update(withBytes: Array(&#34;Nullam quis risus &#34;.utf8))&#xA;    ciphertext += try encryptor.update(withBytes: Array(&#34;eget urna mollis &#34;.utf8))&#xA;    ciphertext += try encryptor.update(withBytes: Array(&#34;ornare vel eu leo.&#34;.utf8))&#xA;    // finish at the end&#xA;    ciphertext += try encryptor.finish()&#xA;&#xA;    print(ciphertext.toHexString())&#xA;} catch {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;AES Advanced usage&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let input: Array&amp;lt;UInt8&amp;gt; = [0,1,2,3,4,5,6,7,8,9]&#xA;&#xA;let key: Array&amp;lt;UInt8&amp;gt; = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]&#xA;let iv: Array&amp;lt;UInt8&amp;gt; = // Random bytes of `AES.blockSize` length&#xA;&#xA;do {&#xA;    let encrypted = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).encrypt(input)&#xA;    let decrypted = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).decrypt(encrypted)&#xA;} catch {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AES without data padding&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let input: Array&amp;lt;UInt8&amp;gt; = [0,1,2,3,4,5,6,7,8,9]&#xA;let encrypted: Array&amp;lt;UInt8&amp;gt; = try! AES(key: Array(&#34;secret0key000000&#34;.utf8), blockMode: CBC(iv: Array(&#34;0123456789012345&#34;.utf8)), padding: .noPadding).encrypt(input)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using convenience extensions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let plain = Data([0x01, 0x02, 0x03])&#xA;let encrypted = try! plain.encrypt(ChaCha20(key: key, iv: iv))&#xA;let decrypted = try! encrypted.decrypt(ChaCha20(key: key, iv: iv))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;AES-GCM&lt;/h5&gt; &#xA;&lt;p&gt;The result of Galois/Counter Mode (GCM) encryption is ciphertext and &lt;strong&gt;authentication tag&lt;/strong&gt;, that is later used to decryption.&lt;/p&gt; &#xA;&lt;p&gt;encryption&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    // In combined mode, the authentication tag is directly appended to the encrypted message. This is usually what you want.&#xA;    let gcm = GCM(iv: iv, mode: .combined)&#xA;    let aes = try AES(key: key, blockMode: gcm, padding: .noPadding)&#xA;    let encrypted = try aes.encrypt(plaintext)&#xA;    let tag = gcm.authenticationTag&#xA;} catch {&#xA;    // failed&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;decryption&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    // In combined mode, the authentication tag is appended to the encrypted message. This is usually what you want.&#xA;    let gcm = GCM(iv: iv, mode: .combined)&#xA;    let aes = try AES(key: key, blockMode: gcm, padding: .noPadding)&#xA;    return try aes.decrypt(encrypted)&#xA;} catch {&#xA;    // failed&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: GCM instance is not intended to be reused. So you can&#39;t use the same &lt;code&gt;GCM&lt;/code&gt; instance from encoding to also perform decoding.&lt;/p&gt; &#xA;&lt;h5&gt;AES-CCM&lt;/h5&gt; &#xA;&lt;p&gt;The result of Counter with Cipher Block Chaining-Message Authentication Code encryption is ciphertext and &lt;strong&gt;authentication tag&lt;/strong&gt;, that is later used to decryption.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    // The authentication tag is appended to the encrypted message.&#xA;&#x9;let tagLength = 8&#xA;&#x9;let ccm = CCM(iv: iv, tagLength: tagLength, messageLength: ciphertext.count - tagLength, additionalAuthenticatedData: data)&#xA;    let aes = try AES(key: key, blockMode: ccm, padding: .noPadding)&#xA;    return try aes.decrypt(encrypted)&#xA;} catch {&#xA;    // failed&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check documentation or CCM specification for valid parameters for CCM.&lt;/p&gt; &#xA;&lt;h5&gt;AEAD&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encrypt = try AEADChaCha20Poly1305.encrypt(plaintext, key: key, iv: nonce, authenticationHeader: header)&#xA;let decrypt = try AEADChaCha20Poly1305.decrypt(ciphertext, key: key, iv: nonce, authenticationHeader: header, authenticationTag: tagArr: tag)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;RSA&lt;/h5&gt; &#xA;&lt;p&gt;RSA initialization from parameters&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let input: Array&amp;lt;UInt8&amp;gt; = [0,1,2,3,4,5,6,7,8,9]&#xA;&#xA;let n: Array&amp;lt;UInt8&amp;gt; = // RSA modulus&#xA;let e: Array&amp;lt;UInt8&amp;gt; = // RSA public exponent&#xA;let d: Array&amp;lt;UInt8&amp;gt; = // RSA private exponent&#xA;&#xA;let rsa = RSA(n: n, e: e, d: d)&#xA;&#xA;do {&#xA;    let encrypted = try rsa.encrypt(input)&#xA;    let decrypted = try rsa.decrypt(encrypted)&#xA;} catch {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSA key generation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rsa = RSA(keySize: 2048) // This generates a modulus, public exponent and private exponent with the given size&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;CryptoSwift is owned and maintained by &lt;a href=&#34;http://www.krzyzanowskim.com&#34;&gt;Marcin Krzyżanowski&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can follow me on Twitter at &lt;a href=&#34;http://twitter.com/krzyzanowskim&#34;&gt;@krzyzanowskim&lt;/a&gt; for project updates and releases.&lt;/p&gt; &#xA;&lt;h1&gt;Cryptography Notice&lt;/h1&gt; &#xA;&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country&#39;s laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href=&#34;http://www.wassenaar.org/&#34;&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2014-2021 Marcin Krzyżanowski &lt;a href=&#34;mailto:marcin@krzyzanowskim.com&#34;&gt;marcin@krzyzanowskim.com&lt;/a&gt; This software is provided &#39;as-is&#39;, without any express or implied warranty.&lt;/p&gt; &#xA;&lt;p&gt;In no event will the authors be held liable for any damages arising from the use of this software.&lt;/p&gt; &#xA;&lt;p&gt;Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, &lt;strong&gt;an acknowledgment in the product documentation is required&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.&lt;/li&gt; &#xA; &lt;li&gt;This notice may not be removed or altered from any source or binary distribution.&lt;/li&gt; &#xA; &lt;li&gt;Redistributions of any form whatsoever must retain the following acknowledgment: &#39;This product includes software developed by the &#34;Marcin Krzyzanowski&#34; (&lt;a href=&#34;http://krzyzanowskim.com/&#34;&gt;http://krzyzanowskim.com/&lt;/a&gt;).&#39;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/CHANGELOG&#34;&gt;CHANGELOG&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws-amplify/amplify-ios</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/aws-amplify/amplify-ios</id>
    <link href="https://github.com/aws-amplify/amplify-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A declarative library for application development using cloud services.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Amplify for iOS&lt;/h2&gt; &#xA;&lt;img src=&#34;https://s3.amazonaws.com/aws-mobile-hub-images/aws-amplify-logo.png&#34; alt=&#34;AWS Amplify&#34; width=&#34;550&#34;&gt; AWS Amplify provides a declarative and easy-to-use interface across different categories of cloud operations. AWS Amplify goes well with any JavaScript based frontend workflow, and React Native for mobile developers. &#xA;&lt;p&gt;Our default implementation works with Amazon Web Services (AWS), but AWS Amplify is designed to be open and pluggable for any custom backend or service.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Documentation&lt;/strong&gt; &lt;a href=&#34;https://docs.amplify.aws/start/q/integration/ios&#34;&gt;https://docs.amplify.aws/start/q/integration/ios&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/Amplify&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Amplify&#34; alt=&#34;Cocoapods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/aws-amplify/amplify-ios&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/aws-amplify/amplify-ios.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/jWVbPfC&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/308323056592486420?logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features/APIs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/analytics/getting-started/q/platform/ios&#34;&gt;Analytics&lt;/a&gt; - for logging metrics and understanding your users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/ios&#34;&gt;API (GraphQL)&lt;/a&gt; - for adding a GraphQL endpoint to your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/restapi/getting-started/q/platform/ios&#34;&gt;API (REST)&lt;/a&gt; - for adding a REST endpoint to your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/auth/getting-started/q/platform/ios&#34;&gt;Authentication&lt;/a&gt; - for managing your users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/datastore/getting-started/q/platform/ios&#34;&gt;DataStore&lt;/a&gt; - for making it easier to program for a distributed data store for offline and online scenarios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/geo/getting-started/q/platform/ios&#34;&gt;Geo&lt;/a&gt; - for adding location-based capabilities to your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/predictions/getting-started/q/platform/ios&#34;&gt;Predictions&lt;/a&gt; - to detect text, images, and more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/storage/getting-started/q/platform/ios&#34;&gt;Storage&lt;/a&gt; - store complex objects like pictures and videos to the cloud.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All services and features not listed above are supported via the &lt;a href=&#34;https://docs.amplify.aws/sdk/q/platform/ios&#34;&gt;iOS SDK&lt;/a&gt; or if supported by a category can be accessed via the Escape Hatch like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let predictionsPlugin = try Amplify.Predictions.getPlugin(for: &#34;awsPredictionsPlugin&#34;) as? AWSPredictionsPlugin else {&#xA;    print(&#34;Unable to cast to AWSPredictionsPlugin&#34;)&#xA;    return&#xA;}&#xA;&#xA;guard let rekognitionService = predictionsPlugin.getEscapeHatch(key: .rekognition) as? AWSRekognition else {&#xA;    print(&#34;Unable to get AWSRekognition&#34;)&#xA;    return&#xA;}&#xA;&#xA;let request = AWSRekognitionCreateCollectionRequest()&#xA;if let request = request {&#xA;    rekognitionService.createCollection(request)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Platform Support&lt;/h2&gt; &#xA;&lt;p&gt;Amplify supports iOS 11 and above and iOS 13 for certain categories such as Predictions and Geo. There are currently no plans to support Amplify on WatchOS, tvOS, or MacOS.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is licensed under the Apache 2.0 License.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Amplify requires Xcode 12 or higher to build.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;For more detailed instructions, follow the getting started guides in our &lt;a href=&#34;https://docs.amplify.aws/lib/q/platform/ios&#34;&gt;documentation site&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Swift Package Manager is distributed with Xcode. To start adding the Amplify Libraries to your iOS project, open your project in Xcode and select &lt;strong&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/amplify-ios/main/readme-images/spm-setup-01-add-package-dependency.png&#34; alt=&#34;Add package dependency&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the Amplify iOS GitHub repo URL (&lt;code&gt;https://github.com/aws-amplify/amplify-ios&lt;/code&gt;) into the search bar and click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/amplify-ios/main/readme-images/spm-setup-02-search-amplify-repo.png&#34; alt=&#34;Search for repo&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You&#39;ll see the Amplify iOS repository rules for which version of Amplify you want Swift Package Manager to install. Choose the first rule, &lt;strong&gt;Version&lt;/strong&gt;, as it will use the latest compatible version of the dependency that can be detected from the &lt;code&gt;main&lt;/code&gt; branch, then click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/amplify-ios/main/readme-images/spm-setup-03-dependency-version-options.png&#34; alt=&#34;Dependency version options&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose which of the libraries you want added to your project. Always select the &lt;strong&gt;Amplify&lt;/strong&gt; library. The &#34;Plugin&#34; to install depends on which categories you are using:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;API: &lt;strong&gt;AWSAPIPlugin&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Analytics: &lt;strong&gt;AWSPinpointAnalyticsPlugin&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Auth: &lt;strong&gt;AWSCognitoAuthPlugin&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;DataStore: &lt;strong&gt;AWSDataStorePlugin&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Storage: &lt;strong&gt;AWSS3StoragePlugin&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note: AWSPredictionsPlugin is not currently supported through Swift Package Manager due to different minimum iOS version requirements. Support for this will eventually be added.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/amplify-ios/main/readme-images/spm-setup-04-select-dependencies.png&#34; alt=&#34;Select dependencies&#34;&gt;&lt;/p&gt; &lt;p&gt;Select all that are appropriate, then click &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;You can always go back and modify which SPM packages are included in your project by opening the Swift Packages tab for your project: Click on the Project file in the Xcode navigator, then click on your project&#39;s icon, then select the &lt;strong&gt;Swift Packages&lt;/strong&gt; tab.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your app code, explicitly import a plugin when you need to add a plugin to Amplify, access plugin options, or access a category escape hatch.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Amplify&#xA;import AWSAPIPlugin&#xA;import AWSDataStorePlugin&#xA;&#xA;// ... later&#xA;&#xA;func initializeAmplify() {&#xA;    do {&#xA;        try Amplify.add(AWSAPIPlugin())&#xA;        // and so on ...&#xA;    } catch {&#xA;        assert(false, &#34;Error initializing Amplify: \(error)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;re just accessing Amplify category APIs (e.g., &lt;code&gt;Auth.signIn()&lt;/code&gt; or &lt;code&gt;Storage.uploadFile()&lt;/code&gt;), you only need to import Amplify:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Amplify&#xA;&#xA;// ... later&#xA;&#xA;func doUpload() {&#xA;    Amplify.Storage.uploadFile(...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Amplify for iOS is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. If you have not installed CocoaPods, install CocoaPods by running the command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ gem install cocoapods&#xA;$ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Depending on your system settings, you may have to use &lt;code&gt;sudo&lt;/code&gt; for installing &lt;code&gt;cocoapods&lt;/code&gt; as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ sudo gem install cocoapods&#xA;$ pod setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your project directory (the directory where your &lt;code&gt;*.xcodeproj&lt;/code&gt; file is), type &lt;code&gt;pod init&lt;/code&gt; and open the Podfile that was created. Add the &lt;code&gt;Amplify&lt;/code&gt; pod and any plugins you would like to use. Below is an example of what a podfile might look like if you were going to use the Predictions plugin.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;&#xA;platform :ios, &#39;13.0&#39;&#xA;use_frameworks!&#xA;&#xA;target :&#39;YourTarget&#39; do&#xA;    pod &#39;Amplify&#39;&#xA;    pod &#39;AmplifyPlugins/AWSCognitoAuthPlugin&#39;&#xA;    pod &#39;AWSPredictionsPlugin&#39;&#xA;    pod &#39;CoreMLPredictionsPlugin&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up &lt;code&gt;*.xcworkspace&lt;/code&gt; with Xcode and start using Amplify.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aws-amplify/amplify-ios/main/readme-images/cocoapods-setup-02.png?raw=true&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Do &lt;strong&gt;NOT&lt;/strong&gt; use &lt;code&gt;*.xcodeproj&lt;/code&gt;. If you open up a project file instead of a workspace, you will receive an error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your app code, import &lt;code&gt;AmplifyPlugins&lt;/code&gt; when you need to add a plugin to Amplify, access plugin options, or access a category escape hatch.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Amplify&#xA;import AmplifyPlugins&#xA;&#xA;// ... later&#xA;&#xA;func initializeAmplify() {&#xA;    do {&#xA;        try Amplify.add(AWSAPIPlugin())&#xA;        // and so on ...&#xA;    } catch {&#xA;        assert(false, &#34;Error initializing Amplify: \(error)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;re just accessing Amplify category APIs (e.g., &lt;code&gt;Auth.signIn()&lt;/code&gt; or &lt;code&gt;Storage.uploadFile()&lt;/code&gt;), you only need to import Amplify:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Amplify&#xA;&#xA;// ... later&#xA;&#xA;func doUpload() {&#xA;    Amplify.Storage.uploadFile(...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Development Pods&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can manually install the library by cloning this repo and creating a Podfile that references your local clone of it like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Amplify&#39;, :path =&amp;gt; &#39;~/amplify-ios&#39;&#xA;pod &#39;AWSPluginsCore&#39;, :path =&amp;gt; &#39;~/amplify-ios&#39;&#xA;pod &#39;CoreMLPredictionsPlugin&#39;, :path =&amp;gt; &#39;~/amplify-ios&#39;&#xA;pod &#39;AWSPredictionsPlugin&#39;, :path =&amp;gt; &#39;~/amplify-ios&#39;&#xA;pod &#39;AmplifyPlugins/AWSAPIPlugin&#39;, :path =&amp;gt; &#39;~/amplify-ios&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open your project using ./YOUR-PROJECT-NAME.xcworkspace file. Remember to always use ./YOUR-PROJECT-NAME.xcworkspace to open your Xcode project from now on.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Bugs/Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-ios/issues?q=is%3Aissue+is%3Aopen+label%3Abug&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/aws-amplify/amplify-ios/bug?color=d73a4a&amp;amp;label=bugs&#34; alt=&#34;Open Bugs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aws-amplify/amplify-ios/issues?q=is%3Aissue+label%3A%22usage+question%22+is%3Aopen&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/aws-amplify/amplify-ios/usage%20question?color=558dfd&amp;amp;label=questions&#34; alt=&#34;Open Questions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aws-amplify/amplify-ios/issues?q=is%3Aissue+label%3A%22feature+request%22+is%3Aopen+&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/aws-amplify/amplify-ios/feature%20request?color=ff9001&amp;amp;label=feature%20requests&#34; alt=&#34;Feature Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aws-amplify/amplify-ios/issues?q=is%3Aissue+is%3Aclosed+&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed/aws-amplify/amplify-ios?color=%2325CC00&#34; alt=&#34;Closed Issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We welcome you to use the GitHub issue tracker to report bugs or suggest features.&lt;/p&gt; &#xA;&lt;p&gt;When filing an issue, please check &lt;a href=&#34;https://github.com/aws-amplify/amplify-ios/issues&#34;&gt;existing open&lt;/a&gt;, or &lt;a href=&#34;https://github.com/aws-amplify/amplify-ios/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue%20is%3Aclosed%20&#34;&gt;recently closed&lt;/a&gt;, issues to make sure somebody else hasn&#39;t already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expected behavior and observed behavior&lt;/li&gt; &#xA; &lt;li&gt;A reproducible test case or series of steps&lt;/li&gt; &#xA; &lt;li&gt;The version of our code being used&lt;/li&gt; &#xA; &lt;li&gt;Any modifications you&#39;ve made relevant to the bug&lt;/li&gt; &#xA; &lt;li&gt;Anything custom about your environment or deployment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Open Source Contributions&lt;/h2&gt; &#xA;&lt;p&gt;We welcome any and all contributions from the community! Make sure you read through our contribution guide &lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/amplify-ios/main/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt; before submitting any PR&#39;s. Thanks! ♥️&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Moya/Moya</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/Moya/Moya</id>
    <link href="https://github.com/Moya/Moya" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Network abstraction layer written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;160&#34; src=&#34;https://raw.githubusercontent.com/Moya/Moya/master/web/logo_github.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Moya 15.0.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/Moya/Moya/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/Moya/Moya/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/Moya/Moya?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/Moya/Moya/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Moya&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Moya.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A Chinese version of this document can be found &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Readme_CN.md&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re a smart developer. You probably use &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; to abstract away access to &lt;code&gt;URLSession&lt;/code&gt; and all those nasty details you don&#39;t really care about. But then, like lots of smart developers, you write ad hoc network abstraction layers. They are probably called &#34;APIManager&#34; or &#34;NetworkModel&#34;, and they always end in tears.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Moya/Moya/master/web/diagram.png&#34; alt=&#34;Moya Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ad hoc network layers are common in iOS apps. They&#39;re bad for a few reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Makes it hard to write new apps (&#34;where do I begin?&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Makes it hard to maintain existing apps (&#34;oh my god, this mess...&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Makes it hard to write unit tests (&#34;how do I do this again?&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So the basic idea of Moya is that we want some network abstraction layer that sufficiently encapsulates actually calling Alamofire directly. It should be simple enough that common things are easy, but comprehensive enough that complicated things are also easy.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you use Alamofire to abstract away &lt;code&gt;URLSession&lt;/code&gt;, why not use something to abstract away the nitty gritty of URLs, parameters, etc?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some awesome features of Moya:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile-time checking for correct API endpoint accesses.&lt;/li&gt; &#xA; &lt;li&gt;Lets you define a clear usage of different endpoints with associated enum values.&lt;/li&gt; &#xA; &lt;li&gt;Treats test stubs as first-class citizens so unit testing is super-easy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can check out more about the project direction in the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Vision.md&#34;&gt;vision document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Projects&lt;/h2&gt; &#xA;&lt;p&gt;We have provided two sample projects in the repository. To use it download the repo, run &lt;code&gt;carthage update&lt;/code&gt; to download the required libraries and open &lt;a href=&#34;https://github.com/Moya/Moya/tree/master/Moya.xcodeproj&#34;&gt;Moya.xcodeproj&lt;/a&gt;. You&#39;ll see two schemes: &lt;code&gt;Basic&lt;/code&gt; and &lt;code&gt;Multi-Target&lt;/code&gt; - select one and then build &amp;amp; run! Source files for these are in the &lt;code&gt;Examples&lt;/code&gt; directory in project navigator. Have fun!&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is actively under development, and is being used in &lt;a href=&#34;https://github.com/Artsy/eidolon&#34;&gt;Artsy&#39;s auction app&lt;/a&gt;. We consider it ready for production use.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Moya version vs Swift version.&lt;/h3&gt; &#xA;&lt;p&gt;Below is a table that shows which version of Moya you should use for your Swift version.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Moya&lt;/th&gt; &#xA;   &lt;th&gt;RxMoya&lt;/th&gt; &#xA;   &lt;th&gt;ReactiveMoya&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.X&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.X&lt;/td&gt; &#xA;   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;10.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.X&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.3&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.2&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: If you are using Swift 4.2 in your project, but you are using Xcode 10.2, Moya 13 should work correctly even though we use Swift 5.0.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Upgrading to a new major version of Moya? Check out our &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/MigrationGuides&#34;&gt;migration guides&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Instructions below are for using &lt;strong&gt;SwiftPM&lt;/strong&gt; without the Xcode UI. It&#39;s the easiest to go to your Project Settings -&amp;gt; Swift Packages and add Moya from there.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To integrate using Apple&#39;s Swift package manager, without Xcode integration, add the following as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/Moya/Moya.git&#34;, .upToNextMajor(from: &#34;15.0.0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then specify &lt;code&gt;&#34;Moya&#34;&lt;/code&gt; as a dependency of the Target in which you wish to use Moya. If you want to use reactive extensions, add also &lt;code&gt;&#34;ReactiveMoya&#34;&lt;/code&gt;, &lt;code&gt;&#34;RxMoya&#34;&lt;/code&gt; or &lt;code&gt;&#34;CombineMoya&#34;&lt;/code&gt; as your target dependency respectively. Here&#39;s an example &lt;code&gt;PackageDescription&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.3&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyPackage&#34;,&#xA;    products: [&#xA;        .library(&#xA;            name: &#34;MyPackage&#34;,&#xA;            targets: [&#34;MyPackage&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/Moya/Moya.git&#34;, .upToNextMajor(from: &#34;15.0.0&#34;))&#xA;    ],&#xA;    targets: [&#xA;        .target(&#xA;            name: &#34;MyPackage&#34;,&#xA;            dependencies: [&#34;ReactiveMoya&#34;])&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Combine note: if you&#39;re using &lt;strong&gt;CombineMoya&lt;/strong&gt;, make sure that you use Xcode 11.5.0 or later. With earlier versions of Xcode you will have to manually add Combine as a weakly linked framework to your application target.&lt;/p&gt; &#xA;&lt;h3&gt;Accio&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;Accio&lt;/a&gt; is a dependency manager based on SwiftPM which can build frameworks for iOS/macOS/tvOS/watchOS. Therefore the integration steps of Moya are exactly the same as described above. Once your &lt;code&gt;Package.swift&lt;/code&gt; file is configured, run &lt;code&gt;accio update&lt;/code&gt; instead of &lt;code&gt;swift package update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;For Moya, use the following entry in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;pod &#39;Moya&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or &#xA;&#xA;pod &#39;Moya/RxSwift&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or&#xA;&#xA;pod &#39;Moya/ReactiveSwift&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or&#xA;&#xA;pod &#39;Moya/Combine&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In any file you&#39;d like to use Moya in, don&#39;t forget to import the framework with &lt;code&gt;import Moya&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Carthage users can point to this repository and use whichever generated framework they&#39;d like, &lt;code&gt;Moya&lt;/code&gt;, &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;ReactiveMoya&lt;/code&gt;, or &lt;code&gt;CombineMoya&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make the following entry in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Moya/Moya&#34; ~&amp;gt; 15.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: At this time, Carthage does not provide a way to build only specific repository submodules. All submodules and their dependencies will be built with the above command. However, you don&#39;t need to copy frameworks you aren&#39;t using into your project. For instance, if you aren&#39;t using &lt;code&gt;ReactiveSwift&lt;/code&gt;, feel free to delete that framework along with &lt;code&gt;ReactiveMoya&lt;/code&gt; from the Carthage Build directory after &lt;code&gt;carthage update&lt;/code&gt; completes. Or if you are using &lt;code&gt;ReactiveSwift&lt;/code&gt; but not &lt;code&gt;RxSwift&lt;/code&gt; or &lt;code&gt;Combine&lt;/code&gt;, then &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;RxTest&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt;, &lt;code&gt;CombineMoya&lt;/code&gt; etc. can safely be deleted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &lt;em&gt;if&lt;/em&gt; your project is not initialized as a git repository:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Alamofire &amp;amp; Moya as a git &lt;a href=&#34;http://git-scm.com/docs/git-submodule&#34;&gt;submodule&lt;/a&gt; by running the following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git&#xA;$ git submodule add https://github.com/Moya/Moya.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project. Do the same with the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; in the &lt;code&gt;Moya&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;They should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify that the deployment targets of the &lt;code&gt;xcodeproj&lt;/code&gt;s match that of your application target in the Project Navigator.&lt;/li&gt; &#xA; &lt;li&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &#34;Targets&#34; heading in the sidebar.&lt;/li&gt; &#xA; &lt;li&gt;In the tab bar at the top of that window, open the &#34;General&#34; panel.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &#34;Embedded Binaries&#34; section.&lt;/li&gt; &#xA; &lt;li&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as either &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt; or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under &#34;Embedded Binaries&#34; again and add the correct build target for &lt;code&gt;Moya&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The three frameworks are automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/Examples/Basic.md&#34;&gt;some setup&lt;/a&gt;, using Moya is really simple. You can access an API like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.request(.zen) { result in&#xA;    switch result {&#xA;    case let .success(moyaResponse):&#xA;        let data = moyaResponse.data&#xA;        let statusCode = moyaResponse.statusCode&#xA;        // do something with the response data or statusCode&#xA;    case let .failure(error):&#xA;        // this means there was a network failure - either the request&#xA;        // wasn&#39;t sent (connectivity), or no response was received (server&#xA;        // timed out).  If the server responds with a 4xx or 5xx error, that&#xA;        // will be sent as a &#34;.success&#34;-ful response.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s a basic example. Many API requests need parameters. Moya encodes these into the enum you use to access the endpoint, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.request(.userProfile(&#34;ashfurrow&#34;)) { result in&#xA;    // do something with the result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No more typos in URLs. No more missing parameter values. No more messing with parameter encoding.&lt;/p&gt; &#xA;&lt;p&gt;For more examples, see the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/Examples&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reactive Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Even cooler are the reactive extensions. Moya provides reactive extensions for &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift&#34;&gt;ReactiveSwift&lt;/a&gt;, &lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt;, and &lt;a href=&#34;https://developer.apple.com/documentation/combine&#34;&gt;Combine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ReactiveSwift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/ReactiveSwift.md&#34;&gt;&lt;code&gt;ReactiveSwift&lt;/code&gt; extension&lt;/a&gt; provides both &lt;code&gt;reactive.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;reactive.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods that immediately return &lt;code&gt;SignalProducer&lt;/code&gt;s that you can start, bind, map, or whatever you want to do. To handle errors, for instance, we could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.reactive.request(.userProfile(&#34;ashfurrow&#34;)).start { event in&#xA;    switch event {&#xA;    case let .value(response):&#xA;        image = UIImage(data: response.data)&#xA;    case let .failed(error):&#xA;        print(error)&#xA;    default:&#xA;        break&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RxSwift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/RxSwift.md&#34;&gt;&lt;code&gt;RxSwift&lt;/code&gt; extension&lt;/a&gt; also provide both &lt;code&gt;rx.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods, but return type is different for both. In case of a normal &lt;code&gt;rx.request(:callbackQueue)&lt;/code&gt;, the return type is &lt;code&gt;Single&amp;lt;Response&amp;gt;&lt;/code&gt; which emits either single element or an error. In case of a &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt;, the return type is &lt;code&gt;Observable&amp;lt;ProgressResponse&amp;gt;&lt;/code&gt;, since we may get multiple events from progress and one last event which is a response.&lt;/p&gt; &#xA;&lt;p&gt;To handle errors, for instance, we could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.rx.request(.userProfile(&#34;ashfurrow&#34;)).subscribe { event in&#xA;    switch event {&#xA;    case let .success(response):&#xA;        image = UIImage(data: response.data)&#xA;    case let .error(error):&#xA;        print(error)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to the option of using signals instead of callback blocks, there are also a series of signal operators for RxSwift and ReactiveSwift that will attempt to map the data received from the network response into either an image, some JSON, or a string, with &lt;code&gt;mapImage()&lt;/code&gt;, &lt;code&gt;mapJSON()&lt;/code&gt;, and &lt;code&gt;mapString()&lt;/code&gt;, respectively. If the mapping is unsuccessful, you&#39;ll get an error on the signal. You also get handy methods for filtering out certain status codes. This means that you can place your code for handling API errors like 400&#39;s in the same places as code for handling invalid responses.&lt;/p&gt; &#xA;&lt;h3&gt;Combine&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Combine&lt;/code&gt; extension provides &lt;code&gt;requestPublisher(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;requestWithProgressPublisher(:callbackQueue)&lt;/code&gt; returning &lt;code&gt;AnyPublisher&amp;lt;Response, MoyaError&amp;gt;&lt;/code&gt; and &lt;code&gt;AnyPublisher&amp;lt;ProgressResponse, MoyaError&amp;gt;&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of &lt;code&gt;requestPublisher&lt;/code&gt; usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;let cancellable = provider.requestPublisher(.userProfile(&#34;ashfurrow&#34;))&#xA;    .sink(receiveCompletion: { completion in&#xA;        guard case let .failure(error) = completion else { return }&#xA;&#xA;        print(error)&#xA;    }, receiveValue: { response in&#xA;        image = UIImage(data: response.data)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community Projects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/CommunityProjects.md&#34;&gt;Moya has a great community around it and some people have created some very helpful extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Hey! Do you like Moya? Awesome! We could actually really use your help!&lt;/p&gt; &#xA;&lt;p&gt;Open source isn&#39;t just writing code. Moya could use your help with any of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finding (and reporting!) bugs.&lt;/li&gt; &#xA; &lt;li&gt;New feature suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Answering questions on issues.&lt;/li&gt; &#xA; &lt;li&gt;Documentation improvements.&lt;/li&gt; &#xA; &lt;li&gt;Reviewing pull requests.&lt;/li&gt; &#xA; &lt;li&gt;Helping to manage issue priorities.&lt;/li&gt; &#xA; &lt;li&gt;Fixing bugs/new features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If any of that sounds cool to you, send a pull request! After your first contribution, we will add you as a member to the repo so you can merge pull requests and help steer the ship &lt;span&gt;🚢&lt;/span&gt; You can read more details about that &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Contributing.md&#34;&gt;in our contributor guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Moya&#39;s community has a tremendous positive energy, and the maintainers are committed to keeping things awesome. Like &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/wiki/Communication-&amp;amp;-Design-Rules&#34;&gt;in the CocoaPods community&lt;/a&gt;, always assume positive intent. Even if a comment sounds mean-spirited, give the person the benefit of the doubt.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Code%20of%20Conduct.md&#34;&gt;its terms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new source files&lt;/h3&gt; &#xA;&lt;p&gt;If you add or remove a source file from Moya, a corresponding change needs to be made to the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; project at the root of this repository. This project is used for Carthage. Don&#39;t worry, you&#39;ll get an automated warning when submitting a pull request if you forget.&lt;/p&gt; &#xA;&lt;h3&gt;Help us improve Moya documentation&lt;/h3&gt; &#xA;&lt;p&gt;Whether you’re a core member or a user trying it out for the first time, you can make a valuable contribution to Moya by improving the documentation. Help us by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending us feedback about something you thought was confusing or simply missing.&lt;/li&gt; &#xA; &lt;li&gt;Suggesting better wording or ways of explaining certain topics.&lt;/li&gt; &#xA; &lt;li&gt;Sending us a pull request via GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Improving the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Readme_CN.md&#34;&gt;Chinese documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Moya is released under an MIT license. See &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/License.md&#34;&gt;License.md&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>daltoniam/Starscream</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/daltoniam/Starscream</id>
    <link href="https://github.com/daltoniam/Starscream" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Websockets in swift for iOS and OSX&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/daltoniam/starscream/assets/starscream.jpg&#34; alt=&#34;starscream&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Starscream is a conforming WebSocket (&lt;a href=&#34;http://tools.ietf.org/html/rfc6455&#34;&gt;RFC 6455&lt;/a&gt;) library in Swift.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Conforms to all of the base &lt;a href=&#34;https://crossbar.io/autobahn/&#34;&gt;Autobahn test suite&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Nonblocking. Everything happens in the background, thanks to GCD.&lt;/li&gt; &#xA; &lt;li&gt;TLS/WSS support.&lt;/li&gt; &#xA; &lt;li&gt;Compression Extensions support (&lt;a href=&#34;https://tools.ietf.org/html/rfc7692&#34;&gt;RFC 7692&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Import the framework&lt;/h3&gt; &#xA;&lt;p&gt;First thing is to import the framework. See the Installation instructions on how to add the framework to your project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Starscream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connect to the WebSocket Server&lt;/h3&gt; &#xA;&lt;p&gt;Once imported, you can open a connection to your WebSocket server. Note that &lt;code&gt;socket&lt;/code&gt; is probably best as a property, so it doesn&#39;t get deallocated right after being setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var request = URLRequest(url: URL(string: &#34;http://localhost:8080&#34;)!)&#xA;request.timeoutInterval = 5&#xA;socket = WebSocket(request: request)&#xA;socket.delegate = self&#xA;socket.connect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you are connected, there is either a delegate or closure you can use for process WebSocket events.&lt;/p&gt; &#xA;&lt;h3&gt;Receiving data from a WebSocket&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;didReceive&lt;/code&gt; receives all the WebSocket events in a single easy to handle enum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func didReceive(event: WebSocketEvent, client: WebSocket) {&#xA;&#x9;switch event {&#xA;&#x9;case .connected(let headers):&#xA;&#x9;&#x9;isConnected = true&#xA;&#x9;&#x9;print(&#34;websocket is connected: \(headers)&#34;)&#xA;&#x9;case .disconnected(let reason, let code):&#xA;&#x9;&#x9;isConnected = false&#xA;&#x9;&#x9;print(&#34;websocket is disconnected: \(reason) with code: \(code)&#34;)&#xA;&#x9;case .text(let string):&#xA;&#x9;&#x9;print(&#34;Received text: \(string)&#34;)&#xA;&#x9;case .binary(let data):&#xA;&#x9;&#x9;print(&#34;Received data: \(data.count)&#34;)&#xA;&#x9;case .ping(_):&#xA;&#x9;&#x9;break&#xA;&#x9;case .pong(_):&#xA;&#x9;&#x9;break&#xA;&#x9;case .viabilityChanged(_):&#xA;&#x9;&#x9;break&#xA;&#x9;case .reconnectSuggested(_):&#xA;&#x9;&#x9;break&#xA;&#x9;case .cancelled:&#xA;&#x9;&#x9;isConnected = false&#xA;&#x9;case .error(let error):&#xA;&#x9;&#x9;isConnected = false&#xA;&#x9;&#x9;handleError(error)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The closure of this would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.onEvent = { event in&#xA;&#x9;switch event {&#xA;&#x9;&#x9;// handle events just like above...&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Writing to a WebSocket&lt;/h3&gt; &#xA;&lt;h3&gt;write a binary frame&lt;/h3&gt; &#xA;&lt;p&gt;The writeData method gives you a simple way to send &lt;code&gt;Data&lt;/code&gt; (binary) data to the server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.write(data: data) //write some Data over the socket!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;write a string frame&lt;/h3&gt; &#xA;&lt;p&gt;The writeString method is the same as writeData, but sends text/string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.write(string: &#34;Hi Server!&#34;) //example on how to write text over the socket!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;write a ping frame&lt;/h3&gt; &#xA;&lt;p&gt;The writePing method is the same as write, but sends a ping control frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.write(ping: Data()) //example on how to write a ping control frame over the socket!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;write a pong frame&lt;/h3&gt; &#xA;&lt;p&gt;the writePong method is the same as writePing, but sends a pong control frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.write(pong: Data()) //example on how to write a pong control frame over the socket!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starscream will automatically respond to incoming &lt;code&gt;ping&lt;/code&gt; control frames so you do not need to manually send &lt;code&gt;pong&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;p&gt;However if for some reason you need to control this process you can turn off the automatic &lt;code&gt;ping&lt;/code&gt; response by disabling &lt;code&gt;respondToPingWithPong&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.respondToPingWithPong = false //Do not automaticaly respond to incoming pings with pongs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In most cases you will not need to do this.&lt;/p&gt; &#xA;&lt;h3&gt;disconnect&lt;/h3&gt; &#xA;&lt;p&gt;The disconnect method does what you would expect and closes the socket.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.disconnect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The disconnect method can also send a custom close code if desired.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.disconnect(closeCode: CloseCode.normal.rawValue)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Headers, Protocols and Timeout&lt;/h3&gt; &#xA;&lt;p&gt;You can override the default websocket headers, add your own custom ones and set a timeout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var request = URLRequest(url: URL(string: &#34;ws://localhost:8080/&#34;)!)&#xA;request.timeoutInterval = 5 // Sets the timeout for the connection&#xA;request.setValue(&#34;someother protocols&#34;, forHTTPHeaderField: &#34;Sec-WebSocket-Protocol&#34;)&#xA;request.setValue(&#34;14&#34;, forHTTPHeaderField: &#34;Sec-WebSocket-Version&#34;)&#xA;request.setValue(&#34;chat,superchat&#34;, forHTTPHeaderField: &#34;Sec-WebSocket-Protocol&#34;)&#xA;request.setValue(&#34;Everything is Awesome!&#34;, forHTTPHeaderField: &#34;My-Awesome-Header&#34;)&#xA;let socket = WebSocket(request: request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSL Pinning&lt;/h3&gt; &#xA;&lt;p&gt;SSL Pinning is also supported in Starscream.&lt;/p&gt; &#xA;&lt;p&gt;Allow Self-signed certificates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var request = URLRequest(url: URL(string: &#34;ws://localhost:8080/&#34;)!)&#xA;let pinner = FoundationSecurity(allowSelfSigned: true) // don&#39;t validate SSL certificates&#xA;let socket = WebSocket(request: request, certPinner: pinner)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TODO: Update docs on how to load certificates and public keys into an app bundle, use the builtin pinner and TrustKit.&lt;/p&gt; &#xA;&lt;h3&gt;Compression Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Compression Extensions (&lt;a href=&#34;https://tools.ietf.org/html/rfc7692&#34;&gt;RFC 7692&lt;/a&gt;) is supported in Starscream. Compression is enabled by default, however compression will only be used if it is supported by the server as well. You may enable compression by adding a &lt;code&gt;compressionHandler&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var request = URLRequest(url: URL(string: &#34;ws://localhost:8080/&#34;)!)&#xA;let compression = WSCompression()&#xA;let socket = WebSocket(request: request, compressionHandler: compression)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compression should be disabled if your application is transmitting already-compressed, random, or other uncompressable data.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Queue&lt;/h3&gt; &#xA;&lt;p&gt;A custom queue can be specified when delegate methods are called. By default &lt;code&gt;DispatchQueue.main&lt;/code&gt; is used, thus making all delegate methods calls run on the main thread. It is important to note that all WebSocket processing is done on a background thread, only the delegate method calls are changed when modifying the queue. The actual processing is always on a background thread and will not pause your app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket = WebSocket(url: URL(string: &#34;ws://localhost:8080/&#34;)!, protocols: [&#34;chat&#34;,&#34;superchat&#34;])&#xA;//create a custom queue&#xA;socket.callbackQueue = DispatchQueue(label: &#34;com.vluxe.starscream.myapp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Project&lt;/h2&gt; &#xA;&lt;p&gt;Check out the SimpleTest project in the examples directory to see how to setup a simple connection to a WebSocket server.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Starscream works with iOS 8/10.10 or above for CocoaPods/framework support. To use Starscream with a project targeting iOS 7, you must include all Swift files directly in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;http://cocoapods.org/&#34;&gt;Get Started&lt;/a&gt; tab on &lt;a href=&#34;http://cocoapods.org/&#34;&gt;cocoapods.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use Starscream in your project add the following &#39;Podfile&#39; to your project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;9.0&#39;&#xA;use_frameworks!&#xA;&#xA;pod &#39;Starscream&#39;, &#39;~&amp;gt; 4.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; docs on how to add a install. The &lt;code&gt;Starscream&lt;/code&gt; framework is already setup with shared schemes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;Carthage Install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate Starscream into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;daltoniam/Starscream&#34; &amp;gt;= 4.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accio&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;Accio&lt;/a&gt; docs on how to add a install.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your Package.swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/daltoniam/Starscream.git&#34;, .upToNextMajor(from: &#34;4.0.0&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add &lt;code&gt;Starscream&lt;/code&gt; to your App targets dependencies like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(&#xA;    name: &#34;App&#34;,&#xA;    dependencies: [&#xA;        &#34;Starscream&#34;,&#xA;    ]&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;accio update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rogue&lt;/h3&gt; &#xA;&lt;p&gt;First see the &lt;a href=&#34;https://github.com/acmacalister/Rogue&#34;&gt;installation docs&lt;/a&gt; for how to install Rogue.&lt;/p&gt; &#xA;&lt;p&gt;To install Starscream run the command below in the directory you created the rogue file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rogue add https://github.com/daltoniam/Starscream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next open the &lt;code&gt;libs&lt;/code&gt; folder and add the &lt;code&gt;Starscream.xcodeproj&lt;/code&gt; to your Xcode project. Once that is complete, in your &#34;Build Phases&#34; add the &lt;code&gt;Starscream.framework&lt;/code&gt; to your &#34;Link Binary with Libraries&#34; phase. Make sure to add the &lt;code&gt;libs&lt;/code&gt; folder to your &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding Starscream as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .Package(url: &#34;https://github.com/daltoniam/Starscream.git&#34;, majorVersion: 4)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;Simply grab the framework (either via git submodule or another package manager).&lt;/p&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;Starscream.xcodeproj&lt;/code&gt; to your Xcode project. Once that is complete, in your &#34;Build Phases&#34; add the &lt;code&gt;Starscream.framework&lt;/code&gt; to your &#34;Link Binary with Libraries&#34; phase.&lt;/p&gt; &#xA;&lt;h3&gt;Add Copy Frameworks Phase&lt;/h3&gt; &#xA;&lt;p&gt;If you are running this in an OSX app or on a physical iOS device you will need to make sure you add the &lt;code&gt;Starscream.framework&lt;/code&gt; to be included in your app bundle. To do this, in Xcode, navigate to the target configuration window by clicking on the blue project icon, and selecting the application target under the &#34;Targets&#34; heading in the sidebar. In the tab bar at the top of that window, open the &#34;Build Phases&#34; panel. Expand the &#34;Link Binary with Libraries&#34; group, and add &lt;code&gt;Starscream.framework&lt;/code&gt;. Click on the + button at the top left of the panel and select &#34;New Copy Files Phase&#34;. Rename this new phase to &#34;Copy Frameworks&#34;, set the &#34;Destination&#34; to &#34;Frameworks&#34;, and add &lt;code&gt;Starscream.framework&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;h2&gt;TODOs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Proxy support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Starscream is licensed under the Apache v2 License.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;h3&gt;Dalton Cherry&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daltoniam&#34;&gt;https://github.com/daltoniam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/daltoniam&#34;&gt;http://twitter.com/daltoniam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://daltoniam.com&#34;&gt;http://daltoniam.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Austin Cherry&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmacalister&#34;&gt;https://github.com/acmacalister&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/acmacalister&#34;&gt;http://twitter.com/acmacalister&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://austincherry.me&#34;&gt;http://austincherry.me&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SwiftyJSON/SwiftyJSON</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/SwiftyJSON/SwiftyJSON</id>
    <link href="https://github.com/SwiftyJSON/SwiftyJSON" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The better way to deal with JSON data in Swift.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftyJSON&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/SwiftyJSON.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%208.0%20%7C%20macOS%2010.10%20%7C%20tvOS%209.0%20%7C%20watchOS%203.0-F28D00.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SwiftyJSON makes it easy to deal with JSON data in Swift.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Build Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;*OS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://travis-ci.org/SwiftyJSON/SwiftyJSON&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SwiftyJSON/SwiftyJSON.svg?branch=master&#34; alt=&#34;Travis CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/IBM-Swift/SwiftyJSON&#34;&gt;Linux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://travis-ci.org/IBM-Swift/SwiftyJSON&#34;&gt;&lt;img src=&#34;https://travis-ci.org/IBM-Swift/SwiftyJSON.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#why-is-the-typical-json-handling-in-swift-not-good&#34;&gt;Why is the typical JSON handling in Swift NOT good&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#integration&#34;&gt;Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#subscript&#34;&gt;Subscript&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#loop&#34;&gt;Loop&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#error&#34;&gt;Error&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#optional-getter&#34;&gt;Optional getter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#non-optional-getter&#34;&gt;Non-optional getter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#setter&#34;&gt;Setter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#raw-object&#34;&gt;Raw object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#literal-convertibles&#34;&gt;Literal convertibles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#merging&#34;&gt;Merging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#work-with-alamofire&#34;&gt;Work with Alamofire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#work-with-moya&#34;&gt;Work with Moya&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#swiftyjson-model-generator&#34;&gt;SwiftyJSON Model Generator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Why is the typical JSON handling in Swift NOT good?&lt;/h2&gt; &#xA;&lt;p&gt;Swift is very strict about types. But although explicit typing is good for saving us from mistakes, it becomes painful when dealing with JSON and other areas that are, by nature, implicit about types.&lt;/p&gt; &#xA;&lt;p&gt;Take the Twitter API for example. Say we want to retrieve a user&#39;s &#34;name&#34; value of some tweet in Swift (according to &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline&#34;&gt;Twitter&#39;s API&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The code would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let statusesArray = try? JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [[String: Any]],&#xA;    let user = statusesArray[0][&#34;user&#34;] as? [String: Any],&#xA;    let username = user[&#34;name&#34;] as? String {&#xA;    // Finally we got the username&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s not good.&lt;/p&gt; &#xA;&lt;p&gt;Even if we use optional chaining, it would be messy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let JSONObject = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [[String: Any]],&#xA;    let username = (JSONObject[0][&#34;user&#34;] as? [String: Any])?[&#34;name&#34;] as? String {&#xA;        // There&#39;s our username&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An unreadable mess--for something that should really be simple!&lt;/p&gt; &#xA;&lt;p&gt;With SwiftyJSON all you have to do is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(data: dataFromNetworking)&#xA;if let userName = json[0][&#34;user&#34;][&#34;name&#34;].string {&#xA;  //Now you got your value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And don&#39;t worry about the Optional Wrapping thing. It&#39;s done for you automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(data: dataFromNetworking)&#xA;let result = json[999999][&#34;wrong_key&#34;][&#34;wrong_name&#34;]&#xA;if let userName = result.string {&#xA;    //Calm down, take it easy, the &#34;.string&#34; property still produces the correct Optional String type with safety&#xA;} else {&#xA;    //Print the error&#xA;    print(result.error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 8.0+ | macOS 10.10+ | tvOS 9.0+ | watchOS 2.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods (iOS 8+, OS X 10.9+)&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding it to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;8.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;MyApp&#39; do&#xA;    pod &#39;SwiftyJSON&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage (iOS 8+, OS X 10.9+)&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding it to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;SwiftyJSON/SwiftyJSON&#34; ~&amp;gt; 4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use Carthage to build your dependencies, make sure you have added &lt;code&gt;SwiftyJSON.framework&lt;/code&gt; to the &#34;Linked Frameworks and Libraries&#34; section of your target, and have included them in your Carthage framework copying build phase.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;The Swift Package Manager&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding the proper description to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:4.0&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;YOUR_PROJECT_NAME&#34;,&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/SwiftyJSON/SwiftyJSON.git&#34;, from: &#34;4.0.0&#34;),&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;swift build&lt;/code&gt; whenever you get prepared.&lt;/p&gt; &#xA;&lt;h4&gt;Manually (iOS 7+, OS X 10.9+)&lt;/h4&gt; &#xA;&lt;p&gt;To use this library in your project manually you may:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;for Projects, just drag SwiftyJSON.swift to the project tree&lt;/li&gt; &#xA; &lt;li&gt;for Workspaces, include the whole SwiftyJSON.xcodeproj&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Initialization&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftyJSON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(data: dataFromNetworking)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(jsonObject)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let dataFromString = jsonString.data(using: .utf8, allowLossyConversion: false) {&#xA;    let json = JSON(data: dataFromString)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Subscript&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting a double from a JSON Array&#xA;let name = json[0].double&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting an array of string from a JSON Array&#xA;let arrayNames =  json[&#34;users&#34;].arrayValue.map {$0[&#34;name&#34;].stringValue}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting a string from a JSON Dictionary&#xA;let name = json[&#34;name&#34;].stringValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting a string using a path to the element&#xA;let path: [JSONSubscriptType] = [1,&#34;list&#34;,2,&#34;name&#34;]&#xA;let name = json[path].string&#xA;// Just the same&#xA;let name = json[1][&#34;list&#34;][2][&#34;name&#34;].string&#xA;// Alternatively&#xA;let name = json[1,&#34;list&#34;,2,&#34;name&#34;].string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With a hard way&#xA;let name = json[].string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With a custom way&#xA;let keys:[JSONSubscriptType] = [1,&#34;list&#34;,2,&#34;name&#34;]&#xA;let name = json[keys].string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Loop&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If json is .Dictionary&#xA;for (key,subJson):(String, JSON) in json {&#xA;   // Do something you want&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;The first element is always a String, even if the JSON is an Array&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If json is .Array&#xA;// The `index` is 0..&amp;lt;json.count&#39;s string value&#xA;for (index,subJson):(String, JSON) in json {&#xA;    // Do something you want&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Error&lt;/h4&gt; &#xA;&lt;h5&gt;SwiftyJSON 4.x&lt;/h5&gt; &#xA;&lt;p&gt;SwiftyJSON 4.x introduces an enum type called &lt;code&gt;SwiftyJSONError&lt;/code&gt;, which includes &lt;code&gt;unsupportedType&lt;/code&gt;, &lt;code&gt;indexOutOfBounds&lt;/code&gt;, &lt;code&gt;elementTooDeep&lt;/code&gt;, &lt;code&gt;wrongType&lt;/code&gt;, &lt;code&gt;notExist&lt;/code&gt; and &lt;code&gt;invalidJSON&lt;/code&gt;, at the same time, &lt;code&gt;ErrorDomain&lt;/code&gt; are being replaced by &lt;code&gt;SwiftyJSONError.errorDomain&lt;/code&gt;. Note: Those old error types are deprecated in SwiftyJSON 4.x and will be removed in the future release.&lt;/p&gt; &#xA;&lt;h5&gt;SwiftyJSON 3.x&lt;/h5&gt; &#xA;&lt;p&gt;Use a subscript to get/set a value in an Array or Dictionary&lt;/p&gt; &#xA;&lt;p&gt;If the JSON is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;an array, the app may crash with &#34;index out-of-bounds.&#34;&lt;/li&gt; &#xA; &lt;li&gt;a dictionary, it will be assigned to &lt;code&gt;nil&lt;/code&gt; without a reason.&lt;/li&gt; &#xA; &lt;li&gt;not an array or a dictionary, the app may crash with an &#34;unrecognised selector&#34; exception.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will never happen in SwiftyJSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON([&#34;name&#34;, &#34;age&#34;])&#xA;if let name = json[999].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[999].error!) // &#34;Array[999] is out of bounds&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON([&#34;name&#34;:&#34;Jack&#34;, &#34;age&#34;: 25])&#xA;if let name = json[&#34;address&#34;].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[&#34;address&#34;].error!) // &#34;Dictionary[&#34;address&#34;] does not exist&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(12345)&#xA;if let age = json[0].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[0])       // &#34;Array[0] failure, It is not an array&#34;&#xA;    print(json[0].error!) // &#34;Array[0] failure, It is not an array&#34;&#xA;}&#xA;&#xA;if let name = json[&#34;name&#34;].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[&#34;name&#34;])       // &#34;Dictionary[\&#34;name&#34;] failure, It is not an dictionary&#34;&#xA;    print(json[&#34;name&#34;].error!) // &#34;Dictionary[\&#34;name&#34;] failure, It is not an dictionary&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Optional getter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// NSNumber&#xA;if let id = json[&#34;user&#34;][&#34;favourites_count&#34;].number {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;favourites_count&#34;].error!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// String&#xA;if let id = json[&#34;user&#34;][&#34;name&#34;].string {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;name&#34;].error!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Bool&#xA;if let id = json[&#34;user&#34;][&#34;is_translator&#34;].bool {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;is_translator&#34;].error!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Int&#xA;if let id = json[&#34;user&#34;][&#34;id&#34;].int {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;id&#34;].error!)&#xA;}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Non-optional getter&lt;/h4&gt; &#xA;&lt;p&gt;Non-optional getter is named &lt;code&gt;xxxValue&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not a Number or nil, return 0&#xA;let id: Int = json[&#34;id&#34;].intValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not a String or nil, return &#34;&#34;&#xA;let name: String = json[&#34;name&#34;].stringValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not an Array or nil, return []&#xA;let list: Array&amp;lt;JSON&amp;gt; = json[&#34;list&#34;].arrayValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not a Dictionary or nil, return [:]&#xA;let user: Dictionary&amp;lt;String, JSON&amp;gt; = json[&#34;user&#34;].dictionaryValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;json[&#34;name&#34;] = JSON(&#34;new-name&#34;)&#xA;json[0] = JSON(1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;json[&#34;id&#34;].int =  1234567890&#xA;json[&#34;coordinate&#34;].double =  8766.766&#xA;json[&#34;name&#34;].string =  &#34;Jack&#34;&#xA;json.arrayObject = [1,2,3,4]&#xA;json.dictionaryObject = [&#34;name&#34;:&#34;Jack&#34;, &#34;age&#34;:25]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Raw object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rawObject: Any = json.object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rawValue: Any = json.rawValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//convert the JSON to raw NSData&#xA;do {&#xA;&#x9;let rawData = try json.rawData()&#xA;  //Do something you want&#xA;} catch {&#xA;&#x9;print(&#34;Error \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//convert the JSON to a raw String&#xA;if let rawString = json.rawString() {&#xA;  //Do something you want&#xA;} else {&#xA;&#x9;print(&#34;json.rawString is nil&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Existence&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// shows you whether value specified in JSON or not&#xA;if json[&#34;name&#34;].exists()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Literal convertibles&lt;/h4&gt; &#xA;&lt;p&gt;For more info about literal convertibles: &lt;a href=&#34;http://nshipster.com/swift-literal-convertible/&#34;&gt;Swift Literal Convertibles&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// StringLiteralConvertible&#xA;let json: JSON = &#34;I&#39;m a json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/ /IntegerLiteralConvertible&#xA;let json: JSON =  12345&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// BooleanLiteralConvertible&#xA;let json: JSON =  true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// FloatLiteralConvertible&#xA;let json: JSON =  2.8765&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DictionaryLiteralConvertible&#xA;let json: JSON =  [&#34;I&#34;:&#34;am&#34;, &#34;a&#34;:&#34;json&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// ArrayLiteralConvertible&#xA;let json: JSON =  [&#34;I&#34;, &#34;am&#34;, &#34;a&#34;, &#34;json&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With subscript in array&#xA;var json: JSON =  [1,2,3]&#xA;json[0] = 100&#xA;json[1] = 200&#xA;json[2] = 300&#xA;json[999] = 300 // Don&#39;t worry, nothing will happen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With subscript in dictionary&#xA;var json: JSON =  [&#34;name&#34;: &#34;Jack&#34;, &#34;age&#34;: 25]&#xA;json[&#34;name&#34;] = &#34;Mike&#34;&#xA;json[&#34;age&#34;] = &#34;25&#34; // It&#39;s OK to set String&#xA;json[&#34;address&#34;] = &#34;L.A.&#34; // Add the &#34;address&#34;: &#34;L.A.&#34; in json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Array &amp;amp; Dictionary&#xA;var json: JSON =  [&#34;name&#34;: &#34;Jack&#34;, &#34;age&#34;: 25, &#34;list&#34;: [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, [&#34;what&#34;: &#34;this&#34;]]]&#xA;json[&#34;list&#34;][3][&#34;what&#34;] = &#34;that&#34;&#xA;json[&#34;list&#34;,3,&#34;what&#34;] = &#34;that&#34;&#xA;let path: [JSONSubscriptType] = [&#34;list&#34;,3,&#34;what&#34;]&#xA;json[path] = &#34;that&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With other JSON objects&#xA;let user: JSON = [&#34;username&#34; : &#34;Steve&#34;, &#34;password&#34;: &#34;supersecurepassword&#34;]&#xA;let auth: JSON = [&#xA;  &#34;user&#34;: user.object, // use user.object instead of just user&#xA;  &#34;apikey&#34;: &#34;supersecretapitoken&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Merging&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to merge one JSON into another JSON. Merging a JSON into another JSON adds all non existing values to the original JSON which are only present in the &lt;code&gt;other&lt;/code&gt; JSON.&lt;/p&gt; &#xA;&lt;p&gt;If both JSONs contain a value for the same key, &lt;em&gt;mostly&lt;/em&gt; this value gets overwritten in the original JSON, but there are two cases where it provides some special treatment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In case of both values being a &lt;code&gt;JSON.Type.array&lt;/code&gt; the values form the array found in the &lt;code&gt;other&lt;/code&gt; JSON getting appended to the original JSON&#39;s array value.&lt;/li&gt; &#xA; &lt;li&gt;In case of both values being a &lt;code&gt;JSON.Type.dictionary&lt;/code&gt; both JSON-values are getting merged the same way the encapsulating JSON is merged.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In a case where two fields in a JSON have different types, the value will get always overwritten.&lt;/p&gt; &#xA;&lt;p&gt;There are two different fashions for merging: &lt;code&gt;merge&lt;/code&gt; modifies the original JSON, whereas &lt;code&gt;merged&lt;/code&gt; works non-destructively on a copy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let original: JSON = [&#xA;    &#34;first_name&#34;: &#34;John&#34;,&#xA;    &#34;age&#34;: 20,&#xA;    &#34;skills&#34;: [&#34;Coding&#34;, &#34;Reading&#34;],&#xA;    &#34;address&#34;: [&#xA;        &#34;street&#34;: &#34;Front St&#34;,&#xA;        &#34;zip&#34;: &#34;12345&#34;,&#xA;    ]&#xA;]&#xA;&#xA;let update: JSON = [&#xA;    &#34;last_name&#34;: &#34;Doe&#34;,&#xA;    &#34;age&#34;: 21,&#xA;    &#34;skills&#34;: [&#34;Writing&#34;],&#xA;    &#34;address&#34;: [&#xA;        &#34;zip&#34;: &#34;12342&#34;,&#xA;        &#34;city&#34;: &#34;New York City&#34;&#xA;    ]&#xA;]&#xA;&#xA;let updated = original.merge(with: update)&#xA;// [&#xA;//     &#34;first_name&#34;: &#34;John&#34;,&#xA;//     &#34;last_name&#34;: &#34;Doe&#34;,&#xA;//     &#34;age&#34;: 21,&#xA;//     &#34;skills&#34;: [&#34;Coding&#34;, &#34;Reading&#34;, &#34;Writing&#34;],&#xA;//     &#34;address&#34;: [&#xA;//         &#34;street&#34;: &#34;Front St&#34;,&#xA;//         &#34;zip&#34;: &#34;12342&#34;,&#xA;//         &#34;city&#34;: &#34;New York City&#34;&#xA;//     ]&#xA;// ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;String representation&lt;/h2&gt; &#xA;&lt;p&gt;There are two options available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use the default Swift one&lt;/li&gt; &#xA; &lt;li&gt;use a custom one that will handle optionals well and represent &lt;code&gt;nil&lt;/code&gt; as &lt;code&gt;&#34;null&#34;&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = [&#34;1&#34;:2, &#34;2&#34;:&#34;two&#34;, &#34;3&#34;: nil] as [String: Any?]&#xA;let json = JSON(dict)&#xA;let representation = json.rawString(options: [.castNilToNSNull: true])&#xA;// representation is &#34;{\&#34;1\&#34;:2,\&#34;2\&#34;:\&#34;two\&#34;,\&#34;3\&#34;:null}&#34;, which represents {&#34;1&#34;:2,&#34;2&#34;:&#34;two&#34;,&#34;3&#34;:null}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Work with &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;SwiftyJSON nicely wraps the result of the Alamofire JSON response handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Alamofire.request(url, method: .get).validate().responseJSON { response in&#xA;    switch response.result {&#xA;    case .success(let value):&#xA;        let json = JSON(value)&#xA;        print(&#34;JSON: \(json)&#34;)&#xA;    case .failure(let error):&#xA;        print(error)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also provide an extension of Alamofire for serializing NSData to SwiftyJSON&#39;s JSON.&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/SwiftyJSON/Alamofire-SwiftyJSON&#34;&gt;Alamofire-SwiftyJSON&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Work with &lt;a href=&#34;https://github.com/Moya/Moya&#34;&gt;Moya&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;SwiftyJSON parse data to JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let provider = MoyaProvider&amp;lt;Backend&amp;gt;()&#xA;provider.request(.showProducts) { result in&#xA;    switch result {&#xA;    case let .success(moyaResponse):&#xA;        let data = moyaResponse.data&#xA;        let json = JSON(data: data) // convert network data to json&#xA;        print(json)&#xA;    case let .failure(error):&#xA;        print(&#34;error: \(error)&#34;)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SwiftyJSON Model Generator&lt;/h2&gt; &#xA;&lt;p&gt;Tools to generate SwiftyJSON Models&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jsoncafe.com/&#34;&gt;JSON Cafe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ahmed-Ali/JSONExport&#34;&gt;JSON Export&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yonaskolb/XcodeGen</title>
    <updated>2022-06-02T01:56:34Z</updated>
    <id>tag:github.com,2022-06-02:/yonaskolb/XcodeGen</id>
    <link href="https://github.com/yonaskolb/XcodeGen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift command line tool for generating your Xcode project&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/yonaskolb/XcodeGen&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Assets/Logo_animated.gif&#34; alt=&#34;XcodeGen&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/yonaskolb/XcodeGen/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/yonaskolb/xcodegen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/yonaskolb/XcodeGen&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fyonaskolb%2FXcodeGen%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;Swift Package Manager Platforms&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/yonaskolb/XcodeGen&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fyonaskolb%2FXcodeGen%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;Swift Versions&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/yonaskolb/XcodeGen/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/yonaskolb/XcodeGen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;XcodeGen&lt;/h1&gt; &#xA;&lt;p&gt;XcodeGen is a command line tool written in Swift that generates your Xcode project using your folder structure and a project spec.&lt;/p&gt; &#xA;&lt;p&gt;The project spec is a YAML or JSON file that defines your targets, configurations, schemes, custom build settings and many other options. All your source directories are automatically parsed and referenced appropriately while preserving your folder structure. Sensible defaults are used in many places, so you only need to customize what is needed. Very complex projects can also be defined using more advanced features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Generate projects on demand and remove your &lt;code&gt;.xcodeproj&lt;/code&gt; from git, which means &lt;strong&gt;no more merge conflicts&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;✅ Groups and files in Xcode are always &lt;strong&gt;synced&lt;/strong&gt; to your directories on disk&lt;/li&gt; &#xA; &lt;li&gt;✅ Easy &lt;strong&gt;configuration&lt;/strong&gt; of projects which is human readable and git friendly&lt;/li&gt; &#xA; &lt;li&gt;✅ Easily copy and paste &lt;strong&gt;files and directories&lt;/strong&gt; without having to edit anything in Xcode&lt;/li&gt; &#xA; &lt;li&gt;✅ Share build settings across multiple targets with &lt;strong&gt;build setting groups&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ Automatically generate Schemes for &lt;strong&gt;different environments&lt;/strong&gt; like test and production&lt;/li&gt; &#xA; &lt;li&gt;✅ Easily &lt;strong&gt;create new projects&lt;/strong&gt; with complicated setups on demand without messing around with Xcode&lt;/li&gt; &#xA; &lt;li&gt;✅ Generate from anywhere including on &lt;strong&gt;CI&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ Distribute your spec amongst multiple files for easy &lt;strong&gt;sharing&lt;/strong&gt; and overriding&lt;/li&gt; &#xA; &lt;li&gt;✅ Easily create &lt;strong&gt;multi-platform&lt;/strong&gt; frameworks&lt;/li&gt; &#xA; &lt;li&gt;✅ Integrate &lt;strong&gt;Carthage&lt;/strong&gt; frameworks without any work&lt;/li&gt; &#xA; &lt;li&gt;✅ Export &lt;strong&gt;Dependency Diagrams&lt;/strong&gt; to view in &lt;a href=&#34;https://www.graphviz.org&#34;&gt;Graphviz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Given an example project spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: MyProject&#xA;include:&#xA;  - base_spec.yml&#xA;options:&#xA;  bundleIdPrefix: com.myapp&#xA;packages:&#xA;  Yams:&#xA;    url: https://github.com/jpsim/Yams&#xA;    from: 2.0.0&#xA;targets:&#xA;  MyApp:&#xA;    type: application&#xA;    platform: iOS&#xA;    deploymentTarget: &#34;10.0&#34;&#xA;    sources: [MyApp]&#xA;    settings:&#xA;      configs:&#xA;        debug:&#xA;          CUSTOM_BUILD_SETTING: my_debug_value&#xA;        release:&#xA;          CUSTOM_BUILD_SETTING: my_release_value&#xA;    dependencies:&#xA;      - target: MyFramework&#xA;      - carthage: Alamofire&#xA;      - framework: Vendor/MyFramework.framework&#xA;      - sdk: Contacts.framework&#xA;      - sdk: libc++.tbd&#xA;      - package: Yams&#xA;  MyFramework:&#xA;    type: framework&#xA;    platform: iOS&#xA;    sources: [MyFramework]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A project would be created with 2 connected targets, with all the required configurations and build settings. See the &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/ProjectSpec.md&#34;&gt;Project Spec&lt;/a&gt; documentation for all the options you can specify, and &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/Usage.md&#34;&gt;Usage&lt;/a&gt; for more general documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Make sure Xcode 11 is installed first.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/yonaskolb/mint&#34;&gt;Mint&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mint install yonaskolb/xcodegen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/yonaskolb/XcodeGen.git&#xA;cd XcodeGen&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install xcodegen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use as CLI&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/yonaskolb/XcodeGen.git&#xA;cd XcodeGen&#xA;swift run xcodegen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use as dependency&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your Package.swift file&#39;s dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/yonaskolb/XcodeGen.git&#34;, from: &#34;2.29.0&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then import wherever needed: &lt;code&gt;import XcodeGenKit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xcodegen generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will look for a project spec in the current directory called &lt;code&gt;project.yml&lt;/code&gt; and generate an Xcode project with the name defined in the spec.&lt;/p&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;--spec&lt;/strong&gt;: An optional path to a &lt;code&gt;.yml&lt;/code&gt; or &lt;code&gt;.json&lt;/code&gt; project spec. Defaults to &lt;code&gt;project.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;--project&lt;/strong&gt;: An optional path to a directory where the project will be generated. By default this is the directory the spec lives in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;--quiet&lt;/strong&gt;: Suppress informational and success messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;--use-cache&lt;/strong&gt;: Used to prevent unnecessarily generating the project. If this is set, then a cache file will be written to when a project is generated. If &lt;code&gt;xcodegen&lt;/code&gt; is later run but the spec and all the files it contains are the same, the project won&#39;t be generated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;--cache-path&lt;/strong&gt;: A custom path to use for your cache file. This defaults to &lt;code&gt;~/.xcodegen/cache/{PROJECT_SPEC_PATH_HASH}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are other commands as well such as &lt;code&gt;xcodegen dump&lt;/code&gt; which lets out output the resolved spec in many different formats, or write it to a file. Use &lt;code&gt;xcodegen help&lt;/code&gt; to see more detailed usage information.&lt;/p&gt; &#xA;&lt;h2&gt;Dependency Diagrams&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand!&lt;/summary&gt; &#xA; &lt;h4&gt;How to export dependency diagrams:&lt;/h4&gt; &#xA; &lt;p&gt;To stdout:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;xcodegen dump --type graphviz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To a file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;xcodegen dump --type graphviz --file Graph.viz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;During implementation, &lt;code&gt;graphviz&lt;/code&gt; formatting was validated using &lt;a href=&#34;https://dreampuf.github.io/GraphvizOnline/&#34;&gt;GraphvizOnline&lt;/a&gt;, &lt;a href=&#34;http://www.webgraphviz.com&#34;&gt;WebGraphviz&lt;/a&gt;, and &lt;a href=&#34;https://graphviz.org&#34;&gt;Graphviz on MacOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Editing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/yonaskolb/XcodeGen.git&#xA;cd XcodeGen&#xA;swift package generate-xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This uses Swift Package Manager to create an &lt;code&gt;xcodeproj&lt;/code&gt; file that you can open, edit and run in Xcode, which makes editing any code easier.&lt;/p&gt; &#xA;&lt;p&gt;If you want to pass any required arguments when running in Xcode, you can edit the scheme to include launch arguments.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/ProjectSpec.md&#34;&gt;Project Spec&lt;/a&gt; documentation for all the various properties and options that can be set&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/Usage.md&#34;&gt;Usage&lt;/a&gt; for more specific usage and use case documentation&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt; for a list of some frequently asked questions&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/Examples.md&#34;&gt;Examples&lt;/a&gt; for some real world XcodeGen project specs out in the wild&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;If XcodeGen doesn&#39;t meet your needs try these great alternatives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuist/tuist&#34;&gt;Tuist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/igor-makarov/xcake&#34;&gt;Xcake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/workshop/struct&#34;&gt;struct&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;p&gt;This tool is powered by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuist/XcodeProj&#34;&gt;XcodeProj&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yonaskolb/JSONUtilities&#34;&gt;JSONUtilities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylef/Spectre&#34;&gt;Spectre&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylef/PathKit&#34;&gt;PathKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpsim/Yams&#34;&gt;Yams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jakeheis/SwiftCLI&#34;&gt;SwiftCLI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Inspiration for this tool came from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/workshop/struct&#34;&gt;struct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/igor-makarov/xcake&#34;&gt;Xcake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CocoaPods/Xcodeproj&#34;&gt;CocoaPods Xcodeproj&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests and issues are always welcome. Please open any issues and PRs for bugs, features, or documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/0&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/0&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/1&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/1&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/2&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/2&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/3&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/3&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/4&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/4&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/5&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/5&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/6&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/6&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/7&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/7&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;XcodeGen is licensed under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more info.&lt;/p&gt;</summary>
  </entry>
</feed>