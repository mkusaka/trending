<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-31T01:54:43Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>davidwernhart/AlDente</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/davidwernhart/AlDente</id>
    <link href="https://github.com/davidwernhart/AlDente" rel="alternate"></link>
    <summary type="html">&lt;p&gt;macOS tool to limit maximum charging percentage&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AlDente üçù&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;MacOS menu bar tool to limit maximum charging percentage&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Don&#39;t overcook your battery! Keep it fresh and chewy with AlDente.&lt;/h4&gt; &#xA;&lt;h2&gt;Why do I need this?&lt;/h2&gt; &#xA;&lt;p&gt;Li-Ion batteries (like the one in your MacBook) last the longest when operating between 20 and 80 percent. Keeping your battery at 100% at all times can shorten the lifespan of your MacBook significantly. More information can be found here: &lt;a href=&#34;https://batteryuniversity.com/article/bu-415-how-to-charge-and-when-to-charge&#34;&gt;https://batteryuniversity.com/article/bu-415-how-to-charge-and-when-to-charge&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What‚Äôs AlDente Pro?&lt;/h2&gt; &#xA;&lt;p&gt;AlDente Pro is our paid version of AlDente. It has many more features such as Heat Protection, Sailing Mode, Top Up, Calibration Mode,... It offers a better design and has live status icons. If you are interested in getting the most out of your battery, check out our website: &lt;a href=&#34;https://apphousekitchen.com/&#34;&gt;https://apphousekitchen.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AlDente Pro is now available in Setapp too: &lt;a href=&#34;https://setapp.com/apps/aldente-pro&#34;&gt;https://setapp.com/apps/aldente-pro&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features of AlDente Free&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Charge Limiter allows you to set your maximum charging percentage between 20 and 100 percent. You can either set it by using the slide bar or by typing in the desired percentage in the field above and pressing enter afterwards. Read more about the Charge Limiter feature here: &lt;a href=&#34;https://apphousekitchen.com/feature-explanation-charge-limiter/&#34;&gt;https://apphousekitchen.com/feature-explanation-charge-limiter/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discharge - This feature allows your MacBook to run completely on Battery even if it is plugged in. Therefore, you can actively discharge your MacBook to a more healthy percentage. Unfortunately, while Discharge is activated, clamshell mode is not supported due to technical limitations. Read more about the Discharge feature here: &lt;a href=&#34;https://apphousekitchen.com/feature-explanation-discharge/&#34;&gt;https://apphousekitchen.com/feature-explanation-discharge/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Devices (macOS 11 Big Sur or higher required)&lt;/h2&gt; &#xA;&lt;h4&gt;MacBook Pro&lt;/h4&gt; &#xA;&lt;p&gt;Full Support&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacBook Pro (16-inch, M1 Pro/Max, 2021)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (14-inch, M1 Pro/Max, 2021)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (13-inch, M1, 2020)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (13-inch, 2020, Two Thunderbolt 3 ports)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (13-inch, 2020, Four Thunderbolt 3 ports)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (16-inch, 2019)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (13-inch, 2019, Two Thunderbolt 3 ports)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (15-inch, 2019)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (13-inch, 2019, Four Thunderbolt 3 ports)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (15-inch, 2018)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (13-inch, 2018, Four Thunderbolt 3 ports)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (15-inch, 2017)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (13-inch, 2017, Four Thunderbolt 3 ports)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (13-inch, 2017, Two Thunderbolt 3 ports)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (15-inch, 2016)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (13-inch, 2016, Four Thunderbolt 3 ports)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (13-inch, 2016, Two Thunderbolt 3 ports)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Limited Support(Only Charge Limiter through Intel Mode)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacBook Pro (Retina, 15-inch, Mid 2015)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (Retina, 13-inch, Early 2015)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (Retina, 15-inch, Mid 2014)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (Retina, 13-inch, Mid 2014)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (Retina, 15-inch, Late 2013)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Pro (Retina, 13-inch, Late 2013)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MacBook Air&lt;/h4&gt; &#xA;&lt;p&gt;Full Support&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacBook Air (M1, 2020)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Air (Retina, 13-inch, 2020)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Air (Retina, 13-inch, 2019)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Air (Retina, 13-inch, 2018)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Limited Support(Only Charge Limiter through Intel Mode)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacBook Air (13-inch, 2017)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Air (13-inch, Early 2015)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Air (11-inch, Early 2015)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Air (13-inch, Early 2014)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Air (11-inch, Early 2014)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Air (13-inch, Mid 2013)&lt;/li&gt; &#xA; &lt;li&gt;MacBook Air (11-inch, Mid 2013)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MacBook 12&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Limited Support(Only Charge Limiter through Intel Mode)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacBook (Retina, 12-inch, 2017)&lt;/li&gt; &#xA; &lt;li&gt;MacBook (Retina, 12-inch, Early 2016)&lt;/li&gt; &#xA; &lt;li&gt;MacBook (Retina, 12-inch, Early 2015)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download:&lt;/h2&gt; &#xA;&lt;p&gt;You can download the app from GitHub: &lt;a href=&#34;https://github.com/davidwernhart/AlDente/releases&#34;&gt;https://github.com/davidwernhart/AlDente/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation Guide&lt;/h2&gt; &#xA;&lt;p&gt;An installation guide can be found on our website: &lt;a href=&#34;https://apphousekitchen.com/installation-guide/&#34;&gt;https://apphousekitchen.com/installation-guide/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use:&lt;/h2&gt; &#xA;&lt;p&gt;When the installation is finished, enter your desired max. charging percentage by clicking on the üçù icon on your menu bar. Usually, the operating system will take a minute or two registering the changes, so be patient. You can check if it&#39;s working by setting the max. percentage to e.g.: 80%. After a while, clicking on your battery icon will report &#34;Battery is not charging&#34; if you have more than ‚âà73% left, even though your charger is connected. Notice that in this state, your MacBook is still powered by the charger, but the battery is not charging anymore.&lt;/p&gt; &#xA;&lt;p&gt;For some reason, macOS will always try to squeeze in a few more percent than specified. For example, if you set yours to 80% it will stop charging at around 83%, so be patient.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT: Keeping your battery at a lower percentage, such as under 80%, over weeks without doing full cycles (100%-0%) can result in a disturbed battery calibration. When this happens, your Macbook might turn off with 40-50% left or your battery capacity will drop significantly. However, this is only due to a disturbed battery calibration and not because of a faulty or degraded battery. To avoid this issue, we recommend doing at least one full cycle (0%-100%) every two weeks. Even if your battery calibration gets disturbed, doing 4+ full cycles will recalibrate your battery and the capacity will go up again.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;IT DOES NOT WORK???&lt;/summary&gt; Firstly, AlDente does only prevent your Mac from charging more than you specify, it does NOT automatically drain your battery to the specified percentage. Secondly, make sure you have Apple&#39;s &#34;Optimized battery charging&#34; disabled, keeping it on will result in slow charging beyond the charge limit. Lastly, check the next question regarding the behavior of AlDente while your MacBook is in sleep or powered off. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;CHARGE LIMITER DOES NOT WORK! :(&lt;/summary&gt; AlDente Free can not control the charging behavior of your MacBook while it is in sleep, or shut down. Therefore, it will continue to charge to 100% when you close the lid or shut it down. AlDente Pro has features called &#34;Stop charging when sleeping&#34; and &#34;Stop charging when powered off&#34; to counteract this behavior. You can read more about these features in our blog: https://apphousekitchen.com/feature-explanation-stop-charging-when-sleeping/ https://apphousekitchen.com/feature-explanation-stop-charging-when-powered-off-app-closed/ &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;WHY DOES MY MACBOOK KEEP CHARGING WHEN IT IS POWERED OFF?&lt;/summary&gt; AlDente Free can not control the charging behavior of your MacBook while it is in sleep, or shut down. Therefore, it will continue to charge to 100% when you close the lid or shut it down. AlDente Pro has features called &#34;Stop charging when sleeping&#34; and &#34;Stop charging when powered off&#34; to counteract this behavior. You can read more about these features in our blog: https://apphousekitchen.com/feature-explanation-stop-charging-when-sleeping/ https://apphousekitchen.com/feature-explanation-stop-charging-when-powered-off-app-closed/ &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;WHY DOES MY MACBOOK KEEP CHARGING WHEN IT IS IN SLEEP?&lt;/summary&gt; AlDente Free can not control the charging behavior of your MacBook while it is in sleep, or shut down. Therefore, it will continue to charge to 100% when you close the lid or shut it down. AlDente Pro has features called &#34;Stop charging when sleeping&#34; and &#34;Stop charging when powered off&#34; to counteract this behavior. You can read more about these features in our blog: * https://apphousekitchen.com/feature-explanation-stop-charging-when-sleeping/ * https://apphousekitchen.com/feature-explanation-stop-charging-when-powered-off-app-closed/ &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;HOW TO UNINSTALL?&lt;/summary&gt; Take a look at our blog post here: https://apphousekitchen.com/how-to-uninstall-aldente-pro/ &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;DO I HAVE TO DISABLE APPLE&#39;S &#34;OPTIMIZED BATTERY CHARGING&#34;?&lt;/summary&gt; Yes! Leaving it on results in slow charging, even when AlDente is trying to inhibit it. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;WHY DOES DISCHARGE NOT WORK IN CLAMSHELL MODE?&lt;/summary&gt; Discharge in Clamshell mode is only supported in AlDente Pro. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;HELP, SAILING MODE DOES NOT WORK!?&lt;/summary&gt; The Sailing Mode is not intended to actively discharge your battery. Therefore, your MacBook will barely lose any energy even in Sailing Mode, since the power brick is the main source of energy. So do not worry when the battery percentage does not change even if the Sailing Mode is activated. Sailing Mode is still doing its thing. You can read more about what the Sailing Mode actually does here: https://apphousekitchen.com/feature-explanation-sailing-mode/ &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;WHY DOES THE SAILING MODE NOT CHARGE AND DISCHARGE THE MACBOOK BETWEEN A CERTAIN RANGE?&lt;/summary&gt; Unlike the common belief, it is actually way more unhealthy for a battery to always get cycled between a reasonable range (for example between 30% and 70%) than to just stay at a healthy percentage (for example 80%). This is due to even reasonable charge cycling adding a lot of charge cycles which results in more and faster battery degradation over time than just using the MacBook plugged in at a healthy percentage. However, this does not mean that you should not use your MacBook remotely. MacBooks are portable devices but if you use your MacBook in your office plugged in, it is better to just limit charging to a healthy percentage than to cycle between a certain range. You can read more about what the Sailing Mode actually does here: https://apphousekitchen.com/feature-explanation-sailing-mode/ &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;HELP MY BATTERY CAPACITY DROPPED AND MY MACBOOK TURNS OFF WITH 50% LEFT OR STAYS AT 100% FOR HOURS!!!&lt;/summary&gt; Keeping your battery at a lower percentage, such as under 80%, over weeks without doing full cycles (100%-0%-100%) can result in a disturbed battery calibration. When this happens, your Macbook might turn off with 40-50% left or it will stay at 100% for hours and your battery capacity can drop significantly. However, this is only due to a disturbed battery calibration and not because of a faulty or degraded battery. To avoid this issue, we recommend doing at least one full cycle (0%-100%) every two weeks. Even if your battery calibration gets disturbed, doing 4-5 full cycles will recalibrate your battery and the capacity will go up again. AlDente Pro has a feature called Calibration Mode(https://apphousekitchen.com/feature-explanation-calibration-mode-2/), which will automatically do a full cycle when started. You can read more about the calibration of &#34;smart&#34; batteries here: https://batteryuniversity.com/article/bu-603-how-to-calibrate-a-smart-battery &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;WHAT IS ALDENTE CLASSIC?&lt;/summary&gt; AlDente Classic is our original version of AlDente. First introduced in 2020 and further developed until March 2021. With a complete rewrite of the code of AlDente and the introduction of AlDente Pro, we decided to rename the original AlDente in AlDente Classic and use the name AlDente (Free) or AlDente Pro with synchronous versioning between these two from now on. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;WHY IS ALDENTE NOT SUPPORTED BY OLDER VERSIONS OF MACOS AND ARE YOU PLANNING TO SUPPORT OLDER MACOS VERSIONS IN THE FUTURE?&lt;/summary&gt; Due to SwiftUI not being compatible with older versions of macOS, AlDente is only compatible with macOS 11 Big Sur on newer. Even though it might be possible to get AlDente to work on older MacBooks and macOS versions too, we are currently not working on it. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;IS ALDENTE OPEN SOURCE?&lt;/summary&gt; The first couple of versions of AlDente Classic until AlDente Classic 2.0 are open source. Later versions of AlDente Classic or AlDente Free/Pro are not open source anymore. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;ALDENTE DOES NOT WORK ANYMORE AFTER MACOS UPDATE!&lt;/summary&gt; Unfortunately, for a small amount of users, AlDente temporarily does not work after a macOS update. To get AlDente to work again, just reinstall AlDente completely and everything should work as expected again. If that did not help, try to shut down your MacBook completely and unplug the power brick for a couple of minutes. Afterward, restart your MacBook, plug it in, and everything should work again. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;DOES ALDENTE SUPPORT APPLE&#39;S FAST USER SWITCHING?&lt;/summary&gt; Yes, since AlDente 1.15, Apple&#39;s Fast User Switching is supported. Please follow this tutorial to get it to work properly: https://apphousekitchen.com/fast-user-switching-explanation-and-tutorial/ &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Other tools used in this project:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/beltex/SMCKit&#34;&gt;https://github.com/beltex/SMCKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/LaunchAtLogin&#34;&gt;https://github.com/sindresorhus/LaunchAtLogin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andreyvit/create-dmg&#34;&gt;https://github.com/andreyvit/create-dmg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer:&lt;/h2&gt; &#xA;&lt;p&gt;I do not take any responsibility for any sort of damage in result of using this tool! Although this had no negative side effects for me and thousands of others, AlDente still taps in some very low level system functions that are not meant to be tampered with. Use it at your own risk!&lt;/p&gt; &#xA;&lt;p&gt;Copyright(c) 2021 AppHouseKitchen&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iVoider/PlayCover</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/iVoider/PlayCover</id>
    <link href="https://github.com/iVoider/PlayCover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PlayCover is a project that allows you to sideload iOS apps on macOS (currently arm, Intel support will be tested)&lt;/p&gt;&lt;hr&gt;&lt;div id=&#34;top&#34;&gt;&lt;/div&gt; &#xA;&lt;p&gt;‚Äé&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/iVoider/PlayCover/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/iVoider/PlayCover.svg?style=for-the-badge&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iVoider/PlayCover/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/iVoider/PlayCover.svg?style=for-the-badge&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iVoider/PlayCover/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/iVoider/PlayCover.svg?style=for-the-badge&#34; alt=&#34;Stargazers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iVoider/PlayCover/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/iVoider/PlayCover.svg?style=for-the-badge&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iVoider/PlayCover/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/iVoider/PlayCover.svg?style=for-the-badge&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt; &lt;/h1&gt; &#xA;&lt;!-- PROJECT LOGO --&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/iVoider/PlayCover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/images/logo.png&#34; alt=&#34;Logo&#34; width=&#34;80&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt;PlayCover&lt;/h3&gt; &#xA; &lt;p align=&#34;center&#34;&gt; Run iOS apps &amp;amp; games on M1 Mac with mouse, keyboard and controller support. &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=grY63FBJ6N4&#34;&gt;Showcase&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/iVoider/PlayCover/pulls&#34;&gt;Contribute&lt;/a&gt; ¬∑ &lt;a href=&#34;https://discord.gg/rMv5qxGTGC&#34;&gt;Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- ABOUT THE PROJECT --&gt; &#xA;&lt;h2&gt;About The Project&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to PlayCover! This software is all about allowing you to run apps &amp;amp; games on your M1 device runnnig macOS 12.0 or newer.&lt;/p&gt; &#xA;&lt;p&gt;It does this by putting the applications through a wrapper which imitates an iPad. This allows the apps to perform very well and run natively, because the M1 chip is essentially a glorified mobile chip. Another advantage to the software is that you can insert and manipulate custom controls with your keyboard, which is not possible in alternative sideloading methods such as Sideloadly. These controls include all the essentials, from WASD, Camera movement, Left and Right clicks, and individual keymapping, similar to a popular Android emulator‚Äôs keymapping system called Bluestacks.&lt;/p&gt; &#xA;&lt;p&gt;While this software was originally created to allow you to run Genshin Impact on your M1 device, it grew to allow many more applications to run. Although support for all games is not promised and bugs with games are expected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/images/dark.png#gh-dark-mode-only&#34; alt=&#34;Fancy logo&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/images/light.png#gh-light-mode-only&#34; alt=&#34;Fancy logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;‚¨ÜÔ∏è Back to topÔ∏è&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- GETTING STARTED --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Following the installation instructions will get Genshin Impact you up and running in no time. The steps can be repeated if you want to try out other games or apps.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;At the moment, PlayCover can only be installed and executed on M1 MacBooks. Devices with the following chips are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;M1&lt;/li&gt; &#xA; &lt;li&gt;M1 Pro&lt;/li&gt; &#xA; &lt;li&gt;M1 Max&lt;/li&gt; &#xA; &lt;li&gt;M1 Ultra&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unfortunately, it cannot run on any Intel chips, so you are forced to use Bootcamp or other emulators.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Disable SIP&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This can be done by shutting down your mac, holding down power button&lt;/li&gt; &#xA;   &lt;li&gt;After this, click on your username/ssd, then keep going until you can see &lt;code&gt;Utilities&lt;/code&gt; at the top&lt;/li&gt; &#xA;   &lt;li&gt;When you see this, click on it and click on &lt;code&gt;Terminal&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;After this, you should be in a terminal window&lt;/li&gt; &#xA;   &lt;li&gt;Type &lt;code&gt;csrutil disable&lt;/code&gt; in that terminal window&lt;/li&gt; &#xA;   &lt;li&gt;Put your password and everything, then restart your mac&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify nvram boot-args&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When you have SIP disabled, type the following: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Command + Space&lt;/code&gt;, type &lt;code&gt;Terminal&lt;/code&gt; in the search box&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;It should open a normal terminal window&lt;/li&gt; &#xA;   &lt;li&gt;Type the following in this window (or copy paste it) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;sudo nvram boot-args=&#34;amfi_get_out_of_my_way=1&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;If it appears that nothing has happened, this is correct.&lt;/li&gt; &#xA;   &lt;li&gt;Now restart your mac once again&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Genshin&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open Genshin Impact with PlayCover, and you should be greeted with a Login button&lt;/li&gt; &#xA;   &lt;li&gt;Login to your account, then wait until the door appears and quit the game with &lt;code&gt;Command + Q&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Thats all which is required in Genshin for now&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable SIP&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shut down your mac again&lt;/li&gt; &#xA;   &lt;li&gt;Hold down the power button until you get to recovery options&lt;/li&gt; &#xA;   &lt;li&gt;Click on your username and your storage disk respectively like you did for step 1.&lt;/li&gt; &#xA;   &lt;li&gt;You should see &lt;code&gt;Utilities&lt;/code&gt; at the top&lt;/li&gt; &#xA;   &lt;li&gt;Click on it, and Click on &lt;code&gt;Terminal&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;In terminal, type the following: &lt;code&gt;csrutil enable&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;csrutil clear&lt;/code&gt; should also work&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Reboot your mac by going to &lt;code&gt;Apple Logo&lt;/code&gt; &amp;gt; &lt;code&gt;Restart&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Genshin&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You&#39;re done! Enjoy playing genshin!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Video Instructions&lt;/h3&gt; &#xA;&lt;p&gt;The above steps are shown in the following video:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZRmCjkS3UZE&#34;&gt;How to play Genshin Impact using Playcover on your M1 Mac (2020 or newer)!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;‚¨ÜÔ∏è Back to topÔ∏è&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- USAGE EXAMPLES --&gt; &#xA;&lt;h2&gt;Keymapping&lt;/h2&gt; &#xA;&lt;h3&gt;Button Events&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Opens a menu to add a button element &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on the screen&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Edit keymapping binding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Click on a keymap and press the key you want binded&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bind left mouse button &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on &lt;strong&gt;&#39;LB&#39;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bind right mouse button &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on &lt;strong&gt;&#39;RB&#39;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bind middle mouse button &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on &lt;strong&gt;&#39;üñ±Ô∏è&#39;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Adds a W/A/S/D joystick &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on the &lt;strong&gt;&#39;‚ûï&#39;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Adds a mouse area for mouse control &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on the &lt;strong&gt;&#39;üîÅ&#39;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Flow Control&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increase the selected buttons size &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Menu Bar &amp;gt; &lt;code&gt;Keymapping&lt;/code&gt; &amp;gt; Upsize Selected Element OR &lt;code&gt;Cmd + &#39;‚Üë&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Decrease the selected buttons size &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Menu Bar &amp;gt; &lt;code&gt;Keymapping&lt;/code&gt; &amp;gt; Upsize Selected Element OR &lt;code&gt;Cmd + &#39;‚Üì&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Delete the selected keymapping &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CMD + delete (backspace)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Toggle between show/hide cursor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press option (‚å•)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Importing Keybinds&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the &lt;code&gt;.playmap&lt;/code&gt; file from &lt;a href=&#34;https://discord.com/channels/871829896492642387/922068254569160745&#34;&gt;#üìù„Éªkeymap-showcase&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open PlayCover and right click the app you wish to import the keybinds to&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on &lt;code&gt;Import Keymapping&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the previously downloaded &lt;code&gt;.playmap&lt;/code&gt; file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Quit and reopen the app&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This step is required for the newly imported keymapping to work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;For additional help, please join the &lt;a href=&#34;https://discord.gg/rMv5qxGTGC&#34;&gt;Discord server&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;‚¨ÜÔ∏è Back to topÔ∏è&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- CONTRIBUTING --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have a suggestion that would make this better, please fork the repo and create a pull request. Don&#39;t forget to give the project a star! Thanks again!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;‚¨ÜÔ∏è Back to topÔ∏è&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- LICENSE --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the AGPLv3 License. See &lt;code&gt;LICENSE&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;‚¨ÜÔ∏è Back to topÔ∏è&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- CONTACT --&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Alexandr Dorofeev - &lt;a href=&#34;mailto:business@playcover.me&#34;&gt;business@playcover.me&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Link: &lt;a href=&#34;https://github.com/iVoider/PlayCover&#34;&gt;https://github.com/iVoider/PlayCover&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;‚¨ÜÔ∏è Back to topÔ∏è&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ACKNOWLEDGMENTS --&gt; &#xA;&lt;h2&gt;Libraries Used&lt;/h2&gt; &#xA;&lt;p&gt;These open source libraries were used to create this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paradiseduo/appdecrypt/tree/main/Sources/appdecrypt&#34;&gt;appdecrypt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexzielenski/optool&#34;&gt;optool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ret70/PTFakeTouch&#34;&gt;PTFakeTouch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;‚¨ÜÔ∏è Back to topÔ∏è&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;</summary>
  </entry>
  <entry>
    <title>Finb/Bark</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/Finb/Bark</id>
    <link href="https://github.com/Finb/Bark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bark is an iOS App which allows you to push custom notifications to your iPhone&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Â∏∏ËßÅÈóÆÈ¢ò&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://day.app/2021/06/barkfaq/&#34;&gt;https://day.app/2021/06/barkfaq/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÈóÆÈ¢òÂèçÈ¶à Telegram Áæ§&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/joinchat/OsCbLzovUAE0YjY1&#34;&gt;BarkÂèçÈ¶àÁæ§&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÂèëÈÄÅÊé®ÈÄÅ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ÊâìÂºÄAPPÔºåÂ§çÂà∂ÊµãËØïURL&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://wx4.sinaimg.cn/mw2000/003rYfqply1grd1meqrvcj60bi08zt9i02.jpg&#34; width=&#34;365&#34;&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;‰øÆÊîπÂÜÖÂÆπÔºåËØ∑Ê±ÇËøô‰∏™URL&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;ÂèØ‰ª•Âèë get ÊàñËÄÖ post ËØ∑Ê±Ç ÔºåËØ∑Ê±ÇÊàêÂäü‰ºöÁ´ãÂç≥Êî∂Âà∞Êé®ÈÄÅ &#xA;&#xA;URL ÁªÑÊàê: Á¨¨‰∏Ä‰∏™ÈÉ®ÂàÜÊòØ key , ‰πãÂêéÊúâ‰∏â‰∏™ÂåπÈÖç &#xA;/:key/:body &#xA;/:key/:title/:body &#xA;/:key/:category/:title/:body &#xA;&#xA;title Êé®ÈÄÅÊ†áÈ¢ò ÊØî body Â≠óÂè∑Á≤ó‰∏ÄÁÇπ &#xA;body Êé®ÈÄÅÂÜÖÂÆπ Êç¢Ë°åËØ∑‰ΩøÁî®Êç¢Ë°åÁ¨¶ &#39;\n&#39;&#xA;category Âè¶Â§ñÁöÑÂäüËÉΩÂç†Áî®ÁöÑÂ≠óÊÆµÔºåËøòÊ≤°ÂºÄÊîæ ÂøΩÁï•Â∞±Ë°å &#xA;post ËØ∑Ê±Ç ÂèÇÊï∞Âêç‰πüÊòØ‰∏äÈù¢Ëøô‰∫õ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Â§çÂà∂Êé®ÈÄÅÂÜÖÂÆπ&lt;/h2&gt; &#xA;&lt;p&gt;Êî∂Âà∞Êé®ÈÄÅÊó∂‰∏ãÊãâÊé®ÈÄÅÔºàÊàñÂú®ÈÄöÁü•‰∏≠ÂøÉÂ∑¶ÊªëÊü•ÁúãÊé®ÈÄÅÔºâÊúâ‰∏Ä‰∏™&lt;code&gt;Â§çÂà∂&lt;/code&gt;ÊåâÈíÆÔºåÁÇπÂáªÂç≥ÂèØÂ§çÂà∂Êé®ÈÄÅÂÜÖÂÆπ„ÄÇ&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;img src=&#34;http://wx4.sinaimg.cn/mw690/0060lm7Tly1g0btjhgimij30ku0a60v1.jpg&#34; width=&#34;375&#34;&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//Â∞ÜÂ§çÂà∂‚ÄúÈ™åËØÅÁ†ÅÊòØ9527‚Äù&#xA;https://api.day.app/yourkey/È™åËØÅÁ†ÅÊòØ9527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Êê∫Â∏¶ÂèÇÊï∞ automaticallyCopy=1Ôºå Êî∂Âà∞Êé®ÈÄÅÊó∂ÔºåÊé®ÈÄÅÂÜÖÂÆπ‰ºöËá™Âä®Â§çÂà∂Âà∞Á≤òË¥¥ÊùøÔºàÂ¶ÇÂèëÁé∞‰∏çËÉΩËá™Âä®Â§çÂà∂ÔºåÂèØÂ∞ùËØïÈáçÂêØ‰∏Ä‰∏ãÊâãÊú∫Ôºâ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//Ëá™Âä®Â§çÂà∂ ‚ÄúÈ™åËØÅÁ†ÅÊòØ9527‚Äù Âà∞Á≤òË¥¥Êùø&#xA;https://api.day.app/yourkey/È™åËØÅÁ†ÅÊòØ9527?automaticallyCopy=1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Êê∫Â∏¶copyÂèÇÊï∞Ôºå Âàô‰∏äÈù¢‰∏§ÁßçÂ§çÂà∂Êìç‰ΩúÔºåÂ∞ÜÂè™Â§çÂà∂copyÂèÇÊï∞ÁöÑÂÄº&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//Ëá™Âä®Â§çÂà∂ ‚Äú9527‚Äù Âà∞Á≤òË¥¥Êùø&#xA;https://api.day.app/yourkey/È™åËØÅÁ†ÅÊòØ9527?automaticallyCopy=1&amp;amp;copy=9527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ÂÖ∂‰ªñÂèÇÊï∞&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;url&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// ÁÇπÂáªÊé®ÈÄÅÂ∞ÜË∑≥ËΩ¨Âà∞urlÁöÑÂú∞ÂùÄÔºàÂèëÈÄÅÊó∂ÔºåURLÂèÇÊï∞ÈúÄË¶ÅÁºñÁ†ÅÔºâ&#xA;https://api.day.app/yourkey/ÁôæÂ∫¶ÁΩëÂùÄ?url=https://www.baidu.com &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;isArchive&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// ÊåáÂÆöÊòØÂê¶ÈúÄË¶Å‰øùÂ≠òÊé®ÈÄÅ‰ø°ÊÅØÂà∞ÂéÜÂè≤ËÆ∞ÂΩïÔºå1 ‰∏∫‰øùÂ≠òÔºåÂÖ∂‰ªñÂÄº‰∏∫‰∏ç‰øùÂ≠ò„ÄÇ&#xA;// Â¶ÇÊûú‰∏çÊåáÂÆöËøô‰∏™ÂèÇÊï∞ÔºåÊé®ÈÄÅ‰ø°ÊÅØÂ∞ÜÊåâÁÖßAPPÂÜÖËÆæÁΩÆÊù•ÂÜ≥ÂÆöÊòØÂê¶‰øùÂ≠ò„ÄÇ&#xA;https://api.day.app/yourkey/ÈúÄË¶Å‰øùÂ≠òÁöÑÊé®ÈÄÅ?isArchive=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;group&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// ÊåáÂÆöÊé®ÈÄÅÊ∂àÊÅØÂàÜÁªÑÔºåÂèØÂú®ÂéÜÂè≤ËÆ∞ÂΩï‰∏≠ÊåâÂàÜÁªÑÊü•ÁúãÊé®ÈÄÅ„ÄÇ&#xA;https://api.day.app/yourkey/ÈúÄË¶ÅÂàÜÁªÑÁöÑÊé®ÈÄÅ?group=groupName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;icon (‰ªÖ iOS15 Êàñ‰ª•‰∏äÊîØÊåÅÔºâ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// ÊåáÂÆöÊé®ÈÄÅÊ∂àÊÅØÂõæÊ†á&#xA;https://api.day.app/yourkey/ÈúÄË¶ÅËá™ÂÆö‰πâÂõæÊ†áÁöÑÊé®ÈÄÅ?icon=http://day.app/assets/images/avatar.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Êó∂ÊïàÊÄßÈÄöÁü•&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// ËÆæÁΩÆÊó∂ÊïàÊÄßÈÄöÁü•&#xA;https://api.day.app/yourkey/Êó∂ÊïàÊÄßÈÄöÁü•?level=timeSensitive&#xA;&#xA;// ÂèØÈÄâÂèÇÊï∞ÂÄº&#xA;// activeÔºö‰∏çËÆæÁΩÆÊó∂ÁöÑÈªòËÆ§ÂÄºÔºåÁ≥ªÁªü‰ºöÁ´ãÂç≥‰∫ÆÂ±èÊòæÁ§∫ÈÄöÁü•„ÄÇ&#xA;// timeSensitiveÔºöÊó∂ÊïàÊÄßÈÄöÁü•ÔºåÂèØÂú®‰∏ìÊ≥®Áä∂ÊÄÅ‰∏ãÊòæÁ§∫ÈÄöÁü•„ÄÇ&#xA;// passiveÔºö‰ªÖÂ∞ÜÈÄöÁü•Ê∑ªÂä†Âà∞ÈÄöÁü•ÂàóË°®Ôºå‰∏ç‰ºö‰∫ÆÂ±èÊèêÈÜí&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ÂêéÁ´Ø‰ª£Á†Å&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Finb/bark-server&#34;&gt;bark-server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Â∞ÜÂêéÁ´Ø‰ª£Á†ÅÈÉ®ÁΩ≤Âú®‰Ω†Ëá™Â∑±ÁöÑÊúçÂä°Âô®‰∏ä„ÄÇÊîØÊåÅDocker&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Chrome Êèí‰ª∂&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xlvecle/Bark-Chrome-Extension&#34;&gt;Bark-Chrome-Extension&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ËøôÊòØ‰∏ÄÊ¨æchromeÊèí‰ª∂ËÉΩÂ∏Æ‰Ω†Êñπ‰æøÂú∞ÊääÁΩëÈ°µ‰∏äÁöÑÊñáÊú¨ÊàñËÄÖÁΩëÂùÄÊé®ÈÄÅÂà∞BarkÊâãÊú∫Á´Ø„ÄÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;ÊïàÊûúÂ±ïÁ§∫&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://wx4.sinaimg.cn/mw690/0060lm7Tly1fyaqyhzdnxg30660dcu0h.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Âú®Á∫øÂÆöÊó∂ÂèëÈÄÅ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://api.ihint.me/bark.html&#34;&gt;https://api.ihint.me/bark.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;WindowsÊé®ÈÄÅÂÆ¢Êà∑Á´Ø&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HsuDan/BarkHelper&#34;&gt;https://github.com/HsuDan/BarkHelper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ë∑®Âπ≥Âè∞ÁöÑÂëΩ‰ª§Ë°åÂ∫îÁî®&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JasonkayZK/bark-cli&#34;&gt;https://github.com/JasonkayZK/bark-cli&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quicker Âä®‰Ωú&lt;/h2&gt; &#xA;&lt;p&gt;‰ΩøÁî® Quicker ËΩØ‰ª∂Âú® Windows ‰∏äÂ∞ÜÈÄâ‰∏≠ÊñáÂ≠ó‰∏ÄÈîÆÊé®ÈÄÅÂà∞iPhoneÔºåÊîØÊåÅÊâìÂºÄURLÂíåËá™Âä®Â§çÂà∂Êé®ÈÄÅÂÜÖÂÆπ &lt;a href=&#34;https://getquicker.net/Sharedaction?code=e927d844-d212-4428-758d-08d69de12a3b&#34;&gt;https://getquicker.net/Sharedaction?code=e927d844-d212-4428-758d-08d69de12a3b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bark for Wox&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Zeroto521/Wox.Plugin.Bark&#34;&gt;https://github.com/Zeroto521/Wox.Plugin.Bark&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kean/Pulse</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/kean/Pulse</id>
    <link href="https://github.com/kean/Pulse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Logger and network inspector for Apple platforms&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;img alt=&#34;Pulse Logo&#34; src=&#34;https://user-images.githubusercontent.com/1567433/164947152-9760dd7b-c883-4059-b5dc-e66df031f0c9.png&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pulse&lt;/strong&gt; is a powerful logging system for Apple Platforms. Native. Built with SwiftUI.&lt;/p&gt; &#xA;&lt;p&gt;Record and inspect logs and &lt;code&gt;URLSession&lt;/code&gt; network requests right from your iOS app using Pulse Console. Share and view logs in Pulse macOS app. Logs are recorded locally and never leave your device. Learn more at &lt;a href=&#34;https://kean.blog/pulse/home&#34;&gt;&lt;strong&gt;kean.blog/pulse&lt;/strong&gt;&lt;/a&gt; üîó.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/kean/Get&#34;&gt;Get&lt;/a&gt;, web API client built using async/await, has first-class Pulse integration.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;02&#34; src=&#34;https://user-images.githubusercontent.com/1567433/164947161-3e9a5343-9c4c-4d03-a4f0-24fb0a71b94d.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;03&#34; src=&#34;https://user-images.githubusercontent.com/1567433/164947162-f7ea32f9-d20b-493c-9edd-279620416872.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;04&#34; src=&#34;https://user-images.githubusercontent.com/1567433/164947163-dfa2be99-2267-4e5c-9723-48e88d4386bd.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;05&#34; src=&#34;https://user-images.githubusercontent.com/1567433/164947165-2adc3174-0d88-4e07-8428-d57a4cd35ad0.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;06&#34; src=&#34;https://user-images.githubusercontent.com/1567433/164947167-6f503ae1-5c40-4fc3-accb-289e160352aa.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;07&#34; src=&#34;https://user-images.githubusercontent.com/1567433/164947168-5e163b13-42b0-40f3-abc3-47197058e11a.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Pulse&lt;/code&gt; is not a tool, it&#39;s a framework. It records events from &lt;code&gt;URLSession&lt;/code&gt; or from frameworks that use it, such as &lt;code&gt;Alamofire&lt;/code&gt;, and displays them using &lt;code&gt;PulseUI&lt;/code&gt; views that you integrate directly into your app. This way Pulse console is available for everyone who has your test builds. You or your QA team can view the logs on the device and easily share them to attach to bug reports.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What Pulse is Not&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pulse &lt;strong&gt;is not&lt;/strong&gt; a network debugging proxy tool like Proxyman, Charles, or Wireshark. It &lt;em&gt;won&#39;t&lt;/em&gt; automatically intercept all network traffic coming from your app or device. And to view logs in realtime, you need to use &lt;code&gt;PulseUI.framework&lt;/code&gt; that you integrate into your app. The dedicated Pulse iOS and macOS also use &lt;code&gt;PulseUI.framework&lt;/code&gt; and are there to view logs manually shared from other devices.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Pulse is easy to learn and use thanks to &lt;a href=&#34;https://kean.blog/pulse/home&#34;&gt;&lt;strong&gt;Pulse Docs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://kean.blog/pulse/home&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1567433/115163600-eea0cc80-a077-11eb-8b86-3113a657816f.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Pulse Pro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kean.blog/pulse/guides/pulse-pro&#34;&gt;&lt;strong&gt;Pulse Pro&lt;/strong&gt;&lt;/a&gt; is a professional open-source macOS app that allows you to view logs in real-time. The app is designed to be flexible, expansive, and precise while using all the familiar macOS patterns. It makes it easy to navigate large log files with table and text modes, filters, scroller markers, an all-new network inspector, JSON filters, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/weichsel/ZIPFoundation/&#34;&gt;ZIPFoundation&lt;/a&gt; for archiving Pulse documents. It&#39;s included directly in the binary.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Minimum Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PulseUI&lt;/strong&gt; views are available only on indicated platforms, but the framework can be installed in the app targeting the &lt;strong&gt;PulseCore&lt;/strong&gt; platforms ‚Äì you just won&#39;t be able to use the views.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Pulse&lt;/th&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Xcode&lt;/th&gt; &#xA;   &lt;th&gt;Platforms&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PulseCore 0.14.0&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 11.0 / watchOS 6.0 / tvOS 11.0 / macOS 11.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PulseUI 0.14.0&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 13.0 / watchOS 7.0 / tvOS 13.0 / macOS 11.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Pulse is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Daltron/NotificationBanner</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/Daltron/NotificationBanner</id>
    <link href="https://github.com/Daltron/NotificationBanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The easiest way to display highly customizable in app notification banners in iOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/header.png&#34; alt=&#34;Notification Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/NotificationBannerSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/NotificationBannerSwift.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/NotificationBannerSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/NotificationBannerSwift.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5-4BC51D.svg?style=flat&#34; alt=&#34;Language: Swift&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/NotificationBannerSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/NotificationBannerSwift.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Written in Swift 5&lt;/h2&gt; &#xA;&lt;p&gt;NotificationBanner is an extremely customizable and lightweight library that makes the task of displaying in app notification banners and drop down alerts an absolute breeze in iOS.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Basic Banners&lt;/th&gt; &#xA;   &lt;th&gt;Banners with Side Views&lt;/th&gt; &#xA;   &lt;th&gt;Status Bar Banners&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/basic.gif&#34; alt=&#34;Basic Banners&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/side_views.gif&#34; alt=&#34;Banners with Side Views&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/status_bar.gif&#34; alt=&#34;Status Bar Banners&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Growing Banners&lt;/th&gt; &#xA;   &lt;th&gt;Floating Banners&lt;/th&gt; &#xA;   &lt;th&gt;Stacked Banners&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/growing.gif&#34; alt=&#34;Growing Banners&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/floating.gif&#34; alt=&#34;Floating Banners&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/stacked.gif&#34; alt=&#34;Floating Banners&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Highly customizable ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NSAttributedString&lt;/code&gt; support ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;iPhone, iPhoneX, &amp;amp; iPad Support ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;Orientation change support ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;Custom &lt;code&gt;UIView&lt;/code&gt; support ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;Custom colors support ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;Support for long titles/ subtitles ‚úÖ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;NotificationBanner&lt;/code&gt; uses horizontal scrolling labels&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GrowingNotificationBanner&lt;/code&gt; grows in height as needed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Presenting from top or bottom support ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;Haptic feeback support ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;Built in banner queue ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;Allow to display several banners simultaneously, configurable in banners queue ‚úÖ&lt;/li&gt; &#xA; &lt;li&gt;Accessibility support ‚úÖ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;NotificationBanner is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;h4&gt;Swift 5 + Xcode 11 + iOS 13 Support&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;NotificationBannerSwift&#39;, &#39;~&amp;gt; 3.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift 5 + Xcode 10.x&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;NotificationBannerSwift&#39;, &#39;2.5.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift 4.2&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;NotificationBannerSwift&#39;, &#39;2.0.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift 4.0&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;NotificationBannerSwift&#39;, &#39;1.6.3&#39;&#xA;pod &#39;MarqueeLabel/Swift&#39;, &#39;3.1.6&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add &lt;code&gt;import NotificationBannerSwift&lt;/code&gt; at the top of each file you use NotificationBanner in your project.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To use NotificationBanner via Carthage simply add this line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h4&gt;Swift 5&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;github &#34;Daltron/NotificationBanner&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add &lt;code&gt;NotificationBanner.framework&lt;/code&gt; and the dependencies &lt;code&gt;SnapKit.framework&lt;/code&gt; and &lt;code&gt;MarqueeLabel.framework&lt;/code&gt; in your project.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;You can also add this library as swift package manager.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to File &amp;gt; Add Packages&lt;/li&gt; &#xA; &lt;li&gt;The Add Package dialog appears, by default with Apple packages.&lt;/li&gt; &#xA; &lt;li&gt;In the upper right hand corner, paste &lt;a href=&#34;https://github.com/Daltron/NotificationBanner&#34;&gt;https://github.com/Daltron/NotificationBanner&lt;/a&gt; into the search bar&lt;/li&gt; &#xA; &lt;li&gt;Hit Return to kick off the search&lt;/li&gt; &#xA; &lt;li&gt;Click Add Package.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Creating drop down alerts with NotificationBanner is easy. To create a regular banner (with scrolling labels) and show it, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner = NotificationBanner(title: title, subtitle: subtitle, style: .success)&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to create a banner which grows in height as needed and show it accordingly just use &lt;code&gt;GrowingNotificationBanner&lt;/code&gt; instead of &lt;code&gt;NotificationBanner&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner = GrowingNotificationBanner(title: title, subtitle: subtitle, style: .success)&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a status bar alert, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner = StatusBarNotificationBanner(title: title, style: .success)&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, each banner will be displayed on the main application window. If you are wanting to show a banner below a navigation bar, simply show on the view controller that is within the navigation system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.show(on: viewController)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, each banner will present from the top. If you are wanting to display from the bottom, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.show(bannerPosition: .bottom)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each of the show properties defined above can be mixed and matched to work flawlessly with eachother.&lt;/p&gt; &#xA;&lt;p&gt;By default, each banner will automatically dismiss after 5 seconds. To dismiss programatically, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.dismiss()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To show a banner infinitely until it is manually dismissed, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.autoDismiss = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NotificationBanner has five prebuilt styles that you can choose from:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum BannerStyle {&#xA;    case danger&#xA;    case info&#xA;    case customView&#xA;    case success&#xA;    case warning&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override the predefined colors that NotificationBanner uses for any style by conforming to the &lt;code&gt;BannerColorsProtocol&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol BannerColorsProtocol {&#xA;    func color(for style: BannerStyle) -&amp;gt; UIColor&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Its as easy as creating a custom banner colors class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class CustomBannerColors: BannerColorsProtocol {&#xA;&#xA;    internal func color(for style: BannerStyle) -&amp;gt; UIColor {&#xA;        switch style {&#xA;            case .danger:&#x9;// Your custom .danger color&#xA;            case .info:&#x9;&#x9;// Your custom .info color&#xA;            case .customView:&#x9;// Your custom .customView color&#xA;            case .success:&#x9;// Your custom .success color&#xA;            case .warning:&#x9;// Your custom .warning color&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then passing in that class to any notification banner you create:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner = NotificationBanner(title: title, style: .success, colors: CustomBannerColors())&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;.info&lt;/code&gt; style will be applied to the banner if no style is provided in the init method. You can set the background color of a banner at any time by simply setting the &lt;code&gt;backgroundColor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Banners with Side Views&lt;/h3&gt; &#xA;&lt;p&gt;A notification banner can have a left accessory view, a right accessory view, or both:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Success Style Notification with Left View&#xA;let leftView = UIImageView(image: #imageLiteral(resourceName: &#34;success&#34;))&#xA;let banner = NotificationBanner(title: title, subtitle: subtitle, leftView: leftView, style: .success)&#xA;banner.show()&#xA;&#xA; // Danger Style Notification with Right View&#xA;let rightView = UIImageView(image: #imageLiteral(resourceName: &#34;danger&#34;))&#xA;let banner = NotificationBanner(title: title, subtitle: subtitle, rightView: rightView, style: .danger)&#xA;banner.show()    &#xA;&#xA;// Info Style Notification with Left and Right Views&#xA;let leftView = UIImageView(image: #imageLiteral(resourceName: &#34;info&#34;))&#xA;let rightView = UIImageView(image: #imageLiteral(resourceName: &#34;right_chevron&#34;))&#xA;let banner = NotificationBanner(title: title, subtitle: subtitle, leftView: leftView, rightView: rightView, style: .info)&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/side_views.gif&#34; alt=&#34;Banners with Side Views&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each side view will be automically reisized to fit perfectly&lt;/p&gt; &#xA;&lt;h3&gt;Banners with a Custom View&lt;/h3&gt; &#xA;&lt;p&gt;A notification banner can also be initalized with a custom view:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner = NotificationBanner(customView: NorthCarolinaBannerView())&#xA;banner.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/NotificationBanner/Assets/custom.gif&#34; alt=&#34;Custom Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Handling User Interaction&lt;/h3&gt; &#xA;&lt;p&gt;By default, when a banner is tapped or swiped up by a user, it will be dismissed. If you want to detect when the user taps or swipes up on a banner, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.onTap = {&#xA;&#x9;// Do something regarding the banner&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.onSwipeUp = {&#xA;&#x9;// Do something regarding the banner&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Banner Events&lt;/h3&gt; &#xA;&lt;p&gt;You can choose to opt into a notification banner&#39;s events by registering as its delegate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.delegate = self&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just make sure to implement the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func notificationBannerWillAppear(_ banner: BaseNotificationBanner)&#xA;func notificationBannerDidAppear(_ banner: BaseNotificationBanner)&#xA;func notificationBannerWillDisappear(_ banner: BaseNotificationBanner)&#xA;func notificationBannerDidDisappear(_ banner: BaseNotificationBanner)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Haptic Feedback Support&lt;/h2&gt; &#xA;&lt;p&gt;By default, when a banner is displayed, a haptic feedback will be generated on devices that support it. The types of haptic feedback are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum BannerHaptic {&#xA;&#x9;case light&#xA;   &#x9;case medium&#xA;&#x9;case heavy&#xA;  &#x9;case none&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the type of haptic feedback to generate when a banner is shown, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.haptic = .heavy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Banner Queue&lt;/h2&gt; &#xA;&lt;p&gt;By default, each notification banner is placed onto a singleton of an auto-managed &lt;code&gt;NotificationBannerQueue&lt;/code&gt;. This allows an infinite amount of banners to be displayed without one hiding the other. If you have multiple controllers within your navigation stack that need to be managed by a seperate queue (like a tab bar controller), simply create an instance of a &lt;code&gt;NotificationBannerQueue&lt;/code&gt; and pass it in to the show function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.show(queue: customQueue)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, each notification banner is placed on the back of the queue. If you would rather place the banner in the front and show it immediately no matter how many banners are in the queue, simply state it in the &lt;code&gt;show()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;banner.show(queuePosition: .front)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding a banner to the front of the queue will temporarily suspend the currently displayed banner (if there is one) and will resume it after the banner in front of it dismisses.&lt;/p&gt; &#xA;&lt;p&gt;To get the number of banners currently on the queue, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let numberOfBanners = NotificationBannerQueue.default.numberOfBanners&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;This is all automatically managed!&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Banner Queue and display banners simultaneously (stacked)&lt;/h2&gt; &#xA;&lt;p&gt;You can also create the queue to display several banners at once with controlling of maximum number of banners to be displayed simultaneously. You can &#34;show&#34; more banners than allowed by queue settings - banners what exceed this value will be displayed some time later, after some banners already displayed on screen will be closed. In example below we create queue with maximum simultaneous banners allowed - 3:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bannerQueueToDisplaySeveralBanners = NotificationBannerQueue(maxBannersOnScreenSimultaneously: 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create five different banners:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let banner1 = FloatingNotificationBanner(&#xA;&#x9;title: &#34;Success Notification - 1&#34;,&#xA;&#x9;subtitle: &#34;First Notification from 5 in current queue with 3 banners allowed simultaneously&#34;,&#xA;&#x9;style: .success&#xA;)&#xA;banner1.delegate = self&#xA;&#xA;let banner2 = FloatingNotificationBanner(&#xA;&#x9;title: &#34;Danger Notification - 2&#34;,&#xA;&#x9;subtitle: &#34;Second Notification from 5 in current queue with 3 banners allowed simultaneously&#34;,&#xA;&#x9;style: .danger&#xA;)&#xA;banner2.delegate = self&#xA;&#xA;let banner3 = FloatingNotificationBanner(&#xA;&#x9;title: &#34;Info Notification - 3&#34;,&#xA;&#x9;subtitle: &#34;Third Notification from 5 in current queue with 3 banners allowed simultaneously&#34;,&#xA;&#x9;style: .info&#xA;)&#xA;banner3.delegate = self&#xA;&#xA;let banner4 = FloatingNotificationBanner(&#xA;&#x9;title: &#34;Success Notification - 4&#34;,&#xA;&#x9;subtitle: &#34;Fourth Notification from 5 in current queue with 3 banners allowed simultaneously&#34;,&#xA;&#x9;style: .success&#xA;)&#xA;banner4.delegate = self&#xA;&#xA;let banner5 = FloatingNotificationBanner(&#xA;&#x9;title: &#34;Info Notification - 5&#34;,&#xA;&#x9;subtitle: &#34;Fifth Notification from 5 in current queue with 3 banners allowed simultaneously&#34;,&#xA;&#x9;style: .info&#xA;)&#xA;banner5.delegate = self&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and show all five banners at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;showBanners(&#xA;&#x9;[banner1, banner2, banner3, banner4, banner5],&#xA;&#x9;in: bannerQueue5AllowedMixed&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;using this supporting method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func showBanners(&#xA;&#x9;_ banners: [FloatingNotificationBanner],&#xA;&#x9;in notificationBannerQueue: NotificationBannerQueue&#xA;) {&#xA;    banners.forEach { banner in&#xA;      &#x9;banner.show(&#xA;&#x9;      &#x9;bannerPosition: selectedBannerPosition(),&#xA;&#x9;&#x9; &#x9;queue: notificationBannerQueue,&#xA;&#x9;&#x9; &#x9;cornerRadius: 8,&#xA;&#x9;&#x9;&#x9;shadowColor: UIColor(red: 0.431, green: 0.459, blue: 0.494, alpha: 1),&#xA;&#x9;&#x9;  &#x9;shadowBlurRadius: 16,&#xA;&#x9;&#x9;&#x9;shadowEdgeInsets: UIEdgeInsets(top: 8, left: 8, bottom: 0, right: 8)&#xA;&#x9;   )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will display first three banners at once, and after some time (or by user tap) it will be hidden and 4 and 5 banner will be displayed when. All it with fancy animation.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;d love to know anything that you think NotificationBanner is missing. Open an issue and I&#39;ll add the &lt;code&gt;feature request&lt;/code&gt; label to it and I&#39;ll do everything I can to accomodate that request if it is in the library&#39;s best interest. üòÑ&lt;/p&gt; &#xA;&lt;h2&gt;Apps that Use NotificationBanner&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/q-talk-about-music/id1071551321?mt=8&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/q_talk_about_music.jpg&#34; alt=&#34;Q - Talk About Music&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/vh-dispatch/id1249569084&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/vh_dispatch.png&#34; alt=&#34;VH Dispatch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/stikkr/id851375015&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/stikkr.png&#34; alt=&#34;Stikkr&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/cardcast-business-cards/id1269278947&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/cardcast.png&#34; alt=&#34;CardCast&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/happy-scale/id532430574&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/happy_scale.png&#34; alt=&#34;Happy Scale&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/wanderings-travel-tracking/id1292503352&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/wanderings.png&#34; alt=&#34;Wanderings&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/modern-magic-8-ball/id1381145384&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/modernmagic8ball.png&#34; alt=&#34;Modern Magic 8 Ball&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/app/envision-habits-tracker/id1423771095&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/envision.png&#34; alt=&#34;Envision: Habits Tracker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/ru/app/%D1%86%D1%83%D0%BC-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%BD%D0%B5%D1%82-%D0%BC%D0%B0%D0%B3%D0%B0%D0%B7%D0%B8%D0%BD-%D0%BE%D0%B4%D0%B5%D0%B6%D0%B4%D1%8B/id1089560311&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/tsum.png&#34; alt=&#34;TSUM&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/ru/app/%D1%80%D0%B5%D1%81%D1%82%D0%BE%D1%80%D0%B0%D0%BD%D1%8B-%D1%80%D0%B8%D1%81-%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7-%D0%B4%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BA%D0%B0/id932844115&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/ris.png&#34; alt=&#34;RIS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/ru/app/luka-pizza-%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7-%D0%B8-%D0%B4%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BA%D0%B0/id1202155629&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Daltron/NotificationBanner/master/AppIcons/lukapizza.png&#34; alt=&#34;LukaPizza&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Feel free to add yours!&lt;/h4&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Dalton Hinterscher, &lt;a href=&#34;mailto:daltonhint4@gmail.com&#34;&gt;daltonhint4@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;NotificationBanner is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>krzysztofzablocki/Sourcery</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/krzysztofzablocki/Sourcery</id>
    <link href="https://github.com/krzysztofzablocki/Sourcery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Meta-programming for Swift, stop writing boilerplate code.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/krzysztofzablocki/Sourcery&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/krzysztofzablocki/Sourcery.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![codecov](https://codecov.io/gh/krzysztofzablocki/Sourcery/branch/master/graph/badge.svg)](https://codecov.io/gh/krzysztofzablocki/Sourcery) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://merowing.info/Sourcery/index.html&#34;&gt;&lt;img src=&#34;https://merowing.info/Sourcery/badge.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Sourcery&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Sourcery.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Sourcery&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Sourcery.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Sourcery&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Sourcery.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;There is now a new powerful way to both write and integrate Sourcery functionality: Sourcery Pro provides powerful Stencil editor and extends Xcode with ability to handle live AST templates: &lt;a href=&#34;https://apps.apple.com/us/app/sourcery-pro/id1561780836?mt=12&#34;&gt;available on Mac App Store&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1468993/114271090-f6c19200-9a0f-11eb-9bd8-d7bb15129eb2.mp4&#34;&gt;https://user-images.githubusercontent.com/1468993/114271090-f6c19200-9a0f-11eb-9bd8-d7bb15129eb2.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://merowing.info/sourcery-pro/&#34;&gt;Learn more about Sourcery Pro&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/Resources/icon-128.png&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sourcery&lt;/strong&gt; is a code generator for Swift language, built on top of Apple&#39;s own SwiftSyntax. It extends the language abstractions to allow you to generate boilerplate code automatically.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s used in over 40,000 projects on both iOS and macOS and it powers some of the most popular and critically-acclaimed apps you have used (including Airbnb, Bumble, New York Times). Its massive community adoption was one of the factors that pushed Apple to implement derived Equality and automatic Codable conformance. Sourcery is maintained by a growing community of &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Try &lt;strong&gt;Sourcery&lt;/strong&gt; for your next project or add it to an existing one -- you&#39;ll save a lot of time and be happy you did!&lt;/p&gt; &#xA;&lt;h2&gt;TL;DR&lt;/h2&gt; &#xA;&lt;p&gt;Sourcery allows you to get rid of repetitive code and create better architecture and developer workflows. An example might be implementing &lt;code&gt;Mocks&lt;/code&gt; for all your protocols, without Sourcery you will need to write &lt;strong&gt;hundreds lines of code per each protocol&lt;/strong&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyProtocolMock: MyProtocol {&#xA;&#xA;    //MARK: - sayHelloWith&#xA;    var sayHelloWithNameCallsCount = 0&#xA;    var sayHelloWithNameCalled: Bool {&#xA;        return sayHelloWithNameCallsCount &amp;gt; 0&#xA;    }&#xA;    var sayHelloWithNameReceivedName: String?&#xA;    var sayHelloWithNameReceivedInvocations: [String] = []&#xA;    var sayHelloWithNameClosure: ((String) -&amp;gt; Void)?&#xA;&#xA;    func sayHelloWith(name: String) {&#xA;        sayHelloWithNameCallsCount += 1&#xA;        sayHelloWithNameReceivedName = name&#xA;        sayHelloWithNameReceivedInvocations.append(name)&#xA;        sayHelloWithNameClosure?(name)&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and with Sourcery ?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension MyProtocol: AutoMockable {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sourcery removes the need to write any of the mocks code, how many protocol do you have in your project? Imagine how much time you&#39;ll save, using Sourcery will also make every single mock consistent and if you refactor or add properties, the mock code will be automatically updated for you, eliminating possible human errors.&lt;/p&gt; &#xA;&lt;p&gt;Sourcery can be applied to arbitrary problems across your codebase, if you can describe an algorithm to another human, you can automate it using Sourcery.&lt;/p&gt; &#xA;&lt;p&gt;Most common uses are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/equatable.html&#34;&gt;Equality&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://merowing.info/Sourcery/hashable.html&#34;&gt;Hashing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/enum-cases.html&#34;&gt;Enum cases &amp;amp; Counts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/lenses.html&#34;&gt;Lenses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/mocks.html&#34;&gt;Mocks &amp;amp; Stubs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/linuxmain.html&#34;&gt;LinuxMain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/decorator.html&#34;&gt;Decorators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/codable.html&#34;&gt;Persistence and advanced Codable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/diffable.html&#34;&gt;Property level diffing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But how about more specific use-cases, like automatically generating all the UI for your app &lt;code&gt;BetaSetting&lt;/code&gt;? &lt;a href=&#34;https://github.com/krzysztofzablocki/AutomaticSettings&#34;&gt;you can use Sourcery for that too&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you start writing your own template and learn the power of Sourcery you won&#39;t be able to live without it.&lt;/p&gt; &#xA;&lt;h2&gt;How To Get Started&lt;/h2&gt; &#xA;&lt;p&gt;There are plenty of tutorials for different uses of Sourcery, and you can always ask for help in our &lt;a href=&#34;https://forums.swift.org/c/related-projects/sourcery&#34;&gt;Swift Forum Category&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.caseyliss.com/2017/3/31/the-magic-of-sourcery&#34;&gt;The Magic of Sourcery&lt;/a&gt; is a great starting tutorial&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/158803/sourcery-tutorial-generating-swift-code-ios&#34;&gt;Generating Swift Code for iOS&lt;/a&gt; deals with JSON handling code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atomicrobot.io/blog/sourcery/&#34;&gt;How To Automate Swift Boilerplate with Sourcery&lt;/a&gt; generates conversions to dictionaries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://littlebitesofcocoa.com/318-codable-enums&#34;&gt;Codable Enums&lt;/a&gt; implements Codable support for Enumerations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/SourceryWorkshops&#34;&gt;Sourcery Workshops&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Mocking Intro &amp;amp; Getting Started Video&lt;/h3&gt; &#xA;&lt;p&gt;You can also watch this quick getting started and intro to mocking video by Inside iOS Dev: &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/-ZbBNuttlt4?t=214&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/Resources/Inside-iOS-Dev-Sourcery-Intro-To-Mocking-Video-Thumbnail.png&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Binary form&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Download the latest release with the prebuilt binary from &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/releases/latest&#34;&gt;release tab&lt;/a&gt;. Unzip the archive into the desired destination and run &lt;code&gt;bin/sourcery&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;brew install sourcery&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Add &lt;code&gt;pod &#39;Sourcery&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt; and run &lt;code&gt;pod update Sourcery&lt;/code&gt;. This will download the latest release binary and will put it in your project&#39;s CocoaPods path so you will run it with &lt;code&gt;$PODS_ROOT/Sourcery/bin/sourcery&lt;/code&gt;&lt;/p&gt; &lt;p&gt;If you only want to install the &lt;code&gt;sourcery&lt;/code&gt; binary, you may want to use the &lt;code&gt;CLI-Only&lt;/code&gt; subspec: &lt;code&gt;pod &#39;Sourcery&#39;, :subspecs =&amp;gt; [&#39;CLI-Only&#39;]&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/yonaskolb/Mint&#34;&gt;Mint&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;mint run krzysztofzablocki/Sourcery&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Building from Source&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Download the latest release source code from &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/releases/latest&#34;&gt;the release tab&lt;/a&gt; or clone the repository and build Sourcery manually.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Building with Swift Package Manager&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Run &lt;code&gt;swift build -c release&lt;/code&gt; in the root folder and then copy &lt;code&gt;.build/release/sourcery&lt;/code&gt; to your desired destination.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;Note: JS templates are not supported when building with SPM yet.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Building with Xcode&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Run &lt;code&gt;xcodebuild -scheme sourcery -destination generic/platform=macOS -archivePath sourcery.xcarchive archive&lt;/code&gt; and export the binary from the archive.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation for the latest release is available &lt;a href=&#34;http://merowing.info/Sourcery/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Sourcery is a command line tool; you can either run it manually or in a custom build phase using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./bin/sourcery --sources &amp;lt;sources path&amp;gt; --templates &amp;lt;templates path&amp;gt; --output &amp;lt;output path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: this command differs depending on how you installed Sourcery (see &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/#installing&#34;&gt;Installing&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Command line options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--sources&lt;/code&gt; - Path to a source swift files or directories. You can provide multiple paths using multiple &lt;code&gt;--sources&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--templates&lt;/code&gt; - Path to templates. File or Directory. You can provide multiple paths using multiple &lt;code&gt;--templates&lt;/code&gt; options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--force-parse&lt;/code&gt; - File extensions of Sourcery generated file you want to parse. You can provide multiple extension using multiple &lt;code&gt;--force-parse&lt;/code&gt; options. (i.e. &lt;code&gt;file.toparse.swift&lt;/code&gt; will be parsed even if generated by Sourcery if &lt;code&gt;--force-parse toparse&lt;/code&gt;). Useful when trying to implement a multiple phases generation. &lt;code&gt;--force-parse&lt;/code&gt; can also be used to process within a sourcery annotation. For example to process code within &lt;code&gt;sourcery:inline:auto:Type.AutoCodable&lt;/code&gt; annotation you can use &lt;code&gt;--force-parse AutoCodable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--output&lt;/code&gt; [default: current path] - Path to output. File or Directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--config&lt;/code&gt; [default: current path] - Path to config file. File or Directory. See &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/#configuration-file&#34;&gt;Configuration file&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--args&lt;/code&gt; - Additional arguments to pass to templates. Each argument can have an explicit value or will have implicit &lt;code&gt;true&lt;/code&gt; value. Arguments should be separated with &lt;code&gt;,&lt;/code&gt; without spaces (i.e. &lt;code&gt;--args arg1=value,arg2&lt;/code&gt;). Arguments are accessible in templates via &lt;code&gt;argument.name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--watch&lt;/code&gt; [default: false] - Watch both code and template folders for changes and regenerate automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--verbose&lt;/code&gt; [default: false] - Turn on verbose logging&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--quiet&lt;/code&gt; [default: false] - Turn off any logging, only emit errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--disableCache&lt;/code&gt; [default: false] - Turn off caching of parsed data&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--prune&lt;/code&gt; [default: false] - Prune empty generated files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt; - Display the current version of Sourcery&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--help&lt;/code&gt; - Display help information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration file&lt;/h3&gt; &#xA;&lt;p&gt;Instead of CLI arguments you can use a &lt;code&gt;.sourcery.yml&lt;/code&gt; configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sources:&#xA;  - &amp;lt;sources path&amp;gt;&#xA;  - &amp;lt;sources path&amp;gt;&#xA;templates:&#xA;  - &amp;lt;templates path&amp;gt;&#xA;  - &amp;lt;templates path&amp;gt;&#xA;force-parse:&#xA;  - &amp;lt;string value&amp;gt;&#xA;  - &amp;lt;string value&amp;gt;&#xA;output:&#xA;  &amp;lt;output path&amp;gt;&#xA;args:&#xA;  &amp;lt;name&amp;gt;: &amp;lt;value&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about this configuration file &lt;a href=&#34;https://merowing.info/Sourcery/usage.html#configuration-file&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you get unverified developer warning when using binary zip distribution try: &lt;code&gt;xattr -dr com.apple.quarantine Sourcery-1.1.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Sourcery are welcomed and encouraged!&lt;/p&gt; &#xA;&lt;p&gt;It is easy to get involved. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/graphs/contributors&#34;&gt;A list of contributors is available through GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To clarify what is expected of our community, Sourcery has adopted the code of conduct defined by the Contributor Covenant. This document is used across many open source communities, and articulates my values well. For more, see the &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsoring&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to support Sourcery development you can do so through &lt;a href=&#34;https://github.com/sponsors/krzysztofzablocki&#34;&gt;GitHub Sponsors&lt;/a&gt; or &lt;a href=&#34;https://opencollective.com/sourcery&#34;&gt;Open Collective&lt;/a&gt;, it&#39;s highly appreciated üôá‚Äç&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Sourcery is available under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;p&gt;This tool is powered by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylef/Stencil&#34;&gt;Stencil&lt;/a&gt; and few other libs by &lt;a href=&#34;https://github.com/kylef&#34;&gt;Kyle Fuller&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you! to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/faktory&#34;&gt;Mariusz Ostrowski&lt;/a&gt; for creating the logo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/artsy/eidolon&#34;&gt;Artsy Eidolon&lt;/a&gt; team, because we use their codebase as a stub data for performance testing the parser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AliSoftware&#34;&gt;Olivier Halligon&lt;/a&gt; for showing me his setup scripts for CLI tools which are powering our rakefile.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpsim&#34;&gt;JP Simard&lt;/a&gt; for creating &lt;a href=&#34;https://github.com/jpsim/SourceKitten&#34;&gt;SourceKitten&lt;/a&gt; that originally powered Sourcery and was instrumental in making this project happen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Libraries / Tools&lt;/h2&gt; &#xA;&lt;p&gt;If you want to generate code for asset related data like .xib, .storyboards etc. use &lt;a href=&#34;https://github.com/AliSoftware/SwiftGen&#34;&gt;SwiftGen&lt;/a&gt;. SwiftGen and Sourcery are complementary tools.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to check my other libraries and tools, especially:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/KZPlayground&#34;&gt;KZPlayground&lt;/a&gt; - Powerful playgrounds for Swift and Objective-C&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/KZFileWatchers&#34;&gt;KZFileWatchers&lt;/a&gt; - Daemon for observing local and remote file changes, used for building other developer tools (Sourcery uses it)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;http://twitter.com/merowing_&#34;&gt;follow me on Twitter&lt;/a&gt; for news/updates about other projects I am creating.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ReactiveX/RxSwift</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/ReactiveX/RxSwift</id>
    <link href="https://github.com/ReactiveX/RxSwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reactive Programming in Swift&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/RxSwift_Logo.png&#34; width=&#34;35%&#34; alt=&#34;RxSwift Logo&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/ReactiveX/RxSwift/goto&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/ReactiveX/RxSwift/workflows/RxSwift/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-333333.svg?sanitize=true&#34; alt=&#34;Supported Platforms: iOS, macOS, tvOS, watchOS &amp;amp; Linux&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://cocoapods.org/pods/RxSwift&#34; alt=&#34;RxSwift on CocoaPods&#34; title=&#34;RxSwift on CocoaPods&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/RxSwift.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34; alt=&#34;RxSwift on Carthage&#34; title=&#34;RxSwift on Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34; alt=&#34;RxSwift on Swift Package Manager&#34; title=&#34;RxSwift on Swift Package Manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Rx is a &lt;a href=&#34;https://youtu.be/looJcaeboBY&#34;&gt;generic abstraction of computation&lt;/a&gt; expressed through &lt;code&gt;Observable&amp;lt;Element&amp;gt;&lt;/code&gt; interface, which lets you broadcast and subscribe to values and other events from an &lt;code&gt;Observable&lt;/code&gt; stream.&lt;/p&gt; &#xA;&lt;p&gt;RxSwift is the Swift-specific implementation of the &lt;a href=&#34;http://reactivex.io&#34;&gt;Reactive Extensions&lt;/a&gt; standard.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/example.png&#34; width=&#34;55%&#34; alt=&#34;RxSwift Observable Example of a price constantly changing and updating the app&#39;s UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;While this version aims to stay true to the original spirit and naming conventions of Rx, this projects also aims to provide a true Swift-first API for Rx APIs.&lt;/p&gt; &#xA;&lt;p&gt;Cross platform documentation can be found on &lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Like other Rx implementation, RxSwift&#39;s intention is to enable easy composition of asynchronous operations and streams of data in the form of &lt;code&gt;Observable&lt;/code&gt; objects and a suite of methods to transform and compose these pieces of asynchronous work.&lt;/p&gt; &#xA;&lt;p&gt;KVO observation, async operations, UI Events and other streams of data are all unified under &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#observables-aka-sequences&#34;&gt;abstraction of sequence&lt;/a&gt;. This is the reason why Rx is so simple, elegant and powerful.&lt;/p&gt; &#xA;&lt;h2&gt;I came here because I want to ...&lt;/h2&gt; &#xA;&lt;h6&gt;... understand&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Why.md&#34;&gt;why use rx?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md&#34;&gt;the basics, getting started with RxSwift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Traits.md&#34;&gt;traits&lt;/a&gt; - what are &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Completable&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Driver&lt;/code&gt;, and &lt;code&gt;ControlProperty&lt;/code&gt; ... and why do they exist?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/UnitTests.md&#34;&gt;testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Tips.md&#34;&gt;tips and common errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#debugging&#34;&gt;debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/MathBehindRx.md&#34;&gt;the math behind Rx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/HotAndColdObservables.md&#34;&gt;what are hot and cold observable sequences?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... install&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrate RxSwift/RxCocoa with my app. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/#installation&#34;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... hack around&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with the example app. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/ExampleApp.md&#34;&gt;Running Example App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;with operators in playgrounds. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Playgrounds.md&#34;&gt;Playgrounds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... interact&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All of this is great, but it would be nice to talk with other people using RxSwift and exchange experiences. &lt;br&gt;&lt;a href=&#34;http://slack.rxswift.org&#34;&gt;Join Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Report a problem using the library. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/.github/ISSUE_TEMPLATE.md&#34;&gt;Open an Issue With Bug Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Request a new feature. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/NewFeatureRequestTemplate.md&#34;&gt;Open an Issue With Feature Request Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Help out &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/CONTRIBUTING.md&#34;&gt;Check out contribution guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... compare&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/ComparisonWithOtherLibraries.md&#34;&gt;with Combine and ReactiveSwift&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... understand the structure&lt;/h6&gt; &#xA;&lt;p&gt;RxSwift is as compositional as the asynchronous work it drives. The core unit is RxSwift itself, while other dependencies can be added for UI Work, testing, and more.&lt;/p&gt; &#xA;&lt;p&gt;It comprises five separate components depending on each other in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;‚îÇ   RxCocoa    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂   RxRelay    ‚îÇ&#xA;‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;        ‚îÇ                  ‚îÇ        &#xA;‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;‚îÇ             RxSwift              ‚îÇ&#xA;‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;        ‚îÇ                  ‚îÇ        &#xA;‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;‚îÇ    RxTest    ‚îÇ    ‚îÇ  RxBlocking  ‚îÇ&#xA;‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxSwift&lt;/strong&gt;: The core of RxSwift, providing the Rx standard as (mostly) defined by &lt;a href=&#34;https://reactivex.io&#34;&gt;ReactiveX&lt;/a&gt;. It has no other dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxCocoa&lt;/strong&gt;: Provides Cocoa-specific capabilities for general iOS/macOS/watchOS &amp;amp; tvOS app development, such as Shared Sequences, Traits, and much more. It depends on both &lt;code&gt;RxSwift&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxRelay&lt;/strong&gt;: Provides &lt;code&gt;PublishRelay&lt;/code&gt;, &lt;code&gt;BehaviorRelay&lt;/code&gt; and &lt;code&gt;ReplayRelay&lt;/code&gt;, three &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/Subjects.md#relays&#34;&gt;simple wrappers around Subjects&lt;/a&gt;. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxTest&lt;/strong&gt; and &lt;strong&gt;RxBlocking&lt;/strong&gt;: Provides testing capabilities for Rx-based systems. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;30%&#34;&gt;Here&#39;s an example&lt;/th&gt; &#xA;   &lt;th width=&#34;30%&#34;&gt;In Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Define search for GitHub repositories ...&lt;/td&gt; &#xA;   &lt;th rowspan=&#34;9&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/GithubSearch.gif&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div class=&#34;highlight highlight-source-swift&#34;&gt;&#xA;     &lt;pre&gt;&#xA;let searchResults = searchBar.rx.text.orEmpty&#xA;    .throttle(.milliseconds(300), scheduler: MainScheduler.instance)&#xA;    .distinctUntilChanged()&#xA;    .flatMapLatest { query -&amp;gt; Observable&amp;lt;[Repository]&amp;gt; in&#xA;        if query.isEmpty {&#xA;            return .just([])&#xA;        }&#xA;        return searchGitHub(query)&#xA;            .catchAndReturn([])&#xA;    }&#xA;    .observe(on: MainScheduler.instance)&lt;/pre&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;... then bind the results to your tableview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;30%&#34;&gt;&#xA;    &lt;div class=&#34;highlight highlight-source-swift&#34;&gt;&#xA;     &lt;pre&gt;&#xA;searchResults&#xA;    .bind(to: tableView.rx.items(cellIdentifier: &#34;Cell&#34;)) {&#xA;        (index, repository: Repository, cell) in&#xA;        cell.textLabel?.text = repository.name&#xA;        cell.detailTextLabel?.text = repository.url&#xA;    }&#xA;    .disposed(by: disposeBag)&lt;/pre&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.x&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Xcode 11 and below, &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/releases/tag/5.1.1&#34;&gt;use RxSwift 5.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;RxSwift doesn&#39;t contain any external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;These are currently the supported installation options:&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Open Rx.xcworkspace, choose &lt;code&gt;RxExample&lt;/code&gt; and hit run. This method will build everything and run the sample app&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Podfile&#xA;use_frameworks!&#xA;&#xA;target &#39;YOUR_TARGET_NAME&#39; do&#xA;    pod &#39;RxSwift&#39;, &#39;6.5.0&#39;&#xA;    pod &#39;RxCocoa&#39;, &#39;6.5.0&#39;&#xA;end&#xA;&#xA;# RxTest and RxBlocking make the most sense in the context of unit/integration tests&#xA;target &#39;YOUR_TESTING_TARGET&#39; do&#xA;    pod &#39;RxBlocking&#39;, &#39;6.5.0&#39;&#xA;    pod &#39;RxTest&#39;, &#39;6.5.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;YOUR_TARGET_NAME&lt;/code&gt; and then, in the &lt;code&gt;Podfile&lt;/code&gt; directory, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;XCFrameworks&lt;/h3&gt; &#xA;&lt;p&gt;Each release starting with RxSwift 6 includes &lt;code&gt;*.xcframework&lt;/code&gt; framework binaries.&lt;/p&gt; &#xA;&lt;p&gt;Simply drag the needed framework binaries to your &lt;strong&gt;Frameworks, Libraries, and Embedded Content&lt;/strong&gt; section under your target&#39;s &lt;strong&gt;General&lt;/strong&gt; tab.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using &lt;code&gt;RxCocoa&lt;/code&gt;, be sure to also drag &lt;strong&gt;RxCocoaRuntime.xcframework&lt;/strong&gt; before importing &lt;code&gt;RxCocoa&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/xcframeworks.png&#34; alt=&#34;XCFrameworks instructions&#34; width=&#34;65%&#34;&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;ReactiveX/RxSwift&#34; &#34;6.5.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage as a Static Library&lt;/h4&gt; &#xA;&lt;p&gt;Carthage defaults to building RxSwift as a Dynamic Library.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to build RxSwift as a Static Library using Carthage you may use the script below to manually modify the framework type before building with Carthage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;carthage update RxSwift --platform iOS --no-build&#xA;sed -i -e &#39;s/MACH_O_TYPE = mh_dylib/MACH_O_TYPE = staticlib/g&#39; Carthage/Checkouts/RxSwift/Rx.xcodeproj/project.pbxproj&#xA;carthage build RxSwift --platform iOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is a critical cross-dependency bug affecting many projects including RxSwift in Swift Package Manager. We&#39;ve &lt;a href=&#34;https://bugs.swift.org/browse/SR-12303&#34;&gt;filed a bug (SR-12303)&lt;/a&gt; in early 2020 but have no answer yet. Your mileage may vary. A partial workaround can be found &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/issues/2127#issuecomment-717830502&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.0&#xA;&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;RxTestProject&#34;,&#xA;  dependencies: [&#xA;    .package(url: &#34;https://github.com/ReactiveX/RxSwift.git&#34;, .exact(&#34;6.5.0&#34;))&#xA;  ],&#xA;  targets: [&#xA;    .target(name: &#34;RxTestProject&#34;, dependencies: [&#34;RxSwift&#34;, &#34;RxCocoa&#34;])&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build or test a module with RxTest dependency, set &lt;code&gt;TEST=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ TEST=1 swift test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually using git submodules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add RxSwift as a submodule&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add git@github.com:ReactiveX/RxSwift.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag &lt;code&gt;Rx.xcodeproj&lt;/code&gt; into Project Navigator&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Project &amp;gt; Targets &amp;gt; Build Phases &amp;gt; Link Binary With Libraries&lt;/code&gt;, click &lt;code&gt;+&lt;/code&gt; and select &lt;code&gt;RxSwift&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt; targets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://reactivex.io/&#34;&gt;http://reactivex.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Reactive-Extensions&#34;&gt;Reactive Extensions GitHub (GitHub)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://store.raywenderlich.com/products/rxswift-reactive-programming-with-swift&#34;&gt;RxSwift RayWenderlich.com Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GdvLP0ZAhhc&#34;&gt;RxSwift: Debunking the myth of hard (YouTube)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://boxueio.com/series/rxswift-101&#34;&gt;Boxue.io RxSwift Online Course&lt;/a&gt; (Chinese üá®üá≥)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/looJcaeboBY&#34;&gt;Expert to Expert: Brian Beckman and Erik Meijer - Inside the .NET Reactive Framework (Rx) (video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/-8Y1-lE6NSA&#34;&gt;Reactive Programming Overview (Jafar Husain from Netflix)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://csl.stanford.edu/~christos/pldi2010.fit/meijer.duality.pdf&#34;&gt;Subject/Observer is Dual to Iterator (paper)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;Rx standard sequence operators visualized (visualization tool)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>seemoo-lab/openhaystack</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/seemoo-lab/openhaystack</id>
    <link href="https://github.com/seemoo-lab/openhaystack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build your own &#39;AirTags&#39; üè∑ today! Framework for tracking personal Bluetooth devices via Apple&#39;s massive Find My network.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/Icon/OpenHaystackIcon.png&#34; alt=&#34;OpenHaystack application icon&#34; height=&#34;42&#34; width=&#34;42&#34; valign=&#34;bottom&#34;&gt; OpenHaystack&lt;/h1&gt; &#xA;&lt;p&gt;OpenHaystack is a framework for tracking personal Bluetooth devices via Apple&#39;s massive Find My network. Use it to create your own tracking &lt;em&gt;tags&lt;/em&gt; that you can append to physical objects (keyrings, backpacks, ...) or integrate it into other Bluetooth-capable devices such as notebooks.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/OpenHaystack-Screenshot.png&#34; alt=&#34;Screenshot of the app&#34; width=&#34;701&#34;&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#what-is-openhaystack&#34;&gt;What is &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#history&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-use-openhaystack&#34;&gt;How to use &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#system-requirements&#34;&gt;System requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-does-apples-find-my-network-work&#34;&gt;How does Apple&#39;s Find My network work?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#pairing-1&#34;&gt;Pairing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#losing-2&#34;&gt;Losing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#finding-3&#34;&gt;Finding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#searching-4&#34;&gt;Searching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;How to track other Bluetooth devices?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#openhaystack-mobile&#34;&gt;OpenHaystack Mobile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#authors&#34;&gt;Authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack is an application that allows you to create your own accessories that are tracked by Apple&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-does-apples-find-my-network-work&#34;&gt;Find My network&lt;/a&gt;. All you need is a Mac and a &lt;a href=&#34;https://microbit.org/&#34;&gt;BBC micro:bit&lt;/a&gt; or any &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;other Bluetooth-capable device&lt;/a&gt;. By using the app, you can track your accessories anywhere on earth without cellular coverage. Nearby iPhones will discover your accessories and upload their location to Apple&#39;s servers when they have a network connection.&lt;/p&gt; &#xA;&lt;h3&gt;History&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack is the result of reverse-engineering and security analysis work of Apple&#39;s &lt;em&gt;Find My network&lt;/em&gt; (or &lt;em&gt;offline finding&lt;/em&gt;). We at the &lt;a href=&#34;https://seemoo.de&#34;&gt;Secure Mobile Networking Lab&lt;/a&gt; of TU Darmstadt started analyzing offline finding after its initial announcement in June 2019. We identified how Apple devices can be found by iPhones devices, even when they are offline through this work. The whole system is a clever combination of Bluetooth advertisements, public-key cryptography, and a central database of encrypted location reports. We disclosed a specification of the closed parts of offline finding and conducted a comprehensive security and privacy analysis. We found two distinct vulnerabilities. The most severe one, which allowed a malicious application to access location data, has meanwhile been fixed by Apple (&lt;a href=&#34;https://support.apple.com/en-us/HT211849&#34;&gt;CVE-2020-9986&lt;/a&gt;). For more information about the security analysis, please read &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;our paper&lt;/a&gt;. Since its release, we received quite a bit of &lt;a href=&#34;https://owlink.org/press/&#34;&gt;press and media coverage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Disclaimer&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack is experimental software. The code is untested and incomplete. For example, OpenHaystack accessories using our &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware&lt;/a&gt; broadcast a fixed public key and, therefore, are trackable by other devices in proximity (this might change in a future release). OpenHaystack is not affiliated with or endorsed by Apple Inc.&lt;/p&gt; &#xA;&lt;h2&gt;How to use &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack consists of two components. First, we provide a &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/OpenHaystack&#34;&gt;macOS application&lt;/a&gt; that can display the last reported location of your personal Bluetooth devices. Second, the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware image&lt;/a&gt; enables Bluetooth devices to broadcast beacons that make them discoverable by iPhones.&lt;/p&gt; &#xA;&lt;h3&gt;System requirements&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack requires macOS 11 (Big Sur).&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The OpenHaystack application requires a custom plugin for Apple Mail. It is used to download location reports from Apple&#39;s servers via a private API (technical explanation: the plugin inherits Apple Mail&#39;s entitlements required to use this API). Therefore, the installation procedure is slightly different and requires you to temporarily disable &lt;a href=&#34;https://support.apple.com/guide/security/gatekeeper-and-runtime-protection-sec5599b66df/1/web/1&#34;&gt;Gatekeeper&lt;/a&gt;. Our plugin does not access any other private data such as emails (see &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/OpenHaystack/OpenHaystackMail&#34;&gt;source code&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a precompiled binary release from our &lt;a href=&#34;https://github.com/seemoo-lab/openhaystack/releases&#34;&gt;GitHub page&lt;/a&gt;.&lt;br&gt; &lt;em&gt;Alternative:&lt;/em&gt; build the application from source via Xcode.&lt;/li&gt; &#xA; &lt;li&gt;Open OpenHaystack. This will ask you to install the Mail plugin in &lt;code&gt;~/Library/Mail/Bundle&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and run &lt;code&gt;sudo spctl --master-disable&lt;/code&gt;, which will disable Gatekeeper and allow our Apple Mail plugin to run.&lt;/li&gt; &#xA; &lt;li&gt;Open Apple Mail. Go to &lt;em&gt;Preferences&lt;/em&gt; ‚Üí &lt;em&gt;General&lt;/em&gt; ‚Üí &lt;em&gt;Manage Plug-Ins...&lt;/em&gt; and activate the checkbox next to &lt;em&gt;OpenHaystackMail.mailbundle&lt;/em&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the &lt;em&gt;Manage Plug-Ins...&lt;/em&gt; button does not appear. Run this command in terminal &lt;code&gt;sudo defaults write &#34;/Library/Preferences/com.apple.mail&#34; EnableBundles 1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Allow access and restart Mail.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and enter &lt;code&gt;sudo spctl --master-enable&lt;/code&gt;, which will enable Gatekeeper again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adding a new accessory.&lt;/strong&gt; To create a new accessory, you just need to enter a name for it and optionally select a suitable icon and a color. The app then generates a new key pair that is used to encrypt and decrypt the location reports. The private key is stored in your Mac&#39;s keychain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deploy to device.&lt;/strong&gt; Connect a &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;supported device&lt;/a&gt; via USB to your Mac and hit the &lt;em&gt;Deploy&lt;/em&gt; button next to the accessory&#39;s name and choose the corresponding. Instead of using OpenHaystack&#39;s integrated deployment, you may also copy the public key used for advertising (right click on accessory) and deploy it manually.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Display devices&#39; locations.&lt;/strong&gt; It can take up to 30 minutes until you will see the first location report on the map on the right side. The map will always show all your items&#39; most recent locations. You can click on every item to check when the last update was received. By clicking the reload button, you can update the location reports.&lt;/p&gt; &#xA;&lt;h2&gt;How does Apple&#39;s Find My network work?&lt;/h2&gt; &#xA;&lt;p&gt;We briefly explain Apple&#39;s offline finding system (aka &lt;a href=&#34;https://developer.apple.com/find-my/&#34;&gt;&lt;em&gt;Find My network&lt;/em&gt;&lt;/a&gt;). Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;PETS paper and Apple&#39;s accessory specification&lt;/a&gt; for more details. We provide a schematic overview (from our paper) and explain how we integrate the different steps in OpenHaystack below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/FindMyOverview.png&#34; alt=&#34;Find My Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pairing (1)&lt;/h3&gt; &#xA;&lt;p&gt;To use Apple&#39;s Find My network, we generate a public-private key pair on an elliptic curve (P-224). The private key remains on the Mac securely stored in the keychain, and the public key is deployed on the accessory, e.g., an attached micro:bit.&lt;/p&gt; &#xA;&lt;h3&gt;Losing (2)&lt;/h3&gt; &#xA;&lt;p&gt;In short, the accessories broadcast the public key as Bluetooth Low Energy (BLE) advertisements (see &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware&lt;/a&gt;). Nearby iPhones will not be able to distinguish our accessories from a genuine Apple device or certified accessory.&lt;/p&gt; &#xA;&lt;h3&gt;Finding (3)&lt;/h3&gt; &#xA;&lt;p&gt;When a nearby iPhone receives a BLE advertisement, the iPhone fetches its current location via GPS, encrypts it using public key from the advertisement, and uploads the encrypted report to Apple&#39;s server. All iPhones on iOS 13 or newer do this by default. OpenHaystack is not involved in this step.&lt;/p&gt; &#xA;&lt;h3&gt;Searching (4)&lt;/h3&gt; &#xA;&lt;p&gt;Apple does not know which encrypted locations belong to which Apple account or device. Therefore, every Apple user can download any location report as long as they know the corresponding public key. This is not a security issue: all reports are end-to-end encrypted and cannot be decrypted unless one knows the corresponding private key (stored in the keychain). We leverage this feature to download the reports from Apple that have been created for our OpenHaystack accessories. We use our private keys to decrypt the location reports and show the most recent one on the map.&lt;/p&gt; &#xA;&lt;p&gt;Apple protects their database against arbitrary access by requiring an authenticated Apple user to download location reports. We use our Apple Mail plugin, which runs with elevated privileges, to access the required authentication information. The OpenHaystack app communicates with the plugin while downloading reports. This is why you need to keep Mail open while using OpenHaystack.&lt;/p&gt; &#xA;&lt;h2&gt;How to track other Bluetooth devices?&lt;/h2&gt; &#xA;&lt;p&gt;In principle, any Bluetooth device can be turned into an OpenHaystack accessory that is trackable via Apple&#39;s Find My network. Currently, we provide a convenient deployment method of our OpenHaystack firmwares for a small number of embedded devices (see table below). We also support Linux devices via our generic HCI script. Feel free to port OpenHaystack to other devices that support Bluetooth Low Energy based on the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;source code of our firmware&lt;/a&gt; and the specification in &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;our paper&lt;/a&gt;. Please share your results with us!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Tested on&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Deploy via app&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/Microbit_v1&#34;&gt;Nordic nRF51&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;BBC micro:bit v1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úì&lt;/td&gt; &#xA;   &lt;td&gt;Only supports nRF51822 at this time (see issue #6).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/ESP32&#34;&gt;Espressif ESP32&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SP32-WROOM, ESP32-WROVER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úì&lt;/td&gt; &#xA;   &lt;td&gt;Deployment can take up to 3 minutes. Requires Python 3. Thanks &lt;strong&gt;@fhessel&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/Linux_HCI&#34;&gt;Linux HCI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Raspberry Pi 4 w/ Raspbian&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Should support any Linux machine.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/Setup.jpg&#34; alt=&#34;Setup&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;OpenHaystack Mobile&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack Mobile is a complete reimplementation of the OpenHaystack macOS application for smartphones. The app provides the same functionality to create and track accessories and aims to increase the usability, especially for new users. In contrast to the macOS application, the location reports cannot be fetched directly on the smartphone, so the app requires a proxy server hosted on Mac hardware to access the Find My network. The proxy server can be accessed over a network by multiple users simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;To connect to your proxy server set the correct URL in: openhaystack-mobile/lib/findMy/reports_fetcher.dart&lt;/p&gt; &#xA;&lt;p&gt;&lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/mobile-map-view.png&#34;&gt; &lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/mobile-accessory-history.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenHaystack Mobile is built with the cross-platform &lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter framework&lt;/a&gt; and currently runs on Android and iOS. More information about the app and usage instructions can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/openhaystack-mobile&#34;&gt;openhaystack-mobile&lt;/a&gt; folder of this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alexander Heinrich&lt;/strong&gt; (&lt;a href=&#34;https://github.com/Sn0wfreezeDev&#34;&gt;@Sn0wfreezeDev&lt;/a&gt;, &lt;a href=&#34;mailto:aheinrich@seemoo.tu-darmstadt.de&#34;&gt;email&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Milan Stute&lt;/strong&gt; (&lt;a href=&#34;https://github.com/schmittner&#34;&gt;@schmittner&lt;/a&gt;, &lt;a href=&#34;mailto:mstute@seemoo.tu-darmstadt.de&#34;&gt;email&lt;/a&gt;, &lt;a href=&#34;https://seemoo.de/mstute&#34;&gt;web&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alexander Heinrich, Milan Stute, Tim Kornhuber, Matthias Hollick. &lt;strong&gt;Who Can &lt;em&gt;Find My&lt;/em&gt; Devices? Security and Privacy of Apple&#39;s Crowd-Sourced Bluetooth Location Tracking System.&lt;/strong&gt; &lt;em&gt;Proceedings on Privacy Enhancing Technologies (PoPETs)&lt;/em&gt;, 2021. &lt;a href=&#34;https://doi.org/10.2478/popets-2021-0045&#34;&gt;doi:10.2478/popets-2021-0045&lt;/a&gt; &lt;a href=&#34;https://www.petsymposium.org/2021/files/papers/issue3/popets-2021-0045.pdf&#34;&gt;üìÑ Paper&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2103.02282&#34;&gt;üìÑ Preprint&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Alexander Heinrich, Milan Stute, and Matthias Hollick. &lt;strong&gt;DEMO: OpenHaystack: A Framework for Tracking Personal Bluetooth Devices via Apple‚Äôs Massive Find My Network.&lt;/strong&gt; &lt;em&gt;14th ACM Conference on Security and Privacy in Wireless and Mobile (WiSec ‚Äô21)&lt;/em&gt;, 2021.&lt;/li&gt; &#xA; &lt;li&gt;Tim Kornhuber. &lt;strong&gt;Analysis of Apple&#39;s Crowd-Sourced Location Tracking System.&lt;/strong&gt; &lt;em&gt;Technical University of Darmstadt&lt;/em&gt;, Master&#39;s thesis, 2020.&lt;/li&gt; &#xA; &lt;li&gt;Apple Inc. &lt;strong&gt;Find My Network Accessory Specification ‚Äì Developer Preview ‚Äì Release R3.&lt;/strong&gt; 2020. &lt;a href=&#34;https://developer.apple.com/find-my/&#34;&gt;üìÑ Download&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/LICENSE&#34;&gt;&lt;strong&gt;GNU Affero General Public License v3.0&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>exelban/stats</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/exelban/stats</id>
    <link href="https://github.com/exelban/stats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;macOS system monitor in your menu bar&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stats&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;img src=&#34;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/logo.png?raw=true&amp;amp;v=1&#34; width=&#34;120&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;img src=&#34;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/menus%3Fv2.3.2.png?v1&#34; alt=&#34;Stats&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;img src=&#34;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/popups%3Fv2.3.2.png?v3&#34; alt=&#34;Stats&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;macOS system monitor in your menu bar&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;You can download the latest version &lt;a href=&#34;https://github.com/exelban/stats/releases/latest/download/Stats.dmg&#34;&gt;here&lt;/a&gt;.&lt;br&gt; This will download a file called &lt;code&gt;Stats.dmg&lt;/code&gt;. Open it and move the app to the application folder.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;To install it using Homebrew, open the Terminal app and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask stats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Stats is currently supported on macOS 10.13 (High Sierra) and higher.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Stats is an application that allows you to monitor your macOS system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Battery level&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth devices&lt;/li&gt; &#xA; &lt;li&gt;CPU utilization&lt;/li&gt; &#xA; &lt;li&gt;Disk utilization&lt;/li&gt; &#xA; &lt;li&gt;Fan/s control&lt;/li&gt; &#xA; &lt;li&gt;GPU utilization&lt;/li&gt; &#xA; &lt;li&gt;Memory usage&lt;/li&gt; &#xA; &lt;li&gt;Network usage&lt;/li&gt; &#xA; &lt;li&gt;Sensors information (Temperature/Voltage/Power)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;How do you change the order of the menu bar icons?&lt;/h3&gt; &#xA;&lt;p&gt;macOS decides the order of the menu bar items not &lt;code&gt;Stats&lt;/code&gt; - it may change after the first reboot after installing Stats.&lt;/p&gt; &#xA;&lt;p&gt;To change the order of any menu bar icon - macOS Mojave (version 10.14) and up.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hold down ‚åò (command key).&lt;/li&gt; &#xA; &lt;li&gt;Drag the icon to the desired position on the menu bar.&lt;/li&gt; &#xA; &lt;li&gt;Release ‚åò (command key)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English&lt;/li&gt; &#xA; &lt;li&gt;Polski&lt;/li&gt; &#xA; &lt;li&gt;–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞&lt;/li&gt; &#xA; &lt;li&gt;–†—É—Å—Å–∫–∏–π&lt;/li&gt; &#xA; &lt;li&gt;‰∏≠Êñá (ÁÆÄ‰Ωì) (thanks to &lt;a href=&#34;https://github.com/chenguokai&#34;&gt;chenguokai&lt;/a&gt; and &lt;a href=&#34;https://github.com/Tai-Zhou&#34;&gt;Tai-Zhou&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;T√ºrk√ße (thanks to &lt;a href=&#34;https://github.com/yusufozgul&#34;&gt;yusufozgul&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Korean (thanks to &lt;a href=&#34;https://github.com/escapeanaemia&#34;&gt;escapeanaemia&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;German (thanks to &lt;a href=&#34;https://github.com/natterstefan&#34;&gt;natterstefan&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;‰∏≠Êñá (ÁπÅÈ´î) (thanks to &lt;a href=&#34;https://github.com/iamch15542&#34;&gt;iamch15542&lt;/a&gt; and &lt;a href=&#34;https://github.com/jrthsr700tmax&#34;&gt;jrthsr700tmax&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Spanish (thanks to &lt;a href=&#34;https://github.com/jcconca&#34;&gt;jcconca&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Vietnamese (thanks to &lt;a href=&#34;https://github.com/xuandung38&#34;&gt;xuandung38&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;French (thanks to &lt;a href=&#34;https://github.com/RomainLt&#34;&gt;RomainLt&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Italian (thanks to &lt;a href=&#34;https://github.com/gmcinalli&#34;&gt;gmcinalli&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Portuguese (Brazil) (thanks to &lt;a href=&#34;https://github.com/marcelochaves95&#34;&gt;marcelochaves95&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Norwegian Bokm√•l (thanks to &lt;a href=&#34;https://github.com/rubjo&#34;&gt;rubjo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Êó•Êú¨Ë™û (thanks to &lt;a href=&#34;https://github.com/treastrain&#34;&gt;treastrain&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Portuguese (Portugal) (thanks to &lt;a href=&#34;https://github.com/AdamModus&#34;&gt;AdamModus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Czech (thanks to &lt;a href=&#34;https://github.com/mpl75&#34;&gt;mpl75&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Magyar (thanks to &lt;a href=&#34;https://github.com/moriczr&#34;&gt;moriczr&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Bulgarian (thanks to &lt;a href=&#34;https://github.com/zbrox&#34;&gt;zbrox&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Romanian (thanks to &lt;a href=&#34;https://github.com/razluta&#34;&gt;razluta&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dutch (thanks to &lt;a href=&#34;https://github.com/ngohungphuc&#34;&gt;ngohungphuc&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Hrvatski (thanks to &lt;a href=&#34;https://github.com/milotype&#34;&gt;milotype&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Danish (thanks to &lt;a href=&#34;https://github.com/casperes1996&#34;&gt;casperes1996&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Catalan (thanks to &lt;a href=&#34;https://github.com/davidalonso&#34;&gt;davidalonso&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Indonesian (thanks to &lt;a href=&#34;https://github.com/yooody&#34;&gt;yooody&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Hebrew (thanks to &lt;a href=&#34;https://github.com/BadSugar&#34;&gt;BadSugar&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Slovenian (thanks to &lt;a href=&#34;https://github.com/zigapovhe&#34;&gt;zigapovhe&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can help by adding a new language or improve the existing translation.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exelban/stats/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>johnpatrickmorgan/FlowStacks</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/johnpatrickmorgan/FlowStacks</id>
    <link href="https://github.com/johnpatrickmorgan/FlowStacks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FlowStacks allows you to hoist SwiftUI navigation and presentation state into a Coordinator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlowStacks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Coordinator pattern in SwiftUI&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;FlowStacks&lt;/em&gt; allow you to manage complex SwiftUI navigation and presentation flows with a simple array. This makes it easy to hoist navigation state into a higher-level coordinator, allowing you to write isolated views that have zero knowledge of their context within the navigation flow of an app.&lt;/p&gt; &#xA;&lt;p&gt;You might like this library if:&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ You want to be able support deeplinks into deeply nested navigation routes in your app.&lt;br&gt; ‚úÖ You want to be able to easily reuse views within different navigation contexts.&lt;br&gt; ‚úÖ You want to easily go back to the root screen or a specific screen in the navigation stack.&lt;br&gt; ‚úÖ You want to use the coordinator pattern to keep navigation logic in a single place.&lt;br&gt; ‚úÖ You want to break an app&#39;s navigation into multiple reusable coordinators and compose them together.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;The library works by translating the array of screens into a hierarchy of nested NavigationLinks and presentation calls, so:&lt;/p&gt; &#xA;&lt;p&gt;üö´ It does not rely on UIKit at all.&lt;br&gt; üö´ It does not use &lt;code&gt;AnyView&lt;/code&gt; to type-erase screens.&lt;br&gt; üö´ It does not try to recreate NavigationView from scratch.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To begin, create an enum encompassing each of the screens your flow might contain, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Screen {&#xA;  case home&#xA;  case numberList&#xA;  case numberDetail(Int)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A coordinator view can then manage an array of &lt;code&gt;Route&amp;lt;Screen&amp;gt;&lt;/code&gt;s, representing a stack of these screens, each one either pushed or presented. In the body of the coordinator view, initialize a &lt;code&gt;Router&lt;/code&gt; with a binding to the routes array, and a &lt;code&gt;ViewBuilder&lt;/code&gt; closure. The closure builds a view for a given screen, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AppCoordinator: View {&#xA;  @State var routes: Routes&amp;lt;Screen&amp;gt; = [.root(.home)]&#xA;    &#xA;  var body: some View {&#xA;    Router($routes) { screen, _ in&#xA;      switch screen {&#xA;      case .home:&#xA;        HomeView(onGoTapped: showNumberList)&#xA;      case .numberList:&#xA;        NumberListView(onNumberSelected: showNumber, cancel: goBack)&#xA;      case .numberDetail(let number):&#xA;        NumberDetailView(number: number, cancel: goBackToRoot)&#xA;      }&#xA;    }&#xA;  }&#xA;    &#xA;  private func showNumberList() {&#xA;    routes.presentSheet(.numberList, embedInNavigationView: true)&#xA;  }&#xA;    &#xA;  private func showNumber(_ number: Int) {&#xA;    routes.push(.numberDetail(number))&#xA;  }&#xA;    &#xA;  private func goBack() {&#xA;    routes.goBack()&#xA;  }&#xA;    &#xA;  private func goBackToRoot() {&#xA;    routes.goBackToRoot()&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Convenience methods&lt;/h3&gt; &#xA;&lt;p&gt;The routes array can be managed using normal Array methods, but a number of convenience methods are available for common transformations, such as:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Effect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;push&lt;/td&gt; &#xA;   &lt;td&gt;Pushes a new screen onto the stack.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;presentSheet&lt;/td&gt; &#xA;   &lt;td&gt;Presents a new screen as a sheet.‚Ä†&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;presentCover&lt;/td&gt; &#xA;   &lt;td&gt;Presents a new screen as a full-screen cover.‚Ä†&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;goBack&lt;/td&gt; &#xA;   &lt;td&gt;Goes back one screen in the stack.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;goBackToRoot&lt;/td&gt; &#xA;   &lt;td&gt;Goes back to the very first screen in the stack.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;goBackTo&lt;/td&gt; &#xA;   &lt;td&gt;Goes back to a specific screen in the stack.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pop&lt;/td&gt; &#xA;   &lt;td&gt;Pops the current screen if it was pushed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dismiss&lt;/td&gt; &#xA;   &lt;td&gt;Dismisses the most recently presented screen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;‚Ä† &lt;em&gt;Pass &lt;code&gt;embedInNavigationView: true&lt;/code&gt; if you want to be able to push screens from the presented screen.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Routes array automatically updated&lt;/h3&gt; &#xA;&lt;p&gt;If the user taps the back button, the routes array will be automatically updated to reflect the new navigation state. Navigating back with an edge swipe gesture or via a long-press gesture on the back button will also update the routes array automatically, as will swiping to dismiss a sheet.&lt;/p&gt; &#xA;&lt;h3&gt;Bindings&lt;/h3&gt; &#xA;&lt;p&gt;The Router can be configured to work with a binding to the screen state, rather than just a read-only value - just add &lt;code&gt;$&lt;/code&gt; before the screen argument in the view-builder closure. The screen itself can then be responsible for updating its state within the routes array. Normally an enum is used to represent the screen, so it might be necessary to further extract the associated value for a particular screen as a binding. You can do that using the &lt;a href=&#34;https://github.com/pointfreeco/swiftui-navigation&#34;&gt;SwiftUINavigation&lt;/a&gt; library, which includes a number of helpful Binding transformations for optional and enum state, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUINavigation&#xA;&#xA;struct BindingExampleCoordinator: View {&#xA;  enum Screen {&#xA;    case start&#xA;    case number(Int)&#xA;  }&#xA;  &#xA;  @State var routes: Routes&amp;lt;Screen&amp;gt; = [.root(.start, embedInNavigationView: true)]&#xA;    &#xA;  var body: some View {&#xA;    Router($routes) { $screen, _ in&#xA;      if let number = Binding(unwrapping: $screen, case: /Screen.number) {&#xA;        // Here number is a Binding&amp;lt;Int&amp;gt;, so EditableNumberView can change its&#xA;        // value in the routes array.&#xA;        EditableNumberView(number: number)&#xA;      } else {&#xA;        StartView(goTapped: goTapped)&#xA;      }&#xA;    }&#xA;  }&#xA;  &#xA;  func goTapped() {&#xA;    routes.push(.number(42))&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Child coordinators&lt;/h3&gt; &#xA;&lt;p&gt;Coordinators are just views themselves, so they can be presented, pushed, added to a &lt;code&gt;TabView&lt;/code&gt; or a &lt;code&gt;WindowGroup&lt;/code&gt;, and can be configured in all the normal ways views can. They can even be pushed onto a parent coordinator&#39;s navigation stack, allowing you to break out parts of your navigation flow into separate child coordinators. When doing so, it is best that the child coordinator is always at the top of the parent&#39;s routes stack, as it will take over responsibility for pushing and presenting new screens. Otherwise, the parent might attempt to push screen(s) when the child is already pushing screen(s), causing a conflict.&lt;/p&gt; &#xA;&lt;h3&gt;Using View Models&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;Router&lt;/code&gt;s in the coordinator pattern also works well when using View Models. In these cases, the navigation state can live in the coordinator&#39;s own view model, and the Screen enum can include each screen&#39;s view model. With view models, the first example above can be re-written:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Screen {&#xA;  case home(HomeViewModel)&#xA;  case numberList(NumberListViewModel)&#xA;  case numberDetail(NumberDetailViewModel)&#xA;}&#xA;&#xA;class AppCoordinatorViewModel: ObservableObject {&#xA;  @Published var routes: Routes&amp;lt;Screen&amp;gt;&#xA;    &#xA;  init() {&#xA;    self.routes = [.root(.home(.init(onGoTapped: showNumberList)))]&#xA;  }&#xA;    &#xA;  func showNumberList() {&#xA;    routes.presentSheet(.numberList(.init(onNumberSelected: showNumber, cancel: goBack)), embedInNavigationView: true)&#xA;  }&#xA;    &#xA;  func showNumber(_ number: Int) {&#xA;    routes.push(.numberDetail(.init(number: number, cancel: goBackToRoot)))&#xA;  }&#xA;    &#xA;  func goBack() {&#xA;    routes.goBack()&#xA;  }&#xA;    &#xA;  func goBackToRoot() {&#xA;    routes.goBackToRoot()&#xA;  }&#xA;}&#xA;&#xA;struct AppCoordinator: View {&#xA;  @ObservedObject var viewModel: AppCoordinatorViewModel&#xA;    &#xA;  var body: some View {&#xA;    Router($viewModel.routes) { screen in&#xA;      switch screen {&#xA;      case .home(let viewModel):&#xA;        HomeView(viewModel: viewModel)&#xA;      case .numberList(let viewModel):&#xA;        NumberListView(viewModel: viewModel)&#xA;      case .number(let viewModel):&#xA;        NumberView(viewModel: viewModel)&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Making complex navigation updates&lt;/h3&gt; &#xA;&lt;p&gt;SwiftUI does not allow more than one screen to be pushed, presented or dismissed within a single update. This makes it tricky to make large updates to the navigation state, e.g. when deeplinking straight to a view deep in the navigation hierarchy, when going back several presentation layers to the root, or when restoring arbitrary navigation state. With &lt;em&gt;FlowStacks&lt;/em&gt;, you can wrap such changes within a call to &lt;code&gt;withDelaysIfUnsupported&lt;/code&gt;, and the library will break down the large update into a series of smaller updates that SwiftUI supports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;$routes.withDelaysIfUnsupported {&#xA;  $0.goBackToRoot()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if using a view model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;RouteSteps.withDelaysIfUnsupported(self, \.routes) {&#xA;  $0.push(...)&#xA;  $0.push(...)&#xA;  $0.presentSheet(...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fixed root screen&lt;/h3&gt; &#xA;&lt;p&gt;Often the root screen in a screen flow is static - always the same screen is in the root position. In this case you can use the &lt;code&gt;showing&lt;/code&gt; function on the root screen view to simplify matters. It takes the same parameters as the &lt;code&gt;Router&lt;/code&gt; initializer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ShowingCoordinator: View {&#xA;  enum Screen {&#xA;    case detail, edit, confirm&#xA;  }&#xA;  &#xA;  @State var routes: Routes&amp;lt;Screen&amp;gt; = []&#xA;  &#xA;  var body: some View {&#xA;    HomeView(onGoTapped: { routes.presentSheet(.detail) })&#xA;      .showing($routes) { $number, index in&#xA;        ...&#xA;      }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://johnpatrickmorgan.github.io/2021/07/03/NStack/&#34;&gt;blog post&lt;/a&gt; outlines how an array of screens can be translated into a hierarchy of views and &lt;code&gt;NavigationLink&lt;/code&gt;s. &lt;code&gt;Router&lt;/code&gt; uses a similar approach to allow both navigation and presentation.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Currently only the &lt;code&gt;.stack&lt;/code&gt; navigation view style is supported. There are some unexpected behaviours with the &lt;code&gt;.column&lt;/code&gt; navigation view style that make it problematic for the approach used in this library.&lt;/p&gt; &#xA;&lt;p&gt;Be careful that your screens do not inadvertently end up observing the navigation state, e.g. if you were to pass a coordinator object to its screens as an &lt;code&gt;ObservableObject&lt;/code&gt; or &lt;code&gt;EnvironmentObject&lt;/code&gt;. Not only would that cause your screens to be re-rendered unnecessarily whenever the navigation state changes, it can also cause SwiftUI&#39;s navigation state to deviate from your app&#39;s state.&lt;/p&gt; &#xA;&lt;h2&gt;Using The Composable Architecture?&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/johnpatrickmorgan/TCACoordinators&#34;&gt;TCACoordinators&lt;/a&gt; which uses FlowStacks to help navigation in TCA.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>instacart/Nantes</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/instacart/Nantes</id>
    <link href="https://github.com/instacart/Nantes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift TTTAttributedLabel replacement&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nantes ü•ï&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/instacart/Nantes&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/instacart/Nantes.svg?style=flat&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/Nantes.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Nantes.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library is a Swift port/fork of the popular Objective-C library &lt;a href=&#34;https://github.com/TTTAttributedLabel/TTTAttributedLabel&#34;&gt;TTTAttributedLabel&lt;/a&gt;. Much ‚ù§Ô∏è and credit goes to &lt;a href=&#34;https://github.com/mattt&#34;&gt;Mattt&lt;/a&gt; for creating such a great UILabel replacement library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Nantes&lt;/code&gt; is a pure-Swift &lt;code&gt;UILabel&lt;/code&gt; replacement. It supports attributes, data detectors, and more. It also supports link embedding automatically and with &lt;code&gt;NSTextCheckingTypes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Come build awesome things with us here at &lt;a href=&#34;https://careers.instacart.com/&#34;&gt;Instacart!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 8.0+&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Nantes is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. To install it, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;instacart/nantes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Nantes is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Nantes&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Communication&lt;/h3&gt; &#xA;&lt;p&gt;If you need help, feel free to open an issue. Please search before opening one, someone might have run into something similar.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Opening a pull request is the best way to get something fixed. If you need help, feel free to open an issue, hopefully someone can help you out with a problem you&#39;re running into.&lt;/p&gt; &#xA;&lt;h3&gt;Author&lt;/h3&gt; &#xA;&lt;p&gt;chansen22, &lt;a href=&#34;mailto:cthansen22@gmail.com&#34;&gt;cthansen22@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Check out &lt;code&gt;Nantes&lt;/code&gt; in the &lt;code&gt;Example&lt;/code&gt; directory for more examples.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Nantes&#xA;&#xA;let label: NantesLabel = .init(frame: .zero)&#xA;label.attributedTruncationToken = NSAttributedString(string: &#34;... more&#34;)&#xA;label.numberOfLines = 3&#xA;label.labelTappedBlock = {&#xA;  label.numberOfLines = label.numberOfLines == 0 ? 3 : 0 // Flip between limiting lines and not&#xA;&#xA;  UIView.animateWithDuration(0.2, animations: {&#xA;    self.view.layoutIfNeeded()&#xA;  })&#xA;}&#xA;&#xA;label.text = &#34;Nantes label is great! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus ac urna et ante lobortis varius. Nunc rhoncus enim vitae sem commodo sodales. Morbi id augue id augue finibus tincidunt. Cras ac massa nisi. Maecenas elementum vitae elit eu mattis. Duis pretium turpis ut justo accumsan molestie. Mauris elit elit, maximus eu risus sed, vestibulum sodales enim. Sed porttitor vestibulum tincidunt. Maecenas mollis tortor quam, sed porta justo rhoncus id. Phasellus vitae augue tempor, luctus metus sit amet, dictum urna. Morbi sit amet feugiat purus. Proin vitae finibus lectus, eu gravida erat.&#34;&#xA;view.addSubview(label)&#xA;&#xA;let linkLabel: NantesLabel = .init(frame: .zero)&#xA;linkLabel.delegate = self // NantesLabelDelegate&#xA;linkLabel.linkAttributes = [NSAttributedString.Key.foregroundColor: UIColor.green]&#xA;linkLabel.text = &#34;https://www.instacart.com&#34;&#xA;view.addSubview(linkLabel)&#xA;&#xA;// Link handling&#xA;&#xA;func attributedLabel(_ label: NantesLabel, didSelectLink link: URL) {&#xA;  print(&#34;Tapped link: \(link)&#34;)&#xA;}&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Caldis/Mos</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/Caldis/Mos</id>
    <link href="https://github.com/Caldis/Mos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‰∏Ä‰∏™Áî®‰∫éÂú® macOS ‰∏äÂπ≥Êªë‰Ω†ÁöÑÈº†Ê†áÊªöÂä®ÊïàÊûúÊàñÂçïÁã¨ËÆæÁΩÆÊªöÂä®ÊñπÂêëÁöÑÂ∞èÂ∑•ÂÖ∑, ËÆ©‰Ω†ÁöÑÊªöËΩÆÁàΩÂ¶ÇËß¶ÊéßÊùø | A lightweight tool used to smooth scrolling and set scroll direction independently for your mouse on macOS&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://mos.caldis.me/&#34;&gt; &lt;img width=&#34;320&#34; src=&#34;https://github.com/Caldis/Mos/raw/master/docs/resources/image/intro.png?raw=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Mos&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Xcode-9.0%2B-blue.svg?sanitize=true&#34; alt=&#34;Xcode 9.0+&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-4.0%2B-orange.svg?sanitize=true&#34; alt=&#34;Swift 4.0+&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;‰∏Ä‰∏™Áî®‰∫éÂú®MacOS‰∏äÂπ≥Êªë‰Ω†ÁöÑÈº†Ê†áÊªöÂä®ÊïàÊûúÁöÑÂ∞èÂ∑•ÂÖ∑, ËÆ©‰Ω†ÁöÑÊªöËΩÆÁàΩÂ¶ÇËß¶ÊéßÊùø„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Caldis/Mos/raw/master/README.md&#34;&gt;‰∏≠Êñá&lt;/a&gt; | &lt;a href=&#34;https://github.com/Caldis/Mos/raw/master/README.enUS.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://github.com/Caldis/Mos/raw/master/README.ru.md&#34;&gt;–†—É—Å—Å–∫–∏–π&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‰∏ªÈ°µ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://mos.caldis.me/&#34;&gt;http://mos.caldis.me/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÁâπÊÄß&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÁñØÁãÇÂπ≥Êªë‰Ω†ÁöÑÈº†Ê†áÊªöÂä®ÊïàÊûú&lt;/li&gt; &#xA; &lt;li&gt;ÊîØÊåÅÂàÜÁ¶ªËß¶ÊéßÊùø/Èº†Ê†á‰∫ã‰ª∂, ÂçïÁã¨ÁøªËΩ¨Èº†Ê†áÊªöÂä®ÊñπÂêë„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÊªöÂä®Êõ≤Á∫øÁöÑËá™ÂÆö‰πâË∞ÉÊï¥„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÊîØÊåÅÂå∫ÂàÜÂ∫îÁî®Â§ÑÁêÜ, Èªë/ÁôΩÂêçÂçïÁ≥ªÁªü„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Áî®‰∫éÁõëÊéßÊªöÂä®‰∫ã‰ª∂ÁöÑÂõæÂΩ¢ÂåñÂëàÁé∞Á™óÂè£„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Âü∫‰∫é Swift4 ÊûÑÂª∫„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Êà™Âõæ&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://github.com/Caldis/Mos/raw/master/docs/resources/image/cn/Mointor.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://github.com/Caldis/Mos/raw/master/docs/resources/image/cn/PreferencesGeneral.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://github.com/Caldis/Mos/raw/master/docs/resources/image/cn/PreferencesAdvanced.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://github.com/Caldis/Mos/raw/master/docs/resources/image/cn/PreferencesExceptionFull.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;‰∏ãËΩΩÂèäÂÆâË£Ö&lt;/h2&gt; &#xA;&lt;h3&gt;HomebrewÂÆâË£Ö&lt;/h3&gt; &#xA;&lt;p&gt;MosÂèØÈÄöËøá&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;Êù•ÂÆâË£Ö:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install mos --cask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Â∫îÁî®Â∞ÜË¢´ÂÆâË£ÖËá≥ &lt;code&gt;/Applications/Mos.app&lt;/code&gt;„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Ëã•ÊúâÊñ∞ÁâàÊú¨,ÂèØÁî®‰ª•‰∏ãÂëΩ‰ª§ÂçáÁ∫ß:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew reinstall mos --cask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÈáçÊñ∞ÂêØÂä®Â∫îÁî®Âç≥ÂèØ„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;ÊâãÂä®ÂÆâË£Ö&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Caldis/Mos/releases/&#34;&gt;GithubRelease&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Â∏ÆÂä©&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Caldis/Mos/wiki&#34;&gt;GithubWiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;È∏£Ë∞¢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielgindi/Charts&#34;&gt;Charts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iconfont.cn&#34;&gt;iconfont.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Clipy/LoginServiceKit&#34;&gt;LoginServiceKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/galambalazs/smoothscroll-for-websites&#34;&gt;Smoothscroll-for-websites&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ë¥°ÁåÆ&lt;/h2&gt; &#xA;&lt;p&gt;Â¶ÇÊûúÊÇ®ËßâÂæó Mos ÁöÑÊú¨Âú∞ÂåñÂÅöÁöÑÊúâ‰ªª‰Ωï‰∏çÂ¶•‰πãÂ§Ñ, Ê¨¢ËøéÊÇ®Êèê‰∫§‰ªª‰ΩïÂÖ≥‰∫éÊñáÊú¨‰øÆÊîπÁöÑÊÑèËßÅ, ÊÇ®ÂèØ‰ª•ÈÄöËøáÊèê‰∫§ Github Issue ÁöÑÊñπÂºèÂëäËØâÊàë‰ª¨, Â¶ÇÊûúÊÇ®ÂñÑ‰∫éÁºñÁ†Å, Êàë‰ª¨ÈùûÂ∏∏Ê¨¢ËøéÊÇ®Êèê‰∫§‰∏Ä‰∏™ PR !&lt;/p&gt; &#xA;&lt;p&gt;Êàë‰ª¨Ê¨¢Ëøé‰ªª‰ΩïÂΩ¢ÂºèÁöÑË¥°ÁåÆÔºåÊúâ‰ªª‰ΩïÂª∫ËÆÆÊàñÊÑèËßÅÊÇ®ÂèØ‰ª•ÁªôÊàë‰ª¨ &lt;a href=&#34;https://github.com/Caldis/Mos/issues&#34;&gt;ÊèêÈóÆ&lt;/a&gt;„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2017 Caldis rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by-nc/3.0/cn/&#34;&gt;ÁΩ≤Âêç-ÈùûÂïÜ‰∏öÊÄß‰ΩøÁî®ÂçèËÆÆ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And you can not upload it to the App Store.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mac-cain13/R.swift</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/mac-cain13/R.swift</id>
    <link href="https://github.com/mac-cain13/R.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Strong typed, autocompleted resources like images, fonts and segues in Swift projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;R.swift &lt;a href=&#34;https://cocoapods.org/pods/R.swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/R.swift.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/blob/master/License&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/R.swift.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/R.swift.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Get strong typed, autocompleted resources like images, fonts and segues in Swift projects&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why use this?&lt;/h2&gt; &#xA;&lt;p&gt;It makes your code that uses resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fully typed&lt;/strong&gt;, less casting and guessing what a method will return&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compile time checked&lt;/strong&gt;, no more incorrect strings that make your app crash at runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Autocompleted&lt;/strong&gt;, never have to guess that image name again&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently you type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let icon = UIImage(named: &#34;settings-icon&#34;)&#xA;let font = UIFont(name: &#34;San Francisco&#34;, size: 42)&#xA;let color = UIColor(named: &#34;indicator highlight&#34;)&#xA;let viewController = CustomViewController(nibName: &#34;CustomView&#34;, bundle: nil)&#xA;let string = String(format: NSLocalizedString(&#34;welcome.withName&#34;, comment: &#34;&#34;), locale: NSLocale.current, &#34;Arthur Dent&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With R.swift it becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let icon = R.image.settingsIcon()&#xA;let font = R.font.sanFrancisco(size: 42)&#xA;let color = R.color.indicatorHighlight()&#xA;let viewController = CustomViewController(nib: R.nib.customView)&#xA;let string = R.string.localizable.welcomeWithName(&#34;Arthur Dent&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md&#34;&gt;more examples&lt;/a&gt; or hear about &lt;a href=&#34;https://academy.realm.io/posts/slug-javi-soto-building-fabric-in-swift/#rswift-2956&#34;&gt;how Fabric.app uses R.swift&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Autocompleted images:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/DemoUseImage.gif&#34; alt=&#34;Autocompleted images&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiletime checked images:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/DemoRenameImage.gif&#34; alt=&#34;Compiletime checked images&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is only the beginning, check out &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md&#34;&gt;more examples&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;CocoaHeadsNL presentation&lt;/h2&gt; &#xA;&lt;p&gt;Mathijs Kadijk presented R.swift at the September 2016 CocoaHeadsNL meetup. Talking about the ideas behind R.swift and demonstrating how to move from plain stringly-typed iOS code to statically typed code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vimeo.com/185173151&#34;&gt;&lt;img src=&#34;https://i.vimeocdn.com/video/594835658.jpg?mw=1920&amp;amp;mh=1080&amp;amp;q=70&#34; width=&#34;560&#34; alt=&#34;R.swift presentation at CocoaHeadsNL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;After installing R.swift into your project you can use the &lt;code&gt;R&lt;/code&gt;-struct to access resources. If the struct is outdated just build and R.swift will correct any missing/changed/added resources.&lt;/p&gt; &#xA;&lt;p&gt;R.swift currently supports these types of resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#custom-fonts&#34;&gt;Fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#resource-files&#34;&gt;Resource files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#colors&#34;&gt;Colors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#localized-strings&#34;&gt;Localized strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#storyboards&#34;&gt;Storyboards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#segues&#34;&gt;Segues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#nibs&#34;&gt;Nibs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#reusable-table-view-cells&#34;&gt;Reusable cells&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Runtime validation with &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#runtime-validation&#34;&gt;&lt;code&gt;R.validate()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If all images used in storyboards and nibs are available&lt;/li&gt; &#xA; &lt;li&gt;If all named colors used in storyboards and nibs are available&lt;/li&gt; &#xA; &lt;li&gt;If all view controllers with storyboard identifiers can be loaded&lt;/li&gt; &#xA; &lt;li&gt;If all custom fonts can be loaded&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#why-was-rswift-created&#34;&gt;Why was R.swift created?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#why-should-i-choose-rswift-over-alternative-x-or-y&#34;&gt;Why should I choose R.swift over alternative X or Y?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#what-are-the-requirements-to-run-rswift&#34;&gt;What are the requirements to run R.swift?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-use-methods-with-a-void-argument&#34;&gt;How to use methods with a &lt;code&gt;Void&lt;/code&gt; argument?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-fix-missing-imports-in-the-generated-file&#34;&gt;How to fix missing imports in the generated file?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-use-classes-with-the-same-name-as-their-module&#34;&gt;How to use classes with the same name as their module?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Ignoring.md&#34;&gt;Can I ignore resources?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#can-i-use-rswift-in-a-library&#34;&gt;Can I use R.swift in a library?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-does-rswift-work&#34;&gt;How does R.swift work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Migration.md&#34;&gt;How to upgrade to a new major version?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift/raw/master/Documentation/Ignoring.md#only-run-specific-generators-exclude-rsomething&#34;&gt;How can I only run specific generators?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is the recommended way of installation, as this avoids including any binary files into your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note on Carthage: R.swift is a tool used in a build step, it is not a dynamic library. Therefore &lt;a href=&#34;https://github.com/mac-cain13/R.swift/issues/42&#34;&gt;it is not possible&lt;/a&gt; to install it with Carthage.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods (recommended)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;R.swift&#39;&lt;/code&gt; to your &lt;a href=&#34;http://cocoapods.org/#get_started&#34;&gt;Podfile&lt;/a&gt; and run &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA; &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase and &lt;strong&gt;below&lt;/strong&gt; &lt;code&gt;Check Pods Manifest.lock&lt;/code&gt;, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;$PODS_ROOT/R.swift/rswift&#34; generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA; &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA; &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/BuildPhaseExample.png&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/yonaskolb/mint&#34;&gt;Mint&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;First, Install &lt;code&gt;R.Swift&lt;/code&gt; Binary and Run Script Phase&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;mac-cain13/R.swift&lt;/code&gt; to your &lt;a href=&#34;https://github.com/yonaskolb/Mint#mintfile&#34;&gt;Mintfile&lt;/a&gt; and run &lt;code&gt;mint bootstrap&lt;/code&gt; to install this package without linking it globally (recommended)&lt;/li&gt; &#xA; &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA; &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if mint list | grep -q &#39;R.swift&#39;; then&#xA;  mint run R.swift rswift generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;else&#xA;  echo &#34;error: R.swift not installed; run &#39;mint bootstrap&#39; to install&#34;&#xA;  return -1&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA; &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA; &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;h4&gt;Second, Install &lt;code&gt;R.Swift.Library&lt;/code&gt; via the Swift Package Manager (requires Xcode 11)&lt;/h4&gt; &#xA;&lt;p&gt;If you see a build error &lt;code&gt;No such module &#39;Rswift&#39;&lt;/code&gt; when trying to &lt;code&gt;#import Rswift&lt;/code&gt; at the top of the &lt;code&gt;R.generated.swift&lt;/code&gt; file, then you will also need to install the &lt;em&gt;library&lt;/em&gt; via the Swift Package Manager available in Xcode 11+.&lt;/p&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;https://github.com/mac-cain13/R.swift.Library&#34;&gt;R.Swift.Library&lt;/a&gt; repo and follow the &lt;a href=&#34;https://github.com/mac-cain13/R.swift.Library#swift-package-manager-requires-xcode-11&#34;&gt;Swift Package Manager installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;R.swift is also available through &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;. This makes it possible to install R.swift globally on your system. Install R.swift by running: &lt;code&gt;brew install rswift&lt;/code&gt;. The Homebrew formula is maintained by &lt;a href=&#34;https://github.com/tomasharkema&#34;&gt;@tomasharkema&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Add the &lt;a href=&#34;https://github.com/mac-cain13/R.swift.Library#Installation&#34;&gt;R.swift.Library&lt;/a&gt; to your project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift/releases&#34;&gt;Download&lt;/a&gt; a R.swift release, unzip it and put it into your source root directory&lt;/li&gt; &#xA; &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA; &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;$SRCROOT/rswift&#34; generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA; &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA; &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/ManualBuildPhaseExample.png&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;R.swift is built using &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager (SPM)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out the code&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;swift build -c release&lt;/code&gt; from the root directory&lt;/li&gt; &#xA; &lt;li&gt;Follow the manual installation steps with the binary you now have&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For developing on R.swift in Xcode, run &lt;code&gt;swift package generate-xcodeproj --xcconfig-overrides RswiftConfig.xcconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ll love contributions, read the &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Contribute.md&#34;&gt;contribute docs&lt;/a&gt; for info on how to report issues, submit ideas and submit pull requests!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift&#34;&gt;R.swift&lt;/a&gt; and &lt;a href=&#34;https://github.com/mac-cain13/R.swift.Library&#34;&gt;R.swift.Library&lt;/a&gt; are created by &lt;a href=&#34;https://github.com/mac-cain13&#34;&gt;Mathijs Kadijk&lt;/a&gt; and released under a &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/License&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/tomlokhorst&#34;&gt;Tom Lokhorst&lt;/a&gt; for his major contributions and help maintaining this project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iina/iina</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/iina/iina</id>
    <link href="https://github.com/iina/iina" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The modern video player for macOS.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;256&#34; src=&#34;https://github.com/iina/iina/raw/master/iina/Assets.xcassets/AppIcon.appiconset/iina-icon-256.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;IINA&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;IINA is the &lt;b&gt;modern&lt;/b&gt; video player for macOS.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://iina.io&#34;&gt;Website&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/iina/iina/releases&#34;&gt;Releases&lt;/a&gt; ¬∑ &lt;a href=&#34;https://t.me/IINAUsers&#34;&gt;Telegram Group&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Based on &lt;a href=&#34;https://github.com/mpv-player/mpv&#34;&gt;mpv&lt;/a&gt;, which provides the best decoding capacity on macOS&lt;/li&gt; &#xA; &lt;li&gt;Designed with modern versions of macOS (10.11+) in mind&lt;/li&gt; &#xA; &lt;li&gt;All the features you need for video and music: subtitles, playlists, chapters‚Ä¶and much, much more!&lt;/li&gt; &#xA; &lt;li&gt;Force Touch, picture-in-picture and advanced Touch Bar support&lt;/li&gt; &#xA; &lt;li&gt;Customizable user interface including multiple color schemes and on screen controller (OSC) layout positioning&lt;/li&gt; &#xA; &lt;li&gt;Standalone Music Mode designed for audio files&lt;/li&gt; &#xA; &lt;li&gt;Video thumbnails&lt;/li&gt; &#xA; &lt;li&gt;Online subtitle searching and intelligent local subtitle matching&lt;/li&gt; &#xA; &lt;li&gt;Unlimited playback history&lt;/li&gt; &#xA; &lt;li&gt;Convenient and interactive settings for video/audio filters&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable keyboard, mouse, trackpad, and gesture controls&lt;/li&gt; &#xA; &lt;li&gt;mpv configuration files and script system for advanced users&lt;/li&gt; &#xA; &lt;li&gt;Command line tool and browser extensions provided&lt;/li&gt; &#xA; &lt;li&gt;In active development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;IINA uses mpv for media playback. To build IINA, you can either fetch copies of these libraries we have already built (using the instructions below) or build them yourself by skipping to &lt;a href=&#34;https://raw.githubusercontent.com/iina/iina/develop/#building-mpv-manually&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using the pre-compiled libraries&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download pre-compiled libraries by running&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./other/download_libs.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tips: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change URL in the shell script if you want to download arch-specific binaries. By default, it will download the universal ones. You can download other binaries from &lt;code&gt;https://iina.io/dylibs/${ARCH}/fileList.txt&lt;/code&gt; where &lt;code&gt;ARCH&lt;/code&gt; can be &lt;code&gt;universal&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you want to build an older IINA version, make sure to download the correponding dylibs. For example, &lt;code&gt;https://iina.io/dylibs/1.2.0/universal/fileList.txt&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Open iina.xcodeproj in the &lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835&#34;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building mpv manually&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build your own copy of mpv. If you&#39;re using a package manager to manage dependencies, the steps below outline the process.&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;p&gt;Use our tap as it passes in the correct flags to mpv&#39;s configure script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew tap iina/homebrew-mpv-iina&#xA;$ brew install mpv-iina&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;p&gt;Pass in these flags when installing:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# port install mpv +uchardet -bundle -rubberband configure.args=&#34;--enable-libmpv-shared --enable-lua --enable-libarchive --enable-libbluray --disable-swift --disable-rubberband&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the correponding mpv and FFmpeg header files into &lt;code&gt;deps/include/&lt;/code&gt;, replacing the current ones. You can find them on GitHub &lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;(e.g. mpv)&lt;/a&gt;, but it&#39;s recommended to copy them from the Homebrew or MacPorts installation. Always make sure the header files have the same version of the dylibs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/parse_doc.rb&lt;/code&gt;. This script will fetch the latest mpv documentation and generate &lt;code&gt;MPVOption.swift&lt;/code&gt;, &lt;code&gt;MPVCommand.swift&lt;/code&gt; and &lt;code&gt;MPVProperty.swift&lt;/code&gt;. Copy them from &lt;code&gt;other/&lt;/code&gt; to &lt;code&gt;iina/&lt;/code&gt;, replacing the current files. This is only needed when updating libmpv. Note that if the API changes, the player source code may also need to be changed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/change_lib_dependencies.rb&lt;/code&gt;. This script will deploy the dependent libraries into &lt;code&gt;deps/lib&lt;/code&gt;. If you&#39;re using a package manager to manage dependencies, invoke it like so:&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ other/change_lib_dependencies.rb &#34;$(brew --prefix)&#34; &#34;$(brew --prefix mpv-iina)/lib/libmpv.dylib&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ port contents mpv | grep &#39;\.dylib$&#39; | xargs other/change_lib_dependencies.rb /opt/local&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open iina.xcodeproj in the &lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835&#34;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove all of references to .dylib files from the Frameworks group in the sidebar and add all the .dylib files in &lt;code&gt;deps/lib&lt;/code&gt; to that group by clicking &#34;Add Files to iina...&#34; in the context menu.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add all the imported .dylib files into the &#34;Copy Dylibs&#34; phase under &#34;Build Phases&#34; tab of the iina target.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the necessary .dylib files present in the &#34;Link Binary With Libraries&#34; phase under &#34;Build Phases&#34;. Xcode should already added all dylibs under this section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;IINA is always looking for contributions, whether it&#39;s through bug reports, code, or new translations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you find a bug in IINA, or would like to suggest a new feature or enhancement, it&#39;d be nice if you could &lt;a href=&#34;https://github.com/iina/iina/issues&#34;&gt;search your problem first&lt;/a&gt;; while we don&#39;t mind duplicates, keeping issues unique helps us save time and consolidates effort. If you can&#39;t find your issue, feel free to &lt;a href=&#34;https://github.com/iina/iina/issues/new&#34;&gt;file a new one&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re looking to contribute code, please read &lt;a href=&#34;https://raw.githubusercontent.com/iina/iina/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;‚Äìit has information on IINA&#39;s process for handling contributions, and tips on how the code is structured to make your work easier.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;d like to translate IINA to your language, please visit &lt;a href=&#34;https://translate.iina.io&#34;&gt;IINA&#39;s instance of Crowdin&lt;/a&gt;. You can create an account for free and start translating and/or approving. Please do not send pull request to this repo directly, Crowdin will automatically sync new translations with our repo. If you want to translate IINA into a new language that is currently not in the list, feel free to open an issue.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Moya/Moya</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/Moya/Moya</id>
    <link href="https://github.com/Moya/Moya" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Network abstraction layer written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;160&#34; src=&#34;https://raw.githubusercontent.com/Moya/Moya/master/web/logo_github.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Moya 15.0.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/Moya/Moya/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/Moya/Moya/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/Moya/Moya?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/Moya/Moya/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Moya&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Moya.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A Chinese version of this document can be found &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Readme_CN.md&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re a smart developer. You probably use &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; to abstract away access to &lt;code&gt;URLSession&lt;/code&gt; and all those nasty details you don&#39;t really care about. But then, like lots of smart developers, you write ad hoc network abstraction layers. They are probably called &#34;APIManager&#34; or &#34;NetworkModel&#34;, and they always end in tears.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Moya/Moya/master/web/diagram.png&#34; alt=&#34;Moya Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ad hoc network layers are common in iOS apps. They&#39;re bad for a few reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Makes it hard to write new apps (&#34;where do I begin?&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Makes it hard to maintain existing apps (&#34;oh my god, this mess...&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Makes it hard to write unit tests (&#34;how do I do this again?&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So the basic idea of Moya is that we want some network abstraction layer that sufficiently encapsulates actually calling Alamofire directly. It should be simple enough that common things are easy, but comprehensive enough that complicated things are also easy.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you use Alamofire to abstract away &lt;code&gt;URLSession&lt;/code&gt;, why not use something to abstract away the nitty gritty of URLs, parameters, etc?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some awesome features of Moya:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile-time checking for correct API endpoint accesses.&lt;/li&gt; &#xA; &lt;li&gt;Lets you define a clear usage of different endpoints with associated enum values.&lt;/li&gt; &#xA; &lt;li&gt;Treats test stubs as first-class citizens so unit testing is super-easy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can check out more about the project direction in the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Vision.md&#34;&gt;vision document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Projects&lt;/h2&gt; &#xA;&lt;p&gt;We have provided two sample projects in the repository. To use it download the repo, run &lt;code&gt;carthage update&lt;/code&gt; to download the required libraries and open &lt;a href=&#34;https://github.com/Moya/Moya/tree/master/Moya.xcodeproj&#34;&gt;Moya.xcodeproj&lt;/a&gt;. You&#39;ll see two schemes: &lt;code&gt;Basic&lt;/code&gt; and &lt;code&gt;Multi-Target&lt;/code&gt; - select one and then build &amp;amp; run! Source files for these are in the &lt;code&gt;Examples&lt;/code&gt; directory in project navigator. Have fun!&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is actively under development, and is being used in &lt;a href=&#34;https://github.com/Artsy/eidolon&#34;&gt;Artsy&#39;s auction app&lt;/a&gt;. We consider it ready for production use.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Moya version vs Swift version.&lt;/h3&gt; &#xA;&lt;p&gt;Below is a table that shows which version of Moya you should use for your Swift version.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Moya&lt;/th&gt; &#xA;   &lt;th&gt;RxMoya&lt;/th&gt; &#xA;   &lt;th&gt;ReactiveMoya&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.X&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.X&lt;/td&gt; &#xA;   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;10.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.X&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.3&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.2&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: If you are using Swift 4.2 in your project, but you are using Xcode 10.2, Moya 13 should work correctly even though we use Swift 5.0.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Upgrading to a new major version of Moya? Check out our &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/MigrationGuides&#34;&gt;migration guides&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Instructions below are for using &lt;strong&gt;SwiftPM&lt;/strong&gt; without the Xcode UI. It&#39;s the easiest to go to your Project Settings -&amp;gt; Swift Packages and add Moya from there.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To integrate using Apple&#39;s Swift package manager, without Xcode integration, add the following as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/Moya/Moya.git&#34;, .upToNextMajor(from: &#34;15.0.0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then specify &lt;code&gt;&#34;Moya&#34;&lt;/code&gt; as a dependency of the Target in which you wish to use Moya. If you want to use reactive extensions, add also &lt;code&gt;&#34;ReactiveMoya&#34;&lt;/code&gt;, &lt;code&gt;&#34;RxMoya&#34;&lt;/code&gt; or &lt;code&gt;&#34;CombineMoya&#34;&lt;/code&gt; as your target dependency respectively. Here&#39;s an example &lt;code&gt;PackageDescription&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.3&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyPackage&#34;,&#xA;    products: [&#xA;        .library(&#xA;            name: &#34;MyPackage&#34;,&#xA;            targets: [&#34;MyPackage&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/Moya/Moya.git&#34;, .upToNextMajor(from: &#34;15.0.0&#34;))&#xA;    ],&#xA;    targets: [&#xA;        .target(&#xA;            name: &#34;MyPackage&#34;,&#xA;            dependencies: [&#34;ReactiveMoya&#34;])&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Combine note: if you&#39;re using &lt;strong&gt;CombineMoya&lt;/strong&gt;, make sure that you use Xcode 11.5.0 or later. With earlier versions of Xcode you will have to manually add Combine as a weakly linked framework to your application target.&lt;/p&gt; &#xA;&lt;h3&gt;Accio&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;Accio&lt;/a&gt; is a dependency manager based on SwiftPM which can build frameworks for iOS/macOS/tvOS/watchOS. Therefore the integration steps of Moya are exactly the same as described above. Once your &lt;code&gt;Package.swift&lt;/code&gt; file is configured, run &lt;code&gt;accio update&lt;/code&gt; instead of &lt;code&gt;swift package update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;For Moya, use the following entry in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;pod &#39;Moya&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or &#xA;&#xA;pod &#39;Moya/RxSwift&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or&#xA;&#xA;pod &#39;Moya/ReactiveSwift&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or&#xA;&#xA;pod &#39;Moya/Combine&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In any file you&#39;d like to use Moya in, don&#39;t forget to import the framework with &lt;code&gt;import Moya&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Carthage users can point to this repository and use whichever generated framework they&#39;d like, &lt;code&gt;Moya&lt;/code&gt;, &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;ReactiveMoya&lt;/code&gt;, or &lt;code&gt;CombineMoya&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make the following entry in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Moya/Moya&#34; ~&amp;gt; 15.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: At this time, Carthage does not provide a way to build only specific repository submodules. All submodules and their dependencies will be built with the above command. However, you don&#39;t need to copy frameworks you aren&#39;t using into your project. For instance, if you aren&#39;t using &lt;code&gt;ReactiveSwift&lt;/code&gt;, feel free to delete that framework along with &lt;code&gt;ReactiveMoya&lt;/code&gt; from the Carthage Build directory after &lt;code&gt;carthage update&lt;/code&gt; completes. Or if you are using &lt;code&gt;ReactiveSwift&lt;/code&gt; but not &lt;code&gt;RxSwift&lt;/code&gt; or &lt;code&gt;Combine&lt;/code&gt;, then &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;RxTest&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt;, &lt;code&gt;CombineMoya&lt;/code&gt; etc. can safely be deleted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &lt;em&gt;if&lt;/em&gt; your project is not initialized as a git repository:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Alamofire &amp;amp; Moya as a git &lt;a href=&#34;http://git-scm.com/docs/git-submodule&#34;&gt;submodule&lt;/a&gt; by running the following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git&#xA;$ git submodule add https://github.com/Moya/Moya.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project. Do the same with the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; in the &lt;code&gt;Moya&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;They should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify that the deployment targets of the &lt;code&gt;xcodeproj&lt;/code&gt;s match that of your application target in the Project Navigator.&lt;/li&gt; &#xA; &lt;li&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &#34;Targets&#34; heading in the sidebar.&lt;/li&gt; &#xA; &lt;li&gt;In the tab bar at the top of that window, open the &#34;General&#34; panel.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &#34;Embedded Binaries&#34; section.&lt;/li&gt; &#xA; &lt;li&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as either &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt; or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under &#34;Embedded Binaries&#34; again and add the correct build target for &lt;code&gt;Moya&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The three frameworks are automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/Examples/Basic.md&#34;&gt;some setup&lt;/a&gt;, using Moya is really simple. You can access an API like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.request(.zen) { result in&#xA;    switch result {&#xA;    case let .success(moyaResponse):&#xA;        let data = moyaResponse.data&#xA;        let statusCode = moyaResponse.statusCode&#xA;        // do something with the response data or statusCode&#xA;    case let .failure(error):&#xA;        // this means there was a network failure - either the request&#xA;        // wasn&#39;t sent (connectivity), or no response was received (server&#xA;        // timed out).  If the server responds with a 4xx or 5xx error, that&#xA;        // will be sent as a &#34;.success&#34;-ful response.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s a basic example. Many API requests need parameters. Moya encodes these into the enum you use to access the endpoint, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.request(.userProfile(&#34;ashfurrow&#34;)) { result in&#xA;    // do something with the result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No more typos in URLs. No more missing parameter values. No more messing with parameter encoding.&lt;/p&gt; &#xA;&lt;p&gt;For more examples, see the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/Examples&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reactive Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Even cooler are the reactive extensions. Moya provides reactive extensions for &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift&#34;&gt;ReactiveSwift&lt;/a&gt;, &lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt;, and &lt;a href=&#34;https://developer.apple.com/documentation/combine&#34;&gt;Combine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ReactiveSwift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/ReactiveSwift.md&#34;&gt;&lt;code&gt;ReactiveSwift&lt;/code&gt; extension&lt;/a&gt; provides both &lt;code&gt;reactive.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;reactive.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods that immediately return &lt;code&gt;SignalProducer&lt;/code&gt;s that you can start, bind, map, or whatever you want to do. To handle errors, for instance, we could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.reactive.request(.userProfile(&#34;ashfurrow&#34;)).start { event in&#xA;    switch event {&#xA;    case let .value(response):&#xA;        image = UIImage(data: response.data)&#xA;    case let .failed(error):&#xA;        print(error)&#xA;    default:&#xA;        break&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RxSwift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/RxSwift.md&#34;&gt;&lt;code&gt;RxSwift&lt;/code&gt; extension&lt;/a&gt; also provide both &lt;code&gt;rx.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods, but return type is different for both. In case of a normal &lt;code&gt;rx.request(:callbackQueue)&lt;/code&gt;, the return type is &lt;code&gt;Single&amp;lt;Response&amp;gt;&lt;/code&gt; which emits either single element or an error. In case of a &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt;, the return type is &lt;code&gt;Observable&amp;lt;ProgressResponse&amp;gt;&lt;/code&gt;, since we may get multiple events from progress and one last event which is a response.&lt;/p&gt; &#xA;&lt;p&gt;To handle errors, for instance, we could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.rx.request(.userProfile(&#34;ashfurrow&#34;)).subscribe { event in&#xA;    switch event {&#xA;    case let .success(response):&#xA;        image = UIImage(data: response.data)&#xA;    case let .error(error):&#xA;        print(error)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to the option of using signals instead of callback blocks, there are also a series of signal operators for RxSwift and ReactiveSwift that will attempt to map the data received from the network response into either an image, some JSON, or a string, with &lt;code&gt;mapImage()&lt;/code&gt;, &lt;code&gt;mapJSON()&lt;/code&gt;, and &lt;code&gt;mapString()&lt;/code&gt;, respectively. If the mapping is unsuccessful, you&#39;ll get an error on the signal. You also get handy methods for filtering out certain status codes. This means that you can place your code for handling API errors like 400&#39;s in the same places as code for handling invalid responses.&lt;/p&gt; &#xA;&lt;h3&gt;Combine&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Combine&lt;/code&gt; extension provides &lt;code&gt;requestPublisher(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;requestWithProgressPublisher(:callbackQueue)&lt;/code&gt; returning &lt;code&gt;AnyPublisher&amp;lt;Response, MoyaError&amp;gt;&lt;/code&gt; and &lt;code&gt;AnyPublisher&amp;lt;ProgressResponse, MoyaError&amp;gt;&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of &lt;code&gt;requestPublisher&lt;/code&gt; usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;let cancellable = provider.requestPublisher(.userProfile(&#34;ashfurrow&#34;))&#xA;    .sink(receiveCompletion: { completion in&#xA;        guard case let .failure(error) = completion else { return }&#xA;&#xA;        print(error)&#xA;    }, receiveValue: { response in&#xA;        image = UIImage(data: response.data)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community Projects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/CommunityProjects.md&#34;&gt;Moya has a great community around it and some people have created some very helpful extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Hey! Do you like Moya? Awesome! We could actually really use your help!&lt;/p&gt; &#xA;&lt;p&gt;Open source isn&#39;t just writing code. Moya could use your help with any of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finding (and reporting!) bugs.&lt;/li&gt; &#xA; &lt;li&gt;New feature suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Answering questions on issues.&lt;/li&gt; &#xA; &lt;li&gt;Documentation improvements.&lt;/li&gt; &#xA; &lt;li&gt;Reviewing pull requests.&lt;/li&gt; &#xA; &lt;li&gt;Helping to manage issue priorities.&lt;/li&gt; &#xA; &lt;li&gt;Fixing bugs/new features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If any of that sounds cool to you, send a pull request! After your first contribution, we will add you as a member to the repo so you can merge pull requests and help steer the ship &lt;span&gt;üö¢&lt;/span&gt; You can read more details about that &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Contributing.md&#34;&gt;in our contributor guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Moya&#39;s community has a tremendous positive energy, and the maintainers are committed to keeping things awesome. Like &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/wiki/Communication-&amp;amp;-Design-Rules&#34;&gt;in the CocoaPods community&lt;/a&gt;, always assume positive intent. Even if a comment sounds mean-spirited, give the person the benefit of the doubt.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Code%20of%20Conduct.md&#34;&gt;its terms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new source files&lt;/h3&gt; &#xA;&lt;p&gt;If you add or remove a source file from Moya, a corresponding change needs to be made to the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; project at the root of this repository. This project is used for Carthage. Don&#39;t worry, you&#39;ll get an automated warning when submitting a pull request if you forget.&lt;/p&gt; &#xA;&lt;h3&gt;Help us improve Moya documentation&lt;/h3&gt; &#xA;&lt;p&gt;Whether you‚Äôre a core member or a user trying it out for the first time, you can make a valuable contribution to Moya by improving the documentation. Help us by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending us feedback about something you thought was confusing or simply missing.&lt;/li&gt; &#xA; &lt;li&gt;Suggesting better wording or ways of explaining certain topics.&lt;/li&gt; &#xA; &lt;li&gt;Sending us a pull request via GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Improving the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Readme_CN.md&#34;&gt;Chinese documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Moya is released under an MIT license. See &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/License.md&#34;&gt;License.md&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-syntax</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/apple/swift-syntax</id>
    <link href="https://github.com/apple/swift-syntax" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SwiftPM package for SwiftSyntax library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftSyntax&lt;/h1&gt; &#xA;&lt;p&gt;SwiftSyntax is a set of Swift bindings for the &lt;a href=&#34;https://github.com/apple/swift/tree/main/lib/Syntax&#34;&gt;libSyntax&lt;/a&gt; library. It allows Swift tools to parse, inspect, generate, and transform Swift source code.&lt;/p&gt; &#xA;&lt;p&gt;Its API is designed for performance-critical applications. It uses value types almost exclusively and aims to avoid existential conversions where possible.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: SwiftSyntax is still in development, and the API is not guaranteed to be stable. It&#39;s subject to change without warning.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Declare SwiftPM dependency with release tag&lt;/h2&gt; &#xA;&lt;p&gt;Add this repository to the &lt;code&gt;Package.swift&lt;/code&gt; manifest of your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.3&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;MyTool&#34;,&#xA;  dependencies: [&#xA;    .package(name: &#34;SwiftSyntax&#34;, url: &#34;https://github.com/apple/swift-syntax.git&#34;, .exact(&#34;&amp;lt;#Specify Release tag#&amp;gt;&#34;)),&#xA;  ],&#xA;  targets: [&#xA;    .target(name: &#34;MyTool&#34;, dependencies: [&#34;SwiftSyntax&#34;]),&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;&amp;lt;#Specify Release tag#&amp;gt;&lt;/code&gt; by the version of SwiftSyntax that you want to use (see the following table for mapping details).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Xcode Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Swift Release Tag&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;SwiftSyntax Release Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 13.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.6-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50600.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 13.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.5-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50500.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 12.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.4-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50400.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.3-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50300.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 11.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.2-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50200.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Then, import &lt;code&gt;SwiftSyntax&lt;/code&gt; in your Swift code.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found &lt;a href=&#34;https://github.com/apple/swift-syntax/raw/main/Documentation&#34;&gt;here&lt;/a&gt; and some examples of using SwiftSyntax can be found &lt;a href=&#34;https://github.com/apple/swift-syntax/raw/main/Examples&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Start contributing to SwiftSyntax see &lt;a href=&#34;https://github.com/apple/swift-syntax/raw/main/CONTRIBUTING.md&#34;&gt;this guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you should hit any issues while using SwiftSyntax, we appreciate bug reports on &lt;a href=&#34;https://github.com/apple/swift-syntax/issues&#34;&gt;GitHub Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-syntax/main/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kean/Nuke</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/kean/Nuke</id>
    <link href="https://github.com/kean/Nuke" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Image loading system&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/1567433/114792417-57c1d080-9d56-11eb-8035-dc07cfd7557f.png&#34; height=&#34;205&#34;&gt; &#xA;&lt;h1&gt;Image Loading System&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%2C%20macOS%2C%20watchOS%2C%20tvOS-lightgrey.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://github.com/kean/Nuke/workflows/Nuke%20CI/badge.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Nuke ILS provides an efficient way to download and display images in your app. It&#39;s easy to learn and use thanks to a clear and concise API. Its architecture enables many powerful features while offering virtually unlimited possibilities for customization.&lt;/p&gt; &#xA;&lt;p&gt;Despite the number of features, the framework is lean and compiles in under 2 seconds&lt;a href=&#34;https://raw.githubusercontent.com/kean/Nuke/master/#footnote-1&#34;&gt;¬π&lt;/a&gt;. Nuke has an automated test suite 2x the size of the codebase itself, ensuring excellent reliability. Every feature is carefully designed and optimized for &lt;a href=&#34;https://kean.blog/post/nuke-9&#34;&gt;performance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Fast LRU memory and disk cache&lt;/strong&gt; ¬∑ &lt;strong&gt;SwiftUI&lt;/strong&gt; ¬∑ &lt;strong&gt;Smart background decompression&lt;/strong&gt; ¬∑ &lt;strong&gt;Image processing&lt;/strong&gt; ¬∑ &lt;strong&gt;Resumable downloads&lt;/strong&gt; ¬∑ &lt;strong&gt;Intelligent deduplication&lt;/strong&gt; ¬∑ &lt;strong&gt;Request prioritization&lt;/strong&gt; ¬∑ &lt;strong&gt;Prefetching&lt;/strong&gt; ¬∑ &lt;strong&gt;Rate limiting&lt;/strong&gt; ¬∑ &lt;strong&gt;Progressive JPEG, HEIF, WebP, SVG, GIF&lt;/strong&gt; ¬∑ &lt;strong&gt;Alamofire&lt;/strong&gt; ¬∑ &lt;strong&gt;Combine&lt;/strong&gt; ¬∑ &lt;strong&gt;Async/Await&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Nuke is easy to learn and use thanks to &lt;a href=&#34;https://kean.blog/nuke/guides/welcome&#34;&gt;&lt;strong&gt;Nuke Docs&lt;/strong&gt;&lt;/a&gt;. Make sure to also check out &lt;a href=&#34;https://github.com/kean/NukeDemo&#34;&gt;&lt;strong&gt;Nuke Demo&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Upgrading from the previous version? Use a &lt;a href=&#34;https://github.com/kean/Nuke/raw/10.0.0/Documentation/Migrations&#34;&gt;&lt;strong&gt;Migration Guide&lt;/strong&gt;&lt;/a&gt;. Switching from another framework? Use a &lt;a href=&#34;https://github.com/kean/Nuke/tree/master/Documentation/Switch&#34;&gt;&lt;strong&gt;Switching Guide&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;a href=&#34;https://kean.blog/nuke/guides/welcome&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1567433/114312077-59259b80-9abf-11eb-93f9-29fb87eb025a.png&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a name=&#34;h_plugins&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;The image pipeline is easy to customize and extend. Check out the following first-class extensions and packages built by the community.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/NukeUI&#34;&gt;&lt;strong&gt;NukeUI&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy image loading for SwiftUI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/NukeBuilder&#34;&gt;&lt;strong&gt;NukeBuilder&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A fun and convenient way to use Nuke&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/Nuke-Alamofire-Plugin&#34;&gt;&lt;strong&gt;Alamofire Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Replace networking layer with &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/RxNuke&#34;&gt;&lt;strong&gt;RxNuke&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt; extensions for Nuke with examples&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/makleso6/NukeWebP&#34;&gt;&lt;strong&gt;NukeWebP&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. &lt;a href=&#34;https://developers.google.com/speed/webp/&#34;&gt;WebP&lt;/a&gt; support, built by &lt;a href=&#34;https://github.com/makleso6&#34;&gt;Maxim Kolesnik&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ryokosuge/Nuke-WebP-Plugin&#34;&gt;&lt;strong&gt;WebP Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. &lt;a href=&#34;https://developers.google.com/speed/webp/&#34;&gt;WebP&lt;/a&gt; support, built by &lt;a href=&#34;https://github.com/ryokosuge&#34;&gt;Ryo Kosuge&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/delneg/Nuke-AVIF-Plugin&#34;&gt;&lt;strong&gt;AVIF Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. &lt;a href=&#34;https://caniuse.com/avif&#34;&gt;AVIF&lt;/a&gt; support, built by &lt;a href=&#34;https://github.com/delneg&#34;&gt;Denis&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/Nuke-Gifu-Plugin&#34;&gt;&lt;strong&gt;Gifu Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use &lt;a href=&#34;https://github.com/kaishin/Gifu&#34;&gt;Gifu&lt;/a&gt; to load and display animated GIFs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/Nuke-AnimatedImage-Plugin&#34;&gt;&lt;strong&gt;FLAnimatedImage Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use &lt;a href=&#34;https://github.com/Flipboard/FLAnimatedImage&#34;&gt;FLAnimatedImage&lt;/a&gt; to load and display &lt;a href=&#34;https://raw.githubusercontent.com/kean/Nuke/master/(https://www.youtube.com/watch?v=fEJqQMJrET4)&#34;&gt;animated GIFs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/roubachof/Xamarin.Forms.Nuke&#34;&gt;&lt;strong&gt;Xamarin NuGet&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. Makes it possible to use Nuke from Xamarin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;h_contribute&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://trello.com/b/Us4rHryT/nuke&#34;&gt;Nuke&#39;s roadmap&lt;/a&gt; is managed in Trello and is publicly available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;h_requirements&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nuke&lt;/th&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Xcode&lt;/th&gt; &#xA;   &lt;th&gt;Platforms&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nuke 10.10&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 12.0 / watchOS 5.0 / macOS 10.14 / tvOS 12.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nuke 10.0&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 11.0 / watchOS 4.0 / macOS 10.13 / tvOS 11.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nuke 9.0&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.1&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 11.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 11.0 / watchOS 4.0 / macOS 10.13 / tvOS 11.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://kean.blog/nuke/guides/installation&#34;&gt;Installation Guide&lt;/a&gt; for information about the older versions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Nuke is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a name=&#34;footnote-1&#34;&gt;¬π&lt;/a&gt; Measured on MacBook Pro 14&#34; 2021 (10-core M1 Pro)&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>vapor/vapor</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/vapor/vapor</id>
    <link href="https://github.com/vapor/vapor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíß A server-side Swift HTTP web framework.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://discord.gg/vapor&#34;&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/vapor&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1342803/75634175-4876d680-5bd9-11ea-90d6-12c7b6a9ee3f.png&#34; alt=&#34;Vapor&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.vapor.codes/4.0/&#34;&gt; &lt;img src=&#34;http://img.shields.io/badge/read_the-docs-2196f3.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/vapor&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/431917998102675485.svg?sanitize=true&#34; alt=&#34;Team Chat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/vapor/vapor/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;MIT License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/vapor/vapor/actions&#34;&gt; &lt;img src=&#34;https://github.com/vapor/vapor/workflows/test/badge.svg?branch=main&#34; alt=&#34;Continuous Integration&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swift.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/swift-5.2-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift 5.2&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/codevapor&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/twitter-codevapor-5AA9E7.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Vapor is an HTTP web framework for Swift. It provides a beautifully expressive and easy-to-use foundation for your next website, API, or cloud project.&lt;/p&gt; &#xA;&lt;p&gt;Take a look at some of the &lt;a href=&#34;https://github.com/Cellane/awesome-vapor&#34;&gt;awesome stuff&lt;/a&gt; created with Vapor.&lt;/p&gt; &#xA;&lt;h3&gt;üíß Community&lt;/h3&gt; &#xA;&lt;p&gt;Join the welcoming community of fellow Vapor developers on &lt;a href=&#34;http://vapor.team&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üöÄ Contributing&lt;/h3&gt; &#xA;&lt;p&gt;To contribute a &lt;strong&gt;feature or idea&lt;/strong&gt; to Vapor, &lt;a href=&#34;https://github.com/vapor/vapor/issues/new&#34;&gt;create an issue&lt;/a&gt; explaining your idea or bring it up on &lt;a href=&#34;http://vapor.team&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find a &lt;strong&gt;bug&lt;/strong&gt;, please &lt;a href=&#34;https://github.com/vapor/vapor/issues/new&#34;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you find a &lt;strong&gt;security vulnerability&lt;/strong&gt;, please contact &lt;a href=&#34;mailto:security@vapor.codes&#34;&gt;security@vapor.codes&lt;/a&gt; as soon as possible.&lt;/p&gt; &#xA;&lt;h3&gt;üíõ Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support Vapor&#39;s development by &lt;a href=&#34;https://github.com/sponsors/vapor&#34;&gt;becoming a sponsor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.brokenhands.io&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9938337/137103192-21f99099-6aaa-4cc1-a1a7-21ee767a72d1.png&#34; height=&#34;100px&#34; alt=&#34;Broken Hands&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://monstar-lab.com&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1049951/110122158-89429600-7dbf-11eb-98c8-9f65dad29001.png&#34; height=&#34;100px&#34; alt=&#34;Monstarlab&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://gotranseo.com&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1342803/89341627-92c02000-d66f-11ea-8b29-c278386fdb09.png&#34; height=&#34;100px&#34; alt=&#34;Transeo&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;http://omrd.com&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9938337/112326871-d1f9ba80-8cac-11eb-88b2-b2ca23a80c03.png&#34; height=&#34;100px&#34; alt=&#34;omrd&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/MrLotU&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1342803/79599312-426a8580-80b3-11ea-89b3-8b2722485e37.png&#34; height=&#34;100px&#34; alt=&#34;Jari&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://macstadium.com&#34;&gt; &lt;img src=&#34;https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png&#34; height=&#34;100px&#34; alt=&#34;MacStadium&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;üíö Backers&lt;/h3&gt; &#xA;&lt;p&gt;Support Vapor&#39;s development by &lt;a href=&#34;https://github.com/sponsors/vapor&#34;&gt;becoming a backer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a data-amt=&#34;50&#34; data-since=&#34;10/09/20&#34; href=&#34;https://github.com/raphaelcruzeiro&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/425640?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;50&#34; data-since=&#34;05/20/21&#34; href=&#34;https://github.com/realityworks&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/21374160?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;25&#34; data-since=&#34;3/11/20&#34; href=&#34;https://github.com/hjuraev&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/5513926?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;25&#34; data-since=&#34;7/21/20&#34; href=&#34;https://github.com/ultim8p&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/4804985?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;25&#34; data-since=&#34;10/30/20&#34; href=&#34;https://github.com/0xLeif&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/8268288?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;25&#34; data-since=&#34;09/22/21&#34; href=&#34;https://github.com/kishikawakatsumi&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/40610?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/14/19&#34; href=&#34;https://github.com/tkrajacic&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/873717?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/14/19&#34; href=&#34;https://github.com/slashmo&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/16192401?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/14/19&#34; href=&#34;https://github.com/ScottRobbins&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/6894359?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/15/19&#34; href=&#34;https://github.com/twof&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/5561501?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/21/19&#34; href=&#34;https://github.com/mikkelu&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/17051694?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;5/20/20&#34; href=&#34;https://github.com/jdmcd&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/11842593?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/1/20&#34; href=&#34;https://github.com/GalenRhodes&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/16696128?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/09/20&#34; href=&#34;https://github.com/ArchieGoodwin&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/3480566?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;07/07/20&#34; href=&#34;https://github.com/PSchmiedmayer&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/28656495?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/12/20&#34; href=&#34;https://github.com/ScottRobbins&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/6894359?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;10/31/20&#34; href=&#34;https://github.com/masterofinsanity&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/31490164?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;02/09/21&#34; href=&#34;https://github.com/BAChapin&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/22135180?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;03/16/21&#34; href=&#34;https://github.com/viaaurelia&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/80760182?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;07/02/21&#34; href=&#34;https://github.com/corysullivan&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1440684?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;07/19/21&#34; href=&#34;https://github.com/saschasalles&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/43401678?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;10&#34; data-since=&#34;07/31/21&#34; href=&#34;https://github.com/davdroman&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/2538074?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/15/19&#34; href=&#34;https://github.com/grundoon&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/876321?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/17/19&#34; href=&#34;https://github.com/maartene&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/5150271?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/23/19&#34; href=&#34;https://github.com/steve-h&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/1298089?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/25/19&#34; href=&#34;https://github.com/SpencerCurtis&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/16965587?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;11/17/19&#34; href=&#34;https://github.com/MaherKSantina&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/24646608?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;3/20/20&#34; href=&#34;https://github.com/lmcd&#34;&gt; &lt;img src=&#34;https://avatars3.githubusercontent.com/u/363540?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/07/20&#34; href=&#34;https://github.com/radude89&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/2872139?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/10/20&#34; href=&#34;https://github.com/wjosset&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/16748205?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/10/20&#34; href=&#34;https://github.com/Mattiav8&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/42816898?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/20/20&#34; href=&#34;https://github.com/klaas&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/320967?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/21/20&#34; href=&#34;https://github.com/MaxDesiatov&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/112310?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/30/20&#34; href=&#34;https://github.com/zachwick&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/406510?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;06/22/20&#34; href=&#34;https://github.com/rafaellevy&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/20618652?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;07/04/20&#34; href=&#34;https://github.com/rausnitz&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/6132143?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;07/31/20&#34; href=&#34;https://github.com/Mordil&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/3506776?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/09/20&#34; href=&#34;https://github.com/jessetipton&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/2132778?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/09/20&#34; href=&#34;https://github.com/g-Off&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/59969?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/13/20&#34; href=&#34;https://github.com/finestructure&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/65520?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;10/28/20&#34; href=&#34;https://github.com/avario&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/2192944?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;12/21/20&#34; href=&#34;https://github.com/doozMen&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/686038?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;12/08/21&#34; href=&#34;https://github.com/Andrewangeta&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/12012815?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;12/09/21&#34; href=&#34;https://github.com/addli&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/16063852?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;02/06/21&#34; href=&#34;https://github.com/nuno-vieira&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/12814114?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;02/10/21&#34; href=&#34;https://github.com/bitwit&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/707507?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;03/11/21&#34; href=&#34;https://github.com/shgew&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/5584672?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/16/21&#34; href=&#34;https://github.com/KombuchaPrivacy&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/78174960?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;04/21/21&#34; href=&#34;https://github.com/markuswntr&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/2485273?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;05/26/21&#34; href=&#34;https://github.com/bdrelling&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/3022693?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;06/05/21&#34; href=&#34;https://github.com/mayondigital&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/47883473?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;06/19/21&#34; href=&#34;https://github.com/mattesmohr&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/64681110?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;06/19/21&#34; href=&#34;https://github.com/amasson42&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/10562946?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;06/22/21&#34; href=&#34;https://github.com/scibidoo&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/243518?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;07/22/21&#34; href=&#34;https://github.com/litmaps&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/54196101?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;07/26/21&#34; href=&#34;https://github.com/kevinzhow&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1156192?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;08/09/21&#34; href=&#34;https://github.com/Strobocop&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/6342694?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;08/20/21&#34; href=&#34;https://github.com/j4nos&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/11924475?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;08/28/21&#34; href=&#34;https://github.com/JRHonda&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/29804812?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;09/11/21&#34; href=&#34;https://github.com/tristanbiesecker&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/12146879?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt; &lt;a data-amt=&#34;5&#34; data-since=&#34;09/23/21&#34; href=&#34;https://github.com/mkll&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/1652009?s=120&#34; width=&#34;60px&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/vapor/backer/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/30/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/30/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/31/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/31/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/32/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/32/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/33/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/33/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/34/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/34/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/35/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/35/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/36/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/36/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/37/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/37/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/38/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/38/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/39/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/39/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/40/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/40/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/41/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/41/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/42/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/42/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/43/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/43/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/44/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/44/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/45/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/45/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/46/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/46/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/47/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/47/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/vapor/backer/48/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/vapor/backer/48/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;http://www.google-analytics.com/collect?v=1&amp;amp;t=pageview&amp;amp;_s=1&amp;amp;dl=https%3A%2F%2Fgithub.com%2Fvapor%2Fvapor&amp;amp;_u=MAC~&amp;amp;cid=1757014354.1393964045&amp;amp;tid=UA-76177358-6&#34; alt=&#34;analytics&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sindresorhus/KeyboardShortcuts</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/sindresorhus/KeyboardShortcuts</id>
    <link href="https://github.com/sindresorhus/KeyboardShortcuts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚å®Ô∏è Add user-customizable global keyboard shortcuts to your macOS app in minutes&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;900&#34; src=&#34;https://github.com/sindresorhus/KeyboardShortcuts/raw/main/logo-light.png#gh-light-mode-only&#34; alt=&#34;KeyboardShortcuts&#34;&gt; &#xA; &lt;img width=&#34;900&#34; src=&#34;https://github.com/sindresorhus/KeyboardShortcuts/raw/main/logo-dark.png#gh-dark-mode-only&#34; alt=&#34;KeyboardShortcuts&#34;&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;This package lets you add support for user-customizable global keyboard shortcuts to your macOS app in minutes. It&#39;s fully sandbox and Mac App Store compatible. And it&#39;s used in production by &lt;a href=&#34;https://sindresorhus.com/dato&#34;&gt;Dato&lt;/a&gt;, &lt;a href=&#34;https://sindresorhus.com/jiffy&#34;&gt;Jiffy&lt;/a&gt;, &lt;a href=&#34;https://github.com/sindresorhus/Plash&#34;&gt;Plash&lt;/a&gt;, and &lt;a href=&#34;https://sindresorhus.com/lungo&#34;&gt;Lungo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m happy to accept more configurability and features. PR welcome! What you see here is just what I needed for my own apps.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/sindresorhus/KeyboardShortcuts/raw/main/screenshot.png&#34; width=&#34;532&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt; &lt;sup&gt; &lt;a href=&#34;https://github.com/sponsors/sindresorhus&#34;&gt;Sindre&#39;s open source work is supported by the community&lt;/a&gt; &lt;/sup&gt; &lt;/p&gt; &#xA; &lt;sup&gt;Special thanks to:&lt;/sup&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://keygen.sh&#34;&gt; &#xA;  &lt;div&gt; &#xA;   &lt;img src=&#34;https://sindresorhus.com/assets/thanks/keygen-logo.svg?sanitize=true&#34; width=&#34;210&#34; alt=&#34;Keygen&#34;&gt; &#xA;  &lt;/div&gt; &lt;b&gt;A dead-simple software licensing and distribution API built for developers&lt;/b&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;macOS 10.11+&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;https://github.com/sindresorhus/KeyboardShortcuts&lt;/code&gt; in the &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;‚ÄúSwift Package Manager‚Äù tab in Xcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, register a name for the keyboard shortcut.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Constants.swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import KeyboardShortcuts&#xA;&#xA;extension KeyboardShortcuts.Name {&#xA;&#x9;static let toggleUnicornMode = Self(&#34;toggleUnicornMode&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then refer to this strongly-typed name in other places.&lt;/p&gt; &#xA;&lt;p&gt;You will want to make a view where the user can choose a keyboard shortcut.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SettingsScreen.swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import KeyboardShortcuts&#xA;&#xA;struct SettingsScreen: View {&#xA;&#x9;var body: some View {&#xA;&#x9;&#x9;Form {&#xA;&#x9;&#x9;&#x9;KeyboardShortcuts.Recorder(&#34;Toggle Unicorn Mode:&#34;, name: .toggleUnicornMode)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;There&#39;s also &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/KeyboardShortcuts/main/#cocoa&#34;&gt;support for Cocoa&lt;/a&gt; instead of SwiftUI.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;KeyboardShortcuts.Recorder&lt;/code&gt; takes care of storing the keyboard shortcut in &lt;code&gt;UserDefaults&lt;/code&gt; and also warning the user if the chosen keyboard shortcut is already used by the system or the app&#39;s main menu.&lt;/p&gt; &#xA;&lt;p&gt;Add a listener for when the user presses their chosen keyboard shortcut.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;App.swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import KeyboardShortcuts&#xA;&#xA;@main&#xA;struct YourApp: App {&#xA;&#x9;@StateObject private var appState = AppState()&#xA;&#xA;&#x9;var body: some Scene {&#xA;&#x9;&#x9;WindowGroup {&#xA;&#x9;&#x9;&#x9;// ‚Ä¶&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;Settings {&#xA;&#x9;&#x9;&#x9;SettingsScreen()&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;@MainActor&#xA;final class AppState: ObservableObject {&#xA;&#x9;init() {&#xA;&#x9;&#x9;KeyboardShortcuts.onKeyUp(for: .toggleUnicornMode) { [self] in&#xA;&#x9;&#x9;&#x9;isUnicornMode.toggle()&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;You can also listen to key down with &lt;code&gt;.onKeyDown()&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;That&#39;s all! ‚ú®&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find a complete example in the ‚ÄúExample‚Äù directory.&lt;/p&gt; &#xA;&lt;p&gt;You can also find a &lt;a href=&#34;https://github.com/sindresorhus/Plash/raw/b348a62645a873abba8dc11ff0fb8fe423419411/Plash/PreferencesView.swift#L121-L130&#34;&gt;real-world example&lt;/a&gt; in my Plash app.&lt;/p&gt; &#xA;&lt;h4&gt;Cocoa&lt;/h4&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/KeyboardShortcuts/main/Sources/KeyboardShortcuts/RecorderCocoa.swift&#34;&gt;&lt;code&gt;KeyboardShortcuts.RecorderCocoa&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;KeyboardShortcuts.Recorder&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Cocoa&#xA;import KeyboardShortcuts&#xA;&#xA;final class PreferencesViewController: NSViewController {&#xA;&#x9;override func loadView() {&#xA;&#x9;&#x9;view = NSView()&#xA;&#xA;&#x9;&#x9;let recorder = KeyboardShortcuts.RecorderCocoa(for: .toggleUnicornMode)&#xA;&#x9;&#x9;view.addSubview(recorder)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;This package supports &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/KeyboardShortcuts/main/Sources/KeyboardShortcuts/Localization&#34;&gt;localizations&lt;/a&gt;. PR welcome for more!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repo.&lt;/li&gt; &#xA; &lt;li&gt;Create a directory that has a name that uses an &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO 639-1&lt;/a&gt; language code and optional designators, followed by the &lt;code&gt;.lproj&lt;/code&gt; suffix. &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/localizing_package_resources&#34;&gt;More here.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a file named &lt;code&gt;Localizable.strings&lt;/code&gt; under the new language directory and then copy the contents of &lt;code&gt;KeyboardShortcuts/Localization/en.lproj/Localizable.strings&lt;/code&gt; to the new file that you just created.&lt;/li&gt; &#xA; &lt;li&gt;Localize and make sure to review your localization multiple times. Check for typos.&lt;/li&gt; &#xA; &lt;li&gt;Try to find someone that speaks your language to review the translation.&lt;/li&gt; &#xA; &lt;li&gt;Submit a PR.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sindresorhus.com/KeyboardShortcuts/documentation/keyboardshortcuts/keyboardshortcuts&#34;&gt;See the API docs.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h4&gt;Show a recorded keyboard shortcut in an &lt;code&gt;NSMenuItem&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;!-- TODO: Link to the docs instead when DocC supports showing type extensions. --&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/sindresorhus/KeyboardShortcuts/raw/0dcedd56994d871f243f3d9c76590bfd9f8aba69/Sources/KeyboardShortcuts/NSMenuItem%2B%2B.swift#L14-L41&#34;&gt;&lt;code&gt;NSMenuItem#setShortcut&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Dynamic keyboard shortcuts&lt;/h4&gt; &#xA;&lt;p&gt;Your app might need to support keyboard shortcuts for user-defined actions. Normally, you would statically register the keyboard shortcuts upfront in &lt;code&gt;extension KeyboardShortcuts.Name {}&lt;/code&gt;. However, this is not a requirement. It&#39;s only for convenience so that you can use dot-syntax when calling various APIs (for example, &lt;code&gt;.onKeyDown(.unicornMode) {}&lt;/code&gt;). You can create &lt;code&gt;KeyboardShortcut.Name&lt;/code&gt;&#39;s dynamically and store them yourself. You can see this in action in the example project.&lt;/p&gt; &#xA;&lt;h4&gt;Default keyboard shortcuts&lt;/h4&gt; &#xA;&lt;p&gt;Setting a default keyboard shortcut can be useful if you&#39;re migrating from a different package or just making something for yourself. However, please do not set this for a publicly distributed app. Users find it annoying when random apps steal their existing keyboard shortcuts. It‚Äôs generally better to show a welcome screen on the first app launch that lets the user set the shortcut.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import KeyboardShortcuts&#xA;&#xA;extension KeyboardShortcuts.Name {&#xA;&#x9;static let toggleUnicornMode = Self(&#34;toggleUnicornMode&#34;, default: .init(.k, modifiers: [.command, .option]))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get all keyboard shortcuts&lt;/h4&gt; &#xA;&lt;p&gt;To get all the keyboard shortcut &lt;code&gt;Name&lt;/code&gt;&#39;s, conform &lt;code&gt;KeyboardShortcuts.Name&lt;/code&gt; to &lt;code&gt;CaseIterable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import KeyboardShortcuts&#xA;&#xA;extension KeyboardShortcuts.Name {&#xA;&#x9;static let foo = Self(&#34;foo&#34;)&#xA;&#x9;static let bar = Self(&#34;bar&#34;)&#xA;}&#xA;&#xA;extension KeyboardShortcuts.Name: CaseIterable {&#xA;&#x9;public static let allCases: [Self] = [&#xA;&#x9;&#x9;.foo,&#xA;&#x9;&#x9;.bar&#xA;&#x9;]&#xA;}&#xA;&#xA;// ‚Ä¶&#xA;&#xA;print(KeyboardShortcuts.Name.allCases)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to get all the &lt;code&gt;Name&lt;/code&gt;&#39;s with a set keyboard shortcut:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;print(KeyboardShortcuts.Name.allCases.filter { $0.shortcut != nil })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;How is it different from &lt;a href=&#34;https://github.com/shpakovski/MASShortcut&#34;&gt;&lt;code&gt;MASShortcut&lt;/code&gt;&lt;/a&gt;?&lt;/h4&gt; &#xA;&lt;p&gt;This package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Written in Swift with a swifty API.&lt;/li&gt; &#xA; &lt;li&gt;More native-looking UI component.&lt;/li&gt; &#xA; &lt;li&gt;SwiftUI component included.&lt;/li&gt; &#xA; &lt;li&gt;Support for listening to key down, not just key up.&lt;/li&gt; &#xA; &lt;li&gt;Swift Package Manager support.&lt;/li&gt; &#xA; &lt;li&gt;Connect a shortcut to an &lt;code&gt;NSMenuItem&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;MASShortcut&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More mature.&lt;/li&gt; &#xA; &lt;li&gt;More localizations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;How is it different from &lt;a href=&#34;https://github.com/soffes/HotKey&#34;&gt;&lt;code&gt;HotKey&lt;/code&gt;&lt;/a&gt;?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;HotKey&lt;/code&gt; is good for adding hard-coded keyboard shortcuts, but it doesn&#39;t provide any UI component for the user to choose their own keyboard shortcuts.&lt;/p&gt; &#xA;&lt;h4&gt;Why is this package importing &lt;code&gt;Carbon&lt;/code&gt;? Isn&#39;t that deprecated?&lt;/h4&gt; &#xA;&lt;p&gt;Most of the Carbon APIs were deprecated years ago, but there are some left that Apple never shipped modern replacements for. This includes registering global keyboard shortcuts. However, you should not need to worry about this. Apple will for sure ship new APIs before deprecating the Carbon APIs used here.&lt;/p&gt; &#xA;&lt;h4&gt;Does this package cause any permission dialogs?&lt;/h4&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;h4&gt;How can I add an app-specific keyboard shortcut that is only active when the app is?&lt;/h4&gt; &#xA;&lt;p&gt;That is outside the scope of this package. You can either use &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsevent/1534971-addlocalmonitorforevents&#34;&gt;&lt;code&gt;NSEvent.addLocalMonitorForEvents&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsmenuitem/2880316-allowskeyequivalentwhenhidden&#34;&gt;&lt;code&gt;NSMenuItem&lt;/code&gt; with keyboard shortcut&lt;/a&gt; (it can even be hidden), or SwiftUI&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/form/keyboardshortcut(_:)&#34;&gt;&lt;code&gt;View#keyboardShortcut()&lt;/code&gt; modifier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Does it support media keys?&lt;/h4&gt; &#xA;&lt;p&gt;No, since it would not work for sandboxed apps. If your app is not sandboxed, you can use &lt;a href=&#34;https://github.com/nhurden/MediaKeyTap&#34;&gt;&lt;code&gt;MediaKeyTap&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Can you support CocoaPods or Carthage?&lt;/h4&gt; &#xA;&lt;p&gt;No. However, there is nothing stopping you from using Swift Package Manager for just this package even if you normally use CocoaPods or Carthage.&lt;/p&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/Defaults&#34;&gt;Defaults&lt;/a&gt; - Swifty and modern UserDefaults&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/Regex&#34;&gt;Regex&lt;/a&gt; - Swifty regular expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/Preferences&#34;&gt;Preferences&lt;/a&gt; - Add a preferences window to your macOS app in minutes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/LaunchAtLogin&#34;&gt;LaunchAtLogin&lt;/a&gt; - Add &#34;Launch at Login&#34; functionality to your macOS app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/search?q=user%3Asindresorhus+language%3Aswift&#34;&gt;More‚Ä¶&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-collections</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/apple/swift-collections</id>
    <link href="https://github.com/apple/swift-collections" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Commonly used data structures for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Collections&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift Collections&lt;/strong&gt; is an open-source package of data structure implementations for the Swift programming language.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the package, and the intent behind it, in the &lt;a href=&#34;https://swift.org/blog/swift-collections&#34;&gt;announcement on swift.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;The package currently provides the following implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Deque.md&#34;&gt;&lt;code&gt;Deque&amp;lt;Element&amp;gt;&lt;/code&gt;&lt;/a&gt;, a double-ended queue backed by a ring buffer. Deques are range-replaceable, mutable, random-access collections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/OrderedSet.md&#34;&gt;&lt;code&gt;OrderedSet&amp;lt;Element&amp;gt;&lt;/code&gt;&lt;/a&gt;, a variant of the standard &lt;code&gt;Set&lt;/code&gt; where the order of items is well-defined and items can be arbitrarily reordered. Uses a &lt;code&gt;ContiguousArray&lt;/code&gt; as its backing store, augmented by a separate hash table of bit packed offsets into it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/OrderedDictionary.md&#34;&gt;&lt;code&gt;OrderedDictionary&amp;lt;Key, Value&amp;gt;&lt;/code&gt;&lt;/a&gt;, an ordered variant of the standard &lt;code&gt;Dictionary&lt;/code&gt;, providing similar benefits.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following data structures are currently being worked on but they aren&#39;t ready for inclusion in a tagged release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Heap.md&#34;&gt;&lt;code&gt;Heap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/apple/swift-collections/pull/51&#34;&gt;&lt;code&gt;PriorityQueue&lt;/code&gt;&lt;/a&gt;, min-max heaps backed by an array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/pull/65&#34;&gt;&lt;code&gt;SortedSet&lt;/code&gt; and &lt;code&gt;SortedDictionary&lt;/code&gt;&lt;/a&gt;, sorted collections backed by in-memory persistent b-trees.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/pull/31&#34;&gt;&lt;code&gt;HashSet&lt;/code&gt; and &lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;, persistent hashed collections implemented as Compressed Hash-Array Mapped Prefix-Trees (CHAMP).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/pull/83&#34;&gt;&lt;code&gt;BitArray&lt;/code&gt; and &lt;code&gt;BitSet&lt;/code&gt;&lt;/a&gt;, dynamic bit vectors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/pull/80&#34;&gt;&lt;code&gt;SparseSet&lt;/code&gt;&lt;/a&gt;, a constant time set construct, trading off memory for speed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Swift Collections uses the same modularization approach as &lt;a href=&#34;https://github.com/apple/swift-numerics&#34;&gt;&lt;strong&gt;Swift Numerics&lt;/strong&gt;&lt;/a&gt;: it provides a standalone module for each thematic group of data structures it implements. For instance, if you only need a double-ended queue type, you can pull in only that by importing &lt;code&gt;DequeModule&lt;/code&gt;. &lt;code&gt;OrderedSet&lt;/code&gt; and &lt;code&gt;OrderedDictionary&lt;/code&gt; share much of the same underlying implementation, so they are provided by a single module, called &lt;code&gt;OrderedCollections&lt;/code&gt;. However, there is also a top-level &lt;code&gt;Collections&lt;/code&gt; module that gives you every collection type with a single import statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Collections&#xA;&#xA;var deque: Deque&amp;lt;String&amp;gt; = [&#34;Ted&#34;, &#34;Rebecca&#34;]&#xA;deque.prepend(&#34;Keeley&#34;)&#xA;deque.append(&#34;Nathan&#34;)&#xA;print(deque) // [&#34;Keeley&#34;, &#34;Ted&#34;, &#34;Rebecca&#34;, &#34;Nathan&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Collections package is source stable. The version numbers follow &lt;a href=&#34;https://semver.org&#34;&gt;Semantic Versioning&lt;/a&gt; -- source breaking changes to public API can only land in a new major version.&lt;/p&gt; &#xA;&lt;p&gt;The public API of version 1.0 of the &lt;code&gt;swift-collections&lt;/code&gt; package consists of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;Collections&lt;/code&gt;, &lt;code&gt;DequeModule&lt;/code&gt; and &lt;code&gt;OrderedCollections&lt;/code&gt; modules.&lt;/p&gt; &#xA;&lt;p&gt;Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases. If you have a use case that requires using underscored APIs, please &lt;a href=&#34;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&#34;&gt;submit a Feature Request&lt;/a&gt; describing it! We&#39;d like the public interface to be as useful as possible -- although preferably without compromising safety or limiting future evolution.&lt;/p&gt; &#xA;&lt;p&gt;By &#34;underscored declarations&#34; we mean declarations that have a leading underscore anywhere in their fully qualified name. For instance, here are some names that wouldn&#39;t be considered part of the public API, even if they were technically marked public:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule.Bar._someMember(value:)&lt;/code&gt; (underscored member)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule._Bar.someMember&lt;/code&gt; (underscored type)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_FooModule.Bar&lt;/code&gt; (underscored module)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule.Bar.init(_value:)&lt;/code&gt; (underscored initializer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that contents of the &lt;code&gt;Tests&lt;/code&gt;, &lt;code&gt;Utils&lt;/code&gt; and &lt;code&gt;Benchmarks&lt;/code&gt; subdirectories aren&#39;t public API. We don&#39;t make any source compatibility promises about them -- they may change at whim, and code may be removed in any new release. Do not rely on anything about them.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may update these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. (This allows the package to make use of new language/stdlib features, build on compiler bug fixes, and adopt new package manager functionality as soon as they are available.) Requiring a new Swift release will only need a minor version bump.&lt;/p&gt; &#xA;&lt;h2&gt;Using &lt;strong&gt;Swift Collections&lt;/strong&gt; in your project&lt;/h2&gt; &#xA;&lt;p&gt;To use this package in a SwiftPM project, you need to set it up as a package dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.4&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;MyPackage&#34;,&#xA;  dependencies: [&#xA;    .package(&#xA;      url: &#34;https://github.com/apple/swift-collections.git&#34;, &#xA;      .upToNextMajor(from: &#34;1.0.0&#34;) // or `.upToNextMinor&#xA;    )&#xA;  ],&#xA;  targets: [&#xA;    .target(&#xA;      name: &#34;MyTarget&#34;,&#xA;      dependencies: [&#xA;        .product(name: &#34;Collections&#34;, package: &#34;swift-collections&#34;)&#xA;      ]&#xA;    )&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing to Swift Collections&lt;/h2&gt; &#xA;&lt;p&gt;We have a dedicated &lt;a href=&#34;https://forums.swift.org/c/related-projects/collections&#34;&gt;Swift Collections Forum&lt;/a&gt; where people can ask and answer questions on how to use or work on this package. It&#39;s also a great place to discuss its evolution.&lt;/p&gt; &#xA;&lt;p&gt;If you find something that looks like a bug, please open a &lt;a href=&#34;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=BUG_REPORT.md&#34;&gt;Bug Report&lt;/a&gt;! Fill out as many details as you can.&lt;/p&gt; &#xA;&lt;h3&gt;Working on the package&lt;/h3&gt; &#xA;&lt;p&gt;We have some basic &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Internals/README.md&#34;&gt;documentation on package internals&lt;/a&gt; that will help you get started.&lt;/p&gt; &#xA;&lt;p&gt;By submitting a pull request, you represent that you have the right to license your contribution to Apple and the community, and agree by submitting the patch that your contributions are licensed under the &lt;a href=&#34;https://swift.org/LICENSE.txt&#34;&gt;Swift License&lt;/a&gt;, a copy of which is &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/LICENSE.txt&#34;&gt;provided in this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Fixing a bug or making a small improvement&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/compare&#34;&gt;Submit a PR&lt;/a&gt; with your change. If there is an &lt;a href=&#34;https://github.com/apple/swift-collections/issues&#34;&gt;existing issue&lt;/a&gt; for the bug you&#39;re fixing, please include a reference to it.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to add tests covering whatever changes you are making.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Proposing a small enhancement&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Raise a &lt;a href=&#34;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&#34;&gt;Feature Request&lt;/a&gt;. Discuss why it would be important to implement it.&lt;/li&gt; &#xA; &lt;li&gt;Submit a PR with your implementation, participate in the review discussion.&lt;/li&gt; &#xA; &lt;li&gt;When there is a consensus that the feature is desirable, and the implementation works well, it is fully tested and documented, then it will be merged.&lt;/li&gt; &#xA; &lt;li&gt;Rejoice!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Proposing the addition of a new data structure&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start a topic on the &lt;a href=&#34;https://forums.swift.org/c/related-projects/collections&#34;&gt;forum&lt;/a&gt;, explaining why you believe it would be important to implement the data structure. This way we can figure out if it would be right for the package, discuss implementation strategies, and plan to allocate capacity to help.&lt;/li&gt; &#xA; &lt;li&gt;When maintainers agreed to your implementation plan, start work on it, and submit a PR with your implementation as soon as you have something that&#39;s ready to show! We&#39;d love to get involved as early as you like.&lt;/li&gt; &#xA; &lt;li&gt;Participate in the review discussion, and adapt the code accordingly. Sometimes we may need to go through several revisions! This is fine -- it makes the end result that much better.&lt;/li&gt; &#xA; &lt;li&gt;When there is a consensus that the feature is ready, and the implementation is fully tested and documented, the PR will be merged by a maintainer.&lt;/li&gt; &#xA; &lt;li&gt;Celebrate! You&#39;ve achieved something great!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;Like all Swift.org projects, we would like the Swift Collections project to foster a diverse and friendly community. We expect contributors to adhere to the &lt;a href=&#34;https://swift.org/code-of-conduct/&#34;&gt;Swift.org Code of Conduct&lt;/a&gt;. A copy of this document is &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/CODE_OF_CONDUCT.md&#34;&gt;available in this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contact information&lt;/h3&gt; &#xA;&lt;p&gt;The current code owner of this package is Karoy Lorentey (&lt;a href=&#34;https://github.com/lorentey&#34;&gt;@lorentey&lt;/a&gt;). You can contact him &lt;a href=&#34;https://forums.swift.org/u/lorentey/summary&#34;&gt;on the Swift forums&lt;/a&gt;, or by writing an email to klorentey at apple dot com. (Please keep it related to this project.)&lt;/p&gt; &#xA;&lt;p&gt;In case of moderation issues, you can also directly contact a member of the &lt;a href=&#34;https://swift.org/community/#community-structure&#34;&gt;Swift Core Team&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CombineCommunity/CombineExt</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/CombineCommunity/CombineExt</id>
    <link href="https://github.com/CombineCommunity/CombineExt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CombineExt provides a collection of operators, publishers and utilities for Combine, that are not provided by Apple themselves, but are common in other Reactive Frameworks and standards.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CombineExt&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/CombineCommunity/CombineExt/raw/main/Resources/logo.png&#34; width=&#34;45%&#34;&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/CombineCommunity/CombineExt/goto&#34; target=&#34;_blank&#34; alt=&#34;Build Status&#34; title=&#34;Build Status&#34;&gt;&lt;img src=&#34;https://github.com/CombineCommunity/CombineExt/workflows/CombineExt/badge.svg?branch=main&#34; alt=&#34;Build Status&#34; title=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/CombineCommunity/CombineExt&#34; target=&#34;_blank&#34; alt=&#34;Code Coverage for CombineExt on codecov&#34; title=&#34;Code Coverage for CombineExt on codecov&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/CombineCommunity/CombineExt/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage for CombineExt on codecov&#34; title=&#34;Code Coverage for CombineExt on codecov&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%2013%20%7C%20macOS 10.15%20%7C%20tvOS%2013%20%7C%20watchOS%206-333333.svg&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://cocoapods.org/pods/CombineExt&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/CombineExt.svg?1&#34; alt=&#34;CombineExt supports CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;CombineExt supports Swift Package Manager (SPM)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;CombineExt supports Carthage&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;CombineExt provides a collection of operators, publishers and utilities for Combine, that are not provided by Apple themselves, but are common in other Reactive Frameworks and standards.&lt;/p&gt; &#xA;&lt;p&gt;The original inspiration for many of these additions came from my journey investigating Combine after years of RxSwift and ReactiveX usage.&lt;/p&gt; &#xA;&lt;p&gt;All operators, utilities and helpers respect Combine&#39;s publisher contract, including backpressure.&lt;/p&gt; &#xA;&lt;h3&gt;Operators&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#withLatestFrom&#34;&gt;withLatestFrom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#flatMapLatest&#34;&gt;flatMapLatest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#assign&#34;&gt;assign&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#amb&#34;&gt;amb and Collection.amb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#materialize&#34;&gt;materialize&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#values&#34;&gt;values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#failures&#34;&gt;failures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#dematerialize&#34;&gt;dematerialize&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#partition&#34;&gt;partition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#ZipMany&#34;&gt;zip(with:) and Collection.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#MergeMany&#34;&gt;Collection.merge()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#CombineLatestMany&#34;&gt;combineLatest(with:) and Collection.combineLatest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#MapMany&#34;&gt;mapMany(_:)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#FilterMany&#34;&gt;filterMany(_:)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#setOutputType&#34;&gt;setOutputType(to:)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#removeAllDuplicates&#34;&gt;removeAllDuplicates and removeAllDuplicates(by:) &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#sharereplay&#34;&gt;share(replay:)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#prefixduration&#34;&gt;prefix(duration:tolerance:‚Äãon:options:)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#toggle&#34;&gt;toggle()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#nwise&#34;&gt;nwise(_:) and pairwise()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#ignoreOutputsetOutputType&#34;&gt;ignoreOutput(setOutputType:)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#ignoreFailure&#34;&gt;ignoreFailure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#mapToResult&#34;&gt;mapToResult&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#flatMapBatchesof&#34;&gt;flatMapBatches(of:)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Publishers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#AnypublisherCreate&#34;&gt;AnyPublisher.create&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#CurrentValueRelay&#34;&gt;CurrentValueRelay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#PassthroughRelay&#34;&gt;PassthroughRelay&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Subjects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/#ReplaySubject&#34;&gt;ReplaySubject&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is still a relatively early version of CombineExt, with much more to be desired. I gladly accept PRs, ideas, opinions, or improvements. Thank you! :)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to your &lt;strong&gt;Podfile&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;pod &#39;CombineExt&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add the following dependency to your &lt;strong&gt;Package.swift&lt;/strong&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/CombineCommunity/CombineExt.git&#34;, from: &#34;1.0.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Carthage support is offered as a prebuilt binary.&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your &lt;strong&gt;Cartfile&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;CombineCommunity/CombineExt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Operators&lt;/h2&gt; &#xA;&lt;p&gt;This section outlines some of the custom operators CombineExt provides.&lt;/p&gt; &#xA;&lt;h3&gt;withLatestFrom&lt;/h3&gt; &#xA;&lt;p&gt;Merges up to four publishers into a single publisher by combining each value from &lt;code&gt;self&lt;/code&gt; with the &lt;em&gt;latest&lt;/em&gt; value from the other publishers, if any.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let taps = PassthroughSubject&amp;lt;Void, Never&amp;gt;()&#xA;let values = CurrentValueSubject&amp;lt;String, Never&amp;gt;(&#34;Hello&#34;)&#xA;&#xA;taps&#xA;  .withLatestFrom(values)&#xA;  .sink(receiveValue: { print(&#34;withLatestFrom: \($0)&#34;) })&#xA;&#xA;taps.send()&#xA;taps.send()&#xA;values.send(&#34;World!&#34;)&#xA;taps.send()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;withLatestFrom: Hello&#xA;withLatestFrom: Hello&#xA;withLatestFrom: World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;flatMapLatest&lt;/h3&gt; &#xA;&lt;p&gt;Transforms an output value into a new publisher, and flattens the stream of events from these multiple upstream publishers to appear as if they were coming from a single stream of events.&lt;/p&gt; &#xA;&lt;p&gt;Mapping to a new publisher will cancel the subscription to the previous one, keeping only a single subscription active along with its event emissions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;flatMapLatest&lt;/code&gt; is a combination of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;switchToLatest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let trigger = PassthroughSubject&amp;lt;Void, Never&amp;gt;()&#xA;trigger&#xA;    .flatMapLatest { performNetworkRequest() }&#xA;&#xA;trigger.send()&#xA;trigger.send() // cancels previous request&#xA;trigger.send() // cancels previous request&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;assign&lt;/h3&gt; &#xA;&lt;p&gt;CombineExt provides custom overloads of &lt;code&gt;assign(to&lt;span&gt;üîõ&lt;/span&gt;)&lt;/code&gt; that let you bind a publisher to multiple keypath targets simultaneously.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var label1: UILabel&#xA;var label2: UILabel&#xA;var text: UITextField&#xA;&#xA;[&#34;hey&#34;, &#34;there&#34;, &#34;friend&#34;]&#xA;    .publisher&#xA;    .assign(to: \.text, on: label1,&#xA;            and: \.text, on: label2,&#xA;            and: \.text, on: text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CombineExt provides an additional overload ‚Äî &lt;code&gt;assign(to:on‚Äã:ownership)&lt;/code&gt; ‚Äî which lets you specify the kind of ownersip you want for your assign operation: &lt;code&gt;strong&lt;/code&gt;, &lt;code&gt;weak&lt;/code&gt; or &lt;code&gt;unowned&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Retain `self` strongly&#xA;subscription = subject.assign(to: \.value, on: self)&#xA;subscription = subject.assign(to: \.value, on: self, ownership: .strong)&#xA;&#xA;// Use a `weak` reference to `self`&#xA;subscription = subject.assign(to: \.value, on: self, ownership: .weak)&#xA;&#xA;// Use an `unowned` reference to `self`&#xA;subscription = subject.assign(to: \.value, on: self, ownership: .unowned)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;amb&lt;/h3&gt; &#xA;&lt;p&gt;Amb takes multiple publishers and mirrors the first one to emit an event. You can think of it as a race of publishers, where the first one to emit passes its events, while the others are ignored (there‚Äôs also a &lt;code&gt;Collection.amb&lt;/code&gt; method to ease working with multiple publishers).&lt;/p&gt; &#xA;&lt;p&gt;The name &lt;code&gt;amb&lt;/code&gt; comes from the &lt;a href=&#34;http://reactivex.io/documentation/operators/amb.html&#34;&gt;Reactive Extensions operator&lt;/a&gt;, also known in RxJS as &lt;code&gt;race&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subject1 = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;let subject2 = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;&#xA;subject1&#xA;  .amb(subject2)&#xA;  .sink(receiveCompletion: { print(&#34;amb: completed with \($0)&#34;) },&#xA;        receiveValue: { print(&#34;amb: \($0)&#34;) })&#xA;&#xA;subject2.send(3) // Since this subject emit first, it becomes the active publisher&#xA;subject1.send(1)&#xA;subject2.send(6)&#xA;subject1.send(8)&#xA;subject1.send(7)&#xA;&#xA;subject1.send(completion: .finished)&#xA;// Only when subject2 finishes, amb itself finishes as well, since it&#39;s the active publisher&#xA;subject2.send(completion: .finished)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;amb: 3&#xA;amb: 6&#xA;amb: completed with .finished&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;materialize&lt;/h3&gt; &#xA;&lt;p&gt;Convert any publisher to a publisher of its events. Given a &lt;code&gt;Publisher&amp;lt;Output, MyError&amp;gt;&lt;/code&gt;, this operator will return a &lt;code&gt;Publisher&amp;lt;Event&amp;lt;Output, MyError&amp;gt;, Never&amp;gt;&lt;/code&gt;, which means your failure will actually be a regular value, which makes error handling much simpler in many use cases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let values = PassthroughSubject&amp;lt;String, MyError&amp;gt;()&#xA;enum MyError: Swift.Error {&#xA;  case ohNo&#xA;}&#xA;&#xA;values&#xA;  .materialize()&#xA;  .sink(receiveCompletion: { print(&#34;materialized: completed with \($0)&#34;) },&#xA;        receiveValue: { print(&#34;materialized: \($0)&#34;) })&#xA;&#xA;values.send(&#34;Hello&#34;)&#xA;values.send(&#34;World&#34;)&#xA;values.send(&#34;What&#39;s up?&#34;)&#xA;values.send(completion: .failure(.ohNo))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;materialize: .value(&#34;Hello&#34;)&#xA;materialize: .value(&#34;World&#34;)&#xA;materialize: .value(&#34;What&#39;s up?&#34;)&#xA;materialize: .failure(.ohNo)&#xA;materialize: completed with .finished&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;values&lt;/h3&gt; &#xA;&lt;p&gt;Given a materialized publisher, publish only the emitted upstream values, omitting failures. Given a &lt;code&gt;Publisher&amp;lt;Event&amp;lt;String, MyError&amp;gt;, Never&amp;gt;&lt;/code&gt;, this operator will return a &lt;code&gt;Publisher&amp;lt;String, Never&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This operator only works on publishers that were materialized with the &lt;code&gt;materialize()&lt;/code&gt; operator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let values = PassthroughSubject&amp;lt;String, MyError&amp;gt;()&#xA;enum MyError: Swift.Error {&#xA;  case ohNo&#xA;}&#xA;&#xA;values&#xA;  .materialize()&#xA;  .values()&#xA;  .sink(receiveValue: { print(&#34;values: \($0)&#34;) })&#xA;&#xA;values.send(&#34;Hello&#34;)&#xA;values.send(&#34;World&#34;)&#xA;values.send(&#34;What&#39;s up?&#34;)&#xA;values.send(completion: .failure(.ohNo))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;values: &#34;Hello&#34;&#xA;values: &#34;World&#34;&#xA;values: &#34;What&#39;s up?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;failures&lt;/h3&gt; &#xA;&lt;p&gt;Given a materialized publisher, publish only the emitted upstream failure, omitting values. Given a &lt;code&gt;Publisher&amp;lt;Event&amp;lt;String, MyError&amp;gt;, Never&amp;gt;&lt;/code&gt;, this operator will return a &lt;code&gt;Publisher&amp;lt;MyError, Never&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This operator only works on publishers that were materialized with the &lt;code&gt;materialize()&lt;/code&gt; operator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let values = PassthroughSubject&amp;lt;String, MyError&amp;gt;()&#xA;enum MyError: Swift.Error {&#xA;  case ohNo&#xA;}&#xA;&#xA;values&#xA;  .materialize()&#xA;  .failures()&#xA;  .sink(receiveValue: { print(&#34;failures: \($0)&#34;) })&#xA;&#xA;values.send(&#34;Hello&#34;)&#xA;values.send(&#34;World&#34;)&#xA;values.send(&#34;What&#39;s up?&#34;)&#xA;values.send(completion: .failure(.ohNo))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;failure: MyError.ohNo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;dematerialize&lt;/h3&gt; &#xA;&lt;p&gt;Converts a previously-materialized publisher into its original form. Given a &lt;code&gt;Publisher&amp;lt;Event&amp;lt;String, MyError&amp;gt;, Never&amp;gt;&lt;/code&gt;, this operator will return a &lt;code&gt;Publisher&amp;lt;String, MyError&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This operator only works on publishers that were materialized with the &lt;code&gt;materialize()&lt;/code&gt; operator.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;partition&lt;/h3&gt; &#xA;&lt;p&gt;Partition a publisher&#39;s values into two separate publishers of values that match, and don&#39;t match, the provided predicate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let source = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;&#xA;let (even, odd) = source.partition { $0 % 2 == 0 }&#xA;&#xA;even.sink(receiveValue: { print(&#34;even: \($0)&#34;) })&#xA;odd.sink(receiveValue: { print(&#34;odd: \($0)&#34;) })&#xA;&#xA;source.send(1)&#xA;source.send(2)&#xA;source.send(3)&#xA;source.send(4)&#xA;source.send(5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;odd: 1&#xA;even: 2&#xA;odd: 3&#xA;even: 4&#xA;odd: 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;ZipMany&lt;/h3&gt; &#xA;&lt;p&gt;This repo includes two overloads on Combine‚Äôs &lt;code&gt;Publisher.zip&lt;/code&gt; methods (which, at the time of writing only go up to arity three).&lt;/p&gt; &#xA;&lt;p&gt;This lets you arbitrarily zip many publishers and receive an array of inner publisher outputs back.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let first = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;let second = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;let third = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;let fourth = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;&#xA;subscription = first&#xA;  .zip(with: second, third, fourth)&#xA;  .map { $0.reduce(0, +) }&#xA;  .sink(receiveValue: { print(&#34;zipped: \($0)&#34;) })&#xA;&#xA;first.send(1)&#xA;second.send(2)&#xA;third.send(3)&#xA;fourth.send(4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also use &lt;code&gt;.zip()&lt;/code&gt; directly on a collection of publishers with the same output and failure types, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;[first, second, third, fourth]&#xA;  .zip()&#xA;  .map { $0.reduce(0, +) }&#xA;  .sink(receiveValue: { print(&#34;zipped: \($0)&#34;) })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;zipped: 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;MergeMany&lt;/h3&gt; &#xA;&lt;p&gt;This repo includes an extension for Collection that allows you to call &lt;code&gt;.merge()&lt;/code&gt; directly on a collection of publishers with the same output and failure types.&lt;/p&gt; &#xA;&lt;p&gt;This lets you arbitrarily merge many publishers and receive inner publisher outputs back from a single publisher.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let first = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;let second = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;let third = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;let fourth = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;&#xA;subscription = [first, second, third, fourth]&#xA;  .merge()&#xA;  .sink(receiveValue: { print(&#34;output: \($0)&#34;) })&#xA;&#xA;first.send(1)&#xA;second.send(2)&#xA;third.send(3)&#xA;fourth.send(4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;output: 1&#xA;output: 2&#xA;output: 3&#xA;output: 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;CombineLatestMany&lt;/h3&gt; &#xA;&lt;p&gt;This repo includes two overloads on Combine‚Äôs &lt;code&gt;Publisher.combineLatest&lt;/code&gt; methods (which, at the time of writing only go up to arity three) and an &lt;code&gt;Collection.combineLatest&lt;/code&gt; constrained extension.&lt;/p&gt; &#xA;&lt;p&gt;This lets you arbitrarily combine many publishers and receive an array of inner publisher outputs back.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let first = PassthroughSubject&amp;lt;Bool, Never&amp;gt;()&#xA;let second = PassthroughSubject&amp;lt;Bool, Never&amp;gt;()&#xA;let third = PassthroughSubject&amp;lt;Bool, Never&amp;gt;()&#xA;let fourth = PassthroughSubject&amp;lt;Bool, Never&amp;gt;()&#xA;&#xA;subscription = [first, second, third, fourth]&#xA;  .combineLatest()&#xA;  .sink(receiveValue: { print(&#34;combineLatest: \($0)&#34;) })&#xA;&#xA;first.send(true)&#xA;second.send(true)&#xA;third.send(true)&#xA;fourth.send(true)&#xA;&#xA;first.send(false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;combineLatest: [true, true, true, true]&#xA;combineLatest: [false, true, true, true]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;FilterMany&lt;/h3&gt; &#xA;&lt;p&gt;Filters element of a publisher collection into a new publisher collection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let intArrayPublisher = PassthroughSubject&amp;lt;[Int], Never&amp;gt;()&#xA;&#xA;intArrayPublisher&#xA;  .filterMany { $0.isMultiple(of: 2) }&#xA;  .sink(receiveValue: { print($0) })&#xA;&#xA;intArrayPublisher.send([10, 2, 4, 3, 8])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;none&#xA;[10, 2, 4, 8]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;MapMany&lt;/h3&gt; &#xA;&lt;p&gt;Projects each element of a publisher collection into a new publisher collection form.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let intArrayPublisher = PassthroughSubject&amp;lt;[Int], Never&amp;gt;()&#xA;    &#xA;intArrayPublisher&#xA;  .mapMany(String.init)&#xA;  .sink(receiveValue: { print($0) })&#xA;    &#xA;intArrayPublisher.send([10, 2, 2, 4, 3, 8])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;[&#34;10&#34;, &#34;2&#34;, &#34;2&#34;, &#34;4&#34;, &#34;3&#34;, &#34;8&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;setOutputType&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Publisher.setOutputType(to:)&lt;/code&gt; is an analog to &lt;a href=&#34;https://developer.apple.com/documentation/combine/publisher/3204753-setfailuretype&#34;&gt;&lt;code&gt;.setFailureType(to:)&lt;/code&gt;&lt;/a&gt; for when &lt;code&gt;Output&lt;/code&gt; is constrained to &lt;code&gt;Never&lt;/code&gt;. This is especially helpful when chaining operators after an &lt;a href=&#34;https://developer.apple.com/documentation/combine/publisher/3204714-ignoreoutput&#34;&gt;&lt;code&gt;.ignoreOutput()&lt;/code&gt;&lt;/a&gt; call.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;removeAllDuplicates&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Publisher.removeAllDuplicates&lt;/code&gt; and &lt;code&gt;.removeAllDuplicates(by:)&lt;/code&gt; are stricter forms of Apple‚Äôs &lt;a href=&#34;https://developer.apple.com/documentation/combine/publisher/3204745-removeduplicates&#34;&gt;&lt;code&gt;Publisher.removeDuplicates&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/combine/publisher/3204746-removeduplicates&#34;&gt;&lt;code&gt;.removeDuplicates(by:)&lt;/code&gt;&lt;/a&gt;‚Äîthe operators de-duplicate across &lt;em&gt;all&lt;/em&gt; previous value events, instead of pairwise.&lt;/p&gt; &#xA;&lt;p&gt;If your &lt;code&gt;Output&lt;/code&gt; doesn‚Äòt conform to &lt;code&gt;Hashable&lt;/code&gt; or &lt;code&gt;Equatable&lt;/code&gt;, you may instead use the comparator-based version of this operator to decide whether two elements are equal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;subscription = [1, 1, 2, 1, 3, 3, 4].publisher&#xA;  .removeAllDuplicates()&#xA;  .sink(receiveValue: { print(&#34;removeAllDuplicates: \($0)&#34;) })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;removeAllDuplicates: 1&#xA;removeAllDuplicates: 2&#xA;removeAllDuplicates: 3&#xA;removeAllDuplicates: 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;share(replay:)&lt;/h3&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://developer.apple.com/documentation/combine/publisher/3204754-share&#34;&gt;&lt;code&gt;Publisher.share&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;.share(replay:)&lt;/code&gt; can be used to create a publisher instance with reference semantics which replays a pre-defined amount of value events to further subscribers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subject = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;&#xA;let replayedPublisher = subject&#xA;  .share(replay: 3)&#xA;&#xA;subscription1 = replayedPublisher&#xA;  .sink(receiveValue: { print(&#34;first subscriber: \($0)&#34;) })&#xA;  &#xA;subject.send(1)&#xA;subject.send(2)&#xA;subject.send(3)&#xA;subject.send(4)&#xA;&#xA;subscription2 = replayedPublisher&#xA;  .sink(receiveValue: { print(&#34;second subscriber: \($0)&#34;) })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;first subscriber: 1&#xA;first subscriber: 2&#xA;first subscriber: 3&#xA;first subscriber: 4&#xA;second subscriber: 2&#xA;second subscriber: 3&#xA;second subscriber: 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;prefix(duration:)&lt;/h3&gt; &#xA;&lt;p&gt;An overload on &lt;code&gt;Publisher.prefix&lt;/code&gt; that that republishes values for a provided &lt;code&gt;duration&lt;/code&gt; (in seconds), and then completes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subject = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;&#xA;subscription = subject&#xA;  .prefix(duration: 0.5, on: DispatchQueue.main)&#xA;  .sink(receiveValue: { print($0) })&#xA;  &#xA;subject.send(1)&#xA;subject.send(2)&#xA;subject.send(3)&#xA;&#xA;DispatchQueue.main.asyncAfter(deadline: .now() + 1) {&#xA;  subject.send(4)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;1&#xA;2&#xA;3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;toggle()&lt;/h3&gt; &#xA;&lt;p&gt;Toggle each boolean element of a publisher collection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subject = PassthroughSubject&amp;lt;Bool, Never&amp;gt;()&#xA;&#xA;subscription = subject&#xA;  .toggle()&#xA;  .sink(receiveValue: { print($0) })&#xA;  &#xA;subject.send(true)&#xA;subject.send(false)&#xA;subject.send(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;false&#xA;true&#xA;false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nwise&lt;/h3&gt; &#xA;&lt;p&gt;Groups the elements of the source publisher into arrays of N consecutive elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subject = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;&#xA;subscription = subject&#xA;  .nwise(3)&#xA;  .sink(receiveValue: { print($0) })&#xA;  &#xA;subject.send(1)&#xA;subject.send(2)&#xA;subject.send(3)&#xA;subject.send(4)&#xA;subject.send(5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;[1, 2, 3]&#xA;[2, 3, 4]&#xA;[3, 4, 5]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pairwise&lt;/h3&gt; &#xA;&lt;p&gt;Groups the elements of the source publisher into tuples of the previous and current elements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subject = PassthroughSubject&amp;lt;Int, Never&amp;gt;()&#xA;&#xA;subscription = subject&#xA;  .pairwise()&#xA;  .sink(receiveValue: { print(&#34;\($0.0) -&amp;gt; \($0.1)&#34;) })&#xA;&#xA;subject.send(1)&#xA;subject.send(2)&#xA;subject.send(3)&#xA;subject.send(4)&#xA;subject.send(5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;1 -&amp;gt; 2&#xA;2 -&amp;gt; 3&#xA;3 -&amp;gt; 4&#xA;4 -&amp;gt; 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ignoreOutput(setOutputType:)&lt;/h3&gt; &#xA;&lt;p&gt;Shorthand for both ignoring a publisher‚Äôs value events and re-writing its &lt;code&gt;Output&lt;/code&gt; generic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let onlyAFour = [&#34;1&#34;, &#34;2&#34;, &#34;3&#34;].publisher&#xA;  .ignoreOutput(setOutputType: Int.self)&#xA;  .append(4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ignoreFailure&lt;/h3&gt; &#xA;&lt;p&gt;CombineExt provides a couple of overloads to ignore errors and optionally specify a new error type and whether to trigger completions in such cases.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ignoreFailure(completeImmediately:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignoreFailure(setFailureType:completeImmediately:)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum AnError {&#xA;  case someError &#xA;}&#xA;&#xA;let subject = PassthroughSubject&amp;lt;Int, AnError&amp;gt;()&#xA;&#xA;subscription = subject&#xA;  .ignoreFailure() // The `completeImmediately` parameter defaults to `true`.&#xA;  .sink(receiveValue: { print($0) }, receiveCompletion: { print($0) })&#xA;&#xA;subject.send(1)&#xA;subject.send(2)&#xA;subject.send(3)&#xA;subject.send(completion: .failure(.someError))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;1&#xA;2&#xA;3&#xA;.finished&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;mapToResult&lt;/h3&gt; &#xA;&lt;p&gt;Transforms a publisher of type &lt;code&gt;AnyPublisher&amp;lt;Output, Failure&amp;gt;&lt;/code&gt; to &lt;code&gt;AnyPublisher&amp;lt;Result&amp;lt;Output, Failure&amp;gt;, Never&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum AnError: Error {&#xA;    case someError&#xA;}&#xA;&#xA;let subject = PassthroughSubject&amp;lt;Int, AnError&amp;gt;()&#xA;&#xA;let subscription = subject&#xA;    .mapToResult()&#xA;    .sink(receiveCompletion: { print(&#34;completion: \($0)&#34;) },&#xA;          receiveValue: { print(&#34;value: \($0)&#34;) })&#xA;&#xA;subject.send(1)&#xA;subject.send(2)&#xA;subject.send(3)&#xA;subject.send(completion: .failure(.someError))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;value: success(1)&#xA;value: success(2)&#xA;value: success(3)&#xA;value: failure(AnError.someError)&#xA;completion: finished&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;flatMapBatches(of:)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Collection.flatMapBatches(of:)&lt;/code&gt; subscribes to the receiver‚Äôs contained publishers in batches and returns their outputs in batches, too (while maintaining order). Subsequent batches of publishers are only subscribed to when prior batches successfully complete ‚Äî&amp;nbsp;any one failure is forwarded downstream.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let ints = (1...6).map(Just.init)&#xA;&#xA;subscription = ints&#xA;  .flatMapBatches(of: 2)&#xA;  .sink(receiveCompletion: { print($0) }, receiveValue: { print($0) })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;[1, 2]&#xA;[3, 4]&#xA;[5, 6]&#xA;.finished&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Publishers&lt;/h2&gt; &#xA;&lt;p&gt;This section outlines some of the custom Combine publishers CombineExt provides&lt;/p&gt; &#xA;&lt;h3&gt;AnyPublisher.create&lt;/h3&gt; &#xA;&lt;p&gt;A publisher which accepts a closure with a subscriber argument, to which you can dynamically send value or completion events.&lt;/p&gt; &#xA;&lt;p&gt;This lets you easily create custom publishers to wrap any non-publisher asynchronous work, while still respecting the downstream consumer&#39;s backpressure demand.&lt;/p&gt; &#xA;&lt;p&gt;You should return a &lt;code&gt;Cancellable&lt;/code&gt;-conforming object from the closure in which you can define any cleanup actions to execute when the pubilsher completes or the subscription to the publisher is canceled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AnyPublisher&amp;lt;String, MyError&amp;gt;.create { subscriber in&#xA;  // Values&#xA;  subscriber.send(&#34;Hello&#34;)&#xA;  subscriber.send(&#34;World!&#34;)&#xA;  &#xA;  // Complete with error&#xA;  subscriber.send(completion: .failure(MyError.someError))&#xA;  &#xA;  // Or, complete successfully&#xA;  subscriber.send(completion: .finished)&#xA;&#xA;  return AnyCancellable { &#xA;    // Perform cleanup&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use an &lt;code&gt;AnyPublisher&lt;/code&gt; initializer with the same signature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AnyPublisher&amp;lt;String, MyError&amp;gt; { subscriber in &#xA;    /// ...&#xA;    return AnyCancellable { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;CurrentValueRelay&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;CurrentValueRelay&lt;/code&gt; is identical to a &lt;code&gt;CurrentValueSubject&lt;/code&gt; with two main differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It only accepts values, but not completion events, which means it cannot fail.&lt;/li&gt; &#xA; &lt;li&gt;It only publishes a &lt;code&gt;.finished&lt;/code&gt; event upon deallocation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let relay = CurrentValueRelay&amp;lt;String&amp;gt;(&#34;well...&#34;)&#xA;&#xA;relay.sink(receiveValue: { print($0) }) // replays current value, e.g. &#34;well...&#34;&#xA;&#xA;relay.accept(&#34;values&#34;)&#xA;relay.accept(&#34;only&#34;)&#xA;relay.accept(&#34;provide&#34;)&#xA;relay.accept(&#34;great&#34;)&#xA;relay.accept(&#34;guarantees&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;well...&#xA;values&#xA;only&#xA;provide&#xA;great&#xA;guarantees&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;PassthroughRelay&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;PassthroughRelay&lt;/code&gt; is identical to a &lt;code&gt;PassthroughSubject&lt;/code&gt; with two main differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It only accepts values, but not completion events, which means it cannot fail.&lt;/li&gt; &#xA; &lt;li&gt;It only publishes a &lt;code&gt;.finished&lt;/code&gt; event upon deallocation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let relay = PassthroughRelay&amp;lt;String&amp;gt;()&#xA;relay.accept(&#34;well...&#34;)&#xA;&#xA;relay.sink(receiveValue: { print($0) }) // does not replay past value(s)&#xA;&#xA;relay.accept(&#34;values&#34;)&#xA;relay.accept(&#34;only&#34;)&#xA;relay.accept(&#34;provide&#34;)&#xA;relay.accept(&#34;great&#34;)&#xA;relay.accept(&#34;guarantees&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;values&#xA;only&#xA;provide&#xA;great&#xA;guarantees&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Subjects&lt;/h2&gt; &#xA;&lt;h3&gt;ReplaySubject&lt;/h3&gt; &#xA;&lt;p&gt;A Combine analog to Rx‚Äôs &lt;a href=&#34;http://reactivex.io/documentation/subject.html&#34;&gt;&lt;code&gt;ReplaySubject&lt;/code&gt; type&lt;/a&gt;. It‚Äôs similar to a &lt;a href=&#34;https://developer.apple.com/documentation/combine/currentvaluesubject&#34;&gt;&lt;code&gt;CurrentValueSubject&lt;/code&gt;&lt;/a&gt; in that it buffers values, but, it takes it a step further in allowing consumers to specify the number of values to buffer and replay to future subscribers. Also, it will handle forwarding any completion events after the buffer is cleared upon subscription.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subject = ReplaySubject&amp;lt;Int, Never&amp;gt;(bufferSize: 3)&#xA;&#xA;subject.send(1)&#xA;subject.send(2)&#xA;subject.send(3)&#xA;subject.send(4)&#xA;&#xA;subject&#xA;  .sink(receiveValue: { print($0) })&#xA;&#xA;subject.send(5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;2&#xA;3&#xA;4&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT, of course ;-) See the &lt;a href=&#34;https://raw.githubusercontent.com/CombineCommunity/CombineExt/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;The Apple logo and the Combine framework are property of Apple Inc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kean/NukeUI</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/kean/NukeUI</id>
    <link href="https://github.com/kean/NukeUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lazy image loading for Apple platforms: SwiftUI, UIKit, AppKit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NukeUI&lt;/h1&gt; &#xA;&lt;p&gt;A missing piece in SwiftUI that provides lazy image loading.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Image&lt;/code&gt; and &lt;code&gt;LazyImage&lt;/code&gt; for SwiftUI (similar to the native &lt;a href=&#34;https://developer.apple.com/documentation/SwiftUI/AsyncImage&#34;&gt;&lt;code&gt;AsyncImage&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ImageView&lt;/code&gt; and &lt;code&gt;LazyImageView&lt;/code&gt; for UIKit and AppKit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;LazyImage&lt;/code&gt; uses &lt;a href=&#34;https://github.com/kean/Nuke&#34;&gt;Nuke&lt;/a&gt; for loading images so you can take advantage of all of its advanced performance features, such as custom caches, prefetching, task coalescing, smart background decompression, request priorities, and more. And it&#39;s not just that. NukeUI also supports progressive images, has GIF support powered by &lt;a href=&#34;https://github.com/kaishin/Gifu&#34;&gt;Gifu&lt;/a&gt;, and can even play short videos, which is &lt;a href=&#34;https://web.dev/replace-gifs-with-videos/&#34;&gt;a more efficient&lt;/a&gt; way to display animated images.&lt;/p&gt; &#xA;&lt;h2&gt;LazyImage&lt;/h2&gt; &#xA;&lt;p&gt;The view is instantiated with a source where a source can be a &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;URL&lt;/code&gt;, &lt;code&gt;URLRequest&lt;/code&gt;, or an &lt;a href=&#34;https://kean.blog/nuke/guides/customizing-requests&#34;&gt;&lt;code&gt;ImageRequest&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContainerView: View {&#xA;    var body: some View {&#xA;        LazyImage(source: &#34;https://example.com/image.jpeg&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The view is called &#34;lazy&#34; because it loads the image from source only when it appears on the screen. And when it disappears, the current request automatically gets canceled. When the view reappears, the download picks up where it left off, thanks to &lt;a href=&#34;https://kean.blog/post/resumable-downloads&#34;&gt;resumable downloads&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The view doesn&#39;t know the size of the image before it downloads it. Thus, you must specify the view size before loading the image. By default, the image will resize preserving the aspect ratio to fill the available space. You can change this behavior by passing a different resizing mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;LazyImage(source: &#34;https://example.com/image.jpeg&#34;, resizingMode: .center)&#xA;    .frame(height: 300)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;. You can‚Äôt apply image-specific modifiers, like &lt;code&gt;aspectRatio()&lt;/code&gt;, directly to a &lt;code&gt;LazyImage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Until the image loads, the view displays a standard placeholder that fills the available space, just like &lt;a href=&#34;https://developer.apple.com/documentation/SwiftUI/AsyncImage&#34;&gt;AsyncImage&lt;/a&gt; does. After the load completes successfully, the view updates to display the image.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/1567433/121760622-bf4b9080-caf9-11eb-8727-bb53eb1736ea.png&#34; width=&#34;600px&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;You can also specify a custom placeholder, a view to be displayed on failure, or even show a download progress.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;LazyImage(source: $0) { state in&#xA;    if let image = state.image {&#xA;        image // Displays the loaded image&#xA;    } else if state.error != nil {&#xA;        Color.red // Indicates an error&#xA;    } else {&#xA;        Color.blue // Acts as a placeholder&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the image is loaded, it is displayed with a default animation. You can change it using a custom &lt;code&gt;animation&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;LazyImage(source: &#34;https://example.com/image.jpeg&#34;)&#xA;    .animation(nil) // Disable all animations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass a complete &lt;code&gt;ImageRequest&lt;/code&gt; as a source, but you can also configure the download via convenience modifiers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;LazyImage(source: &#34;https://example.com/image.jpeg&#34;)&#xA;    .processors([ImageProcessors.Resize(width: 44)])&#xA;    .priority(.high)&#xA;    .pipeline(customPipeline)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;LazyImage&lt;/code&gt; is built on top of Nuke&#39;s &lt;a href=&#34;https://kean.blog/nuke/guides/swiftui#fetchimage&#34;&gt;&lt;code&gt;FetchImage&lt;/code&gt;&lt;/a&gt;. If you want even more control, you can use it directly instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can also monitor the status of the download.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;LazyImage(source: &#34;https://example.com/image.jpeg&#34;)&#xA;    .onStart { print(&#34;Task started \($0)&#34;) }&#xA;    .onProgress { ... }&#xA;    .onSuccess { ... }&#xA;    .onFailure { ... }&#xA;    .onCompletion { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if some API isn&#39;t exposed yet, you can always access the underlying &lt;code&gt;ImageView&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;LazyImage(source: &#34;https://example.com/image.jpeg&#34;)&#xA;    .onCreated { view in &#xA;        view.videoGravity = .resizeAspect&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LazyImageView&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;LazyImageView&lt;/code&gt; is a &lt;code&gt;LazyImage&lt;/code&gt; counterpart for UIKit and AppKit with the equivalent set of APIs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let imageView = LazyImageView()&#xA;imageView.placeholderView = UIActivityIndicatorView()&#xA;imageView.priority = .high&#xA;imageView.pipeline = customPipeline&#xA;imageView.onCompletion = { print(&#34;Request completed&#34;)&#xA;&#xA;imageView.source = &#34;https://example.com/image.jpeg&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Image and ImageView&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Image&lt;/code&gt; and &lt;code&gt;ImageView&lt;/code&gt; are image components that support the same image formats that lazy variants (including animated images and video), but you can use them to display an already available image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let container = ImageContainer(image: UIImage(data: data), data: data, type: .gif)&#xA;Image(container)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Animated Images&lt;/h2&gt; &#xA;&lt;p&gt;All image components in NukeUI support GIF playback powered by &lt;a href=&#34;https://github.com/kaishin/Gifu&#34;&gt;Gifu&lt;/a&gt; rendering engine. Please keep in mind that GIF rendering is expensive and can result in high CPU, battery, and memory usage. A best practice is to &lt;a href=&#34;https://web.dev/replace-gifs-with-videos/&#34;&gt;replace GIF with video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;p&gt;All image components in NukeUI support video playback. It&#39;s aimed to be a replacement for GIF, which is &lt;a href=&#34;https://web.dev/replace-gifs-with-videos/&#34;&gt;inefficient&lt;/a&gt;. With video, you get an order of magnitude smaller files and hardware-accelerated playback. In practice, it means that instead of a 20 MB GIF you can now download a ~2 MB video of comparable quality. And instead of 60% CPU usage and high energy impact, you&#39;ll see 0%.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; The number of players you can have at once on-screen is limited. The limit is not documented and depends on the platform. In general, expect to have about four players playing at once.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Extending Rendering System&lt;/h2&gt; &#xA;&lt;p&gt;NukeUI allows you to extend image rendering system in case you need to support additional image format. And there are only two simple steps to do that.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;. Register a custom decoder with Nuke.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ImageDecoderRegistry.shared.register { context in&#xA;    let isSVG = context.urlResponse?.url?.absoluteString.hasSuffix(&#34;.svg&#34;) ?? false&#xA;    return isSVG ? ImageDecoders.Empty(imageType: .svg) : nil&#xA;}&#xA;&#xA;extension ImageType {&#xA;    public static let svg: ImageType = &#34;public.svg&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Learn more about the decoding infrastructure in &lt;a href=&#34;https://kean.blog/nuke/guides/image-formats&#34;&gt;&#34;Image Formats.&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;. Register a custom image view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftSVG&#xA;&#xA;// Affects both all image components, including `LazyImage` and `Image`&#xA;ImageView.registerContentView {&#xA;   if $0.type == .svg, let string = $0.data.map( {&#xA;       UIView(svgData: data)&#xA;   }&#xA;   return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Minimum Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;NukeUI&lt;/th&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Xcode&lt;/th&gt; &#xA;   &lt;th&gt;Platforms&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NukeUI 0.1&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 11.0 / watchOS 5.0 / macOS 10.13 / tvOS 11.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;LazyImage&lt;/code&gt; and &lt;code&gt;Image&lt;/code&gt; are available on the following platforms: iOS 14.0 / watchOS 7.0 / macOS 10.16 / tvOS 14.0&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;NukeUI is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yattee/yattee</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/yattee/yattee</id>
    <link href="https://github.com/yattee/yattee" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Alternative YouTube frontend for iOS (iPhone, iPad), macOS and tvOS (Apple TV) built with Invidious and Piped&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;&lt;strong&gt;üì£ &lt;a href=&#34;https://yattee.stream/beta&#34;&gt;TestFlight beta&lt;/a&gt; now available üì£ &lt;/strong&gt;&lt;/h3&gt; &#xA; &lt;hr&gt; &#xA; &lt;img src=&#34;https://r.yattee.stream/icons/yattee-150.png&#34; width=&#34;150&#34; height=&#34;150&#34; alt=&#34;Yattee logo&#34;&gt; &#xA; &lt;h1&gt;Yattee&lt;/h1&gt; &#xA; &lt;p&gt;Alternative YouTube frontend for iOS, tvOS and macOS&lt;br&gt;built with &lt;a href=&#34;https://github.com/iv-org/invidious&#34;&gt;Invidious&lt;/a&gt; and &lt;a href=&#34;https://github.com/TeamPiped/Piped&#34;&gt;Piped&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;AGPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yattee/yattee/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/yattee/yattee&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yattee/yattee/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/yattee/yattee&#34; alt=&#34;GitHub pull requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#yattee:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/yattee:matrix.org&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://r.yattee.stream/screenshots/all-platforms.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native user interface built with &lt;a href=&#34;https://developer.apple.com/xcode/swiftui/&#34;&gt;SwiftUI&lt;/a&gt; with customization settings&lt;/li&gt; &#xA; &lt;li&gt;Multiple instances and accounts, fast switching&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sponsor.ajay.app/&#34;&gt;SponsorBlock&lt;/a&gt;, configurable categories to skip&lt;/li&gt; &#xA; &lt;li&gt;Player queue and history&lt;/li&gt; &#xA; &lt;li&gt;Fullscreen playback, Picture in Picture and AirPlay support&lt;/li&gt; &#xA; &lt;li&gt;Stream quality selection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features in development&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New player component with custom controls, gestures and support for 4K playback&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can leave your feedback in &lt;a href=&#34;https://github.com/yattee/yattee/discussions/132&#34;&gt;discussion on v1.4.alpha.4 release&lt;/a&gt; or join &lt;a href=&#34;https://matrix.to/#/#yattee:matrix.org&#34;&gt;Matrix Channel&lt;/a&gt; for a chat. Thanks!&lt;/p&gt; &#xA;&lt;h3&gt;Availability&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Invidious&lt;/th&gt; &#xA;   &lt;th&gt;Piped&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;User Accounts&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Subscriptions&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;User Playlists&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trending&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Channels&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Channel Playlists&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Search&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Search Suggestions&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Search Filters&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;üî¥&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Popular&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;üî¥&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Subtitles&lt;/td&gt; &#xA;   &lt;td&gt;üî¥&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Comments&lt;/td&gt; &#xA;   &lt;td&gt;üî¥&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can browse and use accounts from one app and play videos with another (for example: use Invidious account for subscriptions and use Piped as playback source). Comments can be displayed from Piped even when Invidious is used for browsing/playing.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yattee/yattee/wiki/Installation-Instructions&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yattee/yattee/wiki/Building-instructions&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yattee/yattee/wiki&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yattee/yattee/wiki/Screenshots-Gallery&#34;&gt;Screenshots Gallery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yattee/yattee/wiki/Tips&#34;&gt;Tips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yattee/yattee/wiki/Integrations&#34;&gt;Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yattee/yattee/wiki/Donations&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interestred in contributing, you can browse the &lt;a href=&#34;https://github.com/yattee/yattee/issues&#34;&gt;issues&lt;/a&gt; list or create a new one to discuss your feature idea. Every contribution is very welcome.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/yattee/yattee/wiki/Building-instructions&#34;&gt;building instructions&lt;/a&gt; or Join &lt;a href=&#34;https://matrix.to/#/#yattee:matrix.org&#34;&gt;Matrix Channel&lt;/a&gt; for a chat if you need an advice or want to discuss the project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Yattee and its components is shared on &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.en.html&#34;&gt;AGPL v3&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The Yattee project and its contents are not affiliated with, funded, authorized, endorsed by, or in any way accociated with YouTube, Google LLC or any of its affiliates and subsidaries. The official YouTube website can be found at &lt;a href=&#34;http://www.youtube.com&#34;&gt;www.youtube.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any trademark, service mark, trade name, or other intellectual property rights used in the Yattee project are owned by the respective owners.&lt;/p&gt; &#xA;&lt;p&gt;This tool is an open source software built for learning and research purposes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HeroTransitions/Hero</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/HeroTransitions/Hero</id>
    <link href="https://github.com/HeroTransitions/Hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elegant transition library for iOS &amp; tvOS&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/427d5f2/Resources/Hero.svg?sanitize=true&#34; width=&#34;388&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hero&lt;/strong&gt; is a library for building iOS view controller transitions. It provides a declarative layer on top of the UIKit&#39;s cumbersome transition APIs‚Äîmaking custom transitions an easy task for developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-Compatible-brightgreen.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/HeroTransitions/Hero&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/HeroTransitions/Hero/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Hero&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Hero.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lkzhao/Hero/raw/master/LICENSE?raw=true&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Hero.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Xcode-9.0%2B-blue.svg?sanitize=true&#34; alt=&#34;Xcode 9.0+&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/iOS-8.0%2B-blue.svg?sanitize=true&#34; alt=&#34;iOS 8.0+&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-4.0%2B-orange.svg?sanitize=true&#34; alt=&#34;Swift 4.0+&#34;&gt; &lt;a href=&#34;https://github.com/lkzhao/Hero/raw/master/README.zh-cn.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E4%B8%AD%E6%96%87-README-blue.svg?style=flat&#34; alt=&#34;‰∏≠Êñá README&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=NT5F7Y2MPV7RE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/features.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/features2.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hero is similar to Keynote&#39;s &lt;strong&gt;Magic Move&lt;/strong&gt;. It checks the &lt;code&gt;heroID&lt;/code&gt; property on all source and destination views. Every matched view pair is then automatically transitioned from its old state to its new state.&lt;/p&gt; &#xA;&lt;p&gt;Hero can also construct animations for unmatched views. It is easy to define these animations via the &lt;code&gt;heroModifiers&lt;/code&gt; property. Hero will run these animations alongside the &lt;strong&gt;Magic Move&lt;/strong&gt; animations. All of these animations can be &lt;strong&gt;interactively controlled&lt;/strong&gt; by user gestures.&lt;/p&gt; &#xA;&lt;p&gt;At view controller level, Hero provides several template transitions that you can set through &lt;code&gt;heroModalAnimationType&lt;/code&gt;, &lt;code&gt;heroNavigationAnimationType&lt;/code&gt;, and &lt;code&gt;heroTabBarAnimationType&lt;/code&gt;. These can be used as the foundation of your custom transitions. Combine with &lt;code&gt;heroID&lt;/code&gt; &amp;amp; &lt;code&gt;heroModifiers&lt;/code&gt; to make your own unique transitions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/defaultAnimations.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/defaultAnimations2.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, Hero provides &lt;strong&gt;dynamic duration&lt;/strong&gt; based on the &lt;a href=&#34;https://material.io/design/motion/speed.html#easing&#34;&gt;Material Design Motion Guide&lt;/a&gt;. Duration is automatically determined by changes to distance and size‚Äîsaving you the hassle, while providing consistent and delightful animations.&lt;/p&gt; &#xA;&lt;p&gt;Hero doesn&#39;t make any assumptions about how the view is built or structured. It won&#39;t modify any of your views&#39; states other than hiding them during the animation. This makes it work with &lt;strong&gt;Auto Layout&lt;/strong&gt;, &lt;strong&gt;programmatic layout&lt;/strong&gt;, &lt;strong&gt;UICollectionView&lt;/strong&gt; (without modifying its layout object), &lt;strong&gt;UITableView&lt;/strong&gt;, &lt;strong&gt;UINavigationController&lt;/strong&gt;, &lt;strong&gt;UITabBarController&lt;/strong&gt;, etc...&lt;/p&gt; &#xA;&lt;h2&gt;Usage Example 1&lt;/h2&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/simple.svg?sanitize=true&#34;&gt; &#xA;&lt;h3&gt;View Controller 1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;redView.hero.id = &#34;ironMan&#34;&#xA;blackView.hero.id = &#34;batMan&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View Controller 2&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.hero.isEnabled = true&#xA;redView.hero.id = &#34;ironMan&#34;&#xA;blackView.hero.id = &#34;batMan&#34;&#xA;whiteView.hero.modifiers = [.translate(y:100)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage Example 2&lt;/h2&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/advanced.svg?sanitize=true&#34;&gt; &#xA;&lt;h3&gt;View Controller 1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;greyView.hero.id = &#34;skyWalker&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View Controller 2&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.hero.isEnabled = true&#xA;greyView.hero.id = &#34;skyWalker&#34;&#xA;&#xA;// collectionView is the parent view of all red cells&#xA;collectionView.hero.modifiers = [.cascade]&#xA;for cell in redCells {&#xA;    cell.hero.modifiers = [.fade, .scale(0.5)]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can do these in the &lt;strong&gt;storyboard&lt;/strong&gt; too!&lt;/p&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/master/Resources/storyboardView.png&#34; width=&#34;267px&#34;&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/master/Resources/storyboardViewController.png&#34; width=&#34;267px&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add the following entry to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;pod &#39;Hero&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to &lt;code&gt;import Hero&lt;/code&gt; in every file you&#39;d like to use Hero.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following entry to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;github &#34;HeroTransitions/Hero&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Accio&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/HeroTransitions/Hero.git&#34;, .upToNextMajor(from: &#34;1.4.0&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add &lt;code&gt;Hero&lt;/code&gt; to your App targets dependencies like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(&#xA;    name: &#34;App&#34;,&#xA;    dependencies: [&#xA;        &#34;Hero&#34;,&#xA;    ]&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;accio update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;To integrate using Apple&#39;s Swift package manager, add the following as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/HeroTransitions/Hero.git&#34;, .upToNextMajor(from: &#34;1.3.0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then specify &lt;code&gt;&#34;Hero&#34;&lt;/code&gt; as a dependency of the Target in which you wish to use Hero. Here&#39;s an example &lt;code&gt;PackageDescription&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:4.0&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyPackage&#34;,&#xA;    products: [&#xA;        .library(&#xA;            name: &#34;MyPackage&#34;,&#xA;            targets: [&#34;MyPackage&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/HeroTransitions/Hero.git&#34;, .upToNextMajor(from: &#34;1.6.1&#34;))&#xA;    ],&#xA;    targets: [&#xA;        .target(&#xA;            name: &#34;MyPackage&#34;,1.6.1&#xA;            dependencies: [&#34;Hero&#34;])&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag the &lt;strong&gt;Sources&lt;/strong&gt; folder anywhere in your project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentations&lt;/h2&gt; &#xA;&lt;p&gt;Checkout the &lt;strong&gt;&lt;a href=&#34;https://github.com/lkzhao/Hero/wiki/Usage-Guide&#34;&gt;WIKI PAGES (Usage Guide)&lt;/a&gt;&lt;/strong&gt; for documentations.&lt;/p&gt; &#xA;&lt;p&gt;For more up-to-date ones, please see the header-doc. (use &lt;strong&gt;alt+click&lt;/strong&gt; in Xcode) &lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/master/Resources/headerDoc.png&#34; width=&#34;521px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interactive Transition Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lkzhao.gitbooks.io/hero/content/docs/InteractiveTransition.html&#34;&gt;Interactive transitions with Hero (Part 1)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Not able to use Hero transition even when &lt;code&gt;self.hero.isEnabled&lt;/code&gt; is set to true&lt;/h3&gt; &#xA;&lt;p&gt;Make sure that you have also enabled &lt;code&gt;self.hero.isEnabled&lt;/code&gt; on the navigation controller if you are doing a push/pop inside the navigation controller.&lt;/p&gt; &#xA;&lt;h3&gt;Views being covered by another matched view during the transition&lt;/h3&gt; &#xA;&lt;p&gt;Matched views use global coordinate space while unmatched views use local coordinate space by default. Local coordinate spaced views might be covered by other global coordinate spaced views. To solve this, use the &lt;code&gt;useGlobalCoordinateSpace&lt;/code&gt; modifier on the views being covered. Checkout &lt;a href=&#34;https://github.com/lkzhao/Hero/wiki/Coordinate-Space&#34;&gt;Coordinate Space Wiki page&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Push animation is shown along side my custom animation&lt;/h3&gt; &#xA;&lt;p&gt;This is the default animation for navigation controller provided by Hero. To disable the push animation, set &lt;code&gt;self.hero.navigationAnimationType&lt;/code&gt; to &lt;code&gt;.fade&lt;/code&gt; or &lt;code&gt;.none&lt;/code&gt; on the navigation controller.&lt;/p&gt; &#xA;&lt;h3&gt;How do I use a different default animation when dismissing&lt;/h3&gt; &#xA;&lt;p&gt;You can use the animation type &lt;code&gt;.selectBy(presenting:dismissing)&lt;/code&gt; to specify a different default animation for dismiss.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    self.hero.modalAnimationType = .selectBy(presenting:.zoom, dismissing:.zoomOut)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We welcome any contributions. Please read the &lt;a href=&#34;https://github.com/lkzhao/Hero/wiki/Contribution-Guide&#34;&gt;Contribution Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>groue/GRDB.swift</title>
    <updated>2022-05-31T01:54:43Z</updated>
    <id>tag:github.com,2022-05-31:/groue/GRDB.swift</id>
    <link href="https://github.com/groue/GRDB.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolkit for SQLite databases, with a focus on application development&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/GRDB.png&#34; alt=&#34;GRDB: A toolkit for SQLite databases, with a focus on application development&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;A toolkit for SQLite databases, with a focus on application development&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img alt=&#34;Swift 5.3&#34; src=&#34;https://img.shields.io/badge/swift-5.3-orange.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img alt=&#34;Platforms&#34; src=&#34;https://img.shields.io/cocoapods/p/GRDB.swift.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/raw/master/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/groue/GRDB.swift.svg?maxAge=2592000&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/actions/workflows/CI.yml&#34;&gt;&lt;img alt=&#34;CI Status&#34; src=&#34;https://github.com/groue/GRDB.swift/actions/workflows/CI.yml/badge.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Latest release&lt;/strong&gt;: May 26, 2022 ‚Ä¢ &lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v5.24.1&#34;&gt;version 5.24.1&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GRDB5MigrationGuide.md&#34;&gt;Migrating From GRDB 4 to GRDB 5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;: iOS 11.0+ / macOS 10.10+ / tvOS 9.0+ / watchOS 2.0+ ‚Ä¢ SQLite 3.8.5+ ‚Ä¢ Swift 5.3+ / Xcode 12+&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift version&lt;/th&gt; &#xA;   &lt;th&gt;GRDB version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Swift 5.3+&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v5.24.1&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 5.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v5.12.0&#34;&gt;v5.12.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 5.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v4.14.0&#34;&gt;v4.14.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v4.14.0&#34;&gt;v4.14.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 4.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v4.14.0&#34;&gt;v4.14.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 4.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v3.7.0&#34;&gt;v3.7.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v2.10.0&#34;&gt;v2.10.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 3.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v1.3.0&#34;&gt;v1.3.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 3.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v1.3.0&#34;&gt;v1.3.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v1.0&#34;&gt;v1.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 2.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v0.81.2&#34;&gt;v0.81.2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 2.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v0.80.2&#34;&gt;v0.80.2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contact&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Release announcements and usage tips: follow &lt;a href=&#34;http://twitter.com/groue&#34;&gt;@groue&lt;/a&gt; on Twitter.&lt;/li&gt; &#xA; &lt;li&gt;Report bugs in a &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/new&#34;&gt;Github issue&lt;/a&gt;. Make sure you check the &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues?q=is%3Aopen&#34;&gt;existing issues&lt;/a&gt; first.&lt;/li&gt; &#xA; &lt;li&gt;A question? Looking for advice? Do you wonder how to contribute? Fancy a chat? Go to the &lt;a href=&#34;https://forums.swift.org/c/related-projects/grdb&#34;&gt;GRDB forums&lt;/a&gt;, or open a &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/new&#34;&gt;Github issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;GRDB provides raw access to SQL and advanced SQLite features, because one sometimes enjoys a sharp tool. It has robust concurrency primitives, so that multi-threaded applications can efficiently use their databases. It grants your application models with persistence and fetching methods, so that you don&#39;t have to deal with SQL and raw database rows when you don&#39;t want to.&lt;/p&gt; &#xA;&lt;p&gt;Compared to &lt;a href=&#34;http://github.com/stephencelis/SQLite.swift&#34;&gt;SQLite.swift&lt;/a&gt; or &lt;a href=&#34;http://github.com/ccgus/fmdb&#34;&gt;FMDB&lt;/a&gt;, GRDB can spare you a lot of glue code. Compared to &lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/&#34;&gt;Core Data&lt;/a&gt; or &lt;a href=&#34;http://realm.io&#34;&gt;Realm&lt;/a&gt;, it can simplify your multi-threaded applications.&lt;/p&gt; &#xA;&lt;p&gt;It comes with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&#34;&gt;up-to-date documentation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#general-guides--good-practices&#34;&gt;general guides&lt;/a&gt;, and it is &lt;a href=&#34;https://github.com/groue/GRDB.swift/wiki/Performance&#34;&gt;fast&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/WhyAdoptGRDB.md&#34;&gt;Why Adopt GRDB?&lt;/a&gt; if you are looking for your favorite database library.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#features&#34;&gt;Features&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#usage&#34;&gt;Usage&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#installation&#34;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&#34;&gt;Documentation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Programming tools for both database beginners and SQLite experts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;Access to raw SQL and SQLite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;: Fetching and persistence methods for your custom structs and class hierarchies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;Query Interface&lt;/a&gt;: A swift way to avoid the SQL language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;: Relations and joins between record types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;WAL Mode Support&lt;/a&gt;: Extra performance for multi-threaded applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Migrations.md&#34;&gt;Migrations&lt;/a&gt;: Transform your database as your application evolves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;Database Observation&lt;/a&gt;: Observe database changes and transactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;Full-Text Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;Encryption&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;Support for Custom SQLite Builds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In-depth integration with our programming environment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md&#34;&gt;Swift Concurrency&lt;/a&gt;: &lt;code&gt;try await&lt;/code&gt; your database (Xcode 13.3.1+).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/groue/GRDBQuery&#34;&gt;SwiftUI&lt;/a&gt;: Access and observe the database from your SwiftUI views.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&#34;&gt;Combine&lt;/a&gt;: Access and observe the database with Combine publishers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/RxSwiftCommunity/RxGRDB&#34;&gt;RxSwift&lt;/a&gt;: Access and observe the database with RxSwift observables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Start using the database in four steps&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;// 1. Open a database connection&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;&#xA;// 2. Define the database schema&#xA;try dbQueue.write { db in&#xA;    try db.create(table: &#34;player&#34;) { t in&#xA;        t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;        t.column(&#34;name&#34;, .text).notNull()&#xA;        t.column(&#34;score&#34;, .integer).notNull()&#xA;    }&#xA;}&#xA;&#xA;// 3. Define a record type&#xA;struct Player: Codable, FetchableRecord, PersistableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;// 4. Access the database&#xA;try dbQueue.write { db in&#xA;    try Player(id: 1, name: &#34;Arthur&#34;, score: 100).insert(db)&#xA;    try Player(id: 2, name: &#34;Barbara&#34;, score: 1000).insert(db)&#xA;}&#xA;&#xA;let players: [Player] = try dbQueue.read { db in&#xA;    try Player.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Activate the WAL mode&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;// Simple database connection&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;&#xA;// Enhanced multithreading based on SQLite&#39;s WAL mode&#xA;let dbPool = try DatabasePool(path: &#34;/path/to/database.sqlite&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;Database Connections&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Access to raw SQL&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;&#34;&#34;&#xA;        CREATE TABLE place (&#xA;          id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;          title TEXT NOT NULL,&#xA;          favorite BOOLEAN NOT NULL DEFAULT 0,&#xA;          latitude DOUBLE NOT NULL,&#xA;          longitude DOUBLE NOT NULL)&#xA;        &#34;&#34;&#34;)&#xA;    &#xA;    try db.execute(sql: &#34;&#34;&#34;&#xA;        INSERT INTO place (title, favorite, latitude, longitude)&#xA;        VALUES (?, ?, ?, ?)&#xA;        &#34;&#34;&#34;, arguments: [&#34;Paris&#34;, true, 48.85341, 2.3488])&#xA;    &#xA;    let parisId = db.lastInsertedRowID&#xA;    &#xA;    // Avoid SQL injection with SQL interpolation&#xA;    try db.execute(literal: &#34;&#34;&#34;&#xA;        INSERT INTO place (title, favorite, latitude, longitude)&#xA;        VALUES (\(&#34;King&#39;s Cross&#34;), \(true), \(51.52151), \(-0.12763))&#xA;        &#34;&#34;&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;Executing Updates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Access to raw database rows and values&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Fetch database rows&#xA;    let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM place&#34;)&#xA;    while let row = try rows.next() {&#xA;        let title: String = row[&#34;title&#34;]&#xA;        let isFavorite: Bool = row[&#34;favorite&#34;]&#xA;        let coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[&#34;latitude&#34;],&#xA;            longitude: row[&#34;longitude&#34;])&#xA;    }&#xA;    &#xA;    // Fetch values&#xA;    let placeCount = try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) FROM place&#34;)! // Int&#xA;    let placeTitles = try String.fetchAll(db, sql: &#34;SELECT title FROM place&#34;) // [String]&#xA;}&#xA;&#xA;let placeCount = try dbQueue.read { db in&#xA;    try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) FROM place&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;Fetch Queries&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Database model types aka &#34;records&#34;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;}&#xA;&#xA;// snip: turn Place into a &#34;record&#34; by adopting the protocols that&#xA;// provide fetching and persistence methods.&#xA;&#xA;try dbQueue.write { db in&#xA;    // Create database table&#xA;    try db.create(table: &#34;place&#34;) { t in&#xA;        t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;        t.column(&#34;title&#34;, .text).notNull()&#xA;        t.column(&#34;favorite&#34;, .boolean).notNull().defaults(to: false)&#xA;        t.column(&#34;longitude&#34;, .double).notNull()&#xA;        t.column(&#34;latitude&#34;, .double).notNull()&#xA;    }&#xA;    &#xA;    var berlin = Place(&#xA;        id: nil,&#xA;        title: &#34;Berlin&#34;,&#xA;        isFavorite: false,&#xA;        coordinate: CLLocationCoordinate2D(latitude: 52.52437, longitude: 13.41053))&#xA;    &#xA;    try berlin.insert(db)&#xA;    berlin.id // some value&#xA;    &#xA;    berlin.isFavorite = true&#xA;    try berlin.update(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Query the database with the Swift query interface&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Place?&#xA;    let paris = try Place.fetchOne(db, id: 1)&#xA;    &#xA;    // Place?&#xA;    let berlin = try Place.filter(Column(&#34;title&#34;) == &#34;Berlin&#34;).fetchOne(db)&#xA;    &#xA;    // [Place]&#xA;    let favoritePlaces = try Place&#xA;        .filter(Column(&#34;favorite&#34;) == true)&#xA;        .order(Column(&#34;title&#34;))&#xA;        .fetchAll(db)&#xA;    &#xA;    // Int&#xA;    let favoriteCount = try Place.filter(Column(&#34;favorite&#34;)).fetchCount(db)&#xA;    &#xA;    // SQL is always welcome&#xA;    let places = try Place.fetchAll(db, sql: &#34;SELECT * FROM place&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;Query Interface&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Database changes notifications&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Define the observed value&#xA;let observation = ValueObservation.tracking { db in&#xA;    try Place.fetchAll(db)&#xA;}&#xA;&#xA;// Start observation&#xA;let cancellable = observation.start(&#xA;    in: dbQueue,&#xA;    onError: { error in ... }&#xA;    onChange: { (places: [Place]) in print(&#34;Fresh places: \(places)&#34;) })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Ready-made support for Combine and RxSwift:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Combine&#xA;let cancellable = observation.publisher(in: dbQueue).sink(&#xA;    receiveCompletion: { completion in ... },&#xA;    receiveValue: { (places: [Place]) in print(&#34;Fresh places: \(places)&#34;) })&#xA;&#xA;// RxSwift&#xA;let disposable = observation.rx.observe(in: dbQueue).subscribe(&#xA;    onNext: { (places: [Place]) in print(&#34;Fresh places: \(places)&#34;) },&#xA;    onError: { error in ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;Database Observation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&#34;&gt;Combine Support&lt;/a&gt;, &lt;a href=&#34;http://github.com/RxSwiftCommunity/RxGRDB&#34;&gt;RxGRDB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB runs on top of SQLite&lt;/strong&gt;: you should get familiar with the &lt;a href=&#34;http://www.sqlite.org/faq.html&#34;&gt;SQLite FAQ&lt;/a&gt;. For general and detailed information, jump to the &lt;a href=&#34;http://www.sqlite.org/docs.html&#34;&gt;SQLite Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Demo Applications &amp;amp; Frequently Asked Questions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt;: Three flavors: vanilla UIKit, Combine + SwiftUI, and Async/Await + SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-opening-connections&#34;&gt;Opening Connections&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-associations&#34;&gt;Associations&lt;/a&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reference&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/index.html&#34;&gt;GRDB Reference&lt;/a&gt; (generated by &lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;Jazzy&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Getting Started&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;Database Connections&lt;/a&gt;: Connect to SQLite databases&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;SQLite and SQL&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;SQLite API&lt;/a&gt;: The low-level SQLite API ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;executing updates&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;fetch queries&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Records and the Query Interface&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;: Fetching and persistence methods for your custom structs and class hierarchies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;Query Interface&lt;/a&gt;: A swift way to generate SQL ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-schema&#34;&gt;table creation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;associations between record types&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Application Tools&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Migrations.md&#34;&gt;Migrations&lt;/a&gt;: Transform your database as your application evolves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;Full-Text Search&lt;/a&gt;: Perform efficient and customizable full-text searches.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt;: Consume complex joined queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;Database Observation&lt;/a&gt;: Observe database changes and transactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;Encryption&lt;/a&gt;: Encrypt your database with SQLCipher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#backup&#34;&gt;Backup&lt;/a&gt;: Dump the content of a database to another.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#interrupt-a-database&#34;&gt;Interrupt a Database&lt;/a&gt;: Abort any pending database operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SharingADatabase.md&#34;&gt;Sharing a Database&lt;/a&gt;: Recommendations for App Group Containers and sandboxed macOS apps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Good to Know&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&#34;&gt;Avoiding SQL Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#unicode&#34;&gt;Unicode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#memory-management&#34;&gt;Memory Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-protection&#34;&gt;Data Protection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md&#34;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;General Guides &amp;amp; Good Practices&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GoodPracticesForDesigningRecordTypes.md&#34;&gt;Good Practices for Designing Record Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GRDB5MigrationGuide.md&#34;&gt;Migrating From GRDB 4 to GRDB 5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues?q=is%3Aissue+label%3A%22best+practices%22&#34;&gt;Issues tagged &#34;best practices&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚ùì&lt;/span&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue%20label%3Aquestion&#34;&gt;Issues tagged &#34;question&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/WhyAdoptGRDB.md&#34;&gt;Why Adopt GRDB?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://medium.com/@gwendal.roue/how-to-build-an-ios-application-with-sqlite-and-grdb-swift-d023a06c29b3&#34;&gt;How to build an iOS application with SQLite and GRDB.swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://medium.com/@gwendal.roue/four-different-ways-to-handle-sqlite-concurrency-db3bcc74d00e&#34;&gt;Four different ways to handle SQLite concurrency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://hackernoon.com/unexpected-sqlite-with-swift-ddc6343bcbfc&#34;&gt;Unexpected SQLite with Swift&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sample-code&#34;&gt;Sample Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The installation procedures below have GRDB use the version of SQLite that ships with the target operating system.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;Encryption&lt;/a&gt; for the installation procedure of GRDB with SQLCipher.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;Custom SQLite builds&lt;/a&gt; for the installation procedure of GRDB with a customized build of SQLite.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#enabling-fts5-support&#34;&gt;Enabling FTS5 Support&lt;/a&gt; for the installation procedure of GRDB with support for the FTS5 full-text engine.&lt;/p&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Xcode projects. To use GRDB with CocoaPods (version 1.2 or higher), specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;GRDB.swift&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GRDB can be installed as a framework, or a static library.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Package Manager&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; automates the distribution of Swift code. To use GRDB with SPM, add a dependency to &lt;code&gt;https://github.com/groue/GRDB.swift.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;GRDB offers two libraries, &lt;code&gt;GRDB&lt;/code&gt; and &lt;code&gt;GRDB-dynamic&lt;/code&gt;. Pick only one. When in doubt, prefer &lt;code&gt;GRDB&lt;/code&gt;. The &lt;code&gt;GRDB-dynamic&lt;/code&gt; library can reveal useful if you are going to link it with multiple targets within your app and only wish to link to a shared, dynamic framework once. See &lt;a href=&#34;https://forums.swift.org/t/how-to-link-a-swift-package-as-dynamic/32062&#34;&gt;How to link a Swift Package as dynamic&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Linux is not currently supported.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: Due to an Xcode bug, you will get &#34;No such module &#39;CSQLite&#39;&#34; errors when you want to embed the GRDB package in other targets than the main application (watch extensions, for example). UI and Unit testing targets are OK, though. See &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/642#issuecomment-575994093&#34;&gt;#642&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Carthage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is &lt;strong&gt;unsupported&lt;/strong&gt;. For some context about this decision, see &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/433&#34;&gt;#433&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manually&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/releases&#34;&gt;Download&lt;/a&gt; a copy of GRDB, or clone its repository and make sure you checkout the latest tagged version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Embed the &lt;code&gt;GRDB.xcodeproj&lt;/code&gt; project in your own project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;GRDBOSX&lt;/code&gt;, &lt;code&gt;GRDBiOS&lt;/code&gt;, &lt;code&gt;GRDBtvOS&lt;/code&gt;, or &lt;code&gt;GRDBWatchOS&lt;/code&gt; target in the &lt;strong&gt;Target Dependencies&lt;/strong&gt; section of the &lt;strong&gt;Build Phases&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;GRDB.framework&lt;/code&gt; from the targeted platform to the &lt;strong&gt;Embedded Binaries&lt;/strong&gt; section of the &lt;strong&gt;General&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for examples of such integration.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Database Connections&lt;/h1&gt; &#xA;&lt;p&gt;GRDB provides two classes for accessing SQLite databases: &lt;code&gt;DatabaseQueue&lt;/code&gt; and &lt;code&gt;DatabasePool&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;// Pick one:&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;let dbPool = try DatabasePool(path: &#34;/path/to/database.sqlite&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The differences are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Database pools allow concurrent database accesses (this can improve the performance of multithreaded applications).&lt;/li&gt; &#xA; &lt;li&gt;Database pools open your SQLite database in the &lt;a href=&#34;https://www.sqlite.org/wal.html&#34;&gt;WAL mode&lt;/a&gt; (unless read-only).&lt;/li&gt; &#xA; &lt;li&gt;Database queues support &lt;a href=&#34;https://www.sqlite.org/inmemorydb.html&#34;&gt;in-memory databases&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are not sure, choose DatabaseQueue.&lt;/strong&gt; You will always be able to switch to DatabasePool later.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-queues&#34;&gt;Database Queues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;Database Pools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Database Queues&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Open a database queue&lt;/strong&gt; with the path to a database file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;let inMemoryDBQueue = DatabaseQueue()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite creates the database file if it does not already exist. The connection is closed when the database queue gets deinitialized.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database queue can be used from any thread.&lt;/strong&gt; The &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; methods are synchronous, and block the current thread until your database statements are executed in a protected dispatch queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Modify the database:&#xA;try dbQueue.write { db in&#xA;    try db.create(table: &#34;place&#34;) { ... }&#xA;    try Place(...).insert(db)&#xA;}&#xA;&#xA;// Read values:&#xA;try dbQueue.read { db in&#xA;    let places = try Place.fetchAll(db)&#xA;    let placeCount = try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Database access methods can return values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let placeCount = try dbQueue.read { db in&#xA;    try Place.fetchCount(db)&#xA;}&#xA;&#xA;let newPlaceCount = try dbQueue.write { db -&amp;gt; Int in&#xA;    try Place(...).insert(db)&#xA;    return try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database queue serializes accesses to the database&lt;/strong&gt;, which means that there is never more than one thread that uses the database.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When you don&#39;t need to modify the database, prefer the &lt;code&gt;read&lt;/code&gt; method. It prevents any modification to the database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;write&lt;/code&gt; method wraps your database statements in a transaction that commits if and only if no error occurs. On the first unhandled error, all changes are reverted, the whole transaction is rollbacked, and the error is rethrown.&lt;/p&gt; &lt;p&gt;When precise transaction handling is required, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;Transactions and Savepoints&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database queue needs your application to follow rules in order to deliver its safety guarantees.&lt;/strong&gt; Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md&#34;&gt;Concurrency&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;Database Configuration&lt;/a&gt; for DatabaseQueue options.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Database Pools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database pool allows concurrent database accesses.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;let dbPool = try DatabasePool(path: &#34;/path/to/database.sqlite&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite creates the database file if it does not already exist. The connection is closed when the database pool gets deinitialized.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: unless read-only, a database pool opens your database in the SQLite &#34;WAL mode&#34;. The WAL mode does not fit all situations. Please have a look at &lt;a href=&#34;https://www.sqlite.org/wal.html&#34;&gt;https://www.sqlite.org/wal.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database pool can be used from any thread.&lt;/strong&gt; The &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; methods are synchronous, and block the current thread until your database statements are executed in a protected dispatch queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Modify the database:&#xA;try dbPool.write { db in&#xA;    try db.create(table: &#34;place&#34;) { ... }&#xA;    try Place(...).insert(db)&#xA;}&#xA;&#xA;// Read values:&#xA;try dbPool.read { db in&#xA;    let places = try Place.fetchAll(db)&#xA;    let placeCount = try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Database access methods can return values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let placeCount = try dbPool.read { db in&#xA;    try Place.fetchCount(db)&#xA;}&#xA;&#xA;let newPlaceCount = try dbPool.write { db -&amp;gt; Int in&#xA;    try Place(...).insert(db)&#xA;    return try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Database pools allow several threads to access the database at the same time:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When you don&#39;t need to modify the database, prefer the &lt;code&gt;read&lt;/code&gt; method, because several threads can perform reads in parallel.&lt;/p&gt; &lt;p&gt;Reads are generally non-blocking, unless the maximum number of concurrent reads has been reached. In this case, a read has to wait for another read to complete. That maximum number can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;configured&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reads are guaranteed an immutable view of the last committed state of the database, regardless of concurrent writes. This kind of isolation is called &lt;a href=&#34;https://sqlite.org/isolation.html&#34;&gt;snapshot isolation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unlike reads, writes are serialized. There is never more than a single thread that is writing into the database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;write&lt;/code&gt; method wraps your database statements in a transaction that commits if and only if no error occurs. On the first unhandled error, all changes are reverted, the whole transaction is rollbacked, and the error is rethrown.&lt;/p&gt; &lt;p&gt;When precise transaction handling is required, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;Transactions and Savepoints&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Database pools can take &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#database-snapshots&#34;&gt;snapshots&lt;/a&gt; of the database.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database pool needs your application to follow rules in order to deliver its safety guarantees.&lt;/strong&gt; See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md&#34;&gt;Concurrency&lt;/a&gt; guide for more details about database pools, how they differ from database queues, and advanced use cases.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;Database Configuration&lt;/a&gt; for DatabasePool options.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Database Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.readonly = true&#xA;config.foreignKeysEnabled = true // Default is already true&#xA;config.label = &#34;MyDatabase&#34;      // Useful when your app opens multiple databases&#xA;config.maximumReaderCount = 10   // (DatabasePool only) The default is 5&#xA;&#xA;let dbQueue = try DatabaseQueue( // or DatabasePool&#xA;    path: &#34;/path/to/database.sqlite&#34;,&#xA;    configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In debug builds, you can increase the verbosity of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;error descriptions&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;trace events&lt;/a&gt; if you opt in for public statement arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG&#xA;// Protect sensitive information by enabling verbose debugging in DEBUG builds only&#xA;config.publicStatementArguments = true&#xA;#endif&#xA;&#xA;let dbQueue = try DatabaseQueue(path: ..., configuration: config)&#xA;&#xA;do {&#xA;    try dbQueue.write { db in&#xA;        user.name = ...&#xA;        user.location = ...&#xA;        user.address = ...&#xA;        user.phoneNumber = ...&#xA;        try user.save(db)&#xA;    }&#xA;} catch {&#xA;    // Prints sensitive information in debug builds only&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: It is your responsibility to prevent sensitive information from leaking in unexpected locations, so you should not set the &lt;code&gt;publicStatementArguments&lt;/code&gt; flag in release builds (think about GDPR and other privacy-related rules).&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: The SQLite version that ships with old operating systems (prior to OSX 10.12, tvOS 10.0, and watchOS 3.0) outputs statement arguments in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;trace events&lt;/a&gt;, regardless of the &lt;code&gt;publicStatementArguments&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/Configuration.html&#34;&gt;Configuration&lt;/a&gt; for more details and configuration options.&lt;/p&gt; &#xA;&lt;h1&gt;SQLite API&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;In this section of the documentation, we will talk SQL.&lt;/strong&gt; Jump to the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt; if SQL is not your cup of tea.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;Executing Updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;Fetch Queries&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;Fetching Methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;Row Queries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;Value Queries&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-and-memory-savings&#34;&gt;Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;Date and DateComponents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;NSNumber, NSDecimalNumber, and Decimal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#swift-enums&#34;&gt;Swift enums&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;Custom Value Types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;Transactions and Savepoints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advanced topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;Prepared Statements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions-and-aggregates&#34;&gt;Custom SQL Functions and Aggregates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-schema-introspection&#34;&gt;Database Schema Introspection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;Row Adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#raw-sqlite-pointers&#34;&gt;Raw SQLite Pointers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Executing Updates&lt;/h2&gt; &#xA;&lt;p&gt;Once granted with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;, the &lt;code&gt;execute&lt;/code&gt; method executes the SQL statements that do not return any database row, such as &lt;code&gt;CREATE TABLE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;ALTER&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;&#34;&#34;&#xA;        CREATE TABLE player (&#xA;            id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;            name TEXT NOT NULL,&#xA;            score INT)&#xA;        &#34;&#34;&#34;)&#xA;    &#xA;    try db.execute(&#xA;        sql: &#34;INSERT INTO player (name, score) VALUES (?, ?)&#34;,&#xA;        arguments: [&#34;Barbara&#34;, 1000])&#xA;    &#xA;    try db.execute(&#xA;        sql: &#34;UPDATE player SET score = :score WHERE id = :id&#34;,&#xA;        arguments: [&#34;score&#34;: 1000, &#34;id&#34;: 1])&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:score&lt;/code&gt; in the SQL query are the &lt;strong&gt;statements arguments&lt;/strong&gt;. You pass arguments with arrays or dictionaries, as in the example above. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;StatementArguments&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt; &#xA;&lt;p&gt;You can also embed query arguments right into your SQL queries, with the &lt;code&gt;literal&lt;/code&gt; argument label, as in the example below. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(literal: &#34;&#34;&#34;&#xA;        INSERT INTO player (name, score) VALUES (\(&#34;O&#39;Brien&#34;), \(550))&#xA;        &#34;&#34;&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Never ever embed values directly in your raw SQL strings&lt;/strong&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&#34;&gt;Avoiding SQL Injection&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WRONG: don&#39;t embed values in raw SQL strings&#xA;let id = 123&#xA;let name = textField.text&#xA;try db.execute(&#xA;    sql: &#34;UPDATE player SET name = &#39;\(name)&#39; WHERE id = \(id)&#34;)&#xA;&#xA;// CORRECT: use arguments dictionary&#xA;try db.execute(&#xA;    sql: &#34;UPDATE player SET name = :name WHERE id = :id&#34;,&#xA;    arguments: [&#34;name&#34;: name, &#34;id&#34;: id])&#xA;&#xA;// CORRECT: use arguments array&#xA;try db.execute(&#xA;    sql: &#34;UPDATE player SET name = ? WHERE id = ?&#34;,&#xA;    arguments: [name, id])&#xA;&#xA;// CORRECT: use SQL Interpolation&#xA;try db.execute(&#xA;    literal: &#34;UPDATE player SET name = \(name) WHERE id = \(id)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Join multiple statements with a semicolon&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.execute(sql: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    &#34;&#34;&#34;, arguments: [&#34;Arthur&#34;, 750, &#34;Barbara&#34;, 1000])&#xA;&#xA;try db.execute(literal: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;Arthur&#34;), \(750));&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;Barbara&#34;), \(1000));&#xA;    &#34;&#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to make sure that a single statement is executed, use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;Prepared Statements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;After an INSERT statement&lt;/strong&gt;, you can get the row ID of the inserted row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.execute(&#xA;    sql: &#34;INSERT INTO player (name, score) VALUES (?, ?)&#34;,&#xA;    arguments: [&#34;Arthur&#34;, 1000])&#xA;let playerId = db.lastInsertedRowID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t miss &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;, that provide classic &lt;strong&gt;persistence methods&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var player = Player(name: &#34;Arthur&#34;, score: 1000)&#xA;try player.insert(db)&#xA;let playerId = player.id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fetch Queries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;Database connections&lt;/a&gt; let you fetch database rows, plain values, and custom models aka &#34;records&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rows&lt;/strong&gt; are the raw results of SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    if let row = try Row.fetchOne(db, sql: &#34;SELECT * FROM wine WHERE id = ?&#34;, arguments: [1]) {&#xA;        let name: String = row[&#34;name&#34;]&#xA;        let color: Color = row[&#34;color&#34;]&#xA;        print(name, color)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt; are the Bool, Int, String, Date, Swift enums, etc. stored in row columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    let urls = try URL.fetchCursor(db, sql: &#34;SELECT url FROM wine&#34;)&#xA;    while let url = try urls.next() {&#xA;        print(url)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Records&lt;/strong&gt; are your application objects that can initialize themselves from rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let wines = try dbQueue.read { db in&#xA;    try Wine.fetchAll(db, sql: &#34;SELECT * FROM wine&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;Fetching Methods&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;Cursors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;Row Queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;Value Queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fetching Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Throughout GRDB&lt;/strong&gt;, you can always fetch &lt;em&gt;cursors&lt;/em&gt;, &lt;em&gt;arrays&lt;/em&gt;, &lt;em&gt;sets&lt;/em&gt;, or &lt;em&gt;single values&lt;/em&gt; of any fetchable type (database &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;row&lt;/a&gt;, simple &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;value&lt;/a&gt;, or custom &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;record&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Row.fetchCursor(...) // A Cursor of Row&#xA;try Row.fetchAll(...)    // [Row]&#xA;try Row.fetchSet(...)    // Set&amp;lt;Row&amp;gt;&#xA;try Row.fetchOne(...)    // Row?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchCursor&lt;/code&gt; returns a &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;cursor&lt;/a&gt;&lt;/strong&gt; over fetched values:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT ...&#34;) // A Cursor of Row&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchAll&lt;/code&gt; returns an &lt;strong&gt;array&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let players = try Player.fetchAll(db, sql: &#34;SELECT ...&#34;) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchSet&lt;/code&gt; returns a &lt;strong&gt;set&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let names = try String.fetchSet(db, sql: &#34;SELECT ...&#34;) // Set&amp;lt;String&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchOne&lt;/code&gt; returns a &lt;strong&gt;single optional value&lt;/strong&gt;, and consumes a single database row (if any).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let count = try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) ...&#34;) // Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;All those fetching methods require an SQL string that contains a single SQL statement.&lt;/strong&gt; When you want to fetch from multiple statements joined with a semicolon, iterate the multiple &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;prepared statements&lt;/a&gt; found in the SQL string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statements = try db.allStatements(sql: &#34;&#34;&#34;&#xA;    SELECT ...; &#xA;    SELECT ...; &#xA;    SELECT ...;&#xA;    &#34;&#34;&#34;)&#xA;while let statement = try statements.next() {&#xA;    let players = try Player.fetchAll(statement)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can join the results of all statements yielded by the &lt;code&gt;allStatements&lt;/code&gt; method, like the SQLite &lt;a href=&#34;https://www.sqlite.org/c3ref/exec.html&#34;&gt;&lt;code&gt;sqlite3_exec&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A single cursor of all rows from all statements&#xA;let rows = try db&#xA;    .allStatements(sql: &#34;...&#34;)&#xA;    .flatMap { statement in try Row.fetchCursor(statement) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;prepared statements&lt;/a&gt; for more information about &lt;code&gt;allStatements()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cursors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Whenever you consume several rows from the database, you can fetch an Array, a Set, or a Cursor&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;fetchAll()&lt;/code&gt; and &lt;code&gt;fetchSet()&lt;/code&gt; methods return regular Swift array and sets, that you iterate like all other arrays and sets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // [Player]&#xA;    let players = try Player.fetchAll(db, sql: &#34;SELECT ...&#34;)&#xA;    for player in players {&#xA;        // use player&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike arrays and sets, cursors returned by &lt;code&gt;fetchCursor()&lt;/code&gt; load their results step after step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Cursor of Player&#xA;    let players = try Player.fetchCursor(db, sql: &#34;SELECT ...&#34;)&#xA;    while let player = try players.next() {&#xA;        // use player&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can not be used on any thread&lt;/strong&gt;: you must consume a cursor on the dispatch queue it was created in. Particularly, don&#39;t extract a cursor out of a database access method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Wrong&#xA;let cursor = try dbQueue.read { db in&#xA;    try Player.fetchCursor(db, ...)&#xA;}&#xA;while let player = try cursor.next() { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Conversely, arrays and sets may be consumed on any thread:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// OK&#xA;let array = try dbQueue.read { db in&#xA;    try Player.fetchAll(db, ...)&#xA;}&#xA;for player in array { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can be iterated only one time.&lt;/strong&gt; Arrays and sets can be iterated many times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors iterate database results in a lazy fashion&lt;/strong&gt;, and don&#39;t consume much memory. Arrays and sets contain copies of database values, and may take a lot of memory when there are many fetched results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors are granted with direct access to SQLite,&lt;/strong&gt; unlike arrays and sets that have to take the time to copy database values. If you look after extra performance, you may prefer cursors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can feed Swift collections.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You will most of the time use &lt;code&gt;fetchAll&lt;/code&gt; or &lt;code&gt;fetchSet&lt;/code&gt; when you want an array or a set. For more specific needs, you may prefer one of the initializers below. All of them accept an extra optional &lt;code&gt;minimumCapacity&lt;/code&gt; argument which helps optimizing your app when you have an idea of the number of elements in a cursor (the built-in &lt;code&gt;fetchAll&lt;/code&gt; and &lt;code&gt;fetchSet&lt;/code&gt; do not perform such an optimization).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt; and all types conforming to &lt;code&gt;RangeReplaceableCollection&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [String]&#xA;let cursor = try String.fetchCursor(db, ...)&#xA;let array = try Array(cursor)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Sets&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Set&amp;lt;Int&amp;gt;&#xA;let cursor = try Int.fetchCursor(db, ...)&#xA;let set = try Set(cursor)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Dictionaries&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [Int64: [Player]]&#xA;let cursor = try Player.fetchCursor(db)&#xA;let dictionary = try Dictionary(grouping: cursor, by: { $0.teamID })&#xA;&#xA;// [Int64: Player]&#xA;let cursor = try Player.fetchCursor(db).map { ($0.id, $0) }&#xA;let dictionary = try Dictionary(uniqueKeysWithValues: cursor)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors adopt the &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Protocols/Cursor.html&#34;&gt;Cursor&lt;/a&gt; protocol, which looks a lot like standard &lt;a href=&#34;https://developer.apple.com/reference/swift/lazysequenceprotocol&#34;&gt;lazy sequences&lt;/a&gt; of Swift.&lt;/strong&gt; As such, cursors come with many convenience methods: &lt;code&gt;compactMap&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;dropFirst&lt;/code&gt;, &lt;code&gt;dropLast&lt;/code&gt;, &lt;code&gt;drop(while:)&lt;/code&gt;, &lt;code&gt;enumerated&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;joined&lt;/code&gt;, &lt;code&gt;joined(separator:)&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;max(by:)&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;min(by:)&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;prefix(while:)&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;reduce(into:)&lt;/code&gt;, &lt;code&gt;suffix&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Prints all Github links&#xA;try URL&#xA;    .fetchCursor(db, sql: &#34;SELECT url FROM link&#34;)&#xA;    .filter { url in url.host == &#34;github.com&#34; }&#xA;    .forEach { url in print(url) }&#xA;&#xA;// An efficient cursor of coordinates:&#xA;let locations = try Row.&#xA;    .fetchCursor(db, sql: &#34;SELECT latitude, longitude FROM place&#34;)&#xA;    .map { row in&#xA;        CLLocationCoordinate2D(latitude: row[0], longitude: row[1])&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors are not Swift sequences.&lt;/strong&gt; That&#39;s because Swift sequences can&#39;t handle iteration errors, when reading SQLite results may fail at any time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors require a little care&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Don&#39;t modify the results during a cursor iteration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Undefined behavior&#xA;while let player = try players.next() {&#xA;    try db.execute(sql: &#34;DELETE ...&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Don&#39;t turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array or a set. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. To get a set of rows, use &lt;code&gt;Row.fetchSet(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t see, or don&#39;t care about the difference, use arrays. If you care about memory and performance, use cursors when appropriate.&lt;/p&gt; &#xA;&lt;h3&gt;Row Queries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-rows&#34;&gt;Fetching Rows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&#34;&gt;Column Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rows-as-dictionaries&#34;&gt;Rows as Dictionaries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Fetching Rows&lt;/h4&gt; &#xA;&lt;p&gt;Fetch &lt;strong&gt;cursors&lt;/strong&gt; of rows, &lt;strong&gt;arrays&lt;/strong&gt;, &lt;strong&gt;sets&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; rows (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    try Row.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments: ...) // A Cursor of Row&#xA;    try Row.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // [Row]&#xA;    try Row.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Set&amp;lt;Row&amp;gt;&#xA;    try Row.fetchOne(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Row?&#xA;    &#xA;    let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM wine&#34;)&#xA;    while let row = try rows.next() {&#xA;        let name: String = row[&#34;name&#34;]&#xA;        let color: Color = row[&#34;color&#34;]&#xA;        print(name, color)&#xA;    }&#xA;}&#xA;&#xA;let rows = try dbQueue.read { db in&#xA;    try Row.fetchAll(db, sql: &#34;SELECT * FROM player&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments are optional arrays or dictionaries that fill the positional &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:name&lt;/code&gt; in the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchAll(db,&#xA;    sql: &#34;SELECT * FROM player WHERE name = ?&#34;,&#xA;    arguments: [&#34;Arthur&#34;])&#xA;&#xA;let rows = try Row.fetchAll(db,&#xA;    sql: &#34;SELECT * FROM player WHERE name = :name&#34;,&#xA;    arguments: [&#34;name&#34;: &#34;Arthur&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;StatementArguments&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt; &#xA;&lt;p&gt;Unlike row arrays that contain copies of the database rows, row cursors are close to the SQLite metal, and require a little care:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Don&#39;t turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array or a set&lt;/strong&gt;. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. To get a set of rows, use &lt;code&gt;Row.fetchSet(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Column Values&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read column values&lt;/strong&gt; by index or column name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String = row[0]      // 0 is the leftmost column&#xA;let name: String = row[&#34;name&#34;] // Leftmost matching column - lookup is case-insensitive&#xA;let name: String = row[Column(&#34;name&#34;)] // Using query interface&#39;s Column&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to ask for an optional when the value may be NULL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String? = row[&#34;name&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;row[]&lt;/code&gt; subscript returns the type you ask for. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported value types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bookCount: Int     = row[&#34;bookCount&#34;]&#xA;let bookCount64: Int64 = row[&#34;bookCount&#34;]&#xA;let hasBooks: Bool     = row[&#34;bookCount&#34;] // false when 0&#xA;&#xA;let string: String     = row[&#34;date&#34;]      // &#34;2015-09-11 18:14:15.123&#34;&#xA;let date: Date         = row[&#34;date&#34;]      // Date&#xA;self.date = row[&#34;date&#34;] // Depends on the type of the property.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;as&lt;/code&gt; type casting operator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;row[...] as Int&#xA;row[...] as Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: avoid the &lt;code&gt;as!&lt;/code&gt; and &lt;code&gt;as?&lt;/code&gt; operators:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let int = row[...] as? Int { ... } // BAD - doesn&#39;t work&#xA;if let int = row[...] as Int? { ... } // GOOD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Generally speaking, you can extract the type you need, provided it can be converted from the underlying SQLite value:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Successful conversions include:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All numeric SQLite values to all numeric Swift types, and Bool (zero is the only false boolean).&lt;/li&gt; &#xA;   &lt;li&gt;Text SQLite values to Swift String.&lt;/li&gt; &#xA;   &lt;li&gt;Blob SQLite values to Foundation Data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported types (Bool, Int, String, Date, Swift enums, etc.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NULL returns nil.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT NULL&#34;)!&#xA;row[0] as Int? // nil&#xA;row[0] as Int  // fatal error: could not convert NULL to Int.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is one exception, though: the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;row[0] as DatabaseValue // DatabaseValue.null&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Missing columns return nil.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;foo&#39; AS foo&#34;)!&#xA;row[&#34;missing&#34;] as String? // nil&#xA;row[&#34;missing&#34;] as String  // fatal error: no such column: missing&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can explicitly check for a column presence with the &lt;code&gt;hasColumn&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Invalid conversions throw a fatal error.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Mom‚Äôs birthday&#39;&#34;)!&#xA;row[0] as String // &#34;Mom‚Äôs birthday&#34;&#xA;row[0] as Date?  // fatal error: could not convert &#34;Mom‚Äôs birthday&#34; to Date.&#xA;row[0] as Date   // fatal error: could not convert &#34;Mom‚Äôs birthday&#34; to Date.&#xA;&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 256&#34;)!&#xA;row[0] as Int    // 256&#xA;row[0] as UInt8? // fatal error: could not convert 256 to UInt8.&#xA;row[0] as UInt8  // fatal error: could not convert 256 to UInt8.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Those conversion fatal errors can be avoided with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Mom‚Äôs birthday&#39;&#34;)!&#xA;let dbValue: DatabaseValue = row[0]&#xA;if dbValue.isNull {&#xA;    // Handle NULL&#xA;} else if let date = Date.fromDatabaseValue(dbValue) {&#xA;    // Handle valid date&#xA;} else {&#xA;    // Handle invalid date&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This extra verbosity is the consequence of having to deal with an untrusted database: you may consider fixing the content of your database instead. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&#34;&gt;Fatal Errors&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SQLite has a weak type system, and provides &lt;a href=&#34;https://www.sqlite.org/c3ref/column_blob.html&#34;&gt;convenience conversions&lt;/a&gt; that can turn String to Int, Double to Blob, etc.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;GRDB will sometimes let those conversions go through:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT &#39;20 small cigars&#39;&#34;)&#xA;while let row = try rows.next() {&#xA;    row[0] as Int   // 20&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don&#39;t freak out: those conversions did not prevent SQLite from becoming the immensely successful database engine you want to use. And GRDB adds safety checks described just above. You can also prevent those convenience conversions altogether by using the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;DatabaseValue&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;DatabaseValue is an intermediate type between SQLite and your values, which gives information about the raw value stored in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You get DatabaseValue just like other value types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dbValue: DatabaseValue = row[0]&#xA;let dbValue: DatabaseValue? = row[&#34;name&#34;] // nil if and only if column does not exist&#xA;&#xA;// Check for NULL:&#xA;dbValue.isNull // Bool&#xA;&#xA;// The stored value:&#xA;dbValue.storage.value // Int64, Double, String, Data, or nil&#xA;&#xA;// All the five storage classes supported by SQLite:&#xA;switch dbValue.storage {&#xA;case .null:                 print(&#34;NULL&#34;)&#xA;case .int64(let int64):     print(&#34;Int64: \(int64)&#34;)&#xA;case .double(let double):   print(&#34;Double: \(double)&#34;)&#xA;case .string(let string):   print(&#34;String: \(string)&#34;)&#xA;case .blob(let data):       print(&#34;Data: \(data)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can extract regular &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) from DatabaseValue with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible.fromDatabaseValue()&lt;/a&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dbValue: DatabaseValue = row[&#34;bookCount&#34;]&#xA;let bookCount   = Int.fromDatabaseValue(dbValue)   // Int?&#xA;let bookCount64 = Int64.fromDatabaseValue(dbValue) // Int64?&#xA;let hasBooks    = Bool.fromDatabaseValue(dbValue)  // Bool?, false when 0&#xA;&#xA;let dbValue: DatabaseValue = row[&#34;date&#34;]&#xA;let string = String.fromDatabaseValue(dbValue)     // &#34;2015-09-11 18:14:15.123&#34;&#xA;let date   = Date.fromDatabaseValue(dbValue)       // Date?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fromDatabaseValue&lt;/code&gt; returns nil for invalid conversions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Mom‚Äôs birthday&#39;&#34;)!&#xA;let dbValue: DatabaseValue = row[0]&#xA;let string = String.fromDatabaseValue(dbValue) // &#34;Mom‚Äôs birthday&#34;&#xA;let int    = Int.fromDatabaseValue(dbValue)    // nil&#xA;let date   = Date.fromDatabaseValue(dbValue)   // nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rows as Dictionaries&lt;/h4&gt; &#xA;&lt;p&gt;Row adopts the standard &lt;a href=&#34;https://developer.apple.com/documentation/swift/randomaccesscollection&#34;&gt;RandomAccessCollection&lt;/a&gt; protocol, and can be seen as a dictionary of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// All the (columnName, dbValue) tuples, from left to right:&#xA;for (columnName, dbValue) in row {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can build rows from dictionaries&lt;/strong&gt; (standard Swift dictionaries and NSDictionary). See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row: Row = [&#34;name&#34;: &#34;foo&#34;, &#34;date&#34;: nil]&#xA;let row = Row([&#34;name&#34;: &#34;foo&#34;, &#34;date&#34;: nil])&#xA;let row = Row(/* [AnyHashable: Any] */) // nil if invalid dictionary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet rows are not real dictionaries: they may contain duplicate columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT 1 AS foo, 2 AS foo&#34;)!&#xA;row.columnNames    // [&#34;foo&#34;, &#34;foo&#34;]&#xA;row.databaseValues // [1, 2]&#xA;row[&#34;foo&#34;]         // 1 (leftmost matching column)&#xA;for (columnName, dbValue) in row { ... } // (&#34;foo&#34;, 1), (&#34;foo&#34;, 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you build a dictionary from a row&lt;/strong&gt;, you have to disambiguate identical columns, and choose how to present database values. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: DatabaseValue]&lt;/code&gt; dictionary that keeps leftmost value in case of duplicated column name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = Dictionary(row, uniquingKeysWith: { (left, _) in left })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: AnyObject]&lt;/code&gt; dictionary which keeps rightmost value in case of duplicated column name. This dictionary is identical to FMResultSet&#39;s resultDictionary from FMDB. It contains NSNull values for null columns, and can be shared with Objective-C:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = Dictionary(&#xA;    row.map { (column, dbValue) in&#xA;        (column, dbValue.storage.value as AnyObject)&#xA;    },&#xA;    uniquingKeysWith: { (_, right) in right })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: Any]&lt;/code&gt; dictionary that can feed, for example, JSONSerialization:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = Dictionary(&#xA;    row.map { (column, dbValue) in&#xA;        (column, dbValue.storage.value)&#xA;    },&#xA;    uniquingKeysWith: { (left, _) in left })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the documentation of &lt;a href=&#34;https://developer.apple.com/documentation/swift/dictionary/2892961-init&#34;&gt;&lt;code&gt;Dictionary.init(_:uniquingKeysWith:)&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Value Queries&lt;/h3&gt; &#xA;&lt;p&gt;Instead of rows, you can directly fetch &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;&lt;/strong&gt;. Like rows, fetch them as &lt;strong&gt;cursors&lt;/strong&gt;, &lt;strong&gt;arrays&lt;/strong&gt;, &lt;strong&gt;sets&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; values (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt;). Values are extracted from the leftmost column of the SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    try Int.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments: ...) // A Cursor of Int&#xA;    try Int.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // [Int]&#xA;    try Int.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Set&amp;lt;Int&amp;gt;&#xA;    try Int.fetchOne(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Int?&#xA;    &#xA;    // When database may contain NULL:&#xA;    try Optional&amp;lt;Int&amp;gt;.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments: ...) // A Cursor of Int?&#xA;    try Optional&amp;lt;Int&amp;gt;.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // [Int?]&#xA;    try Optional&amp;lt;Int&amp;gt;.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Set&amp;lt;Int?&amp;gt;&#xA;}&#xA;&#xA;let playerCount = try dbQueue.read { db in&#xA;    try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) FROM player&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fetchOne&lt;/code&gt; returns an optional value which is nil in two cases: either the SELECT statement yielded no row, or one row with a NULL value.&lt;/p&gt; &#xA;&lt;p&gt;There are many supported value types (Bool, Int, String, Date, Swift enums, etc.). See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let count = try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) FROM player&#34;)! // Int&#xA;let urls = try URL.fetchAll(db, sql: &#34;SELECT url FROM link&#34;)          // [URL]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Values&lt;/h2&gt; &#xA;&lt;p&gt;GRDB ships with built-in support for the following value types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Swift Standard Library&lt;/strong&gt;: Bool, Double, Float, all signed and unsigned integer types, String, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#swift-enums&#34;&gt;Swift enums&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Foundation&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-and-memory-savings&#34;&gt;Data&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;Date&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;DateComponents&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;Decimal&lt;/a&gt;, NSNull, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;NSNumber&lt;/a&gt;, NSString, URL, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#uuid&#34;&gt;UUID&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CoreGraphics&lt;/strong&gt;: CGFloat.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;&lt;/strong&gt;, the type which gives information about the raw value stored in the database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full-Text Patterns&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts3pattern&#34;&gt;FTS3Pattern&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts5pattern&#34;&gt;FTS5Pattern&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generally speaking, all types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible&lt;/a&gt; protocol.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Values can be used as &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;statement arguments&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let url: URL = ...&#xA;let verified: Bool = ...&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO link (url, verified) VALUES (?, ?)&#34;,&#xA;    arguments: [url, verified])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Values can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&#34;&gt;extracted from rows&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM link&#34;)&#xA;while let row = try rows.next() {&#xA;    let url: URL = row[&#34;url&#34;]&#xA;    let verified: Bool = row[&#34;verified&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Values can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;directly fetched&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let urls = try URL.fetchAll(db, sql: &#34;SELECT url FROM link&#34;)  // [URL]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use values in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Link: FetchableRecord {&#xA;    var url: URL&#xA;    var isVerified: Bool&#xA;    &#xA;    init(row: Row) {&#xA;        url = row[&#34;url&#34;]&#xA;        isVerified = row[&#34;verified&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use values in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let url: URL = ...&#xA;let link = try Link.filter(Column(&#34;url&#34;) == url).fetchOne(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data (and Memory Savings)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data&lt;/strong&gt; suits the BLOB SQLite columns. It can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT data, ...&#34;)&#xA;while let row = try rows.next() {&#xA;    let data: Data = row[&#34;data&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At each step of the request iteration, the &lt;code&gt;row[]&lt;/code&gt; subscript creates &lt;em&gt;two copies&lt;/em&gt; of the database bytes: one fetched by SQLite, and another, stored in the Swift Data value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You have the opportunity to save memory&lt;/strong&gt; by not copying the data fetched by SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;while let row = try rows.next() {&#xA;    let data = row.dataNoCopy(named: &#34;data&#34;) // Data?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The non-copied data does not live longer than the iteration step: make sure that you do not use it past this point.&lt;/p&gt; &#xA;&lt;h3&gt;Date and DateComponents&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date&#34;&gt;&lt;strong&gt;Date&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#datecomponents&#34;&gt;&lt;strong&gt;DateComponents&lt;/strong&gt;&lt;/a&gt; can be stored and fetched from the database.&lt;/p&gt; &#xA;&lt;p&gt;Here is how GRDB supports the various &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;date formats&lt;/a&gt; supported by SQLite:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;SQLite format&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Date&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;DateComponents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD HH:MM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD HH:MM:SS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD HH:MM:SS.SSS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤ / Write ¬π&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS.SSS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HH:MM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HH:MM:SS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HH:MM:SS.SSS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Timestamps since unix epoch&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≥&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;now&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;¬π Missing components are assumed to be zero. Dates are stored and read in the UTC time zone, unless the format is followed by a timezone indicator ‚ÅΩ¬≤‚Åæ.&lt;/p&gt; &#xA;&lt;p&gt;¬≤ This format may be optionally followed by a timezone indicator of the form &lt;code&gt;[+-]HH:MM&lt;/code&gt; or just &lt;code&gt;Z&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;¬≥ GRDB 2+ interprets numerical values as timestamps that fuel &lt;code&gt;Date(timeIntervalSince1970:)&lt;/code&gt;. Previous GRDB versions used to interpret numbers as &lt;a href=&#34;https://en.wikipedia.org/wiki/Julian_day&#34;&gt;julian days&lt;/a&gt;. Julian days are still supported, with the &lt;code&gt;Date(julianDay:)&lt;/code&gt; initializer.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years in the SQLite date formats is 0000-9999. You will need to pick another date format when your application needs to process years outside of this range. See the following chapters.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Date&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Date&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.execute(&#xA;    sql: &#34;INSERT INTO player (creationDate, ...) VALUES (?, ...)&#34;,&#xA;    arguments: [Date(), ...])&#xA;&#xA;let row = try Row.fetchOne(db, ...)!&#xA;let creationDate: Date = row[&#34;creationDate&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dates are stored using the format &#34;YYYY-MM-DD HH:MM:SS.SSS&#34; in the UTC time zone. It is precise to the millisecond.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: this format was chosen because it is the only format that is:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Comparable (&lt;code&gt;ORDER BY date&lt;/code&gt; works)&lt;/li&gt; &#xA;  &lt;li&gt;Comparable with the SQLite keyword CURRENT_TIMESTAMP (&lt;code&gt;WHERE date &amp;gt; CURRENT_TIMESTAMP&lt;/code&gt; works)&lt;/li&gt; &#xA;  &lt;li&gt;Able to feed &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Precise enough&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years in the SQLite date format is 0000-9999. You will experience problems with years outside of this range, such as decoding errors, or invalid date computations with &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some applications may prefer another date format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some may prefer ISO-8601, with a &lt;code&gt;T&lt;/code&gt; separator.&lt;/li&gt; &#xA; &lt;li&gt;Some may prefer ISO-8601, with a time zone.&lt;/li&gt; &#xA; &lt;li&gt;Some may need to store years beyond the 0000-9999 range.&lt;/li&gt; &#xA; &lt;li&gt;Some may need sub-millisecond precision.&lt;/li&gt; &#xA; &lt;li&gt;Some may need exact &lt;code&gt;Date&lt;/code&gt; roundtrip.&lt;/li&gt; &#xA; &lt;li&gt;Etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;You should think twice before choosing a different date format:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ISO-8601 is about &lt;em&gt;exchange and communication&lt;/em&gt;, when SQLite is about &lt;em&gt;storage and data manipulation&lt;/em&gt;. Sharing the same representation in your database and in JSON files only provides a superficial convenience, and should be the least of your priorities. Don&#39;t store dates as ISO-8601 without understanding what you lose. For example, ISO-8601 time zones forbid database-level date comparison.&lt;/li&gt; &#xA; &lt;li&gt;Sub-millisecond precision and exact &lt;code&gt;Date&lt;/code&gt; roundtrip are not as obvious needs as it seems at first sight. Dates generally don&#39;t precisely roundtrip as soon as they leave your application anyway, because the other systems your app communicates with use their own date representation (the Android version of your app, the server your application is talking to, etc.) On top of that, &lt;code&gt;Date&lt;/code&gt; comparison is at least as hard and nasty as &lt;a href=&#34;https://www.google.com/search?q=floating+point+comparison+is+hard&#34;&gt;floating point comparison&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The customization of date format is explicit. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let date = Date()&#xA;let timeInterval = date.timeIntervalSinceReferenceDate&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO player (creationDate, ...) VALUES (?, ...)&#34;,&#xA;    arguments: [timeInterval, ...])&#xA;&#xA;if let row = try Row.fetchOne(db, ...) {&#xA;    let timeInterval: TimeInterval = row[&#34;creationDate&#34;]&#xA;    let creationDate = Date(timeIntervalSinceReferenceDate: timeInterval)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more date customization options, and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible&lt;/a&gt; if you want to define a Date-wrapping type with customized database representation.&lt;/p&gt; &#xA;&lt;h4&gt;DateComponents&lt;/h4&gt; &#xA;&lt;p&gt;DateComponents is indirectly supported, through the &lt;strong&gt;DatabaseDateComponents&lt;/strong&gt; helper type.&lt;/p&gt; &#xA;&lt;p&gt;DatabaseDateComponents reads date components from all &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;date formats supported by SQLite&lt;/a&gt;, and stores them in the format of your choice, from HH:MM to YYYY-MM-DD HH:MM:SS.SSS.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years is 0000-9999. You will experience problems with years outside of this range, such as decoding errors, or invalid date computations with &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date&#34;&gt;Date&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;DatabaseDateComponents can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let components = DateComponents()&#xA;components.year = 1973&#xA;components.month = 9&#xA;components.day = 18&#xA;&#xA;// Store &#34;1973-09-18&#34;&#xA;let dbComponents = DatabaseDateComponents(components, format: .YMD)&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO player (birthDate, ...) VALUES (?, ...)&#34;,&#xA;    arguments: [dbComponents, ...])&#xA;&#xA;// Read &#34;1973-09-18&#34;&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT birthDate ...&#34;)!&#xA;let dbComponents: DatabaseDateComponents = row[&#34;birthDate&#34;]&#xA;dbComponents.format         // .YMD (the actual format found in the database)&#xA;dbComponents.dateComponents // DateComponents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NSNumber, NSDecimalNumber, and Decimal&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NSNumber&lt;/strong&gt; and &lt;strong&gt;Decimal&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is how GRDB supports the various data types supported by SQLite:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Integer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Double&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;String&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSNumber&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSDecimalNumber&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Decimal&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All three types can decode database integers and doubles:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let number = try NSNumber.fetchOne(db, sql: &#34;SELECT 10&#34;)            // NSNumber&#xA;let number = try NSDecimalNumber.fetchOne(db, sql: &#34;SELECT 1.23&#34;)   // NSDecimalNumber&#xA;let number = try Decimal.fetchOne(db, sql: &#34;SELECT -100&#34;)           // Decimal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All three types decode database strings as decimal numbers:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let number = try NSNumber.fetchOne(db, sql: &#34;SELECT &#39;10&#39;&#34;)          // NSDecimalNumber (sic)&#xA;let number = try NSDecimalNumber.fetchOne(db, sql: &#34;SELECT &#39;1.23&#39;&#34;) // NSDecimalNumber&#xA;let number = try Decimal.fetchOne(db, sql: &#34;SELECT &#39;-100&#39;&#34;)         // Decimal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NSNumber&lt;/code&gt; and &lt;code&gt;NSDecimalNumber&lt;/code&gt; send 64-bit signed integers and doubles in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT INTO transfer VALUES (10)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSNumber(value: 10)])&#xA;&#xA;// INSERT INTO transfer VALUES (10.0)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSNumber(value: 10.0)])&#xA;&#xA;// INSERT INTO transfer VALUES (10)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSDecimalNumber(string: &#34;10.0&#34;)])&#xA;&#xA;// INSERT INTO transfer VALUES (10.5)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSDecimalNumber(string: &#34;10.5&#34;)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: since SQLite does not support decimal numbers, sending a non-integer &lt;code&gt;NSDecimalNumber&lt;/code&gt; can result in a loss of precision during the conversion to double.&lt;/p&gt; &#xA;   &lt;p&gt;Instead of sending non-integer &lt;code&gt;NSDecimalNumber&lt;/code&gt; to the database, you may prefer:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Send &lt;code&gt;Decimal&lt;/code&gt; instead (those store decimal strings in the database).&lt;/li&gt; &#xA;    &lt;li&gt;Send integers instead (for example, store amounts of cents instead of amounts of Euros).&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Decimal&lt;/code&gt; sends decimal strings in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT INTO transfer VALUES (&#39;10&#39;)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [Decimal(10)])&#xA;&#xA;// INSERT INTO transfer VALUES (&#39;10.5&#39;)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [Decimal(string: &#34;10.5&#34;)!])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UUID&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;UUID&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GRDB stores uuids as 16-bytes data blobs, and decodes them from both 16-bytes data blobs and strings such as &#34;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Enums&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift enums&lt;/strong&gt; and generally all types that adopt the &lt;a href=&#34;https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_RawRepresentable_Protocol/index.html&#34;&gt;RawRepresentable&lt;/a&gt; protocol can be stored and fetched from the database just like their raw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Color : Int {&#xA;    case red, white, rose&#xA;}&#xA;&#xA;enum Grape : String {&#xA;    case chardonnay, merlot, riesling&#xA;}&#xA;&#xA;// Declare empty DatabaseValueConvertible adoption&#xA;extension Color : DatabaseValueConvertible { }&#xA;extension Grape : DatabaseValueConvertible { }&#xA;&#xA;// Store&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO wine (grape, color) VALUES (?, ?)&#34;,&#xA;    arguments: [Grape.merlot, Color.red])&#xA;&#xA;// Read&#xA;let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM wine&#34;)&#xA;while let row = try rows.next() {&#xA;    let grape: Grape = row[&#34;grape&#34;]&#xA;    let color: Color = row[&#34;color&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When a database value does not match any enum case&lt;/strong&gt;, you get a fatal error. This fatal error can be avoided with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;syrah&#39;&#34;)!&#xA;&#xA;row[0] as String  // &#34;syrah&#34;&#xA;row[0] as Grape?  // fatal error: could not convert &#34;syrah&#34; to Grape.&#xA;row[0] as Grape   // fatal error: could not convert &#34;syrah&#34; to Grape.&#xA;&#xA;let dbValue: DatabaseValue = row[0]&#xA;if dbValue.isNull {&#xA;    // Handle NULL&#xA;} else if let grape = Grape.fromDatabaseValue(dbValue) {&#xA;    // Handle valid grape&#xA;} else {&#xA;    // Handle unknown grape&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Value Types&lt;/h3&gt; &#xA;&lt;p&gt;Conversion to and from the database is based on the &lt;code&gt;DatabaseValueConvertible&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DatabaseValueConvertible {&#xA;    /// Returns a value that can be stored in the database.&#xA;    var databaseValue: DatabaseValue { get }&#xA;    &#xA;    /// Returns a value initialized from dbValue, if possible.&#xA;    static func fromDatabaseValue(_ dbValue: DatabaseValue) -&amp;gt; Self?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All types that adopt this protocol can be used like all other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;databaseValue&lt;/code&gt; property returns &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;, a type that wraps the five values supported by SQLite: NULL, Int64, Double, String and Data. Since DatabaseValue has no public initializer, use &lt;code&gt;DatabaseValue.null&lt;/code&gt;, or another type that already adopts the protocol: &lt;code&gt;1.databaseValue&lt;/code&gt;, &lt;code&gt;&#34;foo&#34;.databaseValue&lt;/code&gt;, etc. Conversion to DatabaseValue &lt;em&gt;must not&lt;/em&gt; fail.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;fromDatabaseValue()&lt;/code&gt; factory method returns an instance of your custom type if the database value contains a suitable value. If the database value does not contain a suitable value, such as &#34;foo&#34; for Date, &lt;code&gt;fromDatabaseValue&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; return nil (GRDB will interpret this nil result as a conversion error, and react accordingly).&lt;/p&gt; &#xA;&lt;p&gt;Value types that adopt both &lt;code&gt;DatabaseValueConvertible&lt;/code&gt; and an archival protocol (&lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&#34;&gt;Codable, Encodable or Decodable&lt;/a&gt;) are automatically coded and decoded from JSON arrays and objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Encoded as a JSON object in the database:&#xA;struct Color: Codable, DatabaseValueConvertible {&#xA;    var r: Double&#xA;    var g: Double&#xA;    var b: Double&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For such codable value types, GRDB uses the standard &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsondecoder&#34;&gt;JSONDecoder&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsonencoder&#34;&gt;JSONEncoder&lt;/a&gt; from Foundation. By default, Data values are handled with the &lt;code&gt;.base64&lt;/code&gt; strategy, Date with the &lt;code&gt;.millisecondsSince1970&lt;/code&gt; strategy, and non conforming floats with the &lt;code&gt;.throw&lt;/code&gt; strategy.&lt;/p&gt; &#xA;&lt;p&gt;In order to customize the JSON format, provide a custom implementation of the &lt;code&gt;DatabaseValueConvertible&lt;/code&gt; requirements.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: standard sequences such as &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, or &lt;code&gt;Dictionary&lt;/code&gt; do not conform to &lt;code&gt;DatabaseValueConvertible&lt;/code&gt;, even conditionally. You won&#39;t be able to directly fetch or store arrays, sets, or dictionaries as JSON database values. You can get free JSON support from these standard types when they are embedded as properties of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;, though.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Transactions and Savepoints&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-safety&#34;&gt;Transactions and Safety&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#explicit-transactions&#34;&gt;Explicit Transactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#savepoints&#34;&gt;Savepoints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transaction-kinds&#34;&gt;Transaction Kinds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Transactions and Safety&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A transaction&lt;/strong&gt; is a fundamental tool of SQLite that guarantees &lt;a href=&#34;https://www.sqlite.org/transactional.html&#34;&gt;data consistency&lt;/a&gt; as well as &lt;a href=&#34;https://sqlite.org/isolation.html&#34;&gt;proper isolation&lt;/a&gt; between application threads and database connections.&lt;/p&gt; &#xA;&lt;p&gt;GRDB generally opens transactions for you, as a way to enforce its &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#safe-and-unsafe-database-accesses&#34;&gt;concurrency guarantees&lt;/a&gt;, and provide maximal security for both your application data and application logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// BEGIN TRANSACTION&#xA;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;// COMMIT&#xA;try dbQueue.write { db in&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;}&#xA;&#xA;// BEGIN TRANSACTION&#xA;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;// COMMIT&#xA;try dbPool.write { db in&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet you may need to exactly control when transactions take place:&lt;/p&gt; &#xA;&lt;h3&gt;Explicit Transactions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DatabaseQueue.inDatabase()&lt;/code&gt; and &lt;code&gt;DatabasePool.writeWithoutTransaction()&lt;/code&gt; execute your database statements outside of any transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;try dbQueue.inDatabase { db in&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;}&#xA;&#xA;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;try dbPool.writeWithoutTransaction { db in&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Writing outside of any transaction is dangerous,&lt;/strong&gt; for two reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In our credit/debit example, you may successfully insert a credit, but fail inserting the debit, and end up with unbalanced accounts (oops).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UNSAFE DATABASE INTEGRITY&#xA;try dbQueue.inDatabase { db in // or dbPool.writeWithoutTransaction&#xA;    try Credit(destinationAccount, amount).insert(db) // may succeed&#xA;    try Debit(sourceAccount, amount).insert(db)      // may fail&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Transactions avoid this kind of bug.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;Database pool&lt;/a&gt; concurrent reads can see an inconsistent state of the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UNSAFE CONCURRENCY&#xA;try dbPool.writeWithoutTransaction { db in&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    // &amp;lt;- Concurrent dbPool.read sees a partial db update here&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Transactions avoid this kind of bug, too.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To open explicit transactions, use one of the &lt;code&gt;Database.inTransaction&lt;/code&gt;, &lt;code&gt;DatabaseQueue.inTransaction&lt;/code&gt;, or &lt;code&gt;DatabasePool.writeInTransaction&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// BEGIN TRANSACTION&#xA;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;// COMMIT&#xA;try dbQueue.inDatabase { db in  // or dbPool.writeWithoutTransaction&#xA;    try db.inTransaction {&#xA;        try Credit(destinationAccount, amount).insert(db)&#xA;        try Debit(sourceAccount, amount).insert(db)&#xA;        return .commit&#xA;    }&#xA;}&#xA;&#xA;// BEGIN TRANSACTION&#xA;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;// COMMIT&#xA;try dbQueue.inTransaction { db in  // or dbPool.writeInTransaction&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;    return .commit&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an error is thrown from the transaction block, the transaction is rollbacked and the error is rethrown by the &lt;code&gt;inTransaction&lt;/code&gt; method. If you return &lt;code&gt;.rollback&lt;/code&gt; instead of &lt;code&gt;.commit&lt;/code&gt;, the transaction is also rollbacked, but no error is thrown.&lt;/p&gt; &#xA;&lt;p&gt;You can also perform manual transaction management:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.inDatabase { db in  // or dbPool.writeWithoutTransaction&#xA;    try db.beginTransaction()&#xA;    ...&#xA;    try db.commit()&#xA;    &#xA;    try db.execute(sql: &#34;BEGIN TRANSACTION&#34;)&#xA;    ...&#xA;    try db.execute(sql: &#34;ROLLBACK&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Transactions can&#39;t be left opened unless you set the &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/Configuration.html&#34;&gt;allowsUnsafeTransactions&lt;/a&gt; configuration flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: A transaction has been left opened at the end of a database access&#xA;try dbQueue.inDatabase { db in&#xA;    try db.execute(sql: &#34;BEGIN TRANSACTION&#34;)&#xA;    // &amp;lt;- no commit or rollback&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can ask if a transaction is currently opened:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func myCriticalMethod(_ db: Database) throws {&#xA;    precondition(db.isInsideTransaction, &#34;This method requires a transaction&#34;)&#xA;    try ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet, you have a better option than checking for transactions: critical database sections should use savepoints, described below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func myCriticalMethod(_ db: Database) throws {&#xA;    try db.inSavepoint {&#xA;        // Here the database is guaranteed to be inside a transaction.&#xA;        try ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Savepoints&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Statements grouped in a savepoint can be rollbacked without invalidating a whole transaction:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    // Makes sure both inserts succeed, or none:&#xA;    try db.inSavepoint {&#xA;        try Credit(destinationAccount, amount).insert(db)&#xA;        try Debit(sourceAccount, amount).insert(db)&#xA;        return .commit&#xA;    }&#xA;    &#xA;    // Other savepoints, etc...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an error is thrown from the savepoint block, the savepoint is rollbacked and the error is rethrown by the &lt;code&gt;inSavepoint&lt;/code&gt; method. If you return &lt;code&gt;.rollback&lt;/code&gt; instead of &lt;code&gt;.commit&lt;/code&gt;, the savepoint is also rollbacked, but no error is thrown.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unlike transactions, savepoints can be nested.&lt;/strong&gt; They implicitly open a transaction if no one was opened when the savepoint begins. As such, they behave just like nested transactions. Yet the database changes are only written to disk when the outermost transaction is committed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.inDatabase { db in&#xA;    try db.inSavepoint {&#xA;        ...&#xA;        try db.inSavepoint {&#xA;            ...&#xA;            return .commit&#xA;        }&#xA;        ...&#xA;        return .commit  // writes changes to disk&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite savepoints are more than nested transactions, though. For advanced uses, use &lt;a href=&#34;https://www.sqlite.org/lang_savepoint.html&#34;&gt;SQLite savepoint documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Transaction Kinds&lt;/h3&gt; &#xA;&lt;p&gt;SQLite supports &lt;a href=&#34;https://www.sqlite.org/lang_transaction.html&#34;&gt;three kinds of transactions&lt;/a&gt;: deferred (the default), immediate, and exclusive.&lt;/p&gt; &#xA;&lt;p&gt;The transaction kind can be changed in the database configuration, or for each transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// 1) Default configuration:&#xA;let dbQueue = try DatabaseQueue(path: &#34;...&#34;)&#xA;&#xA;// BEGIN DEFERRED TRANSACTION ...&#xA;dbQueue.write { db in ... }&#xA;&#xA;// BEGIN EXCLUSIVE TRANSACTION ...&#xA;dbQueue.inTransaction(.exclusive) { db in ... }&#xA;&#xA;// 2) Customized default transaction kind:&#xA;var config = Configuration()&#xA;config.defaultTransactionKind = .immediate&#xA;let dbQueue = try DatabaseQueue(path: &#34;...&#34;, configuration: config)&#xA;&#xA;// BEGIN IMMEDIATE TRANSACTION ...&#xA;dbQueue.write { db in ... }&#xA;&#xA;// BEGIN EXCLUSIVE TRANSACTION ...&#xA;dbQueue.inTransaction(.exclusive) { db in ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prepared Statements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prepared Statements&lt;/strong&gt; let you prepare an SQL query and execute it later, several times if you need, with different arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    let insertSQL = &#34;INSERT INTO player (name, score) VALUES (:name, :score)&#34;&#xA;    let insertStatement = try db.makeStatement(sql: insertSQL)&#xA;    &#xA;    let selectSQL = &#34;SELECT * FROM player WHERE name = ?&#34;&#xA;    let selectStatement = try db.makeStatement(sql: selectSQL)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:name&lt;/code&gt; in the SQL query are the statement arguments. You set them with arrays or dictionaries (arguments are actually of type &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;StatementArguments&lt;/a&gt;, which happens to adopt the ExpressibleByArrayLiteral and ExpressibleByDictionaryLiteral protocols).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;insertStatement.arguments = [&#34;name&#34;: &#34;Arthur&#34;, &#34;score&#34;: 1000]&#xA;selectStatement.arguments = [&#34;Arthur&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can create a prepared statement with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let insertStatement = try db.makeStatement(literal: &#34;INSERT ...&#34;)&#xA;let selectStatement = try db.makeStatement(literal: &#34;SELECT ...&#34;)&#xA;//                                         ~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Statements can be executed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try insertStatement.execute()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Statements can be used wherever a raw SQL query string would fit (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;fetch queries&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(selectStatement)    // A Cursor of Row&#xA;let players = try Player.fetchAll(selectStatement) // [Player]&#xA;let players = try Player.fetchSet(selectStatement) // Set&amp;lt;Player&amp;gt;&#xA;let player = try Player.fetchOne(selectStatement)  // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the arguments at the moment of the statement execution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try insertStatement.execute(arguments: [&#34;name&#34;: &#34;Arthur&#34;, &#34;score&#34;: 1000])&#xA;let player = try Player.fetchOne(selectStatement, arguments: [&#34;Arthur&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you want to build multiple statements joined with a semicolon&lt;/strong&gt;, use the &lt;code&gt;allStatements&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statements = try db.allStatements(sql: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    &#34;&#34;&#34;, arguments: [&#34;Arthur&#34;, 100, &#34;O&#39;Brien&#34;, 1000])&#xA;while let statement = try statements.next() {&#xA;    try statement.execute()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;allStatements&lt;/code&gt; also supports &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statements = try db.allStatements(literal: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;Arthur&#34;), \(100));&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;O&#39;Brien&#34;), \(1000));&#xA;    &#34;&#34;&#34;)&#xA;while let statement = try statements.next() {&#xA;    try statement.execute()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can turn the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;cursor&lt;/a&gt; returned from &lt;code&gt;allStatements&lt;/code&gt; into a regular Swift array, but in this case make sure all individual statements can compile even if the previous ones were not run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// OK: Array of statements&#xA;let statements = try Array(db.allStatements(sql: &#34;&#34;&#34;&#xA;    INSERT ...; &#xA;    UPDATE ...; &#xA;    SELECT ...;&#xA;    &#34;&#34;&#34;))&#xA;&#xA;// FAILURE: Can&#39;t build an array of statements since &#xA;// the INSERT won&#39;t compile until CREATE TABLE is run.&#xA;let statements = try Array(db.allStatements(sql: &#34;&#34;&#34;&#xA;    CREATE TABLE player ...; &#xA;    INSERT INTO player ...;&#xA;    &#34;&#34;&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;code&gt;Database.execute(sql:)&lt;/code&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;Executing Updates&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: it is a programmer error to reuse a prepared statement that has failed: GRDB may crash if you do so.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For more information about prepared statements, see the &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Classes/Statement.html&#34;&gt;Statement reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prepared Statements Cache&lt;/h3&gt; &#xA;&lt;p&gt;When the same query will be used several times in the lifetime of your application, you may feel a natural desire to cache prepared statements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t cache statements yourself.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: This is because you don&#39;t have the necessary tools. Statements are tied to specific SQLite connections and dispatch queues which you don&#39;t manage yourself, especially when you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pools&lt;/a&gt;. A change in the database schema &lt;a href=&#34;https://www.sqlite.org/compile.html#max_schema_retry&#34;&gt;may, or may not&lt;/a&gt; invalidate a statement.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Instead, use the &lt;code&gt;cachedStatement&lt;/code&gt; method. GRDB does all the hard caching and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#memory-management&#34;&gt;memory management&lt;/a&gt; stuff for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statement = try db.cachedStatement(sql: sql)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cached statements also support &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statement = try db.cachedStatement(literal: &#34;INSERT ...&#34;)&#xA;//                                     ~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: Should a cached prepared statement throw an error, don&#39;t reuse it (it is a programmer error). Instead, reload one from the cache.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Custom SQL Functions and Aggregates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite lets you define SQL functions and aggregates.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A custom SQL function or aggregate extends SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT reverse(name) FROM player;   -- custom function&#xA;SELECT maxLength(name) FROM player; -- custom aggregate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions&#34;&gt;Custom SQL Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-aggregates&#34;&gt;Custom Aggregates&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom SQL Functions&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;em&gt;function&lt;/em&gt; argument takes an array of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;, and returns any valid &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) The number of database values is guaranteed to be &lt;em&gt;argumentCount&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SQLite has the opportunity to perform additional optimizations when functions are &#34;pure&#34;, which means that their result only depends on their arguments. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let reverse = DatabaseFunction(&#34;reverse&#34;, argumentCount: 1, pure: true) { (values: [DatabaseValue]) in&#xA;    // Extract string value, if any...&#xA;    guard let string = String.fromDatabaseValue(values[0]) else {&#xA;        return nil&#xA;    }&#xA;    // ... and return reversed string:&#xA;    return String(string.reversed())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You make a function available to a database connection through its configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.add(function: reverse)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    // &#34;oof&#34;&#xA;    try String.fetchOne(db, sql: &#34;SELECT reverse(&#39;foo&#39;)&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Functions can take a variable number of arguments:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you don&#39;t provide any explicit &lt;em&gt;argumentCount&lt;/em&gt;, the function can take any number of arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let averageOf = DatabaseFunction(&#34;averageOf&#34;, pure: true) { (values: [DatabaseValue]) in&#xA;    let doubles = values.compactMap { Double.fromDatabaseValue($0) }&#xA;    return doubles.reduce(0, +) / Double(doubles.count)&#xA;}&#xA;db.add(function: averageOf)&#xA;&#xA;// 2.0&#xA;try Double.fetchOne(db, sql: &#34;SELECT averageOf(1, 2, 3)&#34;)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Functions can throw:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sqrt = DatabaseFunction(&#34;sqrt&#34;, argumentCount: 1, pure: true) { (values: [DatabaseValue]) in&#xA;    guard let double = Double.fromDatabaseValue(values[0]) else {&#xA;        return nil&#xA;    }&#xA;    guard double &amp;gt;= 0 else {&#xA;        throw DatabaseError(message: &#34;invalid negative number&#34;)&#xA;    }&#xA;    return sqrt(double)&#xA;}&#xA;db.add(function: sqrt)&#xA;&#xA;// SQLite error 1 with statement `SELECT sqrt(-1)`: invalid negative number&#xA;try Double.fetchOne(db, sql: &#34;SELECT sqrt(-1)&#34;)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use custom functions in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT reverseString(&#34;name&#34;) FROM player&#xA;Player.select(reverseString(nameColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB ships with built-in SQL functions that perform unicode-aware string transformations.&lt;/strong&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#unicode&#34;&gt;Unicode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Aggregates&lt;/h3&gt; &#xA;&lt;p&gt;Before registering a custom aggregate, you need to define a type that adopts the &lt;code&gt;DatabaseAggregate&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DatabaseAggregate {&#xA;    // Initializes an aggregate&#xA;    init()&#xA;    &#xA;    // Called at each step of the aggregation&#xA;    mutating func step(_ dbValues: [DatabaseValue]) throws&#xA;    &#xA;    // Returns the final result&#xA;    func finalize() throws -&amp;gt; DatabaseValueConvertible?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MaxLength : DatabaseAggregate {&#xA;    var maxLength: Int = 0&#xA;    &#xA;    mutating func step(_ dbValues: [DatabaseValue]) {&#xA;        // At each step, extract string value, if any...&#xA;        guard let string = String.fromDatabaseValue(dbValues[0]) else {&#xA;            return&#xA;        }&#xA;        // ... and update the result&#xA;        let length = string.count&#xA;        if length &amp;gt; maxLength {&#xA;            maxLength = length&#xA;        }&#xA;    }&#xA;    &#xA;    func finalize() -&amp;gt; DatabaseValueConvertible? {&#xA;        maxLength&#xA;    }&#xA;}&#xA;&#xA;let maxLength = DatabaseFunction(&#xA;    &#34;maxLength&#34;,&#xA;    argumentCount: 1,&#xA;    pure: true,&#xA;    aggregate: MaxLength.self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions&#34;&gt;custom SQL Functions&lt;/a&gt;, you make an aggregate function available to a database connection through its configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.add(function: maxLength)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    // Some Int&#xA;    try Int.fetchOne(db, sql: &#34;SELECT maxLength(name) FROM player&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;step&lt;/code&gt; method of the aggregate takes an array of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;. This array contains as many values as the &lt;em&gt;argumentCount&lt;/em&gt; parameter (or any number of values, when &lt;em&gt;argumentCount&lt;/em&gt; is omitted).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;finalize&lt;/code&gt; method of the aggregate returns the final aggregated &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.).&lt;/p&gt; &#xA;&lt;p&gt;SQLite has the opportunity to perform additional optimizations when aggregates are &#34;pure&#34;, which means that their result only depends on their inputs. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use custom aggregates in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT maxLength(&#34;name&#34;) FROM player&#xA;let request = Player.select(maxLength.apply(nameColumn))&#xA;try Int.fetchOne(db, request) // Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Database Schema Introspection&lt;/h2&gt; &#xA;&lt;p&gt;GRDB comes with a set of schema introspection methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Bool, true if the table exists&#xA;    try db.tableExists(&#34;player&#34;)&#xA;    &#xA;    // [ColumnInfo], the columns in the table&#xA;    try db.columns(in: &#34;player&#34;)&#xA;    &#xA;    // PrimaryKeyInfo&#xA;    try db.primaryKey(&#34;player&#34;)&#xA;    &#xA;    // [ForeignKeyInfo], the foreign keys defined on the table&#xA;    try db.foreignKeys(on: &#34;player&#34;)&#xA;    &#xA;    // [IndexInfo], the indexes defined on the table&#xA;    try db.indexes(on: &#34;player&#34;)&#xA;    &#xA;    // Bool, true if column(s) is a unique key (primary key or unique index)&#xA;    try db.table(&#34;player&#34;, hasUniqueKey: [&#34;email&#34;])&#xA;}&#xA;&#xA;// Bool, true if argument is the name of an internal SQLite table&#xA;Database.isSQLiteInternalTable(...)&#xA;&#xA;// Bool, true if argument is the name of an internal GRDB table&#xA;Database.isGRDBInternalTable(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Row Adapters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Row adapters let you present database rows in the way expected by the row consumers.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;They basically help two incompatible row interfaces to work together. For example, a row consumer expects a column named &#34;consumed&#34;, but the produced row has a column named &#34;produced&#34;.&lt;/p&gt; &#xA;&lt;p&gt;In this case, the &lt;code&gt;ColumnMapping&lt;/code&gt; row adapter comes in handy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Turn the &#39;produced&#39; column into &#39;consumed&#39;:&#xA;let adapter = ColumnMapping([&#34;consumed&#34;: &#34;produced&#34;])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Hello&#39; AS produced&#34;, adapter: adapter)!&#xA;&#xA;// [consumed:&#34;Hello&#34;]&#xA;print(row)&#xA;&#xA;// &#34;Hello&#34;&#xA;print(row[&#34;consumed&#34;])&#xA;&#xA;// ‚ñø [consumed:&#34;Hello&#34;]&#xA;//   unadapted: [produced:&#34;Hello&#34;]&#xA;print(row.debugDescription)&#xA;&#xA;// [produced:&#34;Hello&#34;]&#xA;print(row.unadapted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Record types&lt;/a&gt; are typical row consumers that expect database rows to have a specific layout so that they can decode them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MyRecord: Decodable, FetchableRecord {&#xA;    var consumed: String&#xA;}&#xA;let record = try MyRecord.fetchOne(db, sql: &#34;SELECT &#39;Hello&#39; AS produced&#34;, adapter: adapter)!&#xA;print(record.consumed) // &#34;Hello&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are several situations where row adapters are useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;They help disambiguate columns with identical names, which may happen when you select columns from several tables. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt; for an example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;They help when SQLite outputs unexpected column names, which may happen with some subqueries. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#renamecolumnadapter&#34;&gt;RenameColumnAdapter&lt;/a&gt; for an example.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available row adapters are described below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columnmapping&#34;&gt;ColumnMapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#emptyrowadapter&#34;&gt;EmptyRowAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rangerowadapter&#34;&gt;RangeRowAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#renamecolumnadapter&#34;&gt;RenameColumnAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#scopeadapter&#34;&gt;ScopeAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#suffixrowadapter&#34;&gt;SuffixRowAdapter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ColumnMapping&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ColumnMapping&lt;/code&gt; renames columns. Build one with a dictionary whose keys are adapted column names, and values the column names in the raw row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [newA:0, newB:1]&#xA;let adapter = ColumnMapping([&#34;newA&#34;: &#34;a&#34;, &#34;newB&#34;: &#34;b&#34;])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that columns that are not present in the dictionary are not present in the resulting adapted row.&lt;/p&gt; &#xA;&lt;h3&gt;EmptyRowAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;EmptyRowAdapter&lt;/code&gt; hides all columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let adapter = EmptyRowAdapter()&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;row.isEmpty // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This limit adapter may turn out useful in some narrow use cases. You&#39;ll be happy to find it when you need it.&lt;/p&gt; &#xA;&lt;h3&gt;RangeRowAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;RangeRowAdapter&lt;/code&gt; only exposes a range of columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [b:1]&#xA;let adapter = RangeRowAdapter(1..&amp;lt;2)&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RenameColumnAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;RenameColumnAdapter&lt;/code&gt; lets you transform column names with a function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [arrr:0, brrr:1, crrr:2]&#xA;let adapter = RenameColumnAdapter { column in column + &#34;rrr&#34; }&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adapter may turn out useful, for example, when subqueries contain duplicated column names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sql = &#34;SELECT * FROM (SELECT 1 AS id, 2 AS id)&#34;&#xA;&#xA;// Prints [&#34;id&#34;, &#34;id:1&#34;]&#xA;// Note the &#34;id:1&#34; column, generated by SQLite.&#xA;let row = try Row.fetchOne(db, sql: sql)!&#xA;print(Array(row.columnNames))&#xA;&#xA;// Drop the `:...` suffix, and prints [&#34;id&#34;, &#34;id&#34;]&#xA;let adapter = RenameColumnAdapter { String($0.prefix(while: { $0 != &#34;:&#34; })) }&#xA;let adaptedRow = try Row.fetchOne(db, sql: sql, adapter: adapter)!&#xA;print(Array(adaptedRow.columnNames))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ScopeAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ScopeAdapter&lt;/code&gt; defines &lt;em&gt;row scopes&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let adapter = ScopeAdapter([&#xA;    &#34;left&#34;: RangeRowAdapter(0..&amp;lt;2),&#xA;    &#34;right&#34;: RangeRowAdapter(2..&amp;lt;4)])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ScopeAdapter does not change the columns and values of the fetched row. Instead, it defines &lt;em&gt;scopes&lt;/em&gt;, which you access through the &lt;code&gt;Row.scopes&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;row                   // [a:0 b:1 c:2 d:3]&#xA;row.scopes[&#34;left&#34;]    // [a:0 b:1]&#xA;row.scopes[&#34;right&#34;]   // [c:2 d:3]&#xA;row.scopes[&#34;missing&#34;] // nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scopes can be nested:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let adapter = ScopeAdapter([&#xA;    &#34;left&#34;: ScopeAdapter([&#xA;        &#34;left&#34;: RangeRowAdapter(0..&amp;lt;1),&#xA;        &#34;right&#34;: RangeRowAdapter(1..&amp;lt;2)]),&#xA;    &#34;right&#34;: ScopeAdapter([&#xA;        &#34;left&#34;: RangeRowAdapter(2..&amp;lt;3),&#xA;        &#34;right&#34;: RangeRowAdapter(3..&amp;lt;4)])&#xA;    ])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&#34;, adapter: adapter)!&#xA;&#xA;let leftRow = row.scopes[&#34;left&#34;]!&#xA;leftRow.scopes[&#34;left&#34;]  // [a:0]&#xA;leftRow.scopes[&#34;right&#34;] // [b:1]&#xA;&#xA;let rightRow = row.scopes[&#34;right&#34;]!&#xA;rightRow.scopes[&#34;left&#34;]  // [c:2]&#xA;rightRow.scopes[&#34;right&#34;] // [d:3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any adapter can be extended with scopes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let baseAdapter = RangeRowAdapter(0..&amp;lt;2)&#xA;let adapter = ScopeAdapter(base: baseAdapter, scopes: [&#xA;    &#34;remainder&#34;: SuffixRowAdapter(fromIndex: 2)])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&#34;, adapter: adapter)!&#xA;&#xA;row // [a:0 b:1]&#xA;row.scopes[&#34;remainder&#34;] // [c:2 d:3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see how &lt;code&gt;ScopeAdapter&lt;/code&gt; can be used, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SuffixRowAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SuffixRowAdapter&lt;/code&gt; hides the first columns in a row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [b:1 c:2]&#xA;let adapter = SuffixRowAdapter(fromIndex: 1)&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Raw SQLite Pointers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;If not all SQLite APIs are exposed in GRDB, you can still use the &lt;a href=&#34;https://www.sqlite.org/c3ref/intro.html&#34;&gt;SQLite C Interface&lt;/a&gt; and call &lt;a href=&#34;https://www.sqlite.org/c3ref/funclist.html&#34;&gt;SQLite C functions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Those functions are embedded right into the GRDB module, regardless of the underlying SQLite implementation (system SQLite, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;SQLCipher&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;let sqliteVersion = String(cString: sqlite3_libversion())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Raw pointers to database connections and statements are available through the &lt;code&gt;Database.sqliteConnection&lt;/code&gt; and &lt;code&gt;Statement.sqliteStatement&lt;/code&gt; properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // The raw pointer to a database connection:&#xA;    let sqliteConnection = db.sqliteConnection&#xA;&#xA;    // The raw pointer to a statement:&#xA;    let statement = try db.makeStatement(sql: &#34;SELECT ...&#34;)&#xA;    let sqliteStatement = statement.sqliteStatement&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Those pointers are owned by GRDB: don&#39;t close connections or finalize statements created by GRDB.&lt;/li&gt; &#xA;  &lt;li&gt;GRDB opens SQLite connections in the &#34;&lt;a href=&#34;https://www.sqlite.org/threadsafe.html&#34;&gt;multi-thread mode&lt;/a&gt;&#34;, which (oddly) means that &lt;strong&gt;they are not thread-safe&lt;/strong&gt;. Make sure you touch raw databases and statements inside their dedicated dispatch queues.&lt;/li&gt; &#xA;  &lt;li&gt;Use the raw SQLite C Interface at your own risk. GRDB won&#39;t prevent you from shooting yourself in the foot.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Records&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;On top of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;SQLite API&lt;/a&gt;, GRDB provides protocols and a class&lt;/strong&gt; that help manipulating database rows as regular objects named &#34;records&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    if var place = try Place.fetchOne(db, id: 1) {&#xA;        place.isFavorite = true&#xA;        try place.update(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you need to open a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-schema&#34;&gt;create database tables&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;To define your custom records, you subclass the ready-made &lt;code&gt;Record&lt;/code&gt; class, or you extend your structs and classes with protocols that come with focused sets of features: fetching methods, persistence methods, record comparison...&lt;/p&gt; &#xA;&lt;p&gt;Extending structs with record protocols is more &#34;swifty&#34;. Subclassing the Record class is more &#34;classic&#34;. You can choose either way. See some &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&#34;&gt;examples of record definitions&lt;/a&gt;, and the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods&#34;&gt;list of record methods&lt;/a&gt; for an overview.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: if you are familiar with Core Data&#39;s NSManagedObject or Realm&#39;s Object, you may experience a cultural shock: GRDB records are not uniqued, do not auto-update, and do not lazy-load. This is both a purpose, and a consequence of protocol-oriented programming. You should read &lt;a href=&#34;https://medium.com/@gwendal.roue/how-to-build-an-ios-application-with-sqlite-and-grdb-swift-d023a06c29b3&#34;&gt;How to build an iOS application with SQLite and GRDB.swift&lt;/a&gt; for a general introduction.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: after you have read this chapter, check the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GoodPracticesForDesigningRecordTypes.md&#34;&gt;Good Practices for Designing Record Types&lt;/a&gt; Guide.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample apps that uses records.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#inserting-records&#34;&gt;Inserting Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-records&#34;&gt;Fetching Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#updating-records&#34;&gt;Updating Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#deleting-records&#34;&gt;Deleting Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#counting-records&#34;&gt;Counting Records&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Protocols and the Record Class&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord Protocol&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&#34;&gt;Persistence Methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#customizing-the-persistence-methods&#34;&gt;Customizing the Persistence Methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-customization-options&#34;&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Records in a Glance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&#34;&gt;Examples of Record Definitions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods&#34;&gt;List of Record Methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inserting Records&lt;/h3&gt; &#xA;&lt;p&gt;To insert a record in the database, call the &lt;code&gt;insert&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = Player(name: &#34;Arthur&#34;, email: &#34;arthur@example.com&#34;)&#xA;try player.insert(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; &lt;code&gt;insert&lt;/code&gt; is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Fetching Records&lt;/h3&gt; &#xA;&lt;p&gt;To fetch records from the database, call a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching method&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let arthur = try Player.fetchOne(db,            // Player?&#xA;    sql: &#34;SELECT * FROM players WHERE name = ?&#34;,&#xA;    arguments: [&#34;Arthur&#34;])&#xA;&#xA;let bestPlayers = try Player                    // [Player]&#xA;    .order(Column(&#34;score&#34;).desc)&#xA;    .limit(10)&#xA;    .fetchAll(db)&#xA;    &#xA;let spain = try Country.fetchOne(db, id: &#34;ES&#34;)  // Country?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; Fetching from raw SQL is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; Fetching without SQL, using the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;, is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt both &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Updating Records&lt;/h3&gt; &#xA;&lt;p&gt;To update a record in the database, call the &lt;code&gt;update&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var player: Player = ...&#xA;player.score = 1000&#xA;try player.update(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;avoid useless updates&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// does not hit the database if score has not changed&#xA;try player.updateChanges(db) {&#xA;    $0.score = 1000&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt; for batch updates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player&#xA;    .filter(Column(&#34;team&#34;) == &#34;red&#34;)&#xA;    .updateAll(db, Column(&#34;score&#34;) += 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; update methods are available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol. Batch updates are available on the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Deleting Records&lt;/h3&gt; &#xA;&lt;p&gt;To delete a record in the database, call the &lt;code&gt;delete&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player: Player = ...&#xA;try player.delete(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also delete by primary key, unique key, or perform batch deletes (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#delete-requests&#34;&gt;Delete Requests&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.deleteOne(db, id: 1)&#xA;try Player.deleteOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Country.deleteAll(db, ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;try Player&#xA;    .filter(Column(&#34;email&#34;) == nil)&#xA;    .deleteAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; delete methods are available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol. Batch deletes are available on the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Counting Records&lt;/h3&gt; &#xA;&lt;p&gt;To count records, call the &lt;code&gt;fetchCount&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let playerCount: Int = try Player.fetchCount(db)&#xA;&#xA;let playerWithEmailCount: Int = try Player&#xA;    .filter(Column(&#34;email&#34;) == nil)&#xA;    .fetchCount(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; &lt;code&gt;fetchCount&lt;/code&gt; is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;p&gt;Details follow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-customization-options&#34;&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&#34;&gt;Examples of Record Definitions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods&#34;&gt;List of Record Methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Record Protocols Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB ships with three record protocols&lt;/strong&gt;. Your own types will adopt one or several of them, according to the abilities you want to extend your types with.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; is able to &lt;strong&gt;decode database rows&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: FetchableRecord { ... }&#xA;let places = try dbQueue.read { db in&#xA;    try Place.fetchAll(db, sql: &#34;SELECT * FROM place&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;FetchableRecord&lt;/code&gt; can derive its implementation from the standard &lt;code&gt;Decodable&lt;/code&gt; protocol. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;code&gt;FetchableRecord&lt;/code&gt; can decode database rows, but it is not able to build SQL requests for you. For that, you also need &lt;code&gt;TableRecord&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; is able to &lt;strong&gt;generate SQL queries&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord { ... }&#xA;let placeCount = try dbQueue.read { db in&#xA;    // Generates and runs `SELECT COUNT(*) FROM place`&#xA;    try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When a type adopts both &lt;code&gt;TableRecord&lt;/code&gt; and &lt;code&gt;FetchableRecord&lt;/code&gt;, it can load from those requests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord, FetchableRecord { ... }&#xA;try dbQueue.read { db in&#xA;    let places = try Place.order(Column(&#34;title&#34;)).fetchAll(db)&#xA;    let paris = try Place.fetchOne(id: 1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; is able to &lt;strong&gt;write&lt;/strong&gt;: it can create, update, and delete rows in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place : PersistableRecord { ... }&#xA;try dbQueue.write { db in&#xA;    try Place.delete(db, id: 1)&#xA;    try Place(...).insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A persistable record can also &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;compare&lt;/a&gt; itself against other records, and avoid useless database updates.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;PersistableRecord&lt;/code&gt; can derive its implementation from the standard &lt;code&gt;Encodable&lt;/code&gt; protocol. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FetchableRecord Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The FetchableRecord protocol grants fetching methods to any type&lt;/strong&gt; that can be built from a database row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    /// Row initializer&#xA;    init(row: Row)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To use FetchableRecord&lt;/strong&gt;, subclass the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, or adopt it explicitly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var coordinate: CLLocationCoordinate2D&#xA;}&#xA;&#xA;extension Place : FetchableRecord {&#xA;    init(row: Row) {&#xA;        id = row[&#34;id&#34;]&#xA;        title = row[&#34;title&#34;]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[&#34;latitude&#34;],&#xA;            longitude: row[&#34;longitude&#34;])&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rows also accept column enums:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Place : FetchableRecord {&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, latitude, longitude&#xA;    }&#xA;    &#xA;    init(row: Row) {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&#34;&gt;column values&lt;/a&gt; for more information about the &lt;code&gt;row[]&lt;/code&gt; subscript.&lt;/p&gt; &#xA;&lt;p&gt;When your record type adopts the standard Decodable protocol, you don&#39;t have to provide the implementation for &lt;code&gt;init(row:)&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// That&#39;s all&#xA;struct Player: Decodable, FetchableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FetchableRecord allows adopting types to be fetched from SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Place.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments:...) // A Cursor of Place&#xA;try Place.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments:...)    // [Place]&#xA;try Place.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments:...)    // Set&amp;lt;Place&amp;gt;&#xA;try Place.fetchOne(db, sql: &#34;SELECT ...&#34;, arguments:...)    // Place?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt;, &lt;code&gt;fetchSet&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods. See &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;StatementArguments&lt;/a&gt; for more information about the query arguments.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: for performance reasons, the same row argument to &lt;code&gt;init(row:)&lt;/code&gt; is reused during the iteration of a fetch query. If you want to keep the row for later use, make sure to store a copy: &lt;code&gt;self.row = row.copy()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;FetchableRecord.init(row:)&lt;/code&gt; initializer fits the needs of most applications. But some application are more demanding than others. When FetchableRecord does not exactly provide the support you need, have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&#34;&gt;Beyond FetchableRecord&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;TableRecord Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The TableRecord protocol&lt;/strong&gt; generates SQL for you. To use TableRecord, subclass the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, or adopt it explicitly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol TableRecord {&#xA;    static var databaseTableName: String { get }&#xA;    static var databaseSelection: [SQLSelectable] { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;databaseSelection&lt;/code&gt; type property is optional, and documented in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;databaseTableName&lt;/code&gt; type property is the name of a database table. By default, it is derived from the type name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord { }&#xA;print(Place.databaseTableName) // prints &#34;place&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Place: &lt;code&gt;place&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Country: &lt;code&gt;country&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;PostalAddress: &lt;code&gt;postalAddress&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTPRequest: &lt;code&gt;httpRequest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;TOEFL: &lt;code&gt;toefl&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can still provide a custom table name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord {&#xA;    static let databaseTableName = &#34;location&#34;&#xA;}&#xA;print(Place.databaseTableName) // prints &#34;location&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class must always override their superclass&#39;s &lt;code&gt;databaseTableName&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Place: Record {&#xA;    override class var databaseTableName: String { &#34;place&#34; }&#xA;}&#xA;print(Place.databaseTableName) // prints &#34;place&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a type adopts both TableRecord and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;, it can be fetched using the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM place WHERE name = &#39;Paris&#39;&#xA;let paris = try Place.filter(nameColumn == &#34;Paris&#34;).fetchOne(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TableRecord can also fetch deal with primary and unique keys: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-by-key&#34;&gt;Fetching by Key&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#testing-for-record-existence&#34;&gt;Testing for Record Existence&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;PersistableRecord Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB record types can create, update, and delete rows in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Those abilities are granted by three protocols:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Defines how a record encodes itself into the database&#xA;protocol EncodableRecord {&#xA;    /// Defines the values persisted in the database&#xA;    func encode(to container: inout PersistenceContainer)&#xA;}&#xA;&#xA;// Adds persistence methods&#xA;protocol MutablePersistableRecord: TableRecord, EncodableRecord {&#xA;    /// Optional method that lets your adopting type store its rowID upon&#xA;    /// successful insertion. Don&#39;t call it directly: it is called for you.&#xA;    mutating func didInsert(with rowID: Int64, for column: String?)&#xA;}&#xA;&#xA;// Adds immutability&#xA;protocol PersistableRecord: MutablePersistableRecord {&#xA;    /// Non-mutating version of the optional didInsert(with:for:)&#xA;    func didInsert(with rowID: Int64, for column: String?)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yes, three protocols instead of one. Here is how you pick one or the other:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your type is a class&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;. On top of that, implement &lt;code&gt;didInsert(with:for:)&lt;/code&gt; if the database table has an auto-incremented primary key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your type is a struct, and the database table has an auto-incremented primary key&lt;/strong&gt;, choose &lt;code&gt;MutablePersistableRecord&lt;/code&gt;, and implement &lt;code&gt;didInsert(with:for:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Otherwise&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;, and ignore &lt;code&gt;didInsert(with:for:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;encode(to:)&lt;/code&gt; method defines which &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) are assigned to database columns.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;didInsert&lt;/code&gt; method lets the adopting type store its rowID after successful insertion, and is only useful for tables that have an auto-incremented primary key. It is called from a protected dispatch queue, and serialized with all database updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To use the persistable protocols&lt;/strong&gt;, subclass the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, or adopt one of them explicitly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Place : MutablePersistableRecord {&#xA;    /// The values persisted in the database&#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[&#34;id&#34;] = id&#xA;        container[&#34;title&#34;] = title&#xA;        container[&#34;latitude&#34;] = coordinate.latitude&#xA;        container[&#34;longitude&#34;] = coordinate.longitude&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&#xA;var paris = Place(&#xA;    id: nil,&#xA;    title: &#34;Paris&#34;,&#xA;    coordinate: CLLocationCoordinate2D(latitude: 48.8534100, longitude: 2.3488000))&#xA;&#xA;try paris.insert(db)&#xA;paris.id   // some value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Persistence containers also accept column enums:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Place : MutablePersistableRecord {&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, latitude, longitude&#xA;    }&#xA;    &#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When your record type adopts the standard Encodable protocol, you don&#39;t have to provide the implementation for &lt;code&gt;encode(to:)&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// That&#39;s all&#xA;struct Player: Encodable, MutablePersistableRecord {&#xA;    var id: Int64?&#xA;    var name: String&#xA;    var score: Int&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Persistence Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; subclasses and types that adopt &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; are given default implementations for methods that insert, update, and delete:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT&#xA;try place.insert(db)&#xA;let insertedPlace = try place.inserted(db) // non-mutating&#xA;&#xA;// UPDATE&#xA;try place.update(db)&#xA;try place.update(db, columns: [&#34;title&#34;])&#xA;&#xA;// Maybe UPDATE&#xA;try place.updateChanges(db, from: otherPlace)&#xA;try place.updateChanges(db) { $0.isFavorite = true }&#xA;try place.updateChanges(db) // Record class only&#xA;&#xA;// INSERT or UPDATE&#xA;try place.save(db)&#xA;let savedPlace = place.saved(db) // non-mutating&#xA;&#xA;// DELETE&#xA;try place.delete(db)&#xA;&#xA;// EXISTENCE CHECK&#xA;let exists = try place.exists(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol comes with batch operations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE&#xA;try Place.updateAll(db, ...)&#xA;&#xA;// DELETE&#xA;try Place.deleteAll(db)&#xA;try Place.deleteAll(db, ids:...)&#xA;try Place.deleteAll(db, keys:...)&#xA;try Place.deleteOne(db, id:...)&#xA;try Place.deleteOne(db, key:...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All those methods can throw a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&#34;&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;update&lt;/code&gt; and &lt;code&gt;updateChanges&lt;/code&gt; throw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistenceerror&#34;&gt;PersistenceError&lt;/a&gt; if the database does not contain any row for the primary key of the record.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;save&lt;/code&gt; makes sure your values are stored in the database. It performs an UPDATE if the record has a non-null primary key, and then, if no row was modified, an INSERT. It directly performs an INSERT if the record has no primary key, or a null primary key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;deleteOne&lt;/code&gt; returns whether a database row was deleted or not. &lt;code&gt;deleteAll&lt;/code&gt; returns the number of deleted rows. &lt;code&gt;updateAll&lt;/code&gt; returns the number of updated rows. &lt;code&gt;updateChanges&lt;/code&gt; returns whether a database row was updated or not.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;All primary keys are supported&lt;/strong&gt;, including composite primary keys that span several columns, and the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-implicit-rowid-primary-key&#34;&gt;implicit rowid primary key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing the Persistence Methods&lt;/h3&gt; &#xA;&lt;p&gt;Your custom type may want to perform extra work when the persistence methods are invoked.&lt;/p&gt; &#xA;&lt;p&gt;For example, it may want to have its UUID automatically set before inserting. Or it may want to validate its values before saving.&lt;/p&gt; &#xA;&lt;p&gt;When you subclass &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;, you simply have to override the customized method, and call &lt;code&gt;super&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Player : Record {&#xA;    var uuid: UUID?&#xA;    &#xA;    override func insert(_ db: Database) throws {&#xA;        if uuid == nil {&#xA;            uuid = UUID()&#xA;        }&#xA;        try super.insert(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the raw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol, use one of the &lt;em&gt;special methods&lt;/em&gt; &lt;code&gt;performInsert&lt;/code&gt;, &lt;code&gt;performUpdate&lt;/code&gt;, &lt;code&gt;performSave&lt;/code&gt;, &lt;code&gt;performDelete&lt;/code&gt;, or &lt;code&gt;performExists&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Link : PersistableRecord {&#xA;    var url: URL&#xA;    &#xA;    func insert(_ db: Database) throws {&#xA;        try validate()&#xA;        try performInsert(db)&#xA;    }&#xA;    &#xA;    func update(_ db: Database, columns: Set&amp;lt;String&amp;gt;) throws {&#xA;        try validate()&#xA;        try performUpdate(db, columns: columns)&#xA;    }&#xA;    &#xA;    func validate() throws {&#xA;        if url.host == nil {&#xA;            throw ValidationError(&#34;url must be absolute.&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the special methods &lt;code&gt;performInsert&lt;/code&gt;, &lt;code&gt;performUpdate&lt;/code&gt;, etc. are reserved for your custom implementations. Do not use them elsewhere. Do not provide another implementation for those methods.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: it is recommended that you do not implement your own version of the &lt;code&gt;save&lt;/code&gt; method. Its default implementation forwards the job to &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;insert&lt;/code&gt;: these are the methods that may need customization, not &lt;code&gt;save&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Identifiable Records&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;When a record type maps a table with a single-column primary key, it is recommended to have it adopt the standard &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt; protocol.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Identifiable, FetchableRecord, PersistableRecord {&#xA;    var id: Int64 // fulfills the Identifiable requirement&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;id&lt;/code&gt; has a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;database-compatible type&lt;/a&gt; (Int64, Int, String, UUID, ...), the &lt;code&gt;Identifiable&lt;/code&gt; conformance unlocks type-safe record and request methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = try Player.fetchOne(db, id: 1)&#xA;let players = try Player.fetchAll(db, ids: [1, 2, 3])&#xA;let players = try Player.fetchSet(db, ids: [1, 2, 3])&#xA;&#xA;let request = Player.filter(id: 1)&#xA;let request = Player.filter(ids: [1, 2, 3])&#xA;&#xA;let ids = try Player.selectID().fetchAll(db)&#xA;let ids = try Player.filter(...).selectID().fetchSet(db)&#xA;&#xA;try Player.deleteOne(db, id: 1)&#xA;try Player.deleteAll(db, ids: [1, 2, 3])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;Identifiable&lt;/code&gt; is not available on all application targets, and not all tables have a single-column primary key. GRDB provides other methods that deal with primary and unique keys, but they won&#39;t check the type of their arguments:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Those methods are not type-checked&#xA;try Player.fetchOne(db, key: 1)&#xA;try Player.fetchOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Country.fetchAll(db, keys: [&#34;FR&#34;, &#34;US&#34;])&#xA;try Citizenship.fetchOne(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&#xA;let request = Player.filter(key: 1)&#xA;let request = Player.filter(keys: [1, 2, 3])&#xA;&#xA;try Player.deleteOne(db, key: 1)&#xA;try Player.deleteAll(db, keys: [1, 2, 3])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some database tables have a single-column primary key which is not called &#34;id&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.create(table: &#34;country&#34;) { t in&#xA;    t.column(&#34;isoCode&#34;, .text).notNull().primaryKey()&#xA;    t.column(&#34;name&#34;, .text).notNull()&#xA;    t.column(&#34;population&#34;, .integer).notNull()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, &lt;code&gt;Identifiable&lt;/code&gt; conformance can be achieved, for example, by returning the primary key column from the &lt;code&gt;id&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Country: Identifiable, FetchableRecord, PersistableRecord {&#xA;    var isoCode: String&#xA;    var name: String&#xA;    var population: Int&#xA;    &#xA;    // Fulfill the Identifiable requirement&#xA;    var id: String { isoCode }&#xA;}&#xA;&#xA;let france = try dbQueue.read { db in&#xA;    try Country.fetchOne(db, id: &#34;FR&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Codable Records&lt;/h2&gt; &#xA;&lt;p&gt;Record types that adopt an archival protocol (&lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&#34;&gt;Codable, Encodable or Decodable&lt;/a&gt;) get free database support just by declaring conformance to the desired &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;record protocols&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Declare a record...&#xA;struct Player: Codable, FetchableRecord, PersistableRecord {&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;// ...and there you go:&#xA;try dbQueue.write { db in&#xA;    try Player(name: &#34;Arthur&#34;, score: 100).insert(db)&#xA;    let players = try Player.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Codable records encode and decode their properties according to their own implementation of the Encodable and Decodable protocols. Yet databases have specific requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Properties are always coded according to their preferred database representation, when they have one (all &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible&lt;/a&gt; protocol).&lt;/li&gt; &#xA; &lt;li&gt;You can customize the encoding and decoding of dates and uuids.&lt;/li&gt; &#xA; &lt;li&gt;Complex properties (arrays, dictionaries, nested structs, etc.) are stored as JSON.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information about Codable records, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;JSON Columns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-names-coding-strategies&#34;&gt;Column Names Coding Strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;Date and UUID Coding Strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;The userInfo Dictionary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tip-derive-columns-from-coding-keys&#34;&gt;Tip: Derive Columns from Coding Keys&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample code that uses Codable records.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;JSON Columns&lt;/h3&gt; &#xA;&lt;p&gt;When a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable record&lt;/a&gt; contains a property that is not a simple &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.), that value is encoded and decoded as a &lt;strong&gt;JSON string&lt;/strong&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum AchievementColor: String, Codable {&#xA;    case bronze, silver, gold&#xA;}&#xA;&#xA;struct Achievement: Codable {&#xA;    var name: String&#xA;    var color: AchievementColor&#xA;}&#xA;&#xA;struct Player: Codable, FetchableRecord, PersistableRecord {&#xA;    var name: String&#xA;    var score: Int&#xA;    var achievements: [Achievement] // stored in a JSON column&#xA;}&#xA;&#xA;try! dbQueue.write { db in&#xA;    // INSERT INTO player (name, score, achievements)&#xA;    // VALUES (&#xA;    //   &#39;Arthur&#39;,&#xA;    //   100,&#xA;    //   &#39;[{&#34;color&#34;:&#34;gold&#34;,&#34;name&#34;:&#34;Use Codable Records&#34;}]&#39;)&#xA;    let achievement = Achievement(name: &#34;Use Codable Records&#34;, color: .gold)&#xA;    let player = Player(name: &#34;Arthur&#34;, score: 100, achievements: [achievement])&#xA;    try player.insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GRDB uses the standard &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsondecoder&#34;&gt;JSONDecoder&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsonencoder&#34;&gt;JSONEncoder&lt;/a&gt; from Foundation. By default, Data values are handled with the &lt;code&gt;.base64&lt;/code&gt; strategy, Date with the &lt;code&gt;.millisecondsSince1970&lt;/code&gt; strategy, and non conforming floats with the &lt;code&gt;.throw&lt;/code&gt; strategy.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the JSON format by implementing those methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static func databaseJSONDecoder(for column: String) -&amp;gt; JSONDecoder&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static func databaseJSONEncoder(for column: String) -&amp;gt; JSONEncoder&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Make sure you set the JSONEncoder &lt;code&gt;sortedKeys&lt;/code&gt; option, available from iOS 11.0+, macOS 10.13+, tvOS 9.0+ and watchOS 4.0+. This option makes sure that the JSON output is stable. This stability is required for &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt; to work as expected, and database observation tools such as &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; to accurately recognize changed records.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Column Names Coding Strategies&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; store their values into database columns that match their coding keys: the &lt;code&gt;teamID&lt;/code&gt; property is stored into the &lt;code&gt;teamID&lt;/code&gt; column.&lt;/p&gt; &#xA;&lt;p&gt;This behavior can be overridden, so that you can, for example, store the &lt;code&gt;teamID&lt;/code&gt; property into the &lt;code&gt;team_id&lt;/code&gt; column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy { get }&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static var databaseColumnEncodingStrategy: DatabaseColumnEncodingStrategy { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Enums/DatabaseColumnDecodingStrategy.html&#34;&gt;DatabaseColumnDecodingStrategy&lt;/a&gt; and &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Enums/DatabaseColumnEncodingStrategy.html&#34;&gt;DatabaseColumnEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt; &#xA;&lt;h3&gt;Date and UUID Coding Strategies&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; encode and decode their Date and UUID properties as described in the general &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;Date and DateComponents&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#uuid&#34;&gt;UUID&lt;/a&gt; chapters.&lt;/p&gt; &#xA;&lt;p&gt;To sum up: dates encode themselves in the &#34;YYYY-MM-DD HH:MM:SS.SSS&#34; format, in the UTC time zone, and decode a variety of date formats and timestamps. UUIDs encode themselves as 16-bytes data blobs, and decode both 16-bytes data blobs and strings such as &#34;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Those behaviors can be overridden:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy { get }&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static var databaseDateEncodingStrategy: DatabaseDateEncodingStrategy { get }&#xA;    static var databaseUUIDEncodingStrategy: DatabaseUUIDEncodingStrategy { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Enums/DatabaseDateDecodingStrategy.html&#34;&gt;DatabaseDateDecodingStrategy&lt;/a&gt;, &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Enums/DatabaseDateEncodingStrategy.html&#34;&gt;DatabaseDateEncodingStrategy&lt;/a&gt;, and &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Enums/DatabaseUUIDEncodingStrategy.html&#34;&gt;DatabaseUUIDEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt; &#xA;&lt;p&gt;There is no customization of uuid decoding, because UUID can already decode all its encoded variants (16-bytes blobs and uuid strings, both uppercase and lowercase).&lt;/p&gt; &#xA;&lt;p&gt;Customized date and uuid handling apply:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When encoding and decoding database rows to and from records (fetching and persistence methods).&lt;/li&gt; &#xA; &lt;li&gt;In requests by single-column primary key: &lt;code&gt;fetchOne(_&lt;span&gt;üÜî&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;filter(id:)&lt;/code&gt;, &lt;code&gt;deleteAll(_:keys:)&lt;/code&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;They do not apply&lt;/em&gt; in other requests based on date or uuid values.&lt;/p&gt; &#xA;&lt;p&gt;So make sure that dates and uuids are properly encoded in your requests. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Codable, FetchableRecord, PersistableRecord, Identifiable {&#xA;    // UUIDs are stored as strings&#xA;    static let databaseUUIDEncodingStrategy = DatabaseUUIDEncodingStrategy.uppercaseString&#xA;    var id: UUID&#xA;    ...&#xA;}&#xA;&#xA;try dbQueue.write { db in&#xA;    let uuid = UUID()&#xA;    let player = Player(id: uuid, ...)&#xA;    &#xA;    // OK: inserts a player in the database, with a string uuid&#xA;    try player.insert(db)&#xA;    &#xA;    // OK: performs a string-based query, finds the inserted player&#xA;    _ = try Player.filter(id: uuid).fetchOne(db)&#xA;&#xA;    // NOT OK: performs a blob-based query, fails to find the inserted player&#xA;    _ = try Player.filter(Column(&#34;id&#34;) == uuid).fetchOne(db)&#xA;    &#xA;    // OK: performs a string-based query, finds the inserted player&#xA;    _ = try Player.filter(Column(&#34;id&#34;) == uuid.uuidString).fetchOne(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The userInfo Dictionary&lt;/h3&gt; &#xA;&lt;p&gt;Your &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; can be stored in the database, but they may also have other purposes. In this case, you may need to customize their implementations of &lt;code&gt;Decodable.init(from:)&lt;/code&gt; and &lt;code&gt;Encodable.encode(to:)&lt;/code&gt;, depending on the context.&lt;/p&gt; &#xA;&lt;p&gt;The standard way to provide such context is the &lt;code&gt;userInfo&lt;/code&gt; dictionary. Implement those properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static var databaseDecodingUserInfo: [CodingUserInfoKey: Any] { get }&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static var databaseEncodingUserInfo: [CodingUserInfoKey: Any] { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, here is a Player type that customizes its decoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A key that holds a decoder&#39;s name&#xA;let decoderName = CodingUserInfoKey(rawValue: &#34;decoderName&#34;)!&#xA;&#xA;struct Player: FetchableRecord, Decodable {&#xA;    init(from decoder: Decoder) throws {&#xA;        // Print the decoder name&#xA;        let decoderName = decoder.userInfo[decoderName] as? String&#xA;        print(&#34;Decoded from \(decoderName ?? &#34;unknown decoder&#34;)&#34;)&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can have a specific decoding from JSON...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// prints &#34;Decoded from JSON&#34;&#xA;let decoder = JSONDecoder()&#xA;decoder.userInfo = [decoderName: &#34;JSON&#34;]&#xA;let player = try decoder.decode(Player.self, from: jsonData)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... and another one from database rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Player: FetchableRecord {&#xA;    static let databaseDecodingUserInfo: [CodingUserInfoKey: Any] = [decoderName: &#34;database row&#34;]&#xA;}&#xA;&#xA;// prints &#34;Decoded from database row&#34;&#xA;let player = try Player.fetchOne(db, ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseDecodingUserInfo&lt;/code&gt; and &lt;code&gt;databaseEncodingUserInfo&lt;/code&gt; properties are explicitly declared as &lt;code&gt;[CodingUserInfoKey: Any]&lt;/code&gt;. If they are not, the Swift compiler may silently miss the protocol requirement, resulting in sticky empty userInfo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Tip: Derive Columns from Coding Keys&lt;/h3&gt; &#xA;&lt;p&gt;Codable types are granted with a &lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&#34;&gt;CodingKeys&lt;/a&gt; enum. You can use them to safely define database columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Codable {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;extension Player: FetchableRecord, PersistableRecord {&#xA;    enum Columns {&#xA;        static let id = Column(CodingKeys.id)&#xA;        static let name = Column(CodingKeys.name)&#xA;        static let score = Column(CodingKeys.score)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GoodPracticesForDesigningRecordTypes.md&#34;&gt;Good Practices for Designing Record Types&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h2&gt;Record Class&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Record&lt;/strong&gt; is a class that is designed to be subclassed. It inherits its features from the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;FetchableRecord, TableRecord, and PersistableRecord&lt;/a&gt; protocols. On top of that, Record instances can compare against previous versions of themselves in order to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;avoid useless updates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Record subclasses define their custom database relationship by overriding database methods. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Place: Record {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;    &#xA;    init(id: Int64?, title: String, isFavorite: Bool, coordinate: CLLocationCoordinate2D) {&#xA;        self.id = id&#xA;        self.title = title&#xA;        self.isFavorite = isFavorite&#xA;        self.coordinate = coordinate&#xA;        super.init()&#xA;    }&#xA;    &#xA;    /// The table name&#xA;    override class var databaseTableName: String { &#34;place&#34; }&#xA;    &#xA;    /// The table columns&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, favorite, latitude, longitude&#xA;    }&#xA;    &#xA;    /// Creates a record from a database row&#xA;    required init(row: Row) {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        isFavorite = row[Columns.favorite]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;        super.init(row: row)&#xA;    }&#xA;    &#xA;    /// The values persisted in the database&#xA;    override func encode(to container: inout PersistenceContainer) {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.favorite] = isFavorite&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;    &#xA;    /// Update record ID after a successful insertion&#xA;    override func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Record Comparison&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Records that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt; protocol can compare against other records, or against previous versions of themselves.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This helps avoiding costly UPDATE statements when a record has not been edited.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-updatechanges-methods&#34;&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databaseequals-method&#34;&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databasechanges-and-hasdatabasechanges-methods&#34;&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;updateChanges&lt;/code&gt; methods perform a database update of the changed columns only (and does nothing if record has no change).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:from:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This method lets you compare two records:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let oldPlayer = try Player.fetchOne(db, id: 42) {&#xA;    var newPlayer = oldPlayer&#xA;    newPlayer.score = 100&#xA;    if try newPlayer.updateChanges(db, from: oldPlayer) {&#xA;        print(&#34;player was modified, and updated in the database&#34;)&#xA;    } else {&#xA;        print(&#34;player was not modified, and database was not hit&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:with:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This method lets you update a record in place:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if var player = try Player.fetchOne(db, id: 42) {&#xA;    let modified = try player.updateChanges(db) {&#xA;        $0.score = 100&#xA;    }&#xA;    if modified {&#xA;        print(&#34;player was modified, and updated in the database&#34;)&#xA;    } else {&#xA;        print(&#34;player was not modified, and database was not hit&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:)&lt;/code&gt; (Record class only)&lt;/p&gt; &lt;p&gt;Instances of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class are able to compare against themselves, and know if they have changes that have not been saved since the last fetch or saving:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Record class only&#xA;if let player = try Player.fetchOne(db, id: 42) {&#xA;    player.score = 100&#xA;    if try player.updateChanges(db) {&#xA;        print(&#34;player was modified, and updated in the database&#34;)&#xA;    } else {&#xA;        print(&#34;player was not modified, and database was not hit&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/h3&gt; &#xA;&lt;p&gt;This method returns whether two records have the same database representation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let oldPlayer: Player = ...&#xA;var newPlayer: Player = ...&#xA;if newPlayer.databaseEquals(oldPlayer) == false {&#xA;    try newPlayer.save(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: The comparison is performed on the database representation of records. As long as your record type adopts the EncodableRecord protocol, you don&#39;t need to care about Equatable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;databaseChanges(from:)&lt;/code&gt; returns a dictionary of differences between two records:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let oldPlayer = Player(id: 1, name: &#34;Arthur&#34;, score: 100)&#xA;let newPlayer = Player(id: 1, name: &#34;Arthur&#34;, score: 1000)&#xA;for (column, oldValue) in newPlayer.databaseChanges(from: oldPlayer) {&#xA;    print(&#34;\(column) was \(oldValue)&#34;)&#xA;}&#xA;// prints &#34;score was 100&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class is able to compare against itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Record class only&#xA;let player = Player(id: 1, name: &#34;Arthur&#34;, score: 100)&#xA;try player.insert(db)&#xA;player.score = 1000&#xA;for (column, oldValue) in player.databaseChanges {&#xA;    print(&#34;\(column) was \(oldValue)&#34;)&#xA;}&#xA;// prints &#34;score was 100&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; instances also have a &lt;code&gt;hasDatabaseChanges&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Record class only&#xA;player.score = 1000&#xA;if player.hasDatabaseChanges {&#xA;    try player.save(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Record.hasDatabaseChanges&lt;/code&gt; is false after a Record instance has been fetched or saved into the database. Subsequent modifications may set it, or not: &lt;code&gt;hasDatabaseChanges&lt;/code&gt; is based on value comparison. &lt;strong&gt;Setting a property to the same value does not set the changed flag&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = Player(name: &#34;Barbara&#34;, score: 750)&#xA;player.hasDatabaseChanges // true&#xA;&#xA;try player.insert(db)&#xA;player.hasDatabaseChanges // false&#xA;&#xA;player.name = &#34;Barbara&#34;&#xA;player.hasDatabaseChanges // false&#xA;&#xA;player.score = 1000&#xA;player.hasDatabaseChanges // true&#xA;player.databaseChanges    // [&#34;score&#34;: 750]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an efficient algorithm which synchronizes the content of a database table with a JSON payload, check &lt;a href=&#34;https://github.com/groue/SortedDifference&#34;&gt;groue/SortedDifference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Record Customization Options&lt;/h2&gt; &#xA;&lt;p&gt;GRDB records come with many default behaviors, that are designed to fit most situations. Many of those defaults can be customized for your specific needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#customizing-the-persistence-methods&#34;&gt;Customizing the Persistence Methods&lt;/a&gt;: define what happens when you call a persistence method such as &lt;code&gt;player.insert(db)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&#34;&gt;Conflict Resolution&lt;/a&gt;: Run &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; queries, and generally define what happens when a persistence method violates a unique index.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-implicit-rowid-primary-key&#34;&gt;The Implicit RowID Primary Key&lt;/a&gt;: all about the special &lt;code&gt;rowid&lt;/code&gt; column.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;: define which columns are selected by requests such as &lt;code&gt;Player.fetchAll(db)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&#34;&gt;Beyond FetchableRecord&lt;/a&gt;: the FetchableRecord protocol is not the end of the story.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; have a few extra options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;JSON Columns&lt;/a&gt;: control the format of JSON columns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-names-coding-strategies&#34;&gt;Column Names Coding Strategies&lt;/a&gt;: control how coding keys are turned into column names&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;Date and UUID Coding Strategies&lt;/a&gt;: control the format of Date and UUID properties in your Codable records.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;The userInfo Dictionary&lt;/a&gt;: adapt your Codable implementation for the database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Conflict Resolution&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Insertions and updates can create conflicts&lt;/strong&gt;: for example, a query may attempt to insert a duplicate row that violates a unique index.&lt;/p&gt; &#xA;&lt;p&gt;Those conflicts normally end with an error. Yet SQLite let you alter the default behavior, and handle conflicts with specific policies. For example, the &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; statement handles conflicts with the &#34;replace&#34; policy which replaces the conflicting row instead of throwing an error.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.sqlite.org/lang_conflict.html&#34;&gt;five different policies&lt;/a&gt; are: abort (the default), replace, rollback, fail, and ignore.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite let you specify conflict policies at two different places:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In the definition of the database table:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE player (&#xA;//     id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;//     email TEXT UNIQUE ON CONFLICT REPLACE&#xA;// )&#xA;try db.create(table: &#34;player&#34;) { t in&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    t.column(&#34;email&#34;, .text).unique(onConflict: .replace) // &amp;lt;--&#xA;}&#xA;&#xA;// Despite the unique index on email, both inserts succeed.&#xA;// The second insert replaces the first row:&#xA;try db.execute(sql: &#34;INSERT INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;try db.execute(sql: &#34;INSERT INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In each modification query:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE player (&#xA;//     id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;//     email TEXT UNIQUE&#xA;// )&#xA;try db.create(table: &#34;player&#34;) { t in&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    t.column(&#34;email&#34;, .text).unique()&#xA;}&#xA;&#xA;// Again, despite the unique index on email, both inserts succeed.&#xA;try db.execute(sql: &#34;INSERT OR REPLACE INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;try db.execute(sql: &#34;INSERT OR REPLACE INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When you want to handle conflicts at the query level, specify a custom &lt;code&gt;persistenceConflictPolicy&lt;/code&gt; in your type that adopts the PersistableRecord protocol. It will alter the INSERT and UPDATE queries run by the &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&#34;&gt;persistence methods&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol MutablePersistableRecord {&#xA;    /// The policy that handles SQLite conflicts when records are&#xA;    /// inserted or updated.&#xA;    ///&#xA;    /// This property is optional: its default value uses the ABORT&#xA;    /// policy for both insertions and updates, so that GRDB generate&#xA;    /// regular INSERT and UPDATE queries.&#xA;    static var persistenceConflictPolicy: PersistenceConflictPolicy { get }&#xA;}&#xA;&#xA;struct Player : MutablePersistableRecord {&#xA;    static let persistenceConflictPolicy = PersistenceConflictPolicy(&#xA;        insert: .replace,&#xA;        update: .replace)&#xA;}&#xA;&#xA;// INSERT OR REPLACE INTO player (...) VALUES (...)&#xA;try player.insert(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;ignore&lt;/code&gt; policy does not play well at all with the &lt;code&gt;didInsert&lt;/code&gt; method which notifies the rowID of inserted records. Choose your poison:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;if you specify the &lt;code&gt;ignore&lt;/code&gt; policy in the database table definition, don&#39;t implement the &lt;code&gt;didInsert&lt;/code&gt; method: it will be called with some random id in case of failed insert.&lt;/li&gt; &#xA;  &lt;li&gt;if you specify the &lt;code&gt;ignore&lt;/code&gt; policy at the query level, the &lt;code&gt;didInsert&lt;/code&gt; method is never called.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;replace&lt;/code&gt; policy may have to delete rows so that inserts and updates can succeed. Those deletions are not reported to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactionobserver-protocol&#34;&gt;transaction observers&lt;/a&gt; (this might change in a future release of SQLite).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The Implicit RowID Primary Key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;All SQLite tables have a primary key.&lt;/strong&gt; Even when the primary key is not explicit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// No explicit primary key&#xA;try db.create(table: &#34;event&#34;) { t in&#xA;    t.column(&#34;message&#34;, .text)&#xA;    t.column(&#34;date&#34;, .datetime)&#xA;}&#xA;&#xA;// No way to define an explicit primary key&#xA;try db.create(virtualTable: &#34;book&#34;, using: FTS4()) { t in&#xA;    t.column(&#34;title&#34;)&#xA;    t.column(&#34;author&#34;)&#xA;    t.column(&#34;body&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The implicit primary key is stored in the hidden column &lt;code&gt;rowid&lt;/code&gt;. Hidden means that &lt;code&gt;SELECT *&lt;/code&gt; does not select it, and yet it can be selected and queried: &lt;code&gt;SELECT *, rowid ... WHERE rowid = 1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some GRDB methods will automatically use this hidden column when a table has no explicit primary key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM event WHERE rowid = 1&#xA;let event = try Event.fetchOne(db, id: 1)&#xA;&#xA;// DELETE FROM book WHERE rowid = 1&#xA;try Book.deleteOne(db, id: 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Exposing the RowID Column&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;By default, a record type that wraps a table without any explicit primary key doesn&#39;t know about the hidden rowid column.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Without primary key, records don&#39;t have any identity, and the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&#34;&gt;persistence method&lt;/a&gt; can behave in undesired fashion: &lt;code&gt;update()&lt;/code&gt; throws errors, &lt;code&gt;save()&lt;/code&gt; always performs insertions and may break constraints, &lt;code&gt;exists()&lt;/code&gt; is always false.&lt;/p&gt; &#xA;&lt;p&gt;When SQLite won&#39;t let you provide an explicit primary key (as in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;full-text&lt;/a&gt; tables, for example), you may want to make your record type fully aware of the hidden rowid column:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Have the &lt;code&gt;databaseSelection&lt;/code&gt; static property (from the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol) return the hidden rowid column:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Event : TableRecord {&#xA;    static let databaseSelection: [SQLSelectable] = [AllColumns(), Column.rowID]&#xA;}&#xA;&#xA;// When you subclass Record, you need an override:&#xA;class Book : Record {&#xA;    override class var databaseSelection: [SQLSelectable] {&#xA;        [AllColums(), Column.rowID]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;GRDB will then select the &lt;code&gt;rowid&lt;/code&gt; column by default:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT *, rowid FROM event&#xA;let events = try Event.fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Have &lt;code&gt;init(row:)&lt;/code&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol consume the &#34;rowid&#34; column:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Event : FetchableRecord {&#xA;    var id: Int64?&#xA;    &#xA;    init(row: Row) {&#xA;        id = row[Column.rowID] // or `row[.rowID]` with Swift 5.5+&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Your fetched records will then know their ids:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let event = try Event.fetchOne(db)!&#xA;event.id // some value&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Encode the rowid in &lt;code&gt;encode(to:)&lt;/code&gt;, and keep it in the &lt;code&gt;didInsert(with:for:)&lt;/code&gt; method (both from the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord and MutablePersistableRecord&lt;/a&gt; protocols):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Event : MutablePersistableRecord {&#xA;    var id: Int64?&#xA;    &#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[Column.rowID] = id // or `container[.rowID]` with Swift 5.5+&#xA;        container[&#34;message&#34;] = message&#xA;        container[&#34;date&#34;] = date&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will then be able to track your record ids, update them, or check for their existence:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let event = Event(message: &#34;foo&#34;, date: Date())&#xA;&#xA;// Insertion sets the record id:&#xA;try event.insert(db)&#xA;event.id // some value&#xA;&#xA;// Record can be updated:&#xA;event.message = &#34;bar&#34;&#xA;try event.update(db)&#xA;&#xA;// Record knows if it exists:&#xA;event.exists(db) // true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Beyond FetchableRecord&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Some GRDB users eventually discover that the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol does not fit all situations.&lt;/strong&gt; Use cases that are not well handled by FetchableRecord include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Your application needs polymorphic row decoding: it decodes some type or another, depending on the values contained in a database row.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your application needs to decode rows with a context: each decoded value should be initialized with some extra value that does not come from the database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your application needs a record type that supports untrusted databases, and may fail at decoding database rows (throw an error when a row contains invalid values).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since those use cases are not well handled by FetchableRecord, don&#39;t try to implement them on top of this protocol: you&#39;ll just fight the framework.&lt;/p&gt; &#xA;&lt;p&gt;Instead, please have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Playgrounds/CustomizedDecodingOfDatabaseRows.playground/Contents.swift&#34;&gt;CustomizedDecodingOfDatabaseRows&lt;/a&gt; playground. You&#39;ll run some sample code, and learn how to escape FetchableRecord when you need. And remember that leaving FetchableRecord will not deprive you of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;query interface requests&lt;/a&gt; and generally all SQL generation features of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Examples of Record Definitions&lt;/h2&gt; &#xA;&lt;p&gt;We will show below how to declare a record type for the following database table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.create(table: &#34;place&#34;) { t in&#xA;        t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;        t.column(&#34;title&#34;, .text).notNull()&#xA;        t.column(&#34;isFavorite&#34;, .boolean).notNull().defaults(to: false)&#xA;        t.column(&#34;longitude&#34;, .double).notNull()&#xA;        t.column(&#34;latitude&#34;, .double).notNull()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each one of the three examples below is correct. You will pick one or the other depending on your personal preferences and the requirements of your application:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Define a Codable struct, and adopt the record protocols you need&lt;/summary&gt; &#xA; &lt;p&gt;This is the shortest way to define a record type.&lt;/p&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: Codable {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    private var latitude: CLLocationDegrees&#xA;    private var longitude: CLLocationDegrees&#xA;    &#xA;    var coordinate: CLLocationCoordinate2D {&#xA;        get {&#xA;            CLLocationCoordinate2D(&#xA;                latitude: latitude,&#xA;                longitude: longitude)&#xA;        }&#xA;        set {&#xA;            latitude = newValue.latitude&#xA;            longitude = newValue.longitude&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// SQL generation&#xA;extension Place: TableRecord {&#xA;    /// The table columns&#xA;    enum Columns {&#xA;        static let id = Column(CodingKeys.id)&#xA;        static let title = Column(CodingKeys.title)&#xA;        static let isFavorite = Column(CodingKeys.isFavorite)&#xA;        static let latitude = Column(CodingKeys.latitude)&#xA;        static let longitude = Column(CodingKeys.longitude)&#xA;    }&#xA;}&#xA;&#xA;// Fetching methods&#xA;extension Place: FetchableRecord { }&#xA;&#xA;// Persistence methods&#xA;extension Place: MutablePersistableRecord {&#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Define a plain struct, and adopt the record protocols you need&lt;/summary&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;}&#xA;&#xA;// SQL generation&#xA;extension Place: TableRecord {&#xA;    /// The table columns&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, isFavorite, latitude, longitude&#xA;    }&#xA;}&#xA;&#xA;// Fetching methods&#xA;extension Place: FetchableRecord {&#xA;    /// Creates a record from a database row&#xA;    init(row: Row) {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        isFavorite = row[Columns.isFavorite]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;    }&#xA;}&#xA;&#xA;// Persistence methods&#xA;extension Place: MutablePersistableRecord {&#xA;    /// The values persisted in the database&#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.isFavorite] = isFavorite&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Define a plain struct optimized for fetching performance&lt;/summary&gt; &#xA; &lt;p&gt;This struct derives its persistence methods from the standard Encodable protocol (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;), but performs optimized row decoding by accessing database columns with numeric indexes.&lt;/p&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: Encodable {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    private var latitude: CLLocationDegrees&#xA;    private var longitude: CLLocationDegrees&#xA;    &#xA;    var coordinate: CLLocationCoordinate2D {&#xA;        get {&#xA;            CLLocationCoordinate2D(&#xA;                latitude: latitude,&#xA;                longitude: longitude)&#xA;        }&#xA;        set {&#xA;            latitude = newValue.latitude&#xA;            longitude = newValue.longitude&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// SQL generation&#xA;extension Place: TableRecord {&#xA;    /// The table columns&#xA;    enum Columns {&#xA;        static let id = Column(CodingKeys.id)&#xA;        static let title = Column(CodingKeys.title)&#xA;        static let isFavorite = Column(CodingKeys.isFavorite)&#xA;        static let latitude = Column(CodingKeys.latitude)&#xA;        static let longitude = Column(CodingKeys.longitude)&#xA;    }&#xA;    &#xA;    /// Arrange the selected columns and lock their order&#xA;    static let databaseSelection: [SQLSelectable] = [&#xA;        Columns.id,&#xA;        Columns.title,&#xA;        Columns.favorite,&#xA;        Columns.latitude,&#xA;        Columns.longitude]&#xA;}&#xA;&#xA;// Fetching methods&#xA;extension Place: FetchableRecord {&#xA;    /// Creates a record from a database row&#xA;    init(row: Row) {&#xA;        // For high performance, use numeric indexes that match the&#xA;        // order of Place.databaseSelection&#xA;        id = row[0]&#xA;        title = row[1]&#xA;        isFavorite = row[2]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[3],&#xA;            longitude: row[4])&#xA;    }&#xA;}&#xA;&#xA;// Persistence methods&#xA;extension Place: MutablePersistableRecord {&#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Subclass the &lt;code&gt;Record&lt;/code&gt; class&lt;/summary&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record class&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Place: Record {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;    &#xA;    init(id: Int64?, title: String, isFavorite: Bool, coordinate: CLLocationCoordinate2D) {&#xA;        self.id = id&#xA;        self.title = title&#xA;        self.isFavorite = isFavorite&#xA;        self.coordinate = coordinate&#xA;        super.init()&#xA;    }&#xA;    &#xA;    /// The table name&#xA;    override class var databaseTableName: String { &#34;place&#34; }&#xA;    &#xA;    /// The table columns&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, isFavorite, latitude, longitude&#xA;    }&#xA;    &#xA;    /// Creates a record from a database row&#xA;    required init(row: Row) {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        isFavorite = row[Columns.isFavorite]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;        super.init(row: row)&#xA;    }&#xA;    &#xA;    /// The values persisted in the database&#xA;    override func encode(to container: inout PersistenceContainer) {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.isFavorite] = isFavorite&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    override func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;List of Record Methods&lt;/h2&gt; &#xA;&lt;p&gt;This is the list of record methods, along with their required protocols. The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class adopts all these protocols, and adds a few extra methods.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Protocols&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Core Methods&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;init(row:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseTableName&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseSelection&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.persistenceConflictPolicy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.encode(to:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.didInsert(with:for:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Insert and Update Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.insert(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.inserted(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.save(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.saved(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.update(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.update(db, columns:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db, from:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db) { ... }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.updateAll(db, ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).updateAll(db, ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Delete Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.delete(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteOne(db, key:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteOne(db, id:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteAll(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteAll(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).deleteAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Check Record Existence&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.exists(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.exists(db, key: ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.exists(db, id: ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).isEmpty(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Convert Record to Dictionary&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseDictionary&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Count Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCount(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchCount(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Record &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;Cursors&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;¬≥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;‚Å¥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchCursor(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Record Arrays&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;¬≥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;‚Å¥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Record Sets&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;¬≥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;‚Å¥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchSet(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Individual Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db, key:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db, id:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;¬≥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;‚Å¥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchOne(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseDecodingUserInfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseJSONDecoder(for:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseDateDecodingStrategy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseEncodingUserInfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseJSONEncoder(for:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseDateEncodingStrategy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseUUIDEncodingStrategy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Define &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.belongsTo(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasMany(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasOne(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasManyThrough(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasOneThrough(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Building Query Interface &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;Requests&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.request(for:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.all()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.none()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.select(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.select(..., as:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.selectID()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; Identifiable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.annotated(with:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(id:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; Identifiable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(ids:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; Identifiable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.matching(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.including(all:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.including(optional:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.including(required:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.joining(optional:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.joining(required:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.group(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.groupByPrimaryKey()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.having(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.order(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.orderByPrimaryKey()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.limit(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.with(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseEquals(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseChanges(from:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db, from:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db) { ... }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.hasDatabaseChanges&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseChanges&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt; All unique keys are supported: primary keys (single-column, composite, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-implicit-rowid-primary-key&#34;&gt;implicit RowID&lt;/a&gt;) and unique indexes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.fetchOne(db, id: 1)                                // Player?&#xA;try Player.fetchOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;]) // Player?&#xA;try Country.fetchAll(db, keys: [&#34;FR&#34;, &#34;US&#34;])                  // [Country]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;Fetch Requests&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.filter(emailColumn != nil).order(nameColumn)&#xA;let players = try request.fetchAll(db)  // [Player]&#xA;let count = try request.fetchCount(db)  // Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-3&#34;&gt;¬≥&lt;/a&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;SQL queries&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = try Player.fetchOne(db, sql: &#34;SELECT * FROM player WHERE id = ?&#34;, arguments: [1]) // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-4&#34;&gt;‚Å¥&lt;/a&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;Prepared Statements&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statement = try db.makeStatement(sql: &#34;SELECT * FROM player WHERE id = ?&#34;)&#xA;let player = try Player.fetchOne(statement, arguments: [1])  // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;The Query Interface&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The query interface lets you write pure Swift instead of SQL:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    // Update database schema&#xA;    try db.create(table: &#34;wine&#34;) { t in ... }&#xA;    &#xA;    // Fetch records&#xA;    let wines = try Wine&#xA;        .filter(originColumn == &#34;Burgundy&#34;)&#xA;        .order(priceColumn)&#xA;        .fetchAll(db)&#xA;    &#xA;    // Count&#xA;    let count = try Wine&#xA;        .filter(colorColumn == Color.red)&#xA;        .fetchCount(db)&#xA;    &#xA;    // Update&#xA;    try Wine&#xA;        .filter(originColumn == &#34;Burgundy&#34;)&#xA;        .updateAll(db, priceColumn *= 0.75)&#xA;    &#xA;    // Delete&#xA;    try Wine&#xA;        .filter(corkedColumn == true)&#xA;        .deleteAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to open a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt; before you can query the database.&lt;/p&gt; &#xA;&lt;p&gt;Please bear in mind that the query interface can not generate all possible SQL queries. You may also &lt;em&gt;prefer&lt;/em&gt; writing SQL, and this is just OK. From little snippets to full queries, your SQL skills are welcome:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    // Update database schema (with SQL)&#xA;    try db.execute(sql: &#34;CREATE TABLE wine (...)&#34;)&#xA;    &#xA;    // Fetch records (with SQL)&#xA;    let wines = try Wine.fetchAll(db,&#xA;        sql: &#34;SELECT * FROM wine WHERE origin = ? ORDER BY price&#34;,&#xA;        arguments: [&#34;Burgundy&#34;])&#xA;    &#xA;    // Count (with an SQL snippet)&#xA;    let count = try Wine&#xA;        .filter(sql: &#34;color = ?&#34;, arguments: [Color.red])&#xA;        .fetchCount(db)&#xA;    &#xA;    // Update (with SQL)&#xA;    try db.execute(sql: &#34;UPDATE wine SET price = price * 0.75 WHERE origin = &#39;Burgundy&#39;&#34;)&#xA;    &#xA;    // Delete (with SQL)&#xA;    try db.execute(sql: &#34;DELETE FROM wine WHERE corked&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So don&#39;t miss the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;SQL API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don&#39;t have your application rely on any specific SQL output.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-schema&#34;&gt;Database Schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#expressions&#34;&gt;Expressions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-operators&#34;&gt;SQL Operators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&#34;&gt;SQL Functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-from-requests&#34;&gt;Fetching from Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-by-key&#34;&gt;Fetching by Key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#testing-for-record-existence&#34;&gt;Testing for Record Existence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-aggregated-values&#34;&gt;Fetching Aggregated Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#delete-requests&#34;&gt;Delete Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#update-requests&#34;&gt;Update Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-requests&#34;&gt;Custom Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations and Joins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;Common Table Expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/QueryInterfaceOrganization.md&#34;&gt;Query Interface Organization&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Database Schema&lt;/h2&gt; &#xA;&lt;p&gt;Once granted with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;, you can setup your database schema without writing SQL:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#create-tables&#34;&gt;Create Tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#modify-tables&#34;&gt;Modify Tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#drop-tables&#34;&gt;Drop Tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#create-indexes&#34;&gt;Create Indexes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Create Tables&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE place (&#xA;//   id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;//   title TEXT,&#xA;//   favorite BOOLEAN NOT NULL DEFAULT 0,&#xA;//   latitude DOUBLE NOT NULL,&#xA;//   longitude DOUBLE NOT NULL&#xA;// )&#xA;try db.create(table: &#34;place&#34;) { t in&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    t.column(&#34;title&#34;, .text)&#xA;    t.column(&#34;favorite&#34;, .boolean).notNull().defaults(to: false)&#xA;    t.column(&#34;longitude&#34;, .double).notNull()&#xA;    t.column(&#34;latitude&#34;, .double).notNull()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;create(table:)&lt;/code&gt; method covers nearly all SQLite table creation features. For virtual tables, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;Full-Text Search&lt;/a&gt;, or use raw SQL.&lt;/p&gt; &#xA;&lt;p&gt;SQLite itself has many reference documents about table creation: &lt;a href=&#34;https://www.sqlite.org/lang_createtable.html&#34;&gt;CREATE TABLE&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/datatype3.html&#34;&gt;Datatypes In SQLite Version 3&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/foreignkeys.html&#34;&gt;SQLite Foreign Key Support&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/lang_conflict.html&#34;&gt;ON CONFLICT&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/withoutrowid.html&#34;&gt;The WITHOUT ROWID Optimization&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configure table creation&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE example ( ... )&#xA;try db.create(table: &#34;example&#34;) { t in ... }&#xA;    &#xA;// CREATE TEMPORARY TABLE example IF NOT EXISTS (&#xA;try db.create(table: &#34;example&#34;, options: [.temporary, .ifNotExists]) { t in ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: database table names should be singular, and camelCased. Make them look like Swift identifiers: &lt;code&gt;place&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt;, &lt;code&gt;postalAddress&lt;/code&gt;, &lt;code&gt;httpRequest&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;This will help you using &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt; when you need them. Database table names that follow another naming convention are totally OK, but you will need to perform extra configuration.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&#34;https://www.sqlite.org/withoutrowid.html&#34;&gt;&lt;code&gt;WITHOUT ROWID&lt;/code&gt;&lt;/a&gt; tables can not be tracked with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;Database Observation&lt;/a&gt; tools.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Add regular columns&lt;/strong&gt; with their name and eventual type (&lt;code&gt;text&lt;/code&gt;, &lt;code&gt;integer&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;blob&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;any&lt;/code&gt;) - see &lt;a href=&#34;https://www.sqlite.org/datatype3.html&#34;&gt;SQLite data types&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE example (&#xA;//   a,&#xA;//   name TEXT,&#xA;//   creationDate DATETIME,&#xA;try db.create(table: &#34;example&#34;) { t in&#xA;    t.column(&#34;a&#34;)&#xA;    t.column(&#34;name&#34;, .text)&#xA;    t.column(&#34;creationDate&#34;, .datetime)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Define &lt;strong&gt;not null&lt;/strong&gt; columns, and set &lt;strong&gt;default&lt;/strong&gt; values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // email TEXT NOT NULL,&#xA;    t.column(&#34;email&#34;, .text).notNull()&#xA;    &#xA;    // name TEXT NOT NULL DEFAULT &#39;Anonymous&#39;,&#xA;    t.column(&#34;name&#34;, .text).notNull().defaults(to: &#34;Anonymous&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an individual column as &lt;strong&gt;primary&lt;/strong&gt;, &lt;strong&gt;unique&lt;/strong&gt;, or &lt;strong&gt;foreign key&lt;/strong&gt;. When defining a foreign key, the referenced column is the primary key of the referenced table (unless you specify otherwise):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    &#xA;    // uuid TEXT PRIMARY KEY,&#xA;    t.column(&#34;uuid&#34;, .text).primaryKey()&#xA;    &#xA;    // email TEXT UNIQUE,&#xA;    t.column(&#34;email&#34;, .text).unique()&#xA;    &#xA;    // countryCode TEXT REFERENCES country(code) ON DELETE CASCADE,&#xA;    t.column(&#34;countryCode&#34;, .text).references(&#34;country&#34;, onDelete: .cascade)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: when you need an integer primary key that automatically generates unique values, it is highly recommended that you use the &lt;code&gt;autoIncrementedPrimaryKey&lt;/code&gt; method:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.create(table: &#34;example&#34;) { t in&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The reason for this recommendation is that auto-incremented primary keys prevent the reuse of ids. This prevents your app or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;database observation tools&lt;/a&gt; to think that a row was updated, when it was actually deleted, then replaced. Depending on your application needs, this may be acceptable. But usually it is not.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Create an index&lt;/strong&gt; on the column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    t.column(&#34;score&#34;, .integer).indexed()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For extra index options, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#create-indexes&#34;&gt;Create Indexes&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Perform integrity checks&lt;/strong&gt; on individual columns, and SQLite will only let conforming rows in. In the example below, the &lt;code&gt;$0&lt;/code&gt; closure variable is a column which lets you build any SQL &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#expressions&#34;&gt;expression&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // name TEXT CHECK (LENGTH(name) &amp;gt; 0)&#xA;    // score INTEGER CHECK (score &amp;gt; 0)&#xA;    t.column(&#34;name&#34;, .text).check { length($0) &amp;gt; 0 }&#xA;    t.column(&#34;score&#34;, .integer).check(sql: &#34;score &amp;gt; 0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Columns can also be defined with a raw sql String, or an &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md#sql-literal&#34;&gt;SQL literal&lt;/a&gt; in which you can safely embed raw values without any risk of syntax errors or SQL injection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    t.column(sql: &#34;name TEXT&#34;)&#xA;    &#xA;    let defaultName: String = ...&#xA;    t.column(literal: &#34;name TEXT DEFAULT \(defaultName)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other &lt;strong&gt;table constraints&lt;/strong&gt; can involve several columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // PRIMARY KEY (a, b),&#xA;    t.primaryKey([&#34;a&#34;, &#34;b&#34;])&#xA;    &#xA;    // UNIQUE (a, b) ON CONFLICT REPLACE,&#xA;    t.uniqueKey([&#34;a&#34;, &#34;b&#34;], onConflict: .replace)&#xA;    &#xA;    // FOREIGN KEY (a, b) REFERENCES parents(c, d),&#xA;    t.foreignKey([&#34;a&#34;, &#34;b&#34;], references: &#34;parents&#34;)&#xA;    &#xA;    // CHECK (a + b &amp;lt; 10),&#xA;    t.check(Column(&#34;a&#34;) + Column(&#34;b&#34;) &amp;lt; 10)&#xA;    &#xA;    // CHECK (a + b &amp;lt; 10)&#xA;    t.check(sql: &#34;a + b &amp;lt; 10&#34;)&#xA;    &#xA;    // Raw SQL constraints&#xA;    t.constraint(sql: &#34;CHECK (a + b &amp;lt; 10)&#34;)&#xA;    t.constraint(literal: &#34;CHECK (a + b &amp;lt; \(10))&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sqlite.org/gencol.html&#34;&gt;Generated columns&lt;/a&gt; are available with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    t.column(&#34;totalScore&#34;, .integer).generatedAs(sql: &#34;score + bonus&#34;)&#xA;    t.column(&#34;totalScore&#34;, .integer).generatedAs(Column(&#34;score&#34;) + Column(&#34;bonus&#34;))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modify Tables&lt;/h3&gt; &#xA;&lt;p&gt;SQLite lets you modify existing tables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// ALTER TABLE referer RENAME TO referrer&#xA;try db.rename(table: &#34;referer&#34;, to: &#34;referrer&#34;)&#xA;&#xA;// ALTER TABLE player ADD COLUMN hasBonus BOOLEAN&#xA;// ALTER TABLE player RENAME COLUMN url TO homeURL&#xA;// ALTER TABLE player DROP COLUMN score&#xA;try db.alter(table: &#34;player&#34;) { t in&#xA;    t.add(column: &#34;hasBonus&#34;, .boolean)&#xA;    t.rename(column: &#34;url&#34;, to: &#34;homeURL&#34;) // SQLite 3.25+&#xA;    t.drop(column: &#34;score&#34;) // SQLite 3.35+&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: SQLite restricts the possible table alterations, and may require you to recreate dependent triggers or views. See the documentation of the &lt;a href=&#34;https://www.sqlite.org/lang_altertable.html&#34;&gt;ALTER TABLE&lt;/a&gt; for details. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Migrations.md#advanced-database-schema-changes&#34;&gt;Advanced Database Schema Changes&lt;/a&gt; for a way to lift restrictions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Drop Tables&lt;/h3&gt; &#xA;&lt;p&gt;Drop tables with the &lt;code&gt;drop(table:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.drop(table: &#34;obsolete&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create Indexes&lt;/h3&gt; &#xA;&lt;p&gt;Create indexes with the &lt;code&gt;create(index:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE INDEX byName ON users(lastName, firstName)&#xA;try db.create(index: &#34;byName&#34;, on: &#34;users&#34;, columns: [&#34;lastName, &#34;firstName&#34;])&#xA;&#xA;// CREATE UNIQUE INDEX byEmail IF NOT EXISTS ON users(email)&#xA;try db.create(index: &#34;byEmail&#34;, on: &#34;users&#34;, columns: [&#34;email&#34;], options: [.unique, .ifNotExists])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Relevant SQLite documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/lang_createindex.html&#34;&gt;CREATE INDEX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/expridx.html&#34;&gt;Indexes On Expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/partialindex.html&#34;&gt;Partial Indexes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The query interface requests&lt;/strong&gt; let you fetch values from the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.filter(emailColumn != nil).order(nameColumn)&#xA;let players = try request.fetchAll(db)  // [Player]&#xA;let count = try request.fetchCount(db)  // Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Query interface requests usually start from &lt;strong&gt;a type&lt;/strong&gt; that adopts the &lt;code&gt;TableRecord&lt;/code&gt; protocol, such as a &lt;code&gt;Record&lt;/code&gt; subclass (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Player: Record { ... }&#xA;&#xA;// The request for all players:&#xA;let request = Player.all()&#xA;let players = try request.fetchAll(db) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you can not use a record type, use &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// The request for all rows from the player table:&#xA;let table = Table(&#34;player&#34;)&#xA;let request = table.all()&#xA;let rows = try request.fetchAll(db)    // [Row]&#xA;&#xA;// The request for all players from the player table:&#xA;let table = Table&amp;lt;Player&amp;gt;(&#34;player&#34;)&#xA;let request = table.all()&#xA;let players = try request.fetchAll(db) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: all examples in the documentation below use a record type, but you can always substitute a &lt;code&gt;Table&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Next, declare the table &lt;strong&gt;columns&lt;/strong&gt; that you want to use for filtering, or sorting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let idColumn = Column(&#34;id&#34;)&#xA;let nameColumn = Column(&#34;name&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also declare column enums, if you prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Columns.id and Columns.name can be used just as&#xA;// idColumn and nameColumn declared above.&#xA;enum Columns: String, ColumnExpression {&#xA;    case id&#xA;    case name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now build requests with the following methods: &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;distinct&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;having&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;reversed&lt;/code&gt;, &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;joining&lt;/code&gt;, &lt;code&gt;including&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;. All those methods return another request, which you can further refine by applying another method: &lt;code&gt;Player.select(...).filter(...).order(...)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all()&lt;/code&gt;, &lt;code&gt;none()&lt;/code&gt;: the requests for all rows, or no row.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player&#xA;Player.all()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, all columns are selected. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;select(...)&lt;/code&gt; and &lt;code&gt;select(..., as:)&lt;/code&gt; define the selected columns. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT name FROM player&#xA;Player.select(nameColumn, as: String.self)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;selectID()&lt;/code&gt; is available on &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;. It supports all tables that have a single-column primary key:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT id FROM player&#xA;Player.selectID()&#xA;&#xA;// SELECT id FROM player WHERE name IS NOT NULL&#xA;Player.filter(nameColumn != nil).selectID()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotated(with: expression...)&lt;/code&gt; extends the selection.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT *, (score + bonus) AS total FROM player&#xA;Player.annotated(with: (scoreColumn + bonusColumn).forKey(&#34;total&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotated(with: aggregate)&lt;/code&gt; extends the selection with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md#association-aggregates&#34;&gt;association aggregates&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT team.*, COUNT(DISTINCT player.id) AS playerCount&#xA;// FROM team&#xA;// LEFT JOIN player ON player.teamId = team.id&#xA;// GROUP BY team.id&#xA;Team.annotated(with: Team.players.count)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotated(withRequired: association)&lt;/code&gt; and &lt;code&gt;annotated(withOptional: association)&lt;/code&gt; extends the selection with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT player.*, team.color&#xA;// FROM player&#xA;// JOIN team ON team.id = player.teamId&#xA;Player.annotated(withRequired: Player.team.select(colorColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;distinct()&lt;/code&gt; performs uniquing.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT DISTINCT name FROM player&#xA;Player.select(nameColumn, as: String.self).distinct()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;filter(expression)&lt;/code&gt; applies conditions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id IN (1, 2, 3)&#xA;Player.filter([1,2,3].contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE (name IS NOT NULL) AND (height &amp;gt; 1.75)&#xA;Player.filter(nameColumn != nil &amp;amp;&amp;amp; heightColumn &amp;gt; 1.75)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;filter(id:)&lt;/code&gt; and &lt;code&gt;filter(ids:)&lt;/code&gt; are type-safe methods available on &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id = 1&#xA;Player.filter(id: 1)&#xA;&#xA;// SELECT * FROM country WHERE isoCode IN (&#39;FR&#39;, &#39;US&#39;)&#xA;Country.filter(ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;filter(key:)&lt;/code&gt; and &lt;code&gt;filter(keys:)&lt;/code&gt; apply conditions on primary and unique keys:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id = 1&#xA;Player.filter(key: 1)&#xA;&#xA;// SELECT * FROM country WHERE isoCode IN (&#39;FR&#39;, &#39;US&#39;)&#xA;Country.filter(keys: [&#34;FR&#34;, &#34;US&#34;])&#xA;&#xA;// SELECT * FROM citizenship WHERE citizenId = 1 AND countryCode = &#39;FR&#39;&#xA;Citizenship.filter(key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&#xA;// SELECT * FROM player WHERE email = &#39;arthur@example.com&#39;&#xA;Player.filter(key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;matching(pattern)&lt;/code&gt; performs &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;full-text search&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;&#xA;let pattern = FTS3Pattern(matchingAllTokensIn: &#34;SQLite database&#34;)&#xA;Document.matching(pattern)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the pattern is nil, no row will match.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;group(expression, ...)&lt;/code&gt; groups rows.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT name, MAX(score) FROM player GROUP BY name&#xA;Player&#xA;    .select(nameColumn, max(scoreColumn))&#xA;    .group(nameColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;having(expression)&lt;/code&gt; applies conditions on grouped rows.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT team, MAX(score) FROM player GROUP BY team HAVING MIN(score) &amp;gt;= 1000&#xA;Player&#xA;    .select(teamColumn, max(scoreColumn))&#xA;    .group(teamColumn)&#xA;    .having(min(scoreColumn) &amp;gt;= 1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;having(aggregate)&lt;/code&gt; applies conditions on grouped rows, according to an &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md#association-aggregates&#34;&gt;association aggregate&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT team.*&#xA;// FROM team&#xA;// LEFT JOIN player ON player.teamId = team.id&#xA;// GROUP BY team.id&#xA;// HAVING COUNT(DISTINCT player.id) &amp;gt;= 5&#xA;Team.having(Team.players.count &amp;gt;= 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;order(ordering, ...)&lt;/code&gt; sorts.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY name&#xA;Player.order(nameColumn)&#xA;&#xA;// SELECT * FROM player ORDER BY score DESC, name&#xA;Player.order(scoreColumn.desc, nameColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SQLite considers NULL values to be smaller than any other values for sorting purposes. Hence, NULLs naturally appear at the beginning of an ascending ordering and at the end of a descending ordering. With a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt;, this can be changed using &lt;code&gt;.ascNullsLast&lt;/code&gt; and &lt;code&gt;.descNullsFirst&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY score ASC NULLS LAST&#xA;Player.order(nameColumn.ascNullsLast)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Each &lt;code&gt;order&lt;/code&gt; call clears any previous ordering:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY name&#xA;Player.order(scoreColumn).order(nameColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reversed()&lt;/code&gt; reverses the eventual orderings.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY score ASC, name DESC&#xA;Player.order(scoreColumn.desc, nameColumn).reversed()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If no ordering was already specified, this method has no effect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player&#xA;Player.all().reversed()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;limit(limit, offset: offset)&lt;/code&gt; limits and pages results.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player LIMIT 5&#xA;Player.limit(5)&#xA;&#xA;// SELECT * FROM player LIMIT 5 OFFSET 10&#xA;Player.limit(5, offset: 10)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;joining(...)&lt;/code&gt; and &lt;code&gt;including(...)&lt;/code&gt; fetch and join records through &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT player.*, team.*&#xA;// FROM player&#xA;// JOIN team ON team.id = player.teamId&#xA;Player.including(required: Player.team)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;with(cte)&lt;/code&gt; embeds a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;common table expression&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WITH ... SELECT * FROM player&#xA;let cte = CommonTableExpression(...)&#xA;Player.with(cte)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other requests that involve the primary key:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;orderByPrimaryKey()&lt;/code&gt; sorts by primary key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY id&#xA;Player.orderByPrimaryKey()&#xA;&#xA;// SELECT * FROM country ORDER BY code&#xA;Country.orderByPrimaryKey()&#xA;&#xA;// SELECT * FROM citizenship ORDER BY citizenId, countryCode&#xA;Citizenship.orderByPrimaryKey()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;groupByPrimaryKey()&lt;/code&gt; groups rows by primary key.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can refine requests by chaining those methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (email IS NOT NULL) ORDER BY name&#xA;Player.order(nameColumn).filter(emailColumn != nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, and &lt;code&gt;limit&lt;/code&gt; methods ignore and replace previously applied selection, orderings, grouping, and limits. On the opposite, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, and &lt;code&gt;having&lt;/code&gt; methods extend the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Player                          // SELECT * FROM player&#xA;    .filter(nameColumn != nil)  // WHERE (name IS NOT NULL)&#xA;    .filter(emailColumn != nil) //        AND (email IS NOT NULL)&#xA;    .order(nameColumn)          // - ignored -&#xA;    .reversed()                 // - ignored -&#xA;    .order(scoreColumn)         // ORDER BY score&#xA;    .limit(20, offset: 40)      // - ignored -&#xA;    .limit(10)                  // LIMIT 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Raw SQL snippets are also accepted, with eventual &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;arguments&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT DATE(creationDate), COUNT(*) FROM player WHERE name = &#39;Arthur&#39; GROUP BY date(creationDate)&#xA;Player&#xA;    .select(sql: &#34;DATE(creationDate), COUNT(*)&#34;)&#xA;    .filter(sql: &#34;name = ?&#34;, arguments: [&#34;Arthur&#34;])&#xA;    .group(sql: &#34;DATE(creationDate)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Columns Selected by a Request&lt;/h3&gt; &#xA;&lt;p&gt;By default, query interface requests select all columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player&#xA;struct Player: TableRecord { ... }&#xA;let request = Player.all()&#xA;&#xA;// SELECT * FROM player&#xA;let table = Table(&#34;player&#34;)&#xA;let request = table.all()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The selection can be changed for each individual requests, or in the case of record-based requests, for all requests built from this record type.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;select(...)&lt;/code&gt; and &lt;code&gt;select(..., as:)&lt;/code&gt; methods change the selection of a single request (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-from-requests&#34;&gt;Fetching from Requests&lt;/a&gt; for detailed information):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.select(max(Column(&#34;score&#34;)))&#xA;let maxScore = try Int.fetchOne(db, request) // Int?&#xA;&#xA;let request = Player.select(max(Column(&#34;score&#34;)), as: Int.self)&#xA;let maxScore = try request.fetchOne(db)      // Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default selection for a record type is controlled by the &lt;code&gt;databaseSelection&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct RestrictedPlayer : TableRecord {&#xA;    static let databaseTableName = &#34;player&#34;&#xA;    static let databaseSelection: [SQLSelectable] = [Column(&#34;id&#34;), Column(&#34;name&#34;)]&#xA;}&#xA;&#xA;struct ExtendedPlayer : TableRecord {&#xA;    static let databaseTableName = &#34;player&#34;&#xA;    static let databaseSelection: [SQLSelectable] = [AllColumns(), Column.rowID]&#xA;}&#xA;&#xA;// SELECT id, name FROM player&#xA;let request = RestrictedPlayer.all()&#xA;&#xA;// SELECT *, rowid FROM player&#xA;let request = ExtendedPlayer.all()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseSelection&lt;/code&gt; property is explicitly declared as &lt;code&gt;[SQLSelectable]&lt;/code&gt;. If it is not, the Swift compiler may silently miss the protocol requirement, resulting in sticky &lt;code&gt;SELECT *&lt;/code&gt; requests. To verify your setup, see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;How do I print a request as SQL?&lt;/a&gt; FAQ.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Expressions&lt;/h2&gt; &#xA;&lt;p&gt;Feed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; with SQL expressions built from your Swift code:&lt;/p&gt; &#xA;&lt;h3&gt;SQL Operators&lt;/h3&gt; &#xA;&lt;p&gt;GRDB comes with a Swift version of many SQLite &lt;a href=&#34;https://sqlite.org/lang_expr.html#operators&#34;&gt;built-in operators&lt;/a&gt;, listed below. But not all: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt; for a way to add support for missing SQL operators.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;IS&lt;/code&gt;, &lt;code&gt;IS NOT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Comparison operators are based on the Swift operators &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (name = &#39;Arthur&#39;)&#xA;Player.filter(nameColumn == &#34;Arthur&#34;)&#xA;&#xA;// SELECT * FROM player WHERE (name IS NULL)&#xA;Player.filter(nameColumn == nil)&#xA;&#xA;// SELECT * FROM player WHERE (score IS 1000)&#xA;Player.filter(scoreColumn === 1000)&#xA;&#xA;// SELECT * FROM rectangle WHERE width &amp;lt; height&#xA;Rectangle.filter(widthColumn &amp;lt; heightColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Subqueries are supported:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE score = (SELECT max(score) FROM player)&#xA;let maximumScore = Player.select(max(scoreColumn))&#xA;Player.filter(scoreColumn == maximumScore)&#xA;&#xA;// SELECT * FROM player WHERE score = (SELECT max(score) FROM player)&#xA;let maximumScore = SQLRequest(&#34;SELECT max(score) FROM player&#34;)&#xA;Player.filter(scoreColumn == maximumScore)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&#34;&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/p&gt; &lt;p&gt;SQLite arithmetic operators are derived from their Swift equivalent:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT ((temperature * 1.8) + 32) AS fahrenheit FROM planet&#xA;Planet.select((temperatureColumn * 1.8 + 32).forKey(&#34;fahrenheit&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: an expression like &lt;code&gt;nameColumn + &#34;rrr&#34;&lt;/code&gt; will be interpreted by SQLite as a numerical addition (with funny results), not as a string concatenation. See the &lt;code&gt;concat&lt;/code&gt; operator below.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;When you want to join a sequence of expressions with the &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; operator, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT score + bonus + 1000 FROM player&#xA;let values = [&#xA;    scoreColumn,&#xA;    bonusColumn,&#xA;    1000.databaseValue]&#xA;Player.select(values.joined(operator: .add))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note in the example above how you concatenate raw values: &lt;code&gt;1000.databaseValue&lt;/code&gt;. A plain &lt;code&gt;1000&lt;/code&gt; would not compile.&lt;/p&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .add)&lt;/code&gt; returns 0, and &lt;code&gt;joined(operator: .multiply)&lt;/code&gt; returns 1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;||&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Concatenate several strings:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT firstName || &#39; &#39; || lastName FROM player&#xA;Player.select([firstNameColumn, &#34; &#34;.databaseValue, lastNameColumn].joined(operator: .concat))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note in the example above how you concatenate raw strings: &lt;code&gt;&#34; &#34;.databaseValue&lt;/code&gt;. A plain &lt;code&gt;&#34; &#34;&lt;/code&gt; would not compile.&lt;/p&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .concat)&lt;/code&gt; returns the empty string.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The SQL logical operators are derived from the Swift &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE ((NOT verified) OR (score &amp;lt; 1000))&#xA;Player.filter(!verifiedColumn || scoreColumn &amp;lt; 1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you want to join a sequence of expressions with the &lt;code&gt;AND&lt;/code&gt; or &lt;code&gt;OR&lt;/code&gt; operator, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (verified AND (score &amp;gt;= 1000) AND (name IS NOT NULL))&#xA;let conditions = [&#xA;    verifiedColumn,&#xA;    scoreColumn &amp;gt;= 1000,&#xA;    nameColumn != nil]&#xA;Player.filter(conditions.joined(operator: .and))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .and)&lt;/code&gt; returns true, and &lt;code&gt;joined(operator: .or)&lt;/code&gt; returns false:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE 1&#xA;Player.filter([].joined(operator: .and))&#xA;&#xA;// SELECT * FROM player WHERE 0&#xA;Player.filter([].joined(operator: .or))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt;, &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;NOT IN&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To check inclusion in a Swift sequence (array, set, range‚Ä¶), call the &lt;code&gt;contains&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id IN (1, 2, 3)&#xA;Player.filter([1, 2, 3].contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE id NOT IN (1, 2, 3)&#xA;Player.filter(![1, 2, 3].contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE score BETWEEN 0 AND 1000&#xA;Player.filter((0...1000).contains(scoreColumn))&#xA;&#xA;// SELECT * FROM player WHERE (score &amp;gt;= 0) AND (score &amp;lt; 1000)&#xA;Player.filter((0..&amp;lt;1000).contains(scoreColumn))&#xA;&#xA;// SELECT * FROM player WHERE initial BETWEEN &#39;A&#39; AND &#39;N&#39;&#xA;Player.filter((&#34;A&#34;...&#34;N&#34;).contains(initialColumn))&#xA;&#xA;// SELECT * FROM player WHERE (initial &amp;gt;= &#39;A&#39;) AND (initial &amp;lt; &#39;N&#39;)&#xA;Player.filter((&#34;A&#34;..&amp;lt;&#34;N&#34;).contains(initialColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To check inclusion inside a subquery, call the &lt;code&gt;contains&lt;/code&gt; method as well:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id IN (SELECT playerId FROM playerSelection)&#xA;let selectedPlayerIds = PlayerSelection.select(playerIdColumn)&#xA;Player.filter(selectedPlayerIds.contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE id IN (SELECT playerId FROM playerSelection)&#xA;let selectedPlayerIds = SQLRequest(&#34;SELECT playerId FROM playerSelection&#34;)&#xA;Player.filter(selectedPlayerIds.contains(idColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To check inclusion inside a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;common table expression&lt;/a&gt;, call the &lt;code&gt;contains&lt;/code&gt; method as well:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WITH selectedName AS (...)&#xA;// SELECT * FROM player WHERE name IN selectedName&#xA;let cte = CommonTableExpression(named: &#34;selectedName&#34;, ...)&#xA;Player&#xA;    .with(cte)&#xA;    .filter(cte.contains(nameColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&#34;&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;EXISTS&lt;/code&gt;, &lt;code&gt;NOT EXISTS&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To check if a subquery would return rows, call the &lt;code&gt;exists&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Teams that have at least one other player&#xA;//&#xA;//  SELECT * FROM team&#xA;//  WHERE EXISTS (SELECT * FROM player WHERE teamID = team.id)&#xA;let teamAlias = TableAlias()&#xA;let player = Player.filter(Column(&#34;teamID&#34;) == teamAlias[Column(&#34;id&#34;)])&#xA;let teams = Team.aliased(teamAlias).filter(player.exists())&#xA;&#xA;// Teams that have no player&#xA;//&#xA;//  SELECT * FROM team&#xA;//  WHERE NOT EXISTS (SELECT * FROM player WHERE teamID = team.id)&#xA;let teams = Team.aliased(teamAlias).filter(!player.exists())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, you use a &lt;code&gt;TableAlias&lt;/code&gt; in order to let a subquery refer to a column from another table.&lt;/p&gt; &lt;p&gt;In the next example, which involves the same table twice, the table alias requires an explicit disambiguation with &lt;code&gt;TableAlias(name:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Players who coach at least one other player&#xA;//&#xA;//  SELECT coach.* FROM player coach&#xA;//  WHERE EXISTS (SELECT * FROM player WHERE coachId = coach.id)&#xA;let coachAlias = TableAlias(name: &#34;coach&#34;)&#xA;let coachedPlayer = Player.filter(Column(&#34;coachId&#34;) == coachAlias[Column(&#34;id&#34;)])&#xA;let coaches = Player.aliased(coachAlias).filter(coachedPlayer.exists())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, subqueries can also be expressed as SQL, with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT coach.* FROM player coach&#xA;// WHERE EXISTS (SELECT * FROM player WHERE coachId = coach.id)&#xA;let coachedPlayer = SQLRequest(&#34;SELECT * FROM player WHERE coachId = \(coachAlias[Column(&#34;id&#34;)])&#34;)&#xA;let coaches = Player.aliased(coachAlias).filter(coachedPlayer.exists())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The SQLite LIKE operator is available as the &lt;code&gt;like&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (email LIKE &#39;%@example.com&#39;)&#xA;Player.filter(emailColumn.like(&#34;%@example.com&#34;))&#xA;&#xA;// SELECT * FROM book WHERE (title LIKE &#39;%10\%%&#39; ESCAPE &#39;\&#39;)&#xA;Player.filter(emailColumn.like(&#34;%10\\%%&#34;, escape: &#34;\\&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the SQLite LIKE operator is case-insensitive but not Unicode-aware. For example, the expression &lt;code&gt;&#39;a&#39; LIKE &#39;A&#39;&lt;/code&gt; is true but &lt;code&gt;&#39;√¶&#39; LIKE &#39;√Ü&#39;&lt;/code&gt; is false.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;MATCH&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The full-text MATCH operator is available through &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts3pattern&#34;&gt;FTS3Pattern&lt;/a&gt; (for FTS3 and FTS4 tables) and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts5pattern&#34;&gt;FTS5Pattern&lt;/a&gt; (for FTS5):&lt;/p&gt; &lt;p&gt;FTS3 and FTS4:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let pattern = FTS3Pattern(matchingAllTokensIn: &#34;SQLite database&#34;)&#xA;&#xA;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;&#xA;Document.matching(pattern)&#xA;&#xA;// SELECT * FROM document WHERE content MATCH &#39;sqlite database&#39;&#xA;Document.filter(contentColumn.match(pattern))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;FTS5:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let pattern = FTS5Pattern(matchingAllTokensIn: &#34;SQLite database&#34;)&#xA;&#xA;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;&#xA;Document.matching(pattern)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AS&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To give an alias to an expression, use the &lt;code&gt;forKey&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT (score + bonus) AS total&#xA;// FROM player&#xA;Player.select((Column(&#34;score&#34;) + Column(&#34;bonus&#34;)).forKey(&#34;total&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need to refer to this aliased column in another place of the request, use a detached column:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT (score + bonus) AS total&#xA;// FROM player &#xA;// ORDER BY total&#xA;Player&#xA;    .select((Column(&#34;score&#34;) + Column(&#34;bonus&#34;)).forKey(&#34;total&#34;))&#xA;    .order(Column(&#34;total&#34;).detached)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Unlike &lt;code&gt;Column(&#34;total&#34;)&lt;/code&gt;, the detached column &lt;code&gt;Column(&#34;total&#34;).detached&lt;/code&gt; is never associated to the &#34;player&#34; table, so it is always rendered as &lt;code&gt;total&lt;/code&gt; in the generated SQL, even when the request involves other tables via an &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;association&lt;/a&gt; or a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;common table expression&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SQL Functions&lt;/h3&gt; &#xA;&lt;p&gt;GRDB comes with a Swift version of many SQLite &lt;a href=&#34;https://sqlite.org/lang_corefunc.html&#34;&gt;built-in functions&lt;/a&gt;, listed below. But not all: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt; for a way to add support for missing SQL functions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ABS&lt;/code&gt;, &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;DATETIME&lt;/code&gt;, &lt;code&gt;JULIANDAY&lt;/code&gt;, &lt;code&gt;LENGTH&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;TOTAL&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;Those are based on the &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;dateTime&lt;/code&gt;, &lt;code&gt;julianDay&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;total&lt;/code&gt; Swift functions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT MIN(score), MAX(score) FROM player&#xA;Player.select(min(scoreColumn), max(scoreColumn))&#xA;&#xA;// SELECT COUNT(name) FROM player&#xA;Player.select(count(nameColumn))&#xA;&#xA;// SELECT COUNT(DISTINCT name) FROM player&#xA;Player.select(count(distinct: nameColumn))&#xA;&#xA;// SELECT JULIANDAY(date, &#39;start of year&#39;) FROM game&#xA;Game.select(julianDay(dateColumn, .startOfYear))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more information about the functions &lt;code&gt;dateTime&lt;/code&gt; and &lt;code&gt;julianDay&lt;/code&gt;, see &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;Date And Time Functions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;IFNULL&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use the Swift &lt;code&gt;??&lt;/code&gt; operator:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;Anonymous&#39;) FROM player&#xA;Player.select(nameColumn ?? &#34;Anonymous&#34;)&#xA;&#xA;// SELECT IFNULL(name, email) FROM player&#xA;Player.select(nameColumn ?? emailColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LOWER&lt;/code&gt;, &lt;code&gt;UPPER&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query interface does not give access to those SQLite functions. Nothing against them, but they are not unicode aware.&lt;/p&gt; &lt;p&gt;Instead, GRDB extends SQLite with SQL functions that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Player.select(nameColumn.uppercased())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: When &lt;em&gt;comparing&lt;/em&gt; strings, you&#39;d rather use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&#34;&gt;collation&lt;/a&gt;:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String = ...&#xA;&#xA;// Not recommended&#xA;nameColumn.uppercased() == name.uppercased()&#xA;&#xA;// Better&#xA;nameColumn.collating(.caseInsensitiveCompare) == name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Custom SQL functions and aggregates&lt;/p&gt; &lt;p&gt;You can apply your own &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-functions-&#34;&gt;custom SQL functions and aggregates&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let f = DatabaseFunction(&#34;f&#34;, ...)&#xA;&#xA;// SELECT f(name) FROM player&#xA;Player.select(f.apply(nameColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Embedding SQL in Query Interface Requests&lt;/h2&gt; &#xA;&lt;p&gt;You will sometimes want to extend your query interface requests with SQL snippets. This can happen because GRDB does not provide a Swift interface for some SQL function or operator, or because you want to use an SQLite construct that GRDB does not support.&lt;/p&gt; &#xA;&lt;p&gt;Support for extensibility is large, but not unlimited. All the SQL queries built by the query interface request have the shape below. &lt;em&gt;If you need something else, you&#39;ll have to use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;raw SQL requests&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;WITH ...     -- 1&#xA;SELECT ...   -- 2&#xA;FROM ...     -- 3&#xA;JOIN ...     -- 4&#xA;WHERE ...    -- 5&#xA;GROUP BY ... -- 6&#xA;HAVING ...   -- 7&#xA;ORDER BY ... -- 8&#xA;LIMIT ...    -- 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WITH ...&lt;/code&gt;: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;Common Table Expressions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SELECT ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The selection can be provided as raw SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player&#xA;let request = Player.select(sql: &#34;IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score&#34;)&#xA;&#xA;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let request = Player.select(sql: &#34;IFNULL(name, ?), score&#34;, arguments: [suffix])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The selection can be provided with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let request = Player.select(literal: &#34;IFNULL(name, \(defaultName)), score&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The selection can be provided with a mix of Swift and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;) AS displayName, score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let displayName: SQL = &#34;IFNULL(\(Column(&#34;name&#34;)), \(defaultName)) AS displayName&#34;&#xA;let request = Player.select(displayName, Column(&#34;score&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the custom SQL snippet should behave as a full-fledged expression, with support for the &lt;code&gt;+&lt;/code&gt; Swift operator, the &lt;code&gt;forKey&lt;/code&gt; aliasing method, and all other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-operators&#34;&gt;SQL Operators&lt;/a&gt;, build an &lt;em&gt;expression literal&lt;/em&gt; with the &lt;code&gt;SQL.sqlExpression&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;) AS displayName, score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let displayName = SQL(&#34;IFNULL(\(Column(&#34;name&#34;)), \(defaultName))&#34;).sqlExpression&#xA;let request = Player.select(displayName.forKey(&#34;displayName&#34;), Column(&#34;score&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Such expression literals allow you to build a reusable support library of SQL functions or operators that are missing from the query interface. For example, you can define a Swift &lt;code&gt;date&lt;/code&gt; function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func date(_ value: SQLSpecificExpressible) -&amp;gt; SQLExpression {&#xA;    SQL(&#34;DATE(\(value))&#34;).sqlExpression&#xA;}&#xA;&#xA;// SELECT * FROM &#34;player&#34; WHERE DATE(&#34;createdAt&#34;) = &#39;2020-01-23&#39;&#xA;let request = Player.filter(date(Column(&#34;createdAt&#34;)) == &#34;2020-01-23&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/QueryInterfaceOrganization.md&#34;&gt;Query Interface Organization&lt;/a&gt; for more information about &lt;code&gt;SQLSpecificExpressible&lt;/code&gt; and &lt;code&gt;SQLExpression&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FROM ...&lt;/code&gt;: only one table is supported here. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;JOIN ...&lt;/code&gt;: joins are fully controlled by &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WHERE ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The WHERE clause can be provided as raw SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE score &amp;gt;= 1000&#xA;let request = Player.filter(sql: &#34;score &amp;gt;= 1000&#34;)&#xA;&#xA;// SELECT * FROM player WHERE score &amp;gt;= 1000&#xA;let minScore = 1000&#xA;let request = Player.filter(sql: &#34;score &amp;gt;= ?&#34;, arguments: [minScore])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The WHERE clause can be provided with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE score &amp;gt;= 1000&#xA;let minScore = 1000&#xA;let request = Player.filter(literal: &#34;score &amp;gt;= \(minScore)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The WHERE clause can be provided with a mix of Swift and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (score &amp;gt;= 1000) AND (team = &#39;red&#39;)&#xA;let minScore = 1000&#xA;let scoreCondition: SQL = &#34;\(Column(&#34;score&#34;)) &amp;gt;= \(minScore)&#34;&#xA;let request = Player.filter(scoreCondition &amp;amp;&amp;amp; Column(&#34;team&#34;) == &#34;red&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;code&gt;SELECT ...&lt;/code&gt; above for more SQL Interpolation examples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GROUP BY ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The GROUP BY clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HAVING ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The HAVING clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ORDER BY ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The ORDER BY clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;p&gt;In order to support the &lt;code&gt;desc&lt;/code&gt; and &lt;code&gt;asc&lt;/code&gt; query interface operators, and the &lt;code&gt;reversed()&lt;/code&gt; query interface method, you must provide your orderings as &lt;em&gt;expression literals&lt;/em&gt; with the &lt;code&gt;SQL.sqlExpression&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM &#34;player&#34; &#xA;// ORDER BY (score + bonus) ASC, name DESC&#xA;let total = SQL(&#34;(score + bonus)&#34;).sqlExpression&#xA;let request = Player&#xA;    .order(total.desc, Column(&#34;name&#34;))&#xA;    .reversed()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LIMIT ...&lt;/code&gt;: use the &lt;code&gt;limit(_:offset:)&lt;/code&gt; method. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Fetching from Requests&lt;/h2&gt; &#xA;&lt;p&gt;Once you have a request, you can fetch the records at the origin of the request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Some request based on `Player`&#xA;let request = Player.filter(...)... // QueryInterfaceRequest&amp;lt;Player&amp;gt;&#xA;&#xA;// Fetch players:&#xA;try request.fetchCursor(db) // A Cursor of Player&#xA;try request.fetchAll(db)    // [Player]&#xA;try request.fetchSet(db)    // Set&amp;lt;Player&amp;gt;&#xA;try request.fetchOne(db)    // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let allPlayers = try Player.fetchAll(db)                            // [Player]&#xA;let arthur = try Player.filter(nameColumn == &#34;Arthur&#34;).fetchOne(db) // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt;, &lt;code&gt;fetchSet&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You sometimes want to fetch other values&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The simplest way is to use the request as an argument to a fetching method of the desired type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Fetch an Int&#xA;let request = Player.select(max(scoreColumn))&#xA;let maxScore = try Int.fetchOne(db, request) // Int?&#xA;&#xA;// Fetch a Row&#xA;let request = Player.select(min(scoreColumn), max(scoreColumn))&#xA;let row = try Row.fetchOne(db, request)!     // Row&#xA;let minScore = row[0] as Int?&#xA;let maxScore = row[1] as Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the request so that it knows the type it has to fetch:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;With &lt;code&gt;asRequest(of:)&lt;/code&gt;, useful when you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BookInfo: FetchableRecord, Decodable {&#xA;    var book: Book&#xA;    var author: Author&#xA;}&#xA;&#xA;// A request of BookInfo&#xA;let request = Book&#xA;    .including(required: Book.author)&#xA;    .asRequest(of: BookInfo.self)&#xA;&#xA;let bookInfos = try dbQueue.read { db in&#xA;    try request.fetchAll(db) // [BookInfo]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With &lt;code&gt;select(..., as:)&lt;/code&gt;, which is handy when you change the selection:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A request of Int&#xA;let request = Player.select(max(scoreColumn), as: Int.self)&#xA;&#xA;let maxScore = try dbQueue.read { db in&#xA;    try request.fetchOne(db) // Int?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fetching by Key&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fetching records according to their primary key&lt;/strong&gt; is a common task.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt; can use the type-safe methods &lt;code&gt;fetchOne(_&lt;span&gt;üÜî&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchAll(_:ids:)&lt;/code&gt; and &lt;code&gt;fetchSet(_:ids:)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.fetchOne(db, id: 1)               // Player?&#xA;try Country.fetchAll(db, ids: [&#34;FR&#34;, &#34;US&#34;])  // [Countries]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All record types can use &lt;code&gt;fetchOne(_&lt;span&gt;üîë&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchAll(_:keys:)&lt;/code&gt; and &lt;code&gt;fetchSet(_:keys:)&lt;/code&gt; that apply conditions on primary and unique keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.fetchOne(db, key: 1)              // Player?&#xA;try Country.fetchAll(db, keys: [&#34;FR&#34;, &#34;US&#34;]) // [Country]&#xA;try Player.fetchOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])            // Player?&#xA;try Citizenship.fetchOne(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;]) // Citizenship?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-implicit-rowid-primary-key&#34;&gt;hidden &#34;rowid&#34; column&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM document WHERE rowid = 1&#xA;try Document.fetchOne(db, key: 1)            // Document?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you want to build a request and plan to fetch from it later&lt;/strong&gt;, use a &lt;code&gt;filter&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.filter(id: 1)&#xA;let request = Country.filter(ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;let request = Player.filter(key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;let request = Citizenship.filter(key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing for Record Existence&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can check if a request has matching rows in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Some request based on `Player`&#xA;let request = Player.filter(...)...&#xA;&#xA;// Check for player existence:&#xA;let noSuchPlayer = try request.isEmpty(db) // Bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should check for emptiness instead of counting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Correct&#xA;let noSuchPlayer = try request.fetchCount(db) == 0&#xA;// Even better&#xA;let noSuchPlayer = try request.isEmpty(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can also check if a given primary or unique key exists in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt; can use the type-safe method &lt;code&gt;exists(_&lt;span&gt;üÜî&lt;/span&gt;)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.exists(db, id: 1)&#xA;try Country.exists(db, id: &#34;FR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All record types can use &lt;code&gt;exists(_&lt;span&gt;üîë&lt;/span&gt;)&lt;/code&gt; that can check primary and unique keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.exists(db, key: 1)&#xA;try Country.exists(db, key: &#34;FR&#34;)&#xA;try Player.exists(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Citizenship.exists(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should check for key existence instead of fetching a record and checking for nil:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Correct&#xA;let playerExists = try Player.fetchOne(db, id: 1) != nil&#xA;// Even better&#xA;let playerExists = try Player.exists(db, id: 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fetching Aggregated Values&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests can count.&lt;/strong&gt; The &lt;code&gt;fetchCount()&lt;/code&gt; method returns the number of rows that would be returned by a fetch request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT COUNT(*) FROM player&#xA;let count = try Player.fetchCount(db) // Int&#xA;&#xA;// SELECT COUNT(*) FROM player WHERE email IS NOT NULL&#xA;let count = try Player.filter(emailColumn != nil).fetchCount(db)&#xA;&#xA;// SELECT COUNT(DISTINCT name) FROM player&#xA;let count = try Player.select(nameColumn).distinct().fetchCount(db)&#xA;&#xA;// SELECT COUNT(*) FROM (SELECT DISTINCT name, score FROM player)&#xA;let count = try Player.select(nameColumn, scoreColumn).distinct().fetchCount(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other aggregated values&lt;/strong&gt; can also be selected and fetched (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&#34;&gt;SQL Functions&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.select(max(scoreColumn))&#xA;let maxScore = try Int.fetchOne(db, request) // Int?&#xA;&#xA;let request = Player.select(min(scoreColumn), max(scoreColumn))&#xA;let row = try Row.fetchOne(db, request)!     // Row&#xA;let minScore = row[0] as Int?&#xA;let maxScore = row[1] as Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delete Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests can delete records&lt;/strong&gt;, with the &lt;code&gt;deleteAll()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DELETE FROM player&#xA;try Player.deleteAll(db)&#xA;&#xA;// DELETE FROM player WHERE team = &#39;red&#39;&#xA;try Player&#xA;    .filter(teamColumn == &#34;red&#34;)&#xA;    .deleteAll(db)&#xA;&#xA;// DELETE FROM player ORDER BY score LIMIT 10&#xA;try Player&#xA;    .order(scoreColumn)&#xA;    .limit(10)&#xA;    .deleteAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt; Deletion methods are available on types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol, and &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: TableRecord { ... }&#xA;try Player.deleteAll(db)          // Fine&#xA;try Table(&#34;player&#34;).deleteAll(db) // Just as fine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deleting records according to their primary key&lt;/strong&gt; is a common task.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt; can use the type-safe methods &lt;code&gt;deleteOne(_&lt;span&gt;üÜî&lt;/span&gt;)&lt;/code&gt; and &lt;code&gt;deleteAll(_:ids:)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.deleteOne(db, id: 1)&#xA;try Country.deleteAll(db, ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All record types can use &lt;code&gt;deleteOne(_&lt;span&gt;üîë&lt;/span&gt;)&lt;/code&gt; and &lt;code&gt;deleteAll(_:keys:)&lt;/code&gt; that apply conditions on primary and unique keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.deleteOne(db, key: 1)&#xA;try Country.deleteAll(db, keys: [&#34;FR&#34;, &#34;US&#34;])&#xA;try Player.deleteOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Citizenship.deleteOne(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-implicit-rowid-primary-key&#34;&gt;hidden &#34;rowid&#34; column&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DELETE FROM document WHERE rowid = 1&#xA;try Document.deleteOne(db, id: 1)             // Document?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Update Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests can batch update records&lt;/strong&gt;. The &lt;code&gt;updateAll()&lt;/code&gt; method accepts &lt;em&gt;column assignments&lt;/em&gt; defined with the &lt;code&gt;set(to:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE player SET score = 0, isHealthy = 1, bonus = NULL&#xA;try Player.updateAll(db, &#xA;    Column(&#34;score&#34;).set(to: 0), &#xA;    Column(&#34;isHealthy&#34;).set(to: true), &#xA;    Column(&#34;bonus&#34;).set(to: nil))&#xA;&#xA;// UPDATE player SET score = 0 WHERE team = &#39;red&#39;&#xA;try Player&#xA;    .filter(Column(&#34;team&#34;) == &#34;red&#34;)&#xA;    .updateAll(db, Column(&#34;score&#34;).set(to: 0))&#xA;&#xA;// UPDATE player SET top = 1 ORDER BY score DESC LIMIT 10&#xA;try Player&#xA;    .order(Column(&#34;score&#34;).desc)&#xA;    .limit(10)&#xA;    .updateAll(db, Column(&#34;top&#34;).set(to: true))&#xA;&#xA;// UPDATE country SET population = 67848156 WHERE id = &#39;FR&#39;&#xA;try Country&#xA;    .filter(id: &#34;FR&#34;)&#xA;    .updateAll(db, Column(&#34;population&#34;).set(to: 67_848_156))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Column assignments accept any expression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE player SET score = score + (bonus * 2)&#xA;try Player.updateAll(db, Column(&#34;score&#34;).set(to: Column(&#34;score&#34;) + Column(&#34;bonus&#34;) * 2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a convenience, you can also use the &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, or &lt;code&gt;/=&lt;/code&gt; operators:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE player SET score = score + (bonus * 2)&#xA;try Player.updateAll(db, Column(&#34;score&#34;) += Column(&#34;bonus&#34;) * 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&#34;&gt;Conflict Resolution&lt;/a&gt; rules apply, and you may also provide a specific one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE OR IGNORE player SET ...&#xA;try Player.updateAll(db, onConflict: .ignore, /* assignments... */)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;updateAll&lt;/code&gt; method is available on types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol, and &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: TableRecord { ... }&#xA;try Player.updateAll(db, ...)          // Fine&#xA;try Table(&#34;player&#34;).updateAll(db, ...) // Just as fine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Custom Requests&lt;/h2&gt; &#xA;&lt;p&gt;Until now, we have seen &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; created from any type that adopts the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.all()  // QueryInterfaceRequest&amp;lt;Player&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those requests of type &lt;code&gt;QueryInterfaceRequest&lt;/code&gt; can fetch and count:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try request.fetchCursor(db) // A Cursor of Player&#xA;try request.fetchAll(db)    // [Player]&#xA;try request.fetchSet(db)    // Set&amp;lt;Player&amp;gt;&#xA;try request.fetchOne(db)    // Player?&#xA;try request.fetchCount(db)  // Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When the query interface can not generate the SQL you need&lt;/strong&gt;, you can still fallback to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;raw SQL&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Custom SQL is always welcome&#xA;try Player.fetchAll(db, sql: &#34;SELECT ...&#34;)   // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But you may prefer to bring some elegance back in, and build custom requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// No custom SQL in sight&#xA;try Player.customRequest().fetchAll(db) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To build custom requests&lt;/strong&gt;, you can use one of the built-in requests or derive requests from other requests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/SQLRequest.html&#34;&gt;SQLRequest&lt;/a&gt; is a fetch request built from raw SQL. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Player {&#xA;    static func filter(color: Color) -&amp;gt; SQLRequest&amp;lt;Player&amp;gt; {&#xA;        SQLRequest&amp;lt;Player&amp;gt;(&#xA;            sql: &#34;SELECT * FROM player WHERE color = ?&#34;&#xA;            arguments: [color])&#xA;    }&#xA;}&#xA;&#xA;// [Player]&#xA;try Player.filter(color: .red).fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SQLRequest supports &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Player {&#xA;    static func filter(color: Color) -&amp;gt; SQLRequest&amp;lt;Player&amp;gt; {&#xA;        &#34;SELECT * FROM player WHERE color = \(color)&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;asRequest(of:)&lt;/code&gt; method changes the type fetched by the request. It is useful, for example, when you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BookInfo: FetchableRecord, Decodable {&#xA;    var book: Book&#xA;    var author: Author&#xA;}&#xA;&#xA;let request = Book&#xA;    .including(required: Book.author)&#xA;    .asRequest(of: BookInfo.self)&#xA;&#xA;// [BookInfo]&#xA;try request.fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;adapted(_:)&lt;/code&gt; method eases the consumption of complex rows with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;row adapters&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt; for some sample code that uses this method.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/AnyFetchRequest.html&#34;&gt;AnyFetchRequest&lt;/a&gt;: a type-erased request.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Joined Queries Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB helps consuming joined queries with complex selection.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this chapter, we will focus on the extraction of information from complex rows, such as the ones fetched by the query below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- How to consume the left, middle, and right parts of those rows?&#xA;SELECT player.*, team.*, MAX(round.score) AS maxScore&#xA;FROM player&#xA;LEFT JOIN team ON ...&#xA;LEFT JOIN round ON ...&#xA;GROUP BY ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We will not talk about the &lt;em&gt;generation&lt;/em&gt; of joined queries, which is covered in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;So what are we talking about?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is difficult to consume rows fetched from complex joined queries, because they often contain several columns with the same name: &lt;code&gt;id&lt;/code&gt; from table &lt;code&gt;player&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; from table &lt;code&gt;team&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;When such ambiguity happens, GRDB row accessors always favor the leftmost matching column. This means that &lt;code&gt;row[&#34;id&#34;]&lt;/code&gt; would give a player id, without any obvious way to access the team id.&lt;/p&gt; &#xA;&lt;p&gt;A classical technique to avoid this ambiguity is to give each column a unique name. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- A classical technique&#xA;SELECT player.id AS player_id, player.name AS player_name, team.id AS team_id, team.name AS team_name, team.color AS team_color, MAX(round.score) AS maxScore&#xA;FROM player&#xA;LEFT JOIN team ON ...&#xA;LEFT JOIN round ON ...&#xA;GROUP BY ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This technique works pretty well, but it has three drawbacks:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The selection becomes hard to read and understand.&lt;/li&gt; &#xA; &lt;li&gt;Such queries are difficult to write by hand.&lt;/li&gt; &#xA; &lt;li&gt;The mangled names are a &lt;em&gt;very&lt;/em&gt; bad fit for &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; types that expect specific column names. After all, if the &lt;code&gt;Team&lt;/code&gt; record type can read &lt;code&gt;SELECT * FROM team ...&lt;/code&gt;, it should be able to read &lt;code&gt;SELECT ..., team.*, ...&lt;/code&gt; as well.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We thus need another technique. &lt;strong&gt;Below we&#39;ll see how to split rows into slices, and preserve column names.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SELECT player.*, team.*, MAX(round.score) AS maxScore FROM ...&lt;/code&gt; will be split into three slices: one that contains player&#39;s columns, one that contains team&#39;s columns, and a remaining slice that contains remaining column(s). The Player record type will be able to read the first slice, which contains the columns expected by the &lt;code&gt;Player.init(row:)&lt;/code&gt; initializer. In the same way, the Team record type could read the second slice.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the name-mangling technique, splitting rows keeps SQL legible, accepts your hand-crafted SQL queries, and plays as nicely as possible with your existing &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;record types&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-an-introduction&#34;&gt;Splitting Rows, an Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-record-way&#34;&gt;Splitting Rows, the Record Way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-codable-way&#34;&gt;Splitting Rows, the Codable Way&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Splitting Rows, an Introduction&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s first write some introductory code, hoping that this chapter will make you understand how pieces fall together. We&#39;ll see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-record-way&#34;&gt;later&lt;/a&gt; how records will help us streamline the initial approach, how to track changes in joined requests, and how we can use the standard Decodable protocol.&lt;/p&gt; &#xA;&lt;p&gt;To split rows, we will use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;row adapters&lt;/a&gt;. Row adapters adapt rows so that row consumers see exactly the columns they want. Among other things, row adapters can define several &lt;em&gt;row scopes&lt;/em&gt; that give access to as many &lt;em&gt;row slices&lt;/em&gt;. Sounds like a perfect match.&lt;/p&gt; &#xA;&lt;p&gt;At the very beginning, there is an SQL query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    let sql = &#34;&#34;&#34;&#xA;        SELECT player.*, team.*, MAX(round.score) AS maxScore&#xA;        FROM player&#xA;        LEFT JOIN team ON ...&#xA;        LEFT JOIN round ON ...&#xA;        GROUP BY ...&#xA;        &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We need an adapter that extracts player columns, in a slice that has as many columns as there are columns in the player table. That&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rangerowadapter&#34;&gt;RangeRowAdapter&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // SELECT player.*, team.*, ...&#xA;    //        &amp;lt;------&amp;gt;&#xA;    let playerWidth = try db.columns(in: &#34;player&#34;).count&#xA;    let playerAdapter = RangeRowAdapter(0 ..&amp;lt; playerWidth)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also need an adapter that extracts team columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // SELECT player.*, team.*, ...&#xA;    //                  &amp;lt;----&amp;gt;&#xA;    let teamWidth = try db.columns(in: &#34;team&#34;).count&#xA;    let teamAdapter = RangeRowAdapter(playerWidth ..&amp;lt; (playerWidth + teamWidth))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We merge those two adapters in a single &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#scopeadapter&#34;&gt;ScopeAdapter&lt;/a&gt; that will allow us to access both sliced rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    let playerScope = &#34;player&#34;&#xA;    let teamScope = &#34;team&#34;&#xA;    let adapter = ScopeAdapter([&#xA;        playerScope: playerAdapter,&#xA;        teamScope: teamAdapter])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now we can fetch, and start consuming our rows. You already know &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-rows&#34;&gt;row cursors&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    let rows = try Row.fetchCursor(db, sql: sql, adapter: adapter)&#xA;    while let row = try rows.next() {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From a fetched row, we can build a player:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        let player: Player = row[playerScope]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the SQL query, the team is joined with the &lt;code&gt;LEFT JOIN&lt;/code&gt; operator. This means that the team may be missing: its slice may contain team values, or it may only contain NULLs. When this happens, we don&#39;t want to build a Team record, and we thus load an &lt;em&gt;optional&lt;/em&gt; Team:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        let team: Team? = row[teamScope]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally, we can load the maximum score, assuming that the &#34;maxScore&#34; column is not ambiguous:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        let maxScore: Int = row[&#34;maxScore&#34;]&#xA;        &#xA;        print(&#34;player: \(player)&#34;)&#xA;        print(&#34;team: \(team)&#34;)&#xA;        print(&#34;maxScore: \(maxScore)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; In this chapter, we have learned:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;how to use &lt;code&gt;RangeRowAdapter&lt;/code&gt; to extract a specific table&#39;s columns into a &lt;em&gt;row slice&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;how to use &lt;code&gt;ScopeAdapter&lt;/code&gt; to gives access to several row slices through named scopes.&lt;/li&gt; &#xA;  &lt;li&gt;how to use Row subscripting to extract records from rows, or optional records in order to deal with left joins.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Splitting Rows, the Record Way&lt;/h3&gt; &#xA;&lt;p&gt;Our introduction above has introduced important techniques. It uses &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;row adapters&lt;/a&gt; in order to split rows. It uses Row subscripting in order to extract records from row slices.&lt;/p&gt; &#xA;&lt;p&gt;But we may want to make it more usable and robust:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It&#39;s generally easier to consume records than raw rows.&lt;/li&gt; &#xA; &lt;li&gt;Joined records not always need all columns from a table (see &lt;code&gt;TableRecord.databaseSelection&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Building row adapters is long and error prone.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To address the first bullet, let&#39;s define a record that holds our player, optional team, and maximum score. Since it can decode database rows, it adopts the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct PlayerInfo {&#xA;    var player: Player&#xA;    var team: Team?&#xA;    var maxScore: Int&#xA;}&#xA;&#xA;/// PlayerInfo can decode rows:&#xA;extension PlayerInfo: FetchableRecord {&#xA;    private enum Scopes {&#xA;        static let player = &#34;player&#34;&#xA;        static let team = &#34;team&#34;&#xA;    }&#xA;    &#xA;    init(row: Row) {&#xA;        player = row[Scopes.player]&#xA;        team = row[Scopes.team]&#xA;        maxScore = row[&#34;maxScore&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we write a method that returns a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-requests&#34;&gt;custom request&lt;/a&gt;, and then build the fetching method on top of that request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension PlayerInfo {&#xA;    /// The request for all player infos&#xA;    static func all() -&amp;gt; AdaptedFetchRequest&amp;lt;SQLRequest&amp;lt;PlayerInfo&amp;gt;&amp;gt; {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To acknowledge that both Player and Team records may customize their selection of the &#34;player&#34; and &#34;team&#34; columns, we&#39;ll write our SQL in a slightly different way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        // Let Player and Team customize their selection:&#xA;        let request: SQLRequest&amp;lt;PlayerInfo&amp;gt; = &#34;&#34;&#34;&#xA;            SELECT&#xA;                \(columnsOf: Player.self), -- instead of player.*&#xA;                \(columnsOf: Team.self),   -- instead of team.*&#xA;                MAX(round.score) AS maxScore&#xA;            FROM player&#xA;            LEFT JOIN team ON ...&#xA;            LEFT JOIN round ON ...&#xA;            GROUP BY ...&#xA;            &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our SQL is no longer a regular String, but an &lt;code&gt;SQLRequest&amp;lt;PlayerInfo&amp;gt;&lt;/code&gt; which profits from &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;. Inside this request, &lt;code&gt;\(columnsOf: Player.self)&lt;/code&gt; outputs &lt;code&gt;player.*&lt;/code&gt;, unless Player defines a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;customized selection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now we need to build adapters.&lt;/p&gt; &#xA;&lt;p&gt;We use the &lt;code&gt;splittingRowAdapters&lt;/code&gt; global function, whose job is precisely to build row adapters of desired widths:&lt;/p&gt; &#xA;&lt;p&gt;And since counting table columns require a database connection, we use the &lt;code&gt;adapted(_:)&lt;/code&gt; request method. It allows requests to adapt themselves right before execution, when a database connection is available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        return request.adapted { db in&#xA;            let adapters = try splittingRowAdapters(columnCounts: [&#xA;                Player.numberOfSelectedColumns(db),&#xA;                Team.numberOfSelectedColumns(db)])&#xA;            return ScopeAdapter([&#xA;                Scopes.player: adapters[0],&#xA;                Scopes.team: adapters[1]])&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;splittingRowAdapters&lt;/code&gt; returns as many adapters as necessary to fully split a row. In the example above, it returns &lt;em&gt;three&lt;/em&gt; adapters: one for player, one for team, and one for the remaining columns.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;And finally, we can define the fetching method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    /// Fetches all player infos&#xA;    static func fetchAll(_ db: Database) throws -&amp;gt; [PlayerInfo] {&#xA;        try all().fetchAll(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And when your app needs to fetch player infos, it now reads:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Fetch player infos&#xA;let playerInfos = try dbQueue.read { db in&#xA;    try PlayerInfo.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; In this chapter, we have learned:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;how to define a &lt;code&gt;FetchableRecord&lt;/code&gt; record that consumes rows fetched from a joined query.&lt;/li&gt; &#xA;  &lt;li&gt;how to use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt; and &lt;code&gt;numberOfSelectedColumns&lt;/code&gt; in order to deal with nested record types that define custom selection.&lt;/li&gt; &#xA;  &lt;li&gt;how to use &lt;code&gt;splittingRowAdapters&lt;/code&gt; in order to streamline the definition of row slices.&lt;/li&gt; &#xA;  &lt;li&gt;how to gather all relevant methods and constants in a record type, fully responsible of its relationship with the database.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Splitting Rows, the Codable Way&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; build on top of the standard Decodable protocol in order to decode database rows.&lt;/p&gt; &#xA;&lt;p&gt;You can consume complex joined queries with Codable records as well. As a demonstration, we&#39;ll rewrite the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-record-way&#34;&gt;above&lt;/a&gt; sample code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Decodable, FetchableRecord, TableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;}&#xA;struct Team: Decodable, FetchableRecord, TableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var color: Color&#xA;}&#xA;struct PlayerInfo: Decodable, FetchableRecord {&#xA;    var player: Player&#xA;    var team: Team?&#xA;    var maxScore: Int&#xA;}&#xA;&#xA;extension PlayerInfo {&#xA;    /// The request for all player infos&#xA;    static func all() -&amp;gt; AdaptedFetchRequest&amp;lt;SQLRequest&amp;lt;PlayerInfo&amp;gt;&amp;gt; {&#xA;        let request: SQLRequest&amp;lt;PlayerInfo&amp;gt; = &#34;&#34;&#34;&#xA;            SELECT&#xA;                \(columnsOf: Player.self),&#xA;                \(columnsOf: Team.self),&#xA;                MAX(round.score) AS maxScore&#xA;            FROM player&#xA;            LEFT JOIN team ON ...&#xA;            LEFT JOIN round ON ...&#xA;            GROUP BY ...&#xA;            &#34;&#34;&#34;&#xA;        return request.adapted { db in&#xA;            let adapters = try splittingRowAdapters(columnCounts: [&#xA;                Player.numberOfSelectedColumns(db),&#xA;                Team.numberOfSelectedColumns(db)])&#xA;            return ScopeAdapter([&#xA;                CodingKeys.player.stringValue: adapters[0],&#xA;                CodingKeys.team.stringValue: adapters[1]])&#xA;        }&#xA;    }&#xA;    &#xA;    /// Fetches all player infos&#xA;    static func fetchAll(_ db: Database) throws -&amp;gt; [PlayerInfo] {&#xA;        try all().fetchAll(db)&#xA;    }&#xA;}&#xA;&#xA;// Fetch player infos&#xA;let playerInfos = try dbQueue.read { db in&#xA;    try PlayerInfo.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; In this chapter, we have learned how to use the &lt;code&gt;Decodable&lt;/code&gt; protocol and its associated &lt;code&gt;CodingKeys&lt;/code&gt; enum in order to dry up our code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Database Changes Observation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite notifies its host application of changes performed to the database, as well of transaction commits and rollbacks.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GRDB puts this SQLite feature to some good use, and lets you observe the database in various ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#after-commit-hook&#34;&gt;After Commit Hook&lt;/a&gt;: Handle successful transactions one by one.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt;: Track changes of database values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt;: Tracking transactions that impact a database region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactionobserver-protocol&#34;&gt;TransactionObserver Protocol&lt;/a&gt;: Low-level database observation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&#34;&gt;Combine Support&lt;/a&gt;: Automated tracking of database changes, with &lt;a href=&#34;https://developer.apple.com/documentation/combine&#34;&gt;Combine&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;http://github.com/RxSwiftCommunity/RxGRDB&#34;&gt;RxGRDB&lt;/a&gt;: Automated tracking of database changes, with &lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Database observation requires that a single &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-queues&#34;&gt;database queue&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;pool&lt;/a&gt; is kept open for all the duration of the database usage.&lt;/p&gt; &#xA;&lt;h2&gt;After Commit Hook&lt;/h2&gt; &#xA;&lt;p&gt;When your application needs to make sure a specific database transaction has been successfully committed before it executes some work, use the &lt;code&gt;Database.afterNextTransactionCommit(_:)&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;Its closure argument is called right after database changes have been successfully written to disk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    db.afterNextTransactionCommit { db in&#xA;        print(&#34;success&#34;)&#xA;    }&#xA;    ...&#xA;} // prints &#34;success&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The closure runs in a protected dispatch queue, serialized with all database updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This &#34;after commit hook&#34; helps synchronizing the database with other resources, such as files, or system sensors.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the example below, a &lt;a href=&#34;https://developer.apple.com/documentation/corelocation/cllocationmanager&#34;&gt;location manager&lt;/a&gt; starts monitoring a CLRegion if and only if it has successfully been stored in the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Inserts a region in the database, and start monitoring upon&#xA;/// successful insertion.&#xA;func startMonitoring(_ db: Database, region: CLRegion) throws {&#xA;    // Make sure database is inside a transaction&#xA;    try db.inSavepoint {&#xA;        &#xA;        // Save the region in the database&#xA;        try insert(...)&#xA;        &#xA;        // Start monitoring if and only if the insertion is&#xA;        // eventually committed&#xA;        db.afterNextTransactionCommit { _ in&#xA;            // locationManager prefers the main queue:&#xA;            DispatchQueue.main.async {&#xA;                locationManager.startMonitoring(for: region)&#xA;            }&#xA;        }&#xA;        &#xA;        return .commit&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The method above won&#39;t trigger the location manager if the transaction is eventually rollbacked (explicitly, or because of an error), as in the sample code below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    // success&#xA;    try startMonitoring(db, region)&#xA;    &#xA;    // On error, the transaction is rollbacked, the region is not inserted, and&#xA;    // the location manager is not invoked.&#xA;    try failableMethod(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ValueObservation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;ValueObservation tracks changes in database values&lt;/strong&gt;. It automatically notifies your application with fresh values whenever changes are committed in the database.&lt;/p&gt; &#xA;&lt;p&gt;Tracked changes are insertions, updates, and deletions that impact the tracked value, performed with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;raw SQL&lt;/a&gt;. This includes indirect changes triggered by &lt;a href=&#34;https://www.sqlite.org/foreignkeys.html#fk_actions&#34;&gt;foreign keys actions&lt;/a&gt; or &lt;a href=&#34;https://www.sqlite.org/lang_createtrigger.html&#34;&gt;SQL triggers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Some changes are not notified: changes to internal system tables (such as &lt;code&gt;sqlite\_master&lt;/code&gt;), and changes to &lt;a href=&#34;https://www.sqlite.org/withoutrowid.html&#34;&gt;&lt;code&gt;WITHOUT ROWID&lt;/code&gt;&lt;/a&gt; tables.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;ValueObservation is the preferred GRDB tool for keeping your user interface synchronized with the database.&lt;/strong&gt; See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-usage&#34;&gt;ValueObservation Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-scheduling&#34;&gt;ValueObservation Scheduling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-operators&#34;&gt;ValueObservation Operators&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationmap&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationremoveduplicates&#34;&gt;removeDuplicates&lt;/a&gt;, ...&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-sharing&#34;&gt;ValueObservation Sharing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#specifying-the-region-tracked-by-valueobservation&#34;&gt;Specifying the Region Tracked by ValueObservation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-performance&#34;&gt;ValueObservation Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md#database-observation&#34;&gt;Combine Publisher&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ValueObservation Usage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that a unique &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt; is kept open during the whole duration of the observation.&lt;/p&gt; &lt;p&gt;ValueObservation does not notify changes performed by external connections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Define a ValueObservation by providing a function that fetches the observed value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation.tracking { db in&#xA;    /* fetch and return the observed value */&#xA;}&#xA;&#xA;// For example, an observation of [Player], which tracks all players:&#xA;let observation = ValueObservation.tracking { db in&#xA;    try Player.fetchAll(db)&#xA;}&#xA;&#xA;// The same observation, using shorthand notation:&#xA;let observation = ValueObservation.tracking(Player.fetchAll)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The observation can perform multiple requests, from multiple database tables, and even use raw SQL.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Example of a more complex ValueObservation&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct HallOfFame {&#xA;    var totalPlayerCount: Int&#xA;    var bestPlayers: [Player]&#xA;}&#xA;&#xA;// An observation of HallOfFame&#xA;let observation = ValueObservation.tracking { db -&amp;gt; HallOfFame in&#xA;    let totalPlayerCount = try Player.fetchCount(db)&#xA;    &#xA;    let bestPlayers = try Player&#xA;        .order(Column(&#34;score&#34;).desc)&#xA;        .limit(10)&#xA;        .fetchAll(db)&#xA;    &#xA;    return HallOfFame(&#xA;        totalPlayerCount: totalPlayerCount,&#xA;        bestPlayers: bestPlayers)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Example of a SQL ValueObservation&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// An observation of the maximum score&#xA;let observation = ValueObservation.tracking { db in&#xA;    try Int.fetchOne(db, sql: &#34;SELECT MAX(score) FROM player&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the observation in order to be notified of changes:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Start observing the database&#xA;let cancellable: DatabaseCancellable = observation.start(&#xA;    in: dbQueue, // or dbPool&#xA;    onError: { error in print(&#34;players could not be fetched&#34;) },&#xA;    onChange: { (players: [Player]) in print(&#34;fresh players&#34;, players) })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Stop the observation by calling the &lt;code&gt;cancel()&lt;/code&gt; method on the object returned by the &lt;code&gt;start&lt;/code&gt; method. Cancellation is automatic when the cancellable is deinitialized:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;cancellable.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;As a convenience&lt;/strong&gt;, ValueObservation can be turned into an async sequence, a Combine publisher, or an RxSwift observable:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Async sequence example&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;&lt;strong&gt;&lt;span&gt;üî•&lt;/span&gt; EXPERIMENTAL&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation.tracking(Player.fetchAll)&#xA;for try await players in observation.values(in: dbQueue) {&#xA;    print(&#34;fresh players&#34;, players)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Combine example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Combine&#xA;import GRDB&#xA;&#xA;let observation = ValueObservation.tracking(Player.fetchAll)&#xA;&#xA;let cancellable = observation.publisher(in: dbQueue).sink(&#xA;    receiveCompletion: { completion in ... },&#xA;    receiveValue: { (players: [Player]) in&#xA;        print(&#34;fresh players&#34;, players)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&#34;&gt;Combine Support&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;RxSwift example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;import RxGRDB&#xA;import RxSwift&#xA;&#xA;let observation = ValueObservation.tracking(Player.fetchAll)&#xA;&#xA;let disposable = observation.rx.observe(in: dbQueue).subscribe(&#xA;    onNext: { (players: [Player]) in&#xA;        print(&#34;fresh players&#34;, players)&#xA;    },&#xA;    onError: { error in ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See the companion library &lt;a href=&#34;http://github.com/RxSwiftCommunity/RxGRDB&#34;&gt;RxGRDB&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Generally speaking&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ValueObservation notifies an initial value before the eventual changes.&lt;/li&gt; &#xA; &lt;li&gt;ValueObservation only notifies changes committed to disk.&lt;/li&gt; &#xA; &lt;li&gt;By default, ValueObservation notifies a fresh value whenever any of its component is modified (any fetched column, row, etc.). This can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#specifying-the-region-tracked-by-valueobservation&#34;&gt;configured&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By default, ValueObservation notifies the initial value, as well as eventual changes and errors, on the main thread, asynchronously. This can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-scheduling&#34;&gt;configured&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ValueObservation may coalesce subsequent changes into a single notification.&lt;/li&gt; &#xA; &lt;li&gt;ValueObservation may notify consecutive identical values. You can filter out the undesired duplicates with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationremoveduplicates&#34;&gt;removeDuplicates&lt;/a&gt; method.&lt;/li&gt; &#xA; &lt;li&gt;Starting an observation retains the database connection, until it is stopped. As long as the observation is active, the database connection won&#39;t be deallocated.&lt;/li&gt; &#xA; &lt;li&gt;The database observation stops when any of those conditions is met: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The cancellable returned by the &lt;code&gt;start&lt;/code&gt; method is cancelled or deinitialized.&lt;/li&gt; &#xA;   &lt;li&gt;An error occurs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Take care that there are use cases that ValueObservation is unfit for. For example, your application may need to process absolutely all changes, and avoid any coalescing. It may also need to process changes before any further modifications are performed in the database file. In those cases, you need to track &lt;em&gt;individual transactions&lt;/em&gt;, not values. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt;. If you need to process uncommitted changes, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactionobserver-protocol&#34;&gt;TransactionObserver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ValueObservation Scheduling&lt;/h3&gt; &#xA;&lt;p&gt;By default, ValueObservation notifies the initial value, as well as eventual changes and errors, on the main thread, asynchronously:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// The default scheduling&#xA;let cancellable = observation.start(&#xA;    in: dbQueue,&#xA;    onError: { error in ... },                   // called asynchronously on the main thread&#xA;    onChange: { value in print(&#34;fresh value&#34;) }) // called asynchronously on the main thread&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change this behavior by adding a &lt;code&gt;scheduling&lt;/code&gt; argument to the &lt;code&gt;start()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;scheduling: .immediate&lt;/code&gt; makes sure the initial value is notified immediately when the observation starts. It helps your application update the user interface without having to wait for any asynchronous notifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PlayersViewController: UIViewController {&#xA;    private var cancellable: DatabaseCancellable?&#xA;    &#xA;    override func viewWillAppear(_ animated: Bool) {&#xA;        super.viewWillAppear(animated)&#xA;        &#xA;        // Start observing the database&#xA;        let observation = ValueObservation.tracking(Player.fetchAll)&#xA;        cancellable = observation.start(&#xA;            in: dbQueue,&#xA;            scheduling: .immediate, // &amp;lt;- immediate scheduler&#xA;            onError: { error in ... },&#xA;            onChange: { [weak self] (players: [Player]) in&#xA;                guard let self = self else { return }&#xA;                self.updateView(players)&#xA;            })&#xA;        // &amp;lt;- Here the view has already been updated.&#xA;    }&#xA;    &#xA;    override func viewWillDisappear(_ animated: Bool) {&#xA;        super.viewWillDisappear(animated)&#xA;    &#xA;        // Stop observing the database&#xA;        cancellable?.cancel()&#xA;    }&#xA;    &#xA;    private func updateView(_ players: [Player]) { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;.immediate&lt;/code&gt; scheduling requires that the observation starts from the main thread. A fatal error is raised otherwise.&lt;/p&gt; &#xA;&lt;p&gt;The other built-in scheduler &lt;code&gt;.async(onQueue:)&lt;/code&gt; asynchronously schedules values and errors on the dispatch queue of your choice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let queue: DispatchQueue = ...&#xA;let cancellable = observation.start(&#xA;    in: dbQueue,&#xA;    scheduling: .async(onQueue: queue)&#xA;    onError: { error in ... },                   // called asynchronously on queue&#xA;    onChange: { value in print(&#34;fresh value&#34;) }) // called asynchronously on queue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ValueObservation Operators&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Operators&lt;/strong&gt; are methods that transform and configure value observations so that they better fit the needs of your application.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationmap&#34;&gt;ValueObservation.map&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationremoveduplicates&#34;&gt;ValueObservation.removeDuplicates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationrequireswriteaccess&#34;&gt;ValueObservation.requiresWriteAccess&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debugging Operators&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationhandleevents&#34;&gt;ValueObservation.handleEvents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationprint&#34;&gt;ValueObservation.print&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ValueObservation.map&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;map&lt;/code&gt; operator transforms the values notified by a ValueObservation.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Turn an observation of Player? into an observation of UIImage?&#xA;let observation = ValueObservation&#xA;    .tracking { db in try Player.fetchOne(db, id: 42) }&#xA;    .map { player in player?.image }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The transformation function does not block any database access. This makes the &lt;code&gt;map&lt;/code&gt; operator a tool which helps reducing &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-performance&#34;&gt;database contention&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ValueObservation.removeDuplicates&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;removeDuplicates()&lt;/code&gt; and &lt;code&gt;removeDuplicates(by:)&lt;/code&gt; operators filter out consecutive equal values:&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// An observation of distinct Player?&#xA;let observation = ValueObservation&#xA;    .tracking { db in try Player.fetchOne(db, id: 42) }&#xA;    .removeDuplicates()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: When the observed value does not adopt Equatable, and it is impractical to provide a custom comparison function, you can observe distinct raw database values such as &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;Row&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;, before converting them to the desired type. For example, the previous observation can be rewritten as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// An observation of distinct Player?&#xA;let request = Player.filter(id: 42)&#xA;let observation = ValueObservation&#xA;    .tracking { db in try Row.fetchOne(db, request) }&#xA;    .removeDuplicates() // Row adopts Equatable&#xA;    .map { row in row.map(Player.init(row:) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This technique is also available for requests that involve &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct TeamInfo: Decodable, FetchableRecord {&#xA;    var team: Team&#xA;    var players: [Player]&#xA;}&#xA;&#xA;// An observation of distinct [TeamInfo]&#xA;let request = Team.including(all: Team.players)&#xA;let observation = ValueObservation&#xA;    .tracking { db in try Row.fetchAll(db, request) }&#xA;    .removeDuplicates() // Row adopts Equatable&#xA;    .map { rows in rows.map(TeamInfo.init(row:) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ValueObservation.requiresWriteAccess&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;requiresWriteAccess&lt;/code&gt; property is false by default. When true, a ValueObservation has a write access to the database, and its fetches are automatically wrapped in a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;savepoint&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var observation = ValueObservation.tracking { db in&#xA;    // write access allowed&#xA;    ...&#xA;}&#xA;observation.requiresWriteAccess = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pool&lt;/a&gt;, this flag has a performance hit.&lt;/p&gt; &#xA;&lt;h4&gt;ValueObservation.handleEvents&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;handleEvents&lt;/code&gt; operator lets your application observe the lifetime of a ValueObservation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation&#xA;    .tracking { db in ... }&#xA;    .handleEvents(&#xA;        willStart: {&#xA;            // The observation starts.&#xA;        },&#xA;        willFetch: {&#xA;            // The observation will perform a database fetch.&#xA;        },&#xA;        willTrackRegion: { databaseRegion in&#xA;            // The observation starts tracking a database region.&#xA;        },&#xA;        databaseDidChange: {&#xA;            // The observation was impacted by a database change.&#xA;        },&#xA;        didReceiveValue: { value in&#xA;            // A fresh value was observed.&#xA;            // NOTE: This closure runs on an unspecified DispatchQueue.&#xA;        },&#xA;        didFail: { error in&#xA;            // The observation completes with an error.&#xA;        },&#xA;        didCancel: {&#xA;            // The observation was cancelled.&#xA;        })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationprint&#34;&gt;ValueObservation.print&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ValueObservation.print&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; operator logs messages for all ValueObservation events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation&#xA;    .tracking { db in ... }&#xA;    .print()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationhandleevents&#34;&gt;ValueObservation.handleEvents&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ValueObservation Sharing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;&lt;strong&gt;&lt;span&gt;üî•&lt;/span&gt; EXPERIMENTAL&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sharing a ValueObservation allows several components of your app to be notified of database changes, in an efficient way.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A shared observation spares database resources. For example, when a database change happens, a fresh value is fetched only once, and then notified to all subscriptions.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SharedValueObservation&amp;lt;[Player]&amp;gt;&#xA;let sharedObservation = ValueObservation&#xA;    .tracking { db in try Player.fetchAll(db) }&#xA;    .shared(in: dbQueue)&#xA;//  ~~~~~~~~~~~~~~~~~~~~&#xA;    &#xA;let cancellable = try sharedObservation.start(&#xA;    onError: { error in ... },&#xA;    onChange: { players: [Player] in&#xA;        print(&#34;fresh players: \(players)&#34;)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The sharing only applies if you start observing the database from the same &lt;code&gt;SharedValueObservation&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// NOT shared&#xA;let cancellable1 = ValueObservation.tracking { db in ... }.shared(in: dbQueue).start(...)&#xA;let cancellable2 = ValueObservation.tracking { db in ... }.shared(in: dbQueue).start(...)&#xA;&#xA;// Shared&#xA;let sharedObservation = ValueObservation.tracking { db in ... }.shared(in: dbQueue)&#xA;let cancellable1 = sharedObservation.start(...)&#xA;let cancellable2 = sharedObservation.start(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, fresh values are dispatched asynchronously on the main queue. You can change this behavior (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-scheduling&#34;&gt;ValueObservation Scheduling&lt;/a&gt; for more information):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sharedObservation = ValueObservation&#xA;    .tracking { db in try Player.fetchAll(db) }&#xA;    .shared(in: dbQueue, scheduling: .immediate)&#xA;//                       ~~~~~~~~~~~~~~~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A shared observation starts observing the database as soon as it is subscribed. You can choose if database observation should stop, or not, when its number of subscriptions drops down to zero, with the &lt;code&gt;extent&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// The default: stops observing the database when the number of subscriptions &#xA;// drops down to zero, and restart database observation on the next subscription.&#xA;//&#xA;// Database errors can be recovered by resubscribing to the shared observation.&#xA;let sharedObservation = ValueObservation&#xA;    .tracking { db in try Player.fetchAll(db) }&#xA;    .shared(in: dbQueue, extent: .whileObserved)&#xA;//                       ~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;// Only stops observing the database when the shared observation is deinitialized,&#xA;// and all subscriptions are cancelled.&#xA;//&#xA;// This extent prevents the shared observation from recovering from database&#xA;// errors. To recover from database errors, create a new shared&#xA;// SharedValueObservation instance.&#xA;let sharedObservation = ValueObservation&#xA;    .tracking { db in try Player.fetchAll(db) }&#xA;    .shared(in: dbQueue, extent: .observationLifetime)&#xA;//                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;ValueObservation&lt;/code&gt; and &lt;code&gt;SharedValueObservation&lt;/code&gt; are nearly identical, but there is a difference you should be aware of. &lt;code&gt;SharedValueObservation&lt;/code&gt; has no &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-operators&#34;&gt;operator&lt;/a&gt; such as &lt;code&gt;map&lt;/code&gt;. As a replacement, you may, for example, use Combine apis:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sharedObservation = ValueObservation.tracking { ... }.shared(in: dbQueue)&#xA;let cancellable = try sharedObservation&#xA;    .publisher() // Turn shared observation into a Combine Publisher&#xA;    .map { ... } // The map operator from Combine&#xA;    .sink(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Specifying the Region Tracked by ValueObservation&lt;/h3&gt; &#xA;&lt;p&gt;While the standard &lt;code&gt;ValueObservation.tracking { db in ... }&lt;/code&gt; method lets you track changes to a fetched value and receive any changes to it, sometimes your use case might require more granular control.&lt;/p&gt; &#xA;&lt;p&gt;Consider a scenario where you&#39;d like to get a specific Player&#39;s row, but only when their &lt;code&gt;score&lt;/code&gt; column changes. You can use &lt;code&gt;tracking(region:fetch:)&lt;/code&gt; to do just that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation.tracking(&#xA;    // Define what database region constitutes a &#34;change&#34;&#xA;    region: Player.select(Column(&#34;score&#34;)).filter(id: 1),&#xA;    // Define what to fetch upon such change&#xA;    fetch: { db in try Player.fetchOne(db, id: 1) }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This overload of &lt;code&gt;ValueObservation&lt;/code&gt; lets you entirely separate the &lt;strong&gt;observed region&lt;/strong&gt; from the &lt;strong&gt;fetched value&lt;/strong&gt; itself, providing utmost flexibility. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databaseregionconvertible-protocol&#34;&gt;DatabaseRegionConvertible&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;ValueObservation Performance&lt;/h3&gt; &#xA;&lt;p&gt;This chapter further describes runtime aspects of ValueObservation, and provides some optimization tips for demanding applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ValueObservation is triggered by database transactions that may modify the tracked value.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, if you track the maximum score of players, all transactions that impact the &lt;code&gt;score&lt;/code&gt; column of the &lt;code&gt;player&lt;/code&gt; database table (any update, insertion, or deletion) trigger the observation, even if the maximum score itself is not changed.&lt;/p&gt; &#xA;&lt;p&gt;You can filter out undesired duplicate notifications with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationremoveduplicates&#34;&gt;removeDuplicates&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ValueObservation can create database contention.&lt;/strong&gt; In other words, active observations take a toll on the constrained database resources. When triggered by impactful transactions, observations fetch fresh values, and can delay read and write database accesses of other application components.&lt;/p&gt; &#xA;&lt;p&gt;When needed, you can help GRDB optimize observations and reduce database contention:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Stop observations when possible.&lt;/p&gt; &lt;p&gt;For example, if a UIViewController needs to display database values, it can start the observation in &lt;code&gt;viewWillAppear&lt;/code&gt;, and stop it in &lt;code&gt;viewWillDisappear&lt;/code&gt;. Check the sample code &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-scheduling&#34;&gt;above&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Share observations when possible.&lt;/p&gt; &lt;p&gt;Each call to &lt;code&gt;ValueObservation.start&lt;/code&gt; method triggers independent values refreshes. When several components of your app are interested in the same value, consider &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-sharing&#34;&gt;sharing the observation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pool&lt;/a&gt;, because it can perform multi-threaded database accesses.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: When the observation processes some raw fetched values, use the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationmap&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; operator:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Plain observation&#xA;let observation = ValueObservation.tracking { db -&amp;gt; MyValue in&#xA;    let players = try Player.fetchAll(db)&#xA;    return computeMyValue(players)&#xA;}&#xA;&#xA;// Optimized observation&#xA;let observation = ValueObservation&#xA;    .tracking { db try Player.fetchAll(db) }&#xA;    .map { players in computeMyValue(players) }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;map&lt;/code&gt; operator helps reducing database contention because it performs its job without blocking concurrent database reads.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: When the observation tracks a constant database region, create an optimized observation with the &lt;code&gt;ValueObservation.trackingConstantRegion(_:)&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;The optimization only kicks in when the observation is started from a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pool&lt;/a&gt;: fresh values are fetched concurrently, and do not block database writes.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ValueObservation.trackingConstantRegion(_:)&lt;/code&gt; has a precondition: the observed requests must fetch from a single and constant database region. The tracked region is made of tables, columns, and, when possible, rowids of individual rows. All changes that happen outside of this region do not impact the observation.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Tracks the full &#39;player&#39; table (only)&#xA;let observation = ValueObservation.trackingConstantRegion { db -&amp;gt; [Player] in&#xA;    try Player.fetchAll(db)&#xA;}&#xA;&#xA;// Tracks the row with id 42 in the &#39;player&#39; table (only)&#xA;let observation = ValueObservation.trackingConstantRegion { db -&amp;gt; Player? in&#xA;    try Player.fetchOne(db, id: 42)&#xA;}&#xA;&#xA;// Tracks the &#39;score&#39; column in the &#39;player&#39; table (only)&#xA;let observation = ValueObservation.trackingConstantRegion { db -&amp;gt; Int? in&#xA;    try Player.select(max(Column(&#34;score&#34;))).fetchOne(db)&#xA;}&#xA;&#xA;// Tracks both the &#39;player&#39; and &#39;team&#39; tables (only)&#xA;let observation = ValueObservation.trackingConstantRegion { db -&amp;gt; ([Team], [Player]) in&#xA;    let teams = try Team.fetchAll(db)&#xA;    let players = try Player.fetchAll(db)&#xA;    return (teams, players)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you want to observe a varying database region, make sure you use the plain &lt;code&gt;ValueObservation.tracking(_:)&lt;/code&gt; method instead, or else some changes will not be notified.&lt;/p&gt; &lt;p&gt;For example, consider those three observations below that depend on some user preference. They all track a varying region, and must use &lt;code&gt;ValueObservation.tracking(_:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Does not always track the same row in the player table.&#xA;let observation = ValueObservation.tracking { db -&amp;gt; Player? in&#xA;    let pref = try Preference.fetchOne(db) ?? .default&#xA;    return try Player.fetchOne(db, id: pref.favoritePlayerId)&#xA;}&#xA;&#xA;// Only tracks the &#39;user&#39; table if there are some blocked emails.&#xA;let observation = ValueObservation.tracking { db -&amp;gt; [User] in&#xA;    let pref = try Preference.fetchOne(db) ?? .default&#xA;    let blockedEmails = pref.blockedEmails&#xA;    return try User.filter(blockedEmails.contains(Column(&#34;email&#34;))).fetchAll(db)&#xA;}&#xA;&#xA;// Sometimes tracks the &#39;food&#39; table, and sometimes the &#39;beverage&#39; table.&#xA;let observation = ValueObservation.tracking { db -&amp;gt; Int in&#xA;    let pref = try Preference.fetchOne(db) ?? .default&#xA;    switch pref.selection {&#xA;    case .food: return try Food.fetchCount(db)&#xA;    case .beverage: return try Beverage.fetchCount(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you are in doubt, add the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationprint&#34;&gt;&lt;code&gt;print()&lt;/code&gt; method&lt;/a&gt; to your observation before starting it, and look in your application logs for lines that start with &lt;code&gt;tracked region&lt;/code&gt;. Make sure the printed database region covers the changes you expect to be tracked.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Examples of tracked regions&lt;/summary&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;empty&lt;/code&gt;: The empty region, which tracks nothing and never triggers the observation.&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;player(*)&lt;/code&gt;: The full &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;player(id,name)&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;player(id,name)[1]&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the row with id 1 in the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;player(*),preference(*)&lt;/code&gt;: Both the full &lt;code&gt;player&lt;/code&gt; and &lt;code&gt;preference&lt;/code&gt; tables&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;DatabaseRegionObservation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;DatabaseRegionObservation tracks changes in database &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt;, and notifies each impactful &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;transaction&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tracked changes are insertions, updates, and deletions that impact the tracked requests, performed with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;raw SQL&lt;/a&gt;. This includes indirect changes triggered by &lt;a href=&#34;https://www.sqlite.org/foreignkeys.html#fk_actions&#34;&gt;foreign keys actions&lt;/a&gt; or &lt;a href=&#34;https://www.sqlite.org/lang_createtrigger.html&#34;&gt;SQL triggers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Some changes are not notified: changes to internal system tables (such as &lt;code&gt;sqlite_master&lt;/code&gt;), and changes to &lt;a href=&#34;https://www.sqlite.org/withoutrowid.html&#34;&gt;&lt;code&gt;WITHOUT ROWID&lt;/code&gt;&lt;/a&gt; tables.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;DatabaseRegionObservation calls your application right after changes have been committed in the database, and before any other thread had any opportunity to perform further changes. &lt;em&gt;This is a pretty strong guarantee, that most applications do not really need.&lt;/em&gt; Instead, most applications prefer to be notified with fresh values: make sure you check &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; before using DatabaseRegionObservation.&lt;/p&gt; &#xA;&lt;h3&gt;DatabaseRegionObservation Usage&lt;/h3&gt; &#xA;&lt;p&gt;Define an observation by providing one or several requests to track:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Track all players&#xA;let observation = DatabaseRegionObservation(tracking: Player.all())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then start the observation from a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-queues&#34;&gt;database queue&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;pool&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observer = try observation.start(in: dbQueue) { (db: Database) in&#xA;    print(&#34;Players were changed&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And enjoy the changes notifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try Player(name: &#34;Arthur&#34;).insert(db)&#xA;}&#xA;// Prints &#34;Players were changed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the observation lasts until the observer returned by the &lt;code&gt;start&lt;/code&gt; method is deinitialized. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservationextent&#34;&gt;DatabaseRegionObservation.extent&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;You can also feed DatabaseRegionObservation with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregion&#34;&gt;DatabaseRegion&lt;/a&gt;, or any type which conforms to the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databaseregionconvertible-protocol&#34;&gt;DatabaseRegionConvertible&lt;/a&gt; protocol. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Observe the full database&#xA;let observation = DatabaseRegionObservation(tracking: DatabaseRegion.fullDatabase)&#xA;let observer = try observation.start(in: dbQueue) { (db: Database) in&#xA;    print(&#34;Database was changed&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DatabaseRegionObservation.extent&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;extent&lt;/code&gt; property lets you specify the duration of the observation. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#observation-extent&#34;&gt;Observation Extent&lt;/a&gt; for more details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// This observation lasts until the database connection is closed&#xA;var observation = DatabaseRegionObservation...&#xA;observation.extent = .databaseLifetime&#xA;_ = try observation.start(in: dbQueue) { db in ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default extent is &lt;code&gt;.observerLifetime&lt;/code&gt;: the observation stops when the observer returned by &lt;code&gt;start&lt;/code&gt; is deinitialized.&lt;/p&gt; &#xA;&lt;p&gt;Regardless of the extent of an observation, you can always stop observation with the &lt;code&gt;remove(transactionObserver:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Start&#xA;let observer = try observation.start(in: dbQueue) { db in ... }&#xA;&#xA;// Stop&#xA;dbQueue.remove(transactionObserver: observer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TransactionObserver Protocol&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;TransactionObserver&lt;/code&gt; protocol lets you &lt;strong&gt;observe individual database changes and transactions&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol TransactionObserver : class {&#xA;    /// Notifies a database change:&#xA;    /// - event.kind (insert, update, or delete)&#xA;    /// - event.tableName&#xA;    /// - event.rowID&#xA;    ///&#xA;    /// For performance reasons, the event is only valid for the duration of&#xA;    /// this method call. If you need to keep it longer, store a copy:&#xA;    /// event.copy().&#xA;    func databaseDidChange(with event: DatabaseEvent)&#xA;    &#xA;    /// Filters the database changes that should be notified to the&#xA;    /// `databaseDidChange(with:)` method.&#xA;    func observes(eventsOfKind eventKind: DatabaseEventKind) -&amp;gt; Bool&#xA;    &#xA;    /// An opportunity to rollback pending changes by throwing an error.&#xA;    func databaseWillCommit() throws&#xA;    &#xA;    /// Database changes have been committed.&#xA;    func databaseDidCommit(_ db: Database)&#xA;    &#xA;    /// Database changes have been rollbacked.&#xA;    func databaseDidRollback(_ db: Database)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#activate-a-transaction-observer&#34;&gt;Activate a Transaction Observer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-and-transactions&#34;&gt;Database Changes And Transactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#filtering-database-events&#34;&gt;Filtering Database Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#observation-extent&#34;&gt;Observation Extent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregion&#34;&gt;DatabaseRegion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#support-for-sqlite-pre-update-hooks&#34;&gt;Support for SQLite Pre-Update Hooks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Activate a Transaction Observer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;To activate a transaction observer, add it to the database queue or pool:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observer = MyObserver()&#xA;dbQueue.add(transactionObserver: observer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, database holds weak references to its transaction observers: they are not retained, and stop getting notifications after they are deinitialized. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#observation-extent&#34;&gt;Observation Extent&lt;/a&gt; for more options.&lt;/p&gt; &#xA;&lt;h3&gt;Database Changes And Transactions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A transaction observer is notified of all database changes&lt;/strong&gt;: inserts, updates and deletes. This includes indirect changes triggered by ON DELETE and ON UPDATE actions associated to &lt;a href=&#34;https://www.sqlite.org/foreignkeys.html#fk_actions&#34;&gt;foreign keys&lt;/a&gt;, and &lt;a href=&#34;https://www.sqlite.org/lang_createtrigger.html&#34;&gt;SQL triggers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Some changes are not notified: changes to internal system tables (such as &lt;code&gt;sqlite_master&lt;/code&gt;), changes to &lt;a href=&#34;https://www.sqlite.org/withoutrowid.html&#34;&gt;&lt;code&gt;WITHOUT ROWID&lt;/code&gt;&lt;/a&gt; tables, and the deletion of duplicate rows triggered by &lt;a href=&#34;https://www.sqlite.org/lang_conflict.html&#34;&gt;&lt;code&gt;ON CONFLICT REPLACE&lt;/code&gt;&lt;/a&gt; clauses (this last exception might change in a future release of SQLite).&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Transactions performed during read-only database accesses are not notified.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Notified changes are not actually written to disk until the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;transaction&lt;/a&gt; commits, and the &lt;code&gt;databaseDidCommit&lt;/code&gt; callback is called. On the other side, &lt;code&gt;databaseDidRollback&lt;/code&gt; confirms their invalidation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;INSERT ...&#34;) // 1. didChange&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;) // 2. didChange&#xA;}                                     // 3. willCommit, 4. didCommit&#xA;&#xA;try dbQueue.inTransaction { db in&#xA;    try db.execute(sql: &#34;INSERT ...&#34;) // 1. didChange&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;) // 2. didChange&#xA;    return .rollback                  // 3. didRollback&#xA;}&#xA;&#xA;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;INSERT ...&#34;) // 1. didChange&#xA;    throw SomeError()&#xA;}                                     // 2. didRollback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Database statements that are executed outside of any transaction do not drop off the radar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.inDatabase { db in&#xA;    try db.execute(sql: &#34;INSERT ...&#34;) // 1. didChange, 2. willCommit, 3. didCommit&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;) // 4. didChange, 5. willCommit, 6. didCommit&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Changes that are on hold because of a &lt;a href=&#34;https://www.sqlite.org/lang_savepoint.html&#34;&gt;savepoint&lt;/a&gt; are only notified after the savepoint has been released. This makes sure that notified events are only events that have an opportunity to be committed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.inTransaction { db in&#xA;    try db.execute(sql: &#34;INSERT ...&#34;)            // 1. didChange&#xA;    &#xA;    try db.execute(sql: &#34;SAVEPOINT foo&#34;)&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;)            // delayed&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;)            // delayed&#xA;    try db.execute(sql: &#34;RELEASE SAVEPOINT foo&#34;) // 2. didChange, 3. didChange&#xA;    &#xA;    try db.execute(sql: &#34;SAVEPOINT foo&#34;)&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;)            // not notified&#xA;    try db.execute(sql: &#34;ROLLBACK TO SAVEPOINT foo&#34;)&#xA;    &#xA;    return .commit                               // 4. willCommit, 5. didCommit&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Eventual errors&lt;/strong&gt; thrown from &lt;code&gt;databaseWillCommit&lt;/code&gt; are exposed to the application code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try dbQueue.inTransaction { db in&#xA;        ...&#xA;        return .commit           // 1. willCommit (throws), 2. didRollback&#xA;    }&#xA;} catch {&#xA;    // 3. The error thrown by the transaction observer.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: all callbacks are called in a protected dispatch queue, and serialized with all database updates.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the databaseDidChange(with:) and databaseWillCommit() callbacks must not touch the SQLite database. This limitation does not apply to databaseDidCommit and databaseDidRollback which can use their database argument.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; are based on the TransactionObserver protocol.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://gist.github.com/groue/2e21172719e634657dfd&#34;&gt;TableChangeObserver.swift&lt;/a&gt;, which shows a transaction observer that notifies of modified database tables with NSNotificationCenter.&lt;/p&gt; &#xA;&lt;h3&gt;Filtering Database Events&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Transaction observers can avoid being notified of database changes they are not interested in.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The filtering happens in the &lt;code&gt;observes(eventsOfKind:)&lt;/code&gt; method, which tells whether the observer wants notification of specific kinds of changes, or not. For example, here is how an observer can focus on the changes that happen on the &#34;player&#34; database table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PlayerObserver: TransactionObserver {&#xA;    func observes(eventsOfKind eventKind: DatabaseEventKind) -&amp;gt; Bool {&#xA;        // Only observe changes to the &#34;player&#34; table.&#xA;        return eventKind.tableName == &#34;player&#34;&#xA;    }&#xA;    &#xA;    func databaseDidChange(with event: DatabaseEvent) {&#xA;        // This method is only called for changes that happen to&#xA;        // the &#34;player&#34; table.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generally speaking, the &lt;code&gt;observes(eventsOfKind:)&lt;/code&gt; method can distinguish insertions from deletions and updates, and is also able to inspect the columns that are about to be changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PlayerScoreObserver: TransactionObserver {&#xA;    func observes(eventsOfKind eventKind: DatabaseEventKind) -&amp;gt; Bool {&#xA;        // Only observe changes to the &#34;score&#34; column of the &#34;player&#34; table.&#xA;        switch eventKind {&#xA;        case .insert(let tableName):&#xA;            return tableName == &#34;player&#34;&#xA;        case .delete(let tableName):&#xA;            return tableName == &#34;player&#34;&#xA;        case .update(let tableName, let columnNames):&#xA;            return tableName == &#34;player&#34; &amp;amp;&amp;amp; columnNames.contains(&#34;score&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the &lt;code&gt;observes(eventsOfKind:)&lt;/code&gt; method returns false for all event kinds, the observer is still notified of commits and rollbacks (except during read-only database accesses):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PureTransactionObserver: TransactionObserver {&#xA;    func observes(eventsOfKind eventKind: DatabaseEventKind) -&amp;gt; Bool {&#xA;        // Ignore all individual changes&#xA;        return false&#xA;    }&#xA;    &#xA;    func databaseDidChange(with event: DatabaseEvent) { /* Never called */ }&#xA;    func databaseWillCommit() throws { /* Called before commit */ }&#xA;    func databaseDidRollback(_ db: Database) { /* Called on rollback */ }&#xA;    func databaseDidCommit(_ db: Database) { /* Called on commit */ }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about event filtering, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregion&#34;&gt;DatabaseRegion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Observation Extent&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can specify how long an observer is notified of database changes and transactions.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;remove(transactionObserver:)&lt;/code&gt; method explicitly stops notifications, at any time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// From a database queue or pool:&#xA;dbQueue.remove(transactionObserver: observer)&#xA;&#xA;// From a database connection:&#xA;dbQueue.inDatabase { db in&#xA;    db.remove(transactionObserver: observer)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, use the &lt;code&gt;extent&lt;/code&gt; parameter of the &lt;code&gt;add(transactionObserver:extent:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observer = MyObserver()&#xA;&#xA;// On a database queue or pool:&#xA;dbQueue.add(transactionObserver: observer) // default extent&#xA;dbQueue.add(transactionObserver: observer, extent: .observerLifetime)&#xA;dbQueue.add(transactionObserver: observer, extent: .nextTransaction)&#xA;dbQueue.add(transactionObserver: observer, extent: .databaseLifetime)&#xA;&#xA;// On a database connection:&#xA;dbQueue.inDatabase { db in&#xA;    db.add(transactionObserver: ...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The default extent is &lt;code&gt;.observerLifetime&lt;/code&gt;: the database holds a weak reference to the observer, and the observation automatically ends when the observer is deinitialized. Meanwhile, observer is notified of all changes and transactions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;.nextTransaction&lt;/code&gt; activates the observer until the current or next transaction completes. The database keeps a strong reference to the observer until its &lt;code&gt;databaseDidCommit&lt;/code&gt; or &lt;code&gt;databaseDidRollback&lt;/code&gt; method is eventually called. Hereafter the observer won&#39;t get any further notification.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;.databaseLifetime&lt;/code&gt; has the database retain and notify the observer until the database connection is closed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally, an observer may ignore all database changes until the end of the current transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PlayerObserver: TransactionObserver {&#xA;    var playerTableWasModified = false&#xA;    &#xA;    func observes(eventsOfKind eventKind: DatabaseEventKind) -&amp;gt; Bool {&#xA;        eventKind.tableName == &#34;player&#34;&#xA;    }&#xA;    &#xA;    func databaseDidChange(with event: DatabaseEvent) {&#xA;        playerTableWasModified = true&#xA;        &#xA;        // It is pointless to keep on tracking further changes:&#xA;        stopObservingDatabaseChangesUntilNextTransaction()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After &lt;code&gt;stopObservingDatabaseChangesUntilNextTransaction()&lt;/code&gt;, the &lt;code&gt;databaseDidChange(with:)&lt;/code&gt; method will not be notified of any change for the remaining duration of the current transaction. This helps GRDB optimize database observation.&lt;/p&gt; &#xA;&lt;h3&gt;DatabaseRegion&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;DatabaseRegion&lt;/code&gt; is a reunion of database tables, and combination of columns and rows (identified by their rowid):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;|Table1 |   |Table2 |   |Table3 |   |Table4 |   |Table5 |&#xA;|-------|   |-------|   |-------|   |-------|   |-------|&#xA;|x|x|x|x|   |x| | | |   |x|x|x|x|   |x|x| |x|   | | | | |&#xA;|x|x|x|x|   |x| | | |   | | | | |   | | | | |   | |x| | |&#xA;|x|x|x|x|   |x| | | |   | | | | |   |x|x| |x|   | | | | |&#xA;|x|x|x|x|   |x| | | |   | | | | |   | | | | |   | | | | |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DatabaseRegion helps &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt; track changes in the database through the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactionobserver-protocol&#34;&gt;TransactionObserver&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that observing a database region spots &lt;em&gt;potential&lt;/em&gt; changes, not &lt;em&gt;actual&lt;/em&gt; changes in the results of a request.&lt;/strong&gt; A change is notified if and only if a statement has actually modified the tracked tables and columns by inserting, updating, or deleting a row.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you observe the region of &lt;code&gt;Player.select(max(Column(&#34;score&#34;)))&lt;/code&gt;, then you&#39;ll get be notified of all changes performed on the &lt;code&gt;score&lt;/code&gt; column of the &lt;code&gt;player&lt;/code&gt; table (updates, insertions and deletions), even if they do not modify the value of the maximum score. However, you will not get any notification for changes performed on other database tables, or updates to other columns of the player table.&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Structs/DatabaseRegion.html&#34;&gt;reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;The DatabaseRegionConvertible Protocol&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;DatabaseRegionConvertible&lt;/strong&gt; is a protocol for all types that can turn into a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregion&#34;&gt;DatabaseRegion&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DatabaseRegionConvertible {&#xA;    func databaseRegion(_ db: Database) throws -&amp;gt; DatabaseRegion&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; adopt this protocol, and this allows them to be observed with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// An observation triggered by all changes to the database&#xA;DatabaseRegionObservation(tracking: .fullDatabase)&#xA;&#xA;// An observation triggered by all changes to the player table&#xA;DatabaseRegionObservation(tracking: Table(&#34;player&#34;))&#xA;&#xA;// An observation triggered by all changes to the row with rowid 1 in the player table&#xA;DatabaseRegionObservation(tracking: Player.filter(id: 1))&#xA;&#xA;// An observation triggered by all changes to the score column of the player table&#xA;DatabaseRegionObservation(tracking: SQLRequest(&#34;SELECT score FROM player&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that specifying a region as a request &lt;em&gt;does not run the request&lt;/em&gt;. In the above example, &lt;code&gt;Player.filter(id: 1)&lt;/code&gt; and &lt;code&gt;SELECT score FROM player&lt;/code&gt; are never executed. They are only &lt;em&gt;compiled&lt;/em&gt; by SQLite, so that GRDB understands the tables, rows, and columns that constitute the database region.&lt;/p&gt; &#xA;&lt;h3&gt;Support for SQLite Pre-Update Hooks&lt;/h3&gt; &#xA;&lt;p&gt;When SQLite is built with the SQLITE_ENABLE_PREUPDATE_HOOK option, TransactionObserverType gets an extra callback which lets you observe individual column values in the rows modified by a transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol TransactionObserverType : class {&#xA;    #if SQLITE_ENABLE_PREUPDATE_HOOK&#xA;    /// Notifies before a database change (insert, update, or delete)&#xA;    /// with change information (initial / final values for the row&#39;s&#xA;    /// columns).&#xA;    ///&#xA;    /// The event is only valid for the duration of this method call. If you&#xA;    /// need to keep it longer, store a copy: event.copy().&#xA;    func databaseWillChange(with event: DatabasePreUpdateEvent)&#xA;    #endif&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This extra API can be activated in two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the GRDB.swift CocoaPod with a custom compilation option, as below. It uses the system SQLite, which is compiled with SQLITE_ENABLE_PREUPDATE_HOOK support, but only on iOS 11.0+ (we don&#39;t know the minimum version of macOS, tvOS, watchOS):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;GRDB.swift&#39;&#xA;platform :ios, &#39;11.0&#39; # or above&#xA;&#xA;post_install do |installer|&#xA;  installer.pods_project.targets.select { |target| target.name == &#34;GRDB.swift&#34; }.each do |target|&#xA;    target.build_configurations.each do |config|&#xA;      # Enable extra GRDB APIs&#xA;      config.build_settings[&#39;OTHER_SWIFT_FLAGS&#39;] = &#34;$(inherited) -D SQLITE_ENABLE_PREUPDATE_HOOK&#34;&#xA;      # Enable extra SQLite APIs&#xA;      config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] = &#34;$(inherited) GRDB_SQLITE_ENABLE_PREUPDATE_HOOK=1&#34;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: make sure you use the right platform version! You will get runtime errors on devices with a lower version.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;GRDB_SQLITE_ENABLE_PREUPDATE_HOOK=1&lt;/code&gt; option in &lt;code&gt;GCC_PREPROCESSOR_DEFINITIONS&lt;/code&gt; defines some C function prototypes that are lacking from the system &lt;code&gt;&amp;lt;sqlite3.h&amp;gt;&lt;/code&gt; header. When Xcode eventually ships with an SDK that includes a complete header, you may get a compiler error about duplicate function definitions. When this happens, just remove this &lt;code&gt;GRDB_SQLITE_ENABLE_PREUPDATE_HOOK=1&lt;/code&gt; option.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt; and activate the &lt;code&gt;SQLITE_ENABLE_PREUPDATE_HOOK&lt;/code&gt; compilation option.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Encryption&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB can encrypt your database with &lt;a href=&#34;http://sqlcipher.net&#34;&gt;SQLCipher&lt;/a&gt; v3.4+.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;, and specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# GRDB with SQLCipher 4&#xA;pod &#39;GRDB.swift/SQLCipher&#39;&#xA;pod &#39;SQLCipher&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;&#xA;# GRDB with SQLCipher 3&#xA;pod &#39;GRDB.swift/SQLCipher&#39;&#xA;pod &#39;SQLCipher&#39;, &#39;~&amp;gt; 3.4&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you remove any existing &lt;code&gt;pod &#39;GRDB.swift&#39;&lt;/code&gt; from your Podfile. &lt;code&gt;GRDB.swift/SQLCipher&lt;/code&gt; must be the only active GRDB pod in your whole project, or you will face linker or runtime errors, due to the conflicts between SQLCipher and the system SQLite.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#creating-or-opening-an-encrypted-database&#34;&gt;Creating or Opening an Encrypted Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#changing-the-passphrase-of-an-encrypted-database&#34;&gt;Changing the Passphrase of an Encrypted Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#exporting-a-database-to-an-encrypted-database&#34;&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#security-considerations&#34;&gt;Security Considerations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Creating or Opening an Encrypted Database&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;You create and open an encrypted database&lt;/strong&gt; by providing a passphrase to your &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also in &lt;code&gt;prepareDatabase&lt;/code&gt; that you perform other &lt;a href=&#34;https://www.zetetic.net/sqlcipher/sqlcipher-api/&#34;&gt;SQLCipher configuration steps&lt;/a&gt; that must happen early in the lifetime of a SQLCipher connection. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;    try db.execute(sql: &#34;PRAGMA cipher_page_size = ...&#34;)&#xA;    try db.execute(sql: &#34;PRAGMA kdf_iter = ...&#34;)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to open an existing SQLCipher 3 database with SQLCipher 4, you may want to run the &lt;code&gt;cipher_compatibility&lt;/code&gt; pragma:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Open an SQLCipher 3 database with SQLCipher 4&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;    try db.execute(sql: &#34;PRAGMA cipher_compatibility = 3&#34;)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.zetetic.net/blog/2018/11/30/sqlcipher-400-release/&#34;&gt;SQLCipher 4.0.0 Release&lt;/a&gt; and &lt;a href=&#34;https://discuss.zetetic.net/t/upgrading-to-sqlcipher-4/3283&#34;&gt;Upgrading to SQLCipher 4&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Changing the Passphrase of an Encrypted Database&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can change the passphrase&lt;/strong&gt; of an already encrypted database.&lt;/p&gt; &#xA;&lt;p&gt;When you use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-queues&#34;&gt;database queue&lt;/a&gt;, open the database with the old passphrase, and then apply the new passphrase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.changePassphrase(&#34;newSecret&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pool&lt;/a&gt;, make sure that no concurrent read can happen by changing the passphrase within the &lt;code&gt;barrierWriteWithoutTransaction&lt;/code&gt; block. You must also ensure all future reads open a new database connection by calling the &lt;code&gt;invalidateReadOnlyConnections&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbPool.barrierWriteWithoutTransaction { db in&#xA;    try db.changePassphrase(&#34;newSecret&#34;)&#xA;    dbPool.invalidateReadOnlyConnections()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: When an application wants to keep on using a database queue or pool after the passphrase has changed, it is responsible for providing the correct passphrase to the &lt;code&gt;usePassphrase&lt;/code&gt; method called in the database preparation function. Consider:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WRONG: this won&#39;t work across a passphrase change&#xA;let passphrase = try getPassphrase()&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&#xA;// CORRECT: get the latest passphrase when it is needed&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try getPassphrase()&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;DatabasePool.barrierWriteWithoutTransaction&lt;/code&gt; method does not prevent &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#database-snapshots&#34;&gt;database snapshots&lt;/a&gt; from accessing the database during the passphrase change, or after the new passphrase has been applied to the database. Those database accesses may throw errors. Applications should provide their own mechanism for invalidating open snapshots before the passphrase is changed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Instead of changing the passphrase &#34;in place&#34; as described here, you can also export the database in a new encrypted database that uses the new passphrase. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#exporting-a-database-to-an-encrypted-database&#34;&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Exporting a Database to an Encrypted Database&lt;/h3&gt; &#xA;&lt;p&gt;Providing a passphrase won&#39;t encrypt a clear-text database that already exists, though. SQLCipher can&#39;t do that, and you will get an error instead: &lt;code&gt;SQLite error 26: file is encrypted or is not a database&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead, create a new encrypted database, at a distinct location, and export the content of the existing database. This can both encrypt a clear-text database, or change the passphrase of an encrypted database.&lt;/p&gt; &#xA;&lt;p&gt;The technique to do that is &lt;a href=&#34;https://discuss.zetetic.net/t/how-to-encrypt-a-plaintext-sqlite-database-to-use-sqlcipher-and-avoid-file-is-encrypted-or-is-not-a-database-errors/868/1&#34;&gt;documented&lt;/a&gt; by SQLCipher.&lt;/p&gt; &#xA;&lt;p&gt;With GRDB, it gives:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// The existing database&#xA;let existingDBQueue = try DatabaseQueue(path: &#34;/path/to/existing.db&#34;)&#xA;&#xA;// The new encrypted database, at some distinct location:&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;}&#xA;let newDBQueue = try DatabaseQueue(path: &#34;/path/to/new.db&#34;, configuration: config)&#xA;&#xA;try existingDBQueue.inDatabase { db in&#xA;    try db.execute(&#xA;        sql: &#34;&#34;&#34;&#xA;            ATTACH DATABASE ? AS encrypted KEY ?;&#xA;            SELECT sqlcipher_export(&#39;encrypted&#39;);&#xA;            DETACH DATABASE encrypted;&#xA;            &#34;&#34;&#34;,&#xA;        arguments: [newDBQueue.path, &#34;secret&#34;])&#xA;}&#xA;&#xA;// Now the export is completed, and the existing database can be deleted.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Security Considerations&lt;/h3&gt; &#xA;&lt;h4&gt;Managing the lifetime of the passphrase string&lt;/h4&gt; &#xA;&lt;p&gt;It is recommended to avoid keeping the passphrase in memory longer than necessary. To do this, make sure you load the passphrase from the &lt;code&gt;prepareDatabase&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// NOT RECOMMENDED: this keeps the passphrase in memory longer than necessary&#xA;let passphrase = try getPassphrase()&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&#xA;// RECOMMENDED: only load the passphrase when it is needed&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try getPassphrase()&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This technique helps manages the lifetime of the passphrase, although keep in mind that the content of a String may remain intact in memory long after the object has been released.&lt;/p&gt; &#xA;&lt;p&gt;For even better control over the lifetime of the passphrase in memory, use a Data object which natively provides the &lt;code&gt;resetBytes&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// RECOMMENDED: only load the passphrase when it is needed and reset its content immediately after use&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try getPassphraseData() // Data&#xA;    defer {&#xA;        passphrase.resetBytes(in: 0..&amp;lt;data.count)&#xA;    }&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some demanding users will want to go further, and manage the lifetime of the raw passphrase bytes. See below.&lt;/p&gt; &#xA;&lt;h4&gt;Managing the lifetime of the passphrase bytes&lt;/h4&gt; &#xA;&lt;p&gt;GRDB offers convenience methods for providing the database passphrases as Swift strings: &lt;code&gt;usePassphrase(_:)&lt;/code&gt; and &lt;code&gt;changePassphrase(_:)&lt;/code&gt;. Those methods don&#39;t keep the passphrase String in memory longer than necessary. But they are as secure as the standard String type: the lifetime of actual passphrase bytes in memory is not under control.&lt;/p&gt; &#xA;&lt;p&gt;When you want to precisely manage the passphrase bytes, talk directly to SQLCipher, using its raw C functions.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    ... // Carefully load passphrase bytes&#xA;    let code = sqlite3_key(db.sqliteConnection, /* passphrase bytes */)&#xA;    ... // Carefully dispose passphrase bytes&#xA;    guard code == SQLITE_OK else {&#xA;        throw DatabaseError(&#xA;            resultCode: ResultCode(rawValue: code), &#xA;            message: db.lastErrorMessage)&#xA;    }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Passphrase availability vs. Database availability&lt;/h4&gt; &#xA;&lt;p&gt;When the passphrase is securely stored in the system keychain, your application can protect it using the &lt;a href=&#34;https://developer.apple.com/documentation/security/ksecattraccessible&#34;&gt;&lt;code&gt;kSecAttrAccessible&lt;/code&gt;&lt;/a&gt; attribute.&lt;/p&gt; &#xA;&lt;p&gt;Such protection prevents GRDB from creating SQLite connections when the passphrase is not available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try loadPassphraseFromSystemKeychain()&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&#xA;// Success if and only if the passphrase is available&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the same reason, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pools&lt;/a&gt;, which open SQLite connections on demand, may fail at any time as soon as the passphrase becomes unavailable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Success if and only if the passphrase is available&#xA;let dbPool = try DatabasePool(path: dbPath, configuration: config)&#xA;&#xA;// May fail if passphrase has turned unavailable&#xA;try dbPool.read { ... }&#xA;&#xA;// May trigger value observation failure if passphrase has turned unavailable&#xA;try dbPool.write { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because DatabasePool maintains a pool of long-lived SQLite connections, some database accesses will use an existing connection, and succeed. And some other database accesses will fail, as soon as the pool wants to open a new connection. It is impossible to predict which accesses will succeed or fail.&lt;/p&gt; &#xA;&lt;p&gt;For the same reason, a database queue, which also maintains a long-lived SQLite connection, will remain available even after the passphrase has turned unavailable.&lt;/p&gt; &#xA;&lt;p&gt;Applications are thus responsible for protecting database accesses when the passphrase is unavailable. To this end, they can use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-protection&#34;&gt;Data Protection&lt;/a&gt;. They can also destroy their instances of database queue or pool when the passphrase becomes unavailable.&lt;/p&gt; &#xA;&lt;h2&gt;Backup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can backup (copy) a database into another.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Backups can for example help you copying an in-memory database to and from a database file when you implement NSDocument subclasses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let source: DatabaseQueue = ...      // or DatabasePool&#xA;let destination: DatabaseQueue = ... // or DatabasePool&#xA;try source.backup(to: destination)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; method blocks the current thread until the destination database contains the same contents as the source database.&lt;/p&gt; &#xA;&lt;p&gt;When the source is a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pool&lt;/a&gt;, concurrent writes can happen during the backup. Those writes may, or may not, be reflected in the backup, but they won&#39;t trigger any error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Database&lt;/code&gt; has an analogous &lt;code&gt;backup&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let source: DatabaseQueue = ...      // or DatabasePool&#xA;let destination: DatabaseQueue = ... // or DatabasePool&#xA;try source.write { sourceDb in&#xA;    try destination.barrierWriteWithoutTransaction { destDb in&#xA;        try sourceDb.backup(to: destDb)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method allows for the choice of source and destination &lt;code&gt;Database&lt;/code&gt; handles with which to backup the database.&lt;/p&gt; &#xA;&lt;h3&gt;Backup Progress Reporting&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; methods take optional &lt;code&gt;pagesPerStep&lt;/code&gt; and &lt;code&gt;progress&lt;/code&gt; parameters. Together these parameters can be used to track a database backup in progress and abort an incomplete backup.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;pagesPerStep&lt;/code&gt; is provided, the database backup is performed in &lt;em&gt;steps&lt;/em&gt;. At each step, no more than &lt;code&gt;pagesPerStep&lt;/code&gt; database pages are copied from the source to the destination. The backup proceeds one step at a time until all pages have been copied.&lt;/p&gt; &#xA;&lt;p&gt;When a &lt;code&gt;progress&lt;/code&gt; callback is provided, &lt;code&gt;progress&lt;/code&gt; is called after every backup step, including the last. Even if a non-default &lt;code&gt;pagesPerStep&lt;/code&gt; is specified or the backup is otherwise completed in a single step, the &lt;code&gt;progress&lt;/code&gt; callback will be called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try source.backup(&#xA;    to: destination,&#xA;    pagesPerStep: ...)&#xA;    { backupProgress in&#xA;       print(&#34;Database backup progress:&#34;, backupProgress)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Aborting an Incomplete Backup&lt;/h3&gt; &#xA;&lt;p&gt;If a call to &lt;code&gt;progress&lt;/code&gt; throws when &lt;code&gt;backupProgress.isComplete == false&lt;/code&gt;, the backup will be aborted and the error rethrown. However, if a call to &lt;code&gt;progress&lt;/code&gt; throws when &lt;code&gt;backupProgress.isComplete == true&lt;/code&gt;, the backup is unaffected and the error is silently ignored.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: Passing non-default values of &lt;code&gt;pagesPerStep&lt;/code&gt; or &lt;code&gt;progress&lt;/code&gt; to the backup methods is an advanced API intended to provide additional capabilities to expert users. GRDB&#39;s backup API provides a faithful, low-level wrapper to the underlying SQLite online backup API. GRDB&#39;s documentation is not a comprehensive substitute for the official SQLite &lt;a href=&#34;https://www.sqlite.org/c3ref/backup_finish.html&#34;&gt;documentation of their backup API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Interrupt a Database&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;interrupt()&lt;/code&gt; method&lt;/strong&gt; causes any pending database operation to abort and return at its earliest opportunity.&lt;/p&gt; &#xA;&lt;p&gt;It can be called from any thread.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dbQueue.interrupt()&#xA;dbPool.interrupt()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A call to &lt;code&gt;interrupt()&lt;/code&gt; that occurs when there are no running SQL statements is a no-op and has no effect on SQL statements that are started after &lt;code&gt;interrupt()&lt;/code&gt; returns.&lt;/p&gt; &#xA;&lt;p&gt;A database operation that is interrupted will throw a DatabaseError with code &lt;code&gt;SQLITE_INTERRUPT&lt;/code&gt;. If the interrupted SQL operation is an INSERT, UPDATE, or DELETE that is inside an explicit transaction, then the entire transaction will be rolled back automatically. If the rolled back transaction was started by a transaction-wrapping method such as &lt;code&gt;DatabaseWriter.write&lt;/code&gt; or &lt;code&gt;Database.inTransaction&lt;/code&gt;, then all database accesses will throw a DatabaseError with code &lt;code&gt;SQLITE_ABORT&lt;/code&gt; until the wrapping method returns.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try Player(...).insert(db)     // throws SQLITE_INTERRUPT&#xA;    try Player(...).insert(db)     // not executed&#xA;}                                  // throws SQLITE_INTERRUPT&#xA;&#xA;try dbQueue.write { db in&#xA;    do {&#xA;        try Player(...).insert(db) // throws SQLITE_INTERRUPT&#xA;    } catch { }&#xA;}                                  // throws SQLITE_ABORT&#xA;&#xA;try dbQueue.write { db in&#xA;    do {&#xA;        try Player(...).insert(db) // throws SQLITE_INTERRUPT&#xA;    } catch { }&#xA;    try Player(...).insert(db)     // throws SQLITE_ABORT&#xA;}                                  // throws SQLITE_ABORT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can catch both &lt;code&gt;SQLITE_INTERRUPT&lt;/code&gt; and &lt;code&gt;SQLITE_ABORT&lt;/code&gt; errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try dbPool.write { db in ... }&#xA;} catch DatabaseError.SQLITE_INTERRUPT, DatabaseError.SQLITE_ABORT {&#xA;    // Oops, the database was interrupted.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://www.sqlite.org/c3ref/interrupt.html&#34;&gt;Interrupt A Long-Running Query&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Avoiding SQL Injection&lt;/h2&gt; &#xA;&lt;p&gt;SQL injection is a technique that lets an attacker nuke your database.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/exploits_of_a_mom.png&#34; alt=&#34;XKCD: Exploits of a Mom&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://xkcd.com/327/&#34;&gt;https://xkcd.com/327/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is an example of code that is vulnerable to SQL injection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// BAD BAD BAD&#xA;let id = 1&#xA;let name = textField.text&#xA;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;UPDATE students SET name = &#39;\(name)&#39; WHERE id = \(id)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the user enters a funny string like &lt;code&gt;Robert&#39;; DROP TABLE students; --&lt;/code&gt;, SQLite will see the following SQL, and drop your database table instead of updating a name as intended:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE students SET name = &#39;Robert&#39;;&#xA;DROP TABLE students;&#xA;--&#39; WHERE id = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid those problems, &lt;strong&gt;never embed raw values in your SQL queries&lt;/strong&gt;. The only correct technique is to provide &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;arguments&lt;/a&gt; to your raw SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name = textField.text&#xA;try dbQueue.write { db in&#xA;    // Good&#xA;    try db.execute(&#xA;        sql: &#34;UPDATE students SET name = ? WHERE id = ?&#34;,&#xA;        arguments: [name, id])&#xA;    &#xA;    // Just as good&#xA;    try db.execute(&#xA;        sql: &#34;UPDATE students SET name = :name WHERE id = :id&#34;,&#xA;        arguments: [&#34;name&#34;: name, &#34;id&#34;: id])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;records&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;, GRDB always prevents SQL injection for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let id = 1&#xA;let name = textField.text&#xA;try dbQueue.write { db in&#xA;    if var student = try Student.fetchOne(db, id: id) {&#xA;        student.name = name&#xA;        try student.update(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;p&gt;GRDB can throw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;DatabaseError&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistenceerror&#34;&gt;PersistenceError&lt;/a&gt;, or crash your program with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&#34;&gt;fatal error&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Considering that a local database is not some JSON loaded from a remote server, GRDB focuses on &lt;strong&gt;trusted databases&lt;/strong&gt;. Dealing with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-to-deal-with-untrusted-inputs&#34;&gt;untrusted databases&lt;/a&gt; requires extra care.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;DatabaseError&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistenceerror&#34;&gt;PersistenceError&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&#34;&gt;Fatal Errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-to-deal-with-untrusted-inputs&#34;&gt;How to Deal with Untrusted Inputs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-log&#34;&gt;Error Log&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DatabaseError&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;DatabaseError&lt;/strong&gt; are thrown on SQLite errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try Pet(masterId: 1, name: &#34;Bobby&#34;).insert(db)&#xA;} catch let error as DatabaseError {&#xA;    // The SQLite error code: 19 (SQLITE_CONSTRAINT)&#xA;    error.resultCode&#xA;    &#xA;    // The extended error code: 787 (SQLITE_CONSTRAINT_FOREIGNKEY)&#xA;    error.extendedResultCode&#xA;    &#xA;    // The eventual SQLite message: FOREIGN KEY constraint failed&#xA;    error.message&#xA;    &#xA;    // The eventual erroneous SQL query&#xA;    // &#34;INSERT INTO pet (masterId, name) VALUES (?, ?)&#34;&#xA;    error.sql&#xA;    &#xA;    // The eventual SQL arguments&#xA;    // [1, &#34;Bobby&#34;]&#xA;    error.arguments&#xA;    &#xA;    // Full error description&#xA;    // &amp;gt; SQLite error 19: FOREIGN KEY constraint failed -&#xA;    // &amp;gt; while executing `INSERT INTO pet (masterId, name) VALUES (?, ?)`&#xA;    error.description&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see statement arguments in the error description, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite uses &lt;a href=&#34;https://www.sqlite.org/rescode.html&#34;&gt;results codes&lt;/a&gt; to distinguish between various errors&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can catch a DatabaseError and match on result codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try ...&#xA;} catch let error as DatabaseError {&#xA;    switch error {&#xA;    case DatabaseError.SQLITE_CONSTRAINT_FOREIGNKEY:&#xA;        // foreign key constraint error&#xA;    case DatabaseError.SQLITE_CONSTRAINT:&#xA;        // any other constraint error&#xA;    default:&#xA;        // any other database error&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also directly match errors on result codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try ...&#xA;} catch DatabaseError.SQLITE_CONSTRAINT_FOREIGNKEY {&#xA;    // foreign key constraint error&#xA;} catch DatabaseError.SQLITE_CONSTRAINT {&#xA;    // any other constraint error&#xA;} catch {&#xA;    // any other database error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each DatabaseError has two codes: an &lt;code&gt;extendedResultCode&lt;/code&gt; (see &lt;a href=&#34;https://www.sqlite.org/rescode.html#extended_result_code_list&#34;&gt;extended result code&lt;/a&gt;), and a less precise &lt;code&gt;resultCode&lt;/code&gt; (see &lt;a href=&#34;https://www.sqlite.org/rescode.html#primary_result_code_list&#34;&gt;primary result code&lt;/a&gt;). Extended result codes are refinements of primary result codes, as &lt;code&gt;SQLITE_CONSTRAINT_FOREIGNKEY&lt;/code&gt; is to &lt;code&gt;SQLITE_CONSTRAINT&lt;/code&gt;, for example.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: SQLite has progressively introduced extended result codes across its versions. The &lt;a href=&#34;http://www.sqlite.org/changes.html&#34;&gt;SQLite release notes&lt;/a&gt; are unfortunately not quite clear about that: write your handling of extended result codes with care.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;PersistenceError&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;PersistenceError&lt;/strong&gt; is thrown by the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol, in a single case: when the &lt;code&gt;update&lt;/code&gt; method could not find any row to update:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try player.update(db)&#xA;} catch let PersistenceError.recordNotFound(databaseTableName: table, key: key) {&#xA;    print(&#34;Key \(key) was not found in table \(table).&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fatal Errors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fatal errors notify that the program, or the database, has to be changed.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;They uncover programmer errors, false assumptions, and prevent misuses. Here are a few examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The code asks for a non-optional value, when the database contains NULL:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: could not convert NULL to String.&#xA;let name: String = row[&#34;name&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: fix the contents of the database, use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#create-tables&#34;&gt;NOT NULL constraints&lt;/a&gt;, or load an optional:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String? = row[&#34;name&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Conversion from database value to Swift type fails:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: could not convert &#34;Mom‚Äôs birthday&#34; to Date.&#xA;let date: Date = row[&#34;date&#34;]&#xA;&#xA;// fatal error: could not convert &#34;&#34; to URL.&#xA;let url: URL = row[&#34;url&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: fix the contents of the database, or use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; to handle all possible cases:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dbValue: DatabaseValue = row[&#34;date&#34;]&#xA;if dbValue.isNull {&#xA;    // Handle NULL&#xA;} else if let date = Date.fromDatabaseValue(dbValue) {&#xA;    // Handle valid date&#xA;} else {&#xA;    // Handle invalid date&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The database can&#39;t guarantee that the code does what it says:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: table player has no unique index on column email&#xA;try Player.deleteOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: add a unique index to the player.email column, or use the &lt;code&gt;deleteAll&lt;/code&gt; method to make it clear that you may delete more than one row:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;).deleteAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Database connections are not reentrant:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: Database methods are not reentrant.&#xA;dbQueue.write { db in&#xA;    dbQueue.write { db in&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: avoid reentrancy, and instead pass a database connection along.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to Deal with Untrusted Inputs&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s consider the code below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sql = &#34;SELECT ...&#34;&#xA;&#xA;// Some untrusted arguments for the query&#xA;let arguments: [String: Any] = ...&#xA;let rows = try Row.fetchCursor(db, sql: sql, arguments: StatementArguments(arguments))&#xA;&#xA;while let row = try rows.next() {&#xA;    // Some untrusted database value:&#xA;    let date: Date? = row[0]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It has two opportunities to throw fatal errors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Untrusted arguments&lt;/strong&gt;: The dictionary may contain values that do not conform to the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;DatabaseValueConvertible protocol&lt;/a&gt;, or may miss keys required by the statement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Untrusted database content&lt;/strong&gt;: The row may contain a non-null value that can&#39;t be turned into a date.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In such a situation, you can still avoid fatal errors by exposing and handling each failure point, one level down in the GRDB API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Untrusted arguments&#xA;if let arguments = StatementArguments(arguments) {&#xA;    let statement = try db.makeStatement(sql: sql)&#xA;    try statement.setArguments(arguments)&#xA;    &#xA;    var cursor = try Row.fetchCursor(statement)&#xA;    while let row = try iterator.next() {&#xA;        // Untrusted database content&#xA;        let dbValue: DatabaseValue = row[0]&#xA;        if dbValue.isNull {&#xA;            // Handle NULL&#xA;        if let date = Date.fromDatabaseValue(dbValue) {&#xA;            // Handle valid date&#xA;        } else {&#xA;            // Handle invalid date&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;prepared statements&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Error Log&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite can be configured to invoke a callback function containing an error code and a terse error message whenever anomalies occur.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This global error callback must be configured early in the lifetime of your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Database.logError = { (resultCode, message) in&#xA;    NSLog(&#34;%@&#34;, &#34;SQLite error \(resultCode): \(message)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: Database.logError must be set before any database connection is opened. This includes the connections that your application opens with GRDB, but also connections opened by other tools, such as third-party libraries. Setting it after a connection has been opened is an SQLite misuse, and has no effect.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://sqlite.org/errlog.html&#34;&gt;The Error And Warning Log&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Unicode&lt;/h2&gt; &#xA;&lt;p&gt;SQLite lets you store unicode strings in the database.&lt;/p&gt; &#xA;&lt;p&gt;However, SQLite does not provide any unicode-aware string transformations or comparisons.&lt;/p&gt; &#xA;&lt;h3&gt;Unicode functions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;UPPER&lt;/code&gt; and &lt;code&gt;LOWER&lt;/code&gt; built-in SQLite functions are not unicode-aware:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// &#34;J√©R√¥ME&#34;&#xA;try String.fetchOne(db, sql: &#34;SELECT UPPER(&#39;J√©r√¥me&#39;)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GRDB extends SQLite with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions-and-aggregates&#34;&gt;SQL functions&lt;/a&gt; that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// &#34;J√âR√îME&#34;&#xA;let uppercased = DatabaseFunction.uppercase&#xA;try String.fetchOne(db, sql: &#34;SELECT \(uppercased.name)(&#39;J√©r√¥me&#39;)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those unicode-aware string functions are also readily available in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Player.select(nameColumn.uppercased)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;String Comparison&lt;/h3&gt; &#xA;&lt;p&gt;SQLite compares strings in many occasions: when you sort rows according to a string column, or when you use a comparison operator such as &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The comparison result comes from a &lt;em&gt;collating function&lt;/em&gt;, or &lt;em&gt;collation&lt;/em&gt;. SQLite comes with three built-in collations that do not support Unicode: &lt;a href=&#34;https://www.sqlite.org/datatype3.html#collation&#34;&gt;binary, nocase, and rtrim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GRDB comes with five extra collations that leverage unicode-aware comparisons based on the standard Swift String comparison functions and operators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;unicodeCompare&lt;/code&gt; (uses the built-in &lt;code&gt;&amp;lt;=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; Swift operators)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;caseInsensitiveCompare&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localizedCompare&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localizedStandardCompare&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A collation can be applied to a table column. All comparisons involving this column will then automatically trigger the comparison function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.create(table: &#34;player&#34;) { t in&#xA;    // Guarantees case-insensitive email unicity&#xA;    t.column(&#34;email&#34;, .text).unique().collate(.nocase)&#xA;    &#xA;    // Sort names in a localized case insensitive way&#xA;    t.column(&#34;name&#34;, .text).collate(.localizedCaseInsensitiveCompare)&#xA;}&#xA;&#xA;// Players are sorted in a localized case insensitive way:&#xA;let players = try Player.order(nameColumn).fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: SQLite &lt;em&gt;requires&lt;/em&gt; host applications to provide the definition of any collation other than binary, nocase and rtrim. When a database file has to be shared or migrated to another SQLite library of platform (such as the Android version of your application), make sure you provide a compatible collation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you can&#39;t or don&#39;t want to define the comparison behavior of a column (see warning above), you can still use an explicit collation in SQL requests and in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let collation = DatabaseCollation.localizedCaseInsensitiveCompare&#xA;let players = try Player.fetchAll(db,&#xA;    sql: &#34;SELECT * FROM player ORDER BY name COLLATE \(collation.name))&#34;)&#xA;let players = try Player.order(nameColumn.collating(collation)).fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can also define your own collations&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let collation = DatabaseCollation(&#34;customCollation&#34;) { (lhs, rhs) -&amp;gt; NSComparisonResult in&#xA;    // return the comparison of lhs and rhs strings.&#xA;}&#xA;&#xA;// Make the collation available to a database connection&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.add(collation: collation)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Memory Management&lt;/h2&gt; &#xA;&lt;p&gt;Both SQLite and GRDB use non-essential memory that help them perform better.&lt;/p&gt; &#xA;&lt;p&gt;You can reclaim this memory with the &lt;code&gt;releaseMemory&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Release as much memory as possible.&#xA;dbQueue.releaseMemory()&#xA;dbPool.releaseMemory()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method blocks the current thread until all current database accesses are completed, and the memory collected.&lt;/p&gt; &#xA;&lt;h3&gt;Memory Management on iOS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;The iOS operating system likes applications that do not consume much memory.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-queues&#34;&gt;Database queues&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;pools&lt;/a&gt; automatically call the &lt;code&gt;releaseMemory&lt;/code&gt; method when the application receives a memory warning, and when the application enters background.&lt;/p&gt; &#xA;&lt;h2&gt;Data Protection&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/StrategiesforImplementingYourApp/StrategiesforImplementingYourApp.html#//apple_ref/doc/uid/TP40007072-CH5-SW21&#34;&gt;Data Protection&lt;/a&gt; lets you protect files so that they are encrypted and unavailable until the device is unlocked.&lt;/p&gt; &#xA;&lt;p&gt;Data protection can be enabled &lt;a href=&#34;https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW30&#34;&gt;globally&lt;/a&gt; for all files created by an application.&lt;/p&gt; &#xA;&lt;p&gt;You can also explicitly protect a database, by configuring its enclosing &lt;em&gt;directory&lt;/em&gt;. This will not only protect the database file, but also all &lt;a href=&#34;https://www.sqlite.org/tempfiles.html&#34;&gt;temporary files&lt;/a&gt; created by SQLite (including the persistent &lt;code&gt;.shm&lt;/code&gt; and &lt;code&gt;.wal&lt;/code&gt; files created by &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pools&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For example, to explicitly use &lt;a href=&#34;https://developer.apple.com/reference/foundation/fileprotectiontype/1616200-complete&#34;&gt;complete&lt;/a&gt; protection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Paths&#xA;let fileManager = FileManager.default&#xA;let directoryURL = try fileManager&#xA;    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)&#xA;    .appendingPathComponent(&#34;database&#34;, isDirectory: true)&#xA;let databaseURL = directoryURL.appendingPathComponent(&#34;db.sqlite&#34;)&#xA;&#xA;// Create directory if needed&#xA;var isDirectory: ObjCBool = false&#xA;if !fileManager.fileExists(atPath: directoryURL.path, isDirectory: &amp;amp;isDirectory) {&#xA;    try fileManager.createDirectory(atPath: directoryURL.path, withIntermediateDirectories: false)&#xA;} else if !isDirectory.boolValue {&#xA;    throw NSError(domain: NSCocoaErrorDomain, code: NSFileWriteFileExistsError, userInfo: nil)&#xA;}&#xA;&#xA;// Enable data protection&#xA;try fileManager.setAttributes([.protectionKey : FileProtectionType.complete], ofItemAtPath: directoryURL.path)&#xA;&#xA;// Open database&#xA;let dbQueue = try DatabaseQueue(path: databaseURL.path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a database is protected, an application that runs in the background on a locked device won&#39;t be able to read or write from it. Instead, it will get &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&#34;&gt;DatabaseError&lt;/a&gt; with code &lt;a href=&#34;https://www.sqlite.org/rescode.html#ioerr&#34;&gt;&lt;code&gt;SQLITE_IOERR&lt;/code&gt;&lt;/a&gt; (10) &#34;disk I/O error&#34;, or &lt;a href=&#34;https://www.sqlite.org/rescode.html#auth&#34;&gt;&lt;code&gt;SQLITE_AUTH&lt;/code&gt;&lt;/a&gt; (23) &#34;not authorized&#34;.&lt;/p&gt; &#xA;&lt;p&gt;You can catch those errors and wait for &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom&#34;&gt;UIApplicationDelegate.applicationProtectedDataDidBecomeAvailable(_:)&lt;/a&gt; or &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationprotecteddatadidbecomeavailable&#34;&gt;UIApplicationProtectedDataDidBecomeAvailable&lt;/a&gt; notification in order to retry the failed database operation.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-opening-connections&#34;&gt;FAQ: Opening Connections&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-create-a-database-in-my-application&#34;&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&#34;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-close-a-database-connection&#34;&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-sql&#34;&gt;FAQ: SQL&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-general&#34;&gt;FAQ: General&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-monitor-the-duration-of-database-statements-execution&#34;&gt;How do I monitor the duration of database statements execution?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#does-grdb-support-library-evolution-and-abi-stability&#34;&gt;Does GRDB support library evolution and ABI stability?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-associations&#34;&gt;FAQ: Associations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-select-only-one-column-of-an-associated-record&#34;&gt;How do I select only one column of an associated record?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-valueobservation&#34;&gt;FAQ: ValueObservation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#why-is-valueobservation-not-publishing-value-changes&#34;&gt;Why is ValueObservation not publishing value changes?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-errors&#34;&gt;FAQ: Errors&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#generic-parameter-t-could-not-be-inferred&#34;&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#mutation-of-captured-var-in-concurrently-executing-code&#34;&gt;Mutation of captured var in concurrently-executing code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-1-no-such-column&#34;&gt;SQLite error 1 &#34;no such column&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized&#34;&gt;SQLite error 10 &#34;disk I/O error&#34;, SQLite error 23 &#34;not authorized&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries&#34;&gt;SQLite error 21 &#34;wrong number of statement arguments&#34; with LIKE queries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ: Opening Connections&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-create-a-database-in-my-application&#34;&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&#34;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-close-a-database-connection&#34;&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I create a database in my application?&lt;/h3&gt; &#xA;&lt;p&gt;This question assumes that your application has to create a new database from scratch. If your app has to open an existing database that is embedded inside your application as a resource, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&#34;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;The database has to be stored in a valid place where it can be created and modified. For example, in the &lt;a href=&#34;https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html&#34;&gt;Application Support directory&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let databaseURL = try FileManager.default&#xA;    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)&#xA;    .appendingPathComponent(&#34;db.sqlite&#34;)&#xA;let dbQueue = try DatabaseQueue(path: databaseURL.path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I open a database stored as a resource of my application?&lt;/h3&gt; &#xA;&lt;p&gt;If your application does not need to modify the database, open a read-only &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;connection&lt;/a&gt; to your resource:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.readonly = true&#xA;let dbPath = Bundle.main.path(forResource: &#34;db&#34;, ofType: &#34;sqlite&#34;)!&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the application should modify the database, you need to copy it to a place where it can be modified. For example, in the &lt;a href=&#34;https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html&#34;&gt;Application Support directory&lt;/a&gt;. Only then, open a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;connection&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let fileManager = FileManager.default&#xA;let dbPath = try fileManager&#xA;    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)&#xA;    .appendingPathComponent(&#34;db.sqlite&#34;)&#xA;    .path&#xA;if !fileManager.fileExists(atPath: dbPath) {&#xA;    let dbResourcePath = Bundle.main.path(forResource: &#34;db&#34;, ofType: &#34;sqlite&#34;)!&#xA;    try fileManager.copyItem(atPath: dbResourcePath, toPath: dbPath)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I close a database connection?&lt;/h3&gt; &#xA;&lt;p&gt;Database connections are automatically closed when they are deinitialized.&lt;/p&gt; &#xA;&lt;p&gt;When the correct execution of your program depends on precise database closing, use the &lt;code&gt;close()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This explicit &lt;code&gt;close()&lt;/code&gt; may fail with an error. See the inline documentation of this method for more information. Generally speaking, you should not call this method: rely on automatic closing instead.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: SQL&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I print a request as SQL?&lt;/h3&gt; &#xA;&lt;p&gt;When you want to debug a request that does not deliver the expected results, you may want to print the SQL that is actually executed.&lt;/p&gt; &#xA;&lt;p&gt;You can compile the request into a prepared statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    let request = Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;)&#xA;    let statement = try request.makePreparedRequest(db).statement&#xA;    print(statement) // SELECT * FROM player WHERE email = ?&#xA;    print(statement.arguments) // [&#34;arthur@example.com&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option is to setup a tracing function that prints out the executed SQL requests. For example, provide a tracing function when you connect to the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Prints all SQL statements&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.trace { print($0) }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    // Prints &#34;SELECT * FROM player WHERE email = ?&#34;&#xA;    let players = try Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;).fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see statement arguments such as &lt;code&gt;&#39;arthur@example.com&#39;&lt;/code&gt; in the logged statements, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚òù&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don&#39;t have your application rely on any specific SQL output.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;FAQ: General&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-monitor-the-duration-of-database-statements-execution&#34;&gt;How do I monitor the duration of database statements execution?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#does-grdb-support-library-evolution-and-abi-stability&#34;&gt;Does GRDB support library evolution and ABI stability?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I monitor the duration of database statements execution?&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;trace(options:_:)&lt;/code&gt; method, with the &lt;code&gt;.profile&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.trace(options: .profile) { event in&#xA;        // Prints all SQL statements with their duration&#xA;        print(event)&#xA;        &#xA;        // Access to detailed profiling information&#xA;        if case let .profile(statement, duration) = event, duration &amp;gt; 0.5 {&#xA;            print(&#34;Slow query: \(statement.sql)&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    let players = try Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;).fetchAll(db)&#xA;    // Prints &#34;0.003s SELECT * FROM player WHERE email = ?&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see statement arguments such as &lt;code&gt;&#39;arthur@example.com&#39;&lt;/code&gt; in the logged statements, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What Are Experimental Features?&lt;/h3&gt; &#xA;&lt;p&gt;Since GRDB 1.0, all backwards compatibility guarantees of &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt; apply: no breaking change will happen until the next major version of the library.&lt;/p&gt; &#xA;&lt;p&gt;There is an exception, though: &lt;em&gt;experimental features&lt;/em&gt;, marked with the &#34;&lt;strong&gt;&lt;span&gt;üî•&lt;/span&gt; EXPERIMENTAL&lt;/strong&gt;&#34; badge. Those are advanced features that are too young, or lack user feedback. They are not stabilized yet.&lt;/p&gt; &#xA;&lt;p&gt;Those experimental features are not protected by semantic versioning, and may break between two minor releases of the library. To help them becoming stable, &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues&#34;&gt;your feedback&lt;/a&gt; is greatly appreciated.&lt;/p&gt; &#xA;&lt;h3&gt;Does GRDB support library evolution and ABI stability?&lt;/h3&gt; &#xA;&lt;p&gt;No, GRDB does not support library evolution and ABI stability. The only promise is API stability according to &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt;, with an exception for &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;experimental features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Yet, GRDB can be built with the &#34;Build Libraries for Distribution&#34; Xcode option (&lt;code&gt;BUILD_LIBRARY_FOR_DISTRIBUTION&lt;/code&gt;), so that you can build binary frameworks at your convenience.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: Associations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-select-only-one-column-of-an-associated-record&#34;&gt;How do I select only one column of an associated record?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I filter records and only keep those that are associated to another record?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to only fetch books that have an author, and discard anonymous books.&lt;/p&gt; &#xA;&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Book: TableRecord {&#xA;    ...&#xA;    static let author = belongsTo(Author.self)&#xA;}&#xA;&#xA;struct Author: TableRecord {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we can write our request and only fetch books that have an author, discarding anonymous ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let books: [Book] = try dbQueue.read { db in&#xA;    // SELECT book.* FROM book &#xA;    // JOIN author ON author.id = book.authorID&#xA;    let request = Book.joining(required: Book.author)&#xA;    return try request.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note how this request does not use the &lt;code&gt;filter&lt;/code&gt; method. Indeed, we don&#39;t have any condition to express on any column. Instead, we just need to &#34;require that a book can be joined to its author&#34;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt; below for the opposite question.&lt;/p&gt; &#xA;&lt;h3&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to only fetch anonymous books that do not have any author.&lt;/p&gt; &#xA;&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Book: TableRecord {&#xA;    ...&#xA;    static let author = belongsTo(Author.self)&#xA;}&#xA;&#xA;struct Author: TableRecord {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we can write our request and only fetch anonymous books that don&#39;t have any author:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let books: [Book] = try dbQueue.read { db in&#xA;    // SELECT book.* FROM book&#xA;    // LEFT JOIN author ON author.id = book.authorID&#xA;    // WHERE author.id IS NULL&#xA;    let authorAlias = TableAlias()&#xA;    let request = Book&#xA;        .joining(optional: Book.author.aliased(authorAlias))&#xA;        .filter(!authorAlias.exists)&#xA;    return try request.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This request uses a TableAlias in order to be able to filter on the eventual associated author. We make sure that the &lt;code&gt;Author.primaryKey&lt;/code&gt; is nil, which is another way to say it does not exist: the book has no author.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt; above for the opposite question.&lt;/p&gt; &#xA;&lt;h3&gt;How do I select only one column of an associated record?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to fetch all books with their author name, but not the full associated author records.&lt;/p&gt; &#xA;&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Book: Decodable, TableRecord {&#xA;    ...&#xA;    static let author = belongsTo(Author.self)&#xA;}&#xA;&#xA;struct Author: Decodable, TableRecord {&#xA;    ...&#xA;    enum Columns {&#xA;        static let name = Column(CodingKeys.name)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we can write our request and the ad-hoc record that decodes it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BookInfo: Decodable, FetchableRecord {&#xA;    var book: Book&#xA;    var authorName: String? // nil when the book is anonymous&#xA;    &#xA;    static func all() -&amp;gt; QueryInterfaceRequest&amp;lt;BookInfo&amp;gt; {&#xA;        // SELECT book.*, author.name AS authorName&#xA;        // FROM book&#xA;        // LEFT JOIN author ON author.id = book.authorID&#xA;        let authorName = Author.Columns.name.forKey(CodingKeys.authorName)&#xA;        return Book&#xA;            .annotated(withOptional: Book.author.select(authorName))&#xA;            .asRequest(of: BookInfo.self)&#xA;    }&#xA;}&#xA;&#xA;let bookInfos: [BookInfo] = try dbQueue.read { db in&#xA;    BookInfo.all().fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By defining the request as a static method of BookInfo, you have access to the private &lt;code&gt;CodingKeys.authorName&lt;/code&gt;, and a compiler-checked SQL column name.&lt;/p&gt; &#xA;&lt;p&gt;By using the &lt;code&gt;annotated(withOptional:)&lt;/code&gt; method, you append the author name to the top-level selection that can be decoded by the ad-hoc record.&lt;/p&gt; &#xA;&lt;p&gt;By using &lt;code&gt;asRequest(of:)&lt;/code&gt;, you enhance the type-safety of your request.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: ValueObservation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#why-is-valueobservation-not-publishing-value-changes&#34;&gt;Why is ValueObservation not publishing value changes?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why is ValueObservation not publishing value changes?&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it looks that a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; does not notify the changes you expect.&lt;/p&gt; &#xA;&lt;p&gt;There may be four possible reasons for this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The expected changes were not committed into the database.&lt;/li&gt; &#xA; &lt;li&gt;The expected changes were committed into the database, but were quickly overwritten.&lt;/li&gt; &#xA; &lt;li&gt;The observation was stopped.&lt;/li&gt; &#xA; &lt;li&gt;The observation does not track the expected database region.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To answer the first two questions, look at SQL statements executed by the database. This is done when you open the database connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Prints all SQL statements&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.trace { print(&#34;SQL: \($0)&#34;) }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If, after that, you are convinced that the expected changes were committed into the database, and not overwritten soon after, trace observation events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation&#xA;    .tracking { db in ... }&#xA;    .print() // &amp;lt;- trace observation events&#xA;let cancellable = observation.start(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Look at the observation logs which start with &lt;code&gt;cancel&lt;/code&gt; or &lt;code&gt;failure&lt;/code&gt;: maybe the observation was cancelled by your app, or did fail with an error.&lt;/p&gt; &#xA;&lt;p&gt;Look at the observation logs which start with &lt;code&gt;value&lt;/code&gt;: make sure, again, that the expected value was not actually notified, then overwritten.&lt;/p&gt; &#xA;&lt;p&gt;Finally, look at the observation logs which start with &lt;code&gt;tracked region&lt;/code&gt;. Does the printed database region cover the expected changes?&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;empty&lt;/code&gt;: The empty region, which tracks nothing and never triggers the observation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(*)&lt;/code&gt;: The full &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(id,name)&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(id,name)[1]&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the row with id 1 in the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(*),team(*)&lt;/code&gt;: Both the full &lt;code&gt;player&lt;/code&gt; and &lt;code&gt;team&lt;/code&gt; tables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you happen to use the &lt;code&gt;ValueObservation.trackingConstantRegion(_:)&lt;/code&gt; method and see a mismatch between the tracked region and your expectation, then change the definition of your observation by using &lt;code&gt;tracking(_:)&lt;/code&gt;. You should witness that the logs which start with &lt;code&gt;tracked region&lt;/code&gt; now evolve in order to include the expected changes, and that you get the expected notifications.&lt;/p&gt; &#xA;&lt;p&gt;If after all those steps (thanks you!), your observation is still failing you, please &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/new&#34;&gt;open an issue&lt;/a&gt; and provide a &lt;a href=&#34;https://stackoverflow.com/help/minimal-reproducible-example&#34;&gt;minimal reproducible example&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: Errors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#generic-parameter-t-could-not-be-inferred&#34;&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#mutation-of-captured-var-in-concurrently-executing-code&#34;&gt;Mutation of captured var in concurrently-executing code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-1-no-such-column&#34;&gt;SQLite error 1 &#34;no such column&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized&#34;&gt;SQLite error 10 &#34;disk I/O error&#34;, SQLite error 23 &#34;not authorized&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries&#34;&gt;SQLite error 21 &#34;wrong number of statement arguments&#34; with LIKE queries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/h3&gt; &#xA;&lt;p&gt;You may get this error when using the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; methods of database queues and pools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Generic parameter &#39;T&#39; could not be inferred&#xA;let string = try dbQueue.read { db in&#xA;    let result = try String.fetchOne(db, ...)&#xA;    return result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a limitation of the Swift compiler.&lt;/p&gt; &#xA;&lt;p&gt;The general workaround is to explicitly declare the type of the closure result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// General Workaround&#xA;let string = try dbQueue.read { db -&amp;gt; String? in&#xA;    let result = try String.fetchOne(db, ...)&#xA;    return result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also, when possible, write a single-line closure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Single-line closure workaround:&#xA;let string = try dbQueue.read { db in&#xA;    try String.fetchOne(db, ...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mutation of captured var in concurrently-executing code&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;persistence methods&lt;/a&gt; can trigger a compiler error in async contexts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var player = Player(id: nil, name: &#34;Arthur&#34;)&#xA;try await dbWriter.write { db in&#xA;    // Error: Mutation of captured var &#39;player&#39; in concurrently-executing code&#xA;    try player.insert(db)&#xA;}&#xA;print(player.id) // A non-nil id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this happens, prefer the &lt;code&gt;inserted&lt;/code&gt; and &lt;code&gt;saved&lt;/code&gt; methods instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// OK&#xA;var player = Player(id: nil, name: &#34;Arthur&#34;)&#xA;player = try await dbWriter.write { [player] db in&#xA;    return try player.inserted(db)&#xA;}&#xA;print(player.id) // A non-nil id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQLite error 1 &#34;no such column&#34;&lt;/h3&gt; &#xA;&lt;p&gt;This error message is self-explanatory: do check for misspelled or non-existing column names.&lt;/p&gt; &#xA;&lt;p&gt;However, sometimes this error only happens when an app runs on a recent operating system (iOS 14+, Big Sur+, etc.) The error does not happen with previous ones.&lt;/p&gt; &#xA;&lt;p&gt;When this is the case, there are two possible explanations:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Maybe a column name is &lt;em&gt;really&lt;/em&gt; misspelled or missing from the database schema.&lt;/p&gt; &lt;p&gt;To find it, check the SQL statement that comes with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Maybe the application is using the character &lt;code&gt;&#34;&lt;/code&gt; instead of the single quote &lt;code&gt;&#39;&lt;/code&gt; as the delimiter for string literals in raw SQL queries. Recent versions of SQLite have learned to tell about this deviation from the SQL standard, and this is why you are seeing this error.&lt;/p&gt; &lt;p&gt;For example: this is not standard SQL: &lt;code&gt;UPDATE player SET name = &#34;Arthur&#34;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The standard version is: &lt;code&gt;UPDATE player SET name = &#39;Arthur&#39;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;It just happens that old versions of SQLite used to accept the former, non-standard version. Newer versions are able to reject it with an error.&lt;/p&gt; &lt;p&gt;The fix is to change the SQL statements run by the application: replace &lt;code&gt;&#34;&lt;/code&gt; with &lt;code&gt;&#39;&lt;/code&gt; in your string literals.&lt;/p&gt; &lt;p&gt;It may also be time to learn about statement arguments and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&#34;&gt;SQL injection&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String = ...&#xA;&#xA;// NOT STANDARD (double quote)&#xA;try db.execute(sql: &#34;&#34;&#34;&#xA;    UPDATE player SET name = &#34;\(name)&#34;&#xA;    &#34;&#34;&#34;)&#xA;&#xA;// STANDARD, BUT STILL NOT RECOMMENDED (single quote)&#xA;try db.execute(sql: &#34;UPDATE player SET name = &#39;\(name)&#39;&#34;)&#xA;&#xA;// STANDARD, AND RECOMMENDED (statement arguments)&#xA;try db.execute(sql: &#34;UPDATE player SET name = ?&#34;, arguments: [name])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://sqlite.org/quirks.html#dblquote&#34;&gt;Double-quoted String Literals Are Accepted&lt;/a&gt;, and &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/Configuration.html#/s:4GRDB13ConfigurationV33acceptsDoubleQuotedStringLiteralsSbvp&#34;&gt;Configuration.acceptsDoubleQuotedStringLiterals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SQLite error 10 &#34;disk I/O error&#34;, SQLite error 23 &#34;not authorized&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Those errors may be the sign that SQLite can&#39;t access the database due to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-protection&#34;&gt;data protection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When your application should be able to run in the background on a locked device, it has to catch this error, and, for example, wait for &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom&#34;&gt;UIApplicationDelegate.applicationProtectedDataDidBecomeAvailable(_:)&lt;/a&gt; or &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationprotecteddatadidbecomeavailable&#34;&gt;UIApplicationProtectedDataDidBecomeAvailable&lt;/a&gt; notification and retry the failed database operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try ...&#xA;} catch DatabaseError.SQLITE_IOERR, DatabaseError.SQLITE_AUTH {&#xA;    // Handle possible data protection error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This error can also be prevented altogether by using a more relaxed &lt;a href=&#34;https://developer.apple.com/reference/foundation/filemanager/1653059-file_protection_values&#34;&gt;file protection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SQLite error 21 &#34;wrong number of statement arguments&#34; with LIKE queries&lt;/h3&gt; &#xA;&lt;p&gt;You may get the error &#34;wrong number of statement arguments&#34; when executing a LIKE query similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name = textField.text&#xA;let players = try dbQueue.read { db in&#xA;    try Player.fetchAll(db, sql: &#34;SELECT * FROM player WHERE name LIKE &#39;%?%&#39;&#34;, arguments: [name])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The problem lies in the &lt;code&gt;&#39;%?%&#39;&lt;/code&gt; pattern.&lt;/p&gt; &#xA;&lt;p&gt;SQLite only interprets &lt;code&gt;?&lt;/code&gt; as a parameter when it is a placeholder for a whole value (int, double, string, blob, null). In this incorrect query, &lt;code&gt;?&lt;/code&gt; is just a character in the &lt;code&gt;&#39;%?%&#39;&lt;/code&gt; string: it is not a query parameter, and is not processed in any way. See &lt;a href=&#34;https://www.sqlite.org/lang_expr.html#varparam&#34;&gt;https://www.sqlite.org/lang_expr.html#varparam&lt;/a&gt; for more information about SQLite parameters.&lt;/p&gt; &#xA;&lt;p&gt;To fix the error, you can feed the request with the pattern itself, instead of the name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name = textField.text&#xA;let players: [Player] = try dbQueue.read { db in&#xA;    let pattern = &#34;%\(name)%&#34;&#xA;    return try Player.fetchAll(db, sql: &#34;SELECT * FROM player WHERE name LIKE ?&#34;, arguments: [pattern])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Sample Code&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&#34;&gt;Documentation&lt;/a&gt; is full of GRDB snippets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;GRDB.xcworkspace&lt;/code&gt;: it contains GRDB-enabled playgrounds to play with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/groue/SortedDifference&#34;&gt;groue/SortedDifference&lt;/a&gt;: How to synchronize a database table with a JSON payload&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pierlis.com&#34;&gt;Pierlis&lt;/a&gt;, where we write great software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alextrob&#34;&gt;@alextrob&lt;/a&gt;, &lt;a href=&#34;https://github.com/alexwlchan&#34;&gt;@alexwlchan&lt;/a&gt;, &lt;a href=&#34;https://github.com/bellebethcooper&#34;&gt;@bellebethcooper&lt;/a&gt;, &lt;a href=&#34;https://github.com/bfad&#34;&gt;@bfad&lt;/a&gt;, &lt;a href=&#34;https://github.com/cfilipov&#34;&gt;@cfilipov&lt;/a&gt;, &lt;a href=&#34;https://github.com/charlesmchen-signal&#34;&gt;@charlesmchen-signal&lt;/a&gt;, &lt;a href=&#34;https://github.com/Chiliec&#34;&gt;@Chiliec&lt;/a&gt;, &lt;a href=&#34;https://github.com/chrisballinger&#34;&gt;@chrisballinger&lt;/a&gt;, &lt;a href=&#34;https://github.com/darrenclark&#34;&gt;@darrenclark&lt;/a&gt;, &lt;a href=&#34;https://github.com/davidkraus&#34;&gt;@davidkraus&lt;/a&gt;, &lt;a href=&#34;https://github.com/eburns-vmware&#34;&gt;@eburns-vmware&lt;/a&gt;, &lt;a href=&#34;https://github.com/felixscheinost&#34;&gt;@felixscheinost&lt;/a&gt;, &lt;a href=&#34;http://github.com/fpillet&#34;&gt;@fpillet&lt;/a&gt;, &lt;a href=&#34;https://github.com/gcox&#34;&gt;@gcox&lt;/a&gt;, &lt;a href=&#34;https://github.com/GetToSet&#34;&gt;@GetToSet&lt;/a&gt;, &lt;a href=&#34;https://github.com/gjeck&#34;&gt;@gjeck&lt;/a&gt;, &lt;a href=&#34;https://github.com/guidedways&#34;&gt;@guidedways&lt;/a&gt;, &lt;a href=&#34;https://github.com/gusrota&#34;&gt;@gusrota&lt;/a&gt;, &lt;a href=&#34;https://github.com/haikusw&#34;&gt;@haikusw&lt;/a&gt;, &lt;a href=&#34;https://github.com/hartbit&#34;&gt;@hartbit&lt;/a&gt;, &lt;a href=&#34;https://github.com/holsety&#34;&gt;@holsety&lt;/a&gt;, &lt;a href=&#34;https://github.com/jroselightricks&#34;&gt;@jroselightricks&lt;/a&gt;, &lt;a href=&#34;https://github.com/kdubb&#34;&gt;@kdubb&lt;/a&gt;, &lt;a href=&#34;https://github.com/kluufger&#34;&gt;@kluufger&lt;/a&gt;, &lt;a href=&#34;https://github.com/KyleLeneau&#34;&gt;@KyleLeneau&lt;/a&gt;, &lt;a href=&#34;https://github.com/layoutSubviews&#34;&gt;@layoutSubviews&lt;/a&gt;, &lt;a href=&#34;https://github.com/mallman&#34;&gt;@mallman&lt;/a&gt;, &lt;a href=&#34;https://github.com/MartinP7r&#34;&gt;@MartinP7r&lt;/a&gt;, &lt;a href=&#34;https://github.com/Marus&#34;&gt;@Marus&lt;/a&gt;, &lt;a href=&#34;https://github.com/mattgallagher&#34;&gt;@mattgallagher&lt;/a&gt;, &lt;a href=&#34;https://github.com/MaxDesiatov&#34;&gt;@MaxDesiatov&lt;/a&gt;, &lt;a href=&#34;https://github.com/michaelkirk-signal&#34;&gt;@michaelkirk-signal&lt;/a&gt;, &lt;a href=&#34;https://github.com/mtancock&#34;&gt;@mtancock&lt;/a&gt;, &lt;a href=&#34;https://github.com/pakko972&#34;&gt;@pakko972&lt;/a&gt;, &lt;a href=&#34;https://github.com/peter-ss&#34;&gt;@peter-ss&lt;/a&gt;, &lt;a href=&#34;https://github.com/pierlo&#34;&gt;@pierlo&lt;/a&gt;, &lt;a href=&#34;https://github.com/pocketpixels&#34;&gt;@pocketpixels&lt;/a&gt;, &lt;a href=&#34;https://github.com/pp5x&#34;&gt;@pp5x&lt;/a&gt;, &lt;a href=&#34;https://github.com/professordeng&#34;&gt;@professordeng&lt;/a&gt;, &lt;a href=&#34;https://github.com/robcas3&#34;&gt;@robcas3&lt;/a&gt;, &lt;a href=&#34;https://github.com/runhum&#34;&gt;@runhum&lt;/a&gt;, &lt;a href=&#34;https://github.com/sberrevoets&#34;&gt;@sberrevoets&lt;/a&gt;, &lt;a href=&#34;https://github.com/schveiguy&#34;&gt;@schveiguy&lt;/a&gt;, &lt;a href=&#34;https://github.com/SD10&#34;&gt;@SD10&lt;/a&gt;, &lt;a href=&#34;https://github.com/sobri909&#34;&gt;@sobri909&lt;/a&gt;, &lt;a href=&#34;https://github.com/sroddy&#34;&gt;@sroddy&lt;/a&gt;, &lt;a href=&#34;https://github.com/steipete&#34;&gt;@steipete&lt;/a&gt;, &lt;a href=&#34;https://github.com/swiftlyfalling&#34;&gt;@swiftlyfalling&lt;/a&gt;, &lt;a href=&#34;https://github.com/Timac&#34;&gt;@Timac&lt;/a&gt;, &lt;a href=&#34;https://github.com/tternes&#34;&gt;@tternes&lt;/a&gt;, &lt;a href=&#34;https://github.com/valexa&#34;&gt;@valexa&lt;/a&gt;, &lt;a href=&#34;https://github.com/wuyuehyang&#34;&gt;@wuyuehyang&lt;/a&gt;, &lt;a href=&#34;https://github.com/ZevEisenberg&#34;&gt;@ZevEisenberg&lt;/a&gt;, and &lt;a href=&#34;https://github.com/zmeyc&#34;&gt;@zmeyc&lt;/a&gt; for their contributions, help, and feedback on GRDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aymerick&#34;&gt;@aymerick&lt;/a&gt; and &lt;a href=&#34;https://github.com/kali&#34;&gt;@kali&lt;/a&gt; because SQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;ccgus/fmdb&lt;/a&gt; for its excellency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.w3.org/Provider/Style/URI&#34;&gt;URIs don&#39;t change: people change them.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Changes Tracking&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customized Decoding of Database Rows&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&#34;&gt;Beyond FetchableRecord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Dealing with External Connections&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been superseded by the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SharingADatabase.md&#34;&gt;Sharing a Database&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h4&gt;Enabling FTS5 Support&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#enabling-fts5-support&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;FetchedRecordsController&lt;/h4&gt; &#xA;&lt;p&gt;FetchedRecordsController has been removed in GRDB 5.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;Database Observation&lt;/a&gt; chapter describes the other ways to observe the database.&lt;/p&gt; &#xA;&lt;h4&gt;Full-Text Search&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Migrations&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Migrations.md&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;NSNumber and NSDecimalNumber&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;moved&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Persistable Protocol&lt;/h4&gt; &#xA;&lt;p&gt;This protocol has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; &#xA;&lt;h4&gt;RowConvertible Protocol&lt;/h4&gt; &#xA;&lt;p&gt;This protocol has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; &#xA;&lt;h4&gt;TableMapping Protocol&lt;/h4&gt; &#xA;&lt;p&gt;This protocol has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; &#xA;&lt;h4&gt;ValueObservation and DatabaseRegionObservation&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been superseded by &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Concurrency&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Guarantees and Rules&lt;/h4&gt; &#xA;&lt;p&gt;This chapter is now split into &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#concurrency-rules&#34;&gt;Concurrency Rules&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#safe-and-unsafe-database-accesses&#34;&gt;Safe and Unsafe Database Accesses&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Differences between Database Queues and Pools&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#differences-between-database-queues-and-pools&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Advanced DatabasePool&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#advanced-databasepool&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Database Snapshots&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#database-snapshots&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;DatabaseWriter and DatabaseReader Protocols&lt;/h4&gt; &#xA;&lt;p&gt;This chapter was removed. See the references of &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Protocols/DatabaseReader.html&#34;&gt;DatabaseReader&lt;/a&gt; and &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Protocols/DatabaseWriter.html&#34;&gt;DatabaseWriter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Asynchronous APIs&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#synchronous-and-asynchronous-database-accesses&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Unsafe Concurrency APIs&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#safe-and-unsafe-database-accesses&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding support for missing SQL functions or operators&lt;/h3&gt; &#xA;&lt;p&gt;This chapter was renamed to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>