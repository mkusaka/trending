<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-28T01:55:06Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apple/swift-markdown</title>
    <updated>2022-06-28T01:55:06Z</updated>
    <id>tag:github.com,2022-06-28:/apple/swift-markdown</id>
    <link href="https://github.com/apple/swift-markdown" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift package for parsing, building, editing, and analyzing Markdown documents.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Markdown&lt;/h1&gt; &#xA;&lt;p&gt;Swift &lt;code&gt;Markdown&lt;/code&gt; is a Swift package for parsing, building, editing, and analyzing Markdown documents.&lt;/p&gt; &#xA;&lt;p&gt;The parser is powered by GitHub-flavored Markdown&#39;s &lt;a href=&#34;https://github.com/github/cmark-gfm&#34;&gt;cmark-gfm&lt;/a&gt; implementation, so it follows the spec closely. As the needs of the community change, the effective dialect implemented by this library may change.&lt;/p&gt; &#xA;&lt;p&gt;The markup tree provided by this package is comprised of immutable/persistent, thread-safe, copy-on-write value types that only copy substructure that has changed. Other examples of the main strategy behind this library can be seen in Swift&#39;s &lt;a href=&#34;https://github.com/apple/swift/tree/master/lib/Syntax&#34;&gt;lib/Syntax&lt;/a&gt; and its Swift bindings, &lt;a href=&#34;https://github.com/apple/swift-syntax&#34;&gt;SwiftSyntax&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started Using Markup&lt;/h2&gt; &#xA;&lt;p&gt;In your &lt;code&gt;Package.swift&lt;/code&gt; Swift Package Manager manifest, add the following dependency to your &lt;code&gt;dependencies&lt;/code&gt; argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/apple/swift-markdown.git&#34;, .branch(&#34;main&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the dependency to any targets you&#39;ve declared in your manifest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(name: &#34;MyTarget&#34;, dependencies: [&#34;Markdown&#34;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To parse a document, use &lt;code&gt;Document(parsing:)&lt;/code&gt;, supplying a &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;URL&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Markdown&#xA;&#xA;let source = &#34;This is a markup *document*.&#34;&#xA;let document = Document(parsing: source)&#xA;print(document.debugDescription())&#xA;// Document&#xA;// └─ Paragraph&#xA;//    ├─ Text &#34;This is a markup &#34;&#xA;//    ├─ Emphasis&#xA;//    │  └─ Text &#34;document&#34;&#xA;//    └─ Text &#34;.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see Swift &lt;code&gt;Markdown&lt;/code&gt;&#39;s &lt;a href=&#34;https://apple.github.io/swift-markdown/documentation/markdown/&#34;&gt;documentation site&lt;/a&gt; for more detailed information about the library.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Involved&lt;/h2&gt; &#xA;&lt;h3&gt;Submitting a Bug Report&lt;/h3&gt; &#xA;&lt;p&gt;Swift Markdown tracks all bug reports with &lt;a href=&#34;https://github.com/apple/swift-markdown/issues&#34;&gt;GitHub Issues&lt;/a&gt;. You can use the &#34;Swift-Markdown&#34; component for issues and feature requests specific to Swift Markdown. When you submit a bug report we ask that you follow the Swift &lt;a href=&#34;https://swift.org/contributing/#reporting-bugs&#34;&gt;Bug Reporting&lt;/a&gt; guidelines and provide as many details as possible.&lt;/p&gt; &#xA;&lt;h3&gt;Submitting a Feature Request&lt;/h3&gt; &#xA;&lt;p&gt;For feature requests, please feel free to file a &lt;a href=&#34;https://github.com/apple/swift-markdown/issues/new&#34;&gt;GitHub issue&lt;/a&gt; or start a discussion on the &lt;a href=&#34;https://forums.swift.org/c/development/swift-docc&#34;&gt;Swift Forums&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t hesitate to submit a feature request if you see a way Swift Markdown can be improved to better meet your needs.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing to Swift Markdown&lt;/h3&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://swift.org/contributing/#contributing-code&#34;&gt;contributing guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. --&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-docc</title>
    <updated>2022-06-28T01:55:06Z</updated>
    <id>tag:github.com,2022-06-28:/apple/swift-docc</id>
    <link href="https://github.com/apple/swift-docc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Documentation compiler that produces rich API reference documentation and interactive tutorials for your Swift framework or package.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift-DocC&lt;/h1&gt; &#xA;&lt;p&gt;Swift-DocC is a documentation compiler for Swift frameworks and packages aimed at making it easy to write and publish great developer documentation.&lt;/p&gt; &#xA;&lt;p&gt;For an example of Swift-DocC in action, check out &lt;a href=&#34;https://developer.apple.com/documentation&#34;&gt;developer.apple.com&lt;/a&gt;. Much of Apple&#39;s developer documentation, from &lt;a href=&#34;https://developer.apple.com/documentation/GroupActivities&#34;&gt;Reference documentation&lt;/a&gt; to &lt;a href=&#34;https://developer.apple.com/tutorials/swiftui&#34;&gt;Tutorials&lt;/a&gt;, is built using Swift-DocC.&lt;/p&gt; &#xA;&lt;p&gt;Swift-DocC is being actively developed. For more information about the Swift-DocC project, see the introductory blog post &lt;a href=&#34;https://swift.org/blog/swift-docc/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The latest documentation for the Swift-DocC project is available on &lt;a href=&#34;https://swift.org/documentation/docc&#34;&gt;Swift.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://forums.swift.org/c/development/swift-docc&#34;&gt;Swift Forums&lt;/a&gt; are the best place to get help with Swift-DocC and discuss future plans.&lt;/p&gt; &#xA;&lt;h2&gt;Writing and Publishing Documentation with Swift-DocC&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re looking to write and publish documentation with Swift-DocC, the best way to get started is with Swift-DocC&#39;s &lt;a href=&#34;https://www.swift.org/documentation/docc&#34;&gt;user documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Technical Overview and Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;Swift-DocC builds documentation by combining &lt;em&gt;Symbol Graph&lt;/em&gt; files containing API information with a &lt;code&gt;.docc&lt;/code&gt; Documentation Catalog containing articles and tutorials to create a final archive containing the compiled documentation.&lt;/p&gt; &#xA;&lt;p&gt;More concretely, Swift-DocC understands the following kinds of inputs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Symbol Graph&lt;/em&gt; files with the &lt;code&gt;.symbols.json&lt;/code&gt; extension. &lt;em&gt;Symbol Graph&lt;/em&gt; files are a machine-readable representation of a module&#39;s APIs, including their documentation comments and relationship with one another.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A Documentation Catalog with the &lt;code&gt;.docc&lt;/code&gt; extension. Documentation Catalogs can include additional documentation content like the following:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Documentation markup files with the &lt;code&gt;.md&lt;/code&gt; extension. Documentation markup files can be used to extend documentation for symbols and to write free-form articles.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Tutorial files with the &lt;code&gt;.tutorial&lt;/code&gt; extension. Tutorial files are used to author step-by-step instructions on how to use a framework.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Additional documentation assets with known extensions like &lt;code&gt;.png&lt;/code&gt;, &lt;code&gt;.jpg&lt;/code&gt;, &lt;code&gt;.mov&lt;/code&gt;, and &lt;code&gt;.zip&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;An &lt;code&gt;Info.plist&lt;/code&gt; file containing metadata such as the name of the documented module. This file is optional and the information it contains can be passed via the command line.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Swift-DocC outputs a machine-readable archive of the compiled documentation. This archive contains &lt;em&gt;render JSON&lt;/em&gt; files, which fully describe the contents of a documentation page and can be processed by a renderer such as &lt;a href=&#34;https://github.com/apple/swift-docc-render&#34;&gt;Swift-DocC-Render&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more in-depth technical information about Swift-DocC, please refer to the project&#39;s technical documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-docc/documentation/swiftdocc/&#34;&gt;&lt;code&gt;SwiftDocC&lt;/code&gt; framework documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-docc/documentation/swiftdoccutilities/&#34;&gt;&lt;code&gt;SwiftDocCUtilities&lt;/code&gt; framework documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related Projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;As of Swift 5.5, the &lt;a href=&#34;https://github.com/apple/swift&#34;&gt;Swift Compiler&lt;/a&gt; is able to emit &lt;em&gt;Symbol Graph&lt;/em&gt; files as part of the compilation process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-docc-symbolkit&#34;&gt;SymbolKit&lt;/a&gt; is a Swift package containing the specification and reference model for the &lt;em&gt;Symbol Graph&lt;/em&gt; File Format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-markdown&#34;&gt;Swift Markdown&lt;/a&gt; is a Swift package for parsing, building, editing, and analyzing Markdown documents. It includes support for the Block Directive elements that Swift-DocC&#39;s tutorial files rely on.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-docc-render&#34;&gt;Swift-DocC-Render&lt;/a&gt; is a web application that understands and renders Swift-DocC&#39;s &lt;em&gt;render JSON&lt;/em&gt; format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;Xcode&lt;/a&gt; consists of a suite of tools that developers use to build apps for Apple platforms. Beginning with Xcode 13, Swift-DocC is integrated into Xcode with support for building and viewing documentation for your framework and its dependencies.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started with &lt;code&gt;docc&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;docc&lt;/code&gt; is the command line interface (CLI) for Swift-DocC and provides support for converting and previewing DocC documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;DocC is a Swift package. If you&#39;re new to Swift package manager, the &lt;a href=&#34;https://swift.org/getting-started/#using-the-package-manager&#34;&gt;documentation here&lt;/a&gt; provides an explanation of how to get started and the software you&#39;ll need installed.&lt;/p&gt; &#xA;&lt;p&gt;DocC requires Swift 5.5 which is included in Xcode 13.&lt;/p&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Checkout this repository using:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/apple/swift-docc.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the root of the repository with:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd swift-docc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, build DocC by running:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;To run &lt;code&gt;docc&lt;/code&gt;, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift run docc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing into Xcode&lt;/h3&gt; &#xA;&lt;p&gt;You can test a locally built version of Swift-DocC in Xcode 13 or later by setting the &lt;code&gt;DOCC_EXEC&lt;/code&gt; build setting to the path of your local &lt;code&gt;docc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the project in the Project Navigator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the Build Settings tab, click &#39;+&#39; and then &#39;Add User-Defined Setting&#39;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a build setting &lt;code&gt;DOCC_EXEC&lt;/code&gt; with the value set to &lt;code&gt;/path/to/docc&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The next time you invoke a documentation build with the &#34;Build Documentation&#34; button in Xcode&#39;s Product menu, your custom &lt;code&gt;docc&lt;/code&gt; will be used for the build. You can confirm that your custom &lt;code&gt;docc&lt;/code&gt; is being used by opening the latest build log in Xcode&#39;s report navigator and expanding the &#34;Compile documentation&#34; step.&lt;/p&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;docc&lt;/code&gt; to build and preview documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;docc&lt;/code&gt; directly to build documentation for your Swift framework or package. The below instructions use this repository as an example but apply to any Swift package. Just replace any reference to &lt;code&gt;SwiftDocC&lt;/code&gt; below with the name of your package.&lt;/p&gt; &#xA;&lt;h3&gt;1. Generate a symbol graph file&lt;/h3&gt; &#xA;&lt;p&gt;Begin by navigating to the root of your Swift package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~/Developer/swift-docc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the following to generate &lt;em&gt;Symbol Graph&lt;/em&gt; files for your target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p .build/symbol-graphs &amp;amp;&amp;amp; \&#xA;  swift build --target SwiftDocC \&#xA;    -Xswiftc -emit-symbol-graph \&#xA;    -Xswiftc -emit-symbol-graph-dir -Xswiftc .build/symbol-graphs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now have a number of &lt;code&gt;.symbols.json&lt;/code&gt; files in &lt;code&gt;.build/symbol-graphs&lt;/code&gt; representing the provided target and its dependencies. You can copy out the files representing just the target itself with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir .build/swift-docc-symbol-graphs \&#xA;  &amp;amp;&amp;amp; mv .build/symbol-graphs/SwiftDocC* .build/swift-docc-symbol-graphs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Set the path to your renderer&lt;/h3&gt; &#xA;&lt;p&gt;The best place to get started with Swift-DocC-Render is with the instructions in the &lt;a href=&#34;https://github.com/apple/swift-docc-render&#34;&gt;project&#39;s README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have Xcode 13 or later installed, you can use the version of Swift-DocC-Render that comes included in Xcode with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export DOCC_HTML_DIR=&#34;$(dirname $(xcrun --find docc))/../share/docc/render&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can clone the &lt;a href=&#34;https://github.com/apple/swift-docc-render-artifact&#34;&gt;Swift-DocC-Render-Artifact repository&lt;/a&gt; and use a recent pre-built copy of the renderer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/apple/swift-docc-render-artifact.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then point the &lt;code&gt;DOCC_HTML_DIR&lt;/code&gt; environment variable to the repository&#39;s &lt;code&gt;/dist&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export DOCC_HTML_DIR=&#34;/path/to/swift-docc-render-artifact/dist&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Preview your documentation&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;docc preview&lt;/code&gt; command performs a conversion of your documentation and starts a local web server to allow for easy previewing of the built documentation. It monitors the provided Documentation Catalog for changes and updates the preview as you&#39;re working.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docc preview Sources/SwiftDocC/SwiftDocC.docc \&#xA;  --fallback-display-name SwiftDocC \&#xA;  --fallback-bundle-identifier org.swift.SwiftDocC \&#xA;  --fallback-bundle-version 1.0.0 \&#xA;  --additional-symbol-graph-dir .build/swift-docc-symbol-graphs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now see the following in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Input: ~/Developer/swift-docc/Sources/SwiftDocC/SwiftDocC.docc&#xA;Template: ~/Developer/swift-docc-render-artifact/dist&#xA;========================================&#xA;Starting Local Preview Server&#xA;   Address: http://localhost:8000/documentation/swiftdocc&#xA;========================================&#xA;Monitoring ~/Developer/swift-docc/Sources/SwiftDocC/SwiftDocC.docc for changes...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you navigate to &lt;a href=&#34;http://localhost:8000/documentation/swiftdocc&#34;&gt;http://localhost:8000/documentation/swiftdocc&lt;/a&gt; you&#39;ll see the rendered documentation for &lt;code&gt;SwiftDocC&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Swift-DocC&#39;s CLI tool (&lt;code&gt;docc&lt;/code&gt;) will be integrated into the Swift toolchain and follows the Swift compiler&#39;s versioning scheme.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;SwiftDocC&lt;/code&gt; library is versioned separately from &lt;code&gt;docc&lt;/code&gt;. &lt;code&gt;SwiftDocC&lt;/code&gt; is under active development and source stability is not guaranteed.&lt;/p&gt; &#xA;&lt;h2&gt;Bug Reports and Feature Requests&lt;/h2&gt; &#xA;&lt;h3&gt;Submitting a Bug Report&lt;/h3&gt; &#xA;&lt;p&gt;Swift-DocC tracks all bug reports with &lt;a href=&#34;https://github.com/apple/swift-docc/issues&#34;&gt;GitHub Issues&lt;/a&gt;. When you submit a bug report we ask that you follow the &lt;a href=&#34;https://github.com/apple/swift-docc/issues/new?template=BUG_REPORT.md&#34;&gt;provided template&lt;/a&gt; and provide as many details as possible.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can use the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-docc/main/bin/environment&#34;&gt;&lt;code&gt;environment&lt;/code&gt;&lt;/a&gt; script in this repository to gather helpful environment information to paste into your bug report by running the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bin/environment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you can confirm that the bug occurs when using the latest commit of Swift-DocC from the &lt;code&gt;main&lt;/code&gt; branch (see &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-docc/main/CONTRIBUTING.md#building-swift-docc&#34;&gt;Building Swift-DocC&lt;/a&gt;), that will help us track down the bug faster.&lt;/p&gt; &#xA;&lt;h3&gt;Submitting a Feature Request&lt;/h3&gt; &#xA;&lt;p&gt;For feature requests, please feel free to file a &lt;a href=&#34;https://github.com/apple/swift-docc/issues/new?template=FEATURE_REQUEST.md&#34;&gt;GitHub issue&lt;/a&gt; or start a discussion on the &lt;a href=&#34;https://forums.swift.org/c/development/swift-docc&#34;&gt;Swift Forums&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t hesitate to submit a feature request if you see a way Swift-DocC can be improved to better meet your needs.&lt;/p&gt; &#xA;&lt;p&gt;All user-facing features must be discussed in the &lt;a href=&#34;https://forums.swift.org/c/development/swift-docc&#34;&gt;Swift Forums&lt;/a&gt; before being enabled by default.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Swift-DocC&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-docc/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;!-- Copyright (c) 2021-2022 Apple Inc and the Swift Project authors. All Rights Reserved. --&gt;</summary>
  </entry>
  <entry>
    <title>quoid/userscripts</title>
    <updated>2022-06-28T01:55:06Z</updated>
    <id>tag:github.com,2022-06-28:/quoid/userscripts</id>
    <link href="https://github.com/quoid/userscripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source userscript manager for Safari&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Userscripts Safari&lt;/h1&gt; &#xA;&lt;p&gt;An open-source userscript editor for Safari&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/etc/screenshot.png&#34; alt=&#34;Userscripts Safari&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#ui-overview&#34;&gt;UI Overview&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#browser-page&#34;&gt;Browser Page&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#settings-modal&#34;&gt;Settings Modal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#popover&#34;&gt;Popover&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#metadata&#34;&gt;Metadata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#scripts-directory&#34;&gt;Scripts Directory / Save Location&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#getting-help&#34;&gt;Getting Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#faqs&#34;&gt;FAQs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#privacy-policy&#34;&gt;Privacy Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Userscripts is available for iOS (+ipadOS) and macOS. For all versions, installation is done through &lt;a href=&#34;https://itunes.apple.com/us/app/userscripts/id1463298887&#34;&gt;Apple&#39;s App Store&lt;/a&gt;. On macOS, versions prior to &lt;code&gt;4.x&lt;/code&gt; were made available to download and install directly from the repository, but due to &lt;a href=&#34;https://github.com/quoid/userscripts/issues/154&#34;&gt;changes in the way Apple allows developers to distribute apps built with the WebExtension API&lt;/a&gt;, that is no longer an option.&lt;/p&gt; &#xA;&lt;p&gt;To run Userscripts on iOS you should be on iOS 15.1 or higher.&lt;/p&gt; &#xA;&lt;p&gt;To run Userscripts on macOS you should running macOS 12 or higher, along with Safari 14.1 or higher.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/userscripts/id1463298887&#34;&gt;App Store Link&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/quoid/userscripts/projects/3&#34;&gt;Development Progress&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s recommend to read this documentation and, if you have time, watch the following video overviews to familiarize yourself with the app and extension.&lt;/p&gt; &#xA;&lt;p&gt;Once the app is downloaded and installed the following steps should be taken:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;iOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Settings &amp;gt; Extensions &amp;gt; Userscripts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Turn Userscripts &lt;code&gt;on&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For optimal experience it&#39;s recommended that you allow Userscripts for &lt;code&gt;All Websites&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Once the above is complete &lt;strong&gt;open the containing app&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click the &#34;Set Userscripts Directory&#34; button and select the directory, &lt;em&gt;within the Files.app&lt;/em&gt;, where your userscripts are located and where you wish newly installed userscripts to be placed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Tip:&lt;/strong&gt; for optimal cross platform experience it&#39;s a good idea to use an iCloud folder for syncing between macOS and iOS&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; syncing between macOS and iOS is not immediate, it is sometimes necessary to open Files.app in order to applying changes made in macOS to be reflected in iOS - that includes userscript deletions, additions and edits&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Once the directory is set you can close the containing app and open Safari.app&lt;/li&gt; &#xA; &lt;li&gt;It &lt;strong&gt;may be necessary&lt;/strong&gt; to apply further permissions and it&#39;s to &lt;code&gt;Always Allow&lt;/code&gt; Userscripts for &lt;code&gt;All Websites&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;After installing Userscripts on macOS, you &lt;strong&gt;do not&lt;/strong&gt; need to select a userscripts directory if you do not plan on syncing your userscripts between multiple devices. Instead you can choose to use the default directory, which is located at &lt;code&gt;~/User/Library/Containers/Userscripts/Data/Documents/scripts&lt;/code&gt; - again, this is default (and automatic) behavior. You only need to select a new location if you want to store your userscripts elsewhere, which is especially useful if you are using an external code editor such as Sublime Text or VSCode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/x1r3-L7pdYQ?t=14&#34;&gt;&lt;strong&gt;Here&#39;s a short clip showing how to easily create/add a userscript in Safari using this extension on macOS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;UI Overview&lt;/h2&gt; &#xA;&lt;h3&gt;Browser Page:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/etc/ui01.png&#34; alt=&#34;Userscripts Safari Main Application Window&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extension button&lt;/strong&gt; - click this button to open the extension interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Filter bar&lt;/strong&gt; - use this input to filter items in the sidebar, by &lt;em&gt;name&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sort button&lt;/strong&gt; - changes the order of the items in the sidebar by name or modified time&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sidebar buttons&lt;/strong&gt; - &lt;em&gt;described left to right&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;settings&lt;/code&gt; button (represented by a &lt;a href=&#34;https://wikipedia.org/wiki/Gear&#34;&gt;cog&lt;/a&gt;) displays the settings modal (discussed below)&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;plus&lt;/code&gt; button allows users to add new items &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;New CSS&lt;/code&gt; is a &#34;userscript&#34; that expects &lt;a href=&#34;https://www.w3schools.com/css/&#34;&gt;CSS&lt;/a&gt; code&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;New Javascript&lt;/code&gt; is a prototypical userscript that expects &lt;a href=&#34;https://www.w3schools.com/js/DEFAULT.asp&#34;&gt;Javascript&lt;/a&gt; code&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;New Remote&lt;/code&gt; allows the user to add a remote hosted userscript (or style) by inputting the web address (&lt;em&gt;ex:&lt;/em&gt; &lt;code&gt;https://www.k21p.com/example.user.js&lt;/code&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Item toggle&lt;/strong&gt; - this toggle enables or disables an item&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Item&lt;/strong&gt; - this is the userscript (or style), clicking on it will load it&#39;s contents into the editor - &lt;em&gt;you can hide descriptions in the settings area!&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editor buttons (top)&lt;/strong&gt; - &lt;em&gt;described left to right&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Update button&lt;/strong&gt; - this button allows you to update userscripts that meet the following conditions &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;metadata contains &lt;code&gt;@version&lt;/code&gt; tag&lt;/li&gt; &#xA;     &lt;li&gt;metadata contains &lt;code&gt;@updateURL&lt;/code&gt; tag&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Download button&lt;/strong&gt; - click this button to download a copy of your userscript &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; every userscript that is displayed in the interface is already present on your local machine, at your save location - the download button offers a quick way to retrieve a copy of that file, without needing to click the settings button, and then the save location link within the settings modal&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Trash button&lt;/strong&gt; - moves the currently loaded userscript to the trash bin - it will subsequently be removed from the interface and save location&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editor buttons (bottom)&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Discard&lt;/code&gt; - while editing, reverts any unsaved changes you&#39;ve made to a userscript&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Save&lt;/code&gt; - while editing, saves all changes you&#39;ve made to a userscript &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Command + S&lt;/code&gt; is the keyboard shortcut for the action&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Settings Modal:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/etc/settings.png&#34; alt=&#34;Userscripts Safari Settings Window&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto Close Brackets&lt;/strong&gt; - toggles on/off auto closing of brackets in the editor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;this affects the following characters: &lt;code&gt;() [] {} &#34;&#34; &#39;&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto Hint&lt;/strong&gt; - automatically shows completion hints while editing&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hide Descriptions&lt;/strong&gt; - hides the item descriptions in the sidebar&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Show Invisibles&lt;/strong&gt; - toggles the display of invisible characters in the editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Javascript Linter&lt;/strong&gt; - toggles basic Javascript linting within the editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tab Size&lt;/strong&gt; - the number of spaces a tab is equal to while editing, obviously defaults to &lt;code&gt;4&lt;/code&gt; because using &lt;code&gt;2&lt;/code&gt; spaces is absolute insanity&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enable Injection&lt;/strong&gt; - toggle on/off script injection for the pages you visit (this is the on/off switch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Show Toolbar Count&lt;/strong&gt; - displays a badge on the toolbar icon with a number that represents how many enabled scripts match the url for the page you are on&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Save Location&lt;/strong&gt; - where your file are currently located and being saved to (click the blue text to open location)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Change Save Location (cogs icon)&lt;/strong&gt; - this button, located directly to the right of the save location, is a shortcut for opening the host app, which will allow you to change the save location&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global Blacklist&lt;/strong&gt; - all domain patterns listed here will be &lt;em&gt;globally&lt;/em&gt; ignored for script injection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Popup:&lt;/h3&gt; &#xA;&lt;!-- ![Userscripts Popup](/etc/popover.png)--&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/etc/popover.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open Page Link&lt;/strong&gt; - &lt;em&gt;macOS only&lt;/em&gt;, opens the extension browser page&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enable Injection toggle&lt;/strong&gt; - turns on/off page script injection (on/off switch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Refresh View&lt;/strong&gt; - refreshes the popup view&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Available Updates View&lt;/strong&gt; - the extension periodically checks all userscripts in your save location for updates and when an update is found, it is shown in this view&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Folder Button&lt;/strong&gt; - on &lt;strong&gt;macOS&lt;/strong&gt; this button opens your save location directory in Finder, on &lt;strong&gt;iOS&lt;/strong&gt; this button displays the &#34;all scripts view&#34; where you can see every script that found in your save location directory, the &#34;all scripts view&#34; allows you to toggle individual userscript scripts on/off regardless of the current page being displayed in the browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install Prompt&lt;/strong&gt; - when a userscript is displayed in the browser, this alert displays, giving the user the option to install the userscript into their save location directory, tapping the prompt will take them through the installation steps&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Matched Userscripts List&lt;/strong&gt; - this list shows the currently matched userscripts relative to the current page being displayed in the browser, all userscripts that match to the domain will be showed, whether they are active or not. Users can click/tap the userscript to the toggle them on/off. If a userscript is active for the domain through a subframe a &lt;strong&gt;sub&lt;/strong&gt; tag will be show next the to the file type indicator&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Metadata&lt;/h2&gt; &#xA;&lt;p&gt;Userscripts Safari currently supports the following userscript metadata:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@name&lt;/code&gt; - This will be the name that displays in the sidebar and be used as the filename - you can &lt;em&gt;not&lt;/em&gt; use the same name for multiple files of the same type&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@description&lt;/code&gt;- Use this to describe what your userscript does - this will be displayed in the sidebar - there is a setting to hide descriptions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@match&lt;/code&gt; - Domain match patterns - you can use several instances of this field if you&#39;d like multiple domain matches - view &lt;a href=&#34;https://developer.chrome.com/extensions/match_patterns&#34;&gt;this article for more information on constructing patterns&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; this extension only supports &lt;code&gt;http/s&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@exclude-match&lt;/code&gt; - Domain patterns where you do &lt;em&gt;not&lt;/em&gt; want the script to run&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@include&lt;/code&gt; - Used to match against urls for injection, globs and regular expressions are allowed, &lt;a href=&#34;https://wiki.greasespot.net/Include_and_exclude_rules&#34;&gt;read more here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@exclude&lt;/code&gt; - Functions in a similar way as &lt;code&gt;@include&lt;/code&gt; but rather than injecting, a match against this key&#39;s value will prevent injection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@inject-into&lt;/code&gt; - allows the user to choose which context to inject the script into &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;allows the user to choose which context to inject the script into&lt;/li&gt; &#xA;   &lt;li&gt;values: &lt;code&gt;auto&lt;/code&gt; (default), &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;page&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;works like &lt;a href=&#34;https://violentmonkey.github.io/api/metadata-block/#inject-into&#34;&gt;violentmonkey&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@run-at&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;allows the user to choose the injection timing&lt;/li&gt; &#xA;   &lt;li&gt;document-start, document-end (default), document-idle&lt;/li&gt; &#xA;   &lt;li&gt;works like &lt;a href=&#34;https://violentmonkey.github.io/api/metadata-block/#run-at&#34;&gt;violentmonkey&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;JS Only&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@weight&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;allows the user to further adjust script injection timing&lt;/li&gt; &#xA;   &lt;li&gt;can be used to ensure one script injects before another&lt;/li&gt; &#xA;   &lt;li&gt;ONLY accepts integers (floats, strings and everything else will be ignored)&lt;/li&gt; &#xA;   &lt;li&gt;min value = 1, max value = 999, higher numbers (“heavier”) execute earlier&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@require&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;allows users to include remote resources in their scripts&lt;/li&gt; &#xA;   &lt;li&gt;the value must be a valid url, currently no local file support&lt;/li&gt; &#xA;   &lt;li&gt;must require a resource of the same file type (JS for JS, CSS for CSS)&lt;/li&gt; &#xA;   &lt;li&gt;when a resource is required, it is downloaded and saved locally&lt;/li&gt; &#xA;   &lt;li&gt;the resources is downloaded once at save and never checked for updates or parsed in anyway &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;if you want to update the require resources, and the url does not change, you must remove the resources, save, then re-input it&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;require remote resources at your own risk, the extension never validates remote resource code in any way and be aware that using remote resources from untrusted sources can jeopardize your personal security&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@version&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;used to determine the current version of a userscript&lt;/li&gt; &#xA;   &lt;li&gt;when paired with &lt;code&gt;@updateURL&lt;/code&gt;, this will allow the user to update a userscript from a remote source, if the version on their machine is &lt;code&gt;&amp;lt;&lt;/code&gt; version at the update URL&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@version&lt;/code&gt; does nothing by itself, it needs to be paired with&lt;code&gt; @updateURL&lt;/code&gt; for remote updating to function properly&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@updateURL&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the remote url to check version against&lt;/li&gt; &#xA;   &lt;li&gt;if the version of the file located at the update URL is &lt;code&gt;&amp;gt;&lt;/code&gt; the version on the local machine, the file will be updated&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@updateURL&lt;/code&gt; does nothing by itself, it needs to be paired with &lt;code&gt;@version&lt;/code&gt; for remote updating to function properly&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@downloadURL&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;optional download location for a remotely updateable file (*i.e. a file that has both &lt;code&gt;@version&lt;/code&gt; and &lt;code&gt;@updateURL&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;when paired with &lt;code&gt;@version&lt;/code&gt; and &lt;code&gt;@updateURL&lt;/code&gt;, if the local version is &lt;code&gt;&amp;lt;&lt;/code&gt; the version of the file that &lt;code&gt;@updateURL&lt;/code&gt; points to, the extension will attempt to update the file&#39;s code with the contents of the file located at the &lt;code&gt;@downloadURL&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@downloadURL&lt;/code&gt; does nothing by itself, it needs &lt;code&gt;@version&lt;/code&gt; and &lt;code&gt;@updateURL&lt;/code&gt; to present in order to function properly&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@noframes&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;this key takes no value&lt;/li&gt; &#xA;   &lt;li&gt;prevents code from being injected into nested frames&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;All userscripts need at least 1 &lt;code&gt;@match&lt;/code&gt; or &lt;code&gt;@include&lt;/code&gt; to run!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Userscripts currently supports the following api methods. All methods are asynchronous unless otherwise noted. &lt;strong&gt;All methods are accessible without regard to &lt;code&gt;@grant&lt;/code&gt; when &lt;code&gt;@inject-into&lt;/code&gt; has the &lt;code&gt;content&lt;/code&gt; value.&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GM.addStyle(css)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;css: String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;on success returns a promise resolved with the css string argument provided&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM_addStyle(css)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;css: String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;synchronous&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;returns the css string argument provided &lt;em&gt;without regard to success&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM.setValue(key, value)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;key: String&lt;/code&gt;, &lt;code&gt;value: Any&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;on success returns a promise resolved with an object indicating success&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM.getValue(key, defaultValue)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;key: String&lt;/code&gt;, &lt;code&gt;defaultValue: Any&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;on success returns a promise resolved with the value that was set or default value provided&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM.deleteValue(key)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;key: String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;on success returns a promise resolved with an object indicating success&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM.listValues()&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;on success returns a promise resolved with an array of the key names of &lt;strong&gt;presently set&lt;/strong&gt; values&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM.openInTab(url, openInBackground)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;url: String&lt;/code&gt;, &lt;code&gt;openInBackground: Bool&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;on success returns a promise resolved with the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/Tab&#34;&gt;tab data&lt;/a&gt; for the tab just opened&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;US.closeTab(tabId)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;tabId: Int&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;tabId&lt;/code&gt; is &lt;strong&gt;optional&lt;/strong&gt; and if omitted the tab that called &lt;code&gt;US.closeTab&lt;/code&gt; will be closed&lt;/li&gt; &#xA;   &lt;li&gt;on success returns a promise resolved with an object indicating success&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM.setClipboard(data, type)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;data: String&lt;/code&gt; - &lt;strong&gt;required&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;type: String&lt;/code&gt; - &lt;strong&gt;optional&lt;/strong&gt; and defaults to &lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData&#34;&gt;read more here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;on success returns a promise resolved with a &lt;code&gt;Bool&lt;/code&gt; indicating success&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM_setClipboard(data, type)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;synchronous&#39; version of &lt;code&gt;GM.setClipboard&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;the setClipboard function runs in the background script, requires a promise to send message from content script to background to facilitate writing to the clipboard, thus no real synchronous function available&lt;/li&gt; &#xA;   &lt;li&gt;returns &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM.info&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;GM_info&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;is available without needing to add it to &lt;code&gt;@grant&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;an object containing information about the running userscript &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;scriptHandler: String&lt;/code&gt; - returns &lt;code&gt;Userscripts&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;version: String&lt;/code&gt; - the version of Userscripts app&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;scriptMetaStr: String&lt;/code&gt; - the metablock for the currently running script&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;script: Object&lt;/code&gt; - contains data about the currently running script &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;description: String&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;exclude-match: [String]&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;excludes: [String]&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;grant: [String]&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;includes: [String]&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;inject-into: String&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;matches: [String]&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;name: String&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;namespace: String&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;noframes: Bool&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;require: [String]&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;resources: [String]&lt;/code&gt; - &lt;em&gt;currently not implemented&lt;/em&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;run-at: String&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;version: String&lt;/code&gt; - &lt;em&gt;the userscript version value&lt;/em&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM.xmlHttpRequest(details)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;details: Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;the &lt;code&gt;details&lt;/code&gt; object accepts the following properties &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;url&lt;/code&gt; - &lt;code&gt;String&lt;/code&gt; - &lt;strong&gt;required&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;method&lt;/code&gt; - &lt;code&gt;String&lt;/code&gt; - defaults to &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;user&lt;/code&gt; - &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;password&lt;/code&gt; - &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; - &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;overrideMimeType&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; - &lt;code&gt;Int&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;binary&lt;/code&gt; - &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;data&lt;/code&gt; - &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;responseType&lt;/code&gt; - &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;read more about &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&#34;&gt;XMLHttpRequests here&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;event handlers: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;onabort&lt;/code&gt; - &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;onerror&lt;/code&gt; - &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;onload&lt;/code&gt; - &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;onloadend&lt;/code&gt; - &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;onloadstart&lt;/code&gt; - &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;onprogress&lt;/code&gt; - &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;onreadystatechange&lt;/code&gt; - &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ontimeout&lt;/code&gt; - &lt;code&gt;function&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;the response object passed to the event handlers has the following properties: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;readyState&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;response&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;responseHeaders&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;responseType&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;responseURL&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;status&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;statusText&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;withCredentials&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;responseText&lt;/code&gt; (when &lt;code&gt;responseType&lt;/code&gt; is &lt;code&gt;text&lt;/code&gt;)&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;returns an object with a single property, &lt;code&gt;abort&lt;/code&gt;, which is a &lt;code&gt;function&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;usage: &lt;code&gt;const foo = GM.xmlHttpRequest({...});&lt;/code&gt; ... &lt;code&gt;foo.abort()&lt;/code&gt; to abort the request&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GM_xmlhttpRequest(details)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;an alias for &lt;code&gt;GM.xmlHttpRequest&lt;/code&gt;, works exactly the same&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Scripts Directory&lt;/h2&gt; &#xA;&lt;p&gt;This is the directory where the app/extension will read from and write to. This directory is changed by opening the &lt;strong&gt;containing app&lt;/strong&gt; and clicking the respective &#34;change location&#34; button.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Script Directory Notes&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Close all instances of the extension UI (browser app and/or popup) before changing the scripts directory&lt;/li&gt; &#xA; &lt;li&gt;After files are added, removed or edited, you will need to open the popup at least 1 time to see those changes reflected in your browsing experience&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On macOS&lt;/strong&gt;, after a directory outside of the default is selected, if you rename or move that selected directory, the extension will continue to read/write to that directory - the only way to remove the “link” is by trashing the folder or selecting a new save location&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter a problem while using this app/extension or are in need of some assistance, please open an issue here in the repository. When doing so, please provide as much detail as possible. This includes listing system specs and what website and script you are trying to execute. &lt;em&gt;Please follow the issue template!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&#34;Refused to execute a script&#34; error(s), what should I do!?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You are seeing this error because of the website&#39;s &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&#34;&gt;Content Security Policy&lt;/a&gt;. Currently there is no way to allow extension content scripts to bypass CSPs in Safari.&lt;/p&gt; &#xA; &lt;p&gt;Automatically, the extension will attempt to circumvent strict CSPs, but if you are still experiencing issues, trying setting the userscript metadata key/val &lt;code&gt;// @inject-into auto&lt;/code&gt; or &lt;code&gt;// @inject-into content&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;You can read more about this in &lt;a href=&#34;https://github.com/quoid/userscripts/issues/106#issuecomment-797320450&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do I need to use the extension&#39;s editor to create new userscripts or to edit existing?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can use your own editor to update and manage your files. As long as you are saving the files to the save location, and they are properly formatted, they should be injected. However, you &lt;strong&gt;must open the extension popup&lt;/strong&gt; beforehand. That means, if you create a new or edit an existing userscript with an external editor and save it to the save location, before injection will occur properly, the extension popup must be opened and the popup must load completely.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;What are the keyboard shortcuts?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Whilst using the included editor, clicking &lt;code&gt;⌘ + s&lt;/code&gt; will save the file. While working the editor, clicking &lt;code&gt;⌘ + f&lt;/code&gt; will bring up the search bar and &lt;code&gt;esc&lt;/code&gt; will hide it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;When I use &lt;code&gt;@require&lt;/code&gt;, where are the required files stored?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;All required files are saved &lt;em&gt;as Javascript files&lt;/em&gt; in the extension container folder in macOS 11.x. That folder is located in the default save location, at: &lt;code&gt;~/Library/Containers/Userscripts/Data/Documents/require/&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you move files from the require folder or manually edit the &lt;code&gt;manifest.json&lt;/code&gt; file, you will likely break app/extension functionality.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Code level contributions are welcome. &lt;em&gt;I prefer to collaborate directly with contributors rather than receiving spontaneous pull requests&lt;/em&gt;. If you feel you can improve the project in some way, please reach out to me by email or by opening an issue with your improvement/feature request.&lt;/p&gt; &#xA;&lt;p&gt;Further, any issue marked &#34;help wanted&#34; is actively seeking assistance. Please respond to those issues with feedback, guidance or offers of coding assistance.&lt;/p&gt; &#xA;&lt;p&gt;Please ensure your contributions align with the project&#39;s license before committing anything.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;The quickest and easiest way to support the project is by &lt;a href=&#34;https://apps.apple.com/us/app/userscripts/id1463298887&#34;&gt;leaving a positive review on the App Store&lt;/a&gt; if you enjoy the extension and want to see future improvements. Seeing these reviews let me know I am doing something right, or wrong, and motivates me to continue working on the project.&lt;/p&gt; &#xA;&lt;p&gt;The second best way to help out is to sign up to beta test new versions of the app. Since this extension values your privacy, and &lt;strong&gt;does not collect any data from users&lt;/strong&gt;, it is difficult to gauge how the extension is being used. By signing up to be a beta tester it not only allows you to test upcoming features, but also gives me the opportunity to elicit direct feedback from real users.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://forms.gle/QB46uYQHVyCxULue9&#34;&gt;iOS Beta Sign Up Form&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://forms.gle/cUDtKg1ip4Vc9Xhc7&#34;&gt;macOS Beta Sign Up Form&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Privacy Policy&lt;/h2&gt; &#xA;&lt;p&gt;Userscripts does not collect any data from its users nor monitor activities or actions you perform within the application and extension. This means everything that you do with the application and extension is private to you and is never shared with the developers or third parties. Since there is no data collection, there is no data retention of any kind.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2022 Justin Wasack&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/quoid/userscripts/master/LICENSE&#34;&gt;GNU General Public License v3.0&lt;/a&gt; license for all open source applications. A commercial license is required for all other applications.&lt;/p&gt;</summary>
  </entry>
</feed>