<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-17T01:46:23Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/generative-ai-swift</title>
    <updated>2023-05-17T01:46:23Z</updated>
    <id>tag:github.com,2023-05-17:/google/generative-ai-swift</id>
    <link href="https://github.com/google/generative-ai-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google Generative AI SDK for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google Generative AI SDK for Swift&lt;/h1&gt; &#xA;&lt;p&gt;The Google Generative AI SDK for Swift allows developers to use state-of-the-art Large Language Models (LLMs) to build language applications.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve added the Swift package to your Swift application, you can call the API as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GoogleGenerativeAI&#xA;&#xA;let palmClient = GenerativeLanguage(apiKey: &#34;YOUR API KEY&#34;)&#xA;response = try await palmClient.chat(message: &#34;Hello&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a few sample apps. To try them out, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out this repository. &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;git clone https://github.com/google/generative-ai-swift&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Follow the instructions on the &lt;a href=&#34;https://developers.generativeai.google/tutorials/setup&#34;&gt;setup page&lt;/a&gt; to obtain an API key.&lt;/li&gt; &#xA; &lt;li&gt;Open and build one of the examples in the &lt;code&gt;Examples&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;Paste the API key into the &lt;code&gt;API_KEY&lt;/code&gt; property in the &lt;code&gt;PaLM-Info.plist&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Run the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using the PaLM SDK in your own app&lt;/h2&gt; &#xA;&lt;p&gt;To use the Swift SDK for the PaLM API in your own apps, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new Swift app (or use your existing app).&lt;/li&gt; &#xA; &lt;li&gt;Right-click on your project in the project navigator.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;em&gt;Add Packages&lt;/em&gt; from the context menu.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;em&gt;Add Packages&lt;/em&gt; dialog, paste the package URL into the search bar: &lt;a href=&#34;https://github.com/google/generative-ai-swift&#34;&gt;https://github.com/google/generative-ai-swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;em&gt;Add Package&lt;/em&gt;. Xcode will now add the &lt;em&gt;GoogleGenerativeAI&lt;/em&gt; to your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Initializing the API client&lt;/h3&gt; &#xA;&lt;p&gt;Before you can make any API calls, you need to import and initialize the API client.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Import the &lt;code&gt;GoogleGenerativeAI&lt;/code&gt; module: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GoogleGenerativeAI&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Initialize the API client: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let palmClient = GenerativeLanguage(apiKey: &#34;YOUR API KEY&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Calling the API&lt;/h3&gt; &#xA;&lt;p&gt;Now you&#39;re ready to call the PaLM API&#39;s methods.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All API methods are asynchronous, so you need to call them using Swift&#39;s async/await.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For example, here is how you can call the &lt;code&gt;generateText&lt;/code&gt; method to summarize a Wikipedia article:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let prompt = &#34;Summarise the following text: https://wikipedia.org/...&#34;&#xA;&#xA;let response = try await palmClient.generateText(with: prompt)&#xA;&#xA;if let candidate = response?.candidates?.first, let text = candidate.output {&#xA;  print(text)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the documentation for the PaLM API at &lt;a href=&#34;https://developers.generativeai.google.com/guide&#34;&gt;https://developers.generativeai.google.com/guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/generative-ai-swift/main/docs/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Generative AI SDK for Swift.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository are licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hui-z/image_gallery_saver</title>
    <updated>2023-05-17T01:46:23Z</updated>
    <id>tag:github.com,2023-05-17:/hui-z/image_gallery_saver</id>
    <link href="https://github.com/hui-z/image_gallery_saver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;flutter中用于保存图片到相册的Plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;image_gallery_saver&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hui-z/image_gallery_saver#&#34;&gt;&lt;img src=&#34;https://travis-ci.org/hui-z/image_gallery_saver.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/image_gallery_saver&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/image_gallery_saver.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We use the &lt;code&gt;image_picker&lt;/code&gt; plugin to select images from the Android and iOS image library, but it can&#39;t save images to the gallery. This plugin can provide this feature.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use this plugin, add &lt;code&gt;image_gallery_saver&lt;/code&gt; as a dependency in your pubspec.yaml file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  image_gallery_saver: &#39;^1.7.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;iOS&lt;/h2&gt; &#xA;&lt;p&gt;Your project need create with swift. Add the following keys to your Info.plist file, located in &#xA; &lt;project root&gt;&#xA;  /ios/Runner/Info.plist:&#xA; &lt;/project&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NSPhotoLibraryAddUsageDescription - describe why your app needs permission for the photo library. This is called Privacy - Photo Library Additions Usage Description in the visual editor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;p&gt;You need to ask for storage permission to save an image to the gallery. You can handle the storage permission using &lt;a href=&#34;https://github.com/BaseflowIT/flutter-permission-handler&#34;&gt;flutter_permission_handler&lt;/a&gt;. In Android version 10, Open the manifest file and add this line to your application tag&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;application android:requestLegacyExternalStorage=&#34;true&#34; .....&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Saving an image from the internet, quality and name is option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_save() async {&#xA;   var response = await Dio().get(&#xA;           &#34;https://ss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/image/h%3D300/sign=a62e824376d98d1069d40a31113eb807/838ba61ea8d3fd1fc9c7b6853a4e251f94ca5f46.jpg&#34;,&#xA;           options: Options(responseType: ResponseType.bytes));&#xA;   final result = await ImageGallerySaver.saveImage(&#xA;           Uint8List.fromList(response.data),&#xA;           quality: 60,&#xA;           name: &#34;hello&#34;);&#xA;   print(result);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Saving file(ig: video/gif/others) from the internet&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_saveVideo() async {&#xA;    var appDocDir = await getTemporaryDirectory();&#xA;    String savePath = appDocDir.path + &#34;/temp.mp4&#34;;&#xA;    await Dio().download(&#34;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&#34;, savePath);&#xA;    final result = await ImageGallerySaver.saveFile(savePath);&#xA;    print(result);&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>