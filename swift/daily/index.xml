<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-29T01:37:13Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>insidegui/MacPreviewUtils</title>
    <updated>2022-12-29T01:37:13Z</updated>
    <id>tag:github.com,2022-12-29:/insidegui/MacPreviewUtils</id>
    <link href="https://github.com/insidegui/MacPreviewUtils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Handy tools for SwiftUI previews on macOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MacPreviewUtils&lt;/h1&gt; &#xA;&lt;p&gt;This package includes a few tools that I use all the time when developing macOS apps, whether using SwiftUI or AppKit. These tools help make SwiftUI previews more useful for Mac app developers.&lt;/p&gt; &#xA;&lt;h2&gt;Translucency Fix&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;Material&lt;/code&gt; and other views that rely on an app being active in order to render properly won&#39;t look right in SwiftUI previews, making it difficult to iterate on detailed designs that use such effects.&lt;/p&gt; &#xA;&lt;p&gt;Just by linking against the MacPreviewUtils library, you&#39;ll get an automatic fix for translucency in SwiftUI previews.&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;p&gt;No code needed, just link your app target (or one of the targets it links against) to MacPreviewUtils.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insidegui/MacPreviewUtils/main/images/Materials.png&#34; alt=&#34;Material preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Am I a SwiftUI Preview?&lt;/h2&gt; &#xA;&lt;p&gt;The library includes a couple of extensions on &lt;code&gt;ProcessInfo&lt;/code&gt; that can be used at runtime to check whether the process is running in a SwiftUI preview. This should be used sparingly, but it can be extremely useful to adapt certain app behaviors that can be problematic when running in SwiftUI previews.&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func doSomethingThatBreaksSwiftUIPreviews() {&#xA;    guard !ProcessInfo.isSwiftUIPreview else { return }&#xA;    &#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pin SwiftUI Preview to a Specific Display&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you might want to be looking at your SwiftUI preview in an external display, such as an iPad connected via Sidecar. This library includes a modifier that can do just that.&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MyView_Previews: PreviewProvider {&#xA;    static var previews: some View {&#xA;        /// This preview will show up on the connected Sidecar display.&#xA;        MyView()&#xA;            .pin(to: .sidecarDisplay, alignment: .center, options: [.interactiveOnly])&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debug Previews Using &lt;code&gt;print()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Breakpoints are great for debugging an app while it&#39;s running, and sometimes &lt;code&gt;print()&lt;/code&gt; statements may also be a good way to debug certain values over time. Unfortunately, while running in Xcode previews, there&#39;s no easy way to view your app&#39;s standard output, unless you&#39;re using &lt;code&gt;OSLog&lt;/code&gt;/&lt;code&gt;NSLog&lt;/code&gt; and filtering in the Console app.&lt;/p&gt; &#xA;&lt;p&gt;This library includes a modifier that displays a little console window while running an Xcode preview, allowing you to debug your previews using &lt;code&gt;print&lt;/code&gt; statements.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;previewConsole()&lt;/code&gt; may also be combined with the &lt;code&gt;pin(to:)&lt;/code&gt; modifier mentioned above, in which case it&#39;ll follow the display and position selection from that modifier.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MyView_Previews: PreviewProvider {&#xA;    static var previews: some View {&#xA;        MyView()&#xA;            .previewConsole()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: this modifier will only show the app&#39;s standard output, so it won&#39;t display messages logged with &lt;code&gt;os_log&lt;/code&gt; or &lt;code&gt;Logger&lt;/code&gt;. Support for the unified logging system and stderr is planned.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insidegui/MacPreviewUtils/main/images/PreviewConsole.jpg&#34; alt=&#34;Preview Console Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Will this mess up my app when debugging or in production?&lt;/h2&gt; &#xA;&lt;p&gt;Nope!&lt;/p&gt; &#xA;&lt;p&gt;Most of the code in this library is in &lt;code&gt;#if DEBUG&lt;/code&gt;/&lt;code&gt;#endif&lt;/code&gt; statements, so it won&#39;t even be included in release builds of the app.&lt;/p&gt; &#xA;&lt;p&gt;The modifiers included are designed for use only in SwiftUI previews, so you should not use them directly on view implementations. However, they all check if the code is running in a SwiftUI preview before doing anything, so that regular debug builds are not affected.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to include &lt;code&gt;#if DEBUG&lt;/code&gt;/&lt;code&gt;#endif&lt;/code&gt; around your SwiftUI previews that use this library as well, in order to prevent compiler errors when building for release.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zhuowei/WDBFontOverwrite</title>
    <updated>2022-12-29T01:37:13Z</updated>
    <id>tag:github.com,2022-12-29:/zhuowei/WDBFontOverwrite</id>
    <link href="https://github.com/zhuowei/WDBFontOverwrite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proof-of-concept app to overwrite fonts on iOS using CVE-2022-46689.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Proof-of-concept app to overwrite fonts on iOS using &lt;a href=&#34;https://support.apple.com/en-us/HT213530&#34;&gt;CVE-2022-46689&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Works on iOS 16.1.2 and below (tested on iOS 16.1) on unjailbroken devices.&lt;/p&gt; &#xA;&lt;p&gt;IPA available in the &lt;a href=&#34;https://github.com/zhuowei/WDBFontOverwrite/releases&#34;&gt;Releases&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m probably not going to work on this further. If anyone else wants to take over, feel free.&lt;/p&gt; &#xA;&lt;p&gt;Fonts included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DejaVu Sans Condensed&lt;/li&gt; &#xA; &lt;li&gt;DejaVu Serif&lt;/li&gt; &#xA; &lt;li&gt;DejaVu Sans Mono&lt;/li&gt; &#xA; &lt;li&gt;Go Regular&lt;/li&gt; &#xA; &lt;li&gt;Go Mono&lt;/li&gt; &#xA; &lt;li&gt;Fira Sans&lt;/li&gt; &#xA; &lt;li&gt;Segoe UI&lt;/li&gt; &#xA; &lt;li&gt;Comic Sans MS&lt;/li&gt; &#xA; &lt;li&gt;Choco Cooky&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also import custom fonts that were ported for iOS.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;DejaVu Sans Condensed | DejaVu Serif | DejaVu Sans Mono | Choco Cooky&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/704768/209511898-a1477b66-28e4-471a-87d9-36c1c2eb25ca.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go Regular | Go Mono | Segoe UI | Comic Sans MS&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/704768/209606970-a382c273-bdcb-425c-bca1-1b6f9b31862f.png&#34; alt=&#34;Another screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hanna Soft + JoyPixels | Bronkoh | Noto Serif SC | Fira Sans&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/704768/209753262-b8204c92-b873-41a7-8127-38bf86096470.png&#34; alt=&#34;Another screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Screenshot credit: &lt;a href=&#34;https://twitter.com/ev_ynw&#34;&gt;@ev_ynw&lt;/a&gt; for the ported &lt;a href=&#34;https://app.box.com/s/g4uk1yyqxm36sl9ovbwkpbbpn9isol8h/file/997004671334&#34;&gt;Hanna Soft&lt;/a&gt; and &lt;a href=&#34;https://app.box.com/s/g4uk1yyqxm36sl9ovbwkpbbpn9isol8h/file/915757902297&#34;&gt;Bronkoh&lt;/a&gt; fonts, &lt;a href=&#34;https://joypixels.com/download&#34;&gt;JoyPixels&lt;/a&gt; for the emoji font&lt;/p&gt; &#xA;&lt;h2&gt;Where to find ported fonts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ev_ynw&#34;&gt;@ev_ynw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PoomSmart/EmojiFonts/releases&#34;&gt;@PoomSmart&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The built-in fonts are not properly ported (I don&#39;t know how to port fonts). For best results, use a custom font. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;with the built-in fonts:&lt;/li&gt; &#xA;   &lt;li&gt;Only regular text uses the changed font: thin/medium/bold text falls back to Helvetica instead.&lt;/li&gt; &#xA;   &lt;li&gt;If the font doesn&#39;t show up at all, &lt;a href=&#34;https://twitter.com/m7mdabu7assan/status/1607609484901289985&#34;&gt;disable &#34;Bold Text&#34;&lt;/a&gt; in accessibility settings.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;File pickers in apps will fail to open with the error &#34;Something went wrong while displaying documents.&#34; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This happens if you replace the emoji font, or install fonts with &lt;a href=&#34;https://twitter.com/Gu3hi/status/1607986473198026752&#34;&gt;multiple weights&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;These fonts use the .ttc format, which breaks the files picker.&lt;/li&gt; &#xA;   &lt;li&gt;No workaround yet - you&#39;ll need to remove the custom font by rebooting.&lt;/li&gt; &#xA;   &lt;li&gt;It may be possible to convert a .ttc font to a .ttf font with tools such as &lt;a href=&#34;https://github.com/DavidBarts/getfonts&#34;&gt;https://github.com/DavidBarts/getfonts&lt;/a&gt;: I have not tested if this would fix the issue.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom font imports may not work: tapping on a font to import it &lt;a href=&#34;https://twitter.com/linshijin111/status/1607993438997446657&#34;&gt;doesn&#39;t do anything&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No workaround yet. The built-in fonts should still work.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Importing a custom font from some cloud storage apps&#39; file storage providers, such as Google Drive&#39;s file provider, crashes the app with a &#34;The file doesn&#39;t exist&#34; error. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Workaround: use the Files app to copy the font to your Downloads folder first.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Font conversion&lt;/h2&gt; &#xA;&lt;p&gt;The CVE-2022-46689 issue - as far as I know - only lets you overwrite 16383 bytes out of every 16384 bytes: the last byte of the page can&#39;t be written.&lt;/p&gt; &#xA;&lt;p&gt;(I could be wrong)&lt;/p&gt; &#xA;&lt;p&gt;To work around this, I package the font using the &lt;a href=&#34;https://www.w3.org/TR/WOFF2/&#34;&gt;WOFF2&lt;/a&gt; webfont format, which is &lt;a href=&#34;https://twitter.com/myunderpants/status/1503745380365877252&#34;&gt;supported on iOS&lt;/a&gt;. WOFF2 uses &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7932&#34;&gt;Brotli&lt;/a&gt; for compression, which lets me insert padding to skip over the last byte.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;repackfonts/make_woff2src.sh&lt;/code&gt; for details: this script:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;renames the font to .SFUI-Regular with &lt;a href=&#34;https://github.com/fonttools/fonttools&#34;&gt;TTX&lt;/a&gt; following &lt;a href=&#34;https://superuser.com/a/694452&#34;&gt;this answer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;rebuilds the font to .woff2&lt;/li&gt; &#xA; &lt;li&gt;runs &lt;code&gt;repackfonts/BrotliPadding.swift&lt;/code&gt; to decompress the WOFF2 file and insert padding to skip past the 16384th byte&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ian Beer of &lt;a href=&#34;https://googleprojectzero.blogspot.com&#34;&gt;Project Zero&lt;/a&gt; for finding CVE-2022-46689.&lt;/li&gt; &#xA; &lt;li&gt;Apple for the &lt;a href=&#34;https://github.com/apple-oss-distributions/xnu/raw/xnu-8792.61.2/tests/vm/vm_unaligned_copy_switch_race.c&#34;&gt;test case&lt;/a&gt; and &lt;a href=&#34;https://github.com/apple-oss-distributions/xnu/raw/xnu-8792.61.2/osfmk/vm/vm_map.c#L10150&#34;&gt;patch&lt;/a&gt;. (I didn&#39;t change anything: I only wrapped the test case in a library.)&lt;/li&gt; &#xA; &lt;li&gt;Everyone on Twitter who helped out and experimented with CVE-2022-46689, especially &lt;a href=&#34;https://twitter.com/dedbeddedbed&#34;&gt;@dedbeddedbed&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/AppleDry05&#34;&gt;@AppleDry05&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/haxi0sm&#34;&gt;@haxi0sm&lt;/a&gt; for exploring what can be done with this issue..&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ev_ynw&#34;&gt;WOFF2 compressor&lt;/a&gt; by Google&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://dejavu-fonts.github.io&#34;&gt;DejaVu fonts&lt;/a&gt; are distributed according to their &lt;a href=&#34;https://dejavu-fonts.github.io/License.html&#34;&gt;license&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://go.dev/blog/go-fonts&#34;&gt;Go fonts&lt;/a&gt; are distributed according to their license.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://mozilla.github.io/Fira/&#34;&gt;Fira Sans&lt;/a&gt; font is converted by &lt;a href=&#34;https://twitter.com/jonpalmisc/status/1607570871421468678&#34;&gt;@jonpalmisc&lt;/a&gt; - thanks!&lt;/li&gt; &#xA; &lt;li&gt;Segoe UI and Comic Sans MS are the property of Microsoft.&lt;/li&gt; &#xA; &lt;li&gt;Choco Cooky is the property of Samsung.&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t have any rights to redistribute these, but I&#39;m posting them anyways because #yolo.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jessesquires/Foil</title>
    <updated>2022-12-29T01:37:13Z</updated>
    <id>tag:github.com,2022-12-29:/jessesquires/Foil</id>
    <link href="https://github.com/jessesquires/Foil" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight property wrapper for UserDefaults done right&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Foil &lt;a href=&#34;https://github.com/jessesquires/Foil/actions&#34;&gt;&lt;img src=&#34;https://github.com/jessesquires/Foil/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;A lightweight &lt;a href=&#34;https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#ID348&#34;&gt;property wrapper&lt;/a&gt; for UserDefaults done right&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swiftpackageindex.com/jessesquires/Foil&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fjessesquires%2FFoil%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://swiftpackageindex.com/jessesquires/Foil&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fjessesquires%2FFoil%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Read the post: &lt;a href=&#34;https://www.jessesquires.com/blog/2021/03/26/a-better-approach-to-writing-a-userdefaults-property-wrapper/&#34;&gt;A better approach to writing a UserDefaults Property Wrapper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Why the name?&lt;/h4&gt; &#xA;&lt;p&gt;Foil, as in &#34;let me quickly and easily &lt;strong&gt;wrap&lt;/strong&gt; and &lt;strong&gt;store&lt;/strong&gt; this leftover food in some &lt;strong&gt;foil&lt;/strong&gt; so I can eat it later.&#34; 🌯 😉&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.wordnik.com/words/aluminum%20foil&#34;&gt;Foil&lt;/a&gt;:&lt;br&gt; &lt;strong&gt;noun&lt;/strong&gt;&lt;br&gt; &lt;em&gt;North America&lt;/em&gt;&lt;br&gt; A very thin, pliable, easily torn sheet of aluminum used for cooking, packaging, cosmetics, and insulation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;@WrappedDefault&lt;/code&gt; for non-optional values and &lt;code&gt;@WrappedDefaultOptional&lt;/code&gt; for optional ones. You may wish to store all your user defaults in one place, however, that is not necessary. &lt;strong&gt;Any&lt;/strong&gt; property on &lt;strong&gt;any type&lt;/strong&gt; can use this wrapper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class AppSettings {&#xA;    static let shared = AppSettings()&#xA;&#xA;    @WrappedDefault(key: &#34;flagEnabled&#34;)&#xA;    var flagEnabled = true&#xA;&#xA;    @WrappedDefault(key: &#34;totalCount&#34;)&#xA;    var totalCount = 0&#xA;&#xA;    @WrappedDefaultOptional(key: &#34;timestamp&#34;)&#xA;    var timestamp: Date?&#xA;}&#xA;&#xA;// Usage&#xA;&#xA;func userDidToggleSetting(_ sender: UISwitch) {&#xA;    AppSettings.shared.flagEnabled = sender.isOn&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also an included example app project.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;enum&lt;/code&gt; keys&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer using an &lt;code&gt;enum&lt;/code&gt; for the keys, writing an extension specific to your app is easy. However, this is not required. In fact, unless you have a specific reason to reference the keys, this is completely unnecessary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum AppSettingsKey: String, CaseIterable {&#xA;    case flagEnabled&#xA;    case totalCount&#xA;    case timestamp&#xA;}&#xA;&#xA;extension WrappedDefault {&#xA;    init(wrappedValue: T, _ key: AppSettingsKey) {&#xA;        self.init(wrappedValue: wrappedValue, key: key.rawValue)&#xA;    }&#xA;}&#xA;&#xA;extension WrappedDefaultOptional {&#xA;    init(_ key: AppSettingsKey) {&#xA;        self.init(key: key.rawValue)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Observing changes&lt;/h3&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://www.jessesquires.com/blog/2021/08/08/different-ways-to-observe-properties-in-swift/&#34;&gt;many ways to observe property changes&lt;/a&gt;. The most common are by using Key-Value Observing or a Combine Publisher. KVO observing requires the object with the property to inherit from &lt;code&gt;NSObject&lt;/code&gt; and the property must be declared as &lt;code&gt;@objc dynamic&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class AppSettings: NSObject {&#xA;    static let shared = AppSettings()&#xA;&#xA;    @WrappedDefaultOptional(key: &#34;userId&#34;)&#xA;    @objc dynamic var userId: String?&#xA;&#xA;    @WrappedDefaultOptional(key: &#34;average&#34;)&#xA;    var average: Double?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using KVO&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observer = AppSettings.shared.observe(\.userId, options: [.new]) { settings, change in&#xA;    print(change)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Combine&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; that &lt;code&gt;average&lt;/code&gt; does not need the &lt;code&gt;@objc dynamic&lt;/code&gt; annotation, &lt;code&gt;.receiveValue&lt;/code&gt; will fire immediately with the current value of &lt;code&gt;average&lt;/code&gt; and on every change after.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AppSettings.shared.$average&#xA;    .sink {&#xA;        print($0)&#xA;    }&#xA;    .store(in: &amp;amp;cancellable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Combine Alternative with KVO&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; in this case, &lt;code&gt;userId&lt;/code&gt; needs the &lt;code&gt;@objc dynamic&lt;/code&gt; annotation and &lt;code&gt;AppSettings&lt;/code&gt; needs to inherit from &lt;code&gt;NSObject&lt;/code&gt;. Then &lt;code&gt;receiveValue&lt;/code&gt; will fire only on changes to wrapped object&#39;s value. It will not publish the initial value as in the example above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AppSettings.shared&#xA;    .publisher(for: \.userId, options: [.new])&#xA;    .sink {&#xA;        print($0)&#xA;    }&#xA;    .store(in: &amp;amp;cancellable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported types&lt;/h3&gt; &#xA;&lt;p&gt;The following types are supported by default for use with &lt;code&gt;@WrappedDefault&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adding support for custom types is possible by conforming to &lt;code&gt;UserDefaultsSerializable&lt;/code&gt;. However, &lt;strong&gt;this is highly discouraged&lt;/strong&gt;. &lt;code&gt;UserDefaults&lt;/code&gt; is not intended for storing complex data structures and object graphs. You should probably be using a proper database (or serializing to disk via &lt;code&gt;Codable&lt;/code&gt;) instead.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UInt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dictionary&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RawRepresentable&lt;/code&gt; types&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dscoder.com/defaults.html&#34;&gt;NSUserDefaults in Practice&lt;/a&gt;, the excellent guide by &lt;a href=&#34;https://twitter.com/Catfish_Man&#34;&gt;David Smith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/userdefaults&#34;&gt;UserDefaults documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/UserDefaults/Introduction/Introduction.html#//apple_ref/doc/uid/10000059i-CH1-SW1&#34;&gt;Preferences and Settings Programming Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/PropertyLists/Introduction/Introduction.html#//apple_ref/doc/uid/10000048i&#34;&gt;Property List Programming Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 13.0+&lt;/li&gt; &#xA; &lt;li&gt;tvOS 13.0+&lt;/li&gt; &#xA; &lt;li&gt;watchOS 6.0+&lt;/li&gt; &#xA; &lt;li&gt;macOS 11+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift 5.7+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 14.0+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Foil&#39;, &#39;~&amp;gt; 4.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/jessesquires/Foil.git&#34;, from: &#34;4.0.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can add the package &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;directly via Xcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can read the &lt;a href=&#34;https://jessesquires.github.io/Foil&#34;&gt;documentation here&lt;/a&gt;. Generated with &lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;jazzy&lt;/a&gt;. Hosted by &lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Interested in making contributions to this project? Please review the guides below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jessesquires/.github/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jessesquires/.github/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jessesquires/.github/raw/main/SUPPORT.md&#34;&gt;Support and Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jessesquires/.github/raw/main/SECURITY.md&#34;&gt;Security Policy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also consider &lt;a href=&#34;https://github.com/sponsors/jessesquires&#34;&gt;sponsoring this project&lt;/a&gt; or &lt;a href=&#34;https://www.hexedbits.com&#34;&gt;buying my apps&lt;/a&gt;! ✌️&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Created and maintained by &lt;a href=&#34;https://www.jessesquires.com&#34;&gt;&lt;strong&gt;Jesse Squires&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the MIT License. See &lt;code&gt;LICENSE&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Copyright © 2021-present Jesse Squires.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>