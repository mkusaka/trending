<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-18T01:53:50Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ashleymills/Reachability.swift</title>
    <updated>2022-06-18T01:53:50Z</updated>
    <id>tag:github.com,2022-06-18:/ashleymills/Reachability.swift</id>
    <link href="https://github.com/ashleymills/Reachability.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Replacement for Apple&#39;s Reachability re-written in Swift with closures&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reachability.swift&lt;/h1&gt; &#xA;&lt;p&gt;Reachability.swift is a replacement for Apple&#39;s Reachability sample, re-written in Swift with closures.&lt;/p&gt; &#xA;&lt;p&gt;It is compatible with &lt;strong&gt;iOS&lt;/strong&gt; (8.0 - 12.0), &lt;strong&gt;OSX&lt;/strong&gt; (10.9 - 10.14) and &lt;strong&gt;tvOS&lt;/strong&gt; (9.0 - 12.0)&lt;/p&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/tonymillion/Reachability&#34;&gt;https://github.com/tonymillion/Reachability&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supporting &lt;strong&gt;Reachability.swift&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Keeping &lt;strong&gt;Reachability.swift&lt;/strong&gt; up-to-date is a time consuming task. Making updates, reviewing pull requests, responding to issues and answering emails all take time.&lt;/p&gt; &#xA;&lt;p&gt;Please consider sponsoring me &lt;a href=&#34;https://github.com/sponsors/ashleymills&#34;&gt;https://github.com/sponsors/ashleymills&lt;/a&gt;, it&#39;s a great way to say thanks!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re an iOS developer who&#39;s looking for a quick and easy way to create App Store screenshots, please try out my app &lt;a href=&#34;https://itunes.apple.com/app/apple-store/id1252374855?pt=215893&amp;amp;ct=reachability&amp;amp;mt=8&#34;&gt;Screenshot Producer&lt;/a&gt;…&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Devices&amp;nbsp;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Layout&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Copy&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Localize&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Export &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;http://is2.mzstatic.com/image/thumb/Purple118/v4/64/af/55/64af55bc-2ef0-691c-f5f3-4963685f7f63/source/552x414bb.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;http://is4.mzstatic.com/image/thumb/Purple128/v4/fb/4c/bd/fb4cbd2f-dd04-22ba-4fdf-5ac652693fb8/source/552x414bb.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;http://is1.mzstatic.com/image/thumb/Purple118/v4/5a/4f/cf/5a4fcfdf-ca04-0307-9f2e-83178e8ad90d/source/552x414bb.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;http://is4.mzstatic.com/image/thumb/Purple128/v4/17/ea/56/17ea562e-e045-96e7-fcac-cfaaf4f499fd/source/552x414bb.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;http://is4.mzstatic.com/image/thumb/Purple118/v4/59/9e/dd/599edd50-f05c-f413-8e88-e614731fd828/source/552x414bb.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And don&#39;t forget to &lt;strong&gt;★&lt;/strong&gt; the repo. This increases its visibility and encourages others to contribute.&lt;/p&gt; &#xA;&lt;p&gt;Thanks Ash&lt;/p&gt; &#xA;&lt;h2&gt;Got a problem?&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/ashleymills/Reachability.swift/raw/master/CONTRIBUTING.md&#34;&gt;https://github.com/ashleymills/Reachability.swift/blob/master/CONTRIBUTING.md&lt;/a&gt; before raising an issue.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Just drop the &lt;strong&gt;Reachability.swift&lt;/strong&gt; file into your project. That&#39;s it!&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. To install Reachability.swift with CocoaPods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure CocoaPods is &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html#getting-started&#34;&gt;installed&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your Podfile to include the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;pod &#39;ReachabilitySwift&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;In your code import Reachability like so: &lt;code&gt;import Reachability&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To install Reachability.swift with Carthage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Carthage via &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;github &#34;ashleymills/Reachability.swift&#34;&lt;/code&gt; to your Cartfile.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag &lt;code&gt;Reachability.framework&lt;/code&gt; from the &lt;code&gt;Carthage/Build/iOS/&lt;/code&gt; directory to the &lt;code&gt;Linked Frameworks and Libraries&lt;/code&gt; section of your Xcode project’s &lt;code&gt;General&lt;/code&gt; settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/Reachability.framework&lt;/code&gt; to &lt;code&gt;Input Files&lt;/code&gt; of Run Script Phase for Carthage.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your code import Reachability like so: &lt;code&gt;import Reachability&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager (SPM)&lt;/h3&gt; &#xA;&lt;p&gt;The Swift Package Manager is a tool for automating the distribution of Swift code and is integrated into the swift compiler. To integrate using Apple&#39;s Swift package manager from xcode :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter package URL : &lt;a href=&#34;https://github.com/ashleymills/Reachability.swift&#34;&gt;https://github.com/ashleymills/Reachability.swift&lt;/a&gt;, choose the latest release&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example - closures&lt;/h2&gt; &#xA;&lt;p&gt;NOTE: All closures are run on the &lt;strong&gt;main queue&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//declare this property where it won&#39;t go out of scope relative to your listener&#xA;let reachability = try! Reachability()&#xA;&#xA;reachability.whenReachable = { reachability in&#xA;    if reachability.connection == .wifi {&#xA;        print(&#34;Reachable via WiFi&#34;)&#xA;    } else {&#xA;        print(&#34;Reachable via Cellular&#34;)&#xA;    }&#xA;}&#xA;reachability.whenUnreachable = { _ in&#xA;    print(&#34;Not reachable&#34;)&#xA;}&#xA;&#xA;do {&#xA;    try reachability.startNotifier()&#xA;} catch {&#xA;    print(&#34;Unable to start notifier&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and for stopping notifications&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;reachability.stopNotifier()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example - notifications&lt;/h2&gt; &#xA;&lt;p&gt;NOTE: All notifications are delivered on the &lt;strong&gt;main queue&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//declare this property where it won&#39;t go out of scope relative to your listener&#xA;let reachability = try! Reachability()&#xA;&#xA;//declare this inside of viewWillAppear&#xA;&#xA;     NotificationCenter.default.addObserver(self, selector: #selector(reachabilityChanged(note:)), name: .reachabilityChanged, object: reachability)&#xA;    do{&#xA;      try reachability.startNotifier()&#xA;    }catch{&#xA;      print(&#34;could not start reachability notifier&#34;)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@objc func reachabilityChanged(note: Notification) {&#xA;&#xA;  let reachability = note.object as! Reachability&#xA;&#xA;  switch reachability.connection {&#xA;  case .wifi:&#xA;      print(&#34;Reachable via WiFi&#34;)&#xA;  case .cellular:&#xA;      print(&#34;Reachable via Cellular&#34;)&#xA;  case .unavailable:&#xA;    print(&#34;Network not reachable&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and for stopping notifications&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;reachability.stopNotifier()&#xA;NotificationCenter.default.removeObserver(self, name: .reachabilityChanged, object: reachability)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Want to help?&lt;/h2&gt; &#xA;&lt;p&gt;Got a bug fix, or a new feature? Create a pull request and go for it!&lt;/p&gt; &#xA;&lt;h2&gt;Let me know!&lt;/h2&gt; &#xA;&lt;p&gt;If you use &lt;strong&gt;Reachability.swift&lt;/strong&gt;, please let me know about your app and I&#39;ll put a link &lt;a href=&#34;https://github.com/ashleymills/Reachability.swift/wiki/Apps-using-Reachability.swift&#34;&gt;here…&lt;/a&gt; and tell your friends!&lt;/p&gt; &#xA;&lt;p&gt;Cheers, Ash&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Yummypets/YPImagePicker</title>
    <updated>2022-06-18T01:53:50Z</updated>
    <id>tag:github.com,2022-06-18:/Yummypets/YPImagePicker</id>
    <link href="https://github.com/Yummypets/YPImagePicker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📸 Instagram-like image picker &amp; filters for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/logo/logotype_horizontal.png?raw=true&#34; alt=&#34;ypimagepicker&#34; width=&#34;512&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/visual.jpg&#34; width=&#34;400px&#34;&gt; &lt;/h1&gt;&#xA;&lt;h2&gt;YPImagePicker&lt;/h2&gt; &#xA;&lt;p&gt;YPImagePicker is an instagram-like photo/video picker for iOS written in pure Swift. It is feature-rich and highly customizable to match your App&#39;s requirements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-swift%205-f48041.svg?style=flat&#34; alt=&#34;Language: Swift 5&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/YPImagePicker&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/YPImagePicker.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/YPImagePicker&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/YPImagePicker.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-compatible-4BC51D.svg?style=flat&#34; alt=&#34;SPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-yummypets-ypimagepicker-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/9710a89d-b1e2-4e55-a4a2-3ae1f98f4c53&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Yummypets/YPImagePicker/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Yummypets/YPImagePicker.svg?sanitize=true&#34; alt=&#34;GitHub tag&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/#installation&#34;&gt;Installation&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/#configuration&#34;&gt;Configuration&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/#usage&#34;&gt;Usage&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/#languages&#34;&gt;Languages&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/#ui-customization&#34;&gt;UI Customization&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Give it a quick try : &lt;code&gt;pod repo update&lt;/code&gt; then &lt;code&gt;pod try YPImagePicker&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/library.PNG&#34; width=&#34;200px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/photo.PNG&#34; width=&#34;200px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/video.PNG&#34; width=&#34;200px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/filters.PNG&#34; width=&#34;200px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Those features are available just with a few lines of code!&lt;/p&gt; &#xA;&lt;h2&gt;Notable Features&lt;/h2&gt; &#xA;&lt;p&gt;🌅 Library&lt;br&gt; 📷 Photo&lt;br&gt; 🎥 Video&lt;br&gt; ✂️ Crop&lt;br&gt; ⚡️ Flash&lt;br&gt; 🖼 Filters&lt;br&gt; 📁 Albums&lt;br&gt; 🔢 Multiple Selection&lt;br&gt; 📏 Video Trimming &amp;amp; Cover selection&lt;br&gt; 📐 Output image size&lt;br&gt; And many more...&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;First be sure to run &lt;code&gt;pod repo update&lt;/code&gt; to get the latest version available.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;pod &#39;YPImagePicker&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt; and run &lt;code&gt;pod install&lt;/code&gt;. Also add &lt;code&gt;use_frameworks!&lt;/code&gt; to the &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;target &#39;MyApp&#39;&#xA;pod &#39;YPImagePicker&#39;&#xA;use_frameworks!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Open SPM dependency manager through &lt;code&gt;File &amp;gt; Swift Pakcages &amp;gt; Add Package Dependency...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;and insert repository URL:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;https://github.com/Yummypets/YPImagePicker.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To add dependency in your own package, just specify a package in dependencies of your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(&#xA;name: &#34;YPImagePicker&#34;,&#xA;url: &#34;https://github.com/Yummypets/YPImagePicker.git&#34;,&#xA;.upToNextMajor(from: &#34;5.0.0&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: This has a minimum target iOS version of &lt;code&gt;12.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Plist entries&lt;/h2&gt; &#xA;&lt;p&gt;In order for your app to access camera and photo libraries, you&#39;ll need to ad these &lt;code&gt;plist entries&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Privacy - Camera Usage Description (photo/videos)&lt;/li&gt; &#xA; &lt;li&gt;Privacy - Photo Library Usage Description (library)&lt;/li&gt; &#xA; &lt;li&gt;Privacy - Microphone Usage Description (videos)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;NSCameraUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;yourWording&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;NSPhotoLibraryUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;yourWording&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;NSMicrophoneUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;yourWording&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;All the configuration endpoints are in the &lt;a href=&#34;https://github.com/Yummypets/YPImagePicker/raw/master/Source/Configuration/YPImagePickerConfiguration.swift&#34;&gt;YPImagePickerConfiguration&lt;/a&gt; struct. Below are the default value for reference, feel free to play around :)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = YPImagePickerConfiguration()&#xA;// [Edit configuration here ...]&#xA;// Build a picker with your configuration&#xA;let picker = YPImagePicker(configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;config.isScrollToChangeModesEnabled = true&#xA;config.onlySquareImagesFromCamera = true&#xA;config.usesFrontCamera = false&#xA;config.showsPhotoFilters = true&#xA;config.showsVideoTrimmer = true&#xA;config.shouldSaveNewPicturesToAlbum = true&#xA;config.albumName = &#34;DefaultYPImagePickerAlbumName&#34;&#xA;config.startOnScreen = YPPickerScreen.photo&#xA;config.screens = [.library, .photo]&#xA;config.showsCrop = .none&#xA;config.targetImageSize = YPImageSize.original&#xA;config.overlayView = UIView()&#xA;config.hidesStatusBar = true&#xA;config.hidesBottomBar = false&#xA;config.hidesCancelButton = false&#xA;config.preferredStatusBarStyle = UIStatusBarStyle.default&#xA;config.bottomMenuItemSelectedColour = UIColor(r: 38, g: 38, b: 38)&#xA;config.bottomMenuItemUnSelectedColour = UIColor(r: 153, g: 153, b: 153)&#xA;config.filters = [DefaultYPFilters...]&#xA;config.maxCameraZoomFactor = 1.0&#xA;config.fonts..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Library&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;config.library.options = nil&#xA;config.library.onlySquare = false&#xA;config.library.isSquareByDefault = true&#xA;config.library.minWidthForItem = nil&#xA;config.library.mediaType = YPlibraryMediaType.photo&#xA;config.library.defaultMultipleSelection = false&#xA;config.library.maxNumberOfItems = 1&#xA;config.library.minNumberOfItems = 1&#xA;config.library.numberOfItemsInRow = 4&#xA;config.library.spacingBetweenItems = 1.0&#xA;config.library.skipSelectionsGallery = false&#xA;config.library.preselectedItems = nil&#xA;config.library.preSelectItemOnMultipleSelection = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Video&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;config.video.compression = AVAssetExportPresetHighestQuality&#xA;config.video.fileType = .mov&#xA;config.video.recordingTimeLimit = 60.0&#xA;config.video.libraryTimeLimit = 60.0&#xA;config.video.minimumTimeLimit = 3.0&#xA;config.video.trimmerMaxDuration = 60.0&#xA;config.video.trimmerMinDuration = 3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gallery&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;config.gallery.hidesRemoveButton = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Set the default configuration for all pickers&#xA;YPImagePickerConfiguration.shared = config&#xA;&#xA;// And then use the default configuration like so:&#xA;let picker = YPImagePicker()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When displaying picker on iPad, picker will support one size only you should set it before displaying it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let preferredContentSize = CGSize(width: 500, height: 600);&#xA;YPImagePickerConfiguration.widthOniPad = preferredContentSize.width;&#xA;&#xA;// Now you can Display the picker with preferred size in dialog, popup etc&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First things first &lt;code&gt;import YPImagePicker&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The picker only has one callback &lt;code&gt;didFinishPicking&lt;/code&gt; enabling you to handle all the cases. Let&#39;s see some typical use cases 🤓&lt;/p&gt; &#xA;&lt;h3&gt;Single Photo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let picker = YPImagePicker()&#xA;picker.didFinishPicking { [unowned picker] items, _ in&#xA;    if let photo = items.singlePhoto {&#xA;        print(photo.fromCamera) // Image source (camera or library)&#xA;        print(photo.image) // Final image selected by the user&#xA;        print(photo.originalImage) // original image selected by the user, unfiltered&#xA;        print(photo.modifiedImage) // Transformed image, can be nil&#xA;        print(photo.exifMeta) // Print exif meta data of original image.&#xA;    }&#xA;    picker.dismiss(animated: true, completion: nil)&#xA;}&#xA;present(picker, animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Single video&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Here we configure the picker to only show videos, no photos.&#xA;var config = YPImagePickerConfiguration()&#xA;config.screens = [.library, .video]&#xA;config.library.mediaType = .video&#xA;&#xA;let picker = YPImagePicker(configuration: config)&#xA;picker.didFinishPicking { [unowned picker] items, _ in&#xA;    if let video = items.singleVideo {&#xA;        print(video.fromCamera)&#xA;        print(video.thumbnail)&#xA;        print(video.url)&#xA;    }&#xA;    picker.dismiss(animated: true, completion: nil)&#xA;}&#xA;present(picker, animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see &lt;code&gt;singlePhoto&lt;/code&gt; and &lt;code&gt;singleVideo&lt;/code&gt; helpers are here to help you handle single media which are very common, while using the same callback for all your use-cases \o/&lt;/p&gt; &#xA;&lt;h3&gt;Multiple selection&lt;/h3&gt; &#xA;&lt;p&gt;To enable multiple selection make sure to set &lt;code&gt;library.maxNumberOfItems&lt;/code&gt; in the configuration like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = YPImagePickerConfiguration()&#xA;config.library.maxNumberOfItems = 3&#xA;let picker = YPImagePicker(configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can handle multiple selection in the same callback you know and love :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;picker.didFinishPicking { [unowned picker] items, cancelled in&#xA;    for item in items {&#xA;        switch item {&#xA;        case .photo(let photo):&#xA;            print(photo)&#xA;        case .video(let video):&#xA;            print(video)&#xA;        }&#xA;    }&#xA;    picker.dismiss(animated: true, completion: nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handle Cancel event (if needed)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;picker.didFinishPicking { [unowned picker] items, cancelled in&#xA;    if cancelled {&#xA;        print(&#34;Picker was canceled&#34;)&#xA;    }&#xA;    picker.dismiss(animated: true, completion: nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it !&lt;/p&gt; &#xA;&lt;h2&gt;Languages&lt;/h2&gt; &#xA;&lt;p&gt;🇺🇸 English, 🇪🇸 Spanish, 🇫🇷 French 🇷🇺 Russian, 🇵🇱 Polish, 🇳🇱 Dutch, 🇧🇷 Brazilian, 🇹🇷 Turkish, 🇸🇾 Arabic, 🇩🇪 German, 🇮🇹 Italian, 🇯🇵 Japanese, 🇨🇳 Chinese, 🇮🇩 Indonesian, 🇰🇷 Korean, 🇹🇼 Traditional Chinese（Taiwan), 🇻🇳 Vietnamese, 🇹🇭 Thai, 🇨🇿 Czech, 🇮🇷 Farsi.&lt;/p&gt; &#xA;&lt;p&gt;If your language is not supported, you can still customize the wordings via the &lt;code&gt;configuration.wordings&lt;/code&gt; api:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;config.wordings.libraryTitle = &#34;Gallery&#34;&#xA;config.wordings.cameraTitle = &#34;Camera&#34;&#xA;config.wordings.next = &#34;OK&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Better yet you can submit an issue or pull request with your &lt;code&gt;Localizable.strings&lt;/code&gt; file to add a new language !&lt;/p&gt; &#xA;&lt;h2&gt;UI Customization&lt;/h2&gt; &#xA;&lt;p&gt;We tried to keep things as native as possible, so this is done mostly through native Apis.&lt;/p&gt; &#xA;&lt;h3&gt;Navigation bar color&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let coloredImage = UIImage(color: .red)&#xA;UINavigationBar.appearance().setBackgroundImage(coloredImage, for: UIBarMetrics.default)&#xA;// UIImage+color helper https://stackoverflow.com/questions/26542035/create-uiimage-with-solid-color-in-swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Navigation bar fonts&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let attributes = [NSAttributedString.Key.font : UIFont.systemFont(ofSize: 30, weight: .bold) ]&#xA;UINavigationBar.appearance().titleTextAttributes = attributes // Title fonts&#xA;UIBarButtonItem.appearance().setTitleTextAttributes(attributes, for: .normal) // Bar Button fonts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Navigation bar Text colors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;UINavigationBar.appearance().titleTextAttributes = [NSAttributedString.Key.foregroundColor : UIColor.yellow ] // Title color&#xA;UINavigationBar.appearance().tintColor = .red // Left. bar buttons&#xA;config.colors.tintColor = .green // Right bar buttons (actions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Original Project &amp;amp; Author&lt;/h2&gt; &#xA;&lt;p&gt;This project has been first inspired by &lt;a href=&#34;https://github.com/ytakzk/Fusuma&#34;&gt;Fusuma&lt;/a&gt; Considering the big code, design changes and all the additional features added along the way, this moved form a fork to a standalone separate repo, also for discoverability purposes. Original Fusuma author is &lt;a href=&#34;http://ytakzk.me&#34;&gt;ytakz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Core Team&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/S4cha&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/coreTeam1.png&#34; width=&#34;70px&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/NikKovIos&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/coreTeam2.png&#34; width=&#34;70px&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Contributors 🙏&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ezisazis&#34;&gt;ezisazis&lt;/a&gt;, &lt;a href=&#34;https://github.com/hanikeddah&#34;&gt;hanikeddah&lt;/a&gt;, &lt;a href=&#34;https://github.com/tahaburak&#34;&gt;tahaburak&lt;/a&gt;, &lt;a href=&#34;https://github.com/ajkolean&#34;&gt;ajkolean&lt;/a&gt;, &lt;a href=&#34;https://github.com/Anarchoschnitzel&#34;&gt;Anarchoschnitzel&lt;/a&gt;, &lt;a href=&#34;https://github.com/heitara&#34;&gt;Emil&lt;/a&gt;, &lt;a href=&#34;https://github.com/DamascenoRafael&#34;&gt;Rafael Damasceno&lt;/a&gt;, &lt;a href=&#34;https://github.com/https://github.com/cenkingunlugu&#34;&gt;cenkingunlugu&lt;/a&gt; &lt;a href=&#34;https://github.com/heitara&#34;&gt;heitara&lt;/a&gt; &lt;a href=&#34;https://github.com/portellaa&#34;&gt;portellaa&lt;/a&gt; &lt;a href=&#34;https://github.com/romixery&#34;&gt;Romixery&lt;/a&gt; &lt;a href=&#34;https://github.com/shotat&#34;&gt;shotat&lt;/a&gt; &lt;a href=&#34;https://github.com/shalamowww&#34;&gt;shalamowww&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/ihtiht&#34;&gt;ihtiht&lt;/a&gt; for the cool looking logo!&lt;/p&gt; &#xA;&lt;h2&gt;They helped us one way or another 👏&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/userdar&#34;&gt;userdar&lt;/a&gt;, &lt;a href=&#34;https://github.com/Ewg777&#34;&gt;Evgeniy&lt;/a&gt;, &lt;a href=&#34;https://github.com/MehdiMahdloo&#34;&gt;MehdiMahdloo&lt;/a&gt;, &lt;a href=&#34;https://github.com/om-ha&#34;&gt;om-ha&lt;/a&gt;, &lt;a href=&#34;https://github.com/userdar&#34;&gt;userdar&lt;/a&gt;, &lt;a href=&#34;https://github.com/ChintanWeapp&#34;&gt;ChintanWeapp&lt;/a&gt;, &lt;a href=&#34;https://github.com/eddieespinal&#34;&gt;eddieespinal&lt;/a&gt;, &lt;a href=&#34;https://github.com/viktorgardart&#34;&gt;viktorgardart&lt;/a&gt;, &lt;a href=&#34;https://github.com/gdelarosa&#34;&gt;gdelarosa&lt;/a&gt;, &lt;a href=&#34;https://github.com/cwestMobile&#34;&gt;cwestMobile&lt;/a&gt;, &lt;a href=&#34;https://github.com/Tinyik&#34;&gt;Tinyik&lt;/a&gt;, &lt;a href=&#34;https://github.com/Vivekthakur647&#34;&gt;Vivekthakur647&lt;/a&gt;, &lt;a href=&#34;https://github.com/tomasbykowski&#34;&gt;tomasbykowski&lt;/a&gt;, &lt;a href=&#34;https://github.com/artemsmikh&#34;&gt;artemsmikh&lt;/a&gt;, &lt;a href=&#34;https://github.com/theolof&#34;&gt;theolof&lt;/a&gt;, &lt;a href=&#34;https://github.com/dongdong3344&#34;&gt;dongdong3344&lt;/a&gt;, &lt;a href=&#34;https://github.com/MHX792&#34;&gt;MHX792&lt;/a&gt;, &lt;a href=&#34;https://github.com/CIronfounderson&#34;&gt;CIronfounderson&lt;/a&gt;, &lt;a href=&#34;https://github.com/Guerrix&#34;&gt;Guerrix&lt;/a&gt;, &lt;a href=&#34;https://github.com/Zedd0202&#34;&gt;Zedd0202&lt;/a&gt;, &lt;a href=&#34;https://github.com/mohammadZ74&#34;&gt;mohammadZ74&lt;/a&gt;, &lt;a href=&#34;https://github.com/SalmanGhumsani&#34;&gt;SalmanGhumsani&lt;/a&gt;, &lt;a href=&#34;https://github.com/wegweiser6&#34;&gt;wegweiser6&lt;/a&gt;, &lt;a href=&#34;https://github.com/BilalAkram&#34;&gt;BilalAkram&lt;/a&gt;, &lt;a href=&#34;https://github.com/KazimAhmad&#34;&gt;KazimAhmad&lt;/a&gt;, &lt;a href=&#34;https://github.com/JustinBeBoy&#34;&gt;JustinBeBoy&lt;/a&gt;, &lt;a href=&#34;https://github.com/SashaMeyer&#34;&gt;SashaMeyer&lt;/a&gt;, &lt;a href=&#34;https://github.com/GShushanik&#34;&gt;GShushanik&lt;/a&gt;, &lt;a href=&#34;https://github.com/Cez95&#34;&gt;Cez95&lt;/a&gt;, &lt;a href=&#34;https://github.com/Palando&#34;&gt;Palando&lt;/a&gt;, &lt;a href=&#34;https://github.com/sebastienboulogne&#34;&gt;sebastienboulogne&lt;/a&gt;, &lt;a href=&#34;https://github.com/JigneshParekh7165&#34;&gt;JigneshParekh7165&lt;/a&gt;, &lt;a href=&#34;https://github.com/Deepakepaisa&#34;&gt;Deepakepaisa&lt;/a&gt;, &lt;a href=&#34;https://github.com/AndreiBoariu&#34;&gt;AndreiBoariu&lt;/a&gt;, &lt;a href=&#34;https://github.com/nathankonrad1&#34;&gt;nathankonrad1&lt;/a&gt;, &lt;a href=&#34;https://github.com/wawilliams003&#34;&gt;wawilliams003&lt;/a&gt;, &lt;a href=&#34;https://github.com/pngo-hypewell&#34;&gt;pngo-hypewell&lt;/a&gt;, &lt;a href=&#34;https://github.com/PawanManjani&#34;&gt;PawanManjani&lt;/a&gt;, &lt;a href=&#34;https://github.com/devender54321&#34;&gt;devender54321&lt;/a&gt;, &lt;a href=&#34;https://github.com/Didar1994&#34;&gt;Didar1994&lt;/a&gt;, &lt;a href=&#34;https://github.com/relaxsus&#34;&gt;relaxsus&lt;/a&gt; &lt;a href=&#34;https://github.com/restoflash&#34;&gt;restoflash&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependency&lt;/h2&gt; &#xA;&lt;p&gt;YPImagePicker relies on &lt;a href=&#34;https://github.com/prynt/PryntTrimmerView&#34;&gt;prynt/PryntTrimmerView&lt;/a&gt; for provide video trimming and cover features. Big thanks to @HHK1 for making this open source :)&lt;/p&gt; &#xA;&lt;h2&gt;Obj-C support&lt;/h2&gt; &#xA;&lt;p&gt;Objective-C is not supported and this is not on our roadmap. Swift is the future and dropping Obj-C is the price to pay to keep our velocity on this library :)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;YPImagePicker is released under the MIT license.&lt;br&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Version&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift 3 -&amp;gt; version &lt;a href=&#34;https://github.com/Yummypets/YPImagePicker/releases/tag/1.2.0&#34;&gt;&lt;strong&gt;1.2.0&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.1 -&amp;gt; version &lt;a href=&#34;https://github.com/Yummypets/YPImagePicker/releases/tag/3.4.0&#34;&gt;&lt;strong&gt;3.4.1&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.2 -&amp;gt; version &lt;a href=&#34;https://github.com/Yummypets/YPImagePicker/releases/tag/3.5.2&#34;&gt;&lt;strong&gt;3.5.2&lt;/strong&gt;&lt;/a&gt; releases/tag/3.4.0)&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.0 -&amp;gt; version &lt;a href=&#34;https://github.com/Yummypets/YPImagePicker/releases/tag/4.0.0&#34;&gt;&lt;strong&gt;4.0.0&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.1 -&amp;gt; version &lt;a href=&#34;https://github.com/Yummypets/YPImagePicker/releases/tag/4.1.2&#34;&gt;&lt;strong&gt;4.1.2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.3 -&amp;gt; version &lt;a href=&#34;https://github.com/Yummypets/YPImagePicker/releases/tag/4.5.0&#34;&gt;&lt;strong&gt;4.5.0&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pointfreeco/swift-composable-architecture</title>
    <updated>2022-06-18T01:53:50Z</updated>
    <id>tag:github.com,2022-06-18:/pointfreeco/swift-composable-architecture</id>
    <link href="https://github.com/pointfreeco/swift-composable-architecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Composable Architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/pointfreeco/swift-composable-architecture/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Composable Architecture (TCA, for short) is a library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind. It can be used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#what-is-the-composable-architecture&#34;&gt;What is the Composable Architecture?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#learn-more&#34;&gt;Learn more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#basic-usage&#34;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#supplementary-libraries&#34;&gt;Supplemental libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#help&#34;&gt;Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#credits-and-thanks&#34;&gt;Credits and thanks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#other-libraries&#34;&gt;Other libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is the Composable Architecture?&lt;/h2&gt; &#xA;&lt;p&gt;This library provides a few core tools that can be used to build applications of varying purpose and complexity. It provides compelling stories that you can follow to solve many problems you encounter day-to-day when building applications, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;State management&lt;/strong&gt; &lt;br&gt; How to manage the state of your application using simple value types, and share state across many screens so that mutations in one screen can be immediately observed in another screen.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Composition&lt;/strong&gt; &lt;br&gt; How to break down large features into smaller components that can be extracted to their own, isolated modules and be easily glued back together to form the feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Side effects&lt;/strong&gt; &lt;br&gt; How to let certain parts of the application talk to the outside world in the most testable and understandable way possible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt; &lt;br&gt; How to not only test a feature built in the architecture, but also write integration tests for features that have been composed of many parts, and write end-to-end tests to understand how side effects influence your application. This allows you to make strong guarantees that your business logic is running in the way you expect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ergonomics&lt;/strong&gt; &lt;br&gt; How to accomplish all of the above in a simple API with as few concepts and moving parts as possible.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;The Composable Architecture was designed over the course of many episodes on &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt;, a video series exploring functional programming and the Swift language, hosted by &lt;a href=&#34;https://twitter.com/mbrandonw&#34;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can watch all of the episodes &lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture&#34;&gt;here&lt;/a&gt;, as well as a dedicated, multipart tour of the architecture from scratch: &lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture/a-tour-of-the-composable-architecture/ep100-a-tour-of-the-composable-architecture-part-1&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture/a-tour-of-the-composable-architecture/ep101-a-tour-of-the-composable-architecture-part-2&#34;&gt;part 2&lt;/a&gt;, &lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture/a-tour-of-the-composable-architecture/ep102-a-tour-of-the-composable-architecture-part-3&#34;&gt;part 3&lt;/a&gt; and &lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture/a-tour-of-the-composable-architecture/ep103-a-tour-of-the-composable-architecture-part-4&#34;&gt;part 4&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture&#34;&gt; &lt;img alt=&#34;video poster image&#34; src=&#34;https://d3rccdn33rt8ze.cloudfront.net/episodes/0069.jpeg&#34; width=&#34;600&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&#34;&gt;&lt;img src=&#34;https://d3rccdn33rt8ze.cloudfront.net/composable-architecture/demos.png&#34; alt=&#34;Screen shots of example applications&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo comes with &lt;em&gt;lots&lt;/em&gt; of examples to demonstrate how to solve common and complex problems with the Composable Architecture. Check out &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&#34;&gt;this&lt;/a&gt; directory to see them all, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/CaseStudies&#34;&gt;Case Studies&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Getting started&lt;/li&gt; &#xA;   &lt;li&gt;Effects&lt;/li&gt; &#xA;   &lt;li&gt;Navigation&lt;/li&gt; &#xA;   &lt;li&gt;Higher-order reducers&lt;/li&gt; &#xA;   &lt;li&gt;Reusable components&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pointfreeco/composable-core-location/tree/main/Examples/LocationManager&#34;&gt;Location manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pointfreeco/composable-core-motion/tree/main/Examples/MotionManager&#34;&gt;Motion manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Search&#34;&gt;Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SpeechRecognition&#34;&gt;Speech Recognition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&#34;&gt;Tic-Tac-Toe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Todos&#34;&gt;Todos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/VoiceMemos&#34;&gt;Voice memos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Looking for something more substantial? Check out the source code for &lt;a href=&#34;https://github.com/pointfreeco/isowords&#34;&gt;isowords&lt;/a&gt;, an iOS word search game built in SwiftUI and the Composable Architecture.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;To build a feature using the Composable Architecture you define some types and values that model your domain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: A type that describes the data your feature needs to perform its logic and render its UI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: A type that represents all of the actions that can happen in your feature, such as user actions, notifications, event sources and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment&lt;/strong&gt;: A type that holds any dependencies the feature needs, such as API clients, analytics clients, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reducer&lt;/strong&gt;: A function that describes how to evolve the current state of the app to the next state given an action. The reducer is also responsible for returning any effects that should be run, such as API requests, which can be done by returning an &lt;code&gt;Effect&lt;/code&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: The runtime that actually drives your feature. You send all user actions to the store so that the store can run the reducer and effects, and you can observe state changes in the store so that you can update UI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The benefits of doing this is that you will instantly unlock testability of your feature, and you will be able to break large, complex features into smaller domains that can be glued together.&lt;/p&gt; &#xA;&lt;p&gt;As a basic example, consider a UI that shows a number along with &#34;+&#34; and &#34;−&#34; buttons that increment and decrement the number. To make things interesting, suppose there is also a button that when tapped makes an API request to fetch a random fact about that number and then displays the fact in an alert.&lt;/p&gt; &#xA;&lt;p&gt;The state of this feature would consist of an integer for the current count, as well as an optional string that represents the title of the alert we want to show (optional because &lt;code&gt;nil&lt;/code&gt; represents not showing an alert):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AppState: Equatable {&#xA;  var count = 0&#xA;  var numberFactAlert: String?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next we have the actions in the feature. There are the obvious actions, such as tapping the decrement button, increment button, or fact button. But there are also some slightly non-obvious ones, such as the action of the user dismissing the alert, and the action that occurs when we receive a response from the fact API request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum AppAction: Equatable {&#xA;  case factAlertDismissed&#xA;  case decrementButtonTapped&#xA;  case incrementButtonTapped&#xA;  case numberFactButtonTapped&#xA;  case numberFactResponse(Result&amp;lt;String, ApiError&amp;gt;)&#xA;}&#xA;&#xA;struct ApiError: Error, Equatable {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next we model the environment of dependencies this feature needs to do its job. In particular, to fetch a number fact we need to construct an &lt;code&gt;Effect&lt;/code&gt; value that encapsulates the network request. So that dependency is a function from &lt;code&gt;Int&lt;/code&gt; to &lt;code&gt;Effect&amp;lt;String, ApiError&amp;gt;&lt;/code&gt;, where &lt;code&gt;String&lt;/code&gt; represents the response from the request. Further, the effect will typically do its work on a background thread (as is the case with &lt;code&gt;URLSession&lt;/code&gt;), and so we need a way to receive the effect&#39;s values on the main queue. We do this via a main queue scheduler, which is a dependency that is important to control so that we can write tests. We must use an &lt;code&gt;AnyScheduler&lt;/code&gt; so that we can use a live &lt;code&gt;DispatchQueue&lt;/code&gt; in production and a test scheduler in tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AppEnvironment {&#xA;  var mainQueue: AnySchedulerOf&amp;lt;DispatchQueue&amp;gt;&#xA;  var numberFact: (Int) -&amp;gt; Effect&amp;lt;String, ApiError&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we implement a reducer that implements the logic for this domain. It describes how to change the current state to the next state, and describes what effects need to be executed. Some actions don&#39;t need to execute effects, and they can return &lt;code&gt;.none&lt;/code&gt; to represent that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let appReducer = Reducer&amp;lt;AppState, AppAction, AppEnvironment&amp;gt; { state, action, environment in&#xA;  switch action {&#xA;  case .factAlertDismissed:&#xA;    state.numberFactAlert = nil&#xA;    return .none&#xA;&#xA;  case .decrementButtonTapped:&#xA;    state.count -= 1&#xA;    return .none&#xA;&#xA;  case .incrementButtonTapped:&#xA;    state.count += 1&#xA;    return .none&#xA;&#xA;  case .numberFactButtonTapped:&#xA;    return environment.numberFact(state.count)&#xA;      .receive(on: environment.mainQueue)&#xA;      .catchToEffect(AppAction.numberFactResponse)&#xA;&#xA;  case let .numberFactResponse(.success(fact)):&#xA;    state.numberFactAlert = fact&#xA;    return .none&#xA;&#xA;  case .numberFactResponse(.failure):&#xA;    state.numberFactAlert = &#34;Could not load a number fact :(&#34;&#xA;    return .none&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then finally we define the view that displays the feature. It holds onto a &lt;code&gt;Store&amp;lt;AppState, AppAction&amp;gt;&lt;/code&gt; so that it can observe all changes to the state and re-render, and we can send all user actions to the store so that state changes. We must also introduce a struct wrapper around the fact alert to make it &lt;code&gt;Identifiable&lt;/code&gt;, which the &lt;code&gt;.alert&lt;/code&gt; view modifier requires:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AppView: View {&#xA;  let store: Store&amp;lt;AppState, AppAction&amp;gt;&#xA;&#xA;  var body: some View {&#xA;    WithViewStore(self.store) { viewStore in&#xA;      VStack {&#xA;        HStack {&#xA;          Button(&#34;−&#34;) { viewStore.send(.decrementButtonTapped) }&#xA;          Text(&#34;\(viewStore.count)&#34;)&#xA;          Button(&#34;+&#34;) { viewStore.send(.incrementButtonTapped) }&#xA;        }&#xA;&#xA;        Button(&#34;Number fact&#34;) { viewStore.send(.numberFactButtonTapped) }&#xA;      }&#xA;      .alert(&#xA;        item: viewStore.binding(&#xA;          get: { $0.numberFactAlert.map(FactAlert.init(title:)) },&#xA;          send: .factAlertDismissed&#xA;        ),&#xA;        content: { Alert(title: Text($0.title)) }&#xA;      )&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;struct FactAlert: Identifiable {&#xA;  var title: String&#xA;  var id: String { self.title }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s important to note that we were able to implement this entire feature without having a real, live effect at hand. This is important because it means features can be built in isolation without building their dependencies, which can help compile times.&lt;/p&gt; &#xA;&lt;p&gt;It is also straightforward to have a UIKit controller driven off of this store. You subscribe to the store in &lt;code&gt;viewDidLoad&lt;/code&gt; in order to update the UI and show alerts. The code is a bit longer than the SwiftUI version, so we have collapsed it here:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand!&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class AppViewController: UIViewController {&#xA;  let viewStore: ViewStore&amp;lt;AppState, AppAction&amp;gt;&#xA;  var cancellables: Set&amp;lt;AnyCancellable&amp;gt; = []&#xA;&#xA;  init(store: Store&amp;lt;AppState, AppAction&amp;gt;) {&#xA;    self.viewStore = ViewStore(store)&#xA;    super.init(nibName: nil, bundle: nil)&#xA;  }&#xA;&#xA;  required init?(coder: NSCoder) {&#xA;    fatalError(&#34;init(coder:) has not been implemented&#34;)&#xA;  }&#xA;&#xA;  override func viewDidLoad() {&#xA;    super.viewDidLoad()&#xA;&#xA;    let countLabel = UILabel()&#xA;    let incrementButton = UIButton()&#xA;    let decrementButton = UIButton()&#xA;    let factButton = UIButton()&#xA;&#xA;    // Omitted: Add subviews and set up constraints...&#xA;&#xA;    self.viewStore.publisher&#xA;      .map { &#34;\($0.count)&#34; }&#xA;      .assign(to: \.text, on: countLabel)&#xA;      .store(in: &amp;amp;self.cancellables)&#xA;&#xA;    self.viewStore.publisher.numberFactAlert&#xA;      .sink { [weak self] numberFactAlert in&#xA;        let alertController = UIAlertController(&#xA;          title: numberFactAlert, message: nil, preferredStyle: .alert&#xA;        )&#xA;        alertController.addAction(&#xA;          UIAlertAction(&#xA;            title: &#34;Ok&#34;,&#xA;            style: .default,&#xA;            handler: { _ in self?.viewStore.send(.factAlertDismissed) }&#xA;          )&#xA;        )&#xA;        self?.present(alertController, animated: true, completion: nil)&#xA;      }&#xA;      .store(in: &amp;amp;self.cancellables)&#xA;  }&#xA;&#xA;  @objc private func incrementButtonTapped() {&#xA;    self.viewStore.send(.incrementButtonTapped)&#xA;  }&#xA;  @objc private func decrementButtonTapped() {&#xA;    self.viewStore.send(.decrementButtonTapped)&#xA;  }&#xA;  @objc private func factButtonTapped() {&#xA;    self.viewStore.send(.numberFactButtonTapped)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Once we are ready to display this view, for example in the scene delegate, we can construct a store. This is the moment where we need to supply the dependencies, and for now we can just use an effect that immediately returns a mocked string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let appView = AppView(&#xA;  store: Store(&#xA;    initialState: AppState(),&#xA;    reducer: appReducer,&#xA;    environment: AppEnvironment(&#xA;      mainQueue: .main,&#xA;      numberFact: { number in Effect(value: &#34;\(number) is a good number Brent&#34;) }&#xA;    )&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that is enough to get something on the screen to play around with. It&#39;s definitely a few more steps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives us a consistent manner to apply state mutations, instead of scattering logic in some observable objects and in various action closures of UI components. It also gives us a concise way of expressing side effects. And we can immediately test this logic, including the effects, without doing much additional work.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;To test, you first create a &lt;code&gt;TestStore&lt;/code&gt; with the same information that you would to create a regular &lt;code&gt;Store&lt;/code&gt;, except this time we can supply test-friendly dependencies. In particular, we use a test scheduler instead of the live &lt;code&gt;DispatchQueue.main&lt;/code&gt; scheduler because that allows us to control when work is executed, and we don&#39;t have to artificially wait for queues to catch up.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let scheduler = DispatchQueue.test&#xA;&#xA;let store = TestStore(&#xA;  initialState: AppState(),&#xA;  reducer: appReducer,&#xA;  environment: AppEnvironment(&#xA;    mainQueue: scheduler.eraseToAnyScheduler(),&#xA;    numberFact: { number in Effect(value: &#34;\(number) is a good number Brent&#34;) }&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the test store is created we can use it to make an assertion of an entire user flow of steps. Each step of the way we need to prove that state changed how we expect. Further, if a step causes an effect to be executed, which feeds data back into the store, we must assert that those actions were received properly.&lt;/p&gt; &#xA;&lt;p&gt;The test below has the user increment and decrement the count, then they ask for a number fact, and the response of that effect triggers an alert to be shown, and then dismissing the alert causes the alert to go away.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Test that tapping on the increment/decrement buttons changes the count&#xA;store.send(.incrementButtonTapped) {&#xA;  $0.count = 1&#xA;}&#xA;store.send(.decrementButtonTapped) {&#xA;  $0.count = 0&#xA;}&#xA;&#xA;// Test that tapping the fact button causes us to receive a response from the effect. Note&#xA;// that we have to advance the scheduler because we used `.receive(on:)` in the reducer.&#xA;store.send(.numberFactButtonTapped)&#xA;&#xA;scheduler.advance()&#xA;store.receive(.numberFactResponse(.success(&#34;0 is a good number Brent&#34;))) {&#xA;  $0.numberFactAlert = &#34;0 is a good number Brent&#34;&#xA;}&#xA;&#xA;// And finally dismiss the alert&#xA;store.send(.factAlertDismissed) {&#xA;  $0.numberFactAlert = nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is the basics of building and testing a feature in the Composable Architecture. There are &lt;em&gt;a lot&lt;/em&gt; more things to be explored, such as composition, modularity, adaptability, and complex effects. The &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&#34;&gt;Examples&lt;/a&gt; directory has a bunch of projects to explore to see more advanced usages.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;The Composable Architecture comes with a number of tools to aid in debugging.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reducer.debug()&lt;/code&gt; enhances a reducer with debug-printing that describes every action the reducer receives and every mutation it makes to state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;received action:&#xA;  AppAction.todoCheckboxTapped(id: UUID(5834811A-83B4-4E5E-BCD3-8A38F6BDCA90))&#xA;  AppState(&#xA;    todos: [&#xA;      Todo(&#xA;-       isComplete: false,&#xA;+       isComplete: true,&#xA;        description: &#34;Milk&#34;,&#xA;        id: 5834811A-83B4-4E5E-BCD3-8A38F6BDCA90&#xA;      ),&#xA;      … (2 unchanged)&#xA;    ]&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reducer.signpost()&lt;/code&gt; instruments a reducer with signposts so that you can gain insight into how long actions take to execute, and when effects are running.&lt;/p&gt; &lt;img src=&#34;https://s3.amazonaws.com/pointfreeco-production/point-free-pointers/0044-signposts-cover.jpg&#34; width=&#34;600&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supplementary libraries&lt;/h2&gt; &#xA;&lt;p&gt;One of the most important principles of the Composable Architecture is that side effects are never performed directly, but instead are wrapped in the &lt;code&gt;Effect&lt;/code&gt; type, returned from reducers, and then the &lt;code&gt;Store&lt;/code&gt; later performs the effect. This is crucial for simplifying how data flows through an application, and for gaining testability on the full end-to-end cycle of user action to effect execution.&lt;/p&gt; &#xA;&lt;p&gt;However, this also means that many libraries and SDKs you interact with on a daily basis need to be retrofitted to be a little more friendly to the Composable Architecture style. That&#39;s why we&#39;d like to ease the pain of using some of Apple&#39;s most popular frameworks by providing wrapper libraries that expose their functionality in a way that plays nicely with our library. So far we support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pointfreeco/composable-core-location&#34;&gt;&lt;code&gt;ComposableCoreLocation&lt;/code&gt;&lt;/a&gt;: A wrapper around &lt;code&gt;CLLocationManager&lt;/code&gt; that makes it easy to use from a reducer, and easy to write tests for how your logic interacts with &lt;code&gt;CLLocationManager&lt;/code&gt;&#39;s functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pointfreeco/composable-core-motion&#34;&gt;&lt;code&gt;ComposableCoreMotion&lt;/code&gt;&lt;/a&gt;: A wrapper around &lt;code&gt;CMMotionManager&lt;/code&gt; that makes it easy to use from a reducer, and easy to write tests for how your logic interacts with &lt;code&gt;CMMotionManager&lt;/code&gt;&#39;s functionality.&lt;/li&gt; &#xA; &lt;li&gt;More to come soon. Keep an eye out 😉&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are interested in contributing a wrapper library for a framework that we have not yet covered, feel free to open an issue expressing your interest so that we can discuss a path forward.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;How does the Composable Architecture compare to Elm, Redux, and others?&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Expand to see answer&lt;/summary&gt; The Composable Architecture (TCA) is built on a foundation of ideas popularized by the Elm Architecture (TEA) and Redux, but made to feel at home in the Swift language and on Apple&#39;s platforms. &#xA;   &lt;p&gt;In some ways TCA is a little more opinionated than the other libraries. For example, Redux is not prescriptive with how one executes side effects, but TCA requires all side effects to be modeled in the &lt;code&gt;Effect&lt;/code&gt; type and returned from the reducer.&lt;/p&gt; &#xA;   &lt;p&gt;In other ways TCA is a little more lax than the other libraries. For example, Elm controls what kinds of effects can be created via the &lt;code&gt;Cmd&lt;/code&gt; type, but TCA allows an escape hatch to any kind of effect since &lt;code&gt;Effect&lt;/code&gt; conforms to the Combine &lt;code&gt;Publisher&lt;/code&gt; protocol.&lt;/p&gt; &#xA;   &lt;p&gt;And then there are certain things that TCA prioritizes highly that are not points of focus for Redux, Elm, or most other libraries. For example, composition is very important aspect of TCA, which is the process of breaking down large features into smaller units that can be glued together. This is accomplished with the &lt;code&gt;pullback&lt;/code&gt; and &lt;code&gt;combine&lt;/code&gt; operators on reducers, and it aids in handling complex features as well as modularization for a better-isolated code base and improved compile times.&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why isn&#39;t &lt;code&gt;Store&lt;/code&gt; thread-safe? &lt;br&gt; Why isn&#39;t &lt;code&gt;send&lt;/code&gt; queued? &lt;br&gt; Why isn&#39;t &lt;code&gt;send&lt;/code&gt; run on the main thread?&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Expand to see answer&lt;/summary&gt; &#xA;   &lt;p&gt;All interactions with an instance of &lt;code&gt;Store&lt;/code&gt; (including all of its scopes and derived &lt;code&gt;ViewStore&lt;/code&gt;s) must be done on the same thread. If the store is powering a SwiftUI or UIKit view then, all interactions must be done on the &lt;em&gt;main&lt;/em&gt; thread.&lt;/p&gt; &#xA;   &lt;p&gt;When an action is sent to the &lt;code&gt;Store&lt;/code&gt;, a reducer is run on the current state, and this process cannot be done from multiple threads. A possible work around is to use a queue in &lt;code&gt;send&lt;/code&gt;s implementation, but this introduces a few new complications:&lt;/p&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt; &lt;p&gt;If done simply with &lt;code&gt;DispatchQueue.main.async&lt;/code&gt; you will incur a thread hop even when you are already on the main thread. This can lead to unexpected behavior in UIKit and SwiftUI, where sometimes you are required to do work synchronously, such as in animation blocks.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;It is possible to create a scheduler that performs its work immediately when on the main thread and otherwise uses &lt;code&gt;DispatchQueue.main.async&lt;/code&gt; (&lt;em&gt;e.g.&lt;/em&gt; see &lt;a href=&#34;https://github.com/pointfreeco/combine-schedulers&#34;&gt;CombineScheduler&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/pointfreeco/combine-schedulers/raw/main/Sources/CombineSchedulers/UIScheduler.swift&#34;&gt;&lt;code&gt;UIScheduler&lt;/code&gt;&lt;/a&gt;). This introduces a lot more complexity, and should probably not be adopted without having a very good reason.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;   &lt;p&gt;This is why we require all actions be sent from the same thread. This requirement is in the same spirit of how &lt;code&gt;URLSession&lt;/code&gt; and other Apple APIs are designed. Those APIs tend to deliver their outputs on whatever thread is most convenient for them, and then it is your responsibility to dispatch back to the main queue if that&#39;s what you need. The Composable Architecture makes you responsible for making sure to send actions on the main thread. If you are using an effect that may deliver its output on a non-main thread, you must explicitly perform &lt;code&gt;.receive(on:)&lt;/code&gt; in order to force it back on the main thread.&lt;/p&gt; &#xA;   &lt;p&gt;This approach makes the fewest number of assumptions about how effects are created and transformed, and prevents unnecessary thread hops and re-dispatching. It also provides some testing benefits. If your effects are not responsible for their own scheduling, then in tests all of the effects would run synchronously and immediately. You would not be able to test how multiple in-flight effects interleave with each other and affect the state of your application. However, by leaving scheduling out of the &lt;code&gt;Store&lt;/code&gt; we get to test these aspects of our effects if we so desire, or we can ignore if we prefer. We have that flexibility.&lt;/p&gt; &#xA;   &lt;p&gt;However, if you are still not a fan of our choice, then never fear! The Composable Architecture is flexible enough to allow you to introduce this functionality yourself if you so desire. It is possible to create a higher-order reducer that can force all effects to deliver their output on the main thread, regardless of where the effect does its work:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Reducer {&#xA;  func receive&amp;lt;S: Scheduler&amp;gt;(on scheduler: S) -&amp;gt; Self {&#xA;    Self { state, action, environment in&#xA;      self(&amp;amp;state, action, environment)&#xA;        .receive(on: scheduler)&#xA;        .eraseToEffect()&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;You would probably still want something like a &lt;code&gt;UIScheduler&lt;/code&gt; so that you don&#39;t needlessly perform thread hops.&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The Composable Architecture depends on the Combine framework, so it requires minimum deployment targets of iOS 13, macOS 10.15, Mac Catalyst 13, tvOS 13, and watchOS 6. If your application must support older OSes, there are forks for &lt;a href=&#34;https://github.com/trading-point/reactiveswift-composable-architecture&#34;&gt;ReactiveSwift&lt;/a&gt; and &lt;a href=&#34;https://github.com/dannyhertz/rxswift-composable-architecture&#34;&gt;RxSwift&lt;/a&gt; that you can adopt!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can add ComposableArchitecture to an Xcode project by adding it as a package dependency.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, select &lt;strong&gt;Add Packages...&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter &#34;&lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture&#34;&gt;https://github.com/pointfreeco/swift-composable-architecture&lt;/a&gt;&#34; into the package repository URL text field&lt;/li&gt; &#xA; &lt;li&gt;Depending on how your project is structured: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you have a single application target that needs access to the library, then add &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; directly to your application.&lt;/li&gt; &#xA;   &lt;li&gt;If you want to use this library from multiple Xcode targets, or mixing Xcode targets and SPM targets, you must create a shared framework that depends on &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; and then depend on that framework in all of your targets. For an example of this, check out the &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&#34;&gt;Tic-Tac-Toe&lt;/a&gt; demo application, which splits lots of features into modules and consumes the static library in this fashion using the &lt;strong&gt;tic-tac-toe&lt;/strong&gt; Swift package.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation for releases and &lt;code&gt;main&lt;/code&gt; are available here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture&#34;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.36.0/documentation/composablearchitecture&#34;&gt;0.36.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Other versions &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.35.0/documentation/composablearchitecture&#34;&gt;0.35.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.34.0/documentation/composablearchitecture&#34;&gt;0.34.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.33.1/documentation/composablearchitecture&#34;&gt;0.33.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.33.0/documentation/composablearchitecture&#34;&gt;0.33.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.32.0/documentation/composablearchitecture&#34;&gt;0.32.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.31.0/documentation/composablearchitecture&#34;&gt;0.31.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.30.0/documentation/composablearchitecture&#34;&gt;0.30.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.29.0/documentation/composablearchitecture&#34;&gt;0.29.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.28.1/documentation/composablearchitecture&#34;&gt;0.28.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.28.0/documentation/composablearchitecture&#34;&gt;0.28.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.27.1/documentation/composablearchitecture&#34;&gt;0.27.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.27.0/documentation/composablearchitecture&#34;&gt;0.27.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.26.0/documentation/composablearchitecture&#34;&gt;0.26.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.25.1/documentation/composablearchitecture&#34;&gt;0.25.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.25.0/documentation/composablearchitecture&#34;&gt;0.25.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.24.0/documentation/composablearchitecture&#34;&gt;0.24.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.23.0/documentation/composablearchitecture&#34;&gt;0.23.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.22.0/documentation/composablearchitecture&#34;&gt;0.22.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.21.0/documentation/composablearchitecture&#34;&gt;0.21.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.20.0/documentation/composablearchitecture&#34;&gt;0.20.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.19.0/documentation/composablearchitecture&#34;&gt;0.19.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.18.0/documentation/composablearchitecture&#34;&gt;0.18.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.17.0/documentation/composablearchitecture&#34;&gt;0.17.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.16.0/documentation/composablearchitecture&#34;&gt;0.16.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.15.0/documentation/composablearchitecture&#34;&gt;0.15.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.14.0/documentation/composablearchitecture&#34;&gt;0.14.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.13.0/documentation/composablearchitecture&#34;&gt;0.13.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.12.0/documentation/composablearchitecture&#34;&gt;0.12.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.11.0/documentation/composablearchitecture&#34;&gt;0.11.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.10.0/documentation/composablearchitecture&#34;&gt;0.10.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.9.0/documentation/composablearchitecture&#34;&gt;0.9.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.8.0/documentation/composablearchitecture&#34;&gt;0.8.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.7.0/documentation/composablearchitecture&#34;&gt;0.7.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.6.0/documentation/composablearchitecture&#34;&gt;0.6.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.5.0/documentation/composablearchitecture&#34;&gt;0.5.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.4.0/documentation/composablearchitecture&#34;&gt;0.4.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.3.0/documentation/composablearchitecture&#34;&gt;0.3.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.2.0/documentation/composablearchitecture&#34;&gt;0.2.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.5/documentation/composablearchitecture&#34;&gt;0.1.5&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.4/documentation/composablearchitecture&#34;&gt;0.1.4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.3/documentation/composablearchitecture&#34;&gt;0.1.3&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.2/documentation/composablearchitecture&#34;&gt;0.1.2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.1/documentation/composablearchitecture&#34;&gt;0.1.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.0/documentation/composablearchitecture&#34;&gt;0.1.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you want to discuss the Composable Architecture or have a question about how to use it to solve a particular problem, you can start a topic in the &lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture/discussions&#34;&gt;discussions&lt;/a&gt; tab of this repo, or ask around on &lt;a href=&#34;https://forums.swift.org/c/related-projects/swift-composable-architecture&#34;&gt;its Swift forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;The following translations of this README have been contributed by members of the community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/NorhanBoghdadi/1b98d55c02b683ddef7e05c2ebcccd47&#34;&gt;Arabic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/nikitamounier/0e93eb832cf389db12f9a69da030a2dc&#34;&gt;French&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/wendyliga/792ea9ac5cc887f59de70a9e39cc7343&#34;&gt;Indonesian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/Bellaposa/5114e6d4d55fdb1388e8186886d48958&#34;&gt;Italian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/pilgwon/ea05e2207ab68bdd1f49dff97b293b17&#34;&gt;Korean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/sh3l6orrr/10c8f7c634a892a9c37214f3211242ad&#34;&gt;Simplified Chinese&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute a translation, please &lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md&#34;&gt;open a PR&lt;/a&gt; with a link to a &lt;a href=&#34;https://gist.github.com&#34;&gt;Gist&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Credits and thanks&lt;/h2&gt; &#xA;&lt;p&gt;The following people gave feedback on the library at its early stages and helped make the library what it is today:&lt;/p&gt; &#xA;&lt;p&gt;Paul Colton, Kaan Dedeoglu, Matt Diephouse, Josef Doležal, Eimantas, Matthew Johnson, George Kaimakas, Nikita Leonov, Christopher Liscio, Jeffrey Macko, Alejandro Martinez, Shai Mishali, Willis Plummer, Simon-Pierre Roy, Justin Price, Sven A. Schmidt, Kyle Sherman, Petr Šíma, Jasdev Singh, Maxim Smirnov, Ryan Stone, Daniel Hollis Tavares, and all of the &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt; subscribers 😁.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://twitter.com/liscio&#34;&gt;Chris Liscio&lt;/a&gt; who helped us work through many strange SwiftUI quirks and helped refine the final API.&lt;/p&gt; &#xA;&lt;p&gt;And thanks to &lt;a href=&#34;https://github.com/freak4pc&#34;&gt;Shai Mishali&lt;/a&gt; and the &lt;a href=&#34;https://github.com/CombineCommunity/CombineExt/&#34;&gt;CombineCommunity&lt;/a&gt; project, from which we took their implementation of &lt;code&gt;Publishers.Create&lt;/code&gt;, which we use in &lt;code&gt;Effect&lt;/code&gt; to help bridge delegate and callback-based APIs, making it much easier to interface with 3rd party frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Other libraries&lt;/h2&gt; &#xA;&lt;p&gt;The Composable Architecture was built on a foundation of ideas started by other libraries, in particular &lt;a href=&#34;https://elm-lang.org&#34;&gt;Elm&lt;/a&gt; and &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are also many architecture libraries in the Swift and iOS community. Each one of these has their own set of priorities and trade-offs that differ from the Composable Architecture.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/uber/RIBs&#34;&gt;RIBs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ReactiveCocoa/Loop&#34;&gt;Loop&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ReSwift/ReSwift&#34;&gt;ReSwift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/square/workflow&#34;&gt;Workflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ReactorKit/ReactorKit&#34;&gt;ReactorKit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/NoTests/RxFeedback.swift&#34;&gt;RxFeedback&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/spotify/mobius.swift&#34;&gt;Mobius.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;And more&lt;/summary&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/FluxorOrg/Fluxor&#34;&gt;Fluxor&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/RPallas92/PromisedArchitectureKit&#34;&gt;PromisedArchitectureKit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>