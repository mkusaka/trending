<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-01T01:42:42Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ChimeHQ/Chime</title>
    <updated>2023-09-01T01:42:42Z</updated>
    <id>tag:github.com,2023-09-01:/ChimeHQ/Chime</id>
    <link href="https://github.com/ChimeHQ/Chime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An editor for macOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ChimeHQ/Chime&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Chime&lt;/h1&gt; &#xA;&lt;p&gt;An editor for macOS&lt;/p&gt; &#xA;&lt;p&gt;Version &lt;a href=&#34;https://www.chimehq.com/download&#34;&gt;2.2.1&lt;/a&gt; is now available.&lt;/p&gt; &#xA;&lt;p&gt;Goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;develop modular, open source components&lt;/li&gt; &#xA; &lt;li&gt;be an editor people enjoy using&lt;/li&gt; &#xA; &lt;li&gt;support cool &lt;a href=&#34;https://github.com/ChimeHQ/ChimeKit&#34;&gt;extensions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;completions&lt;/li&gt; &#xA; &lt;li&gt;command line tool&lt;/li&gt; &#xA; &lt;li&gt;document/project-scoped search&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://editorconfig.org&#34;&gt;editorconfig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChimeHQ/ChimeKit&#34;&gt;extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;file navigator&lt;/li&gt; &#xA; &lt;li&gt;syntax highlighting (driven by tree-sitter and LSP)&lt;/li&gt; &#xA; &lt;li&gt;structure highlighting&lt;/li&gt; &#xA; &lt;li&gt;semantic symbol information&lt;/li&gt; &#xA; &lt;li&gt;textual/symbolic quick open&lt;/li&gt; &#xA; &lt;li&gt;UI theming&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project State&lt;/h2&gt; &#xA;&lt;p&gt;The code in this repo should be considered &lt;strong&gt;non-functional&lt;/strong&gt; right now. If you want to use Chime, you can &lt;a href=&#34;https://www.chimehq.com/download&#34;&gt;download&lt;/a&gt; the currently released version. The goal is to have something of alpha quality by the time macOS 14 ships.&lt;/p&gt; &#xA;&lt;p&gt;Chime used to be commercial, but is now free. It built up some pretty significant cruft over time. In particular, the core UI application architecture is just in a bad state. It is also quite complex to build. So, I&#39;ve opted to re-implement that core and pull in parts as appropriate. I&#39;ll be putting an emphasis on extracting components into packages as I go. A fitting rebirth, I would say.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;It is always a good idea to &lt;strong&gt;discuss&lt;/strong&gt; before taking on a significant task. That said, I have a strong bias towards enthusiasm. If you are excited about doing something, I&#39;ll do my best to get out of your way.&lt;/p&gt; &#xA;&lt;p&gt;There are a few areas that would make for excellent targets though, if you really feel so inclined.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It would be really interesting to explore the &lt;a href=&#34;https://github.com/ChimeHQ/SwiftTreeSitter#treesitterdocument&#34;&gt;TreeSitterDocument&lt;/a&gt; concept&lt;/li&gt; &#xA; &lt;li&gt;I&#39;d love to expand on more &lt;a href=&#34;https://github.com/chimeHQ/ThemePark&#34;&gt;universal theme support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The text search system is bad and I&#39;d love to build something better&lt;/li&gt; &#xA; &lt;li&gt;The view-based &lt;a href=&#34;https://github.com/ChimeHQ/ChimeKit&#34;&gt;extension system&lt;/a&gt; could really use some more attention&lt;/li&gt; &#xA; &lt;li&gt;I&#39;d like to finish migrating the preferences to SwiftUI&lt;/li&gt; &#xA; &lt;li&gt;Support for the &lt;a href=&#34;https://github.com/ChimeHQ/DebugAdapterProtocol&#34;&gt;Debug Adapter Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The autocomplete result window isn&#39;t very pretty&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By participating in this project you agree to abide by the &lt;a href=&#34;https://raw.githubusercontent.com/ChimeHQ/Chime/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: requires Xcode 15 and macOS 14&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clone the repo&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cp User.xcconfig.template User.xcconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;update &lt;code&gt;User.xcconfig&lt;/code&gt; with your personal information&lt;/li&gt; &#xA; &lt;li&gt;build/run with Xcode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SwiftUI where possible, AppKit where useful&lt;/li&gt; &#xA; &lt;li&gt;using packages is a wonderful way to support open source software&lt;/li&gt; &#xA; &lt;li&gt;supporting older versions of macOS is nice, not critical&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Conventions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tabs for indentation&lt;/li&gt; &#xA; &lt;li&gt;configuration in xcconfig files&lt;/li&gt; &#xA; &lt;li&gt;project resources are sorted alphabetically&lt;/li&gt; &#xA; &lt;li&gt;imports are sorted by alphabetically, but parititioned to system/non-system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Notable Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.barebones.com/products/bbedit/&#34;&gt;BBEdit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codeedit.app&#34;&gt;CodeEdit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coderunnerapp.com&#34;&gt;CodeRunner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coteditor.com&#34;&gt;CotEditor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nova.app&#34;&gt;Nova&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>siteline/swiftui-introspect</title>
    <updated>2023-09-01T01:42:42Z</updated>
    <id>tag:github.com,2023-09-01:/siteline/swiftui-introspect</id>
    <link href="https://github.com/siteline/swiftui-introspect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Introspect underlying UIKit/AppKit components from SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUI Introspect&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/siteline/SwiftUI-Introspect/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/siteline/SwiftUI-Introspect/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Status Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/siteline/SwiftUI-Introspect&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsiteline%2FSwiftUI-Introspect%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;Platform Compatibility Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/Package@swift-5.7.swift#L14&#34;&gt;&lt;code&gt;SwiftUIIntrospect&lt;/code&gt;&lt;/a&gt; is an all-new module based off the original &lt;a href=&#34;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/Package.swift#L13&#34;&gt;&lt;code&gt;Introspect&lt;/code&gt;&lt;/a&gt; module that improves on stability, predictability, and ergonomics.&lt;/p&gt; &#xA; &lt;p&gt;Both modules currently live together under this repo, but the plan is to ultimately obsolete &lt;code&gt;Introspect&lt;/code&gt; in favor of &lt;code&gt;SwiftUIIntrospect&lt;/code&gt; as part of a 1.0 release.&lt;/p&gt; &#xA; &lt;p&gt;While &lt;code&gt;Introspect&lt;/code&gt; supports Swift 5.5 or higher, &lt;code&gt;SwiftUIIntrospect&lt;/code&gt; requires Swift 5.7 or higher due to the use of more recent language features which partially enable the aforementioned improvements over the original.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;SwiftUIIntrospect allows you to get the underlying UIKit or AppKit element of a SwiftUI view.&lt;/p&gt; &#xA;&lt;p&gt;For instance, with SwiftUIIntrospect you can access &lt;code&gt;UITableView&lt;/code&gt; to modify separators, or &lt;code&gt;UINavigationController&lt;/code&gt; to customize the tab bar.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;SwiftUIIntrospect works by adding an invisible &lt;code&gt;IntrospectionView&lt;/code&gt; on top of the selected view, and an invisible &#34;anchor&#34; view underneath it, then looking through the UIKit/AppKit view hierarchy between the two to find the relevant view.&lt;/p&gt; &#xA;&lt;p&gt;For instance, when introspecting a &lt;code&gt;ScrollView&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item 1&#34;)&#xA;}&#xA;.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17)) { scrollView in&#xA;    // do something with UIScrollView&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... it will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add marker views in front and behind &lt;code&gt;ScrollView&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Traverse through all subviews between both marker views until a &lt;code&gt;UIScrollView&lt;/code&gt; instance (if any) is found.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Although this introspection method is very solid and unlikely to break in itself, future OS releases require explicit opt-in for introspection (&lt;code&gt;.iOS(.vXYZ)&lt;/code&gt;), given potential differences in underlying UIKit/AppKit view types between major OS versions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;.introspect&lt;/code&gt; works directly on its &lt;em&gt;receiver&lt;/em&gt;. This means calling &lt;code&gt;.introspect&lt;/code&gt; from inside the view you&#39;re trying to introspect won&#39;t have any effect. This is different to the original &lt;code&gt;Introspect&lt;/code&gt; module in which some views would implicitly allow introspection from within. This is because most of the time it&#39;s more stable and predictable to introspect views directly, but there are times when it&#39;s not possible or simply too inflexible for library developers. You &lt;strong&gt;can&lt;/strong&gt; introspect an &lt;em&gt;ancestor&lt;/em&gt; with &lt;code&gt;SwiftUIIntrospect&lt;/code&gt;, but you must opt into this explicitly by overriding the introspection &lt;code&gt;scope&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item 1&#34;)&#xA;        .introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17), scope: .ancestor) { scrollView in&#xA;            // do something with UIScrollView&#xA;        }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage in production&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SwiftUIIntrospect&lt;/code&gt; is meant to be used in production. It does not use any private API. It only inspects the view hierarchy using publicly available methods. The library takes a defensive approach to inspecting the view hierarchy: there is no hard assumption that elements are laid out a certain way, there is no force-cast to UIKit/AppKit classes, and the &lt;code&gt;.introspect&lt;/code&gt; modifier is simply ignored if UIKit/AppKit views cannot be found.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/siteline/swiftui-introspect&#34;, from: &#34;0.12.0&#34;),&#xA;    ],&#xA;    targets: [&#xA;        .target(name: &amp;lt;#Target Name#&amp;gt;, dependencies: [&#xA;            .product(name: &#34;SwiftUIIntrospect&#34;, package: &#34;swiftui-introspect&#34;),&#xA;        ]),&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftUIIntrospect&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introspection&lt;/h2&gt; &#xA;&lt;h3&gt;Implemented&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/buttontype&#34;&gt;&lt;code&gt;Button&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/colorpickertype&#34;&gt;&lt;code&gt;ColorPicker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/datepickertype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/datepickerwithcompactstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.compact&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/datepickerwithfieldstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.field&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/datepickerwithgraphicalstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.graphical&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/datepickerwithstepperfieldstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.stepperField&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/datepickerwithwheelstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.wheel&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/formtype&#34;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/formwithgroupedstyletype&#34;&gt;&lt;code&gt;Form&lt;/code&gt; with &lt;code&gt;.grouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/fullScreenCovertype&#34;&gt;&lt;code&gt;.fullScreenCover&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/listtype&#34;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/listwithborderedstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.bordered&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/listwithgroupedstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.grouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/listwithinsetgroupedstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.insetGrouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/listwithinsetstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.inset&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/listwithsidebarstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.sidebar&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/listcelltype&#34;&gt;&lt;code&gt;ListCell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/maptype&#34;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/navigationsplitviewtype&#34;&gt;&lt;code&gt;NavigationSplitView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/navigationstacktype&#34;&gt;&lt;code&gt;NavigationStack&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/NavigationViewWithColumnsStyleType&#34;&gt;&lt;code&gt;NavigationView&lt;/code&gt; with &lt;code&gt;.columns&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/NavigationViewWithStackStyleType&#34;&gt;&lt;code&gt;NavigationView&lt;/code&gt; with &lt;code&gt;.stack&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/pagecontroltype&#34;&gt;&lt;code&gt;PageControl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/pickerwithmenustyletype&#34;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.menu&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/pickerwithsegmentedstyletype&#34;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.segmented&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/pickerwithwheelstyletype&#34;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.wheel&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/popovertype&#34;&gt;&lt;code&gt;.popover&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/progressviewwithcircularstyletype&#34;&gt;&lt;code&gt;ProgressView&lt;/code&gt; with &lt;code&gt;.circular&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/progressviewwithlinearstyletype&#34;&gt;&lt;code&gt;ProgressView&lt;/code&gt; with &lt;code&gt;.linear&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/scrollviewtype&#34;&gt;&lt;code&gt;ScrollView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/searchfieldtype&#34;&gt;&lt;code&gt;.searchable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/securefieldtype&#34;&gt;&lt;code&gt;SecureField&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/sheettype&#34;&gt;&lt;code&gt;.sheet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/SignInWithAppleButtonType&#34;&gt;&lt;code&gt;SignInWithAppleButton&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/slidertype&#34;&gt;&lt;code&gt;Slider&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/steppertype&#34;&gt;&lt;code&gt;Stepper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/tabletype&#34;&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/tabviewtype&#34;&gt;&lt;code&gt;TabView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/TabViewWithPageStyleType&#34;&gt;&lt;code&gt;TabView&lt;/code&gt; with &lt;code&gt;.page&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/texteditortype&#34;&gt;&lt;code&gt;TextEditor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/textfieldtype&#34;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/TextFieldWithVerticalAxisType&#34;&gt;&lt;code&gt;TextField&lt;/code&gt; with &lt;code&gt;.vertical&lt;/code&gt; axis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/toggletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/togglewithbuttonstyletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;button&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/togglewithcheckboxstyletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;checkbox&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/togglewithswitchstyletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;switch&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/videoplayertype&#34;&gt;&lt;code&gt;VideoPlayer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/viewtype&#34;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/viewcontrollertype&#34;&gt;&lt;code&gt;ViewController&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/master/documentation/swiftuiintrospect/windowtype&#34;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&#34;https://github.com/timbersoftware/SwiftUI-Introspect/issues&#34;&gt;create an issue&lt;/a&gt;. As a temporary solution, you can &lt;a href=&#34;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#implement-your-own-view-type&#34;&gt;implement your own introspectable view type&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cannot implement&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI&lt;/th&gt; &#xA;   &lt;th&gt;Affected Frameworks&lt;/th&gt; &#xA;   &lt;th&gt;Why&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text&lt;/td&gt; &#xA;   &lt;td&gt;UIKit, AppKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UILabel / NSLabel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;UIKit, AppKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UIImageView / NSImageView&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button&lt;/td&gt; &#xA;   &lt;td&gt;UIKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UIButton&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;List&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;List {&#xA;    Text(&#34;Item&#34;)&#xA;}&#xA;.introspect(.list, on: .iOS(.v13, .v14, .v15)) { tableView in&#xA;    tableView.backgroundView = UIView()&#xA;    tableView.backgroundColor = .cyan&#xA;}&#xA;.introspect(.list, on: .iOS(.v16, .v17)) { collectionView in&#xA;    collectionView.backgroundView = UIView()&#xA;    collectionView.subviews.dropFirst(1).first?.backgroundColor = .cyan&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ScrollView&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item&#34;)&#xA;}&#xA;.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17)) { scrollView in&#xA;    scrollView.backgroundColor = .red&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NavigationView&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;NavigationView {&#xA;    Text(&#34;Item&#34;)&#xA;}&#xA;.navigationViewStyle(.stack)&#xA;.introspect(.navigationView(style: .stack), on: .iOS(.v13, .v14, .v15, .v16, .v17)) { navigationController in&#xA;    navigationController.navigationBar.backgroundColor = .cyan&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TextField&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;TextField(&#34;Text Field&#34;, text: &amp;lt;#Binding&amp;lt;String&amp;gt;#&amp;gt;)&#xA;    .introspect(.textField, on: .iOS(.v13, .v14, .v15, .v16, .v17)) { textField in&#xA;        textField.backgroundColor = .red&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;h3&gt;Implement your own introspectable type&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&#34;https://github.com/timbersoftware/SwiftUI-Introspect/issues&#34;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case SwiftUIIntrospect (unlikely) doesn&#39;t support the SwiftUI element that you&#39;re looking for, you can implement your own introspectable type.&lt;/p&gt; &#xA;&lt;p&gt;For example, here&#39;s how the library implements the introspectable &lt;code&gt;TextField&lt;/code&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;@_spi(Advanced) import SwiftUIIntrospect&#xA;&#xA;public struct TextFieldType: IntrospectableViewType {}&#xA;&#xA;extension IntrospectableViewType where Self == TextFieldType {&#xA;    public static var textField: Self { .init() }&#xA;}&#xA;&#xA;#if canImport(UIKit)&#xA;extension iOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {&#xA;    public static let v13 = Self(for: .v13)&#xA;    public static let v14 = Self(for: .v14)&#xA;    public static let v15 = Self(for: .v15)&#xA;    public static let v16 = Self(for: .v16)&#xA;    public static let v17 = Self(for: .v17)&#xA;}&#xA;&#xA;extension tvOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {&#xA;    public static let v13 = Self(for: .v13)&#xA;    public static let v14 = Self(for: .v14)&#xA;    public static let v15 = Self(for: .v15)&#xA;    public static let v16 = Self(for: .v16)&#xA;    public static let v17 = Self(for: .v17)&#xA;}&#xA;&#xA;extension visionOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {&#xA;    public static let v1 = Self(for: .v1)&#xA;}&#xA;#elseif canImport(AppKit)&#xA;extension macOSViewVersion&amp;lt;TextFieldType, NSTextField&amp;gt; {&#xA;    public static let v10_15 = Self(for: .v10_15)&#xA;    public static let v11 = Self(for: .v11)&#xA;    public static let v12 = Self(for: .v12)&#xA;    public static let v13 = Self(for: .v13)&#xA;    public static let v14 = Self(for: .v14)&#xA;}&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Introspect on future platform versions&lt;/h3&gt; &#xA;&lt;p&gt;By default, introspection applies per specific platform version. This is a sensible default for maximum predictability in regularly maintained codebases, but it&#39;s not always a good fit for e.g. library developers who may want to cover as many future platform versions as possible in order to provide the best chance for long-term future functionality of their library without regular maintenance.&lt;/p&gt; &#xA;&lt;p&gt;For such cases, SwiftUI Introspect offers range-based platform version predicates behind the Advanced SPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;@_spi(Advanced) import SwiftUIIntrospect&#xA;&#xA;struct ContentView: View {&#xA;    var body: some View {&#xA;        ScrollView {&#xA;            // ...&#xA;        }&#xA;        .introspect(.scrollView, on: .iOS(.v13...)) { scrollView in&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bear in mind this should be used cautiosly, and with full knowledge that any future OS version might break the expected introspection types unless explicitly available. For instance, if in the example above hypothetically iOS 18 stops using UIScrollView under the hood, the customization closure will never be called on said platform.&lt;/p&gt; &#xA;&lt;h3&gt;Keep instances outside the customize closure&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, you might need to keep your introspected instance around for longer than the customization closure lifetime. In such cases, &lt;code&gt;@State&lt;/code&gt; is not a good option because it produces retain cycles. Instead, SwiftUI Introspect offers a &lt;code&gt;@Weak&lt;/code&gt; property wrapper behind the Advanced SPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;@_spi(Advanced) import SwiftUIIntrospect&#xA;&#xA;struct ContentView: View {&#xA;    @Weak var scrollView: UIScrollView?&#xA;&#xA;    var body: some View {&#xA;        ScrollView {&#xA;            // ...&#xA;        }&#xA;        .introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17)) { scrollView in&#xA;            self.scrollView = scrollView&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community projects&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a list of open source libraries powered by the SwiftUI Introspect library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paescebu/CustomKeyboardKit&#34;&gt;CustomKeyboardKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davdroman/swiftui-navigation-transitions&#34;&gt;NavigationTransitions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re working on a library built on SwiftUI Introspect or know of one, feel free to submit a PR adding it to the list.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ReactorKit/ReactorKit</title>
    <updated>2023-09-01T01:42:42Z</updated>
    <id>tag:github.com,2023-09-01:/ReactorKit/ReactorKit</id>
    <link href="https://github.com/ReactorKit/ReactorKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for reactive and unidirectional Swift applications&lt;/p&gt;&lt;hr&gt;&lt;img alt=&#34;ReactorKit&#34; src=&#34;https://cloud.githubusercontent.com/assets/931655/25277625/6aa05998-26da-11e7-9b85-e48bec938a6e.png&#34; style=&#34;max-width: 100%&#34;&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Swift&#34; src=&#34;https://img.shields.io/badge/Swift-5.0-orange.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://cocoapods.org/pods/ReactorKit&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;CocoaPods&#34; src=&#34;http://img.shields.io/cocoapods/v/ReactorKit.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ReactorKit/ReactorKit&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Platform&#34; src=&#34;https://img.shields.io/cocoapods/p/ReactorKit.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ReactorKit/ReactorKit/actions&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;CI&#34; src=&#34;https://github.com/ReactorKit/ReactorKit/workflows/CI/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ReactorKit/ReactorKit/&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Codecov&#34; src=&#34;https://img.shields.io/codecov/c/github/ReactorKit/ReactorKit.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;ReactorKit is a framework for a reactive and unidirectional Swift application architecture. This repository introduces the basic concept of ReactorKit and describes how to build an application using ReactorKit.&lt;/p&gt; &#xA;&lt;p&gt;You may want to see the &lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#examples&#34;&gt;Examples&lt;/a&gt; section first if you&#39;d like to see the actual code. For an overview of ReactorKit&#39;s features and the reasoning behind its creation, you may also check the slides from this introductory presentation over at &lt;a href=&#34;https://www.slideshare.net/devxoul/hello-reactorkit&#34;&gt;SlideShare&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#basic-concept&#34;&gt;Basic Concept&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#design-goal&#34;&gt;Design Goal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#view&#34;&gt;View&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#storyboard-support&#34;&gt;Storyboard Support&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#reactor&#34;&gt;Reactor&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#mutate&#34;&gt;&lt;code&gt;mutate()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#reduce&#34;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#transform&#34;&gt;&lt;code&gt;transform()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#advanced&#34;&gt;Advanced&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#global-states&#34;&gt;Global States&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#view-communication&#34;&gt;View Communication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#testing&#34;&gt;Testing&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#what-to-test&#34;&gt;What to test&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#view-testing&#34;&gt;View testing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#reactor-testing&#34;&gt;Reactor testing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#scheduling&#34;&gt;Scheduling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#pulse&#34;&gt;Pulse&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#contribution&#34;&gt;Contribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#community&#34;&gt;Community&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#join&#34;&gt;Join&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#community-projects&#34;&gt;Community Projects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#whos-using-reactorkit&#34;&gt;Who&#39;s using ReactorKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic Concept&lt;/h2&gt; &#xA;&lt;p&gt;ReactorKit is a combination of &lt;a href=&#34;https://facebook.github.io/flux/&#34;&gt;Flux&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Reactive_programming&#34;&gt;Reactive Programming&lt;/a&gt;. The user actions and the view states are delivered to each layer via observable streams. These streams are unidirectional: the view can only emit actions and the reactor can only emit states.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;flow&#34; src=&#34;https://cloud.githubusercontent.com/assets/931655/25073432/a91c1688-2321-11e7-8f04-bf91031a09dd.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Design Goal&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testability&lt;/strong&gt;: The first purpose of ReactorKit is to separate the business logic from a view. This can make the code testable. A reactor doesn&#39;t have any dependency to a view. Just test reactors and test view bindings. See &lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#testing&#34;&gt;Testing&lt;/a&gt; section for details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start Small&lt;/strong&gt;: ReactorKit doesn&#39;t require the whole application to follow a single architecture. ReactorKit can be adopted partially, for one or more specific views. You don&#39;t need to rewrite everything to use ReactorKit on your existing project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Less Typing&lt;/strong&gt;: ReactorKit focuses on avoiding complicated code for a simple thing. ReactorKit requires less code compared to other architectures. Start simple and scale up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;View&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;em&gt;View&lt;/em&gt; displays data. A view controller and a cell are treated as a view. The view binds user inputs to the action stream and binds the view states to each UI component. There&#39;s no business logic in a view layer. A view just defines how to map the action stream and the state stream.&lt;/p&gt; &#xA;&lt;p&gt;To define a view, just have an existing class conform a protocol named &lt;code&gt;View&lt;/code&gt;. Then your class will have a property named &lt;code&gt;reactor&lt;/code&gt; automatically. This property is typically set outside of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ProfileViewController: UIViewController, View {&#xA;  var disposeBag = DisposeBag()&#xA;}&#xA;&#xA;profileViewController.reactor = UserViewReactor() // inject reactor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the &lt;code&gt;reactor&lt;/code&gt; property has changed, &lt;code&gt;bind(reactor:)&lt;/code&gt; gets called. Implement this method to define the bindings of an action stream and a state stream.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func bind(reactor: ProfileViewReactor) {&#xA;  // action (View -&amp;gt; Reactor)&#xA;  refreshButton.rx.tap.map { Reactor.Action.refresh }&#xA;    .bind(to: reactor.action)&#xA;    .disposed(by: self.disposeBag)&#xA;&#xA;  // state (Reactor -&amp;gt; View)&#xA;  reactor.state.map { $0.isFollowing }&#xA;    .bind(to: followButton.rx.isSelected)&#xA;    .disposed(by: self.disposeBag)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Storyboard Support&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;StoryboardView&lt;/code&gt; protocol if you&#39;re using a storyboard to initialize view controllers. Everything is same but the only difference is that the &lt;code&gt;StoryboardView&lt;/code&gt; performs a binding after the view is loaded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let viewController = MyViewController()&#xA;viewController.reactor = MyViewReactor() // will not executes `bind(reactor:)` immediately&#xA;&#xA;class MyViewController: UIViewController, StoryboardView {&#xA;  func bind(reactor: MyViewReactor) {&#xA;    // this is called after the view is loaded (viewDidLoad)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reactor&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;em&gt;Reactor&lt;/em&gt; is an UI-independent layer which manages the state of a view. The foremost role of a reactor is to separate control flow from a view. Every view has its corresponding reactor and delegates all logic to its reactor. A reactor has no dependency to a view, so it can be easily tested.&lt;/p&gt; &#xA;&lt;p&gt;Conform to the &lt;code&gt;Reactor&lt;/code&gt; protocol to define a reactor. This protocol requires three types to be defined: &lt;code&gt;Action&lt;/code&gt;, &lt;code&gt;Mutation&lt;/code&gt; and &lt;code&gt;State&lt;/code&gt;. It also requires a property named &lt;code&gt;initialState&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ProfileViewReactor: Reactor {&#xA;  // represent user actions&#xA;  enum Action {&#xA;    case refreshFollowingStatus(Int)&#xA;    case follow(Int)&#xA;  }&#xA;&#xA;  // represent state changes&#xA;  enum Mutation {&#xA;    case setFollowing(Bool)&#xA;  }&#xA;&#xA;  // represents the current view state&#xA;  struct State {&#xA;    var isFollowing: Bool = false&#xA;  }&#xA;&#xA;  let initialState: State = State()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An &lt;code&gt;Action&lt;/code&gt; represents a user interaction and &lt;code&gt;State&lt;/code&gt; represents a view state. &lt;code&gt;Mutation&lt;/code&gt; is a bridge between &lt;code&gt;Action&lt;/code&gt; and &lt;code&gt;State&lt;/code&gt;. A reactor converts the action stream to the state stream in two steps: &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;reduce()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;flow-reactor&#34; src=&#34;https://cloud.githubusercontent.com/assets/931655/25098066/2de21a28-23e2-11e7-8a41-d33d199dd951.png&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;mutate()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;mutate()&lt;/code&gt; receives an &lt;code&gt;Action&lt;/code&gt; and generates an &lt;code&gt;Observable&amp;lt;Mutation&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func mutate(action: Action) -&amp;gt; Observable&amp;lt;Mutation&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every side effect, such as an async operation or API call, is performed in this method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func mutate(action: Action) -&amp;gt; Observable&amp;lt;Mutation&amp;gt; {&#xA;  switch action {&#xA;  case let .refreshFollowingStatus(userID): // receive an action&#xA;    return UserAPI.isFollowing(userID) // create an API stream&#xA;      .map { (isFollowing: Bool) -&amp;gt; Mutation in&#xA;        return Mutation.setFollowing(isFollowing) // convert to Mutation stream&#xA;      }&#xA;&#xA;  case let .follow(userID):&#xA;    return UserAPI.follow()&#xA;      .map { _ -&amp;gt; Mutation in&#xA;        return Mutation.setFollowing(true)&#xA;      }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; generates a new &lt;code&gt;State&lt;/code&gt; from a previous &lt;code&gt;State&lt;/code&gt; and a &lt;code&gt;Mutation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func reduce(state: State, mutation: Mutation) -&amp;gt; State&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method is a pure function. It should just return a new &lt;code&gt;State&lt;/code&gt; synchronously. Don&#39;t perform any side effects in this function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func reduce(state: State, mutation: Mutation) -&amp;gt; State {&#xA;  var state = state // create a copy of the old state&#xA;  switch mutation {&#xA;  case let .setFollowing(isFollowing):&#xA;    state.isFollowing = isFollowing // manipulate the state, creating a new state&#xA;    return state // return the new state&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;transform()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;transform()&lt;/code&gt; transforms each stream. There are three &lt;code&gt;transform()&lt;/code&gt; functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func transform(action: Observable&amp;lt;Action&amp;gt;) -&amp;gt; Observable&amp;lt;Action&amp;gt;&#xA;func transform(mutation: Observable&amp;lt;Mutation&amp;gt;) -&amp;gt; Observable&amp;lt;Mutation&amp;gt;&#xA;func transform(state: Observable&amp;lt;State&amp;gt;) -&amp;gt; Observable&amp;lt;State&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Implement these methods to transform and combine with other observable streams. For example, &lt;code&gt;transform(mutation:)&lt;/code&gt; is the best place for combining a global event stream to a mutation stream. See the &lt;a href=&#34;https://raw.githubusercontent.com/ReactorKit/ReactorKit/master/#global-states&#34;&gt;Global States&lt;/a&gt; section for details.&lt;/p&gt; &#xA;&lt;p&gt;These methods can be also used for debugging purposes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func transform(action: Observable&amp;lt;Action&amp;gt;) -&amp;gt; Observable&amp;lt;Action&amp;gt; {&#xA;  return action.debug(&#34;action&#34;) // Use RxSwift&#39;s debug() operator&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h3&gt;Global States&lt;/h3&gt; &#xA;&lt;p&gt;Unlike Redux, ReactorKit doesn&#39;t define a global app state. It means that you can use anything to manage a global state. You can use a &lt;code&gt;BehaviorSubject&lt;/code&gt;, a &lt;code&gt;PublishSubject&lt;/code&gt; or even a reactor. ReactorKit doesn&#39;t force to have a global state so you can use ReactorKit in a specific feature in your application.&lt;/p&gt; &#xA;&lt;p&gt;There is no global state in the &lt;strong&gt;Action → Mutation → State&lt;/strong&gt; flow. You should use &lt;code&gt;transform(mutation:)&lt;/code&gt; to transform the global state to a mutation. Let&#39;s assume that we have a global &lt;code&gt;BehaviorSubject&lt;/code&gt; which stores the current authenticated user. If you&#39;d like to emit a &lt;code&gt;Mutation.setUser(User?)&lt;/code&gt; when the &lt;code&gt;currentUser&lt;/code&gt; is changed, you can do as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var currentUser: BehaviorSubject&amp;lt;User&amp;gt; // global state&#xA;&#xA;func transform(mutation: Observable&amp;lt;Mutation&amp;gt;) -&amp;gt; Observable&amp;lt;Mutation&amp;gt; {&#xA;  return Observable.merge(mutation, currentUser.map(Mutation.setUser))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then the mutation will be emitted each time the view sends an action to a reactor and the &lt;code&gt;currentUser&lt;/code&gt; is changed.&lt;/p&gt; &#xA;&lt;h3&gt;View Communication&lt;/h3&gt; &#xA;&lt;p&gt;You must be familiar with callback closures or delegate patterns for communicating between multiple views. ReactorKit recommends you to use &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/raw/master/RxSwift/Reactive.swift&#34;&gt;reactive extensions&lt;/a&gt; for it. The most common example of &lt;code&gt;ControlEvent&lt;/code&gt; is &lt;code&gt;UIButton.rx.tap&lt;/code&gt;. The key concept is to treat your custom views as UIButton or UILabel.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;view-view&#34; src=&#34;https://user-images.githubusercontent.com/931655/27789114-393e2eea-6026-11e7-9b32-bae314e672ee.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s assume that we have a &lt;code&gt;ChatViewController&lt;/code&gt; which displays messages. The &lt;code&gt;ChatViewController&lt;/code&gt; owns a &lt;code&gt;MessageInputView&lt;/code&gt;. When an user taps the send button on the &lt;code&gt;MessageInputView&lt;/code&gt;, the text will be sent to the &lt;code&gt;ChatViewController&lt;/code&gt; and &lt;code&gt;ChatViewController&lt;/code&gt; will bind in to the reactor&#39;s action. This is an example &lt;code&gt;MessageInputView&lt;/code&gt;&#39;s reactive extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Reactive where Base: MessageInputView {&#xA;  var sendButtonTap: ControlEvent&amp;lt;String&amp;gt; {&#xA;    let source = base.sendButton.rx.tap.withLatestFrom(...)&#xA;    return ControlEvent(events: source)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use that extension in the &lt;code&gt;ChatViewController&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;messageInputView.rx.sendButtonTap&#xA;  .map(Reactor.Action.send)&#xA;  .bind(to: reactor.action)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;ReactorKit has a built-in functionality for a testing. You&#39;ll be able to easily test both a view and a reactor with a following instruction.&lt;/p&gt; &#xA;&lt;h4&gt;What to test&lt;/h4&gt; &#xA;&lt;p&gt;First of all, you have to decide what to test. There are two things to test: a view and a reactor.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Action: is a proper action sent to a reactor with a given user interaction?&lt;/li&gt; &#xA;   &lt;li&gt;State: is a view property set properly with a following state?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Reactor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;State: is a state changed properly with an action?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;View testing&lt;/h4&gt; &#xA;&lt;p&gt;A view can be tested with a &lt;em&gt;stub&lt;/em&gt; reactor. A reactor has a property &lt;code&gt;stub&lt;/code&gt; which can log actions and force change states. If a reactor&#39;s stub is enabled, both &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;reduce()&lt;/code&gt; are not executed. A stub has these properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var state: StateRelay&amp;lt;Reactor.State&amp;gt; { get }&#xA;var action: ActionSubject&amp;lt;Reactor.Action&amp;gt; { get }&#xA;var actions: [Reactor.Action] { get } // recorded actions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are some example test cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func testAction_refresh() {&#xA;  // 1. prepare a stub reactor&#xA;  let reactor = MyReactor()&#xA;  reactor.isStubEnabled = true&#xA;&#xA;  // 2. prepare a view with a stub reactor&#xA;  let view = MyView()&#xA;  view.reactor = reactor&#xA;&#xA;  // 3. send an user interaction programmatically&#xA;  view.refreshControl.sendActions(for: .valueChanged)&#xA;&#xA;  // 4. assert actions&#xA;  XCTAssertEqual(reactor.stub.actions.last, .refresh)&#xA;}&#xA;&#xA;func testState_isLoading() {&#xA;  // 1. prepare a stub reactor&#xA;  let reactor = MyReactor()&#xA;  reactor.isStubEnabled = true&#xA;&#xA;  // 2. prepare a view with a stub reactor&#xA;  let view = MyView()&#xA;  view.reactor = reactor&#xA;&#xA;  // 3. set a stub state&#xA;  reactor.stub.state.value = MyReactor.State(isLoading: true)&#xA;&#xA;  // 4. assert view properties&#xA;  XCTAssertEqual(view.activityIndicator.isAnimating, true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reactor testing&lt;/h4&gt; &#xA;&lt;p&gt;A reactor can be tested independently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func testIsBookmarked() {&#xA;  let reactor = MyReactor()&#xA;  reactor.action.onNext(.toggleBookmarked)&#xA;  XCTAssertEqual(reactor.currentState.isBookmarked, true)&#xA;  reactor.action.onNext(.toggleBookmarked)&#xA;  XCTAssertEqual(reactor.currentState.isBookmarked, false)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes a state is changed more than one time for a single action. For example, a &lt;code&gt;.refresh&lt;/code&gt; action sets &lt;code&gt;state.isLoading&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; at first and sets to &lt;code&gt;false&lt;/code&gt; after the refreshing. In this case it&#39;s difficult to test &lt;code&gt;state.isLoading&lt;/code&gt; with &lt;code&gt;currentState&lt;/code&gt; so you might need to use &lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxTest&lt;/a&gt; or &lt;a href=&#34;https://github.com/devxoul/RxExpect&#34;&gt;RxExpect&lt;/a&gt;. Here is an example test case using RxSwift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func testIsLoading() {&#xA;  // given&#xA;  let scheduler = TestScheduler(initialClock: 0)&#xA;  let reactor = MyReactor()&#xA;  let disposeBag = DisposeBag()&#xA;&#xA;  // when&#xA;  scheduler&#xA;    .createHotObservable([&#xA;      .next(100, .refresh) // send .refresh at 100 scheduler time&#xA;    ])&#xA;    .subscribe(reactor.action)&#xA;    .disposed(by: disposeBag)&#xA;&#xA;  // then&#xA;  let response = scheduler.start(created: 0, subscribed: 0, disposed: 1000) {&#xA;    reactor.state.map(\.isLoading)&#xA;  }&#xA;  XCTAssertEqual(response.events.map(\.value.element), [&#xA;    false, // initial state&#xA;    true,  // just after .refresh&#xA;    false  // after refreshing&#xA;  ])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scheduling&lt;/h3&gt; &#xA;&lt;p&gt;Define &lt;code&gt;scheduler&lt;/code&gt; property to specify which scheduler is used for observing the state stream. Note that this queue &lt;strong&gt;must be&lt;/strong&gt; a serial queue. The default scheduler is &lt;code&gt;MainScheduler&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class MyReactor: Reactor {&#xA;  let scheduler: Scheduler = SerialDispatchQueueScheduler(qos: .default)&#xA;&#xA;  func reduce(state: State, mutation: Mutation) -&amp;gt; State {&#xA;    // executed in a background thread&#xA;    heavyAndImportantCalculation()&#xA;    return state&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pulse&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Pulse&lt;/code&gt; has diff only when mutated To explain in code, the results are as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var messagePulse: Pulse&amp;lt;String?&amp;gt; = Pulse(wrappedValue: &#34;Hello tokijh&#34;)&#xA;&#xA;let oldMessagePulse: Pulse&amp;lt;String?&amp;gt; = messagePulse&#xA;messagePulse.value = &#34;Hello tokijh&#34; // add valueUpdatedCount +1&#xA;&#xA;oldMessagePulse.valueUpdatedCount != messagePulse.valueUpdatedCount // true&#xA;oldMessagePulse.value == messagePulse.value // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use when you want to receive an event only if the new value is assigned, even if it is the same value. like &lt;code&gt;alertMessage&lt;/code&gt; (See follows or &lt;a href=&#34;https://github.com/ReactorKit/ReactorKit/raw/master/Tests/ReactorKitTests/PulseTests.swift&#34;&gt;PulseTests.swift&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Reactor&#xA;private final class MyReactor: Reactor {&#xA;  struct State {&#xA;    @Pulse var alertMessage: String?&#xA;  }&#xA;&#xA;  func mutate(action: Action) -&amp;gt; Observable&amp;lt;Mutation&amp;gt; {&#xA;    switch action {&#xA;    case let .alert(message):&#xA;      return Observable.just(Mutation.setAlertMessage(message))&#xA;    }&#xA;  }&#xA;&#xA;  func reduce(state: State, mutation: Mutation) -&amp;gt; State {&#xA;    var newState = state&#xA;&#xA;    switch mutation {&#xA;    case let .setAlertMessage(alertMessage):&#xA;      newState.alertMessage = alertMessage&#xA;    }&#xA;&#xA;    return newState&#xA;  }&#xA;}&#xA;&#xA;// View&#xA;reactor.pulse(\.$alertMessage)&#xA;  .compactMap { $0 } // filter nil&#xA;  .subscribe(onNext: { [weak self] (message: String) in&#xA;    self?.showAlert(message)&#xA;  })&#xA;  .disposed(by: disposeBag)&#xA;&#xA;// Cases&#xA;reactor.action.onNext(.alert(&#34;Hello&#34;))  // showAlert() is called with `Hello`&#xA;reactor.action.onNext(.alert(&#34;Hello&#34;))  // showAlert() is called with `Hello`&#xA;reactor.action.onNext(.doSomeAction)    // showAlert() is not called&#xA;reactor.action.onNext(.alert(&#34;Hello&#34;))  // showAlert() is called with `Hello`&#xA;reactor.action.onNext(.alert(&#34;tokijh&#34;)) // showAlert() is called with `tokijh`&#xA;reactor.action.onNext(.doSomeAction)    // showAlert() is not called&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ReactorKit/ReactorKit/tree/master/Examples/Counter&#34;&gt;Counter&lt;/a&gt;: The most simple and basic example of ReactorKit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ReactorKit/ReactorKit/tree/master/Examples/GitHubSearch&#34;&gt;GitHub Search&lt;/a&gt;: A simple application which provides a GitHub repository search&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devxoul/RxTodo&#34;&gt;RxTodo&lt;/a&gt;: iOS Todo Application using ReactorKit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devxoul/Cleverbot&#34;&gt;Cleverbot&lt;/a&gt;: iOS Messaging Application using Cleverbot and ReactorKit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devxoul/Drrrible&#34;&gt;Drrrible&lt;/a&gt;: Dribbble for iOS using ReactorKit (&lt;a href=&#34;https://itunes.apple.com/us/app/drrrible/id1229592223?mt=8&#34;&gt;App Store&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cruisediary/Passcode&#34;&gt;Passcode&lt;/a&gt;: Passcode for iOS RxSwift, ReactorKit and IGListKit example&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TaeJoongYoon/FlickrSearch&#34;&gt;Flickr Search&lt;/a&gt;: A simple application which provides a Flickr Photo search with RxSwift and ReactorKit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gre4ixin/ReactorKitExample&#34;&gt;ReactorKitExample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/techinpark/reactorkit-keyboard-example&#34;&gt;reactorkit-keyboard-example&lt;/a&gt;: iOS Application example for develop keyboard-extensions using ReactorKit Architecture.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tospery/SWHub&#34;&gt;SWHub&lt;/a&gt;: Use ReactorKit develop the Github client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt; &amp;gt;= 5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift 5&lt;/li&gt; &#xA; &lt;li&gt;iOS 8&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.11&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9.0&lt;/li&gt; &#xA; &lt;li&gt;watchOS 2.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Podfile&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;ReactorKit&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Package.swift&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;  name: &#34;MyPackage&#34;,&#xA;  dependencies: [&#xA;    .package(url: &#34;https://github.com/ReactorKit/ReactorKit.git&#34;, .upToNextMajor(from: &#34;3.0.0&#34;))&#xA;  ],&#xA;  targets: [&#xA;    .target(name: &#34;MyTarget&#34;, dependencies: [&#34;ReactorKit&#34;])&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ReactorKit does not officially support Carthage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cartfile&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;github &#34;ReactorKit/ReactorKit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most Carthage installation issues can be resolved with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;carthage update 2&amp;gt;/dev/null&#xA;(cd Carthage/Checkouts/ReactorKit &amp;amp;&amp;amp; swift package generate-xcodeproj)&#xA;carthage build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Any discussions and pull requests are welcomed 💖&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To development:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ TEST=1 swift package generate-xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To test:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ swift test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Join&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;English&lt;/strong&gt;: Join &lt;a href=&#34;https://rxswift.slack.com/messages/C561PETRN/&#34;&gt;#reactorkit&lt;/a&gt; on &lt;a href=&#34;http://rxswift-slack.herokuapp.com/&#34;&gt;RxSwift Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Korean&lt;/strong&gt;: Join &lt;a href=&#34;https://swiftkorea.slack.com/messages/C568YM2RF/&#34;&gt;#reactorkit&lt;/a&gt; on &lt;a href=&#34;http://slack.swiftkorea.org/&#34;&gt;Swift Korea Slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Community Projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gre4ixin/ReactorKit-Template&#34;&gt;ReactorKit-Template&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who&#39;s using ReactorKit&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://www.stylesha.re&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;48&#34; alt=&#34;StyleShare&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/931655/30255218-e16fedfe-966f-11e7-973d-7d8d1726d7f6.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.kakaocorp.com&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;36&#34; alt=&#34;Kakao&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/931655/30324656-cbea148a-97fc-11e7-9101-ba38d50f08f4.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.wantedly.com&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;48&#34; alt=&#34;Wantedly&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/5885032/123386862-12314780-d5d2-11eb-91c6-f9dc14a329f0.png&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;http://getdoctalk.com&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;48&#34; alt=&#34;DocTalk&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/931655/30633896-503d142c-9e28-11e7-8e67-69c2822efe77.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.constantcontact.com&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;44&#34; alt=&#34;Constant Contact&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/931655/43634090-2cb30c7e-9746-11e8-8e18-e4fcf87a08cc.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.kt.com&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;42&#34; alt=&#34;KT&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/931655/43634093-2ec9e94c-9746-11e8-9213-75c352e0c147.png&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://hyperconnect.com/&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;62&#34; alt=&#34;Hyperconnect&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/931655/50819891-aa89d200-136e-11e9-8b19-780e64e54b2a.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://toss.im/career/?category=engineering&amp;amp;positionId=7&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;64&#34; alt=&#34;Toss&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/25301615/236112886-9c24bd8d-65f3-419f-9669-1dbc575996a6.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pay.line.me&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;58&#34; alt=&#34;LINE Pay&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/68603/68569839-7efdd980-04a2-11ea-8d7e-673831b1b658.png&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://www.gccompany.co.kr/&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;45&#34; alt=&#34;LINE Pay&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/931655/84870371-32beeb80-b0ba-11ea-8530-0dc71c4e385e.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.kurly.com/&#34;&gt;&lt;img align=&#34;center&#34; height=&#34;70&#34; alt=&#34;Kurly&#34; hspace=&#34;15&#34; src=&#34;https://user-images.githubusercontent.com/5376577/140284812-1f6d82c3-a1c9-488a-b059-d77825b5f962.png&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Are you using ReactorKit? Please &lt;a href=&#34;mailto:devxoul+reactorkit@gmail.com&#34;&gt;let me know&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2017-04-18 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change the repository name to ReactorKit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;2017-03-17 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change the architecture name from RxMVVM to The Reactive Architecture.&lt;/li&gt; &#xA;   &lt;li&gt;Every ViewModels are renamed to ViewReactors.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ReactorKit is under MIT license. See the &lt;a href=&#34;https://github.com/ReactorKit/ReactorKit/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more info.&lt;/p&gt;</summary>
  </entry>
</feed>