<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-11T02:03:07Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>maxgoedjen/secretive</title>
    <updated>2022-06-11T02:03:07Z</updated>
    <id>tag:github.com,2022-06-11:/maxgoedjen/secretive</id>
    <link href="https://github.com/maxgoedjen/secretive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Store SSH keys in the Secure Enclave&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Secretive &lt;img src=&#34;https://github.com/maxgoedjen/secretive/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt; &lt;img src=&#34;https://github.com/maxgoedjen/secretive/workflows/Release/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Secretive is an app for storing and managing SSH keys in the Secure Enclave. It is inspired by the &lt;a href=&#34;https://github.com/sekey/sekey&#34;&gt;sekey project&lt;/a&gt;, but rewritten in Swift with no external dependencies and with a handy native management app.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/maxgoedjen/secretive/main/.github/readme/app.png&#34; alt=&#34;Screenshot of Secretive&#34; width=&#34;600&#34;&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;h3&gt;Safer Storage&lt;/h3&gt; &#xA;&lt;p&gt;The most common setup for SSH keys is just keeping them on disk, guarded by proper permissions. This is fine in most cases, but it&#39;s not super hard for malicious users or malware to copy your private key. If you store your keys in the Secure Enclave, it&#39;s impossible to export them, by design.&lt;/p&gt; &#xA;&lt;h3&gt;Access Control&lt;/h3&gt; &#xA;&lt;p&gt;If your Mac has a Secure Enclave, it also has support for strong access controls like Touch ID, or authentication with Apple Watch. You can configure your key so that they require Touch ID (or Watch) authentication before they&#39;re accessed.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/maxgoedjen/secretive/main/.github/readme/touchid.png&#34; alt=&#34;Screenshot of Secretive authenticating with Touch ID&#34; width=&#34;400&#34;&gt; &#xA;&lt;h3&gt;Notifications&lt;/h3&gt; &#xA;&lt;p&gt;Secretive also notifies you whenever your keys are accessed, so you&#39;re never caught off guard.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/maxgoedjen/secretive/main/.github/readme/notification.png&#34; alt=&#34;Screenshot of Secretive notifying the user&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;Support for Smart Cards Too!&lt;/h3&gt; &#xA;&lt;p&gt;For Macs without Secure Enclaves, you can configure a Smart Card (such as a YubiKey) and use it for signing as well.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Direct Download&lt;/h4&gt; &#xA;&lt;p&gt;You can download the latest release over on the &lt;a href=&#34;https://github.com/maxgoedjen/secretive/releases&#34;&gt;Releases Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Using Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install secretive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s a &lt;a href=&#34;https://raw.githubusercontent.com/maxgoedjen/secretive/main/FAQ.md&#34;&gt;FAQ here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Auditable Build Process&lt;/h3&gt; &#xA;&lt;p&gt;Builds are produced by GitHub Actions with an auditable build and release generation process. Each build has a &#34;Document SHAs&#34; step, which will output SHA checksums for the build produced by the GitHub Action, so you can verify that the source code for a given build corresponds to any given release.&lt;/p&gt; &#xA;&lt;h3&gt;A Note Around Code Signing and Keychains&lt;/h3&gt; &#xA;&lt;p&gt;While Secretive uses the Secure Enclave for key storage, it still relies on Keychain APIs to access them. Keychain restricts reads of keys to the app (and specifically, the bundle ID) that created them. If you build Secretive from source, make sure you are consistent in which bundle ID you use so that the Keychain is able to locate your keys.&lt;/p&gt; &#xA;&lt;h3&gt;Backups and Transfers to New Machines&lt;/h3&gt; &#xA;&lt;p&gt;Because secrets in the Secure Enclave are not exportable, they are not able to be backed up, and you will not be able to transfer them to a new machine. If you get a new Mac, just create a new set of secrets specific to that Mac.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover any vulnerabilities in this project, please notify &lt;a href=&#34;mailto:max.goedjen@gmail.com&#34;&gt;max.goedjen@gmail.com&lt;/a&gt; with the subject containing &#34;SECRETIVE SECURITY.&#34;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>majd/ipatool</title>
    <updated>2022-06-11T02:03:07Z</updated>
    <id>tag:github.com,2022-06-11:/majd/ipatool</id>
    <link href="https://github.com/majd/ipatool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line tool that allows searching and downloading app packages (known as ipa files) from the iOS App Store&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IPATool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://GitHub.com/majd/ipatool/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/majd/ipatool.svg?label=Release&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/majd/ipatool/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/majd/ipatool/actions/workflows/unit-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/majd/ipatool/actions/workflows/unit-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/majd/ipatool/actions/workflows/integration-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/majd/ipatool/actions/workflows/integration-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Integration Tests&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5.6-green.svg?sanitize=true&#34; alt=&#34;Swift&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/macOS-10.11%2B-green.svg?sanitize=true&#34; alt=&#34;macOS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ipatool&lt;/code&gt; is a command line tool that allows you to search for iOS apps on the &lt;a href=&#34;https://apps.apple.com&#34;&gt;App Store&lt;/a&gt; and download a copy of the app package, known as an &lt;em&gt;ipa&lt;/em&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/majd/ipatool/main/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/majd/ipatool/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 10.11 or later.&lt;/li&gt; &#xA; &lt;li&gt;Apple ID set up to use the App Store.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;You can grab the latest version of &lt;code&gt;ipatool&lt;/code&gt; from &lt;a href=&#34;https://github.com/majd/ipatool/releases&#34;&gt;GitHub releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;ipatool&lt;/code&gt; using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew tap majd/repo&#xA;$ brew install ipatool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To authenticate with the App Store, use the &lt;code&gt;auth&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OVERVIEW: Authenticate with the App Store.&#xA;&#xA;USAGE: ipatool auth &amp;lt;subcommand&amp;gt;&#xA;&#xA;OPTIONS:&#xA;  --version               Show the version.&#xA;  -h, --help              Show help information.&#xA;&#xA;SUBCOMMANDS:&#xA;  login                   Login to the App Store.&#xA;  revoke                  Revoke your App Store credentials.&#xA;&#xA;  See &#39;ipatool help auth &amp;lt;subcommand&amp;gt;&#39; for detailed help.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To search for apps&amp;nbsp;on the App Store, use the &lt;code&gt;search&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OVERVIEW: Search for iOS apps available on the App Store.&#xA;&#xA;USAGE: ipatool search &amp;lt;term&amp;gt; [--limit &amp;lt;limit&amp;gt;] [--country &amp;lt;country&amp;gt;] [--device-family &amp;lt;device-family&amp;gt;] [--log-level &amp;lt;log-level&amp;gt;]&#xA;&#xA;ARGUMENTS:&#xA;  &amp;lt;term&amp;gt;                  The term to search for.&#xA;&#xA;OPTIONS:&#xA;  -l, --limit &amp;lt;limit&amp;gt;     The maximum amount of search results to retrieve.&#xA;                          (default: 5)&#xA;  -c, --country &amp;lt;country&amp;gt; The two-letter (ISO 3166-1 alpha-2) country code for&#xA;                          the iTunes Store. (default: US)&#xA;  -d, --device-family &amp;lt;device-family&amp;gt;&#xA;                          The device family to limit the search query to.&#xA;                          (default: iPhone)&#xA;  --log-level &amp;lt;log-level&amp;gt; The log level. (default: info)&#xA;  --version               Show the version.&#xA;  -h, --help              Show help information.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To obtain a license for an app, use the &lt;code&gt;purchase&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OVERVIEW: Obtain a license for the app from the App Store.&#xA;&#xA;USAGE: ipatool purchase --bundle-identifier &amp;lt;bundle-identifier&amp;gt; [--country &amp;lt;country&amp;gt;] [--device-family &amp;lt;device-family&amp;gt;] [--log-level &amp;lt;log-level&amp;gt;]&#xA;&#xA;OPTIONS:&#xA;  -b, --bundle-identifier &amp;lt;bundle-identifier&amp;gt;&#xA;                          The bundle identifier of the target iOS app.&#xA;  -c, --country &amp;lt;country&amp;gt; The two-letter (ISO 3166-1 alpha-2) country code for&#xA;                          the iTunes Store. (default: US)&#xA;  -d, --device-family &amp;lt;device-family&amp;gt;&#xA;                          The device family to limit the search query to.&#xA;                          (default: iPhone)&#xA;  --log-level &amp;lt;log-level&amp;gt; The log level. (default: info)&#xA;  --version               Show the version.&#xA;  -h, --help              Show help information.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To download a copy of the ipa file, use the &lt;code&gt;download&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OVERVIEW: Download (encrypted) iOS app packages from the App Store.&#xA;&#xA;USAGE: ipatool download --bundle-identifier &amp;lt;bundle-identifier&amp;gt; [--country &amp;lt;country&amp;gt;] [--device-family &amp;lt;device-family&amp;gt;] [--output &amp;lt;output&amp;gt;] [--log-level &amp;lt;log-level&amp;gt;] [--purchase]&#xA;&#xA;OPTIONS:&#xA;  -b, --bundle-identifier &amp;lt;bundle-identifier&amp;gt;&#xA;                          The bundle identifier of the target iOS app.&#xA;  -c, --country &amp;lt;country&amp;gt; The two-letter (ISO 3166-1 alpha-2) country code for&#xA;                          the iTunes Store. (default: US)&#xA;  -d, --device-family &amp;lt;device-family&amp;gt;&#xA;                          The device family to limit the search query to.&#xA;                          (default: iPhone)&#xA;  -o, --output &amp;lt;output&amp;gt;   The destination path of the downloaded app package.&#xA;  --log-level &amp;lt;log-level&amp;gt; The log level. (default: info)&#xA;  --purchase              Obtain a license for the app if needed.&#xA;  --version               Show the version.&#xA;  -h, --help              Show help information.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can specify the Apple ID email address and username as arguments when using the tool or by setting them as environment variables (&lt;code&gt;IPATOOL_EMAIL&lt;/code&gt; and &lt;code&gt;IPATOOL_PASSWORD&lt;/code&gt;). If you do not specify this information using either of those methods, the tool will prompt for user input in an interactive session. Similarly, you can supply the 2FA code interactively or using the environment variable &lt;code&gt;IPATOOL_2FA_CODE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;IPATool is released under the &lt;a href=&#34;https://github.com/majd/ipatool/raw/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-async-algorithms</title>
    <updated>2022-06-11T02:03:07Z</updated>
    <id>tag:github.com,2022-06-11:/apple/swift-async-algorithms</id>
    <link href="https://github.com/apple/swift-async-algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Async Algorithms for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swift-async-algorithms&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift Async Algorithms&lt;/strong&gt; is an open-source package of asynchronous sequence and advanced algorithms that involve concurrency, along with their related types.&lt;/p&gt; &#xA;&lt;p&gt;This package has three main goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First-class integration with &lt;code&gt;async/await&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Provide a home for time-based algorithms&lt;/li&gt; &#xA; &lt;li&gt;Be cross-platform and open source&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;AsyncAlgorithms is a package for algorithms that work with &lt;em&gt;values over time&lt;/em&gt;. That includes those primarily about &lt;em&gt;time&lt;/em&gt;, like &lt;code&gt;debounce&lt;/code&gt; and &lt;code&gt;throttle&lt;/code&gt;, but also algorithms about &lt;em&gt;order&lt;/em&gt; like &lt;code&gt;combineLatest&lt;/code&gt; and &lt;code&gt;merge&lt;/code&gt;. Operations that work with multiple inputs (like &lt;code&gt;zip&lt;/code&gt; does on &lt;code&gt;Sequence&lt;/code&gt;) can be surprisingly complex to implement, with subtle behaviors and many edge cases to consider. A shared package can get these details correct, with extensive testing and documentation, for the benefit of all Swift apps.&lt;/p&gt; &#xA;&lt;p&gt;The foundation for AsyncAlgorithms was included in Swift 5.5 from &lt;a href=&#34;https://github.com/apple/swift-evolution/raw/main/proposals/0298-asyncsequence.md&#34;&gt;AsyncSequence&lt;/a&gt;. Swift 5.5 also brings the ability to use a natural &lt;code&gt;for/in&lt;/code&gt; loop with &lt;code&gt;await&lt;/code&gt; to process the values in an &lt;code&gt;AsyncSequence&lt;/code&gt; and &lt;code&gt;Sequence&lt;/code&gt;-equivalent API like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;. Structured concurrency allows us to write code where intermediate state is simply a local variable, &lt;code&gt;try&lt;/code&gt; can be used directly on functions that &lt;code&gt;throw&lt;/code&gt;, and generally treat the logic for asynchronous code similar to that of synchronous code.&lt;/p&gt; &#xA;&lt;p&gt;This package is the home for these APIs. Development and API design take place on &lt;a href=&#34;https://github.com/apple/swift-async-algorithms&#34;&gt;GitHub&lt;/a&gt; and the &lt;a href=&#34;https://forums.swift.org/c/related-projects/swift-async-algorithms&#34;&gt;Swift Forums&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;h4&gt;Combining asynchronous sequences&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Chain.md&#34;&gt;&lt;code&gt;chain(_:...)&lt;/code&gt;&lt;/a&gt;: Concatenates two or more asynchronous sequences with the same element type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/CombineLatest.md&#34;&gt;&lt;code&gt;combineLatest(_:...)&lt;/code&gt;&lt;/a&gt;: Combines two or more asynchronous sequences into an asynchronous sequence producing a tuple of elements from those base asynchronous sequences that updates when any of the base sequences produce a value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Merge.md&#34;&gt;&lt;code&gt;merge(_:...)&lt;/code&gt;&lt;/a&gt;: Merges two or more asynchronous sequence into a single asynchronous sequence producing the elements of all of the underlying asynchronous sequences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Zip.md&#34;&gt;&lt;code&gt;zip(_:...)&lt;/code&gt;&lt;/a&gt;: Creates an asynchronous sequence of pairs built out of underlying asynchronous sequences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Joined.md&#34;&gt;&lt;code&gt;joined(separator:)&lt;/code&gt;&lt;/a&gt;: Concatenated elements of an asynchronous sequence of asynchronous sequences, inserting the given separator between each element.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Creating asynchronous sequences&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Lazy.md&#34;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt;: Create an asynchronous sequence composed from a synchronous sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Channel.md&#34;&gt;&lt;code&gt;AsyncChannel&lt;/code&gt;&lt;/a&gt;: An asynchronous sequence with back pressure sending semantics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Channel.md&#34;&gt;&lt;code&gt;AsyncThrowingChannel&lt;/code&gt;&lt;/a&gt;: An asynchronous sequence with back pressure sending semantics that can emit failures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Performance optimized asynchronous iterators&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/BufferedBytes.md&#34;&gt;&lt;code&gt;AsyncBufferedByteIterator&lt;/code&gt;&lt;/a&gt;: A highly efficient iterator useful for iterating byte sequences derived from asynchronous read functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other useful asynchronous sequences&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/AdjacentPairs.md&#34;&gt;&lt;code&gt;adjacentPairs()&lt;/code&gt;&lt;/a&gt;: Collects tuples of adjacent elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Chunked.md&#34;&gt;&lt;code&gt;chunks(...)&lt;/code&gt; and &lt;code&gt;chunked(...)&lt;/code&gt;&lt;/a&gt;: Collect values into chunks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Compacted.md&#34;&gt;&lt;code&gt;compacted()&lt;/code&gt;&lt;/a&gt;: Remove nil values from an asynchronous sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/RemoveDuplicates.md&#34;&gt;&lt;code&gt;removeDuplicates()&lt;/code&gt;&lt;/a&gt;: Remove sequentially adjacent duplicate values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Intersperse.md&#34;&gt;&lt;code&gt;interspersed(with:)&lt;/code&gt;&lt;/a&gt;: Place a value between every two elements of an asynchronous sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Asynchronous Sequences that transact in time&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Debounce.md&#34;&gt;&lt;code&gt;debounce(for:tolerance:clock:)&lt;/code&gt;&lt;/a&gt;: Emit values after a quiescence period has been reached.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Throttle.md&#34;&gt;&lt;code&gt;throttle(for:clock:reducing:)&lt;/code&gt;&lt;/a&gt;: Ensure a minimum interval has elapsed between events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Timer.md&#34;&gt;&lt;code&gt;AsyncTimerSequence&lt;/code&gt;&lt;/a&gt;: Emit the value of now at a given interval repeatedly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Obtaining all values from an asynchronous sequence&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&#34;&gt;&lt;code&gt;RangeReplaceableCollection.init(_:)&lt;/code&gt;&lt;/a&gt;: Creates a new instance of a collection containing the elements of an asynchronous sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&#34;&gt;&lt;code&gt;Dictionary.init(uniqueKeysWithValues:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary from the key-value pairs in the given asynchronous sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&#34;&gt;&lt;code&gt;Dictionary.init(_:uniquingKeysWith:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary from the key-value pairs in the given asynchronous sequence, using a combining closure to determine the value for any duplicate keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&#34;&gt;&lt;code&gt;Dictionary.init(grouping:by:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary whose keys are the groupings returned by the given closure and whose values are arrays of the elements that returned each key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&#34;&gt;&lt;code&gt;SetAlgebra.init(_:)&lt;/code&gt;&lt;/a&gt;: Creates a new set from an asynchronous sequence of items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Task management&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Select.md&#34;&gt;&lt;code&gt;Task.select(_:)&lt;/code&gt;&lt;/a&gt;: Determine the first task to complete of a sequence of tasks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Effects&lt;/h4&gt; &#xA;&lt;p&gt;Each algorithm has specific behavioral effects. For throwing effects these can either be if the sequence throws, does not throw, or rethrows errors. Sendability effects in some asynchronous sequences are conditional whereas others require the composed parts to all be sendable to satisfy a requirement of &lt;code&gt;Sendable&lt;/code&gt;. The effects are &lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Effects.md&#34;&gt;listed here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Adding Swift Async Algorithms as a Dependency&lt;/h2&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;AsyncAlgorithms&lt;/code&gt; library in a SwiftPM project, add the following line to the dependencies in your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/apple/swift-async-algorithms&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include &lt;code&gt;&#34;AsyncAlgorithms&#34;&lt;/code&gt; as a dependency for your executable target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(name: &#34;&amp;lt;target&amp;gt;&#34;, dependencies: [&#xA;    .product(name: &#34;AsyncAlgorithms&#34;, package: &#34;swift-async-algorithms&#34;),&#xA;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, add &lt;code&gt;import AsyncAlgorithms&lt;/code&gt; to your source code.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;⚠️ Please note that this package currently requires a recent &lt;a href=&#34;https://www.swift.org/download/#trunk-development-main&#34;&gt;Swift Trunk Development toolchain&lt;/a&gt;. More information on how to use custom toolchains with Xcode can be viewed &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/ToolsLanguages/Conceptual/Xcode_Overview/AlternativeToolchains.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building/Testing Using Xcode on macOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the most recent development Xcode toolchain.&lt;/li&gt; &#xA; &lt;li&gt;Install the package&lt;/li&gt; &#xA; &lt;li&gt;Select the development toolchain in Xcode&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;swift-async-algorithms&lt;/code&gt; package directory in Xcode&lt;/li&gt; &#xA; &lt;li&gt;Build or Test in Xcode as normal&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;⚠️ Note: &lt;code&gt;swift test&lt;/code&gt; does not currently work properly with custom toolchains for this package.&lt;/p&gt; &#xA;&lt;h3&gt;Building/Testing on Linux&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the most recent development toolchain for your Linux distribution&lt;/li&gt; &#xA; &lt;li&gt;Decompress the archive to a path in which the &lt;code&gt;swift&lt;/code&gt; executable is in the binary search path environment variable (&lt;code&gt;$PATH&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;swift-async-algorithms&lt;/code&gt; directory run &lt;code&gt;swift build&lt;/code&gt; or &lt;code&gt;swift test&lt;/code&gt; accordingly&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building with Swift 5.6&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git checkout swift-5.6&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;swift build&lt;/code&gt; or &lt;code&gt;swift test&lt;/code&gt; accordingly&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Source Stability&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Async Algorithms package has a goal of being source stable as soon as possible; version numbers will follow &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;. Source breaking changes to public API can only land in a new major version.&lt;/p&gt; &#xA;&lt;p&gt;The public API of version 1.0 of the &lt;code&gt;swift-async-algorithms&lt;/code&gt; package will consist of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;AsyncAlgorithms&lt;/code&gt; module. Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may introduce changes to these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. Requiring a new Swift release will only require a minor version bump.&lt;/p&gt;</summary>
  </entry>
</feed>