<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-06T01:32:54Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thebrowsercompany/swift-winrt</title>
    <updated>2024-05-06T01:32:54Z</updated>
    <id>tag:github.com,2024-05-06:/thebrowsercompany/swift-winrt</id>
    <link href="https://github.com/thebrowsercompany/swift-winrt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift Language Projection for WinRT&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift/WinRT&lt;/h1&gt; &#xA;&lt;p&gt;Swift Language Projection for WinRT&lt;/p&gt; &#xA;&lt;p&gt;This project is based on the Microsoft created &lt;a href=&#34;https://github.com/microsoft/cppwinrt&#34;&gt;cppwinrt&lt;/a&gt; project and carries the same source structure.&lt;/p&gt; &#xA;&lt;p&gt;Swift/WinRT generates &lt;em&gt;both&lt;/em&gt; the C ABI definition, which is imported into a Swift module &lt;em&gt;and&lt;/em&gt; the actual Swift bindings which call into the ABI.&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;p&gt;This project has 4 different main projects:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thebrowsercompany/swift-winrt/main/swiftwinrt&#34;&gt;SwiftWinRT&lt;/a&gt; (C++)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thebrowsercompany/swift-winrt/main/tests/test_component/cpp/&#34;&gt;TestComponent&lt;/a&gt; (C++)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thebrowsercompany/swift-winrt/main/tests/test_component/Sources/&#34;&gt;Swift Bindings&lt;/a&gt; (Swift)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thebrowsercompany/swift-winrt/main/tests/test_app/&#34;&gt;Test app&lt;/a&gt; (Swift)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For all C++ code (1 and 2 above) - they are built with &lt;strong&gt;CMake&lt;/strong&gt; For all Swift code (3 and 4 above) - they are built with &lt;strong&gt;SPM&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developer Workflow&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Toolchain&lt;/h3&gt; &#xA;&lt;p&gt;This project may require Swift toolchain builds which are more recent than the latest released version. For best results, find the release tag used by the &lt;a href=&#34;https://raw.githubusercontent.com/thebrowsercompany/swift-winrt/main/.github/actions/windows-build/action.yml&#34;&gt;GitHub Actions build workflow&lt;/a&gt; and download the corresponding toolchain build from &lt;a href=&#34;https://github.com/thebrowsercompany/swift-build/releases&#34;&gt;swift-build releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Initial Setup&lt;/h3&gt; &#xA;&lt;p&gt;Initialize submodules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule init&#xA;git submodule update --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the required version of the Windows SDK if you don&#39;t already have it (currently 10.0.17763):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install --id Microsoft.WindowsSDK.10.0.17763&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integrated Build with CMake&lt;/h3&gt; &#xA;&lt;p&gt;While SPM is the driving force for all Swift related code, we still maintain an integrated build system with CMake, which invokes SPM as can be seen &lt;a href=&#34;https://raw.githubusercontent.com/thebrowsercompany/swift-winrt/main/tests/CMakeLists.txt&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use the following commands to build the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake --preset debug&#xA;cmake --build --preset debug&#xA;cmake --build --preset debug --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, for a one-liner (on powershell); &lt;code&gt;cmake --build --preset debug; cmake --build --preset debug --target install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: you don&#39;t want to re-run configure every-time, so the one-liner omits that step&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;While it is possible to use this one-liner for your inner-loop, there is a known issue which causes the swift-winrt build to be dirtied every time, and re-running swift-winrt in debug mode is very slow! This is why we set &lt;code&gt;CMAKE_SKIP_INSTALL_ALL_DEPENDENCY&lt;/code&gt; in our &lt;a href=&#34;https://raw.githubusercontent.com/thebrowsercompany/swift-winrt/main/CMakePresets.json&#34;&gt;CMakePresets.json&lt;/a&gt;. So when you can building/testing in &lt;code&gt;release&lt;/code&gt; mode will be quicker. Generally, this is the golden path forward for when you don&#39;t need to debug tests. However, if you need to debug tests, then you will likely want to build debug. See &lt;a href=&#34;https://raw.githubusercontent.com/thebrowsercompany/swift-winrt/main/#optimal-developer-workflow-for-debugging-tests&#34;&gt;below&lt;/a&gt; for optimal &lt;code&gt;debug&lt;/code&gt; config workflow.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging Tests in Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;The test code (written in Swift) is easily buildable and debuggable in VS Code. You can build using &lt;code&gt;Ctrl+Shift+B&lt;/code&gt; and then debug via the standard VSCode debug window (or press &lt;code&gt;F5&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: When building tests in VSCode, swift-winrt &lt;em&gt;is not&lt;/em&gt; re-run, as this only runs the SPM portion of the build.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Optimal developer workflow for debugging tests&lt;/h4&gt; &#xA;&lt;p&gt;If you need to build debug, then the following workflow is recommended:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open swiftwinrt directory in Visual Studio and select the release configuration (see &lt;a href=&#34;https://raw.githubusercontent.com/thebrowsercompany/swift-winrt/main/#debugging-swiftwinrt-in-visual-studio&#34;&gt;Debugging swift-winrt in Visual Studio&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open VSCode to the root of the repo and ensure the &lt;code&gt;Debug&lt;/code&gt; preset is selected.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This workflow has a couple key benefits:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;This will let you quickly re-run swift-winrt in release mode when needed while still being able to only build debug for the tests.&lt;/li&gt; &#xA; &lt;li&gt;Controlling when swift-winrt is re-run has the benefit of allowing you to hand-edit any files you need to prototype with APIs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You do have to be careful that when you are done iterating (especially on handwritten changes) that you run a full build. However, your PR will fail if this happens.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging swift-winrt in Visual Studio&lt;/h3&gt; &#xA;&lt;p&gt;When working on the bindings, the best experience is to use full Visual Studio (&lt;em&gt;not&lt;/em&gt; VS Code) and open the &lt;a href=&#34;https://raw.githubusercontent.com/thebrowsercompany/swift-winrt/main/swiftwinrt/CMakeLists.txt&#34;&gt;swift-winrt cmake file&lt;/a&gt; in VS and build that way.&lt;/p&gt; &#xA;&lt;p&gt;The build process generates a .rsp file which can be used to easily generate the bindings. So first, run a build so that this file is generated.&lt;/p&gt; &#xA;&lt;p&gt;Select the startup project to &lt;code&gt;swiftwinrt.exe&lt;/code&gt; and update the debug settings by going to &lt;code&gt;Debug -&amp;gt; Debug and Launch Settings for swiftwinrt&lt;/code&gt; and setting your arguments to look like this (paths may be different):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;version&#34;: &#34;0.2.1&#34;,&#xA;  &#34;defaults&#34;: {},&#xA;  &#34;configurations&#34;: [&#xA;    {&#xA;      &#34;type&#34;: &#34;default&#34;,&#xA;      &#34;project&#34;: &#34;CMakeLists.txt&#34;,&#xA;      &#34;projectTarget&#34;: &#34;swiftwinrt.exe (swiftwinrt.exe)&#34;,&#xA;      &#34;name&#34;: &#34;swiftwinrt.exe (swiftwinrt.exe)&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;@C:\\workspace\\swiftwinrt\\build\\debug\\tests\\test_component\\SwiftWinRT.rsp&#34;&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>