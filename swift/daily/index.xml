<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-05T08:30:49Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>teodorpatras/EasyTipView</title>
    <updated>2023-02-05T08:30:49Z</updated>
    <id>tag:github.com,2023-02-05:/teodorpatras/EasyTipView</id>
    <link href="https://github.com/teodorpatras/EasyTipView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fully customisable tooltip view in Swift for iOS.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/assets/easytipview.png&#34; alt=&#34;EasyTipView: fully customisable tooltip view written in Swift&#34; style=&#34;width: 500px;&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-5.0-orange.svg?style=flat%22&#34; alt=&#34;Swift3&#34;&gt; &lt;a href=&#34;http://cocoapods.org/pods/EasyTipView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/EasyTipView.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/teodorpatras/EasyTipView&#34;&gt;&lt;img src=&#34;https://travis-ci.org/teodorpatras/EasyTipView.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/EasyTipView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/EasyTipView.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/EasyTipView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/EasyTipView.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;EasyTipView&lt;/code&gt; is a fully customizable tooltip view written in Swift that can be used as a call to action or informative tip.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/assets/easytipview.gif&#34; width=&#34;320&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/assets/static.png&#34; width=&#34;320&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/#supported-versions&#34;&gt;Supported OS &amp;amp; SDK versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/#customising&#34;&gt;Customizing the appearance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/#customising-animations&#34;&gt;Customising the presentation and dismissal animations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;features&#34;&gt; Features &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Can be shown pointing to any &lt;code&gt;UIBarItem&lt;/code&gt; or &lt;code&gt;UIView&lt;/code&gt; subclass.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for any arrow direction &lt;code&gt;←, →, ↑, ↓&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatic orientation change adjustments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fully customizable appearance (custom content view or simply just text - including &lt;code&gt;NSAttributedString&lt;/code&gt; - see the Example app).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fully customizable presentation and dismissal animations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;installation&#34;&gt; Installation &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects.&lt;/p&gt; &#xA;&lt;p&gt;CocoaPods 0.36 adds supports for Swift and embedded frameworks. You can install it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate EasyTipView into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;EasyTipView&#39;, &#39;~&amp;gt; 2.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case Xcode complains (&lt;i&gt;&#34;Cannot load underlying module for EasyTipView&#34;&lt;/i&gt;) go to Product and choose Clean (or simply press &lt;kbd&gt;⇧&lt;/kbd&gt;&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate EasyTipView into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;teodorpatras/EasyTipView&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; to build the framework and drag the built &lt;code&gt;EasyTipView.framework&lt;/code&gt; into your Xcode project.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use either of the aforementioned dependency managers, you can integrate EasyTipView into your project manually.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;supported-versions&#34;&gt; Supported OS &amp;amp; SDK Versions &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supported build target - iOS 8+ (Xcode 8)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;usage&#34;&gt; Usage &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First you should customize the preferences:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;var preferences = EasyTipView.Preferences()&#xA;preferences.drawing.font = UIFont(name: &#34;Futura-Medium&#34;, size: 13)!&#xA;preferences.drawing.foregroundColor = UIColor.whiteColor()&#xA;preferences.drawing.backgroundColor = UIColor(hue:0.46, saturation:0.99, brightness:0.6, alpha:1)&#xA;preferences.drawing.arrowPosition = EasyTipView.ArrowPosition.top&#xA;&#xA;/*&#xA; * Optionally you can make these preferences global for all future EasyTipViews&#xA; */&#xA;EasyTipView.globalPreferences = preferences&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Secondly call the &lt;code&gt;show(animated: forView: withinSuperview: text: preferences: delegate:)&lt;/code&gt; method:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;EasyTipView.show(forView: self.buttonB,&#xA;withinSuperview: self.navigationController?.view,&#xA;text: &#34;Tip view inside the navigation controller&#39;s view. Tap to dismiss!&#34;,&#xA;preferences: preferences,&#xA;delegate: self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that if you set the&lt;/strong&gt; &lt;code&gt;EasyTipView.globalPreferences&lt;/code&gt;&lt;strong&gt;, you can ommit the&lt;/strong&gt; &lt;code&gt;preferences&lt;/code&gt; &lt;strong&gt;parameter in all calls. Additionally, you can also ommit the&lt;/strong&gt; &lt;code&gt;withinSuperview&lt;/code&gt; &lt;strong&gt;parameter and the&lt;/strong&gt; &lt;code&gt;EasyTipView&lt;/code&gt; &lt;strong&gt;will be shown within the main application window&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Alternatively, if you want to dismiss the &lt;code&gt;EasyTipView&lt;/code&gt; programmatically later on, you can use one of the instance methods:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;let tipView = EasyTipView(text: &#34;Some text&#34;, preferences: preferences)&#xA;tipView.show(forView: someView, withinSuperview: someSuperview)&#xA;&#xA;// later on you can dismiss it&#xA;tipView.dismiss()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;customising&#34;&gt; Customizing the appearance &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;In order to customize the &lt;code&gt;EasyTipView&lt;/code&gt; appearance and behavior, you can play with the &lt;code&gt;Preferences&lt;/code&gt; structure which encapsulates all the customizable properties of the &lt;code&gt;EasyTipView&lt;/code&gt;. These preferences have been split into three structures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Drawing&lt;/code&gt; - encapsulates customizable properties specifying how &lt;code&gt;EastTipView&lt;/code&gt; will be drawn on screen.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Positioning&lt;/code&gt; - encapsulates customizable properties specifying where &lt;code&gt;EasyTipView&lt;/code&gt; will be drawn within its own bounds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Animating&lt;/code&gt; - encapsulates customizable properties specifying how &lt;code&gt;EasyTipView&lt;/code&gt; will animate on and off screen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;Drawing &lt;/code&gt; attribute&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cornerRadius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The corner radius of the tip view bubble.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;arrowHeight&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The height of the arrow positioned at the top or bottom of the bubble.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;arrowWidth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The width of the above mentioned arrow.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;foregroundColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The text color.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The background color of the bubble.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;arrowPosition&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The position of the arrow. This can be: &lt;br&gt; &lt;strong&gt;+&lt;/strong&gt; &lt;code&gt;.top&lt;/code&gt;: on top of the bubble &lt;br&gt; &lt;strong&gt;+&lt;/strong&gt; &lt;code&gt;.bottom&lt;/code&gt;: at the bottom of the bubble.&lt;br&gt; &lt;strong&gt;+&lt;/strong&gt; &lt;code&gt;.left&lt;/code&gt;: on the left of the bubble &lt;br&gt; &lt;strong&gt;+&lt;/strong&gt; &lt;code&gt;.right&lt;/code&gt;: on the right of the bubble &lt;br&gt; &lt;strong&gt;+&lt;/strong&gt; &lt;code&gt;.any&lt;/code&gt;: use this option to let the &lt;code&gt;EasyTipView&lt;/code&gt; automatically find the best arrow position. &lt;br&gt;&lt;strong&gt;If the passed in arrow cannot be applied due to layout restrictions, a different arrow position will be automatically assigned.&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;textAlignment&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The alignment of the text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;borderWidth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Width of the optional border to be applied on the bubble.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;borderColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Color of the optional border to be applied on the bubble. &lt;strong&gt;In order for the border to be applied, &lt;code&gt;borderColor&lt;/code&gt; needs to be different that &lt;code&gt;UIColor.clear&lt;/code&gt; and &lt;code&gt;borderWidth&lt;/code&gt; &amp;gt; 0&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;font&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Font to be applied on the text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;shadowColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The color of the shadow (default &lt;code&gt;UIColor.clearcolor&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;shadowOpacity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The opacity of the shadow (default &lt;code&gt;0&lt;/code&gt;). &lt;strong&gt;For the shadow to be drawn, both&lt;/strong&gt; &lt;code&gt;shadowColor&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;shadowOpacity&lt;/code&gt; &lt;strong&gt;must be set to a valid value.&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;shadowRadius&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The radius of the shadow (default &lt;code&gt;0&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;shadowOffset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The offset of the shadow.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;Positioning &lt;/code&gt; attribute&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bubbleHInset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Horizontal bubble inset within its container.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bubbleVInset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vertical bubble inset within its container.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;contentHInset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Content horizontal inset within the bubble.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;contentVInset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Content vertical inset within the bubble.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;maxWidth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Max bubble width.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;Animating &lt;/code&gt; attribute&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dismissTransform&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CGAffineTransform&lt;/code&gt; specifying how the bubble will be dismissed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;showInitialTransform&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CGAffineTransform&lt;/code&gt; specifying the initial transform to be applied on the bubble before it is animated on screen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;showFinalTransform&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CGAffineTransform&lt;/code&gt; specifying how the bubble will be animated on screen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;springDamping&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Spring animation damping.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;springVelocity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Spring animation velocity.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;showInitialAlpha&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Initial alpha to be applied on the tip view before it is animated on screen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dismissFinalAlpha&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The alpha to be applied on the tip view when it is animating off screen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;showDuration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show animation duration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dismissDuration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dismiss animation duration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dismissOnTap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prevents view from dismissing on tap if it is set to false. (Default value is true.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;customising-animations&#34;&gt; Customising the presentation or dismissal animations &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The default animations for showing or dismissing are scale up and down. If you want to change the default behavior, you need to change the attributes of the &lt;code&gt;animating&lt;/code&gt; property within the preferences. An example could be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;preferences.animating.dismissTransform = CGAffineTransform(translationX: 0, y: -15)&#xA;preferences.animating.showInitialTransform = CGAffineTransform(translationX: 0, y: -15)&#xA;preferences.animating.showInitialAlpha = 0&#xA;preferences.animating.showDuration = 1.5&#xA;preferences.animating.dismissDuration = 1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This produces the following animations: &lt;br&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/teodorpatras/EasyTipView/master/assets/animation.gif&#34; width=&#34;200&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more animations, checkout the example project. &lt;em&gt;Once you configured the animations, a good idea would be to &lt;strong&gt;make these preferences global&lt;/strong&gt;, for all future instances of &lt;code&gt;EasyTipView&lt;/code&gt; by assigning it to &lt;code&gt;EasyTipView.globalPreferences&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;license&#34;&gt; License &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;EasyTipView&lt;/code&gt; is developed by &lt;a href=&#34;https://www.teodorpatras.com&#34;&gt;Teodor Patraş&lt;/a&gt; and is released under the MIT license. See the &lt;code&gt;LICENSE&lt;/code&gt; file for details.&lt;/p&gt; &#xA;&lt;p&gt;Logo was created using Bud Icons Launch graphic by &lt;a href=&#34;http://buditanrim.co&#34;&gt;Budi Tanrim&lt;/a&gt; from &lt;a href=&#34;http://www.flaticon.com/&#34;&gt;FlatIcon&lt;/a&gt; which is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons BY 3.0&lt;/a&gt;. Made with &lt;a href=&#34;http://logomakr.com&#34;&gt;Logo Maker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;contact&#34;&gt; Contact &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can follow or drop me a line on &lt;a href=&#34;https://twitter.com/teodorpatras&#34;&gt;my Twitter account&lt;/a&gt;. If you find any issues on the project, you can open a ticket. Pull requests are also welcome.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Dashlane/apple-apps</title>
    <updated>2023-02-05T08:30:49Z</updated>
    <id>tag:github.com,2023-02-05:/Dashlane/apple-apps</id>
    <link href="https://github.com/Dashlane/apple-apps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍎 Apple applications sources&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apple apps&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source code for all the Apple applications (Dashlane iOS, Dashlane macOS, Authenticator). It is publicly available for everyone to audit our code and learn more about how the Apple applications work.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;The iOS project was started back in 2010 and was relying on Objective-C, C++, and UIKit. Throughout the years, we transitioned to Swift to have a more modern codebase. Today, we don&#39;t have any Objective-C code anymore. After Apple announced SwiftUI in 2019, we decided to rewrite the app with this technology. Today, most of our codebase uses the latest Apple technologies like SwiftUI and Swift Concurrency.&lt;/p&gt; &#xA;&lt;h2&gt;High-level architecture&lt;/h2&gt; &#xA;&lt;p&gt;The architecture pattern used for the views is MVVM. It helps us isolate the business logic in clear layers and components.&lt;/p&gt; &#xA;&lt;p&gt;Because we were using a UIKit-based navigation, we relied on the Coordinator pattern to push the different views in the flows. These components are fading away as we&#39;re replacing the navigation with a SwiftUI-based one, relying only on MVVM.&lt;/p&gt; &#xA;&lt;p&gt;We rely on small services to perform non-UI operations (VaultItemService, RegionInformationService, PasswordEvaluator, ...). These services are split into two categories, the ones available when the user is not authenticated, and the others that require user information. They are respectively instantiated in &lt;code&gt;AppServicesContainer&lt;/code&gt; and &lt;code&gt;SessionServicesContainer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These services all define protocols for their public interface, clearly defining what should be public and what should not. Using protocols makes it easier to define Mocks and use them in Unit Tests and SwiftUI Previews.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftUI&lt;/h3&gt; &#xA;&lt;p&gt;We have been early adopters of the technology, using the first version of SwiftUI in production. While we still have a few screens written in UIKit, most of the codebase uses SwiftUI.&lt;/p&gt; &#xA;&lt;p&gt;The main navigation relies on UIKit because of the lack of features in the SwiftUI navigation when we introduced it. We started replacing it in some flows (like in the Settings or the Login) with the SwiftUI Navigation. We aim to finish the migration this year, allowing us to fully benefit from the SwiftUI environment.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Concurrency&lt;/h3&gt; &#xA;&lt;p&gt;Swift Concurrency has been longly awaited in the Swift community. All our Services relied on Combine to provide async information. Most of them have been migrated to Swift Concurrency, allowing a simpler codebase.&lt;/p&gt; &#xA;&lt;p&gt;The migration is still happening. We&#39;re regularly updating the services to use Swift Concurrency.&lt;/p&gt; &#xA;&lt;h3&gt;Codebase organization&lt;/h3&gt; &#xA;&lt;p&gt;The codebase is a monorepo, meaning that all Apple applications are in a single repository. It brings us many advantages as we share code between our applications. At the repository&#39;s root is a folder per target/app and one for all our &lt;code&gt;Packages&lt;/code&gt;. Before using a monorepo, adding code in packages was difficult because they were in other repositories. Developers had to create multiple merge requests to add their code if it impacted different parts of the applications. It led to the &lt;code&gt;Shared&lt;/code&gt; folder that contains files used by multiple targets. It was easy to add code there. As we migrate most of our features in &lt;code&gt;Packages&lt;/code&gt;, the &lt;code&gt;Shared&lt;/code&gt; folder will disappear. We stopped adding code in this folder a few months ago, but removing it will take some time.&lt;/p&gt; &#xA;&lt;h3&gt;Cryptography&lt;/h3&gt; &#xA;&lt;p&gt;All cryptographic operations are based on the Apple frameworks CommonCrypto and CryptoKit.&lt;/p&gt; &#xA;&lt;p&gt;The derivation of the Master Password is performed with the Password Hashing Competition winner, Argon2. The codebase contains a Swift wrapper that uses the C implementation of the algorithm.&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn more about cryptography at Dashlane, have a look at our &lt;a href=&#34;https://www.dashlane.com/download/whitepaper-en.pdf&#34;&gt;Security Whitepaper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;h3&gt;Security issue&lt;/h3&gt; &#xA;&lt;p&gt;If you find a vulnerability or a security issue, please report it on our &lt;a href=&#34;https://hackerone.com/dashlane&#34;&gt;Hacker One Bug Bounty program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Codebase improvement&lt;/h3&gt; &#xA;&lt;p&gt;If there is an improvement for the codebase you would like to share with us, we would be happy to hear your thoughts! Feel free to open an issue on this repository or contact us at &lt;a href=&#34;mailto:dev-relationship@dashlane.com&#34;&gt;dev-relationship@dashlane.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get our apps&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dashlane Apps&lt;/th&gt; &#xA;   &lt;th&gt;Download link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dashlane Password Manager&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apps.apple.com/app/dashlane/id517914548&#34;&gt;&lt;img alt=&#34;Download Dashlane Password Manager on App Store&#34; src=&#34;https://developer.apple.com/assets/elements/badges/download-on-the-app-store.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dashlane Authenticator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apps.apple.com/app/dashlane-authenticator/id1582978196&#34;&gt;&lt;img alt=&#34;Download Dashlane Authenticator on App Store&#34; src=&#34;https://developer.apple.com/assets/elements/badges/download-on-the-app-store.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>aheze/Squirrel</title>
    <updated>2023-02-05T08:30:49Z</updated>
    <id>tag:github.com,2023-02-05:/aheze/Squirrel</id>
    <link href="https://github.com/aheze/Squirrel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enable scrolling in the Xcode Simulator!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Squirrel/main/Assets/Logo.png&#34; width=&#34;120&#34; alt=&#34;Logo&#34;&gt; &#xA;&lt;h1&gt;Squirrel&lt;/h1&gt; &#xA;&lt;p&gt;🐿️ &lt;em&gt;Pronounced: Scroll-Wheel&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A menu bar app that adds scrolling to the simulator.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For some reason, you can&#39;t scroll in Xcode&#39;s simulator.&lt;/li&gt; &#xA; &lt;li&gt;This app enables scrolling again!&lt;/li&gt; &#xA; &lt;li&gt;Features: customizable settings, made with SwiftUI, and a cute squirrel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can download Squirrel on the &lt;a href=&#34;https://apps.apple.com/app/squirrel-for-simulator/id1669664068&#34;&gt;App Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, get the &lt;a href=&#34;https://github.com/aheze/Squirrel/releases/latest/download/Squirrel.zip&#34;&gt;ZIP file&lt;/a&gt;, or use Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hkamran80/things/squirrel-for-simulator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Squirrel requires macOS Big Sur (11.0) or higher.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Main Menu&lt;/th&gt; &#xA;   &lt;th&gt;Advanced Settings&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Light Mode&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Squirrel/main/Assets/MenuBar.png&#34; alt=&#34;Menu Bar&#34;&gt;&lt;br&gt;Dark Mode&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Squirrel/main/Assets/MenuBar-Dark.png&#34; alt=&#34;Menu Bar Dark Mode&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Squirrel/main/Assets/MenuBar-Expanded.png&#34; alt=&#34;Menu Bar Expanded&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; 1. You start scrolling &lt;/td&gt; &#xA;   &lt;td&gt; 2. Squirrel drags on the screen for you &lt;/td&gt; &#xA;   &lt;td&gt; 3. Your cursor auto-snaps back to where you started &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Squirrel/main/Assets/Simulator1.png&#34; alt=&#34;Screenshot of simulator&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Squirrel/main/Assets/Simulator2.png&#34; alt=&#34;Screenshot of simulator, blue pointer shown at initial cursor position. Cursor is dragged higher up.&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Squirrel/main/Assets/Simulator3.png&#34; alt=&#34;Screenshot of simulator, cursor is back at its original position.&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Videos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/49819455/216271894-3e2352a4-edd0-41b7-a830-1cc4fb9aa15e.mp4&#34;&gt;https://user-images.githubusercontent.com/49819455/216271894-3e2352a4-edd0-41b7-a830-1cc4fb9aa15e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/49819455/216271984-b6672a5f-72ad-40bd-b01b-dad7059d92ae.mp4&#34;&gt;https://user-images.githubusercontent.com/49819455/216271984-b6672a5f-72ad-40bd-b01b-dad7059d92ae.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press &lt;kbd&gt;ESC&lt;/kbd&gt; to stop scrolling in case something bugs out.&lt;/li&gt; &#xA; &lt;li&gt;Trackpad support is currently unstable, but most scroll wheels / mice should work.&lt;/li&gt; &#xA; &lt;li&gt;Customization Reference - General: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Enabled&lt;/code&gt; - whether Squirrel is active.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Natural Scrolling&lt;/code&gt; - toggles the scroll direction.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Pointer Color&lt;/code&gt; - the color of the cursor pointer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Pointer Size&lt;/code&gt; - the length of the pointer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Pointer Opacity&lt;/code&gt; - the opacity.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Pointer Scale&lt;/code&gt; - scale the pointer by this when scrolling starts.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Customization Reference - Advanced: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Launch Simulator On Startup&lt;/code&gt; - launch the Simulator when Squirrel starts.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Quit If Simulator Is Closed&lt;/code&gt; - auto-quit the app when the Simulator isn&#39;t active.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Scroll Steps&lt;/code&gt; - how many interations to get to the final scroll value.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Inactivity Timeout&lt;/code&gt; - how many seconds to wait before stopping scroll.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Scroll Interval&lt;/code&gt; - how often to execute a scroll step.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Top Inset&lt;/code&gt; - top insets to cancel out simulator bezels. Only allow scrolling when the cursor falls inside the inset frame.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Left Inset&lt;/code&gt; - same as above for the left side.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Right Inset&lt;/code&gt; - same as above for the right side.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bottom Inset&lt;/code&gt; - same as above for the bottom side.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Simulator Location&lt;/code&gt; - the file path of the simulator, for &lt;code&gt;Launch Simulator on Startup&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Simulator Check Frequency&lt;/code&gt; - how often to check if the simulator is alive, for &lt;code&gt;Quit If Simulator Is Closed&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Max Height&lt;/code&gt; - the maximum height of the menu popover.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Menu Width&lt;/code&gt; - the width of the menu popover.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Author&lt;/th&gt; &#xA;   &lt;th&gt;Contributing&lt;/th&gt; &#xA;   &lt;th&gt;Need Help?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Squirrel is made by &lt;a href=&#34;https://github.com/aheze&#34;&gt;aheze&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;All contributions are welcome. Just &lt;a href=&#34;https://github.com/aheze/Squirrel/fork&#34;&gt;fork&lt;/a&gt; the repo, then make a pull request.&lt;/td&gt; &#xA;   &lt;td&gt;Open an &lt;a href=&#34;https://github.com/aheze/Squirrel/issues&#34;&gt;issue&lt;/a&gt; or join the &lt;a href=&#34;https://discord.com/invite/Pmq8fYcus2&#34;&gt;Discord server&lt;/a&gt;. You can also ping me on &lt;a href=&#34;https://twitter.com/aheze0&#34;&gt;Twitter&lt;/a&gt;. Or read the source code — there&#39;s lots of comments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Squirrel uses your Mac&#39;s accessibility controls to simulate a &#34;drag&#34; gesture.&lt;/p&gt; &#xA;&lt;h3&gt;Apple, if you&#39;re reading this:&lt;/h3&gt; &#xA;&lt;p&gt;Please add native scroll support to the Simulator! Feels like such a small feature but it&#39;ll be very welcome.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;MIT License&#xA;&#xA;Copyright (c) 2023 A. Zheng&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>