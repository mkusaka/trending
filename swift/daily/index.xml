<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T01:55:35Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MessageKit/MessageKit</title>
    <updated>2022-06-19T01:55:35Z</updated>
    <id>tag:github.com,2022-06-19:/MessageKit/MessageKit</id>
    <link href="https://github.com/MessageKit/MessageKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community-driven replacement for JSQMessagesViewController&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MessageKit/MessageKit/master/Assets/mklogo.png&#34; title=&#34;MessageKit logo&#34; width=&#34;400&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;A community-driven replacement for JSQMessagesViewController &lt;a href=&#34;https://messagekit.github.io&#34;&gt;https://messagekit.github.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MessageKit/MessageKit/actions?query=workflow%3A%22Tests%22&#34;&gt;&lt;img src=&#34;https://github.com/MessageKit/MessageKit/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MessageKit/MessageKit/actions?query=workflow%3A%22Build+Framework%22&#34;&gt;&lt;img src=&#34;https://github.com/MessageKit/MessageKit/workflows/Build%20Framework/badge.svg?sanitize=true&#34; alt=&#34;Build framework&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MessageKit/MessageKit/actions?query=workflow%3A%22PR+Example+app%22&#34;&gt;&lt;img src=&#34;https://github.com/MessageKit/MessageKit/workflows/Build%20Example%20app/badge.svg?sanitize=true&#34; alt=&#34;Build example app&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MessageKit/MessageKit/actions?query=workflow%3A%22Danger%22&#34;&gt;&lt;img src=&#34;https://github.com/MessageKit/MessageKit/workflows/Danger/badge.svg?sanitize=true&#34; alt=&#34;Danger&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/MessageKit/MessageKit&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/MessageKit/MessageKit/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5-green.svg?sanitize=true&#34; alt=&#34;Swift&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/&#34;&gt; &lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/MessageKit/badge.png&#34; alt=&#34;CocoaPods&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/xcode&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Xcode-12-green.svg?sanitize=true&#34; alt=&#34;Xcode&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/xcode&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Xcode-13-blue.svg?sanitize=true&#34; alt=&#34;Xcode&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-red.svg?sanitize=true&#34; alt=&#34;MIT&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/MessageKit/MessageKit/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;Contributions Welcome&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MessageKit/MessageKit/master/Assets/TypingIndicator.png&#34; title=&#34;MessageKit header&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide a &lt;span&gt;🚨&lt;/span&gt;safe&lt;span&gt;🚨&lt;/span&gt; environment for others to learn and grow through Open Source.&lt;/li&gt; &#xA; &lt;li&gt;Make adding Chat&lt;span&gt;💬&lt;/span&gt; to a project easy.&lt;/li&gt; &#xA; &lt;li&gt;Enable beautiful and customizable Chat UI&#39;s.&lt;/li&gt; &#xA; &lt;li&gt;Provide an awesome Open Source project for the iOS open source community.&lt;/li&gt; &#xA; &lt;li&gt;Help others learn.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; &lt;strong&gt;Recommended&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Swift 5.3 in Xcode 12 &lt;a href=&#34;https://github.com/apple/swift-evolution/raw/master/proposals/0271-package-manager-resources.md&#34;&gt;added support&lt;/a&gt; for assets in Swift Packages. You can &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;just add&lt;/a&gt; MessageKit package to your project by entering it&#39;s repository URL&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/MessageKit/MessageKit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Older versions of Swift and Xcode don&#39;t support MessageKit via SPM.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/MessageKit/MessageKit/raw/master/Documentation/MANUAL_INSTALLATION.md&#34;&gt;Manual&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;iOS 13&lt;/strong&gt; or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swift 5.5&lt;/strong&gt; or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For iOS 12 or CocoaPods please use version 3.8.0&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For iOS 11 please use version 3.3.0&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For iOS 9 and iOS 10 please use version 3.1.1&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Cell Structure&lt;/h3&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MessageKit/MessageKit/master/Assets/CellStructure.png&#34; title=&#34;CellStructure&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Each default cell is a subclass of &lt;a href=&#34;https://github.com/MessageKit/MessageKit/raw/master/Sources/Views/Cells/MessageContentCell.swift&#34;&gt;&lt;code&gt;MessageContentCell&lt;/code&gt;&lt;/a&gt; which has 7 parts. From top down we have a: &lt;code&gt;cellTopLabel&lt;/code&gt;, &lt;code&gt;messageTopLabel&lt;/code&gt;, &lt;code&gt;messageContainerView&lt;/code&gt;, &lt;code&gt;messageBottomLabel&lt;/code&gt;, &lt;code&gt;cellBottomLabel&lt;/code&gt; with the &lt;code&gt;avatarView&lt;/code&gt; and &lt;code&gt;accessoryView&lt;/code&gt; on either side respectively. Above we see the basic &lt;a href=&#34;https://github.com/MessageKit/MessageKit/raw/master/Sources/Views/Cells/TextMessageCell.swift&#34;&gt;&lt;code&gt;TextMessageCell&lt;/code&gt;&lt;/a&gt; which uses a &lt;code&gt;MessageLabel&lt;/code&gt; as its main content.&lt;/p&gt; &#xA;&lt;p&gt;This structure will allow you to create a layout that suits your needs as you can customize the size, appearance and padding of each. If you need something more advanced you can implement a custom cell, which we show how to do in the &lt;a href=&#34;https://github.com/MessageKit/MessageKit/tree/master/Example&#34;&gt;Example&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h3&gt;InputBarAccessoryView Structure&lt;/h3&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MessageKit/MessageKit/master/Assets/InputBarAccessoryViewLayout.png&#34; title=&#34;InputBarAccessoryViewLayout&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;InputBarAccessoryView&lt;/code&gt;, 3rd party dependency from &lt;a href=&#34;https://github.com/nathantannar4/InputBarAccessoryView&#34;&gt;InputBarAccessoryView&lt;/a&gt; is a flexible and robust way of creating any kind of input layout you wish. Check the repo and examples there for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Guides&lt;/h3&gt; &#xA;&lt;p&gt;Please have a look at the &lt;a href=&#34;https://github.com/MessageKit/MessageKit/raw/master/Documentation/QuickStart.md&#34;&gt;Quick Start guide&lt;/a&gt; and the &lt;a href=&#34;https://github.com/MessageKit/MessageKit/raw/master/Documentation/FAQs.md&#34;&gt;FAQs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We recommend you start by looking at the &lt;a href=&#34;https://github.com/MessageKit/MessageKit/tree/master/Example&#34;&gt;Example&lt;/a&gt; project or write a question with the &#34;messagekit&#34; tag on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/messagekit&#34;&gt;Stack Overflow&lt;/a&gt;. You can also look at previous issues here on GitHub with the &lt;strong&gt;&#34;Question&#34;&lt;/strong&gt; tag.&lt;/p&gt; &#xA;&lt;p&gt;For more on how to use the MessageInputBar, see the dependency it is based on &lt;a href=&#34;https://github.com/nathantannar4/InputBarAccessoryView&#34;&gt;InputBarAccessoryView&lt;/a&gt;. You can also see this &lt;a href=&#34;https://raw.githubusercontent.com/MessageKit/MessageKit/main/%5Bhttps://github.com/MessageKit/MessageKit/raw/master/Documentation/MessageInputBar.md&#34;&gt;short guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Default Cells&lt;/h2&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MessageKit/MessageKit/master/Assets/ExampleA.png&#34; title=&#34;Example A&#34; height=&#34;400&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MessageKit/MessageKit/master/Assets/ExampleB.png&#34; title=&#34;Example B&#34; height=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The type of cell rendered for a given message is based on the &lt;code&gt;MessageKind&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum MessageKind {&#xA;    case text(String) // TextMessageCell&#xA;    case attributedText(NSAttributedString) // TextMessageCell&#xA;    case photo(MediaItem) // MediaMessageCell&#xA;    case video(MediaItem) // MediaMessageCell&#xA;    case location(LocationItem) // LocationMessageCell&#xA;    case emoji(String) // TextMessageCell&#xA;    case audio(AudioItem) // AudioMessageCell&#xA;    case contact(ContactItem) // ContactMessageCell&#xA;    case linkPreview(LinkItem) // LinkPreviewMessageCell&#xA;&#xA;    /// A custom message.&#xA;    /// - Note: Using this case requires that you implement the following methods and handle this case:&#xA;    ///   - MessagesDataSource: customCell(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -&amp;gt; UICollectionViewCell&#xA;    ///   - MessagesLayoutDelegate: customCellSizeCalculator(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -&amp;gt; CellSizeCalculator&#xA;    case custom(Any?)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you choose to use the &lt;code&gt;.custom&lt;/code&gt; kind you are responsible for all of the cells layout. Any &lt;code&gt;UICollectionViewCell&lt;/code&gt; can be returned for custom cells which means any of the styling you provide from the &lt;code&gt;MessageDisplayDelegate&lt;/code&gt; will not effect your custom cell. Even if you subclass your cell from &lt;code&gt;MessageContentCell&lt;/code&gt;. &lt;a href=&#34;https://github.com/MessageKit/MessageKit/raw/master/Documentation/CUSTOM_CELLS.md&#34;&gt;Read more about custom cells&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MessageKit/MessageKit/raw/master/Documentation/QuickStart.md#messagekind&#34;&gt;Read more about the cases on the Quick Start guide.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Great! Look over these things first.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read our &lt;a href=&#34;https://github.com/MessageKit/MessageKit/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the &lt;a href=&#34;https://github.com/MessageKit/MessageKit/raw/master/CONTRIBUTING.md&#34;&gt;Contributing Guide Lines&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Come join us on &lt;a href=&#34;https://join.slack.com/t/messagekit/shared_invite/MjI4NzIzNzMyMzU0LTE1MDMwODIzMDUtYzllYzIyNTU4MA&#34;&gt;Slack&lt;/a&gt; and 🗣 don&#39;t be a stranger.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://github.com/MessageKit/MessageKit/issues&#34;&gt;current issues&lt;/a&gt; and see if you can tackle any of those.&lt;/li&gt; &#xA; &lt;li&gt;Download the project and check out the current code base. Suggest any improvements by opening a new issue.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/MessageKit/MessageKit/main/#whats-next&#34;&gt;What&#39;s Next&lt;/a&gt; section &lt;span&gt;👇&lt;/span&gt; to see where we are headed.&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://stackoverflow.com/questions/tagged/messagekit&#34;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt; to keep yourself in &lt;img alt=&#34;neckbeard&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8&#34;&gt;) style.&lt;/li&gt; &#xA; &lt;li&gt;Be kind and helpful.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s Next?&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/MessageKit/MessageKit/releases&#34;&gt;Releases&lt;/a&gt; to see what we are working on next.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Have a question or an issue about MessageKit? Create an &lt;a href=&#34;https://github.com/MessageKit/MessageKit/issues/new&#34;&gt;issue&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Interested in contributing to MessageKit? Click here to join our &lt;a href=&#34;https://join.slack.com/t/messagekit/shared_invite/MjI4NzIzNzMyMzU0LTE1MDMwODIzMDUtYzllYzIyNTU4MA&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Apps using this library&lt;/h3&gt; &#xA;&lt;p&gt;Add your app to the list of apps using this library and make a pull request.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.classdojo.com&#34;&gt;ClassDojo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ring4.com&#34;&gt;Ring4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/ru/app/id1180117334&#34;&gt;Formacar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/hopup-airsoft-community/id1128903141?mt=8&#34;&gt;HopUp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mediquo.com&#34;&gt;MediQuo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/it/app/rappresentame/id1330914443&#34;&gt;RappresentaMe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/wiseeyes/id1391408511?mt=8&#34;&gt;WiseEyes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/khoren93/SwiftHub&#34;&gt;SwiftHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://studievenn.no&#34;&gt;Studievenn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/np/app/smoove-text/id1362792811&#34;&gt;SmooveText&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/coyo-engage/id1341588804&#34;&gt;COYO Engage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hitchpin.com&#34;&gt;HitchPin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/charge-running-live-coaching/id1204578360&#34;&gt;Charge Running&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/id573328837&#34;&gt;HER&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/girlfriend-plus/id1011637655&#34;&gt;Girlfriend Plus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/id1477310602&#34;&gt;Noon Happen&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Please provide attribution, it is greatly appreciated.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Core Team&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sd10&#34;&gt;@SD10&lt;/a&gt;, Steven Deutsch&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nathantannar4&#34;&gt;@nathantannar4&lt;/a&gt;, Nathan Tannar&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zhongwuzw&#34;&gt;@zhongwuzw&lt;/a&gt;, Wu Zhong&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/austinwright&#34;&gt;@austinwright&lt;/a&gt;, Austin Wright&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kaspik&#34;&gt;@kaspik&lt;/a&gt;, Jakub Kaspar&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/martinpucik&#34;&gt;@martinpucik&lt;/a&gt;, Martin Pucik&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to &lt;a href=&#34;https://github.com/MessageKit/MessageKit/graphs/contributors&#34;&gt;&lt;strong&gt;the contributors&lt;/strong&gt;&lt;/a&gt; of this project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MessageKit is released under the &lt;a href=&#34;https://github.com/MessageKit/MessageKit/raw/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/jessesquires/JSQMessagesViewController&#34;&gt;JSQMessagesViewController&lt;/a&gt; &lt;span&gt;👈&lt;/span&gt; &lt;span&gt;💯&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>p0deje/Maccy</title>
    <updated>2022-06-19T01:55:35Z</updated>
    <id>tag:github.com,2022-06-19:/p0deje/Maccy</id>
    <link href="https://github.com/p0deje/Maccy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight clipboard manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;128px&#34; src=&#34;https://maccy.app/img/maccy/Logo.png&#34; alt=&#34;Logo&#34; align=&#34;left&#34;&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://maccy.app&#34;&gt;Maccy&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/p0deje/Maccy/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/p0deje/Maccy/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.bitrise.io/app/716921b669780314&#34;&gt;&lt;img src=&#34;https://img.shields.io/bitrise/716921b669780314/master?token=3pMiCb5dpFzlO-7jTYtO3Q&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/p0deje&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/buy%20me%20a%20coffee-donate-yellow.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maccy is a lightweight clipboard manager for macOS. It keeps the history of what you copy and lets you quickly navigate, search, and use previous clipboard contents.&lt;/p&gt; &#xA;&lt;p&gt;Maccy works on macOS Mojave 10.14 or higher.&lt;/p&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#advanced&#34;&gt;Advanced&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#ignore-copied-items&#34;&gt;Ignore Copied Items&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#ignore-custom-copy-types&#34;&gt;Ignore Custom Copy Types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lightweight and fast&lt;/li&gt; &#xA; &lt;li&gt;Keyboard-first&lt;/li&gt; &#xA; &lt;li&gt;Secure and private&lt;/li&gt; &#xA; &lt;li&gt;Native UI&lt;/li&gt; &#xA; &lt;li&gt;Open source and free&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest version from the &lt;a href=&#34;https://github.com/p0deje/Maccy/releases/latest&#34;&gt;releases&lt;/a&gt; page, or use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install --cask maccy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; to popup Maccy or click on its icon in the menu bar.&lt;/li&gt; &#xA; &lt;li&gt;Type what you want to find.&lt;/li&gt; &#xA; &lt;li&gt;To select the history item you wish to copy, press &lt;kbd&gt;ENTER&lt;/kbd&gt;, or click the item, or use &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; &#xA; &lt;li&gt;To choose the history item and paste, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;ENTER&lt;/kbd&gt;, or &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;CLICK&lt;/kbd&gt; the item, or use &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; &#xA; &lt;li&gt;To choose the history item and paste without formatting, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;ENTER&lt;/kbd&gt;, or &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;CLICK&lt;/kbd&gt; the item, or use &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; &#xA; &lt;li&gt;To delete the history item, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To see the full text of the history item, wait a couple of seconds for tooltip.&lt;/li&gt; &#xA; &lt;li&gt;To pin the history item so that it remains on top of the list, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt;. The item will be moved to the top with a random but permanent keyboard shortcut. To unpin it, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt; again.&lt;/li&gt; &#xA; &lt;li&gt;To clear all unpinned items, select &lt;em&gt;Clear&lt;/em&gt; in the menu, or press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;. To clear all items including pinned, select &lt;em&gt;Clear&lt;/em&gt; in the menu with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; pressed, or press &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To disable Maccy and ignore new copies, click on the menu icon with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; pressed.&lt;/li&gt; &#xA; &lt;li&gt;To ignore only the next copy, click on the menu icon with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; pressed.&lt;/li&gt; &#xA; &lt;li&gt;To customize the behavior, check &#34;Preferences...&#34; window, or press &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h4&gt;Ignore Copied Items&lt;/h4&gt; &#xA;&lt;p&gt;You can tell Maccy to ignore all copied items:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;defaults write org.p0deje.Maccy ignoreEvents true # default is false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful if you have some workflow for copying sensitive data. You can set &lt;code&gt;ignoreEvents&lt;/code&gt; to true, copy the data and set &lt;code&gt;ignoreEvents&lt;/code&gt; back to false.&lt;/p&gt; &#xA;&lt;h4&gt;Ignore Custom Copy Types&lt;/h4&gt; &#xA;&lt;p&gt;By default Maccy will ignore certain copy types that are considered to be confidential or temporary. The default list always include the following types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org.nspasteboard.TransientType&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.nspasteboard.ConcealedType&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.nspasteboard.AutoGeneratedType&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, default configuration includes the following types but they can be removed or overwritten:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;com.agilebits.onepassword&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.typeit4me.clipping&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;de.petermaurer.TransientPasteboardType&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pasteboard generator type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;net.antelle.keeweb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can add additional custom types using preferences or &lt;code&gt;defaults&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;defaults write org.p0deje.Maccy ignoredPasteboardTypes -array-add &#34;com.myapp.CustomType&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to find what custom types are used by an application, you can use free application &lt;a href=&#34;https://github.com/sindresorhus/Pasteboard-Viewer&#34;&gt;Pasteboard-Viewer&lt;/a&gt;. Simply download the application, open it, copy something from the application you want to ignore and look for any custom types in the left sidebar. &lt;a href=&#34;https://github.com/p0deje/Maccy/issues/125&#34;&gt;Here is an example of using this approach to ignore Adobe InDesign&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you accidentally removed default types, you can restore the original configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;defaults write org.p0deje.Maccy ignoredPasteboardTypes -array &#34;de.petermaurer.TransientPasteboardType&#34; &#34;com.typeit4me.clipping&#34; &#34;Pasteboard generator type&#34; &#34;com.agilebits.onepassword&#34; &#34;net.antelle.keeweb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;There are dozens of similar applications out there, so why build another? Over the past years since I moved from Linux to macOS, I struggled to find a clipboard manager that is as free and simple as &lt;a href=&#34;http://parcellite.sourceforge.net&#34;&gt;Parcellite&lt;/a&gt;, but I couldn&#39;t. So I&#39;ve decided to build one.&lt;/p&gt; &#xA;&lt;p&gt;Also, I wanted to learn Swift and get acquainted with macOS application development.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>malcommac/SwiftDate</title>
    <updated>2022-06-19T01:55:35Z</updated>
    <id>tag:github.com,2022-06-19:/malcommac/SwiftDate</id>
    <link href="https://github.com/malcommac/SwiftDate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🐔 Toolkit to parse, validate, manipulate, compare and display dates, time &amp; timezones in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/banner.png&#34; width=&#34;300px&#34; alt=&#34;SwiftDate&#34; title=&#34;SwiftDate&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;Toolkit to parse, validate, manipulate, compare and display dates, time &amp;amp; timezones in Swift.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s This?&lt;/h2&gt; &#xA;&lt;p&gt;SwiftDate is the &lt;strong&gt;definitive toolchain to manipulate and display dates and time zones&lt;/strong&gt; on all Apple platform and even on Linux and Swift Server Side frameworks like Vapor or Kitura.&lt;br&gt; &lt;strong&gt;Over 3 million of downloads on &lt;a href=&#34;https://cocoapods.org/pods/SwiftDate&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;From simple date manipulation to complex business logic SwiftDate maybe the right choice for your next project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Easy Date Parsing&lt;/strong&gt; (custom formats, iso8601, rss &amp;amp; many more)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Easy Date Formatting&lt;/strong&gt; even with colloquial formatter and 140+ supported languages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Easy math operations with time units&lt;/strong&gt; (&lt;code&gt;2.hours + 5.minutes&lt;/code&gt;...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Intuitive components extraction&lt;/strong&gt; (&lt;code&gt;day, hour, nearestHour, weekdayNameShort&lt;/code&gt; etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Derivated dates generation&lt;/strong&gt; (&lt;code&gt;nextWeek, nextMonth, nextWeekday, tomorrow&lt;/code&gt;...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Over &lt;strong&gt;20+ fine grained date comparison&lt;/strong&gt; functions (&lt;code&gt;isToday, isTomorrow, isSameWeek, isNextYear&lt;/code&gt;...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Swift 4&#39;s &lt;strong&gt;Codable Support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Random dates&lt;/strong&gt; generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Fine grained date enumeration&lt;/strong&gt; functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Time period&lt;/strong&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Convert TimeIntervals&lt;/strong&gt; to other units (&lt;code&gt;2.hours.toUnits(.minutes)&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and of course...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;IT&#39;S TESTED!&lt;/strong&gt;. As 5.x the project has 90% of code coverage (want help us? write some unit tests and make a PR)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IT&#39;S FULLY DOCUMENTED!&lt;/strong&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Documentation/Index.md&#34;&gt;both with a complete guide&lt;/a&gt; and with Jazzy!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WE LOVE PLAYGROUND!&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Playgrounds/SwiftDate.playground&#34;&gt;Check out&lt;/a&gt; our interactive playground!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Start with SwiftDate&lt;/h2&gt; &#xA;&lt;p&gt;The entire library is fully documented both via XCode method inspector and a complete markdown documentation you can found below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;→ &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Documentation/Index.md&#34;&gt;Full Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;→ &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Documentation/0.Informations.md&#34;&gt;Requirements, Install, License &amp;amp; More&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;→ &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Documentation/10.Upgrading_SwiftDate4.md&#34;&gt;Upgrading from SwiftDate 4&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Explore SwiftDate&lt;/h3&gt; &#xA;&lt;p&gt;From simple date manipulation to complex business logic SwiftDate maybe the right choice for your next project.&lt;/p&gt; &#xA;&lt;p&gt;Let me show to you the main features of the library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#1&#34;&gt;Date Parsing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#2&#34;&gt;Date Manipulation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#3&#34;&gt;Date Comparsion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#4&#34;&gt;Date Creation with Region (Timezone, Calendar &amp;amp; Locale)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#5&#34;&gt;Derivated Dates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#6&#34;&gt;Components Extraction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#7&#34;&gt;Switch between timezones/locale and calendars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#8&#34;&gt;Date Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#9&#34;&gt;Relative Date Formatting (fully customizable!)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#10&#34;&gt;Codable Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#11&#34;&gt;Time Periods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a name=&#34;1&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;1. Date Parsing&lt;/h3&gt; &#xA;&lt;p&gt;SwiftDate can recognize all the major datetime formats automatically (ISO8601, RSS, Alt RSS, .NET, SQL, HTTP...) and you can also provide your own formats. Creating a new date has never been so easy!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// All default datetime formats (15+) are recognized automatically&#xA;let _ = &#34;2010-05-20 15:30:00&#34;.toDate()&#xA;// You can also provide your own format!&#xA;let _ = &#34;2010-05-20 15:30&#34;.toDate(&#34;yyyy-MM-dd HH:mm&#34;)&#xA;// All ISO8601 variants are supported too with timezone parsing!&#xA;let _ = &#34;2017-09-17T11:59:29+02:00&#34;.toISODate()&#xA;// RSS, Extended, HTTP, SQL, .NET and all the major variants are supported!&#xA;let _ = &#34;19 Nov 2015 22:20:40 +0100&#34;.toRSS(alt: true)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;2&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;2. Date Manipulation&lt;/h3&gt; &#xA;&lt;p&gt;Date can be manipulated by adding or removing time components using a natural language; time unit extraction is also easy and includes the support for timezone, calendar and locales!&lt;/p&gt; &#xA;&lt;p&gt;Manipulation can be done with standard math operators and between dates, time intervals, date components and relevant time units!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Math operations support time units&#xA;let _ = (&#34;2010-05-20 15:30:00&#34;.toDate() + 3.months - 2.days)&#xA;let _ = Date() + 3.hours&#xA;let _ = date1 + [.year:1, .month:2, .hour:5]&#xA;let _ = date1 + date2&#xA;// extract single time unit components from date manipulation&#xA;let over1Year = (date3 - date2).year &amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;3&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;3. Date Comparison&lt;/h3&gt; &#xA;&lt;p&gt;SwiftDate include an extensive set of comparison functions; you can compare two dates by granularity, check if a date is an particular day, range and practically any other comparison you ever need.&lt;/p&gt; &#xA;&lt;p&gt;Comparison is also available via standard math operators like (&lt;code&gt;&amp;gt;, &amp;gt;=, &amp;lt;, &amp;lt;=&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Standard math comparison is allowed&#xA;let _ = dateA &amp;gt;= dateB || dateC &amp;lt; dateB&#xA;&#xA;// Complex comparisons includes granularity support&#xA;let _ = dateA.compare(toDate: dateB, granularity: .hour) == .orderedSame&#xA;let _ = dateA.isAfterDate(dateB, orEqual: true, granularity: .month) // &amp;gt; until month granularity&#xA;let _ = dateC.isInRange(date: dateA, and: dateB, orEqual: true, granularity: .day) // &amp;gt; until day granularity&#xA;let _ = dateA.earlierDate(dateB) // earlier date&#xA;let _ = dateA.laterDate(dateB) // later date&#xA;&#xA;// Check if date is close to another with a given precision&#xA;let _ = dateA.compareCloseTo(dateB, precision: 1.hours.timeInterval&#xA;&#xA;// Compare for relevant events:&#xA;// .isToday, .isYesterday, .isTomorrow, .isWeekend, isNextWeek&#xA;// .isSameDay, .isMorning, .isWeekday ...&#xA;let _ = date.compare(.isToday)&#xA;let _ = date.compare(.isNight)&#xA;let _ = date.compare(.isNextWeek)&#xA;let _ = date.compare(.isThisMonth)&#xA;let _ = date.compare(.startOfWeek)&#xA;let _ = date.compare(.isNextYear)&#xA;// ...and MORE THAN 30 OTHER COMPARISONS BUILT IN&#xA;&#xA;// Operation in arrays (oldestIn, newestIn, sortedByNewest, sortedByOldest...)&#xA;let _ = DateInRegion.oldestIn(list: datesArray)&#xA;let _ = DateInRegion.sortedByNewest(list: datesArray)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;4&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;4. Date Creation with Region (Timezone, Calendar &amp;amp; Locale)&lt;/h3&gt; &#xA;&lt;p&gt;You can create new dates from a string, time intervals or using date components. SwiftDate offers a wide set of functions to create and derivate your dates even with random generation!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// All dates includes timezone, calendar and locales!&#xA;// Create from string&#xA;let rome = Region(calendar: Calendars.gregorian, zone: Zones.europeRome, locale: Locales.italian)&#xA;let date1 = DateInRegion(&#34;2010-01-01 00:00:00&#34;, region: rome)!&#xA;&#xA;// Create date from intervals&#xA;let _ = DateInRegion(seconds: 39940, region: rome)&#xA;let _ = DateInRegion(milliseconds: 5000, region: rome)&#xA;&#xA;// Date from components&#xA;let _ = DateInRegion(components: {&#xA;&#x9;$0.year = 2001&#xA;&#x9;$0.month = 9&#xA;&#x9;$0.day = 11&#xA;&#x9;$0.hour = 12&#xA;&#x9;$0.minute = 0&#xA;}, region: rome)&#xA;let _ = DateInRegion(year: 2001, month: 1, day: 5, hour: 23, minute: 30, second: 0, region: rome)&#xA;&#xA;// Random date generation with/without bounds&#xA;let _ = DateInRegion.randomDate(region: rome)&#xA;let _ = DateInRegion.randomDate(withinDaysBeforeToday: 5)&#xA;let _ = DateInRegion.randomDates(count: 50, between: lowerLimitDate, and: upperLimitDate, region: rome)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;5&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;5. Derivated Dates&lt;/h3&gt; &#xA;&lt;p&gt;Date can be also generated starting from other dates; SwiftDate includes an extensive set of functions to generate. Over 20 different derivated dates can be created easily using &lt;code&gt;dateAt()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let _ = DateInRegion().dateAt(.endOfDay) // today at the end of the day&#xA;// Over 20 different relevant dates including .startOfDay,&#xA;// .endOfDay, .startOfWeek, .tomorrow, .nextWeekday, .nextMonth, .prevYear, .nearestMinute and many others!&#xA;let _ = dateA.nextWeekday(.friday) // the next friday after dateA&#xA;let _ = (date.dateAt(.startOfMonth) - 3.days)&#xA;let _ = dateA.compare(.endOfWeek)&#xA;&#xA;// Enumerate dates in range by providing your own custom&#xA;// increment expressed in date components&#xA;let from = DateInRegion(&#34;2015-01-01 10:00:00&#34;, region: rome)!&#xA;let to = DateInRegion(&#34;2015-01-02 03:00:00&#34;, region: rome)!&#xA;let increment2 = DateComponents.create {&#xA;&#x9;$0.hour = 1&#xA;&#x9;$0.minute = 30&#xA;&#x9;$0.second = 10&#xA;}&#xA;// generate dates in range by incrementing +1h,30m,10s each new date&#xA;let dates = DateInRegion.enumerateDates(from: fromDate2, to: toDate2, increment: increment2)&#xA;&#xA;// Get all mondays in Jan 2019&#xA;let mondaysInJan2019 = Date.datesForWeekday(.monday, inMonth: 1, ofYear: 2019)&#xA;&#xA;// Altering time components&#xA;let _ = dateA.dateBySet(hour: 10, min: 0, secs: 0)&#xA;&#xA;// Truncating a date&#xA;let _ = dateA.dateTruncated(at: [.year,.month,.day]) // reset all time components keeping only date&#xA;&#xA;// Rounding a date&#xA;let _ = dateA.dateRoundedAt(.toMins(10))&#xA;let _ = dateA.dateRoundedAt(.toFloor30Mins)&#xA;&#xA;// Adding components&#xA;let _ = dateA.dateByAdding(5,.year)&#xA;&#xA;// Date at the start/end of any time component&#xA;let _ = dateA.dateAtEndOf(.year) // 31 of Dec at 23:59:59&#xA;let _ = dateA.dateAtStartOf(.day) // at 00:00:00 of the same day&#xA;let _ = dateA.dateAtStartOf(.month) // at 00:00:00 of the first day of the month&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;6&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;6. Components Extraction&lt;/h3&gt; &#xA;&lt;p&gt;You can extract components directly from dates and it includes the right value expressed in date&#39;s region (the right timezone and set locale!).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a date in a region, London but with the lcoale set to IT&#xA;let london = Region(calendar: .gregorian, zone: .europeLondon, locale: .italian)&#xA;let date = DateInRegion(&#34;2018-02-05 23:14:45&#34;, format: dateFormat, region: london)!&#xA;&#xA;// You can extract any of the all available time units.&#xA;// VALUES ARE EXPRESSED IN THE REGION OF THE DATE (THE RIGHT TIMEZONE).&#xA;// (you can still get the UTC/absolute value by getting the inner&#39;s absoluteDate).&#xA;&#xA;let _ = date.year // 2018&#xA;let _ = date.month // 2&#xA;let _ = date.monthNameDefault // &#39;Febbraio&#39; as the locale is the to IT!&#xA;let _ = date.firstDayOfWeek // 5&#xA;let _ = date.weekdayNameShort // &#39;Lun&#39; as locale is the to IT&#xA;// ... all components are supported: .year, .month, .day, .hour, .minute, .second,&#xA;// .monthName, .weekday, .nearestHour, .firstDayOfWeek. .quarter and so on...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;7&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;7. Switch between timezones/locale and calendars&lt;/h3&gt; &#xA;&lt;p&gt;You can easily convert any date to another region (aka another calendar, locale or timezone) easily! New date contains all values expressed into the destination reason&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Conversion between timezones is easy using convertTo(region:) function&#xA;let rNY = Region(calendar: Calendars.gregorian, zone: Zones.americaNewYork, locale: Locales.english)&#xA;let rRome = Region(calendar: Calendars.gregorian, zone: Zones.europeRome, locale: Locales.italian)&#xA;let dateInNY = &#34;2017-01-01 00:00:00&#34;.toDate(region: rNY)&#xA;let dateInRome = dateInNY?.convertTo(region: rRome)!&#xA;print(dateInRome.toString()) // &#34;dom gen 01 06:00:00 +0100 2017\n&#34;&#xA;&#xA;// You can also convert single region&#39;s attributes&#xA;let dateInIndia = dateInNY?.convertTo(timezone: Zones.indianChristmas, locale: Locales.nepaliIndia)&#xA;print(&#34;\(dateInIndia!.toString())&#34;) // &#34;आइत जनवरी ०१ १२:००:०० +0700 २०१७\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;8&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;8. Date Formatting&lt;/h3&gt; &#xA;&lt;p&gt;Date formatting is easy, you can specify your own format, locale or use any of the provided ones.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Date Formatting&#xA;let london = Region(calendar: .gregorian, zone: .europeLondon, locale: .english)&#xA;let date = ... // 2017-07-22T18:27:02+02:00 in london region&#xA;let _ = date.toDotNET() // /Date(1500740822000+0200)/&#xA;let _ = date.toISODate() // 2017-07-22T18:27:02+02:00&#xA;let _ = date.toFormat(&#34;dd MMM yyyy &#39;at&#39; HH:mm&#34;) // &#34;22 July 2017 at 18:27&#34;&#xA;&#xA;// You can also easily change locale when formatting a region&#xA;let _ = date.toFormat(&#34;dd MMM&#34;, locale: .italian) // &#34;22 Luglio&#34;&#xA;&#xA;// Time Interval Formatting as Countdown&#xA;let interval: TimeInterval = (2.hours.timeInterval) + (34.minutes.timeInterval) + (5.seconds.timeInterval)&#xA;let _ = interval.toClock() // &#34;2:34:05&#34;&#xA;&#xA;// Time Interval Formatting by Components&#xA;let _ = interval.toString {&#xA;&#x9;$0.maximumUnitCount = 4&#xA;&#x9;$0.allowedUnits = [.day, .hour, .minute]&#xA;&#x9;$0.collapsesLargestUnit = true&#xA;&#x9;$0.unitsStyle = .abbreviated&#xA;} // &#34;2h 34m&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;9&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;9. Relative Date Formatting (fully customizable!)&lt;/h3&gt; &#xA;&lt;p&gt;Relative formatting is all new in SwiftDate; it supports 120+ languages with two different styles (&lt;code&gt;.default, .twitter&lt;/code&gt;), 9 flavours (&lt;code&gt;.long, .longTime, .longConvenient, .short, .shortTime, .shortConvenient, .narrow, .tiny, .quantify&lt;/code&gt;) and all of them are customizable as you need. The extensible format allows you to provide your own translations and rules to override the default behaviour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Twitter Style&#xA;let _ = (Date() - 3.minutes).toRelative(style: RelativeFormatter.twitterStyle(), locale: Locales.english) // &#34;3m&#34;&#xA;let _ = (Date() - 6.minutes).toRelative(style: RelativeFormatter.twitterStyle(), locale: Locales.italian) // &#34;6 min fa&#34;&#xA;&#xA;// Default Style&#xA;let _ = (now2 - 5.hours).toRelative(style: RelativeFormatter.defaultStyle(), locale: Locales.english) // &#34;5 hours ago&#34;&#xA;let y = (now2 - 40.minutes).toRelative(style: RelativeFormatter.defaultStyle(), locale: Locales.italian) // &#34;45 minuti fa&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;10&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;10. Codable Support&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;code&gt;DateInRegion&lt;/code&gt; and &lt;code&gt;Region&lt;/code&gt; fully support the new Swift&#39;s &lt;code&gt;Codable&lt;/code&gt; protocol. This mean you can safely encode/decode them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Encoding/Decoding a Region&#xA;let region = Region(calendar: Calendars.gregorian, zone: Zones.europeOslo, locale: Locales.english)&#xA;let encodedJSON = try JSONEncoder().encode(region)&#xA;let decodedRegion = try JSONDecoder().decode(Region.self, from: encodedJSON)&#xA;&#xA;// Encoding/Decoding a DateInRegion&#xA;let date = DateInRegion(&#34;2015-09-24T13:20:55&#34;, region: region)&#xA;let encodedDate = try JSONEncoder().encode(date)&#xA;let decodedDate = try JSONDecoder().decode(DateInRegion.self, from: encodedDate)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;11&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;11. Time Periods&lt;/h3&gt; &#xA;&lt;p&gt;SwiftDate integrates the great Matthew York&#39;s &lt;a href=&#34;https://github.com/MatthewYork/DateTools&#34;&gt;DateTools&lt;/a&gt; module in order to support Time Periods.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Documentation/12.Timer_Periods.md&#34;&gt;Time Periods&lt;/a&gt; section of the documentation.&lt;/p&gt;</summary>
  </entry>
</feed>