<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-18T01:54:18Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>movingparts-io/Pow</title>
    <updated>2022-08-18T01:54:18Z</updated>
    <id>tag:github.com,2022-08-18:/movingparts-io/Pow</id>
    <link href="https://github.com/movingparts-io/Pow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Delightful Transitions for SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/movingparts-io/Pow/main/previews/og-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Pow&lt;/h1&gt; &#xA;&lt;p&gt;Delightful SwiftUI transitions for your app.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; This is a Beta version.&lt;/p&gt; &#xA; &lt;p&gt;Pow is free while in Beta and will be a simple one-time purchase after that.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To add a package dependency to your Xcode project, select &lt;em&gt;File&lt;/em&gt; &amp;gt; &lt;em&gt;Add Package&lt;/em&gt; and enter this repository&#39;s URL (&lt;a href=&#34;https://github.com/movingparts-io/Pow&#34;&gt;https://github.com/movingparts-io/Pow&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/forums/thread/707569&#34;&gt;Xcode Previews depending on Pow are broken in Xcode 14b5&lt;/a&gt;.&lt;br&gt; &lt;strong&gt;Suggested Solution:&lt;/strong&gt; Download, unpack and embed the &lt;a href=&#34;https://raw.githubusercontent.com/movingparts-io/Pow/main/Package.swift&#34;&gt;&lt;code&gt;.xcframework&lt;/code&gt; referenced in the &lt;code&gt;Package.swift&lt;/code&gt;&lt;/a&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Preview videos in the README don&#39;t render in Chrome, Firefox &lt;a href=&#34;https://github.com/movingparts-io/Pow/issues/1&#34;&gt;https://github.com/movingparts-io/Pow/issues/1&lt;/a&gt;. &lt;strong&gt;Suggested Solution:&lt;/strong&gt; Open this page in Safari.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;All transitions are namespaced under the &lt;code&gt;movingParts&lt;/code&gt; static variable, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;myView.transition(.movingParts.anvil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Anvil&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/movingparts-io/Pow/main/previews/anvil.mov&#34; alt=&#34;A view dropping down like an avil, hitting the ground in a cloud of dust.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that drops the view down from the top.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on insertion and takes 1.4 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var anvil: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Blur&lt;/h2&gt; &#xA;&lt;p&gt;A transition from blurry to sharp on insertion, and from sharp to blurry on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var blur: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Boing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/movingparts-io/Pow/main/previews/boing.mov&#34; alt=&#34;A view dropping down, deforming as it hits its resing position as if made from jelly.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that moves the view down with any overshoot resulting in an elastic deformation of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var boing: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that moves the view away towards the specified edge, with any overshoot resulting in an elastic deformation of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func boing(edge: Edge) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Clock&lt;/h2&gt; &#xA;&lt;p&gt;A transition using a clockwise sweep around the centerpoint of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var clock: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition using a clockwise sweep around the centerpoint of the view.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func clock(blurRadius: CGFloat)  -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flicker&lt;/h2&gt; &#xA;&lt;p&gt;A transition that toggles the visibility of the view multiple times before settling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var flicker: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that toggles the visibility of the view multiple times before settling.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;count&lt;/code&gt;: The number of times the visibility is toggled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func flicker(count: Int) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flip&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/movingparts-io/Pow/main/previews/flip.mov&#34; alt=&#34;A view rotating into view.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that inserts by rotating the view towards the viewer, and removes by rotating the view away from the viewer.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Any overshoot of the animation will result in the view continuing the rotation past the view&#39;s normal state before eventually settling.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var flip: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Glare&lt;/h2&gt; &#xA;&lt;p&gt;A transitions that shows the view by combining a diagonal wipe with a white streak.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var glare: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transitions that shows the view by combining a wipe with a colored streak.&lt;/p&gt; &#xA;&lt;p&gt;The angle is relative to the current &lt;code&gt;layoutDirection&lt;/code&gt;, such that 0° represents sweeping towards the leading edge on insertion and 90° represents sweeping towards the top edge.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the removal of the view is using a glare with an exponential ease-in curve, combined with a anticipating scale animation, making for a more dramatic exit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/movingparts-io/Pow/main/previews/glare.mov&#34; alt=&#34;A view that appears with a white steak and disappears with the same streak, combined with a rising up animation.&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;infoBox&#xA;  .transition(&#xA;    .asymmetric(&#xA;      insertion: .movingParts.glare(angle: .degrees(225)),&#xA;      removal: .movingParts.glare(angle: .degrees(45)&#xA;    )&#xA;    .animation(.movingParts.easeInExponential(duration: 0.9))&#xA;        .combined(with:&#xA;          .scale(scale: 1.4)&#xA;            .animation(.movingParts.anticipate(duration: 0.9).delay(0.1)&#xA;        )&#xA;      )&#xA;    )&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: The angle of the wipe.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;color&lt;/code&gt;: The color of the glare effect.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func glare(angle: Angle, color: Color = .white) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Iris&lt;/h2&gt; &#xA;&lt;p&gt;A transition that takes the shape of a growing circle when inserting, and a shrinking circle when removing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;origin&lt;/code&gt;: The center point of the circle as it grows or shrinks.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func iris(origin: UnitPoint = .center, blurRadius: CGFloat = 0) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Move&lt;/h2&gt; &#xA;&lt;p&gt;A transition that moves the view from the specified edge of the on insertion and towards it on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func move(edge: Edge) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that moves the view at the specified angle.&lt;/p&gt; &#xA;&lt;p&gt;The angle is relative to the current &lt;code&gt;layoutDirection&lt;/code&gt;, such that 0° represents animating towards the leading edge on insertion and 90° represents inserting towards the top edge.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the view insertion is animated by moving it towards the top trailing corner and the removal is animated by moving it towards the bottom edge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Hello&#34;)&#xA;  .transition(&#xA;    .asymmetric(&#xA;      insertion: .movingParts.move(angle: .degrees(45)),&#xA;      removal:   .movingParts.move(angle: .degrees(90))&#xA;    )&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;angle&lt;/code&gt;: The direction of the animation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func move(angle: Angle) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pop&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/movingparts-io/Pow/main/previews/pop.mov&#34; alt=&#34;A view that appears following a ripple effect and colored particles.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that shows a view with a ripple effect and a flurry of tint-colored particles.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on insertion and takes 1.2 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var pop: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that shows a view with a ripple effect and a flurry of colored particles.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the star uses the pop effect only when transitioning from &lt;code&gt;starred == false&lt;/code&gt; to &lt;code&gt;starred == true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Button {&#xA;  starred.toggle()&#xA;} label: {&#xA;  if starred {&#xA;    Image(systemName: &#34;star.fill&#34;)&#xA;      .foregroundStyle(.orange)&#xA;      .transition(.movingParts.pop(.orange))&#xA;  } else {&#xA;    Image(systemName: &#34;star&#34;)&#xA;      .foregroundStyle(.gray)&#xA;      .transition(.identity)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The transition is only performed on insertion.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;style&lt;/code&gt;: The style to use for the effect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func pop(_ style: AnyShapeStyle) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rotate3D&lt;/h2&gt; &#xA;&lt;p&gt;A transition that inserts by rotating from the specified rotation, and removes by rotating to the specified rotation in three dimensions.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the view is rotated 90˚ about the y axis around its bottom edge as if it was rising from lying on its back face:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/movingparts-io/Pow/main/previews/rotate3d.mov&#34; alt=&#34;A view that raises up from lying on its back, overshooting as it does.&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Hello&#34;)&#xA;  .transition(.movingParts.rotate3D(&#xA;    .degrees(90),&#xA;      axis: (1, 0, 0),&#xA;      anchor: .bottom,&#xA;      perspective: 1.0 / 6.0)&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Any overshoot of the animation will result in the view continuing the rotation past the view&#39;s normal state before eventually settling.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;angle&lt;/code&gt;: The angle from which to rotate the view.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;axis&lt;/code&gt;: The x, y and z elements that specify the axis of rotation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;anchor&lt;/code&gt;: The location with a default of center that defines a point in 3D space about which the rotation is anchored.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;anchorZ&lt;/code&gt;: The location with a default of 0 that defines a point in 3D space about which the rotation is anchored.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perspective&lt;/code&gt;: The relative vanishing point with a default of 1 for this rotation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func rotate3D(_ angle: Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint = .center, anchorZ: CGFloat = 0, perspective: CGFloat = 1) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Skid&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/movingparts-io/Pow/main/previews/skid.mov&#34; alt=&#34;A sliding in from the left, overshowing and deforming as it moves.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that moves the view in from its leading edge with any overshoot resulting in an elastic deformation of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var skid: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that moves the view in from the specified edge during insertion and towards it during removal with any overshoot resulting in an elastic deformation of the view.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;direction&lt;/code&gt;: The direction of the transition.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func skid(direction: SkidDirection) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Swoosh&lt;/h2&gt; &#xA;&lt;p&gt;A three-dimensional transition from the back of the towards the front during insertion and from the front towards the back during removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var swoosh: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Vanish&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/movingparts-io/Pow/main/previews/vanish.mov&#34; alt=&#34;A view that dissolves into many small particles.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that dissolves the view into many small particles.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var vanish: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Wipe&lt;/h2&gt; &#xA;&lt;p&gt;A transition using a sweep from the specified edge on insertion, and towards it on removal.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;edge&lt;/code&gt;: The edge at which the sweep starts or ends.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func wipe(edge: Edge, blurRadius: CGFloat = 0) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>