<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-02T01:33:40Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kirualex/SwiftyGif</title>
    <updated>2024-03-02T01:33:40Z</updated>
    <id>tag:github.com,2024-03-02:/kirualex/SwiftyGif</id>
    <link href="https://github.com/kirualex/SwiftyGif" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High performance GIF engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://swift.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.0-blue.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/SwiftyGif.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SwiftyGif.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/kirualex/SwiftyGif&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kirualex/SwiftyGif.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kirualex/SwiftyGif/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/l/SDWebImage.svg?style=flat&#34; alt=&#34;Pod License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SwiftyGif&lt;/h1&gt; &#xA;&lt;p&gt;High performance &amp;amp; easy to use Gif engine&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://github.com/kirualex/SwiftyGif/raw/master/example.gif&#34; align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Language Switch: &lt;a href=&#34;https://raw.githubusercontent.com/kirualex/SwiftyGif/master/README_KR.md&#34;&gt;한국어&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; UIImage and UIImageView extension based&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remote GIFs with customizable loader&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Great CPU/Memory performances&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Control playback&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow control of display quality by using &#39;levelOfIntegrity&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow control CPU/memory tradeoff via &#39;memoryLimit&#39;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;With CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;use_frameworks!&#xA;pod &#39;SwiftyGif&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Follow the usual Carthage instructions on how to &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;add a framework to an application&lt;/a&gt;. When adding SwiftyGif among the frameworks listed in &lt;code&gt;Cartfile&lt;/code&gt;, apply its syntax for &lt;a href=&#34;https://github.com/Carthage/Carthage/raw/master/Documentation/Artifacts.md#github-repositories&#34;&gt;GitHub repositories&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;kirualex/SwiftyGif&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With Swift Package Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;https://github.com/kirualex/SwiftyGif.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;h3&gt;Project files&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kirualex/SwiftyGif/master/projec-file-explain.png&#34; alt=&#34;projec-file-explain&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As of now, Xcode &lt;code&gt;xcassets&lt;/code&gt; folders do not recognize &lt;code&gt;.gif&lt;/code&gt; as images. This means you need to put your &lt;code&gt;.gif&lt;/code&gt; outside of the assets. I recommend creating a group &lt;code&gt;gif&lt;/code&gt; for instance.&lt;/p&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;SwiftyGif uses familiar &lt;code&gt;UIImage&lt;/code&gt; and &lt;code&gt;UIImageView&lt;/code&gt; to display gifs.&lt;/p&gt; &#xA;&lt;h4&gt;Programmaticaly&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftyGif&#xA;&#xA;do {&#xA;    let gif = try UIImage(gifName: &#34;MyImage.gif&#34;)&#xA;    let imageview = UIImageView(gifImage: gif, loopCount: 3) // Will loop 3 times&#xA;    imageview.frame = view.bounds&#xA;    view.addSubview(imageview)&#xA;} catch {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Directly from nib/storyboard&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@IBOutlet var myImageView : UIImageView!&#xA;...&#xA;&#xA;let gif = try UIImage(gifName: &#34;MyImage.gif&#34;)&#xA;self.myImageView.setGifImage(gif, loopCount: -1) // Will loop forever&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Remote GIFs&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// You can also set it with an URL pointing to your gif&#xA;let url = URL(string: &#34;...&#34;)&#xA;let loader = UIActivityIndicatorView(style: .white)&#xA;cell.gifImageView.setGifFromURL(url, customLoader: loader)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SwiftUI&lt;/h4&gt; &#xA;&lt;p&gt;Add this &lt;code&gt;UIViewRepresentable&lt;/code&gt; to your code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AnimatedGifView: UIViewRepresentable {&#xA;    @Binding var url: URL&#xA;&#xA;    func makeUIView(context: Context) -&amp;gt; UIImageView {&#xA;        let imageView = UIImageView(gifURL: self.url)&#xA;        imageView.contentMode = .scaleAspectFit&#xA;        return imageView&#xA;    }&#xA;&#xA;    func updateUIView(_ uiView: UIImageView, context: Context) {&#xA;        uiView.setGifFromURL(self.url)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AnimatedGifView(url: Binding(get: { myModel.gif.url }, set: { _ in }))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Performances&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;SwiftyGifManager&lt;/code&gt; can hold one or several UIImageView using the same memory pool. This allows you to tune the memory limits to your convenience. If no manager is declared, SwiftyGif will just use the &lt;code&gt;SwiftyGifManager.defaultManager&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Level of integrity&lt;/h4&gt; &#xA;&lt;p&gt;Setting a lower level of integrity will allow for frame skipping, lowering both CPU and memory usage. This can be a good option if you need to preview a lot of gifs at the same time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let gif = try UIImage(gifName: &#34;MyImage.gif&#34;, levelOfIntegrity:0.5)&#xA;} catch {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Controls&lt;/h3&gt; &#xA;&lt;p&gt;SwiftyGif offers various controls on the current &lt;code&gt;UIImageView&lt;/code&gt; playing your gif file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.myImageView.startAnimatingGif()&#xA;self.myImageView.stopAnimatingGif()&#xA;self.myImageView.showFrameAtIndexDelta(delta: Int)&#xA;self.myImageView.showFrameAtIndex(index: Int)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To allow easy use of those controls, some utility methods are provided :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.myImageView.isAnimatingGif() // Returns whether the gif is currently playing&#xA;self.myImageView.gifImage!.framesCount() // Returns number of frames for this gif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delegate&lt;/h3&gt; &#xA;&lt;p&gt;You can declare a SwiftyGifDelegate to receive updates on the gif lifecycle. For instance, if you want your controller &lt;code&gt;MyController&lt;/code&gt; to act as the delegate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        self.imageView.delegate = self&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then simply add an extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension MyController : SwiftyGifDelegate {&#xA;&#xA;    func gifURLDidFinish(sender: UIImageView) {&#xA;        print(&#34;gifURLDidFinish&#34;)&#xA;    }&#xA;&#xA;    func gifURLDidFail(sender: UIImageView) {&#xA;        print(&#34;gifURLDidFail&#34;)&#xA;    }&#xA;&#xA;    func gifDidStart(sender: UIImageView) {&#xA;        print(&#34;gifDidStart&#34;)&#xA;    }&#xA;    &#xA;    func gifDidLoop(sender: UIImageView) {&#xA;        print(&#34;gifDidLoop&#34;)&#xA;    }&#xA;    &#xA;    func gifDidStop(sender: UIImageView) {&#xA;        print(&#34;gifDidStop&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;h3&gt;Display 1 Image&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CPU Usage(average)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Memory Usage(average)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;FLAnimatedImage&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;35%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9,5Mb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SwiftyGif&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18,4Mb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SwiftyGif(memoryLimit:10)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;34%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9,5Mb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Display 6 Images&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CPU Usage(average)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Memory Usage(average)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;FLAnimatedImage&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;65%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25,1Mb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SwiftyGif&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;105Mb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SwiftyGif(memoryLimit:20)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;45%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;26Mb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Measured on an iPhone 6S, iOS 9.3.1 and Xcode 7.3.&lt;/p&gt;</summary>
  </entry>
</feed>