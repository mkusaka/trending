<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-10T01:55:33Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>patchthecode/JTAppleCalendar</title>
    <updated>2022-07-10T01:55:33Z</updated>
    <id>tag:github.com,2022-07-10:/patchthecode/JTAppleCalendar</id>
    <link href="https://github.com/patchthecode/JTAppleCalendar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Unofficial Apple iOS Swift Calendar View. Swift calendar Library. iOS calendar Control. 100% Customizable&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/patchthecode/JTAppleCalendar&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2439146/20656424/a1c98c8e-b4e1-11e6-9833-5fa6430f5a8c.png&#34; alt=&#34;jtapplecalendarnewlogo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://patchthecode.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Tutorials-patchthecode.com-blue.svg?sanitize=true&#34; alt=&#34;Tutorial&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/JTAppleCalendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/JTAppleCalendar.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/JTAppleCalendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/JTAppleCalendar.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/JTAppleCalendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/JTAppleCalendar.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/patchthecode/JTAppleCalendar/wiki/Support&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/webstatic/en_US/btn/btn_donate_74x21.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/patchthecode/JTAppleCalendar/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/JTAppleCalendar/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/patchthecode/JTAppleCalendar/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/JTAppleCalendar/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/patchthecode/jtapplecalendar&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/patchthecode/jtapplecalendar/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Q: How will my calendar dateCells look with this library?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: However you want them to look.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/patchthecode/JTAppleCalendar/issues/2&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/2439146/20638185/d708d542-b353-11e6-8119-fa36c11b66cb.gif&#34; height=&#34;450&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/patchthecode/JTAppleCalendar/issues/2&#34;&gt;More Images&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Range selection - select dates in a range. The design is entirely up to you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Boundary dates - limit the calendar date range&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://patchthecode.com/jtapplecalendar-home/week-view-month-view/&#34;&gt;Week/month mode&lt;/a&gt; - show 1 row of weekdays. Or 2, 3 or 6&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom cells - make your day-cells look however you want, with any functionality you want&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom calendar view - make your calendar look however you want, with what ever functionality you want&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; First Day of week - pick anyday to be first day of the week&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Horizontal or vertical mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ability to add &lt;a href=&#34;https://patchthecode.com/jtapplecalendar-home/headers/&#34;&gt;month headers&lt;/a&gt; in varying sizes/styles of your liking&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ability to scroll to any month by simply using the date&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ability to design your calendar &lt;a href=&#34;https://github.com/patchthecode/JTAppleCalendar/issues/2&#34;&gt;however you want.&lt;/a&gt; You want it, you build it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How do I use this library?&lt;/h2&gt; &#xA;&lt;h3&gt;&amp;gt;&amp;gt; &lt;a href=&#34;https://github.com/patchthecode/JTAppleCalendar/wiki/Tutorials&#34;&gt;Read the wiki&lt;/a&gt; for Tutorials and example code to download. Or visit &lt;a href=&#34;https://patchthecode.com&#34;&gt;PatchTheCode.com&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. Want to become a sponsor? Send an email to &lt;a href=&#34;mailto:patchthecode@gmail.com&#34;&gt;patchthecode@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9488406/125080407-0dd25780-e0c5-11eb-9f70-ef958968674a.png&#34; alt=&#34;Scheduling API&#34;&gt; This project is sponsored by &lt;strong&gt;Spurwing&lt;/strong&gt;, where their API Makes Adding Scheduling Quick, Reliable and Scalable. Use Spurwing to build and integrate Scheduling, Booking &amp;amp; Calendar features in your project. Read more about Spurwing&#39;s &lt;a href=&#34;https://www.spurwing.io/&#34;&gt;&lt;strong&gt;Scheduling API&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/JTAppleCalendar/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/JTAppleCalendar/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/JTAppleCalendar/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/JTAppleCalendar/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/patchthecode/JTAppleCalendar/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://raw.githubusercontent.com/patchthecode/JTAppleCalendar/master/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/JTAppleCalendar/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! üôè [&lt;a href=&#34;https://opencollective.com/JTAppleCalendar#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/JTAppleCalendar#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/JTAppleCalendar/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;JTAppleCalendar is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SwiftKickMobile/SwiftMessages</title>
    <updated>2022-07-10T01:55:33Z</updated>
    <id>tag:github.com,2022-07-10:/SwiftKickMobile/SwiftMessages</id>
    <link href="https://github.com/SwiftKickMobile/SwiftMessages" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A very flexible message bar for iOS written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftMessages&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/TimothyMoose&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contact-@TimothyMoose-blue.svg?style=flat&#34; alt=&#34;Twitter: @TimothyMoose&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/SwiftMessages&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SwiftMessages.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/SwiftMessages&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/SwiftMessages.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/SwiftMessages&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/SwiftMessages.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/Design/swiftmessages.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;SwiftMessages is a very flexible view and view controller presentation library for iOS.&lt;/p&gt; &#xA;&lt;p&gt;Message views and view controllers can be displayed at the top, bottom, or center of the screen, or behind navigation bars and tab bars. There are interactive dismiss gestures including a fun, physics-based one. Multiple background dimming modes. And a lot more!&lt;/p&gt; &#xA;&lt;p&gt;In addition to the numerous configuration options, SwiftMessages provides several good-looking layouts and themes. But SwiftMessages is also designer-friendly, which means you can fully and easily customize the view:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy one of the included nib files into your project and change it.&lt;/li&gt; &#xA; &lt;li&gt;Subclass &lt;code&gt;MessageView&lt;/code&gt; and add elements, etc.&lt;/li&gt; &#xA; &lt;li&gt;Or just supply an arbitrary instance of &lt;code&gt;UIView&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Try exploring &lt;a href=&#34;http://goo.gl/KXw4nD&#34;&gt;the demo app via appetize.io&lt;/a&gt; to get a feel for the extensive configurability of SwiftMessages.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/Demo/demo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://goo.gl/KXw4nD&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/Demo/appetize.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;View Controllers&lt;/h2&gt; &#xA;&lt;p&gt;SwiftMessages can present view controllers using the &lt;code&gt;SwiftMessagesSegue&lt;/code&gt; custom modal segue!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/Design/SwiftMessagesSegue.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/SwiftMessagesSegue.swift&#34;&gt;&lt;code&gt;SwiftMessagesSegue&lt;/code&gt;&lt;/a&gt; is a subclass of &lt;code&gt;UIStoryboardSegue&lt;/code&gt; that integrates directly into Interface Builder as a custom modal segue, enabling view controllers to take advantage of SwiftMessages layouts, animations and more. &lt;code&gt;SwiftMessagesSegue&lt;/code&gt; works with any UIKIt project ‚Äî storyboards are not required. Refer to the View Controllers readme below for more information.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/ViewControllers.md&#34;&gt;View Controllers Readme&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;And check out our blog post &lt;a href=&#34;http://www.swiftkickmobile.com/elegant-custom-uiviewcontroller-transitioning-uiviewcontrollertransitioningdelegate-uiviewcontrolleranimatedtransitioning/&#34;&gt;Elegant Custom UIViewController Transitioning&lt;/a&gt; to learn a great technique you can use to build your own custom segues that utilize &lt;code&gt;UIViewControllerTransitioningDelegate&lt;/code&gt; and &lt;code&gt;UIViewControllerAnimatedTransitioning&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;code&gt;File | Swift Packages | Add Package Dependency...&lt;/code&gt; in Xcode and search for &#34;SwiftMessages&#34;. If multiple results are found, select the one owned by SwiftKick Mobile.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftMessages&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;SwiftKickMobile/SwiftMessages&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the Carthage build fails, &lt;a href=&#34;https://github.com/Carthage/Carthage/issues/3019&#34;&gt;try using the script&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Put SwiftMessages repo somewhere in your project directory.&lt;/li&gt; &#xA; &lt;li&gt;In Xcode, add &lt;code&gt;SwiftMessages.xcodeproj&lt;/code&gt; to your project.&lt;/li&gt; &#xA; &lt;li&gt;On your app&#39;s target, add the SwiftMessages framework: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;as an embedded binary on the General tab.&lt;/li&gt; &#xA;   &lt;li&gt;as a target dependency on the Build Phases tab.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftMessages.show(view: myView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although you can show any instance of &lt;code&gt;UIView&lt;/code&gt;, SwiftMessages provides a &lt;code&gt;MessageView&lt;/code&gt; class and assortment of nib-based layouts that should handle most cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Instantiate a message view from the provided card view layout. SwiftMessages searches for nib&#xA;// files in the main bundle first, so you can easily copy them into your project and make changes.&#xA;let view = MessageView.viewFromNib(layout: .cardView)&#xA;&#xA;// Theme message elements with the warning style.&#xA;view.configureTheme(.warning)&#xA;&#xA;// Add a drop shadow.&#xA;view.configureDropShadow()&#xA;&#xA;// Set message title, body, and icon. Here, we&#39;re overriding the default warning&#xA;// image with an emoji character.&#xA;let iconText = [&#34;ü§î&#34;, &#34;üò≥&#34;, &#34;üôÑ&#34;, &#34;üò∂&#34;].randomElement()!&#xA;view.configureContent(title: &#34;Warning&#34;, body: &#34;Consider yourself warned.&#34;, iconText: iconText)&#xA;&#xA;// Increase the external margin around the card. In general, the effect of this setting&#xA;// depends on how the given layout is constrained to the layout margins.&#xA;view.layoutMarginAdditions = UIEdgeInsets(top: 20, left: 20, bottom: 20, right: 20)&#xA;&#xA;// Reduce the corner radius (applicable to layouts featuring rounded corners).&#xA;(view.backgroundView as? CornerRoundingView)?.cornerRadius = 10&#xA;&#xA;// Show the message.&#xA;SwiftMessages.show(view: view)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may wish to use the view provider variant &lt;code&gt;show(viewProvider:)&lt;/code&gt; to ensure that your UIKit code is executed on the main queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftMessages.show {&#xA;    let view = MessageView.viewFromNib(layout: .cardView)&#xA;    // ... configure the view&#xA;    return view&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;SwiftMessages.Config&lt;/code&gt; struct provides numerous configuration options that can be passed to &lt;code&gt;show()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = SwiftMessages.Config()&#xA;&#xA;// Slide up from the bottom.&#xA;config.presentationStyle = .bottom&#xA;&#xA;// Display in a window at the specified window level.&#xA;config.presentationContext = .window(windowLevel: .statusBar)&#xA;&#xA;Note that, as of iOS 13, it is no longer possible to cover the status bar&#xA;regardless of the window level. A workaround is to hide the status bar instead.&#xA;config.prefersStatusBarHidden = true&#xA;&#xA;// Disable the default auto-hiding behavior.&#xA;config.duration = .forever&#xA;&#xA;// Dim the background like a popover view. Hide when the background is tapped.&#xA;config.dimMode = .gray(interactive: true)&#xA;&#xA;// Disable the interactive pan-to-hide gesture.&#xA;config.interactiveHide = false&#xA;&#xA;// Specify a status bar style to if the message is displayed directly under the status bar.&#xA;config.preferredStatusBarStyle = .lightContent&#xA;&#xA;// Specify one or more event listeners to respond to show and hide events.&#xA;config.eventListeners.append() { event in&#xA;    if case .didHide = event {&#xA;        print(&#34;yep id=\(String(describing: event.id)&#34;)&#xA;    }&#xA;}&#xA;&#xA;SwiftMessages.show(config: config, view: view)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify default configuration options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftMessages.defaultConfig.presentationStyle = .bottom&#xA;&#xA;// Show message with default config.&#xA;SwiftMessages.show(view: view)&#xA;&#xA;// Customize config using the default as a base.&#xA;var config = SwiftMessages.defaultConfig&#xA;config.duration = .forever&#xA;SwiftMessages.show(config: config, view: view)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessibility&lt;/h3&gt; &#xA;&lt;p&gt;SwiftMessages provides excellent VoiceOver support out-of-the-box.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The title and body of the message are combined into a single announcement when the message is shown. The &lt;code&gt;MessageView.accessibilityPrefix&lt;/code&gt; property can be set to prepend additional clarifying text to the announcement.&lt;/p&gt; &lt;p&gt;Sometimes, a message may contain important visual cues that aren&#39;t captured in the title or body. For example, a message may rely on a yellow background to convey a warning rather than having the word &#34;warning&#34; in the title or body. In this case, it might be helpful to set &lt;code&gt;MessageView.accessibilityPrefix = &#34;warning&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the message is shown with a dim view using &lt;code&gt;config.dimMode&lt;/code&gt;, elements below the dim view are not focusable until the message is hidden. If &lt;code&gt;config.dimMode.interactive == true&lt;/code&gt;, the dim view itself will be focusable and read out &#34;dismiss&#34; followed by &#34;button&#34;. The former text can be customized by setting the &lt;code&gt;config.dimModeAccessibilityLabel&lt;/code&gt; property.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;code&gt;AccessibleMessage&lt;/code&gt; protocol for implementing proper accessibility support in custom views.&lt;/p&gt; &#xA;&lt;h3&gt;Keyboard Avoidance&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;KeyboardTrackingView&lt;/code&gt; class can be used to cause the message view to avoid the keyboard by sliding up when the keyboard gets too close.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = SwiftMessages.defaultConfig&#xA;config.keyboardTrackingView = KeyboardTrackingView()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can incorporate &lt;code&gt;KeyboardTrackingView&lt;/code&gt; into your app even when you&#39;re not using SwiftMessages. Install into your view hierarchy by pinning &lt;code&gt;KeyboardTrackingView&lt;/code&gt; to the bottom, leading, and trailing edges of the screen. Then pin the bottom of your content that should avoid the keyboard to the top &lt;code&gt;KeyboardTrackingView&lt;/code&gt;. Use an equality constraint to strictly track the keyboard or an inequality constraint to only move when the keyboard gets too close. &lt;code&gt;KeyboardTrackingView&lt;/code&gt; works by observing keyboard notifications and adjusting its height to maintain its top edge above the keyboard, thereby pushing your content up. See the comments in &lt;code&gt;KeyboardTrackingView&lt;/code&gt; for configuration options.&lt;/p&gt; &#xA;&lt;h3&gt;Message Queueing&lt;/h3&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;SwiftMessages.show()&lt;/code&gt; as many times as you like. SwiftMessages maintains a queue and shows messages one at a time. If your view implements the &lt;code&gt;Identifiable&lt;/code&gt; protocol (like &lt;code&gt;MessageView&lt;/code&gt;), duplicate messages will be removed automatically. The pause between messages can be adjusted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SwiftMessages.pauseBetweenMessages = 1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a few ways to hide messages programatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Hide the current message.&#xA;SwiftMessages.hide()&#xA;&#xA;// Or hide the current message and clear the queue.&#xA;SwiftMessages.hideAll()&#xA;&#xA;// Or for a view that implements `Identifiable`:&#xA;SwiftMessages.hide(id: someId)&#xA;&#xA;// Or hide when the number of calls to show() and hideCounted(id:) for a &#xA;// given message ID are equal. This can be useful for messages that may be&#xA;// shown from  multiple code paths to ensure that all paths are ready to hide.&#xA;SwiftMessages.hideCounted(id: someId)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple instances of &lt;code&gt;SwiftMessages&lt;/code&gt; can be used to show more than one message at a time. Note that the static &lt;code&gt;SwiftMessages.show()&lt;/code&gt; and other static APIs on &lt;code&gt;SwiftMessage&lt;/code&gt; are just convenience wrappers around the shared instance &lt;code&gt;SwiftMessages.sharedInstance&lt;/code&gt;). Instances must be retained, thus it should be a property of something (e.g. your view controller):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class SomeViewController: UIViewController {&#xA;    let otherMessages = SwiftMessages()&#x9;&#xA;&#x9;&#xA;    func someMethod() {&#xA;        SwiftMessages.show(...)&#xA;        otherMessages.show(...)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Retrieving Messages&lt;/h3&gt; &#xA;&lt;p&gt;There are several APIs available for retrieving messages that are currently being shown, hidden, or queued to be shown. These APIs are useful for updating messages when some event happens without needing to keep temporary references around. See also &lt;code&gt;eventListeners&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Get a message view with the given ID if it is currently &#xA;// being shown or hidden.&#xA;if let view = SwiftMessages.current(id: &#34;some id&#34;) { ... }&#xA;&#xA;// Get a message view with the given ID if is it currently &#xA;// queued to be shown. &#xA;if let view = SwiftMessages.queued(id: &#34;some id&#34;) { ... }&#xA;&#xA;// Get a message view with the given ID if it is currently being&#xA;// shown, hidden or in the queue to be shown.&#xA;if let view = SwiftMessages.currentOrQueued(id: &#34;some id&#34;) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;SwiftMessages can display any &lt;code&gt;UIView&lt;/code&gt;. However, there are varying degrees of customization that can be done to the bundled views.&lt;/p&gt; &#xA;&lt;h4&gt;Nib Files&lt;/h4&gt; &#xA;&lt;p&gt;All of the message designs bundled with SwiftMessages have associated nib files. You are encouraged to copy any of these nib files into your project and modify them to suit your needs. SwiftMessages will load your copy of the file instead of the original. Nib files may be copied in Xcode using drag-and-drop.&lt;/p&gt; &#xA;&lt;p&gt;To facilitate the use of nib-based layouts, &lt;code&gt;MessageView&lt;/code&gt; provides some type-safe convenience methods for loading the bundled nibs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = MessageView.viewFromNib(layout: .cardView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, the &lt;code&gt;SwiftMessages&lt;/code&gt; class provides some generic loading methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Instantiate MessageView from a named nib.&#xA;let view: MessageView = try! SwiftMessages.viewFromNib(named: &#34;MyCustomNib&#34;)&#xA;&#xA;// Instantiate MyCustomView from a nib named MyCustomView.nib.&#xA;let view: MyCustomView = try! SwiftMessages.viewFromNib()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MessageView Class&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/MessageView.swift&#34;&gt;&lt;code&gt;MessageView&lt;/code&gt;&lt;/a&gt; is a light-weight view that all of the bundled designs use. It primarily consists of the following optional &lt;code&gt;@IBOutlet&lt;/code&gt; properties:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Element&lt;/th&gt; &#xA;   &lt;th&gt;Declaration&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;titleLabel: UILabel?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The message title.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Message body&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bodyLabel: UILabel?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The body of the message.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image icon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;iconImageView: UIImageView?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An image-based icon.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text icon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;iconLabel: UILabel?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A text-based (emoji) alternative to the image icon.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;button: UIButton?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An action button.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The SwiftMessages nib file use &lt;code&gt;MessageView&lt;/code&gt; as the top-level view with content connected to these outlets. The layouts are done using stack views, which means that you can remove an element by simply hiding it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.titleLabel.isHidden = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A common mistake is attempting to remove an element by setting the corresponding outlet to &lt;code&gt;nil&lt;/code&gt;. This does not work because it does not remove the element from the view hierarchy.&lt;/p&gt; &#xA;&lt;h4&gt;Configuration&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;MessageView&lt;/code&gt; provides numerous methods that follow the &lt;code&gt;configure*&lt;/code&gt; naming convention:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.configureTheme(.warning)&#xA;view.configureContent(title: &#34;Warning&#34;, body: &#34;Consider yourself warned.&#34;, iconText: &#34;ü§î&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All of these methods are shortcuts for quickly configuring the underlying view properties. SwiftMessages strives to avoid doing any internal magic in these methods, so you do not need to call them. You can configure the view properties directly or combine the two approaches.&lt;/p&gt; &#xA;&lt;h4&gt;Interaction&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;MessageView&lt;/code&gt; provides an optional block-based tap handler for the button and another for the view itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Hide when button tapped&#xA;messageView.buttonTapHandler = { _ in SwiftMessages.hide() }&#xA;&#xA;// Hide when message view tapped&#xA;messageView.tapHandler = { _ in SwiftMessages.hide() }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Extending&lt;/h4&gt; &#xA;&lt;p&gt;The suggested method for starting with &lt;code&gt;MessageView&lt;/code&gt; as a base and &lt;strong&gt;adding new elements&lt;/strong&gt;, such as additional buttons, is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy one of the bundled nib files into your project or create a new one from scratch.&lt;/li&gt; &#xA; &lt;li&gt;Add new elements to the nib file.&lt;/li&gt; &#xA; &lt;li&gt;Sublcass &lt;code&gt;MessageView&lt;/code&gt; and create outlets for the new elements.&lt;/li&gt; &#xA; &lt;li&gt;Assign the top-level view in the nib file to the subclass.&lt;/li&gt; &#xA; &lt;li&gt;Connect outlets between the nib file and the subclass.&lt;/li&gt; &#xA; &lt;li&gt;(recommended) override the implementation of &lt;code&gt;Identifiable&lt;/code&gt; as needed to incorporate new elements into the message&#39;s identity.&lt;/li&gt; &#xA; &lt;li&gt;(recommended) override the implementation of &lt;code&gt;AccessibleMessage&lt;/code&gt; as needed to incorporate new elements into Voice Over.&lt;/li&gt; &#xA; &lt;li&gt;Use one of the nib-loading methods above to load the view.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;BaseView Class&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/BaseView.swift&#34;&gt;&lt;code&gt;BaseView&lt;/code&gt;&lt;/a&gt; is the superclass of &lt;code&gt;MessageView&lt;/code&gt; and provides numerous options that aren&#39;t specific to the &#34;title + body + icon + button&#34; design of &lt;code&gt;MessageView&lt;/code&gt;. Custom views that are significantly different from &lt;code&gt;MessageView&lt;/code&gt;, such as a progress indicator, should subclass &lt;code&gt;BaseView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;CornerRoundingView Class&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/CornerRoundingView.swift&#34;&gt;&lt;code&gt;CornerRoundingView&lt;/code&gt;&lt;/a&gt; is a custom view that messages can use for rounding all or a subset of corners with squircles (the smoother method of rounding corners that you see on app icons). The nib files that feature rounded corners have &lt;code&gt;backgroundView&lt;/code&gt; assigned to a &lt;code&gt;CornerRoundingView&lt;/code&gt;. It provides a &lt;code&gt;roundsLeadingCorners&lt;/code&gt; option to dynamically round only the leading corners of the view when presented from top or bottom (a feature used for the tab-style layouts).&lt;/p&gt; &#xA;&lt;h4&gt;Animator Protocol&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/Animator.swift&#34;&gt;&lt;code&gt;Animator&lt;/code&gt;&lt;/a&gt; is the protocol that SwiftMessages uses for presentation and dismissal animations. Custom animations can be done through the &lt;code&gt;SwiftMessages.PresentationStyle.custom(animator:)&lt;/code&gt;. Some related components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/TopBottomAnimation.swift&#34;&gt;&lt;code&gt;TopBottomAnimation&lt;/code&gt;&lt;/a&gt; is a sliding implementation of &lt;code&gt;Animator&lt;/code&gt; used internally by &lt;code&gt;.top&lt;/code&gt; and &lt;code&gt;.bottom&lt;/code&gt; presentation styles. It provides some customization options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/PhysicsAnimation.swift&#34;&gt;&lt;code&gt;PhysicsAnimation&lt;/code&gt;&lt;/a&gt; is a scaling + opacity implementation of &lt;code&gt;Animator&lt;/code&gt; used internally by the &lt;code&gt;.center&lt;/code&gt; presentation style. It provides a fun physics-based dismissal gesture and provides customization options including &lt;code&gt;.top&lt;/code&gt; and &lt;code&gt;.bottom&lt;/code&gt; placement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/PhysicsPanHandler.swift&#34;&gt;&lt;code&gt;PhysicsPanHandler&lt;/code&gt;&lt;/a&gt; provides the physics-based dismissal gesture for &lt;code&gt;PhysicsAnimation&lt;/code&gt; and can be incorporated into other &lt;code&gt;Animator&lt;/code&gt; implementations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;High-quality PRs for cool &lt;code&gt;Animator&lt;/code&gt; implementations are welcome!&lt;/p&gt; &#xA;&lt;h4&gt;MarginAdjustable Protocol&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/MarginAdjustable.swift&#34;&gt;&lt;code&gt;MarginAdjustable&lt;/code&gt;&lt;/a&gt; is a protocol adopted by &lt;code&gt;BaseView&lt;/code&gt;. If the view being presented adopts &lt;code&gt;MarginAdjustable&lt;/code&gt;, SwiftMessages takes ownership of the view&#39;s layout margins to ensure ideal spacing across the full range of presentation contexts.&lt;/p&gt; &#xA;&lt;h4&gt;BackgroundViewable Protocol&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/BackgroundViewable.swift&#34;&gt;&lt;code&gt;BackgroundViewable&lt;/code&gt;&lt;/a&gt; is a protocol adopted by &lt;code&gt;BaseView&lt;/code&gt; and requires that a view provide a single &lt;code&gt;backgroundView&lt;/code&gt; property. &lt;code&gt;BaseView&lt;/code&gt; initializes &lt;code&gt;backgroundView = self&lt;/code&gt;, which you can freely re-assign to any subview.&lt;/p&gt; &#xA;&lt;p&gt;If the view being presented adopts &lt;code&gt;BackgroundViewable&lt;/code&gt;, SwiftMessages will ignore touches outside of &lt;code&gt;backgroundView&lt;/code&gt;. This is important because message views always span the full width of the device. Card and tab-style layouts appear inset from the edges of the device because the message view&#39;s background is transparent and &lt;code&gt;backgroundView&lt;/code&gt; is assigned to a subview constrained to the layout margins. In these layouts, touches in the transparent margins should be ignored.&lt;/p&gt; &#xA;&lt;h4&gt;Identifiable Protocol&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/Identifiable.swift&#34;&gt;&lt;code&gt;Identifiable&lt;/code&gt;&lt;/a&gt; is a protocol adopted by &lt;code&gt;MessageView&lt;/code&gt; and requires that a view provide a single &lt;code&gt;id&lt;/code&gt; property, which SwiftMessages uses for message deduplication.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MessageView&lt;/code&gt; computes the &lt;code&gt;id&lt;/code&gt; based on the message content, but &lt;code&gt;id&lt;/code&gt; can also be set explicitly as needed.&lt;/p&gt; &#xA;&lt;h4&gt;AccessibleMessage Protocol&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/SwiftMessages/AccessibleMessage.swift&#34;&gt;&lt;code&gt;AccessibleMessage&lt;/code&gt;&lt;/a&gt; is a protocol adopted by &lt;code&gt;MessageView&lt;/code&gt;. If the view being presented adopts &lt;code&gt;AccessibleMessage&lt;/code&gt;, SwiftMessages provides improved Voice Over.&lt;/p&gt; &#xA;&lt;h2&gt;About SwiftKick Mobile&lt;/h2&gt; &#xA;&lt;p&gt;We build high quality apps! &lt;a href=&#34;http://www.swiftkickmobile.com&#34;&gt;Get in touch&lt;/a&gt; if you need help with a project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SwiftMessages is distributed under the MIT license. &lt;a href=&#34;https://raw.githubusercontent.com/SwiftKickMobile/SwiftMessages/master/LICENSE.md&#34;&gt;See LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Quick/Quick</title>
    <updated>2022-07-10T01:55:33Z</updated>
    <id>tag:github.com,2022-07-10:/Quick/Quick</id>
    <link href="https://github.com/Quick/Quick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Swift (and Objective-C) testing framework.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;http://f.cl.ly/items/0r1E192C1R0b2g2Q3h2w/QuickLogo_Color.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Quick/Quick/actions/workflows/ci-xcode.yml&#34;&gt;&lt;img src=&#34;https://github.com/Quick/Quick/actions/workflows/ci-xcode.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Quick&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Quick.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Quick&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Quick.svg?sanitize=true&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quick is a behavior-driven development framework for Swift and Objective-C. Inspired by &lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;RSpec&lt;/a&gt;, &lt;a href=&#34;https://github.com/specta/specta&#34;&gt;Specta&lt;/a&gt;, and &lt;a href=&#34;https://github.com/onsi/ginkgo&#34;&gt;Ginkgo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Quick/Assets/master/Screenshots/QuickSpec%20screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Swift&#xA;&#xA;import Quick&#xA;import Nimble&#xA;&#xA;class TableOfContentsSpec: QuickSpec {&#xA;  override func spec() {&#xA;    describe(&#34;the &#39;Documentation&#39; directory&#34;) {&#xA;      it(&#34;has everything you need to get started&#34;) {&#xA;        let sections = Directory(&#34;Documentation&#34;).sections&#xA;        expect(sections).to(contain(&#34;Organized Tests with Quick Examples and Example Groups&#34;))&#xA;        expect(sections).to(contain(&#34;Installing Quick&#34;))&#xA;      }&#xA;&#xA;      context(&#34;if it doesn&#39;t have what you&#39;re looking for&#34;) {&#xA;        it(&#34;needs to be updated&#34;) {&#xA;          let you = You(awesome: true)&#xA;          expect{you.submittedAnIssue}.toEventually(beTruthy())&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nimble&lt;/h4&gt; &#xA;&lt;p&gt;Quick comes together with &lt;a href=&#34;https://github.com/Quick/Nimble&#34;&gt;Nimble&lt;/a&gt; ‚Äî a matcher framework for your tests. You can learn why &lt;code&gt;XCTAssert()&lt;/code&gt; statements make your expectations unclear and how to fix that using Nimble assertions &lt;a href=&#34;https://raw.githubusercontent.com/Quick/Quick/main/Documentation/en-us/NimbleAssertions.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Version&lt;/h2&gt; &#xA;&lt;p&gt;Certain versions of Quick and Nimble only support certain versions of Swift. Depending on which version of Swift your project uses, you should use specific versions of Quick and Nimble. Use the table below to determine which versions of Quick and Nimble are compatible with your project.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Swift version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Quick version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Nimble version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v3.0.0 or later&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v9.0.0 or later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 4.2 / Swift 5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v1.3.2 or later&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v7.3.2 or later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 3 / Swift 4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v1.0.0 or later&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v5.0.0 or later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 2.2 / Swift 2.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v0.9.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v4.1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All documentation can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/Quick/Quick/main/Documentation&#34;&gt;Documentation folder&lt;/a&gt;, including &lt;a href=&#34;https://raw.githubusercontent.com/Quick/Quick/main/Documentation/en-us/InstallingQuick.md&#34;&gt;detailed installation instructions&lt;/a&gt; for CocoaPods, Carthage, Git submodules, and more. For example, you can install Quick and &lt;a href=&#34;https://github.com/Quick/Nimble&#34;&gt;Nimble&lt;/a&gt; using CocoaPods by adding the following to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# Podfile&#xA;&#xA;use_frameworks!&#xA;&#xA;target &#34;MyApp&#34; do&#xA;  # Normal libraries&#xA;&#xA;  abstract_target &#39;Tests&#39; do&#xA;    inherit! :search_paths&#xA;    target &#34;MyAppTests&#34;&#xA;    target &#34;MyAppUITests&#34;&#xA;&#xA;    pod &#39;Quick&#39;&#xA;    pod &#39;Nimble&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Projects using Quick&lt;/h2&gt; &#xA;&lt;p&gt;Over ten-thousand apps use either Quick and Nimble however, as they are not included in the app binary, neither appear in ‚ÄúTop Used Libraries‚Äù blog posts. Therefore, it would be greatly appreciated to remind contributors that their efforts are valued by compiling a list of organizations and projects that use them.&lt;/p&gt; &#xA;&lt;p&gt;Does your organization or project use Quick and Nimble? If yes, &lt;a href=&#34;https://github.com/Quick/Quick/wiki/Projects-using-Quick&#34;&gt;please add your project to the list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who uses Quick&lt;/h2&gt; &#xA;&lt;p&gt;Similar to projects using Quick, it would be nice to hear why people use Quick and Nimble. Are there features you love? Are there features that are just okay? Are there some features we have that no one uses?&lt;/p&gt; &#xA;&lt;p&gt;Have something positive to say about Quick (or Nimble)? If yes, &lt;a href=&#34;https://github.com/Quick/Quick/wiki/Who-uses-Quick&#34;&gt;provide a testimonial here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Quick/Quick/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>