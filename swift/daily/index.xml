<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-27T01:42:56Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>prateek147/DVIA-v2</title>
    <updated>2022-09-27T01:42:56Z</updated>
    <id>tag:github.com,2022-09-27:/prateek147/DVIA-v2</id>
    <link href="https://github.com/prateek147/DVIA-v2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Damn Vulnerable iOS App (DVIA) is an iOS application that is damn vulnerable. Its main goal is to provide a platform to mobile security enthusiasts/professionals or students to test their iOS penetration testing skills in a legal environment. This project is developed and maintained by @prateekg147. The vulnerabilities and solutions covered in t…&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DVIA-v2&lt;/h1&gt; &#xA;&lt;p&gt;DVIA-v2 written in Swift along with additional vulnerabilities&lt;/p&gt; &#xA;&lt;p&gt;Damn Vulnerable iOS App (DVIA) is an iOS application that is damn vulnerable. Its main goal is to provide a platform to mobile security enthusiasts/professionals or students to test their iOS penetration testing skills in a legal environment. This project is developed and maintained by @prateekg147. The vulnerabilities and solutions covered in this app are tested up to iOS 11. The current version is writen in Swift and has the following vulnerabilities.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Local Data Storage&lt;/li&gt; &#xA; &lt;li&gt;Jailbreak Detection&lt;/li&gt; &#xA; &lt;li&gt;Excessive Permissions&lt;/li&gt; &#xA; &lt;li&gt;Runtime Manipulation&lt;/li&gt; &#xA; &lt;li&gt;Anti Anti Hooking/Debugging&lt;/li&gt; &#xA; &lt;li&gt;Binary Protection&lt;/li&gt; &#xA; &lt;li&gt;Touch/Face ID Bypass&lt;/li&gt; &#xA; &lt;li&gt;Phishing&lt;/li&gt; &#xA; &lt;li&gt;Side Channel Data Leakage&lt;/li&gt; &#xA; &lt;li&gt;IPC Issues&lt;/li&gt; &#xA; &lt;li&gt;Broken Cryptography&lt;/li&gt; &#xA; &lt;li&gt;Webview Issues&lt;/li&gt; &#xA; &lt;li&gt;Network Layer Security&lt;/li&gt; &#xA; &lt;li&gt;Application Patching&lt;/li&gt; &#xA; &lt;li&gt;Sensitive Information in Memory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installing DVIA on any iOS device&lt;/h2&gt; &#xA;&lt;p&gt;The best way to install DVIA is using &lt;a href=&#34;www.cydiaimpactor.com/&#xA;&#34;&gt;Cydia Impactor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Steps&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create an Apple ID &lt;a href=&#34;https://appleid.apple.com/account&#34;&gt;https://appleid.apple.com/account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;em&gt;Impactor&lt;/em&gt;, make sure the device you want to install the app on is connected to your computer. Now drag and drop the &lt;em&gt;IPA&lt;/em&gt; file to &lt;em&gt;Impactor&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enter your Apple ID credentials. App will install on the device&lt;/li&gt; &#xA; &lt;li&gt;Go to your device, &lt;em&gt;Settings -&amp;gt; General -&amp;gt; Device Management&lt;/em&gt;. Select the Apple ID you used to install the app. Click on &lt;em&gt;Verify App&lt;/em&gt; under DVIAv2.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Compiling DVIA using Xcode&lt;/h2&gt; &#xA;&lt;h3&gt;Steps&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the DVIA repo , git clone &lt;a href=&#34;https://github.com/prateek147/DVIA-v2&#34;&gt;https://github.com/prateek147/DVIA-v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cd to the project root directory where the &lt;em&gt;Podfile&lt;/em&gt; is present (/DVIA-v2/DVIA-v2). Then run &lt;em&gt;pod install&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;em&gt;DVIA-v2.xcworkspace&lt;/em&gt; file with Xcode. You can now directly run the app on a simulator.&lt;/li&gt; &#xA; &lt;li&gt;For running on the device, go under Project settings in Xcode on the top left, head over to the &lt;em&gt;General&lt;/em&gt; tab and under &lt;em&gt;Signing&lt;/em&gt;, enter credentials for your Apple ID.&lt;/li&gt; &#xA; &lt;li&gt;Now you can build and run the project on the device. You will have to trust the app again by going under Settings -&amp;gt; General -&amp;gt; Device Management.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>appbrewery/Xylophone-iOS13</title>
    <updated>2022-09-27T01:42:56Z</updated>
    <id>tag:github.com,2022-09-27:/appbrewery/Xylophone-iOS13</id>
    <link href="https://github.com/appbrewery/Xylophone-iOS13" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learn to Code While Building Apps - The Complete iOS Development Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appbrewery/Xylophone-iOS13/master/Documentation/AppBreweryBanner.png&#34; alt=&#34;App Brewery Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Xylophone&lt;/h1&gt; &#xA;&lt;h2&gt;Our Goal&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this tutorial is to dive into a simple iOS recipe - how to play sound and use an Apple library called AVFoundation. The most important skill of a great programmer is being able to solve your own problems. We’ll do that by exploring StackOverflow, Apple Documentation and learning how to search for solutions effectively. By learning to use these tools, you’ll be able to start adding custom features to an app and get it to do what you want it to.&lt;/p&gt; &#xA;&lt;h2&gt;What you will create&lt;/h2&gt; &#xA;&lt;p&gt;You will be making your first musical instrument! Music apps are so popular on the App Store that they even get their own category. So in this module, we’re going to make a colourful XyloPhone app. Get it? Ok, the jokes are bad, but remember, I only wrote the good ones...&lt;/p&gt; &#xA;&lt;h2&gt;What you will learn&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to play sound using AVFoundation and AVAudioPlayer.&lt;/li&gt; &#xA; &lt;li&gt;Understand Apple documentation and how to use StackOverflow.&lt;/li&gt; &#xA; &lt;li&gt;Functions and methods in Swift.&lt;/li&gt; &#xA; &lt;li&gt;Data types.&lt;/li&gt; &#xA; &lt;li&gt;Swift loops.&lt;/li&gt; &#xA; &lt;li&gt;Variable scope.&lt;/li&gt; &#xA; &lt;li&gt;The ViewController lifecycle.&lt;/li&gt; &#xA; &lt;li&gt;Error handling in Swift.&lt;/li&gt; &#xA; &lt;li&gt;Code refactoring.&lt;/li&gt; &#xA; &lt;li&gt;Basic debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Replacement Code&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;import UIKit&#xA;import AVFoundation&#xA;&#xA;class ViewController: UIViewController {&#xA;    &#xA;    var player: AVAudioPlayer!&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;    }&#xA;&#xA;    @IBAction func keyPressed(_ sender: UIButton) {&#xA;        playSound()&#xA;    }&#xA;    &#xA;    func playSound() {&#xA;        let url = Bundle.main.url(forResource: &#34;C&#34;, withExtension: &#34;wav&#34;)&#xA;        player = try! AVAudioPlayer(contentsOf: url!)&#xA;        player.play()&#xA;                &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is a companion project to The App Brewery&#39;s Complete App Development Bootcamp, check out the full course at &lt;a href=&#34;https://www.appbrewery.co/&#34;&gt;www.appbrewery.co&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/appbrewery/Xylophone-iOS13/master/Documentation/readme-end-banner.png&#34; alt=&#34;End Banner&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>