<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-06T01:35:37Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>livekit/client-sdk-swift</title>
    <updated>2025-01-06T01:35:37Z</updated>
    <id>tag:github.com,2025-01-06:/livekit/client-sdk-swift</id>
    <link href="https://github.com/livekit/client-sdk-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LiveKit Swift Client SDK. Easily build live audio or video experiences on iOS, macOS, tvOS, and visionOS.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;/.github/banner_dark.png&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;/.github/banner_light.png&#34;&gt; &#xA; &lt;img style=&#34;width:100%;&#34; alt=&#34;The LiveKit icon, the name of the repository and some sample code in the background.&#34; src=&#34;https://raw.githubusercontent.com/livekit/client-sdk-swift/main/.github/banner_light.png&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;!--END_BANNER_IMAGE--&gt; &#xA;&lt;h1&gt;iOS/macOS Swift SDK for LiveKit&lt;/h1&gt; &#xA;&lt;!--BEGIN_DESCRIPTION--&gt; &#xA;&lt;p&gt;Use this SDK to add realtime video, audio and data features to your Swift app. By connecting to &lt;a href=&#34;https://livekit.io/&#34;&gt;LiveKit&lt;/a&gt; Cloud or a self-hosted server, you can quickly build applications such as multi-modal AI, live streaming, or video calls with just a few lines of code.&lt;/p&gt; &#xA;&lt;!--END_DESCRIPTION--&gt; &#xA;&lt;h2&gt;Docs &amp;amp; Example app&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Version 2 of the Swift SDK contains breaking changes from Version 1. Read the &lt;a href=&#34;https://docs.livekit.io/guides/migrate-from-v1/&#34;&gt;migration guide&lt;/a&gt; for a detailed overview of what has changed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Docs and guides are at &lt;a href=&#34;https://docs.livekit.io&#34;&gt;https://docs.livekit.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is full source code of a &lt;a href=&#34;https://github.com/livekit/client-example-swift&#34;&gt;iOS/macOS Swift UI Example App&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For minimal examples view this repo ðŸ‘‰ &lt;a href=&#34;https://github.com/livekit/client-example-collection-swift&#34;&gt;Swift SDK Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;LiveKit for Swift is available as a Swift Package.&lt;/p&gt; &#xA;&lt;h3&gt;Package.swift&lt;/h3&gt; &#xA;&lt;p&gt;Add the dependency and also to your target&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;  ...&#xA;  dependencies: [&#xA;    .package(name: &#34;LiveKit&#34;, url: &#34;https://github.com/livekit/client-sdk-swift.git&#34;, .upToNextMajor(&#34;2.0.19&#34;)),&#xA;  ],&#xA;  targets: [&#xA;    .target(&#xA;      name: &#34;MyApp&#34;,&#xA;      dependencies: [&#34;LiveKit&#34;]&#xA;    )&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;XCode&lt;/h3&gt; &#xA;&lt;p&gt;Go to Project Settings -&amp;gt; Swift Packages.&lt;/p&gt; &#xA;&lt;p&gt;Add a new package and enter: &lt;code&gt;https://github.com/livekit/client-sdk-swift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;iOS Usage&lt;/h2&gt; &#xA;&lt;p&gt;LiveKit provides an UIKit based &lt;code&gt;VideoView&lt;/code&gt; class that renders video tracks. Subscribed audio tracks are automatically played.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import LiveKit&#xA;import UIKit&#xA;&#xA;class RoomViewController: UIViewController {&#xA;&#xA;    lazy var room = Room(delegate: self)&#xA;&#xA;    lazy var remoteVideoView: VideoView = {&#xA;        let videoView = VideoView()&#xA;        view.addSubview(videoView)&#xA;        // Additional initialization ...&#xA;        return videoView&#xA;    }()&#xA;&#xA;    lazy var localVideoView: VideoView = {&#xA;        let videoView = VideoView()&#xA;        view.addSubview(videoView)&#xA;        // Additional initialization ...&#xA;        return videoView&#xA;    }()&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        view.backgroundColor = .white&#xA;&#xA;        let url = &#34;ws://your_host&#34;&#xA;        let token = &#34;your_jwt_token&#34;&#xA;&#xA;        Task {&#xA;            do {&#xA;                try await room.connect(url: url, token: token)&#xA;                // Connection successful...&#xA;&#xA;                // Publishing camera &amp;amp; mic...&#xA;                try await room.localParticipant.setCamera(enabled: true)&#xA;                try await room.localParticipant.setMicrophone(enabled: true)&#xA;            } catch {&#xA;                // Failed to connect&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;extension RoomViewController: RoomDelegate {&#xA;&#xA;    func room(_: Room, participant _: LocalParticipant, didPublishTrack publication: LocalTrackPublication) {&#xA;        guard let track = publication.track as? VideoTrack else { return }&#xA;        DispatchQueue.main.async {&#xA;            self.localVideoView.track = track&#xA;        }&#xA;    }&#xA;&#xA;    func room(_: Room, participant _: RemoteParticipant, didSubscribeTrack publication: RemoteTrackPublication) {&#xA;        guard let track = publication.track as? VideoTrack else { return }&#xA;        DispatchQueue.main.async {&#xA;            self.remoteVideoView.track = track&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Screen Sharing&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/livekit/client-sdk-swift/wiki/iOS-Screen-Sharing&#34;&gt;iOS Screen Sharing instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integration Notes&lt;/h2&gt; &#xA;&lt;h3&gt;Thread safety&lt;/h3&gt; &#xA;&lt;p&gt;Since &lt;code&gt;VideoView&lt;/code&gt; is a UI component, all operations (read/write properties etc) must be performed from the &lt;code&gt;main&lt;/code&gt; thread.&lt;/p&gt; &#xA;&lt;p&gt;Other core classes can be accessed from any thread.&lt;/p&gt; &#xA;&lt;p&gt;Delegates will be called on the SDK&#39;s internal thread. Make sure any access to your app&#39;s UI elements are from the main thread, for example by using &lt;code&gt;@MainActor&lt;/code&gt; or &lt;code&gt;DispatchQueue.main.async&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Memory management&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to use &lt;strong&gt;weak var&lt;/strong&gt; when storing references to objects created and managed by the SDK, such as &lt;code&gt;Participant&lt;/code&gt;, &lt;code&gt;TrackPublication&lt;/code&gt; etc. These objects are invalid when the &lt;code&gt;Room&lt;/code&gt; disconnects, and will be released by the SDK. Holding strong reference to these objects will prevent releasing &lt;code&gt;Room&lt;/code&gt; and other internal objects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;VideoView.track&lt;/code&gt; property does not hold strong reference, so it&#39;s not required to set it to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;AudioSession management&lt;/h3&gt; &#xA;&lt;p&gt;LiveKit will automatically manage the underlying &lt;code&gt;AVAudioSession&lt;/code&gt; while connected. The session will be set to &lt;code&gt;playback&lt;/code&gt; category by default. When a local stream is published, it&#39;ll be switched to &lt;code&gt;playAndRecord&lt;/code&gt;. In general, it&#39;ll pick sane defaults and do the right thing.&lt;/p&gt; &#xA;&lt;p&gt;However, if you&#39;d like to customize this behavior, you would override &lt;code&gt;AudioManager.customConfigureAudioSessionFunc&lt;/code&gt; to manage the underlying session on your own. See &lt;a href=&#34;https://github.com/livekit/client-sdk-swift/raw/1f5959f787805a4b364f228ccfb413c1c4944748/Sources/LiveKit/Track/AudioManager.swift#L153&#34;&gt;example here&lt;/a&gt; for the default behavior.&lt;/p&gt; &#xA;&lt;h3&gt;Integration with CallKit&lt;/h3&gt; &#xA;&lt;p&gt;To integrate with CallKit for background-triggered incoming calls, LiveKit&#39;s audio session must be synchronized with CallKit&#39;s audio session:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;import LiveKitWebRTC&lt;/code&gt; to your CallProvider file.&lt;/li&gt; &#xA; &lt;li&gt;In your &lt;code&gt;CXProviderDelegate&lt;/code&gt; implementation, add the following:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func provider(_ provider: CXProvider, didActivate audioSession: AVAudioSession){&#xA;    LKRTCAudioSession.sharedInstance().audioSessionDidActivate(audioSession)&#xA;    // ...&#xA;}&#xA;func provider(_ provider: CXProvider, didDeactivate audioSession: AVAudioSession) {&#xA;    LKRTCAudioSession.sharedInstance().audioSessionDidDeactivate(audioSession)&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS Simulator limitations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Publishing the camera track is not supported by iOS Simulator.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ScrollView performance&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to turn off rendering of &lt;code&gt;VideoView&lt;/code&gt;s that scroll off the screen and isn&#39;t visible by setting &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;isEnabled&lt;/code&gt; property and &lt;code&gt;true&lt;/code&gt; when it will re-appear to save CPU resources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;UICollectionViewDelegate&lt;/code&gt;&#39;s &lt;code&gt;willDisplay&lt;/code&gt; / &lt;code&gt;didEndDisplaying&lt;/code&gt; has been reported to be unreliable for this purpose. Specifically, in some iOS versions &lt;code&gt;didEndDisplaying&lt;/code&gt; could get invoked even when the cell is visible.&lt;/p&gt; &#xA;&lt;p&gt;The following is an alternative method to using &lt;code&gt;willDisplay&lt;/code&gt; / &lt;code&gt;didEndDisplaying&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// 1. define a weak-reference set for all cells&#xA;private var allCells = NSHashTable&amp;lt;ParticipantCell&amp;gt;.weakObjects()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// in UICollectionViewDataSource...&#xA;public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&amp;gt; UICollectionViewCell {&#xA;&#xA;    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ParticipantCell.reuseIdentifier, for: indexPath)&#xA;&#xA;    if let cell = cell as? ParticipantCell {&#xA;        // 2. keep weak reference to the cell&#xA;        allCells.add(cell)&#xA;&#xA;        // configure cell etc...&#xA;    }&#xA;&#xA;    return cell&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// 3. define a func to re-compute and update isEnabled property for cells that visibility changed&#xA;func reComputeVideoViewEnabled() {&#xA;&#xA;    let visibleCells = collectionView.visibleCells.compactMap { $0 as? ParticipantCell }&#xA;    let offScreenCells = allCells.allObjects.filter { !visibleCells.contains($0) }&#xA;&#xA;    for cell in visibleCells.filter({ !$0.videoView.isEnabled }) {&#xA;        print(&#34;enabling cell#\(cell.hashValue)&#34;)&#xA;        cell.videoView.isEnabled = true&#xA;    }&#xA;&#xA;    for cell in offScreenCells.filter({ $0.videoView.isEnabled }) {&#xA;        print(&#34;disabling cell#\(cell.hashValue)&#34;)&#xA;        cell.videoView.isEnabled = false&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// 4. set a timer to invoke the func&#xA;self.timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true, block: { [weak self] _ in&#xA;    self?.reComputeVideoViewEnabled()&#xA;})&#xA;&#xA;// alternatively, you can call `reComputeVideoViewEnabled` whenever cell visibility changes (such as scrollViewDidScroll(_:)),&#xA;// but this will be harder to track all cases such as cell reload etc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the full example, see ðŸ‘‰ &lt;a href=&#34;https://github.com/livekit/client-example-collection-swift/tree/main/uikit-minimal&#34;&gt;UIKit Minimal Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Frequently asked questions&lt;/h1&gt; &#xA;&lt;h3&gt;How to publish camera in 60 FPS ?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;LocalVideoTrack&lt;/code&gt; by calling &lt;code&gt;LocalVideoTrack.createCameraTrack(options: CameraCaptureOptions(fps: 60))&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Publish with &lt;code&gt;LocalParticipant.publish(videoTrack: track, publishOptions: VideoPublishOptions(encoding: VideoEncoding(maxFps: 60)))&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;h3&gt;Avoid crashes on macOS Catalina&lt;/h3&gt; &#xA;&lt;p&gt;If your app is targeting macOS Catalina, make sure to do the following to avoid crash (ReplayKit not found):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Explicitly add &#34;ReplayKit.framework&#34; to the Build Phases &amp;gt; Link Binary with Libraries section&lt;/li&gt; &#xA; &lt;li&gt;Set it to Optional&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;752&#34; alt=&#34;replykit&#34; src=&#34;https://user-images.githubusercontent.com/548776/201249295-51d9cb76-32bd-4b10-9f4c-02951d1b2edb.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I am not sure why this is required for ReplayKit at the moment.&lt;/li&gt; &#xA; &lt;li&gt;If you are targeting macOS 11.0+, this is not required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting help / Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please join us on &lt;a href=&#34;https://livekit.io/join-slack&#34;&gt;Slack&lt;/a&gt; to get help from our devs / community members. We welcome your contributions(PRs) and details can be discussed there.&lt;/p&gt; &#xA;&lt;!--BEGIN_REPO_NAV--&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&lt;table&gt; &#xA; &lt;thead&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th colspan=&#34;2&#34;&gt;LiveKit Ecosystem&lt;/th&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Realtime SDKs&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/livekit/components-js&#34;&gt;React Components&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/client-sdk-js&#34;&gt;Browser&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/components-swift&#34;&gt;Swift Components&lt;/a&gt; Â· &lt;b&gt;iOS/macOS/visionOS&lt;/b&gt; Â· &lt;a href=&#34;https://github.com/livekit/client-sdk-android&#34;&gt;Android&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/client-sdk-flutter&#34;&gt;Flutter&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/client-sdk-react-native&#34;&gt;React Native&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/rust-sdks&#34;&gt;Rust&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/node-sdks&#34;&gt;Node.js&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/python-sdks&#34;&gt;Python&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/client-sdk-unity-web&#34;&gt;Unity (web)&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/client-sdk-unity&#34;&gt;Unity (beta)&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Server APIs&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/livekit/node-sdks&#34;&gt;Node.js&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/server-sdk-go&#34;&gt;Golang&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/server-sdk-ruby&#34;&gt;Ruby&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/server-sdk-kotlin&#34;&gt;Java/Kotlin&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/python-sdks&#34;&gt;Python&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/rust-sdks&#34;&gt;Rust&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/agence104/livekit-server-sdk-php&#34;&gt;PHP (community)&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Agents Frameworks&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/livekit/agents&#34;&gt;Python&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/agent-playground&#34;&gt;Playground&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Services&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/livekit/livekit&#34;&gt;LiveKit server&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/egress&#34;&gt;Egress&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/ingress&#34;&gt;Ingress&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/sip&#34;&gt;SIP&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Resources&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.livekit.io&#34;&gt;Docs&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit-examples&#34;&gt;Example apps&lt;/a&gt; Â· &lt;a href=&#34;https://livekit.io/cloud&#34;&gt;Cloud&lt;/a&gt; Â· &lt;a href=&#34;https://docs.livekit.io/home/self-hosting/deployment&#34;&gt;Self-hosting&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/livekit/livekit-cli&#34;&gt;CLI&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--END_REPO_NAV--&gt;</summary>
  </entry>
</feed>