<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-14T01:56:48Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nalexn/ViewInspector</title>
    <updated>2022-08-14T01:56:48Z</updated>
    <id>tag:github.com,2022-08-14:/nalexn/ViewInspector</id>
    <link href="https://github.com/nalexn/ViewInspector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Runtime introspection and unit testing of SwiftUI views&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;ViewInspector üïµÔ∏è‚Äç‚ôÇÔ∏è for SwiftUI&lt;/h1&gt; &#xA;&lt;span align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-lightgrey&#34; alt=&#34;Platform&#34;&gt; &lt;a href=&#34;https://travis-ci.com/nalexn/ViewInspector&#34;&gt;&lt;img src=&#34;https://travis-ci.com/nalexn/ViewInspector.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/nalexn/ViewInspector&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/nalexn/ViewInspector/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/span&gt; &#xA;&lt;p&gt;&lt;strong&gt;ViewInspector&lt;/strong&gt; is a library for unit testing SwiftUI views. It allows for traversing a view hierarchy at runtime providing direct access to the underlying &lt;code&gt;View&lt;/code&gt; structs.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;SwiftUI view is a function of state. We could provide it with the input, but were unable to verify the output... Until now!&lt;/p&gt; &#xA;&lt;h2&gt;Helpful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/master/guide.md&#34;&gt;Inspection guide&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/master/readiness.md&#34;&gt;SwiftUI API coverage&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;h3&gt;1. Search the view of a specific type or condition&lt;/h3&gt; &#xA;&lt;p&gt;Use one of the &lt;code&gt;find&lt;/code&gt; functions to quickly locate a specific view or assert there are none of such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try sut.inspect().find(button: &#34;Back&#34;)&#xA;&#xA;try sut.inspect().findAll(ViewType.Text.self,&#xA;                          where: { try $0.attributes().isBold() })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/master/guide.md#dynamic-query-with-find&#34;&gt;this section&lt;/a&gt; in the guide for the reference.&lt;/p&gt; &#xA;&lt;h3&gt;2. Read the inner state of the standard views&lt;/h3&gt; &#xA;&lt;p&gt;Standard SwiftUI views are no longer a black box:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sut = Text(&#34;Completed by \(72.51, specifier: &#34;%.1f&#34;)%&#34;).font(.caption)&#xA;&#xA;let string = try sut.inspect().text().string(locale: Locale(identifier: &#34;es&#34;))&#xA;XCTAssertEqual(string, &#34;Completado por 72,5%&#34;)&#xA;&#xA;XCTAssertEqual(try sut.inspect().text().attributes().font(), .caption)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each view has its own set of inspectable parameters, you can refer to the &lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/master/readiness.md&#34;&gt;API coverage&lt;/a&gt; document to see what&#39;s available for a particular SwiftUI view.&lt;/p&gt; &#xA;&lt;h3&gt;3. Verify your custom view&#39;s state&lt;/h3&gt; &#xA;&lt;p&gt;Obtain a copy of your custom view with actual state and references from the hierarchy of any depth:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sut = try view.inspect().find(CustomView.self).actualView()&#xA;XCTAssertTrue(sut.viewModel.isUserLoggedIn)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The library can operate with various types of the view&#39;s state, such as &lt;code&gt;@Binding&lt;/code&gt;, &lt;code&gt;@State&lt;/code&gt;, &lt;code&gt;@ObservedObject&lt;/code&gt; and &lt;code&gt;@EnvironmentObject&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;4. Trigger side effects&lt;/h3&gt; &#xA;&lt;p&gt;You can simulate user interaction by programmatically triggering system-controls callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try sut.inspect().find(button: &#34;Close&#34;).tap()&#xA;&#xA;let list = try view.inspect().list()&#xA;try list[5].view(RowItemView.self).callOnAppear()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The library provides helpers for writing asynchronous tests for views with callbacks.&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;Which views and modifiers are supported?&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/master/readiness.md&#34;&gt;API coverage&lt;/a&gt;. There is currently almost full support for SwiftUI v1 API, the v2 and v3 support is under active development.&lt;/p&gt; &#xA;&lt;h3&gt;Is it using private APIs?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ViewInspector&lt;/strong&gt; is using official Swift reflection API to dissect the view structures. So it&#39;ll be production-friendly even if you could somehow ship the test target to the production.&lt;/p&gt; &#xA;&lt;h3&gt;How do I add it to my Xcode project?&lt;/h3&gt; &#xA;&lt;p&gt;Assure you&#39;re adding the framework to your unit-test target. &lt;strong&gt;Do NOT&lt;/strong&gt; add it to the main build target.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;https://github.com/nalexn/ViewInspector&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;github &#34;nalexn/ViewInspector&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;pod &#39;ViewInspector&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How do I use it in my project?&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/master/guide.md&#34;&gt;Inspection guide&lt;/a&gt;. You can also check out my other &lt;a href=&#34;https://github.com/nalexn/clean-architecture-swiftui&#34;&gt;project&lt;/a&gt; that harnesses the &lt;strong&gt;ViewInspector&lt;/strong&gt; for testing the entire UI.&lt;/p&gt; &#xA;&lt;h3&gt;Other questions, concerns or suggestions?&lt;/h3&gt; &#xA;&lt;p&gt;Ping me on &lt;a href=&#34;https://twitter.com/nallexn&#34;&gt;Twitter&lt;/a&gt; or just submit an issue or a pull request on Github.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nalexn.github.io/?utm_source=nalexn_github&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/blog-github-blue&#34; alt=&#34;blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://venmo.com/nallexn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%8D%BA-Venmo-brightgreen&#34; alt=&#34;venmo&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>