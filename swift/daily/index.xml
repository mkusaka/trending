<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-17T01:47:04Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ailtonvivaz/swift-request</title>
    <updated>2023-06-17T01:47:04Z</updated>
    <id>tag:github.com,2023-06-17:/ailtonvivaz/swift-request</id>
    <link href="https://github.com/ailtonvivaz/swift-request" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftRequest&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swiftpackageindex.com/ailtonvivaz/swift-request&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Failtonvivaz%2Fswift-request%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/ailtonvivaz/swift-request&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Failtonvivaz%2Fswift-request%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SwiftRequest is a lightweight, type-safe HTTP client for Swift, streamlining the construction and execution of HTTP requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ailtonvivaz/swift-request/main/#overview&#34;&gt;Overview&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ailtonvivaz/swift-request/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ailtonvivaz/swift-request/main/#supported-http-methods&#34;&gt;Supported HTTP Methods&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ailtonvivaz/swift-request/main/#parameters&#34;&gt;Parameters&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/ailtonvivaz/swift-request/main/#license&#34;&gt;License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;SwiftRequest abstracts away the repetitive boilerplate code that&#39;s typically associated with setting up HTTP requests in Swift. It utilizes macros introduced in Swift 5.9, which can be associated with specific declarations to enhance and extend their functionality.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a quick look at how you&#39;d define a service to fetch quotes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Service(resource: &#34;quotes&#34;)&#xA;protocol QuoteService {&#xA;    @GET(&#34;random&#34;)&#xA;    func getRandomQuotes(@QueryParam limit: Int?) async throws -&amp;gt; [Quote]&#xA;    &#xA;    @GET(&#34;{id}&#34;)&#xA;    func getQuote(@Path by id: String) async throws -&amp;gt; Quote&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make a request using SwiftRequest, you just need to create an instance of the service and call the method you want to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let service = QuoteServiceImpl(baseURL: &#34;https://api.quotable.io&#34;)&#xA;let quotes = try await service.getRandomQuotes(limit: 5)&#xA;let quote = try await service.getQuote(by: &#34;69Ldsxcdm-&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Xcode&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It requires Xcode 15 or later.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In Xcode, go to &lt;code&gt;File &amp;gt; Add Package Dependency&lt;/code&gt; and paste the repository URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/ailtonvivaz/swift-request.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/ailtonvivaz/swift-request.git&#34;, from: &#34;0.1.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then add the dependency to your targets.&lt;/p&gt; &#xA;&lt;h2&gt;Supported HTTP Methods&lt;/h2&gt; &#xA;&lt;p&gt;SwiftRequest offers support for the following HTTP methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@GET&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@POST&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@PUT&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@PATCH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@DELETE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@HEAD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@OPTIONS&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each of these methods accepts a string for the request path (optional). You can use just &lt;code&gt;@GET&lt;/code&gt; or &lt;code&gt;@GET(&#34;path&#34;)&lt;/code&gt; if you want to specify the path.&lt;/p&gt; &#xA;&lt;h2&gt;Parameters&lt;/h2&gt; &#xA;&lt;p&gt;SwiftRequest provides several parameters that can be used in conjunction with the HTTP methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@Header&lt;/code&gt;: Use this property wrapper to define a request header. The header name is optional. If it&#39;s not provided, SwiftRequest uses the property name as the header name. &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func getQuote(@Header(&#34;Cache-Control&#34;) cacheControl: String) async throws -&amp;gt; Quote&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@QueryParam&lt;/code&gt;: Use this property wrapper to define a URL query parameter. The query parameter name is optional. If it&#39;s not provided, SwiftRequest uses the property name as the query parameter name. &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func getRandomQuotes(@QueryParam limit: Int?) async throws -&amp;gt; [Quote]&#xA;&lt;/code&gt;&lt;/pre&gt; In this case, the limit parameter will be used as the query parameter name. Example: &lt;code&gt;https://api.quotable.io/quotes/random?limit=10&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@Path&lt;/code&gt;: Use this property wrapper to define a path parameter in the URL. The path parameter name is optional. If it&#39;s not provided, SwiftRequest uses the property name as the path parameter name. &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@GET(&#34;{id}&#34;)&#xA;func getQuote(@Path by id: String) async throws -&amp;gt; Quote&#xA;&lt;/code&gt;&lt;/pre&gt; In this case, the id parameter will be used as the path parameter name. Example: &lt;code&gt;https://api.quotable.io/quotes/123&lt;/code&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It&#39;s important to note that the path parameter name must match the name of the property that&#39;s being used to define the path parameter and need to be write in the path between curly braces.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@Body&lt;/code&gt;: Use this property wrapper to define the request body. This wrapper can only be used with the &lt;code&gt;@POST&lt;/code&gt;, &lt;code&gt;@PUT&lt;/code&gt;, &lt;code&gt;@PATCH&lt;/code&gt;, and &lt;code&gt;@DELETE&lt;/code&gt; HTTP methods. &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@POST(&#34;quotes&#34;)&#xA;func createQuote(@Body quote: Quote) async throws -&amp;gt; Quote&#xA;&lt;/code&gt;&lt;/pre&gt; Here, the quote parameter will be used as the request body, and the &lt;code&gt;Content-Type: application/json&lt;/code&gt; header will be automatically added to the request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@FormField&lt;/code&gt;: Use this property wrapper to define a field parameter in the request body. This wrapper can only be used with the &lt;code&gt;@POST&lt;/code&gt;, &lt;code&gt;@PUT&lt;/code&gt;, &lt;code&gt;@PATCH&lt;/code&gt;, and &lt;code&gt;@DELETE&lt;/code&gt; HTTP methods. &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@POST(&#34;quotes&#34;)&#xA;func createQuote(@FormField(&#34;author&#34;) authorName: String, @FormField content: String) async throws -&amp;gt; Quote&#xA;&lt;/code&gt;&lt;/pre&gt; In this case, the author and content parameters will be used as field parameters in the request body, and the &lt;code&gt;Content-Type: application/x-www-form-urlencoded&lt;/code&gt; header will be automatically added to the request. Example: &lt;code&gt;author=John%20Doe&amp;amp;content=Hello%20World&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SwiftRequest is available under the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/ailtonvivaz/swift-request/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>robb/ShaderBugs</title>
    <updated>2023-06-17T01:47:04Z</updated>
    <id>tag:github.com,2023-06-17:/robb/ShaderBugs</id>
    <link href="https://github.com/robb/ShaderBugs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Some isssues I ran into with SwiftUI.Shader&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/robb/ShaderBugs/main/img/screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Issues found so far (see &lt;a href=&#34;https://raw.githubusercontent.com/robb/ShaderBugs/main/ShaderBugs/ContentView.swift&#34;&gt;here&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Passing in an additional texture fails silently (distortion effect) or breaks the ability to sample the layer (layer effect).&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;The documentation on &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/shader/argument/image(_:)&#34;&gt;&lt;code&gt;Shader.Argument.image&lt;/code&gt;&lt;/a&gt; states:&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;Currently only one image parameter is supported per Shader instance.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;p&gt;However, it&#39;s unclear to me if that would include the &lt;code&gt;SwiftUI::Layer&lt;/code&gt; in the layer effect case?&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After a certain number (or size?) of arguments, shaders fail silently.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;API limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;I found no way to turn a dynamically compiled &lt;code&gt;MTLLibrary&lt;/code&gt; into a &lt;code&gt;ShaderLibrary&lt;/code&gt;. There is &lt;code&gt;ShaderLibrary(data:)&lt;/code&gt; but it&#39;s unclear to me where this data would come from, other than disk.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run-time errors or at least console logs for argument mismatch would be highly appreciated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I found no way to sample what&#39;s behind the view to build e.g. custom a &lt;code&gt;Material&lt;/code&gt;-like effect. There&#39;s ways to work around the limitation by installing the effect on the nearst common ancestor but that seems inefficient?&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>