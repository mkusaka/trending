<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:59:13Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GetStream/purposeful-ios-animations</title>
    <updated>2022-08-17T01:59:13Z</updated>
    <id>tag:github.com,2022-08-17:/GetStream/purposeful-ios-animations</id>
    <link href="https://github.com/GetStream/purposeful-ios-animations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples of animations we found meaningful and useful on iOS. Each of the animations here was cloned with SwiftUI. Have you seen an app animation you love to rebuild and add to this repo?, contact [@amos_gyamfi](https://twitter.com/amos_gyamfi) and [@stefanjblos](https://twitter.com/stefanjblos) on Twitter.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Purposeful iOS Animations&lt;/h2&gt; &#xA;&lt;p&gt;Examples of animations we found to be meaningful and useful on iOS. We created all with SwiftUI. Grab the Xcode project or use this repo as your source of inspiration for SwiftUI animations for iOS. Have you seen an app animation you love to rebuild and add to this repo?, contact &lt;a href=&#34;https://twitter.com/amos_gyamfi&#34;&gt;@amos_gyamfi&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/stefanjblos&#34;&gt;@stefanjblos&lt;/a&gt; on Twitter.&lt;/p&gt; &#xA;&lt;h2&gt;These animations were used for the conference talk, &#34;&lt;strong&gt;Animations Are Cool, Right?&lt;/strong&gt;&#34; by Amos &amp;amp; Stefan at &lt;a href=&#34;https://swiftconf.com/#/&#34;&gt;Swift Conf 2022&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Learn to create meaningful and purposeful iOS/SwiftUI animations&lt;/h3&gt; &#xA;&lt;h2&gt;THE MEANING AND PURPOSE OF iOS ANIMATIONS&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/DelightAndWhimsy&#34;&gt;Delight and Whimsy&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Delight and Whimsy&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/DelightAndWhimsy/DuoLingoAnimations/SpringyDuoGetStarted.swift&#34;&gt;Springy Duo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Making the resting state bouncy makes the animation more fun.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/springyDuo.gif&#34; alt=&#34;Duolingo Get Started &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/DelightAndWhimsy/DuoLingoAnimations/DuoGetStarted.swift&#34;&gt;Duolingo Get Started&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes, you can animate things just for fun and whimsy. The Duolingo getstarted animation makes it fun and delightful to get started to use the app. The playful animation here can help Duolingo win users over other language learning apps.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/duoGetstarted.gif&#34; alt=&#34;Duolingo Get Started &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/DelightAndWhimsy/DuoLingoAnimations/DuoLoading.swift&#34;&gt;Duolingo Custom Loading&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;System-provided loading indicators can sometimes feel out of context. So, create custom iOS (SwiftUI) loading animations to match your brand style and provide immersive UX like what Duolingo did for content loading&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/duolingoLoading.gif&#34; alt=&#34;Duolingo Custom Loading&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/StateChange&#34;&gt;State Change&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; State Change&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/StateChange/HamburgerToClose.swift&#34;&gt;Menu to close&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Animation can be used appropriately to indicate that a UI element has changed to a different state. For example, Morphing a hamburger menu seamlessly into a close icon. This communicates the difference between the menu and close/cancel modes. It creates a bouncy hamburger menu to close icon transition&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/menuToClose.gif&#34; alt=&#34;Menu to close &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/Attention&#34;&gt;Attention&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Attention&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/Attention/DoubleClickToInstall.swift&#34;&gt;Double click to install&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS AppStore (Double-Click to Install): A great example of attracting usersâ€™ attention using animation.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/dbClickInstall.gif&#34; alt=&#34;Double click to install &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/Attention/SlideToPowerOff.swift&#34;&gt;Slide to power off&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When used in a subtle way, it can invite users to interact with it. For example, iOS slide to power off.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/swipeToPowerOff.gif&#34; alt=&#34;Slide to power off &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/GuideUsers&#34;&gt;Guide Users&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Guide Users&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/GuideUsers/HowToSetupFaceID.swift&#34;&gt;How to set up FaceID&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use animation to communicate and demonstrate. It can be used to show status information. This is a great way to show how things change over time. For example, what will happen when a user initiates an action?. Animation can also be used to provide feedback, or guide users - Describe what people need to do next. Example: How to setup FaceID.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/howToSetUpFaceID.gif&#34; alt=&#34;How to set up FaceID &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/GuideUsers/CalmBreatheAnimation.swift&#34;&gt;Breath Animation: Calm App&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;In guided meditation, animations are normally used to guide users to complete tasks.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/calmBreath.gif&#34; alt=&#34;Breath Animation: Calm App &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/GuideUsers/FernBreathe.swift&#34;&gt;Fern Breath&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Here, the animation is used to give instructions to users about how to inhale and exhale.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/fernBreath.gif&#34; alt=&#34;Fern Breathe &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/GuideUsers/JustBreathe&#34;&gt;Just Breath &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Similaly, this animation guides users perfectly to breathe in and out.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/justBreath.gif&#34; alt=&#34;Just Breath &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/FeedbackAndHinting&#34;&gt;Feedback and Hinting&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Feedback and Hinting&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/FeedbackAndHinting/StreamLaunchscreenAnimation.swift&#34;&gt;Stream Loading&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;System-provided loading indicators can sometimes feel out of context. So, create custom iOS (SwiftUI) loading animations to match your brand style and provide immersive UX like what Stream did for app launching&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/streamLoading.gif&#34; alt=&#34;Stream Loading &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/FeedbackAndHinting/AnimatedPlaceHolder.swift&#34;&gt;Animated Placeholders&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shimmering: FaceBook app, Slack, Twitter leverage animations for usability, and give hints about what is happening.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/animatedPlaceholder.gif&#34; alt=&#34;Animated Placeholders &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/FeedbackAndHinting/TypingIndicatorsInChat.swift&#34;&gt;Turn-taking in chat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Emulate turn-taking: Typing indicators in chat messaging apps. Leverage animations for usability, and give hints about what is happening.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/typingIndicators.gif&#34; alt=&#34;Turn-taking in chat &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/FeedbackAndHinting/DisapprovingShake.swift&#34;&gt;Disapproving Shake &lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use animation to communicate feedback. For example, the disapproving shake of FaceID signifies the need to feel ok and try again.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/disApprovingShake.gif&#34; alt=&#34;Disapproving Shake &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/AugmentFeeling&#34;&gt;Augment Feeling/Emotion&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Augment Feeling/Emotion&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/AugmentFeeling/TwitterLikeReaction&#34;&gt;Twitter Like Reaction&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A great example of using animation to allow users express how they feel in different ways.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/twitterLike.gif&#34; alt=&#34;Twitter Like Reaction &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/AugmentFeeling/MessengerReactions&#34;&gt;Messenger Reaction&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Facebook Messenger Reactions Animation: A great example of using animation to allow users express how they feel in different ways.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/messengerReaction.gif&#34; alt=&#34;Messenger Reaction &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GetStream/purposeful-ios-animations/main/#&#34;&gt;YouTube Thumbnail Animation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Will be added soon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GetStream/purposeful-ios-animations/main/%F0%9F%91%8D&#34; alt=&#34;YouTube Thumbnail Animation &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/EspressGratitude/MediumClapReaction&#34;&gt;Express Gratitude&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Express Gratitude&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/EspressGratitude/MediumClapReaction&#34;&gt;Express Gratitude&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expressing gratitude. For example, Mediumâ€™s Cumulative Clap Reaction&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/expressGratitude.gif&#34; alt=&#34;Express Gratitude &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/IntrinsicMotivation&#34;&gt;Intrinsic Motivation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Intrinsic Motivation&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/IntrinsicMotivation&#34;&gt;Intrinsic Motivation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Intrinsic motivation (mostly in gaming apps.). For example, showing confetti or fireworks animation after users achieve something great. This encourages users intrinsically to perform their goals when using your app. Duolingo does a great job to display fireworks once you complete a lesson.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/duoLessonComplete.gif&#34; alt=&#34;Intrinsic Motivation &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/InvitationToAct&#34;&gt;Invitation to Act&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Invitation to Act&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/InvitationToAct/InvitationToChat&#34;&gt;Invitation to chat: No message yet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No messages yet: A great way to encourage people to start their first conversation. Telegram uses similar animations in interesting ways to let people begin chattin with their love ones for the first time.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/noMessageYet.gif&#34; alt=&#34;Invitation to chat: No message yet &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/InvitationToAct/TapThisButton.swift&#34;&gt;Tap this&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Drawing users&#39; attention to act.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/tapButon.gif&#34; alt=&#34;Tap this &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/InvitationToAct/ScrollInThisDirection.swift&#34;&gt;Scroll in this direction&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using animation to tell users to act in a certain way&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/scrollInthisDirection.gif&#34; alt=&#34;Scroll in this direction &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/RepresentActivity&#34;&gt;Representation of Activities&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Representation of Activities&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/RepresentActivity/ListeningSiriAnimation.swift&#34;&gt;Siri Amimation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A visual representation of hearing/listening&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/siri.gif&#34; alt=&#34;Siri Amimation &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/RepresentActivity/SpotifyNowPlaying.swift&#34;&gt;Now playing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A visual representation of audio signals/ now playing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/nowPlaying.gif&#34; alt=&#34;Animated Placeholders &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/RepresentActivity/RecordingAnimation.swift&#34;&gt;Recording&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A visual representation of voice/speech recording&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/recording.gif&#34; alt=&#34;Turn-taking in chat &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/Decoration&#34;&gt;Decoration&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Decoration&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/MeaningAndPurpose/Decoration&#34;&gt;Decoration&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bubble and screen effects: confetti, fireworks, balloons&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/decoration.gif&#34; alt=&#34;Decoration &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;PRINCIPLES OF GREAT &amp;amp; PURPOSEFUL iOS ANIMATIONS&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples&#34;&gt;Anticipation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION PRINCIPLE:&lt;/strong&gt; Anticipation&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/AnticipationAnimation&#34;&gt;Anticipation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using EaseInOutBack to create anticipation: It gives users a sense of what is about to happen. Example: Transition an image from thumbnail to fullscreen. This effect causes the image to scale down slightly before it scales up to the fullscreen mode. The opposite occurs when transitioning from the fullscreen mode to the thumbnail view.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/anticipation.gif&#34; alt=&#34;Anticipation &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/StagingAnimation&#34;&gt;Staging&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use animation to prepare the viewer for changes. Direct the userâ€™s attention to focus on the important elements on the screen. For example, number changes (Count down and count up). You can also use fade-ins. Changing data on the screen: Number of steps taken in the StepsApp. If a number changes instantly from 0 to 100. It is easy to miss what just changed. Seeing what is changing prepares the viewerâ€™s attention and directs their focus to whatâ€™s about to happen.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/staging.gif&#34; alt=&#34;Staging &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/FollowThroughAnimation/StreamChatReactions&#34;&gt;Follow Through&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Follow Through&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/FollowThroughAnimation/StreamChatReactions&#34;&gt;Reactions in Stream Chat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Follow-through using Spring Animations: Using the principle of physics to create soft and imprecise movements. It overshoots the resting state to create fluid and bouncy animations. Learn more about &lt;a href=&#34;https://github.com/GetStream/swiftui-spring-animations&#34;&gt;SwiftUI Spring Animations&lt;/a&gt;. &lt;strong&gt;Note:&lt;/strong&gt; Spring animations do not belong everywhere. Before you use springs, it is good to ask, will the animation feel out of context by overshooting its resting state?&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/followThrough.gif&#34; alt=&#34;Reactions in Stream Chat &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/OverlappingAction&#34;&gt;Overlapping Action&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ANIMATION AND MEANING:&lt;/strong&gt; Overlapping Action&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/AnimationPrinciples/OverlappingAction/CascadingTextAnimation.swift&#34;&gt;Cascading text animation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This principle can be used to create an object sequence and stagger by cascading/offsetting similar elements animating in the same way as well as distributing their entrances over time instead of animating them at once&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/cascadingText.gif&#34; alt=&#34;Cascading text animation &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Esing Functions&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/EasingsAndMeaning&#34;&gt;Easing&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation (Easing Type)&lt;/th&gt; &#xA;   &lt;th&gt;Timing Curve&lt;/th&gt; &#xA;   &lt;th&gt;Usage&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/EasingsAndMeaning/Default&#34;&gt;Default&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/AnimatedEasing/default.gif&#34; alt=&#34;Default easing&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This is the default system timing function. It is similar to EaseInOut and ensures that the timings of your animations match that of most system animations such as iOS, watchOS, macOS, tvOS. It works best for for onscreen animations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/default.gif&#34; alt=&#34;Default easing &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/AnimationPrinciples/EasingsAndMeaning/Linear/StreamLogoMarchingAnts.swift&#34;&gt;&lt;strong&gt;Linear&lt;/strong&gt;: Dashes moving on a path&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/AnimatedEasing/linear.gif&#34; alt=&#34;Marching ants&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;It does not conform to natural laws of motion. It hasd a constant speed and feels mechanical rather than natural. There is an acceleration of 0 (no speedup or slowdown). &lt;strong&gt;Example&lt;/strong&gt;: Animated marching ants effect&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/marchingAnts.gif&#34; alt=&#34;Marching ants &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/AnimationPrinciples/EasingsAndMeaning/Linear/MeasuringHeartRate.swift&#34;&gt;&lt;strong&gt;Linear&lt;/strong&gt;: Dashes moving on a path&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Example&lt;/strong&gt;: Measuring Heart Rate animation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/heartRate.gif&#34; alt=&#34;Heart rate &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/AnimationPrinciples/EasingsAndMeaning/Linear/SunAndWind.swift&#34;&gt;&lt;strong&gt;Linear&lt;/strong&gt;: Rotation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Example&lt;/strong&gt;: Rotational animation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/sunWind.gif&#34; alt=&#34;Rotation &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/EasingsAndMeaning/EaseIn&#34;&gt;EaseIn&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/AnimatedEasing/easeIn.gif&#34; alt=&#34;EaseIn example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;EaseIn also refers to as acceleration. It begins slowly but its velocity increases over time. You can use it for auto-initiated animations and to move objects off the screen. It is purposely used for animating objects that require less attention. For example, making a bell icon slide through the top edge from the screen.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/easeInExample.gif&#34; alt=&#34;EaseIn example &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/EasingsAndMeaning/EaseOut&#34;&gt;EaseOut&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/AnimatedEasing/easeOut.gif&#34; alt=&#34;EaseOut example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;EaseOut pacing causes animation to speed up quickly and slow down as it progresses. You can use it to move objects onto the screen. In this example, the bell&#39;s rotation uses spring animation. It moves into view with easeOut which is more appropriate for moving objects onto the screen.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/easeOutExample.gif&#34; alt=&#34;EaseOut example &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/EasingsAndMeaning/EaseInOut&#34;&gt;EaseInOut&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/AnimatedEasing/easeInOut.gif&#34; alt=&#34;EaseInOut example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ease-in-ease-out pacing, causes an animation to begin slowly, accelerate through the middle of its duration, and then slow again before completing. It is suitable for moving objects across/on the screen from one point to another. Think of it as the the motion of a car. It is also useful for moving an object towards another. You can use it for human-initiated animations/interactions. Examples, button tap and page-to-page transitions.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/easeInOut.gif&#34; alt=&#34;EaseInOut example &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Custom Timing Functions&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/AnimationPrinciples/EasingsAndMeaning&#34;&gt;Custom Timing Functions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation (Easing Type)&lt;/th&gt; &#xA;   &lt;th&gt;Timing Curve&lt;/th&gt; &#xA;   &lt;th&gt;Usage&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/AnimationPrinciples/EasingsAndMeaning/CustomEasing/CustomEasing.swift&#34;&gt;Timing Functions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/AnimatedEasing/specialEaseInOutBack.gif&#34; alt=&#34;Custom Timing Functions&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Do you want your animation to look and feel unique? If yes, you can use custom timing functions to create, for example, the following animation effects. Sinusoidal: Gentle effects, Circular (easeInCirc): Animations that require dramatic acceleration, Exponential (easeInExpo): Exaggerated, fast, and energetic effects, Special effects: easeInOutBack. The graph of easeInOutBack Goes beyond the start and end position of easeIn and easeOut. On iOS, a great example is the App Store Todayâ€™s view: Card transition from its summary to the detail view.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/customTiming.gif&#34; alt=&#34;Timing Functions &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;iOS ANIMATIONS BEST PRACTICES&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The animation should be nimble and precise:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This helps to convey information more effectively&lt;/li&gt; &#xA;   &lt;li&gt;Do not keep users waiting longer than they should.&lt;/li&gt; &#xA;   &lt;li&gt;Loading indicators are very useful but do not make the animation run forever, For example, Deliveroo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Follow basic accessibility guidelines:&lt;/strong&gt; &lt;strong&gt;Why?&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The screen flashing rapidly can cause headache and seizure&lt;/li&gt; &#xA;   &lt;li&gt;People with visual disorders (vestibular): &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Excessive motion like 3D effects can cause discomfort, dizziness, and headache&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Examples:&lt;/strong&gt; Parallax, sliding, and flashing animations&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;People may think the app is frozen or sluggish&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reduce Motion:&lt;/strong&gt; Turning off animation and motion effects&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;People who are sensitive to motion and screen effects&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;How it works:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The default dissolve effect is used instead of zoom or slide.&lt;/li&gt; &#xA;     &lt;li&gt;When on, it disables parallax effects, wallpapers animation, and others&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Excellent Examples:&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;iOS Weather app:&lt;/strong&gt; Weather animations are disabled when reduce motion is on.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;iOS Messages app:&lt;/strong&gt; Provides the ability to set full-screen message effects on/off&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;In-app Use Motion: On/Off&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Implement in the settings of your app the ability to turn off animations, effects, and custom transitions&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Worth mentioning:&lt;/strong&gt; PCalc &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Users have the option to turn off the scaling animation of buttons any time they are pressed.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Make onscreen animations/motion optional&lt;/strong&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Do not make it the only way to communicate information.&lt;/li&gt; &#xA;       &lt;li&gt;Why?: &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;People who experience motion sickness when traveling in a vehicle&lt;/li&gt; &#xA;         &lt;li&gt;&lt;strong&gt;Nausea:&lt;/strong&gt; When the sense of vision and hearing sends conflicting information to the brain due to motion.&lt;/li&gt; &#xA;         &lt;li&gt;&lt;strong&gt;Vestibular triggers:&lt;/strong&gt; Scaling, zooming, and excessive blurring animations &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;Can give the illusion that the user is moving in physical space&lt;/li&gt; &#xA;           &lt;li&gt;&lt;strong&gt;Examples:&lt;/strong&gt; &#xA;            &lt;ul&gt; &#xA;             &lt;li&gt;Slowly scaling background.&lt;/li&gt; &#xA;             &lt;li&gt;Spinning and vortex effects (some Core Image filters):&lt;/li&gt; &#xA;             &lt;li&gt;People with vestibular disorders can lose their balance&lt;/li&gt; &#xA;            &lt;/ul&gt; &lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use system components:&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;In iOS, most system components automatically include motion which helps to ensure a familiar and consistent experience within your app&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Creating custom motion&lt;/strong&gt;. When you need to create a custom motion, always ensure that: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;It does not make users overwhelmed&lt;/li&gt; &#xA;       &lt;li&gt;It keeps users oriented&lt;/li&gt; &#xA;       &lt;li&gt;It gives clear feedback in response to usersâ€™ actions&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;BAD iOS ANIMATION EXAMPLES&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/tree/main/PurposefulSwiftUIAnimations/BadAnimationExamples&#34;&gt;BAD iOS ANIMATION EXAMPLES&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI Animation&lt;/th&gt; &#xA;   &lt;th&gt;Meaning/purpose&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/PurposefulSwiftUIAnimations/BadAnimationExamples/BadNotificationAnimation.swift&#34;&gt;Bad notification animation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Here is another example using a wrong easing for animation. The animation uses linear easing for rotating the bell icon and that causes the animation to jerk at the end. This can be improved by using easeOut, easeInOut or a custom sine curve to create a gentle rotation. Also, the bell icon icon rotates at the wrong anchor. Users always perceive a bell icon to be rotated at its hinge. That is the top. Rotating it at the center make it weird&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/GetStream/purposeful-ios-animations/raw/main/MISC/badNotification.gif&#34; alt=&#34;Bad notification animation &#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Animation that makes users wonder:&lt;/h3&gt; &#xA;&lt;p&gt;Forever rotating spinner, Deliveroo&lt;/p&gt; &#xA;&lt;h3&gt;Grabbing/hijacking usersâ€™ attention:&lt;/h3&gt; &#xA;&lt;h3&gt;Excessive flashing animations&lt;/h3&gt; &#xA;&lt;h3&gt;Using wrong easing:&lt;/h3&gt; &#xA;&lt;p&gt;EaseIn: Opacity and scale animations&lt;/p&gt; &#xA;&lt;h3&gt;Disoriented animation:&lt;/h3&gt; &#xA;&lt;p&gt;A bottom sheet sliding up to reveal and sliding to the side to dismiss&lt;/p&gt; &#xA;&lt;h3&gt;Distracting users with animation&lt;/h3&gt; &#xA;&lt;h3&gt;Animation getting in the way of completing the task&lt;/h3&gt; &#xA;&lt;p&gt;Animation preventing a toolbar icon to respond to tap&lt;/p&gt; &#xA;&lt;h3&gt;When animation becomes a dark pattern.&lt;/h3&gt; &#xA;&lt;h3&gt;A flashing countdown timer&lt;/h3&gt; &#xA;&lt;h3&gt;Slowly scaling background animation&lt;/h3&gt; &#xA;&lt;h3&gt;Using spring animation in a context that feels out of place&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-log</title>
    <updated>2022-08-17T01:59:13Z</updated>
    <id>tag:github.com,2022-08-17:/apple/swift-log</id>
    <link href="https://github.com/apple/swift-log" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Logging API for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftLog&lt;/h1&gt; &#xA;&lt;p&gt;First things first: This is the beginning of a community-driven open-source project actively seeking contributions, be it code, documentation, or ideas. Apart from contributing to &lt;code&gt;SwiftLog&lt;/code&gt; itself, there&#39;s another huge gap at the moment: &lt;code&gt;SwiftLog&lt;/code&gt; is an &lt;em&gt;API package&lt;/em&gt; which tries to establish a common API the ecosystem can use. To make logging really work for real-world workloads, we need &lt;code&gt;SwiftLog&lt;/code&gt;-compatible &lt;em&gt;logging backends&lt;/em&gt; which then either persist the log messages in files, render them in nicer colors on the terminal, or send them over to Splunk or ELK.&lt;/p&gt; &#xA;&lt;p&gt;What &lt;code&gt;SwiftLog&lt;/code&gt; provides today can be found in the &lt;a href=&#34;https://apple.github.io/swift-log/docs/current/Logging/Structs/Logger.html&#34;&gt;API docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;If you have a server-side Swift application, or maybe a cross-platform (for example Linux &amp;amp; macOS) app/library, and you would like to log, we think targeting this logging API package is a great idea. Below you&#39;ll find all you need to know to get started.&lt;/p&gt; &#xA;&lt;h4&gt;Adding the dependency&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;SwiftLog&lt;/code&gt; is designed for Swift 5. To depend on the logging API package, you need to declare your dependency in your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/apple/swift-log.git&#34;, from: &#34;1.0.0&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and to your application/library target, add &lt;code&gt;&#34;Logging&#34;&lt;/code&gt; to your &lt;code&gt;dependencies&lt;/code&gt;, e.g. like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Target syntax for Swift up to version 5.1&#xA;.target(name: &#34;BestExampleApp&#34;, dependencies: [&#34;Logging&#34;]),&#xA;&#xA;// Target for Swift 5.2&#xA;.target(name: &#34;BestExampleApp&#34;, dependencies: [&#xA;    .product(name: &#34;Logging&#34;, package: &#34;swift-log&#34;)&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Let&#39;s log&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// 1) let&#39;s import the logging API package&#xA;import Logging&#xA;&#xA;// 2) we need to create a logger, the label works similarly to a DispatchQueue label&#xA;let logger = Logger(label: &#34;com.example.BestExampleApp.main&#34;)&#xA;&#xA;// 3) we&#39;re now ready to use it&#xA;logger.info(&#34;Hello World!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;2019-03-13T15:46:38+0000 info: Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Default &lt;code&gt;Logger&lt;/code&gt; behavior&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;SwiftLog&lt;/code&gt; provides for very basic console logging out-of-the-box by way of &lt;code&gt;StreamLogHandler&lt;/code&gt;. It is possible to switch the default output to &lt;code&gt;stderr&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;LoggingSystem.bootstrap(StreamLogHandler.standardError)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;StreamLogHandler&lt;/code&gt; is primarily a convenience only and does not provide any substantial customization. Library maintainers who aim to build their own logging backends for integration and consumption should implement the &lt;code&gt;LogHandler&lt;/code&gt; protocol directly as laid out in &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-log/main/#on-the-implementation-of-a-logging-backend-a-loghandler&#34;&gt;the &#34;On the implementation of a logging backend&#34; section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For further information, please check the &lt;a href=&#34;https://apple.github.io/swift-log/docs/current/Logging/Structs/Logger.html&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;backends&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Selecting a logging backend implementation (applications only)&lt;/h4&gt; &#xA;&lt;p&gt;As the API has just launched, not many implementations exist yet. If you are interested in implementing one see the &#34;Implementation considerations&#34; section below explaining how to do so. List of existing SwiftLog API compatible libraries:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;   &lt;th&gt;Handler Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Kitura/HeliumLogger&#34;&gt;Kitura/HeliumLogger&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a logging backend widely used in the Kitura ecosystem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ianpartridge/swift-log-syslog&#34;&gt;ianpartridge/swift-log-&lt;strong&gt;syslog&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a &lt;a href=&#34;https://en.wikipedia.org/wiki/Syslog&#34;&gt;syslog&lt;/a&gt; backend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Adorkable/swift-log-format-and-pipe&#34;&gt;Adorkable/swift-log-&lt;strong&gt;format-and-pipe&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a backend that allows customization of the output format and the resulting destination&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/chrisaljoudi/swift-log-oslog&#34;&gt;chrisaljoudi/swift-log-&lt;strong&gt;oslog&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;an OSLog &lt;a href=&#34;https://developer.apple.com/documentation/os/logging&#34;&gt;Unified Logging&lt;/a&gt; backend for use on Apple platforms. &lt;strong&gt;Important Note:&lt;/strong&gt; we recommend using os_log directly as decribed &lt;a href=&#34;https://developer.apple.com/documentation/os/logging&#34;&gt;here&lt;/a&gt;. Using os_log through swift-log using this backend will be less efficient and will also prevent specifying the privacy of the message. The backend always uses &lt;code&gt;%{public}@&lt;/code&gt; as the format string and eagerly converts all string interpolations to strings. This has two drawbacks: 1. the static components of the string interpolation would be eagerly copied by the unified logging system, which will result in loss of performance. 2. It makes all messages public, which changes the default privacy policy of os_log, and doesn&#39;t allow specifying fine-grained privacy of sections of the message. In a separate on-going work, Swift APIs for os_log are being improved and made to align closely with swift-log APIs. References: &lt;a href=&#34;https://forums.swift.org/t/custom-string-interpolation-and-compile-time-interpretation-applied-to-logging/18799&#34;&gt;Unifying Logging Levels&lt;/a&gt;, &lt;a href=&#34;https://forums.swift.org/t/logging-levels-for-swifts-server-side-logging-apis-and-new-os-log-apis/20365&#34;&gt;Making os_log accept string interpolations using compile-time interpretation&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Brainfinance/StackdriverLogging&#34;&gt;Brainfinance/StackdriverLogging&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a structured JSON logging backend for use on Google Cloud Platform with the &lt;a href=&#34;https://cloud.google.com/logging/docs/agent&#34;&gt;Stackdriver logging agent&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DnV1eX/GoogleCloudLogging&#34;&gt;DnV1eX/GoogleCloudLogging&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a client-side library for logging application events in &lt;a href=&#34;https://console.cloud.google.com/logs&#34;&gt;Google Cloud&lt;/a&gt; via REST API v2.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vapor/console-kit/&#34;&gt;vapor/console-kit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;print log messages to a terminal with stylized (&lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;ANSI&lt;/a&gt;) output&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/neallester/swift-log-testing&#34;&gt;neallester/swift-log-testing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;provides access to log messages for use in assertions (within test targets)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wlisac/swift-log-slack&#34;&gt;wlisac/swift-log-slack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a logging backend that sends critical log messages to Slack&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NSHipster/swift-log-github-actions&#34;&gt;NSHipster/swift-log-github-actions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a logging backend that translates logging messages into &lt;a href=&#34;https://help.github.com/en/actions/reference/workflow-commands-for-github-actions&#34;&gt;workflow commands for GitHub Actions&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stevapple/swift-log-telegram&#34;&gt;stevapple/swift-log-telegram&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a logging backend that sends log messages to any Telegram chat (Inspired by and forked from &lt;a href=&#34;https://github.com/wlisac/swift-log-slack&#34;&gt;wlisac/swift-log-slack&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jagreenwood/swift-log-datadog&#34;&gt;jagreenwood/swift-log-datadog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a logging backend which sends log messages to the &lt;a href=&#34;https://www.datadoghq.com/log-management/&#34;&gt;Datadog&lt;/a&gt; log management service&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/google/swiftlogfirecloud&#34;&gt;google/SwiftLogFireCloud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a logging backend for time series logging which pushes logs as flat files to Firebase Cloud Storage.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/crspybits/swift-log-file&#34;&gt;crspybits/swift-log-file&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a simple local file logger (using &lt;code&gt;Foundation&lt;/code&gt; &lt;code&gt;FileManager&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/sushichop/Puppy&#34;&gt;sushichop/Puppy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a logging backend that supports multiple transports(console, file, syslog, etc.) and has the feature with formatting and file log rotation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/luoxiu/LogDog&#34;&gt;luoxiu/LogDog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;user-friendly logging with sinks and appenders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ShivaHuang/swift-log-SwiftyBeaver&#34;&gt;ShivaHuang/swift-log-SwiftyBeaver&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a logging backend for printing colored logging to Xcode console / file, or sending encrypted logging to &lt;a href=&#34;https://swiftybeaver.com&#34;&gt;SwiftyBeaver&lt;/a&gt; platform.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Apodini/swift-log-elk&#34;&gt;Apodini/swift-log-elk&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a logging backend that formats, caches and sends log data to &lt;a href=&#34;https://github.com/elastic/logstash&#34;&gt;elastic/logstash&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/binaryscraping/swift-log-supabase&#34;&gt;binaryscraping/swift-log-supabase&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a logging backend that sends log entries to &lt;a href=&#34;https://github.com/supabase/supbase&#34;&gt;Supabase&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Your library?&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://forums.swift.org/c/server&#34;&gt;Get in touch!&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;What is an API package?&lt;/h2&gt; &#xA;&lt;p&gt;Glad you asked. We believe that for the Swift on Server ecosystem, it&#39;s crucial to have a logging API that can be adopted by anybody so a multitude of libraries from different parties can all log to a shared destination. More concretely this means that we believe all the log messages from all libraries end up in the same file, database, Elastic Stack/Splunk instance, or whatever you may choose.&lt;/p&gt; &#xA;&lt;p&gt;In the real-world however, there are so many opinions over how exactly a logging system should behave, what a log message should be formatted like, and where/how it should be persisted. We think it&#39;s not feasible to wait for one logging package to support everything that a specific deployment needs whilst still being easy enough to use and remain performant. That&#39;s why we decided to cut the problem in half:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;a logging API&lt;/li&gt; &#xA; &lt;li&gt;a logging backend implementation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This package only provides the logging API itself and therefore &lt;code&gt;SwiftLog&lt;/code&gt; is a &#39;logging API package&#39;. &lt;code&gt;SwiftLog&lt;/code&gt; (using &lt;code&gt;LoggingSystem.bootstrap&lt;/code&gt;) can be configured to choose any compatible logging backend implementation. This way packages can adopt the API and the &lt;em&gt;application&lt;/em&gt; can choose any compatible logging backend implementation without requiring any changes from any of the libraries.&lt;/p&gt; &#xA;&lt;p&gt;Just for completeness sake: This API package does actually include an overly simplistic and non-configurable logging backend implementation which simply writes all log messages to &lt;code&gt;stdout&lt;/code&gt;. The reason to include this overly simplistic logging backend implementation is to improve the first-time usage experience. Let&#39;s assume you start a project and try out &lt;code&gt;SwiftLog&lt;/code&gt; for the first time, it&#39;s just a whole lot better to see something you logged appear on &lt;code&gt;stdout&lt;/code&gt; in a simplistic format rather than nothing happening at all. For any real-world application, we advise configuring another logging backend implementation that logs in the style you like.&lt;/p&gt; &#xA;&lt;h2&gt;The core concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Loggers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Logger&lt;/code&gt;s are used to emit log messages and therefore the most important type in &lt;code&gt;SwiftLog&lt;/code&gt;, so their use should be as simple as possible. Most commonly, they are used to emit log messages in a certain log level. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// logging an informational message&#xA;logger.info(&#34;Hello World!&#34;)&#xA;&#xA;// ouch, something went wrong&#xA;logger.error(&#34;Houston, we have a problem: \(problem)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Log levels&lt;/h3&gt; &#xA;&lt;p&gt;The following log levels are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;info&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;notice&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;warning&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;critical&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The log level of a given logger can be changed, but the change will only affect the specific logger you changed it on. You could say the &lt;code&gt;Logger&lt;/code&gt; is a &lt;em&gt;value type&lt;/em&gt; regarding the log level.&lt;/p&gt; &#xA;&lt;h3&gt;Logging metadata&lt;/h3&gt; &#xA;&lt;p&gt;Logging metadata is metadata that can be attached to loggers to add information that is crucial when debugging a problem. In servers, the usual example is attaching a request UUID to a logger that will then be present on all log messages logged with that logger. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var logger = logger&#xA;logger[metadataKey: &#34;request-uuid&#34;] = &#34;\(UUID())&#34;&#xA;logger.info(&#34;hello world&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will print&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2019-03-13T18:30:02+0000 info: request-uuid=F8633013-3DD8-481C-9256-B296E43443ED hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with the default logging backend implementation that ships with &lt;code&gt;SwiftLog&lt;/code&gt;. Needless to say, the format is fully defined by the logging backend you choose.&lt;/p&gt; &#xA;&lt;h2&gt;On the implementation of a logging backend (a &lt;code&gt;LogHandler&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;Note: If you don&#39;t want to implement a custom logging backend, everything in this section is probably not very relevant, so please feel free to skip.&lt;/p&gt; &#xA;&lt;p&gt;To become a compatible logging backend that all &lt;code&gt;SwiftLog&lt;/code&gt; consumers can use, you need to do two things: 1) Implement a type (usually a &lt;code&gt;struct&lt;/code&gt;) that implements &lt;code&gt;LogHandler&lt;/code&gt;, a protocol provided by &lt;code&gt;SwiftLog&lt;/code&gt; and 2) instruct &lt;code&gt;SwiftLog&lt;/code&gt; to use your logging backend implementation.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;LogHandler&lt;/code&gt; or logging backend implementation is anything that conforms to the following protocol&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol LogHandler {&#xA;    func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, file: String, function: String, line: UInt)&#xA;&#xA;    subscript(metadataKey _: String) -&amp;gt; Logger.Metadata.Value? { get set }&#xA;&#xA;    var metadata: Logger.Metadata { get set }&#xA;&#xA;    var logLevel: Logger.Level { get set }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instructing &lt;code&gt;SwiftLog&lt;/code&gt; to use your logging backend as the one the whole application (including all libraries) should use is very simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LoggingSystem.bootstrap(MyLogHandler.init)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Implementation considerations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;LogHandler&lt;/code&gt;s control most parts of the logging system:&lt;/p&gt; &#xA;&lt;h4&gt;Under control of a &lt;code&gt;LogHandler&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;h5&gt;Configuration&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;LogHandler&lt;/code&gt;s control the two crucial pieces of &lt;code&gt;Logger&lt;/code&gt; configuration, namely:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;log level (&lt;code&gt;logger.logLevel&lt;/code&gt; property)&lt;/li&gt; &#xA; &lt;li&gt;logging metadata (&lt;code&gt;logger[metadataKey:]&lt;/code&gt; and &lt;code&gt;logger.metadata&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the system to work, however, it is important that &lt;code&gt;LogHandler&lt;/code&gt; treat the configuration as &lt;em&gt;value types&lt;/em&gt;. This means that &lt;code&gt;LogHandler&lt;/code&gt;s should be &lt;code&gt;struct&lt;/code&gt;s and a change in log level or logging metadata should only affect the very &lt;code&gt;LogHandler&lt;/code&gt; it was changed on.&lt;/p&gt; &#xA;&lt;p&gt;However, in special cases, it is acceptable that a &lt;code&gt;LogHandler&lt;/code&gt; provides some global log level override that may affect all &lt;code&gt;LogHandler&lt;/code&gt;s created.&lt;/p&gt; &#xA;&lt;h5&gt;Emitting&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;emitting the log message itself&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Not under control of &lt;code&gt;LogHandler&lt;/code&gt;s&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;LogHandler&lt;/code&gt;s do not control if a message should be logged or not. &lt;code&gt;Logger&lt;/code&gt; will only invoke the &lt;code&gt;log&lt;/code&gt; function of a &lt;code&gt;LogHandler&lt;/code&gt; if &lt;code&gt;Logger&lt;/code&gt; determines that a log message should be emitted given the configured log level.&lt;/p&gt; &#xA;&lt;h2&gt;Source vs Label&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;Logger&lt;/code&gt; carries an (immutable) &lt;code&gt;label&lt;/code&gt; and each log message carries a &lt;code&gt;source&lt;/code&gt; parameter (since SwiftLog 1.3.0). The &lt;code&gt;Logger&lt;/code&gt;&#39;s label identifies the creator of the &lt;code&gt;Logger&lt;/code&gt;. If you are using structured logging by preserving metadata across multiple modules, the &lt;code&gt;Logger&lt;/code&gt;&#39;s &lt;code&gt;label&lt;/code&gt; is not a good way to identify where a log message originated from as it identifies the creator of a &lt;code&gt;Logger&lt;/code&gt; which is often passed around between libraries to preserve metadata and the like.&lt;/p&gt; &#xA;&lt;p&gt;If you want to filter all log messages originating from a certain subsystem, filter by &lt;code&gt;source&lt;/code&gt; which defaults to the module that is emitting the log message.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-log/main/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; for SwiftLog&#39;s security process.&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;This logging API was designed with the contributors to the Swift on Server community and approved by the &lt;a href=&#34;https://swift.org/server/&#34;&gt;SSWG (Swift Server Work Group)&lt;/a&gt; to the &#39;sandbox level&#39; of the SSWG&#39;s &lt;a href=&#34;https://github.com/swift-server/sswg/raw/master/process/incubation.md&#34;&gt;incubation process&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.swift.org/t/logging/16027&#34;&gt;pitch&lt;/a&gt;, &lt;a href=&#34;https://forums.swift.org/t/discussion-server-logging-api/18834&#34;&gt;discussion&lt;/a&gt;, &lt;a href=&#34;https://forums.swift.org/t/feedback-server-logging-api-with-revisions/19375&#34;&gt;feedback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.swift.org/t/logging-levels-for-swifts-server-side-logging-apis-and-new-os-log-apis/20365&#34;&gt;log levels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>