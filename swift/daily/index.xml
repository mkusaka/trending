<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-22T01:42:16Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheResonanceTeam/TrollApps</title>
    <updated>2023-12-22T01:42:16Z</updated>
    <id>tag:github.com,2023-12-22:/TheResonanceTeam/TrollApps</id>
    <link href="https://github.com/TheResonanceTeam/TrollApps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;App Store alternative for TrollStore&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TheResonanceTeam/TrollApps/main/assets/ResonanceStoreIcon.png&#34; alt=&#34;Logo&#34; width=&#34;70&#34; height=&#34;70&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;TrollApps&lt;/h1&gt; &#xA;&lt;h6 align=&#34;center&#34;&gt;An App Store alternative for TrollStore.&lt;/h6&gt; &#xA;&lt;h1&gt;What is TrollApps?&lt;/h1&gt; &#xA;&lt;p&gt;TrollApps is an alternative to the iOS App Store for TrollStore users. TrollApps allows users to download apps from repositories and install them directly in TrollStore. &lt;strong&gt;TrollApps works on iOS 14.0 and up; make sure to be on the latest version of TrollStore.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;You require a TollStore 1.0 / 2.0 compatible device, and TrollStore must be installed to use this application. It is also required that you enable schema urls within TrollStore.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;256&#34; height=&#34;auto&#34; src=&#34;https://raw.githubusercontent.com/TheResonanceTeam/TrollApps/main/assets/Screenshot-1.png&#34;&gt; &lt;img width=&#34;256&#34; height=&#34;auto&#34; src=&#34;https://raw.githubusercontent.com/TheResonanceTeam/TrollApps/main/assets/Screenshot-2.png&#34;&gt; &lt;img width=&#34;256&#34; height=&#34;auto&#34; src=&#34;https://raw.githubusercontent.com/TheResonanceTeam/TrollApps/main/assets/Screenshot-3.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Check out our documentation!&lt;/h1&gt; &#xA;&lt;p&gt;Information on TrollApps sources and our URL Scheme can be found &lt;a href=&#34;https://github.com/TheResonanceTeam/TrollApps/raw/main/assets/Docs/DOCUMENTATION.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Found a bug / want to send feedback?&lt;/h1&gt; &#xA;&lt;h3&gt;Join our &lt;a href=&#34;https://discord.gg/PrF6XqpGgX&#34;&gt;Discord&lt;/a&gt;!&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>open-telemetry/opentelemetry-swift</title>
    <updated>2023-12-22T01:42:16Z</updated>
    <id>tag:github.com,2023-12-22:/open-telemetry/opentelemetry-swift</id>
    <link href="https://github.com/open-telemetry/opentelemetry-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenTelemetry API for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;opentelemetry-swift&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-swift/actions/workflows/BuildAndTest.yml?query=branch%3Amain+&#34;&gt;&lt;img src=&#34;https://github.com/open-telemetry/opentelemetry-swift/actions/workflows/BuildAndTest.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/open-telemetry/opentelemetry-swift&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/open-telemetry/opentelemetry-swift/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A swift &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt; client&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This package includes several libraries. The &lt;code&gt;OpenTelemetryApi&lt;/code&gt; library includes protocols and no-op implementations that comprise the OpenTelemetry API following the &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-specification&#34;&gt;specification&lt;/a&gt;. The &lt;code&gt;OpenTelemetrySdk&lt;/code&gt; library is the reference implementation of the API.&lt;/p&gt; &#xA;&lt;p&gt;Libraries that produce telemetry data should only depend on &lt;code&gt;OpenTelemetryApi&lt;/code&gt;, and defer the choice of the SDK to the application developer. Applications may depend on &lt;code&gt;OpenTelemetrySdk&lt;/code&gt; or another package that implements the API.&lt;/p&gt; &#xA;&lt;h4&gt;Adding the dependency&lt;/h4&gt; &#xA;&lt;p&gt;opentelemetry-swift is designed for Swift 5. To depend on the opentelemetry-swift package, you need to declare your dependency in your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.package(url: &#34;https://github.com/open-telemetry/opentelemetry-swift&#34;, from: &#34;1.0.0&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and to your application/library target, add &lt;code&gt;OpenTelemetryApi&lt;/code&gt; or &lt;code&gt;OpenTelemetrySdk&lt;/code&gt;to your &lt;code&gt;dependencies&lt;/code&gt;, e.g. like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.target(name: &#34;ExampleTelemetryProducerApp&#34;, dependencies: [&#34;OpenTelemetryApi&#34;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.target(name: &#34;ExampleApp&#34;, dependencies: [&#34;OpenTelemetrySdk&#34;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Official documentation for the library can be found in the official opentelemetry &lt;a href=&#34;https://opentelemetry.io/docs/instrumentation/swift/&#34;&gt;documentation page&lt;/a&gt;, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Documentation about installation and &lt;a href=&#34;https://opentelemetry.io/docs/instrumentation/swift/manual/&#34;&gt;manual instrumentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://opentelemetry.io/docs/instrumentation/swift/libraries/&#34;&gt;Libraries&lt;/a&gt; that provide automatic instrumentation&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current status&lt;/h2&gt; &#xA;&lt;h3&gt;API and SDK&lt;/h3&gt; &#xA;&lt;p&gt;Tracing and Baggage are considered stable&lt;/p&gt; &#xA;&lt;p&gt;Logs are considered beta quality&lt;/p&gt; &#xA;&lt;p&gt;Metrics is implemented using an outdated spec, is fully functional but will change in the future&lt;/p&gt; &#xA;&lt;h3&gt;Supported exporters and importers&lt;/h3&gt; &#xA;&lt;h4&gt;Traces&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exporters: Stdout, Jaeger, Zipkin, Datadog and OpenTelemetry (OTLP) collector&lt;/li&gt; &#xA; &lt;li&gt;Importers: OpenTracingShim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Metrics&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exporters: Prometheus, Datadog, and OpenTelemetry (OTLP) collector&lt;/li&gt; &#xA; &lt;li&gt;Importers: SwiftMetricsShim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Logs&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exporters: OpenTelemetry (OTLP) collector&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; OTLP exporters are supported both in GRPC and HTTP, only GRPC is production ready, HTTP is still experimental&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Instrumentation libraries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;URLSession&lt;/li&gt; &#xA; &lt;li&gt;NetworkStatus&lt;/li&gt; &#xA; &lt;li&gt;SDKResourceExtension&lt;/li&gt; &#xA; &lt;li&gt;SignPostIntegration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The package includes some example projects with basic functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Datadog Sample&lt;/code&gt; - Shows the Datadog exporter used with a Simple Exporter, showing how to configure for sending.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Logging Tracer&lt;/code&gt; - Simple api implementation of a Tracer that logs every api call&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Network Tracer&lt;/code&gt; - Shows how to use the &lt;code&gt;URLSessionInstrumentation&lt;/code&gt; instrumentation in your application&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Simple Exporter&lt;/code&gt; - Shows the Jaeger an Stdout exporters in action using a MultiSpanExporter. Can be easily modified for other exporters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Prometheus Sample&lt;/code&gt; - Shows the Prometheus exporter reporting metrics to a Prometheus instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OTLP Exporter&lt;/code&gt; - Shows the OTLP exporter reporting traces to Zipkin and metrics to a Prometheus via the otel-collector&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>