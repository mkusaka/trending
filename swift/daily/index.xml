<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-17T01:40:09Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>intitni/CopilotForXcode</title>
    <updated>2022-12-17T01:40:09Z</updated>
    <id>tag:github.com,2022-12-17:/intitni/CopilotForXcode</id>
    <link href="https://github.com/intitni/CopilotForXcode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The missing Github Copilot Xcode Source Editor Extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot for Xcode &lt;img alt=&#34;Logo&#34; src=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/AppIcon.png&#34; align=&#34;right&#34; height=&#34;50&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/ScreenRecording.gif&#34; alt=&#34;ScreenRecording&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copilot for Xcode is an Xcode Source Editor Extension that provides Github Copilot support for Xcode. It uses the LSP provided through &lt;a href=&#34;https://github.com/github/copilot.vim/tree/release/copilot/dist&#34;&gt;Copilot.vim&lt;/a&gt; to generate suggestions and displays them as comments.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/TerminalFi/LSP-copilot&#34;&gt;LSP-copilot&lt;/a&gt; for showing the way to interact with Copilot. And thanks to &lt;a href=&#34;https://github.com/ChimeHQ/LanguageClient&#34;&gt;LanguageClient&lt;/a&gt; for the Language Server Protocol support in Swift.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node&lt;/a&gt; installed to run the Copilot LSP.&lt;/li&gt; &#xA; &lt;li&gt;Public network connection.&lt;/li&gt; &#xA; &lt;li&gt;Active GitHub Copilot subscription.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions Required&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accessibility&lt;/li&gt; &#xA; &lt;li&gt;Folder Access&lt;/li&gt; &#xA; &lt;li&gt;Maybe Input Monitoring (Real-time Suggestions Only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the Copilot for Xcode.app from the latest release, and extract it to the Applications folder.&lt;/li&gt; &#xA; &lt;li&gt;Open the app, and click &#34;Set Up Launch Agents&#34; to set up a background running XPC Service that does the real job.&lt;/li&gt; &#xA; &lt;li&gt;Refresh the Copilot status, if it fails, quit and restart the app.&lt;/li&gt; &#xA; &lt;li&gt;Sign in. You will be directed to a verification website provided by GitHub, and a user code will be pasted into your clipboard.&lt;/li&gt; &#xA; &lt;li&gt;After signing in, go back to the app and click &#34;Confirm Sign-in&#34; to finish.&lt;/li&gt; &#xA; &lt;li&gt;Enable the extension in the Settings.app, then maybe restart Xcode.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The first time the actions run, the extension will ask for 2 types of permissions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Accessibility API: which the extension uses to get the editing file path.&lt;/li&gt; &#xA; &lt;li&gt;Folder Access: the extension needs, to run some Apple Scripts to get the project/workspace path.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Actions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get Suggestions: Get suggestions for the editing file at the current cursor position.&lt;/li&gt; &#xA; &lt;li&gt;Next Suggestion: If there is more than 1 suggestion, switch to the next one.&lt;/li&gt; &#xA; &lt;li&gt;Previous Suggestion: If there is more than 1 suggestion, switch to the previous one.&lt;/li&gt; &#xA; &lt;li&gt;Accept Suggestion: Add the suggestion to the code.&lt;/li&gt; &#xA; &lt;li&gt;Reject Suggestion: Remove the suggestion comments.&lt;/li&gt; &#xA; &lt;li&gt;Turn On Real-time Suggestions: When turn on, Copilot will auto-insert suggestion comments to your code while editing. You have to manually turn it on for every open window of Xcode.&lt;/li&gt; &#xA; &lt;li&gt;Turn Off Real-time Suggestions: Turns the real-time suggestions off.&lt;/li&gt; &#xA; &lt;li&gt;Real-time Suggestions: It is an entry point only for Copilot for Xcode. In the background, Copilot for Xcode will occasionally run this action to bring you real-time suggestions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;About real-time suggestions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The implementation won&#39;t feel as smooth as that of VSCode.&lt;/p&gt; &#xA;&lt;p&gt;The magic behind it is that it will keep calling the action from the menu when you are not typing, or clicking mouse. So it will have to listen to those events, I am not sure if people like it.&lt;/p&gt; &#xA;&lt;p&gt;Hope that next year, Apple can spend some time on Xcode Extensions.&lt;/p&gt; &#xA;&lt;h2&gt;Prevent Suggestions Being Committed&lt;/h2&gt; &#xA;&lt;p&gt;Since the suggestions are presented as comments, they are in your code. If you are not careful enough, they can be committed to your git repo. To avoid that, I would recommend adding a pre-commit git hook to prevent this from happening. Maybe later I will add an action for that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh&#xA;&#xA;# Check if the commit message contains the string&#xA;if git diff --cached --diff-filter=ACMR | grep -q &#34;/*========== Copilot Suggestion&#34;; then&#xA;  echo &#34;Error: Commit contains Copilot suggestions generated by Copilot for Xcode.&#34;&#xA;  exit 1&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first run of the extension will be slow. Be patient.&lt;/li&gt; &#xA; &lt;li&gt;The extension uses some dirty tricks to get the file and project/workspace paths. It may fail, it may be incorrect, especially when you have multiple Xcode windows running, and maybe even worse when they are in different displays. I am not sure about that though.&lt;/li&gt; &#xA; &lt;li&gt;The suggestions are presented as C-style comments, they may break your code if you are editing a JSON file or something.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: The extension doesn&#39;t show up in the &lt;code&gt;Editor&lt;/code&gt; menu.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: Please make sure it&#39;s turned on in &lt;code&gt;Settings.app &amp;gt; Privacy &amp;amp; Security &amp;gt; Extensions &amp;gt; Xcode Source Editor Extension&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: The extension says it can&#39;t connect to the XPC service/helper.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: Please make sure you have set up Launch Agents, try running &lt;code&gt;launchctl list | grep com.intii&lt;/code&gt; from the terminal, and see if &lt;code&gt;com.intii.CopilotForXcode.XPCService&lt;/code&gt; exists. If not, check &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt; to see if &lt;code&gt;com.intii.CopilotForXcode.XPCService.plist&lt;/code&gt; exists. If they don&#39;t, and the button in the app fails to create them, please try to do it by hand.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: The extension complains that it has no access to the Accessibility API&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: Check the list in &lt;code&gt;Settings.app &amp;gt; Privacy &amp;amp; Security &amp;gt; Accessibility&lt;/code&gt;. Turn the toggle on for &lt;code&gt;Copilot for Xcode&lt;/code&gt;. If it&#39;s not on the list, add it manually.&lt;/p&gt; &#xA; &lt;p&gt;If you have just &lt;strong&gt;updated the app&lt;/strong&gt;, consider restarting XPCService in app or trying removing the Launch Agents and set it up again!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: I turned on real-time suggestions, but nothing happens&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: Check the list in &lt;code&gt;Settings.app &amp;gt; Privacy &amp;amp; Security &amp;gt; Input Monitoring&lt;/code&gt;. Turn the toggle on for &lt;code&gt;Copilot for Xcode&lt;/code&gt;. If it&#39;s not on the list, add it manually. After that, you may have to restart the XPC Service.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Will it work in future Xcode updates?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: I don&#39;t know. This extension uses many tricks to do its job, and these tricks can break in the future.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>huggingface/swift-coreml-diffusers</title>
    <updated>2022-12-17T01:40:09Z</updated>
    <id>tag:github.com,2022-12-17:/huggingface/swift-coreml-diffusers</id>
    <link href="https://github.com/huggingface/swift-coreml-diffusers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift app demonstrating Core ML Stable Diffusion&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Diffusion&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple app that shows how to integrate Apple&#39;s &lt;a href=&#34;https://github.com/apple/ml-stable-diffusion&#34;&gt;Core ML Stable Diffusion implementation&lt;/a&gt; in a native Swift UI application. It can be used for faster iteration, or as sample code for other use cases.&lt;/p&gt; &#xA;&lt;p&gt;This is what it looks like: &lt;img src=&#34;https://raw.githubusercontent.com/huggingface/swift-coreml-diffusers/main/screenshot.jpg&#34; alt=&#34;App Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;On first launch, the application downloads a zipped archive with a Core ML version of Runway&#39;s Stable Diffusion v1.5, from &lt;a href=&#34;https://huggingface.co/pcuenq/coreml-stable-diffusion/tree/main&#34;&gt;this location in the Hugging Face Hub&lt;/a&gt;. This process takes a while, as several GB of data have to be downloaded and unarchived.&lt;/p&gt; &#xA;&lt;p&gt;For faster inference, we use a very fast scheduler: &lt;a href=&#34;https://github.com/LuChengTHU/dpm-solver&#34;&gt;DPM-Solver++&lt;/a&gt; that we ported to Swift. Since this scheduler is still not available in Apple&#39;s GitHub repository, the application depends on the following fork instead: &lt;a href=&#34;https://github.com/pcuenca/ml-stable-diffusion&#34;&gt;https://github.com/pcuenca/ml-stable-diffusion&lt;/a&gt;. Our Swift port is based on &lt;a href=&#34;https://github.com/huggingface/diffusers/raw/main/src/diffusers/schedulers/scheduling_dpmsolver_multistep.py&#34;&gt;Diffusers&#39; DPMSolverMultistepScheduler&lt;/a&gt;, with a number of simplifications.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS Ventura 13.1, iOS/iPadOS 16.2, Xcode 14.2.&lt;/li&gt; &#xA; &lt;li&gt;Performance (after initial generation, which is slower) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;~10s in macOS on MacBook Pro M1 Max (64 GB).&lt;/li&gt; &#xA;   &lt;li&gt;~2 minutes in iPhone 13 Pro.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The UI does not expose a way to configure the scheduler, number of inference steps, or generation seed. These are all available in the underlying code.&lt;/li&gt; &#xA; &lt;li&gt;A single model (Stable Diffusion v1.5) is considered. The Core ML compute units have been hardcoded to CPU and GPU, since that&#39;s what gives best results on my Mac (M1 Max MacBook Pro).&lt;/li&gt; &#xA; &lt;li&gt;Sometimes generation returns a &lt;code&gt;nil&lt;/code&gt; image. This needs to be investigated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve UI. Allow the user to select generation parameters.&lt;/li&gt; &#xA; &lt;li&gt;Allow other models to run. Provide a recommended &#34;compute units&#34; configuration based on model and platform.&lt;/li&gt; &#xA; &lt;li&gt;Implement other interesting schedulers.&lt;/li&gt; &#xA; &lt;li&gt;Implement negative prompts.&lt;/li&gt; &#xA; &lt;li&gt;Explore other features (image to image, for example).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>optonaut/ActiveLabel.swift</title>
    <updated>2022-12-17T01:40:09Z</updated>
    <id>tag:github.com,2022-12-17:/optonaut/ActiveLabel.swift</id>
    <link href="https://github.com/optonaut/ActiveLabel.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UILabel drop-in replacement supporting Hashtags (#), Mentions (@) and URLs (http://) written in Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ActiveLabel.swift &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/optonaut/ActiveLabel.swift&#34;&gt;&lt;img src=&#34;https://travis-ci.org/optonaut/ActiveLabel.swift.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;UILabel drop-in replacement supporting Hashtags (#), Mentions (@), URLs (http://), Emails and custom regex patterns, written in Swift&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift 5.0 (1.1.0+) and 4.2 (1.0.1)&lt;/li&gt; &#xA; &lt;li&gt;Default support for &lt;strong&gt;Hashtags, Mentions, Links, Emails&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;strong&gt;custom types&lt;/strong&gt; via regex&lt;/li&gt; &#xA; &lt;li&gt;Ability to enable highlighting only for the desired types&lt;/li&gt; &#xA; &lt;li&gt;Ability to trim urls&lt;/li&gt; &#xA; &lt;li&gt;Super easy to use and lightweight&lt;/li&gt; &#xA; &lt;li&gt;Works as &lt;code&gt;UILabel&lt;/code&gt; drop-in replacement&lt;/li&gt; &#xA; &lt;li&gt;Well tested and documented&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/optonaut/ActiveLabel.swift/master/ActiveLabelDemo/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install (iOS 10+)&lt;/h2&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Cartfile&lt;/code&gt; and follow &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;these instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;github &#34;optonaut/ActiveLabel.swift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;CocoaPods 0.36 adds supports for Swift and embedded frameworks. To integrate ActiveLabel into your project add the following to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;10.0&#39;&#xA;use_frameworks!&#xA;&#xA;pod &#39;ActiveLabel&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import ActiveLabel&#xA;&#xA;let label = ActiveLabel()&#xA;label.numberOfLines = 0&#xA;label.enabledTypes = [.mention, .hashtag, .url, .email]&#xA;label.text = &#34;This is a post with #hashtags and a @userhandle.&#34;&#xA;label.textColor = .black&#xA;label.handleHashtagTap { hashtag in&#xA;    print(&#34;Success. You just tapped the \(hashtag) hashtag&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom types&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let customType = ActiveType.custom(pattern: &#34;\\swith\\b&#34;) //Regex that looks for &#34;with&#34;&#xA;label.enabledTypes = [.mention, .hashtag, .url, .email, customType]&#xA;label.text = &#34;This is a post with #hashtags and a @userhandle.&#34;&#xA;label.customColor[customType] = UIColor.purple&#xA;label.customSelectedColor[customType] = UIColor.green&#xA;label.handleCustomTap(for: customType) { element in&#xA;    print(&#34;Custom type tapped: \(element)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Enable/disable highlighting&lt;/h2&gt; &#xA;&lt;p&gt;By default, an ActiveLabel instance has the following configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.enabledTypes = [.mention, .hashtag, .url, .email]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But feel free to enable/disable to fit your requirements&lt;/p&gt; &#xA;&lt;h2&gt;Batched customization&lt;/h2&gt; &#xA;&lt;p&gt;When using ActiveLabel, it is recommended to use the &lt;code&gt;customize(block:)&lt;/code&gt; method to customize it. The reason is that ActiveLabel is reacting to each property that you set. So if you set 3 properties, the textContainer is refreshed 3 times.&lt;/p&gt; &#xA;&lt;p&gt;When using &lt;code&gt;customize(block:)&lt;/code&gt;, you can group all the customizations on the label, that way ActiveLabel is only going to refresh the textContainer once.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.customize { label in&#xA;    label.text = &#34;This is a post with #multiple #hashtags and a @userhandle.&#34;&#xA;    label.textColor = UIColor(red: 102.0/255, green: 117.0/255, blue: 127.0/255, alpha: 1)&#xA;    label.hashtagColor = UIColor(red: 85.0/255, green: 172.0/255, blue: 238.0/255, alpha: 1)&#xA;    label.mentionColor = UIColor(red: 238.0/255, green: 85.0/255, blue: 96.0/255, alpha: 1)&#xA;    label.URLColor = UIColor(red: 85.0/255, green: 238.0/255, blue: 151.0/255, alpha: 1)&#xA;    label.handleMentionTap { self.alert(&#34;Mention&#34;, message: $0) }&#xA;    label.handleHashtagTap { self.alert(&#34;Hashtag&#34;, message: $0) }&#xA;    label.handleURLTap { self.alert(&#34;URL&#34;, message: $0.absoluteString) }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Trim long urls&lt;/h2&gt; &#xA;&lt;p&gt;You have the possiblity to set the maximum lenght a url can have;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.urlMaximumLength = 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From now on, a url that&#39;s bigger than that, will be trimmed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;https://afancyurl.com/whatever&lt;/code&gt; -&amp;gt; &lt;code&gt;https://afancyurl.com/wh...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h5&gt;&lt;code&gt;mentionColor: UIColor = .blueColor()&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;code&gt;mentionSelectedColor: UIColor?&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;code&gt;hashtagColor: UIColor = .blueColor()&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;code&gt;hashtagSelectedColor: UIColor?&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;code&gt;URLColor: UIColor = .blueColor()&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;code&gt;URLSelectedColor: UIColor?&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;code&gt;customColor: [ActiveType : UIColor]&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;code&gt;customSelectedColor: [ActiveType : UIColor]&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;code&gt;lineSpacing: Float?&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;code&gt;handleMentionTap: (String) -&amp;gt; ()&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.handleMentionTap { userHandle in print(&#34;\(userHandle) tapped&#34;) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;handleHashtagTap: (String) -&amp;gt; ()&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.handleHashtagTap { hashtag in print(&#34;\(hashtag) tapped&#34;) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;handleURLTap: (NSURL) -&amp;gt; ()&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.handleURLTap { url in UIApplication.shared.openURL(url) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;handleEmailTap: (String) -&amp;gt; ()&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.handleEmailTap { email in print(&#34;\(email) tapped&#34;) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;handleCustomTap(for type: ActiveType, handler: (String) -&amp;gt; ())&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.handleCustomTap(for: customType) { element in print(&#34;\(element) tapped&#34;) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;filterHashtag: (String) -&amp;gt; Bool&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.filterHashtag { hashtag in validHashtags.contains(hashtag) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;filterMention: (String) -&amp;gt; Bool&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.filterMention { mention in validMentions.contains(mention) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;Before writing &lt;code&gt;ActiveLabel&lt;/code&gt; we&#39;ve tried a lot of the following alternatives but weren&#39;t quite satisfied with the quality level or ease of usage, so we decided to contribute our own solution.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TTTAttributedLabel/TTTAttributedLabel&#34;&gt;TTTAttributedLabel&lt;/a&gt; (ObjC) - A drop-in replacement for UILabel that supports attributes, data detectors, links, and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SebastienThiebaud/STTweetLabel&#34;&gt;STTweetLabel&lt;/a&gt; (ObjC) - A UILabel with #hashtag @handle and links tappable&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rootd/AMAttributedHighlightLabel&#34;&gt;AMAttributedHighlightLabel&lt;/a&gt; (ObjC) - A UILabel subclass with mention/hashtag/link highlighting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Krelborn/KILabel&#34;&gt;KILabel&lt;/a&gt; (ObjC) - A simple to use drop in replacement for UILabel for iOS 7 and above that highlights links such as URLs, twitter style usernames and hashtags and makes them touchable&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>