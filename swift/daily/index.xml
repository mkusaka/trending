<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-24T01:55:37Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>diddledani/macOS-Linux-VM-with-Rosetta</title>
    <updated>2022-07-24T01:55:37Z</updated>
    <id>tag:github.com,2022-07-24:/diddledani/macOS-Linux-VM-with-Rosetta</id>
    <link href="https://github.com/diddledani/macOS-Linux-VM-with-Rosetta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Rosetta-enabled virtual machine based on Apple Sample Code&lt;/h2&gt; &#xA;&lt;h3&gt;Live stream&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://youtu.be/OrMjQtPxo5Y&#34;&gt;Live stream recording&lt;/a&gt; where this was built and tested is on YouTube.&lt;/p&gt; &#xA;&lt;h3&gt;Building the app&lt;/h3&gt; &#xA;&lt;p&gt;The built app is downloadable at &lt;a href=&#34;https://github.com/diddledani/macOS-Linux-VM-with-Rosetta/releases&#34;&gt;the releases page&lt;/a&gt;, or you can build the app yourself with XCode 13 Beta.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build the VM app yoursef, rather than using the pre-built download, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open XCode-beta and select from the menu bar &lt;code&gt;XCode&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the settings dialog navigate to &lt;code&gt;Accounts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If your account is not listed click the &lt;code&gt;+&lt;/code&gt; button at the bottom of the list and login to your Apple Developer account (a free account is sufficient)&lt;/li&gt; &#xA; &lt;li&gt;Close the settings window&lt;/li&gt; &#xA; &lt;li&gt;Clone the git repository off GitHub, e.g. &lt;code&gt;git clone https://github.com/diddledani/macOS-Linux-VM-with-Rosetta.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;RosettaVM.xcodeproj&lt;/code&gt; project file in XCode&lt;/li&gt; &#xA; &lt;li&gt;Click the left-hand sidebar entry at the top of the tree labelled &lt;code&gt;RosettaVM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the right-hand pane navigate to the TARGETS entry &lt;code&gt;RosettaVM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click the top-bar entry labelled &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;Team&lt;/code&gt; drop-down select your Apple Developer account/team, and set the &lt;code&gt;Signing Certificate&lt;/code&gt; drop-down to &lt;code&gt;Sign to run locally&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;code&gt;&amp;gt;&lt;/code&gt; (Run) button at the top-left of the XCode window&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Setting up Rosetta&lt;/h3&gt; &#xA;&lt;p&gt;When you start the RosettaVM app, you should be prompted by the app to select a Linux installer ISO.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cdimage.ubuntu.com/jammy/daily-live/current/jammy-desktop-arm64.iso&#34;&gt;Ubuntu 22.04 Desktop&lt;/a&gt; (This is a daily build of the ISO and is classed as unstable, meaning that any particular day&#39;s download may have bugs - There is currently no &#39;stable&#39; ISO for the desktop release)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cdimage.ubuntu.com/releases/22.04/release/ubuntu-22.04-live-server-arm64.iso&#34;&gt;Ubuntu 22.04 Server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you&#39;ve supplied the app with an installation ISO file it should start the Virtual Machine. You need to follow the standard installation of the distro that you have downloaded.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using the Ubuntu Server ISO you will need to install &lt;code&gt;binfmt-support&lt;/code&gt; to provide the &lt;code&gt;update-binfmts&lt;/code&gt; command which we will use below to enable the Rosetta wrapper. To install &lt;code&gt;binfmt-support&lt;/code&gt; run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install -y binfmt-support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once installed, you need to execute the following commands inside the Linux VM to enable Rosetta to intercept x86_64 binaries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mkdir /var/run/rosetta&#xA;sudo mount -t virtiofs ROSETTA /var/run/rosetta&#xA;sudo /usr/sbin/update-binfmts --install rosetta /var/run/rosetta/rosetta \&#xA;    --magic &#34;\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x3e\x00&#34; \&#xA;    --mask &#34;\xff\xff\xff\xff\xff\xfe\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff&#34; \&#xA;    --credentials yes --preserve no --fix-binary yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you should be able to execute x86_64 Linux binaries as though they were native. Bare in mind, however, that you need all your Linux app&#39;s required libraries in x86_64. On Ubuntu these are installable by adding the following to your &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; file (ensure you change &lt;code&gt;jammy&lt;/code&gt; to the codename of the version of Ubuntu you are running):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main restricted&#xA;deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted&#xA;deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy universe&#xA;deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates universe&#xA;deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy multiverse&#xA;deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates multiverse&#xA;deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security main restricted&#xA;deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security universe&#xA;deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security multiverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need to tell APT and dpkg to enable &lt;code&gt;amd64&lt;/code&gt; repositories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dpkg --add-architecture amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you make changes to the &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; file, or add an additional architecture with the &lt;code&gt;dpkg&lt;/code&gt; command, you should run &lt;code&gt;sudo apt update&lt;/code&gt; to update your cache of known packages.&lt;/p&gt; &#xA;&lt;p&gt;To install an x86_64/amd64 library in Ubuntu once you&#39;ve updated your &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; you need to append &lt;code&gt;:amd64&lt;/code&gt; to each package name, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install libx11-6:amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing the Ubuntu Desktop for graphical applications (Only when Server ISO were choosen)&lt;/h3&gt; &#xA;&lt;p&gt;When you install Ubuntu Server with the above ISO you will only have a command-line environment. You can upgrade from Ubuntu Server to Ubuntu Desktop by evecuting the following commands, which will take a while to complete:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update&#xA;sudo apt -y full-upgrade&#xA;sudo apt -y install ubuntu-desktop^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: the &lt;code&gt;^&lt;/code&gt; symbol is important when you want to install &lt;code&gt;ubuntu-desktop&lt;/code&gt; as this tells &lt;code&gt;apt&lt;/code&gt; to use a &lt;code&gt;task&lt;/code&gt; which defines the complete Ubuntu Desktop. If you omit the symbol you may not get a fully-installed desktop. You won&#39;t need to use the &lt;code&gt;^&lt;/code&gt; for any &lt;em&gt;other&lt;/em&gt; &lt;code&gt;apt install&lt;/code&gt; calls, however, only for &lt;code&gt;ubuntu-desktop&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once the process completes, you should reboot the VM with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the VM reboots you should see the graphical login screen.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>longitachi/ZLPhotoBrowser</title>
    <updated>2022-07-24T01:55:37Z</updated>
    <id>tag:github.com,2022-07-24:/longitachi/ZLPhotoBrowser</id>
    <link href="https://github.com/longitachi/ZLPhotoBrowser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wechat-like image picker. Support select normal photos, videos, gif and livePhoto. Support edit image and crop video. 微信样式的图片选择器，支持预览/相册内拍照及录视频、拖拽/滑动选择，编辑图片/视频，支持多语言国际化等功能;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/ZLPhotoBrowser&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/ZLPhotoBrowser.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-supported-E57141.svg?sanitize=true&#34; alt=&#34;SPM supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/longitachi/ZLPhotoBrowser/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/ZLPhotoBrowser.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/longitachi/ZLPhotoBrowser/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/ZLPhotoBrowser.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Language-%20Swift%20-E57141.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/preview_with_title.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://github.com/longitachi/ZLPhotoBrowser/raw/master/README_CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ZLPhotoBrowser is a Wechat-like image picker. Support select normal photos, videos, gif and livePhoto. Support edit image and crop video.&lt;/p&gt; &#xA;&lt;h3&gt;Directory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/longitachi/ZLPhotoBrowser/master/#Features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/longitachi/ZLPhotoBrowser/master/#Requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/longitachi/ZLPhotoBrowser/master/#Usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/longitachi/ZLPhotoBrowser/master/#ChangeLog&#34;&gt;Change Log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/longitachi/ZLPhotoBrowser/master/#Languages&#34;&gt;Languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/longitachi/ZLPhotoBrowser/master/#Installation&#34;&gt;Installation(Support Cocoapods/Carthage/SPM)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/longitachi/ZLPhotoBrowser/master/#Support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/longitachi/ZLPhotoBrowser/master/#DemoEffect&#34;&gt;Demo Effect&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Detailed usage of &lt;code&gt;Swift&lt;/code&gt; and &lt;code&gt;OC&lt;/code&gt;, please refer to &lt;a href=&#34;https://github.com/longitachi/ZLPhotoBrowser/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you only want to use the image edit feature, please move to &lt;a href=&#34;https://github.com/longitachi/ZLImageEditor&#34;&gt;ZLImageEditor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Features&#34;&gt;&lt;/a&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; iOS14 supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Portrait and landscape.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Two framework style.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Preview selection (Support drag and drop).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Library selection (Support sliding selection).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Image/Gif/LivePhoto/Video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customize the maximum number of previews or selection, the maximum and minimum optional duration of the video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customize the number of columns displayed in each row.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Image editor (Draw/Crop/Image sticker/Text sticker/Mosaic/Filter/Adjust(Brightness, Contrast and Saturation)), (Draw color can be customized; Crop ratio can be customized; Filter effect can be customized; You can choose the editing tool you want).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Video editor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom camera.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Selected index.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Selected/unselectable state shadow mask.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; The selected photos are displayed at the bottom of the big picture interface, which can be dragged and sorted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; The camera&#39;s internal photo cell can displays the captured images of the camera.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customize font.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; The color of each part of the framework can be customized (Provide dynamic color can support light/dark mode).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customize images.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you have good needs and suggestions in use, or encounter any bugs, please create an issue and I will reply in time.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Requirements&#34;&gt;&lt;/a&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.0&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.x&lt;/li&gt; &#xA; &lt;li&gt;Xcode 12.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Usage&#34;&gt;&lt;/a&gt;Usage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preview selection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let ps = ZLPhotoPreviewSheet()&#xA;ps.selectImageBlock = { [weak self] (images, assets, isOriginal) in&#xA;    // your code&#xA;}&#xA;ps.showPreview(animate: true, sender: self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Library selection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let ps = ZLPhotoPreviewSheet()&#xA;ps.selectImageBlock = { [weak self] (images, assets, isOriginal) in&#xA;    // your code&#xA;}&#xA;ps.showPhotoLibrary(sender: self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pay attention, you need to add the following key-value pairs in your app&#39;s Info.plist&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// If you don’t add this key-value pair, multiple languages are not supported, and the album name defaults to English&#xA;Localized resources can be mixed   YES&#xA;&#xA;Privacy - Photo Library Usage Description&#xA;&#xA;Privacy - Camera Usage Description&#xA;&#xA;Privacy - Microphone Usage Description&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;ChangeLog&#34;&gt;&lt;/a&gt;Change Log&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/longitachi/ZLPhotoBrowser/raw/master/CHANGELOG.md&#34;&gt;More logs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;● 4.3.5&#xA;  Add:&#xA;    Support custom alert style.&#xA;    Improve the experience of image editor.&#xA;● 4.3.4&#xA;  Fix:&#xA;    Fix a bug of the image editor.&#xA;● 4.3.3&#xA;  Add:&#xA;    Adjust loading progress hud style to make it prettier.&#xA;    Add wrapper for ZLPhotoBrowser compatible types.&#xA;    Support for requesting original images when &#39;allowSelectOriginal = false&#39;.&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Languages&#34;&gt;&lt;/a&gt;Languages&lt;/h3&gt; &#xA;&lt;p&gt;🇨🇳 Chinese, 🇺🇸 English, 🇯🇵 Japanese, 🇫🇷 French, 🇩🇪 German, 🇷🇺 Russian, 🇻🇳 Vietnamese, 🇰🇷 Korean, 🇲🇾 Malay, 🇮🇹 Italian, 🇮🇩 Indonesian, 🇪🇸 Spanish, 🇵🇹 Portuguese, 🇹🇷 Turkish.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Installation&#34;&gt;&lt;/a&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;There are four ways to use ZLPhotoBrowser in your project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;using CocoaPods&lt;/li&gt; &#xA; &lt;li&gt;using Carthage&lt;/li&gt; &#xA; &lt;li&gt;using Swift Package Manager&lt;/li&gt; &#xA; &lt;li&gt;manual install (build frameworks or embed Xcode Project)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;To integrate ZLPhotoBrowser into your Xcode project using CocoaPods, specify it to a target in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;10.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;MyApp&#39; do&#xA;  # your other pod&#xA;  # ...&#xA;  pod &#39;ZLPhotoBrowser&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you cannot find the latest version, you can execute &lt;code&gt;pod repo update&lt;/code&gt; first&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;To integrate ZLPhotoBrowser into your Xcode project using Carthage, specify it in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;longitachi/ZLPhotoBrowser&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command to build the ZLPhotoBrowser framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get an error like &lt;code&gt;Building universal frameworks with common architectures is not possible. The device and simulator slices for &#34;ZLPhotoBrowser&#34; both build for: arm64 Rebuild with --use-xcframeworks to create an xcframework bundle instead.&lt;/code&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage/raw/master/Documentation/Xcode12Workaround.md&#34;&gt;Click this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select File &amp;gt; Swift Packages &amp;gt; Add Package Dependency. Enter &lt;a href=&#34;https://github.com/longitachi/ZLPhotoBrowser.git&#34;&gt;https://github.com/longitachi/ZLPhotoBrowser.git&lt;/a&gt; in the &#34;Choose Package Repository&#34; dialog.&lt;/li&gt; &#xA; &lt;li&gt;In the next page, specify the version resolving rule as &#34;Up to Next Major&#34; with &#34;4.0.9&#34; as its earliest version.&lt;/li&gt; &#xA; &lt;li&gt;After Xcode checking out the source and resolving the version, you can choose the &#34;ZLPhotoBrowser&#34; library and add it to your app target.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;Support&#34;&gt;&lt;/a&gt; Support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/longitachi/ZLPhotoBrowser/master/#&#34;&gt;&lt;strong&gt;★ Star&lt;/strong&gt;&lt;/a&gt; this repo.&lt;/li&gt; &#xA; &lt;li&gt;Support with &lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/aliPay.png&#34; width=&#34;100&#34; height=&#34;125&#34;&gt; or &lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/wechatPay.png&#34; width=&#34;100&#34; height=&#34;125&#34;&gt; or &lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/Paypal.png&#34; width=&#34;150&#34; height=&#34;125&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a id=&#34;DemoEffect&#34;&gt;&lt;/a&gt; Demo Effect&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Selection &lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9.gif&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/%E7%9B%B8%E5%86%8C%E5%86%85%E9%83%A8%E9%80%89%E6%8B%A9.gif&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/%E9%A2%84%E8%A7%88%E5%A4%A7%E5%9B%BE.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Image editor&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/editImage.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Video editor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/editVideo.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi-language&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/%E5%A4%9A%E8%AF%AD%E8%A8%80.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom camera&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/longitachi/ImageFolder/raw/master/ZLPhotoBrowser/introduce.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EFPrefix/EFQRCode</title>
    <updated>2022-07-24T01:55:37Z</updated>
    <id>tag:github.com,2022-07-24:/EFPrefix/EFQRCode</id>
    <link href="https://github.com/EFPrefix/EFQRCode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A better way to operate QR Code in Swift, support iOS, macOS, watchOS and tvOS.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/EFQRCode.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://travis-ci.org/EFPrefix/EFQRCode&#34;&gt; &lt;img src=&#34;https://img.shields.io/travis/EFPrefix/EFQRCode.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/EFPrefix/EFQRCode&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/EFPrefix/EFQRCode/branch/main/graph/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://efprefix.github.io/EFQRCode/&#34;&gt; &lt;img src=&#34;https://efprefix.github.io/EFQRCode/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/SPM-ready-orange.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/EFQRCode&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/EFQRCode.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/EFPrefix/EFQRCode&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FEFPrefix%2FEFQRCode%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;Compatible with all Platforms&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/language-swift-orange.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-efprefix-efqrcode-master&#34;&gt; &lt;img src=&#34;https://codebeat.co/badges/c2ae977c-157a-4cb7-a476-76530e7f292b&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/l/EFQRCode.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://gitter.im/EFQRCode/Lobby&#34;&gt; &lt;img src=&#34;https://img.shields.io/gitter/room/EFPrefix/EFQRCode.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/main/#backers&#34; alt=&#34;sponsors on Open Collective&#34;&gt; &lt;img src=&#34;https://opencollective.com/EFQRCode/backers/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/main/#sponsors&#34; alt=&#34;Sponsors on Open Collective&#34;&gt; &lt;img src=&#34;https://opencollective.com/EFQRCode/sponsors/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/EyreFree777&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/twitter-@EyreFree777-blue.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://weibo.com/eyrefree777&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/weibo-@EyreFree-red.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/icon/MadeWith%3C3.png&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/made%20with-%3C3-orange.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;EFQRCode is a lightweight, pure-Swift library for generating stylized QRCode images with watermark or icon, and for recognizing QRCode from images, inspired by &lt;a href=&#34;https://github.com/sylnsfar/qrcode&#34;&gt;qrcode&lt;/a&gt;. Based on &lt;code&gt;CoreGraphics&lt;/code&gt;, &lt;code&gt;CoreImage&lt;/code&gt;, and &lt;code&gt;ImageIO&lt;/code&gt;, EFQRCode provides you a better way to handle QRCode in your app, no matter if it is on iOS, macOS, watchOS, and/or tvOS. You can integrate EFQRCode through CocoaPods, Carthage, and/or Swift Package Manager.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/EFPrefix/EFQRCode/raw/main/README_CN.md&#34;&gt;中文介绍&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/QRCode5.jpg&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/QRCode6.jpg&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/QRCode7.jpg&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/QRCode8.jpg&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/QRCodeGIF1.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/QRCodeGIF2.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/QRCodeGIF7.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/QRCodeGIF8.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Demo Projects&lt;/h2&gt; &#xA;&lt;h3&gt;TestFlight&lt;/h3&gt; &#xA;&lt;p&gt;You can click the &lt;code&gt;TestFlight&lt;/code&gt; button below to download demo with TestFlight:&lt;/p&gt; &#xA;&lt;a target=&#34;_blank&#34; href=&#34;https://testflight.apple.com/join/LixgpwWt&#34;&gt; &lt;img src=&#34;https://testflight.apple.com/images/testflight-128x128_2x_27.png&#34; width=&#34;128&#34; height=&#34;128&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;App Store&lt;/h3&gt; &#xA;&lt;p&gt;You can click the &lt;code&gt;App Store&lt;/code&gt; button below to download demo, support iOS, tvOS and watchOS:&lt;/p&gt; &#xA;&lt;a target=&#34;_blank&#34; href=&#34;https://itunes.apple.com/app/EFQRCode/id1242337058?mt=8&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/icon/AppStore.jpeg&#34; width=&#34;144&#34; height=&#34;49&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;You can also click the &lt;code&gt;Mac App Store&lt;/code&gt; button below to download demo for macOS:&lt;/p&gt; &#xA;&lt;a target=&#34;_blank&#34; href=&#34;https://itunes.apple.com/app/EFQRCode/id1306793539?mt=8&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/icon/AppStoreMac.png&#34; width=&#34;168.5&#34; height=&#34;49&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;You can also purchase the professional version of our product based on this library from the App Store by clicking on the App Store button below, support iOS:&lt;/p&gt; &#xA;&lt;a target=&#34;_blank&#34; href=&#34;https://itunes.apple.com/app/EFQRCoder/id1242936516?mt=8&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/icon/AppStore.jpeg&#34; width=&#34;144&#34; height=&#34;49&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Compile Demo Manually&lt;/h3&gt; &#xA;&lt;p&gt;To run the example project manually, clone the repo, demos are in the &#39;Examples&#39; folder, remember run command &lt;code&gt;sh Startup.sh&lt;/code&gt; in terminal to get all dependencies first, then open &lt;code&gt;EFQRCode.xcworkspace&lt;/code&gt; with Xcode and select the target you want, run.&lt;/p&gt; &#xA;&lt;p&gt;Or you can run the following command in terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:EFPrefix/EFQRCode.git; cd EFQRCode; sh Startup.sh; open &#39;EFQRCode.xcworkspace&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Needs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 8.0+&lt;br&gt;Swift 3.0+&lt;br&gt;iOS 8.0+ / macOS 10.11+ / tvOS 9.0+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 9.0+&lt;br&gt;Swift 4.0+&lt;br&gt;iOS 8.0+ / macOS 10.11+ / tvOS 9.0+ / watchOS 2.0+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5.x&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 11.1+&lt;br&gt;Swift 5.0+&lt;br&gt;iOS 8.0+ / macOS 10.11+ / tvOS 9.0+ / watchOS 2.0+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;6.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 12.0+&lt;br&gt;&lt;a href=&#34;https://swiftpackageindex.com/EFPrefix/EFQRCode&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FEFPrefix%2FEFQRCode%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;latest Swift&#34;&gt;&lt;/a&gt;&lt;br&gt;iOS 9.0+ / macOS 10.10+ / tvOS 9.0+ / watchOS 2.0+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;EFQRCode is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;EFQRCode&#39;, &#39;~&amp;gt; 6.2.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;&lt;/em&gt;: this &lt;a href=&#34;https://github.com/Carthage/Carthage/raw/master/Documentation/Xcode12Workaround.md&#34;&gt;workaround&lt;/a&gt; is necessary for Carthage to somewhat work in Xcode 12.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate EFQRCode into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;EFPrefix/EFQRCode&#34; ~&amp;gt; 6.2.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; to build the framework and drag the built &lt;code&gt;EFQRCode.framework&lt;/code&gt; into your Xcode project.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the Swift compiler.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding EFQRCode as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/EFPrefix/EFQRCode.git&#34;, .upToNextMinor(from: &#34;6.2.1&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h4&gt;1. Import EFQRCode&lt;/h4&gt; &#xA;&lt;p&gt;Import EFQRCode module where you want to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import EFQRCode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Recognition&lt;/h4&gt; &#xA;&lt;p&gt;A String Array is returned as there might be several QR Codes in a single &lt;code&gt;CGImage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let testImage = UIImage(named: &#34;test.png&#34;)?.cgImage {&#xA;    let codes = EFQRCode.recognize(testImage)&#xA;    if !codes.isEmpty {&#xA;        print(&#34;There are \(codes.count) codes&#34;)&#xA;        for (index, code) in codes.enumerated() {&#xA;            print(&#34;The content of QR Code \(index) is \(code).&#34;)&#xA;        }&#xA;    } else {&#xA;        print(&#34;There is no QR Codes in testImage.&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Generation&lt;/h4&gt; &#xA;&lt;p&gt;Create QR Code image, basic usage:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;content&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;em&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;&lt;/em&gt;, content of QR Code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Width and height of image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Background color of QRCode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;foregroundColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Foreground color of QRCode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;watermark&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Background image of QRCode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let image = EFQRCode.generate(&#xA;    for: &#34;https://github.com/EFPrefix/EFQRCode&#34;,&#xA;    watermark: UIImage(named: &#34;WWF&#34;)?.cgImage&#xA;) {&#xA;    print(&#34;Create QRCode image success \(image)&#34;)&#xA;} else {&#xA;    print(&#34;Create QRCode image failed!&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/sample1.jpg&#34; width=&#34;36%&#34;&gt; &#xA;&lt;h4&gt;4. Generation from GIF&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;EFQRCode.generateGIF&lt;/code&gt; to create GIF QRCode.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Parameter&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;generator&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;em&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;&lt;/em&gt;, an &lt;code&gt;EFQRCodeGenerator&lt;/code&gt; instance with other settings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;em&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;&lt;/em&gt;, encoded input GIF&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;delay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Output QRCode GIF delay, emitted means no change&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;loopCount&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Times looped in GIF, emitted means no change&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let qrCodeData = EFQRCode.generateGIF(&#xA;    using: generator, withWatermarkGIF: data&#xA;) {&#xA;    print(&#34;Create QRCode image success.&#34;)&#xA;} else {&#xA;    print(&#34;Create QRCode image failed!&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get more information from the demo, result will like this:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/assets/QRCodeGIF6.gif&#34; width=&#34;36%&#34;&gt; &#xA;&lt;h4&gt;5. Next&lt;/h4&gt; &#xA;&lt;p&gt;Learn more from &lt;a href=&#34;https://github.com/EFPrefix/EFQRCode/raw/main/USERGUIDE.md&#34;&gt;User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Recommendations&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Please select a high contrast foreground and background color combinations;&lt;/li&gt; &#xA; &lt;li&gt;To improve the definition of QRCode images, increase &lt;code&gt;size&lt;/code&gt;, or scale up using &lt;code&gt;magnification&lt;/code&gt; (instead);&lt;/li&gt; &#xA; &lt;li&gt;Magnification too high／size too large／contents too long may cause failure;&lt;/li&gt; &#xA; &lt;li&gt;It is recommended to test the QRCode image before put it into use;&lt;/li&gt; &#xA; &lt;li&gt;You can contact me if there is any problem, both &lt;code&gt;Issue&lt;/code&gt; and &lt;code&gt;Pull request&lt;/code&gt; are welcome.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;PS of PS: I wish you can click the &lt;code&gt;Star&lt;/code&gt; button if this tool is useful for you, thanks, QAQ...&lt;/p&gt; &#xA;&lt;h2&gt;Other Platforms/Languages&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platforms/Languages&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Objective-C&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/z624821876/YSQRCode&#34;&gt;https://github.com/z624821876/YSQRCode&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/SumiMakito/AwesomeQRCode&#34;&gt;https://github.com/SumiMakito/AwesomeQRCode&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/SumiMakito/Awesome-qr.js&#34;&gt;https://github.com/SumiMakito/Awesome-qr.js&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/SumiMakito/AwesomeQRCode-Kotlin&#34;&gt;https://github.com/SumiMakito/AwesomeQRCode-Kotlin&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/sylnsfar/qrcode&#34;&gt;https://github.com/sylnsfar/qrcode&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://github.com/EFPrefix/EFQRCode/raw/main/.github/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode#contributors&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/contributors.svg?width=890&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;PS: We use &lt;a href=&#34;https://github.com/ApolloZhu/swift_qrcodejs&#34;&gt;QRCodeSwift&lt;/a&gt; to generate QR code on watchOS, thanks to &lt;a href=&#34;https://github.com/ApolloZhu&#34;&gt;ApolloZhu&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;If you think this project has brought you help, you can buy me a cup of coffee. If you like this project and are willing to provide further support for it&#39;s development, you can choose to become &lt;code&gt;Backer&lt;/code&gt; or &lt;code&gt;Sponsor&lt;/code&gt; in &lt;a href=&#34;https://opencollective.com/efqrcode&#34;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/efqrcode#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode#backers&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/backers.svg?width=890&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/efqrcode#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode/sponsor/0/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/sponsor/0/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode/sponsor/1/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/sponsor/1/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode/sponsor/2/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/sponsor/2/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode/sponsor/3/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/sponsor/3/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode/sponsor/4/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/sponsor/4/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode/sponsor/5/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/sponsor/5/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode/sponsor/6/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/sponsor/6/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode/sponsor/7/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/sponsor/7/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode/sponsor/8/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/sponsor/8/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opencollective.com/efqrcode/sponsor/9/website&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/efqrcode/sponsor/9/avatar.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Thanks for your support, 🙏&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks for the help from JetBrains&#39;s &lt;a href=&#34;https://www.jetbrains.com/community/opensource/?from=EFQRCode&#34;&gt;Open Source Support Program&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://www.jetbrains.com/?from=EFQRCode&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/EFPrefix/EFQRCode/ce8982e1858d62ac8b9fecec96f5369d8b1b62c3/logo/jetbrains.svg?sanitize=true&#34; width=&#34;20%&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Apps using EFQRCode&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/blizzard-battle-net&#34; title=&#34;Blizzard Battle.net&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/000/863/841/media/small.png?1506955529&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/brushfire&#34; title=&#34;Brushfire&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/349/312/media/small.png?1552274504&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/826953&#34; title=&#34;Coinomi Wallet&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/154/094/media/small.png?1523038915&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/join&#34; title=&#34;Join - Medical Communication&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/253/338/media/small.png?1530300113&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/korean-air-my&#34; title=&#34;Korean Air My&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/405/909/media/small.png?1631208327&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/mume-vpn&#34; title=&#34;Mume VPN&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/000/880/440/media/small.png?1507339273&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/mymk&#34; title=&#34;myMK&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/142/715/media/small.png?1522686154&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/pilot-speech-translator&#34; title=&#34;Pilot Speech Translator&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/000/531/486/media/small.png?1491242852&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/print-master&#34; title=&#34;Print Master&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/403/413/media/small.png?1628845063&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/promgirl-shop&#34; title=&#34;PromGirl Shop&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/327/819/media/small.png?1547953350&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/qr-code-reader-and-scanner&#34; title=&#34;QR Code Reader &amp;amp; Code Scanner&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/402/590/media/small.png?1628791147&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/rta-cle&#34; title=&#34;RTA CLE&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/405/850/media/small.png?1631207179&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/wifi-ch%C3%B9a&#34; title=&#34;WiFi Chùa&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/000/282/599/media/small.png?1479441667&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/yamibuy-food-drinks-beauty-health-li&#34; title=&#34;Yamibuy-Food&amp;amp; Drinks, Beauty, Health, Li&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/324/148/media/small.png?1546987889&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/%E5%85%B3%E5%85%AB-%E5%85%A8%E6%B0%91%E5%A8%B1%E4%B9%90%E6%98%8E%E6%98%9F%E5%85%AB%E5%8D%A6%E5%A4%B4%E6%9D%A1%E6%96%B0%E9%97%BB%E8%B5%84%E8%AE%AF%E8%A7%86%E9%A2%91%E7%A4%BE%E5%8C%BA&#34; title=&#34;关八-最懂娱乐圈&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/000/613/969/media/small.png?1495232846&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.appsight.io/app/%E7%BA%A2%E8%A2%96%E8%AF%BB%E4%B9%A6&#34; title=&#34;红袖读书&#34;&gt;&lt;img src=&#34;https://d3ixtyf8ei2pcx.cloudfront.net/icons/001/378/223/media/small.png?1555531907&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;p&gt;Part of the pictures in the demo project and guide come from the internet. If there is any infringement of your legitimate rights and interests, please contact us to delete.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Email: &lt;a href=&#34;mailto:eyrefree@eyrefree.org&#34;&gt;eyrefree@eyrefree.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/EFPrefix/EFQRCode/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/License_icon-mit-88x31-2.svg/128px-License_icon-mit-88x31-2.svg.png&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;EFQRCode is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>