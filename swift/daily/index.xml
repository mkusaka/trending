<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-09T01:48:26Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>exyte/Chat</title>
    <updated>2023-11-09T01:48:26Z</updated>
    <id>tag:github.com,2023-11-09:/exyte/Chat</id>
    <link href="https://github.com/exyte/Chat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A SwiftUI Chat UI framework with fully customizable message cells and a built-in media picker&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://exyte.com/&#34;&gt;&#xA;  &lt;picture&gt;&#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/exyte/media/master/common/header-dark.png&#34;&gt;&#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/exyte/media/master/common/header-light.png&#34;&gt;&#xA;  &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://exyte.com/&#34;&gt;&#xA;  &lt;picture&gt;&#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/exyte/media/master/common/our-site-dark.png&#34; width=&#34;80&#34; height=&#34;16&#34;&gt;&#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/exyte/media/master/common/our-site-light.png&#34; width=&#34;80&#34; height=&#34;16&#34;&gt;&#xA;  &lt;/picture&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://twitter.com/exyteHQ&#34;&gt;&#xA;  &lt;picture&gt;&#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/exyte/media/master/common/twitter-dark.png&#34; width=&#34;74&#34; height=&#34;16&#34;&gt;&#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/exyte/media/master/common/twitter-light.png&#34; width=&#34;74&#34; height=&#34;16&#34;&gt; &#xA;  &lt;/picture&gt;&lt;/a&gt; &lt;a href=&#34;https://exyte.com/contacts&#34;&gt;&#xA;  &lt;picture&gt;&#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/exyte/media/master/common/get-in-touch-dark.png&#34; width=&#34;128&#34; height=&#34;24&#34; align=&#34;right&#34;&gt;&#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/exyte/media/master/common/get-in-touch-light.png&#34; width=&#34;128&#34; height=&#34;24&#34; align=&#34;right&#34;&gt;&#xA;  &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Chat&lt;/th&gt; &#xA;   &lt;th&gt;Media&lt;/th&gt; &#xA;   &lt;th&gt;Audio Messages&lt;/th&gt; &#xA;   &lt;th&gt;Extra&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/exyte/Chat/assets/1358172/baf0167f-b3e0-4df2-bd3b-b6b1c4ee385d&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/exyte/Chat/assets/1358172/d62876ef-4475-4f07-933a-9d9366b02e28&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/exyte/Chat/assets/1358172/ebd2040d-1cf0-4066-9391-592af1426571&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/exyte/Chat/assets/1358172/053bcd73-0db7-44da-abd6-0a57f0f88a4b&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;/p&gt;&#xA;&lt;h1&gt;Chat&lt;/h1&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt;&#xA;&lt;h4&gt;A SwiftUI Chat UI framework with fully customizable message cells and a built-in media picker&lt;/h4&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/exyte/Chat?label=Version&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://swiftpackageindex.com/exyte/Chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fexyte%2FChat%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/exyte/Chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fexyte%2FChat%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/exyte/Chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-Compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;SPM Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/ExyteChat&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/cocoapods-Compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Cocoapods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-black.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Displays your messages with pagination and allows you to create and &#34;send&#34; new messages (sending means calling a closure since user will be the one providing actual API calls)&lt;/li&gt; &#xA; &lt;li&gt;Allows you to pass a custom view builder for messages and input views&lt;/li&gt; &#xA; &lt;li&gt;Has a built-in photo and video library/camera picker for multiple media asset selection&lt;/li&gt; &#xA; &lt;li&gt;Can display a fullscreen menu on long press a message cell (automatically shows scroll for big messages)&lt;/li&gt; &#xA; &lt;li&gt;Supports &#34;reply to message&#34; via message menu. Remove and edit are &lt;strong&gt;coming soon&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports voice recording, video/photo and text. More content types are &lt;strong&gt;coming soon&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Create a chat view like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@State var messages: [Message] = []&#xA;&#xA;var body: some View {&#xA;    ChatView(messages: messages) { draft in&#xA;        yourViewModel.send(draft: draft)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where:&lt;br&gt; &lt;code&gt;messages&lt;/code&gt; - list of messages to display&lt;br&gt; &lt;code&gt;didSendMessage&lt;/code&gt; - a closure which is called when the user presses the send button&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Message&lt;/code&gt; is a type that &lt;code&gt;Chat&lt;/code&gt; uses for the internal implementation. In the code above it expects the user to provide a list of &lt;code&gt;Message&lt;/code&gt; structs, and it returns a &lt;code&gt;DraftMessage&lt;/code&gt; in the &lt;code&gt;didSendMessage&lt;/code&gt; closure. You can map it both ways to your own &lt;code&gt;Message&lt;/code&gt; model that your API expects.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;You may customize message cells like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ChatView(messages: viewModel.messages) { draft in&#xA;    viewModel.send(draft: draft)&#xA;} messageBuilder: { message, positionInGroup, showAttachmentClosure in&#xA;    VStack {&#xA;        Text(message.text)&#xA;        if !message.attachments.isEmpty {&#xA;            ForEach(message.attachments, id: \.id) { at in&#xA;                AsyncImage(url: at.thumbnail)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;messageBuilder&lt;/code&gt;&#39;s parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;message&lt;/code&gt; - the message containing user info, attachments, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;positionInGroup&lt;/code&gt; - the position of the message in its continuous collection of messages from the same user&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showAttachmentClosure&lt;/code&gt; - you can pass an attachment to this closure to use ChatView&#39;s fullscreen media viewer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may customize the input view (a text field with buttons at the bottom) like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ChatView(messages: viewModel.messages) { draft in&#xA;    viewModel.send(draft: draft)&#xA;} inputViewBuilder: { textBinding, attachments, state, style, actionClosure, dismissKeyboardClosure in&#xA;    Group {&#xA;        switch style {&#xA;        case .message: // input view on chat screen&#xA;            VStack {&#xA;                HStack {&#xA;                    Button(&#34;Send&#34;) { actionClosure(.send) }&#xA;                    Button(&#34;Attach&#34;) { actionClosure(.photo) }&#xA;                }&#xA;                TextField(&#34;Write your message&#34;, text: textBinding)&#xA;            }&#xA;        case .signature: // input view on photo selection screen&#xA;            VStack {&#xA;                HStack {&#xA;                    Button(&#34;Send&#34;) { actionClosure(.send) }&#xA;                }&#xA;                TextField(&#34;Compose a signature for photo&#34;, text: textBinding)&#xA;                    .background(Color.green)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;inputViewBuilder&lt;/code&gt;&#39;s parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;textBinding&lt;/code&gt; to bind your own TextField&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;attachments&lt;/code&gt; is a struct containing photos, videos, recordings and a message you are replying to&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;state&lt;/code&gt; - the state of the input view that is controled by the library automatically if possible or through your calls of &lt;code&gt;actionClosure&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;style&lt;/code&gt; - &lt;code&gt;.message&lt;/code&gt; or &lt;code&gt;.signature&lt;/code&gt; (the chat screen or the photo selection screen)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;actionClosure&lt;/code&gt; is called on taps on your custom buttons. For example, call &lt;code&gt;actionClosure(.send)&lt;/code&gt; if you want to send your message, then the library will reset the text and attachments and call the &lt;code&gt;didSendMessage&lt;/code&gt; sending closure&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dismissKeyboardClosure&lt;/code&gt; - call this to dismiss keyboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported content types&lt;/h2&gt; &#xA;&lt;p&gt;This library allows to send the following content in messages in any combination:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Text with/without markdown&lt;/li&gt; &#xA; &lt;li&gt;Photo/video&lt;/li&gt; &#xA; &lt;li&gt;Audio recording&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Coming soon:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;User&#39;s location&lt;/li&gt; &#xA; &lt;li&gt;Documents&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modifiers&lt;/h3&gt; &#xA;&lt;p&gt;If you are not using your own &lt;code&gt;messageBuilder&lt;/code&gt;:&lt;br&gt; &lt;code&gt;avatarSize&lt;/code&gt; - the default avatar is a circle, you can specify its diameter here&lt;br&gt; &lt;code&gt;tapAvatarClosure&lt;/code&gt; - closure to call on avatar tap&lt;br&gt; &lt;code&gt;messageUseMarkdown&lt;/code&gt; - whether the default message cell uses markdown&lt;br&gt; &lt;code&gt;mediaPickerSelectionParameters&lt;/code&gt; - a struct holding MediaPicker selection parameters (mediaType, selectionStyle, etc.) &lt;code&gt;assetsPickerLimit&lt;/code&gt; - the maximum media count that the user can select in the media picker&lt;br&gt; &lt;code&gt;enableLoadMore(offset: Int, handler: @escaping ChatPaginationClosure)&lt;/code&gt; - when user scrolls to &lt;code&gt;offset&lt;/code&gt;-th message from the end, call the handler function, so the user can load more messages&lt;br&gt; &lt;code&gt;chatNavigation(title: String, status: String? = nil, cover: URL? = nil)&lt;/code&gt; - pass the info for the Chat&#39;s navigation bar&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/exyte/media/master/Chat/pic2.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;There are 2 example projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One has a simple bot posting random text/media messages every 2 seconds. It has no back end and no local storage. Every new start is clean and fresh.&lt;/li&gt; &#xA; &lt;li&gt;Another has an integration with Firestore data base. It has all the necessary back end support, including storing media and audio messages, unread messages counters, etc. You&#39;ll have to create your own Firestore app and DB. Also replace &lt;code&gt;GoogleService-Info&lt;/code&gt; with your own. After that you can test on multiple sims/devices.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Create your firestore app &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;https://console.firebase.google.com/&lt;/a&gt; Create firesote database (for light weight text data) &lt;a href=&#34;https://firebase.google.com/docs/firestore/manage-data/add-data&#34;&gt;https://firebase.google.com/docs/firestore/manage-data/add-data&lt;/a&gt; Create cloud firestore database (for images and voice recordings) &lt;a href=&#34;https://firebase.google.com/docs/storage/web/start&#34;&gt;https://firebase.google.com/docs/storage/web/start&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;To try out the Chat examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repo &lt;code&gt;git clone git@github.com:exyte/Chat.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open terminal and run &lt;code&gt;cd &amp;lt;ChatRepo&amp;gt;/Example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wait for SPM to finish downloading packages&lt;/li&gt; &#xA; &lt;li&gt;Run it!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/exyte/Chat.git&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;ExyteChat&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;Exyte/Chat&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 16+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 14+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Our other open source SwiftUI libraries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exyte/PopupView&#34;&gt;PopupView&lt;/a&gt; - Toasts and popups library&lt;br&gt; &lt;a href=&#34;https://github.com/exyte/Grid&#34;&gt;Grid&lt;/a&gt; - The most powerful Grid container&lt;br&gt; &lt;a href=&#34;https://github.com/exyte/ScalingHeaderScrollView&#34;&gt;ScalingHeaderScrollView&lt;/a&gt; - A scroll view with a sticky header which shrinks as you scroll&lt;br&gt; &lt;a href=&#34;https://github.com/exyte/AnimatedTabBar&#34;&gt;AnimatedTabBar&lt;/a&gt; - A tabbar with number of preset animations&lt;br&gt; &lt;a href=&#34;https://github.com/exyte/mediapicker&#34;&gt;MediaPicker&lt;/a&gt; - Customizable media picker&lt;br&gt; &lt;a href=&#34;https://github.com/exyte/ConcentricOnboarding&#34;&gt;ConcentricOnboarding&lt;/a&gt; - Animated onboarding flow&lt;br&gt; &lt;a href=&#34;https://github.com/exyte/FloatingButton&#34;&gt;FloatingButton&lt;/a&gt; - Floating button menu&lt;br&gt; &lt;a href=&#34;https://github.com/exyte/ActivityIndicatorView&#34;&gt;ActivityIndicatorView&lt;/a&gt; - A number of animated loading indicators&lt;br&gt; &lt;a href=&#34;https://github.com/exyte/ProgressIndicatorView&#34;&gt;ProgressIndicatorView&lt;/a&gt; - A number of animated progress indicators&lt;br&gt; &lt;a href=&#34;https://github.com/exyte/SVGView&#34;&gt;SVGView&lt;/a&gt; - SVG parser&lt;br&gt; &lt;a href=&#34;https://github.com/exyte/LiquidSwipe&#34;&gt;LiquidSwipe&lt;/a&gt; - Liquid navigation animation&lt;/p&gt;</summary>
  </entry>
</feed>