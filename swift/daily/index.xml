<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:43:39Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>krzysztofzablocki/Swift-Macros</title>
    <updated>2023-10-22T01:43:39Z</updated>
    <id>tag:github.com,2023-10-22:/krzysztofzablocki/Swift-Macros</id>
    <link href="https://github.com/krzysztofzablocki/Swift-Macros" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A curated list of awesome Swift Macros&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Macros &lt;span&gt;ðŸš€&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;256&#34; height=&#34;256&#34; src=&#34;https://github.com/krzysztofzablocki/Swift-Macros/raw/d218dea43b205e1c002feb28610d58d2c4d105dc/Icon.png&#34;&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;Swift Macros have brought in a new wave of possibilities. The aim of this project is to curate a list of community-created Macros and associated learning resources.&lt;/p&gt; &#xA;&lt;p&gt;A lot of use-cases my &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;Sourcery&lt;/a&gt; covered before can now be implemented by Swift Macros.&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Learning Resources &lt;span&gt;ðŸ“š&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swift-ast-explorer.com/&#34;&gt;Swift AST Explorer&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is extremely helpful when working with &lt;a href=&#34;https://github.com/apple/swift-syntax&#34;&gt;SwiftSyntax&lt;/a&gt;, I used this when writing &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;Sourcery&lt;/a&gt; parser and you can leverage it to build your own Macros.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Apple:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Dive into Swift Macros with these WWDC sessions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2023-10166&#34;&gt;Write Swift Macros&lt;/a&gt;: An introductory session on Macros, their roles, and workings with a basic example.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2023-10167&#34;&gt;Expand Swift Macros&lt;/a&gt;: A deeper exploration into crafting your Macros and testing their functionality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other Apple Resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/macros&#34;&gt;Macros&lt;/a&gt;: The Official Step-by-Step Guide to Using Macros for Compile-Time Code Generation in Swift.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-syntax/tree/main/Examples/Sources/MacroExamples&#34;&gt;Example Swift Macros&lt;/a&gt;: Check out real-world examples from Apple, like &lt;code&gt;@AddCompletionHandler&lt;/code&gt; and &lt;code&gt;@AddAsync&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Community Blogs&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.avanderlee.com/swift/macros/&#34;&gt;Swift Macros by SwiftLee&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Antoine goes over the introduction of what Macros are and how you can build your own one with an example.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.leonifrancesco.com/articles/swift-macros&#34;&gt;How to Create Swift Macros in Xcode 15&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Francesco goes over creating your first macro with testing and some interesting tidbits.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/dev-genius/exploring-new-swift-macros-api-245e0b1f7c8d&#34;&gt;Exploring Swift Macros&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sergey goes over creating a macro for a memberwise initaliser step by step with tests and convenience methods for SwiftSyntax&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://otbivnoe.ru/2023/06/13/Automating-RawRepresentable-Conformance-with-Swift-Macros.html&#34;&gt;Automating RawRepresentable Conformance with Swift Macros&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Nikita goes over creating a macro for automating the String RawRepresentable conformance.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@tim_wang/setup-to-develop-swift-macros-68d8fe2fea59&#34;&gt;Setup to develop Swift Macros&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A step-by-step tutorial to develop Swift Macros.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Macros &lt;span&gt;ðŸ’»&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;SwiftUI&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Wouter01/SwiftUI-Macros/tree/main&#34;&gt;EnvironmentValues &amp;amp; EnvironmentValue&lt;/a&gt;: Bypass boilerplate code and swiftly support new SwiftUI Environment Keys and Values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukepistrol/SFSymbolsMacro&#34;&gt;SFSymbols Macro&lt;/a&gt;: A Swift Macro for &#34;type-safe&#34; SF Symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zijievv/sf-symbols-generator&#34;&gt;SF Symbols Generator&lt;/a&gt;: A Swift macro generating type-safe SF Symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrylmz/Prototype&#34;&gt;Prototype (WIP)&lt;/a&gt;: Prototype generates SwiftUI Forms and Views for data structures and classes, designed to complement SwiftData Models seamlessly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alvmo/HexColors&#34;&gt;HexColors&lt;/a&gt;: Swift Macros for validating hex colors from string and hexadecimal integer literals.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ryu0118/CodingKeysMacro&#34;&gt;Coding Keys&lt;/a&gt;: Effortlessly generate CodingKeys for converting &lt;code&gt;snake_case&lt;/code&gt; to &lt;code&gt;lowerCamelCase&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sasha-riabchuk/CodingKeysMacro-swift&#34;&gt;Coding Keys&lt;/a&gt;: A Swift Macro for automating CodingKeys creation in Codable structs. Supports custom string mappings for properties.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zijievv/CodingKeysGenerator&#34;&gt;Coding Keys&lt;/a&gt;: Swift macros generating customizable &lt;code&gt;CodingKeys&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dziobaczy/SwiftBuilderMacro&#34;&gt;Builder pattern&lt;/a&gt;: Apply the &lt;a href=&#34;https://refactoring.guru/design-patterns/builder&#34;&gt;Builder Pattern&lt;/a&gt; with ease by generating a &lt;code&gt;Builder&lt;/code&gt; helper class, mimicking stored properties of the associated struct.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alschmut/StructBuilderMacro&#34;&gt;Struct Builder Macro&lt;/a&gt;: An attached macro that produces a peer struct which implements the builder pattern. This allows the creation of the struct with minimal effort using default values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unixzii/EnhancedMirror&#34;&gt;EnhancedMirror&lt;/a&gt;: An experimental Mirror alternative that utilizes Swift Macros for static reflection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SwiftyLab/MetaCodable&#34;&gt;MetaCodable&lt;/a&gt;: Generates &lt;code&gt;Codable&lt;/code&gt; implementation with following features: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allows custom &lt;code&gt;CodingKey&lt;/code&gt; value declaration per variable, instead of requiring you to write for all fields.&lt;/li&gt; &#xA;   &lt;li&gt;Allows to create flattened model for nested &lt;code&gt;CodingKey&lt;/code&gt; values.&lt;/li&gt; &#xA;   &lt;li&gt;Allows to create composition of multiple &lt;code&gt;Codable&lt;/code&gt; types.&lt;/li&gt; &#xA;   &lt;li&gt;Allows to provide default value &lt;strong&gt;in case of decoding failures&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Generates member-wise initializer &lt;strong&gt;considering the default values&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Allows to create custom decoding/encoding strategies.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leedh2004/SealedMacro&#34;&gt;Sealed&lt;/a&gt;: Parsing easily Sealed Class JSON Model on Server. (ex. kotlin server)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mikhailmaslo/macro-codable-kit&#34;&gt;MacroCodableKit&lt;/a&gt;: Fully self-sufficient &lt;code&gt;Codable&lt;/code&gt; kit: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implements OpenAPI &lt;a href=&#34;https://spec.openapis.org/oas/v3.1.0#composition-and-inheritance-polymorphism&#34;&gt;allOf&lt;/a&gt; and &lt;a href=&#34;https://spec.openapis.org/oas/v3.1.0#fixed-fields-20&#34;&gt;oneOf&lt;/a&gt; specs&lt;/li&gt; &#xA;   &lt;li&gt;Adjusts coding keys with a simple &lt;code&gt;@CodingKey&lt;/code&gt; annotation&lt;/li&gt; &#xA;   &lt;li&gt;Decodes arrays and dictionaries in a safe manner with &lt;code&gt;@CustomCoding(SafeDecoding)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Has built-in per-property &lt;code&gt;Codable&lt;/code&gt; strategies and is extendible for new ones.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dependency Injection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shackley/swift-blade&#34;&gt;swift-blade&lt;/a&gt;: A macro powered dependency injection framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/renato-iar/MDI&#34;&gt;MDI&lt;/a&gt;: High performance dependency injection framework.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kishikawakatsumi/swift-power-assert&#34;&gt;Power Assert&lt;/a&gt;: Adds assertions that can automatically produce information about the values being evaluated, and present it in an easily digestible form.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Matejkob/swift-spyable&#34;&gt;Spyable&lt;/a&gt;: A Swift macro that simplifies and automates the process of creating spies for testing. Using the &lt;code&gt;@Spyable&lt;/code&gt; annotation on a protocol, the macro generates a spy class that implements the same interface as the protocol and keeps track of interactions with its methods and properties.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MetalheadSanya/swift-mock&#34;&gt;SwiftMock&lt;/a&gt;: A Swift framework that simplifies and automates the process of creating mock objects for testing. Using the &lt;code&gt;@Mock&lt;/code&gt; macro on a protocol generates Mock class. You can stub methods and properties, verifying mock calls.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ailtonvivaz/swift-request&#34;&gt;SwiftRequest&lt;/a&gt;: SwiftRequest is a lightweight, type-safe HTTP client for Swift, streamlining the construction and execution of HTTP request build on top of Macros.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joshuawright11/papyrus&#34;&gt;Papyrus&lt;/a&gt;: A type-safe, protocol based HTTP client - turn your APIs into Swift protocols. Includes first-class testing support with out of the box mocking.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Enums&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fruitcoder/extract-case-value&#34;&gt;ExtractCaseValue&lt;/a&gt;: A Swift macro that extracts associated values from enum cases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Misc&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IanKeen/MacroKit&#34;&gt;MacroKit&lt;/a&gt;: A collection of macros including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;@PublicInit&lt;/code&gt;: Generate public memberwise init&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@GenerateMock&lt;/code&gt;: Create a mock object for testing from a protocol&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@KeyPathIterable&lt;/code&gt;: Like &lt;code&gt;CaseIterable&lt;/code&gt; but for available keypaths on a type&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@StaticMemberIterable&lt;/code&gt;: Like &lt;code&gt;CaseIterable&lt;/code&gt; but for available static members on a type&lt;/li&gt; &#xA;   &lt;li&gt;More to come...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LeonardoCardoso/InitMacro&#34;&gt;InitMacro&lt;/a&gt;: A Swift Macro implementation that generates initializers for classes and structs with support for default values, wildcards and access control.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p-x9/AssociatedObject&#34;&gt;AssociatedObject&lt;/a&gt;: A Swift Macro for adding stored properties in Extension to classes defined in external modules, etc.&lt;br&gt; (This is implemented by wrapping &lt;code&gt;objc_getAssociatedObject&lt;/code&gt;/&lt;code&gt;objc_setAssociatedObject&lt;/code&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/syt2/AssociatedObjectMacro&#34;&gt;AssociatedObjectMacro&lt;/a&gt;: A Swift Macro for convenient declaration of variables in class extensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p-x9/AliasMacro&#34;&gt;AliasMacro&lt;/a&gt;: A Swift Macro for defining aliases for types, functions, or variables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bannzai/UtilityType&#34;&gt;UtilityType&lt;/a&gt;: UtilityType is an innovative library designed to realize TypeScript&#39;s UtilityTypes in Swift. See more details: &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/utility-types.html&#34;&gt;https://www.typescriptlang.org/docs/handbook/utility-types.html&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;@Partial&lt;/code&gt;,&lt;code&gt;@Required&lt;/code&gt;: Constructs a type with all properties set to optional(&lt;code&gt;@Partial&lt;/code&gt;) or require(&lt;code&gt;@Required&lt;/code&gt;). This utility will return a type that represents all subsets of a given type.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@Pick&lt;/code&gt;,&lt;code&gt;@Omit&lt;/code&gt;: Constructs a type by picking(&lt;code&gt;@Pick&lt;/code&gt;) or removing(&lt;code&gt;@Omit&lt;/code&gt;) the set of specific properties keys (only string literal) from attached Type.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@Exclude&lt;/code&gt;,&lt;code&gt;@Extract&lt;/code&gt;: Constructs a type by excluding(&lt;code&gt;@Exclude&lt;/code&gt;) or extracting(&lt;code&gt;@Extract&lt;/code&gt;) from enum all cases.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@Parameters&lt;/code&gt;: Constructs a tuple type from the types used in the parameters of a function type.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;@ReturnType&lt;/code&gt;: Constructs a type consisting of the return type of function.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/collisionspace/ReuseIdentifierMacro&#34;&gt;Reuse Identifier&lt;/a&gt;: A Reuse Identifier Macro that is useful in generation of a reuse id for your UICollectionViewCells and UITableViewCells&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShenghaiWang/SwiftMacros&#34;&gt;SwiftMacros collection&lt;/a&gt;: A practical collection of Swift Macros that help code correctly and smartly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WilhelmOks/ModifiedCopyMacro&#34;&gt;ModifiedCopyMacro&lt;/a&gt;: A Swift macro for making inline copies of a struct by modifying a property.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dcard/DictionaryLiteralShorthandMacro&#34;&gt;DictionaryLiteralShorthandMacro&lt;/a&gt;: A Swfit macro for creating dictionary literals with keys as &#34;string representations of corresponding variable names&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yume190/TemporaryVariable&#34;&gt;TemporaryVariable&lt;/a&gt;: &lt;code&gt;TemporaryVariable&lt;/code&gt; provide a macro &lt;code&gt;#info {...}&lt;/code&gt;. It capture most function calls and assign them to temporary variables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ADiks09/Localizable&#34;&gt;Localizable&lt;/a&gt;: &lt;code&gt;Localizable&lt;/code&gt; A macro that produces variables and methods, for your localization files. From the enumeration keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/renato-iar/SafeDecoding&#34;&gt;SafeDecoding&lt;/a&gt;: &lt;code&gt;SafeDecoding&lt;/code&gt; A macro that implements failable decoding via custom initializer; allows auto-conformance to `Decodable`` and per-property opt-out.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Take part in this exciting evolution in Swift. Your contributions are most welcome!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>