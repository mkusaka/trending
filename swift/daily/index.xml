<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T01:55:07Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>onevcat/Kingfisher</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/onevcat/Kingfisher</id>
    <link href="https://github.com/onevcat/Kingfisher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight, pure-Swift library for downloading and caching images from the web.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/logo.png&#34; alt=&#34;Kingfisher&#34; title=&#34;Kingfisher&#34; width=&#34;557&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/onevcat/Kingfisher/actions?query=workflow%3Abuild&#34;&gt;&lt;img src=&#34;https://github.com/onevcat/kingfisher/workflows/build/badge.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kingfisher.onevcat.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-Doc-DE5C43.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Kingfisher&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Kingfisher.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Kingfisher.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kingfisher.onevcat.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Kingfisher.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Kingfisher is a powerful, pure-Swift library for downloading and caching images from the web. It provides you a chance to use a pure-Swift way to work with remote images in your next app.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Asynchronous image downloading and caching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Loading image from either &lt;code&gt;URLSession&lt;/code&gt;-based networking or local provided data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Useful image processors and filters provided.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple-layer hybrid cache for both memory and disk.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fine control on cache behavior. Customizable expiration date and size limit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cancelable downloading and auto-reusing previous downloaded content to improve performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Independent components. Use the downloader, caching system, and image processors separately as you need.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prefetching images and showing them from the cache to boost your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; View extensions for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;NSImageView&lt;/code&gt;, &lt;code&gt;NSButton&lt;/code&gt; and &lt;code&gt;UIButton&lt;/code&gt; to directly set an image from a URL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built-in transition animation when setting images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customizable placeholder and indicator while loading images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extensible image processing and image format easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Low Data Mode support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SwiftUI support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Kingfisher 101&lt;/h3&gt; &#xA;&lt;p&gt;The simplest use-case is setting an image to an image view with the &lt;code&gt;UIImageView&lt;/code&gt; extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Kingfisher&#xA;&#xA;let url = URL(string: &#34;https://example.com/image.png&#34;)&#xA;imageView.kf.setImage(with: url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kingfisher will download the image from &lt;code&gt;url&lt;/code&gt;, send it to both memory cache and disk cache, and display it in &lt;code&gt;imageView&lt;/code&gt;. When you set with the same URL later, the image will be retrieved from the cache and shown immediately.&lt;/p&gt; &#xA;&lt;p&gt;It also works if you use SwiftUI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {&#xA;    KFImage(URL(string: &#34;https://example.com/image.png&#34;)!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;A More Advanced Example&lt;/h3&gt; &#xA;&lt;p&gt;With the powerful options, you can do hard tasks with Kingfisher in a simple way. For example, the code below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Downloads a high-resolution image.&lt;/li&gt; &#xA; &lt;li&gt;Downsamples it to match the image view size.&lt;/li&gt; &#xA; &lt;li&gt;Makes it round cornered with a given radius.&lt;/li&gt; &#xA; &lt;li&gt;Shows a system indicator and a placeholder image while downloading.&lt;/li&gt; &#xA; &lt;li&gt;When prepared, it animates the small thumbnail image with a &#34;fade in&#34; effect.&lt;/li&gt; &#xA; &lt;li&gt;The original large image is also cached to disk for later use, to get rid of downloading it again in a detail view.&lt;/li&gt; &#xA; &lt;li&gt;A console log is printed when the task finishes, either for success or failure.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let url = URL(string: &#34;https://example.com/high_resolution_image.png&#34;)&#xA;let processor = DownsamplingImageProcessor(size: imageView.bounds.size)&#xA;             |&amp;gt; RoundCornerImageProcessor(cornerRadius: 20)&#xA;imageView.kf.indicatorType = .activity&#xA;imageView.kf.setImage(&#xA;    with: url,&#xA;    placeholder: UIImage(named: &#34;placeholderImage&#34;),&#xA;    options: [&#xA;        .processor(processor),&#xA;        .scaleFactor(UIScreen.main.scale),&#xA;        .transition(.fade(1)),&#xA;        .cacheOriginalImage&#xA;    ])&#xA;{&#xA;    result in&#xA;    switch result {&#xA;    case .success(let value):&#xA;        print(&#34;Task done for: \(value.source.url?.absoluteString ?? &#34;&#34;)&#34;)&#xA;    case .failure(let error):&#xA;        print(&#34;Job failed: \(error.localizedDescription)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is a common situation I can meet in my daily work. Think about how many lines you need to write without Kingfisher!&lt;/p&gt; &#xA;&lt;h3&gt;Method Chaining&lt;/h3&gt; &#xA;&lt;p&gt;If you are not a fan of the &lt;code&gt;kf&lt;/code&gt; extension, you can also prefer to use the &lt;code&gt;KF&lt;/code&gt; builder and chained the method invocations. The code below is doing the same thing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Use `kf` extension&#xA;imageView.kf.setImage(&#xA;    with: url,&#xA;    placeholder: placeholderImage,&#xA;    options: [&#xA;        .processor(processor),&#xA;        .loadDiskFileSynchronously,&#xA;        .cacheOriginalImage,&#xA;        .transition(.fade(0.25)),&#xA;        .lowDataMode(.network(lowResolutionURL))&#xA;    ],&#xA;    progressBlock: { receivedSize, totalSize in&#xA;        // Progress updated&#xA;    },&#xA;    completionHandler: { result in&#xA;        // Done&#xA;    }&#xA;)&#xA;&#xA;// Use `KF` builder&#xA;KF.url(url)&#xA;  .placeholder(placeholderImage)&#xA;  .setProcessor(processor)&#xA;  .loadDiskFileSynchronously()&#xA;  .cacheMemoryOnly()&#xA;  .fade(duration: 0.25)&#xA;  .lowDataModeSource(.network(lowResolutionURL))&#xA;  .onProgress { receivedSize, totalSize in  }&#xA;  .onSuccess { result in  }&#xA;  .onFailure { error in }&#xA;  .set(to: imageView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And even better, if later you want to switch to SwiftUI, just change the &lt;code&gt;KF&lt;/code&gt; above to &lt;code&gt;KFImage&lt;/code&gt;, and you&#39;ve done:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    var body: some View {&#xA;        KFImage.url(url)&#xA;          .placeholder(placeholderImage)&#xA;          .setProcessor(processor)&#xA;          .loadDiskFileSynchronously()&#xA;          .cacheMemoryOnly()&#xA;          .fade(duration: 0.25)&#xA;          .lowDataModeSource(.network(lowResolutionURL))&#xA;          .onProgress { receivedSize, totalSize in  }&#xA;          .onSuccess { result in  }&#xA;          .onFailure { error in }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Learn More&lt;/h3&gt; &#xA;&lt;p&gt;To learn the use of Kingfisher by more examples, take a look at the well-prepared &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet&#34;&gt;Cheat Sheet&lt;/a&gt;. There we summarized the most common tasks in Kingfisher, you can get a better idea of what this framework can do. There are also some performance tips, remember to check them too.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 12.0+ / macOS 10.14+ / tvOS 12.0+ / watchOS 5.0+ (if you use only UIKit/AppKit)&lt;/li&gt; &#xA; &lt;li&gt;iOS 14.0+ / macOS 11.0+ / tvOS 14.0+ / watchOS 7.0+ (if you use it in SwiftUI)&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you need to support from iOS 10 (UIKit/AppKit) or iOS 13 (SwiftUI), use Kingfisher version 6.x. But it won&#39;t work with Xcode 13.0 and Xcode 13.1 &lt;a href=&#34;https://github.com/onevcat/Kingfisher/issues/1802&#34;&gt;#1802&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you need to use Xcode 13.0 and 13.1 but cannot upgrade to v7, use the &lt;code&gt;version6-xcode13&lt;/code&gt; branch. However, you have to drop iOS 10 support due to another Xcode 13 bug.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;UIKit&lt;/th&gt; &#xA;    &lt;th&gt;SwiftUI&lt;/th&gt; &#xA;    &lt;th&gt;Xcode&lt;/th&gt; &#xA;    &lt;th&gt;Kingfisher&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;iOS 10+&lt;/td&gt; &#xA;    &lt;td&gt;iOS 13+&lt;/td&gt; &#xA;    &lt;td&gt;12&lt;/td&gt; &#xA;    &lt;td&gt;~&amp;gt; 6.3.1&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;iOS 11+&lt;/td&gt; &#xA;    &lt;td&gt;iOS 13+&lt;/td&gt; &#xA;    &lt;td&gt;13&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;version6-xcode13&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;iOS 12+&lt;/td&gt; &#xA;    &lt;td&gt;iOS 14+&lt;/td&gt; &#xA;    &lt;td&gt;13&lt;/td&gt; &#xA;    &lt;td&gt;~&amp;gt; 7.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;A detailed guide for installation can be found in &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Installation-Guide&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;https://github.com/onevcat/Kingfisher.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Up to Next Major&#34; with &#34;7.0.0&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;12.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;MyApp&#39; do&#xA;  pod &#39;Kingfisher&#39;, &#39;~&amp;gt; 7.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;onevcat/Kingfisher&#34; ~&amp;gt; 7.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Migrating&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-7.0-Migration-Guide&#34;&gt;Kingfisher 7.0 Migration&lt;/a&gt; - Kingfisher 7.x is NOT fully compatible with the previous version. However, changes should be trivial or not required at all. Please follow the &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-7.0-Migration-Guide&#34;&gt;migration guide&lt;/a&gt; when you prepare to upgrade Kingfisher in your project.&lt;/p&gt; &#xA;&lt;p&gt;If you are using an even earlier version, see the guides below to know the steps for migrating.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-6.0-Migration-Guide&#34;&gt;Kingfisher 6.0 Migration&lt;/a&gt; - Kingfisher 6.x is NOT fully compatible with the previous version. However, the migration is not difficult. Depending on your use cases, it may take no effect or several minutes to modify your existing code for the new version. Please follow the &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-6.0-Migration-Guide&#34;&gt;migration guide&lt;/a&gt; when you prepare to upgrade Kingfisher in your project.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-5.0-Migration-Guide&#34;&gt;Kingfisher 5.0 Migration&lt;/a&gt; - If you are upgrading to Kingfisher 5.x from 4.x, please read this for more information.&lt;/li&gt; &#xA;  &lt;li&gt;Kingfisher 4.0 Migration - Kingfisher 3.x should be source compatible to Kingfisher 4. The reason for a major update is that we need to specify the Swift version explicitly for Xcode. All deprecated methods in Kingfisher 3 were removed, so please ensure you have no warning left before you migrate from Kingfisher 3 to Kingfisher 4. If you have any trouble when migrating, please open an issue to discuss.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-3.0-Migration-Guide&#34;&gt;Kingfisher 3.0 Migration&lt;/a&gt; - If you are upgrading to Kingfisher 3.x from an earlier version, please read this for more information.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;We prepared a &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki&#34;&gt;wiki page&lt;/a&gt;. You can find tons of useful things there.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Installation-Guide&#34;&gt;Installation Guide&lt;/a&gt; - Follow it to integrate Kingfisher into your project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet&#34;&gt;Cheat Sheet&lt;/a&gt;- Curious about what Kingfisher could do and how would it look like when used in your project? See this page for useful code snippets. If you are already familiar with Kingfisher, you could also learn new tricks to improve the way you use Kingfisher!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kingfisher.onevcat.com/&#34;&gt;API Reference&lt;/a&gt; - Lastly, please remember to read the full API reference whenever you need more detailed documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;h3&gt;Future of Kingfisher&lt;/h3&gt; &#xA;&lt;p&gt;I want to keep Kingfisher lightweight. This framework focuses on providing a simple solution for downloading and caching images. This doesn’t mean the framework can’t be improved. Kingfisher is far from perfect, so necessary and useful updates will be made to make it better.&lt;/p&gt; &#xA;&lt;h3&gt;Developments and Tests&lt;/h3&gt; &#xA;&lt;p&gt;Any contributing and pull requests are warmly welcome. However, before you plan to implement some features or try to fix an uncertain issue, it is recommended to open a discussion first. It would be appreciated if your pull requests could build and with all tests green. :)&lt;/p&gt; &#xA;&lt;h3&gt;About the logo&lt;/h3&gt; &#xA;&lt;p&gt;The logo of Kingfisher is inspired by &lt;a href=&#34;http://en.wikipedia.org/wiki/Tangram&#34;&gt;Tangram (七巧板)&lt;/a&gt;, a dissection puzzle consisting of seven flat shapes from China. I believe she&#39;s a kingfisher bird instead of a swift, but someone insists that she is a pigeon. I guess I should give her a name. Hi, guys, do you have any suggestions?&lt;/p&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;Follow and contact me on &lt;a href=&#34;http://twitter.com/onevcat&#34;&gt;Twitter&lt;/a&gt; or &lt;a href=&#34;http://weibo.com/onevcat&#34;&gt;Sina Weibo&lt;/a&gt;. If you find an issue, &lt;a href=&#34;https://github.com/onevcat/Kingfisher/issues/new&#34;&gt;open a ticket&lt;/a&gt;. Pull requests are warmly welcome as well.&lt;/p&gt; &#xA;&lt;h2&gt;Backers &amp;amp; Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Open-source projects cannot live long without your help. If you find Kingfisher is useful, please consider supporting this project by becoming a sponsor. Your user icon or company logo shows up &lt;a href=&#34;https://onevcat.com/tabs/about/&#34;&gt;on my blog&lt;/a&gt; with a link to your home page.&lt;/p&gt; &#xA;&lt;p&gt;Become a sponsor through &lt;a href=&#34;https://github.com/sponsors/onevcat&#34;&gt;GitHub Sponsors&lt;/a&gt;. &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.ly/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1812216/106253726-271ed000-6218-11eb-98e0-c9c681925770.png&#34; alt=&#34;imgly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Kingfisher is released under the MIT license. See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kudoleh/iOS-Clean-Architecture-MVVM</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/kudoleh/iOS-Clean-Architecture-MVVM</id>
    <link href="https://github.com/kudoleh/iOS-Clean-Architecture-MVVM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Template iOS app using Clean Architecture and MVVM. Includes DIContainer, FlowCoordinator, DTO, Response Caching and one of the views in SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Template iOS App using Clean Architecture and MVVM &amp;nbsp; &lt;a href=&#34;https://travis-ci.com/github/kudoleh/iOS-Clean-Architecture-MVVM&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/kudoleh/iOS-Clean-Architecture-MVVM&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;iOS Project implemented with Clean Layered Architecture and MVVM. (Can be used as Template project by replacing item name “Movie”). &lt;strong&gt;More information in medium post&lt;/strong&gt;: &lt;a href=&#34;https://tech.olx.com/clean-architecture-and-mvvm-on-ios-c9d167d9f5b3&#34;&gt;Medium Post about Clean Architecture + MVVM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kudoleh/iOS-Clean-Architecture-MVVM/master/README_FILES/CleanArchitecture+MVVM.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Clean Architecture Layers&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Layers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Domain Layer&lt;/strong&gt; = Entities + Use Cases + Repositories Interfaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data Repositories Layer&lt;/strong&gt; = Repositories Implementations + API (Network) + Persistence DB&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Presentation Layer (MVVM)&lt;/strong&gt; = ViewModels + Views&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dependency Direction&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kudoleh/iOS-Clean-Architecture-MVVM/master/README_FILES/CleanArchitectureDependencies.png?raw=true&#34; alt=&#34;Alt text&#34; title=&#34;Modules Dependencies&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;strong&gt;Domain Layer&lt;/strong&gt; should not include anything from other layers(e.g Presentation — UIKit or SwiftUI or Data Layer — Mapping Codable)&lt;/p&gt; &#xA;&lt;h2&gt;Architecture concepts used here&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clean Architecture &lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Advanced iOS App Architecture &lt;a href=&#34;https://www.raywenderlich.com/8477-introducing-advanced-ios-app-architecture&#34;&gt;https://www.raywenderlich.com/8477-introducing-advanced-ios-app-architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kudoleh/iOS-Clean-Architecture-MVVM/master/ExampleMVVM/Presentation/MoviesScene/MoviesQueriesList&#34;&gt;MVVM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Data Binding using &lt;a href=&#34;https://raw.githubusercontent.com/kudoleh/iOS-Clean-Architecture-MVVM/master/ExampleMVVM/Presentation/Utils/Observable.swift&#34;&gt;Observable&lt;/a&gt; without 3rd party libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kudoleh/iOS-Clean-Architecture-MVVM/master/ExampleMVVM/Application/DIContainer/AppDIContainer.swift&#34;&gt;Dependency Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kudoleh/iOS-Clean-Architecture-MVVM/master/ExampleMVVM/Presentation/MoviesScene/Flows/MoviesSearchFlowCoordinator.swift&#34;&gt;Flow Coordinator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kudoleh/iOS-Clean-Architecture-MVVM/raw/master/ExampleMVVM/Data/Network/DataMapping/MoviesResponseDTO%2BMapping.swift&#34;&gt;Data Transfer Object (DTO)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kudoleh/iOS-Clean-Architecture-MVVM/raw/master/ExampleMVVM/Data/Repositories/DefaultMoviesRepository.swift&#34;&gt;Response Data Caching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kudoleh/iOS-Clean-Architecture-MVVM/raw/3c47e8a4b9ae5dfce36f746242d1f40b6829079d/ExampleMVVM/Presentation/Utils/Extensions/UIViewController%2BAddBehaviors.swift#L7&#34;&gt;ViewController Lifecycle Behavior&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kudoleh/iOS-Clean-Architecture-MVVM/master/ExampleMVVM/Presentation/MoviesScene/MoviesQueriesList/View/SwiftUI/MoviesQueryListView.swift&#34;&gt;SwiftUI and UIKit view&lt;/a&gt; implementations by reusing same &lt;a href=&#34;https://raw.githubusercontent.com/kudoleh/iOS-Clean-Architecture-MVVM/master/ExampleMVVM/Presentation/MoviesScene/MoviesQueriesList/ViewModel/MoviesQueryListViewModel.swift&#34;&gt;ViewModel&lt;/a&gt; (at least Xcode 11 required)&lt;/li&gt; &#xA; &lt;li&gt;Error handling examples: in &lt;a href=&#34;https://github.com/kudoleh/iOS-Clean-Architecture-MVVM/raw/201de7759e2d5634e3bb4b5ad524c4242c62b306/ExampleMVVM/Presentation/MoviesScene/MoviesList/ViewModel/MoviesListViewModel.swift#L116&#34;&gt;ViewModel&lt;/a&gt;, in &lt;a href=&#34;https://github.com/kudoleh/iOS-Clean-Architecture-MVVM/raw/201de7759e2d5634e3bb4b5ad524c4242c62b306/ExampleMVVM/Infrastructure/Network/NetworkService.swift#L84&#34;&gt;Networking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CI Pipeline (&lt;a href=&#34;https://raw.githubusercontent.com/kudoleh/iOS-Clean-Architecture-MVVM/master/.travis.yml&#34;&gt;Travis CI + Fastlane&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Includes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kudoleh/iOS-Modular-Architecture/raw/master/DevPods/MoviesSearch/MoviesSearch/Tests/Presentation/MoviesScene/MoviesListViewModelSpec.swift&#34;&gt;Unit Tests with Quick and Nimble&lt;/a&gt;, and &lt;a href=&#34;https://github.com/kudoleh/iOS-Modular-Architecture/raw/master/DevPods/MoviesSearch/MoviesSearch/Tests/Presentation/MoviesScene/MoviesListViewTests.swift&#34;&gt;View Unit tests with iOSSnapshotTestCase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unit Tests for Use Cases(Domain Layer), ViewModels(Presentation Layer), NetworkService(Infrastructure Layer)&lt;/li&gt; &#xA; &lt;li&gt;UI test with XCUITests&lt;/li&gt; &#xA; &lt;li&gt;Size Classes and UIStackView in Detail view&lt;/li&gt; &#xA; &lt;li&gt;Dark Mode&lt;/li&gt; &#xA; &lt;li&gt;SwiftUI example, demostration that presentation layer does not change, only UI (at least Xcode 11 required)&lt;/li&gt; &#xA; &lt;li&gt;Pagination&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Networking&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to use Networking from this example project as repo I made it availabe &lt;a href=&#34;https://github.com/kudoleh/SENetworking&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode Version 11.2.1+ Swift 5.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to use app&lt;/h1&gt; &#xA;&lt;p&gt;To search a movie, write a name of a movie inside searchbar and hit search button. There are two network calls: request movies and request poster images. Every successful search query is stored persistently.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mac-cain13/R.swift</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/mac-cain13/R.swift</id>
    <link href="https://github.com/mac-cain13/R.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Strong typed, autocompleted resources like images, fonts and segues in Swift projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;R.swift &lt;a href=&#34;https://cocoapods.org/pods/R.swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/R.swift.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/blob/master/License&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/R.swift.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/R.swift.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Get strong typed, autocompleted resources like images, fonts and segues in Swift projects&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why use this?&lt;/h2&gt; &#xA;&lt;p&gt;It makes your code that uses resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fully typed&lt;/strong&gt;, less casting and guessing what a method will return&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compile time checked&lt;/strong&gt;, no more incorrect strings that make your app crash at runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Autocompleted&lt;/strong&gt;, never have to guess that image name again&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently you type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let icon = UIImage(named: &#34;settings-icon&#34;)&#xA;let font = UIFont(name: &#34;San Francisco&#34;, size: 42)&#xA;let color = UIColor(named: &#34;indicator highlight&#34;)&#xA;let viewController = CustomViewController(nibName: &#34;CustomView&#34;, bundle: nil)&#xA;let string = String(format: NSLocalizedString(&#34;welcome.withName&#34;, comment: &#34;&#34;), locale: NSLocale.current, &#34;Arthur Dent&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With R.swift it becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let icon = R.image.settingsIcon()&#xA;let font = R.font.sanFrancisco(size: 42)&#xA;let color = R.color.indicatorHighlight()&#xA;let viewController = CustomViewController(nib: R.nib.customView)&#xA;let string = R.string.localizable.welcomeWithName(&#34;Arthur Dent&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md&#34;&gt;more examples&lt;/a&gt; or hear about &lt;a href=&#34;https://academy.realm.io/posts/slug-javi-soto-building-fabric-in-swift/#rswift-2956&#34;&gt;how Fabric.app uses R.swift&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Autocompleted images:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/DemoUseImage.gif&#34; alt=&#34;Autocompleted images&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiletime checked images:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/DemoRenameImage.gif&#34; alt=&#34;Compiletime checked images&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is only the beginning, check out &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md&#34;&gt;more examples&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;CocoaHeadsNL presentation&lt;/h2&gt; &#xA;&lt;p&gt;Mathijs Kadijk presented R.swift at the September 2016 CocoaHeadsNL meetup. Talking about the ideas behind R.swift and demonstrating how to move from plain stringly-typed iOS code to statically typed code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vimeo.com/185173151&#34;&gt;&lt;img src=&#34;https://i.vimeocdn.com/video/594835658.jpg?mw=1920&amp;amp;mh=1080&amp;amp;q=70&#34; width=&#34;560&#34; alt=&#34;R.swift presentation at CocoaHeadsNL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;After installing R.swift into your project you can use the &lt;code&gt;R&lt;/code&gt;-struct to access resources. If the struct is outdated just build and R.swift will correct any missing/changed/added resources.&lt;/p&gt; &#xA;&lt;p&gt;R.swift currently supports these types of resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#custom-fonts&#34;&gt;Fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#resource-files&#34;&gt;Resource files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#colors&#34;&gt;Colors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#localized-strings&#34;&gt;Localized strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#storyboards&#34;&gt;Storyboards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#segues&#34;&gt;Segues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#nibs&#34;&gt;Nibs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#reusable-table-view-cells&#34;&gt;Reusable cells&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Runtime validation with &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#runtime-validation&#34;&gt;&lt;code&gt;R.validate()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If all images used in storyboards and nibs are available&lt;/li&gt; &#xA; &lt;li&gt;If all named colors used in storyboards and nibs are available&lt;/li&gt; &#xA; &lt;li&gt;If all view controllers with storyboard identifiers can be loaded&lt;/li&gt; &#xA; &lt;li&gt;If all custom fonts can be loaded&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#why-was-rswift-created&#34;&gt;Why was R.swift created?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#why-should-i-choose-rswift-over-alternative-x-or-y&#34;&gt;Why should I choose R.swift over alternative X or Y?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#what-are-the-requirements-to-run-rswift&#34;&gt;What are the requirements to run R.swift?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-use-methods-with-a-void-argument&#34;&gt;How to use methods with a &lt;code&gt;Void&lt;/code&gt; argument?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-fix-missing-imports-in-the-generated-file&#34;&gt;How to fix missing imports in the generated file?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-use-classes-with-the-same-name-as-their-module&#34;&gt;How to use classes with the same name as their module?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Ignoring.md&#34;&gt;Can I ignore resources?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#can-i-use-rswift-in-a-library&#34;&gt;Can I use R.swift in a library?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-does-rswift-work&#34;&gt;How does R.swift work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Migration.md&#34;&gt;How to upgrade to a new major version?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift/raw/master/Documentation/Ignoring.md#only-run-specific-generators-exclude-rsomething&#34;&gt;How can I only run specific generators?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is the recommended way of installation, as this avoids including any binary files into your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note on Carthage: R.swift is a tool used in a build step, it is not a dynamic library. Therefore &lt;a href=&#34;https://github.com/mac-cain13/R.swift/issues/42&#34;&gt;it is not possible&lt;/a&gt; to install it with Carthage.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods (recommended)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;pod &#39;R.swift&#39;&lt;/code&gt; to your &lt;a href=&#34;http://cocoapods.org/#get_started&#34;&gt;Podfile&lt;/a&gt; and run &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA; &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase and &lt;strong&gt;below&lt;/strong&gt; &lt;code&gt;Check Pods Manifest.lock&lt;/code&gt;, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;$PODS_ROOT/R.swift/rswift&#34; generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA; &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA; &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/BuildPhaseExample.png&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/yonaskolb/mint&#34;&gt;Mint&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;First, Install &lt;code&gt;R.Swift&lt;/code&gt; Binary and Run Script Phase&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;mac-cain13/R.swift&lt;/code&gt; to your &lt;a href=&#34;https://github.com/yonaskolb/Mint#mintfile&#34;&gt;Mintfile&lt;/a&gt; and run &lt;code&gt;mint bootstrap&lt;/code&gt; to install this package without linking it globally (recommended)&lt;/li&gt; &#xA; &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA; &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if mint list | grep -q &#39;R.swift&#39;; then&#xA;  mint run R.swift rswift generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;else&#xA;  echo &#34;error: R.swift not installed; run &#39;mint bootstrap&#39; to install&#34;&#xA;  return -1&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA; &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA; &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;h4&gt;Second, Install &lt;code&gt;R.Swift.Library&lt;/code&gt; via the Swift Package Manager (requires Xcode 11)&lt;/h4&gt; &#xA;&lt;p&gt;If you see a build error &lt;code&gt;No such module &#39;Rswift&#39;&lt;/code&gt; when trying to &lt;code&gt;#import Rswift&lt;/code&gt; at the top of the &lt;code&gt;R.generated.swift&lt;/code&gt; file, then you will also need to install the &lt;em&gt;library&lt;/em&gt; via the Swift Package Manager available in Xcode 11+.&lt;/p&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;https://github.com/mac-cain13/R.swift.Library&#34;&gt;R.Swift.Library&lt;/a&gt; repo and follow the &lt;a href=&#34;https://github.com/mac-cain13/R.swift.Library#swift-package-manager-requires-xcode-11&#34;&gt;Swift Package Manager installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;R.swift is also available through &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;. This makes it possible to install R.swift globally on your system. Install R.swift by running: &lt;code&gt;brew install rswift&lt;/code&gt;. The Homebrew formula is maintained by &lt;a href=&#34;https://github.com/tomasharkema&#34;&gt;@tomasharkema&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Add the &lt;a href=&#34;https://github.com/mac-cain13/R.swift.Library#Installation&#34;&gt;R.swift.Library&lt;/a&gt; to your project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift/releases&#34;&gt;Download&lt;/a&gt; a R.swift release, unzip it and put it into your source root directory&lt;/li&gt; &#xA; &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA; &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;$SRCROOT/rswift&#34; generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA; &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA; &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/ManualBuildPhaseExample.png&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;R.swift is built using &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager (SPM)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out the code&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;swift build -c release&lt;/code&gt; from the root directory&lt;/li&gt; &#xA; &lt;li&gt;Follow the manual installation steps with the binary you now have&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For developing on R.swift in Xcode, run &lt;code&gt;swift package generate-xcodeproj --xcconfig-overrides RswiftConfig.xcconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ll love contributions, read the &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Contribute.md&#34;&gt;contribute docs&lt;/a&gt; for info on how to report issues, submit ideas and submit pull requests!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift&#34;&gt;R.swift&lt;/a&gt; and &lt;a href=&#34;https://github.com/mac-cain13/R.swift.Library&#34;&gt;R.swift.Library&lt;/a&gt; are created by &lt;a href=&#34;https://github.com/mac-cain13&#34;&gt;Mathijs Kadijk&lt;/a&gt; and released under a &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/License&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/tomlokhorst&#34;&gt;Tom Lokhorst&lt;/a&gt; for his major contributions and help maintaining this project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WenchaoD/FSPagerView</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/WenchaoD/FSPagerView</id>
    <link href="https://github.com/WenchaoD/FSPagerView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FSPagerView is an elegant Screen Slide Library. It is extremely helpful for making Banner View、Product Show、Welcome/Guide Pages、Screen/ViewController Sliders.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/24086370/45e7e8dc-0d49-11e7-86aa-139354fe00c5.jpg&#34; alt=&#34;fspagerview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSPagerView/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-swift%205.0%20%7C%20objc-FF69B4.svg?style=plastic&#34; alt=&#34;Languages&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/FSPagerView&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-iOS%20%7C%20tvOS-blue.svg?style=plastic&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/FSPagerView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/FSPagerView.svg?style=plastic&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=plastic&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-compatible-FF9966.svg?style=plastic&#34; alt=&#34;SPM compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;SWIFT&lt;/b&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/WenchaoD/FSPagerView/raw/master/README-OBJECTIVE-C.md&#34;&gt;&lt;b&gt;OBJECTIVE-C&lt;/b&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;FSPagerView&lt;/strong&gt; is an elegant Screen Slide Library implemented primarily with &lt;em&gt;&lt;strong&gt;UICollectionView&lt;/strong&gt;&lt;/em&gt;. It is extremely helpful for making Banner、Product Show、Welcome/Guide Pages、Screen/ViewController Sliders.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Infinite&lt;/strong&gt;&lt;/em&gt; scrolling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Automatic&lt;/strong&gt;&lt;/em&gt; Sliding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Horizontal&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;Vertical&lt;/strong&gt;&lt;/em&gt; paging.&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable item, with predefined banner-style item.&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable &lt;em&gt;&lt;strong&gt;page control&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Rich build-in 3D transformers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Simple&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;Delightful&lt;/strong&gt;&lt;/em&gt; api usage.&lt;/li&gt; &#xA; &lt;li&gt;Support &lt;strong&gt;SWIFT&lt;/strong&gt; and &lt;strong&gt;OBJECTIVE-C&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSPagerView/master/#banner&#34;&gt;Demo1 - Banner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSPagerView/master/#transformer&#34;&gt;Demo2 - Transformer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSPagerView/master/#page_control&#34;&gt;Demo3 - Page Control&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Demo1 - Banner &lt;a id=&#34;banner&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Banner&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/22688057/9003d880-ed65-11e6-882e-4587c97c8878.gif&#34; alt=&#34;9&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;automaticSlidingInterval&lt;/h3&gt; &#xA;&lt;p&gt;The time interval of automatic sliding. 0 means disabling automatic sliding. Default is 0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.automaticSlidingInterval = 3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;isInfinite&lt;/h3&gt; &#xA;&lt;p&gt;A boolean value indicates whether the pager view has infinite number of items. Default is false.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.isInfinite = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;decelerationDistance&lt;/h3&gt; &#xA;&lt;p&gt;An unsigned integer value that determines the paging distance of the pager view, which indicates the number of passing items during the deceleration. When the value of this property is FSPagerView.automaticDistance, the actual &#39;distance&#39; is automatically calculated according to the scrolling speed of the pager view. Default is 1.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.decelerationDistance = 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;itemSize&lt;/h3&gt; &#xA;&lt;p&gt;The item size of the pager view. When the value of this property is FSPagerView.automaticSize, the items fill the entire visible area of the pager view. Default is FSPagerView.automaticSize.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.itemSize = CGSize(width: 200, height: 180)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;interitemSpacing&lt;/h3&gt; &#xA;&lt;p&gt;The spacing to use between items in the pager view. Default is 0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.interitemSpacing = 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo2 - Transformers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Cross Fading&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/22686429/1983b97e-ed5f-11e6-9a32-44c1830df7ac.gif&#34; alt=&#34;1&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.transformer = FSPagerViewTransformer(type: .crossFading)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Zoom Out&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/22686426/19830862-ed5f-11e6-90be-8fb1319cd125.gif&#34; alt=&#34;2&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.transformer = FSPagerViewTransformer(type: .zoomOut)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Depth&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/22686430/19856c1a-ed5f-11e6-8187-9e4395b7597c.gif&#34; alt=&#34;3&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.transformer = FSPagerViewTransformer(type: .depth)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Linear&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/22686428/198368c0-ed5f-11e6-95df-cfcfe9bc3f29.gif&#34; alt=&#34;4&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.transformer = FSPagerViewTransformer(type: .linear)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Overlap&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/22686431/198905aa-ed5f-11e6-9312-ec371c8c4e44.gif&#34; alt=&#34;5&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.transformer = FSPagerViewTransformer(type: .overlap)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Ferris Wheel&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/22686427/19831c08-ed5f-11e6-8bdb-30e762a85d4b.gif&#34; alt=&#34;6&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.transformer = FSPagerViewTransformer(type: .ferrisWheel)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Inverted Ferris Wheel&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/22686433/19b669a0-ed5f-11e6-8bf0-dc23edf8101f.gif&#34; alt=&#34;7&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.transformer = FSPagerViewTransformer(type: .invertedFerrisWheel)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Cover Flow&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/22686432/19b567f8-ed5f-11e6-885d-bd660c98b507.gif&#34; alt=&#34;8&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.transformer = FSPagerViewTransformer(type: .coverFlow)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Cubic&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/23461598/8875080c-fec5-11e6-8db6-6d8864acfcc1.gif&#34; alt=&#34;9&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pagerView.transformer = FSPagerViewTransformer(type: .cubic)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Customize your own transformer by subclassing&lt;code&gt;FSPagerViewTransformer.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Demo3 Page Control&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Page Control&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5186464/22689720/2baabdb0-ed6d-11e6-8287-ef7a2c0f64bc.gif&#34; alt=&#34;10&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;|&lt;/p&gt; &#xA;&lt;h3&gt;numberOfPages&lt;/h3&gt; &#xA;&lt;p&gt;The number of page indicators of the page control. Default is 0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pageControl.numberOfPages = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;currentPage&lt;/h3&gt; &#xA;&lt;p&gt;The current page, highlighted by the page control. Default is 0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pageControl.currentPage = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;contentHorizontalAlignment&lt;/h3&gt; &#xA;&lt;p&gt;The horizontal alignment of content within the control’s bounds. Default is center.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pageControl.contentHorizontalAlignment = .right&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;setStrokeColor:forState:&lt;/h3&gt; &#xA;&lt;p&gt;Sets the stroke color for page indicators to use for the specified state. (selected/normal).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pageControl.setStrokeColor(.green, for: .normal)&#xA;pageControl.setStrokeColor(.yellow, for: .selected)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;setFillColor:forState:&lt;/h3&gt; &#xA;&lt;p&gt;Sets the fill color for page indicators to use for the specified state. (selected/normal).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pageControl.setFillColor(.gray, for: .normal)&#xA;pageControl.setFillColor(.white, for: .selected)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;setImage:forState:&lt;/h3&gt; &#xA;&lt;p&gt;Sets the image for page indicators to use for the specified state. (selected/normal).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pageControl.setImage(UIImage(named:&#34;image1&#34;), for: .normal)&#xA;pageControl.setImage(UIImage(named:&#34;image2&#34;), for: .selected)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;setPath:forState:&lt;/h3&gt; &#xA;&lt;p&gt;Sets the path for page indicators to use for the specified state. (selected/normal).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pageControl.setPath(UIBezierPath(rect: CGRect(x: 0, y: 0, width: 8, height: 8)), for: .normal)&#xA;pageControl.setPath(UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8, height: 8)), for: .selected)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manually&lt;/li&gt; &#xA; &lt;li&gt;Cocoapods&lt;/li&gt; &#xA; &lt;li&gt;Carthage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSPagerView/master/#&#34;&gt;Download&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt; the source code.&lt;/li&gt; &#xA; &lt;li&gt;Extract the zip file, simply drag folder &lt;em&gt;&lt;strong&gt;Sources&lt;/strong&gt;&lt;/em&gt; into your project.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;em&gt;&lt;strong&gt;Copy items if needed&lt;/strong&gt;&lt;/em&gt; is checked.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;    pod &#39;FSPagerView&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;WenchaoD/FSPagerView&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSPagerView/master/#getting_started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSPagerView/master/#implement_fspagerviewdatasource&#34;&gt;Implement FSPagerViewDataSource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSPagerView/master/#implement_fspagerviewdelegate&#34;&gt;Implement FSPagerViewDelegate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1. Getting started &lt;a id=&#34;getting_started&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started with code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a pager view&#xA;let pagerView = FSPagerView(frame: frame1)&#xA;pagerView.dataSource = self&#xA;pagerView.delegate = self&#xA;pagerView.register(FSPagerViewCell.self, forCellWithReuseIdentifier: &#34;cell&#34;)&#xA;self.view.addSubview(pagerView)&#xA;// Create a page control&#xA;let pageControl = FSPageControl(frame: frame2)&#xA;self.view.addSubview(pageControl)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started with Interface Builder &lt;br&gt; 1、Simply drag &lt;strong&gt;UIView&lt;/strong&gt; instance into your View Controller, Change the &lt;code&gt;Custom Class&lt;/code&gt; to &lt;code&gt;FSPagerView&lt;/code&gt;. (Or &lt;code&gt;FSPageControl&lt;/code&gt;) &lt;br&gt; 2、Link the &lt;code&gt;dataSource&lt;/code&gt; and &lt;code&gt;delegate&lt;/code&gt; property of &lt;strong&gt;FSPagerView&lt;/strong&gt; to your View Controller. &lt;br&gt; 3、Register a cell class.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@IBOutlet weak var pagerView: FSPagerView! {&#xA;    didSet {&#xA;        self.pagerView.register(FSPagerViewCell.self, forCellWithReuseIdentifier: &#34;cell&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Implement FSPagerViewDataSource &lt;a id=&#34;implement_fspagerviewdatasource&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public func numberOfItems(in pagerView: FSPagerView) -&amp;gt; Int {&#xA;    return numberOfItems&#xA;}&#xA;    &#xA;public func pagerView(_ pagerView: FSPagerView, cellForItemAt index: Int) -&amp;gt; FSPagerViewCell {&#xA;    let cell = pagerView.dequeueReusableCell(withReuseIdentifier: &#34;cell&#34;, at: index)&#xA;    cell.imageView?.image = ...&#xA;    cell.textLabel?.text = ...&#xA;    return cell&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Implement FSPagerViewDelegate &lt;a id=&#34;implement_fspagerviewdelegate&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerView(_ pagerView: FSPagerView, shouldHighlightItemAt index: Int) -&amp;gt; Bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Asks the delegate if the item should be highlighted during tracking.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerView(_ pagerView: FSPagerView, didHighlightItemAt index: Int)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tells the delegate that the item at the specified index was highlighted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerView(_ pagerView: FSPagerView, shouldSelectItemAt index: Int) -&amp;gt; Bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Asks the delegate if the specified item should be selected.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerView(_ pagerView: FSPagerView, didSelectItemAt index: Int)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tells the delegate that the item at the specified index was selected.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerView(_ pagerView: FSPagerView, willDisplay cell: FSPagerViewCell, forItemAt index: Int)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tells the delegate that the specified cell is about to be displayed in the pager view.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerView(_ pagerView: FSPagerView, didEndDisplaying cell: FSPagerViewCell, forItemAt index: Int)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tells the delegate that the specified cell was removed from the pager view.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerViewWillBeginDragging(_ pagerView: FSPagerView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tells the delegate when the pager view is about to start scrolling the content.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerViewWillEndDragging(_ pagerView: FSPagerView, targetIndex: Int)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tells the delegate when the user finishes scrolling the content.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerViewDidScroll(_ pagerView: FSPagerView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tells the delegate when the user scrolls the content view within the receiver.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerViewDidEndScrollAnimation(_ pagerView: FSPagerView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tells the delegate when a scrolling animation in the pager view concludes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func pagerViewDidEndDecelerating(_ pagerView: FSPagerView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tells the delegate that the pager view has ended decelerating the scrolling movement.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;support&#34;&gt;&lt;/a&gt;Support this repo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Star&lt;/strong&gt;&lt;/em&gt; this repo &lt;a href=&#34;https://raw.githubusercontent.com/WenchaoD/FSPagerView/master/#&#34;&gt;&lt;img style=&#34;margin-bottom:-12px&#34; width=&#34;72&#34; alt=&#34;star&#34; src=&#34;https://cloud.githubusercontent.com/assets/5186464/15383105/fcf9cdf0-1dc2-11e6-88db-bf221042a584.png&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Buy me a Coffee. ☕️&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://www.paypal.me/WenchaoD&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/webstatic/i/logo/rebrand/ppcom.svg?sanitize=true&#34; width=&#34;100&#34; height=&#34;40&#34; style=&#34;margin-bottom:-15px;&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://user-images.githubusercontent.com/5186464/45949944-46960480-c030-11e8-9e90-30b015698cf6.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://a1.mzstatic.com/us/r30/Purple49/v4/50/16/b3/5016b341-39c1-b47b-2994-d7e23823baed/icon175x175.png&#34; width=&#34;40&#34; height=&#34;40&#34; style=&#34;margin-bottom:-15px;-webkit-border-radius:10px;border:1px solid rgba(30, 154, 236, 1);&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://cloud.githubusercontent.com/assets/5186464/15096872/b06f3a3a-153c-11e6-89f9-2e9c7b88ef42.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://a4.mzstatic.com/us/r30/Purple49/v4/23/31/14/233114f8-2e8d-7b63-8dc5-85d29893061e/icon175x175.jpeg&#34; height=&#34;40&#34; width=&#34;40&#34; style=&#34;margin-bottom:-15px; -webkit-border-radius: 10px;border:1px solid rgba(43, 177, 0, 1)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;微博：&lt;a href=&#34;http://weibo.com/WenchaoD&#34;&gt;@WenchaoD&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Twitter: &lt;a href=&#34;https://twitter.com/WenchaoD&#34;&gt;@WenchaoD&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Other repos: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/WenchaoD&#34;&gt;&lt;em&gt;&lt;strong&gt;FSCalendar&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/FSPagerView&#34;&gt;Documentation&lt;/a&gt;&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>kean/Nuke</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/kean/Nuke</id>
    <link href="https://github.com/kean/Nuke" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Image loading system&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/1567433/114792417-57c1d080-9d56-11eb-8035-dc07cfd7557f.png&#34; height=&#34;205&#34;&gt; &#xA;&lt;h1&gt;Image Loading System&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%2C%20macOS%2C%20watchOS%2C%20tvOS-lightgrey.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://github.com/kean/Nuke/workflows/Nuke%20CI/badge.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Nuke ILS provides an efficient way to download and display images in your app. It&#39;s easy to learn and use thanks to a clear and concise API. Its architecture enables many powerful features while offering virtually unlimited possibilities for customization.&lt;/p&gt; &#xA;&lt;p&gt;Despite the number of features, the framework is lean and compiles in under 2 seconds&lt;a href=&#34;https://raw.githubusercontent.com/kean/Nuke/master/#footnote-1&#34;&gt;¹&lt;/a&gt;. Nuke has an automated test suite 2x the size of the codebase itself, ensuring excellent reliability. Every feature is carefully designed and optimized for &lt;a href=&#34;https://kean.blog/post/nuke-9&#34;&gt;performance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Fast LRU memory and disk cache&lt;/strong&gt; · &lt;strong&gt;SwiftUI&lt;/strong&gt; · &lt;strong&gt;Smart background decompression&lt;/strong&gt; · &lt;strong&gt;Image processing&lt;/strong&gt; · &lt;strong&gt;Resumable downloads&lt;/strong&gt; · &lt;strong&gt;Intelligent deduplication&lt;/strong&gt; · &lt;strong&gt;Request prioritization&lt;/strong&gt; · &lt;strong&gt;Prefetching&lt;/strong&gt; · &lt;strong&gt;Rate limiting&lt;/strong&gt; · &lt;strong&gt;Progressive JPEG, HEIF, WebP, SVG, GIF&lt;/strong&gt; · &lt;strong&gt;Alamofire&lt;/strong&gt; · &lt;strong&gt;Combine&lt;/strong&gt; · &lt;strong&gt;Async/Await&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Nuke is easy to learn and use thanks to &lt;a href=&#34;https://kean.blog/nuke/guides/welcome&#34;&gt;&lt;strong&gt;Nuke Docs&lt;/strong&gt;&lt;/a&gt;. Make sure to also check out &lt;a href=&#34;https://github.com/kean/NukeDemo&#34;&gt;&lt;strong&gt;Nuke Demo&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Upgrading from the previous version? Use a &lt;a href=&#34;https://github.com/kean/Nuke/raw/10.0.0/Documentation/Migrations&#34;&gt;&lt;strong&gt;Migration Guide&lt;/strong&gt;&lt;/a&gt;. Switching from another framework? Use a &lt;a href=&#34;https://github.com/kean/Nuke/tree/master/Documentation/Switch&#34;&gt;&lt;strong&gt;Switching Guide&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;a href=&#34;https://kean.blog/nuke/guides/welcome&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1567433/114312077-59259b80-9abf-11eb-93f9-29fb87eb025a.png&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a name=&#34;h_plugins&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;The image pipeline is easy to customize and extend. Check out the following first-class extensions and packages built by the community.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/NukeUI&#34;&gt;&lt;strong&gt;NukeUI&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lazy image loading for SwiftUI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/NukeBuilder&#34;&gt;&lt;strong&gt;NukeBuilder&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A fun and convenient way to use Nuke&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/Nuke-Alamofire-Plugin&#34;&gt;&lt;strong&gt;Alamofire Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Replace networking layer with &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/RxNuke&#34;&gt;&lt;strong&gt;RxNuke&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt; extensions for Nuke with examples&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/makleso6/NukeWebP&#34;&gt;&lt;strong&gt;NukeWebP&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. &lt;a href=&#34;https://developers.google.com/speed/webp/&#34;&gt;WebP&lt;/a&gt; support, built by &lt;a href=&#34;https://github.com/makleso6&#34;&gt;Maxim Kolesnik&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ryokosuge/Nuke-WebP-Plugin&#34;&gt;&lt;strong&gt;WebP Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. &lt;a href=&#34;https://developers.google.com/speed/webp/&#34;&gt;WebP&lt;/a&gt; support, built by &lt;a href=&#34;https://github.com/ryokosuge&#34;&gt;Ryo Kosuge&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/delneg/Nuke-AVIF-Plugin&#34;&gt;&lt;strong&gt;AVIF Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. &lt;a href=&#34;https://caniuse.com/avif&#34;&gt;AVIF&lt;/a&gt; support, built by &lt;a href=&#34;https://github.com/delneg&#34;&gt;Denis&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/Nuke-Gifu-Plugin&#34;&gt;&lt;strong&gt;Gifu Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use &lt;a href=&#34;https://github.com/kaishin/Gifu&#34;&gt;Gifu&lt;/a&gt; to load and display animated GIFs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/Nuke-AnimatedImage-Plugin&#34;&gt;&lt;strong&gt;FLAnimatedImage Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use &lt;a href=&#34;https://github.com/Flipboard/FLAnimatedImage&#34;&gt;FLAnimatedImage&lt;/a&gt; to load and display &lt;a href=&#34;https://raw.githubusercontent.com/kean/Nuke/master/(https://www.youtube.com/watch?v=fEJqQMJrET4)&#34;&gt;animated GIFs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/roubachof/Xamarin.Forms.Nuke&#34;&gt;&lt;strong&gt;Xamarin NuGet&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. Makes it possible to use Nuke from Xamarin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;h_contribute&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://trello.com/b/Us4rHryT/nuke&#34;&gt;Nuke&#39;s roadmap&lt;/a&gt; is managed in Trello and is publicly available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;h_requirements&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nuke&lt;/th&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Xcode&lt;/th&gt; &#xA;   &lt;th&gt;Platforms&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nuke 10.10&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 12.0 / watchOS 5.0 / macOS 10.14 / tvOS 12.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nuke 10.0&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 11.0 / watchOS 4.0 / macOS 10.13 / tvOS 11.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nuke 9.0&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.1&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 11.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 11.0 / watchOS 4.0 / macOS 10.13 / tvOS 11.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://kean.blog/nuke/guides/installation&#34;&gt;Installation Guide&lt;/a&gt; for information about the older versions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Nuke is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a name=&#34;footnote-1&#34;&gt;¹&lt;/a&gt; Measured on MacBook Pro 14&#34; 2021 (10-core M1 Pro)&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>Alamofire/Alamofire</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/Alamofire/Alamofire</id>
    <link href="https://github.com/Alamofire/Alamofire" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elegant HTTP Networking in Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/AlamofireLogo.png&#34; alt=&#34;Alamofire: Elegant Networking in Swift&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.shields.io/badge/Swift-5.3_5.4_5.5_5.6-Orange?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-5.3_5.4_5.5_5.6-orange?style=flat-square&#34; alt=&#34;Swift&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_Linux_Windows-Green?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_Linux_Windows-yellowgreen?style=flat-square&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/Alamofire.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat-square&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat-square&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34; alt=&#34;Swift Package Manager&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/AlamofireSF&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@AlamofireSF-blue.svg?style=flat-square&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire/37&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift_Forums-Alamofire-orange?style=flat-square&#34; alt=&#34;Swift Forums&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alamofire is an HTTP networking library written in Swift.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#component-libraries&#34;&gt;Component Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#migration-guides&#34;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#communication&#34;&gt;Communication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#using-alamofire&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#introduction&#34;&gt;&lt;strong&gt;Introduction -&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#making-requests&#34;&gt;Making Requests&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-handling&#34;&gt;Response Handling&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-validation&#34;&gt;Response Validation&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-caching&#34;&gt;Response Caching&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;HTTP -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-methods&#34;&gt;HTTP Methods&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md##request-parameters-and-parameter-encoders&#34;&gt;Parameters and Parameter Encoder&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-headers&#34;&gt;HTTP Headers&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Large Data -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#downloading-data-to-a-file&#34;&gt;Downloading Data to a File&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#uploading-data-to-a-server&#34;&gt;Uploading Data to a Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Tools -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#statistical-metrics&#34;&gt;Statistical Metrics&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#curl-command-output&#34;&gt;cURL Command Output&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md&#34;&gt;Advanced Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;URL Session -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#session&#34;&gt;Session Manager&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#sessiondelegate&#34;&gt;Session Delegate&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#request&#34;&gt;Request&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Routing -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#routing-requests&#34;&gt;Routing Requests&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#adapting-and-retrying-requests-with-requestinterceptor&#34;&gt;Adapting and Retrying Requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Model Objects -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#customizing-response-handlers&#34;&gt;Custom Response Handlers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Advanced Concurrency -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-swift-concurrency&#34;&gt;Swift Concurrency&lt;/a&gt; and &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-combine&#34;&gt;Combine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Connection -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#security&#34;&gt;Security&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#network-reachability&#34;&gt;Network Reachability&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#open-radars&#34;&gt;Open Radars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#donations&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chainable Request / Response Methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Swift Concurrency Support Back to iOS 13, macOS 10.15, tvOS 13, and watchOS 6.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Combine Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; URL / JSON Parameter Encoding&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Upload File / Data / Stream / MultipartFormData&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Download File using Request or Resume Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Authentication with &lt;code&gt;URLCredential&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP Response Validation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Upload and Download Progress Closures with Progress&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cURL Command Output&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dynamically Adapt and Retry Requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TLS Certificate and Public Key Pinning&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Network Reachability&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Comprehensive Unit and Integration Test Coverage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://alamofire.github.io/Alamofire&#34;&gt;Complete Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Component Libraries&lt;/h2&gt; &#xA;&lt;p&gt;In order to keep Alamofire focused specifically on core networking implementations, additional component libraries have been created by the &lt;a href=&#34;https://github.com/Alamofire/Foundation&#34;&gt;Alamofire Software Foundation&lt;/a&gt; to bring additional functionality to the Alamofire ecosystem.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/AlamofireImage&#34;&gt;AlamofireImage&lt;/a&gt; - An image library including image response serializers, &lt;code&gt;UIImage&lt;/code&gt; and &lt;code&gt;UIImageView&lt;/code&gt; extensions, custom image filters, an auto-purging in-memory cache, and a priority-based image downloading system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/AlamofireNetworkActivityIndicator&#34;&gt;AlamofireNetworkActivityIndicator&lt;/a&gt; - Controls the visibility of the network activity indicator on iOS using Alamofire. It contains configurable delay timers to help mitigate flicker and can support &lt;code&gt;URLSession&lt;/code&gt; instances not managed by Alamofire.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Minimum Swift Version&lt;/th&gt; &#xA;   &lt;th&gt;Installation&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS 10.0+ / macOS 10.12+ / tvOS 10.0+ / watchOS 3.0+&lt;/td&gt; &#xA;   &lt;td&gt;5.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#carthage&#34;&gt;Carthage&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#manually&#34;&gt;Manual&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fully Tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;Latest Only&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Building But Unsupported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;Latest Only&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Building But Unsupported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Known Issues on Linux and Windows&lt;/h4&gt; &#xA;&lt;p&gt;Alamofire builds on Linux and Windows but there are missing features and many issues in the underlying &lt;code&gt;swift-corelibs-foundation&lt;/code&gt; that prevent full functionality and may cause crashes. These include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ServerTrustManager&lt;/code&gt; and associated certificate functionality is unavailable, so there is no certificate pinning and no client certificate support.&lt;/li&gt; &#xA; &lt;li&gt;Various methods of HTTP authentication may crash, including HTTP Basic and HTTP Digest. Crashes may occur if responses contain server challenges.&lt;/li&gt; &#xA; &lt;li&gt;Cache control through &lt;code&gt;CachedResponseHandler&lt;/code&gt; and associated APIs is unavailable, as the underlying delegate methods aren&#39;t called.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; are never gathered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Due to these issues, Alamofire is unsupported on Linux and Windows. Please report any crashes to the &lt;a href=&#34;https://bugs.swift.org&#34;&gt;Swift bug reporter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migration Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%205.0%20Migration%20Guide.md&#34;&gt;Alamofire 5.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%204.0%20Migration%20Guide.md&#34;&gt;Alamofire 4.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%203.0%20Migration%20Guide.md&#34;&gt;Alamofire 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%202.0%20Migration%20Guide.md&#34;&gt;Alamofire 2.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help with making network requests&lt;/strong&gt; using Alamofire, use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/alamofire&#34;&gt;Stack Overflow&lt;/a&gt; and tag &lt;code&gt;alamofire&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you need to &lt;strong&gt;find or understand an API&lt;/strong&gt;, check &lt;a href=&#34;http://alamofire.github.io/Alamofire/&#34;&gt;our documentation&lt;/a&gt; or &lt;a href=&#34;https://developer.apple.com/documentation/foundation/url_loading_system&#34;&gt;Apple&#39;s documentation for &lt;code&gt;URLSession&lt;/code&gt;&lt;/a&gt;, on top of which Alamofire is built.&lt;/li&gt; &#xA; &lt;li&gt;If you need &lt;strong&gt;help with an Alamofire feature&lt;/strong&gt;, use &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire&#34;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss Alamofire best practices&lt;/strong&gt;, use &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire&#34;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss a feature request&lt;/strong&gt;, use &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire&#34;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue here on GitHub and follow the guide. The more detail the better!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate Alamofire into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Alamofire&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate Alamofire into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;Alamofire/Alamofire&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding Alamofire as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/Alamofire/Alamofire.git&#34;, .upToNextMajor(from: &#34;5.6.1&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use any of the aforementioned dependency managers, you can integrate Alamofire into your project manually.&lt;/p&gt; &#xA;&lt;h4&gt;Embedded Framework&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &#34;if&#34; your project is not initialized as a git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Alamofire as a git &lt;a href=&#34;https://git-scm.com/docs/git-submodule&#34;&gt;submodule&lt;/a&gt; by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; in the Project Navigator and verify the deployment target matches that of your application target.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &#34;Targets&#34; heading in the sidebar.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the tab bar at the top of that window, open the &#34;General&#34; panel.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &#34;Embedded Binaries&#34; section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt;, or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The &lt;code&gt;Alamofire.framework&lt;/code&gt; is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Before contributing to Alamofire, please read the instructions detailed in our &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Open Radars&lt;/h2&gt; &#xA;&lt;p&gt;The following radars have some effect on the current implementation of Alamofire.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.openradar.me/radar?id=5517037090635776&#34;&gt;&lt;code&gt;rdar://21349340&lt;/code&gt;&lt;/a&gt; - Compiler throwing warning due to toll-free bridging issue in the test case&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rdar://26870455&lt;/code&gt; - Background URL Session Configurations do not work in the simulator&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rdar://26849668&lt;/code&gt; - Some URLProtocol APIs do not properly handle &lt;code&gt;URLRequest&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resolved Radars&lt;/h2&gt; &#xA;&lt;p&gt;The following radars have been resolved over time after being filed against the Alamofire project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.openradar.me/radar?id=5010235949318144&#34;&gt;&lt;code&gt;rdar://26761490&lt;/code&gt;&lt;/a&gt; - Swift string interpolation causing memory leak with common usage. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Resolved): 9/1/17 in Xcode 9 beta 6.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://openradar.appspot.com/radar?id=4942308441063424&#34;&gt;&lt;code&gt;rdar://36082113&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; failing to link on watchOS 3.0+ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Resolved): Just add &lt;code&gt;CFNetwork&lt;/code&gt; to your linked frameworks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FB7624529&lt;/code&gt; - &lt;code&gt;urlSession(_:task:didFinishCollecting:)&lt;/code&gt; never called on watchOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Resolved): Metrics now collected on watchOS 7+.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;What&#39;s the origin of the name Alamofire?&lt;/h3&gt; &#xA;&lt;p&gt;Alamofire is named after the &lt;a href=&#34;https://aggie-horticulture.tamu.edu/wildseed/alamofire.html&#34;&gt;Alamo Fire flower&lt;/a&gt;, a hybrid variant of the Bluebonnet, the official state flower of Texas.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Alamofire is owned and maintained by the &lt;a href=&#34;http://alamofire.org&#34;&gt;Alamofire Software Foundation&lt;/a&gt;. You can follow them on Twitter at &lt;a href=&#34;https://twitter.com/AlamofireSF&#34;&gt;@AlamofireSF&lt;/a&gt; for project updates and releases.&lt;/p&gt; &#xA;&lt;h3&gt;Security Disclosure&lt;/h3&gt; &#xA;&lt;p&gt;If you believe you have identified a security vulnerability with Alamofire, you should report it as soon as possible via email to &lt;a href=&#34;mailto:security@alamofire.org&#34;&gt;security@alamofire.org&lt;/a&gt;. Please do not post it to a public issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/Alamofire/Foundation#members&#34;&gt;ASF&lt;/a&gt; is looking to raise money to officially stay registered as a federal non-profit organization. Registering will allow Foundation members to gain some legal protections and also allow us to put donations to use, tax-free. Sponsoring the ASF will enable us to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pay our yearly legal fees to keep the non-profit in good status&lt;/li&gt; &#xA; &lt;li&gt;Pay for our mail servers to help us stay on top of all questions and security issues&lt;/li&gt; &#xA; &lt;li&gt;Potentially fund test servers to make it easier for us to test the edge cases&lt;/li&gt; &#xA; &lt;li&gt;Potentially fund developers to work on one of our projects full-time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The community adoption of the ASF libraries has been amazing. We are greatly humbled by your enthusiasm around the projects and want to continue to do everything we can to move the needle forward. With your continued support, the ASF will be able to improve its reach and also provide better legal safety for the core members. If you use any of our libraries for work, see if your employers would be interested in donating. Any amount you can donate, whether once or monthly, to help us reach our goal would be greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/Alamofire&#34;&gt;Sponsor Alamofire&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supporters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://macstadium.com&#34;&gt;MacStadium&lt;/a&gt; provides Alamofire with a free, hosted Mac mini.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/MacStadiumLogo.png&#34; alt=&#34;Powered by MacStadium&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Alamofire is released under the MIT license. &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/LICENSE&#34;&gt;See LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stephencelis/SQLite.swift</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/stephencelis/SQLite.swift</id>
    <link href="https://github.com/stephencelis/SQLite.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A type-safe, Swift-language layer over SQLite3.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SQLite.swift&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/stephencelis/SQLite.swift/Build%20and%20test&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://cocoapods.org/pods/SQLite.swift&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/SQLite.swift/badge.png&#34; alt=&#34;CocoaPods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5-orange.svg?style=flat&#34; alt=&#34;Swift5 compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SQLite.swift&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/p/SQLite.swift/badge.png&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/stephencelis/SQLite.swift&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/stephencelis/SQLite.swift.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/stephencelis/SQLite.swift&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A type-safe, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift&lt;/a&gt;-language layer over &lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stephencelis/SQLite.swift&#34;&gt;SQLite.swift&lt;/a&gt; provides compile-time confidence in SQL statement syntax &lt;em&gt;and&lt;/em&gt; intent.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A pure-Swift interface&lt;/li&gt; &#xA; &lt;li&gt;A type-safe, optional-aware SQL expression builder&lt;/li&gt; &#xA; &lt;li&gt;A flexible, chainable, lazy-executing query layer&lt;/li&gt; &#xA; &lt;li&gt;Automatically-typed data access&lt;/li&gt; &#xA; &lt;li&gt;A lightweight, uncomplicated query and parameter binding interface&lt;/li&gt; &#xA; &lt;li&gt;Developer-friendly error handling and debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#full-text-search&#34;&gt;Full-text search&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#sqliteswift-documentation&#34;&gt;Well-documented&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extensively tested&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34;&gt;SQLCipher&lt;/a&gt; support via CocoaPods&lt;/li&gt; &#xA; &lt;li&gt;Works on &lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Linux.md&#34;&gt;Linux&lt;/a&gt; (with some limitations)&lt;/li&gt; &#xA; &lt;li&gt;Active support at &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sqlite.swift&#34;&gt;StackOverflow&lt;/a&gt;, and &lt;a href=&#34;https://gitter.im/stephencelis/SQLite.swift&#34;&gt;Gitter Chat Room&lt;/a&gt; (&lt;em&gt;experimental&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SQLite&#xA;&#xA;// Wrap everything in a do...catch to handle errors&#xA;do {&#xA;    let db = try Connection(&#34;path/to/db.sqlite3&#34;)&#xA;&#xA;    let users = Table(&#34;users&#34;)&#xA;    let id = Expression&amp;lt;Int64&amp;gt;(&#34;id&#34;)&#xA;    let name = Expression&amp;lt;String?&amp;gt;(&#34;name&#34;)&#xA;    let email = Expression&amp;lt;String&amp;gt;(&#34;email&#34;)&#xA;&#xA;    try db.run(users.create { t in&#xA;        t.column(id, primaryKey: true)&#xA;        t.column(name)&#xA;        t.column(email, unique: true)&#xA;    })&#xA;    // CREATE TABLE &#34;users&#34; (&#xA;    //     &#34;id&#34; INTEGER PRIMARY KEY NOT NULL,&#xA;    //     &#34;name&#34; TEXT,&#xA;    //     &#34;email&#34; TEXT NOT NULL UNIQUE&#xA;    // )&#xA;&#xA;    let insert = users.insert(name &amp;lt;- &#34;Alice&#34;, email &amp;lt;- &#34;alice@mac.com&#34;)&#xA;    let rowid = try db.run(insert)&#xA;    // INSERT INTO &#34;users&#34; (&#34;name&#34;, &#34;email&#34;) VALUES (&#39;Alice&#39;, &#39;alice@mac.com&#39;)&#xA;&#xA;    for user in try db.prepare(users) {&#xA;        print(&#34;id: \(user[id]), name: \(user[name]), email: \(user[email])&#34;)&#xA;        // id: 1, name: Optional(&#34;Alice&#34;), email: alice@mac.com&#xA;    }&#xA;    // SELECT * FROM &#34;users&#34;&#xA;&#xA;    let alice = users.filter(id == rowid)&#xA;&#xA;    try db.run(alice.update(email &amp;lt;- email.replace(&#34;mac.com&#34;, with: &#34;me.com&#34;)))&#xA;    // UPDATE &#34;users&#34; SET &#34;email&#34; = replace(&#34;email&#34;, &#39;mac.com&#39;, &#39;me.com&#39;)&#xA;    // WHERE (&#34;id&#34; = 1)&#xA;&#xA;    try db.run(alice.delete())&#xA;    // DELETE FROM &#34;users&#34; WHERE (&#34;id&#34; = 1)&#xA;&#xA;    try db.scalar(users.count) // 0&#xA;    // SELECT count(*) FROM &#34;users&#34;&#xA;} catch {&#xA;    print (error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite.swift also works as a lightweight, Swift-friendly wrapper over the C API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Wrap everything in a do...catch to handle errors&#xA;do {&#xA;    // ...&#xA;    &#xA;    let stmt = try db.prepare(&#34;INSERT INTO users (email) VALUES (?)&#34;)&#xA;    for email in [&#34;betty@icloud.com&#34;, &#34;cathy@icloud.com&#34;] {&#xA;        try stmt.run(email)&#xA;    }&#xA;&#xA;    db.totalChanges    // 3&#xA;    db.changes         // 1&#xA;    db.lastInsertRowid // 3&#xA;&#xA;    for row in try db.prepare(&#34;SELECT id, email FROM users&#34;) {&#xA;        print(&#34;id: \(row[0]), email: \(row[1])&#34;)&#xA;        // id: Optional(2), email: Optional(&#34;betty@icloud.com&#34;)&#xA;        // id: Optional(3), email: Optional(&#34;cathy@icloud.com&#34;)&#xA;    }&#xA;&#xA;    try db.scalar(&#34;SELECT count(*) FROM users&#34;) // 2&#xA;} catch {&#xA;    print (error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#sqliteswift-documentation&#34;&gt;Read the documentation&lt;/a&gt; or explore more, interactively, from the Xcode project’s playground.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Resources/playground@2x.png&#34; alt=&#34;SQLite.playground Screen Shot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a more comprehensive example, see &lt;a href=&#34;https://masteringswift.blogspot.com/2015/09/create-data-access-layer-with.html&#34;&gt;this article&lt;/a&gt; and the &lt;a href=&#34;https://github.com/hoffmanjon/SQLiteDataAccessLayer2/tree/master&#34;&gt;companion repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Version 0.11.6 and later requires Swift 5 (and &lt;a href=&#34;https://developer.apple.com/xcode/downloads/&#34;&gt;Xcode&lt;/a&gt; 10.2) or greater. Version 0.11.5 requires Swift 4.2 (and &lt;a href=&#34;https://developer.apple.com/xcode/downloads/&#34;&gt;Xcode&lt;/a&gt; 10.1) or greater.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/stephencelis/SQLite.swift.git&#34;, from: &#34;0.13.3&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build your project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/tree/master/Tests/SPM&#34;&gt;Tests/SPM&lt;/a&gt; folder for a small demo project which uses SPM.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a simple, decentralized dependency manager for Cocoa. To install SQLite.swift with Carthage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure Carthage is &lt;a href=&#34;https://github.com/Carthage/Carthage#installing-carthage&#34;&gt;installed&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your Cartfile to include the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;stephencelis/SQLite.swift&#34; ~&amp;gt; 0.13.3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; and &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;add the appropriate framework&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. To install SQLite.swift with CocoaPods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure CocoaPods is &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html#getting-started&#34;&gt;installed&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Using the default Ruby install will require you to use sudo when&#xA;# installing and updating gems.&#xA;[sudo] gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your Podfile to include the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&#xA;target &#39;YourAppTargetName&#39; do&#xA;    pod &#39;SQLite.swift&#39;, &#39;~&amp;gt; 0.13.3&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;pod install --repo-update&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;To install SQLite.swift as an Xcode sub-project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag the &lt;strong&gt;SQLite.xcodeproj&lt;/strong&gt; file into your own project. (&lt;a href=&#34;https://git-scm.com/book/en/Git-Tools-Submodules&#34;&gt;Submodule&lt;/a&gt;, clone, or &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/archive/master.zip&#34;&gt;download&lt;/a&gt; the project first.)&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Resources/installation@2x.png&#34; alt=&#34;Installation Screen Shot&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your target’s &lt;strong&gt;General&lt;/strong&gt; tab, click the &lt;strong&gt;+&lt;/strong&gt; button under &lt;strong&gt;Linked Frameworks and Libraries&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the appropriate &lt;strong&gt;SQLite.framework&lt;/strong&gt; for your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Some additional steps are required to install the application on an actual device:&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;strong&gt;General&lt;/strong&gt; tab, click the &lt;strong&gt;+&lt;/strong&gt; button under &lt;strong&gt;Embedded Binaries&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the appropriate &lt;strong&gt;SQLite.framework&lt;/strong&gt; for your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Planning.md&#34;&gt;See the planning document&lt;/a&gt; for a roadmap and existing feature requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/CONTRIBUTING.md#contributing&#34;&gt;Read the contributing guidelines&lt;/a&gt;. The &lt;em&gt;TL;DR&lt;/em&gt; (but please; &lt;em&gt;R&lt;/em&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Need &lt;strong&gt;help&lt;/strong&gt; or have a &lt;strong&gt;general question&lt;/strong&gt;? &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sqlite.swift&#34;&gt;Ask on Stack Overflow&lt;/a&gt; (tag &lt;code&gt;sqlite.swift&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Found a &lt;strong&gt;bug&lt;/strong&gt; or have a &lt;strong&gt;feature request&lt;/strong&gt;? &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/issues/new&#34;&gt;Open an issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Want to &lt;strong&gt;contribute&lt;/strong&gt;? &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/fork&#34;&gt;Submit a pull request&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:stephen@stephencelis.com&#34;&gt;Stephen Celis&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;@stephencelis&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SQLite.swift is available under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/LICENSE.txt&#34;&gt;the LICENSE file&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;p&gt;These projects enhance or use SQLite.swift:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/garriguv/SQLiteMigrationManager.swift&#34;&gt;SQLiteMigrationManager.swift&lt;/a&gt; (inspired by &lt;a href=&#34;https://github.com/layerhq/FMDBMigrationManager&#34;&gt;FMDBMigrationManager&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/delta-math-helper/id1436506800&#34;&gt;Delta: Math helper&lt;/a&gt; (see &lt;a href=&#34;https://github.com/GroupeMINASTE/Delta-iOS/raw/master/Delta/Utils/Database.swift&#34;&gt;Delta/Utils/Database.swift&lt;/a&gt; for production implementation example)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;Looking for something else? Try another Swift wrapper (or &lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;FMDB&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remirobert/Camembert&#34;&gt;Camembert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift&#34;&gt;GRDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FahimF/SQLiteDB&#34;&gt;SQLiteDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nerdyc/Squeal&#34;&gt;Squeal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryanfowler/SwiftData&#34;&gt;SwiftData&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>seemoo-lab/openhaystack</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/seemoo-lab/openhaystack</id>
    <link href="https://github.com/seemoo-lab/openhaystack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build your own &#39;AirTags&#39; 🏷 today! Framework for tracking personal Bluetooth devices via Apple&#39;s massive Find My network.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/Icon/OpenHaystackIcon.png&#34; alt=&#34;OpenHaystack application icon&#34; height=&#34;42&#34; width=&#34;42&#34; valign=&#34;bottom&#34;&gt; OpenHaystack&lt;/h1&gt; &#xA;&lt;p&gt;OpenHaystack is a framework for tracking personal Bluetooth devices via Apple&#39;s massive Find My network. Use it to create your own tracking &lt;em&gt;tags&lt;/em&gt; that you can append to physical objects (keyrings, backpacks, ...) or integrate it into other Bluetooth-capable devices such as notebooks.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/OpenHaystack-Screenshot.png&#34; alt=&#34;Screenshot of the app&#34; width=&#34;701&#34;&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#what-is-openhaystack&#34;&gt;What is &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#history&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-use-openhaystack&#34;&gt;How to use &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#system-requirements&#34;&gt;System requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-does-apples-find-my-network-work&#34;&gt;How does Apple&#39;s Find My network work?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#pairing-1&#34;&gt;Pairing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#losing-2&#34;&gt;Losing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#finding-3&#34;&gt;Finding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#searching-4&#34;&gt;Searching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;How to track other Bluetooth devices?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#openhaystack-mobile&#34;&gt;OpenHaystack Mobile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#authors&#34;&gt;Authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack is an application that allows you to create your own accessories that are tracked by Apple&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-does-apples-find-my-network-work&#34;&gt;Find My network&lt;/a&gt;. All you need is a Mac and a &lt;a href=&#34;https://microbit.org/&#34;&gt;BBC micro:bit&lt;/a&gt; or any &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;other Bluetooth-capable device&lt;/a&gt;. By using the app, you can track your accessories anywhere on earth without cellular coverage. Nearby iPhones will discover your accessories and upload their location to Apple&#39;s servers when they have a network connection.&lt;/p&gt; &#xA;&lt;h3&gt;History&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack is the result of reverse-engineering and security analysis work of Apple&#39;s &lt;em&gt;Find My network&lt;/em&gt; (or &lt;em&gt;offline finding&lt;/em&gt;). We at the &lt;a href=&#34;https://seemoo.de&#34;&gt;Secure Mobile Networking Lab&lt;/a&gt; of TU Darmstadt started analyzing offline finding after its initial announcement in June 2019. We identified how Apple devices can be found by iPhones devices, even when they are offline through this work. The whole system is a clever combination of Bluetooth advertisements, public-key cryptography, and a central database of encrypted location reports. We disclosed a specification of the closed parts of offline finding and conducted a comprehensive security and privacy analysis. We found two distinct vulnerabilities. The most severe one, which allowed a malicious application to access location data, has meanwhile been fixed by Apple (&lt;a href=&#34;https://support.apple.com/en-us/HT211849&#34;&gt;CVE-2020-9986&lt;/a&gt;). For more information about the security analysis, please read &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;our paper&lt;/a&gt;. Since its release, we received quite a bit of &lt;a href=&#34;https://owlink.org/press/&#34;&gt;press and media coverage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Disclaimer&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack is experimental software. The code is untested and incomplete. For example, OpenHaystack accessories using our &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware&lt;/a&gt; broadcast a fixed public key and, therefore, are trackable by other devices in proximity (this might change in a future release). OpenHaystack is not affiliated with or endorsed by Apple Inc.&lt;/p&gt; &#xA;&lt;h2&gt;How to use &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack consists of two components. First, we provide a &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/OpenHaystack&#34;&gt;macOS application&lt;/a&gt; that can display the last reported location of your personal Bluetooth devices. Second, the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware image&lt;/a&gt; enables Bluetooth devices to broadcast beacons that make them discoverable by iPhones.&lt;/p&gt; &#xA;&lt;h3&gt;System requirements&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack requires macOS 11 (Big Sur).&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The OpenHaystack application requires a custom plugin for Apple Mail. It is used to download location reports from Apple&#39;s servers via a private API (technical explanation: the plugin inherits Apple Mail&#39;s entitlements required to use this API). Therefore, the installation procedure is slightly different and requires you to temporarily disable &lt;a href=&#34;https://support.apple.com/guide/security/gatekeeper-and-runtime-protection-sec5599b66df/1/web/1&#34;&gt;Gatekeeper&lt;/a&gt;. Our plugin does not access any other private data such as emails (see &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/OpenHaystack/OpenHaystackMail&#34;&gt;source code&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a precompiled binary release from our &lt;a href=&#34;https://github.com/seemoo-lab/openhaystack/releases&#34;&gt;GitHub page&lt;/a&gt;.&lt;br&gt; &lt;em&gt;Alternative:&lt;/em&gt; build the application from source via Xcode.&lt;/li&gt; &#xA; &lt;li&gt;Open OpenHaystack. This will ask you to install the Mail plugin in &lt;code&gt;~/Library/Mail/Bundle&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and run &lt;code&gt;sudo spctl --master-disable&lt;/code&gt;, which will disable Gatekeeper and allow our Apple Mail plugin to run.&lt;/li&gt; &#xA; &lt;li&gt;Open Apple Mail. Go to &lt;em&gt;Preferences&lt;/em&gt; → &lt;em&gt;General&lt;/em&gt; → &lt;em&gt;Manage Plug-Ins...&lt;/em&gt; and activate the checkbox next to &lt;em&gt;OpenHaystackMail.mailbundle&lt;/em&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the &lt;em&gt;Manage Plug-Ins...&lt;/em&gt; button does not appear. Run this command in terminal &lt;code&gt;sudo defaults write &#34;/Library/Preferences/com.apple.mail&#34; EnableBundles 1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Allow access and restart Mail.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and enter &lt;code&gt;sudo spctl --master-enable&lt;/code&gt;, which will enable Gatekeeper again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adding a new accessory.&lt;/strong&gt; To create a new accessory, you just need to enter a name for it and optionally select a suitable icon and a color. The app then generates a new key pair that is used to encrypt and decrypt the location reports. The private key is stored in your Mac&#39;s keychain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deploy to device.&lt;/strong&gt; Connect a &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;supported device&lt;/a&gt; via USB to your Mac and hit the &lt;em&gt;Deploy&lt;/em&gt; button next to the accessory&#39;s name and choose the corresponding. Instead of using OpenHaystack&#39;s integrated deployment, you may also copy the public key used for advertising (right click on accessory) and deploy it manually.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Display devices&#39; locations.&lt;/strong&gt; It can take up to 30 minutes until you will see the first location report on the map on the right side. The map will always show all your items&#39; most recent locations. You can click on every item to check when the last update was received. By clicking the reload button, you can update the location reports.&lt;/p&gt; &#xA;&lt;h2&gt;How does Apple&#39;s Find My network work?&lt;/h2&gt; &#xA;&lt;p&gt;We briefly explain Apple&#39;s offline finding system (aka &lt;a href=&#34;https://developer.apple.com/find-my/&#34;&gt;&lt;em&gt;Find My network&lt;/em&gt;&lt;/a&gt;). Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;PETS paper and Apple&#39;s accessory specification&lt;/a&gt; for more details. We provide a schematic overview (from our paper) and explain how we integrate the different steps in OpenHaystack below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/FindMyOverview.png&#34; alt=&#34;Find My Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pairing (1)&lt;/h3&gt; &#xA;&lt;p&gt;To use Apple&#39;s Find My network, we generate a public-private key pair on an elliptic curve (P-224). The private key remains on the Mac securely stored in the keychain, and the public key is deployed on the accessory, e.g., an attached micro:bit.&lt;/p&gt; &#xA;&lt;h3&gt;Losing (2)&lt;/h3&gt; &#xA;&lt;p&gt;In short, the accessories broadcast the public key as Bluetooth Low Energy (BLE) advertisements (see &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware&lt;/a&gt;). Nearby iPhones will not be able to distinguish our accessories from a genuine Apple device or certified accessory.&lt;/p&gt; &#xA;&lt;h3&gt;Finding (3)&lt;/h3&gt; &#xA;&lt;p&gt;When a nearby iPhone receives a BLE advertisement, the iPhone fetches its current location via GPS, encrypts it using public key from the advertisement, and uploads the encrypted report to Apple&#39;s server. All iPhones on iOS 13 or newer do this by default. OpenHaystack is not involved in this step.&lt;/p&gt; &#xA;&lt;h3&gt;Searching (4)&lt;/h3&gt; &#xA;&lt;p&gt;Apple does not know which encrypted locations belong to which Apple account or device. Therefore, every Apple user can download any location report as long as they know the corresponding public key. This is not a security issue: all reports are end-to-end encrypted and cannot be decrypted unless one knows the corresponding private key (stored in the keychain). We leverage this feature to download the reports from Apple that have been created for our OpenHaystack accessories. We use our private keys to decrypt the location reports and show the most recent one on the map.&lt;/p&gt; &#xA;&lt;p&gt;Apple protects their database against arbitrary access by requiring an authenticated Apple user to download location reports. We use our Apple Mail plugin, which runs with elevated privileges, to access the required authentication information. The OpenHaystack app communicates with the plugin while downloading reports. This is why you need to keep Mail open while using OpenHaystack.&lt;/p&gt; &#xA;&lt;h2&gt;How to track other Bluetooth devices?&lt;/h2&gt; &#xA;&lt;p&gt;In principle, any Bluetooth device can be turned into an OpenHaystack accessory that is trackable via Apple&#39;s Find My network. Currently, we provide a convenient deployment method of our OpenHaystack firmwares for a small number of embedded devices (see table below). We also support Linux devices via our generic HCI script. Feel free to port OpenHaystack to other devices that support Bluetooth Low Energy based on the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;source code of our firmware&lt;/a&gt; and the specification in &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;our paper&lt;/a&gt;. Please share your results with us!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Tested on&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Deploy via app&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/Microbit_v1&#34;&gt;Nordic nRF51&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;BBC micro:bit v1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;Only supports nRF51822 at this time (see issue #6).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/ESP32&#34;&gt;Espressif ESP32&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SP32-WROOM, ESP32-WROVER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;Deployment can take up to 3 minutes. Requires Python 3. Thanks &lt;strong&gt;@fhessel&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/Linux_HCI&#34;&gt;Linux HCI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Raspberry Pi 4 w/ Raspbian&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Should support any Linux machine.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/Setup.jpg&#34; alt=&#34;Setup&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;OpenHaystack Mobile&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack Mobile is a complete reimplementation of the OpenHaystack macOS application for smartphones. The app provides the same functionality to create and track accessories and aims to increase the usability, especially for new users. In contrast to the macOS application, the location reports cannot be fetched directly on the smartphone, so the app requires a proxy server hosted on Mac hardware to access the Find My network. The proxy server can be accessed over a network by multiple users simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;To connect to your proxy server set the correct URL in: openhaystack-mobile/lib/findMy/reports_fetcher.dart&lt;/p&gt; &#xA;&lt;p&gt;&lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/mobile-map-view.png&#34;&gt; &lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/mobile-accessory-history.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenHaystack Mobile is built with the cross-platform &lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter framework&lt;/a&gt; and currently runs on Android and iOS. More information about the app and usage instructions can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/openhaystack-mobile&#34;&gt;openhaystack-mobile&lt;/a&gt; folder of this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alexander Heinrich&lt;/strong&gt; (&lt;a href=&#34;https://github.com/Sn0wfreezeDev&#34;&gt;@Sn0wfreezeDev&lt;/a&gt;, &lt;a href=&#34;mailto:aheinrich@seemoo.tu-darmstadt.de&#34;&gt;email&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Milan Stute&lt;/strong&gt; (&lt;a href=&#34;https://github.com/schmittner&#34;&gt;@schmittner&lt;/a&gt;, &lt;a href=&#34;mailto:mstute@seemoo.tu-darmstadt.de&#34;&gt;email&lt;/a&gt;, &lt;a href=&#34;https://seemoo.de/mstute&#34;&gt;web&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alexander Heinrich, Milan Stute, Tim Kornhuber, Matthias Hollick. &lt;strong&gt;Who Can &lt;em&gt;Find My&lt;/em&gt; Devices? Security and Privacy of Apple&#39;s Crowd-Sourced Bluetooth Location Tracking System.&lt;/strong&gt; &lt;em&gt;Proceedings on Privacy Enhancing Technologies (PoPETs)&lt;/em&gt;, 2021. &lt;a href=&#34;https://doi.org/10.2478/popets-2021-0045&#34;&gt;doi:10.2478/popets-2021-0045&lt;/a&gt; &lt;a href=&#34;https://www.petsymposium.org/2021/files/papers/issue3/popets-2021-0045.pdf&#34;&gt;📄 Paper&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2103.02282&#34;&gt;📄 Preprint&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Alexander Heinrich, Milan Stute, and Matthias Hollick. &lt;strong&gt;DEMO: OpenHaystack: A Framework for Tracking Personal Bluetooth Devices via Apple’s Massive Find My Network.&lt;/strong&gt; &lt;em&gt;14th ACM Conference on Security and Privacy in Wireless and Mobile (WiSec ’21)&lt;/em&gt;, 2021.&lt;/li&gt; &#xA; &lt;li&gt;Tim Kornhuber. &lt;strong&gt;Analysis of Apple&#39;s Crowd-Sourced Location Tracking System.&lt;/strong&gt; &lt;em&gt;Technical University of Darmstadt&lt;/em&gt;, Master&#39;s thesis, 2020.&lt;/li&gt; &#xA; &lt;li&gt;Apple Inc. &lt;strong&gt;Find My Network Accessory Specification – Developer Preview – Release R3.&lt;/strong&gt; 2020. &lt;a href=&#34;https://developer.apple.com/find-my/&#34;&gt;📄 Download&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/LICENSE&#34;&gt;&lt;strong&gt;GNU Affero General Public License v3.0&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ReactiveX/RxSwift</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/ReactiveX/RxSwift</id>
    <link href="https://github.com/ReactiveX/RxSwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reactive Programming in Swift&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/RxSwift_Logo.png&#34; width=&#34;35%&#34; alt=&#34;RxSwift Logo&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/ReactiveX/RxSwift/goto&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/ReactiveX/RxSwift/workflows/RxSwift/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-333333.svg?sanitize=true&#34; alt=&#34;Supported Platforms: iOS, macOS, tvOS, watchOS &amp;amp; Linux&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://cocoapods.org/pods/RxSwift&#34; alt=&#34;RxSwift on CocoaPods&#34; title=&#34;RxSwift on CocoaPods&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/RxSwift.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34; alt=&#34;RxSwift on Carthage&#34; title=&#34;RxSwift on Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34; alt=&#34;RxSwift on Swift Package Manager&#34; title=&#34;RxSwift on Swift Package Manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Rx is a &lt;a href=&#34;https://youtu.be/looJcaeboBY&#34;&gt;generic abstraction of computation&lt;/a&gt; expressed through &lt;code&gt;Observable&amp;lt;Element&amp;gt;&lt;/code&gt; interface, which lets you broadcast and subscribe to values and other events from an &lt;code&gt;Observable&lt;/code&gt; stream.&lt;/p&gt; &#xA;&lt;p&gt;RxSwift is the Swift-specific implementation of the &lt;a href=&#34;http://reactivex.io&#34;&gt;Reactive Extensions&lt;/a&gt; standard.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/example.png&#34; width=&#34;55%&#34; alt=&#34;RxSwift Observable Example of a price constantly changing and updating the app&#39;s UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;While this version aims to stay true to the original spirit and naming conventions of Rx, this projects also aims to provide a true Swift-first API for Rx APIs.&lt;/p&gt; &#xA;&lt;p&gt;Cross platform documentation can be found on &lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Like other Rx implementation, RxSwift&#39;s intention is to enable easy composition of asynchronous operations and streams of data in the form of &lt;code&gt;Observable&lt;/code&gt; objects and a suite of methods to transform and compose these pieces of asynchronous work.&lt;/p&gt; &#xA;&lt;p&gt;KVO observation, async operations, UI Events and other streams of data are all unified under &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#observables-aka-sequences&#34;&gt;abstraction of sequence&lt;/a&gt;. This is the reason why Rx is so simple, elegant and powerful.&lt;/p&gt; &#xA;&lt;h2&gt;I came here because I want to ...&lt;/h2&gt; &#xA;&lt;h6&gt;... understand&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Why.md&#34;&gt;why use rx?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md&#34;&gt;the basics, getting started with RxSwift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Traits.md&#34;&gt;traits&lt;/a&gt; - what are &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Completable&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Driver&lt;/code&gt;, and &lt;code&gt;ControlProperty&lt;/code&gt; ... and why do they exist?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/UnitTests.md&#34;&gt;testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Tips.md&#34;&gt;tips and common errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#debugging&#34;&gt;debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/MathBehindRx.md&#34;&gt;the math behind Rx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/HotAndColdObservables.md&#34;&gt;what are hot and cold observable sequences?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... install&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrate RxSwift/RxCocoa with my app. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/#installation&#34;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... hack around&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with the example app. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/ExampleApp.md&#34;&gt;Running Example App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;with operators in playgrounds. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Playgrounds.md&#34;&gt;Playgrounds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... interact&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All of this is great, but it would be nice to talk with other people using RxSwift and exchange experiences. &lt;br&gt;&lt;a href=&#34;http://slack.rxswift.org&#34;&gt;Join Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Report a problem using the library. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/.github/ISSUE_TEMPLATE.md&#34;&gt;Open an Issue With Bug Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Request a new feature. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/NewFeatureRequestTemplate.md&#34;&gt;Open an Issue With Feature Request Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Help out &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/CONTRIBUTING.md&#34;&gt;Check out contribution guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... compare&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/ComparisonWithOtherLibraries.md&#34;&gt;with Combine and ReactiveSwift&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... understand the structure&lt;/h6&gt; &#xA;&lt;p&gt;RxSwift is as compositional as the asynchronous work it drives. The core unit is RxSwift itself, while other dependencies can be added for UI Work, testing, and more.&lt;/p&gt; &#xA;&lt;p&gt;It comprises five separate components depending on each other in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;┌──────────────┐    ┌──────────────┐&#xA;│   RxCocoa    ├────▶   RxRelay    │&#xA;└───────┬──────┘    └──────┬───────┘&#xA;        │                  │        &#xA;┌───────▼──────────────────▼───────┐&#xA;│             RxSwift              │&#xA;└───────▲──────────────────▲───────┘&#xA;        │                  │        &#xA;┌───────┴──────┐    ┌──────┴───────┐&#xA;│    RxTest    │    │  RxBlocking  │&#xA;└──────────────┘    └──────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxSwift&lt;/strong&gt;: The core of RxSwift, providing the Rx standard as (mostly) defined by &lt;a href=&#34;https://reactivex.io&#34;&gt;ReactiveX&lt;/a&gt;. It has no other dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxCocoa&lt;/strong&gt;: Provides Cocoa-specific capabilities for general iOS/macOS/watchOS &amp;amp; tvOS app development, such as Shared Sequences, Traits, and much more. It depends on both &lt;code&gt;RxSwift&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxRelay&lt;/strong&gt;: Provides &lt;code&gt;PublishRelay&lt;/code&gt;, &lt;code&gt;BehaviorRelay&lt;/code&gt; and &lt;code&gt;ReplayRelay&lt;/code&gt;, three &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/Subjects.md#relays&#34;&gt;simple wrappers around Subjects&lt;/a&gt;. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxTest&lt;/strong&gt; and &lt;strong&gt;RxBlocking&lt;/strong&gt;: Provides testing capabilities for Rx-based systems. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;30%&#34;&gt;Here&#39;s an example&lt;/th&gt; &#xA;   &lt;th width=&#34;30%&#34;&gt;In Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Define search for GitHub repositories ...&lt;/td&gt; &#xA;   &lt;th rowspan=&#34;9&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/GithubSearch.gif&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div class=&#34;highlight highlight-source-swift&#34;&gt;&#xA;     &lt;pre&gt;&#xA;let searchResults = searchBar.rx.text.orEmpty&#xA;    .throttle(.milliseconds(300), scheduler: MainScheduler.instance)&#xA;    .distinctUntilChanged()&#xA;    .flatMapLatest { query -&amp;gt; Observable&amp;lt;[Repository]&amp;gt; in&#xA;        if query.isEmpty {&#xA;            return .just([])&#xA;        }&#xA;        return searchGitHub(query)&#xA;            .catchAndReturn([])&#xA;    }&#xA;    .observe(on: MainScheduler.instance)&lt;/pre&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;... then bind the results to your tableview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;30%&#34;&gt;&#xA;    &lt;div class=&#34;highlight highlight-source-swift&#34;&gt;&#xA;     &lt;pre&gt;&#xA;searchResults&#xA;    .bind(to: tableView.rx.items(cellIdentifier: &#34;Cell&#34;)) {&#xA;        (index, repository: Repository, cell) in&#xA;        cell.textLabel?.text = repository.name&#xA;        cell.detailTextLabel?.text = repository.url&#xA;    }&#xA;    .disposed(by: disposeBag)&lt;/pre&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.x&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Xcode 11 and below, &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/releases/tag/5.1.1&#34;&gt;use RxSwift 5.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;RxSwift doesn&#39;t contain any external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;These are currently the supported installation options:&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Open Rx.xcworkspace, choose &lt;code&gt;RxExample&lt;/code&gt; and hit run. This method will build everything and run the sample app&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Podfile&#xA;use_frameworks!&#xA;&#xA;target &#39;YOUR_TARGET_NAME&#39; do&#xA;    pod &#39;RxSwift&#39;, &#39;6.5.0&#39;&#xA;    pod &#39;RxCocoa&#39;, &#39;6.5.0&#39;&#xA;end&#xA;&#xA;# RxTest and RxBlocking make the most sense in the context of unit/integration tests&#xA;target &#39;YOUR_TESTING_TARGET&#39; do&#xA;    pod &#39;RxBlocking&#39;, &#39;6.5.0&#39;&#xA;    pod &#39;RxTest&#39;, &#39;6.5.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;YOUR_TARGET_NAME&lt;/code&gt; and then, in the &lt;code&gt;Podfile&lt;/code&gt; directory, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;XCFrameworks&lt;/h3&gt; &#xA;&lt;p&gt;Each release starting with RxSwift 6 includes &lt;code&gt;*.xcframework&lt;/code&gt; framework binaries.&lt;/p&gt; &#xA;&lt;p&gt;Simply drag the needed framework binaries to your &lt;strong&gt;Frameworks, Libraries, and Embedded Content&lt;/strong&gt; section under your target&#39;s &lt;strong&gt;General&lt;/strong&gt; tab.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using &lt;code&gt;RxCocoa&lt;/code&gt;, be sure to also drag &lt;strong&gt;RxCocoaRuntime.xcframework&lt;/strong&gt; before importing &lt;code&gt;RxCocoa&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/xcframeworks.png&#34; alt=&#34;XCFrameworks instructions&#34; width=&#34;65%&#34;&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;ReactiveX/RxSwift&#34; &#34;6.5.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage as a Static Library&lt;/h4&gt; &#xA;&lt;p&gt;Carthage defaults to building RxSwift as a Dynamic Library.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to build RxSwift as a Static Library using Carthage you may use the script below to manually modify the framework type before building with Carthage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;carthage update RxSwift --platform iOS --no-build&#xA;sed -i -e &#39;s/MACH_O_TYPE = mh_dylib/MACH_O_TYPE = staticlib/g&#39; Carthage/Checkouts/RxSwift/Rx.xcodeproj/project.pbxproj&#xA;carthage build RxSwift --platform iOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is a critical cross-dependency bug affecting many projects including RxSwift in Swift Package Manager. We&#39;ve &lt;a href=&#34;https://bugs.swift.org/browse/SR-12303&#34;&gt;filed a bug (SR-12303)&lt;/a&gt; in early 2020 but have no answer yet. Your mileage may vary. A partial workaround can be found &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/issues/2127#issuecomment-717830502&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.0&#xA;&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;RxTestProject&#34;,&#xA;  dependencies: [&#xA;    .package(url: &#34;https://github.com/ReactiveX/RxSwift.git&#34;, .exact(&#34;6.5.0&#34;))&#xA;  ],&#xA;  targets: [&#xA;    .target(name: &#34;RxTestProject&#34;, dependencies: [&#34;RxSwift&#34;, &#34;RxCocoa&#34;])&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build or test a module with RxTest dependency, set &lt;code&gt;TEST=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ TEST=1 swift test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually using git submodules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add RxSwift as a submodule&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add git@github.com:ReactiveX/RxSwift.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag &lt;code&gt;Rx.xcodeproj&lt;/code&gt; into Project Navigator&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Project &amp;gt; Targets &amp;gt; Build Phases &amp;gt; Link Binary With Libraries&lt;/code&gt;, click &lt;code&gt;+&lt;/code&gt; and select &lt;code&gt;RxSwift&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt; targets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://reactivex.io/&#34;&gt;http://reactivex.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Reactive-Extensions&#34;&gt;Reactive Extensions GitHub (GitHub)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://store.raywenderlich.com/products/rxswift-reactive-programming-with-swift&#34;&gt;RxSwift RayWenderlich.com Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GdvLP0ZAhhc&#34;&gt;RxSwift: Debunking the myth of hard (YouTube)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://boxueio.com/series/rxswift-101&#34;&gt;Boxue.io RxSwift Online Course&lt;/a&gt; (Chinese 🇨🇳)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/looJcaeboBY&#34;&gt;Expert to Expert: Brian Beckman and Erik Meijer - Inside the .NET Reactive Framework (Rx) (video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/-8Y1-lE6NSA&#34;&gt;Reactive Programming Overview (Jafar Husain from Netflix)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://csl.stanford.edu/~christos/pldi2010.fit/meijer.duality.pdf&#34;&gt;Subject/Observer is Dual to Iterator (paper)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;Rx standard sequence operators visualized (visualization tool)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>apollographql/apollo-ios</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/apollographql/apollo-ios</id>
    <link href="https://github.com/apollographql/apollo-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📱  A strongly-typed, caching GraphQL client for iOS, written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/146856/124335690-fc7ecd80-db4f-11eb-93fa-dcf4469bb07b.png&#34; alt=&#34;Apollo GraphQL&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://circleci.com/gh/apollographql/apollo-ios/tree/main&#34;&gt; &lt;img src=&#34;https://circleci.com/gh/apollographql/apollo-ios/tree/main.svg?style=shield&#34; alt=&#34;CircleCI build status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/apollographql/apollo-ios/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-lightgrey.svg?maxAge=2592000&#34; alt=&#34;MIT license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/apollographql/apollo-ios/main/Platforms&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-333333.svg?sanitize=true&#34; alt=&#34;Supported Platforms: iOS, macOS, tvOS, watchOS&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/apple/swift&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5.0-orange.svg?sanitize=true&#34; alt=&#34;Swift 5 supported&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34; alt=&#34;Swift Package Manager compatible&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Apollo&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/Apollo.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Apollo iOS is a strongly-typed, caching GraphQL client, written in Swift.&lt;/h3&gt; &#xA;&lt;p&gt;It allows you to execute queries and mutations against a GraphQL server, and returns results as query-specific Swift types. This means you don’t have to deal with parsing JSON, or passing around dictionaries and making clients cast values to the right type manually. You also don&#39;t have to write model types yourself, because these are generated from the GraphQL definitions your UI uses.&lt;/p&gt; &#xA;&lt;p&gt;As the generated types are query-specific, you&#39;re only able to access data you actually specify as part of a query. If you don&#39;t ask for a field, you won&#39;t be able to access the corresponding property. In effect, this means you can now rely on the Swift type checker to make sure errors in data access show up at compile time. With our Xcode integration, you can conveniently work with your UI code and corresponding GraphQL definitions side by side, and it will even validate your query documents, and show errors inline.&lt;/p&gt; &#xA;&lt;p&gt;Apollo iOS does more than simply run your queries against a GraphQL server: It normalizes query results to construct a client-side cache of your data, which is kept up to date as further queries and mutations are run. This means your UI is always internally consistent, and can be kept fully up-to-date with the state on the server with the minimum number of queries required.&lt;/p&gt; &#xA;&lt;p&gt;This combination of models with value semantics, one way data flow, and automatic consistency management, leads to a very powerful and elegant programming model that allows you to eliminate common glue code and greatly simplifies app development.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;If you are new to Apollo iOS there are two ways to get started:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://www.apollographql.com/docs/ios/tutorial/tutorial-introduction/&#34;&gt;tutorial&lt;/a&gt; which will guide you through building an iOS app using Swift and Apollo iOS.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://github.com/apollographql/apollo-client-swift-playground&#34;&gt;Playground&lt;/a&gt; covering the concepts of queries, mutations, subscriptions, SQLite caching and custom scalars.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There is also &lt;a href=&#34;https://www.apollographql.com/docs/ios/&#34;&gt;comprehensive documentation&lt;/a&gt; including an &lt;a href=&#34;https://www.apollographql.com/docs/ios/api-reference/&#34;&gt;API reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases and changelog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apollographql/apollo-ios/releases&#34;&gt;All releases&lt;/a&gt; are catalogued and we maintain a &lt;a href=&#34;https://github.com/apollographql/apollo-ios/raw/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt; which details all changes to the library.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/apollographql/apollo-ios/raw/main/ROADMAP.md&#34;&gt;roadmap&lt;/a&gt; is a high-level document that describes the next major steps or milestones for this project. We are always open to feature requests, and contributions from the community.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is being developed using Xcode 12.5 and Swift 5.4.&lt;/p&gt; &#xA;&lt;p&gt;If you open &lt;code&gt;Apollo.xcodeproj&lt;/code&gt;, you should be able to run the tests of the Apollo, ApolloSQLite, and ApolloWebSocket frameworks on your Mac or an iOS Simulator.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Due to a change in behavior in Xcode 11&#39;s git integration, if you check this repo out using Xcode, please close the window Xcode automatically opens using the Swift Package manager structure, and open the &lt;code&gt;Apollo.xcodeproj&lt;/code&gt; file instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some of the tests run against &lt;a href=&#34;https://github.com/apollographql/starwars-server&#34;&gt;a simple GraphQL server serving the Star Wars example schema&lt;/a&gt; (see installation instructions there).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute, please refer to the &lt;a href=&#34;https://github.com/apollographql/apollo-ios/raw/main/CONTRIBUTING.md&#34;&gt;Apollo Contributor Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AnthonyMDev&#34;&gt;@AnthonyMDev&lt;/a&gt; (Apollo)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/calvincestari&#34;&gt;@calvincestari&lt;/a&gt; (Apollo)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is Apollo?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apollographql.com/&#34;&gt;Apollo&lt;/a&gt; builds open-source software and a graph platform to unify GraphQL across your apps and services. We help you ship faster with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/studio/develop/&#34;&gt;Apollo Studio&lt;/a&gt; – A free, end-to-end platform for managing your GraphQL lifecycle. Track your GraphQL schemas in a hosted registry to create a source of truth for everything in your graph. Studio provides an IDE (Apollo Explorer) so you can explore data, collaborate on queries, observe usage, and safely make schema changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/apollo-federation&#34;&gt;Apollo Federation&lt;/a&gt; – The industry-standard open architecture for building a distributed graph. Use Apollo’s gateway to compose a unified graph from multiple subgraphs, determine a query plan, and route requests across your services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/apollo-client/&#34;&gt;Apollo Client&lt;/a&gt; – The most popular GraphQL client for the web. Apollo also builds and maintains &lt;a href=&#34;https://github.com/apollographql/apollo-ios&#34;&gt;Apollo iOS&lt;/a&gt; and &lt;a href=&#34;https://github.com/apollographql/apollo-android&#34;&gt;Apollo Android&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/docs/apollo-server/&#34;&gt;Apollo Server&lt;/a&gt; – A production-ready JavaScript GraphQL server that connects to any microservice, API, or database. Compatible with all popular JavaScript frameworks and deployable in serverless environments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn how to build with Apollo&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://odyssey.apollographql.com/&#34;&gt;Odyssey&lt;/a&gt; learning platform, the perfect place to start your GraphQL journey with videos and interactive code challenges. Join the &lt;a href=&#34;https://community.apollographql.com/&#34;&gt;Apollo Community&lt;/a&gt; to interact with and get technical help from the GraphQL community.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>danielgindi/Charts</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/danielgindi/Charts</id>
    <link href="https://github.com/danielgindi/Charts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Beautiful charts for iOS/tvOS/OSX! The Apple side of the crossplatform MPAndroidChart.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Version 4.0.0&lt;/strong&gt;, synced to &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart/commit/f6a398b&#34;&gt;MPAndroidChart #f6a398b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/danielgindi/Charts/master/Assets/feature_graphic.png&#34; alt=&#34;alt tag&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/Charts.svg?sanitize=true&#34; alt=&#34;Supported Platforms&#34;&gt; &lt;a href=&#34;https://github.com/danielgindi/Charts/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/danielgindi/Charts.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/charts&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Charts.svg?sanitize=true&#34; alt=&#34;Latest pod release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/danielgindi/Charts&#34;&gt;&lt;img src=&#34;https://travis-ci.org/danielgindi/Charts.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/danielgindi/Charts&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/danielgindi/Charts/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/danielgindi/Charts?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/danielgindi/Charts.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/danielgindi/Charts&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Just a heads up: Charts 3.0 has some breaking changes. Please read &lt;a href=&#34;https://github.com/danielgindi/Charts/releases/tag/v3.0.0&#34;&gt;the release/migration notes&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;h3&gt;Another heads up: ChartsRealm is now in a &lt;a href=&#34;https://github.com/danielgindi/ChartsRealm&#34;&gt;separate repo&lt;/a&gt;. Pods is also now &lt;code&gt;Charts&lt;/code&gt; and &lt;code&gt;ChartsRealm&lt;/code&gt;, instead of &lt;del&gt;&lt;code&gt;Charts/Core&lt;/code&gt;&lt;/del&gt; and &lt;del&gt;&lt;code&gt;Charts/Realm&lt;/code&gt;&lt;/del&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;One more heads up: As Swift evolves, if you are not using the latest Swift compiler, you shouldn&#39;t check out the master branch. Instead, you should go to the release page and pick up whatever suits you.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11 / Swift 5 (master branch)&lt;/li&gt; &#xA; &lt;li&gt;iOS &amp;gt;= 8.0 (Use as an &lt;strong&gt;Embedded&lt;/strong&gt; Framework)&lt;/li&gt; &#xA; &lt;li&gt;tvOS &amp;gt;= 9.0&lt;/li&gt; &#xA; &lt;li&gt;macOS &amp;gt;= 10.11&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Okay so there&#39;s this beautiful library called &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; by &lt;a href=&#34;https://www.linkedin.com/in/philippjahoda&#34;&gt;Philipp Jahoda&lt;/a&gt; which has become very popular amongst Android developers, but there was no decent solution to create charts for iOS.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve chosen to write it in &lt;code&gt;Swift&lt;/code&gt; as it can be highly optimized by the compiler, and can be used in both &lt;code&gt;Swift&lt;/code&gt; and &lt;code&gt;ObjC&lt;/code&gt; project. The demo project is written in &lt;code&gt;ObjC&lt;/code&gt; to demonstrate how it works.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;An amazing feature&lt;/strong&gt; of this library now, for Android, iOS, tvOS and macOS, is the time it saves you when developing for both platforms, as the learning curve is singleton- it happens only once, and the code stays very similar so developers don&#39;t have to go around and re-invent the app to produce the same output with a different library. (And that&#39;s not even considering the fact that there&#39;s not really another good choice out there currently...)&lt;/p&gt; &#xA;&lt;h2&gt;Having trouble running the demo?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ChartsDemo/ChartsDemo.xcodeproj&lt;/code&gt; is the demo project for iOS/tvOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ChartsDemo-OSX/ChartsDemo-OSX.xcodeproj&lt;/code&gt; is the demo project for macOS&lt;/li&gt; &#xA; &lt;li&gt;Make sure you are running a supported version of Xcode. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Usually it is specified here a few lines above.&lt;/li&gt; &#xA;   &lt;li&gt;In most cases it will be the latest Xcode version.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Make sure that your project supports Swift 5.0&lt;/li&gt; &#xA; &lt;li&gt;Optional: Run &lt;code&gt;carthage checkout&lt;/code&gt; in the project folder, to fetch dependencies (i.e testing dependencies). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you don&#39;t have Carthage - you can get it &lt;a href=&#34;https://github.com/Carthage/Carthage/releases&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In order to correctly compile:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag the &lt;code&gt;Charts.xcodeproj&lt;/code&gt; to your project&lt;/li&gt; &#xA; &lt;li&gt;Go to your target&#39;s settings, hit the &#34;+&#34; under the &#34;Embedded Binaries&#34; section, and select the Charts.framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@import Charts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;When using Swift in an ObjC project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need to import your Bridging Header. Usually it is &#34;&lt;em&gt;YourProject-Swift.h&lt;/em&gt;&#34;, so in ChartsDemo it&#39;s &#34;&lt;em&gt;ChartsDemo-Swift.h&lt;/em&gt;&#34;. Do not try to actually include &#34;&lt;em&gt;ChartsDemo-Swift.h&lt;/em&gt;&#34; in your project :-)&lt;/li&gt; &#xA; &lt;li&gt;(Xcode 8.1 and earlier) Under &#34;Build Options&#34;, mark &#34;Embedded Content Contains Swift Code&#34;&lt;/li&gt; &#xA; &lt;li&gt;(Xcode 8.2+) Under &#34;Build Options&#34;, mark &#34;Always Embed Swift Standard Libraries&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;When using &lt;a href=&#34;https://realm.io/&#34;&gt;Realm.io&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that the Realm framework is not linked with Charts - it is only there for &lt;em&gt;optional&lt;/em&gt; bindings. Which means that you need to have the framework in your project, and in a compatible version to whatever is compiled with Charts. We will do our best to always compile against the latest version.&lt;/li&gt; &#xA;   &lt;li&gt;You&#39;ll need to add &lt;code&gt;ChartsRealm&lt;/code&gt; as a dependency too.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;3rd party tutorials&lt;/h2&gt; &#xA;&lt;h4&gt;Video tutorials&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mWhwe_tLNE8&amp;amp;list=PL_csAAO9PQ8bjzg-wxEff1Fr0Y5W1hrum&amp;amp;index=5&#34;&gt;Chart in Swift - Setting Up a Basic Line Chart Using iOS Charts(Alex Nagy)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/csd7pyfEXgw&#34;&gt;Charts Framework in SwiftUI - Bar Chart (Stewart Lynch)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Blog posts&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@skoli/using-realm-and-charts-with-swift-3-in-ios-10-40c42e3838c0#.2gyymwfh8&#34;&gt;Using Realm and Charts with Swift 3 in iOS 10 (Sami Korpela)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@OsianSmith/creating-a-line-chart-in-swift-3-and-ios-10-2f647c95392e&#34;&gt;Creating a Line Chart in Swift 3 and iOS 10 (Osian Smith)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/annalizhaz/ChartsForSwiftBasic&#34;&gt;Beginning Set-up and Example Using Charts with Swift 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@HeyDaveTheDev/creating-a-radar-chart-in-swift-5791afcf92f0&#34;&gt;Creating a Radar Chart in Swift (David Piper)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@zzzzbh/plotting-in-ios-using-charts-framework-with-swiftui-222034a2bea6&#34;&gt;Plotting in IOS using Charts framework with SwiftUI (Evgeny Basisty)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@penny-huang/swift-setting-up-a-basic-bar-chart-using-ios-charts-afd6aad96ac&#34;&gt;Set Up a Basic Bar Chart Using iOS-Charts (Penny Huang)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@penny-huang/swift-ios-charts-tutorial-highlight-selected-value-with-a-custom-marker-30ccbf92aa1b&#34;&gt;iOS-Charts Tutorial: Highlight Selected Value With a Custom Marker (Penny Huang)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want your tutorial to show here? Create a PR!&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h4&gt;Can&#39;t compile?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please note the difference between installing a compiled framework from CocoaPods or Carthage, and copying the source code.&lt;/li&gt; &#xA; &lt;li&gt;Please read the &lt;strong&gt;Usage&lt;/strong&gt; section again.&lt;/li&gt; &#xA; &lt;li&gt;Search in the issues&lt;/li&gt; &#xA; &lt;li&gt;Try to politely ask in the issues section&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other problems / feature requests&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search in the issues&lt;/li&gt; &#xA; &lt;li&gt;Try to politely ask in the issues section&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CocoaPods Install&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;pod &#39;Charts&#39;&lt;/code&gt; to your Podfile. &#34;Charts&#34; is the name of the library.&lt;br&gt; For &lt;a href=&#34;https://realm.io/&#34;&gt;Realm&lt;/a&gt; support, please add &lt;code&gt;pod &#39;ChartsRealm&#39;&lt;/code&gt; too.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;del&gt;&lt;code&gt;pod &#39;ios-charts&#39;&lt;/code&gt;&lt;/del&gt; is not the correct library, and refers to a different project by someone else.&lt;/p&gt; &#xA;&lt;h2&gt;Carthage Install&lt;/h2&gt; &#xA;&lt;p&gt;Charts now include Carthage prebuilt binaries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-carthage&#34;&gt;github &#34;danielgindi/Charts&#34; == 4.0.0&#xA;github &#34;danielgindi/Charts&#34; ~&amp;gt; 4.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to build the binaries for a new release, use &lt;code&gt;carthage build --no-skip-current &amp;amp;&amp;amp; carthage archive Charts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Package Manager Install&lt;/h2&gt; &#xA;&lt;p&gt;Swift Package Manager&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/danielgindi/Charts.git&#34;, .upToNextMajor(from: &#34;4.0.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3rd party bindings&lt;/h2&gt; &#xA;&lt;p&gt;Xamarin (by @Flash3001): &lt;em&gt;iOS&lt;/em&gt; - &lt;a href=&#34;https://github.com/Flash3001/iOSCharts.Xamarin&#34;&gt;GitHub&lt;/a&gt;/&lt;a href=&#34;https://www.nuget.org/packages/iOSCharts/&#34;&gt;NuGet&lt;/a&gt;. &lt;em&gt;Android&lt;/em&gt; - &lt;a href=&#34;https://github.com/Flash3001/MPAndroidChart.Xamarin&#34;&gt;GitHub&lt;/a&gt;/&lt;a href=&#34;https://www.nuget.org/packages/MPAndroidChart/&#34;&gt;NuGet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you like what you see here, and want to support the work being done in this repository, you could:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contribute code, issues and pull requests&lt;/li&gt; &#xA; &lt;li&gt;Let people know this library exists (&lt;span&gt;🔥&lt;/span&gt; spread the word &lt;span&gt;🔥&lt;/span&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=68UL6Y8KUPS96&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; (You can buy me a beer, or you can buy me dinner :-)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The author of &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; is the reason that this library exists, and is accepting &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart#donations&#34;&gt;donations&lt;/a&gt; on his page. He deserves them!&lt;/p&gt; &#xA;&lt;h2&gt;Questions &amp;amp; Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are having questions or problems, you should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you are using the latest version of the library. Check the &lt;a href=&#34;https://github.com/danielgindi/Charts/releases&#34;&gt;&lt;strong&gt;release-section&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Study the Android version&#39;s &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart/wiki&#34;&gt;&lt;strong&gt;Documentation-Wiki&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Search or open questions on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/ios-charts&#34;&gt;&lt;strong&gt;stackoverflow&lt;/strong&gt;&lt;/a&gt; with the &lt;code&gt;ios-charts&lt;/code&gt; tag&lt;/li&gt; &#xA; &lt;li&gt;Search &lt;a href=&#34;https://github.com/danielgindi/Charts/issues&#34;&gt;&lt;strong&gt;known issues&lt;/strong&gt;&lt;/a&gt; for your problem (open and closed)&lt;/li&gt; &#xA; &lt;li&gt;Create new issues (please &lt;span&gt;🔥&lt;/span&gt; &lt;strong&gt;search known issues before&lt;/strong&gt; &lt;span&gt;🔥&lt;/span&gt;, do not create duplicate issues)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;8 different chart types&lt;/li&gt; &#xA; &lt;li&gt;Scaling on both axes (with touch-gesture, axes separately or pinch-zoom)&lt;/li&gt; &#xA; &lt;li&gt;Dragging / Panning (with touch-gesture)&lt;/li&gt; &#xA; &lt;li&gt;Combined-Charts (line-, bar-, scatter-, candle-stick-, bubble-)&lt;/li&gt; &#xA; &lt;li&gt;Dual (separate) Axes&lt;/li&gt; &#xA; &lt;li&gt;Customizable Axes (both x- and y-axis)&lt;/li&gt; &#xA; &lt;li&gt;Highlighting values (with customizable popup-views)&lt;/li&gt; &#xA; &lt;li&gt;Save chart to camera-roll / export to PNG/JPEG&lt;/li&gt; &#xA; &lt;li&gt;Predefined color templates&lt;/li&gt; &#xA; &lt;li&gt;Legends (generated automatically, customizable)&lt;/li&gt; &#xA; &lt;li&gt;Animations (build up animations, on both x- and y-axis)&lt;/li&gt; &#xA; &lt;li&gt;Limit lines (providing additional information, maximums, ...)&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable (paints, typefaces, legends, colors, background, gestures, dashed lines, ...)&lt;/li&gt; &#xA; &lt;li&gt;Plotting data directly from &lt;a href=&#34;https://realm.io&#34;&gt;&lt;strong&gt;Realm.io&lt;/strong&gt;&lt;/a&gt; mobile database (&lt;a href=&#34;https://github.com/danielgindi/ChartsRealm&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chart types:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshots are currently taken from the original repository, as they render exactly the same :-)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (with legend, simple design)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_linechart4.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (with legend, simple design)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_linechart3.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (cubic lines)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/cubiclinechart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (gradient fill)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/line_chart_gradient.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Combined-Chart (bar- and linechart in this case)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/combined_chart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;BarChart (with legend, simple design)&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_barchart3.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BarChart (grouped DataSets)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/groupedbarchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Horizontal-BarChart&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/horizontal_barchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PieChart (with selection, ...)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/simpledesign_piechart1.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ScatterChart&lt;/strong&gt; (with squares, triangles, circles, ... and more)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/scatterchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CandleStickChart&lt;/strong&gt; (for financial data)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/candlestickchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BubbleChart&lt;/strong&gt; (area covered by bubbles indicates the value)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/bubblechart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RadarChart&lt;/strong&gt; (spider web chart)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/radarchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Currently there&#39;s no need for documentation for the iOS/tvOS/macOS version, as the API is &lt;strong&gt;95% the same&lt;/strong&gt; as on Android.&lt;br&gt; You can read the official &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; documentation here: &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart/wiki&#34;&gt;&lt;strong&gt;Wiki&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can see the Charts Demo project in both Objective-C and Swift (&lt;a href=&#34;https://github.com/danielgindi/Charts/tree/master/ChartsDemo-iOS&#34;&gt;&lt;strong&gt;ChartsDemo-iOS&lt;/strong&gt;&lt;/a&gt;, as well as macOS &lt;a href=&#34;https://github.com/danielgindi/Charts/tree/master/ChartsDemo-macOS&#34;&gt;&lt;strong&gt;ChartsDemo-macOS&lt;/strong&gt;&lt;/a&gt;) and learn the how-tos from it.&lt;/p&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;p&gt;Goes to &lt;a href=&#34;https://github.com/liuxuan30&#34;&gt;@liuxuan30&lt;/a&gt;, &lt;a href=&#34;https://github.com/petester42&#34;&gt;@petester42&lt;/a&gt; and &lt;a href=&#34;https://github.com/AlBirdie&#34;&gt;@AlBirdie&lt;/a&gt; for new features, bugfixes, and lots and lots of involvement in our open-sourced community! You guys are a huge help to all of those coming here with questions and issues, and I couldn&#39;t respond to all of those without you.&lt;/p&gt; &#xA;&lt;h3&gt;Our amazing sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://debricked.com/&#34;&gt;Debricked&lt;/a&gt;: Use open source securely&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://debricked.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4375169/73585544-25bfa800-44dd-11ea-9661-82519a125302.jpg&#34; alt=&#34;debricked&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2016 Daniel Cohen Gindi &amp;amp; Philipp Jahoda&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SnapKit/SnapKit</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/SnapKit/SnapKit</id>
    <link href="https://github.com/SnapKit/SnapKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift Autolayout DSL for iOS &amp; OS X&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://snapkit.github.io/SnapKit/images/banner.jpg&#34; alt=&#34;&#34;&gt; &#xA;&lt;p&gt;SnapKit is a DSL to make Auto Layout easy on both iOS and OS X.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SnapKit/SnapKit&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SnapKit/SnapKit.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SnapKit/SnapKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/SnapKit.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SnapKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SnapKit.svg?sanitize=true&#34; alt=&#34;Cocoapods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;⚠️ &lt;strong&gt;To use with Swift 4.x please ensure you are using &amp;gt;= 4.0.0&lt;/strong&gt; ⚠️&lt;/h4&gt; &#xA;&lt;h4&gt;⚠️ &lt;strong&gt;To use with Swift 5.x please ensure you are using &amp;gt;= 5.0.0&lt;/strong&gt; ⚠️&lt;/h4&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#migration-guides&#34;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#communication&#34;&gt;Communication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.0+ / Mac OS X 10.12+ / tvOS 10.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.0+&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Migration Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/Documentation/SnapKit%203.0%20Migration%20Guide.md&#34;&gt;SnapKit 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/snapkit&#34;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;snapkit&#39;)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/snapkit&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. You can install it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CocoaPods 1.1.0+ is required to build SnapKit 4.0.0+.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To integrate SnapKit into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;10.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;    pod &#39;SnapKit&#39;, &#39;~&amp;gt; 5.6.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate SnapKit into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;SnapKit/SnapKit&#34; ~&amp;gt; 5.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; to build the framework and drag the built &lt;code&gt;SnapKit.framework&lt;/code&gt; into your Xcode project.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code. It’s integrated with the Swift build system to automate the process of downloading, compiling, and linking dependencies.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Xcode 11+ is required to build SnapKit using Swift Package Manager.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To integrate SnapKit into your Xcode project using Swift Package Manager, add it to the dependencies value of your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/SnapKit/SnapKit.git&#34;, .upToNextMajor(from: &#34;5.0.1&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use either of the aforementioned dependency managers, you can integrate SnapKit into your project manually.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SnapKit&#xA;&#xA;class MyViewController: UIViewController {&#xA;&#xA;    lazy var box = UIView()&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;&#xA;        self.view.addSubview(box)&#xA;        box.backgroundColor = .green&#xA;        box.snp.makeConstraints { (make) -&amp;gt; Void in&#xA;           make.width.height.equalTo(50)&#xA;           make.center.equalTo(self.view)&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Playground&lt;/h3&gt; &#xA;&lt;p&gt;You can try SnapKit in Playground.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To try SnapKit in playground, open &lt;code&gt;SnapKit.xcworkspace&lt;/code&gt; and build SnapKit.framework for any simulator first.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snapkit.github.io/SnapKit/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snapkit.github.io/SnapKit/faq/&#34;&gt;F.A.Q.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Robert Payne (&lt;a href=&#34;https://twitter.com/robertjpayne&#34;&gt;@robertjpayne&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Many other contributors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SnapKit is released under the MIT license. See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Swinject/Swinject</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/Swinject/Swinject</id>
    <link href="https://github.com/Swinject/Swinject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dependency injection framework for Swift with iOS/macOS/Linux&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/13637225?v=3&amp;amp;s=600&#34; width=&#34;33%&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Swinject&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/Swinject/Swinject&#34;&gt;&lt;img src=&#34;https://travis-ci.com/Swinject/Swinject.svg?branch=master&#34; alt=&#34;Travis CI Com&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/1ucas/Swinject/actions/workflows/Project%20Testing.yml/badge.svg?branch=master&#34; alt=&#34;Github Actions&#34;&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Swinject&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Swinject.svg?style=flat&#34; alt=&#34;CocoaPods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Swinject&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Swinject.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Swinject&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg?sanitize=true&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-4.2--5.4-F16D39.svg?style=flat&#34; alt=&#34;Swift Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swinject is a lightweight &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;dependency injection&lt;/a&gt; framework for Swift.&lt;/p&gt; &#xA;&lt;p&gt;Dependency injection (DI) is a software design pattern that implements Inversion of Control (IoC) for resolving dependencies. In the pattern, Swinject helps your app split into loosely-coupled components, which can be developed, tested and maintained more easily. Swinject is powered by the Swift generic type system and first class functions to define dependencies of your app simply and fluently.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/README.md#user-content-pure-swift-type-support&#34;&gt;Pure Swift Type Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/DIContainer.md#registration-with-arguments-to-di-container&#34;&gt;Injection with Arguments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/InjectionPatterns.md&#34;&gt;Initializer/Property/Method Injections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/InjectionPatterns.md#user-content-initialization-callback&#34;&gt;Initialization Callback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/CircularDependencies.md&#34;&gt;Circular Dependency Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ObjectScopes.md&#34;&gt;Object Scopes as None (Transient), Graph, Container (Singleton) and Hierarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support of both Reference and &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Misc.md#value-types&#34;&gt;Value Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Misc.md#self-registration-self-binding&#34;&gt;Self-registration (Self-binding)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ContainerHierarchy.md&#34;&gt;Container Hierarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ThreadSafety.md&#34;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Assembler.md&#34;&gt;Modular Components&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectPropertyLoader&#34;&gt;SwinjectPropertyLoader&lt;/a&gt;&lt;/strong&gt;: Loading property values from resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectStoryboard&#34;&gt;SwinjectStoryboard&lt;/a&gt;&lt;/strong&gt;: Automatic dependency injection via Storyboard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/Swinject-CodeGen&#34;&gt;Swinject-CodeGen&lt;/a&gt;&lt;/strong&gt;: Type-safe code generation of &lt;code&gt;Container&lt;/code&gt; from a CSV/YAML file defining dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectAutoregistration&#34;&gt;SwinjectAutoregistration&lt;/a&gt;&lt;/strong&gt;: Automatic registration of services by leveraging the Swift Generics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 9.0+ / Mac OS X 10.10+ / watchOS 2.0+ / tvOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.2+&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.2+&lt;/li&gt; &#xA; &lt;li&gt;Carthage 0.18+ (if you use)&lt;/li&gt; &#xA; &lt;li&gt;CocoaPods 1.1.1+ (if you use)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Swinject is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, or &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To install Swinject with Carthage, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Swinject/Swinject&#34;&#xA;&#xA;# Uncomment if you use SwinjectStoryboard&#xA;# github &#34;Swinject/SwinjectStoryboard&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update --no-use-binaries&lt;/code&gt; command or just &lt;code&gt;carthage update&lt;/code&gt;. For details of the installation and usage of Carthage, visit &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;its project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;To install Swinject with CocoaPods, add the following lines to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;9.0&#39; # or platform :osx, &#39;10.10&#39; if your target is OS X.&#xA;use_frameworks!&#xA;&#xA;pod &#39;Swinject&#39;&#xA;&#xA;# Uncomment if you use SwinjectStoryboard&#xA;# pod &#39;SwinjectStoryboard&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt; command. For details of the installation and usage of CocoaPods, visit &lt;a href=&#34;https://cocoapods.org&#34;&gt;its official website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;in &lt;code&gt;Package.swift&lt;/code&gt; add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    // Dependencies declare other packages that this package depends on.&#xA;    // .package(url: /* package url */, from: &#34;1.0.0&#34;),&#xA;    .package(url: &#34;https://github.com/Swinject/Swinject.git&#34;, from: &#34;2.8.0&#34;)&#xA;],&#xA;targets: [&#xA;    .target(&#xA;        name: &#34;MyProject&#34;,&#xA;        dependencies: [..., &#34;Swinject&#34;]&#xA;    )&#xA;    ...&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation&#34;&gt;Technical documents&lt;/a&gt; including patterns of dependency injection and examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/Swinject/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, register a service and component pair to a &lt;code&gt;Container&lt;/code&gt;, where the component is created by the registered closure as a factory. In this example, &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;PetOwner&lt;/code&gt; are component classes implementing &lt;code&gt;Animal&lt;/code&gt; and &lt;code&gt;Person&lt;/code&gt; service protocols, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let container = Container()&#xA;container.register(Animal.self) { _ in Cat(name: &#34;Mimi&#34;) }&#xA;container.register(Person.self) { r in&#xA;    PetOwner(pet: r.resolve(Animal.self)!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then get an instance of a service from the container. The person is resolved to a pet owner, and playing with the cat named Mimi!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person = container.resolve(Person.self)!&#xA;person.play() // prints &#34;I&#39;m playing with Mimi.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where definitions of the protocols and classes are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Animal {&#xA;    var name: String? { get }&#xA;}&#xA;&#xA;class Cat: Animal {&#xA;    let name: String?&#xA;&#xA;    init(name: String?) {&#xA;        self.name = name&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Person {&#xA;    func play()&#xA;}&#xA;&#xA;class PetOwner: Person {&#xA;    let pet: Animal&#xA;&#xA;    init(pet: Animal) {&#xA;        self.pet = pet&#xA;    }&#xA;&#xA;    func play() {&#xA;        let name = pet.name ?? &#34;someone&#34;&#xA;        print(&#34;I&#39;m playing with \(name).&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the &lt;code&gt;pet&lt;/code&gt; of &lt;code&gt;PetOwner&lt;/code&gt; is automatically set as the instance of &lt;code&gt;Cat&lt;/code&gt; when &lt;code&gt;Person&lt;/code&gt; is resolved to the instance of &lt;code&gt;PetOwner&lt;/code&gt;. If a container already set up is given, you do not have to care what are the actual types of the services and how they are created with their dependency.&lt;/p&gt; &#xA;&lt;h2&gt;Where to Register Services&lt;/h2&gt; &#xA;&lt;p&gt;Services must be registered to a container before they are used. The typical registration approach will differ depending upon whether you are using &lt;code&gt;SwinjectStoryboard&lt;/code&gt; or not.&lt;/p&gt; &#xA;&lt;p&gt;The following view controller class is used in addition to the protocols and classes above in the examples below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PersonViewController: UIViewController {&#xA;    var person: Person?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With SwinjectStoryboard&lt;/h3&gt; &#xA;&lt;p&gt;Import SwinjectStoryboard at the top of your swift source file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwinjectStoryboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services should be registered in an extension of &lt;code&gt;SwinjectStoryboard&lt;/code&gt; if you use &lt;code&gt;SwinjectStoryboard&lt;/code&gt;. Refer to &lt;a href=&#34;https://github.com/Swinject/SwinjectStoryboard&#34;&gt;the project page of SwinjectStoryboard&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension SwinjectStoryboard {&#xA;    @objc class func setup() {&#xA;        defaultContainer.register(Animal.self) { _ in Cat(name: &#34;Mimi&#34;) }&#xA;        defaultContainer.register(Person.self) { r in&#xA;            PetOwner(pet: r.resolve(Animal.self)!)&#xA;        }&#xA;        defaultContainer.register(PersonViewController.self) { r in&#xA;            let controller = PersonViewController()&#xA;            controller.person = r.resolve(Person.self)&#xA;            return controller&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Without SwinjectStoryboard&lt;/h3&gt; &#xA;&lt;p&gt;If you do not use &lt;code&gt;SwinjectStoryboard&lt;/code&gt; to instantiate view controllers, services should be registered to a container in your application&#39;s &lt;code&gt;AppDelegate&lt;/code&gt;. Registering before exiting &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; will ensure that the services are setup appropriately before they are used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;    var window: UIWindow?&#xA;    let container: Container = {&#xA;        let container = Container()&#xA;        container.register(Animal.self) { _ in Cat(name: &#34;Mimi&#34;) }&#xA;        container.register(Person.self) { r in&#xA;            PetOwner(pet: r.resolve(Animal.self)!)&#xA;        }&#xA;        container.register(PersonViewController.self) { r in&#xA;            let controller = PersonViewController()&#xA;            controller.person = r.resolve(Person.self)&#xA;            return controller&#xA;        }&#xA;        return container&#xA;    }()&#xA;&#xA;    func application(&#xA;        _ application: UIApplication,&#xA;        didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -&amp;gt; Bool {&#xA;&#xA;        // Instantiate a window.&#xA;        let window = UIWindow(frame: UIScreen.main.bounds)&#xA;        window.makeKeyAndVisible()&#xA;        self.window = window&#xA;&#xA;        // Instantiate the root view controller with dependencies injected by the container.&#xA;        window.rootViewController = container.resolve(PersonViewController.self)&#xA;&#xA;        return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the example uses a convenience initializer taking a closure to register services to the new instance of &lt;code&gt;Container&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Play in Playground!&lt;/h2&gt; &#xA;&lt;p&gt;The project contains &lt;code&gt;Sample-iOS.playground&lt;/code&gt; to demonstrate the features of Swinject. Download or clone the project, run the playground, modify it, and play with it to learn Swinject.&lt;/p&gt; &#xA;&lt;p&gt;To run the playground in the project, first build the project, then select &lt;code&gt;Editor &amp;gt; Execute Playground&lt;/code&gt; menu in Xcode.&lt;/p&gt; &#xA;&lt;h2&gt;Example Apps&lt;/h2&gt; &#xA;&lt;p&gt;Some example apps using Swinject can be found on &lt;a href=&#34;https://github.com/search?o=desc&amp;amp;q=swinject&amp;amp;s=updated&amp;amp;type=Repositories&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Blog Posts&lt;/h2&gt; &#xA;&lt;p&gt;The following blog posts introduce the concept of dependency injection and Swinject.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/14223279-dependency-injection-tutorial-for-ios-getting-started&#34;&gt;Dependency Injection Tutorial for iOS: Getting Started&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://www.raywenderlich.com/u/galata&#34;&gt;Irina Galata&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/17-swinject-tutorial-for-ios-getting-started&#34;&gt;Swinject Tutorial for iOS: Getting Started&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://www.raywenderlich.com/u/gemmakbarlow&#34;&gt;Gemma Barlow&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/flawless-app-stories/ios-dependency-injection-using-swinject-9c4ceff99e41&#34;&gt;iOS Dependency Injection Using Swinject&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://ali-akhtar.medium.com&#34;&gt;Ali Akhtar&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/its-tinkoff/di-in-ios-complete-guide-cd76a079d2d&#34;&gt;DI in iOS: Complete guide&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://medium.com/@batrakov.vitaly&#34;&gt;Vitaly Batrakov&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks the authors!&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guide&lt;/h2&gt; &#xA;&lt;p&gt;A guide to &lt;a href=&#34;https://github.com/Swinject/Swinject/issues&#34;&gt;submit issues&lt;/a&gt;, to ask general questions, or to &lt;a href=&#34;https://github.com/Swinject/Swinject/pulls&#34;&gt;open pull requests&lt;/a&gt; is &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Question?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/swinject&#34;&gt;Stack Overflow&lt;/a&gt; we are trying to monitor questions tagged &lt;code&gt;swinject&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The DI container features of Swinject are inspired by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ninject.org&#34;&gt;Ninject&lt;/a&gt; - &lt;a href=&#34;https://github.com/enkari&#34;&gt;Enkari, Ltd&lt;/a&gt; and &lt;a href=&#34;https://github.com/ninject/Ninject/graphs/contributors&#34;&gt;the Ninject project contributors&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://autofac.org&#34;&gt;Autofac&lt;/a&gt; - &lt;a href=&#34;https://github.com/autofac/Autofac&#34;&gt;Autofac Project&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and highly inspired by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://funq.codeplex.com&#34;&gt;Funq&lt;/a&gt; - &lt;a href=&#34;http://www.codeplex.com/site/users/view/dcazzulino&#34;&gt;Daniel Cazzulino&lt;/a&gt; and &lt;a href=&#34;http://funq.codeplex.com/team/view&#34;&gt;the project team&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/LICENSE&#34;&gt;LICENSE file&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HeroTransitions/Hero</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/HeroTransitions/Hero</id>
    <link href="https://github.com/HeroTransitions/Hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elegant transition library for iOS &amp; tvOS&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/427d5f2/Resources/Hero.svg?sanitize=true&#34; width=&#34;388&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hero&lt;/strong&gt; is a library for building iOS view controller transitions. It provides a declarative layer on top of the UIKit&#39;s cumbersome transition APIs—making custom transitions an easy task for developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-Compatible-brightgreen.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/HeroTransitions/Hero&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/HeroTransitions/Hero/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Hero&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Hero.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lkzhao/Hero/raw/master/LICENSE?raw=true&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Hero.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Xcode-9.0%2B-blue.svg?sanitize=true&#34; alt=&#34;Xcode 9.0+&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/iOS-8.0%2B-blue.svg?sanitize=true&#34; alt=&#34;iOS 8.0+&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-4.0%2B-orange.svg?sanitize=true&#34; alt=&#34;Swift 4.0+&#34;&gt; &lt;a href=&#34;https://github.com/lkzhao/Hero/raw/master/README.zh-cn.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E4%B8%AD%E6%96%87-README-blue.svg?style=flat&#34; alt=&#34;中文 README&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=NT5F7Y2MPV7RE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/features.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/features2.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hero is similar to Keynote&#39;s &lt;strong&gt;Magic Move&lt;/strong&gt;. It checks the &lt;code&gt;heroID&lt;/code&gt; property on all source and destination views. Every matched view pair is then automatically transitioned from its old state to its new state.&lt;/p&gt; &#xA;&lt;p&gt;Hero can also construct animations for unmatched views. It is easy to define these animations via the &lt;code&gt;heroModifiers&lt;/code&gt; property. Hero will run these animations alongside the &lt;strong&gt;Magic Move&lt;/strong&gt; animations. All of these animations can be &lt;strong&gt;interactively controlled&lt;/strong&gt; by user gestures.&lt;/p&gt; &#xA;&lt;p&gt;At view controller level, Hero provides several template transitions that you can set through &lt;code&gt;heroModalAnimationType&lt;/code&gt;, &lt;code&gt;heroNavigationAnimationType&lt;/code&gt;, and &lt;code&gt;heroTabBarAnimationType&lt;/code&gt;. These can be used as the foundation of your custom transitions. Combine with &lt;code&gt;heroID&lt;/code&gt; &amp;amp; &lt;code&gt;heroModifiers&lt;/code&gt; to make your own unique transitions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/defaultAnimations.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/defaultAnimations2.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, Hero provides &lt;strong&gt;dynamic duration&lt;/strong&gt; based on the &lt;a href=&#34;https://material.io/design/motion/speed.html#easing&#34;&gt;Material Design Motion Guide&lt;/a&gt;. Duration is automatically determined by changes to distance and size—saving you the hassle, while providing consistent and delightful animations.&lt;/p&gt; &#xA;&lt;p&gt;Hero doesn&#39;t make any assumptions about how the view is built or structured. It won&#39;t modify any of your views&#39; states other than hiding them during the animation. This makes it work with &lt;strong&gt;Auto Layout&lt;/strong&gt;, &lt;strong&gt;programmatic layout&lt;/strong&gt;, &lt;strong&gt;UICollectionView&lt;/strong&gt; (without modifying its layout object), &lt;strong&gt;UITableView&lt;/strong&gt;, &lt;strong&gt;UINavigationController&lt;/strong&gt;, &lt;strong&gt;UITabBarController&lt;/strong&gt;, etc...&lt;/p&gt; &#xA;&lt;h2&gt;Usage Example 1&lt;/h2&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/simple.svg?sanitize=true&#34;&gt; &#xA;&lt;h3&gt;View Controller 1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;redView.hero.id = &#34;ironMan&#34;&#xA;blackView.hero.id = &#34;batMan&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View Controller 2&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.hero.isEnabled = true&#xA;redView.hero.id = &#34;ironMan&#34;&#xA;blackView.hero.id = &#34;batMan&#34;&#xA;whiteView.hero.modifiers = [.translate(y:100)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage Example 2&lt;/h2&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/advanced.svg?sanitize=true&#34;&gt; &#xA;&lt;h3&gt;View Controller 1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;greyView.hero.id = &#34;skyWalker&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View Controller 2&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.hero.isEnabled = true&#xA;greyView.hero.id = &#34;skyWalker&#34;&#xA;&#xA;// collectionView is the parent view of all red cells&#xA;collectionView.hero.modifiers = [.cascade]&#xA;for cell in redCells {&#xA;    cell.hero.modifiers = [.fade, .scale(0.5)]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can do these in the &lt;strong&gt;storyboard&lt;/strong&gt; too!&lt;/p&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/master/Resources/storyboardView.png&#34; width=&#34;267px&#34;&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/master/Resources/storyboardViewController.png&#34; width=&#34;267px&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add the following entry to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;pod &#39;Hero&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to &lt;code&gt;import Hero&lt;/code&gt; in every file you&#39;d like to use Hero.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following entry to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;github &#34;HeroTransitions/Hero&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Accio&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/HeroTransitions/Hero.git&#34;, .upToNextMajor(from: &#34;1.4.0&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add &lt;code&gt;Hero&lt;/code&gt; to your App targets dependencies like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(&#xA;    name: &#34;App&#34;,&#xA;    dependencies: [&#xA;        &#34;Hero&#34;,&#xA;    ]&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;accio update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;To integrate using Apple&#39;s Swift package manager, add the following as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/HeroTransitions/Hero.git&#34;, .upToNextMajor(from: &#34;1.3.0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then specify &lt;code&gt;&#34;Hero&#34;&lt;/code&gt; as a dependency of the Target in which you wish to use Hero. Here&#39;s an example &lt;code&gt;PackageDescription&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:4.0&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyPackage&#34;,&#xA;    products: [&#xA;        .library(&#xA;            name: &#34;MyPackage&#34;,&#xA;            targets: [&#34;MyPackage&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/HeroTransitions/Hero.git&#34;, .upToNextMajor(from: &#34;1.6.1&#34;))&#xA;    ],&#xA;    targets: [&#xA;        .target(&#xA;            name: &#34;MyPackage&#34;,1.6.1&#xA;            dependencies: [&#34;Hero&#34;])&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag the &lt;strong&gt;Sources&lt;/strong&gt; folder anywhere in your project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentations&lt;/h2&gt; &#xA;&lt;p&gt;Checkout the &lt;strong&gt;&lt;a href=&#34;https://github.com/lkzhao/Hero/wiki/Usage-Guide&#34;&gt;WIKI PAGES (Usage Guide)&lt;/a&gt;&lt;/strong&gt; for documentations.&lt;/p&gt; &#xA;&lt;p&gt;For more up-to-date ones, please see the header-doc. (use &lt;strong&gt;alt+click&lt;/strong&gt; in Xcode) &lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/master/Resources/headerDoc.png&#34; width=&#34;521px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interactive Transition Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lkzhao.gitbooks.io/hero/content/docs/InteractiveTransition.html&#34;&gt;Interactive transitions with Hero (Part 1)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Not able to use Hero transition even when &lt;code&gt;self.hero.isEnabled&lt;/code&gt; is set to true&lt;/h3&gt; &#xA;&lt;p&gt;Make sure that you have also enabled &lt;code&gt;self.hero.isEnabled&lt;/code&gt; on the navigation controller if you are doing a push/pop inside the navigation controller.&lt;/p&gt; &#xA;&lt;h3&gt;Views being covered by another matched view during the transition&lt;/h3&gt; &#xA;&lt;p&gt;Matched views use global coordinate space while unmatched views use local coordinate space by default. Local coordinate spaced views might be covered by other global coordinate spaced views. To solve this, use the &lt;code&gt;useGlobalCoordinateSpace&lt;/code&gt; modifier on the views being covered. Checkout &lt;a href=&#34;https://github.com/lkzhao/Hero/wiki/Coordinate-Space&#34;&gt;Coordinate Space Wiki page&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Push animation is shown along side my custom animation&lt;/h3&gt; &#xA;&lt;p&gt;This is the default animation for navigation controller provided by Hero. To disable the push animation, set &lt;code&gt;self.hero.navigationAnimationType&lt;/code&gt; to &lt;code&gt;.fade&lt;/code&gt; or &lt;code&gt;.none&lt;/code&gt; on the navigation controller.&lt;/p&gt; &#xA;&lt;h3&gt;How do I use a different default animation when dismissing&lt;/h3&gt; &#xA;&lt;p&gt;You can use the animation type &lt;code&gt;.selectBy(presenting:dismissing)&lt;/code&gt; to specify a different default animation for dismiss.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    self.hero.modalAnimationType = .selectBy(presenting:.zoom, dismissing:.zoomOut)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We welcome any contributions. Please read the &lt;a href=&#34;https://github.com/lkzhao/Hero/wiki/Contribution-Guide&#34;&gt;Contribution Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>socketio/socket.io-client-swift</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/socketio/socket.io-client-swift</id>
    <link href="https://github.com/socketio/socket.io-client-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/socketio/socket.io-client-swift&#34;&gt;&lt;img src=&#34;https://travis-ci.org/socketio/socket.io-client-swift.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Socket.IO-Client-Swift&lt;/h1&gt; &#xA;&lt;p&gt;Socket.IO-client for iOS/OS X.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SocketIO&#xA;&#xA;let manager = SocketManager(socketURL: URL(string: &#34;http://localhost:8080&#34;)!, config: [.log(true), .compress])&#xA;let socket = manager.defaultSocket&#xA;&#xA;socket.on(clientEvent: .connect) {data, ack in&#xA;    print(&#34;socket connected&#34;)&#xA;}&#xA;&#xA;socket.on(&#34;currentAmount&#34;) {data, ack in&#xA;    guard let cur = data[0] as? Double else { return }&#xA;    &#xA;    socket.emitWithAck(&#34;canUpdate&#34;, cur).timingOut(after: 0) {data in&#xA;        if data.first as? String ?? &#34;passed&#34; == SocketAckValue.noAck {&#xA;            // Handle ack timeout &#xA;        }&#xA;&#xA;        socket.emit(&#34;update&#34;, [&#34;amount&#34;: cur + 2.50])&#xA;    }&#xA;&#xA;    ack.with(&#34;Got your currentAmount&#34;, &#34;dude&#34;)&#xA;}&#xA;&#xA;socket.connect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Socket.IO server 2.0+/3.0+/4.0+ (see the &lt;a href=&#34;https://nuclearace.github.io/Socket.IO-Client-Swift/Compatibility.html&#34;&gt;compatibility table&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Supports Binary&lt;/li&gt; &#xA; &lt;li&gt;Supports Polling and WebSockets&lt;/li&gt; &#xA; &lt;li&gt;Supports TLS/SSL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQS&lt;/h2&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://nuclearace.github.io/Socket.IO-Client-Swift/faq.html&#34;&gt;FAQs&lt;/a&gt; for commonly asked questions.&lt;/p&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://nuclearace.github.io/Socket.IO-Client-Swift/12to13.html&#34;&gt;12to13&lt;/a&gt; guide for migrating to v13+ from v12 below.&lt;/p&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://nuclearace.github.io/Socket.IO-Client-Swift/15to16.html&#34;&gt;15to16&lt;/a&gt; guide for migrating to v16+ from v15.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requires Swift 4/5 and Xcode 10.x&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add the project as a dependency to your Package.swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:4.2&#xA;&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;socket.io-test&#34;,&#xA;    products: [&#xA;        .executable(name: &#34;socket.io-test&#34;, targets: [&#34;YourTargetName&#34;])&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/socketio/socket.io-client-swift&#34;, .upToNextMinor(from: &#34;15.0.0&#34;))&#xA;    ],&#xA;    targets: [&#xA;        .target(name: &#34;YourTargetName&#34;, dependencies: [&#34;SocketIO&#34;], path: &#34;./Path/To/Your/Sources&#34;)&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then import &lt;code&gt;import SocketIO&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add this line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;socketio/socket.io-client-swift&#34; ~&amp;gt; 15.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update --platform ios,macosx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;Starscream&lt;/code&gt; and &lt;code&gt;SocketIO&lt;/code&gt; frameworks to your projects and follow the usual Carthage process.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods 1.0.0 or later&lt;/h3&gt; &#xA;&lt;p&gt;Create &lt;code&gt;Podfile&lt;/code&gt; and add &lt;code&gt;pod &#39;Socket.IO-Client-Swift&#39;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&#xA;target &#39;YourApp&#39; do&#xA;    pod &#39;Socket.IO-Client-Swift&#39;, &#39;~&amp;gt; 15.2.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install pods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import the module:&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SocketIO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Objective-C&#34;&gt;@import SocketIO;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://nuclearace.github.io/Socket.IO-Client-Swift/index.html&#34;&gt;Docs&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuclearace.github.io/Socket.IO-Client-Swift/Classes/SocketIOClient.html&#34;&gt;Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuclearace.github.io/Socket.IO-Client-Swift/Classes/SocketManager.html&#34;&gt;Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuclearace.github.io/Socket.IO-Client-Swift/Classes/SocketEngine.html&#34;&gt;Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuclearace.github.io/Socket.IO-Client-Swift/Enums/SocketIOClientOption.html&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Detailed Example&lt;/h2&gt; &#xA;&lt;p&gt;A more detailed example can be found &lt;a href=&#34;https://github.com/nuclearace/socket.io-client-swift-example&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An example using the Swift Package Manager can be found &lt;a href=&#34;https://github.com/nuclearace/socket.io-client-swift-spm-example&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scenee/FloatingPanel</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/scenee/FloatingPanel</id>
    <link href="https://github.com/scenee/FloatingPanel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A clean and easy-to-use floating panel UI component for iOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SCENEE/FloatingPanel&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SCENEE/FloatingPanel.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/FloatingPanel&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/FloatingPanel.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/FloatingPanel&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/FloatingPanel.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-5-orange.svg?style=flat&#34; alt=&#34;Swift 5&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FloatingPanel&lt;/h1&gt; &#xA;&lt;p&gt;FloatingPanel is a simple and easy-to-use UI component for a new interface introduced in Apple Maps, Shortcuts and Stocks app. The new interface displays the related contents and utilities in parallel as a user wants.&lt;/p&gt; &#xA;&lt;p&gt;📝&lt;a href=&#34;https://docs.scenee.com/documentation/floatingpanel&#34;&gt;Here&lt;/a&gt; is the API references for the latest version powered by &lt;a href=&#34;https://developer.apple.com/documentation/docc&#34;&gt;DocC&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SCENEE/FloatingPanel/raw/master/assets/maps.gif&#34; alt=&#34;Maps&#34;&gt; &lt;img src=&#34;https://github.com/SCENEE/FloatingPanel/raw/master/assets/stocks.gif&#34; alt=&#34;Stocks&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SCENEE/FloatingPanel/raw/master/assets/maps-landscape.gif&#34; alt=&#34;Maps(Landscape)&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#add-a-floating-panel-as-a-child-view-controller&#34;&gt;Add a floating panel as a child view controller&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#present-a-floating-panel-as-a-modality&#34;&gt;Present a floating panel as a modality&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#view-hierarchy&#34;&gt;View hierarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#showhide-a-floating-panel-in-a-view-with-your-view-hierarchy&#34;&gt;Show/Hide a floating panel in a view with your view hierarchy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#scale-the-content-view-when-the-surface-position-changes&#34;&gt;Scale the content view when the surface position changes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-the-layout-with-floatingpanellayout-protocol&#34;&gt;Customize the layout with &lt;code&gt;FloatingPanelLayout&lt;/code&gt; protocol&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#change-the-initial-layout&#34;&gt;Change the initial layout&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#update-your-panel-layout&#34;&gt;Update your panel layout&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#support-your-landscape-layout&#34;&gt;Support your landscape layout&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#use-the-intrinsic-size-of-a-content-in-your-panel-layout&#34;&gt;Use the intrinsic size of a content in your panel layout&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#specify-an-anchor-for-each-state-by-an-inset-of-the-floatingpanelcontrollerview-frame&#34;&gt;Specify an anchor for each state by an inset of the &lt;code&gt;FloatingPanelController.view&lt;/code&gt; frame&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#change-the-backdrop-alpha&#34;&gt;Change the backdrop alpha&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#using-custome-panel-states&#34;&gt;Using custome panel states&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-the-behavior-with-floatingpanelbehavior-protocol&#34;&gt;Customize the behavior with &lt;code&gt;FloatingPanelBehavior&lt;/code&gt; protocol&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#modify-your-floating-panels-interaction&#34;&gt;Modify your floating panel&#39;s interaction&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#activate-the-rubber-band-effect-on-panel-edges&#34;&gt;Activate the rubber-band effect on panel edges&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#manage-the-projection-of-a-pan-gesture-momentum&#34;&gt;Manage the projection of a pan gesture momentum&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#specify-the-panel-moves-boundary&#34;&gt;Specify the panel move&#39;s boundary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-the-surface-design&#34;&gt;Customize the surface design&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#modify-your-surface-appearance&#34;&gt;Modify your surface appearance&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#use-a-custom-grabber-handle&#34;&gt;Use a custom grabber handle&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-layout-of-the-grabber-handle&#34;&gt;Customize layout of the grabber handle&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-content-padding-from-surface-edges&#34;&gt;Customize content padding from surface edges&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-margins-of-the-surface-edges&#34;&gt;Customize margins of the surface edges&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-gestures&#34;&gt;Customize gestures&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#suppress-the-panel-interaction&#34;&gt;Suppress the panel interaction&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#add-tap-gestures-to-the-surface-view&#34;&gt;Add tap gestures to the surface view&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#interrupt-the-delegate-methods-of-floatingpanelcontrollerpangesturerecognizer&#34;&gt;Interrupt the delegate methods of &lt;code&gt;FloatingPanelController.panGestureRecognizer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#create-an-additional-floating-panel-for-a-detail&#34;&gt;Create an additional floating panel for a detail&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#move-a-position-with-an-animation&#34;&gt;Move a position with an animation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#work-your-contents-together-with-a-floating-panel-behavior&#34;&gt;Work your contents together with a floating panel behavior&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#enabling-the-tap-to-dismiss-action-of-the-backdrop-view&#34;&gt;Enabling the tap-to-dismiss action of the backdrop view&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#notes&#34;&gt;Notes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#show-or-show-detail-segues-from-floatingpanelcontrollers-content-view-controller&#34;&gt;&#39;Show&#39; or &#39;Show Detail&#39; Segues from &lt;code&gt;FloatingPanelController&lt;/code&gt;&#39;s content view controller&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#uisearchcontroller-issue&#34;&gt;UISearchController issue&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#floatingpanelsurfaceviews-issue-on-ios-10&#34;&gt;FloatingPanelSurfaceView&#39;s issue on iOS 10&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#maintainer&#34;&gt;Maintainer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Simple container view controller&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fluid behavior using numeric springing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Scroll view tracking&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Removal interaction&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi panel support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Modal presentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 4 positioning support(top, left, bottom, right)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1 or more magnetic anchors(full, half, tip and more)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Layout support for all trait environments(i.e. Landscape orientation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Common UI elements: surface, backdrop and grabber handle&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Free from common issues of Auto Layout and gesture handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Compatible with Objective-C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples are here.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/tree/master/Examples/Maps&#34;&gt;Examples/Maps&lt;/a&gt; like Apple Maps.app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/tree/master/Examples/Stocks&#34;&gt;Examples/Stocks&lt;/a&gt; like Apple Stocks.app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/tree/master/Examples/Samples&#34;&gt;Examples/Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/tree/master/Examples/SamplesObjC&#34;&gt;Examples/SamplesObjC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;FloatingPanel is written in Swift 5.0+. Compatible with iOS 11.0+.&lt;/p&gt; &#xA;&lt;p&gt;The deployment is still iOS 10, but it is recommended to use this library on iOS 11+.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; You would like to use Swift 4.0. Please use FloatingPanel v1.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;FloatingPanel is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FloatingPanel&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; FloatingPanel v1.7.0 or later requires CocoaPods v1.7.0+ for &lt;code&gt;swift_versions&lt;/code&gt; support.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, add the following to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;scenee/FloatingPanel&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app&#34;&gt;this doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Add a floating panel as a child view controller&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit&#xA;import FloatingPanel&#xA;&#xA;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    var fpc: FloatingPanelController!&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        // Initialize a `FloatingPanelController` object.&#xA;        fpc = FloatingPanelController()&#xA;&#xA;        // Assign self as the delegate of the controller.&#xA;        fpc.delegate = self // Optional&#xA;&#xA;        // Set a content view controller.&#xA;        let contentVC = ContentViewController()&#xA;        fpc.set(contentViewController: contentVC)&#xA;&#xA;        // Track a scroll view(or the siblings) in the content view controller.&#xA;        fpc.track(scrollView: contentVC.tableView)&#xA;&#xA;        // Add and show the views managed by the `FloatingPanelController` object to self.view.&#xA;        fpc.addPanel(toParent: self)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Present a floating panel as a modality&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let fpc = FloatingPanelController()&#xA;let contentVC = ...&#xA;fpc.set(contentViewController: contentVC)&#xA;&#xA;fpc.isRemovalInteractionEnabled = true // Optional: Let it removable by a swipe-down&#xA;&#xA;self.present(fpc, animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can show a floating panel over UINavigationController from the container view controllers as a modality of &lt;code&gt;.overCurrentContext&lt;/code&gt; style.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; FloatingPanelController has the custom presentation controller. If you would like to customize the presentation/dismissal, please see &lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/raw/master/Sources/Transitioning.swift&#34;&gt;Transitioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;View hierarchy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;FloatingPanelController&lt;/code&gt; manages the views as the following view hierarchy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FloatingPanelController.view (FloatingPanelPassThroughView)&#xA; ├─ .backdropView (FloatingPanelBackdropView)&#xA; └─ .surfaceView (FloatingPanelSurfaceView)&#xA;    ├─ .containerView (UIView)&#xA;    │  └─ .contentView (FloatingPanelController.contentViewController.view)&#xA;    └─ .grabber (FloatingPanelGrabberView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Show/Hide a floating panel in a view with your view hierarchy&lt;/h3&gt; &#xA;&lt;p&gt;If you need more control over showing and hiding the floating panel, you can forgo the &lt;code&gt;addPanel&lt;/code&gt; and &lt;code&gt;removePanelFromParent&lt;/code&gt; methods. These methods are a convenience wrapper for &lt;strong&gt;FloatingPanel&lt;/strong&gt;&#39;s &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;hide&lt;/code&gt; methods along with some required setup.&lt;/p&gt; &#xA;&lt;p&gt;There are two ways to work with the &lt;code&gt;FloatingPanelController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add it to the hierarchy once and then call &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;hide&lt;/code&gt; methods to make it appear/disappear.&lt;/li&gt; &#xA; &lt;li&gt;Add it to the hierarchy when needed and remove afterwards.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The following example shows how to add the controller to your &lt;code&gt;UIViewController&lt;/code&gt; and how to remove it. Make sure that you never add the same &lt;code&gt;FloatingPanelController&lt;/code&gt; to the hierarchy before removing it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;self.&lt;/code&gt; prefix is not required, nor recommended. It&#39;s used here to make it clearer where do the functions used come from. &lt;code&gt;self&lt;/code&gt; is an instance of a custom UIViewController in your code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Add the floating panel view to the controller&#39;s view on top of other views.&#xA;self.view.addSubview(fpc.view)&#xA;&#xA;// REQUIRED. It makes the floating panel view have the same size as the controller&#39;s view.&#xA;fpc.view.frame = self.view.bounds&#xA;&#xA;// In addition, Auto Layout constraints are highly recommended.&#xA;// Constraint the fpc.view to all four edges of your controller&#39;s view.&#xA;// It makes the layout more robust on trait collection change.&#xA;fpc.view.translatesAutoresizingMaskIntoConstraints = false&#xA;NSLayoutConstraint.activate([&#xA;  fpc.view.topAnchor.constraint(equalTo: self.view.topAnchor, constant: 0.0),&#xA;  fpc.view.leftAnchor.constraint(equalTo: self.view.leftAnchor, constant: 0.0),&#xA;  fpc.view.rightAnchor.constraint(equalTo: self.view.rightAnchor, constant: 0.0),&#xA;  fpc.view.bottomAnchor.constraint(equalTo: self.view.bottomAnchor, constant: 0.0),&#xA;])&#xA;&#xA;// Add the floating panel controller to the controller hierarchy.&#xA;self.addChild(fpc)&#xA;&#xA;// Show the floating panel at the initial position defined in your `FloatingPanelLayout` object.&#xA;fpc.show(animated: true) {&#xA;    // Inform the floating panel controller that the transition to the controller hierarchy has completed.&#xA;    fpc.didMove(toParent: self)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you add the &lt;code&gt;FloatingPanelController&lt;/code&gt; as seen above, you can call &lt;code&gt;fpc.show(animated: true) { }&lt;/code&gt; to show the panel and &lt;code&gt;fpc.hide(animated: true) { }&lt;/code&gt; to hide it.&lt;/p&gt; &#xA;&lt;p&gt;To remove the &lt;code&gt;FloatingPanelController&lt;/code&gt; from the hierarchy, follow the example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Inform the panel controller that it will be removed from the hierarchy.&#xA;fpc.willMove(toParent: nil)&#xA;    &#xA;// Hide the floating panel.&#xA;fpc.hide(animated: true) {&#xA;    // Remove the floating panel view from your controller&#39;s view.&#xA;    fpc.view.removeFromSuperview()&#xA;    // Remove the floating panel controller from the controller hierarchy.&#xA;    fpc.removeFromParent()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scale the content view when the surface position changes&lt;/h3&gt; &#xA;&lt;p&gt;Specify the &lt;code&gt;contentMode&lt;/code&gt; to &lt;code&gt;.fitToBounds&lt;/code&gt; if the surface height fits the bounds of &lt;code&gt;FloatingPanelController.view&lt;/code&gt; when the surface position changes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.contentMode = .fitToBounds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, &lt;code&gt;FloatingPanelController&lt;/code&gt; fixes the content by the height of the top most position.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; In &lt;code&gt;.fitToBounds&lt;/code&gt; mode, the surface height changes as following a user interaction so that you have a responsibility to configure Auto Layout constrains not to break the layout of a content view by the elastic surface height.&lt;/p&gt; &#xA;&lt;h3&gt;Customize the layout with &lt;code&gt;FloatingPanelLayout&lt;/code&gt; protocol&lt;/h3&gt; &#xA;&lt;h4&gt;Change the initial layout&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    ... {&#xA;        fpc = FloatingPanelController(delegate: self)&#xA;        fpc.layout = MyFloatingPanelLayout()&#xA;    }&#xA;}&#xA;&#xA;class MyFloatingPanelLayout: FloatingPanelLayout {&#xA;    let position: FloatingPanelPosition = .bottom&#xA;    let initialState: FloatingPanelState = .tip&#xA;    var anchors: [FloatingPanelState: FloatingPanelLayoutAnchoring] {&#xA;        return [&#xA;            .full: FloatingPanelLayoutAnchor(absoluteInset: 16.0, edge: .top, referenceGuide: .safeArea),&#xA;            .half: FloatingPanelLayoutAnchor(fractionalInset: 0.5, edge: .bottom, referenceGuide: .safeArea),&#xA;            .tip: FloatingPanelLayoutAnchor(absoluteInset: 44.0, edge: .bottom, referenceGuide: .safeArea),&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update your panel layout&lt;/h3&gt; &#xA;&lt;p&gt;There are 2 ways to update the panel layout.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Manually set &lt;code&gt;FloatingPanelController.layout&lt;/code&gt; to the new layout object directly.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.layout = MyPanelLayout()&#xA;fpc.invalidateLayout() // If needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you already set the &lt;code&gt;delegate&lt;/code&gt; property of your &lt;code&gt;FloatingPanelController&lt;/code&gt; instance, &lt;code&gt;invalidateLayout()&lt;/code&gt; overrides the layout object of &lt;code&gt;FloatingPanelController&lt;/code&gt; with one returned by the delegate object.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Returns an appropriate layout object in one of 2 &lt;code&gt;floatingPanel(_:layoutFor:)&lt;/code&gt; delegates.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    ...&#xA;    func floatingPanel(_ vc: FloatingPanelController, layoutFor newCollection: UITraitCollection) -&amp;gt; FloatingPanelLayout {&#xA;        return MyFloatingPanelLayout()&#xA;    }&#xA;&#xA;    // OR&#xA;    func floatingPanel(_ vc: FloatingPanelController, layoutFor size: CGSize) -&amp;gt; FloatingPanelLayout {&#xA;        return MyFloatingPanelLayout()&#xA;    } &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Support your landscape layout&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    ...&#xA;    func floatingPanel(_ vc: FloatingPanelController, layoutFor newCollection: UITraitCollection) -&amp;gt; FloatingPanelLayout {&#xA;        return (newCollection.verticalSizeClass == .compact) ? LandscapePanelLayout() : FloatingPanelBottomLayout()&#xA;    }&#xA;}&#xA;&#xA;class LandscapePanelLayout: FloatingPanelLayout {&#xA;    let position: FloatingPanelPosition = .bottom&#xA;    let initialState: FloatingPanelState = .tip&#xA;    var anchors: [FloatingPanelState: FloatingPanelLayoutAnchoring] {&#xA;        return [&#xA;            .full: FloatingPanelLayoutAnchor(absoluteInset: 16.0, edge: .top, referenceGuide: .safeArea),&#xA;            .tip: FloatingPanelLayoutAnchor(absoluteInset: 69.0, edge: .bottom, referenceGuide: .safeArea),&#xA;        ]&#xA;    }&#xA;    func prepareLayout(surfaceView: UIView, in view: UIView) -&amp;gt; [NSLayoutConstraint] {&#xA;        return [&#xA;            surfaceView.leftAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leftAnchor, constant: 8.0),&#xA;            surfaceView.widthAnchor.constraint(equalToConstant: 291),&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use the intrinsic size of a content in your panel layout&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Lay out your content View with the intrinsic height size. For example, see &#34;Detail View Controller scene&#34;/&#34;Intrinsic View Controller scene&#34; of &lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/raw/master/Examples/Samples/Sources/Base.lproj/Main.storyboard&#34;&gt;Main.storyboard&lt;/a&gt;. The &#39;Stack View.bottom&#39; constraint determines the intrinsic height.&lt;/li&gt; &#xA; &lt;li&gt;Specify layout anchors using &lt;code&gt;FloatingPanelIntrinsicLayoutAnchor&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class IntrinsicPanelLayout: FloatingPanelLayout {&#xA;    let position: FloatingPanelPosition = .bottom&#xA;    let initialState: FloatingPanelState = .full&#xA;    var anchors: [FloatingPanelState: FloatingPanelLayoutAnchoring] {&#xA;        return [&#xA;            .full: FloatingPanelIntrinsicLayoutAnchor(absoluteOffset: 0, referenceGuide: .safeArea),&#xA;            .half: FloatingPanelIntrinsicLayoutAnchor(fractionalOffset: 0.5, referenceGuide: .safeArea),&#xA;        ]&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; &lt;code&gt;FloatingPanelIntrinsicLayout&lt;/code&gt; is deprecated on v1.&lt;/p&gt; &#xA;&lt;h4&gt;Specify an anchor for each state by an inset of the &lt;code&gt;FloatingPanelController.view&lt;/code&gt; frame&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;.superview&lt;/code&gt; reference guide in your anchors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyFullScreenLayout: FloatingPanelLayout {&#xA;    ...&#xA;    var anchors: [FloatingPanelState: FloatingPanelLayoutAnchoring] {&#xA;        return [&#xA;            .full: FloatingPanelLayoutAnchor(absoluteInset: 16.0, edge: .top, referenceGuide: .superview),&#xA;            .half: FloatingPanelLayoutAnchor(fractionalInset: 0.5, edge: .bottom, referenceGuide: .superview),&#xA;            .tip: FloatingPanelLayoutAnchor(absoluteInset: 44.0, edge: .bottom, referenceGuide: .superview),&#xA;        ]&#xA;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; &lt;code&gt;FloatingPanelFullScreenLayout&lt;/code&gt; is deprecated on v1.&lt;/p&gt; &#xA;&lt;h4&gt;Change the backdrop alpha&lt;/h4&gt; &#xA;&lt;p&gt;You can change the backdrop alpha by &lt;code&gt;FloatingPanelLayout.backdropAlpha(for:)&lt;/code&gt; for each state(&lt;code&gt;.full&lt;/code&gt;, &lt;code&gt;.half&lt;/code&gt; and &lt;code&gt;.tip&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For instance, if a panel seems like the backdrop view isn&#39;t there on &lt;code&gt;.half&lt;/code&gt; state, it&#39;s time to implement the backdropAlpha API and return a value for the state as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyPanelLayout: FloatingPanelLayout {&#xA;    func backdropAlpha(for state: FloatingPanelState) -&amp;gt; CGFloat {&#xA;        switch state {&#xA;        case .full, .half: return 0.3&#xA;        default: return 0.0&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using custome panel states&lt;/h4&gt; &#xA;&lt;p&gt;You&#39;re able to define custom panel states and use them as the following example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension FloatingPanelState {&#xA;    static let lastQuart: FloatingPanelState = FloatingPanelState(rawValue: &#34;lastQuart&#34;, order: 750)&#xA;    static let firstQuart: FloatingPanelState = FloatingPanelState(rawValue: &#34;firstQuart&#34;, order: 250)&#xA;}&#xA;&#xA;class FloatingPanelLayoutWithCustomState: FloatingPanelBottomLayout {&#xA;    override var anchors: [FloatingPanelState: FloatingPanelLayoutAnchoring] {&#xA;        return [&#xA;            .full: FloatingPanelLayoutAnchor(absoluteInset: 0.0, edge: .top, referenceGuide: .safeArea),&#xA;            .lastQuart: FloatingPanelLayoutAnchor(fractionalInset: 0.75, edge: .bottom, referenceGuide: .safeArea),&#xA;            .half: FloatingPanelLayoutAnchor(fractionalInset: 0.5, edge: .bottom, referenceGuide: .safeArea),&#xA;            .firstQuart: FloatingPanelLayoutAnchor(fractionalInset: 0.25, edge: .bottom, referenceGuide: .safeArea),&#xA;            .tip: FloatingPanelLayoutAnchor(absoluteInset: 20.0, edge: .bottom, referenceGuide: .safeArea),&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize the behavior with &lt;code&gt;FloatingPanelBehavior&lt;/code&gt; protocol&lt;/h3&gt; &#xA;&lt;h4&gt;Modify your floating panel&#39;s interaction&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    ...&#xA;    func viewDidLoad() {&#xA;        ...&#xA;        fpc.behavior =  CustomPanelBehavior()&#xA;    }&#xA;}&#xA;&#xA;class CustomPanelBehavior: FloatingPanelBehavior {&#xA;    let springDecelerationRate = UIScrollView.DecelerationRate.fast.rawValue + 0.02&#xA;    let springResponseTime = 0.4&#xA;    func shouldProjectMomentum(_ fpc: FloatingPanelController, to proposedTargetPosition: FloatingPanelState) -&amp;gt; Bool {&#xA;        return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; &lt;code&gt;floatingPanel(_ vc:behaviorFor:)&lt;/code&gt; is deprecated on v1.&lt;/p&gt; &#xA;&lt;h4&gt;Activate the rubber-band effect on panel edges&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyPanelBehavior: FloatingPanelBehavior {&#xA;    ...&#xA;    func allowsRubberBanding(for edge: UIRectEdge) -&amp;gt; Bool {&#xA;        return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manage the projection of a pan gesture momentum&lt;/h4&gt; &#xA;&lt;p&gt;This allows full projectional panel behavior. For example, a user can swipe up a panel from tip to full nearby the tip position.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyPanelBehavior: FloatingPanelBehavior {&#xA;    ...&#xA;    func shouldProjectMomentum(_ fpc: FloatingPanelController, to proposedTargetPosition: FloatingPanelPosition) -&amp;gt; Bool {&#xA;        return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specify the panel move&#39;s boundary&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FloatingPanelController.surfaceLocation&lt;/code&gt; in &lt;code&gt;floatingPanelDidMove(_:)&lt;/code&gt; delegate method behaves like &lt;code&gt;UIScrollView.contentOffset&lt;/code&gt; in &lt;code&gt;scrollViewDidScroll(_:)&lt;/code&gt;. As a result, you can specify the boundary of a panel move as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func floatingPanelDidMove(_ vc: FloatingPanelController) {&#xA;    if vc.isAttracting == false {&#xA;        let loc = vc.surfaceLocation&#xA;        let minY = vc.surfaceLocation(for: .full).y - 6.0&#xA;        let maxY = vc.surfaceLocation(for: .tip).y + 6.0&#xA;        vc.surfaceLocation = CGPoint(x: loc.x, y: min(max(loc.y, minY), maxY))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; &lt;code&gt;{top,bottom}InteractionBuffer&lt;/code&gt; property is removed from &lt;code&gt;FloatingPanelLayout&lt;/code&gt; since v2.&lt;/p&gt; &#xA;&lt;h3&gt;Customize the surface design&lt;/h3&gt; &#xA;&lt;h4&gt;Modify your surface appearance&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a new appearance.&#xA;let appearance = SurfaceAppearance()&#xA;&#xA;// Define shadows&#xA;let shadow = SurfaceAppearance.Shadow()&#xA;shadow.color = UIColor.black&#xA;shadow.offset = CGSize(width: 0, height: 16)&#xA;shadow.radius = 16&#xA;shadow.spread = 8&#xA;appearance.shadows = [shadow]&#xA;&#xA;// Define corner radius and background color&#xA;appearance.cornerRadius = 8.0&#xA;appearance.backgroundColor = .clear&#xA;&#xA;// Set the new appearance&#xA;fpc.surfaceView.appearance = appearance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use a custom grabber handle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let myGrabberHandleView = MyGrabberHandleView()&#xA;fpc.surfaceView.grabberHandle.isHidden = true&#xA;fpc.surfaceView.addSubview(myGrabberHandleView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customize layout of the grabber handle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.surfaceView.grabberHandlePadding = 10.0&#xA;fpc.surfaceView.grabberHandleSize = .init(width: 44.0, height: 12.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; Note that &lt;code&gt;grabberHandleSize&lt;/code&gt; width and height are reversed in the left/right position.&lt;/p&gt; &#xA;&lt;h4&gt;Customize content padding from surface edges&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.surfaceView.contentPadding = .init(top: 20, left: 20, bottom: 20, right: 20)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customize margins of the surface edges&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.surfaceView.containerMargins = .init(top: 20.0, left: 16.0, bottom: 16.0, right: 16.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The feature can be used for these 2 kind panels&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Facebook/Slack-like panel whose surface top edge is separated from the grabber handle.&lt;/li&gt; &#xA; &lt;li&gt;iOS native panel to display AirPods information, for example.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Customize gestures&lt;/h3&gt; &#xA;&lt;h4&gt;Suppress the panel interaction&lt;/h4&gt; &#xA;&lt;p&gt;You can disable the pan gesture recognizer directly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.panGestureRecognizer.isEnabled = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use this &lt;code&gt;FloatingPanelControllerDelegate&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func floatingPanelShouldBeginDragging(_ vc: FloatingPanelController) -&amp;gt; Bool {&#xA;    return aCondition ?  false : true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add tap gestures to the surface view&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLoad() {&#xA;    ...&#xA;    let surfaceTapGesture = UITapGestureRecognizer(target: self, action: #selector(handleSurface(tapGesture:)))&#xA;    fpc.surfaceView.addGestureRecognizer(surfaceTapGesture)&#xA;    surfaceTapGesture.isEnabled = (fpc.position == .tip)&#xA;}&#xA;&#xA;// Enable `surfaceTapGesture` only at `tip` state&#xA;func floatingPanelDidChangeState(_ vc: FloatingPanelController) {&#xA;    surfaceTapGesture.isEnabled = (vc.position == .tip)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Interrupt the delegate methods of &lt;code&gt;FloatingPanelController.panGestureRecognizer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you are set &lt;code&gt;FloatingPanelController.panGestureRecognizer.delegateProxy&lt;/code&gt; to an object adopting &lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt;, it overrides delegate methods of the pan gesture recognizer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyGestureRecognizerDelegate: UIGestureRecognizerDelegate {&#xA;    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRequireFailureOf otherGestureRecognizer: UIGestureRecognizer) -&amp;gt; Bool {&#xA;        return false&#xA;    }&#xA;}&#xA;&#xA;class ViewController: UIViewController {&#xA;    let myGestureDelegate = MyGestureRecognizerDelegate()&#xA;&#xA;    func setUpFpc() {&#xA;        ....&#xA;        fpc.panGestureRecognizer.delegateProxy = myGestureDelegate&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create an additional floating panel for a detail&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLoad() {&#xA;    // Setup Search panel&#xA;    self.searchPanelVC = FloatingPanelController()&#xA;&#xA;    let searchVC = SearchViewController()&#xA;    self.searchPanelVC.set(contentViewController: searchVC)&#xA;    self.searchPanelVC.track(scrollView: contentVC.tableView)&#xA;&#xA;    self.searchPanelVC.addPanel(toParent: self)&#xA;&#xA;    // Setup Detail panel&#xA;    self.detailPanelVC = FloatingPanelController()&#xA;&#xA;    let contentVC = ContentViewController()&#xA;    self.detailPanelVC.set(contentViewController: contentVC)&#xA;    self.detailPanelVC.track(scrollView: contentVC.scrollView)&#xA;&#xA;    self.detailPanelVC.addPanel(toParent: self)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Move a position with an animation&lt;/h3&gt; &#xA;&lt;p&gt;In the following example, I move a floating panel to full or half position while opening or closing a search bar like Apple Maps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {&#xA;    ...&#xA;    fpc.move(to: .half, animated: true)&#xA;}&#xA;&#xA;func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {&#xA;    ...&#xA;    fpc.move(to: .full, animated: true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a view animation to move a panel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;UIView.animate(withDuration: 0.25) {&#xA;    self.fpc.move(to: .half, animated: false)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Work your contents together with a floating panel behavior&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    ...&#xA;    func floatingPanelWillBeginDragging(_ vc: FloatingPanelController) {&#xA;        if vc.position == .full {&#xA;            searchVC.searchBar.showsCancelButton = false&#xA;            searchVC.searchBar.resignFirstResponder()&#xA;        }&#xA;    }&#xA;&#xA;    func floatingPanelWillEndDragging(_ vc: FloatingPanelController, withVelocity velocity: CGPoint, targetState: UnsafeMutablePointer&amp;lt;FloatingPanelState&amp;gt;) {&#xA;        if targetState.pointee != .full {&#xA;            searchVC.hideHeader()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enabling the tap-to-dismiss action of the backdrop view&lt;/h3&gt; &#xA;&lt;p&gt;The tap-to-dismiss action is disabled by default. So it needs to be enabled as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.backdropView.dismissalTapGestureRecognizer.isEnabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;h3&gt;&#39;Show&#39; or &#39;Show Detail&#39; Segues from &lt;code&gt;FloatingPanelController&lt;/code&gt;&#39;s content view controller&lt;/h3&gt; &#xA;&lt;p&gt;&#39;Show&#39; or &#39;Show Detail&#39; segues from a content view controller will be managed by a view controller(hereinafter called &#39;master VC&#39;) adding a floating panel. Because a floating panel is just a subview of the master VC(except for modality).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FloatingPanelController&lt;/code&gt; has no way to manage a stack of view controllers like &lt;code&gt;UINavigationController&lt;/code&gt;. If so, it would be so complicated and the interface will become &lt;code&gt;UINavigationController&lt;/code&gt;. This component should not have the responsibility to manage the stack.&lt;/p&gt; &#xA;&lt;p&gt;By the way, a content view controller can present a view controller modally with &lt;code&gt;present(_:animated:completion:)&lt;/code&gt; or &#39;Present Modally&#39; segue.&lt;/p&gt; &#xA;&lt;p&gt;However, sometimes you want to show a destination view controller of &#39;Show&#39; or &#39;Show Detail&#39; segue with another floating panel. It&#39;s possible to override &lt;code&gt;show(_:sender)&lt;/code&gt; of the master VC!&lt;/p&gt; &#xA;&lt;p&gt;Here is an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController {&#xA;    var fpc: FloatingPanelController!&#xA;    var secondFpc: FloatingPanelController!&#xA;&#xA;    ...&#xA;    override func show(_ vc: UIViewController, sender: Any?) {&#xA;        secondFpc = FloatingPanelController()&#xA;&#xA;        secondFpc.set(contentViewController: vc)&#xA;&#xA;        secondFpc.addPanel(toParent: self)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;FloatingPanelController&lt;/code&gt; object proxies an action for &lt;code&gt;show(_:sender)&lt;/code&gt; to the master VC. That&#39;s why the master VC can handle a destination view controller of a &#39;Show&#39; or &#39;Show Detail&#39; segue and you can hook &lt;code&gt;show(_:sender)&lt;/code&gt; to show a secondary floating panel set the destination view controller to the content.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a great way to decouple between a floating panel and the content VC.&lt;/p&gt; &#xA;&lt;h3&gt;UISearchController issue&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;UISearchController&lt;/code&gt; isn&#39;t able to be used with &lt;code&gt;FloatingPanelController&lt;/code&gt; by the system design.&lt;/p&gt; &#xA;&lt;p&gt;Because &lt;code&gt;UISearchController&lt;/code&gt; automatically presents itself modally when a user interacts with the search bar, and then it swaps the superview of the search bar to the view managed by itself while it displays. As a result, &lt;code&gt;FloatingPanelController&lt;/code&gt; can&#39;t control the search bar when it&#39;s active, as you can see from &lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/issues/248#issuecomment-521263831&#34;&gt;the screen shot&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;FloatingPanelSurfaceView&#39;s issue on iOS 10&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On iOS 10, &lt;code&gt;FloatingPanelSurfaceView.cornerRadius&lt;/code&gt; isn&#39;t not automatically masked with the top rounded corners because of &lt;code&gt;UIVisualEffectView&lt;/code&gt; issue. See &lt;a href=&#34;https://forums.developer.apple.com/thread/50854&#34;&gt;https://forums.developer.apple.com/thread/50854&lt;/a&gt;. So you need to draw top rounding corners of your content. Here is an example in Examples/Maps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLayoutSubviews() {&#xA;    super.viewDidLayoutSubviews()&#xA;    if #available(iOS 10, *) {&#xA;        visualEffectView.layer.cornerRadius = 9.0&#xA;        visualEffectView.clipsToBounds = true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you sets clear color to &lt;code&gt;FloatingPanelSurfaceView.backgroundColor&lt;/code&gt;, please note the bottom overflow of your content on bouncing at full position. To prevent it, you need to expand your content. For example, See Example/Maps App&#39;s Auto Layout settings of &lt;code&gt;UIVisualEffectView&lt;/code&gt; in Main.storyboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainer&lt;/h2&gt; &#xA;&lt;p&gt;Shin Yamamoto &lt;a href=&#34;mailto:shin@scenee.com&#34;&gt;shin@scenee.com&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/scenee&#34;&gt;@scenee&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;FloatingPanel is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>realm/SwiftLint</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/realm/SwiftLint</id>
    <link href="https://github.com/realm/SwiftLint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool to enforce Swift style and conventions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftLint&lt;/h1&gt; &#xA;&lt;p&gt;A tool to enforce Swift style and conventions, loosely based on the now archived &lt;a href=&#34;https://github.com/github/swift-style-guide&#34;&gt;GitHub Swift Style Guide&lt;/a&gt;. SwiftLint enforces the style guide rules that are generally accepted by the Swift community. These rules are well described in popular style guides like &lt;a href=&#34;https://github.com/raywenderlich/swift-style-guide&#34;&gt;Ray Wenderlich&#39;s Swift Style Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SwiftLint hooks into &lt;a href=&#34;http://clang.llvm.org&#34;&gt;Clang&lt;/a&gt; and &lt;a href=&#34;http://www.jpsim.com/uncovering-sourcekit&#34;&gt;SourceKit&lt;/a&gt; to use the &lt;a href=&#34;http://clang.llvm.org/docs/IntroductionToTheClangAST.html&#34;&gt;AST&lt;/a&gt; representation of your source files for more accurate results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/jpsim/SwiftLint/_build/latest?definitionId=4?branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/jpsim/SwiftLint/_apis/build/status/realm.SwiftLint?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/realm/SwiftLint?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/realm/SwiftLint/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/master/assets/screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project adheres to the &lt;a href=&#34;https://realm.io/conduct&#34;&gt;Contributor Covenant Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&#34;mailto:info@realm.io&#34;&gt;info@realm.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Language Switch: &lt;a href=&#34;https://github.com/realm/SwiftLint/raw/master/README_CN.md&#34;&gt;中文&lt;/a&gt;, &lt;a href=&#34;https://github.com/realm/SwiftLint/raw/master/README_KR.md&#34;&gt;한국어&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install swiftlint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;Simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftLint&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download the SwiftLint binaries and dependencies in &lt;code&gt;Pods/&lt;/code&gt; during your next &lt;code&gt;pod install&lt;/code&gt; execution and will allow you to invoke it via &lt;code&gt;${PODS_ROOT}/SwiftLint/swiftlint&lt;/code&gt; in your Script Build Phases.&lt;/p&gt; &#xA;&lt;p&gt;This is the recommended way to install a specific version of SwiftLint since it supports installing a pinned version rather than simply the latest (which is the case with Homebrew).&lt;/p&gt; &#xA;&lt;p&gt;Note that this will add the SwiftLint binaries, its dependencies&#39; binaries and the Swift binary library distribution to the &lt;code&gt;Pods/&lt;/code&gt; directory, so checking in this directory to SCM such as git is discouraged.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/yonaskolb/mint&#34;&gt;Mint&lt;/a&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mint install realm/SwiftLint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a pre-built package:&lt;/h3&gt; &#xA;&lt;p&gt;You can also install SwiftLint by downloading &lt;code&gt;SwiftLint.pkg&lt;/code&gt; from the &lt;a href=&#34;https://github.com/realm/SwiftLint/releases/latest&#34;&gt;latest GitHub release&lt;/a&gt; and running it.&lt;/p&gt; &#xA;&lt;h3&gt;Installing from source:&lt;/h3&gt; &#xA;&lt;p&gt;You can also build and install from source by cloning this project and running &lt;code&gt;make install&lt;/code&gt; (Xcode 13 or later).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Presentation&lt;/h3&gt; &#xA;&lt;p&gt;To get a high-level overview of recommended ways to integrate SwiftLint into your project, we encourage you to watch this presentation or read the transcript:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://academy.realm.io/posts/slug-jp-simard-swiftlint/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/master/assets/presentation.svg?sanitize=true&#34; alt=&#34;Presentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Xcode&lt;/h3&gt; &#xA;&lt;p&gt;Integrate SwiftLint into your Xcode project to get warnings and errors displayed in the issue navigator.&lt;/p&gt; &#xA;&lt;p&gt;To do this select the project in the file navigator, then select the primary app target, and go to Build Phases. Click the + and select &#34;New Run Script Phase&#34;. Insert the following as the script:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/master/assets/runscript.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you installed SwiftLint via Homebrew on Apple Silicon, you might experience this warning:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;warning: SwiftLint not installed, download from &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;https://github.com/realm/SwiftLint&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;That is because Homebrew on Apple Silicon installs the binaries into the &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; folder by default. To instruct Xcode where to find SwiftLint, you can either add &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt; environment variable in your build phase&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=&#34;$PATH:/opt/homebrew/bin&#34;&#xA;if which swiftlint &amp;gt; /dev/null; then&#xA;  swiftlint&#xA;else&#xA;  echo &#34;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can create a symbolic link in &lt;code&gt;/usr/local/bin&lt;/code&gt; pointing to the actual binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ln -s /opt/homebrew/bin/swiftlint /usr/local/bin/swiftlint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might want to move your SwiftLint phase directly before the &#39;Compile Sources&#39; step to detect errors quickly before compiling. However, SwiftLint is designed to run on valid Swift code that cleanly completes the compiler&#39;s parsing stage. So running SwiftLint before &#39;Compile Sources&#39; might yield some incorrect results.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to fix violations as well, your script could run &lt;code&gt;swiftlint --fix &amp;amp;&amp;amp; swiftlint&lt;/code&gt; instead of just &lt;code&gt;swiftlint&lt;/code&gt;. This will mean that all correctable violations are fixed, while ensuring warnings show up in your project for remaining violations.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve installed SwiftLint via CocoaPods the script should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;${PODS_ROOT}/SwiftLint/swiftlint&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Format on Save Xcode Plugin&lt;/h4&gt; &#xA;&lt;p&gt;To run &lt;code&gt;swiftlint --fix&lt;/code&gt; on save in Xcode, install the &lt;a href=&#34;https://github.com/ypresto/SwiftLintXcode&#34;&gt;SwiftLintXcode&lt;/a&gt; plugin from Alcatraz.&lt;/p&gt; &#xA;&lt;p&gt;⚠️This plugin will not work with Xcode 8 or later without disabling SIP. This is not recommended.&lt;/p&gt; &#xA;&lt;h3&gt;AppCode&lt;/h3&gt; &#xA;&lt;p&gt;To integrate SwiftLint with AppCode, install &lt;a href=&#34;https://plugins.jetbrains.com/plugin/9175&#34;&gt;this plugin&lt;/a&gt; and configure SwiftLint&#39;s installed path in the plugin&#39;s preferences. The &lt;code&gt;fix&lt;/code&gt; action is available via &lt;code&gt;⌥⏎&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Atom&lt;/h3&gt; &#xA;&lt;p&gt;To integrate SwiftLint with &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt;, install the &lt;a href=&#34;https://atom.io/packages/linter-swiftlint&#34;&gt;&lt;code&gt;linter-swiftlint&lt;/code&gt;&lt;/a&gt; package from APM.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;To integrate SwiftLint with &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;vscode&lt;/a&gt;, install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-swiftlint&#34;&gt;&lt;code&gt;vscode-swiftlint&lt;/code&gt;&lt;/a&gt; extension from the marketplace.&lt;/p&gt; &#xA;&lt;h3&gt;fastlane&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://docs.fastlane.tools/actions/swiftlint&#34;&gt;official swiftlint fastlane action&lt;/a&gt; to run SwiftLint as part of your fastlane process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;swiftlint(&#xA;    mode: :lint,                            # SwiftLint mode: :lint (default) or :autocorrect&#xA;    executable: &#34;Pods/SwiftLint/swiftlint&#34;, # The SwiftLint binary path (optional). Important if you&#39;ve installed it via CocoaPods&#xA;    path: &#34;/path/to/lint&#34;,                  # Specify path to lint (optional)&#xA;    output_file: &#34;swiftlint.result.json&#34;,   # The path of the output file (optional)&#xA;    reporter: &#34;json&#34;,                       # The custom reporter to use (optional)&#xA;    config_file: &#34;.swiftlint-ci.yml&#34;,       # The path of the configuration file (optional)&#xA;    files: [                                # List of files to process (optional)&#xA;        &#34;AppDelegate.swift&#34;,&#xA;        &#34;path/to/project/Model.swift&#34;&#xA;    ],&#xA;    ignore_exit_status: true,               # Allow fastlane to continue even if SwiftLint returns a non-zero exit status (Default: false)&#xA;    quiet: true,                            # Don&#39;t print status logs like &#39;Linting &#39; &amp;amp; &#39;Done linting&#39; (Default: false)&#xA;    strict: true                            # Fail on warnings? (Default: false)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;swiftlint&lt;/code&gt; is also available as a &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; image using &lt;code&gt;Ubuntu&lt;/code&gt;. So just the first time you need to pull the docker image using the next command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull ghcr.io/realm/swiftlint:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then following times, you just run &lt;code&gt;swiftlint&lt;/code&gt; inside of the docker like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will execute &lt;code&gt;swiftlint&lt;/code&gt; in the folder where you are right now (&lt;code&gt;pwd&lt;/code&gt;), showing an output like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest&#xA;Linting Swift files in current working directory&#xA;Linting &#39;RuleDocumentation.swift&#39; (1/490)&#xA;...&#xA;Linting &#39;YamlSwiftLintTests.swift&#39; (490/490)&#xA;Done linting! Found 0 violations, 0 serious in 490 files.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here you have more documentation about the usage of &lt;a href=&#34;https://docs.docker.com/&#34;&gt;Docker Images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ swiftlint help&#xA;OVERVIEW: A tool to enforce Swift style and conventions.&#xA;&#xA;USAGE: swiftlint &amp;lt;subcommand&amp;gt;&#xA;&#xA;OPTIONS:&#xA;  --version               Show the version.&#xA;  -h, --help              Show help information.&#xA;&#xA;SUBCOMMANDS:&#xA;  analyze                 Run analysis rules&#xA;  docs                    Open SwiftLint documentation website in the default web browser&#xA;  generate-docs           Generates markdown documentation for all rules&#xA;  lint (default)          Print lint warnings and errors&#xA;  rules                   Display the list of rules and their identifiers&#xA;  version                 Display the current version of SwiftLint&#xA;&#xA;  See &#39;swiftlint help &amp;lt;subcommand&amp;gt;&#39; for detailed help.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;swiftlint&lt;/code&gt; in the directory containing the Swift files to lint. Directories will be searched recursively.&lt;/p&gt; &#xA;&lt;p&gt;To specify a list of files when using &lt;code&gt;lint&lt;/code&gt; or &lt;code&gt;analyze&lt;/code&gt; (like the list of files modified by Xcode specified by the &lt;a href=&#34;https://github.com/norio-nomura/ExtraBuildPhase&#34;&gt;&lt;code&gt;ExtraBuildPhase&lt;/code&gt;&lt;/a&gt; Xcode plugin, or modified files in the working tree based on &lt;code&gt;git ls-files -m&lt;/code&gt;), you can do so by passing the option &lt;code&gt;--use-script-input-files&lt;/code&gt; and setting the following instance variables: &lt;code&gt;SCRIPT_INPUT_FILE_COUNT&lt;/code&gt; and &lt;code&gt;SCRIPT_INPUT_FILE_0&lt;/code&gt;, &lt;code&gt;SCRIPT_INPUT_FILE_1&lt;/code&gt;...&lt;code&gt;SCRIPT_INPUT_FILE_{SCRIPT_INPUT_FILE_COUNT - 1}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These are same environment variables set for input files to &lt;a href=&#34;http://indiestack.com/2014/12/speeding-up-custom-script-phases/&#34;&gt;custom Xcode script phases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Working With Multiple Swift Versions&lt;/h3&gt; &#xA;&lt;p&gt;SwiftLint hooks into SourceKit so it continues working even as Swift evolves!&lt;/p&gt; &#xA;&lt;p&gt;This also keeps SwiftLint lean, as it doesn&#39;t need to ship with a full Swift compiler, it just communicates with the official one you already have installed on your machine.&lt;/p&gt; &#xA;&lt;p&gt;You should always run SwiftLint with the same toolchain you use to compile your code.&lt;/p&gt; &#xA;&lt;p&gt;You may want to override SwiftLint&#39;s default Swift toolchain if you have multiple toolchains or Xcodes installed.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the order in which SwiftLint determines which Swift toolchain to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$XCODE_DEFAULT_TOOLCHAIN_OVERRIDE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$TOOLCHAIN_DIR&lt;/code&gt; or &lt;code&gt;$TOOLCHAINS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xcrun -find swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;sourcekitd.framework&lt;/code&gt; is expected to be found in the &lt;code&gt;usr/lib/&lt;/code&gt; subdirectory of the value passed in the paths above.&lt;/p&gt; &#xA;&lt;p&gt;You may also set the &lt;code&gt;TOOLCHAINS&lt;/code&gt; environment variable to the reverse-DNS notation that identifies a Swift toolchain version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ TOOLCHAINS=com.apple.dt.toolchain.Swift_2_3 swiftlint --fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux, SourceKit is expected to be located in &lt;code&gt;/usr/lib/libsourcekitdInProc.so&lt;/code&gt; or specified by the &lt;code&gt;LINUX_SOURCEKIT_LIB_PATH&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;SwiftLint can be run as a &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; hook. Once &lt;a href=&#34;https://pre-commit.com/#install&#34;&gt;installed&lt;/a&gt;, add this to the &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; in the root of your repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;repos:&#xA;  - repo: https://github.com/realm/SwiftLint&#xA;    rev: 0.44.0&#xA;    hooks:&#xA;      - id: swiftlint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust &lt;code&gt;rev&lt;/code&gt; to the SwiftLint version of your choice.&lt;/p&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;Over 200 rules are included in SwiftLint and the Swift community (that&#39;s you!) continues to contribute more over time. &lt;a href=&#34;https://raw.githubusercontent.com/realm/SwiftLint/master/CONTRIBUTING.md&#34;&gt;Pull requests&lt;/a&gt; are encouraged.&lt;/p&gt; &#xA;&lt;p&gt;You can find an updated list of rules and more information about them &lt;a href=&#34;https://realm.github.io/SwiftLint/rule-directory.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also check &lt;a href=&#34;https://github.com/realm/SwiftLint/tree/master/Source/SwiftLintFramework/Rules&#34;&gt;Source/SwiftLintFramework/Rules&lt;/a&gt; directory to see their implementation.&lt;/p&gt; &#xA;&lt;h3&gt;Opt-In Rules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;opt_in_rules&lt;/code&gt; are disabled by default (i.e., you have to explicitly enable them in your configuration file).&lt;/p&gt; &#xA;&lt;p&gt;Guidelines on when to mark a rule as opt-in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A rule that can have many false positives (e.g. &lt;code&gt;empty_count&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A rule that is too slow&lt;/li&gt; &#xA; &lt;li&gt;A rule that is not general consensus or is only useful in some cases (e.g. &lt;code&gt;force_unwrapping&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Disable rules in code&lt;/h3&gt; &#xA;&lt;p&gt;Rules can be disabled with a comment inside a source file with the following format:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;// swiftlint:disable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; &amp;lt;rule3&amp;gt;...]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The rules will be disabled until the end of the file or until the linter sees a matching enable comment:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;// swiftlint:enable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; &amp;lt;rule3&amp;gt;...]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swiftlint:disable colon&#xA;let noWarning :String = &#34;&#34; // No warning about colons immediately after variable names!&#xA;// swiftlint:enable colon&#xA;let hasWarning :String = &#34;&#34; // Warning generated about colons immediately after variable names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Including the &lt;code&gt;all&lt;/code&gt; keyword will disable all rules until the linter sees a matching enable comment:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;// swiftlint:disable all&lt;/code&gt; &lt;code&gt;// swiftlint:enable all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swiftlint:disable all&#xA;let noWarning :String = &#34;&#34; // No warning about colons immediately after variable names!&#xA;let i = &#34;&#34; // Also no warning about short identifier names&#xA;// swiftlint:enable all&#xA;let hasWarning :String = &#34;&#34; // Warning generated about colons immediately after variable names&#xA;let y = &#34;&#34; // Warning generated about short identifier names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to modify a &lt;code&gt;disable&lt;/code&gt; or &lt;code&gt;enable&lt;/code&gt; command by appending &lt;code&gt;:previous&lt;/code&gt;, &lt;code&gt;:this&lt;/code&gt; or &lt;code&gt;:next&lt;/code&gt; for only applying the command to the previous, this (current) or next line respectively.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swiftlint:disable:next force_cast&#xA;let noWarning = NSNumber() as! Int&#xA;let hasWarning = NSNumber() as! Int&#xA;let noWarning2 = NSNumber() as! Int // swiftlint:disable:this force_cast&#xA;let noWarning3 = NSNumber() as! Int&#xA;// swiftlint:disable:previous force_cast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;swiftlint rules&lt;/code&gt; to print a list of all available rules and their identifiers.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Configure SwiftLint by adding a &lt;code&gt;.swiftlint.yml&lt;/code&gt; file from the directory you&#39;ll run SwiftLint from. The following parameters can be configured:&lt;/p&gt; &#xA;&lt;p&gt;Rule inclusion:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;disabled_rules&lt;/code&gt;: Disable rules from the default enabled set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opt_in_rules&lt;/code&gt;: Enable rules not from the default set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;only_rules&lt;/code&gt;: Only the rules specified in this list will be enabled. Cannot be specified alongside &lt;code&gt;disabled_rules&lt;/code&gt; or &lt;code&gt;opt_in_rules&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;analyzer_rules&lt;/code&gt;: This is an entirely separate list of rules that are only run by the &lt;code&gt;analyze&lt;/code&gt; command. All analyzer rules are opt-in, so this is the only configurable rule list, there are no equivalents for &lt;code&gt;disabled_rules&lt;/code&gt; &lt;code&gt;only_rules&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# By default, SwiftLint uses a set of sensible default rules you can adjust:&#xA;disabled_rules: # rule identifiers turned on by default to exclude from running&#xA;  - colon&#xA;  - comma&#xA;  - control_statement&#xA;opt_in_rules: # some rules are turned off by default, so you need to opt-in&#xA;  - empty_count # Find all the available rules by running: `swiftlint rules`&#xA;&#xA;# Alternatively, specify all rules explicitly by uncommenting this option:&#xA;# only_rules: # delete `disabled_rules` &amp;amp; `opt_in_rules` if using this&#xA;#   - empty_parameters&#xA;#   - vertical_whitespace&#xA;&#xA;included: # paths to include during linting. `--path` is ignored if present.&#xA;  - Source&#xA;excluded: # paths to ignore during linting. Takes precedence over `included`.&#xA;  - Carthage&#xA;  - Pods&#xA;  - Source/ExcludedFolder&#xA;  - Source/ExcludedFile.swift&#xA;  - Source/*/ExcludedFile.swift # Exclude files with a wildcard&#xA;analyzer_rules: # Rules run by `swiftlint analyze`&#xA;  - explicit_self&#xA;&#xA;# configurable rules can be customized from this configuration file&#xA;# binary rules can set their severity level&#xA;force_cast: warning # implicitly&#xA;force_try:&#xA;  severity: warning # explicitly&#xA;# rules that have both warning and error levels, can set just the warning level&#xA;# implicitly&#xA;line_length: 110&#xA;# they can set both implicitly with an array&#xA;type_body_length:&#xA;  - 300 # warning&#xA;  - 400 # error&#xA;# or they can set both explicitly&#xA;file_length:&#xA;  warning: 500&#xA;  error: 1200&#xA;# naming rules can set warnings/errors for min_length and max_length&#xA;# additionally they can set excluded names&#xA;type_name:&#xA;  min_length: 4 # only warning&#xA;  max_length: # warning and error&#xA;    warning: 40&#xA;    error: 50&#xA;  excluded: iPhone # excluded via string&#xA;  allowed_symbols: [&#34;_&#34;] # these are allowed in type names&#xA;identifier_name:&#xA;  min_length: # only min_length&#xA;    error: 4 # only error&#xA;  excluded: # excluded via string array&#xA;    - id&#xA;    - URL&#xA;    - GlobalAPIKey&#xA;reporter: &#34;xcode&#34; # reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use environment variables in your configuration file, by using &lt;code&gt;${SOME_VARIABLE}&lt;/code&gt; in a string.&lt;/p&gt; &#xA;&lt;h4&gt;Defining Custom Rules&lt;/h4&gt; &#xA;&lt;p&gt;You can define custom regex-based rules in your configuration file using the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;custom_rules:&#xA;  pirates_beat_ninjas: # rule identifier&#xA;    included: &#34;.*\\.swift&#34; # regex that defines paths to include during linting. optional.&#xA;    excluded: &#34;.*Test\\.swift&#34; # regex that defines paths to exclude during linting. optional&#xA;    name: &#34;Pirates Beat Ninjas&#34; # rule name. optional.&#xA;    regex: &#34;([nN]inja)&#34; # matching pattern&#xA;    capture_group: 0 # number of regex capture group to highlight the rule violation at. optional.&#xA;    match_kinds: # SyntaxKinds to match. optional.&#xA;      - comment&#xA;      - identifier&#xA;    message: &#34;Pirates are better than ninjas.&#34; # violation message. optional.&#xA;    severity: error # violation severity. optional.&#xA;  no_hiding_in_strings:&#xA;    regex: &#34;([nN]inja)&#34;&#xA;    match_kinds: string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is what the output would look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/master/assets/custom-rule.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can filter the matches by providing one or more &lt;code&gt;match_kinds&lt;/code&gt;, which will reject matches that include syntax kinds that are not present in this list. Here are all the possible syntax kinds:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;argument&lt;/li&gt; &#xA; &lt;li&gt;attribute.builtin&lt;/li&gt; &#xA; &lt;li&gt;attribute.id&lt;/li&gt; &#xA; &lt;li&gt;buildconfig.id&lt;/li&gt; &#xA; &lt;li&gt;buildconfig.keyword&lt;/li&gt; &#xA; &lt;li&gt;comment&lt;/li&gt; &#xA; &lt;li&gt;comment.mark&lt;/li&gt; &#xA; &lt;li&gt;comment.url&lt;/li&gt; &#xA; &lt;li&gt;doccomment&lt;/li&gt; &#xA; &lt;li&gt;doccomment.field&lt;/li&gt; &#xA; &lt;li&gt;identifier&lt;/li&gt; &#xA; &lt;li&gt;keyword&lt;/li&gt; &#xA; &lt;li&gt;number&lt;/li&gt; &#xA; &lt;li&gt;objectliteral&lt;/li&gt; &#xA; &lt;li&gt;parameter&lt;/li&gt; &#xA; &lt;li&gt;placeholder&lt;/li&gt; &#xA; &lt;li&gt;string&lt;/li&gt; &#xA; &lt;li&gt;string_interpolation_anchor&lt;/li&gt; &#xA; &lt;li&gt;typeidentifier&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If using custom rules in combination with &lt;code&gt;only_rules&lt;/code&gt;, make sure to add &lt;code&gt;custom_rules&lt;/code&gt; as an item under &lt;code&gt;only_rules&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Auto-correct&lt;/h3&gt; &#xA;&lt;p&gt;SwiftLint can automatically correct certain violations. Files on disk are overwritten with a corrected version.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to have backups of these files before running &lt;code&gt;swiftlint --fix&lt;/code&gt;, otherwise important data may be lost.&lt;/p&gt; &#xA;&lt;p&gt;Standard linting is disabled while correcting because of the high likelihood of violations (or their offsets) being incorrect after modifying a file while applying corrections.&lt;/p&gt; &#xA;&lt;h3&gt;Analyze&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;swiftlint analyze&lt;/code&gt; command can lint Swift files using the full type-checked AST. The compiler log path containing the clean &lt;code&gt;swiftc&lt;/code&gt; build command invocation (incremental builds will fail) must be passed to &lt;code&gt;analyze&lt;/code&gt; via the &lt;code&gt;--compiler-log-path&lt;/code&gt; flag. e.g. &lt;code&gt;--compiler-log-path /path/to/xcodebuild.log&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This can be obtained by&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Cleaning DerivedData (incremental builds won&#39;t work with analyze)&lt;/li&gt; &#xA; &lt;li&gt;Running &lt;code&gt;xcodebuild -workspace {WORKSPACE}.xcworkspace -scheme {SCHEME} &amp;gt; xcodebuild.log&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Running &lt;code&gt;swiftlint analyze --compiler-log-path xcodebuild.log&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Analyzer rules tend to be considerably slower than lint rules.&lt;/p&gt; &#xA;&lt;h2&gt;Using Multiple Configuration Files&lt;/h2&gt; &#xA;&lt;p&gt;SwiftLint offers a variety of ways to include multiple configuration files. Multiple configuration files get merged into one single configuration that is then applied just as a single configuration file would get applied.&lt;/p&gt; &#xA;&lt;p&gt;There are quite a lot of use cases where using multiple configuration files could be helpful:&lt;/p&gt; &#xA;&lt;p&gt;For instance, one could use a team-wide shared SwiftLint configuration while allowing overrrides in each project via a child configuration file.&lt;/p&gt; &#xA;&lt;p&gt;Team-Wide Configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;disabled_rules:&#xA;- force_cast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Project-Specific Configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;opt_in_rules:&#xA;- force_cast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Child / Parent Configs (Locally)&lt;/h3&gt; &#xA;&lt;p&gt;You can specify a &lt;code&gt;child_config&lt;/code&gt; and / or a &lt;code&gt;parent_config&lt;/code&gt; reference within a configuration file. These references should be local paths relative to the folder of the configuration file they are specified in. This even works recursively, as long as there are no cycles and no ambiguities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A child config is treated as a refinement and therefore has a higher priority&lt;/strong&gt;, while a parent config is considered a base with lower priority in case of conflicts.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example, assuming you have the following file structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ProjectRoot&#xA;    |_ .swiftlint.yml&#xA;    |_ .swiftlint_refinement.yml&#xA;    |_ Base&#xA;        |_ .swiftlint_base.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To include both the refinement and the base file, your &lt;code&gt;.swiftlint.yml&lt;/code&gt; should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;child_config: .swiftlint_refinement.yml&#xA;parent_config: Base/.swiftlint_base.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When merging parent and child configs, &lt;code&gt;included&lt;/code&gt; and &lt;code&gt;excluded&lt;/code&gt; configurations are processed carefully to account for differences in the directory location of the containing configuration files.&lt;/p&gt; &#xA;&lt;h3&gt;Child / Parent Configs (Remote)&lt;/h3&gt; &#xA;&lt;p&gt;Just as you can provide local &lt;code&gt;child_config&lt;/code&gt; / &lt;code&gt;parent_config&lt;/code&gt; references, instead of referencing local paths, you can just put urls that lead to configuration files. In order for SwiftLint to detect these remote references, they must start with &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The referenced remote configuration files may even recursively reference other remote configuration files, but aren&#39;t allowed to include local references.&lt;/p&gt; &#xA;&lt;p&gt;Using a remote reference, your &lt;code&gt;.swiftlint.yml&lt;/code&gt; could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;parent_config: https://myteamserver.com/our-base-swiftlint-config.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every time you run SwiftLint and have an Internet connection, SwiftLint tries to get a new version of every remote configuration that is referenced. If this request times out, a cached version is used if available. If there is no cached version available, SwiftLint fails – but no worries, a cached version should be there once SwiftLint has run successfully at least once.&lt;/p&gt; &#xA;&lt;p&gt;If needed, the timeouts for the remote configuration fetching can be specified manually via the configuration file(s) using the &lt;code&gt;remote_timeout&lt;/code&gt; / &lt;code&gt;remote_timeout_if_cached&lt;/code&gt; specifiers. These values default to 2 / 1 second(s).&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;Instead of just providing one configuration file when running SwiftLint via the command line, you can also pass a hierarchy, where the first configuration is treated as a parent, while the last one is treated as the highest-priority child.&lt;/p&gt; &#xA;&lt;p&gt;A simple example including just two configuration files looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;swiftlint --config .swiftlint.yml --config .swiftlint_child.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Nested Configurations&lt;/h3&gt; &#xA;&lt;p&gt;In addition to a main configuration (the &lt;code&gt;.swiftlint.yml&lt;/code&gt; file in the root folder), you can put other configuration files named &lt;code&gt;.swiftlint.yml&lt;/code&gt; into the directory structure that then get merged as a child config, but only with an effect for those files that are within the same directory as the config or in a deeper directory where there isn&#39;t another configuration file. In other words: Nested configurations don&#39;t work recursively – there&#39;s a maximum number of one nested configuration per file that may be applied in addition to the main configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.swiftlint.yml&lt;/code&gt; files are only considered as a nested configuration if they have not been used to build the main configuration already (e. g. by having been referenced via something like &lt;code&gt;child_config: Folder/.swiftlint.yml&lt;/code&gt;). Also, &lt;code&gt;parent_config&lt;/code&gt; / &lt;code&gt;child_config&lt;/code&gt; specifications of nested configurations are getting ignored because there&#39;s no sense to that.&lt;/p&gt; &#xA;&lt;p&gt;If one (or more) SwiftLint file(s) are explicitly specified via the &lt;code&gt;--config&lt;/code&gt; parameter, that configuration will be treated as an override, no matter whether there exist other &lt;code&gt;.swiftlint.yml&lt;/code&gt; files somewhere within the directory. &lt;strong&gt;So if you want to use use nested configurations, you can&#39;t use the &lt;code&gt;-- config&lt;/code&gt; parameter.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realm/SwiftLint/master/LICENSE&#34;&gt;MIT licensed.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/master/assets/realm.png&#34; width=&#34;184&#34;&gt; &#xA;&lt;p&gt;SwiftLint is maintained and funded by Realm Inc. The names and logos for Realm are trademarks of Realm Inc.&lt;/p&gt; &#xA;&lt;p&gt;We &lt;span&gt;❤️&lt;/span&gt; open source software! See &lt;a href=&#34;https://github.com/realm&#34;&gt;our other open source projects&lt;/a&gt;, read &lt;a href=&#34;https://realm.io/news&#34;&gt;our blog&lt;/a&gt;, or say hi on twitter (&lt;a href=&#34;https://twitter.com/realm&#34;&gt;@realm&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/master/assets/macstadium.png&#34; width=&#34;184&#34;&gt; &#xA;&lt;p&gt;Our thanks to MacStadium for providing a Mac Mini to run our performance tests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Caldis/Mos</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/Caldis/Mos</id>
    <link href="https://github.com/Caldis/Mos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个用于在 macOS 上平滑你的鼠标滚动效果或单独设置滚动方向的小工具, 让你的滚轮爽如触控板 | A lightweight tool used to smooth scrolling and set scroll direction independently for your mouse on macOS&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://mos.caldis.me/&#34;&gt; &lt;img width=&#34;320&#34; src=&#34;https://github.com/Caldis/Mos/raw/master/docs/resources/image/intro.png?raw=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Mos&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Xcode-9.0%2B-blue.svg?sanitize=true&#34; alt=&#34;Xcode 9.0+&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-4.0%2B-orange.svg?sanitize=true&#34; alt=&#34;Swift 4.0+&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;一个用于在MacOS上平滑你的鼠标滚动效果的小工具, 让你的滚轮爽如触控板。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Caldis/Mos/raw/master/README.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://github.com/Caldis/Mos/raw/master/README.enUS.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://github.com/Caldis/Mos/raw/master/README.ru.md&#34;&gt;Русский&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;主页&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://mos.caldis.me/&#34;&gt;http://mos.caldis.me/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;疯狂平滑你的鼠标滚动效果&lt;/li&gt; &#xA; &lt;li&gt;支持分离触控板/鼠标事件, 单独翻转鼠标滚动方向。&lt;/li&gt; &#xA; &lt;li&gt;滚动曲线的自定义调整。&lt;/li&gt; &#xA; &lt;li&gt;支持区分应用处理, 黑/白名单系统。&lt;/li&gt; &#xA; &lt;li&gt;用于监控滚动事件的图形化呈现窗口。&lt;/li&gt; &#xA; &lt;li&gt;基于 Swift4 构建。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;截图&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://github.com/Caldis/Mos/raw/master/docs/resources/image/cn/Mointor.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://github.com/Caldis/Mos/raw/master/docs/resources/image/cn/PreferencesGeneral.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://github.com/Caldis/Mos/raw/master/docs/resources/image/cn/PreferencesAdvanced.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://github.com/Caldis/Mos/raw/master/docs/resources/image/cn/PreferencesExceptionFull.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;下载及安装&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew安装&lt;/h3&gt; &#xA;&lt;p&gt;Mos可通过&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;来安装:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install mos --cask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;应用将被安装至 &lt;code&gt;/Applications/Mos.app&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;若有新版本,可用以下命令升级:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew reinstall mos --cask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;重新启动应用即可。&lt;/p&gt; &#xA;&lt;h3&gt;手动安装&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Caldis/Mos/releases/&#34;&gt;GithubRelease&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;帮助&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Caldis/Mos/wiki&#34;&gt;GithubWiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;鸣谢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielgindi/Charts&#34;&gt;Charts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iconfont.cn&#34;&gt;iconfont.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Clipy/LoginServiceKit&#34;&gt;LoginServiceKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/galambalazs/smoothscroll-for-websites&#34;&gt;Smoothscroll-for-websites&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;贡献&lt;/h2&gt; &#xA;&lt;p&gt;如果您觉得 Mos 的本地化做的有任何不妥之处, 欢迎您提交任何关于文本修改的意见, 您可以通过提交 Github Issue 的方式告诉我们, 如果您善于编码, 我们非常欢迎您提交一个 PR !&lt;/p&gt; &#xA;&lt;p&gt;我们欢迎任何形式的贡献，有任何建议或意见您可以给我们 &lt;a href=&#34;https://github.com/Caldis/Mos/issues&#34;&gt;提问&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2017 Caldis rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by-nc/3.0/cn/&#34;&gt;署名-非商业性使用协议&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And you can not upload it to the App Store.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>saagarjha/unxip</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/saagarjha/unxip</id>
    <link href="https://github.com/saagarjha/unxip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast Xcode unarchiver&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;unxip&lt;/h1&gt; &#xA;&lt;p&gt;unxip is a command line-tool designed for rapidly unarchiving Xcode XIP files and writing them to disk with good compression. Its goal is to outperform Bom (which powers &lt;code&gt;xip(1)&lt;/code&gt; and Archive Utility) in both performance and on-disk usage, and (at the time of writing) does so by a factor of about 2-3x in time spent decompressing and about 8% in space.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install unxip is to grab a precompiled binary for macOS 12.0 and later from the &lt;a href=&#34;https://github.com/saagarjha/unxip/releases/latest&#34;&gt;releases page&lt;/a&gt;. If you prefer, you can also install unxip from your package manager by adding &lt;a href=&#34;https://github.com/saagarjha/ports&#34;&gt;https://github.com/saagarjha/ports&lt;/a&gt; to your list of MacPorts sources, or tapping &lt;a href=&#34;https://github.com/saagarjha/homebrew-tap&#34;&gt;saagarjha/tap&lt;/a&gt; if you&#39;re using Homebrew. Both will make the latest version of the command available under the package name &#34;unxip&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;unxip is fairly simple and implemented as a &lt;a href=&#34;https://raw.githubusercontent.com/saagarjha/unxip/main/unxip.swift&#34;&gt;single file&lt;/a&gt;. Thus, you can build it by compiling that file directly, with just an up-to-date version of the Command Line Tools (&lt;code&gt;xcode-select --install&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ swiftc -parse-as-library -O unxip.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build an optimized unxip binary for your computer&#39;s native architecture. Because unxip uses Swift Concurrency, it is recommended that you build on macOS Monterey or later; macOS Big Sur is technically supported but needs to use backdeployment libraries that are not very easy to distribute with a command line tool.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to use Swift Package Manager to build your code, a Package.swift is also available. This has the downside of requiring a full Xcode installation to bootstrap the build, but makes it easy to build a Universal binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ swift build -c release --arch arm64 --arch x86_64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When run from the project root, the resulting executable will be located at .build/apple/Products/Release/unxip.&lt;/p&gt; &#xA;&lt;p&gt;unxip is not currently designed to be embedded directly into the address space of another application. While it would &#34;work&#34; (with minor modifications to allow linking) its implementation expects to be the only user of the cooperative thread pool and effectively takes it over, which may adversely affect other code that wishes to run on it. The recommended way to use unxip is spawning it as a subtask.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The intended usage of unxip is with a single command line parameter that represents the path to an XIP from Apple that contains Xcode. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ unxip Xcode.xip # will produce Xcode.app in the current directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As the tool is still somewhat rough, its error handling is not very good at the moment. An attempt has been made to at least crash preemptively when things go wrong, but you may still run into strange behavior on edge cases. For best results, ensure that the directory you are running unxip from does not contain any existing Xcode(-beta).app bundles and that you are using a modern version of macOS on a fast APFS filesystem. &lt;strong&gt;For simplicity, unxip does not perform any signature verification, so if authentication is important you should use another mechanism (such as a checksum) for validation.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;When making changes, be sure to use &lt;a href=&#34;https://github.com/apple/swift-format&#34;&gt;swift-format&lt;/a&gt; on the source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ swift-format -i *.swift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;As a purpose-built tool, unxip outperforms Bom because of several key implementation decisions. Heavy use of &lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html&#34;&gt;Swift Concurrency&lt;/a&gt; allows unxip to unlock parallelization opportunities that Bom largely misses, and the use of &lt;a href=&#34;https://en.wikipedia.org/wiki/LZFSE&#34;&gt;LZFSE&lt;/a&gt; rather than the simpler LZVN gives it higher compression ratios. To understand its design, it&#39;s important to first be familiar with the Xcode XIP format and APFS transparent compression.&lt;/p&gt; &#xA;&lt;p&gt;XIPs, including the ones that Xcode come in, are &lt;a href=&#34;https://en.wikipedia.org/wiki/Xar_%28archiver%29&#34;&gt;XAR archives&lt;/a&gt;, which contain a table of contents that lists each file inside and the compression used for each. However, unlike most XARs Xcode&#39;s only has two files: a &lt;a href=&#34;https://en.wikipedia.org/wiki/Bzip2&#34;&gt;bzip2&lt;/a&gt;-compressed Metadata that is just a few hundred bytes, and a multi-gigabyte file named Content that is stored &#34;uncompressed&#34;. While marked as plain data, this file is an apparently proprietary archive format called pbzx. Luckily, the scheme is fairly straightforward and &lt;a href=&#34;https://gist.github.com/pudquick/ff412bcb29c9c1fa4b8d&#34;&gt;several&lt;/a&gt; &lt;a href=&#34;https://github.com/nrosenstein-stuff/pbzx&#34;&gt;people&lt;/a&gt; &lt;a href=&#34;http://newosxbook.com/src.jl?tree=listings&amp;amp;file=pbzx.c&#34;&gt;on the&lt;/a&gt; &lt;a href=&#34;https://www.tonymacx86.com/threads/pbzx-stream-parser.135458/&#34;&gt;internet&lt;/a&gt; have already tried reverse engineering it. This tool contains an independent implementation that nonetheless shares many of its core details with these efforts. The compressed content inside the pbzx is an ASCII-representation &lt;a href=&#34;https://en.wikipedia.org/wiki/cpio&#34;&gt;cpio&lt;/a&gt; archive, which has been split apart into 16MB chunks that have either been individually compressed with &lt;a href=&#34;https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Markov_chain_algorithm&#34;&gt;LZMA&lt;/a&gt; or included as-is. Unfortunately pbzx does not contain a table of contents, or any structure aside from these (byte-, rather than file-aligned) chunks, so distinguishing individual files is not possible without decompressing the entire buffer.&lt;/p&gt; &#xA;&lt;p&gt;Parsing this cpio archive gives the necessary information need to reconstruct an Xcode bundle, but unxip (and Bom) go through an additional step to apply &lt;a href=&#34;https://en.wikipedia.org/wiki/Apple_File_System#Compression&#34;&gt;transparent APFS compression&lt;/a&gt; to files that could benefit from it, which significantly reduces size on-disk. For this operation, unxip chooses to use the LZFSE algorithm, while Bom uses the simpler LZVN. The compressed data is stored in the file&#39;s resource fork, a special header describing the compression is constructed in an xattr, and the &lt;code&gt;UF_COMPRESSED&lt;/code&gt; is set on the file.&lt;/p&gt; &#xA;&lt;p&gt;On the whole, this procedure is designed to be fairly linear, with the XIP being read sequentially, producing LZMA chunks that are reassembled in order to create the cpio archive, which can then be streamed to reconstruct an Xcode bundle. Unfortunately, a naive implementation of this is process does not perform very well due to the varying performance bottlenecks of each step. To make matters worse, the size of Xcode makes it infeasible to operate with entirely in memory. To get around this problem, unxip parallelizes &lt;em&gt;intermediate&lt;/em&gt; steps and then streams results in linear order, benefiting from much better processor utilization and allowing the file to be processed in &#34;sliding window&#34; fashion.&lt;/p&gt; &#xA;&lt;p&gt;On modern processors, single-threaded LZMA decoding is limited to about ~100 MB/s; as the Xcode cpio is almost 40 GB large, this is not really fast enough for unxip. Instead, unxip carves out each chunk from the pbzx archive into its own task (the metadata in the file format makes this fairly straightforward) and decompresses each in parallel. To limit memory usage, a cap is applied to how many chunks are resident in memory at once. Since the next step (parsing the cpio) requires logical linearity, completing chunks are temporarily parked until their preceding ones complete, after which they are all yielded together. This preserves order while still providing an opportunity for multiple chunks to be decoded in parallel. In practice, this technique can decode the LZMA stream at effective speeds approaching 1 GB/s when provided with enough CPU cores.&lt;/p&gt; &#xA;&lt;p&gt;The linear chunk stream (now decompressed into a cpio) is then parsed in sequence to extract files, directories, and their associated metadata. cpios are naturally ordered–for example, all additional hardlinks must come after the original file–but Xcode&#39;s has an additional nice property that it&#39;s been sorted so that all directories appear before the files inside of them. This allows for a sequential stream of filesystem operations to correctly produce the bundle, without running into errors with missing intermediate directories or link targets.&lt;/p&gt; &#xA;&lt;p&gt;While simplifying the implementation, this order makes it difficult for unxip to efficiently schedule filesystem operations and transparent compression. To resolve this, a dependency graph is created for each file (directories, files, and symlinks depend on their parent directory&#39;s existence, hardlinks require their target to exist) and then the task is scheduled in parallel with those constraints applied. New file writes are particularly expensive because compression is applied before the data is written to disk. While this step is already parallelized to some extent because of the graph described earlier, there is a chance for additional parallelism in Apple&#39;s filesystem compression implementation because it chunks data internally at 64KB chunk boundaries, which we can then run in parallel. LZFSE achieves high compression ratios and has a performant implementation, which we can take advantage of largely for free. Unlike most of our steps, which were compute-bound, the final step of writing to disk requires interacting with the kernel. If we&#39;re careless we can accidentally overload the system with operations and back up our entire pipeline. To prevent unconsumed chunks sitting around in memory, we manually apply backpressure on our stream by having them only yield results when later steps are ready to consume them.&lt;/p&gt; &#xA;&lt;p&gt;Overall, this architecture allows unxip to utilize CPU cores and dispatch disk writes fairly well. It is likely that there is still some room for improvement in its implementation, especially around the constants chosen for batch sizes and backoff intervals (some of which can probably be done much better by the runtime itself &lt;a href=&#34;https://github.com/apple/swift/pull/41192&#34;&gt;once it is ready&lt;/a&gt;). Ideas on how its performance can be further improved are always welcome :)&lt;/p&gt; &#xA;&lt;p&gt;Finally, I am very thankful to Kevin Elliott and the rest of the DTS team for fielding some of my filesystem-related questions; the answers were very helpful when I was designing unxip.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>instacart/Nantes</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/instacart/Nantes</id>
    <link href="https://github.com/instacart/Nantes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift TTTAttributedLabel replacement&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nantes 🥕&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/instacart/Nantes&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/instacart/Nantes.svg?style=flat&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/Nantes.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Nantes.svg?sanitize=true&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library is a Swift port/fork of the popular Objective-C library &lt;a href=&#34;https://github.com/TTTAttributedLabel/TTTAttributedLabel&#34;&gt;TTTAttributedLabel&lt;/a&gt;. Much ❤️ and credit goes to &lt;a href=&#34;https://github.com/mattt&#34;&gt;Mattt&lt;/a&gt; for creating such a great UILabel replacement library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Nantes&lt;/code&gt; is a pure-Swift &lt;code&gt;UILabel&lt;/code&gt; replacement. It supports attributes, data detectors, and more. It also supports link embedding automatically and with &lt;code&gt;NSTextCheckingTypes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Come build awesome things with us here at &lt;a href=&#34;https://careers.instacart.com/&#34;&gt;Instacart!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 8.0+&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Nantes is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. To install it, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;instacart/nantes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Nantes is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Nantes&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Communication&lt;/h3&gt; &#xA;&lt;p&gt;If you need help, feel free to open an issue. Please search before opening one, someone might have run into something similar.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Opening a pull request is the best way to get something fixed. If you need help, feel free to open an issue, hopefully someone can help you out with a problem you&#39;re running into.&lt;/p&gt; &#xA;&lt;h3&gt;Author&lt;/h3&gt; &#xA;&lt;p&gt;chansen22, &lt;a href=&#34;mailto:cthansen22@gmail.com&#34;&gt;cthansen22@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Check out &lt;code&gt;Nantes&lt;/code&gt; in the &lt;code&gt;Example&lt;/code&gt; directory for more examples.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Nantes&#xA;&#xA;let label: NantesLabel = .init(frame: .zero)&#xA;label.attributedTruncationToken = NSAttributedString(string: &#34;... more&#34;)&#xA;label.numberOfLines = 3&#xA;label.labelTappedBlock = {&#xA;  label.numberOfLines = label.numberOfLines == 0 ? 3 : 0 // Flip between limiting lines and not&#xA;&#xA;  UIView.animateWithDuration(0.2, animations: {&#xA;    self.view.layoutIfNeeded()&#xA;  })&#xA;}&#xA;&#xA;label.text = &#34;Nantes label is great! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus ac urna et ante lobortis varius. Nunc rhoncus enim vitae sem commodo sodales. Morbi id augue id augue finibus tincidunt. Cras ac massa nisi. Maecenas elementum vitae elit eu mattis. Duis pretium turpis ut justo accumsan molestie. Mauris elit elit, maximus eu risus sed, vestibulum sodales enim. Sed porttitor vestibulum tincidunt. Maecenas mollis tortor quam, sed porta justo rhoncus id. Phasellus vitae augue tempor, luctus metus sit amet, dictum urna. Morbi sit amet feugiat purus. Proin vitae finibus lectus, eu gravida erat.&#34;&#xA;view.addSubview(label)&#xA;&#xA;let linkLabel: NantesLabel = .init(frame: .zero)&#xA;linkLabel.delegate = self // NantesLabelDelegate&#xA;linkLabel.linkAttributes = [NSAttributedString.Key.foregroundColor: UIColor.green]&#xA;linkLabel.text = &#34;https://www.instacart.com&#34;&#xA;view.addSubview(linkLabel)&#xA;&#xA;// Link handling&#xA;&#xA;func attributedLabel(_ label: NantesLabel, didSelectLink link: URL) {&#xA;  print(&#34;Tapped link: \(link)&#34;)&#xA;}&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>krzysztofzablocki/Sourcery</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/krzysztofzablocki/Sourcery</id>
    <link href="https://github.com/krzysztofzablocki/Sourcery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Meta-programming for Swift, stop writing boilerplate code.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/krzysztofzablocki/Sourcery&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/krzysztofzablocki/Sourcery.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![codecov](https://codecov.io/gh/krzysztofzablocki/Sourcery/branch/master/graph/badge.svg)](https://codecov.io/gh/krzysztofzablocki/Sourcery) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://merowing.info/Sourcery/index.html&#34;&gt;&lt;img src=&#34;https://merowing.info/Sourcery/badge.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Sourcery&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Sourcery.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Sourcery&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Sourcery.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Sourcery&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Sourcery.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;There is now a new powerful way to both write and integrate Sourcery functionality: Sourcery Pro provides powerful Stencil editor and extends Xcode with ability to handle live AST templates: &lt;a href=&#34;https://apps.apple.com/us/app/sourcery-pro/id1561780836?mt=12&#34;&gt;available on Mac App Store&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1468993/114271090-f6c19200-9a0f-11eb-9bd8-d7bb15129eb2.mp4&#34;&gt;https://user-images.githubusercontent.com/1468993/114271090-f6c19200-9a0f-11eb-9bd8-d7bb15129eb2.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://merowing.info/sourcery-pro/&#34;&gt;Learn more about Sourcery Pro&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/Resources/icon-128.png&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sourcery&lt;/strong&gt; is a code generator for Swift language, built on top of Apple&#39;s own SwiftSyntax. It extends the language abstractions to allow you to generate boilerplate code automatically.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s used in over 40,000 projects on both iOS and macOS and it powers some of the most popular and critically-acclaimed apps you have used (including Airbnb, Bumble, New York Times). Its massive community adoption was one of the factors that pushed Apple to implement derived Equality and automatic Codable conformance. Sourcery is maintained by a growing community of &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Try &lt;strong&gt;Sourcery&lt;/strong&gt; for your next project or add it to an existing one -- you&#39;ll save a lot of time and be happy you did!&lt;/p&gt; &#xA;&lt;h2&gt;TL;DR&lt;/h2&gt; &#xA;&lt;p&gt;Sourcery allows you to get rid of repetitive code and create better architecture and developer workflows. An example might be implementing &lt;code&gt;Mocks&lt;/code&gt; for all your protocols, without Sourcery you will need to write &lt;strong&gt;hundreds lines of code per each protocol&lt;/strong&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyProtocolMock: MyProtocol {&#xA;&#xA;    //MARK: - sayHelloWith&#xA;    var sayHelloWithNameCallsCount = 0&#xA;    var sayHelloWithNameCalled: Bool {&#xA;        return sayHelloWithNameCallsCount &amp;gt; 0&#xA;    }&#xA;    var sayHelloWithNameReceivedName: String?&#xA;    var sayHelloWithNameReceivedInvocations: [String] = []&#xA;    var sayHelloWithNameClosure: ((String) -&amp;gt; Void)?&#xA;&#xA;    func sayHelloWith(name: String) {&#xA;        sayHelloWithNameCallsCount += 1&#xA;        sayHelloWithNameReceivedName = name&#xA;        sayHelloWithNameReceivedInvocations.append(name)&#xA;        sayHelloWithNameClosure?(name)&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and with Sourcery ?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension MyProtocol: AutoMockable {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sourcery removes the need to write any of the mocks code, how many protocol do you have in your project? Imagine how much time you&#39;ll save, using Sourcery will also make every single mock consistent and if you refactor or add properties, the mock code will be automatically updated for you, eliminating possible human errors.&lt;/p&gt; &#xA;&lt;p&gt;Sourcery can be applied to arbitrary problems across your codebase, if you can describe an algorithm to another human, you can automate it using Sourcery.&lt;/p&gt; &#xA;&lt;p&gt;Most common uses are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/equatable.html&#34;&gt;Equality&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://merowing.info/Sourcery/hashable.html&#34;&gt;Hashing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/enum-cases.html&#34;&gt;Enum cases &amp;amp; Counts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/lenses.html&#34;&gt;Lenses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/mocks.html&#34;&gt;Mocks &amp;amp; Stubs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/linuxmain.html&#34;&gt;LinuxMain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/decorator.html&#34;&gt;Decorators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/codable.html&#34;&gt;Persistence and advanced Codable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://merowing.info/Sourcery/diffable.html&#34;&gt;Property level diffing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But how about more specific use-cases, like automatically generating all the UI for your app &lt;code&gt;BetaSetting&lt;/code&gt;? &lt;a href=&#34;https://github.com/krzysztofzablocki/AutomaticSettings&#34;&gt;you can use Sourcery for that too&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you start writing your own template and learn the power of Sourcery you won&#39;t be able to live without it.&lt;/p&gt; &#xA;&lt;h2&gt;How To Get Started&lt;/h2&gt; &#xA;&lt;p&gt;There are plenty of tutorials for different uses of Sourcery, and you can always ask for help in our &lt;a href=&#34;https://forums.swift.org/c/related-projects/sourcery&#34;&gt;Swift Forum Category&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.caseyliss.com/2017/3/31/the-magic-of-sourcery&#34;&gt;The Magic of Sourcery&lt;/a&gt; is a great starting tutorial&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/158803/sourcery-tutorial-generating-swift-code-ios&#34;&gt;Generating Swift Code for iOS&lt;/a&gt; deals with JSON handling code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atomicrobot.io/blog/sourcery/&#34;&gt;How To Automate Swift Boilerplate with Sourcery&lt;/a&gt; generates conversions to dictionaries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://littlebitesofcocoa.com/318-codable-enums&#34;&gt;Codable Enums&lt;/a&gt; implements Codable support for Enumerations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/SourceryWorkshops&#34;&gt;Sourcery Workshops&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Mocking Intro &amp;amp; Getting Started Video&lt;/h3&gt; &#xA;&lt;p&gt;You can also watch this quick getting started and intro to mocking video by Inside iOS Dev: &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/-ZbBNuttlt4?t=214&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/Resources/Inside-iOS-Dev-Sourcery-Intro-To-Mocking-Video-Thumbnail.png&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Binary form&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Download the latest release with the prebuilt binary from &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/releases/latest&#34;&gt;release tab&lt;/a&gt;. Unzip the archive into the desired destination and run &lt;code&gt;bin/sourcery&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;brew install sourcery&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Add &lt;code&gt;pod &#39;Sourcery&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt; and run &lt;code&gt;pod update Sourcery&lt;/code&gt;. This will download the latest release binary and will put it in your project&#39;s CocoaPods path so you will run it with &lt;code&gt;$PODS_ROOT/Sourcery/bin/sourcery&lt;/code&gt;&lt;/p&gt; &lt;p&gt;If you only want to install the &lt;code&gt;sourcery&lt;/code&gt; binary, you may want to use the &lt;code&gt;CLI-Only&lt;/code&gt; subspec: &lt;code&gt;pod &#39;Sourcery&#39;, :subspecs =&amp;gt; [&#39;CLI-Only&#39;]&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/yonaskolb/Mint&#34;&gt;Mint&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;mint run krzysztofzablocki/Sourcery&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Building from Source&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Download the latest release source code from &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/releases/latest&#34;&gt;the release tab&lt;/a&gt; or clone the repository and build Sourcery manually.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Building with Swift Package Manager&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Run &lt;code&gt;swift build -c release&lt;/code&gt; in the root folder and then copy &lt;code&gt;.build/release/sourcery&lt;/code&gt; to your desired destination.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;Note: JS templates are not supported when building with SPM yet.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Building with Xcode&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Run &lt;code&gt;xcodebuild -scheme sourcery -destination generic/platform=macOS -archivePath sourcery.xcarchive archive&lt;/code&gt; and export the binary from the archive.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation for the latest release is available &lt;a href=&#34;http://merowing.info/Sourcery/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Sourcery is a command line tool; you can either run it manually or in a custom build phase using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./bin/sourcery --sources &amp;lt;sources path&amp;gt; --templates &amp;lt;templates path&amp;gt; --output &amp;lt;output path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: this command differs depending on how you installed Sourcery (see &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/#installing&#34;&gt;Installing&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Command line options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--sources&lt;/code&gt; - Path to a source swift files or directories. You can provide multiple paths using multiple &lt;code&gt;--sources&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--templates&lt;/code&gt; - Path to templates. File or Directory. You can provide multiple paths using multiple &lt;code&gt;--templates&lt;/code&gt; options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--force-parse&lt;/code&gt; - File extensions of Sourcery generated file you want to parse. You can provide multiple extension using multiple &lt;code&gt;--force-parse&lt;/code&gt; options. (i.e. &lt;code&gt;file.toparse.swift&lt;/code&gt; will be parsed even if generated by Sourcery if &lt;code&gt;--force-parse toparse&lt;/code&gt;). Useful when trying to implement a multiple phases generation. &lt;code&gt;--force-parse&lt;/code&gt; can also be used to process within a sourcery annotation. For example to process code within &lt;code&gt;sourcery:inline:auto:Type.AutoCodable&lt;/code&gt; annotation you can use &lt;code&gt;--force-parse AutoCodable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--output&lt;/code&gt; [default: current path] - Path to output. File or Directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--config&lt;/code&gt; [default: current path] - Path to config file. File or Directory. See &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/#configuration-file&#34;&gt;Configuration file&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--args&lt;/code&gt; - Additional arguments to pass to templates. Each argument can have an explicit value or will have implicit &lt;code&gt;true&lt;/code&gt; value. Arguments should be separated with &lt;code&gt;,&lt;/code&gt; without spaces (i.e. &lt;code&gt;--args arg1=value,arg2&lt;/code&gt;). Arguments are accessible in templates via &lt;code&gt;argument.name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--watch&lt;/code&gt; [default: false] - Watch both code and template folders for changes and regenerate automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--verbose&lt;/code&gt; [default: false] - Turn on verbose logging&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--quiet&lt;/code&gt; [default: false] - Turn off any logging, only emit errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--disableCache&lt;/code&gt; [default: false] - Turn off caching of parsed data&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--prune&lt;/code&gt; [default: false] - Prune empty generated files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt; - Display the current version of Sourcery&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--help&lt;/code&gt; - Display help information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration file&lt;/h3&gt; &#xA;&lt;p&gt;Instead of CLI arguments you can use a &lt;code&gt;.sourcery.yml&lt;/code&gt; configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sources:&#xA;  - &amp;lt;sources path&amp;gt;&#xA;  - &amp;lt;sources path&amp;gt;&#xA;templates:&#xA;  - &amp;lt;templates path&amp;gt;&#xA;  - &amp;lt;templates path&amp;gt;&#xA;force-parse:&#xA;  - &amp;lt;string value&amp;gt;&#xA;  - &amp;lt;string value&amp;gt;&#xA;output:&#xA;  &amp;lt;output path&amp;gt;&#xA;args:&#xA;  &amp;lt;name&amp;gt;: &amp;lt;value&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about this configuration file &lt;a href=&#34;https://merowing.info/Sourcery/usage.html#configuration-file&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you get unverified developer warning when using binary zip distribution try: &lt;code&gt;xattr -dr com.apple.quarantine Sourcery-1.1.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Sourcery are welcomed and encouraged!&lt;/p&gt; &#xA;&lt;p&gt;It is easy to get involved. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/graphs/contributors&#34;&gt;A list of contributors is available through GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To clarify what is expected of our community, Sourcery has adopted the code of conduct defined by the Contributor Covenant. This document is used across many open source communities, and articulates my values well. For more, see the &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsoring&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to support Sourcery development you can do so through &lt;a href=&#34;https://github.com/sponsors/krzysztofzablocki&#34;&gt;GitHub Sponsors&lt;/a&gt; or &lt;a href=&#34;https://opencollective.com/sourcery&#34;&gt;Open Collective&lt;/a&gt;, it&#39;s highly appreciated 🙇‍&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Sourcery is available under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;p&gt;This tool is powered by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylef/Stencil&#34;&gt;Stencil&lt;/a&gt; and few other libs by &lt;a href=&#34;https://github.com/kylef&#34;&gt;Kyle Fuller&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you! to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/faktory&#34;&gt;Mariusz Ostrowski&lt;/a&gt; for creating the logo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/artsy/eidolon&#34;&gt;Artsy Eidolon&lt;/a&gt; team, because we use their codebase as a stub data for performance testing the parser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AliSoftware&#34;&gt;Olivier Halligon&lt;/a&gt; for showing me his setup scripts for CLI tools which are powering our rakefile.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpsim&#34;&gt;JP Simard&lt;/a&gt; for creating &lt;a href=&#34;https://github.com/jpsim/SourceKitten&#34;&gt;SourceKitten&lt;/a&gt; that originally powered Sourcery and was instrumental in making this project happen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Libraries / Tools&lt;/h2&gt; &#xA;&lt;p&gt;If you want to generate code for asset related data like .xib, .storyboards etc. use &lt;a href=&#34;https://github.com/AliSoftware/SwiftGen&#34;&gt;SwiftGen&lt;/a&gt;. SwiftGen and Sourcery are complementary tools.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to check my other libraries and tools, especially:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/KZPlayground&#34;&gt;KZPlayground&lt;/a&gt; - Powerful playgrounds for Swift and Objective-C&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/KZFileWatchers&#34;&gt;KZFileWatchers&lt;/a&gt; - Daemon for observing local and remote file changes, used for building other developer tools (Sourcery uses it)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;http://twitter.com/merowing_&#34;&gt;follow me on Twitter&lt;/a&gt; for news/updates about other projects I am creating.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ObuchiYuki/DevToysMac</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/ObuchiYuki/DevToysMac</id>
    <link href="https://github.com/ObuchiYuki/DevToysMac" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DevToys For mac&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DevToysMac&lt;/h1&gt; &#xA;&lt;p&gt;This is the mac app version of &lt;a href=&#34;https://github.com/veler/DevToys&#34;&gt;DevToys or Windows&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/20896810/154781951-f4c6fa80-2fcc-40fe-a94b-fccfc0f2ccf1.png&#34; alt=&#34;Dribbble Shot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to install&lt;/h1&gt; &#xA;&lt;h2&gt;Manually&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/ObuchiYuki/DevToysMac/releases/latest&#34;&gt;latest release&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract &lt;code&gt;DevToys.app&lt;/code&gt; from &lt;code&gt;DevToys.app.zip&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Homebrew&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. Then install DevToysMac with &lt;code&gt;brew install --cask devtoys&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to Build&lt;/h1&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;h3&gt;Home&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 01 01&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695286-7984d264-e590-43b8-9ed7-03853967b0e4.png&#34;&gt; &#xA;&lt;h3&gt;Json &amp;lt;&amp;gt; Yaml Converter&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 01 23&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695289-cf2a4c2f-8ca9-4537-a896-5fc944b706ac.png&#34;&gt; &#xA;&lt;h3&gt;Number Base Converter&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 01 41&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695294-88c629d9-514f-4966-a174-1fcec9c29185.png&#34;&gt; &#xA;&lt;h3&gt;HTML Encoder / Decoder&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 02 05&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695300-e0dccd31-b3ac-42e6-904d-d287e56e4e63.png&#34;&gt; &#xA;&lt;h3&gt;URL Encoder / Decoder&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 02 11&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695305-a88c6106-3086-4289-bd61-8670cd1d1bac.png&#34;&gt; &#xA;&lt;h3&gt;Base64 Encoder / Decoder&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 02 49&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695317-a821fc62-64b6-4e09-a7dc-cb661f10ee7d.png&#34;&gt; &#xA;&lt;h3&gt;JSON Formatter&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 04 43&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695321-f996ddc7-27d3-457e-8086-d40848ce8d68.png&#34;&gt; &#xA;&lt;p&gt;and more...&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>groue/GRDB.swift</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/groue/GRDB.swift</id>
    <link href="https://github.com/groue/GRDB.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolkit for SQLite databases, with a focus on application development&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/GRDB.png&#34; alt=&#34;GRDB: A toolkit for SQLite databases, with a focus on application development&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;A toolkit for SQLite databases, with a focus on application development&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img alt=&#34;Swift 5.3&#34; src=&#34;https://img.shields.io/badge/swift-5.3-orange.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img alt=&#34;Platforms&#34; src=&#34;https://img.shields.io/cocoapods/p/GRDB.swift.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/raw/master/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/groue/GRDB.swift.svg?maxAge=2592000&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/actions/workflows/CI.yml&#34;&gt;&lt;img alt=&#34;CI Status&#34; src=&#34;https://github.com/groue/GRDB.swift/actions/workflows/CI.yml/badge.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Latest release&lt;/strong&gt;: May 26, 2022 • &lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v5.24.1&#34;&gt;version 5.24.1&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GRDB5MigrationGuide.md&#34;&gt;Migrating From GRDB 4 to GRDB 5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;: iOS 11.0+ / macOS 10.10+ / tvOS 9.0+ / watchOS 2.0+ • SQLite 3.8.5+ • Swift 5.3+ / Xcode 12+&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift version&lt;/th&gt; &#xA;   &lt;th&gt;GRDB version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Swift 5.3+&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v5.24.1&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 5.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v5.12.0&#34;&gt;v5.12.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 5.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v4.14.0&#34;&gt;v4.14.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v4.14.0&#34;&gt;v4.14.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 4.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v4.14.0&#34;&gt;v4.14.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 4.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v3.7.0&#34;&gt;v3.7.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v2.10.0&#34;&gt;v2.10.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 3.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v1.3.0&#34;&gt;v1.3.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 3.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v1.3.0&#34;&gt;v1.3.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v1.0&#34;&gt;v1.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 2.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v0.81.2&#34;&gt;v0.81.2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 2.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v0.80.2&#34;&gt;v0.80.2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contact&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Release announcements and usage tips: follow &lt;a href=&#34;http://twitter.com/groue&#34;&gt;@groue&lt;/a&gt; on Twitter.&lt;/li&gt; &#xA; &lt;li&gt;Report bugs in a &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/new&#34;&gt;Github issue&lt;/a&gt;. Make sure you check the &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues?q=is%3Aopen&#34;&gt;existing issues&lt;/a&gt; first.&lt;/li&gt; &#xA; &lt;li&gt;A question? Looking for advice? Do you wonder how to contribute? Fancy a chat? Go to the &lt;a href=&#34;https://forums.swift.org/c/related-projects/grdb&#34;&gt;GRDB forums&lt;/a&gt;, or open a &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/new&#34;&gt;Github issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;GRDB provides raw access to SQL and advanced SQLite features, because one sometimes enjoys a sharp tool. It has robust concurrency primitives, so that multi-threaded applications can efficiently use their databases. It grants your application models with persistence and fetching methods, so that you don&#39;t have to deal with SQL and raw database rows when you don&#39;t want to.&lt;/p&gt; &#xA;&lt;p&gt;Compared to &lt;a href=&#34;http://github.com/stephencelis/SQLite.swift&#34;&gt;SQLite.swift&lt;/a&gt; or &lt;a href=&#34;http://github.com/ccgus/fmdb&#34;&gt;FMDB&lt;/a&gt;, GRDB can spare you a lot of glue code. Compared to &lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/&#34;&gt;Core Data&lt;/a&gt; or &lt;a href=&#34;http://realm.io&#34;&gt;Realm&lt;/a&gt;, it can simplify your multi-threaded applications.&lt;/p&gt; &#xA;&lt;p&gt;It comes with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&#34;&gt;up-to-date documentation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#general-guides--good-practices&#34;&gt;general guides&lt;/a&gt;, and it is &lt;a href=&#34;https://github.com/groue/GRDB.swift/wiki/Performance&#34;&gt;fast&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/WhyAdoptGRDB.md&#34;&gt;Why Adopt GRDB?&lt;/a&gt; if you are looking for your favorite database library.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Programming tools for both database beginners and SQLite experts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;Access to raw SQL and SQLite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;: Fetching and persistence methods for your custom structs and class hierarchies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;Query Interface&lt;/a&gt;: A swift way to avoid the SQL language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;: Relations and joins between record types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;WAL Mode Support&lt;/a&gt;: Extra performance for multi-threaded applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Migrations.md&#34;&gt;Migrations&lt;/a&gt;: Transform your database as your application evolves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;Database Observation&lt;/a&gt;: Observe database changes and transactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;Full-Text Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;Encryption&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;Support for Custom SQLite Builds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In-depth integration with our programming environment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md&#34;&gt;Swift Concurrency&lt;/a&gt;: &lt;code&gt;try await&lt;/code&gt; your database (Xcode 13.3.1+).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/groue/GRDBQuery&#34;&gt;SwiftUI&lt;/a&gt;: Access and observe the database from your SwiftUI views.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&#34;&gt;Combine&lt;/a&gt;: Access and observe the database with Combine publishers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/RxSwiftCommunity/RxGRDB&#34;&gt;RxSwift&lt;/a&gt;: Access and observe the database with RxSwift observables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Start using the database in four steps&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;// 1. Open a database connection&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;&#xA;// 2. Define the database schema&#xA;try dbQueue.write { db in&#xA;    try db.create(table: &#34;player&#34;) { t in&#xA;        t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;        t.column(&#34;name&#34;, .text).notNull()&#xA;        t.column(&#34;score&#34;, .integer).notNull()&#xA;    }&#xA;}&#xA;&#xA;// 3. Define a record type&#xA;struct Player: Codable, FetchableRecord, PersistableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;// 4. Access the database&#xA;try dbQueue.write { db in&#xA;    try Player(id: 1, name: &#34;Arthur&#34;, score: 100).insert(db)&#xA;    try Player(id: 2, name: &#34;Barbara&#34;, score: 1000).insert(db)&#xA;}&#xA;&#xA;let players: [Player] = try dbQueue.read { db in&#xA;    try Player.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Activate the WAL mode&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;// Simple database connection&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;&#xA;// Enhanced multithreading based on SQLite&#39;s WAL mode&#xA;let dbPool = try DatabasePool(path: &#34;/path/to/database.sqlite&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;Database Connections&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Access to raw SQL&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;&#34;&#34;&#xA;        CREATE TABLE place (&#xA;          id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;          title TEXT NOT NULL,&#xA;          favorite BOOLEAN NOT NULL DEFAULT 0,&#xA;          latitude DOUBLE NOT NULL,&#xA;          longitude DOUBLE NOT NULL)&#xA;        &#34;&#34;&#34;)&#xA;    &#xA;    try db.execute(sql: &#34;&#34;&#34;&#xA;        INSERT INTO place (title, favorite, latitude, longitude)&#xA;        VALUES (?, ?, ?, ?)&#xA;        &#34;&#34;&#34;, arguments: [&#34;Paris&#34;, true, 48.85341, 2.3488])&#xA;    &#xA;    let parisId = db.lastInsertedRowID&#xA;    &#xA;    // Avoid SQL injection with SQL interpolation&#xA;    try db.execute(literal: &#34;&#34;&#34;&#xA;        INSERT INTO place (title, favorite, latitude, longitude)&#xA;        VALUES (\(&#34;King&#39;s Cross&#34;), \(true), \(51.52151), \(-0.12763))&#xA;        &#34;&#34;&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;Executing Updates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Access to raw database rows and values&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Fetch database rows&#xA;    let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM place&#34;)&#xA;    while let row = try rows.next() {&#xA;        let title: String = row[&#34;title&#34;]&#xA;        let isFavorite: Bool = row[&#34;favorite&#34;]&#xA;        let coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[&#34;latitude&#34;],&#xA;            longitude: row[&#34;longitude&#34;])&#xA;    }&#xA;    &#xA;    // Fetch values&#xA;    let placeCount = try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) FROM place&#34;)! // Int&#xA;    let placeTitles = try String.fetchAll(db, sql: &#34;SELECT title FROM place&#34;) // [String]&#xA;}&#xA;&#xA;let placeCount = try dbQueue.read { db in&#xA;    try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) FROM place&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;Fetch Queries&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Database model types aka &#34;records&#34;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;}&#xA;&#xA;// snip: turn Place into a &#34;record&#34; by adopting the protocols that&#xA;// provide fetching and persistence methods.&#xA;&#xA;try dbQueue.write { db in&#xA;    // Create database table&#xA;    try db.create(table: &#34;place&#34;) { t in&#xA;        t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;        t.column(&#34;title&#34;, .text).notNull()&#xA;        t.column(&#34;favorite&#34;, .boolean).notNull().defaults(to: false)&#xA;        t.column(&#34;longitude&#34;, .double).notNull()&#xA;        t.column(&#34;latitude&#34;, .double).notNull()&#xA;    }&#xA;    &#xA;    var berlin = Place(&#xA;        id: nil,&#xA;        title: &#34;Berlin&#34;,&#xA;        isFavorite: false,&#xA;        coordinate: CLLocationCoordinate2D(latitude: 52.52437, longitude: 13.41053))&#xA;    &#xA;    try berlin.insert(db)&#xA;    berlin.id // some value&#xA;    &#xA;    berlin.isFavorite = true&#xA;    try berlin.update(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Query the database with the Swift query interface&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Place?&#xA;    let paris = try Place.fetchOne(db, id: 1)&#xA;    &#xA;    // Place?&#xA;    let berlin = try Place.filter(Column(&#34;title&#34;) == &#34;Berlin&#34;).fetchOne(db)&#xA;    &#xA;    // [Place]&#xA;    let favoritePlaces = try Place&#xA;        .filter(Column(&#34;favorite&#34;) == true)&#xA;        .order(Column(&#34;title&#34;))&#xA;        .fetchAll(db)&#xA;    &#xA;    // Int&#xA;    let favoriteCount = try Place.filter(Column(&#34;favorite&#34;)).fetchCount(db)&#xA;    &#xA;    // SQL is always welcome&#xA;    let places = try Place.fetchAll(db, sql: &#34;SELECT * FROM place&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;Query Interface&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Database changes notifications&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Define the observed value&#xA;let observation = ValueObservation.tracking { db in&#xA;    try Place.fetchAll(db)&#xA;}&#xA;&#xA;// Start observation&#xA;let cancellable = observation.start(&#xA;    in: dbQueue,&#xA;    onError: { error in ... }&#xA;    onChange: { (places: [Place]) in print(&#34;Fresh places: \(places)&#34;) })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Ready-made support for Combine and RxSwift:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Combine&#xA;let cancellable = observation.publisher(in: dbQueue).sink(&#xA;    receiveCompletion: { completion in ... },&#xA;    receiveValue: { (places: [Place]) in print(&#34;Fresh places: \(places)&#34;) })&#xA;&#xA;// RxSwift&#xA;let disposable = observation.rx.observe(in: dbQueue).subscribe(&#xA;    onNext: { (places: [Place]) in print(&#34;Fresh places: \(places)&#34;) },&#xA;    onError: { error in ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;Database Observation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&#34;&gt;Combine Support&lt;/a&gt;, &lt;a href=&#34;http://github.com/RxSwiftCommunity/RxGRDB&#34;&gt;RxGRDB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB runs on top of SQLite&lt;/strong&gt;: you should get familiar with the &lt;a href=&#34;http://www.sqlite.org/faq.html&#34;&gt;SQLite FAQ&lt;/a&gt;. For general and detailed information, jump to the &lt;a href=&#34;http://www.sqlite.org/docs.html&#34;&gt;SQLite Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Demo Applications &amp;amp; Frequently Asked Questions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt;: Three flavors: vanilla UIKit, Combine + SwiftUI, and Async/Await + SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-opening-connections&#34;&gt;Opening Connections&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-associations&#34;&gt;Associations&lt;/a&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reference&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/index.html&#34;&gt;GRDB Reference&lt;/a&gt; (generated by &lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;Jazzy&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Getting Started&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;Database Connections&lt;/a&gt;: Connect to SQLite databases&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;SQLite and SQL&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;SQLite API&lt;/a&gt;: The low-level SQLite API • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;executing updates&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;fetch queries&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Records and the Query Interface&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;: Fetching and persistence methods for your custom structs and class hierarchies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;Query Interface&lt;/a&gt;: A swift way to generate SQL • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-schema&#34;&gt;table creation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;associations between record types&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Application Tools&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Migrations.md&#34;&gt;Migrations&lt;/a&gt;: Transform your database as your application evolves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;Full-Text Search&lt;/a&gt;: Perform efficient and customizable full-text searches.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt;: Consume complex joined queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;Database Observation&lt;/a&gt;: Observe database changes and transactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;Encryption&lt;/a&gt;: Encrypt your database with SQLCipher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#backup&#34;&gt;Backup&lt;/a&gt;: Dump the content of a database to another.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#interrupt-a-database&#34;&gt;Interrupt a Database&lt;/a&gt;: Abort any pending database operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SharingADatabase.md&#34;&gt;Sharing a Database&lt;/a&gt;: Recommendations for App Group Containers and sandboxed macOS apps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Good to Know&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&#34;&gt;Avoiding SQL Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#unicode&#34;&gt;Unicode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#memory-management&#34;&gt;Memory Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-protection&#34;&gt;Data Protection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md&#34;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;General Guides &amp;amp; Good Practices&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;💡&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GoodPracticesForDesigningRecordTypes.md&#34;&gt;Good Practices for Designing Record Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;💡&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GRDB5MigrationGuide.md&#34;&gt;Migrating From GRDB 4 to GRDB 5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;💡&lt;/span&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues?q=is%3Aissue+label%3A%22best+practices%22&#34;&gt;Issues tagged &#34;best practices&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;❓&lt;/span&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue%20label%3Aquestion&#34;&gt;Issues tagged &#34;question&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/WhyAdoptGRDB.md&#34;&gt;Why Adopt GRDB?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&#34;https://medium.com/@gwendal.roue/how-to-build-an-ios-application-with-sqlite-and-grdb-swift-d023a06c29b3&#34;&gt;How to build an iOS application with SQLite and GRDB.swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&#34;https://medium.com/@gwendal.roue/four-different-ways-to-handle-sqlite-concurrency-db3bcc74d00e&#34;&gt;Four different ways to handle SQLite concurrency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&#34;https://hackernoon.com/unexpected-sqlite-with-swift-ddc6343bcbfc&#34;&gt;Unexpected SQLite with Swift&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sample-code&#34;&gt;Sample Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The installation procedures below have GRDB use the version of SQLite that ships with the target operating system.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;Encryption&lt;/a&gt; for the installation procedure of GRDB with SQLCipher.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;Custom SQLite builds&lt;/a&gt; for the installation procedure of GRDB with a customized build of SQLite.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#enabling-fts5-support&#34;&gt;Enabling FTS5 Support&lt;/a&gt; for the installation procedure of GRDB with support for the FTS5 full-text engine.&lt;/p&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Xcode projects. To use GRDB with CocoaPods (version 1.2 or higher), specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;GRDB.swift&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GRDB can be installed as a framework, or a static library.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Package Manager&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; automates the distribution of Swift code. To use GRDB with SPM, add a dependency to &lt;code&gt;https://github.com/groue/GRDB.swift.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;GRDB offers two libraries, &lt;code&gt;GRDB&lt;/code&gt; and &lt;code&gt;GRDB-dynamic&lt;/code&gt;. Pick only one. When in doubt, prefer &lt;code&gt;GRDB&lt;/code&gt;. The &lt;code&gt;GRDB-dynamic&lt;/code&gt; library can reveal useful if you are going to link it with multiple targets within your app and only wish to link to a shared, dynamic framework once. See &lt;a href=&#34;https://forums.swift.org/t/how-to-link-a-swift-package-as-dynamic/32062&#34;&gt;How to link a Swift Package as dynamic&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Linux is not currently supported.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: Due to an Xcode bug, you will get &#34;No such module &#39;CSQLite&#39;&#34; errors when you want to embed the GRDB package in other targets than the main application (watch extensions, for example). UI and Unit testing targets are OK, though. See &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/642#issuecomment-575994093&#34;&gt;#642&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Carthage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is &lt;strong&gt;unsupported&lt;/strong&gt;. For some context about this decision, see &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/433&#34;&gt;#433&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manually&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/releases&#34;&gt;Download&lt;/a&gt; a copy of GRDB, or clone its repository and make sure you checkout the latest tagged version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Embed the &lt;code&gt;GRDB.xcodeproj&lt;/code&gt; project in your own project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;GRDBOSX&lt;/code&gt;, &lt;code&gt;GRDBiOS&lt;/code&gt;, &lt;code&gt;GRDBtvOS&lt;/code&gt;, or &lt;code&gt;GRDBWatchOS&lt;/code&gt; target in the &lt;strong&gt;Target Dependencies&lt;/strong&gt; section of the &lt;strong&gt;Build Phases&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;GRDB.framework&lt;/code&gt; from the targeted platform to the &lt;strong&gt;Embedded Binaries&lt;/strong&gt; section of the &lt;strong&gt;General&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for examples of such integration.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Database Connections&lt;/h1&gt; &#xA;&lt;p&gt;GRDB provides two classes for accessing SQLite databases: &lt;code&gt;DatabaseQueue&lt;/code&gt; and &lt;code&gt;DatabasePool&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;// Pick one:&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;let dbPool = try DatabasePool(path: &#34;/path/to/database.sqlite&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The differences are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Database pools allow concurrent database accesses (this can improve the performance of multithreaded applications).&lt;/li&gt; &#xA; &lt;li&gt;Database pools open your SQLite database in the &lt;a href=&#34;https://www.sqlite.org/wal.html&#34;&gt;WAL mode&lt;/a&gt; (unless read-only).&lt;/li&gt; &#xA; &lt;li&gt;Database queues support &lt;a href=&#34;https://www.sqlite.org/inmemorydb.html&#34;&gt;in-memory databases&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are not sure, choose DatabaseQueue.&lt;/strong&gt; You will always be able to switch to DatabasePool later.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-queues&#34;&gt;Database Queues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;Database Pools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Database Queues&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Open a database queue&lt;/strong&gt; with the path to a database file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;let inMemoryDBQueue = DatabaseQueue()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite creates the database file if it does not already exist. The connection is closed when the database queue gets deinitialized.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database queue can be used from any thread.&lt;/strong&gt; The &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; methods are synchronous, and block the current thread until your database statements are executed in a protected dispatch queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Modify the database:&#xA;try dbQueue.write { db in&#xA;    try db.create(table: &#34;place&#34;) { ... }&#xA;    try Place(...).insert(db)&#xA;}&#xA;&#xA;// Read values:&#xA;try dbQueue.read { db in&#xA;    let places = try Place.fetchAll(db)&#xA;    let placeCount = try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Database access methods can return values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let placeCount = try dbQueue.read { db in&#xA;    try Place.fetchCount(db)&#xA;}&#xA;&#xA;let newPlaceCount = try dbQueue.write { db -&amp;gt; Int in&#xA;    try Place(...).insert(db)&#xA;    return try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database queue serializes accesses to the database&lt;/strong&gt;, which means that there is never more than one thread that uses the database.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When you don&#39;t need to modify the database, prefer the &lt;code&gt;read&lt;/code&gt; method. It prevents any modification to the database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;write&lt;/code&gt; method wraps your database statements in a transaction that commits if and only if no error occurs. On the first unhandled error, all changes are reverted, the whole transaction is rollbacked, and the error is rethrown.&lt;/p&gt; &lt;p&gt;When precise transaction handling is required, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;Transactions and Savepoints&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database queue needs your application to follow rules in order to deliver its safety guarantees.&lt;/strong&gt; Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md&#34;&gt;Concurrency&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;Database Configuration&lt;/a&gt; for DatabaseQueue options.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Database Pools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database pool allows concurrent database accesses.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;let dbPool = try DatabasePool(path: &#34;/path/to/database.sqlite&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite creates the database file if it does not already exist. The connection is closed when the database pool gets deinitialized.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: unless read-only, a database pool opens your database in the SQLite &#34;WAL mode&#34;. The WAL mode does not fit all situations. Please have a look at &lt;a href=&#34;https://www.sqlite.org/wal.html&#34;&gt;https://www.sqlite.org/wal.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database pool can be used from any thread.&lt;/strong&gt; The &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; methods are synchronous, and block the current thread until your database statements are executed in a protected dispatch queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Modify the database:&#xA;try dbPool.write { db in&#xA;    try db.create(table: &#34;place&#34;) { ... }&#xA;    try Place(...).insert(db)&#xA;}&#xA;&#xA;// Read values:&#xA;try dbPool.read { db in&#xA;    let places = try Place.fetchAll(db)&#xA;    let placeCount = try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Database access methods can return values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let placeCount = try dbPool.read { db in&#xA;    try Place.fetchCount(db)&#xA;}&#xA;&#xA;let newPlaceCount = try dbPool.write { db -&amp;gt; Int in&#xA;    try Place(...).insert(db)&#xA;    return try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Database pools allow several threads to access the database at the same time:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When you don&#39;t need to modify the database, prefer the &lt;code&gt;read&lt;/code&gt; method, because several threads can perform reads in parallel.&lt;/p&gt; &lt;p&gt;Reads are generally non-blocking, unless the maximum number of concurrent reads has been reached. In this case, a read has to wait for another read to complete. That maximum number can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;configured&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reads are guaranteed an immutable view of the last committed state of the database, regardless of concurrent writes. This kind of isolation is called &lt;a href=&#34;https://sqlite.org/isolation.html&#34;&gt;snapshot isolation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unlike reads, writes are serialized. There is never more than a single thread that is writing into the database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;write&lt;/code&gt; method wraps your database statements in a transaction that commits if and only if no error occurs. On the first unhandled error, all changes are reverted, the whole transaction is rollbacked, and the error is rethrown.&lt;/p&gt; &lt;p&gt;When precise transaction handling is required, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;Transactions and Savepoints&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Database pools can take &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#database-snapshots&#34;&gt;snapshots&lt;/a&gt; of the database.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;A database pool needs your application to follow rules in order to deliver its safety guarantees.&lt;/strong&gt; See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md&#34;&gt;Concurrency&lt;/a&gt; guide for more details about database pools, how they differ from database queues, and advanced use cases.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;Database Configuration&lt;/a&gt; for DatabasePool options.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Database Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.readonly = true&#xA;config.foreignKeysEnabled = true // Default is already true&#xA;config.label = &#34;MyDatabase&#34;      // Useful when your app opens multiple databases&#xA;config.maximumReaderCount = 10   // (DatabasePool only) The default is 5&#xA;&#xA;let dbQueue = try DatabaseQueue( // or DatabasePool&#xA;    path: &#34;/path/to/database.sqlite&#34;,&#xA;    configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In debug builds, you can increase the verbosity of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;error descriptions&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;trace events&lt;/a&gt; if you opt in for public statement arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG&#xA;// Protect sensitive information by enabling verbose debugging in DEBUG builds only&#xA;config.publicStatementArguments = true&#xA;#endif&#xA;&#xA;let dbQueue = try DatabaseQueue(path: ..., configuration: config)&#xA;&#xA;do {&#xA;    try dbQueue.write { db in&#xA;        user.name = ...&#xA;        user.location = ...&#xA;        user.address = ...&#xA;        user.phoneNumber = ...&#xA;        try user.save(db)&#xA;    }&#xA;} catch {&#xA;    // Prints sensitive information in debug builds only&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: It is your responsibility to prevent sensitive information from leaking in unexpected locations, so you should not set the &lt;code&gt;publicStatementArguments&lt;/code&gt; flag in release builds (think about GDPR and other privacy-related rules).&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: The SQLite version that ships with old operating systems (prior to OSX 10.12, tvOS 10.0, and watchOS 3.0) outputs statement arguments in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;trace events&lt;/a&gt;, regardless of the &lt;code&gt;publicStatementArguments&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/Configuration.html&#34;&gt;Configuration&lt;/a&gt; for more details and configuration options.&lt;/p&gt; &#xA;&lt;h1&gt;SQLite API&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;In this section of the documentation, we will talk SQL.&lt;/strong&gt; Jump to the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt; if SQL is not your cup of tea.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;Executing Updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;Fetch Queries&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;Fetching Methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;Row Queries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;Value Queries&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-and-memory-savings&#34;&gt;Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;Date and DateComponents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;NSNumber, NSDecimalNumber, and Decimal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#swift-enums&#34;&gt;Swift enums&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;Custom Value Types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;Transactions and Savepoints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advanced topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;Prepared Statements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions-and-aggregates&#34;&gt;Custom SQL Functions and Aggregates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-schema-introspection&#34;&gt;Database Schema Introspection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;Row Adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#raw-sqlite-pointers&#34;&gt;Raw SQLite Pointers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Executing Updates&lt;/h2&gt; &#xA;&lt;p&gt;Once granted with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;, the &lt;code&gt;execute&lt;/code&gt; method executes the SQL statements that do not return any database row, such as &lt;code&gt;CREATE TABLE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;ALTER&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;&#34;&#34;&#xA;        CREATE TABLE player (&#xA;            id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;            name TEXT NOT NULL,&#xA;            score INT)&#xA;        &#34;&#34;&#34;)&#xA;    &#xA;    try db.execute(&#xA;        sql: &#34;INSERT INTO player (name, score) VALUES (?, ?)&#34;,&#xA;        arguments: [&#34;Barbara&#34;, 1000])&#xA;    &#xA;    try db.execute(&#xA;        sql: &#34;UPDATE player SET score = :score WHERE id = :id&#34;,&#xA;        arguments: [&#34;score&#34;: 1000, &#34;id&#34;: 1])&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:score&lt;/code&gt; in the SQL query are the &lt;strong&gt;statements arguments&lt;/strong&gt;. You pass arguments with arrays or dictionaries, as in the example above. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;StatementArguments&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt; &#xA;&lt;p&gt;You can also embed query arguments right into your SQL queries, with the &lt;code&gt;literal&lt;/code&gt; argument label, as in the example below. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(literal: &#34;&#34;&#34;&#xA;        INSERT INTO player (name, score) VALUES (\(&#34;O&#39;Brien&#34;), \(550))&#xA;        &#34;&#34;&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Never ever embed values directly in your raw SQL strings&lt;/strong&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&#34;&gt;Avoiding SQL Injection&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WRONG: don&#39;t embed values in raw SQL strings&#xA;let id = 123&#xA;let name = textField.text&#xA;try db.execute(&#xA;    sql: &#34;UPDATE player SET name = &#39;\(name)&#39; WHERE id = \(id)&#34;)&#xA;&#xA;// CORRECT: use arguments dictionary&#xA;try db.execute(&#xA;    sql: &#34;UPDATE player SET name = :name WHERE id = :id&#34;,&#xA;    arguments: [&#34;name&#34;: name, &#34;id&#34;: id])&#xA;&#xA;// CORRECT: use arguments array&#xA;try db.execute(&#xA;    sql: &#34;UPDATE player SET name = ? WHERE id = ?&#34;,&#xA;    arguments: [name, id])&#xA;&#xA;// CORRECT: use SQL Interpolation&#xA;try db.execute(&#xA;    literal: &#34;UPDATE player SET name = \(name) WHERE id = \(id)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Join multiple statements with a semicolon&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.execute(sql: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    &#34;&#34;&#34;, arguments: [&#34;Arthur&#34;, 750, &#34;Barbara&#34;, 1000])&#xA;&#xA;try db.execute(literal: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;Arthur&#34;), \(750));&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;Barbara&#34;), \(1000));&#xA;    &#34;&#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to make sure that a single statement is executed, use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;Prepared Statements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;After an INSERT statement&lt;/strong&gt;, you can get the row ID of the inserted row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.execute(&#xA;    sql: &#34;INSERT INTO player (name, score) VALUES (?, ?)&#34;,&#xA;    arguments: [&#34;Arthur&#34;, 1000])&#xA;let playerId = db.lastInsertedRowID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t miss &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;, that provide classic &lt;strong&gt;persistence methods&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var player = Player(name: &#34;Arthur&#34;, score: 1000)&#xA;try player.insert(db)&#xA;let playerId = player.id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fetch Queries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;Database connections&lt;/a&gt; let you fetch database rows, plain values, and custom models aka &#34;records&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rows&lt;/strong&gt; are the raw results of SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    if let row = try Row.fetchOne(db, sql: &#34;SELECT * FROM wine WHERE id = ?&#34;, arguments: [1]) {&#xA;        let name: String = row[&#34;name&#34;]&#xA;        let color: Color = row[&#34;color&#34;]&#xA;        print(name, color)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt; are the Bool, Int, String, Date, Swift enums, etc. stored in row columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    let urls = try URL.fetchCursor(db, sql: &#34;SELECT url FROM wine&#34;)&#xA;    while let url = try urls.next() {&#xA;        print(url)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Records&lt;/strong&gt; are your application objects that can initialize themselves from rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let wines = try dbQueue.read { db in&#xA;    try Wine.fetchAll(db, sql: &#34;SELECT * FROM wine&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;Fetching Methods&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;Cursors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;Row Queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;Value Queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fetching Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Throughout GRDB&lt;/strong&gt;, you can always fetch &lt;em&gt;cursors&lt;/em&gt;, &lt;em&gt;arrays&lt;/em&gt;, &lt;em&gt;sets&lt;/em&gt;, or &lt;em&gt;single values&lt;/em&gt; of any fetchable type (database &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;row&lt;/a&gt;, simple &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;value&lt;/a&gt;, or custom &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;record&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Row.fetchCursor(...) // A Cursor of Row&#xA;try Row.fetchAll(...)    // [Row]&#xA;try Row.fetchSet(...)    // Set&amp;lt;Row&amp;gt;&#xA;try Row.fetchOne(...)    // Row?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchCursor&lt;/code&gt; returns a &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;cursor&lt;/a&gt;&lt;/strong&gt; over fetched values:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT ...&#34;) // A Cursor of Row&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchAll&lt;/code&gt; returns an &lt;strong&gt;array&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let players = try Player.fetchAll(db, sql: &#34;SELECT ...&#34;) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchSet&lt;/code&gt; returns a &lt;strong&gt;set&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let names = try String.fetchSet(db, sql: &#34;SELECT ...&#34;) // Set&amp;lt;String&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchOne&lt;/code&gt; returns a &lt;strong&gt;single optional value&lt;/strong&gt;, and consumes a single database row (if any).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let count = try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) ...&#34;) // Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;All those fetching methods require an SQL string that contains a single SQL statement.&lt;/strong&gt; When you want to fetch from multiple statements joined with a semicolon, iterate the multiple &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;prepared statements&lt;/a&gt; found in the SQL string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statements = try db.allStatements(sql: &#34;&#34;&#34;&#xA;    SELECT ...; &#xA;    SELECT ...; &#xA;    SELECT ...;&#xA;    &#34;&#34;&#34;)&#xA;while let statement = try statements.next() {&#xA;    let players = try Player.fetchAll(statement)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can join the results of all statements yielded by the &lt;code&gt;allStatements&lt;/code&gt; method, like the SQLite &lt;a href=&#34;https://www.sqlite.org/c3ref/exec.html&#34;&gt;&lt;code&gt;sqlite3_exec&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A single cursor of all rows from all statements&#xA;let rows = try db&#xA;    .allStatements(sql: &#34;...&#34;)&#xA;    .flatMap { statement in try Row.fetchCursor(statement) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;prepared statements&lt;/a&gt; for more information about &lt;code&gt;allStatements()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cursors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Whenever you consume several rows from the database, you can fetch an Array, a Set, or a Cursor&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;fetchAll()&lt;/code&gt; and &lt;code&gt;fetchSet()&lt;/code&gt; methods return regular Swift array and sets, that you iterate like all other arrays and sets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // [Player]&#xA;    let players = try Player.fetchAll(db, sql: &#34;SELECT ...&#34;)&#xA;    for player in players {&#xA;        // use player&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike arrays and sets, cursors returned by &lt;code&gt;fetchCursor()&lt;/code&gt; load their results step after step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Cursor of Player&#xA;    let players = try Player.fetchCursor(db, sql: &#34;SELECT ...&#34;)&#xA;    while let player = try players.next() {&#xA;        // use player&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can not be used on any thread&lt;/strong&gt;: you must consume a cursor on the dispatch queue it was created in. Particularly, don&#39;t extract a cursor out of a database access method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Wrong&#xA;let cursor = try dbQueue.read { db in&#xA;    try Player.fetchCursor(db, ...)&#xA;}&#xA;while let player = try cursor.next() { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Conversely, arrays and sets may be consumed on any thread:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// OK&#xA;let array = try dbQueue.read { db in&#xA;    try Player.fetchAll(db, ...)&#xA;}&#xA;for player in array { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can be iterated only one time.&lt;/strong&gt; Arrays and sets can be iterated many times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors iterate database results in a lazy fashion&lt;/strong&gt;, and don&#39;t consume much memory. Arrays and sets contain copies of database values, and may take a lot of memory when there are many fetched results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors are granted with direct access to SQLite,&lt;/strong&gt; unlike arrays and sets that have to take the time to copy database values. If you look after extra performance, you may prefer cursors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can feed Swift collections.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You will most of the time use &lt;code&gt;fetchAll&lt;/code&gt; or &lt;code&gt;fetchSet&lt;/code&gt; when you want an array or a set. For more specific needs, you may prefer one of the initializers below. All of them accept an extra optional &lt;code&gt;minimumCapacity&lt;/code&gt; argument which helps optimizing your app when you have an idea of the number of elements in a cursor (the built-in &lt;code&gt;fetchAll&lt;/code&gt; and &lt;code&gt;fetchSet&lt;/code&gt; do not perform such an optimization).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt; and all types conforming to &lt;code&gt;RangeReplaceableCollection&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [String]&#xA;let cursor = try String.fetchCursor(db, ...)&#xA;let array = try Array(cursor)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Sets&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Set&amp;lt;Int&amp;gt;&#xA;let cursor = try Int.fetchCursor(db, ...)&#xA;let set = try Set(cursor)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Dictionaries&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [Int64: [Player]]&#xA;let cursor = try Player.fetchCursor(db)&#xA;let dictionary = try Dictionary(grouping: cursor, by: { $0.teamID })&#xA;&#xA;// [Int64: Player]&#xA;let cursor = try Player.fetchCursor(db).map { ($0.id, $0) }&#xA;let dictionary = try Dictionary(uniqueKeysWithValues: cursor)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors adopt the &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Protocols/Cursor.html&#34;&gt;Cursor&lt;/a&gt; protocol, which looks a lot like standard &lt;a href=&#34;https://developer.apple.com/reference/swift/lazysequenceprotocol&#34;&gt;lazy sequences&lt;/a&gt; of Swift.&lt;/strong&gt; As such, cursors come with many convenience methods: &lt;code&gt;compactMap&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;dropFirst&lt;/code&gt;, &lt;code&gt;dropLast&lt;/code&gt;, &lt;code&gt;drop(while:)&lt;/code&gt;, &lt;code&gt;enumerated&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;joined&lt;/code&gt;, &lt;code&gt;joined(separator:)&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;max(by:)&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;min(by:)&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;prefix(while:)&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;reduce(into:)&lt;/code&gt;, &lt;code&gt;suffix&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Prints all Github links&#xA;try URL&#xA;    .fetchCursor(db, sql: &#34;SELECT url FROM link&#34;)&#xA;    .filter { url in url.host == &#34;github.com&#34; }&#xA;    .forEach { url in print(url) }&#xA;&#xA;// An efficient cursor of coordinates:&#xA;let locations = try Row.&#xA;    .fetchCursor(db, sql: &#34;SELECT latitude, longitude FROM place&#34;)&#xA;    .map { row in&#xA;        CLLocationCoordinate2D(latitude: row[0], longitude: row[1])&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors are not Swift sequences.&lt;/strong&gt; That&#39;s because Swift sequences can&#39;t handle iteration errors, when reading SQLite results may fail at any time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors require a little care&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Don&#39;t modify the results during a cursor iteration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Undefined behavior&#xA;while let player = try players.next() {&#xA;    try db.execute(sql: &#34;DELETE ...&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Don&#39;t turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array or a set. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. To get a set of rows, use &lt;code&gt;Row.fetchSet(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t see, or don&#39;t care about the difference, use arrays. If you care about memory and performance, use cursors when appropriate.&lt;/p&gt; &#xA;&lt;h3&gt;Row Queries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-rows&#34;&gt;Fetching Rows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&#34;&gt;Column Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rows-as-dictionaries&#34;&gt;Rows as Dictionaries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Fetching Rows&lt;/h4&gt; &#xA;&lt;p&gt;Fetch &lt;strong&gt;cursors&lt;/strong&gt; of rows, &lt;strong&gt;arrays&lt;/strong&gt;, &lt;strong&gt;sets&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; rows (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    try Row.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments: ...) // A Cursor of Row&#xA;    try Row.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // [Row]&#xA;    try Row.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Set&amp;lt;Row&amp;gt;&#xA;    try Row.fetchOne(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Row?&#xA;    &#xA;    let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM wine&#34;)&#xA;    while let row = try rows.next() {&#xA;        let name: String = row[&#34;name&#34;]&#xA;        let color: Color = row[&#34;color&#34;]&#xA;        print(name, color)&#xA;    }&#xA;}&#xA;&#xA;let rows = try dbQueue.read { db in&#xA;    try Row.fetchAll(db, sql: &#34;SELECT * FROM player&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments are optional arrays or dictionaries that fill the positional &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:name&lt;/code&gt; in the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchAll(db,&#xA;    sql: &#34;SELECT * FROM player WHERE name = ?&#34;,&#xA;    arguments: [&#34;Arthur&#34;])&#xA;&#xA;let rows = try Row.fetchAll(db,&#xA;    sql: &#34;SELECT * FROM player WHERE name = :name&#34;,&#xA;    arguments: [&#34;name&#34;: &#34;Arthur&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;StatementArguments&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt; &#xA;&lt;p&gt;Unlike row arrays that contain copies of the database rows, row cursors are close to the SQLite metal, and require a little care:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Don&#39;t turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array or a set&lt;/strong&gt;. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. To get a set of rows, use &lt;code&gt;Row.fetchSet(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Column Values&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read column values&lt;/strong&gt; by index or column name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String = row[0]      // 0 is the leftmost column&#xA;let name: String = row[&#34;name&#34;] // Leftmost matching column - lookup is case-insensitive&#xA;let name: String = row[Column(&#34;name&#34;)] // Using query interface&#39;s Column&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to ask for an optional when the value may be NULL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String? = row[&#34;name&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;row[]&lt;/code&gt; subscript returns the type you ask for. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported value types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bookCount: Int     = row[&#34;bookCount&#34;]&#xA;let bookCount64: Int64 = row[&#34;bookCount&#34;]&#xA;let hasBooks: Bool     = row[&#34;bookCount&#34;] // false when 0&#xA;&#xA;let string: String     = row[&#34;date&#34;]      // &#34;2015-09-11 18:14:15.123&#34;&#xA;let date: Date         = row[&#34;date&#34;]      // Date&#xA;self.date = row[&#34;date&#34;] // Depends on the type of the property.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;as&lt;/code&gt; type casting operator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;row[...] as Int&#xA;row[...] as Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: avoid the &lt;code&gt;as!&lt;/code&gt; and &lt;code&gt;as?&lt;/code&gt; operators:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let int = row[...] as? Int { ... } // BAD - doesn&#39;t work&#xA;if let int = row[...] as Int? { ... } // GOOD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Generally speaking, you can extract the type you need, provided it can be converted from the underlying SQLite value:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Successful conversions include:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All numeric SQLite values to all numeric Swift types, and Bool (zero is the only false boolean).&lt;/li&gt; &#xA;   &lt;li&gt;Text SQLite values to Swift String.&lt;/li&gt; &#xA;   &lt;li&gt;Blob SQLite values to Foundation Data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported types (Bool, Int, String, Date, Swift enums, etc.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NULL returns nil.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT NULL&#34;)!&#xA;row[0] as Int? // nil&#xA;row[0] as Int  // fatal error: could not convert NULL to Int.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is one exception, though: the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;row[0] as DatabaseValue // DatabaseValue.null&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Missing columns return nil.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;foo&#39; AS foo&#34;)!&#xA;row[&#34;missing&#34;] as String? // nil&#xA;row[&#34;missing&#34;] as String  // fatal error: no such column: missing&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can explicitly check for a column presence with the &lt;code&gt;hasColumn&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Invalid conversions throw a fatal error.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Mom’s birthday&#39;&#34;)!&#xA;row[0] as String // &#34;Mom’s birthday&#34;&#xA;row[0] as Date?  // fatal error: could not convert &#34;Mom’s birthday&#34; to Date.&#xA;row[0] as Date   // fatal error: could not convert &#34;Mom’s birthday&#34; to Date.&#xA;&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 256&#34;)!&#xA;row[0] as Int    // 256&#xA;row[0] as UInt8? // fatal error: could not convert 256 to UInt8.&#xA;row[0] as UInt8  // fatal error: could not convert 256 to UInt8.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Those conversion fatal errors can be avoided with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Mom’s birthday&#39;&#34;)!&#xA;let dbValue: DatabaseValue = row[0]&#xA;if dbValue.isNull {&#xA;    // Handle NULL&#xA;} else if let date = Date.fromDatabaseValue(dbValue) {&#xA;    // Handle valid date&#xA;} else {&#xA;    // Handle invalid date&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This extra verbosity is the consequence of having to deal with an untrusted database: you may consider fixing the content of your database instead. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&#34;&gt;Fatal Errors&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SQLite has a weak type system, and provides &lt;a href=&#34;https://www.sqlite.org/c3ref/column_blob.html&#34;&gt;convenience conversions&lt;/a&gt; that can turn String to Int, Double to Blob, etc.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;GRDB will sometimes let those conversions go through:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT &#39;20 small cigars&#39;&#34;)&#xA;while let row = try rows.next() {&#xA;    row[0] as Int   // 20&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don&#39;t freak out: those conversions did not prevent SQLite from becoming the immensely successful database engine you want to use. And GRDB adds safety checks described just above. You can also prevent those convenience conversions altogether by using the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;DatabaseValue&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;DatabaseValue is an intermediate type between SQLite and your values, which gives information about the raw value stored in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You get DatabaseValue just like other value types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dbValue: DatabaseValue = row[0]&#xA;let dbValue: DatabaseValue? = row[&#34;name&#34;] // nil if and only if column does not exist&#xA;&#xA;// Check for NULL:&#xA;dbValue.isNull // Bool&#xA;&#xA;// The stored value:&#xA;dbValue.storage.value // Int64, Double, String, Data, or nil&#xA;&#xA;// All the five storage classes supported by SQLite:&#xA;switch dbValue.storage {&#xA;case .null:                 print(&#34;NULL&#34;)&#xA;case .int64(let int64):     print(&#34;Int64: \(int64)&#34;)&#xA;case .double(let double):   print(&#34;Double: \(double)&#34;)&#xA;case .string(let string):   print(&#34;String: \(string)&#34;)&#xA;case .blob(let data):       print(&#34;Data: \(data)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can extract regular &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) from DatabaseValue with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible.fromDatabaseValue()&lt;/a&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dbValue: DatabaseValue = row[&#34;bookCount&#34;]&#xA;let bookCount   = Int.fromDatabaseValue(dbValue)   // Int?&#xA;let bookCount64 = Int64.fromDatabaseValue(dbValue) // Int64?&#xA;let hasBooks    = Bool.fromDatabaseValue(dbValue)  // Bool?, false when 0&#xA;&#xA;let dbValue: DatabaseValue = row[&#34;date&#34;]&#xA;let string = String.fromDatabaseValue(dbValue)     // &#34;2015-09-11 18:14:15.123&#34;&#xA;let date   = Date.fromDatabaseValue(dbValue)       // Date?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fromDatabaseValue&lt;/code&gt; returns nil for invalid conversions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Mom’s birthday&#39;&#34;)!&#xA;let dbValue: DatabaseValue = row[0]&#xA;let string = String.fromDatabaseValue(dbValue) // &#34;Mom’s birthday&#34;&#xA;let int    = Int.fromDatabaseValue(dbValue)    // nil&#xA;let date   = Date.fromDatabaseValue(dbValue)   // nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rows as Dictionaries&lt;/h4&gt; &#xA;&lt;p&gt;Row adopts the standard &lt;a href=&#34;https://developer.apple.com/documentation/swift/randomaccesscollection&#34;&gt;RandomAccessCollection&lt;/a&gt; protocol, and can be seen as a dictionary of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// All the (columnName, dbValue) tuples, from left to right:&#xA;for (columnName, dbValue) in row {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can build rows from dictionaries&lt;/strong&gt; (standard Swift dictionaries and NSDictionary). See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row: Row = [&#34;name&#34;: &#34;foo&#34;, &#34;date&#34;: nil]&#xA;let row = Row([&#34;name&#34;: &#34;foo&#34;, &#34;date&#34;: nil])&#xA;let row = Row(/* [AnyHashable: Any] */) // nil if invalid dictionary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet rows are not real dictionaries: they may contain duplicate columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT 1 AS foo, 2 AS foo&#34;)!&#xA;row.columnNames    // [&#34;foo&#34;, &#34;foo&#34;]&#xA;row.databaseValues // [1, 2]&#xA;row[&#34;foo&#34;]         // 1 (leftmost matching column)&#xA;for (columnName, dbValue) in row { ... } // (&#34;foo&#34;, 1), (&#34;foo&#34;, 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you build a dictionary from a row&lt;/strong&gt;, you have to disambiguate identical columns, and choose how to present database values. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: DatabaseValue]&lt;/code&gt; dictionary that keeps leftmost value in case of duplicated column name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = Dictionary(row, uniquingKeysWith: { (left, _) in left })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: AnyObject]&lt;/code&gt; dictionary which keeps rightmost value in case of duplicated column name. This dictionary is identical to FMResultSet&#39;s resultDictionary from FMDB. It contains NSNull values for null columns, and can be shared with Objective-C:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = Dictionary(&#xA;    row.map { (column, dbValue) in&#xA;        (column, dbValue.storage.value as AnyObject)&#xA;    },&#xA;    uniquingKeysWith: { (_, right) in right })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: Any]&lt;/code&gt; dictionary that can feed, for example, JSONSerialization:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = Dictionary(&#xA;    row.map { (column, dbValue) in&#xA;        (column, dbValue.storage.value)&#xA;    },&#xA;    uniquingKeysWith: { (left, _) in left })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the documentation of &lt;a href=&#34;https://developer.apple.com/documentation/swift/dictionary/2892961-init&#34;&gt;&lt;code&gt;Dictionary.init(_:uniquingKeysWith:)&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Value Queries&lt;/h3&gt; &#xA;&lt;p&gt;Instead of rows, you can directly fetch &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;&lt;/strong&gt;. Like rows, fetch them as &lt;strong&gt;cursors&lt;/strong&gt;, &lt;strong&gt;arrays&lt;/strong&gt;, &lt;strong&gt;sets&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; values (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt;). Values are extracted from the leftmost column of the SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    try Int.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments: ...) // A Cursor of Int&#xA;    try Int.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // [Int]&#xA;    try Int.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Set&amp;lt;Int&amp;gt;&#xA;    try Int.fetchOne(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Int?&#xA;    &#xA;    // When database may contain NULL:&#xA;    try Optional&amp;lt;Int&amp;gt;.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments: ...) // A Cursor of Int?&#xA;    try Optional&amp;lt;Int&amp;gt;.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // [Int?]&#xA;    try Optional&amp;lt;Int&amp;gt;.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Set&amp;lt;Int?&amp;gt;&#xA;}&#xA;&#xA;let playerCount = try dbQueue.read { db in&#xA;    try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) FROM player&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fetchOne&lt;/code&gt; returns an optional value which is nil in two cases: either the SELECT statement yielded no row, or one row with a NULL value.&lt;/p&gt; &#xA;&lt;p&gt;There are many supported value types (Bool, Int, String, Date, Swift enums, etc.). See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let count = try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) FROM player&#34;)! // Int&#xA;let urls = try URL.fetchAll(db, sql: &#34;SELECT url FROM link&#34;)          // [URL]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Values&lt;/h2&gt; &#xA;&lt;p&gt;GRDB ships with built-in support for the following value types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Swift Standard Library&lt;/strong&gt;: Bool, Double, Float, all signed and unsigned integer types, String, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#swift-enums&#34;&gt;Swift enums&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Foundation&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-and-memory-savings&#34;&gt;Data&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;Date&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;DateComponents&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;Decimal&lt;/a&gt;, NSNull, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;NSNumber&lt;/a&gt;, NSString, URL, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#uuid&#34;&gt;UUID&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CoreGraphics&lt;/strong&gt;: CGFloat.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;&lt;/strong&gt;, the type which gives information about the raw value stored in the database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full-Text Patterns&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts3pattern&#34;&gt;FTS3Pattern&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts5pattern&#34;&gt;FTS5Pattern&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generally speaking, all types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible&lt;/a&gt; protocol.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Values can be used as &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;statement arguments&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let url: URL = ...&#xA;let verified: Bool = ...&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO link (url, verified) VALUES (?, ?)&#34;,&#xA;    arguments: [url, verified])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Values can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&#34;&gt;extracted from rows&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM link&#34;)&#xA;while let row = try rows.next() {&#xA;    let url: URL = row[&#34;url&#34;]&#xA;    let verified: Bool = row[&#34;verified&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Values can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;directly fetched&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let urls = try URL.fetchAll(db, sql: &#34;SELECT url FROM link&#34;)  // [URL]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use values in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Link: FetchableRecord {&#xA;    var url: URL&#xA;    var isVerified: Bool&#xA;    &#xA;    init(row: Row) {&#xA;        url = row[&#34;url&#34;]&#xA;        isVerified = row[&#34;verified&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use values in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let url: URL = ...&#xA;let link = try Link.filter(Column(&#34;url&#34;) == url).fetchOne(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data (and Memory Savings)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data&lt;/strong&gt; suits the BLOB SQLite columns. It can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT data, ...&#34;)&#xA;while let row = try rows.next() {&#xA;    let data: Data = row[&#34;data&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At each step of the request iteration, the &lt;code&gt;row[]&lt;/code&gt; subscript creates &lt;em&gt;two copies&lt;/em&gt; of the database bytes: one fetched by SQLite, and another, stored in the Swift Data value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You have the opportunity to save memory&lt;/strong&gt; by not copying the data fetched by SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;while let row = try rows.next() {&#xA;    let data = row.dataNoCopy(named: &#34;data&#34;) // Data?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The non-copied data does not live longer than the iteration step: make sure that you do not use it past this point.&lt;/p&gt; &#xA;&lt;h3&gt;Date and DateComponents&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date&#34;&gt;&lt;strong&gt;Date&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#datecomponents&#34;&gt;&lt;strong&gt;DateComponents&lt;/strong&gt;&lt;/a&gt; can be stored and fetched from the database.&lt;/p&gt; &#xA;&lt;p&gt;Here is how GRDB supports the various &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;date formats&lt;/a&gt; supported by SQLite:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;SQLite format&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Date&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;DateComponents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD HH:MM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¹ ²&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ² / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD HH:MM:SS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¹ ²&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ² / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD HH:MM:SS.SSS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¹ ² / Write ¹&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ² / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¹ ²&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ²&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¹ ²&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ²&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS.SSS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¹ ²&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ²&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HH:MM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ² / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HH:MM:SS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ² / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HH:MM:SS.SSS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ² / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Timestamps since unix epoch&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ³&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;now&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;¹ Missing components are assumed to be zero. Dates are stored and read in the UTC time zone, unless the format is followed by a timezone indicator ⁽²⁾.&lt;/p&gt; &#xA;&lt;p&gt;² This format may be optionally followed by a timezone indicator of the form &lt;code&gt;[+-]HH:MM&lt;/code&gt; or just &lt;code&gt;Z&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;³ GRDB 2+ interprets numerical values as timestamps that fuel &lt;code&gt;Date(timeIntervalSince1970:)&lt;/code&gt;. Previous GRDB versions used to interpret numbers as &lt;a href=&#34;https://en.wikipedia.org/wiki/Julian_day&#34;&gt;julian days&lt;/a&gt;. Julian days are still supported, with the &lt;code&gt;Date(julianDay:)&lt;/code&gt; initializer.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years in the SQLite date formats is 0000-9999. You will need to pick another date format when your application needs to process years outside of this range. See the following chapters.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Date&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Date&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.execute(&#xA;    sql: &#34;INSERT INTO player (creationDate, ...) VALUES (?, ...)&#34;,&#xA;    arguments: [Date(), ...])&#xA;&#xA;let row = try Row.fetchOne(db, ...)!&#xA;let creationDate: Date = row[&#34;creationDate&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dates are stored using the format &#34;YYYY-MM-DD HH:MM:SS.SSS&#34; in the UTC time zone. It is precise to the millisecond.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: this format was chosen because it is the only format that is:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Comparable (&lt;code&gt;ORDER BY date&lt;/code&gt; works)&lt;/li&gt; &#xA;  &lt;li&gt;Comparable with the SQLite keyword CURRENT_TIMESTAMP (&lt;code&gt;WHERE date &amp;gt; CURRENT_TIMESTAMP&lt;/code&gt; works)&lt;/li&gt; &#xA;  &lt;li&gt;Able to feed &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Precise enough&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years in the SQLite date format is 0000-9999. You will experience problems with years outside of this range, such as decoding errors, or invalid date computations with &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some applications may prefer another date format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some may prefer ISO-8601, with a &lt;code&gt;T&lt;/code&gt; separator.&lt;/li&gt; &#xA; &lt;li&gt;Some may prefer ISO-8601, with a time zone.&lt;/li&gt; &#xA; &lt;li&gt;Some may need to store years beyond the 0000-9999 range.&lt;/li&gt; &#xA; &lt;li&gt;Some may need sub-millisecond precision.&lt;/li&gt; &#xA; &lt;li&gt;Some may need exact &lt;code&gt;Date&lt;/code&gt; roundtrip.&lt;/li&gt; &#xA; &lt;li&gt;Etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;You should think twice before choosing a different date format:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ISO-8601 is about &lt;em&gt;exchange and communication&lt;/em&gt;, when SQLite is about &lt;em&gt;storage and data manipulation&lt;/em&gt;. Sharing the same representation in your database and in JSON files only provides a superficial convenience, and should be the least of your priorities. Don&#39;t store dates as ISO-8601 without understanding what you lose. For example, ISO-8601 time zones forbid database-level date comparison.&lt;/li&gt; &#xA; &lt;li&gt;Sub-millisecond precision and exact &lt;code&gt;Date&lt;/code&gt; roundtrip are not as obvious needs as it seems at first sight. Dates generally don&#39;t precisely roundtrip as soon as they leave your application anyway, because the other systems your app communicates with use their own date representation (the Android version of your app, the server your application is talking to, etc.) On top of that, &lt;code&gt;Date&lt;/code&gt; comparison is at least as hard and nasty as &lt;a href=&#34;https://www.google.com/search?q=floating+point+comparison+is+hard&#34;&gt;floating point comparison&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The customization of date format is explicit. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let date = Date()&#xA;let timeInterval = date.timeIntervalSinceReferenceDate&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO player (creationDate, ...) VALUES (?, ...)&#34;,&#xA;    arguments: [timeInterval, ...])&#xA;&#xA;if let row = try Row.fetchOne(db, ...) {&#xA;    let timeInterval: TimeInterval = row[&#34;creationDate&#34;]&#xA;    let creationDate = Date(timeIntervalSinceReferenceDate: timeInterval)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more date customization options, and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible&lt;/a&gt; if you want to define a Date-wrapping type with customized database representation.&lt;/p&gt; &#xA;&lt;h4&gt;DateComponents&lt;/h4&gt; &#xA;&lt;p&gt;DateComponents is indirectly supported, through the &lt;strong&gt;DatabaseDateComponents&lt;/strong&gt; helper type.&lt;/p&gt; &#xA;&lt;p&gt;DatabaseDateComponents reads date components from all &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;date formats supported by SQLite&lt;/a&gt;, and stores them in the format of your choice, from HH:MM to YYYY-MM-DD HH:MM:SS.SSS.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years is 0000-9999. You will experience problems with years outside of this range, such as decoding errors, or invalid date computations with &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date&#34;&gt;Date&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;DatabaseDateComponents can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let components = DateComponents()&#xA;components.year = 1973&#xA;components.month = 9&#xA;components.day = 18&#xA;&#xA;// Store &#34;1973-09-18&#34;&#xA;let dbComponents = DatabaseDateComponents(components, format: .YMD)&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO player (birthDate, ...) VALUES (?, ...)&#34;,&#xA;    arguments: [dbComponents, ...])&#xA;&#xA;// Read &#34;1973-09-18&#34;&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT birthDate ...&#34;)!&#xA;let dbComponents: DatabaseDateComponents = row[&#34;birthDate&#34;]&#xA;dbComponents.format         // .YMD (the actual format found in the database)&#xA;dbComponents.dateComponents // DateComponents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NSNumber, NSDecimalNumber, and Decimal&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NSNumber&lt;/strong&gt; and &lt;strong&gt;Decimal&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is how GRDB supports the various data types supported by SQLite:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Integer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Double&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;String&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSNumber&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSDecimalNumber&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Decimal&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All three types can decode database integers and doubles:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let number = try NSNumber.fetchOne(db, sql: &#34;SELECT 10&#34;)            // NSNumber&#xA;let number = try NSDecimalNumber.fetchOne(db, sql: &#34;SELECT 1.23&#34;)   // NSDecimalNumber&#xA;let number = try Decimal.fetchOne(db, sql: &#34;SELECT -100&#34;)           // Decimal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All three types decode database strings as decimal numbers:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let number = try NSNumber.fetchOne(db, sql: &#34;SELECT &#39;10&#39;&#34;)          // NSDecimalNumber (sic)&#xA;let number = try NSDecimalNumber.fetchOne(db, sql: &#34;SELECT &#39;1.23&#39;&#34;) // NSDecimalNumber&#xA;let number = try Decimal.fetchOne(db, sql: &#34;SELECT &#39;-100&#39;&#34;)         // Decimal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NSNumber&lt;/code&gt; and &lt;code&gt;NSDecimalNumber&lt;/code&gt; send 64-bit signed integers and doubles in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT INTO transfer VALUES (10)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSNumber(value: 10)])&#xA;&#xA;// INSERT INTO transfer VALUES (10.0)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSNumber(value: 10.0)])&#xA;&#xA;// INSERT INTO transfer VALUES (10)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSDecimalNumber(string: &#34;10.0&#34;)])&#xA;&#xA;// INSERT INTO transfer VALUES (10.5)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSDecimalNumber(string: &#34;10.5&#34;)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: since SQLite does not support decimal numbers, sending a non-integer &lt;code&gt;NSDecimalNumber&lt;/code&gt; can result in a loss of precision during the conversion to double.&lt;/p&gt; &#xA;   &lt;p&gt;Instead of sending non-integer &lt;code&gt;NSDecimalNumber&lt;/code&gt; to the database, you may prefer:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Send &lt;code&gt;Decimal&lt;/code&gt; instead (those store decimal strings in the database).&lt;/li&gt; &#xA;    &lt;li&gt;Send integers instead (for example, store amounts of cents instead of amounts of Euros).&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Decimal&lt;/code&gt; sends decimal strings in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT INTO transfer VALUES (&#39;10&#39;)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [Decimal(10)])&#xA;&#xA;// INSERT INTO transfer VALUES (&#39;10.5&#39;)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [Decimal(string: &#34;10.5&#34;)!])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UUID&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;UUID&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GRDB stores uuids as 16-bytes data blobs, and decodes them from both 16-bytes data blobs and strings such as &#34;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Enums&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift enums&lt;/strong&gt; and generally all types that adopt the &lt;a href=&#34;https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_RawRepresentable_Protocol/index.html&#34;&gt;RawRepresentable&lt;/a&gt; protocol can be stored and fetched from the database just like their raw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Color : Int {&#xA;    case red, white, rose&#xA;}&#xA;&#xA;enum Grape : String {&#xA;    case chardonnay, merlot, riesling&#xA;}&#xA;&#xA;// Declare empty DatabaseValueConvertible adoption&#xA;extension Color : DatabaseValueConvertible { }&#xA;extension Grape : DatabaseValueConvertible { }&#xA;&#xA;// Store&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO wine (grape, color) VALUES (?, ?)&#34;,&#xA;    arguments: [Grape.merlot, Color.red])&#xA;&#xA;// Read&#xA;let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM wine&#34;)&#xA;while let row = try rows.next() {&#xA;    let grape: Grape = row[&#34;grape&#34;]&#xA;    let color: Color = row[&#34;color&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When a database value does not match any enum case&lt;/strong&gt;, you get a fatal error. This fatal error can be avoided with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;syrah&#39;&#34;)!&#xA;&#xA;row[0] as String  // &#34;syrah&#34;&#xA;row[0] as Grape?  // fatal error: could not convert &#34;syrah&#34; to Grape.&#xA;row[0] as Grape   // fatal error: could not convert &#34;syrah&#34; to Grape.&#xA;&#xA;let dbValue: DatabaseValue = row[0]&#xA;if dbValue.isNull {&#xA;    // Handle NULL&#xA;} else if let grape = Grape.fromDatabaseValue(dbValue) {&#xA;    // Handle valid grape&#xA;} else {&#xA;    // Handle unknown grape&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Value Types&lt;/h3&gt; &#xA;&lt;p&gt;Conversion to and from the database is based on the &lt;code&gt;DatabaseValueConvertible&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DatabaseValueConvertible {&#xA;    /// Returns a value that can be stored in the database.&#xA;    var databaseValue: DatabaseValue { get }&#xA;    &#xA;    /// Returns a value initialized from dbValue, if possible.&#xA;    static func fromDatabaseValue(_ dbValue: DatabaseValue) -&amp;gt; Self?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All types that adopt this protocol can be used like all other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;databaseValue&lt;/code&gt; property returns &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;, a type that wraps the five values supported by SQLite: NULL, Int64, Double, String and Data. Since DatabaseValue has no public initializer, use &lt;code&gt;DatabaseValue.null&lt;/code&gt;, or another type that already adopts the protocol: &lt;code&gt;1.databaseValue&lt;/code&gt;, &lt;code&gt;&#34;foo&#34;.databaseValue&lt;/code&gt;, etc. Conversion to DatabaseValue &lt;em&gt;must not&lt;/em&gt; fail.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;fromDatabaseValue()&lt;/code&gt; factory method returns an instance of your custom type if the database value contains a suitable value. If the database value does not contain a suitable value, such as &#34;foo&#34; for Date, &lt;code&gt;fromDatabaseValue&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; return nil (GRDB will interpret this nil result as a conversion error, and react accordingly).&lt;/p&gt; &#xA;&lt;p&gt;Value types that adopt both &lt;code&gt;DatabaseValueConvertible&lt;/code&gt; and an archival protocol (&lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&#34;&gt;Codable, Encodable or Decodable&lt;/a&gt;) are automatically coded and decoded from JSON arrays and objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Encoded as a JSON object in the database:&#xA;struct Color: Codable, DatabaseValueConvertible {&#xA;    var r: Double&#xA;    var g: Double&#xA;    var b: Double&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For such codable value types, GRDB uses the standard &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsondecoder&#34;&gt;JSONDecoder&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsonencoder&#34;&gt;JSONEncoder&lt;/a&gt; from Foundation. By default, Data values are handled with the &lt;code&gt;.base64&lt;/code&gt; strategy, Date with the &lt;code&gt;.millisecondsSince1970&lt;/code&gt; strategy, and non conforming floats with the &lt;code&gt;.throw&lt;/code&gt; strategy.&lt;/p&gt; &#xA;&lt;p&gt;In order to customize the JSON format, provide a custom implementation of the &lt;code&gt;DatabaseValueConvertible&lt;/code&gt; requirements.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: standard sequences such as &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, or &lt;code&gt;Dictionary&lt;/code&gt; do not conform to &lt;code&gt;DatabaseValueConvertible&lt;/code&gt;, even conditionally. You won&#39;t be able to directly fetch or store arrays, sets, or dictionaries as JSON database values. You can get free JSON support from these standard types when they are embedded as properties of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;, though.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Transactions and Savepoints&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-safety&#34;&gt;Transactions and Safety&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#explicit-transactions&#34;&gt;Explicit Transactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#savepoints&#34;&gt;Savepoints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transaction-kinds&#34;&gt;Transaction Kinds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Transactions and Safety&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A transaction&lt;/strong&gt; is a fundamental tool of SQLite that guarantees &lt;a href=&#34;https://www.sqlite.org/transactional.html&#34;&gt;data consistency&lt;/a&gt; as well as &lt;a href=&#34;https://sqlite.org/isolation.html&#34;&gt;proper isolation&lt;/a&gt; between application threads and database connections.&lt;/p&gt; &#xA;&lt;p&gt;GRDB generally opens transactions for you, as a way to enforce its &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#safe-and-unsafe-database-accesses&#34;&gt;concurrency guarantees&lt;/a&gt;, and provide maximal security for both your application data and application logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// BEGIN TRANSACTION&#xA;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;// COMMIT&#xA;try dbQueue.write { db in&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;}&#xA;&#xA;// BEGIN TRANSACTION&#xA;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;// COMMIT&#xA;try dbPool.write { db in&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet you may need to exactly control when transactions take place:&lt;/p&gt; &#xA;&lt;h3&gt;Explicit Transactions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DatabaseQueue.inDatabase()&lt;/code&gt; and &lt;code&gt;DatabasePool.writeWithoutTransaction()&lt;/code&gt; execute your database statements outside of any transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;try dbQueue.inDatabase { db in&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;}&#xA;&#xA;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;try dbPool.writeWithoutTransaction { db in&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Writing outside of any transaction is dangerous,&lt;/strong&gt; for two reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In our credit/debit example, you may successfully insert a credit, but fail inserting the debit, and end up with unbalanced accounts (oops).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UNSAFE DATABASE INTEGRITY&#xA;try dbQueue.inDatabase { db in // or dbPool.writeWithoutTransaction&#xA;    try Credit(destinationAccount, amount).insert(db) // may succeed&#xA;    try Debit(sourceAccount, amount).insert(db)      // may fail&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Transactions avoid this kind of bug.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;Database pool&lt;/a&gt; concurrent reads can see an inconsistent state of the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UNSAFE CONCURRENCY&#xA;try dbPool.writeWithoutTransaction { db in&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    // &amp;lt;- Concurrent dbPool.read sees a partial db update here&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Transactions avoid this kind of bug, too.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To open explicit transactions, use one of the &lt;code&gt;Database.inTransaction&lt;/code&gt;, &lt;code&gt;DatabaseQueue.inTransaction&lt;/code&gt;, or &lt;code&gt;DatabasePool.writeInTransaction&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// BEGIN TRANSACTION&#xA;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;// COMMIT&#xA;try dbQueue.inDatabase { db in  // or dbPool.writeWithoutTransaction&#xA;    try db.inTransaction {&#xA;        try Credit(destinationAccount, amount).insert(db)&#xA;        try Debit(sourceAccount, amount).insert(db)&#xA;        return .commit&#xA;    }&#xA;}&#xA;&#xA;// BEGIN TRANSACTION&#xA;// INSERT INTO credit ...&#xA;// INSERT INTO debit ...&#xA;// COMMIT&#xA;try dbQueue.inTransaction { db in  // or dbPool.writeInTransaction&#xA;    try Credit(destinationAccount, amount).insert(db)&#xA;    try Debit(sourceAccount, amount).insert(db)&#xA;    return .commit&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an error is thrown from the transaction block, the transaction is rollbacked and the error is rethrown by the &lt;code&gt;inTransaction&lt;/code&gt; method. If you return &lt;code&gt;.rollback&lt;/code&gt; instead of &lt;code&gt;.commit&lt;/code&gt;, the transaction is also rollbacked, but no error is thrown.&lt;/p&gt; &#xA;&lt;p&gt;You can also perform manual transaction management:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.inDatabase { db in  // or dbPool.writeWithoutTransaction&#xA;    try db.beginTransaction()&#xA;    ...&#xA;    try db.commit()&#xA;    &#xA;    try db.execute(sql: &#34;BEGIN TRANSACTION&#34;)&#xA;    ...&#xA;    try db.execute(sql: &#34;ROLLBACK&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Transactions can&#39;t be left opened unless you set the &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/Configuration.html&#34;&gt;allowsUnsafeTransactions&lt;/a&gt; configuration flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: A transaction has been left opened at the end of a database access&#xA;try dbQueue.inDatabase { db in&#xA;    try db.execute(sql: &#34;BEGIN TRANSACTION&#34;)&#xA;    // &amp;lt;- no commit or rollback&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can ask if a transaction is currently opened:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func myCriticalMethod(_ db: Database) throws {&#xA;    precondition(db.isInsideTransaction, &#34;This method requires a transaction&#34;)&#xA;    try ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet, you have a better option than checking for transactions: critical database sections should use savepoints, described below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func myCriticalMethod(_ db: Database) throws {&#xA;    try db.inSavepoint {&#xA;        // Here the database is guaranteed to be inside a transaction.&#xA;        try ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Savepoints&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Statements grouped in a savepoint can be rollbacked without invalidating a whole transaction:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    // Makes sure both inserts succeed, or none:&#xA;    try db.inSavepoint {&#xA;        try Credit(destinationAccount, amount).insert(db)&#xA;        try Debit(sourceAccount, amount).insert(db)&#xA;        return .commit&#xA;    }&#xA;    &#xA;    // Other savepoints, etc...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an error is thrown from the savepoint block, the savepoint is rollbacked and the error is rethrown by the &lt;code&gt;inSavepoint&lt;/code&gt; method. If you return &lt;code&gt;.rollback&lt;/code&gt; instead of &lt;code&gt;.commit&lt;/code&gt;, the savepoint is also rollbacked, but no error is thrown.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unlike transactions, savepoints can be nested.&lt;/strong&gt; They implicitly open a transaction if no one was opened when the savepoint begins. As such, they behave just like nested transactions. Yet the database changes are only written to disk when the outermost transaction is committed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.inDatabase { db in&#xA;    try db.inSavepoint {&#xA;        ...&#xA;        try db.inSavepoint {&#xA;            ...&#xA;            return .commit&#xA;        }&#xA;        ...&#xA;        return .commit  // writes changes to disk&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite savepoints are more than nested transactions, though. For advanced uses, use &lt;a href=&#34;https://www.sqlite.org/lang_savepoint.html&#34;&gt;SQLite savepoint documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Transaction Kinds&lt;/h3&gt; &#xA;&lt;p&gt;SQLite supports &lt;a href=&#34;https://www.sqlite.org/lang_transaction.html&#34;&gt;three kinds of transactions&lt;/a&gt;: deferred (the default), immediate, and exclusive.&lt;/p&gt; &#xA;&lt;p&gt;The transaction kind can be changed in the database configuration, or for each transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// 1) Default configuration:&#xA;let dbQueue = try DatabaseQueue(path: &#34;...&#34;)&#xA;&#xA;// BEGIN DEFERRED TRANSACTION ...&#xA;dbQueue.write { db in ... }&#xA;&#xA;// BEGIN EXCLUSIVE TRANSACTION ...&#xA;dbQueue.inTransaction(.exclusive) { db in ... }&#xA;&#xA;// 2) Customized default transaction kind:&#xA;var config = Configuration()&#xA;config.defaultTransactionKind = .immediate&#xA;let dbQueue = try DatabaseQueue(path: &#34;...&#34;, configuration: config)&#xA;&#xA;// BEGIN IMMEDIATE TRANSACTION ...&#xA;dbQueue.write { db in ... }&#xA;&#xA;// BEGIN EXCLUSIVE TRANSACTION ...&#xA;dbQueue.inTransaction(.exclusive) { db in ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prepared Statements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prepared Statements&lt;/strong&gt; let you prepare an SQL query and execute it later, several times if you need, with different arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    let insertSQL = &#34;INSERT INTO player (name, score) VALUES (:name, :score)&#34;&#xA;    let insertStatement = try db.makeStatement(sql: insertSQL)&#xA;    &#xA;    let selectSQL = &#34;SELECT * FROM player WHERE name = ?&#34;&#xA;    let selectStatement = try db.makeStatement(sql: selectSQL)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:name&lt;/code&gt; in the SQL query are the statement arguments. You set them with arrays or dictionaries (arguments are actually of type &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;StatementArguments&lt;/a&gt;, which happens to adopt the ExpressibleByArrayLiteral and ExpressibleByDictionaryLiteral protocols).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;insertStatement.arguments = [&#34;name&#34;: &#34;Arthur&#34;, &#34;score&#34;: 1000]&#xA;selectStatement.arguments = [&#34;Arthur&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can create a prepared statement with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let insertStatement = try db.makeStatement(literal: &#34;INSERT ...&#34;)&#xA;let selectStatement = try db.makeStatement(literal: &#34;SELECT ...&#34;)&#xA;//                                         ~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Statements can be executed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try insertStatement.execute()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Statements can be used wherever a raw SQL query string would fit (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;fetch queries&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(selectStatement)    // A Cursor of Row&#xA;let players = try Player.fetchAll(selectStatement) // [Player]&#xA;let players = try Player.fetchSet(selectStatement) // Set&amp;lt;Player&amp;gt;&#xA;let player = try Player.fetchOne(selectStatement)  // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the arguments at the moment of the statement execution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try insertStatement.execute(arguments: [&#34;name&#34;: &#34;Arthur&#34;, &#34;score&#34;: 1000])&#xA;let player = try Player.fetchOne(selectStatement, arguments: [&#34;Arthur&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you want to build multiple statements joined with a semicolon&lt;/strong&gt;, use the &lt;code&gt;allStatements&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statements = try db.allStatements(sql: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    &#34;&#34;&#34;, arguments: [&#34;Arthur&#34;, 100, &#34;O&#39;Brien&#34;, 1000])&#xA;while let statement = try statements.next() {&#xA;    try statement.execute()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;allStatements&lt;/code&gt; also supports &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statements = try db.allStatements(literal: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;Arthur&#34;), \(100));&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;O&#39;Brien&#34;), \(1000));&#xA;    &#34;&#34;&#34;)&#xA;while let statement = try statements.next() {&#xA;    try statement.execute()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can turn the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;cursor&lt;/a&gt; returned from &lt;code&gt;allStatements&lt;/code&gt; into a regular Swift array, but in this case make sure all individual statements can compile even if the previous ones were not run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// OK: Array of statements&#xA;let statements = try Array(db.allStatements(sql: &#34;&#34;&#34;&#xA;    INSERT ...; &#xA;    UPDATE ...; &#xA;    SELECT ...;&#xA;    &#34;&#34;&#34;))&#xA;&#xA;// FAILURE: Can&#39;t build an array of statements since &#xA;// the INSERT won&#39;t compile until CREATE TABLE is run.&#xA;let statements = try Array(db.allStatements(sql: &#34;&#34;&#34;&#xA;    CREATE TABLE player ...; &#xA;    INSERT INTO player ...;&#xA;    &#34;&#34;&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;code&gt;Database.execute(sql:)&lt;/code&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;Executing Updates&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: it is a programmer error to reuse a prepared statement that has failed: GRDB may crash if you do so.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For more information about prepared statements, see the &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Classes/Statement.html&#34;&gt;Statement reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prepared Statements Cache&lt;/h3&gt; &#xA;&lt;p&gt;When the same query will be used several times in the lifetime of your application, you may feel a natural desire to cache prepared statements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t cache statements yourself.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: This is because you don&#39;t have the necessary tools. Statements are tied to specific SQLite connections and dispatch queues which you don&#39;t manage yourself, especially when you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pools&lt;/a&gt;. A change in the database schema &lt;a href=&#34;https://www.sqlite.org/compile.html#max_schema_retry&#34;&gt;may, or may not&lt;/a&gt; invalidate a statement.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Instead, use the &lt;code&gt;cachedStatement&lt;/code&gt; method. GRDB does all the hard caching and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#memory-management&#34;&gt;memory management&lt;/a&gt; stuff for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statement = try db.cachedStatement(sql: sql)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cached statements also support &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statement = try db.cachedStatement(literal: &#34;INSERT ...&#34;)&#xA;//                                     ~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: Should a cached prepared statement throw an error, don&#39;t reuse it (it is a programmer error). Instead, reload one from the cache.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Custom SQL Functions and Aggregates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite lets you define SQL functions and aggregates.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A custom SQL function or aggregate extends SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT reverse(name) FROM player;   -- custom function&#xA;SELECT maxLength(name) FROM player; -- custom aggregate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions&#34;&gt;Custom SQL Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-aggregates&#34;&gt;Custom Aggregates&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom SQL Functions&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;em&gt;function&lt;/em&gt; argument takes an array of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;, and returns any valid &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) The number of database values is guaranteed to be &lt;em&gt;argumentCount&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SQLite has the opportunity to perform additional optimizations when functions are &#34;pure&#34;, which means that their result only depends on their arguments. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let reverse = DatabaseFunction(&#34;reverse&#34;, argumentCount: 1, pure: true) { (values: [DatabaseValue]) in&#xA;    // Extract string value, if any...&#xA;    guard let string = String.fromDatabaseValue(values[0]) else {&#xA;        return nil&#xA;    }&#xA;    // ... and return reversed string:&#xA;    return String(string.reversed())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You make a function available to a database connection through its configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.add(function: reverse)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    // &#34;oof&#34;&#xA;    try String.fetchOne(db, sql: &#34;SELECT reverse(&#39;foo&#39;)&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Functions can take a variable number of arguments:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you don&#39;t provide any explicit &lt;em&gt;argumentCount&lt;/em&gt;, the function can take any number of arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let averageOf = DatabaseFunction(&#34;averageOf&#34;, pure: true) { (values: [DatabaseValue]) in&#xA;    let doubles = values.compactMap { Double.fromDatabaseValue($0) }&#xA;    return doubles.reduce(0, +) / Double(doubles.count)&#xA;}&#xA;db.add(function: averageOf)&#xA;&#xA;// 2.0&#xA;try Double.fetchOne(db, sql: &#34;SELECT averageOf(1, 2, 3)&#34;)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Functions can throw:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sqrt = DatabaseFunction(&#34;sqrt&#34;, argumentCount: 1, pure: true) { (values: [DatabaseValue]) in&#xA;    guard let double = Double.fromDatabaseValue(values[0]) else {&#xA;        return nil&#xA;    }&#xA;    guard double &amp;gt;= 0 else {&#xA;        throw DatabaseError(message: &#34;invalid negative number&#34;)&#xA;    }&#xA;    return sqrt(double)&#xA;}&#xA;db.add(function: sqrt)&#xA;&#xA;// SQLite error 1 with statement `SELECT sqrt(-1)`: invalid negative number&#xA;try Double.fetchOne(db, sql: &#34;SELECT sqrt(-1)&#34;)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use custom functions in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT reverseString(&#34;name&#34;) FROM player&#xA;Player.select(reverseString(nameColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB ships with built-in SQL functions that perform unicode-aware string transformations.&lt;/strong&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#unicode&#34;&gt;Unicode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Aggregates&lt;/h3&gt; &#xA;&lt;p&gt;Before registering a custom aggregate, you need to define a type that adopts the &lt;code&gt;DatabaseAggregate&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DatabaseAggregate {&#xA;    // Initializes an aggregate&#xA;    init()&#xA;    &#xA;    // Called at each step of the aggregation&#xA;    mutating func step(_ dbValues: [DatabaseValue]) throws&#xA;    &#xA;    // Returns the final result&#xA;    func finalize() throws -&amp;gt; DatabaseValueConvertible?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MaxLength : DatabaseAggregate {&#xA;    var maxLength: Int = 0&#xA;    &#xA;    mutating func step(_ dbValues: [DatabaseValue]) {&#xA;        // At each step, extract string value, if any...&#xA;        guard let string = String.fromDatabaseValue(dbValues[0]) else {&#xA;            return&#xA;        }&#xA;        // ... and update the result&#xA;        let length = string.count&#xA;        if length &amp;gt; maxLength {&#xA;            maxLength = length&#xA;        }&#xA;    }&#xA;    &#xA;    func finalize() -&amp;gt; DatabaseValueConvertible? {&#xA;        maxLength&#xA;    }&#xA;}&#xA;&#xA;let maxLength = DatabaseFunction(&#xA;    &#34;maxLength&#34;,&#xA;    argumentCount: 1,&#xA;    pure: true,&#xA;    aggregate: MaxLength.self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions&#34;&gt;custom SQL Functions&lt;/a&gt;, you make an aggregate function available to a database connection through its configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.add(function: maxLength)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    // Some Int&#xA;    try Int.fetchOne(db, sql: &#34;SELECT maxLength(name) FROM player&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;step&lt;/code&gt; method of the aggregate takes an array of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;. This array contains as many values as the &lt;em&gt;argumentCount&lt;/em&gt; parameter (or any number of values, when &lt;em&gt;argumentCount&lt;/em&gt; is omitted).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;finalize&lt;/code&gt; method of the aggregate returns the final aggregated &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.).&lt;/p&gt; &#xA;&lt;p&gt;SQLite has the opportunity to perform additional optimizations when aggregates are &#34;pure&#34;, which means that their result only depends on their inputs. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use custom aggregates in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT maxLength(&#34;name&#34;) FROM player&#xA;let request = Player.select(maxLength.apply(nameColumn))&#xA;try Int.fetchOne(db, request) // Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Database Schema Introspection&lt;/h2&gt; &#xA;&lt;p&gt;GRDB comes with a set of schema introspection methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Bool, true if the table exists&#xA;    try db.tableExists(&#34;player&#34;)&#xA;    &#xA;    // [ColumnInfo], the columns in the table&#xA;    try db.columns(in: &#34;player&#34;)&#xA;    &#xA;    // PrimaryKeyInfo&#xA;    try db.primaryKey(&#34;player&#34;)&#xA;    &#xA;    // [ForeignKeyInfo], the foreign keys defined on the table&#xA;    try db.foreignKeys(on: &#34;player&#34;)&#xA;    &#xA;    // [IndexInfo], the indexes defined on the table&#xA;    try db.indexes(on: &#34;player&#34;)&#xA;    &#xA;    // Bool, true if column(s) is a unique key (primary key or unique index)&#xA;    try db.table(&#34;player&#34;, hasUniqueKey: [&#34;email&#34;])&#xA;}&#xA;&#xA;// Bool, true if argument is the name of an internal SQLite table&#xA;Database.isSQLiteInternalTable(...)&#xA;&#xA;// Bool, true if argument is the name of an internal GRDB table&#xA;Database.isGRDBInternalTable(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Row Adapters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Row adapters let you present database rows in the way expected by the row consumers.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;They basically help two incompatible row interfaces to work together. For example, a row consumer expects a column named &#34;consumed&#34;, but the produced row has a column named &#34;produced&#34;.&lt;/p&gt; &#xA;&lt;p&gt;In this case, the &lt;code&gt;ColumnMapping&lt;/code&gt; row adapter comes in handy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Turn the &#39;produced&#39; column into &#39;consumed&#39;:&#xA;let adapter = ColumnMapping([&#34;consumed&#34;: &#34;produced&#34;])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Hello&#39; AS produced&#34;, adapter: adapter)!&#xA;&#xA;// [consumed:&#34;Hello&#34;]&#xA;print(row)&#xA;&#xA;// &#34;Hello&#34;&#xA;print(row[&#34;consumed&#34;])&#xA;&#xA;// ▿ [consumed:&#34;Hello&#34;]&#xA;//   unadapted: [produced:&#34;Hello&#34;]&#xA;print(row.debugDescription)&#xA;&#xA;// [produced:&#34;Hello&#34;]&#xA;print(row.unadapted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Record types&lt;/a&gt; are typical row consumers that expect database rows to have a specific layout so that they can decode them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MyRecord: Decodable, FetchableRecord {&#xA;    var consumed: String&#xA;}&#xA;let record = try MyRecord.fetchOne(db, sql: &#34;SELECT &#39;Hello&#39; AS produced&#34;, adapter: adapter)!&#xA;print(record.consumed) // &#34;Hello&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are several situations where row adapters are useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;They help disambiguate columns with identical names, which may happen when you select columns from several tables. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt; for an example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;They help when SQLite outputs unexpected column names, which may happen with some subqueries. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#renamecolumnadapter&#34;&gt;RenameColumnAdapter&lt;/a&gt; for an example.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available row adapters are described below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columnmapping&#34;&gt;ColumnMapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#emptyrowadapter&#34;&gt;EmptyRowAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rangerowadapter&#34;&gt;RangeRowAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#renamecolumnadapter&#34;&gt;RenameColumnAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#scopeadapter&#34;&gt;ScopeAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#suffixrowadapter&#34;&gt;SuffixRowAdapter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ColumnMapping&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ColumnMapping&lt;/code&gt; renames columns. Build one with a dictionary whose keys are adapted column names, and values the column names in the raw row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [newA:0, newB:1]&#xA;let adapter = ColumnMapping([&#34;newA&#34;: &#34;a&#34;, &#34;newB&#34;: &#34;b&#34;])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that columns that are not present in the dictionary are not present in the resulting adapted row.&lt;/p&gt; &#xA;&lt;h3&gt;EmptyRowAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;EmptyRowAdapter&lt;/code&gt; hides all columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let adapter = EmptyRowAdapter()&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;row.isEmpty // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This limit adapter may turn out useful in some narrow use cases. You&#39;ll be happy to find it when you need it.&lt;/p&gt; &#xA;&lt;h3&gt;RangeRowAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;RangeRowAdapter&lt;/code&gt; only exposes a range of columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [b:1]&#xA;let adapter = RangeRowAdapter(1..&amp;lt;2)&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RenameColumnAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;RenameColumnAdapter&lt;/code&gt; lets you transform column names with a function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [arrr:0, brrr:1, crrr:2]&#xA;let adapter = RenameColumnAdapter { column in column + &#34;rrr&#34; }&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adapter may turn out useful, for example, when subqueries contain duplicated column names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sql = &#34;SELECT * FROM (SELECT 1 AS id, 2 AS id)&#34;&#xA;&#xA;// Prints [&#34;id&#34;, &#34;id:1&#34;]&#xA;// Note the &#34;id:1&#34; column, generated by SQLite.&#xA;let row = try Row.fetchOne(db, sql: sql)!&#xA;print(Array(row.columnNames))&#xA;&#xA;// Drop the `:...` suffix, and prints [&#34;id&#34;, &#34;id&#34;]&#xA;let adapter = RenameColumnAdapter { String($0.prefix(while: { $0 != &#34;:&#34; })) }&#xA;let adaptedRow = try Row.fetchOne(db, sql: sql, adapter: adapter)!&#xA;print(Array(adaptedRow.columnNames))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ScopeAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ScopeAdapter&lt;/code&gt; defines &lt;em&gt;row scopes&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let adapter = ScopeAdapter([&#xA;    &#34;left&#34;: RangeRowAdapter(0..&amp;lt;2),&#xA;    &#34;right&#34;: RangeRowAdapter(2..&amp;lt;4)])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ScopeAdapter does not change the columns and values of the fetched row. Instead, it defines &lt;em&gt;scopes&lt;/em&gt;, which you access through the &lt;code&gt;Row.scopes&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;row                   // [a:0 b:1 c:2 d:3]&#xA;row.scopes[&#34;left&#34;]    // [a:0 b:1]&#xA;row.scopes[&#34;right&#34;]   // [c:2 d:3]&#xA;row.scopes[&#34;missing&#34;] // nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scopes can be nested:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let adapter = ScopeAdapter([&#xA;    &#34;left&#34;: ScopeAdapter([&#xA;        &#34;left&#34;: RangeRowAdapter(0..&amp;lt;1),&#xA;        &#34;right&#34;: RangeRowAdapter(1..&amp;lt;2)]),&#xA;    &#34;right&#34;: ScopeAdapter([&#xA;        &#34;left&#34;: RangeRowAdapter(2..&amp;lt;3),&#xA;        &#34;right&#34;: RangeRowAdapter(3..&amp;lt;4)])&#xA;    ])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&#34;, adapter: adapter)!&#xA;&#xA;let leftRow = row.scopes[&#34;left&#34;]!&#xA;leftRow.scopes[&#34;left&#34;]  // [a:0]&#xA;leftRow.scopes[&#34;right&#34;] // [b:1]&#xA;&#xA;let rightRow = row.scopes[&#34;right&#34;]!&#xA;rightRow.scopes[&#34;left&#34;]  // [c:2]&#xA;rightRow.scopes[&#34;right&#34;] // [d:3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any adapter can be extended with scopes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let baseAdapter = RangeRowAdapter(0..&amp;lt;2)&#xA;let adapter = ScopeAdapter(base: baseAdapter, scopes: [&#xA;    &#34;remainder&#34;: SuffixRowAdapter(fromIndex: 2)])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&#34;, adapter: adapter)!&#xA;&#xA;row // [a:0 b:1]&#xA;row.scopes[&#34;remainder&#34;] // [c:2 d:3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see how &lt;code&gt;ScopeAdapter&lt;/code&gt; can be used, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SuffixRowAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SuffixRowAdapter&lt;/code&gt; hides the first columns in a row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [b:1 c:2]&#xA;let adapter = SuffixRowAdapter(fromIndex: 1)&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Raw SQLite Pointers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;If not all SQLite APIs are exposed in GRDB, you can still use the &lt;a href=&#34;https://www.sqlite.org/c3ref/intro.html&#34;&gt;SQLite C Interface&lt;/a&gt; and call &lt;a href=&#34;https://www.sqlite.org/c3ref/funclist.html&#34;&gt;SQLite C functions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Those functions are embedded right into the GRDB module, regardless of the underlying SQLite implementation (system SQLite, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;SQLCipher&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;let sqliteVersion = String(cString: sqlite3_libversion())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Raw pointers to database connections and statements are available through the &lt;code&gt;Database.sqliteConnection&lt;/code&gt; and &lt;code&gt;Statement.sqliteStatement&lt;/code&gt; properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // The raw pointer to a database connection:&#xA;    let sqliteConnection = db.sqliteConnection&#xA;&#xA;    // The raw pointer to a statement:&#xA;    let statement = try db.makeStatement(sql: &#34;SELECT ...&#34;)&#xA;    let sqliteStatement = statement.sqliteStatement&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Those pointers are owned by GRDB: don&#39;t close connections or finalize statements created by GRDB.&lt;/li&gt; &#xA;  &lt;li&gt;GRDB opens SQLite connections in the &#34;&lt;a href=&#34;https://www.sqlite.org/threadsafe.html&#34;&gt;multi-thread mode&lt;/a&gt;&#34;, which (oddly) means that &lt;strong&gt;they are not thread-safe&lt;/strong&gt;. Make sure you touch raw databases and statements inside their dedicated dispatch queues.&lt;/li&gt; &#xA;  &lt;li&gt;Use the raw SQLite C Interface at your own risk. GRDB won&#39;t prevent you from shooting yourself in the foot.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Records&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;On top of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;SQLite API&lt;/a&gt;, GRDB provides protocols and a class&lt;/strong&gt; that help manipulating database rows as regular objects named &#34;records&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    if var place = try Place.fetchOne(db, id: 1) {&#xA;        place.isFavorite = true&#xA;        try place.update(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you need to open a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-schema&#34;&gt;create database tables&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;To define your custom records, you subclass the ready-made &lt;code&gt;Record&lt;/code&gt; class, or you extend your structs and classes with protocols that come with focused sets of features: fetching methods, persistence methods, record comparison...&lt;/p&gt; &#xA;&lt;p&gt;Extending structs with record protocols is more &#34;swifty&#34;. Subclassing the Record class is more &#34;classic&#34;. You can choose either way. See some &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&#34;&gt;examples of record definitions&lt;/a&gt;, and the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods&#34;&gt;list of record methods&lt;/a&gt; for an overview.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: if you are familiar with Core Data&#39;s NSManagedObject or Realm&#39;s Object, you may experience a cultural shock: GRDB records are not uniqued, do not auto-update, and do not lazy-load. This is both a purpose, and a consequence of protocol-oriented programming. You should read &lt;a href=&#34;https://medium.com/@gwendal.roue/how-to-build-an-ios-application-with-sqlite-and-grdb-swift-d023a06c29b3&#34;&gt;How to build an iOS application with SQLite and GRDB.swift&lt;/a&gt; for a general introduction.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: after you have read this chapter, check the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GoodPracticesForDesigningRecordTypes.md&#34;&gt;Good Practices for Designing Record Types&lt;/a&gt; Guide.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample apps that uses records.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#inserting-records&#34;&gt;Inserting Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-records&#34;&gt;Fetching Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#updating-records&#34;&gt;Updating Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#deleting-records&#34;&gt;Deleting Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#counting-records&#34;&gt;Counting Records&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Protocols and the Record Class&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord Protocol&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&#34;&gt;Persistence Methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#customizing-the-persistence-methods&#34;&gt;Customizing the Persistence Methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-customization-options&#34;&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Records in a Glance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&#34;&gt;Examples of Record Definitions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods&#34;&gt;List of Record Methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inserting Records&lt;/h3&gt; &#xA;&lt;p&gt;To insert a record in the database, call the &lt;code&gt;insert&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = Player(name: &#34;Arthur&#34;, email: &#34;arthur@example.com&#34;)&#xA;try player.insert(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; &lt;code&gt;insert&lt;/code&gt; is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Fetching Records&lt;/h3&gt; &#xA;&lt;p&gt;To fetch records from the database, call a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching method&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let arthur = try Player.fetchOne(db,            // Player?&#xA;    sql: &#34;SELECT * FROM players WHERE name = ?&#34;,&#xA;    arguments: [&#34;Arthur&#34;])&#xA;&#xA;let bestPlayers = try Player                    // [Player]&#xA;    .order(Column(&#34;score&#34;).desc)&#xA;    .limit(10)&#xA;    .fetchAll(db)&#xA;    &#xA;let spain = try Country.fetchOne(db, id: &#34;ES&#34;)  // Country?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; Fetching from raw SQL is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; Fetching without SQL, using the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;, is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt both &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Updating Records&lt;/h3&gt; &#xA;&lt;p&gt;To update a record in the database, call the &lt;code&gt;update&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var player: Player = ...&#xA;player.score = 1000&#xA;try player.update(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;avoid useless updates&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// does not hit the database if score has not changed&#xA;try player.updateChanges(db) {&#xA;    $0.score = 1000&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt; for batch updates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player&#xA;    .filter(Column(&#34;team&#34;) == &#34;red&#34;)&#xA;    .updateAll(db, Column(&#34;score&#34;) += 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; update methods are available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol. Batch updates are available on the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Deleting Records&lt;/h3&gt; &#xA;&lt;p&gt;To delete a record in the database, call the &lt;code&gt;delete&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player: Player = ...&#xA;try player.delete(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also delete by primary key, unique key, or perform batch deletes (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#delete-requests&#34;&gt;Delete Requests&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.deleteOne(db, id: 1)&#xA;try Player.deleteOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Country.deleteAll(db, ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;try Player&#xA;    .filter(Column(&#34;email&#34;) == nil)&#xA;    .deleteAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; delete methods are available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol. Batch deletes are available on the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Counting Records&lt;/h3&gt; &#xA;&lt;p&gt;To count records, call the &lt;code&gt;fetchCount&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let playerCount: Int = try Player.fetchCount(db)&#xA;&#xA;let playerWithEmailCount: Int = try Player&#xA;    .filter(Column(&#34;email&#34;) == nil)&#xA;    .fetchCount(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; &lt;code&gt;fetchCount&lt;/code&gt; is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;p&gt;Details follow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-customization-options&#34;&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&#34;&gt;Examples of Record Definitions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods&#34;&gt;List of Record Methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Record Protocols Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB ships with three record protocols&lt;/strong&gt;. Your own types will adopt one or several of them, according to the abilities you want to extend your types with.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; is able to &lt;strong&gt;decode database rows&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: FetchableRecord { ... }&#xA;let places = try dbQueue.read { db in&#xA;    try Place.fetchAll(db, sql: &#34;SELECT * FROM place&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;FetchableRecord&lt;/code&gt; can derive its implementation from the standard &lt;code&gt;Decodable&lt;/code&gt; protocol. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;code&gt;FetchableRecord&lt;/code&gt; can decode database rows, but it is not able to build SQL requests for you. For that, you also need &lt;code&gt;TableRecord&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; is able to &lt;strong&gt;generate SQL queries&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord { ... }&#xA;let placeCount = try dbQueue.read { db in&#xA;    // Generates and runs `SELECT COUNT(*) FROM place`&#xA;    try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When a type adopts both &lt;code&gt;TableRecord&lt;/code&gt; and &lt;code&gt;FetchableRecord&lt;/code&gt;, it can load from those requests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord, FetchableRecord { ... }&#xA;try dbQueue.read { db in&#xA;    let places = try Place.order(Column(&#34;title&#34;)).fetchAll(db)&#xA;    let paris = try Place.fetchOne(id: 1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; is able to &lt;strong&gt;write&lt;/strong&gt;: it can create, update, and delete rows in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place : PersistableRecord { ... }&#xA;try dbQueue.write { db in&#xA;    try Place.delete(db, id: 1)&#xA;    try Place(...).insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A persistable record can also &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;compare&lt;/a&gt; itself against other records, and avoid useless database updates.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;PersistableRecord&lt;/code&gt; can derive its implementation from the standard &lt;code&gt;Encodable&lt;/code&gt; protocol. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FetchableRecord Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The FetchableRecord protocol grants fetching methods to any type&lt;/strong&gt; that can be built from a database row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    /// Row initializer&#xA;    init(row: Row)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To use FetchableRecord&lt;/strong&gt;, subclass the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, or adopt it explicitly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var coordinate: CLLocationCoordinate2D&#xA;}&#xA;&#xA;extension Place : FetchableRecord {&#xA;    init(row: Row) {&#xA;        id = row[&#34;id&#34;]&#xA;        title = row[&#34;title&#34;]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[&#34;latitude&#34;],&#xA;            longitude: row[&#34;longitude&#34;])&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rows also accept column enums:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Place : FetchableRecord {&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, latitude, longitude&#xA;    }&#xA;    &#xA;    init(row: Row) {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&#34;&gt;column values&lt;/a&gt; for more information about the &lt;code&gt;row[]&lt;/code&gt; subscript.&lt;/p&gt; &#xA;&lt;p&gt;When your record type adopts the standard Decodable protocol, you don&#39;t have to provide the implementation for &lt;code&gt;init(row:)&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// That&#39;s all&#xA;struct Player: Decodable, FetchableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FetchableRecord allows adopting types to be fetched from SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Place.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments:...) // A Cursor of Place&#xA;try Place.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments:...)    // [Place]&#xA;try Place.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments:...)    // Set&amp;lt;Place&amp;gt;&#xA;try Place.fetchOne(db, sql: &#34;SELECT ...&#34;, arguments:...)    // Place?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt;, &lt;code&gt;fetchSet&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods. See &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;StatementArguments&lt;/a&gt; for more information about the query arguments.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: for performance reasons, the same row argument to &lt;code&gt;init(row:)&lt;/code&gt; is reused during the iteration of a fetch query. If you want to keep the row for later use, make sure to store a copy: &lt;code&gt;self.row = row.copy()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;FetchableRecord.init(row:)&lt;/code&gt; initializer fits the needs of most applications. But some application are more demanding than others. When FetchableRecord does not exactly provide the support you need, have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&#34;&gt;Beyond FetchableRecord&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;TableRecord Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The TableRecord protocol&lt;/strong&gt; generates SQL for you. To use TableRecord, subclass the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, or adopt it explicitly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol TableRecord {&#xA;    static var databaseTableName: String { get }&#xA;    static var databaseSelection: [SQLSelectable] { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;databaseSelection&lt;/code&gt; type property is optional, and documented in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;databaseTableName&lt;/code&gt; type property is the name of a database table. By default, it is derived from the type name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord { }&#xA;print(Place.databaseTableName) // prints &#34;place&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Place: &lt;code&gt;place&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Country: &lt;code&gt;country&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;PostalAddress: &lt;code&gt;postalAddress&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTPRequest: &lt;code&gt;httpRequest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;TOEFL: &lt;code&gt;toefl&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can still provide a custom table name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord {&#xA;    static let databaseTableName = &#34;location&#34;&#xA;}&#xA;print(Place.databaseTableName) // prints &#34;location&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class must always override their superclass&#39;s &lt;code&gt;databaseTableName&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Place: Record {&#xA;    override class var databaseTableName: String { &#34;place&#34; }&#xA;}&#xA;print(Place.databaseTableName) // prints &#34;place&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a type adopts both TableRecord and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;, it can be fetched using the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM place WHERE name = &#39;Paris&#39;&#xA;let paris = try Place.filter(nameColumn == &#34;Paris&#34;).fetchOne(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TableRecord can also fetch deal with primary and unique keys: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-by-key&#34;&gt;Fetching by Key&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#testing-for-record-existence&#34;&gt;Testing for Record Existence&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;PersistableRecord Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB record types can create, update, and delete rows in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Those abilities are granted by three protocols:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Defines how a record encodes itself into the database&#xA;protocol EncodableRecord {&#xA;    /// Defines the values persisted in the database&#xA;    func encode(to container: inout PersistenceContainer)&#xA;}&#xA;&#xA;// Adds persistence methods&#xA;protocol MutablePersistableRecord: TableRecord, EncodableRecord {&#xA;    /// Optional method that lets your adopting type store its rowID upon&#xA;    /// successful insertion. Don&#39;t call it directly: it is called for you.&#xA;    mutating func didInsert(with rowID: Int64, for column: String?)&#xA;}&#xA;&#xA;// Adds immutability&#xA;protocol PersistableRecord: MutablePersistableRecord {&#xA;    /// Non-mutating version of the optional didInsert(with:for:)&#xA;    func didInsert(with rowID: Int64, for column: String?)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yes, three protocols instead of one. Here is how you pick one or the other:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your type is a class&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;. On top of that, implement &lt;code&gt;didInsert(with:for:)&lt;/code&gt; if the database table has an auto-incremented primary key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your type is a struct, and the database table has an auto-incremented primary key&lt;/strong&gt;, choose &lt;code&gt;MutablePersistableRecord&lt;/code&gt;, and implement &lt;code&gt;didInsert(with:for:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Otherwise&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;, and ignore &lt;code&gt;didInsert(with:for:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;encode(to:)&lt;/code&gt; method defines which &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) are assigned to database columns.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;didInsert&lt;/code&gt; method lets the adopting type store its rowID after successful insertion, and is only useful for tables that have an auto-incremented primary key. It is called from a protected dispatch queue, and serialized with all database updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To use the persistable protocols&lt;/strong&gt;, subclass the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, or adopt one of them explicitly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Place : MutablePersistableRecord {&#xA;    /// The values persisted in the database&#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[&#34;id&#34;] = id&#xA;        container[&#34;title&#34;] = title&#xA;        container[&#34;latitude&#34;] = coordinate.latitude&#xA;        container[&#34;longitude&#34;] = coordinate.longitude&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&#xA;var paris = Place(&#xA;    id: nil,&#xA;    title: &#34;Paris&#34;,&#xA;    coordinate: CLLocationCoordinate2D(latitude: 48.8534100, longitude: 2.3488000))&#xA;&#xA;try paris.insert(db)&#xA;paris.id   // some value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Persistence containers also accept column enums:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Place : MutablePersistableRecord {&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, latitude, longitude&#xA;    }&#xA;    &#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When your record type adopts the standard Encodable protocol, you don&#39;t have to provide the implementation for &lt;code&gt;encode(to:)&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// That&#39;s all&#xA;struct Player: Encodable, MutablePersistableRecord {&#xA;    var id: Int64?&#xA;    var name: String&#xA;    var score: Int&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Persistence Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; subclasses and types that adopt &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; are given default implementations for methods that insert, update, and delete:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT&#xA;try place.insert(db)&#xA;let insertedPlace = try place.inserted(db) // non-mutating&#xA;&#xA;// UPDATE&#xA;try place.update(db)&#xA;try place.update(db, columns: [&#34;title&#34;])&#xA;&#xA;// Maybe UPDATE&#xA;try place.updateChanges(db, from: otherPlace)&#xA;try place.updateChanges(db) { $0.isFavorite = true }&#xA;try place.updateChanges(db) // Record class only&#xA;&#xA;// INSERT or UPDATE&#xA;try place.save(db)&#xA;let savedPlace = place.saved(db) // non-mutating&#xA;&#xA;// DELETE&#xA;try place.delete(db)&#xA;&#xA;// EXISTENCE CHECK&#xA;let exists = try place.exists(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol comes with batch operations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE&#xA;try Place.updateAll(db, ...)&#xA;&#xA;// DELETE&#xA;try Place.deleteAll(db)&#xA;try Place.deleteAll(db, ids:...)&#xA;try Place.deleteAll(db, keys:...)&#xA;try Place.deleteOne(db, id:...)&#xA;try Place.deleteOne(db, key:...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All those methods can throw a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&#34;&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;update&lt;/code&gt; and &lt;code&gt;updateChanges&lt;/code&gt; throw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistenceerror&#34;&gt;PersistenceError&lt;/a&gt; if the database does not contain any row for the primary key of the record.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;save&lt;/code&gt; makes sure your values are stored in the database. It performs an UPDATE if the record has a non-null primary key, and then, if no row was modified, an INSERT. It directly performs an INSERT if the record has no primary key, or a null primary key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;deleteOne&lt;/code&gt; returns whether a database row was deleted or not. &lt;code&gt;deleteAll&lt;/code&gt; returns the number of deleted rows. &lt;code&gt;updateAll&lt;/code&gt; returns the number of updated rows. &lt;code&gt;updateChanges&lt;/code&gt; returns whether a database row was updated or not.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;All primary keys are supported&lt;/strong&gt;, including composite primary keys that span several columns, and the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-implicit-rowid-primary-key&#34;&gt;implicit rowid primary key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing the Persistence Methods&lt;/h3&gt; &#xA;&lt;p&gt;Your custom type may want to perform extra work when the persistence methods are invoked.&lt;/p&gt; &#xA;&lt;p&gt;For example, it may want to have its UUID automatically set before inserting. Or it may want to validate its values before saving.&lt;/p&gt; &#xA;&lt;p&gt;When you subclass &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;, you simply have to override the customized method, and call &lt;code&gt;super&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Player : Record {&#xA;    var uuid: UUID?&#xA;    &#xA;    override func insert(_ db: Database) throws {&#xA;        if uuid == nil {&#xA;            uuid = UUID()&#xA;        }&#xA;        try super.insert(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the raw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol, use one of the &lt;em&gt;special methods&lt;/em&gt; &lt;code&gt;performInsert&lt;/code&gt;, &lt;code&gt;performUpdate&lt;/code&gt;, &lt;code&gt;performSave&lt;/code&gt;, &lt;code&gt;performDelete&lt;/code&gt;, or &lt;code&gt;performExists&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Link : PersistableRecord {&#xA;    var url: URL&#xA;    &#xA;    func insert(_ db: Database) throws {&#xA;        try validate()&#xA;        try performInsert(db)&#xA;    }&#xA;    &#xA;    func update(_ db: Database, columns: Set&amp;lt;String&amp;gt;) throws {&#xA;        try validate()&#xA;        try performUpdate(db, columns: columns)&#xA;    }&#xA;    &#xA;    func validate() throws {&#xA;        if url.host == nil {&#xA;            throw ValidationError(&#34;url must be absolute.&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the special methods &lt;code&gt;performInsert&lt;/code&gt;, &lt;code&gt;performUpdate&lt;/code&gt;, etc. are reserved for your custom implementations. Do not use them elsewhere. Do not provide another implementation for those methods.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: it is recommended that you do not implement your own version of the &lt;code&gt;save&lt;/code&gt; method. Its default implementation forwards the job to &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;insert&lt;/code&gt;: these are the methods that may need customization, not &lt;code&gt;save&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Identifiable Records&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;When a record type maps a table with a single-column primary key, it is recommended to have it adopt the standard &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt; protocol.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Identifiable, FetchableRecord, PersistableRecord {&#xA;    var id: Int64 // fulfills the Identifiable requirement&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;id&lt;/code&gt; has a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;database-compatible type&lt;/a&gt; (Int64, Int, String, UUID, ...), the &lt;code&gt;Identifiable&lt;/code&gt; conformance unlocks type-safe record and request methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = try Player.fetchOne(db, id: 1)&#xA;let players = try Player.fetchAll(db, ids: [1, 2, 3])&#xA;let players = try Player.fetchSet(db, ids: [1, 2, 3])&#xA;&#xA;let request = Player.filter(id: 1)&#xA;let request = Player.filter(ids: [1, 2, 3])&#xA;&#xA;let ids = try Player.selectID().fetchAll(db)&#xA;let ids = try Player.filter(...).selectID().fetchSet(db)&#xA;&#xA;try Player.deleteOne(db, id: 1)&#xA;try Player.deleteAll(db, ids: [1, 2, 3])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;Identifiable&lt;/code&gt; is not available on all application targets, and not all tables have a single-column primary key. GRDB provides other methods that deal with primary and unique keys, but they won&#39;t check the type of their arguments:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Those methods are not type-checked&#xA;try Player.fetchOne(db, key: 1)&#xA;try Player.fetchOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Country.fetchAll(db, keys: [&#34;FR&#34;, &#34;US&#34;])&#xA;try Citizenship.fetchOne(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&#xA;let request = Player.filter(key: 1)&#xA;let request = Player.filter(keys: [1, 2, 3])&#xA;&#xA;try Player.deleteOne(db, key: 1)&#xA;try Player.deleteAll(db, keys: [1, 2, 3])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some database tables have a single-column primary key which is not called &#34;id&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.create(table: &#34;country&#34;) { t in&#xA;    t.column(&#34;isoCode&#34;, .text).notNull().primaryKey()&#xA;    t.column(&#34;name&#34;, .text).notNull()&#xA;    t.column(&#34;population&#34;, .integer).notNull()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, &lt;code&gt;Identifiable&lt;/code&gt; conformance can be achieved, for example, by returning the primary key column from the &lt;code&gt;id&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Country: Identifiable, FetchableRecord, PersistableRecord {&#xA;    var isoCode: String&#xA;    var name: String&#xA;    var population: Int&#xA;    &#xA;    // Fulfill the Identifiable requirement&#xA;    var id: String { isoCode }&#xA;}&#xA;&#xA;let france = try dbQueue.read { db in&#xA;    try Country.fetchOne(db, id: &#34;FR&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Codable Records&lt;/h2&gt; &#xA;&lt;p&gt;Record types that adopt an archival protocol (&lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&#34;&gt;Codable, Encodable or Decodable&lt;/a&gt;) get free database support just by declaring conformance to the desired &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;record protocols&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Declare a record...&#xA;struct Player: Codable, FetchableRecord, PersistableRecord {&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;// ...and there you go:&#xA;try dbQueue.write { db in&#xA;    try Player(name: &#34;Arthur&#34;, score: 100).insert(db)&#xA;    let players = try Player.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Codable records encode and decode their properties according to their own implementation of the Encodable and Decodable protocols. Yet databases have specific requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Properties are always coded according to their preferred database representation, when they have one (all &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible&lt;/a&gt; protocol).&lt;/li&gt; &#xA; &lt;li&gt;You can customize the encoding and decoding of dates and uuids.&lt;/li&gt; &#xA; &lt;li&gt;Complex properties (arrays, dictionaries, nested structs, etc.) are stored as JSON.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information about Codable records, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;JSON Columns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-names-coding-strategies&#34;&gt;Column Names Coding Strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;Date and UUID Coding Strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;The userInfo Dictionary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tip-derive-columns-from-coding-keys&#34;&gt;Tip: Derive Columns from Coding Keys&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample code that uses Codable records.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;JSON Columns&lt;/h3&gt; &#xA;&lt;p&gt;When a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable record&lt;/a&gt; contains a property that is not a simple &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.), that value is encoded and decoded as a &lt;strong&gt;JSON string&lt;/strong&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum AchievementColor: String, Codable {&#xA;    case bronze, silver, gold&#xA;}&#xA;&#xA;struct Achievement: Codable {&#xA;    var name: String&#xA;    var color: AchievementColor&#xA;}&#xA;&#xA;struct Player: Codable, FetchableRecord, PersistableRecord {&#xA;    var name: String&#xA;    var score: Int&#xA;    var achievements: [Achievement] // stored in a JSON column&#xA;}&#xA;&#xA;try! dbQueue.write { db in&#xA;    // INSERT INTO player (name, score, achievements)&#xA;    // VALUES (&#xA;    //   &#39;Arthur&#39;,&#xA;    //   100,&#xA;    //   &#39;[{&#34;color&#34;:&#34;gold&#34;,&#34;name&#34;:&#34;Use Codable Records&#34;}]&#39;)&#xA;    let achievement = Achievement(name: &#34;Use Codable Records&#34;, color: .gold)&#xA;    let player = Player(name: &#34;Arthur&#34;, score: 100, achievements: [achievement])&#xA;    try player.insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GRDB uses the standard &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsondecoder&#34;&gt;JSONDecoder&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsonencoder&#34;&gt;JSONEncoder&lt;/a&gt; from Foundation. By default, Data values are handled with the &lt;code&gt;.base64&lt;/code&gt; strategy, Date with the &lt;code&gt;.millisecondsSince1970&lt;/code&gt; strategy, and non conforming floats with the &lt;code&gt;.throw&lt;/code&gt; strategy.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the JSON format by implementing those methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static func databaseJSONDecoder(for column: String) -&amp;gt; JSONDecoder&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static func databaseJSONEncoder(for column: String) -&amp;gt; JSONEncoder&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Make sure you set the JSONEncoder &lt;code&gt;sortedKeys&lt;/code&gt; option, available from iOS 11.0+, macOS 10.13+, tvOS 9.0+ and watchOS 4.0+. This option makes sure that the JSON output is stable. This stability is required for &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt; to work as expected, and database observation tools such as &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; to accurately recognize changed records.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Column Names Coding Strategies&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; store their values into database columns that match their coding keys: the &lt;code&gt;teamID&lt;/code&gt; property is stored into the &lt;code&gt;teamID&lt;/code&gt; column.&lt;/p&gt; &#xA;&lt;p&gt;This behavior can be overridden, so that you can, for example, store the &lt;code&gt;teamID&lt;/code&gt; property into the &lt;code&gt;team_id&lt;/code&gt; column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy { get }&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static var databaseColumnEncodingStrategy: DatabaseColumnEncodingStrategy { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Enums/DatabaseColumnDecodingStrategy.html&#34;&gt;DatabaseColumnDecodingStrategy&lt;/a&gt; and &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Enums/DatabaseColumnEncodingStrategy.html&#34;&gt;DatabaseColumnEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt; &#xA;&lt;h3&gt;Date and UUID Coding Strategies&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; encode and decode their Date and UUID properties as described in the general &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;Date and DateComponents&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#uuid&#34;&gt;UUID&lt;/a&gt; chapters.&lt;/p&gt; &#xA;&lt;p&gt;To sum up: dates encode themselves in the &#34;YYYY-MM-DD HH:MM:SS.SSS&#34; format, in the UTC time zone, and decode a variety of date formats and timestamps. UUIDs encode themselves as 16-bytes data blobs, and decode both 16-bytes data blobs and strings such as &#34;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Those behaviors can be overridden:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy { get }&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static var databaseDateEncodingStrategy: DatabaseDateEncodingStrategy { get }&#xA;    static var databaseUUIDEncodingStrategy: DatabaseUUIDEncodingStrategy { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Enums/DatabaseDateDecodingStrategy.html&#34;&gt;DatabaseDateDecodingStrategy&lt;/a&gt;, &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Enums/DatabaseDateEncodingStrategy.html&#34;&gt;DatabaseDateEncodingStrategy&lt;/a&gt;, and &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Enums/DatabaseUUIDEncodingStrategy.html&#34;&gt;DatabaseUUIDEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt; &#xA;&lt;p&gt;There is no customization of uuid decoding, because UUID can already decode all its encoded variants (16-bytes blobs and uuid strings, both uppercase and lowercase).&lt;/p&gt; &#xA;&lt;p&gt;Customized date and uuid handling apply:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When encoding and decoding database rows to and from records (fetching and persistence methods).&lt;/li&gt; &#xA; &lt;li&gt;In requests by single-column primary key: &lt;code&gt;fetchOne(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;filter(id:)&lt;/code&gt;, &lt;code&gt;deleteAll(_:keys:)&lt;/code&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;They do not apply&lt;/em&gt; in other requests based on date or uuid values.&lt;/p&gt; &#xA;&lt;p&gt;So make sure that dates and uuids are properly encoded in your requests. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Codable, FetchableRecord, PersistableRecord, Identifiable {&#xA;    // UUIDs are stored as strings&#xA;    static let databaseUUIDEncodingStrategy = DatabaseUUIDEncodingStrategy.uppercaseString&#xA;    var id: UUID&#xA;    ...&#xA;}&#xA;&#xA;try dbQueue.write { db in&#xA;    let uuid = UUID()&#xA;    let player = Player(id: uuid, ...)&#xA;    &#xA;    // OK: inserts a player in the database, with a string uuid&#xA;    try player.insert(db)&#xA;    &#xA;    // OK: performs a string-based query, finds the inserted player&#xA;    _ = try Player.filter(id: uuid).fetchOne(db)&#xA;&#xA;    // NOT OK: performs a blob-based query, fails to find the inserted player&#xA;    _ = try Player.filter(Column(&#34;id&#34;) == uuid).fetchOne(db)&#xA;    &#xA;    // OK: performs a string-based query, finds the inserted player&#xA;    _ = try Player.filter(Column(&#34;id&#34;) == uuid.uuidString).fetchOne(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The userInfo Dictionary&lt;/h3&gt; &#xA;&lt;p&gt;Your &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; can be stored in the database, but they may also have other purposes. In this case, you may need to customize their implementations of &lt;code&gt;Decodable.init(from:)&lt;/code&gt; and &lt;code&gt;Encodable.encode(to:)&lt;/code&gt;, depending on the context.&lt;/p&gt; &#xA;&lt;p&gt;The standard way to provide such context is the &lt;code&gt;userInfo&lt;/code&gt; dictionary. Implement those properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static var databaseDecodingUserInfo: [CodingUserInfoKey: Any] { get }&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static var databaseEncodingUserInfo: [CodingUserInfoKey: Any] { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, here is a Player type that customizes its decoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A key that holds a decoder&#39;s name&#xA;let decoderName = CodingUserInfoKey(rawValue: &#34;decoderName&#34;)!&#xA;&#xA;struct Player: FetchableRecord, Decodable {&#xA;    init(from decoder: Decoder) throws {&#xA;        // Print the decoder name&#xA;        let decoderName = decoder.userInfo[decoderName] as? String&#xA;        print(&#34;Decoded from \(decoderName ?? &#34;unknown decoder&#34;)&#34;)&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can have a specific decoding from JSON...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// prints &#34;Decoded from JSON&#34;&#xA;let decoder = JSONDecoder()&#xA;decoder.userInfo = [decoderName: &#34;JSON&#34;]&#xA;let player = try decoder.decode(Player.self, from: jsonData)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... and another one from database rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Player: FetchableRecord {&#xA;    static let databaseDecodingUserInfo: [CodingUserInfoKey: Any] = [decoderName: &#34;database row&#34;]&#xA;}&#xA;&#xA;// prints &#34;Decoded from database row&#34;&#xA;let player = try Player.fetchOne(db, ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseDecodingUserInfo&lt;/code&gt; and &lt;code&gt;databaseEncodingUserInfo&lt;/code&gt; properties are explicitly declared as &lt;code&gt;[CodingUserInfoKey: Any]&lt;/code&gt;. If they are not, the Swift compiler may silently miss the protocol requirement, resulting in sticky empty userInfo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Tip: Derive Columns from Coding Keys&lt;/h3&gt; &#xA;&lt;p&gt;Codable types are granted with a &lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&#34;&gt;CodingKeys&lt;/a&gt; enum. You can use them to safely define database columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Codable {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;extension Player: FetchableRecord, PersistableRecord {&#xA;    enum Columns {&#xA;        static let id = Column(CodingKeys.id)&#xA;        static let name = Column(CodingKeys.name)&#xA;        static let score = Column(CodingKeys.score)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GoodPracticesForDesigningRecordTypes.md&#34;&gt;Good Practices for Designing Record Types&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h2&gt;Record Class&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Record&lt;/strong&gt; is a class that is designed to be subclassed. It inherits its features from the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;FetchableRecord, TableRecord, and PersistableRecord&lt;/a&gt; protocols. On top of that, Record instances can compare against previous versions of themselves in order to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;avoid useless updates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Record subclasses define their custom database relationship by overriding database methods. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Place: Record {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;    &#xA;    init(id: Int64?, title: String, isFavorite: Bool, coordinate: CLLocationCoordinate2D) {&#xA;        self.id = id&#xA;        self.title = title&#xA;        self.isFavorite = isFavorite&#xA;        self.coordinate = coordinate&#xA;        super.init()&#xA;    }&#xA;    &#xA;    /// The table name&#xA;    override class var databaseTableName: String { &#34;place&#34; }&#xA;    &#xA;    /// The table columns&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, favorite, latitude, longitude&#xA;    }&#xA;    &#xA;    /// Creates a record from a database row&#xA;    required init(row: Row) {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        isFavorite = row[Columns.favorite]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;        super.init(row: row)&#xA;    }&#xA;    &#xA;    /// The values persisted in the database&#xA;    override func encode(to container: inout PersistenceContainer) {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.favorite] = isFavorite&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;    &#xA;    /// Update record ID after a successful insertion&#xA;    override func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Record Comparison&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Records that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt; protocol can compare against other records, or against previous versions of themselves.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This helps avoiding costly UPDATE statements when a record has not been edited.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-updatechanges-methods&#34;&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databaseequals-method&#34;&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databasechanges-and-hasdatabasechanges-methods&#34;&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;updateChanges&lt;/code&gt; methods perform a database update of the changed columns only (and does nothing if record has no change).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:from:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This method lets you compare two records:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let oldPlayer = try Player.fetchOne(db, id: 42) {&#xA;    var newPlayer = oldPlayer&#xA;    newPlayer.score = 100&#xA;    if try newPlayer.updateChanges(db, from: oldPlayer) {&#xA;        print(&#34;player was modified, and updated in the database&#34;)&#xA;    } else {&#xA;        print(&#34;player was not modified, and database was not hit&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:with:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This method lets you update a record in place:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if var player = try Player.fetchOne(db, id: 42) {&#xA;    let modified = try player.updateChanges(db) {&#xA;        $0.score = 100&#xA;    }&#xA;    if modified {&#xA;        print(&#34;player was modified, and updated in the database&#34;)&#xA;    } else {&#xA;        print(&#34;player was not modified, and database was not hit&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:)&lt;/code&gt; (Record class only)&lt;/p&gt; &lt;p&gt;Instances of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class are able to compare against themselves, and know if they have changes that have not been saved since the last fetch or saving:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Record class only&#xA;if let player = try Player.fetchOne(db, id: 42) {&#xA;    player.score = 100&#xA;    if try player.updateChanges(db) {&#xA;        print(&#34;player was modified, and updated in the database&#34;)&#xA;    } else {&#xA;        print(&#34;player was not modified, and database was not hit&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/h3&gt; &#xA;&lt;p&gt;This method returns whether two records have the same database representation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let oldPlayer: Player = ...&#xA;var newPlayer: Player = ...&#xA;if newPlayer.databaseEquals(oldPlayer) == false {&#xA;    try newPlayer.save(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: The comparison is performed on the database representation of records. As long as your record type adopts the EncodableRecord protocol, you don&#39;t need to care about Equatable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;databaseChanges(from:)&lt;/code&gt; returns a dictionary of differences between two records:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let oldPlayer = Player(id: 1, name: &#34;Arthur&#34;, score: 100)&#xA;let newPlayer = Player(id: 1, name: &#34;Arthur&#34;, score: 1000)&#xA;for (column, oldValue) in newPlayer.databaseChanges(from: oldPlayer) {&#xA;    print(&#34;\(column) was \(oldValue)&#34;)&#xA;}&#xA;// prints &#34;score was 100&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class is able to compare against itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Record class only&#xA;let player = Player(id: 1, name: &#34;Arthur&#34;, score: 100)&#xA;try player.insert(db)&#xA;player.score = 1000&#xA;for (column, oldValue) in player.databaseChanges {&#xA;    print(&#34;\(column) was \(oldValue)&#34;)&#xA;}&#xA;// prints &#34;score was 100&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; instances also have a &lt;code&gt;hasDatabaseChanges&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Record class only&#xA;player.score = 1000&#xA;if player.hasDatabaseChanges {&#xA;    try player.save(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Record.hasDatabaseChanges&lt;/code&gt; is false after a Record instance has been fetched or saved into the database. Subsequent modifications may set it, or not: &lt;code&gt;hasDatabaseChanges&lt;/code&gt; is based on value comparison. &lt;strong&gt;Setting a property to the same value does not set the changed flag&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = Player(name: &#34;Barbara&#34;, score: 750)&#xA;player.hasDatabaseChanges // true&#xA;&#xA;try player.insert(db)&#xA;player.hasDatabaseChanges // false&#xA;&#xA;player.name = &#34;Barbara&#34;&#xA;player.hasDatabaseChanges // false&#xA;&#xA;player.score = 1000&#xA;player.hasDatabaseChanges // true&#xA;player.databaseChanges    // [&#34;score&#34;: 750]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an efficient algorithm which synchronizes the content of a database table with a JSON payload, check &lt;a href=&#34;https://github.com/groue/SortedDifference&#34;&gt;groue/SortedDifference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Record Customization Options&lt;/h2&gt; &#xA;&lt;p&gt;GRDB records come with many default behaviors, that are designed to fit most situations. Many of those defaults can be customized for your specific needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#customizing-the-persistence-methods&#34;&gt;Customizing the Persistence Methods&lt;/a&gt;: define what happens when you call a persistence method such as &lt;code&gt;player.insert(db)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&#34;&gt;Conflict Resolution&lt;/a&gt;: Run &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; queries, and generally define what happens when a persistence method violates a unique index.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-implicit-rowid-primary-key&#34;&gt;The Implicit RowID Primary Key&lt;/a&gt;: all about the special &lt;code&gt;rowid&lt;/code&gt; column.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;: define which columns are selected by requests such as &lt;code&gt;Player.fetchAll(db)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&#34;&gt;Beyond FetchableRecord&lt;/a&gt;: the FetchableRecord protocol is not the end of the story.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; have a few extra options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;JSON Columns&lt;/a&gt;: control the format of JSON columns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-names-coding-strategies&#34;&gt;Column Names Coding Strategies&lt;/a&gt;: control how coding keys are turned into column names&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;Date and UUID Coding Strategies&lt;/a&gt;: control the format of Date and UUID properties in your Codable records.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;The userInfo Dictionary&lt;/a&gt;: adapt your Codable implementation for the database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Conflict Resolution&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Insertions and updates can create conflicts&lt;/strong&gt;: for example, a query may attempt to insert a duplicate row that violates a unique index.&lt;/p&gt; &#xA;&lt;p&gt;Those conflicts normally end with an error. Yet SQLite let you alter the default behavior, and handle conflicts with specific policies. For example, the &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; statement handles conflicts with the &#34;replace&#34; policy which replaces the conflicting row instead of throwing an error.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.sqlite.org/lang_conflict.html&#34;&gt;five different policies&lt;/a&gt; are: abort (the default), replace, rollback, fail, and ignore.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite let you specify conflict policies at two different places:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In the definition of the database table:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE player (&#xA;//     id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;//     email TEXT UNIQUE ON CONFLICT REPLACE&#xA;// )&#xA;try db.create(table: &#34;player&#34;) { t in&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    t.column(&#34;email&#34;, .text).unique(onConflict: .replace) // &amp;lt;--&#xA;}&#xA;&#xA;// Despite the unique index on email, both inserts succeed.&#xA;// The second insert replaces the first row:&#xA;try db.execute(sql: &#34;INSERT INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;try db.execute(sql: &#34;INSERT INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In each modification query:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE player (&#xA;//     id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;//     email TEXT UNIQUE&#xA;// )&#xA;try db.create(table: &#34;player&#34;) { t in&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    t.column(&#34;email&#34;, .text).unique()&#xA;}&#xA;&#xA;// Again, despite the unique index on email, both inserts succeed.&#xA;try db.execute(sql: &#34;INSERT OR REPLACE INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;try db.execute(sql: &#34;INSERT OR REPLACE INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When you want to handle conflicts at the query level, specify a custom &lt;code&gt;persistenceConflictPolicy&lt;/code&gt; in your type that adopts the PersistableRecord protocol. It will alter the INSERT and UPDATE queries run by the &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&#34;&gt;persistence methods&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol MutablePersistableRecord {&#xA;    /// The policy that handles SQLite conflicts when records are&#xA;    /// inserted or updated.&#xA;    ///&#xA;    /// This property is optional: its default value uses the ABORT&#xA;    /// policy for both insertions and updates, so that GRDB generate&#xA;    /// regular INSERT and UPDATE queries.&#xA;    static var persistenceConflictPolicy: PersistenceConflictPolicy { get }&#xA;}&#xA;&#xA;struct Player : MutablePersistableRecord {&#xA;    static let persistenceConflictPolicy = PersistenceConflictPolicy(&#xA;        insert: .replace,&#xA;        update: .replace)&#xA;}&#xA;&#xA;// INSERT OR REPLACE INTO player (...) VALUES (...)&#xA;try player.insert(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;ignore&lt;/code&gt; policy does not play well at all with the &lt;code&gt;didInsert&lt;/code&gt; method which notifies the rowID of inserted records. Choose your poison:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;if you specify the &lt;code&gt;ignore&lt;/code&gt; policy in the database table definition, don&#39;t implement the &lt;code&gt;didInsert&lt;/code&gt; method: it will be called with some random id in case of failed insert.&lt;/li&gt; &#xA;  &lt;li&gt;if you specify the &lt;code&gt;ignore&lt;/code&gt; policy at the query level, the &lt;code&gt;didInsert&lt;/code&gt; method is never called.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;replace&lt;/code&gt; policy may have to delete rows so that inserts and updates can succeed. Those deletions are not reported to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactionobserver-protocol&#34;&gt;transaction observers&lt;/a&gt; (this might change in a future release of SQLite).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The Implicit RowID Primary Key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;All SQLite tables have a primary key.&lt;/strong&gt; Even when the primary key is not explicit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// No explicit primary key&#xA;try db.create(table: &#34;event&#34;) { t in&#xA;    t.column(&#34;message&#34;, .text)&#xA;    t.column(&#34;date&#34;, .datetime)&#xA;}&#xA;&#xA;// No way to define an explicit primary key&#xA;try db.create(virtualTable: &#34;book&#34;, using: FTS4()) { t in&#xA;    t.column(&#34;title&#34;)&#xA;    t.column(&#34;author&#34;)&#xA;    t.column(&#34;body&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The implicit primary key is stored in the hidden column &lt;code&gt;rowid&lt;/code&gt;. Hidden means that &lt;code&gt;SELECT *&lt;/code&gt; does not select it, and yet it can be selected and queried: &lt;code&gt;SELECT *, rowid ... WHERE rowid = 1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some GRDB methods will automatically use this hidden column when a table has no explicit primary key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM event WHERE rowid = 1&#xA;let event = try Event.fetchOne(db, id: 1)&#xA;&#xA;// DELETE FROM book WHERE rowid = 1&#xA;try Book.deleteOne(db, id: 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Exposing the RowID Column&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;By default, a record type that wraps a table without any explicit primary key doesn&#39;t know about the hidden rowid column.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Without primary key, records don&#39;t have any identity, and the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&#34;&gt;persistence method&lt;/a&gt; can behave in undesired fashion: &lt;code&gt;update()&lt;/code&gt; throws errors, &lt;code&gt;save()&lt;/code&gt; always performs insertions and may break constraints, &lt;code&gt;exists()&lt;/code&gt; is always false.&lt;/p&gt; &#xA;&lt;p&gt;When SQLite won&#39;t let you provide an explicit primary key (as in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;full-text&lt;/a&gt; tables, for example), you may want to make your record type fully aware of the hidden rowid column:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Have the &lt;code&gt;databaseSelection&lt;/code&gt; static property (from the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol) return the hidden rowid column:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Event : TableRecord {&#xA;    static let databaseSelection: [SQLSelectable] = [AllColumns(), Column.rowID]&#xA;}&#xA;&#xA;// When you subclass Record, you need an override:&#xA;class Book : Record {&#xA;    override class var databaseSelection: [SQLSelectable] {&#xA;        [AllColums(), Column.rowID]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;GRDB will then select the &lt;code&gt;rowid&lt;/code&gt; column by default:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT *, rowid FROM event&#xA;let events = try Event.fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Have &lt;code&gt;init(row:)&lt;/code&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol consume the &#34;rowid&#34; column:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Event : FetchableRecord {&#xA;    var id: Int64?&#xA;    &#xA;    init(row: Row) {&#xA;        id = row[Column.rowID] // or `row[.rowID]` with Swift 5.5+&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Your fetched records will then know their ids:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let event = try Event.fetchOne(db)!&#xA;event.id // some value&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Encode the rowid in &lt;code&gt;encode(to:)&lt;/code&gt;, and keep it in the &lt;code&gt;didInsert(with:for:)&lt;/code&gt; method (both from the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord and MutablePersistableRecord&lt;/a&gt; protocols):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Event : MutablePersistableRecord {&#xA;    var id: Int64?&#xA;    &#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[Column.rowID] = id // or `container[.rowID]` with Swift 5.5+&#xA;        container[&#34;message&#34;] = message&#xA;        container[&#34;date&#34;] = date&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will then be able to track your record ids, update them, or check for their existence:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let event = Event(message: &#34;foo&#34;, date: Date())&#xA;&#xA;// Insertion sets the record id:&#xA;try event.insert(db)&#xA;event.id // some value&#xA;&#xA;// Record can be updated:&#xA;event.message = &#34;bar&#34;&#xA;try event.update(db)&#xA;&#xA;// Record knows if it exists:&#xA;event.exists(db) // true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Beyond FetchableRecord&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Some GRDB users eventually discover that the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol does not fit all situations.&lt;/strong&gt; Use cases that are not well handled by FetchableRecord include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Your application needs polymorphic row decoding: it decodes some type or another, depending on the values contained in a database row.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your application needs to decode rows with a context: each decoded value should be initialized with some extra value that does not come from the database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your application needs a record type that supports untrusted databases, and may fail at decoding database rows (throw an error when a row contains invalid values).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since those use cases are not well handled by FetchableRecord, don&#39;t try to implement them on top of this protocol: you&#39;ll just fight the framework.&lt;/p&gt; &#xA;&lt;p&gt;Instead, please have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Playgrounds/CustomizedDecodingOfDatabaseRows.playground/Contents.swift&#34;&gt;CustomizedDecodingOfDatabaseRows&lt;/a&gt; playground. You&#39;ll run some sample code, and learn how to escape FetchableRecord when you need. And remember that leaving FetchableRecord will not deprive you of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;query interface requests&lt;/a&gt; and generally all SQL generation features of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Examples of Record Definitions&lt;/h2&gt; &#xA;&lt;p&gt;We will show below how to declare a record type for the following database table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.create(table: &#34;place&#34;) { t in&#xA;        t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;        t.column(&#34;title&#34;, .text).notNull()&#xA;        t.column(&#34;isFavorite&#34;, .boolean).notNull().defaults(to: false)&#xA;        t.column(&#34;longitude&#34;, .double).notNull()&#xA;        t.column(&#34;latitude&#34;, .double).notNull()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each one of the three examples below is correct. You will pick one or the other depending on your personal preferences and the requirements of your application:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Define a Codable struct, and adopt the record protocols you need&lt;/summary&gt; &#xA; &lt;p&gt;This is the shortest way to define a record type.&lt;/p&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: Codable {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    private var latitude: CLLocationDegrees&#xA;    private var longitude: CLLocationDegrees&#xA;    &#xA;    var coordinate: CLLocationCoordinate2D {&#xA;        get {&#xA;            CLLocationCoordinate2D(&#xA;                latitude: latitude,&#xA;                longitude: longitude)&#xA;        }&#xA;        set {&#xA;            latitude = newValue.latitude&#xA;            longitude = newValue.longitude&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// SQL generation&#xA;extension Place: TableRecord {&#xA;    /// The table columns&#xA;    enum Columns {&#xA;        static let id = Column(CodingKeys.id)&#xA;        static let title = Column(CodingKeys.title)&#xA;        static let isFavorite = Column(CodingKeys.isFavorite)&#xA;        static let latitude = Column(CodingKeys.latitude)&#xA;        static let longitude = Column(CodingKeys.longitude)&#xA;    }&#xA;}&#xA;&#xA;// Fetching methods&#xA;extension Place: FetchableRecord { }&#xA;&#xA;// Persistence methods&#xA;extension Place: MutablePersistableRecord {&#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Define a plain struct, and adopt the record protocols you need&lt;/summary&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;}&#xA;&#xA;// SQL generation&#xA;extension Place: TableRecord {&#xA;    /// The table columns&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, isFavorite, latitude, longitude&#xA;    }&#xA;}&#xA;&#xA;// Fetching methods&#xA;extension Place: FetchableRecord {&#xA;    /// Creates a record from a database row&#xA;    init(row: Row) {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        isFavorite = row[Columns.isFavorite]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;    }&#xA;}&#xA;&#xA;// Persistence methods&#xA;extension Place: MutablePersistableRecord {&#xA;    /// The values persisted in the database&#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.isFavorite] = isFavorite&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Define a plain struct optimized for fetching performance&lt;/summary&gt; &#xA; &lt;p&gt;This struct derives its persistence methods from the standard Encodable protocol (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;), but performs optimized row decoding by accessing database columns with numeric indexes.&lt;/p&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: Encodable {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    private var latitude: CLLocationDegrees&#xA;    private var longitude: CLLocationDegrees&#xA;    &#xA;    var coordinate: CLLocationCoordinate2D {&#xA;        get {&#xA;            CLLocationCoordinate2D(&#xA;                latitude: latitude,&#xA;                longitude: longitude)&#xA;        }&#xA;        set {&#xA;            latitude = newValue.latitude&#xA;            longitude = newValue.longitude&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// SQL generation&#xA;extension Place: TableRecord {&#xA;    /// The table columns&#xA;    enum Columns {&#xA;        static let id = Column(CodingKeys.id)&#xA;        static let title = Column(CodingKeys.title)&#xA;        static let isFavorite = Column(CodingKeys.isFavorite)&#xA;        static let latitude = Column(CodingKeys.latitude)&#xA;        static let longitude = Column(CodingKeys.longitude)&#xA;    }&#xA;    &#xA;    /// Arrange the selected columns and lock their order&#xA;    static let databaseSelection: [SQLSelectable] = [&#xA;        Columns.id,&#xA;        Columns.title,&#xA;        Columns.favorite,&#xA;        Columns.latitude,&#xA;        Columns.longitude]&#xA;}&#xA;&#xA;// Fetching methods&#xA;extension Place: FetchableRecord {&#xA;    /// Creates a record from a database row&#xA;    init(row: Row) {&#xA;        // For high performance, use numeric indexes that match the&#xA;        // order of Place.databaseSelection&#xA;        id = row[0]&#xA;        title = row[1]&#xA;        isFavorite = row[2]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[3],&#xA;            longitude: row[4])&#xA;    }&#xA;}&#xA;&#xA;// Persistence methods&#xA;extension Place: MutablePersistableRecord {&#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Subclass the &lt;code&gt;Record&lt;/code&gt; class&lt;/summary&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record class&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Place: Record {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;    &#xA;    init(id: Int64?, title: String, isFavorite: Bool, coordinate: CLLocationCoordinate2D) {&#xA;        self.id = id&#xA;        self.title = title&#xA;        self.isFavorite = isFavorite&#xA;        self.coordinate = coordinate&#xA;        super.init()&#xA;    }&#xA;    &#xA;    /// The table name&#xA;    override class var databaseTableName: String { &#34;place&#34; }&#xA;    &#xA;    /// The table columns&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, isFavorite, latitude, longitude&#xA;    }&#xA;    &#xA;    /// Creates a record from a database row&#xA;    required init(row: Row) {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        isFavorite = row[Columns.isFavorite]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;        super.init(row: row)&#xA;    }&#xA;    &#xA;    /// The values persisted in the database&#xA;    override func encode(to container: inout PersistenceContainer) {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.isFavorite] = isFavorite&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    override func didInsert(with rowID: Int64, for column: String?) {&#xA;        id = rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;List of Record Methods&lt;/h2&gt; &#xA;&lt;p&gt;This is the list of record methods, along with their required protocols. The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class adopts all these protocols, and adds a few extra methods.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Protocols&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Core Methods&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;init(row:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseTableName&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseSelection&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.persistenceConflictPolicy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.encode(to:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.didInsert(with:for:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Insert and Update Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.insert(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.inserted(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.save(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.saved(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.update(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.update(db, columns:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db, from:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db) { ... }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.updateAll(db, ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).updateAll(db, ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Delete Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.delete(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteOne(db, key:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteOne(db, id:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteAll(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteAll(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).deleteAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Check Record Existence&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.exists(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.exists(db, key: ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.exists(db, id: ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).isEmpty(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Convert Record to Dictionary&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseDictionary&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Count Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCount(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchCount(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Record &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;Cursors&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;³&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;⁴&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchCursor(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Record Arrays&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;³&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;⁴&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Record Sets&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;³&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;⁴&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchSet(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Individual Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db, key:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db, id:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;³&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;⁴&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchOne(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseDecodingUserInfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseJSONDecoder(for:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseDateDecodingStrategy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseEncodingUserInfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseJSONEncoder(for:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseDateEncodingStrategy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseUUIDEncodingStrategy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Define &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.belongsTo(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasMany(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasOne(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasManyThrough(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasOneThrough(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Building Query Interface &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;Requests&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.request(for:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.all()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.none()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.select(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.select(..., as:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.selectID()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; Identifiable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.annotated(with:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(id:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; Identifiable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(ids:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; Identifiable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.matching(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.including(all:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.including(optional:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.including(required:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.joining(optional:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.joining(required:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.group(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.groupByPrimaryKey()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.having(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.order(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.orderByPrimaryKey()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.limit(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.with(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;²&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseEquals(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseChanges(from:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db, from:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db) { ... }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.hasDatabaseChanges&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseChanges&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-1&#34;&gt;¹&lt;/a&gt; All unique keys are supported: primary keys (single-column, composite, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-implicit-rowid-primary-key&#34;&gt;implicit RowID&lt;/a&gt;) and unique indexes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.fetchOne(db, id: 1)                                // Player?&#xA;try Player.fetchOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;]) // Player?&#xA;try Country.fetchAll(db, keys: [&#34;FR&#34;, &#34;US&#34;])                  // [Country]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-2&#34;&gt;²&lt;/a&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;Fetch Requests&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.filter(emailColumn != nil).order(nameColumn)&#xA;let players = try request.fetchAll(db)  // [Player]&#xA;let count = try request.fetchCount(db)  // Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-3&#34;&gt;³&lt;/a&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;SQL queries&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = try Player.fetchOne(db, sql: &#34;SELECT * FROM player WHERE id = ?&#34;, arguments: [1]) // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-4&#34;&gt;⁴&lt;/a&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;Prepared Statements&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statement = try db.makeStatement(sql: &#34;SELECT * FROM player WHERE id = ?&#34;)&#xA;let player = try Player.fetchOne(statement, arguments: [1])  // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;The Query Interface&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The query interface lets you write pure Swift instead of SQL:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    // Update database schema&#xA;    try db.create(table: &#34;wine&#34;) { t in ... }&#xA;    &#xA;    // Fetch records&#xA;    let wines = try Wine&#xA;        .filter(originColumn == &#34;Burgundy&#34;)&#xA;        .order(priceColumn)&#xA;        .fetchAll(db)&#xA;    &#xA;    // Count&#xA;    let count = try Wine&#xA;        .filter(colorColumn == Color.red)&#xA;        .fetchCount(db)&#xA;    &#xA;    // Update&#xA;    try Wine&#xA;        .filter(originColumn == &#34;Burgundy&#34;)&#xA;        .updateAll(db, priceColumn *= 0.75)&#xA;    &#xA;    // Delete&#xA;    try Wine&#xA;        .filter(corkedColumn == true)&#xA;        .deleteAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to open a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt; before you can query the database.&lt;/p&gt; &#xA;&lt;p&gt;Please bear in mind that the query interface can not generate all possible SQL queries. You may also &lt;em&gt;prefer&lt;/em&gt; writing SQL, and this is just OK. From little snippets to full queries, your SQL skills are welcome:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    // Update database schema (with SQL)&#xA;    try db.execute(sql: &#34;CREATE TABLE wine (...)&#34;)&#xA;    &#xA;    // Fetch records (with SQL)&#xA;    let wines = try Wine.fetchAll(db,&#xA;        sql: &#34;SELECT * FROM wine WHERE origin = ? ORDER BY price&#34;,&#xA;        arguments: [&#34;Burgundy&#34;])&#xA;    &#xA;    // Count (with an SQL snippet)&#xA;    let count = try Wine&#xA;        .filter(sql: &#34;color = ?&#34;, arguments: [Color.red])&#xA;        .fetchCount(db)&#xA;    &#xA;    // Update (with SQL)&#xA;    try db.execute(sql: &#34;UPDATE wine SET price = price * 0.75 WHERE origin = &#39;Burgundy&#39;&#34;)&#xA;    &#xA;    // Delete (with SQL)&#xA;    try db.execute(sql: &#34;DELETE FROM wine WHERE corked&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So don&#39;t miss the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;SQL API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don&#39;t have your application rely on any specific SQL output.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-schema&#34;&gt;Database Schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#expressions&#34;&gt;Expressions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-operators&#34;&gt;SQL Operators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&#34;&gt;SQL Functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-from-requests&#34;&gt;Fetching from Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-by-key&#34;&gt;Fetching by Key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#testing-for-record-existence&#34;&gt;Testing for Record Existence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-aggregated-values&#34;&gt;Fetching Aggregated Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#delete-requests&#34;&gt;Delete Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#update-requests&#34;&gt;Update Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-requests&#34;&gt;Custom Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations and Joins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;Common Table Expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/QueryInterfaceOrganization.md&#34;&gt;Query Interface Organization&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Database Schema&lt;/h2&gt; &#xA;&lt;p&gt;Once granted with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;, you can setup your database schema without writing SQL:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#create-tables&#34;&gt;Create Tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#modify-tables&#34;&gt;Modify Tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#drop-tables&#34;&gt;Drop Tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#create-indexes&#34;&gt;Create Indexes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Create Tables&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE place (&#xA;//   id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;//   title TEXT,&#xA;//   favorite BOOLEAN NOT NULL DEFAULT 0,&#xA;//   latitude DOUBLE NOT NULL,&#xA;//   longitude DOUBLE NOT NULL&#xA;// )&#xA;try db.create(table: &#34;place&#34;) { t in&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    t.column(&#34;title&#34;, .text)&#xA;    t.column(&#34;favorite&#34;, .boolean).notNull().defaults(to: false)&#xA;    t.column(&#34;longitude&#34;, .double).notNull()&#xA;    t.column(&#34;latitude&#34;, .double).notNull()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;create(table:)&lt;/code&gt; method covers nearly all SQLite table creation features. For virtual tables, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;Full-Text Search&lt;/a&gt;, or use raw SQL.&lt;/p&gt; &#xA;&lt;p&gt;SQLite itself has many reference documents about table creation: &lt;a href=&#34;https://www.sqlite.org/lang_createtable.html&#34;&gt;CREATE TABLE&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/datatype3.html&#34;&gt;Datatypes In SQLite Version 3&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/foreignkeys.html&#34;&gt;SQLite Foreign Key Support&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/lang_conflict.html&#34;&gt;ON CONFLICT&lt;/a&gt;, &lt;a href=&#34;https://www.sqlite.org/withoutrowid.html&#34;&gt;The WITHOUT ROWID Optimization&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configure table creation&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE example ( ... )&#xA;try db.create(table: &#34;example&#34;) { t in ... }&#xA;    &#xA;// CREATE TEMPORARY TABLE example IF NOT EXISTS (&#xA;try db.create(table: &#34;example&#34;, options: [.temporary, .ifNotExists]) { t in ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: database table names should be singular, and camelCased. Make them look like Swift identifiers: &lt;code&gt;place&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt;, &lt;code&gt;postalAddress&lt;/code&gt;, &lt;code&gt;httpRequest&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;This will help you using &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt; when you need them. Database table names that follow another naming convention are totally OK, but you will need to perform extra configuration.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&#34;https://www.sqlite.org/withoutrowid.html&#34;&gt;&lt;code&gt;WITHOUT ROWID&lt;/code&gt;&lt;/a&gt; tables can not be tracked with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;Database Observation&lt;/a&gt; tools.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Add regular columns&lt;/strong&gt; with their name and eventual type (&lt;code&gt;text&lt;/code&gt;, &lt;code&gt;integer&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;blob&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;any&lt;/code&gt;) - see &lt;a href=&#34;https://www.sqlite.org/datatype3.html&#34;&gt;SQLite data types&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE example (&#xA;//   a,&#xA;//   name TEXT,&#xA;//   creationDate DATETIME,&#xA;try db.create(table: &#34;example&#34;) { t in&#xA;    t.column(&#34;a&#34;)&#xA;    t.column(&#34;name&#34;, .text)&#xA;    t.column(&#34;creationDate&#34;, .datetime)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Define &lt;strong&gt;not null&lt;/strong&gt; columns, and set &lt;strong&gt;default&lt;/strong&gt; values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // email TEXT NOT NULL,&#xA;    t.column(&#34;email&#34;, .text).notNull()&#xA;    &#xA;    // name TEXT NOT NULL DEFAULT &#39;Anonymous&#39;,&#xA;    t.column(&#34;name&#34;, .text).notNull().defaults(to: &#34;Anonymous&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use an individual column as &lt;strong&gt;primary&lt;/strong&gt;, &lt;strong&gt;unique&lt;/strong&gt;, or &lt;strong&gt;foreign key&lt;/strong&gt;. When defining a foreign key, the referenced column is the primary key of the referenced table (unless you specify otherwise):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    &#xA;    // uuid TEXT PRIMARY KEY,&#xA;    t.column(&#34;uuid&#34;, .text).primaryKey()&#xA;    &#xA;    // email TEXT UNIQUE,&#xA;    t.column(&#34;email&#34;, .text).unique()&#xA;    &#xA;    // countryCode TEXT REFERENCES country(code) ON DELETE CASCADE,&#xA;    t.column(&#34;countryCode&#34;, .text).references(&#34;country&#34;, onDelete: .cascade)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: when you need an integer primary key that automatically generates unique values, it is highly recommended that you use the &lt;code&gt;autoIncrementedPrimaryKey&lt;/code&gt; method:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.create(table: &#34;example&#34;) { t in&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The reason for this recommendation is that auto-incremented primary keys prevent the reuse of ids. This prevents your app or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;database observation tools&lt;/a&gt; to think that a row was updated, when it was actually deleted, then replaced. Depending on your application needs, this may be acceptable. But usually it is not.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Create an index&lt;/strong&gt; on the column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    t.column(&#34;score&#34;, .integer).indexed()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For extra index options, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#create-indexes&#34;&gt;Create Indexes&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Perform integrity checks&lt;/strong&gt; on individual columns, and SQLite will only let conforming rows in. In the example below, the &lt;code&gt;$0&lt;/code&gt; closure variable is a column which lets you build any SQL &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#expressions&#34;&gt;expression&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // name TEXT CHECK (LENGTH(name) &amp;gt; 0)&#xA;    // score INTEGER CHECK (score &amp;gt; 0)&#xA;    t.column(&#34;name&#34;, .text).check { length($0) &amp;gt; 0 }&#xA;    t.column(&#34;score&#34;, .integer).check(sql: &#34;score &amp;gt; 0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Columns can also be defined with a raw sql String, or an &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md#sql-literal&#34;&gt;SQL literal&lt;/a&gt; in which you can safely embed raw values without any risk of syntax errors or SQL injection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    t.column(sql: &#34;name TEXT&#34;)&#xA;    &#xA;    let defaultName: String = ...&#xA;    t.column(literal: &#34;name TEXT DEFAULT \(defaultName)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other &lt;strong&gt;table constraints&lt;/strong&gt; can involve several columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // PRIMARY KEY (a, b),&#xA;    t.primaryKey([&#34;a&#34;, &#34;b&#34;])&#xA;    &#xA;    // UNIQUE (a, b) ON CONFLICT REPLACE,&#xA;    t.uniqueKey([&#34;a&#34;, &#34;b&#34;], onConflict: .replace)&#xA;    &#xA;    // FOREIGN KEY (a, b) REFERENCES parents(c, d),&#xA;    t.foreignKey([&#34;a&#34;, &#34;b&#34;], references: &#34;parents&#34;)&#xA;    &#xA;    // CHECK (a + b &amp;lt; 10),&#xA;    t.check(Column(&#34;a&#34;) + Column(&#34;b&#34;) &amp;lt; 10)&#xA;    &#xA;    // CHECK (a + b &amp;lt; 10)&#xA;    t.check(sql: &#34;a + b &amp;lt; 10&#34;)&#xA;    &#xA;    // Raw SQL constraints&#xA;    t.constraint(sql: &#34;CHECK (a + b &amp;lt; 10)&#34;)&#xA;    t.constraint(literal: &#34;CHECK (a + b &amp;lt; \(10))&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sqlite.org/gencol.html&#34;&gt;Generated columns&lt;/a&gt; are available with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    t.column(&#34;totalScore&#34;, .integer).generatedAs(sql: &#34;score + bonus&#34;)&#xA;    t.column(&#34;totalScore&#34;, .integer).generatedAs(Column(&#34;score&#34;) + Column(&#34;bonus&#34;))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modify Tables&lt;/h3&gt; &#xA;&lt;p&gt;SQLite lets you modify existing tables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// ALTER TABLE referer RENAME TO referrer&#xA;try db.rename(table: &#34;referer&#34;, to: &#34;referrer&#34;)&#xA;&#xA;// ALTER TABLE player ADD COLUMN hasBonus BOOLEAN&#xA;// ALTER TABLE player RENAME COLUMN url TO homeURL&#xA;// ALTER TABLE player DROP COLUMN score&#xA;try db.alter(table: &#34;player&#34;) { t in&#xA;    t.add(column: &#34;hasBonus&#34;, .boolean)&#xA;    t.rename(column: &#34;url&#34;, to: &#34;homeURL&#34;) // SQLite 3.25+&#xA;    t.drop(column: &#34;score&#34;) // SQLite 3.35+&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: SQLite restricts the possible table alterations, and may require you to recreate dependent triggers or views. See the documentation of the &lt;a href=&#34;https://www.sqlite.org/lang_altertable.html&#34;&gt;ALTER TABLE&lt;/a&gt; for details. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Migrations.md#advanced-database-schema-changes&#34;&gt;Advanced Database Schema Changes&lt;/a&gt; for a way to lift restrictions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Drop Tables&lt;/h3&gt; &#xA;&lt;p&gt;Drop tables with the &lt;code&gt;drop(table:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.drop(table: &#34;obsolete&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create Indexes&lt;/h3&gt; &#xA;&lt;p&gt;Create indexes with the &lt;code&gt;create(index:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE INDEX byName ON users(lastName, firstName)&#xA;try db.create(index: &#34;byName&#34;, on: &#34;users&#34;, columns: [&#34;lastName, &#34;firstName&#34;])&#xA;&#xA;// CREATE UNIQUE INDEX byEmail IF NOT EXISTS ON users(email)&#xA;try db.create(index: &#34;byEmail&#34;, on: &#34;users&#34;, columns: [&#34;email&#34;], options: [.unique, .ifNotExists])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Relevant SQLite documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/lang_createindex.html&#34;&gt;CREATE INDEX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/expridx.html&#34;&gt;Indexes On Expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/partialindex.html&#34;&gt;Partial Indexes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The query interface requests&lt;/strong&gt; let you fetch values from the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.filter(emailColumn != nil).order(nameColumn)&#xA;let players = try request.fetchAll(db)  // [Player]&#xA;let count = try request.fetchCount(db)  // Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Query interface requests usually start from &lt;strong&gt;a type&lt;/strong&gt; that adopts the &lt;code&gt;TableRecord&lt;/code&gt; protocol, such as a &lt;code&gt;Record&lt;/code&gt; subclass (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Player: Record { ... }&#xA;&#xA;// The request for all players:&#xA;let request = Player.all()&#xA;let players = try request.fetchAll(db) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you can not use a record type, use &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// The request for all rows from the player table:&#xA;let table = Table(&#34;player&#34;)&#xA;let request = table.all()&#xA;let rows = try request.fetchAll(db)    // [Row]&#xA;&#xA;// The request for all players from the player table:&#xA;let table = Table&amp;lt;Player&amp;gt;(&#34;player&#34;)&#xA;let request = table.all()&#xA;let players = try request.fetchAll(db) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: all examples in the documentation below use a record type, but you can always substitute a &lt;code&gt;Table&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Next, declare the table &lt;strong&gt;columns&lt;/strong&gt; that you want to use for filtering, or sorting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let idColumn = Column(&#34;id&#34;)&#xA;let nameColumn = Column(&#34;name&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also declare column enums, if you prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Columns.id and Columns.name can be used just as&#xA;// idColumn and nameColumn declared above.&#xA;enum Columns: String, ColumnExpression {&#xA;    case id&#xA;    case name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now build requests with the following methods: &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;distinct&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;having&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;reversed&lt;/code&gt;, &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;joining&lt;/code&gt;, &lt;code&gt;including&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;. All those methods return another request, which you can further refine by applying another method: &lt;code&gt;Player.select(...).filter(...).order(...)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all()&lt;/code&gt;, &lt;code&gt;none()&lt;/code&gt;: the requests for all rows, or no row.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player&#xA;Player.all()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, all columns are selected. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;select(...)&lt;/code&gt; and &lt;code&gt;select(..., as:)&lt;/code&gt; define the selected columns. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT name FROM player&#xA;Player.select(nameColumn, as: String.self)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;selectID()&lt;/code&gt; is available on &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;. It supports all tables that have a single-column primary key:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT id FROM player&#xA;Player.selectID()&#xA;&#xA;// SELECT id FROM player WHERE name IS NOT NULL&#xA;Player.filter(nameColumn != nil).selectID()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotated(with: expression...)&lt;/code&gt; extends the selection.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT *, (score + bonus) AS total FROM player&#xA;Player.annotated(with: (scoreColumn + bonusColumn).forKey(&#34;total&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotated(with: aggregate)&lt;/code&gt; extends the selection with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md#association-aggregates&#34;&gt;association aggregates&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT team.*, COUNT(DISTINCT player.id) AS playerCount&#xA;// FROM team&#xA;// LEFT JOIN player ON player.teamId = team.id&#xA;// GROUP BY team.id&#xA;Team.annotated(with: Team.players.count)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotated(withRequired: association)&lt;/code&gt; and &lt;code&gt;annotated(withOptional: association)&lt;/code&gt; extends the selection with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT player.*, team.color&#xA;// FROM player&#xA;// JOIN team ON team.id = player.teamId&#xA;Player.annotated(withRequired: Player.team.select(colorColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;distinct()&lt;/code&gt; performs uniquing.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT DISTINCT name FROM player&#xA;Player.select(nameColumn, as: String.self).distinct()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;filter(expression)&lt;/code&gt; applies conditions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id IN (1, 2, 3)&#xA;Player.filter([1,2,3].contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE (name IS NOT NULL) AND (height &amp;gt; 1.75)&#xA;Player.filter(nameColumn != nil &amp;amp;&amp;amp; heightColumn &amp;gt; 1.75)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;filter(id:)&lt;/code&gt; and &lt;code&gt;filter(ids:)&lt;/code&gt; are type-safe methods available on &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id = 1&#xA;Player.filter(id: 1)&#xA;&#xA;// SELECT * FROM country WHERE isoCode IN (&#39;FR&#39;, &#39;US&#39;)&#xA;Country.filter(ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;filter(key:)&lt;/code&gt; and &lt;code&gt;filter(keys:)&lt;/code&gt; apply conditions on primary and unique keys:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id = 1&#xA;Player.filter(key: 1)&#xA;&#xA;// SELECT * FROM country WHERE isoCode IN (&#39;FR&#39;, &#39;US&#39;)&#xA;Country.filter(keys: [&#34;FR&#34;, &#34;US&#34;])&#xA;&#xA;// SELECT * FROM citizenship WHERE citizenId = 1 AND countryCode = &#39;FR&#39;&#xA;Citizenship.filter(key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&#xA;// SELECT * FROM player WHERE email = &#39;arthur@example.com&#39;&#xA;Player.filter(key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;matching(pattern)&lt;/code&gt; performs &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;full-text search&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;&#xA;let pattern = FTS3Pattern(matchingAllTokensIn: &#34;SQLite database&#34;)&#xA;Document.matching(pattern)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the pattern is nil, no row will match.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;group(expression, ...)&lt;/code&gt; groups rows.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT name, MAX(score) FROM player GROUP BY name&#xA;Player&#xA;    .select(nameColumn, max(scoreColumn))&#xA;    .group(nameColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;having(expression)&lt;/code&gt; applies conditions on grouped rows.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT team, MAX(score) FROM player GROUP BY team HAVING MIN(score) &amp;gt;= 1000&#xA;Player&#xA;    .select(teamColumn, max(scoreColumn))&#xA;    .group(teamColumn)&#xA;    .having(min(scoreColumn) &amp;gt;= 1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;having(aggregate)&lt;/code&gt; applies conditions on grouped rows, according to an &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md#association-aggregates&#34;&gt;association aggregate&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT team.*&#xA;// FROM team&#xA;// LEFT JOIN player ON player.teamId = team.id&#xA;// GROUP BY team.id&#xA;// HAVING COUNT(DISTINCT player.id) &amp;gt;= 5&#xA;Team.having(Team.players.count &amp;gt;= 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;order(ordering, ...)&lt;/code&gt; sorts.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY name&#xA;Player.order(nameColumn)&#xA;&#xA;// SELECT * FROM player ORDER BY score DESC, name&#xA;Player.order(scoreColumn.desc, nameColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SQLite considers NULL values to be smaller than any other values for sorting purposes. Hence, NULLs naturally appear at the beginning of an ascending ordering and at the end of a descending ordering. With a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt;, this can be changed using &lt;code&gt;.ascNullsLast&lt;/code&gt; and &lt;code&gt;.descNullsFirst&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY score ASC NULLS LAST&#xA;Player.order(nameColumn.ascNullsLast)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Each &lt;code&gt;order&lt;/code&gt; call clears any previous ordering:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY name&#xA;Player.order(scoreColumn).order(nameColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reversed()&lt;/code&gt; reverses the eventual orderings.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY score ASC, name DESC&#xA;Player.order(scoreColumn.desc, nameColumn).reversed()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If no ordering was already specified, this method has no effect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player&#xA;Player.all().reversed()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;limit(limit, offset: offset)&lt;/code&gt; limits and pages results.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player LIMIT 5&#xA;Player.limit(5)&#xA;&#xA;// SELECT * FROM player LIMIT 5 OFFSET 10&#xA;Player.limit(5, offset: 10)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;joining(...)&lt;/code&gt; and &lt;code&gt;including(...)&lt;/code&gt; fetch and join records through &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT player.*, team.*&#xA;// FROM player&#xA;// JOIN team ON team.id = player.teamId&#xA;Player.including(required: Player.team)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;with(cte)&lt;/code&gt; embeds a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;common table expression&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WITH ... SELECT * FROM player&#xA;let cte = CommonTableExpression(...)&#xA;Player.with(cte)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other requests that involve the primary key:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;orderByPrimaryKey()&lt;/code&gt; sorts by primary key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY id&#xA;Player.orderByPrimaryKey()&#xA;&#xA;// SELECT * FROM country ORDER BY code&#xA;Country.orderByPrimaryKey()&#xA;&#xA;// SELECT * FROM citizenship ORDER BY citizenId, countryCode&#xA;Citizenship.orderByPrimaryKey()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;groupByPrimaryKey()&lt;/code&gt; groups rows by primary key.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can refine requests by chaining those methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (email IS NOT NULL) ORDER BY name&#xA;Player.order(nameColumn).filter(emailColumn != nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, and &lt;code&gt;limit&lt;/code&gt; methods ignore and replace previously applied selection, orderings, grouping, and limits. On the opposite, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, and &lt;code&gt;having&lt;/code&gt; methods extend the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Player                          // SELECT * FROM player&#xA;    .filter(nameColumn != nil)  // WHERE (name IS NOT NULL)&#xA;    .filter(emailColumn != nil) //        AND (email IS NOT NULL)&#xA;    .order(nameColumn)          // - ignored -&#xA;    .reversed()                 // - ignored -&#xA;    .order(scoreColumn)         // ORDER BY score&#xA;    .limit(20, offset: 40)      // - ignored -&#xA;    .limit(10)                  // LIMIT 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Raw SQL snippets are also accepted, with eventual &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/StatementArguments.html&#34;&gt;arguments&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT DATE(creationDate), COUNT(*) FROM player WHERE name = &#39;Arthur&#39; GROUP BY date(creationDate)&#xA;Player&#xA;    .select(sql: &#34;DATE(creationDate), COUNT(*)&#34;)&#xA;    .filter(sql: &#34;name = ?&#34;, arguments: [&#34;Arthur&#34;])&#xA;    .group(sql: &#34;DATE(creationDate)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Columns Selected by a Request&lt;/h3&gt; &#xA;&lt;p&gt;By default, query interface requests select all columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player&#xA;struct Player: TableRecord { ... }&#xA;let request = Player.all()&#xA;&#xA;// SELECT * FROM player&#xA;let table = Table(&#34;player&#34;)&#xA;let request = table.all()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The selection can be changed for each individual requests, or in the case of record-based requests, for all requests built from this record type.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;select(...)&lt;/code&gt; and &lt;code&gt;select(..., as:)&lt;/code&gt; methods change the selection of a single request (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-from-requests&#34;&gt;Fetching from Requests&lt;/a&gt; for detailed information):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.select(max(Column(&#34;score&#34;)))&#xA;let maxScore = try Int.fetchOne(db, request) // Int?&#xA;&#xA;let request = Player.select(max(Column(&#34;score&#34;)), as: Int.self)&#xA;let maxScore = try request.fetchOne(db)      // Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default selection for a record type is controlled by the &lt;code&gt;databaseSelection&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct RestrictedPlayer : TableRecord {&#xA;    static let databaseTableName = &#34;player&#34;&#xA;    static let databaseSelection: [SQLSelectable] = [Column(&#34;id&#34;), Column(&#34;name&#34;)]&#xA;}&#xA;&#xA;struct ExtendedPlayer : TableRecord {&#xA;    static let databaseTableName = &#34;player&#34;&#xA;    static let databaseSelection: [SQLSelectable] = [AllColumns(), Column.rowID]&#xA;}&#xA;&#xA;// SELECT id, name FROM player&#xA;let request = RestrictedPlayer.all()&#xA;&#xA;// SELECT *, rowid FROM player&#xA;let request = ExtendedPlayer.all()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseSelection&lt;/code&gt; property is explicitly declared as &lt;code&gt;[SQLSelectable]&lt;/code&gt;. If it is not, the Swift compiler may silently miss the protocol requirement, resulting in sticky &lt;code&gt;SELECT *&lt;/code&gt; requests. To verify your setup, see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;How do I print a request as SQL?&lt;/a&gt; FAQ.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Expressions&lt;/h2&gt; &#xA;&lt;p&gt;Feed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; with SQL expressions built from your Swift code:&lt;/p&gt; &#xA;&lt;h3&gt;SQL Operators&lt;/h3&gt; &#xA;&lt;p&gt;GRDB comes with a Swift version of many SQLite &lt;a href=&#34;https://sqlite.org/lang_expr.html#operators&#34;&gt;built-in operators&lt;/a&gt;, listed below. But not all: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt; for a way to add support for missing SQL operators.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;IS&lt;/code&gt;, &lt;code&gt;IS NOT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Comparison operators are based on the Swift operators &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (name = &#39;Arthur&#39;)&#xA;Player.filter(nameColumn == &#34;Arthur&#34;)&#xA;&#xA;// SELECT * FROM player WHERE (name IS NULL)&#xA;Player.filter(nameColumn == nil)&#xA;&#xA;// SELECT * FROM player WHERE (score IS 1000)&#xA;Player.filter(scoreColumn === 1000)&#xA;&#xA;// SELECT * FROM rectangle WHERE width &amp;lt; height&#xA;Rectangle.filter(widthColumn &amp;lt; heightColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Subqueries are supported:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE score = (SELECT max(score) FROM player)&#xA;let maximumScore = Player.select(max(scoreColumn))&#xA;Player.filter(scoreColumn == maximumScore)&#xA;&#xA;// SELECT * FROM player WHERE score = (SELECT max(score) FROM player)&#xA;let maximumScore = SQLRequest(&#34;SELECT max(score) FROM player&#34;)&#xA;Player.filter(scoreColumn == maximumScore)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&#34;&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/p&gt; &lt;p&gt;SQLite arithmetic operators are derived from their Swift equivalent:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT ((temperature * 1.8) + 32) AS fahrenheit FROM planet&#xA;Planet.select((temperatureColumn * 1.8 + 32).forKey(&#34;fahrenheit&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: an expression like &lt;code&gt;nameColumn + &#34;rrr&#34;&lt;/code&gt; will be interpreted by SQLite as a numerical addition (with funny results), not as a string concatenation. See the &lt;code&gt;concat&lt;/code&gt; operator below.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;When you want to join a sequence of expressions with the &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; operator, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT score + bonus + 1000 FROM player&#xA;let values = [&#xA;    scoreColumn,&#xA;    bonusColumn,&#xA;    1000.databaseValue]&#xA;Player.select(values.joined(operator: .add))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note in the example above how you concatenate raw values: &lt;code&gt;1000.databaseValue&lt;/code&gt;. A plain &lt;code&gt;1000&lt;/code&gt; would not compile.&lt;/p&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .add)&lt;/code&gt; returns 0, and &lt;code&gt;joined(operator: .multiply)&lt;/code&gt; returns 1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;||&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Concatenate several strings:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT firstName || &#39; &#39; || lastName FROM player&#xA;Player.select([firstNameColumn, &#34; &#34;.databaseValue, lastNameColumn].joined(operator: .concat))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note in the example above how you concatenate raw strings: &lt;code&gt;&#34; &#34;.databaseValue&lt;/code&gt;. A plain &lt;code&gt;&#34; &#34;&lt;/code&gt; would not compile.&lt;/p&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .concat)&lt;/code&gt; returns the empty string.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The SQL logical operators are derived from the Swift &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE ((NOT verified) OR (score &amp;lt; 1000))&#xA;Player.filter(!verifiedColumn || scoreColumn &amp;lt; 1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you want to join a sequence of expressions with the &lt;code&gt;AND&lt;/code&gt; or &lt;code&gt;OR&lt;/code&gt; operator, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (verified AND (score &amp;gt;= 1000) AND (name IS NOT NULL))&#xA;let conditions = [&#xA;    verifiedColumn,&#xA;    scoreColumn &amp;gt;= 1000,&#xA;    nameColumn != nil]&#xA;Player.filter(conditions.joined(operator: .and))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .and)&lt;/code&gt; returns true, and &lt;code&gt;joined(operator: .or)&lt;/code&gt; returns false:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE 1&#xA;Player.filter([].joined(operator: .and))&#xA;&#xA;// SELECT * FROM player WHERE 0&#xA;Player.filter([].joined(operator: .or))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt;, &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;NOT IN&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To check inclusion in a Swift sequence (array, set, range…), call the &lt;code&gt;contains&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id IN (1, 2, 3)&#xA;Player.filter([1, 2, 3].contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE id NOT IN (1, 2, 3)&#xA;Player.filter(![1, 2, 3].contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE score BETWEEN 0 AND 1000&#xA;Player.filter((0...1000).contains(scoreColumn))&#xA;&#xA;// SELECT * FROM player WHERE (score &amp;gt;= 0) AND (score &amp;lt; 1000)&#xA;Player.filter((0..&amp;lt;1000).contains(scoreColumn))&#xA;&#xA;// SELECT * FROM player WHERE initial BETWEEN &#39;A&#39; AND &#39;N&#39;&#xA;Player.filter((&#34;A&#34;...&#34;N&#34;).contains(initialColumn))&#xA;&#xA;// SELECT * FROM player WHERE (initial &amp;gt;= &#39;A&#39;) AND (initial &amp;lt; &#39;N&#39;)&#xA;Player.filter((&#34;A&#34;..&amp;lt;&#34;N&#34;).contains(initialColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To check inclusion inside a subquery, call the &lt;code&gt;contains&lt;/code&gt; method as well:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id IN (SELECT playerId FROM playerSelection)&#xA;let selectedPlayerIds = PlayerSelection.select(playerIdColumn)&#xA;Player.filter(selectedPlayerIds.contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE id IN (SELECT playerId FROM playerSelection)&#xA;let selectedPlayerIds = SQLRequest(&#34;SELECT playerId FROM playerSelection&#34;)&#xA;Player.filter(selectedPlayerIds.contains(idColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To check inclusion inside a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;common table expression&lt;/a&gt;, call the &lt;code&gt;contains&lt;/code&gt; method as well:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WITH selectedName AS (...)&#xA;// SELECT * FROM player WHERE name IN selectedName&#xA;let cte = CommonTableExpression(named: &#34;selectedName&#34;, ...)&#xA;Player&#xA;    .with(cte)&#xA;    .filter(cte.contains(nameColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&#34;&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;EXISTS&lt;/code&gt;, &lt;code&gt;NOT EXISTS&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To check if a subquery would return rows, call the &lt;code&gt;exists&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Teams that have at least one other player&#xA;//&#xA;//  SELECT * FROM team&#xA;//  WHERE EXISTS (SELECT * FROM player WHERE teamID = team.id)&#xA;let teamAlias = TableAlias()&#xA;let player = Player.filter(Column(&#34;teamID&#34;) == teamAlias[Column(&#34;id&#34;)])&#xA;let teams = Team.aliased(teamAlias).filter(player.exists())&#xA;&#xA;// Teams that have no player&#xA;//&#xA;//  SELECT * FROM team&#xA;//  WHERE NOT EXISTS (SELECT * FROM player WHERE teamID = team.id)&#xA;let teams = Team.aliased(teamAlias).filter(!player.exists())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, you use a &lt;code&gt;TableAlias&lt;/code&gt; in order to let a subquery refer to a column from another table.&lt;/p&gt; &lt;p&gt;In the next example, which involves the same table twice, the table alias requires an explicit disambiguation with &lt;code&gt;TableAlias(name:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Players who coach at least one other player&#xA;//&#xA;//  SELECT coach.* FROM player coach&#xA;//  WHERE EXISTS (SELECT * FROM player WHERE coachId = coach.id)&#xA;let coachAlias = TableAlias(name: &#34;coach&#34;)&#xA;let coachedPlayer = Player.filter(Column(&#34;coachId&#34;) == coachAlias[Column(&#34;id&#34;)])&#xA;let coaches = Player.aliased(coachAlias).filter(coachedPlayer.exists())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, subqueries can also be expressed as SQL, with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT coach.* FROM player coach&#xA;// WHERE EXISTS (SELECT * FROM player WHERE coachId = coach.id)&#xA;let coachedPlayer = SQLRequest(&#34;SELECT * FROM player WHERE coachId = \(coachAlias[Column(&#34;id&#34;)])&#34;)&#xA;let coaches = Player.aliased(coachAlias).filter(coachedPlayer.exists())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The SQLite LIKE operator is available as the &lt;code&gt;like&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (email LIKE &#39;%@example.com&#39;)&#xA;Player.filter(emailColumn.like(&#34;%@example.com&#34;))&#xA;&#xA;// SELECT * FROM book WHERE (title LIKE &#39;%10\%%&#39; ESCAPE &#39;\&#39;)&#xA;Player.filter(emailColumn.like(&#34;%10\\%%&#34;, escape: &#34;\\&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the SQLite LIKE operator is case-insensitive but not Unicode-aware. For example, the expression &lt;code&gt;&#39;a&#39; LIKE &#39;A&#39;&lt;/code&gt; is true but &lt;code&gt;&#39;æ&#39; LIKE &#39;Æ&#39;&lt;/code&gt; is false.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;MATCH&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The full-text MATCH operator is available through &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts3pattern&#34;&gt;FTS3Pattern&lt;/a&gt; (for FTS3 and FTS4 tables) and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts5pattern&#34;&gt;FTS5Pattern&lt;/a&gt; (for FTS5):&lt;/p&gt; &lt;p&gt;FTS3 and FTS4:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let pattern = FTS3Pattern(matchingAllTokensIn: &#34;SQLite database&#34;)&#xA;&#xA;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;&#xA;Document.matching(pattern)&#xA;&#xA;// SELECT * FROM document WHERE content MATCH &#39;sqlite database&#39;&#xA;Document.filter(contentColumn.match(pattern))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;FTS5:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let pattern = FTS5Pattern(matchingAllTokensIn: &#34;SQLite database&#34;)&#xA;&#xA;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;&#xA;Document.matching(pattern)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AS&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To give an alias to an expression, use the &lt;code&gt;forKey&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT (score + bonus) AS total&#xA;// FROM player&#xA;Player.select((Column(&#34;score&#34;) + Column(&#34;bonus&#34;)).forKey(&#34;total&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need to refer to this aliased column in another place of the request, use a detached column:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT (score + bonus) AS total&#xA;// FROM player &#xA;// ORDER BY total&#xA;Player&#xA;    .select((Column(&#34;score&#34;) + Column(&#34;bonus&#34;)).forKey(&#34;total&#34;))&#xA;    .order(Column(&#34;total&#34;).detached)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Unlike &lt;code&gt;Column(&#34;total&#34;)&lt;/code&gt;, the detached column &lt;code&gt;Column(&#34;total&#34;).detached&lt;/code&gt; is never associated to the &#34;player&#34; table, so it is always rendered as &lt;code&gt;total&lt;/code&gt; in the generated SQL, even when the request involves other tables via an &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;association&lt;/a&gt; or a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;common table expression&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SQL Functions&lt;/h3&gt; &#xA;&lt;p&gt;GRDB comes with a Swift version of many SQLite &lt;a href=&#34;https://sqlite.org/lang_corefunc.html&#34;&gt;built-in functions&lt;/a&gt;, listed below. But not all: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt; for a way to add support for missing SQL functions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ABS&lt;/code&gt;, &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;DATETIME&lt;/code&gt;, &lt;code&gt;JULIANDAY&lt;/code&gt;, &lt;code&gt;LENGTH&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;TOTAL&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;Those are based on the &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;dateTime&lt;/code&gt;, &lt;code&gt;julianDay&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;total&lt;/code&gt; Swift functions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT MIN(score), MAX(score) FROM player&#xA;Player.select(min(scoreColumn), max(scoreColumn))&#xA;&#xA;// SELECT COUNT(name) FROM player&#xA;Player.select(count(nameColumn))&#xA;&#xA;// SELECT COUNT(DISTINCT name) FROM player&#xA;Player.select(count(distinct: nameColumn))&#xA;&#xA;// SELECT JULIANDAY(date, &#39;start of year&#39;) FROM game&#xA;Game.select(julianDay(dateColumn, .startOfYear))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more information about the functions &lt;code&gt;dateTime&lt;/code&gt; and &lt;code&gt;julianDay&lt;/code&gt;, see &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;Date And Time Functions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;IFNULL&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use the Swift &lt;code&gt;??&lt;/code&gt; operator:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;Anonymous&#39;) FROM player&#xA;Player.select(nameColumn ?? &#34;Anonymous&#34;)&#xA;&#xA;// SELECT IFNULL(name, email) FROM player&#xA;Player.select(nameColumn ?? emailColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LOWER&lt;/code&gt;, &lt;code&gt;UPPER&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query interface does not give access to those SQLite functions. Nothing against them, but they are not unicode aware.&lt;/p&gt; &lt;p&gt;Instead, GRDB extends SQLite with SQL functions that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Player.select(nameColumn.uppercased())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: When &lt;em&gt;comparing&lt;/em&gt; strings, you&#39;d rather use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&#34;&gt;collation&lt;/a&gt;:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String = ...&#xA;&#xA;// Not recommended&#xA;nameColumn.uppercased() == name.uppercased()&#xA;&#xA;// Better&#xA;nameColumn.collating(.caseInsensitiveCompare) == name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Custom SQL functions and aggregates&lt;/p&gt; &lt;p&gt;You can apply your own &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-functions-&#34;&gt;custom SQL functions and aggregates&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let f = DatabaseFunction(&#34;f&#34;, ...)&#xA;&#xA;// SELECT f(name) FROM player&#xA;Player.select(f.apply(nameColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Embedding SQL in Query Interface Requests&lt;/h2&gt; &#xA;&lt;p&gt;You will sometimes want to extend your query interface requests with SQL snippets. This can happen because GRDB does not provide a Swift interface for some SQL function or operator, or because you want to use an SQLite construct that GRDB does not support.&lt;/p&gt; &#xA;&lt;p&gt;Support for extensibility is large, but not unlimited. All the SQL queries built by the query interface request have the shape below. &lt;em&gt;If you need something else, you&#39;ll have to use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;raw SQL requests&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;WITH ...     -- 1&#xA;SELECT ...   -- 2&#xA;FROM ...     -- 3&#xA;JOIN ...     -- 4&#xA;WHERE ...    -- 5&#xA;GROUP BY ... -- 6&#xA;HAVING ...   -- 7&#xA;ORDER BY ... -- 8&#xA;LIMIT ...    -- 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WITH ...&lt;/code&gt;: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;Common Table Expressions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SELECT ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The selection can be provided as raw SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player&#xA;let request = Player.select(sql: &#34;IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score&#34;)&#xA;&#xA;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let request = Player.select(sql: &#34;IFNULL(name, ?), score&#34;, arguments: [suffix])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The selection can be provided with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let request = Player.select(literal: &#34;IFNULL(name, \(defaultName)), score&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The selection can be provided with a mix of Swift and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;) AS displayName, score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let displayName: SQL = &#34;IFNULL(\(Column(&#34;name&#34;)), \(defaultName)) AS displayName&#34;&#xA;let request = Player.select(displayName, Column(&#34;score&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the custom SQL snippet should behave as a full-fledged expression, with support for the &lt;code&gt;+&lt;/code&gt; Swift operator, the &lt;code&gt;forKey&lt;/code&gt; aliasing method, and all other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-operators&#34;&gt;SQL Operators&lt;/a&gt;, build an &lt;em&gt;expression literal&lt;/em&gt; with the &lt;code&gt;SQL.sqlExpression&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;) AS displayName, score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let displayName = SQL(&#34;IFNULL(\(Column(&#34;name&#34;)), \(defaultName))&#34;).sqlExpression&#xA;let request = Player.select(displayName.forKey(&#34;displayName&#34;), Column(&#34;score&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Such expression literals allow you to build a reusable support library of SQL functions or operators that are missing from the query interface. For example, you can define a Swift &lt;code&gt;date&lt;/code&gt; function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func date(_ value: SQLSpecificExpressible) -&amp;gt; SQLExpression {&#xA;    SQL(&#34;DATE(\(value))&#34;).sqlExpression&#xA;}&#xA;&#xA;// SELECT * FROM &#34;player&#34; WHERE DATE(&#34;createdAt&#34;) = &#39;2020-01-23&#39;&#xA;let request = Player.filter(date(Column(&#34;createdAt&#34;)) == &#34;2020-01-23&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/QueryInterfaceOrganization.md&#34;&gt;Query Interface Organization&lt;/a&gt; for more information about &lt;code&gt;SQLSpecificExpressible&lt;/code&gt; and &lt;code&gt;SQLExpression&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FROM ...&lt;/code&gt;: only one table is supported here. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;JOIN ...&lt;/code&gt;: joins are fully controlled by &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WHERE ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The WHERE clause can be provided as raw SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE score &amp;gt;= 1000&#xA;let request = Player.filter(sql: &#34;score &amp;gt;= 1000&#34;)&#xA;&#xA;// SELECT * FROM player WHERE score &amp;gt;= 1000&#xA;let minScore = 1000&#xA;let request = Player.filter(sql: &#34;score &amp;gt;= ?&#34;, arguments: [minScore])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The WHERE clause can be provided with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE score &amp;gt;= 1000&#xA;let minScore = 1000&#xA;let request = Player.filter(literal: &#34;score &amp;gt;= \(minScore)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The WHERE clause can be provided with a mix of Swift and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (score &amp;gt;= 1000) AND (team = &#39;red&#39;)&#xA;let minScore = 1000&#xA;let scoreCondition: SQL = &#34;\(Column(&#34;score&#34;)) &amp;gt;= \(minScore)&#34;&#xA;let request = Player.filter(scoreCondition &amp;amp;&amp;amp; Column(&#34;team&#34;) == &#34;red&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;code&gt;SELECT ...&lt;/code&gt; above for more SQL Interpolation examples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GROUP BY ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The GROUP BY clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HAVING ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The HAVING clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ORDER BY ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The ORDER BY clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;p&gt;In order to support the &lt;code&gt;desc&lt;/code&gt; and &lt;code&gt;asc&lt;/code&gt; query interface operators, and the &lt;code&gt;reversed()&lt;/code&gt; query interface method, you must provide your orderings as &lt;em&gt;expression literals&lt;/em&gt; with the &lt;code&gt;SQL.sqlExpression&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM &#34;player&#34; &#xA;// ORDER BY (score + bonus) ASC, name DESC&#xA;let total = SQL(&#34;(score + bonus)&#34;).sqlExpression&#xA;let request = Player&#xA;    .order(total.desc, Column(&#34;name&#34;))&#xA;    .reversed()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LIMIT ...&lt;/code&gt;: use the &lt;code&gt;limit(_:offset:)&lt;/code&gt; method. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Fetching from Requests&lt;/h2&gt; &#xA;&lt;p&gt;Once you have a request, you can fetch the records at the origin of the request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Some request based on `Player`&#xA;let request = Player.filter(...)... // QueryInterfaceRequest&amp;lt;Player&amp;gt;&#xA;&#xA;// Fetch players:&#xA;try request.fetchCursor(db) // A Cursor of Player&#xA;try request.fetchAll(db)    // [Player]&#xA;try request.fetchSet(db)    // Set&amp;lt;Player&amp;gt;&#xA;try request.fetchOne(db)    // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let allPlayers = try Player.fetchAll(db)                            // [Player]&#xA;let arthur = try Player.filter(nameColumn == &#34;Arthur&#34;).fetchOne(db) // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt;, &lt;code&gt;fetchSet&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You sometimes want to fetch other values&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The simplest way is to use the request as an argument to a fetching method of the desired type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Fetch an Int&#xA;let request = Player.select(max(scoreColumn))&#xA;let maxScore = try Int.fetchOne(db, request) // Int?&#xA;&#xA;// Fetch a Row&#xA;let request = Player.select(min(scoreColumn), max(scoreColumn))&#xA;let row = try Row.fetchOne(db, request)!     // Row&#xA;let minScore = row[0] as Int?&#xA;let maxScore = row[1] as Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the request so that it knows the type it has to fetch:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;With &lt;code&gt;asRequest(of:)&lt;/code&gt;, useful when you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BookInfo: FetchableRecord, Decodable {&#xA;    var book: Book&#xA;    var author: Author&#xA;}&#xA;&#xA;// A request of BookInfo&#xA;let request = Book&#xA;    .including(required: Book.author)&#xA;    .asRequest(of: BookInfo.self)&#xA;&#xA;let bookInfos = try dbQueue.read { db in&#xA;    try request.fetchAll(db) // [BookInfo]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With &lt;code&gt;select(..., as:)&lt;/code&gt;, which is handy when you change the selection:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A request of Int&#xA;let request = Player.select(max(scoreColumn), as: Int.self)&#xA;&#xA;let maxScore = try dbQueue.read { db in&#xA;    try request.fetchOne(db) // Int?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fetching by Key&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fetching records according to their primary key&lt;/strong&gt; is a common task.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt; can use the type-safe methods &lt;code&gt;fetchOne(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchAll(_:ids:)&lt;/code&gt; and &lt;code&gt;fetchSet(_:ids:)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.fetchOne(db, id: 1)               // Player?&#xA;try Country.fetchAll(db, ids: [&#34;FR&#34;, &#34;US&#34;])  // [Countries]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All record types can use &lt;code&gt;fetchOne(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchAll(_:keys:)&lt;/code&gt; and &lt;code&gt;fetchSet(_:keys:)&lt;/code&gt; that apply conditions on primary and unique keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.fetchOne(db, key: 1)              // Player?&#xA;try Country.fetchAll(db, keys: [&#34;FR&#34;, &#34;US&#34;]) // [Country]&#xA;try Player.fetchOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])            // Player?&#xA;try Citizenship.fetchOne(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;]) // Citizenship?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-implicit-rowid-primary-key&#34;&gt;hidden &#34;rowid&#34; column&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM document WHERE rowid = 1&#xA;try Document.fetchOne(db, key: 1)            // Document?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you want to build a request and plan to fetch from it later&lt;/strong&gt;, use a &lt;code&gt;filter&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.filter(id: 1)&#xA;let request = Country.filter(ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;let request = Player.filter(key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;let request = Citizenship.filter(key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing for Record Existence&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can check if a request has matching rows in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Some request based on `Player`&#xA;let request = Player.filter(...)...&#xA;&#xA;// Check for player existence:&#xA;let noSuchPlayer = try request.isEmpty(db) // Bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should check for emptiness instead of counting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Correct&#xA;let noSuchPlayer = try request.fetchCount(db) == 0&#xA;// Even better&#xA;let noSuchPlayer = try request.isEmpty(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can also check if a given primary or unique key exists in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt; can use the type-safe method &lt;code&gt;exists(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.exists(db, id: 1)&#xA;try Country.exists(db, id: &#34;FR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All record types can use &lt;code&gt;exists(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt; that can check primary and unique keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.exists(db, key: 1)&#xA;try Country.exists(db, key: &#34;FR&#34;)&#xA;try Player.exists(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Citizenship.exists(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should check for key existence instead of fetching a record and checking for nil:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Correct&#xA;let playerExists = try Player.fetchOne(db, id: 1) != nil&#xA;// Even better&#xA;let playerExists = try Player.exists(db, id: 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fetching Aggregated Values&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests can count.&lt;/strong&gt; The &lt;code&gt;fetchCount()&lt;/code&gt; method returns the number of rows that would be returned by a fetch request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT COUNT(*) FROM player&#xA;let count = try Player.fetchCount(db) // Int&#xA;&#xA;// SELECT COUNT(*) FROM player WHERE email IS NOT NULL&#xA;let count = try Player.filter(emailColumn != nil).fetchCount(db)&#xA;&#xA;// SELECT COUNT(DISTINCT name) FROM player&#xA;let count = try Player.select(nameColumn).distinct().fetchCount(db)&#xA;&#xA;// SELECT COUNT(*) FROM (SELECT DISTINCT name, score FROM player)&#xA;let count = try Player.select(nameColumn, scoreColumn).distinct().fetchCount(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other aggregated values&lt;/strong&gt; can also be selected and fetched (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&#34;&gt;SQL Functions&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.select(max(scoreColumn))&#xA;let maxScore = try Int.fetchOne(db, request) // Int?&#xA;&#xA;let request = Player.select(min(scoreColumn), max(scoreColumn))&#xA;let row = try Row.fetchOne(db, request)!     // Row&#xA;let minScore = row[0] as Int?&#xA;let maxScore = row[1] as Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delete Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests can delete records&lt;/strong&gt;, with the &lt;code&gt;deleteAll()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DELETE FROM player&#xA;try Player.deleteAll(db)&#xA;&#xA;// DELETE FROM player WHERE team = &#39;red&#39;&#xA;try Player&#xA;    .filter(teamColumn == &#34;red&#34;)&#xA;    .deleteAll(db)&#xA;&#xA;// DELETE FROM player ORDER BY score LIMIT 10&#xA;try Player&#xA;    .order(scoreColumn)&#xA;    .limit(10)&#xA;    .deleteAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt; Deletion methods are available on types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol, and &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: TableRecord { ... }&#xA;try Player.deleteAll(db)          // Fine&#xA;try Table(&#34;player&#34;).deleteAll(db) // Just as fine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deleting records according to their primary key&lt;/strong&gt; is a common task.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt; can use the type-safe methods &lt;code&gt;deleteOne(_&lt;span&gt;🆔&lt;/span&gt;)&lt;/code&gt; and &lt;code&gt;deleteAll(_:ids:)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.deleteOne(db, id: 1)&#xA;try Country.deleteAll(db, ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All record types can use &lt;code&gt;deleteOne(_&lt;span&gt;🔑&lt;/span&gt;)&lt;/code&gt; and &lt;code&gt;deleteAll(_:keys:)&lt;/code&gt; that apply conditions on primary and unique keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.deleteOne(db, key: 1)&#xA;try Country.deleteAll(db, keys: [&#34;FR&#34;, &#34;US&#34;])&#xA;try Player.deleteOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Citizenship.deleteOne(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-implicit-rowid-primary-key&#34;&gt;hidden &#34;rowid&#34; column&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DELETE FROM document WHERE rowid = 1&#xA;try Document.deleteOne(db, id: 1)             // Document?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Update Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests can batch update records&lt;/strong&gt;. The &lt;code&gt;updateAll()&lt;/code&gt; method accepts &lt;em&gt;column assignments&lt;/em&gt; defined with the &lt;code&gt;set(to:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE player SET score = 0, isHealthy = 1, bonus = NULL&#xA;try Player.updateAll(db, &#xA;    Column(&#34;score&#34;).set(to: 0), &#xA;    Column(&#34;isHealthy&#34;).set(to: true), &#xA;    Column(&#34;bonus&#34;).set(to: nil))&#xA;&#xA;// UPDATE player SET score = 0 WHERE team = &#39;red&#39;&#xA;try Player&#xA;    .filter(Column(&#34;team&#34;) == &#34;red&#34;)&#xA;    .updateAll(db, Column(&#34;score&#34;).set(to: 0))&#xA;&#xA;// UPDATE player SET top = 1 ORDER BY score DESC LIMIT 10&#xA;try Player&#xA;    .order(Column(&#34;score&#34;).desc)&#xA;    .limit(10)&#xA;    .updateAll(db, Column(&#34;top&#34;).set(to: true))&#xA;&#xA;// UPDATE country SET population = 67848156 WHERE id = &#39;FR&#39;&#xA;try Country&#xA;    .filter(id: &#34;FR&#34;)&#xA;    .updateAll(db, Column(&#34;population&#34;).set(to: 67_848_156))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Column assignments accept any expression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE player SET score = score + (bonus * 2)&#xA;try Player.updateAll(db, Column(&#34;score&#34;).set(to: Column(&#34;score&#34;) + Column(&#34;bonus&#34;) * 2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a convenience, you can also use the &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, or &lt;code&gt;/=&lt;/code&gt; operators:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE player SET score = score + (bonus * 2)&#xA;try Player.updateAll(db, Column(&#34;score&#34;) += Column(&#34;bonus&#34;) * 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&#34;&gt;Conflict Resolution&lt;/a&gt; rules apply, and you may also provide a specific one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE OR IGNORE player SET ...&#xA;try Player.updateAll(db, onConflict: .ignore, /* assignments... */)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;updateAll&lt;/code&gt; method is available on types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol, and &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: TableRecord { ... }&#xA;try Player.updateAll(db, ...)          // Fine&#xA;try Table(&#34;player&#34;).updateAll(db, ...) // Just as fine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Custom Requests&lt;/h2&gt; &#xA;&lt;p&gt;Until now, we have seen &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; created from any type that adopts the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.all()  // QueryInterfaceRequest&amp;lt;Player&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those requests of type &lt;code&gt;QueryInterfaceRequest&lt;/code&gt; can fetch and count:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try request.fetchCursor(db) // A Cursor of Player&#xA;try request.fetchAll(db)    // [Player]&#xA;try request.fetchSet(db)    // Set&amp;lt;Player&amp;gt;&#xA;try request.fetchOne(db)    // Player?&#xA;try request.fetchCount(db)  // Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When the query interface can not generate the SQL you need&lt;/strong&gt;, you can still fallback to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;raw SQL&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Custom SQL is always welcome&#xA;try Player.fetchAll(db, sql: &#34;SELECT ...&#34;)   // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But you may prefer to bring some elegance back in, and build custom requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// No custom SQL in sight&#xA;try Player.customRequest().fetchAll(db) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To build custom requests&lt;/strong&gt;, you can use one of the built-in requests or derive requests from other requests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/SQLRequest.html&#34;&gt;SQLRequest&lt;/a&gt; is a fetch request built from raw SQL. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Player {&#xA;    static func filter(color: Color) -&amp;gt; SQLRequest&amp;lt;Player&amp;gt; {&#xA;        SQLRequest&amp;lt;Player&amp;gt;(&#xA;            sql: &#34;SELECT * FROM player WHERE color = ?&#34;&#xA;            arguments: [color])&#xA;    }&#xA;}&#xA;&#xA;// [Player]&#xA;try Player.filter(color: .red).fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SQLRequest supports &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Player {&#xA;    static func filter(color: Color) -&amp;gt; SQLRequest&amp;lt;Player&amp;gt; {&#xA;        &#34;SELECT * FROM player WHERE color = \(color)&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;asRequest(of:)&lt;/code&gt; method changes the type fetched by the request. It is useful, for example, when you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BookInfo: FetchableRecord, Decodable {&#xA;    var book: Book&#xA;    var author: Author&#xA;}&#xA;&#xA;let request = Book&#xA;    .including(required: Book.author)&#xA;    .asRequest(of: BookInfo.self)&#xA;&#xA;// [BookInfo]&#xA;try request.fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;adapted(_:)&lt;/code&gt; method eases the consumption of complex rows with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;row adapters&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt; for some sample code that uses this method.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/AnyFetchRequest.html&#34;&gt;AnyFetchRequest&lt;/a&gt;: a type-erased request.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Joined Queries Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB helps consuming joined queries with complex selection.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this chapter, we will focus on the extraction of information from complex rows, such as the ones fetched by the query below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- How to consume the left, middle, and right parts of those rows?&#xA;SELECT player.*, team.*, MAX(round.score) AS maxScore&#xA;FROM player&#xA;LEFT JOIN team ON ...&#xA;LEFT JOIN round ON ...&#xA;GROUP BY ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We will not talk about the &lt;em&gt;generation&lt;/em&gt; of joined queries, which is covered in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;So what are we talking about?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is difficult to consume rows fetched from complex joined queries, because they often contain several columns with the same name: &lt;code&gt;id&lt;/code&gt; from table &lt;code&gt;player&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; from table &lt;code&gt;team&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;When such ambiguity happens, GRDB row accessors always favor the leftmost matching column. This means that &lt;code&gt;row[&#34;id&#34;]&lt;/code&gt; would give a player id, without any obvious way to access the team id.&lt;/p&gt; &#xA;&lt;p&gt;A classical technique to avoid this ambiguity is to give each column a unique name. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- A classical technique&#xA;SELECT player.id AS player_id, player.name AS player_name, team.id AS team_id, team.name AS team_name, team.color AS team_color, MAX(round.score) AS maxScore&#xA;FROM player&#xA;LEFT JOIN team ON ...&#xA;LEFT JOIN round ON ...&#xA;GROUP BY ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This technique works pretty well, but it has three drawbacks:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The selection becomes hard to read and understand.&lt;/li&gt; &#xA; &lt;li&gt;Such queries are difficult to write by hand.&lt;/li&gt; &#xA; &lt;li&gt;The mangled names are a &lt;em&gt;very&lt;/em&gt; bad fit for &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; types that expect specific column names. After all, if the &lt;code&gt;Team&lt;/code&gt; record type can read &lt;code&gt;SELECT * FROM team ...&lt;/code&gt;, it should be able to read &lt;code&gt;SELECT ..., team.*, ...&lt;/code&gt; as well.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We thus need another technique. &lt;strong&gt;Below we&#39;ll see how to split rows into slices, and preserve column names.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SELECT player.*, team.*, MAX(round.score) AS maxScore FROM ...&lt;/code&gt; will be split into three slices: one that contains player&#39;s columns, one that contains team&#39;s columns, and a remaining slice that contains remaining column(s). The Player record type will be able to read the first slice, which contains the columns expected by the &lt;code&gt;Player.init(row:)&lt;/code&gt; initializer. In the same way, the Team record type could read the second slice.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the name-mangling technique, splitting rows keeps SQL legible, accepts your hand-crafted SQL queries, and plays as nicely as possible with your existing &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;record types&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-an-introduction&#34;&gt;Splitting Rows, an Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-record-way&#34;&gt;Splitting Rows, the Record Way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-codable-way&#34;&gt;Splitting Rows, the Codable Way&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Splitting Rows, an Introduction&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s first write some introductory code, hoping that this chapter will make you understand how pieces fall together. We&#39;ll see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-record-way&#34;&gt;later&lt;/a&gt; how records will help us streamline the initial approach, how to track changes in joined requests, and how we can use the standard Decodable protocol.&lt;/p&gt; &#xA;&lt;p&gt;To split rows, we will use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;row adapters&lt;/a&gt;. Row adapters adapt rows so that row consumers see exactly the columns they want. Among other things, row adapters can define several &lt;em&gt;row scopes&lt;/em&gt; that give access to as many &lt;em&gt;row slices&lt;/em&gt;. Sounds like a perfect match.&lt;/p&gt; &#xA;&lt;p&gt;At the very beginning, there is an SQL query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    let sql = &#34;&#34;&#34;&#xA;        SELECT player.*, team.*, MAX(round.score) AS maxScore&#xA;        FROM player&#xA;        LEFT JOIN team ON ...&#xA;        LEFT JOIN round ON ...&#xA;        GROUP BY ...&#xA;        &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We need an adapter that extracts player columns, in a slice that has as many columns as there are columns in the player table. That&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rangerowadapter&#34;&gt;RangeRowAdapter&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // SELECT player.*, team.*, ...&#xA;    //        &amp;lt;------&amp;gt;&#xA;    let playerWidth = try db.columns(in: &#34;player&#34;).count&#xA;    let playerAdapter = RangeRowAdapter(0 ..&amp;lt; playerWidth)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also need an adapter that extracts team columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // SELECT player.*, team.*, ...&#xA;    //                  &amp;lt;----&amp;gt;&#xA;    let teamWidth = try db.columns(in: &#34;team&#34;).count&#xA;    let teamAdapter = RangeRowAdapter(playerWidth ..&amp;lt; (playerWidth + teamWidth))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We merge those two adapters in a single &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#scopeadapter&#34;&gt;ScopeAdapter&lt;/a&gt; that will allow us to access both sliced rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    let playerScope = &#34;player&#34;&#xA;    let teamScope = &#34;team&#34;&#xA;    let adapter = ScopeAdapter([&#xA;        playerScope: playerAdapter,&#xA;        teamScope: teamAdapter])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now we can fetch, and start consuming our rows. You already know &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-rows&#34;&gt;row cursors&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    let rows = try Row.fetchCursor(db, sql: sql, adapter: adapter)&#xA;    while let row = try rows.next() {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From a fetched row, we can build a player:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        let player: Player = row[playerScope]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the SQL query, the team is joined with the &lt;code&gt;LEFT JOIN&lt;/code&gt; operator. This means that the team may be missing: its slice may contain team values, or it may only contain NULLs. When this happens, we don&#39;t want to build a Team record, and we thus load an &lt;em&gt;optional&lt;/em&gt; Team:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        let team: Team? = row[teamScope]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally, we can load the maximum score, assuming that the &#34;maxScore&#34; column is not ambiguous:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        let maxScore: Int = row[&#34;maxScore&#34;]&#xA;        &#xA;        print(&#34;player: \(player)&#34;)&#xA;        print(&#34;team: \(team)&#34;)&#xA;        print(&#34;maxScore: \(maxScore)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; In this chapter, we have learned:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;how to use &lt;code&gt;RangeRowAdapter&lt;/code&gt; to extract a specific table&#39;s columns into a &lt;em&gt;row slice&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;how to use &lt;code&gt;ScopeAdapter&lt;/code&gt; to gives access to several row slices through named scopes.&lt;/li&gt; &#xA;  &lt;li&gt;how to use Row subscripting to extract records from rows, or optional records in order to deal with left joins.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Splitting Rows, the Record Way&lt;/h3&gt; &#xA;&lt;p&gt;Our introduction above has introduced important techniques. It uses &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;row adapters&lt;/a&gt; in order to split rows. It uses Row subscripting in order to extract records from row slices.&lt;/p&gt; &#xA;&lt;p&gt;But we may want to make it more usable and robust:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It&#39;s generally easier to consume records than raw rows.&lt;/li&gt; &#xA; &lt;li&gt;Joined records not always need all columns from a table (see &lt;code&gt;TableRecord.databaseSelection&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Building row adapters is long and error prone.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To address the first bullet, let&#39;s define a record that holds our player, optional team, and maximum score. Since it can decode database rows, it adopts the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct PlayerInfo {&#xA;    var player: Player&#xA;    var team: Team?&#xA;    var maxScore: Int&#xA;}&#xA;&#xA;/// PlayerInfo can decode rows:&#xA;extension PlayerInfo: FetchableRecord {&#xA;    private enum Scopes {&#xA;        static let player = &#34;player&#34;&#xA;        static let team = &#34;team&#34;&#xA;    }&#xA;    &#xA;    init(row: Row) {&#xA;        player = row[Scopes.player]&#xA;        team = row[Scopes.team]&#xA;        maxScore = row[&#34;maxScore&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we write a method that returns a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-requests&#34;&gt;custom request&lt;/a&gt;, and then build the fetching method on top of that request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension PlayerInfo {&#xA;    /// The request for all player infos&#xA;    static func all() -&amp;gt; AdaptedFetchRequest&amp;lt;SQLRequest&amp;lt;PlayerInfo&amp;gt;&amp;gt; {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To acknowledge that both Player and Team records may customize their selection of the &#34;player&#34; and &#34;team&#34; columns, we&#39;ll write our SQL in a slightly different way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        // Let Player and Team customize their selection:&#xA;        let request: SQLRequest&amp;lt;PlayerInfo&amp;gt; = &#34;&#34;&#34;&#xA;            SELECT&#xA;                \(columnsOf: Player.self), -- instead of player.*&#xA;                \(columnsOf: Team.self),   -- instead of team.*&#xA;                MAX(round.score) AS maxScore&#xA;            FROM player&#xA;            LEFT JOIN team ON ...&#xA;            LEFT JOIN round ON ...&#xA;            GROUP BY ...&#xA;            &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our SQL is no longer a regular String, but an &lt;code&gt;SQLRequest&amp;lt;PlayerInfo&amp;gt;&lt;/code&gt; which profits from &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;. Inside this request, &lt;code&gt;\(columnsOf: Player.self)&lt;/code&gt; outputs &lt;code&gt;player.*&lt;/code&gt;, unless Player defines a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;customized selection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now we need to build adapters.&lt;/p&gt; &#xA;&lt;p&gt;We use the &lt;code&gt;splittingRowAdapters&lt;/code&gt; global function, whose job is precisely to build row adapters of desired widths:&lt;/p&gt; &#xA;&lt;p&gt;And since counting table columns require a database connection, we use the &lt;code&gt;adapted(_:)&lt;/code&gt; request method. It allows requests to adapt themselves right before execution, when a database connection is available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        return request.adapted { db in&#xA;            let adapters = try splittingRowAdapters(columnCounts: [&#xA;                Player.numberOfSelectedColumns(db),&#xA;                Team.numberOfSelectedColumns(db)])&#xA;            return ScopeAdapter([&#xA;                Scopes.player: adapters[0],&#xA;                Scopes.team: adapters[1]])&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;splittingRowAdapters&lt;/code&gt; returns as many adapters as necessary to fully split a row. In the example above, it returns &lt;em&gt;three&lt;/em&gt; adapters: one for player, one for team, and one for the remaining columns.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;And finally, we can define the fetching method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    /// Fetches all player infos&#xA;    static func fetchAll(_ db: Database) throws -&amp;gt; [PlayerInfo] {&#xA;        try all().fetchAll(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And when your app needs to fetch player infos, it now reads:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Fetch player infos&#xA;let playerInfos = try dbQueue.read { db in&#xA;    try PlayerInfo.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; In this chapter, we have learned:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;how to define a &lt;code&gt;FetchableRecord&lt;/code&gt; record that consumes rows fetched from a joined query.&lt;/li&gt; &#xA;  &lt;li&gt;how to use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt; and &lt;code&gt;numberOfSelectedColumns&lt;/code&gt; in order to deal with nested record types that define custom selection.&lt;/li&gt; &#xA;  &lt;li&gt;how to use &lt;code&gt;splittingRowAdapters&lt;/code&gt; in order to streamline the definition of row slices.&lt;/li&gt; &#xA;  &lt;li&gt;how to gather all relevant methods and constants in a record type, fully responsible of its relationship with the database.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Splitting Rows, the Codable Way&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; build on top of the standard Decodable protocol in order to decode database rows.&lt;/p&gt; &#xA;&lt;p&gt;You can consume complex joined queries with Codable records as well. As a demonstration, we&#39;ll rewrite the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-record-way&#34;&gt;above&lt;/a&gt; sample code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Decodable, FetchableRecord, TableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;}&#xA;struct Team: Decodable, FetchableRecord, TableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var color: Color&#xA;}&#xA;struct PlayerInfo: Decodable, FetchableRecord {&#xA;    var player: Player&#xA;    var team: Team?&#xA;    var maxScore: Int&#xA;}&#xA;&#xA;extension PlayerInfo {&#xA;    /// The request for all player infos&#xA;    static func all() -&amp;gt; AdaptedFetchRequest&amp;lt;SQLRequest&amp;lt;PlayerInfo&amp;gt;&amp;gt; {&#xA;        let request: SQLRequest&amp;lt;PlayerInfo&amp;gt; = &#34;&#34;&#34;&#xA;            SELECT&#xA;                \(columnsOf: Player.self),&#xA;                \(columnsOf: Team.self),&#xA;                MAX(round.score) AS maxScore&#xA;            FROM player&#xA;            LEFT JOIN team ON ...&#xA;            LEFT JOIN round ON ...&#xA;            GROUP BY ...&#xA;            &#34;&#34;&#34;&#xA;        return request.adapted { db in&#xA;            let adapters = try splittingRowAdapters(columnCounts: [&#xA;                Player.numberOfSelectedColumns(db),&#xA;                Team.numberOfSelectedColumns(db)])&#xA;            return ScopeAdapter([&#xA;                CodingKeys.player.stringValue: adapters[0],&#xA;                CodingKeys.team.stringValue: adapters[1]])&#xA;        }&#xA;    }&#xA;    &#xA;    /// Fetches all player infos&#xA;    static func fetchAll(_ db: Database) throws -&amp;gt; [PlayerInfo] {&#xA;        try all().fetchAll(db)&#xA;    }&#xA;}&#xA;&#xA;// Fetch player infos&#xA;let playerInfos = try dbQueue.read { db in&#xA;    try PlayerInfo.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; In this chapter, we have learned how to use the &lt;code&gt;Decodable&lt;/code&gt; protocol and its associated &lt;code&gt;CodingKeys&lt;/code&gt; enum in order to dry up our code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Database Changes Observation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite notifies its host application of changes performed to the database, as well of transaction commits and rollbacks.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;GRDB puts this SQLite feature to some good use, and lets you observe the database in various ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#after-commit-hook&#34;&gt;After Commit Hook&lt;/a&gt;: Handle successful transactions one by one.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt;: Track changes of database values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt;: Tracking transactions that impact a database region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactionobserver-protocol&#34;&gt;TransactionObserver Protocol&lt;/a&gt;: Low-level database observation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&#34;&gt;Combine Support&lt;/a&gt;: Automated tracking of database changes, with &lt;a href=&#34;https://developer.apple.com/documentation/combine&#34;&gt;Combine&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&#34;http://github.com/RxSwiftCommunity/RxGRDB&#34;&gt;RxGRDB&lt;/a&gt;: Automated tracking of database changes, with &lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Database observation requires that a single &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-queues&#34;&gt;database queue&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;pool&lt;/a&gt; is kept open for all the duration of the database usage.&lt;/p&gt; &#xA;&lt;h2&gt;After Commit Hook&lt;/h2&gt; &#xA;&lt;p&gt;When your application needs to make sure a specific database transaction has been successfully committed before it executes some work, use the &lt;code&gt;Database.afterNextTransactionCommit(_:)&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;Its closure argument is called right after database changes have been successfully written to disk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    db.afterNextTransactionCommit { db in&#xA;        print(&#34;success&#34;)&#xA;    }&#xA;    ...&#xA;} // prints &#34;success&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The closure runs in a protected dispatch queue, serialized with all database updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This &#34;after commit hook&#34; helps synchronizing the database with other resources, such as files, or system sensors.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the example below, a &lt;a href=&#34;https://developer.apple.com/documentation/corelocation/cllocationmanager&#34;&gt;location manager&lt;/a&gt; starts monitoring a CLRegion if and only if it has successfully been stored in the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Inserts a region in the database, and start monitoring upon&#xA;/// successful insertion.&#xA;func startMonitoring(_ db: Database, region: CLRegion) throws {&#xA;    // Make sure database is inside a transaction&#xA;    try db.inSavepoint {&#xA;        &#xA;        // Save the region in the database&#xA;        try insert(...)&#xA;        &#xA;        // Start monitoring if and only if the insertion is&#xA;        // eventually committed&#xA;        db.afterNextTransactionCommit { _ in&#xA;            // locationManager prefers the main queue:&#xA;            DispatchQueue.main.async {&#xA;                locationManager.startMonitoring(for: region)&#xA;            }&#xA;        }&#xA;        &#xA;        return .commit&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The method above won&#39;t trigger the location manager if the transaction is eventually rollbacked (explicitly, or because of an error), as in the sample code below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    // success&#xA;    try startMonitoring(db, region)&#xA;    &#xA;    // On error, the transaction is rollbacked, the region is not inserted, and&#xA;    // the location manager is not invoked.&#xA;    try failableMethod(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ValueObservation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;ValueObservation tracks changes in database values&lt;/strong&gt;. It automatically notifies your application with fresh values whenever changes are committed in the database.&lt;/p&gt; &#xA;&lt;p&gt;Tracked changes are insertions, updates, and deletions that impact the tracked value, performed with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;raw SQL&lt;/a&gt;. This includes indirect changes triggered by &lt;a href=&#34;https://www.sqlite.org/foreignkeys.html#fk_actions&#34;&gt;foreign keys actions&lt;/a&gt; or &lt;a href=&#34;https://www.sqlite.org/lang_createtrigger.html&#34;&gt;SQL triggers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Some changes are not notified: changes to internal system tables (such as &lt;code&gt;sqlite\_master&lt;/code&gt;), and changes to &lt;a href=&#34;https://www.sqlite.org/withoutrowid.html&#34;&gt;&lt;code&gt;WITHOUT ROWID&lt;/code&gt;&lt;/a&gt; tables.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;ValueObservation is the preferred GRDB tool for keeping your user interface synchronized with the database.&lt;/strong&gt; See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-usage&#34;&gt;ValueObservation Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-scheduling&#34;&gt;ValueObservation Scheduling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-operators&#34;&gt;ValueObservation Operators&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationmap&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationremoveduplicates&#34;&gt;removeDuplicates&lt;/a&gt;, ...&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-sharing&#34;&gt;ValueObservation Sharing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#specifying-the-region-tracked-by-valueobservation&#34;&gt;Specifying the Region Tracked by ValueObservation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-performance&#34;&gt;ValueObservation Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📘&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md#database-observation&#34;&gt;Combine Publisher&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ValueObservation Usage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that a unique &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt; is kept open during the whole duration of the observation.&lt;/p&gt; &lt;p&gt;ValueObservation does not notify changes performed by external connections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Define a ValueObservation by providing a function that fetches the observed value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation.tracking { db in&#xA;    /* fetch and return the observed value */&#xA;}&#xA;&#xA;// For example, an observation of [Player], which tracks all players:&#xA;let observation = ValueObservation.tracking { db in&#xA;    try Player.fetchAll(db)&#xA;}&#xA;&#xA;// The same observation, using shorthand notation:&#xA;let observation = ValueObservation.tracking(Player.fetchAll)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The observation can perform multiple requests, from multiple database tables, and even use raw SQL.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Example of a more complex ValueObservation&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct HallOfFame {&#xA;    var totalPlayerCount: Int&#xA;    var bestPlayers: [Player]&#xA;}&#xA;&#xA;// An observation of HallOfFame&#xA;let observation = ValueObservation.tracking { db -&amp;gt; HallOfFame in&#xA;    let totalPlayerCount = try Player.fetchCount(db)&#xA;    &#xA;    let bestPlayers = try Player&#xA;        .order(Column(&#34;score&#34;).desc)&#xA;        .limit(10)&#xA;        .fetchAll(db)&#xA;    &#xA;    return HallOfFame(&#xA;        totalPlayerCount: totalPlayerCount,&#xA;        bestPlayers: bestPlayers)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Example of a SQL ValueObservation&lt;/summary&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// An observation of the maximum score&#xA;let observation = ValueObservation.tracking { db in&#xA;    try Int.fetchOne(db, sql: &#34;SELECT MAX(score) FROM player&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the observation in order to be notified of changes:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Start observing the database&#xA;let cancellable: DatabaseCancellable = observation.start(&#xA;    in: dbQueue, // or dbPool&#xA;    onError: { error in print(&#34;players could not be fetched&#34;) },&#xA;    onChange: { (players: [Player]) in print(&#34;fresh players&#34;, players) })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Stop the observation by calling the &lt;code&gt;cancel()&lt;/code&gt; method on the object returned by the &lt;code&gt;start&lt;/code&gt; method. Cancellation is automatic when the cancellable is deinitialized:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;cancellable.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;As a convenience&lt;/strong&gt;, ValueObservation can be turned into an async sequence, a Combine publisher, or an RxSwift observable:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Async sequence example&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;&lt;strong&gt;&lt;span&gt;🔥&lt;/span&gt; EXPERIMENTAL&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation.tracking(Player.fetchAll)&#xA;for try await players in observation.values(in: dbQueue) {&#xA;    print(&#34;fresh players&#34;, players)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Combine example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Combine&#xA;import GRDB&#xA;&#xA;let observation = ValueObservation.tracking(Player.fetchAll)&#xA;&#xA;let cancellable = observation.publisher(in: dbQueue).sink(&#xA;    receiveCompletion: { completion in ... },&#xA;    receiveValue: { (players: [Player]) in&#xA;        print(&#34;fresh players&#34;, players)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&#34;&gt;Combine Support&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;RxSwift example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;import RxGRDB&#xA;import RxSwift&#xA;&#xA;let observation = ValueObservation.tracking(Player.fetchAll)&#xA;&#xA;let disposable = observation.rx.observe(in: dbQueue).subscribe(&#xA;    onNext: { (players: [Player]) in&#xA;        print(&#34;fresh players&#34;, players)&#xA;    },&#xA;    onError: { error in ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See the companion library &lt;a href=&#34;http://github.com/RxSwiftCommunity/RxGRDB&#34;&gt;RxGRDB&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Generally speaking&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ValueObservation notifies an initial value before the eventual changes.&lt;/li&gt; &#xA; &lt;li&gt;ValueObservation only notifies changes committed to disk.&lt;/li&gt; &#xA; &lt;li&gt;By default, ValueObservation notifies a fresh value whenever any of its component is modified (any fetched column, row, etc.). This can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#specifying-the-region-tracked-by-valueobservation&#34;&gt;configured&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By default, ValueObservation notifies the initial value, as well as eventual changes and errors, on the main thread, asynchronously. This can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-scheduling&#34;&gt;configured&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ValueObservation may coalesce subsequent changes into a single notification.&lt;/li&gt; &#xA; &lt;li&gt;ValueObservation may notify consecutive identical values. You can filter out the undesired duplicates with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationremoveduplicates&#34;&gt;removeDuplicates&lt;/a&gt; method.&lt;/li&gt; &#xA; &lt;li&gt;Starting an observation retains the database connection, until it is stopped. As long as the observation is active, the database connection won&#39;t be deallocated.&lt;/li&gt; &#xA; &lt;li&gt;The database observation stops when any of those conditions is met: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The cancellable returned by the &lt;code&gt;start&lt;/code&gt; method is cancelled or deinitialized.&lt;/li&gt; &#xA;   &lt;li&gt;An error occurs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Take care that there are use cases that ValueObservation is unfit for. For example, your application may need to process absolutely all changes, and avoid any coalescing. It may also need to process changes before any further modifications are performed in the database file. In those cases, you need to track &lt;em&gt;individual transactions&lt;/em&gt;, not values. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt;. If you need to process uncommitted changes, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactionobserver-protocol&#34;&gt;TransactionObserver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ValueObservation Scheduling&lt;/h3&gt; &#xA;&lt;p&gt;By default, ValueObservation notifies the initial value, as well as eventual changes and errors, on the main thread, asynchronously:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// The default scheduling&#xA;let cancellable = observation.start(&#xA;    in: dbQueue,&#xA;    onError: { error in ... },                   // called asynchronously on the main thread&#xA;    onChange: { value in print(&#34;fresh value&#34;) }) // called asynchronously on the main thread&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change this behavior by adding a &lt;code&gt;scheduling&lt;/code&gt; argument to the &lt;code&gt;start()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;scheduling: .immediate&lt;/code&gt; makes sure the initial value is notified immediately when the observation starts. It helps your application update the user interface without having to wait for any asynchronous notifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PlayersViewController: UIViewController {&#xA;    private var cancellable: DatabaseCancellable?&#xA;    &#xA;    override func viewWillAppear(_ animated: Bool) {&#xA;        super.viewWillAppear(animated)&#xA;        &#xA;        // Start observing the database&#xA;        let observation = ValueObservation.tracking(Player.fetchAll)&#xA;        cancellable = observation.start(&#xA;            in: dbQueue,&#xA;            scheduling: .immediate, // &amp;lt;- immediate scheduler&#xA;            onError: { error in ... },&#xA;            onChange: { [weak self] (players: [Player]) in&#xA;                guard let self = self else { return }&#xA;                self.updateView(players)&#xA;            })&#xA;        // &amp;lt;- Here the view has already been updated.&#xA;    }&#xA;    &#xA;    override func viewWillDisappear(_ animated: Bool) {&#xA;        super.viewWillDisappear(animated)&#xA;    &#xA;        // Stop observing the database&#xA;        cancellable?.cancel()&#xA;    }&#xA;    &#xA;    private func updateView(_ players: [Player]) { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;.immediate&lt;/code&gt; scheduling requires that the observation starts from the main thread. A fatal error is raised otherwise.&lt;/p&gt; &#xA;&lt;p&gt;The other built-in scheduler &lt;code&gt;.async(onQueue:)&lt;/code&gt; asynchronously schedules values and errors on the dispatch queue of your choice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let queue: DispatchQueue = ...&#xA;let cancellable = observation.start(&#xA;    in: dbQueue,&#xA;    scheduling: .async(onQueue: queue)&#xA;    onError: { error in ... },                   // called asynchronously on queue&#xA;    onChange: { value in print(&#34;fresh value&#34;) }) // called asynchronously on queue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ValueObservation Operators&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Operators&lt;/strong&gt; are methods that transform and configure value observations so that they better fit the needs of your application.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationmap&#34;&gt;ValueObservation.map&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationremoveduplicates&#34;&gt;ValueObservation.removeDuplicates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationrequireswriteaccess&#34;&gt;ValueObservation.requiresWriteAccess&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debugging Operators&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationhandleevents&#34;&gt;ValueObservation.handleEvents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationprint&#34;&gt;ValueObservation.print&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ValueObservation.map&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;map&lt;/code&gt; operator transforms the values notified by a ValueObservation.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Turn an observation of Player? into an observation of UIImage?&#xA;let observation = ValueObservation&#xA;    .tracking { db in try Player.fetchOne(db, id: 42) }&#xA;    .map { player in player?.image }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The transformation function does not block any database access. This makes the &lt;code&gt;map&lt;/code&gt; operator a tool which helps reducing &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-performance&#34;&gt;database contention&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ValueObservation.removeDuplicates&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;removeDuplicates()&lt;/code&gt; and &lt;code&gt;removeDuplicates(by:)&lt;/code&gt; operators filter out consecutive equal values:&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// An observation of distinct Player?&#xA;let observation = ValueObservation&#xA;    .tracking { db in try Player.fetchOne(db, id: 42) }&#xA;    .removeDuplicates()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: When the observed value does not adopt Equatable, and it is impractical to provide a custom comparison function, you can observe distinct raw database values such as &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;Row&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;, before converting them to the desired type. For example, the previous observation can be rewritten as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// An observation of distinct Player?&#xA;let request = Player.filter(id: 42)&#xA;let observation = ValueObservation&#xA;    .tracking { db in try Row.fetchOne(db, request) }&#xA;    .removeDuplicates() // Row adopts Equatable&#xA;    .map { row in row.map(Player.init(row:) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This technique is also available for requests that involve &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct TeamInfo: Decodable, FetchableRecord {&#xA;    var team: Team&#xA;    var players: [Player]&#xA;}&#xA;&#xA;// An observation of distinct [TeamInfo]&#xA;let request = Team.including(all: Team.players)&#xA;let observation = ValueObservation&#xA;    .tracking { db in try Row.fetchAll(db, request) }&#xA;    .removeDuplicates() // Row adopts Equatable&#xA;    .map { rows in rows.map(TeamInfo.init(row:) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ValueObservation.requiresWriteAccess&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;requiresWriteAccess&lt;/code&gt; property is false by default. When true, a ValueObservation has a write access to the database, and its fetches are automatically wrapped in a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;savepoint&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var observation = ValueObservation.tracking { db in&#xA;    // write access allowed&#xA;    ...&#xA;}&#xA;observation.requiresWriteAccess = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pool&lt;/a&gt;, this flag has a performance hit.&lt;/p&gt; &#xA;&lt;h4&gt;ValueObservation.handleEvents&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;handleEvents&lt;/code&gt; operator lets your application observe the lifetime of a ValueObservation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation&#xA;    .tracking { db in ... }&#xA;    .handleEvents(&#xA;        willStart: {&#xA;            // The observation starts.&#xA;        },&#xA;        willFetch: {&#xA;            // The observation will perform a database fetch.&#xA;        },&#xA;        willTrackRegion: { databaseRegion in&#xA;            // The observation starts tracking a database region.&#xA;        },&#xA;        databaseDidChange: {&#xA;            // The observation was impacted by a database change.&#xA;        },&#xA;        didReceiveValue: { value in&#xA;            // A fresh value was observed.&#xA;            // NOTE: This closure runs on an unspecified DispatchQueue.&#xA;        },&#xA;        didFail: { error in&#xA;            // The observation completes with an error.&#xA;        },&#xA;        didCancel: {&#xA;            // The observation was cancelled.&#xA;        })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationprint&#34;&gt;ValueObservation.print&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ValueObservation.print&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; operator logs messages for all ValueObservation events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation&#xA;    .tracking { db in ... }&#xA;    .print()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationhandleevents&#34;&gt;ValueObservation.handleEvents&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ValueObservation Sharing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;&lt;strong&gt;&lt;span&gt;🔥&lt;/span&gt; EXPERIMENTAL&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sharing a ValueObservation allows several components of your app to be notified of database changes, in an efficient way.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A shared observation spares database resources. For example, when a database change happens, a fresh value is fetched only once, and then notified to all subscriptions.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SharedValueObservation&amp;lt;[Player]&amp;gt;&#xA;let sharedObservation = ValueObservation&#xA;    .tracking { db in try Player.fetchAll(db) }&#xA;    .shared(in: dbQueue)&#xA;//  ~~~~~~~~~~~~~~~~~~~~&#xA;    &#xA;let cancellable = try sharedObservation.start(&#xA;    onError: { error in ... },&#xA;    onChange: { players: [Player] in&#xA;        print(&#34;fresh players: \(players)&#34;)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The sharing only applies if you start observing the database from the same &lt;code&gt;SharedValueObservation&lt;/code&gt; instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// NOT shared&#xA;let cancellable1 = ValueObservation.tracking { db in ... }.shared(in: dbQueue).start(...)&#xA;let cancellable2 = ValueObservation.tracking { db in ... }.shared(in: dbQueue).start(...)&#xA;&#xA;// Shared&#xA;let sharedObservation = ValueObservation.tracking { db in ... }.shared(in: dbQueue)&#xA;let cancellable1 = sharedObservation.start(...)&#xA;let cancellable2 = sharedObservation.start(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, fresh values are dispatched asynchronously on the main queue. You can change this behavior (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-scheduling&#34;&gt;ValueObservation Scheduling&lt;/a&gt; for more information):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sharedObservation = ValueObservation&#xA;    .tracking { db in try Player.fetchAll(db) }&#xA;    .shared(in: dbQueue, scheduling: .immediate)&#xA;//                       ~~~~~~~~~~~~~~~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A shared observation starts observing the database as soon as it is subscribed. You can choose if database observation should stop, or not, when its number of subscriptions drops down to zero, with the &lt;code&gt;extent&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// The default: stops observing the database when the number of subscriptions &#xA;// drops down to zero, and restart database observation on the next subscription.&#xA;//&#xA;// Database errors can be recovered by resubscribing to the shared observation.&#xA;let sharedObservation = ValueObservation&#xA;    .tracking { db in try Player.fetchAll(db) }&#xA;    .shared(in: dbQueue, extent: .whileObserved)&#xA;//                       ~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;// Only stops observing the database when the shared observation is deinitialized,&#xA;// and all subscriptions are cancelled.&#xA;//&#xA;// This extent prevents the shared observation from recovering from database&#xA;// errors. To recover from database errors, create a new shared&#xA;// SharedValueObservation instance.&#xA;let sharedObservation = ValueObservation&#xA;    .tracking { db in try Player.fetchAll(db) }&#xA;    .shared(in: dbQueue, extent: .observationLifetime)&#xA;//                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;ValueObservation&lt;/code&gt; and &lt;code&gt;SharedValueObservation&lt;/code&gt; are nearly identical, but there is a difference you should be aware of. &lt;code&gt;SharedValueObservation&lt;/code&gt; has no &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-operators&#34;&gt;operator&lt;/a&gt; such as &lt;code&gt;map&lt;/code&gt;. As a replacement, you may, for example, use Combine apis:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sharedObservation = ValueObservation.tracking { ... }.shared(in: dbQueue)&#xA;let cancellable = try sharedObservation&#xA;    .publisher() // Turn shared observation into a Combine Publisher&#xA;    .map { ... } // The map operator from Combine&#xA;    .sink(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Specifying the Region Tracked by ValueObservation&lt;/h3&gt; &#xA;&lt;p&gt;While the standard &lt;code&gt;ValueObservation.tracking { db in ... }&lt;/code&gt; method lets you track changes to a fetched value and receive any changes to it, sometimes your use case might require more granular control.&lt;/p&gt; &#xA;&lt;p&gt;Consider a scenario where you&#39;d like to get a specific Player&#39;s row, but only when their &lt;code&gt;score&lt;/code&gt; column changes. You can use &lt;code&gt;tracking(region:fetch:)&lt;/code&gt; to do just that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation.tracking(&#xA;    // Define what database region constitutes a &#34;change&#34;&#xA;    region: Player.select(Column(&#34;score&#34;)).filter(id: 1),&#xA;    // Define what to fetch upon such change&#xA;    fetch: { db in try Player.fetchOne(db, id: 1) }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This overload of &lt;code&gt;ValueObservation&lt;/code&gt; lets you entirely separate the &lt;strong&gt;observed region&lt;/strong&gt; from the &lt;strong&gt;fetched value&lt;/strong&gt; itself, providing utmost flexibility. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databaseregionconvertible-protocol&#34;&gt;DatabaseRegionConvertible&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;ValueObservation Performance&lt;/h3&gt; &#xA;&lt;p&gt;This chapter further describes runtime aspects of ValueObservation, and provides some optimization tips for demanding applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ValueObservation is triggered by database transactions that may modify the tracked value.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, if you track the maximum score of players, all transactions that impact the &lt;code&gt;score&lt;/code&gt; column of the &lt;code&gt;player&lt;/code&gt; database table (any update, insertion, or deletion) trigger the observation, even if the maximum score itself is not changed.&lt;/p&gt; &#xA;&lt;p&gt;You can filter out undesired duplicate notifications with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationremoveduplicates&#34;&gt;removeDuplicates&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ValueObservation can create database contention.&lt;/strong&gt; In other words, active observations take a toll on the constrained database resources. When triggered by impactful transactions, observations fetch fresh values, and can delay read and write database accesses of other application components.&lt;/p&gt; &#xA;&lt;p&gt;When needed, you can help GRDB optimize observations and reduce database contention:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Stop observations when possible.&lt;/p&gt; &lt;p&gt;For example, if a UIViewController needs to display database values, it can start the observation in &lt;code&gt;viewWillAppear&lt;/code&gt;, and stop it in &lt;code&gt;viewWillDisappear&lt;/code&gt;. Check the sample code &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-scheduling&#34;&gt;above&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Share observations when possible.&lt;/p&gt; &lt;p&gt;Each call to &lt;code&gt;ValueObservation.start&lt;/code&gt; method triggers independent values refreshes. When several components of your app are interested in the same value, consider &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation-sharing&#34;&gt;sharing the observation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pool&lt;/a&gt;, because it can perform multi-threaded database accesses.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: When the observation processes some raw fetched values, use the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationmap&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; operator:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Plain observation&#xA;let observation = ValueObservation.tracking { db -&amp;gt; MyValue in&#xA;    let players = try Player.fetchAll(db)&#xA;    return computeMyValue(players)&#xA;}&#xA;&#xA;// Optimized observation&#xA;let observation = ValueObservation&#xA;    .tracking { db try Player.fetchAll(db) }&#xA;    .map { players in computeMyValue(players) }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;map&lt;/code&gt; operator helps reducing database contention because it performs its job without blocking concurrent database reads.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: When the observation tracks a constant database region, create an optimized observation with the &lt;code&gt;ValueObservation.trackingConstantRegion(_:)&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;The optimization only kicks in when the observation is started from a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pool&lt;/a&gt;: fresh values are fetched concurrently, and do not block database writes.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ValueObservation.trackingConstantRegion(_:)&lt;/code&gt; has a precondition: the observed requests must fetch from a single and constant database region. The tracked region is made of tables, columns, and, when possible, rowids of individual rows. All changes that happen outside of this region do not impact the observation.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Tracks the full &#39;player&#39; table (only)&#xA;let observation = ValueObservation.trackingConstantRegion { db -&amp;gt; [Player] in&#xA;    try Player.fetchAll(db)&#xA;}&#xA;&#xA;// Tracks the row with id 42 in the &#39;player&#39; table (only)&#xA;let observation = ValueObservation.trackingConstantRegion { db -&amp;gt; Player? in&#xA;    try Player.fetchOne(db, id: 42)&#xA;}&#xA;&#xA;// Tracks the &#39;score&#39; column in the &#39;player&#39; table (only)&#xA;let observation = ValueObservation.trackingConstantRegion { db -&amp;gt; Int? in&#xA;    try Player.select(max(Column(&#34;score&#34;))).fetchOne(db)&#xA;}&#xA;&#xA;// Tracks both the &#39;player&#39; and &#39;team&#39; tables (only)&#xA;let observation = ValueObservation.trackingConstantRegion { db -&amp;gt; ([Team], [Player]) in&#xA;    let teams = try Team.fetchAll(db)&#xA;    let players = try Player.fetchAll(db)&#xA;    return (teams, players)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you want to observe a varying database region, make sure you use the plain &lt;code&gt;ValueObservation.tracking(_:)&lt;/code&gt; method instead, or else some changes will not be notified.&lt;/p&gt; &lt;p&gt;For example, consider those three observations below that depend on some user preference. They all track a varying region, and must use &lt;code&gt;ValueObservation.tracking(_:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Does not always track the same row in the player table.&#xA;let observation = ValueObservation.tracking { db -&amp;gt; Player? in&#xA;    let pref = try Preference.fetchOne(db) ?? .default&#xA;    return try Player.fetchOne(db, id: pref.favoritePlayerId)&#xA;}&#xA;&#xA;// Only tracks the &#39;user&#39; table if there are some blocked emails.&#xA;let observation = ValueObservation.tracking { db -&amp;gt; [User] in&#xA;    let pref = try Preference.fetchOne(db) ?? .default&#xA;    let blockedEmails = pref.blockedEmails&#xA;    return try User.filter(blockedEmails.contains(Column(&#34;email&#34;))).fetchAll(db)&#xA;}&#xA;&#xA;// Sometimes tracks the &#39;food&#39; table, and sometimes the &#39;beverage&#39; table.&#xA;let observation = ValueObservation.tracking { db -&amp;gt; Int in&#xA;    let pref = try Preference.fetchOne(db) ?? .default&#xA;    switch pref.selection {&#xA;    case .food: return try Food.fetchCount(db)&#xA;    case .beverage: return try Beverage.fetchCount(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you are in doubt, add the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservationprint&#34;&gt;&lt;code&gt;print()&lt;/code&gt; method&lt;/a&gt; to your observation before starting it, and look in your application logs for lines that start with &lt;code&gt;tracked region&lt;/code&gt;. Make sure the printed database region covers the changes you expect to be tracked.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Examples of tracked regions&lt;/summary&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;empty&lt;/code&gt;: The empty region, which tracks nothing and never triggers the observation.&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;player(*)&lt;/code&gt;: The full &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;player(id,name)&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;player(id,name)[1]&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the row with id 1 in the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;player(*),preference(*)&lt;/code&gt;: Both the full &lt;code&gt;player&lt;/code&gt; and &lt;code&gt;preference&lt;/code&gt; tables&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;DatabaseRegionObservation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;DatabaseRegionObservation tracks changes in database &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt;, and notifies each impactful &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;transaction&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tracked changes are insertions, updates, and deletions that impact the tracked requests, performed with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;raw SQL&lt;/a&gt;. This includes indirect changes triggered by &lt;a href=&#34;https://www.sqlite.org/foreignkeys.html#fk_actions&#34;&gt;foreign keys actions&lt;/a&gt; or &lt;a href=&#34;https://www.sqlite.org/lang_createtrigger.html&#34;&gt;SQL triggers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Some changes are not notified: changes to internal system tables (such as &lt;code&gt;sqlite_master&lt;/code&gt;), and changes to &lt;a href=&#34;https://www.sqlite.org/withoutrowid.html&#34;&gt;&lt;code&gt;WITHOUT ROWID&lt;/code&gt;&lt;/a&gt; tables.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;DatabaseRegionObservation calls your application right after changes have been committed in the database, and before any other thread had any opportunity to perform further changes. &lt;em&gt;This is a pretty strong guarantee, that most applications do not really need.&lt;/em&gt; Instead, most applications prefer to be notified with fresh values: make sure you check &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; before using DatabaseRegionObservation.&lt;/p&gt; &#xA;&lt;h3&gt;DatabaseRegionObservation Usage&lt;/h3&gt; &#xA;&lt;p&gt;Define an observation by providing one or several requests to track:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Track all players&#xA;let observation = DatabaseRegionObservation(tracking: Player.all())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then start the observation from a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-queues&#34;&gt;database queue&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;pool&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observer = try observation.start(in: dbQueue) { (db: Database) in&#xA;    print(&#34;Players were changed&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And enjoy the changes notifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try Player(name: &#34;Arthur&#34;).insert(db)&#xA;}&#xA;// Prints &#34;Players were changed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the observation lasts until the observer returned by the &lt;code&gt;start&lt;/code&gt; method is deinitialized. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservationextent&#34;&gt;DatabaseRegionObservation.extent&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;You can also feed DatabaseRegionObservation with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregion&#34;&gt;DatabaseRegion&lt;/a&gt;, or any type which conforms to the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databaseregionconvertible-protocol&#34;&gt;DatabaseRegionConvertible&lt;/a&gt; protocol. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Observe the full database&#xA;let observation = DatabaseRegionObservation(tracking: DatabaseRegion.fullDatabase)&#xA;let observer = try observation.start(in: dbQueue) { (db: Database) in&#xA;    print(&#34;Database was changed&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DatabaseRegionObservation.extent&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;extent&lt;/code&gt; property lets you specify the duration of the observation. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#observation-extent&#34;&gt;Observation Extent&lt;/a&gt; for more details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// This observation lasts until the database connection is closed&#xA;var observation = DatabaseRegionObservation...&#xA;observation.extent = .databaseLifetime&#xA;_ = try observation.start(in: dbQueue) { db in ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default extent is &lt;code&gt;.observerLifetime&lt;/code&gt;: the observation stops when the observer returned by &lt;code&gt;start&lt;/code&gt; is deinitialized.&lt;/p&gt; &#xA;&lt;p&gt;Regardless of the extent of an observation, you can always stop observation with the &lt;code&gt;remove(transactionObserver:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Start&#xA;let observer = try observation.start(in: dbQueue) { db in ... }&#xA;&#xA;// Stop&#xA;dbQueue.remove(transactionObserver: observer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TransactionObserver Protocol&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;TransactionObserver&lt;/code&gt; protocol lets you &lt;strong&gt;observe individual database changes and transactions&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol TransactionObserver : class {&#xA;    /// Notifies a database change:&#xA;    /// - event.kind (insert, update, or delete)&#xA;    /// - event.tableName&#xA;    /// - event.rowID&#xA;    ///&#xA;    /// For performance reasons, the event is only valid for the duration of&#xA;    /// this method call. If you need to keep it longer, store a copy:&#xA;    /// event.copy().&#xA;    func databaseDidChange(with event: DatabaseEvent)&#xA;    &#xA;    /// Filters the database changes that should be notified to the&#xA;    /// `databaseDidChange(with:)` method.&#xA;    func observes(eventsOfKind eventKind: DatabaseEventKind) -&amp;gt; Bool&#xA;    &#xA;    /// An opportunity to rollback pending changes by throwing an error.&#xA;    func databaseWillCommit() throws&#xA;    &#xA;    /// Database changes have been committed.&#xA;    func databaseDidCommit(_ db: Database)&#xA;    &#xA;    /// Database changes have been rollbacked.&#xA;    func databaseDidRollback(_ db: Database)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#activate-a-transaction-observer&#34;&gt;Activate a Transaction Observer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-and-transactions&#34;&gt;Database Changes And Transactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#filtering-database-events&#34;&gt;Filtering Database Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#observation-extent&#34;&gt;Observation Extent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregion&#34;&gt;DatabaseRegion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#support-for-sqlite-pre-update-hooks&#34;&gt;Support for SQLite Pre-Update Hooks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Activate a Transaction Observer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;To activate a transaction observer, add it to the database queue or pool:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observer = MyObserver()&#xA;dbQueue.add(transactionObserver: observer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, database holds weak references to its transaction observers: they are not retained, and stop getting notifications after they are deinitialized. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#observation-extent&#34;&gt;Observation Extent&lt;/a&gt; for more options.&lt;/p&gt; &#xA;&lt;h3&gt;Database Changes And Transactions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A transaction observer is notified of all database changes&lt;/strong&gt;: inserts, updates and deletes. This includes indirect changes triggered by ON DELETE and ON UPDATE actions associated to &lt;a href=&#34;https://www.sqlite.org/foreignkeys.html#fk_actions&#34;&gt;foreign keys&lt;/a&gt;, and &lt;a href=&#34;https://www.sqlite.org/lang_createtrigger.html&#34;&gt;SQL triggers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Some changes are not notified: changes to internal system tables (such as &lt;code&gt;sqlite_master&lt;/code&gt;), changes to &lt;a href=&#34;https://www.sqlite.org/withoutrowid.html&#34;&gt;&lt;code&gt;WITHOUT ROWID&lt;/code&gt;&lt;/a&gt; tables, and the deletion of duplicate rows triggered by &lt;a href=&#34;https://www.sqlite.org/lang_conflict.html&#34;&gt;&lt;code&gt;ON CONFLICT REPLACE&lt;/code&gt;&lt;/a&gt; clauses (this last exception might change in a future release of SQLite).&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Transactions performed during read-only database accesses are not notified.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Notified changes are not actually written to disk until the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactions-and-savepoints&#34;&gt;transaction&lt;/a&gt; commits, and the &lt;code&gt;databaseDidCommit&lt;/code&gt; callback is called. On the other side, &lt;code&gt;databaseDidRollback&lt;/code&gt; confirms their invalidation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;INSERT ...&#34;) // 1. didChange&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;) // 2. didChange&#xA;}                                     // 3. willCommit, 4. didCommit&#xA;&#xA;try dbQueue.inTransaction { db in&#xA;    try db.execute(sql: &#34;INSERT ...&#34;) // 1. didChange&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;) // 2. didChange&#xA;    return .rollback                  // 3. didRollback&#xA;}&#xA;&#xA;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;INSERT ...&#34;) // 1. didChange&#xA;    throw SomeError()&#xA;}                                     // 2. didRollback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Database statements that are executed outside of any transaction do not drop off the radar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.inDatabase { db in&#xA;    try db.execute(sql: &#34;INSERT ...&#34;) // 1. didChange, 2. willCommit, 3. didCommit&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;) // 4. didChange, 5. willCommit, 6. didCommit&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Changes that are on hold because of a &lt;a href=&#34;https://www.sqlite.org/lang_savepoint.html&#34;&gt;savepoint&lt;/a&gt; are only notified after the savepoint has been released. This makes sure that notified events are only events that have an opportunity to be committed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.inTransaction { db in&#xA;    try db.execute(sql: &#34;INSERT ...&#34;)            // 1. didChange&#xA;    &#xA;    try db.execute(sql: &#34;SAVEPOINT foo&#34;)&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;)            // delayed&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;)            // delayed&#xA;    try db.execute(sql: &#34;RELEASE SAVEPOINT foo&#34;) // 2. didChange, 3. didChange&#xA;    &#xA;    try db.execute(sql: &#34;SAVEPOINT foo&#34;)&#xA;    try db.execute(sql: &#34;UPDATE ...&#34;)            // not notified&#xA;    try db.execute(sql: &#34;ROLLBACK TO SAVEPOINT foo&#34;)&#xA;    &#xA;    return .commit                               // 4. willCommit, 5. didCommit&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Eventual errors&lt;/strong&gt; thrown from &lt;code&gt;databaseWillCommit&lt;/code&gt; are exposed to the application code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try dbQueue.inTransaction { db in&#xA;        ...&#xA;        return .commit           // 1. willCommit (throws), 2. didRollback&#xA;    }&#xA;} catch {&#xA;    // 3. The error thrown by the transaction observer.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: all callbacks are called in a protected dispatch queue, and serialized with all database updates.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the databaseDidChange(with:) and databaseWillCommit() callbacks must not touch the SQLite database. This limitation does not apply to databaseDidCommit and databaseDidRollback which can use their database argument.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; are based on the TransactionObserver protocol.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://gist.github.com/groue/2e21172719e634657dfd&#34;&gt;TableChangeObserver.swift&lt;/a&gt;, which shows a transaction observer that notifies of modified database tables with NSNotificationCenter.&lt;/p&gt; &#xA;&lt;h3&gt;Filtering Database Events&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Transaction observers can avoid being notified of database changes they are not interested in.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The filtering happens in the &lt;code&gt;observes(eventsOfKind:)&lt;/code&gt; method, which tells whether the observer wants notification of specific kinds of changes, or not. For example, here is how an observer can focus on the changes that happen on the &#34;player&#34; database table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PlayerObserver: TransactionObserver {&#xA;    func observes(eventsOfKind eventKind: DatabaseEventKind) -&amp;gt; Bool {&#xA;        // Only observe changes to the &#34;player&#34; table.&#xA;        return eventKind.tableName == &#34;player&#34;&#xA;    }&#xA;    &#xA;    func databaseDidChange(with event: DatabaseEvent) {&#xA;        // This method is only called for changes that happen to&#xA;        // the &#34;player&#34; table.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generally speaking, the &lt;code&gt;observes(eventsOfKind:)&lt;/code&gt; method can distinguish insertions from deletions and updates, and is also able to inspect the columns that are about to be changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PlayerScoreObserver: TransactionObserver {&#xA;    func observes(eventsOfKind eventKind: DatabaseEventKind) -&amp;gt; Bool {&#xA;        // Only observe changes to the &#34;score&#34; column of the &#34;player&#34; table.&#xA;        switch eventKind {&#xA;        case .insert(let tableName):&#xA;            return tableName == &#34;player&#34;&#xA;        case .delete(let tableName):&#xA;            return tableName == &#34;player&#34;&#xA;        case .update(let tableName, let columnNames):&#xA;            return tableName == &#34;player&#34; &amp;amp;&amp;amp; columnNames.contains(&#34;score&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the &lt;code&gt;observes(eventsOfKind:)&lt;/code&gt; method returns false for all event kinds, the observer is still notified of commits and rollbacks (except during read-only database accesses):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PureTransactionObserver: TransactionObserver {&#xA;    func observes(eventsOfKind eventKind: DatabaseEventKind) -&amp;gt; Bool {&#xA;        // Ignore all individual changes&#xA;        return false&#xA;    }&#xA;    &#xA;    func databaseDidChange(with event: DatabaseEvent) { /* Never called */ }&#xA;    func databaseWillCommit() throws { /* Called before commit */ }&#xA;    func databaseDidRollback(_ db: Database) { /* Called on rollback */ }&#xA;    func databaseDidCommit(_ db: Database) { /* Called on commit */ }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about event filtering, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregion&#34;&gt;DatabaseRegion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Observation Extent&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can specify how long an observer is notified of database changes and transactions.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;remove(transactionObserver:)&lt;/code&gt; method explicitly stops notifications, at any time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// From a database queue or pool:&#xA;dbQueue.remove(transactionObserver: observer)&#xA;&#xA;// From a database connection:&#xA;dbQueue.inDatabase { db in&#xA;    db.remove(transactionObserver: observer)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, use the &lt;code&gt;extent&lt;/code&gt; parameter of the &lt;code&gt;add(transactionObserver:extent:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observer = MyObserver()&#xA;&#xA;// On a database queue or pool:&#xA;dbQueue.add(transactionObserver: observer) // default extent&#xA;dbQueue.add(transactionObserver: observer, extent: .observerLifetime)&#xA;dbQueue.add(transactionObserver: observer, extent: .nextTransaction)&#xA;dbQueue.add(transactionObserver: observer, extent: .databaseLifetime)&#xA;&#xA;// On a database connection:&#xA;dbQueue.inDatabase { db in&#xA;    db.add(transactionObserver: ...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The default extent is &lt;code&gt;.observerLifetime&lt;/code&gt;: the database holds a weak reference to the observer, and the observation automatically ends when the observer is deinitialized. Meanwhile, observer is notified of all changes and transactions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;.nextTransaction&lt;/code&gt; activates the observer until the current or next transaction completes. The database keeps a strong reference to the observer until its &lt;code&gt;databaseDidCommit&lt;/code&gt; or &lt;code&gt;databaseDidRollback&lt;/code&gt; method is eventually called. Hereafter the observer won&#39;t get any further notification.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;.databaseLifetime&lt;/code&gt; has the database retain and notify the observer until the database connection is closed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally, an observer may ignore all database changes until the end of the current transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PlayerObserver: TransactionObserver {&#xA;    var playerTableWasModified = false&#xA;    &#xA;    func observes(eventsOfKind eventKind: DatabaseEventKind) -&amp;gt; Bool {&#xA;        eventKind.tableName == &#34;player&#34;&#xA;    }&#xA;    &#xA;    func databaseDidChange(with event: DatabaseEvent) {&#xA;        playerTableWasModified = true&#xA;        &#xA;        // It is pointless to keep on tracking further changes:&#xA;        stopObservingDatabaseChangesUntilNextTransaction()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After &lt;code&gt;stopObservingDatabaseChangesUntilNextTransaction()&lt;/code&gt;, the &lt;code&gt;databaseDidChange(with:)&lt;/code&gt; method will not be notified of any change for the remaining duration of the current transaction. This helps GRDB optimize database observation.&lt;/p&gt; &#xA;&lt;h3&gt;DatabaseRegion&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;DatabaseRegion&lt;/code&gt; is a reunion of database tables, and combination of columns and rows (identified by their rowid):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;|Table1 |   |Table2 |   |Table3 |   |Table4 |   |Table5 |&#xA;|-------|   |-------|   |-------|   |-------|   |-------|&#xA;|x|x|x|x|   |x| | | |   |x|x|x|x|   |x|x| |x|   | | | | |&#xA;|x|x|x|x|   |x| | | |   | | | | |   | | | | |   | |x| | |&#xA;|x|x|x|x|   |x| | | |   | | | | |   |x|x| |x|   | | | | |&#xA;|x|x|x|x|   |x| | | |   | | | | |   | | | | |   | | | | |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DatabaseRegion helps &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt; track changes in the database through the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#transactionobserver-protocol&#34;&gt;TransactionObserver&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that observing a database region spots &lt;em&gt;potential&lt;/em&gt; changes, not &lt;em&gt;actual&lt;/em&gt; changes in the results of a request.&lt;/strong&gt; A change is notified if and only if a statement has actually modified the tracked tables and columns by inserting, updating, or deleting a row.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you observe the region of &lt;code&gt;Player.select(max(Column(&#34;score&#34;)))&lt;/code&gt;, then you&#39;ll get be notified of all changes performed on the &lt;code&gt;score&lt;/code&gt; column of the &lt;code&gt;player&lt;/code&gt; table (updates, insertions and deletions), even if they do not modify the value of the maximum score. However, you will not get any notification for changes performed on other database tables, or updates to other columns of the player table.&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the &lt;a href=&#34;https://groue.github.io/GRDB.swift/docs/5.24/Structs/DatabaseRegion.html&#34;&gt;reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;The DatabaseRegionConvertible Protocol&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;DatabaseRegionConvertible&lt;/strong&gt; is a protocol for all types that can turn into a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregion&#34;&gt;DatabaseRegion&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DatabaseRegionConvertible {&#xA;    func databaseRegion(_ db: Database) throws -&amp;gt; DatabaseRegion&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; adopt this protocol, and this allows them to be observed with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// An observation triggered by all changes to the database&#xA;DatabaseRegionObservation(tracking: .fullDatabase)&#xA;&#xA;// An observation triggered by all changes to the player table&#xA;DatabaseRegionObservation(tracking: Table(&#34;player&#34;))&#xA;&#xA;// An observation triggered by all changes to the row with rowid 1 in the player table&#xA;DatabaseRegionObservation(tracking: Player.filter(id: 1))&#xA;&#xA;// An observation triggered by all changes to the score column of the player table&#xA;DatabaseRegionObservation(tracking: SQLRequest(&#34;SELECT score FROM player&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that specifying a region as a request &lt;em&gt;does not run the request&lt;/em&gt;. In the above example, &lt;code&gt;Player.filter(id: 1)&lt;/code&gt; and &lt;code&gt;SELECT score FROM player&lt;/code&gt; are never executed. They are only &lt;em&gt;compiled&lt;/em&gt; by SQLite, so that GRDB understands the tables, rows, and columns that constitute the database region.&lt;/p&gt; &#xA;&lt;h3&gt;Support for SQLite Pre-Update Hooks&lt;/h3&gt; &#xA;&lt;p&gt;When SQLite is built with the SQLITE_ENABLE_PREUPDATE_HOOK option, TransactionObserverType gets an extra callback which lets you observe individual column values in the rows modified by a transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol TransactionObserverType : class {&#xA;    #if SQLITE_ENABLE_PREUPDATE_HOOK&#xA;    /// Notifies before a database change (insert, update, or delete)&#xA;    /// with change information (initial / final values for the row&#39;s&#xA;    /// columns).&#xA;    ///&#xA;    /// The event is only valid for the duration of this method call. If you&#xA;    /// need to keep it longer, store a copy: event.copy().&#xA;    func databaseWillChange(with event: DatabasePreUpdateEvent)&#xA;    #endif&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This extra API can be activated in two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the GRDB.swift CocoaPod with a custom compilation option, as below. It uses the system SQLite, which is compiled with SQLITE_ENABLE_PREUPDATE_HOOK support, but only on iOS 11.0+ (we don&#39;t know the minimum version of macOS, tvOS, watchOS):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;GRDB.swift&#39;&#xA;platform :ios, &#39;11.0&#39; # or above&#xA;&#xA;post_install do |installer|&#xA;  installer.pods_project.targets.select { |target| target.name == &#34;GRDB.swift&#34; }.each do |target|&#xA;    target.build_configurations.each do |config|&#xA;      # Enable extra GRDB APIs&#xA;      config.build_settings[&#39;OTHER_SWIFT_FLAGS&#39;] = &#34;$(inherited) -D SQLITE_ENABLE_PREUPDATE_HOOK&#34;&#xA;      # Enable extra SQLite APIs&#xA;      config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] = &#34;$(inherited) GRDB_SQLITE_ENABLE_PREUPDATE_HOOK=1&#34;&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: make sure you use the right platform version! You will get runtime errors on devices with a lower version.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;GRDB_SQLITE_ENABLE_PREUPDATE_HOOK=1&lt;/code&gt; option in &lt;code&gt;GCC_PREPROCESSOR_DEFINITIONS&lt;/code&gt; defines some C function prototypes that are lacking from the system &lt;code&gt;&amp;lt;sqlite3.h&amp;gt;&lt;/code&gt; header. When Xcode eventually ships with an SDK that includes a complete header, you may get a compiler error about duplicate function definitions. When this happens, just remove this &lt;code&gt;GRDB_SQLITE_ENABLE_PREUPDATE_HOOK=1&lt;/code&gt; option.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt; and activate the &lt;code&gt;SQLITE_ENABLE_PREUPDATE_HOOK&lt;/code&gt; compilation option.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Encryption&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB can encrypt your database with &lt;a href=&#34;http://sqlcipher.net&#34;&gt;SQLCipher&lt;/a&gt; v3.4+.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;, and specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# GRDB with SQLCipher 4&#xA;pod &#39;GRDB.swift/SQLCipher&#39;&#xA;pod &#39;SQLCipher&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;&#xA;# GRDB with SQLCipher 3&#xA;pod &#39;GRDB.swift/SQLCipher&#39;&#xA;pod &#39;SQLCipher&#39;, &#39;~&amp;gt; 3.4&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you remove any existing &lt;code&gt;pod &#39;GRDB.swift&#39;&lt;/code&gt; from your Podfile. &lt;code&gt;GRDB.swift/SQLCipher&lt;/code&gt; must be the only active GRDB pod in your whole project, or you will face linker or runtime errors, due to the conflicts between SQLCipher and the system SQLite.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#creating-or-opening-an-encrypted-database&#34;&gt;Creating or Opening an Encrypted Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#changing-the-passphrase-of-an-encrypted-database&#34;&gt;Changing the Passphrase of an Encrypted Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#exporting-a-database-to-an-encrypted-database&#34;&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#security-considerations&#34;&gt;Security Considerations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Creating or Opening an Encrypted Database&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;You create and open an encrypted database&lt;/strong&gt; by providing a passphrase to your &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also in &lt;code&gt;prepareDatabase&lt;/code&gt; that you perform other &lt;a href=&#34;https://www.zetetic.net/sqlcipher/sqlcipher-api/&#34;&gt;SQLCipher configuration steps&lt;/a&gt; that must happen early in the lifetime of a SQLCipher connection. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;    try db.execute(sql: &#34;PRAGMA cipher_page_size = ...&#34;)&#xA;    try db.execute(sql: &#34;PRAGMA kdf_iter = ...&#34;)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to open an existing SQLCipher 3 database with SQLCipher 4, you may want to run the &lt;code&gt;cipher_compatibility&lt;/code&gt; pragma:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Open an SQLCipher 3 database with SQLCipher 4&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;    try db.execute(sql: &#34;PRAGMA cipher_compatibility = 3&#34;)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.zetetic.net/blog/2018/11/30/sqlcipher-400-release/&#34;&gt;SQLCipher 4.0.0 Release&lt;/a&gt; and &lt;a href=&#34;https://discuss.zetetic.net/t/upgrading-to-sqlcipher-4/3283&#34;&gt;Upgrading to SQLCipher 4&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Changing the Passphrase of an Encrypted Database&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can change the passphrase&lt;/strong&gt; of an already encrypted database.&lt;/p&gt; &#xA;&lt;p&gt;When you use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-queues&#34;&gt;database queue&lt;/a&gt;, open the database with the old passphrase, and then apply the new passphrase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.changePassphrase(&#34;newSecret&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pool&lt;/a&gt;, make sure that no concurrent read can happen by changing the passphrase within the &lt;code&gt;barrierWriteWithoutTransaction&lt;/code&gt; block. You must also ensure all future reads open a new database connection by calling the &lt;code&gt;invalidateReadOnlyConnections&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbPool.barrierWriteWithoutTransaction { db in&#xA;    try db.changePassphrase(&#34;newSecret&#34;)&#xA;    dbPool.invalidateReadOnlyConnections()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: When an application wants to keep on using a database queue or pool after the passphrase has changed, it is responsible for providing the correct passphrase to the &lt;code&gt;usePassphrase&lt;/code&gt; method called in the database preparation function. Consider:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WRONG: this won&#39;t work across a passphrase change&#xA;let passphrase = try getPassphrase()&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&#xA;// CORRECT: get the latest passphrase when it is needed&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try getPassphrase()&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;DatabasePool.barrierWriteWithoutTransaction&lt;/code&gt; method does not prevent &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#database-snapshots&#34;&gt;database snapshots&lt;/a&gt; from accessing the database during the passphrase change, or after the new passphrase has been applied to the database. Those database accesses may throw errors. Applications should provide their own mechanism for invalidating open snapshots before the passphrase is changed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: Instead of changing the passphrase &#34;in place&#34; as described here, you can also export the database in a new encrypted database that uses the new passphrase. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#exporting-a-database-to-an-encrypted-database&#34;&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Exporting a Database to an Encrypted Database&lt;/h3&gt; &#xA;&lt;p&gt;Providing a passphrase won&#39;t encrypt a clear-text database that already exists, though. SQLCipher can&#39;t do that, and you will get an error instead: &lt;code&gt;SQLite error 26: file is encrypted or is not a database&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead, create a new encrypted database, at a distinct location, and export the content of the existing database. This can both encrypt a clear-text database, or change the passphrase of an encrypted database.&lt;/p&gt; &#xA;&lt;p&gt;The technique to do that is &lt;a href=&#34;https://discuss.zetetic.net/t/how-to-encrypt-a-plaintext-sqlite-database-to-use-sqlcipher-and-avoid-file-is-encrypted-or-is-not-a-database-errors/868/1&#34;&gt;documented&lt;/a&gt; by SQLCipher.&lt;/p&gt; &#xA;&lt;p&gt;With GRDB, it gives:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// The existing database&#xA;let existingDBQueue = try DatabaseQueue(path: &#34;/path/to/existing.db&#34;)&#xA;&#xA;// The new encrypted database, at some distinct location:&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;}&#xA;let newDBQueue = try DatabaseQueue(path: &#34;/path/to/new.db&#34;, configuration: config)&#xA;&#xA;try existingDBQueue.inDatabase { db in&#xA;    try db.execute(&#xA;        sql: &#34;&#34;&#34;&#xA;            ATTACH DATABASE ? AS encrypted KEY ?;&#xA;            SELECT sqlcipher_export(&#39;encrypted&#39;);&#xA;            DETACH DATABASE encrypted;&#xA;            &#34;&#34;&#34;,&#xA;        arguments: [newDBQueue.path, &#34;secret&#34;])&#xA;}&#xA;&#xA;// Now the export is completed, and the existing database can be deleted.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Security Considerations&lt;/h3&gt; &#xA;&lt;h4&gt;Managing the lifetime of the passphrase string&lt;/h4&gt; &#xA;&lt;p&gt;It is recommended to avoid keeping the passphrase in memory longer than necessary. To do this, make sure you load the passphrase from the &lt;code&gt;prepareDatabase&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// NOT RECOMMENDED: this keeps the passphrase in memory longer than necessary&#xA;let passphrase = try getPassphrase()&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&#xA;// RECOMMENDED: only load the passphrase when it is needed&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try getPassphrase()&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This technique helps manages the lifetime of the passphrase, although keep in mind that the content of a String may remain intact in memory long after the object has been released.&lt;/p&gt; &#xA;&lt;p&gt;For even better control over the lifetime of the passphrase in memory, use a Data object which natively provides the &lt;code&gt;resetBytes&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// RECOMMENDED: only load the passphrase when it is needed and reset its content immediately after use&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try getPassphraseData() // Data&#xA;    defer {&#xA;        passphrase.resetBytes(in: 0..&amp;lt;data.count)&#xA;    }&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some demanding users will want to go further, and manage the lifetime of the raw passphrase bytes. See below.&lt;/p&gt; &#xA;&lt;h4&gt;Managing the lifetime of the passphrase bytes&lt;/h4&gt; &#xA;&lt;p&gt;GRDB offers convenience methods for providing the database passphrases as Swift strings: &lt;code&gt;usePassphrase(_:)&lt;/code&gt; and &lt;code&gt;changePassphrase(_:)&lt;/code&gt;. Those methods don&#39;t keep the passphrase String in memory longer than necessary. But they are as secure as the standard String type: the lifetime of actual passphrase bytes in memory is not under control.&lt;/p&gt; &#xA;&lt;p&gt;When you want to precisely manage the passphrase bytes, talk directly to SQLCipher, using its raw C functions.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    ... // Carefully load passphrase bytes&#xA;    let code = sqlite3_key(db.sqliteConnection, /* passphrase bytes */)&#xA;    ... // Carefully dispose passphrase bytes&#xA;    guard code == SQLITE_OK else {&#xA;        throw DatabaseError(&#xA;            resultCode: ResultCode(rawValue: code), &#xA;            message: db.lastErrorMessage)&#xA;    }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Passphrase availability vs. Database availability&lt;/h4&gt; &#xA;&lt;p&gt;When the passphrase is securely stored in the system keychain, your application can protect it using the &lt;a href=&#34;https://developer.apple.com/documentation/security/ksecattraccessible&#34;&gt;&lt;code&gt;kSecAttrAccessible&lt;/code&gt;&lt;/a&gt; attribute.&lt;/p&gt; &#xA;&lt;p&gt;Such protection prevents GRDB from creating SQLite connections when the passphrase is not available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try loadPassphraseFromSystemKeychain()&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&#xA;// Success if and only if the passphrase is available&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the same reason, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pools&lt;/a&gt;, which open SQLite connections on demand, may fail at any time as soon as the passphrase becomes unavailable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Success if and only if the passphrase is available&#xA;let dbPool = try DatabasePool(path: dbPath, configuration: config)&#xA;&#xA;// May fail if passphrase has turned unavailable&#xA;try dbPool.read { ... }&#xA;&#xA;// May trigger value observation failure if passphrase has turned unavailable&#xA;try dbPool.write { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because DatabasePool maintains a pool of long-lived SQLite connections, some database accesses will use an existing connection, and succeed. And some other database accesses will fail, as soon as the pool wants to open a new connection. It is impossible to predict which accesses will succeed or fail.&lt;/p&gt; &#xA;&lt;p&gt;For the same reason, a database queue, which also maintains a long-lived SQLite connection, will remain available even after the passphrase has turned unavailable.&lt;/p&gt; &#xA;&lt;p&gt;Applications are thus responsible for protecting database accesses when the passphrase is unavailable. To this end, they can use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-protection&#34;&gt;Data Protection&lt;/a&gt;. They can also destroy their instances of database queue or pool when the passphrase becomes unavailable.&lt;/p&gt; &#xA;&lt;h2&gt;Backup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can backup (copy) a database into another.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Backups can for example help you copying an in-memory database to and from a database file when you implement NSDocument subclasses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let source: DatabaseQueue = ...      // or DatabasePool&#xA;let destination: DatabaseQueue = ... // or DatabasePool&#xA;try source.backup(to: destination)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; method blocks the current thread until the destination database contains the same contents as the source database.&lt;/p&gt; &#xA;&lt;p&gt;When the source is a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pool&lt;/a&gt;, concurrent writes can happen during the backup. Those writes may, or may not, be reflected in the backup, but they won&#39;t trigger any error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Database&lt;/code&gt; has an analogous &lt;code&gt;backup&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let source: DatabaseQueue = ...      // or DatabasePool&#xA;let destination: DatabaseQueue = ... // or DatabasePool&#xA;try source.write { sourceDb in&#xA;    try destination.barrierWriteWithoutTransaction { destDb in&#xA;        try sourceDb.backup(to: destDb)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method allows for the choice of source and destination &lt;code&gt;Database&lt;/code&gt; handles with which to backup the database.&lt;/p&gt; &#xA;&lt;h3&gt;Backup Progress Reporting&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; methods take optional &lt;code&gt;pagesPerStep&lt;/code&gt; and &lt;code&gt;progress&lt;/code&gt; parameters. Together these parameters can be used to track a database backup in progress and abort an incomplete backup.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;pagesPerStep&lt;/code&gt; is provided, the database backup is performed in &lt;em&gt;steps&lt;/em&gt;. At each step, no more than &lt;code&gt;pagesPerStep&lt;/code&gt; database pages are copied from the source to the destination. The backup proceeds one step at a time until all pages have been copied.&lt;/p&gt; &#xA;&lt;p&gt;When a &lt;code&gt;progress&lt;/code&gt; callback is provided, &lt;code&gt;progress&lt;/code&gt; is called after every backup step, including the last. Even if a non-default &lt;code&gt;pagesPerStep&lt;/code&gt; is specified or the backup is otherwise completed in a single step, the &lt;code&gt;progress&lt;/code&gt; callback will be called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try source.backup(&#xA;    to: destination,&#xA;    pagesPerStep: ...)&#xA;    { backupProgress in&#xA;       print(&#34;Database backup progress:&#34;, backupProgress)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Aborting an Incomplete Backup&lt;/h3&gt; &#xA;&lt;p&gt;If a call to &lt;code&gt;progress&lt;/code&gt; throws when &lt;code&gt;backupProgress.isComplete == false&lt;/code&gt;, the backup will be aborted and the error rethrown. However, if a call to &lt;code&gt;progress&lt;/code&gt; throws when &lt;code&gt;backupProgress.isComplete == true&lt;/code&gt;, the backup is unaffected and the error is silently ignored.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: Passing non-default values of &lt;code&gt;pagesPerStep&lt;/code&gt; or &lt;code&gt;progress&lt;/code&gt; to the backup methods is an advanced API intended to provide additional capabilities to expert users. GRDB&#39;s backup API provides a faithful, low-level wrapper to the underlying SQLite online backup API. GRDB&#39;s documentation is not a comprehensive substitute for the official SQLite &lt;a href=&#34;https://www.sqlite.org/c3ref/backup_finish.html&#34;&gt;documentation of their backup API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Interrupt a Database&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;interrupt()&lt;/code&gt; method&lt;/strong&gt; causes any pending database operation to abort and return at its earliest opportunity.&lt;/p&gt; &#xA;&lt;p&gt;It can be called from any thread.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dbQueue.interrupt()&#xA;dbPool.interrupt()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A call to &lt;code&gt;interrupt()&lt;/code&gt; that occurs when there are no running SQL statements is a no-op and has no effect on SQL statements that are started after &lt;code&gt;interrupt()&lt;/code&gt; returns.&lt;/p&gt; &#xA;&lt;p&gt;A database operation that is interrupted will throw a DatabaseError with code &lt;code&gt;SQLITE_INTERRUPT&lt;/code&gt;. If the interrupted SQL operation is an INSERT, UPDATE, or DELETE that is inside an explicit transaction, then the entire transaction will be rolled back automatically. If the rolled back transaction was started by a transaction-wrapping method such as &lt;code&gt;DatabaseWriter.write&lt;/code&gt; or &lt;code&gt;Database.inTransaction&lt;/code&gt;, then all database accesses will throw a DatabaseError with code &lt;code&gt;SQLITE_ABORT&lt;/code&gt; until the wrapping method returns.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try Player(...).insert(db)     // throws SQLITE_INTERRUPT&#xA;    try Player(...).insert(db)     // not executed&#xA;}                                  // throws SQLITE_INTERRUPT&#xA;&#xA;try dbQueue.write { db in&#xA;    do {&#xA;        try Player(...).insert(db) // throws SQLITE_INTERRUPT&#xA;    } catch { }&#xA;}                                  // throws SQLITE_ABORT&#xA;&#xA;try dbQueue.write { db in&#xA;    do {&#xA;        try Player(...).insert(db) // throws SQLITE_INTERRUPT&#xA;    } catch { }&#xA;    try Player(...).insert(db)     // throws SQLITE_ABORT&#xA;}                                  // throws SQLITE_ABORT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can catch both &lt;code&gt;SQLITE_INTERRUPT&lt;/code&gt; and &lt;code&gt;SQLITE_ABORT&lt;/code&gt; errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try dbPool.write { db in ... }&#xA;} catch DatabaseError.SQLITE_INTERRUPT, DatabaseError.SQLITE_ABORT {&#xA;    // Oops, the database was interrupted.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://www.sqlite.org/c3ref/interrupt.html&#34;&gt;Interrupt A Long-Running Query&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Avoiding SQL Injection&lt;/h2&gt; &#xA;&lt;p&gt;SQL injection is a technique that lets an attacker nuke your database.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/exploits_of_a_mom.png&#34; alt=&#34;XKCD: Exploits of a Mom&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://xkcd.com/327/&#34;&gt;https://xkcd.com/327/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is an example of code that is vulnerable to SQL injection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// BAD BAD BAD&#xA;let id = 1&#xA;let name = textField.text&#xA;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;UPDATE students SET name = &#39;\(name)&#39; WHERE id = \(id)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the user enters a funny string like &lt;code&gt;Robert&#39;; DROP TABLE students; --&lt;/code&gt;, SQLite will see the following SQL, and drop your database table instead of updating a name as intended:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE students SET name = &#39;Robert&#39;;&#xA;DROP TABLE students;&#xA;--&#39; WHERE id = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid those problems, &lt;strong&gt;never embed raw values in your SQL queries&lt;/strong&gt;. The only correct technique is to provide &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;arguments&lt;/a&gt; to your raw SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name = textField.text&#xA;try dbQueue.write { db in&#xA;    // Good&#xA;    try db.execute(&#xA;        sql: &#34;UPDATE students SET name = ? WHERE id = ?&#34;,&#xA;        arguments: [name, id])&#xA;    &#xA;    // Just as good&#xA;    try db.execute(&#xA;        sql: &#34;UPDATE students SET name = :name WHERE id = :id&#34;,&#xA;        arguments: [&#34;name&#34;: name, &#34;id&#34;: id])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;records&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;, GRDB always prevents SQL injection for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let id = 1&#xA;let name = textField.text&#xA;try dbQueue.write { db in&#xA;    if var student = try Student.fetchOne(db, id: id) {&#xA;        student.name = name&#xA;        try student.update(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;p&gt;GRDB can throw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;DatabaseError&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistenceerror&#34;&gt;PersistenceError&lt;/a&gt;, or crash your program with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&#34;&gt;fatal error&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Considering that a local database is not some JSON loaded from a remote server, GRDB focuses on &lt;strong&gt;trusted databases&lt;/strong&gt;. Dealing with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-to-deal-with-untrusted-inputs&#34;&gt;untrusted databases&lt;/a&gt; requires extra care.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;DatabaseError&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistenceerror&#34;&gt;PersistenceError&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&#34;&gt;Fatal Errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-to-deal-with-untrusted-inputs&#34;&gt;How to Deal with Untrusted Inputs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-log&#34;&gt;Error Log&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DatabaseError&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;DatabaseError&lt;/strong&gt; are thrown on SQLite errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try Pet(masterId: 1, name: &#34;Bobby&#34;).insert(db)&#xA;} catch let error as DatabaseError {&#xA;    // The SQLite error code: 19 (SQLITE_CONSTRAINT)&#xA;    error.resultCode&#xA;    &#xA;    // The extended error code: 787 (SQLITE_CONSTRAINT_FOREIGNKEY)&#xA;    error.extendedResultCode&#xA;    &#xA;    // The eventual SQLite message: FOREIGN KEY constraint failed&#xA;    error.message&#xA;    &#xA;    // The eventual erroneous SQL query&#xA;    // &#34;INSERT INTO pet (masterId, name) VALUES (?, ?)&#34;&#xA;    error.sql&#xA;    &#xA;    // The eventual SQL arguments&#xA;    // [1, &#34;Bobby&#34;]&#xA;    error.arguments&#xA;    &#xA;    // Full error description&#xA;    // &amp;gt; SQLite error 19: FOREIGN KEY constraint failed -&#xA;    // &amp;gt; while executing `INSERT INTO pet (masterId, name) VALUES (?, ?)`&#xA;    error.description&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see statement arguments in the error description, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite uses &lt;a href=&#34;https://www.sqlite.org/rescode.html&#34;&gt;results codes&lt;/a&gt; to distinguish between various errors&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can catch a DatabaseError and match on result codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try ...&#xA;} catch let error as DatabaseError {&#xA;    switch error {&#xA;    case DatabaseError.SQLITE_CONSTRAINT_FOREIGNKEY:&#xA;        // foreign key constraint error&#xA;    case DatabaseError.SQLITE_CONSTRAINT:&#xA;        // any other constraint error&#xA;    default:&#xA;        // any other database error&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also directly match errors on result codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try ...&#xA;} catch DatabaseError.SQLITE_CONSTRAINT_FOREIGNKEY {&#xA;    // foreign key constraint error&#xA;} catch DatabaseError.SQLITE_CONSTRAINT {&#xA;    // any other constraint error&#xA;} catch {&#xA;    // any other database error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each DatabaseError has two codes: an &lt;code&gt;extendedResultCode&lt;/code&gt; (see &lt;a href=&#34;https://www.sqlite.org/rescode.html#extended_result_code_list&#34;&gt;extended result code&lt;/a&gt;), and a less precise &lt;code&gt;resultCode&lt;/code&gt; (see &lt;a href=&#34;https://www.sqlite.org/rescode.html#primary_result_code_list&#34;&gt;primary result code&lt;/a&gt;). Extended result codes are refinements of primary result codes, as &lt;code&gt;SQLITE_CONSTRAINT_FOREIGNKEY&lt;/code&gt; is to &lt;code&gt;SQLITE_CONSTRAINT&lt;/code&gt;, for example.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: SQLite has progressively introduced extended result codes across its versions. The &lt;a href=&#34;http://www.sqlite.org/changes.html&#34;&gt;SQLite release notes&lt;/a&gt; are unfortunately not quite clear about that: write your handling of extended result codes with care.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;PersistenceError&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;PersistenceError&lt;/strong&gt; is thrown by the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol, in a single case: when the &lt;code&gt;update&lt;/code&gt; method could not find any row to update:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try player.update(db)&#xA;} catch let PersistenceError.recordNotFound(databaseTableName: table, key: key) {&#xA;    print(&#34;Key \(key) was not found in table \(table).&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fatal Errors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fatal errors notify that the program, or the database, has to be changed.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;They uncover programmer errors, false assumptions, and prevent misuses. Here are a few examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The code asks for a non-optional value, when the database contains NULL:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: could not convert NULL to String.&#xA;let name: String = row[&#34;name&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: fix the contents of the database, use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#create-tables&#34;&gt;NOT NULL constraints&lt;/a&gt;, or load an optional:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String? = row[&#34;name&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Conversion from database value to Swift type fails:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: could not convert &#34;Mom’s birthday&#34; to Date.&#xA;let date: Date = row[&#34;date&#34;]&#xA;&#xA;// fatal error: could not convert &#34;&#34; to URL.&#xA;let url: URL = row[&#34;url&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: fix the contents of the database, or use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; to handle all possible cases:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dbValue: DatabaseValue = row[&#34;date&#34;]&#xA;if dbValue.isNull {&#xA;    // Handle NULL&#xA;} else if let date = Date.fromDatabaseValue(dbValue) {&#xA;    // Handle valid date&#xA;} else {&#xA;    // Handle invalid date&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The database can&#39;t guarantee that the code does what it says:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: table player has no unique index on column email&#xA;try Player.deleteOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: add a unique index to the player.email column, or use the &lt;code&gt;deleteAll&lt;/code&gt; method to make it clear that you may delete more than one row:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;).deleteAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Database connections are not reentrant:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: Database methods are not reentrant.&#xA;dbQueue.write { db in&#xA;    dbQueue.write { db in&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: avoid reentrancy, and instead pass a database connection along.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to Deal with Untrusted Inputs&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s consider the code below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sql = &#34;SELECT ...&#34;&#xA;&#xA;// Some untrusted arguments for the query&#xA;let arguments: [String: Any] = ...&#xA;let rows = try Row.fetchCursor(db, sql: sql, arguments: StatementArguments(arguments))&#xA;&#xA;while let row = try rows.next() {&#xA;    // Some untrusted database value:&#xA;    let date: Date? = row[0]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It has two opportunities to throw fatal errors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Untrusted arguments&lt;/strong&gt;: The dictionary may contain values that do not conform to the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;DatabaseValueConvertible protocol&lt;/a&gt;, or may miss keys required by the statement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Untrusted database content&lt;/strong&gt;: The row may contain a non-null value that can&#39;t be turned into a date.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In such a situation, you can still avoid fatal errors by exposing and handling each failure point, one level down in the GRDB API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Untrusted arguments&#xA;if let arguments = StatementArguments(arguments) {&#xA;    let statement = try db.makeStatement(sql: sql)&#xA;    try statement.setArguments(arguments)&#xA;    &#xA;    var cursor = try Row.fetchCursor(statement)&#xA;    while let row = try iterator.next() {&#xA;        // Untrusted database content&#xA;        let dbValue: DatabaseValue = row[0]&#xA;        if dbValue.isNull {&#xA;            // Handle NULL&#xA;        if let date = Date.fromDatabaseValue(dbValue) {&#xA;            // Handle valid date&#xA;        } else {&#xA;            // Handle invalid date&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;prepared statements&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Error Log&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite can be configured to invoke a callback function containing an error code and a terse error message whenever anomalies occur.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This global error callback must be configured early in the lifetime of your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Database.logError = { (resultCode, message) in&#xA;    NSLog(&#34;%@&#34;, &#34;SQLite error \(resultCode): \(message)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: Database.logError must be set before any database connection is opened. This includes the connections that your application opens with GRDB, but also connections opened by other tools, such as third-party libraries. Setting it after a connection has been opened is an SQLite misuse, and has no effect.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://sqlite.org/errlog.html&#34;&gt;The Error And Warning Log&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Unicode&lt;/h2&gt; &#xA;&lt;p&gt;SQLite lets you store unicode strings in the database.&lt;/p&gt; &#xA;&lt;p&gt;However, SQLite does not provide any unicode-aware string transformations or comparisons.&lt;/p&gt; &#xA;&lt;h3&gt;Unicode functions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;UPPER&lt;/code&gt; and &lt;code&gt;LOWER&lt;/code&gt; built-in SQLite functions are not unicode-aware:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// &#34;JéRôME&#34;&#xA;try String.fetchOne(db, sql: &#34;SELECT UPPER(&#39;Jérôme&#39;)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GRDB extends SQLite with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions-and-aggregates&#34;&gt;SQL functions&lt;/a&gt; that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// &#34;JÉRÔME&#34;&#xA;let uppercased = DatabaseFunction.uppercase&#xA;try String.fetchOne(db, sql: &#34;SELECT \(uppercased.name)(&#39;Jérôme&#39;)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those unicode-aware string functions are also readily available in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Player.select(nameColumn.uppercased)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;String Comparison&lt;/h3&gt; &#xA;&lt;p&gt;SQLite compares strings in many occasions: when you sort rows according to a string column, or when you use a comparison operator such as &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The comparison result comes from a &lt;em&gt;collating function&lt;/em&gt;, or &lt;em&gt;collation&lt;/em&gt;. SQLite comes with three built-in collations that do not support Unicode: &lt;a href=&#34;https://www.sqlite.org/datatype3.html#collation&#34;&gt;binary, nocase, and rtrim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GRDB comes with five extra collations that leverage unicode-aware comparisons based on the standard Swift String comparison functions and operators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;unicodeCompare&lt;/code&gt; (uses the built-in &lt;code&gt;&amp;lt;=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; Swift operators)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;caseInsensitiveCompare&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localizedCompare&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localizedStandardCompare&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A collation can be applied to a table column. All comparisons involving this column will then automatically trigger the comparison function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.create(table: &#34;player&#34;) { t in&#xA;    // Guarantees case-insensitive email unicity&#xA;    t.column(&#34;email&#34;, .text).unique().collate(.nocase)&#xA;    &#xA;    // Sort names in a localized case insensitive way&#xA;    t.column(&#34;name&#34;, .text).collate(.localizedCaseInsensitiveCompare)&#xA;}&#xA;&#xA;// Players are sorted in a localized case insensitive way:&#xA;let players = try Player.order(nameColumn).fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;: SQLite &lt;em&gt;requires&lt;/em&gt; host applications to provide the definition of any collation other than binary, nocase and rtrim. When a database file has to be shared or migrated to another SQLite library of platform (such as the Android version of your application), make sure you provide a compatible collation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you can&#39;t or don&#39;t want to define the comparison behavior of a column (see warning above), you can still use an explicit collation in SQL requests and in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let collation = DatabaseCollation.localizedCaseInsensitiveCompare&#xA;let players = try Player.fetchAll(db,&#xA;    sql: &#34;SELECT * FROM player ORDER BY name COLLATE \(collation.name))&#34;)&#xA;let players = try Player.order(nameColumn.collating(collation)).fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can also define your own collations&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let collation = DatabaseCollation(&#34;customCollation&#34;) { (lhs, rhs) -&amp;gt; NSComparisonResult in&#xA;    // return the comparison of lhs and rhs strings.&#xA;}&#xA;&#xA;// Make the collation available to a database connection&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.add(collation: collation)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Memory Management&lt;/h2&gt; &#xA;&lt;p&gt;Both SQLite and GRDB use non-essential memory that help them perform better.&lt;/p&gt; &#xA;&lt;p&gt;You can reclaim this memory with the &lt;code&gt;releaseMemory&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Release as much memory as possible.&#xA;dbQueue.releaseMemory()&#xA;dbPool.releaseMemory()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method blocks the current thread until all current database accesses are completed, and the memory collected.&lt;/p&gt; &#xA;&lt;h3&gt;Memory Management on iOS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;The iOS operating system likes applications that do not consume much memory.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-queues&#34;&gt;Database queues&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;pools&lt;/a&gt; automatically call the &lt;code&gt;releaseMemory&lt;/code&gt; method when the application receives a memory warning, and when the application enters background.&lt;/p&gt; &#xA;&lt;h2&gt;Data Protection&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/StrategiesforImplementingYourApp/StrategiesforImplementingYourApp.html#//apple_ref/doc/uid/TP40007072-CH5-SW21&#34;&gt;Data Protection&lt;/a&gt; lets you protect files so that they are encrypted and unavailable until the device is unlocked.&lt;/p&gt; &#xA;&lt;p&gt;Data protection can be enabled &lt;a href=&#34;https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW30&#34;&gt;globally&lt;/a&gt; for all files created by an application.&lt;/p&gt; &#xA;&lt;p&gt;You can also explicitly protect a database, by configuring its enclosing &lt;em&gt;directory&lt;/em&gt;. This will not only protect the database file, but also all &lt;a href=&#34;https://www.sqlite.org/tempfiles.html&#34;&gt;temporary files&lt;/a&gt; created by SQLite (including the persistent &lt;code&gt;.shm&lt;/code&gt; and &lt;code&gt;.wal&lt;/code&gt; files created by &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-pools&#34;&gt;database pools&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For example, to explicitly use &lt;a href=&#34;https://developer.apple.com/reference/foundation/fileprotectiontype/1616200-complete&#34;&gt;complete&lt;/a&gt; protection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Paths&#xA;let fileManager = FileManager.default&#xA;let directoryURL = try fileManager&#xA;    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)&#xA;    .appendingPathComponent(&#34;database&#34;, isDirectory: true)&#xA;let databaseURL = directoryURL.appendingPathComponent(&#34;db.sqlite&#34;)&#xA;&#xA;// Create directory if needed&#xA;var isDirectory: ObjCBool = false&#xA;if !fileManager.fileExists(atPath: directoryURL.path, isDirectory: &amp;amp;isDirectory) {&#xA;    try fileManager.createDirectory(atPath: directoryURL.path, withIntermediateDirectories: false)&#xA;} else if !isDirectory.boolValue {&#xA;    throw NSError(domain: NSCocoaErrorDomain, code: NSFileWriteFileExistsError, userInfo: nil)&#xA;}&#xA;&#xA;// Enable data protection&#xA;try fileManager.setAttributes([.protectionKey : FileProtectionType.complete], ofItemAtPath: directoryURL.path)&#xA;&#xA;// Open database&#xA;let dbQueue = try DatabaseQueue(path: databaseURL.path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a database is protected, an application that runs in the background on a locked device won&#39;t be able to read or write from it. Instead, it will get &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&#34;&gt;DatabaseError&lt;/a&gt; with code &lt;a href=&#34;https://www.sqlite.org/rescode.html#ioerr&#34;&gt;&lt;code&gt;SQLITE_IOERR&lt;/code&gt;&lt;/a&gt; (10) &#34;disk I/O error&#34;, or &lt;a href=&#34;https://www.sqlite.org/rescode.html#auth&#34;&gt;&lt;code&gt;SQLITE_AUTH&lt;/code&gt;&lt;/a&gt; (23) &#34;not authorized&#34;.&lt;/p&gt; &#xA;&lt;p&gt;You can catch those errors and wait for &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom&#34;&gt;UIApplicationDelegate.applicationProtectedDataDidBecomeAvailable(_:)&lt;/a&gt; or &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationprotecteddatadidbecomeavailable&#34;&gt;UIApplicationProtectedDataDidBecomeAvailable&lt;/a&gt; notification in order to retry the failed database operation.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-opening-connections&#34;&gt;FAQ: Opening Connections&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-create-a-database-in-my-application&#34;&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&#34;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-close-a-database-connection&#34;&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-sql&#34;&gt;FAQ: SQL&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-general&#34;&gt;FAQ: General&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-monitor-the-duration-of-database-statements-execution&#34;&gt;How do I monitor the duration of database statements execution?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#does-grdb-support-library-evolution-and-abi-stability&#34;&gt;Does GRDB support library evolution and ABI stability?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-associations&#34;&gt;FAQ: Associations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-select-only-one-column-of-an-associated-record&#34;&gt;How do I select only one column of an associated record?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-valueobservation&#34;&gt;FAQ: ValueObservation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#why-is-valueobservation-not-publishing-value-changes&#34;&gt;Why is ValueObservation not publishing value changes?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-errors&#34;&gt;FAQ: Errors&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#generic-parameter-t-could-not-be-inferred&#34;&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#mutation-of-captured-var-in-concurrently-executing-code&#34;&gt;Mutation of captured var in concurrently-executing code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-1-no-such-column&#34;&gt;SQLite error 1 &#34;no such column&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized&#34;&gt;SQLite error 10 &#34;disk I/O error&#34;, SQLite error 23 &#34;not authorized&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries&#34;&gt;SQLite error 21 &#34;wrong number of statement arguments&#34; with LIKE queries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ: Opening Connections&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-create-a-database-in-my-application&#34;&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&#34;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-close-a-database-connection&#34;&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I create a database in my application?&lt;/h3&gt; &#xA;&lt;p&gt;This question assumes that your application has to create a new database from scratch. If your app has to open an existing database that is embedded inside your application as a resource, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&#34;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;The database has to be stored in a valid place where it can be created and modified. For example, in the &lt;a href=&#34;https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html&#34;&gt;Application Support directory&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let databaseURL = try FileManager.default&#xA;    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)&#xA;    .appendingPathComponent(&#34;db.sqlite&#34;)&#xA;let dbQueue = try DatabaseQueue(path: databaseURL.path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I open a database stored as a resource of my application?&lt;/h3&gt; &#xA;&lt;p&gt;If your application does not need to modify the database, open a read-only &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;connection&lt;/a&gt; to your resource:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.readonly = true&#xA;let dbPath = Bundle.main.path(forResource: &#34;db&#34;, ofType: &#34;sqlite&#34;)!&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the application should modify the database, you need to copy it to a place where it can be modified. For example, in the &lt;a href=&#34;https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html&#34;&gt;Application Support directory&lt;/a&gt;. Only then, open a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;connection&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let fileManager = FileManager.default&#xA;let dbPath = try fileManager&#xA;    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)&#xA;    .appendingPathComponent(&#34;db.sqlite&#34;)&#xA;    .path&#xA;if !fileManager.fileExists(atPath: dbPath) {&#xA;    let dbResourcePath = Bundle.main.path(forResource: &#34;db&#34;, ofType: &#34;sqlite&#34;)!&#xA;    try fileManager.copyItem(atPath: dbResourcePath, toPath: dbPath)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I close a database connection?&lt;/h3&gt; &#xA;&lt;p&gt;Database connections are automatically closed when they are deinitialized.&lt;/p&gt; &#xA;&lt;p&gt;When the correct execution of your program depends on precise database closing, use the &lt;code&gt;close()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This explicit &lt;code&gt;close()&lt;/code&gt; may fail with an error. See the inline documentation of this method for more information. Generally speaking, you should not call this method: rely on automatic closing instead.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: SQL&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I print a request as SQL?&lt;/h3&gt; &#xA;&lt;p&gt;When you want to debug a request that does not deliver the expected results, you may want to print the SQL that is actually executed.&lt;/p&gt; &#xA;&lt;p&gt;You can compile the request into a prepared statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    let request = Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;)&#xA;    let statement = try request.makePreparedRequest(db).statement&#xA;    print(statement) // SELECT * FROM player WHERE email = ?&#xA;    print(statement.arguments) // [&#34;arthur@example.com&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option is to setup a tracing function that prints out the executed SQL requests. For example, provide a tracing function when you connect to the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Prints all SQL statements&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.trace { print($0) }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    // Prints &#34;SELECT * FROM player WHERE email = ?&#34;&#xA;    let players = try Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;).fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see statement arguments such as &lt;code&gt;&#39;arthur@example.com&#39;&lt;/code&gt; in the logged statements, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;☝&lt;/span&gt; &lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don&#39;t have your application rely on any specific SQL output.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;FAQ: General&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-monitor-the-duration-of-database-statements-execution&#34;&gt;How do I monitor the duration of database statements execution?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#does-grdb-support-library-evolution-and-abi-stability&#34;&gt;Does GRDB support library evolution and ABI stability?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I monitor the duration of database statements execution?&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;trace(options:_:)&lt;/code&gt; method, with the &lt;code&gt;.profile&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.trace(options: .profile) { event in&#xA;        // Prints all SQL statements with their duration&#xA;        print(event)&#xA;        &#xA;        // Access to detailed profiling information&#xA;        if case let .profile(statement, duration) = event, duration &amp;gt; 0.5 {&#xA;            print(&#34;Slow query: \(statement.sql)&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    let players = try Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;).fetchAll(db)&#xA;    // Prints &#34;0.003s SELECT * FROM player WHERE email = ?&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see statement arguments such as &lt;code&gt;&#39;arthur@example.com&#39;&lt;/code&gt; in the logged statements, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-configuration&#34;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What Are Experimental Features?&lt;/h3&gt; &#xA;&lt;p&gt;Since GRDB 1.0, all backwards compatibility guarantees of &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt; apply: no breaking change will happen until the next major version of the library.&lt;/p&gt; &#xA;&lt;p&gt;There is an exception, though: &lt;em&gt;experimental features&lt;/em&gt;, marked with the &#34;&lt;strong&gt;&lt;span&gt;🔥&lt;/span&gt; EXPERIMENTAL&lt;/strong&gt;&#34; badge. Those are advanced features that are too young, or lack user feedback. They are not stabilized yet.&lt;/p&gt; &#xA;&lt;p&gt;Those experimental features are not protected by semantic versioning, and may break between two minor releases of the library. To help them becoming stable, &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues&#34;&gt;your feedback&lt;/a&gt; is greatly appreciated.&lt;/p&gt; &#xA;&lt;h3&gt;Does GRDB support library evolution and ABI stability?&lt;/h3&gt; &#xA;&lt;p&gt;No, GRDB does not support library evolution and ABI stability. The only promise is API stability according to &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt;, with an exception for &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;experimental features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Yet, GRDB can be built with the &#34;Build Libraries for Distribution&#34; Xcode option (&lt;code&gt;BUILD_LIBRARY_FOR_DISTRIBUTION&lt;/code&gt;), so that you can build binary frameworks at your convenience.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: Associations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-select-only-one-column-of-an-associated-record&#34;&gt;How do I select only one column of an associated record?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I filter records and only keep those that are associated to another record?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to only fetch books that have an author, and discard anonymous books.&lt;/p&gt; &#xA;&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Book: TableRecord {&#xA;    ...&#xA;    static let author = belongsTo(Author.self)&#xA;}&#xA;&#xA;struct Author: TableRecord {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we can write our request and only fetch books that have an author, discarding anonymous ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let books: [Book] = try dbQueue.read { db in&#xA;    // SELECT book.* FROM book &#xA;    // JOIN author ON author.id = book.authorID&#xA;    let request = Book.joining(required: Book.author)&#xA;    return try request.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note how this request does not use the &lt;code&gt;filter&lt;/code&gt; method. Indeed, we don&#39;t have any condition to express on any column. Instead, we just need to &#34;require that a book can be joined to its author&#34;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt; below for the opposite question.&lt;/p&gt; &#xA;&lt;h3&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to only fetch anonymous books that do not have any author.&lt;/p&gt; &#xA;&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Book: TableRecord {&#xA;    ...&#xA;    static let author = belongsTo(Author.self)&#xA;}&#xA;&#xA;struct Author: TableRecord {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we can write our request and only fetch anonymous books that don&#39;t have any author:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let books: [Book] = try dbQueue.read { db in&#xA;    // SELECT book.* FROM book&#xA;    // LEFT JOIN author ON author.id = book.authorID&#xA;    // WHERE author.id IS NULL&#xA;    let authorAlias = TableAlias()&#xA;    let request = Book&#xA;        .joining(optional: Book.author.aliased(authorAlias))&#xA;        .filter(!authorAlias.exists)&#xA;    return try request.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This request uses a TableAlias in order to be able to filter on the eventual associated author. We make sure that the &lt;code&gt;Author.primaryKey&lt;/code&gt; is nil, which is another way to say it does not exist: the book has no author.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt; above for the opposite question.&lt;/p&gt; &#xA;&lt;h3&gt;How do I select only one column of an associated record?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to fetch all books with their author name, but not the full associated author records.&lt;/p&gt; &#xA;&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Book: Decodable, TableRecord {&#xA;    ...&#xA;    static let author = belongsTo(Author.self)&#xA;}&#xA;&#xA;struct Author: Decodable, TableRecord {&#xA;    ...&#xA;    enum Columns {&#xA;        static let name = Column(CodingKeys.name)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we can write our request and the ad-hoc record that decodes it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BookInfo: Decodable, FetchableRecord {&#xA;    var book: Book&#xA;    var authorName: String? // nil when the book is anonymous&#xA;    &#xA;    static func all() -&amp;gt; QueryInterfaceRequest&amp;lt;BookInfo&amp;gt; {&#xA;        // SELECT book.*, author.name AS authorName&#xA;        // FROM book&#xA;        // LEFT JOIN author ON author.id = book.authorID&#xA;        let authorName = Author.Columns.name.forKey(CodingKeys.authorName)&#xA;        return Book&#xA;            .annotated(withOptional: Book.author.select(authorName))&#xA;            .asRequest(of: BookInfo.self)&#xA;    }&#xA;}&#xA;&#xA;let bookInfos: [BookInfo] = try dbQueue.read { db in&#xA;    BookInfo.all().fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By defining the request as a static method of BookInfo, you have access to the private &lt;code&gt;CodingKeys.authorName&lt;/code&gt;, and a compiler-checked SQL column name.&lt;/p&gt; &#xA;&lt;p&gt;By using the &lt;code&gt;annotated(withOptional:)&lt;/code&gt; method, you append the author name to the top-level selection that can be decoded by the ad-hoc record.&lt;/p&gt; &#xA;&lt;p&gt;By using &lt;code&gt;asRequest(of:)&lt;/code&gt;, you enhance the type-safety of your request.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: ValueObservation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#why-is-valueobservation-not-publishing-value-changes&#34;&gt;Why is ValueObservation not publishing value changes?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why is ValueObservation not publishing value changes?&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it looks that a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; does not notify the changes you expect.&lt;/p&gt; &#xA;&lt;p&gt;There may be four possible reasons for this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The expected changes were not committed into the database.&lt;/li&gt; &#xA; &lt;li&gt;The expected changes were committed into the database, but were quickly overwritten.&lt;/li&gt; &#xA; &lt;li&gt;The observation was stopped.&lt;/li&gt; &#xA; &lt;li&gt;The observation does not track the expected database region.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To answer the first two questions, look at SQL statements executed by the database. This is done when you open the database connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Prints all SQL statements&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.trace { print(&#34;SQL: \($0)&#34;) }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If, after that, you are convinced that the expected changes were committed into the database, and not overwritten soon after, trace observation events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation&#xA;    .tracking { db in ... }&#xA;    .print() // &amp;lt;- trace observation events&#xA;let cancellable = observation.start(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Look at the observation logs which start with &lt;code&gt;cancel&lt;/code&gt; or &lt;code&gt;failure&lt;/code&gt;: maybe the observation was cancelled by your app, or did fail with an error.&lt;/p&gt; &#xA;&lt;p&gt;Look at the observation logs which start with &lt;code&gt;value&lt;/code&gt;: make sure, again, that the expected value was not actually notified, then overwritten.&lt;/p&gt; &#xA;&lt;p&gt;Finally, look at the observation logs which start with &lt;code&gt;tracked region&lt;/code&gt;. Does the printed database region cover the expected changes?&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;empty&lt;/code&gt;: The empty region, which tracks nothing and never triggers the observation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(*)&lt;/code&gt;: The full &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(id,name)&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(id,name)[1]&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the row with id 1 in the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(*),team(*)&lt;/code&gt;: Both the full &lt;code&gt;player&lt;/code&gt; and &lt;code&gt;team&lt;/code&gt; tables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you happen to use the &lt;code&gt;ValueObservation.trackingConstantRegion(_:)&lt;/code&gt; method and see a mismatch between the tracked region and your expectation, then change the definition of your observation by using &lt;code&gt;tracking(_:)&lt;/code&gt;. You should witness that the logs which start with &lt;code&gt;tracked region&lt;/code&gt; now evolve in order to include the expected changes, and that you get the expected notifications.&lt;/p&gt; &#xA;&lt;p&gt;If after all those steps (thanks you!), your observation is still failing you, please &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/new&#34;&gt;open an issue&lt;/a&gt; and provide a &lt;a href=&#34;https://stackoverflow.com/help/minimal-reproducible-example&#34;&gt;minimal reproducible example&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: Errors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;⬆&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#generic-parameter-t-could-not-be-inferred&#34;&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#mutation-of-captured-var-in-concurrently-executing-code&#34;&gt;Mutation of captured var in concurrently-executing code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-1-no-such-column&#34;&gt;SQLite error 1 &#34;no such column&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized&#34;&gt;SQLite error 10 &#34;disk I/O error&#34;, SQLite error 23 &#34;not authorized&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries&#34;&gt;SQLite error 21 &#34;wrong number of statement arguments&#34; with LIKE queries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/h3&gt; &#xA;&lt;p&gt;You may get this error when using the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; methods of database queues and pools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Generic parameter &#39;T&#39; could not be inferred&#xA;let string = try dbQueue.read { db in&#xA;    let result = try String.fetchOne(db, ...)&#xA;    return result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a limitation of the Swift compiler.&lt;/p&gt; &#xA;&lt;p&gt;The general workaround is to explicitly declare the type of the closure result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// General Workaround&#xA;let string = try dbQueue.read { db -&amp;gt; String? in&#xA;    let result = try String.fetchOne(db, ...)&#xA;    return result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also, when possible, write a single-line closure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Single-line closure workaround:&#xA;let string = try dbQueue.read { db in&#xA;    try String.fetchOne(db, ...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mutation of captured var in concurrently-executing code&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;persistence methods&lt;/a&gt; can trigger a compiler error in async contexts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var player = Player(id: nil, name: &#34;Arthur&#34;)&#xA;try await dbWriter.write { db in&#xA;    // Error: Mutation of captured var &#39;player&#39; in concurrently-executing code&#xA;    try player.insert(db)&#xA;}&#xA;print(player.id) // A non-nil id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this happens, prefer the &lt;code&gt;inserted&lt;/code&gt; and &lt;code&gt;saved&lt;/code&gt; methods instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// OK&#xA;var player = Player(id: nil, name: &#34;Arthur&#34;)&#xA;player = try await dbWriter.write { [player] db in&#xA;    return try player.inserted(db)&#xA;}&#xA;print(player.id) // A non-nil id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQLite error 1 &#34;no such column&#34;&lt;/h3&gt; &#xA;&lt;p&gt;This error message is self-explanatory: do check for misspelled or non-existing column names.&lt;/p&gt; &#xA;&lt;p&gt;However, sometimes this error only happens when an app runs on a recent operating system (iOS 14+, Big Sur+, etc.) The error does not happen with previous ones.&lt;/p&gt; &#xA;&lt;p&gt;When this is the case, there are two possible explanations:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Maybe a column name is &lt;em&gt;really&lt;/em&gt; misspelled or missing from the database schema.&lt;/p&gt; &lt;p&gt;To find it, check the SQL statement that comes with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Maybe the application is using the character &lt;code&gt;&#34;&lt;/code&gt; instead of the single quote &lt;code&gt;&#39;&lt;/code&gt; as the delimiter for string literals in raw SQL queries. Recent versions of SQLite have learned to tell about this deviation from the SQL standard, and this is why you are seeing this error.&lt;/p&gt; &lt;p&gt;For example: this is not standard SQL: &lt;code&gt;UPDATE player SET name = &#34;Arthur&#34;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The standard version is: &lt;code&gt;UPDATE player SET name = &#39;Arthur&#39;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;It just happens that old versions of SQLite used to accept the former, non-standard version. Newer versions are able to reject it with an error.&lt;/p&gt; &lt;p&gt;The fix is to change the SQL statements run by the application: replace &lt;code&gt;&#34;&lt;/code&gt; with &lt;code&gt;&#39;&lt;/code&gt; in your string literals.&lt;/p&gt; &lt;p&gt;It may also be time to learn about statement arguments and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&#34;&gt;SQL injection&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String = ...&#xA;&#xA;// NOT STANDARD (double quote)&#xA;try db.execute(sql: &#34;&#34;&#34;&#xA;    UPDATE player SET name = &#34;\(name)&#34;&#xA;    &#34;&#34;&#34;)&#xA;&#xA;// STANDARD, BUT STILL NOT RECOMMENDED (single quote)&#xA;try db.execute(sql: &#34;UPDATE player SET name = &#39;\(name)&#39;&#34;)&#xA;&#xA;// STANDARD, AND RECOMMENDED (statement arguments)&#xA;try db.execute(sql: &#34;UPDATE player SET name = ?&#34;, arguments: [name])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://sqlite.org/quirks.html#dblquote&#34;&gt;Double-quoted String Literals Are Accepted&lt;/a&gt;, and &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Structs/Configuration.html#/s:4GRDB13ConfigurationV33acceptsDoubleQuotedStringLiteralsSbvp&#34;&gt;Configuration.acceptsDoubleQuotedStringLiterals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SQLite error 10 &#34;disk I/O error&#34;, SQLite error 23 &#34;not authorized&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Those errors may be the sign that SQLite can&#39;t access the database due to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-protection&#34;&gt;data protection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When your application should be able to run in the background on a locked device, it has to catch this error, and, for example, wait for &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom&#34;&gt;UIApplicationDelegate.applicationProtectedDataDidBecomeAvailable(_:)&lt;/a&gt; or &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationprotecteddatadidbecomeavailable&#34;&gt;UIApplicationProtectedDataDidBecomeAvailable&lt;/a&gt; notification and retry the failed database operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try ...&#xA;} catch DatabaseError.SQLITE_IOERR, DatabaseError.SQLITE_AUTH {&#xA;    // Handle possible data protection error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This error can also be prevented altogether by using a more relaxed &lt;a href=&#34;https://developer.apple.com/reference/foundation/filemanager/1653059-file_protection_values&#34;&gt;file protection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SQLite error 21 &#34;wrong number of statement arguments&#34; with LIKE queries&lt;/h3&gt; &#xA;&lt;p&gt;You may get the error &#34;wrong number of statement arguments&#34; when executing a LIKE query similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name = textField.text&#xA;let players = try dbQueue.read { db in&#xA;    try Player.fetchAll(db, sql: &#34;SELECT * FROM player WHERE name LIKE &#39;%?%&#39;&#34;, arguments: [name])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The problem lies in the &lt;code&gt;&#39;%?%&#39;&lt;/code&gt; pattern.&lt;/p&gt; &#xA;&lt;p&gt;SQLite only interprets &lt;code&gt;?&lt;/code&gt; as a parameter when it is a placeholder for a whole value (int, double, string, blob, null). In this incorrect query, &lt;code&gt;?&lt;/code&gt; is just a character in the &lt;code&gt;&#39;%?%&#39;&lt;/code&gt; string: it is not a query parameter, and is not processed in any way. See &lt;a href=&#34;https://www.sqlite.org/lang_expr.html#varparam&#34;&gt;https://www.sqlite.org/lang_expr.html#varparam&lt;/a&gt; for more information about SQLite parameters.&lt;/p&gt; &#xA;&lt;p&gt;To fix the error, you can feed the request with the pattern itself, instead of the name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name = textField.text&#xA;let players: [Player] = try dbQueue.read { db in&#xA;    let pattern = &#34;%\(name)%&#34;&#xA;    return try Player.fetchAll(db, sql: &#34;SELECT * FROM player WHERE name LIKE ?&#34;, arguments: [pattern])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Sample Code&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&#34;&gt;Documentation&lt;/a&gt; is full of GRDB snippets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;GRDB.xcworkspace&lt;/code&gt;: it contains GRDB-enabled playgrounds to play with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/groue/SortedDifference&#34;&gt;groue/SortedDifference&lt;/a&gt;: How to synchronize a database table with a JSON payload&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pierlis.com&#34;&gt;Pierlis&lt;/a&gt;, where we write great software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alextrob&#34;&gt;@alextrob&lt;/a&gt;, &lt;a href=&#34;https://github.com/alexwlchan&#34;&gt;@alexwlchan&lt;/a&gt;, &lt;a href=&#34;https://github.com/bellebethcooper&#34;&gt;@bellebethcooper&lt;/a&gt;, &lt;a href=&#34;https://github.com/bfad&#34;&gt;@bfad&lt;/a&gt;, &lt;a href=&#34;https://github.com/cfilipov&#34;&gt;@cfilipov&lt;/a&gt;, &lt;a href=&#34;https://github.com/charlesmchen-signal&#34;&gt;@charlesmchen-signal&lt;/a&gt;, &lt;a href=&#34;https://github.com/Chiliec&#34;&gt;@Chiliec&lt;/a&gt;, &lt;a href=&#34;https://github.com/chrisballinger&#34;&gt;@chrisballinger&lt;/a&gt;, &lt;a href=&#34;https://github.com/darrenclark&#34;&gt;@darrenclark&lt;/a&gt;, &lt;a href=&#34;https://github.com/davidkraus&#34;&gt;@davidkraus&lt;/a&gt;, &lt;a href=&#34;https://github.com/eburns-vmware&#34;&gt;@eburns-vmware&lt;/a&gt;, &lt;a href=&#34;https://github.com/felixscheinost&#34;&gt;@felixscheinost&lt;/a&gt;, &lt;a href=&#34;http://github.com/fpillet&#34;&gt;@fpillet&lt;/a&gt;, &lt;a href=&#34;https://github.com/gcox&#34;&gt;@gcox&lt;/a&gt;, &lt;a href=&#34;https://github.com/GetToSet&#34;&gt;@GetToSet&lt;/a&gt;, &lt;a href=&#34;https://github.com/gjeck&#34;&gt;@gjeck&lt;/a&gt;, &lt;a href=&#34;https://github.com/guidedways&#34;&gt;@guidedways&lt;/a&gt;, &lt;a href=&#34;https://github.com/gusrota&#34;&gt;@gusrota&lt;/a&gt;, &lt;a href=&#34;https://github.com/haikusw&#34;&gt;@haikusw&lt;/a&gt;, &lt;a href=&#34;https://github.com/hartbit&#34;&gt;@hartbit&lt;/a&gt;, &lt;a href=&#34;https://github.com/holsety&#34;&gt;@holsety&lt;/a&gt;, &lt;a href=&#34;https://github.com/jroselightricks&#34;&gt;@jroselightricks&lt;/a&gt;, &lt;a href=&#34;https://github.com/kdubb&#34;&gt;@kdubb&lt;/a&gt;, &lt;a href=&#34;https://github.com/kluufger&#34;&gt;@kluufger&lt;/a&gt;, &lt;a href=&#34;https://github.com/KyleLeneau&#34;&gt;@KyleLeneau&lt;/a&gt;, &lt;a href=&#34;https://github.com/layoutSubviews&#34;&gt;@layoutSubviews&lt;/a&gt;, &lt;a href=&#34;https://github.com/mallman&#34;&gt;@mallman&lt;/a&gt;, &lt;a href=&#34;https://github.com/MartinP7r&#34;&gt;@MartinP7r&lt;/a&gt;, &lt;a href=&#34;https://github.com/Marus&#34;&gt;@Marus&lt;/a&gt;, &lt;a href=&#34;https://github.com/mattgallagher&#34;&gt;@mattgallagher&lt;/a&gt;, &lt;a href=&#34;https://github.com/MaxDesiatov&#34;&gt;@MaxDesiatov&lt;/a&gt;, &lt;a href=&#34;https://github.com/michaelkirk-signal&#34;&gt;@michaelkirk-signal&lt;/a&gt;, &lt;a href=&#34;https://github.com/mtancock&#34;&gt;@mtancock&lt;/a&gt;, &lt;a href=&#34;https://github.com/pakko972&#34;&gt;@pakko972&lt;/a&gt;, &lt;a href=&#34;https://github.com/peter-ss&#34;&gt;@peter-ss&lt;/a&gt;, &lt;a href=&#34;https://github.com/pierlo&#34;&gt;@pierlo&lt;/a&gt;, &lt;a href=&#34;https://github.com/pocketpixels&#34;&gt;@pocketpixels&lt;/a&gt;, &lt;a href=&#34;https://github.com/pp5x&#34;&gt;@pp5x&lt;/a&gt;, &lt;a href=&#34;https://github.com/professordeng&#34;&gt;@professordeng&lt;/a&gt;, &lt;a href=&#34;https://github.com/robcas3&#34;&gt;@robcas3&lt;/a&gt;, &lt;a href=&#34;https://github.com/runhum&#34;&gt;@runhum&lt;/a&gt;, &lt;a href=&#34;https://github.com/sberrevoets&#34;&gt;@sberrevoets&lt;/a&gt;, &lt;a href=&#34;https://github.com/schveiguy&#34;&gt;@schveiguy&lt;/a&gt;, &lt;a href=&#34;https://github.com/SD10&#34;&gt;@SD10&lt;/a&gt;, &lt;a href=&#34;https://github.com/sobri909&#34;&gt;@sobri909&lt;/a&gt;, &lt;a href=&#34;https://github.com/sroddy&#34;&gt;@sroddy&lt;/a&gt;, &lt;a href=&#34;https://github.com/steipete&#34;&gt;@steipete&lt;/a&gt;, &lt;a href=&#34;https://github.com/swiftlyfalling&#34;&gt;@swiftlyfalling&lt;/a&gt;, &lt;a href=&#34;https://github.com/Timac&#34;&gt;@Timac&lt;/a&gt;, &lt;a href=&#34;https://github.com/tternes&#34;&gt;@tternes&lt;/a&gt;, &lt;a href=&#34;https://github.com/valexa&#34;&gt;@valexa&lt;/a&gt;, &lt;a href=&#34;https://github.com/wuyuehyang&#34;&gt;@wuyuehyang&lt;/a&gt;, &lt;a href=&#34;https://github.com/ZevEisenberg&#34;&gt;@ZevEisenberg&lt;/a&gt;, and &lt;a href=&#34;https://github.com/zmeyc&#34;&gt;@zmeyc&lt;/a&gt; for their contributions, help, and feedback on GRDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aymerick&#34;&gt;@aymerick&lt;/a&gt; and &lt;a href=&#34;https://github.com/kali&#34;&gt;@kali&lt;/a&gt; because SQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;ccgus/fmdb&lt;/a&gt; for its excellency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.w3.org/Provider/Style/URI&#34;&gt;URIs don&#39;t change: people change them.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Changes Tracking&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customized Decoding of Database Rows&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&#34;&gt;Beyond FetchableRecord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Dealing with External Connections&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been superseded by the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SharingADatabase.md&#34;&gt;Sharing a Database&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h4&gt;Enabling FTS5 Support&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#enabling-fts5-support&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;FetchedRecordsController&lt;/h4&gt; &#xA;&lt;p&gt;FetchedRecordsController has been removed in GRDB 5.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-changes-observation&#34;&gt;Database Observation&lt;/a&gt; chapter describes the other ways to observe the database.&lt;/p&gt; &#xA;&lt;h4&gt;Full-Text Search&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Migrations&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Migrations.md&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;NSNumber and NSDecimalNumber&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;moved&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Persistable Protocol&lt;/h4&gt; &#xA;&lt;p&gt;This protocol has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; &#xA;&lt;h4&gt;RowConvertible Protocol&lt;/h4&gt; &#xA;&lt;p&gt;This protocol has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; &#xA;&lt;h4&gt;TableMapping Protocol&lt;/h4&gt; &#xA;&lt;p&gt;This protocol has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; &#xA;&lt;h4&gt;ValueObservation and DatabaseRegionObservation&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been superseded by &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#valueobservation&#34;&gt;ValueObservation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Concurrency&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Guarantees and Rules&lt;/h4&gt; &#xA;&lt;p&gt;This chapter is now split into &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#concurrency-rules&#34;&gt;Concurrency Rules&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#safe-and-unsafe-database-accesses&#34;&gt;Safe and Unsafe Database Accesses&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Differences between Database Queues and Pools&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#differences-between-database-queues-and-pools&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Advanced DatabasePool&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#advanced-databasepool&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Database Snapshots&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#database-snapshots&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;DatabaseWriter and DatabaseReader Protocols&lt;/h4&gt; &#xA;&lt;p&gt;This chapter was removed. See the references of &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Protocols/DatabaseReader.html&#34;&gt;DatabaseReader&lt;/a&gt; and &lt;a href=&#34;http://groue.github.io/GRDB.swift/docs/5.24/Protocols/DatabaseWriter.html&#34;&gt;DatabaseWriter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Asynchronous APIs&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#synchronous-and-asynchronous-database-accesses&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Unsafe Concurrency APIs&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Concurrency.md#safe-and-unsafe-database-accesses&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding support for missing SQL functions or operators&lt;/h3&gt; &#xA;&lt;p&gt;This chapter was renamed to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-nio</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/apple/swift-nio</id>
    <link href="https://github.com/apple/swift-nio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Event-driven network application framework for high performance protocol servers &amp; clients, non-blocking.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/swift-server/sswg/raw/main/process/incubation.md#graduated-level&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/sswg-graduated-green.svg?sanitize=true&#34; alt=&#34;sswg:graduated|104x20&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SwiftNIO&lt;/h1&gt; &#xA;&lt;p&gt;SwiftNIO is a cross-platform asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp;amp; clients.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s like &lt;a href=&#34;https://netty.io&#34;&gt;Netty&lt;/a&gt;, but written for Swift.&lt;/p&gt; &#xA;&lt;h3&gt;Repository organization&lt;/h3&gt; &#xA;&lt;p&gt;The SwiftNIO project is split across multiple repositories:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;   &lt;th&gt;NIO 2 (Swift 5.4+)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio&#34;&gt;https://github.com/apple/swift-nio&lt;/a&gt; &lt;br&gt; SwiftNIO core&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;from: &#34;2.0.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio-ssl&#34;&gt;https://github.com/apple/swift-nio-ssl&lt;/a&gt; &lt;br&gt; TLS (SSL) support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;from: &#34;2.0.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio-http2&#34;&gt;https://github.com/apple/swift-nio-http2&lt;/a&gt;&lt;br&gt; HTTP/2 support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;from: &#34;1.0.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio-extras&#34;&gt;https://github.com/apple/swift-nio-extras&lt;/a&gt; &lt;br&gt;useful additions around SwiftNIO&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;from: &#34;1.0.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio-transport-services&#34;&gt;https://github.com/apple/swift-nio-transport-services&lt;/a&gt; &lt;br&gt; first-class support for macOS, iOS, tvOS, and watchOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;from: &#34;1.0.0&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio-ssh&#34;&gt;https://github.com/apple/swift-nio-ssh&lt;/a&gt; &lt;br&gt; SSH support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.upToNextMinor(from: &#34;0.2.0&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;NIO 2.29.0 and older support Swift 5.0+, NIO 2.39.0 and older support Swift 5.2+.&lt;/p&gt; &#xA;&lt;p&gt;Within this repository we have a number of products that provide different functionality. This package contains the following products:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NIO&lt;/code&gt;. This is an umbrella module exporting &lt;code&gt;NIOCore&lt;/code&gt;, &lt;code&gt;NIOEmbedded&lt;/code&gt; and &lt;code&gt;NIOPosix&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NIOCore&lt;/code&gt;. This provides the core abstractions and types for using SwiftNIO (see &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-nio/main/#conceptual-overview&#34;&gt;&#34;Conceptual Overview&#34;&lt;/a&gt; for more details). Most NIO extension projects that provide things like new &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;s&lt;/a&gt; and &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;s&lt;/a&gt; or new protocol implementations should only need to depend on &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NIOPosix&lt;/code&gt;. This provides the primary [&lt;code&gt;EventLoopGroup&lt;/code&gt;], &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;s&lt;/a&gt; for use on POSIX-based systems. This is our high performance core I/O layer. In general, this should only be imported by projects that plan to do some actual I/O, such as high-level protocol implementations or applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NIOEmbedded&lt;/code&gt;. This provides &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EmbeddedChannel.html&#34;&gt;&lt;code&gt;EmbeddedChannel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EmbeddedEventLoop.html&#34;&gt;&lt;code&gt;EmbeddedEventLoop&lt;/code&gt;&lt;/a&gt;, implementations of the &lt;code&gt;NIOCore&lt;/code&gt; abstractions that provide fine-grained control over their execution. These are most often used for testing, but can also be used to drive protocol implementations in a way that is decoupled from networking altogether.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NIOConcurrencyHelpers&lt;/code&gt;. This provides a few low-level concurrency primitives that are used by NIO implementations, such as locks and atomics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NIOFoundationCompat&lt;/code&gt;. This extends a number of NIO types for better interoperation with Foundation data types. If you are working with Foundation data types such as &lt;code&gt;Data&lt;/code&gt;, you should import this.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NIOTLS&lt;/code&gt;. This provides a few common abstraction types for working with multiple TLS implementations. Note that this doesn&#39;t provide TLS itself: please investigate &lt;a href=&#34;https://github.com/apple/swift-nio-ssl&#34;&gt;swift-nio-ssl&lt;/a&gt; and &lt;a href=&#34;https://github.com/apple/swift-nio-transport-services&#34;&gt;swift-nio-transport-services&lt;/a&gt; for concrete implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NIOHTTP1&lt;/code&gt;. This provides a low-level HTTP/1.1 protocol implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NIOWebSocket&lt;/code&gt;. This provides a low-level WebSocket protocol implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NIOTestUtils&lt;/code&gt;. This provides a number of helpers for testing projects that use SwiftNIO.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Protocol Implementations&lt;/h3&gt; &#xA;&lt;p&gt;Below you can find a list of a few protocol implementations that are done with SwiftNIO. This is a non-exhaustive list of protocols that are either part of the SwiftNIO project or are accepted into the &lt;a href=&#34;https://swift.org/server&#34;&gt;SSWG&lt;/a&gt;&#39;s incubation process. All of the libraries listed below do all of their I/O in a non-blocking fashion using SwiftNIO.&lt;/p&gt; &#xA;&lt;h4&gt;Low-level protocol implementations&lt;/h4&gt; &#xA;&lt;p&gt;Low-level protocol implementations are often a collection of &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s that implement a protocol but still require the user to have a good understanding of SwiftNIO. Often, low-level protocol implementations will then be wrapped in high-level libraries with a nicer, more user-friendly API.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;   &lt;th&gt;Client&lt;/th&gt; &#xA;   &lt;th&gt;Server&lt;/th&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTP/1&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio&#34;&gt;apple/swift-nio&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOHTTP1/index.html&#34;&gt;&lt;code&gt;NIOHTTP1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;official NIO project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTP/2&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio-http2&#34;&gt;apple/swift-nio-http2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apple.github.io/swift-nio-http2/docs/current/NIOHTTP2/index.html&#34;&gt;&lt;code&gt;NIOHTTP2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;official NIO project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WebSocket&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio&#34;&gt;apple/swift-nio&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOWebSocket/index.html&#34;&gt;&lt;code&gt;NIOWebSocket&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;official NIO project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TLS&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio-ssl&#34;&gt;apple/swift-nio-ssl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apple.github.io/swift-nio-ssl/docs/current/NIOSSL/index.html&#34;&gt;&lt;code&gt;NIOSSL&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;official NIO project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SSH&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apple/swift-nio-ssh&#34;&gt;apple/swift-nio-ssh&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;n/a&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;official NIO project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;High-level implementations&lt;/h4&gt; &#xA;&lt;p&gt;High-level implementations are usually libraries that come with an API that doesn&#39;t expose SwiftNIO&#39;s &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelPipeline.html&#34;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; and can therefore be used with very little (or no) SwiftNIO-specific knowledge. The implementations listed below do still do all of their I/O in SwiftNIO and integrate really well with the SwiftNIO ecosystem.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;   &lt;th&gt;Client&lt;/th&gt; &#xA;   &lt;th&gt;Server&lt;/th&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTP&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/swift-server/async-http-client&#34;&gt;swift-server/async-http-client&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;AsyncHTTPClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SSWG community project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gRPC&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-swift&#34;&gt;grpc/grpc-swift&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GRPC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;also offers a low-level API; SSWG community project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APNS&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kylebrowning/APNSwift&#34;&gt;kylebrowning/APNSwift&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;APNSwift&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SSWG community project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vapor/postgres-nio&#34;&gt;vapor/postgres-nio&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PostgresNIO&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SSWG community project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Redis&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitlab.com/Mordil/swift-redi-stack&#34;&gt;mordil/swift-redi-stack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RediStack&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SSWG community project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Supported Versions&lt;/h3&gt; &#xA;&lt;h3&gt;SwiftNIO 2&lt;/h3&gt; &#xA;&lt;p&gt;This is the current version of SwiftNIO and will be supported for the foreseeable future.&lt;/p&gt; &#xA;&lt;p&gt;The latest released SwiftNIO 2 version&amp;nbsp;supports Swift 5.4+. NIO 2.29.0 and older support Swift 5.0+, NIO 2.39.0 and older support Swift 5.2+.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftNIO 1&lt;/h3&gt; &#xA;&lt;p&gt;SwiftNIO 1 is considered end of life - it is strongly recommended that you move to a newer version. The Core NIO team does not actively work on this version. No new features will be added to this version but PRs which fix bugs or security vulnerabilities will be accepted until the end of May 2022.&lt;/p&gt; &#xA;&lt;p&gt;If you have a SwiftNIO 1 application or library that you would like to migrate to SwiftNIO 2, please check out the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-nio/main/docs/migration-guide-NIO1-to-NIO2.md&#34;&gt;migration guide&lt;/a&gt; we prepared for you.&lt;/p&gt; &#xA;&lt;p&gt;The latest released SwiftNIO 1 version&amp;nbsp;supports Swift 4.0, 4.1, 4.2, and 5.0.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Platforms&lt;/h3&gt; &#xA;&lt;p&gt;SwiftNIO aims to support all of the platforms where Swift is supported. Currently, it is developed and tested on macOS and Linux, and is known to support the following operating system versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 18.04+&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.9+, iOS 7+; (macOS 10.14+, iOS 12+, tvOS 12+ or watchOS 6+ with &lt;a href=&#34;https://github.com/apple/swift-nio-transport-services&#34;&gt;swift-nio-transport-services&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;SwiftNIO follows &lt;a href=&#34;https://semver.org/#semantic-versioning-200&#34;&gt;SemVer 2.0.0&lt;/a&gt; with a separate document declaring &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-nio/main/docs/public-api.md&#34;&gt;SwiftNIO&#39;s Public API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;What this means for you is that you should depend on SwiftNIO with a version range that covers everything from the minimum SwiftNIO version you require up to the next major version. In SwiftPM that can be easily done specifying for example &lt;code&gt;from: &#34;2.0.0&#34;&lt;/code&gt; meaning that you support SwiftNIO in every version starting from 2.0.0 up to (excluding) 3.0.0. SemVer and SwiftNIO&#39;s Public API guarantees should result in a working program without having to worry about testing every single version for compatibility.&lt;/p&gt; &#xA;&lt;h2&gt;Conceptual Overview&lt;/h2&gt; &#xA;&lt;p&gt;SwiftNIO is fundamentally a low-level tool for building high-performance networking applications in Swift. It particularly targets those use-cases where using a &#34;thread-per-connection&#34; model of concurrency is inefficient or untenable. This is a common limitation when building servers that use a large number of relatively low-utilization connections, such as HTTP servers.&lt;/p&gt; &#xA;&lt;p&gt;To achieve its goals SwiftNIO extensively uses &#34;non-blocking I/O&#34;: hence the name! Non-blocking I/O differs from the more common blocking I/O model because the application does not wait for data to be sent to or received from the network: instead, SwiftNIO asks for the kernel to notify it when I/O operations can be performed without waiting.&lt;/p&gt; &#xA;&lt;p&gt;SwiftNIO does not aim to provide high-level solutions like, for example, web frameworks do. Instead, SwiftNIO is focused on providing the low-level building blocks for these higher-level applications. When it comes to building a web application, most users will not want to use SwiftNIO directly: instead, they&#39;ll want to use one of the many great web frameworks available in the Swift ecosystem. Those web frameworks, however, may choose to use SwiftNIO under the covers to provide their networking support.&lt;/p&gt; &#xA;&lt;p&gt;The following sections will describe the low-level tools that SwiftNIO provides, and provide a quick overview of how to work with them. If you feel comfortable with these concepts, then you can skip right ahead to the other sections of this README.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Architecture&lt;/h3&gt; &#xA;&lt;p&gt;The basic building blocks of SwiftNIO are the following 8 types of objects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoopGroup.html&#34;&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt;, a protocol, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;, a protocol, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;, a protocol, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;, a protocol, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bootstrap&lt;/code&gt;, several related structures, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Structs/ByteBuffer.html&#34;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, a struct, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EventLoopFuture.html&#34;&gt;&lt;code&gt;EventLoopFuture&lt;/code&gt;&lt;/a&gt;, a generic class, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Structs/EventLoopPromise.html&#34;&gt;&lt;code&gt;EventLoopPromise&lt;/code&gt;&lt;/a&gt;, a generic struct, provided by &lt;code&gt;NIOCore&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All SwiftNIO applications are ultimately constructed of these various components.&lt;/p&gt; &#xA;&lt;h4&gt;EventLoops and EventLoopGroups&lt;/h4&gt; &#xA;&lt;p&gt;The basic I/O primitive of SwiftNIO is the event loop. The event loop is an object that waits for events (usually I/O related events, such as &#34;data received&#34;) to happen and then fires some kind of callback when they do. In almost all SwiftNIO applications there will be relatively few event loops: usually only one or two per CPU core the application wants to use. Generally speaking event loops run for the entire lifetime of your application, spinning in an endless loop dispatching events.&lt;/p&gt; &#xA;&lt;p&gt;Event loops are gathered together into event loop &lt;em&gt;groups&lt;/em&gt;. These groups provide a mechanism to distribute work around the event loops. For example, when listening for inbound connections the listening socket will be registered on one event loop. However, we don&#39;t want all connections that are accepted on that listening socket to be registered with the same event loop, as that would potentially overload one event loop while leaving the others empty. For that reason, the event loop group provides the ability to spread load across multiple event loops.&lt;/p&gt; &#xA;&lt;p&gt;In SwiftNIO today there is one &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoopGroup.html&#34;&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt; implementation, and two &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; implementations. For production applications there is the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOPosix/Classes/MultiThreadedEventLoopGroup.html&#34;&gt;&lt;code&gt;MultiThreadedEventLoopGroup&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoopGroup.html&#34;&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;&lt;/a&gt; that creates a number of threads (using the POSIX &lt;a href=&#34;https://en.wikipedia.org/wiki/POSIX_Threads&#34;&gt;&lt;code&gt;pthreads&lt;/code&gt;&lt;/a&gt; library) and places one &lt;code&gt;SelectableEventLoop&lt;/code&gt; on each one. The &lt;code&gt;SelectableEventLoop&lt;/code&gt; is an event loop that uses a selector (either &lt;a href=&#34;https://en.wikipedia.org/wiki/Kqueue&#34;&gt;&lt;code&gt;kqueue&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Epoll&#34;&gt;&lt;code&gt;epoll&lt;/code&gt;&lt;/a&gt; depending on the target system) to manage I/O events from file descriptors and to dispatch work. These &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;s&lt;/a&gt; and &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoopGroup.html&#34;&gt;&lt;code&gt;EventLoopGroup&lt;/code&gt;s&lt;/a&gt; are provided by the &lt;code&gt;NIOPosix&lt;/code&gt; module. Additionally, there is the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EmbeddedEventLoop.html&#34;&gt;&lt;code&gt;EmbeddedEventLoop&lt;/code&gt;&lt;/a&gt;, which is a dummy event loop that is used primarily for testing purposes, provided by the &lt;code&gt;NIOEmbedded&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s have a number of important properties. Most vitally, they are the way all work gets done in SwiftNIO applications. In order to ensure thread-safety, any work that wants to be done on almost any of the other objects in SwiftNIO must be dispatched via an &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; objects own almost all the other objects in a SwiftNIO application, and understanding their execution model is critical for building high-performance SwiftNIO applications.&lt;/p&gt; &#xA;&lt;h4&gt;Channels, Channel Handlers, Channel Pipelines, and Channel Contexts&lt;/h4&gt; &#xA;&lt;p&gt;While &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s are critical to the way SwiftNIO works, most users will not interact with them substantially beyond asking them to create &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Structs/EventLoopPromise.html&#34;&gt;&lt;code&gt;EventLoopPromise&lt;/code&gt;&lt;/a&gt;s and to schedule work. The parts of a SwiftNIO application most users will spend the most time interacting with are &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s and &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s.&lt;/p&gt; &#xA;&lt;p&gt;Almost every file descriptor that a user interacts with in a SwiftNIO program is associated with a single &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; owns this file descriptor, and is responsible for managing its lifetime. It is also responsible for processing inbound and outbound events on that file descriptor: whenever the event loop has an event that corresponds to a file descriptor, it will notify the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; that owns that file descriptor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s by themselves, however, are not useful. After all, it is a rare application that doesn&#39;t want to do anything with the data it sends or receives on a socket! So the other important part of the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; is the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelPipeline.html&#34;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelPipeline.html&#34;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; is a sequence of objects, called &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s, that process events on a &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s process these events one after another, in order, mutating and transforming events as they go. This can be thought of as a data processing pipeline; hence the name &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelPipeline.html&#34;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are either Inbound or Outbound handlers, or both. Inbound handlers process &#34;inbound&#34; events: events like reading data from a socket, reading socket close, or other kinds of events initiated by remote peers. Outbound handlers process &#34;outbound&#34; events, such as writes, connection attempts, and local socket closes.&lt;/p&gt; &#xA;&lt;p&gt;Each handler processes the events in order. For example, read events are passed from the front of the pipeline to the back, one handler at a time, while write events are passed from the back of the pipeline to the front. Each handler may, at any time, generate either inbound or outbound events that will be sent to the next handler in whichever direction is appropriate. This allows handlers to split up reads, coalesce writes, delay connection attempts, and generally perform arbitrary transformations of events.&lt;/p&gt; &#xA;&lt;p&gt;In general, &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are designed to be highly re-usable components. This means they tend to be designed to be as small as possible, performing one specific data transformation. This allows handlers to be composed together in novel and flexible ways, which helps with code reuse and encapsulation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s are able to keep track of where they are in a &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelPipeline.html&#34;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; by using a &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelHandlerContext.html&#34;&gt;&lt;code&gt;ChannelHandlerContext&lt;/code&gt;&lt;/a&gt;. These objects contain references to the previous and next channel handler in the pipeline, ensuring that it is always possible for a &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt; to emit events while it remains in a pipeline.&lt;/p&gt; &#xA;&lt;p&gt;SwiftNIO ships with many &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s built in that provide useful functionality, such as HTTP parsing. In addition, high-performance applications will want to provide as much of their logic as possible in &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s, as it helps avoid problems with context switching.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, SwiftNIO ships with a few &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; implementations. In particular, it ships with &lt;code&gt;ServerSocketChannel&lt;/code&gt;, a &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for sockets that accept inbound connections; &lt;code&gt;SocketChannel&lt;/code&gt;, a &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for TCP connections; and &lt;code&gt;DatagramChannel&lt;/code&gt;, a &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; for UDP sockets. All of these are provided by the &lt;code&gt;NIOPosix&lt;/code&gt; module. It also provides&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EmbeddedChannel.html&#34;&gt;&lt;code&gt;EmbeddedChannel&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; primarily used for testing, provided by the &lt;code&gt;NIOEmbedded&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;h5&gt;A Note on Blocking&lt;/h5&gt; &#xA;&lt;p&gt;One of the important notes about &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelPipeline.html&#34;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt;s is that they are thread-safe. This is very important for writing SwiftNIO applications, as it allows you to write much simpler &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s in the knowledge that they will not require synchronization.&lt;/p&gt; &#xA;&lt;p&gt;However, this is achieved by dispatching all code on the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelPipeline.html&#34;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; on the same thread as the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;. This means that, as a general rule, &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt;s &lt;strong&gt;must not&lt;/strong&gt; call blocking code without dispatching it to a background thread. If a &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/ChannelHandler.html&#34;&gt;&lt;code&gt;ChannelHandler&lt;/code&gt;&lt;/a&gt; blocks for any reason, all &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s attached to the parent &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt; will be unable to progress until the blocking call completes.&lt;/p&gt; &#xA;&lt;p&gt;This is a common concern while writing SwiftNIO applications. If it is useful to write code in a blocking style, it is highly recommended that you dispatch work to a different thread when you&#39;re done with it in your pipeline.&lt;/p&gt; &#xA;&lt;h4&gt;Bootstrap&lt;/h4&gt; &#xA;&lt;p&gt;While it is possible to configure and register &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s with &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/EventLoop.html&#34;&gt;&lt;code&gt;EventLoop&lt;/code&gt;&lt;/a&gt;s directly, it is generally more useful to have a higher-level abstraction to handle this work.&lt;/p&gt; &#xA;&lt;p&gt;For this reason, SwiftNIO ships a number of &lt;code&gt;Bootstrap&lt;/code&gt; objects whose purpose is to streamline the creation of channels. Some &lt;code&gt;Bootstrap&lt;/code&gt; objects also provide other functionality, such as support for Happy Eyeballs for making TCP connection attempts.&lt;/p&gt; &#xA;&lt;p&gt;Currently SwiftNIO ships with three &lt;code&gt;Bootstrap&lt;/code&gt; objects in the &lt;code&gt;NIOPosix&lt;/code&gt; module: &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOPosix/Classes/ServerBootstrap.html&#34;&gt;&lt;code&gt;ServerBootstrap&lt;/code&gt;&lt;/a&gt;, for bootstrapping listening channels; &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOPosix/Classes/ClientBootstrap.html&#34;&gt;&lt;code&gt;ClientBootstrap&lt;/code&gt;&lt;/a&gt;, for bootstrapping client TCP channels; and &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOPosix/Classes/DatagramBootstrap.html&#34;&gt;&lt;code&gt;DatagramBootstrap&lt;/code&gt;&lt;/a&gt; for bootstrapping UDP channels.&lt;/p&gt; &#xA;&lt;h4&gt;ByteBuffer&lt;/h4&gt; &#xA;&lt;p&gt;The majority of the work in a SwiftNIO application involves shuffling buffers of bytes around. At the very least, data is sent and received to and from the network in the form of buffers of bytes. For this reason it&#39;s very important to have a high-performance data structure that is optimized for the kind of work SwiftNIO applications perform.&lt;/p&gt; &#xA;&lt;p&gt;For this reason, SwiftNIO provides &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Structs/ByteBuffer.html&#34;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, a fast copy-on-write byte buffer that forms a key building block of most SwiftNIO applications. This type is provided by the &lt;code&gt;NIOCore&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Structs/ByteBuffer.html&#34;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt; provides a number of useful features, and in addition provides a number of hooks to use it in an &#34;unsafe&#34; mode. This turns off bounds checking for improved performance, at the cost of potentially opening your application up to memory correctness problems.&lt;/p&gt; &#xA;&lt;p&gt;In general, it is highly recommended that you use the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Structs/ByteBuffer.html&#34;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt; in its safe mode at all times.&lt;/p&gt; &#xA;&lt;p&gt;For more details on the API of &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Structs/ByteBuffer.html&#34;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt;, please see our API documentation, linked below.&lt;/p&gt; &#xA;&lt;h4&gt;Promises and Futures&lt;/h4&gt; &#xA;&lt;p&gt;One major difference between writing concurrent code and writing synchronous code is that not all actions will complete immediately. For example, when you write data on a channel, it is possible that the event loop will not be able to immediately flush that write out to the network. For this reason, SwiftNIO provides &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Structs/EventLoopPromise.html&#34;&gt;&lt;code&gt;EventLoopPromise&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EventLoopFuture.html&#34;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; to manage operations that complete &lt;em&gt;asynchronously&lt;/em&gt;. These types are provided by the &lt;code&gt;NIOCore&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EventLoopFuture.html&#34;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is essentially a container for the return value of a function that will be populated &lt;em&gt;at some time in the future&lt;/em&gt;. Each &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EventLoopFuture.html&#34;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; has a corresponding &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Structs/EventLoopPromise.html&#34;&gt;&lt;code&gt;EventLoopPromise&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, which is the object that the result will be put into. When the promise is succeeded, the future will be fulfilled.&lt;/p&gt; &#xA;&lt;p&gt;If you had to poll the future to detect when it completed that would be quite inefficient, so &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EventLoopFuture.html&#34;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is designed to have managed callbacks. Essentially, you can hang callbacks off the future that will be executed when a result is available. The &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EventLoopFuture.html&#34;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; will even carefully arrange the scheduling to ensure that these callbacks always execute on the event loop that initially created the promise, which helps ensure that you don&#39;t need too much synchronization around &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EventLoopFuture.html&#34;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; callbacks.&lt;/p&gt; &#xA;&lt;p&gt;Another important topic for consideration is the difference between how the promise passed to &lt;code&gt;close&lt;/code&gt; works as opposed to &lt;code&gt;closeFuture&lt;/code&gt; on a &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. For example, the promise passed into &lt;code&gt;close&lt;/code&gt; will succeed after the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; is closed down but before the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelPipeline.html&#34;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; is completely cleared out. This will allow you to take action on the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelPipeline.html&#34;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; before it is completely cleared out, if needed. If it is desired to wait for the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Protocols/Channel.html&#34;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; to close down and the &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/ChannelPipeline.html&#34;&gt;&lt;code&gt;ChannelPipeline&lt;/code&gt;&lt;/a&gt; to be cleared out without any further action, then the better option would be to wait for the &lt;code&gt;closeFuture&lt;/code&gt; to succeed.&lt;/p&gt; &#xA;&lt;p&gt;There are several functions for applying callbacks to &lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/Classes/EventLoopFuture.html&#34;&gt;&lt;code&gt;EventLoopFuture&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, depending on how and when you want them to execute. Details of these functions is left to the API documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Design Philosophy&lt;/h3&gt; &#xA;&lt;p&gt;SwiftNIO is designed to be a powerful tool for building networked applications and frameworks, but it is not intended to be the perfect solution for all levels of abstraction. SwiftNIO is tightly focused on providing the basic I/O primitives and protocol implementations at low levels of abstraction, leaving more expressive but slower abstractions to the wider community to build. The intention is that SwiftNIO will be a building block for server-side applications, not necessarily the framework those applications will use directly.&lt;/p&gt; &#xA;&lt;p&gt;Applications that need extremely high performance from their networking stack may choose to use SwiftNIO directly in order to reduce the overhead of their abstractions. These applications should be able to maintain extremely high performance with relatively little maintenance cost. SwiftNIO also focuses on providing useful abstractions for this use-case, such that extremely high performance network servers can be built directly.&lt;/p&gt; &#xA;&lt;p&gt;The core SwiftNIO repository will contain a few extremely important protocol implementations, such as HTTP, directly in tree. However, we believe that most protocol implementations should be decoupled from the release cycle of the underlying networking stack, as the release cadence is likely to be very different (either much faster or much slower). For this reason, we actively encourage the community to develop and maintain their protocol implementations out-of-tree. Indeed, some first-party SwiftNIO protocol implementations, including our TLS and HTTP/2 bindings, are developed out-of-tree!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-nio/docs/current/NIOCore/index.html&#34;&gt;API documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;p&gt;There are currently several example projects that demonstrate how to use SwiftNIO.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;chat client&lt;/strong&gt; &lt;a href=&#34;https://github.com/apple/swift-nio/tree/main/Sources/NIOChatClient&#34;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOChatClient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;chat server&lt;/strong&gt; &lt;a href=&#34;https://github.com/apple/swift-nio/tree/main/Sources/NIOChatServer&#34;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOChatServer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;echo client&lt;/strong&gt; &lt;a href=&#34;https://github.com/apple/swift-nio/tree/main/Sources/NIOEchoClient&#34;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOEchoClient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;echo server&lt;/strong&gt; &lt;a href=&#34;https://github.com/apple/swift-nio/tree/main/Sources/NIOEchoServer&#34;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOEchoServer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UDP echo client&lt;/strong&gt; &lt;a href=&#34;https://github.com/apple/swift-nio/tree/main/Sources/NIOUDPEchoClient&#34;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOUDPEchoClient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UDP echo server&lt;/strong&gt; &lt;a href=&#34;https://github.com/apple/swift-nio/tree/main/Sources/NIOUDPEchoServer&#34;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOUDPEchoServer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP client&lt;/strong&gt; &lt;a href=&#34;https://github.com/apple/swift-nio/tree/main/Sources/NIOHTTP1Client&#34;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOHTTP1Client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP server&lt;/strong&gt; &lt;a href=&#34;https://github.com/apple/swift-nio/tree/main/Sources/NIOHTTP1Server&#34;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOHTTP1Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WebSocket client&lt;/strong&gt; &lt;a href=&#34;https://github.com/apple/swift-nio/tree/main/Sources/NIOWebSocketClient&#34;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOWebSocketClient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WebSocket server&lt;/strong&gt; &lt;a href=&#34;https://github.com/apple/swift-nio/tree/main/Sources/NIOWebSocketServer&#34;&gt;https://github.com/apple/swift-nio/tree/main/Sources/NIOWebSocketServer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build &amp;amp; run them, run following command, replace TARGET_NAME with the folder name under &lt;code&gt;./Sources&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift run TARGET_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, to run NIOHTTP1Server, run following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift run NIOHTTP1Server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;SwiftNIO primarily uses &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;SwiftPM&lt;/a&gt; as its build tool, so we recommend using that as well. If you want to depend on SwiftNIO in your own project, it&#39;s as simple as adding a &lt;code&gt;dependencies&lt;/code&gt; clause to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/apple/swift-nio.git&#34;, from: &#34;2.0.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then adding the appropriate SwiftNIO module(s) to your target dependencies. The syntax for adding target dependencies differs slightly between Swift versions. For example, if you want to depend on the &lt;code&gt;NIOCore&lt;/code&gt;, &lt;code&gt;NIOPosix&lt;/code&gt; and &lt;code&gt;NIOHTTP1&lt;/code&gt; modules, specify the following dependencies:&lt;/p&gt; &#xA;&lt;h4&gt;Swift 5.4 and newer (&lt;code&gt;swift-tools-version:5.4&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies: [.product(name: &#34;NIOCore&#34;, package: &#34;swift-nio&#34;),&#xA;               .product(name: &#34;NIOPosix&#34;, package: &#34;swift-nio&#34;),&#xA;               .product(name: &#34;NIOHTTP1&#34;, package: &#34;swift-nio&#34;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Xcode Package support&lt;/h3&gt; &#xA;&lt;p&gt;If your project is set up as an Xcode project and you&#39;re using Xcode 11+, you can add SwiftNIO as a dependency to your Xcode project by clicking File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency. In the upcoming dialog, please enter &lt;code&gt;https://github.com/apple/swift-nio.git&lt;/code&gt; and click Next twice. Finally, select the targets you are planning to use (for example &lt;code&gt;NIOCore&lt;/code&gt;, &lt;code&gt;NIOHTTP1&lt;/code&gt;, and &lt;code&gt;NIOFoundationCompat&lt;/code&gt;) and click finish. Now will be able to &lt;code&gt;import NIOCore&lt;/code&gt; (as well as all the other targets you have selected) in your project.&lt;/p&gt; &#xA;&lt;p&gt;To work on SwiftNIO itself, or to investigate some of the demonstration applications, you can clone the repository directly and use SwiftPM to help build it. For example, you can run the following commands to compile and run the example echo server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift build&#xA;swift test&#xA;swift run NIOEchoServer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To verify that it is working, you can use another shell to attempt to connect to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;Hello SwiftNIO&#34; | nc localhost 9999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If all goes well, you&#39;ll see the message echoed back to you.&lt;/p&gt; &#xA;&lt;p&gt;To work on SwiftNIO in Xcode 11+, you can just open the &lt;code&gt;Package.swift&lt;/code&gt; file in Xcode and use Xcode&#39;s support for SwiftPM Packages.&lt;/p&gt; &#xA;&lt;p&gt;If you want to develop SwiftNIO with Xcode 10, you have to generate an Xcode project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift package generate-xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;An alternative: using &lt;code&gt;docker-compose&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you may want to develop or test with &lt;code&gt;docker-compose&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First make sure you have &lt;a href=&#34;https://www.docker.com/community-edition&#34;&gt;Docker&lt;/a&gt; installed, next run the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml run test&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Will create a base image with Swift runtime and other build and test dependencies, compile SwiftNIO and run the unit and integration tests&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml up echo&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Will create a base image, compile SwiftNIO, and run a sample &lt;code&gt;NIOEchoServer&lt;/code&gt; on &lt;code&gt;localhost:9999&lt;/code&gt;. Test it by &lt;code&gt;echo Hello SwiftNIO | nc localhost 9999&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml up http&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Will create a base image, compile SwiftNIO, and run a sample &lt;code&gt;NIOHTTP1Server&lt;/code&gt; on &lt;code&gt;localhost:8888&lt;/code&gt;. Test it by &lt;code&gt;curl http://localhost:8888&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docker-compose -f docker/docker-compose.yaml -f docker/docker-compose.2004.54.yaml run test&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Will create a base image using Ubuntu 20.04 and swift 5.4, compile SwiftNIO and run the unit and integration tests. Files exist for other ubuntu and swift versions in the docker directory.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing SwiftNIO&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This section is only relevant if you would like to develop SwiftNIO yourself. You can ignore the information here if you just want to use SwiftNIO as a SwiftPM package.&lt;/p&gt; &#xA;&lt;p&gt;For the most part, SwiftNIO development is as straightforward as any other SwiftPM project. With that said, we do have a few processes that are worth understanding before you contribute. For details, please see &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; in this repository.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;SwiftNIO&#39;s &lt;code&gt;main&lt;/code&gt; branch is the development branch for the next releases of SwiftNIO 2, it&#39;s Swift 5-only.&lt;/p&gt; &#xA;&lt;p&gt;To be able to compile and run SwiftNIO and the integration tests, you need to have a few prerequisites installed on your system.&lt;/p&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11.4 or newer, Xcode 12 recommended.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift 5.2, 5.3, or 5.4 from &lt;a href=&#34;https://swift.org/download/#releases&#34;&gt;swift.org/download&lt;/a&gt;. We always recommend to use the latest released version.&lt;/li&gt; &#xA; &lt;li&gt;netcat (for integration tests only)&lt;/li&gt; &#xA; &lt;li&gt;lsof (for integration tests only)&lt;/li&gt; &#xA; &lt;li&gt;shasum (for integration tests only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Ubuntu 18.04&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# install swift tarball from https://swift.org/downloads&#xA;apt-get install -y git curl libatomic1 libxml2 netcat-openbsd lsof perl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fedora 28+&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install swift-lang /usr/bin/nc /usr/bin/lsof /usr/bin/shasum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Speeding up testing&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to run the test suite in parallel, it can save significant time if you have a larger multi-core machine, just add &lt;code&gt;--parallel&lt;/code&gt; when running the tests. This can speed up the run time of the test suite by 30x or more.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swift test --parallel&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>iina/iina</title>
    <updated>2022-06-01T01:55:07Z</updated>
    <id>tag:github.com,2022-06-01:/iina/iina</id>
    <link href="https://github.com/iina/iina" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The modern video player for macOS.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;256&#34; src=&#34;https://github.com/iina/iina/raw/master/iina/Assets.xcassets/AppIcon.appiconset/iina-icon-256.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;IINA&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;IINA is the &lt;b&gt;modern&lt;/b&gt; video player for macOS.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://iina.io&#34;&gt;Website&lt;/a&gt; · &lt;a href=&#34;https://github.com/iina/iina/releases&#34;&gt;Releases&lt;/a&gt; · &lt;a href=&#34;https://t.me/IINAUsers&#34;&gt;Telegram Group&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Based on &lt;a href=&#34;https://github.com/mpv-player/mpv&#34;&gt;mpv&lt;/a&gt;, which provides the best decoding capacity on macOS&lt;/li&gt; &#xA; &lt;li&gt;Designed with modern versions of macOS (10.11+) in mind&lt;/li&gt; &#xA; &lt;li&gt;All the features you need for video and music: subtitles, playlists, chapters…and much, much more!&lt;/li&gt; &#xA; &lt;li&gt;Force Touch, picture-in-picture and advanced Touch Bar support&lt;/li&gt; &#xA; &lt;li&gt;Customizable user interface including multiple color schemes and on screen controller (OSC) layout positioning&lt;/li&gt; &#xA; &lt;li&gt;Standalone Music Mode designed for audio files&lt;/li&gt; &#xA; &lt;li&gt;Video thumbnails&lt;/li&gt; &#xA; &lt;li&gt;Online subtitle searching and intelligent local subtitle matching&lt;/li&gt; &#xA; &lt;li&gt;Unlimited playback history&lt;/li&gt; &#xA; &lt;li&gt;Convenient and interactive settings for video/audio filters&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable keyboard, mouse, trackpad, and gesture controls&lt;/li&gt; &#xA; &lt;li&gt;mpv configuration files and script system for advanced users&lt;/li&gt; &#xA; &lt;li&gt;Command line tool and browser extensions provided&lt;/li&gt; &#xA; &lt;li&gt;In active development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;IINA uses mpv for media playback. To build IINA, you can either fetch copies of these libraries we have already built (using the instructions below) or build them yourself by skipping to &lt;a href=&#34;https://raw.githubusercontent.com/iina/iina/develop/#building-mpv-manually&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using the pre-compiled libraries&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download pre-compiled libraries by running&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./other/download_libs.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tips: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change URL in the shell script if you want to download arch-specific binaries. By default, it will download the universal ones. You can download other binaries from &lt;code&gt;https://iina.io/dylibs/${ARCH}/fileList.txt&lt;/code&gt; where &lt;code&gt;ARCH&lt;/code&gt; can be &lt;code&gt;universal&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you want to build an older IINA version, make sure to download the correponding dylibs. For example, &lt;code&gt;https://iina.io/dylibs/1.2.0/universal/fileList.txt&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Open iina.xcodeproj in the &lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835&#34;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building mpv manually&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build your own copy of mpv. If you&#39;re using a package manager to manage dependencies, the steps below outline the process.&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;p&gt;Use our tap as it passes in the correct flags to mpv&#39;s configure script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew tap iina/homebrew-mpv-iina&#xA;$ brew install mpv-iina&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;p&gt;Pass in these flags when installing:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# port install mpv +uchardet -bundle -rubberband configure.args=&#34;--enable-libmpv-shared --enable-lua --enable-libarchive --enable-libbluray --disable-swift --disable-rubberband&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the correponding mpv and FFmpeg header files into &lt;code&gt;deps/include/&lt;/code&gt;, replacing the current ones. You can find them on GitHub &lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;(e.g. mpv)&lt;/a&gt;, but it&#39;s recommended to copy them from the Homebrew or MacPorts installation. Always make sure the header files have the same version of the dylibs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/parse_doc.rb&lt;/code&gt;. This script will fetch the latest mpv documentation and generate &lt;code&gt;MPVOption.swift&lt;/code&gt;, &lt;code&gt;MPVCommand.swift&lt;/code&gt; and &lt;code&gt;MPVProperty.swift&lt;/code&gt;. Copy them from &lt;code&gt;other/&lt;/code&gt; to &lt;code&gt;iina/&lt;/code&gt;, replacing the current files. This is only needed when updating libmpv. Note that if the API changes, the player source code may also need to be changed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/change_lib_dependencies.rb&lt;/code&gt;. This script will deploy the dependent libraries into &lt;code&gt;deps/lib&lt;/code&gt;. If you&#39;re using a package manager to manage dependencies, invoke it like so:&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ other/change_lib_dependencies.rb &#34;$(brew --prefix)&#34; &#34;$(brew --prefix mpv-iina)/lib/libmpv.dylib&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ port contents mpv | grep &#39;\.dylib$&#39; | xargs other/change_lib_dependencies.rb /opt/local&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open iina.xcodeproj in the &lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835&#34;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove all of references to .dylib files from the Frameworks group in the sidebar and add all the .dylib files in &lt;code&gt;deps/lib&lt;/code&gt; to that group by clicking &#34;Add Files to iina...&#34; in the context menu.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add all the imported .dylib files into the &#34;Copy Dylibs&#34; phase under &#34;Build Phases&#34; tab of the iina target.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the necessary .dylib files present in the &#34;Link Binary With Libraries&#34; phase under &#34;Build Phases&#34;. Xcode should already added all dylibs under this section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;IINA is always looking for contributions, whether it&#39;s through bug reports, code, or new translations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you find a bug in IINA, or would like to suggest a new feature or enhancement, it&#39;d be nice if you could &lt;a href=&#34;https://github.com/iina/iina/issues&#34;&gt;search your problem first&lt;/a&gt;; while we don&#39;t mind duplicates, keeping issues unique helps us save time and consolidates effort. If you can&#39;t find your issue, feel free to &lt;a href=&#34;https://github.com/iina/iina/issues/new&#34;&gt;file a new one&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re looking to contribute code, please read &lt;a href=&#34;https://raw.githubusercontent.com/iina/iina/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;–it has information on IINA&#39;s process for handling contributions, and tips on how the code is structured to make your work easier.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;d like to translate IINA to your language, please visit &lt;a href=&#34;https://translate.iina.io&#34;&gt;IINA&#39;s instance of Crowdin&lt;/a&gt;. You can create an account for free and start translating and/or approving. Please do not send pull request to this repo directly, Crowdin will automatically sync new translations with our repo. If you want to translate IINA into a new language that is currently not in the list, feel free to open an issue.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>