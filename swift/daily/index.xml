<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-02T01:39:10Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>uias/Tabman</title>
    <updated>2022-10-02T01:39:10Z</updated>
    <id>tag:github.com,2022-10-02:/uias/Tabman</id>
    <link href="https://github.com/uias/Tabman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚Ñ¢Ô∏è A powerful paging view controller with interactive indicator bars&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/uias/Tabman/main/Docs/img/tm_logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/uias/Tabman&#34;&gt; &lt;img src=&#34;https://github.com/uias/Tabman/workflows/Build/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5-orange?logo=Swift&amp;amp;logoColor=white&#34;&gt; &lt;a href=&#34;https://github.com/uias/Tabman/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/uias/Tabman.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/uias/Tabman/main/Docs/img/tm_header.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚≠êÔ∏è Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to implement page view controller with interactive indicator bars.&lt;/li&gt; &#xA; &lt;li&gt;Highly adaptable and powerful customization.&lt;/li&gt; &#xA; &lt;li&gt;Fully extensible with mix-and-match component library.&lt;/li&gt; &#xA; &lt;li&gt;Built on &lt;a href=&#34;https://github.com/uias/Pageboy&#34;&gt;Pageboy&lt;/a&gt;, a simple, informative page view controller.&lt;/li&gt; &#xA; &lt;li&gt;Automatically insets child view controller contents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìã Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Tabman requires iOS 9 or above; and is compatibile with Swift 5.&lt;/p&gt; &#xA;&lt;h2&gt;üì≤ Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Tabman is compatible with &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt; and can be integrated via Xcode.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Tabman is also available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Tabman&#39;, &#39;~&amp;gt; 2.13&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Tabman is also available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;uias/Tabman&#34; ~&amp;gt; 2.13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;h3&gt;The Basics&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set up your view controller with the an array of view controllers that you want to appear.&lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;PageboyViewControllerDataSource&lt;/code&gt; data source of the &lt;code&gt;TabmanViewController&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create, customize and add as many &lt;code&gt;TMBar&lt;/code&gt;s as you want.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Tabman&#xA;import Pageboy&#xA;&#xA;class TabViewController: TabmanViewController {&#xA;&#xA;    private var viewControllers = [UIViewController(), UIViewController()]&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;&#xA;        self.dataSource = self&#xA;&#xA;        // Create bar&#xA;        let bar = TMBar.ButtonBar()&#xA;        bar.layout.transitionStyle = .snap // Customize&#xA;&#xA;        // Add to view&#xA;        addBar(bar, dataSource: self, at: .top)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When adding a bar, you can choose to add it to the predefined areas (&lt;code&gt;.top&lt;/code&gt;, &lt;code&gt;.bottom&lt;/code&gt;, &lt;code&gt;.navigationItem(item:)&lt;/code&gt;) or to a custom view with &lt;code&gt;.custom(view:layout:)&lt;/code&gt;. For more information, read the &lt;a href=&#34;https://uias.github.io/Tabman/main/adding-a-bar.html&#34;&gt;Adding a Bar&lt;/a&gt; guide.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Configure your data sources.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension TabViewController: PageboyViewControllerDataSource, TMBarDataSource {&#xA;&#xA;    func numberOfViewControllers(in pageboyViewController: PageboyViewController) -&amp;gt; Int {&#xA;        return viewControllers.count&#xA;    }&#xA;&#xA;    func viewController(for pageboyViewController: PageboyViewController,&#xA;                        at index: PageboyViewController.PageIndex) -&amp;gt; UIViewController? {&#xA;        return viewControllers[index]&#xA;    }&#xA;&#xA;    func defaultPage(for pageboyViewController: PageboyViewController) -&amp;gt; PageboyViewController.Page? {&#xA;        return nil&#xA;    }&#xA;&#xA;    func barItem(for bar: TMBar, at index: Int) -&amp;gt; TMBarItemable {&#xA;        let title = &#34;Page \(index)&#34;&#xA;        return TMBarItem(title: title)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Items&lt;/h3&gt; &#xA;&lt;p&gt;A bar will ask for a &lt;code&gt;TMBarItemable&lt;/code&gt; for each page that is provided to the &lt;code&gt;TabmanViewController&lt;/code&gt; &lt;code&gt;dataSource&lt;/code&gt;. &lt;code&gt;TMBarItemable&lt;/code&gt; is a protocol that can be used for custom item types, the default in Tabman being &lt;code&gt;TMBarItem&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let item = TMBarItem()&#xA;item.title = &#34;Item 1&#34;&#xA;item.image = UIImage(named: &#34;item.png&#34;)&#xA;item.badgeValue = &#34;New&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;UIKit Itemables&lt;/h4&gt; &#xA;&lt;p&gt;Tabman also provides support for some native &lt;code&gt;UIKit&lt;/code&gt; types as &lt;code&gt;TMBarItemable&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;UINavigationItem&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UITabBarItem&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;These types are unfortunately unable to support the dynamic updating of the bar when setting properties.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Choosing a look&lt;/h3&gt; &#xA;&lt;p&gt;Tabman provides numerous, easy to use template styles out of the box:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/uias/Tabman/main/Docs/img/bar_styles.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;These are all available as types of &lt;code&gt;TMBar&lt;/code&gt; in &lt;a href=&#34;https://github.com/uias/Tabman/raw/main/Sources/Tabman/Bar/TMBar%2BTemplates.swift&#34;&gt;TMBar+Templates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bar = TMBar.ButtonBar()&#xA;let tabBar = TMBar.TabBar()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;Bar customization is available via properties on each functional area of the bar. Each bar is made up of 4 distinct areas:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/uias/Tabman/main/Docs/img/bar_breakdown.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;TMBarView&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;TMBarView&lt;/code&gt; is the root view of every bar, and provides the glue for meshing all the other functional areas together. You can change a few things here, such as background style and transitioning behavior.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;bar.background.style = .blur(style: .extraLight)&#xA;bar.transitionStyle = .snap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;This is also the entry point for all other customization.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h5&gt;üß≤ Properties of Interest&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;backgroundView&lt;/code&gt; - &lt;code&gt;TMBarBackgroundView&lt;/code&gt; which provides background styling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scrollMode&lt;/code&gt; - What type of interactive scrolling to allow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fadesContentEdges&lt;/code&gt; - Whether to fade the edges of the bar contents as it goes off-screen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;More: &lt;a href=&#34;https://uias.github.io/Tabman/main/Bar.html&#34;&gt;&lt;strong&gt;TMBarView Docs&lt;/strong&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;TMBarLayout&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;TMBarLayout&lt;/code&gt; is the foundation of a &lt;code&gt;TMBarView&lt;/code&gt;, dictating how bar buttons are displayed and laid out. Look here if you want to change things such as button spacing, content insets and other layout&#39;y things.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;bar.layout.contentInset = UIEdgeInsets(top: 0.0, left: 20.0, bottom: 0.0, right: 20.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;üß≤ Properties of Interest&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;contentMode&lt;/code&gt; - How the layout should display its contents; either restricted to the bar width with &lt;code&gt;.fit&lt;/code&gt; or intrinsically sized with &lt;code&gt;.intrinsic&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;contentInset&lt;/code&gt; - Inset to be applied to the edges of the layout.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;transitionStyle&lt;/code&gt; - How the layout should perform transition animations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;alignment&lt;/code&gt; - How the layout should be aligned in the bar.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;More: &lt;a href=&#34;https://uias.github.io/Tabman/main/Layout.html&#34;&gt;&lt;strong&gt;TMBarLayout Docs&lt;/strong&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;TMBarButton&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;TMBarButton&lt;/code&gt; views are populated in the &lt;code&gt;TMBarLayout&lt;/code&gt; and correspond to the items provided by the data source. This is the place to change things like fonts, image sizing and highlight colors.&lt;/p&gt; &#xA;&lt;p&gt;As you will most likely dealing with more than one button, you can modify the whole set at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;bar.buttons.customize { (button) in&#xA;&#x9;button.tintColor = .orange&#xA;&#x9;button.selectedTintColor = .red&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;This will be applied to both existing bar buttons and any that are added to the bar afterwards.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h5&gt;üß≤ Properties of Interest&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;backgroundView&lt;/code&gt; - &lt;code&gt;TMBarBackgroundView&lt;/code&gt; which provides background styling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;contentInset&lt;/code&gt; - Inset to be applied to the edges of the button.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;transitionStyle&lt;/code&gt; (&lt;code&gt;TMBarButtonCollection&lt;/code&gt;) - How the buttons should should perform transition animations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;badge&lt;/code&gt; - &lt;code&gt;TMBadgeView&lt;/code&gt; that displays &lt;code&gt;badgeValue&lt;/code&gt; from bar item.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;More: &lt;a href=&#34;https://uias.github.io/Tabman/main/Buttons.html&#34;&gt;&lt;strong&gt;TMBarButton Docs&lt;/strong&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;TMBarIndicator&lt;/h4&gt; &#xA;&lt;p&gt;Lastly is &lt;code&gt;TMBarIndicator&lt;/code&gt; - which indicates the current page index status for the bar. You can change behavior characteristics here as well as how the indicator looks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;bar.indicator.overscrollBehavior = .compress&#xA;bar.indicator.weight = .heavy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;üß≤ Properties of Interest&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;overscrollBehavior&lt;/code&gt; - How the indicator should handle scrolling beyond the bounds of the bar items.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isProgressive&lt;/code&gt; - Whether the indicator should act progressively when transitioning through page indexes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;transitionStyle&lt;/code&gt; - How the indicator should should perform transition animations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;More: &lt;a href=&#34;https://uias.github.io/Tabman/main/Indicator.html&#34;&gt;&lt;strong&gt;TMBarIndicator Docs&lt;/strong&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üé® Advanced Customization&lt;/h2&gt; &#xA;&lt;p&gt;Tabman provides the complete freedom to mix-and-match the built-in components; and also define your own.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TMBarView&lt;/code&gt; leverages generics to define and serve the three distinct functional areas of the bar. This means...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// ...that the preset...&#xA;let bar = Bar.ButtonBar()&#xA;&#xA;// ...is actually under the hood:&#xA;let bar = BarView&amp;lt;HorizontalBarLayout, LabelBarButton, LineBarIndicator&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So swapping in another type of layout, button or indicator could not be simpler.&lt;/p&gt; &#xA;&lt;p&gt;Lets say you wanted to actually use a &lt;code&gt;DotBarIndicator&lt;/code&gt; rather than the &lt;code&gt;LineBarIndicator&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bar = BarView&amp;lt;HorizontalBarLayout, LabelBarButton, DotBarIndicator&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The following components are available in Tabman:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bar Layouts&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TMHorizontalBarLayout&lt;/code&gt; - Layout that displays bar buttons sequentially along the horizontal axis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TMConstrainedHorizontalBarLayout&lt;/code&gt; - Layout that displays bar buttons sequentially along the horizontal axis, but is constrained by the number of items it can display.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bar Buttons&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TMLabelBarButton&lt;/code&gt; - Button which contains a single text label.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TMTabItemBarButton&lt;/code&gt; - Button which mimics appearance of a &lt;code&gt;UITabBarItem&lt;/code&gt;, containing a image and label vertically aligned.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TMBarButton.None&lt;/code&gt; - Display no visible bar buttons.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bar Indicators&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TMLineBarIndicator&lt;/code&gt; - Simple indicator that displays as a horizontal line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TMChevronBarIndicator&lt;/code&gt; - Indicator that displays a vertical chevron centered along the X-axis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TMBlockBarIndicator&lt;/code&gt; - Indicator that fills the bar, displaying a solid color.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TMDotBarIndicator&lt;/code&gt; - Indicator that displays a circular dot centered along the X-axis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TMBarIndicator.None&lt;/code&gt; - Display no visible indicator.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Going Completely Custom&lt;/h3&gt; &#xA;&lt;p&gt;As replacing the type of layout, button or indicator is as easy as above; you have the ability to define your own subclasses without too much of a headache.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uias.github.io/Tabman/main/going-custom.html&#34;&gt;&lt;strong&gt;Custom Tabman Components&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are also example projects that showcase custom layouts and such:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uias/Tinderbar&#34;&gt;&lt;strong&gt;Tinderbar&lt;/strong&gt;&lt;/a&gt; - Tinder iOS app layout built with Tabman.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìê Content Insetting&lt;/h2&gt; &#xA;&lt;p&gt;Tabman automatically adjusts any content in its child view controllers so that it displays correctly beneath any visible bars. It provides the following behaviors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Updates &lt;code&gt;contentInset&lt;/code&gt; and &lt;code&gt;contentOffset&lt;/code&gt; appropriately for any &lt;code&gt;UIScrollView&lt;/code&gt; or derived subclass found in the child view controller&#39;s subviews.&lt;/li&gt; &#xA; &lt;li&gt;Sets &lt;code&gt;additionalSafeAreaInsets&lt;/code&gt; to reflect the required safe areas including the bar contents. Any views constrained to the safe area in the child view controller will be laid out correctly (&lt;strong&gt;Only available in iOS 11 and above.&lt;/strong&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;TabmanViewController&lt;/code&gt; also provides &lt;code&gt;barLayoutGuide&lt;/code&gt;, a &lt;code&gt;UILayoutGuide&lt;/code&gt; that provides top and bottom anchors taking into account any bars added to the &lt;code&gt;.top&lt;/code&gt; or &lt;code&gt;.bottom&lt;/code&gt; &lt;code&gt;TabmanViewController.BarLocation&lt;/code&gt; areas. The raw &lt;code&gt;UIEdgeInsets&lt;/code&gt; are also available via &lt;code&gt;.barInsets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Auto insetting can be &lt;strong&gt;disabled&lt;/strong&gt; by setting &lt;code&gt;automaticallyAdjustsChildInsets&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; - however this &lt;strong&gt;must be done before &lt;code&gt;viewDidLoad&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tabman will not provide any insetting behavior for bars that are added to custom views.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ö†Ô∏è Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you are encountering issues with Tabman, please check out the &lt;a href=&#34;https://uias.github.io/Tabman/main/troubleshooting.html&#34;&gt;Troubleshooting Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re still having problems, feel free to raise an &lt;a href=&#34;https://github.com/uias/Tabman/issues/new&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üë®üèª‚Äçüíª About&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;https://github.com/msaps&#34;&gt;Merrick Sapsford&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/MerrickSapsford&#34;&gt;@MerrickSapsford&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Contributed to by a growing &lt;a href=&#34;https://github.com/uias/Tabman/graphs/contributors&#34;&gt;list of others&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ù§Ô∏è Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and pull requests are welcome on GitHub at &lt;a href=&#34;https://github.com/uias/Tabman&#34;&gt;https://github.com/uias/Tabman&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üëÆüèª‚Äç‚ôÇÔ∏è License&lt;/h2&gt; &#xA;&lt;p&gt;The library is available as open source under the terms of the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>guardianproject/orbot-ios</title>
    <updated>2022-10-02T01:39:10Z</updated>
    <id>tag:github.com,2022-10-02:/guardianproject/orbot-ios</id>
    <link href="https://github.com/guardianproject/orbot-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Orbot VPN app for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Orbot iOS&lt;/h1&gt; &#xA;&lt;p&gt;Torifies your iOS device running iOS 15 and newer.&lt;/p&gt; &#xA;&lt;p&gt;Provides a &#34;VPN&#34; which tunnels all your device network traffic through Tor.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Obfs4 and Snowflake bridges, fully configurable.&lt;/li&gt; &#xA; &lt;li&gt;Supports Onion v3 service authentication.&lt;/li&gt; &#xA; &lt;li&gt;Supports Tor&#39;s &lt;code&gt;EntryNodes&lt;/code&gt;, &lt;code&gt;ExitNodes&lt;/code&gt;, &lt;code&gt;ExcludeNodes&lt;/code&gt; and &lt;code&gt;StrictNodes&lt;/code&gt; options.&lt;/li&gt; &#xA; &lt;li&gt;Tor 0.4.7.8&lt;/li&gt; &#xA; &lt;li&gt;OpenSSL 1.1.1o&lt;/li&gt; &#xA; &lt;li&gt;Obfs4proxy 0.0.13&lt;/li&gt; &#xA; &lt;li&gt;Snowflake 2.2.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisits:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MacOS Big Sur or later&lt;/li&gt; &#xA; &lt;li&gt;Xcode 13 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install cocoapods bartycrouch fastlane rustup-init automake autoconf libtool gettext&#xA;rustup-init -y&#xA;rustup target add aarch64-apple-ios aarch64-apple-ios-sim x86_64-apple-ios aarch64-apple-darwin x86_64-apple-darwin&#xA;cargo install cargo-lipo cbindgen&#xA;git clone git@github.com:guardianproject/orbot-ios.git&#xA;cd orbot-ios&#xA;git submodule update --init --recursive&#xA;pod update&#xA;open Orbot.xcworkspace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure your code signing credentials in &lt;a href=&#34;https://raw.githubusercontent.com/guardianproject/orbot-ios/main/Shared/Config.xcconfig&#34;&gt;&lt;code&gt;Config.xcconfig&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;You will need to manually create App IDs, a group ID, and profiles.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/networkextension&#34;&gt;Network Extensions&lt;/a&gt; can only run on real devices, not in the simulator.&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;Localization is done with &lt;a href=&#34;https://github.com/Flinesoft/BartyCrouch&#34;&gt;BartyCrouch&lt;/a&gt;, licensed under &lt;a href=&#34;https://github.com/Flinesoft/BartyCrouch/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Just add new &lt;code&gt;NSLocalizedStrings&lt;/code&gt; calls to the code. After a build, they will automatically show up in &lt;a href=&#34;https://raw.githubusercontent.com/guardianproject/orbot-ios/main/Shared/en.lproj/Localizable.strings&#34;&gt;&lt;code&gt;Localizable.strings&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t use storyboard and xib file localization. That just messes up everything. Localize these by explicit calls in the code.&lt;/p&gt; &#xA;&lt;h2&gt;IPC / Use with Other Apps&lt;/h2&gt; &#xA;&lt;p&gt;Orbot registers to handle the scheme &lt;code&gt;orbot&lt;/code&gt; and associates the domain &lt;a href=&#34;https://orbot.app&#34;&gt;https://orbot.app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using the associated domain is preferred, as it protects against other apps trying to hijack the &lt;code&gt;orbot&lt;/code&gt; scheme and it provides a nice fallback for users who don&#39;t have Orbot installed, yet.&lt;/p&gt; &#xA;&lt;p&gt;The following URIs are available to interact with Orbot from other apps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;https://orbot.app/rc/show&lt;/code&gt; OR &lt;code&gt;orbot:show&lt;/code&gt; Will just start the Orbot app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;https://orbot.app/rc/start&lt;/code&gt; OR &lt;code&gt;orbot:start&lt;/code&gt; Will start the Network Extension, if not already started. (NOTE: There&#39;s no &#34;stop&#34; for security reasons!)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;https://orbot.app/rc/show/settings&lt;/code&gt; OR &lt;code&gt;orbot:show/settings&lt;/code&gt; Will show the &lt;code&gt;SettingsViewController&lt;/code&gt;, where users can edit their Tor configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;https://orbot.app/rc/show/bridges&lt;/code&gt; OR &lt;code&gt;orbot:show/bridges&lt;/code&gt; Will show the &lt;code&gt;BridgeConfViewController&lt;/code&gt;, where users can change their bridge configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;https://orbot.app/rc/show/auth&lt;/code&gt; OR &lt;code&gt;orbot:show/auth&lt;/code&gt; Will show the &lt;code&gt;AuthViewController&lt;/code&gt;, where users can edit their v3 onion service authentication tokens.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;https://orbot.app/rc/add/auth?url=http%3A%2F%2Fexample23472834zasd.onion&amp;amp;key=12345678examplekey12345678&lt;/code&gt; OR &lt;code&gt;orbot:add/auth?url=http%3A%2F%2Fexample23472834zasd.onion&amp;amp;key=12345678examplekey12345678&lt;/code&gt; Will show the &lt;code&gt;AuthViewController&lt;/code&gt;, which will display a prefilled &#34;Add&#34; dialog. The user can then add that auth key. You don&#39;t need to provide all pieces. E.g. for the URL the second-level domain would be enough. Orbot will do its best to sanitize the arguments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can call these URIs like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#x9;UIApplication.shared.open(URL(string: &#34;https://orbot.app/rc/start&#34;)!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Direct Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eycorsican/leaf&#34;&gt;leaf&lt;/a&gt;, licensed under &lt;a href=&#34;https://github.com/eycorsican/leaf/raw/master/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iCepa/Tor.framework&#34;&gt;Tor.framework&lt;/a&gt;, licensed under &lt;a href=&#34;https://github.com/iCepa/Tor.framework/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tladesignz/IPtProxyUI-ios&#34;&gt;IPtProxyUI&lt;/a&gt;, licensed under &lt;a href=&#34;https://github.com/tladesignz/IPtProxyUI-ios/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ashleymills/Reachability.swift&#34;&gt;ReachabilitySwift&lt;/a&gt;, licensed under &lt;a href=&#34;https://github.com/ashleymills/Reachability.swift/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmartlabs/Eureka&#34;&gt;Eureka&lt;/a&gt;, licensed under &lt;a href=&#34;https://github.com/xmartlabs/Eureka/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;These people helped with translations. Thank you so much, folks!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;French: yahoe.001&lt;/li&gt; &#xA; &lt;li&gt;Russian: ViktorOnlin, ktchr&lt;/li&gt; &#xA; &lt;li&gt;Spanish: Fabiola.mauriceh&lt;/li&gt; &#xA; &lt;li&gt;Ukrainian Kataphan&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author, License&lt;/h2&gt; &#xA;&lt;p&gt;Benjamin Erhart, &lt;a href=&#34;https://die.netzarchitekten.com&#34;&gt;Die Netzarchitekten e.U.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Under the authority of &lt;a href=&#34;https://guardianproject.info&#34;&gt;Guardian Project&lt;/a&gt; with friendly support from &lt;a href=&#34;https://torproject.org&#34;&gt;The Tor Project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under &lt;a href=&#34;https://raw.githubusercontent.com/guardianproject/orbot-ios/main/LICENSE&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Artwork taken from &lt;a href=&#34;https://github.com/guardianproject/orbot&#34;&gt;Orbot Android&lt;/a&gt;, licensed under &lt;a href=&#34;https://github.com/guardianproject/orbot/raw/master/LICENSE&#34;&gt;BSD-3&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>