<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-01T01:47:03Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pointfreeco/standups</title>
    <updated>2023-02-01T01:47:03Z</updated>
    <id>tag:github.com,2023-02-01:/pointfreeco/standups</id>
    <link href="https://github.com/pointfreeco/standups" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A rebuild of Apple’s “Scrumdinger” application using modern, best practices for SwiftUI development.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Standups&lt;/h1&gt; &#xA;&lt;p&gt;This project demonstrates how to build a complex, real world application that deals with many forms of navigation (&lt;em&gt;e.g.&lt;/em&gt;, sheets, drill-downs, alerts), many side effects (timers, speech recognizer, data persistence), and do so in a way that is testable and modular.&lt;/p&gt; &#xA;&lt;p&gt;This application was built over the course of &lt;a href=&#34;https://www.pointfree.co/collections/swiftui/modern-swiftui&#34;&gt;many episodes&lt;/a&gt; on Point-Free, a video series exploring functional programming and the Swift language, hosted by &lt;a href=&#34;https://twitter.com/mbrandonw&#34;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.pointfree.co/collections/swiftui/modern-swiftui&#34;&gt; &lt;img alt=&#34;video poster image&#34; src=&#34;https://d3rccdn33rt8ze.cloudfront.net/episodes/0209.jpeg&#34; width=&#34;600&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Call to action!&lt;/h2&gt; &#xA;&lt;p&gt;While we have built the Standups application in the style that makes the most sense to us, we know that some of our choices aren’t for everyone. We would love if others fork this repo and rebuild it in the style of their choice.&lt;/p&gt; &#xA;&lt;p&gt;Don’t like to use an &lt;code&gt;ObservableObject&lt;/code&gt; for each screen? Prefer to use &lt;code&gt;@StateObject&lt;/code&gt; instead of &lt;code&gt;@ObservedObject&lt;/code&gt;? Want to use an architectural pattern such as VIPER? Have a different way of handling dependencies?&lt;/p&gt; &#xA;&lt;p&gt;Please show us! Just complete the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pointfreeco/standups/fork&#34;&gt;Fork&lt;/a&gt; our repo and rebuild the app any way you see fit. If you want to start with Apple’s code rather than ours, you can &lt;a href=&#34;https://docs-assets.developer.apple.com/published/1ea2eec121b90031e354288912a76357/TranscribingSpeechToText.zip&#34;&gt;download it here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Update the Readme.md to describe your choices in rebuilding the app (see &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/standups/main/#modern-swiftui&#34;&gt;below&lt;/a&gt; for ours).&lt;/li&gt; &#xA; &lt;li&gt;Open a PR to this repo where you add a link to your port in this readme.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We will collect links to the other ports so that there can be a single place to reference many different approaches for building the same application.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The inspiration for this application comes Apple&#39;s &lt;a href=&#34;https://developer.apple.com/tutorials/app-dev-training/getting-started-with-scrumdinger&#34;&gt;Scrumdinger&lt;/a&gt; tutorial:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This module guides you through the development of Scrumdinger, an iOS app that helps users manage their daily scrums. To help keep scrums short and focused, Scrumdinger uses visual and audio cues to indicate when and how long each attendee should speak. The app also displays a progress screen that shows the time remaining in the meeting and creates a transcript that users can refer to later.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The Scrumdinger app is one of Apple&#39;s most interesting code samples as it deals with many real world world problems that one faces in application development. It shows off many types of navigation, it deals with complex effects such as timers and speech recognition, and it persists application data to disk.&lt;/p&gt; &#xA;&lt;p&gt;However, it is not necessarily built in the most ideal way. It uses mostly fire-and-forget style navigation, which means you can&#39;t easily deep link into any screen of the app, which is handy for push notifications and opening URLs. It also uses uncontrolled dependencies, including file system access, timers and a speech recognizer, which makes it nearly impossible to write automated tests and even hinders the ability to preview the app in Xcode previews.&lt;/p&gt; &#xA;&lt;p&gt;But, the simplicity of Apple&#39;s Scrumdinger codebase is not a defect. In fact, it&#39;s a feature! Apple&#39;s sample code is viewed by hundreds of thousands of developers across the world, and so its goal is to be as approachable as possible in order to teach the basics of SwiftUI. But, that doesn&#39;t mean there isn&#39;t room for improvement.&lt;/p&gt; &#xA;&lt;h2&gt;Modern SwiftUI&lt;/h2&gt; &#xA;&lt;p&gt;Our Standups application is a rebuild of Apple&#39;s Scrumdinger application, but with a focus on modern, best practices for SwiftUI development. We faithfully recreate the Scrumdinger, but with some key additions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Identifiers are made type safe using our &lt;a href=&#34;http://github.com/pointfreeco/swift-tagged&#34;&gt;Tagged library&lt;/a&gt;. This prevents us from writing non-sensical code, such as comparing a &lt;code&gt;Standup.ID&lt;/code&gt; to a &lt;code&gt;Attendee.ID&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Instead of using bare arrays in feature logic we use an &#34;identified&#34; array from our &lt;a href=&#34;http://github.com/pointfreeco/swift-identified-collections&#34;&gt;IdentifiedCollections&lt;/a&gt; library. This allows you to read and modify elements of the collection via their ID rather than positional index, which can be error prone and lead to bugs or crashes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;All&lt;/em&gt; navigation is driven off of state, including sheets, drill-downs and alerts. This makes it possible to deep link into any screen of the app by just constructing a piece of state and handing it off to SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;Further, each view represents its navigation destinations as a single enum, which gives us compile time proof that two destinations cannot be active at the same time. This cannot be accomplished with default SwiftUI tools, but can be done with our &lt;a href=&#34;http://github.com/pointfreeco/swiftui-navigation&#34;&gt;SwiftUINavigation library&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;All side effects are controlled. This includes access to the file system for persistence, access to time-based asynchrony for timers, access to speech recognition APIs, and even the creation of dates and UUIDs. This allows us to run our application in specific execution contexts, which is very useful in tests and Xcode previews. We accomplish this using our &lt;a href=&#34;http://github.com/pointfreeco/swift-dependencies&#34;&gt;Dependencies&lt;/a&gt; library.&lt;/li&gt; &#xA; &lt;li&gt;The project includes a full test suite. Since all of navigation is driven off of state, and because we controlled all dependencies, we can write very comprehensive and nuanced tests. For example, we can write a unit test that proves that when a standup meeting&#39;s timer runs out the screen pops off the stack and a new transcript is added to the standup. Such a test would be very difficult, if not impossible, without controlling dependencies.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Ports&lt;/h2&gt; &#xA;&lt;p&gt;Here is a list of ports of the app:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nashysolutions/standups&#34;&gt;https://github.com/nashysolutions/standups&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>