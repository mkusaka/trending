<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-12T01:36:59Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SailyTeam/Saily</title>
    <updated>2022-12-12T01:36:59Z</updated>
    <id>tag:github.com,2022-12-12:/SailyTeam/Saily</id>
    <link href="https://github.com/SailyTeam/Saily" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern. Fast. Beautiful.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Saily&lt;/h1&gt; &#xA;&lt;h2&gt;Modern. Fast. Beautiful.&lt;/h2&gt; &#xA;&lt;p&gt;Release Channel Repo: &lt;a href=&#34;https://sailyteam.github.io/repo/&#34;&gt;https://sailyteam.github.io/repo/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You are in root branch, for rootless support, check out other branch.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SailyTeam/Saily/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/SailyTeam/Saily/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SailyTeam/Saily/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crwd.in/saily&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/saily/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SailyTeam/Saily/main-2.0/Resources/main.jpeg&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Description: Saily is a modern APT package manager for jailbroken devices running iOS/iPadOS 13 and up.&lt;/p&gt; &#xA;&lt;h2&gt;Saily Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; i18n help wanted &lt;a href=&#34;https://crwd.in/saily&#34;&gt;https://crwd.in/saily&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Unique UI for &lt;strong&gt;BOTH&lt;/strong&gt; iPhone and iPad&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Import all your repos from Cydia, Sileo, Zebra, and Installer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add and manage repositories without limitation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built to work alongside all of your other package managers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for Web Depiction with dark mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for Native Depictions with dark mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for all jailbreaks (excluding rootlessJB)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for paid packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make everything clear with Version Control page listing all available versions and repos&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Clean and stable packaging using CI machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Random device info for free packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fully open-sourced under MIT Licence&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Quick actions (eg respring, uicache) via Setting page&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;In case you&#39;re looking for updates, we have an &lt;a href=&#34;https://twitter.com/TrySaily&#34;&gt;official Twitter page&lt;/a&gt; which is updated regularly with teasers of upcoming features and more. Do not try to contact this account as it is not meant to respond to any messages or replies. If you need support regarding Saily, refer to the &#34;Support&#34; Section of this article.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;In case you need support regarding Saily or anything associated with it, contact &lt;a href=&#34;https://twitter.com/SailySupport&#34;&gt;Saily Support&lt;/a&gt; on Twitter or tag us in your tweet and we will do our best to help you with your issue.&lt;/p&gt; &#xA;&lt;h2&gt;Bug Reports, Feature Requests, &amp;amp; Feedback&lt;/h2&gt; &#xA;&lt;p&gt;If you are experiencing any issues regarding Saily, and would like to file a bug report, make a feature request, or provide any other feedback to be reviewed by our team, please do so using the &lt;a href=&#34;https://github.com/SailyTeam/Saily/issues&#34;&gt;Saily Bug Tracker&lt;/a&gt;. Do not contact individual people personally because that will not work. Please be sure to check if the issue you&#39;re experiencing has already been reported. Duplicated issues will be closed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bugsnag.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SailyTeam/Saily/main-2.0/Resources/bugsnag.png&#34; alt=&#34;&#34; width=&#34;100&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We are using &lt;a href=&#34;https://www.bugsnag.com/&#34;&gt;bugsnag&lt;/a&gt; for bug/crash tracking in application. &lt;a href=&#34;https://docs.bugsnag.com/platforms/ios/appstore-privacy/&#34;&gt;Privacy Licenses&lt;/a&gt; are additionally applied there, TL;DR, the diagnostic data is anonymous and will not be able to trace you back.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if your issue is related to a crash or similar cases, there are some recommended info for you to include in the issue report.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your Bugsnag ID, in the Setting page or application log, will provide us a backtrace with code level diagnostic data. It does not contain any privacy related information.&lt;/li&gt; &#xA; &lt;li&gt;The application log, generally located at &lt;code&gt;/var/mobile/Documents/wiki.qaq.chromatic/Journal/&lt;/code&gt;, will be helpful for tracking the issue. It is a plain text document and may include sensitive privacy related info (eg: searched text, repo urls ...), so check it before upload.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&#34;Your next bug is not a bug, it&#39;s a feature.&#34; - Apple Inc.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to the project, make a pull request with your changes and it will be reviewed by our team. Do not contact individual people personally in order to get your changes through because that will not work. With pull request, we may squash or rebase your changes to one commit.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling Project&lt;/h2&gt; &#xA;&lt;p&gt;For debugging with Xcode, there is nothing to setup for, just open the workspace and click run. Certifications and bundle identity are required to be changed in purpose of real device debugging. Debugging build will not include license info which is scanned and generated while compiling for release build.&lt;/p&gt; &#xA;&lt;p&gt;For releasing/jailbroken compile, exeucte command line inside resources folder. Make sure to install dpkg, for building the package, and python3 for license scanning, xcpretty for a better output format. swiftlint and bartycrouch are optional.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;We would like to thank and akgnowledge everyone who has contibuted to this project. Your contibutions have brought us a long way and we wouldn&#39;t be here without you. Some of the contributors may not be listed in the git history, but still played a part in Saily&#39;s development. For a detailed license containing all for framework packages, open the app then you can find it in the app&#39;s setting page. This product includes software developed by the Sileo Team.&lt;/p&gt; &#xA;&lt;h4&gt;Project Leader:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Lakr233&#34;&gt;@Lakr233&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Marketing Director:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/BreckenLusk&#34;&gt;@BreckenLusk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Code Level Contributors:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Lakr233&#34;&gt;@Lakr233&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Sou1gh0st&#34;&gt;@Sou1ghost&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/jkpang2&#34;&gt;@jkpang2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mx_yolande&#34;&gt;@mx_yolande&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/u0x01&#34;&gt;@u0x01&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/BreckenLusk&#34;&gt;@BreckenLusk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Translators:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/BreckenLusk&#34;&gt;@BreckenLusk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Litteeen&#34;&gt;@Litteeen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/fahlnbg&#34;&gt;@fahlnbg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/lamtaodotstore&#34;&gt;@lamtaodotstore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Amachik2&#34;&gt;@Amachik&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Minazuki_dev&#34;&gt;@Minazuki_dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/powen00hsiao&#34;&gt;@powen00hsiao&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/t0mi292&#34;&gt;@t0mi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Official Twitter Accounts:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/TrySaily&#34;&gt;Main - @TrySaily&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/SailySupport&#34;&gt;Support - @SailySupport&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&#34;While the world sleeps, we dream.&#34;&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Copyright © 2020 Saily Team. All Rights Reserved.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>airbnb/HorizonCalendar</title>
    <updated>2022-12-12T01:36:59Z</updated>
    <id>tag:github.com,2022-12-12:/airbnb/HorizonCalendar</id>
    <link href="https://github.com/airbnb/HorizonCalendar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A declarative, performant, iOS calendar UI component that supports use cases ranging from simple date pickers all the way up to fully-featured calendar apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HorizonCalendar&lt;/h1&gt; &#xA;&lt;p&gt;A declarative, performant, calendar UI component that supports use cases ranging from simple date pickers all the way up to fully-featured calendar apps.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/HorizonCalendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/HorizonCalendar.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/HorizonCalendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/HorizonCalendar.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/HorizonCalendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/HorizonCalendar.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/airbnb/HorizonCalendar/workflows/Swift/badge.svg?sanitize=true&#34; alt=&#34;Swift&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;HorizonCalendar&lt;/code&gt; is an interactive calendar component for iOS (compatible with UIKit and SwiftUI). Its declarative API makes updating the calendar straightforward, while also providing many customization points to support a diverse set of designs and use cases.&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports all calendars from &lt;code&gt;Foundation.Calendar&lt;/code&gt; (Gregorian, Japanese, Hebrew, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Display months in a vertically-scrolling or horizontally-scrolling layout&lt;/li&gt; &#xA; &lt;li&gt;Declarative API that enables unidirectional data flow for updating the content of the calendar&lt;/li&gt; &#xA; &lt;li&gt;A custom layout system that enables virtually infinite date ranges without increasing memory usage&lt;/li&gt; &#xA; &lt;li&gt;Pagination for horizontally-scrolling calendars&lt;/li&gt; &#xA; &lt;li&gt;Specify custom views (&lt;code&gt;UIView&lt;/code&gt; or SwiftUI &lt;code&gt;View&lt;/code&gt;) for individual days, month headers, and days of the week&lt;/li&gt; &#xA; &lt;li&gt;Specify custom views (&lt;code&gt;UIView&lt;/code&gt; or SwiftUI &lt;code&gt;View&lt;/code&gt;) to highlight date ranges&lt;/li&gt; &#xA; &lt;li&gt;Specify custom views (&lt;code&gt;UIView&lt;/code&gt; or SwiftUI &lt;code&gt;View&lt;/code&gt;) to overlay parts of the calendar, enabling features like tooltips&lt;/li&gt; &#xA; &lt;li&gt;A day selection handler to monitor when a day is tapped&lt;/li&gt; &#xA; &lt;li&gt;Customizable layout metrics&lt;/li&gt; &#xA; &lt;li&gt;Pin the days-of-the-week row to the top&lt;/li&gt; &#xA; &lt;li&gt;Show partial boundary months (exactly 2020-03-14 to 2020-04-20, for example)&lt;/li&gt; &#xA; &lt;li&gt;Scroll to arbitrary dates and months, with or without animation&lt;/li&gt; &#xA; &lt;li&gt;Robust accessibility support&lt;/li&gt; &#xA; &lt;li&gt;Inset the content without affecting the scrollable region using layout margins&lt;/li&gt; &#xA; &lt;li&gt;Separator below the days-of-the-week row&lt;/li&gt; &#xA; &lt;li&gt;Right-to-left layout support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;HorizonCalendar&lt;/code&gt; serves as the foundation for the date pickers and calendars used in Airbnb&#39;s highest trafficked flows.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Search&lt;/th&gt; &#xA;   &lt;th&gt;Stays Availability Calendar&lt;/th&gt; &#xA;   &lt;th&gt;Wish List&lt;/th&gt; &#xA;   &lt;th&gt;Experience Reservation&lt;/th&gt; &#xA;   &lt;th&gt;Experience Host Calendar Management&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/stay_search.png&#34; alt=&#34;Search&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/stay_availability.png&#34; alt=&#34;Stay Availability Calendar&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/wish_list.png&#34; alt=&#34;Wish List&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/experience_reservation.png&#34; alt=&#34;Experience Reservation&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/experience_host.png&#34; alt=&#34;Experience Host Calendar Management&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#example-app&#34;&gt;Example App&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#demos&#34;&gt;Demos&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#single-day-selection&#34;&gt;Single Day Selection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#day-range-selection&#34;&gt;Day Range Selection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#selected-day-tooltip&#34;&gt;Selected Day Tooltip&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#scroll-to-day-with-animation&#34;&gt;Scroll to Day with Animation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#integration-tutorial&#34;&gt;Integration Tutorial&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#building-a-calendarView&#34;&gt;Building a &lt;code&gt;CalendarView&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#basic-setup&#34;&gt;Basic Setup&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#importing-horizoncalendar&#34;&gt;Importing &lt;code&gt;HorizonCalendar&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#initializing-a-calendarview-with-calendarviewcontent&#34;&gt;Initializing a &lt;code&gt;CalendarView&lt;/code&gt; with &lt;code&gt;CalendarViewContent&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#customizing-calendarview&#34;&gt;Customizing &lt;code&gt;CalendarView&lt;/code&gt;&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#providing-a-custom-view-for-each-day&#34;&gt;Providing a custom view for each day&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#adjusting-layout-metrics&#34;&gt;Adjusting layout metrics&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#adding-a-day-range-indicator&#34;&gt;Adding a day range indicator&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#adding-a-tooltip&#34;&gt;Adding a tooltip&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#responding-to-day-selection&#34;&gt;Responding to day selection&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#technical-details&#34;&gt;Technical Details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#contributions&#34;&gt;Contributions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#authors&#34;&gt;Authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example App&lt;/h2&gt; &#xA;&lt;p&gt;An example app is available to showcase and enable you to test some of &lt;code&gt;HorizonCalendar&lt;/code&gt;&#39;s features. It can be found in &lt;code&gt;./Example/HorizonCalendarExample.xcworkspace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: Make sure to use the &lt;code&gt;.xcworkspace&lt;/code&gt; file, and not the &lt;code&gt;.xcodeproj&lt;/code&gt; file, as the latter does not have access to &lt;code&gt;HorizonCalendar.framework&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Demos&lt;/h3&gt; &#xA;&lt;p&gt;The example app has several demo view controllers to try, with both vertical and horizontal layout variations:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/demo_picker.png&#34; alt=&#34;Demo Picker&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Single Day Selection&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Vertical&lt;/th&gt; &#xA;   &lt;th&gt;Horizontal&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/single_day_selection_vertical.png&#34; alt=&#34;Single Day Selection Vertical&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/single_day_selection_horizontal.png&#34; alt=&#34;Single Day Selection Horizontal&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Day Range Selection&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Vertical&lt;/th&gt; &#xA;   &lt;th&gt;Horizontal&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/day_range_selection_vertical.png&#34; alt=&#34;Day Range Selection Vertical&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/day_range_selection_horizontal.png&#34; alt=&#34;Day Range Selection Horizontal&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Selected Day Tooltip&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Vertical&lt;/th&gt; &#xA;   &lt;th&gt;Horizontal&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/selected_day_tooltip_vertical.png&#34; alt=&#34;Selected Day Tooltip Vertical&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/selected_day_tooltip_horizontal.png&#34; alt=&#34;Selected Day Tooltip Horizontal&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Scroll to Day with Animation&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Vertical&lt;/th&gt; &#xA;   &lt;th&gt;Horizontal&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/scroll_to_day_with_animation_vertical.gif&#34; alt=&#34;Scroll to Day with Animation Vertical&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/scroll_to_day_with_animation_horizontal.gif&#34; alt=&#34;Scroll to Day with Animation Horizontal&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Integration Tutorial&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deployment target iOS 11.0+&lt;/li&gt; &#xA; &lt;li&gt;Swift 5+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.2+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;To install &lt;code&gt;HorizonCalendar&lt;/code&gt; using &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;, add &lt;code&gt;.package(name: &#34;HorizonCalendar&#34;, url: &#34;https://github.com/airbnb/HorizonCalendar.git&#34;, from: &#34;1.0.0&#34;),&#34;&lt;/code&gt; to your Package.swift, then follow the integration tutorial &lt;a href=&#34;https://swift.org/package-manager#importing-dependencies&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;To install &lt;code&gt;HorizonCalendar&lt;/code&gt; using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, add &lt;code&gt;github &#34;airbnb/HorizonCalendar&#34;&lt;/code&gt; to your Cartfile, then follow the integration tutorial &lt;a href=&#34;https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;To install &lt;code&gt;HorizonCalendar&lt;/code&gt; using &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, add &lt;code&gt;pod &#39;HorizonCalendar&#39;&lt;/code&gt; to your Podfile, then follow the integration tutorial &lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building a &lt;code&gt;CalendarView&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;ve installed &lt;code&gt;HorizonCalendar&lt;/code&gt; into your project, getting a basic calendar working is just a few steps.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Setup&lt;/h3&gt; &#xA;&lt;h4&gt;Importing &lt;code&gt;HorizonCalendar&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;At the top of the file where you&#39;d like to use &lt;code&gt;HorizonCalendar&lt;/code&gt; (likely a &lt;code&gt;UIView&lt;/code&gt; or &lt;code&gt;UIViewController&lt;/code&gt; subclass), import &lt;code&gt;HorizonCalendar&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import HorizonCalendar &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Initializing a &lt;code&gt;CalendarView&lt;/code&gt; with &lt;code&gt;CalendarViewContent&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;CalendarView&lt;/code&gt; is the &lt;code&gt;UIView&lt;/code&gt; subclass that renders the calendar. All visual aspects of &lt;code&gt;CalendarView&lt;/code&gt; are controlled through a single type - &lt;code&gt;CalendarViewContent&lt;/code&gt;. To create a basic &lt;code&gt;CalendarView&lt;/code&gt;, you initialize one with an initial &lt;code&gt;CalendarViewContent&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let calendarView = CalendarView(initialContent: makeContent())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;private func makeContent() -&amp;gt; CalendarViewContent {&#xA;  let calendar = Calendar.current&#xA;&#xA;  let startDate = calendar.date(from: DateComponents(year: 2020, month: 01, day: 01))!&#xA;  let endDate = calendar.date(from: DateComponents(year: 2021, month: 12, day: 31))!&#xA;&#xA;  return CalendarViewContent(&#xA;    calendar: calendar,&#xA;    visibleDateRange: startDate...endDate,&#xA;    monthsLayout: .vertical(options: VerticalMonthsLayoutOptions()))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At a minimum, &lt;code&gt;CalendarViewContent&lt;/code&gt; must be initialized with a &lt;code&gt;Calendar&lt;/code&gt;, a visible date range, and a months layout (either vertical or horizontal). The visible date range will be interpreted as a range of days using the &lt;code&gt;Calendar&lt;/code&gt; instance passed in for the &lt;code&gt;calendar&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;For this example, we&#39;re using a Gregorian calendar, a date range of 2020-01-01 to 2021-12-31, and a vertical months layout.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to add &lt;code&gt;calendarView&lt;/code&gt; as a subview, then give it a valid frame either using Auto Layout or by manually setting its &lt;code&gt;frame&lt;/code&gt; property. If you&#39;re using Auto Layout, note that &lt;code&gt;CalendarView&lt;/code&gt; does not have an intrinsic content size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.addSubview(calendarView)&#xA;&#xA;calendarView.translatesAutoresizingMaskIntoConstraints = false&#xA;&#xA;NSLayoutConstraint.activate([&#xA;  calendarView.leadingAnchor.constraint(equalTo: view.layoutMarginsGuide.leadingAnchor),&#xA;  calendarView.trailingAnchor.constraint(equalTo: view.layoutMarginsGuide.trailingAnchor),&#xA;  calendarView.topAnchor.constraint(equalTo: view.layoutMarginsGuide.topAnchor),&#xA;  calendarView.bottomAnchor.constraint(equalTo: view.layoutMarginsGuide.bottomAnchor),&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, building and running your app should result in something that looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/tutorial1.png&#34; alt=&#34;Basic Calendar&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Customizing &lt;code&gt;CalendarView&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Providing a custom view for each day&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;HorizonCalendar&lt;/code&gt; comes with default views for month headers, day of week items, and day items. You can also provide custom views for each of these item types, enabling you to display whatever custom content makes sense for your app.&lt;/p&gt; &#xA;&lt;p&gt;Since all visual aspects of &lt;code&gt;CalendarView&lt;/code&gt; are configured through &lt;code&gt;CalendarViewContent&lt;/code&gt;, we&#39;ll expand on our &lt;code&gt;makeContent&lt;/code&gt; function. Let&#39;s start by providing a custom view for each day in the calendar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;private func makeContent() -&amp;gt; CalendarViewContent {&#xA;  return CalendarViewContent(&#xA;    calendar: calendar,&#xA;    visibleDateRange: today...endDate,&#xA;    monthsLayout: .vertical(VerticalMonthsLayoutOptions()))&#xA;    &#xA;    .dayItemProvider { day in&#xA;      // Return a `CalendarItemModel` representing the view for each day&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;dayItemProvider(_:)&lt;/code&gt; function on &lt;code&gt;CalendarViewContent&lt;/code&gt; returns a new &lt;code&gt;CalendarViewContent&lt;/code&gt; instance with the custom day item model provider configured. This function takes a single parameter - a provider closure that returns a &lt;code&gt;CalendarItemModel&lt;/code&gt; for a given &lt;code&gt;Day&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CalendarItemModel&lt;/code&gt; is a type that abstracts away the creation and configuration of a view displayed in the calendar. It&#39;s generic over a &lt;code&gt;ViewRepresentable&lt;/code&gt; type, which can be any type conforming to &lt;code&gt;CalendarItemViewRepresentable&lt;/code&gt;. You can think of &lt;code&gt;CalendarItemViewRepresentable&lt;/code&gt; as a blueprint for creating and updating instances of a particular type of view to be displayed in the calendar. For example, if we want to use a &lt;code&gt;UILabel&lt;/code&gt; for our custom day view, we&#39;ll need to create a type that knows how to create and update that label. Here&#39;s a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import HorizonCalendar&#xA;&#xA;struct DayLabel: CalendarItemViewRepresentable {&#xA;&#xA;  /// Properties that are set once when we initialize the view.&#xA;  struct InvariantViewProperties: Hashable {&#xA;    let font: UIFont&#xA;    let textColor: UIColor&#xA;    let backgroundColor: UIColor&#xA;  }&#xA;&#xA;  /// Properties that will vary depending on the particular date being displayed.&#xA;  struct ViewModel: Equatable {&#xA;    let day: Day&#xA;  }&#xA;&#xA;  static func makeView(&#xA;    withInvariantViewProperties invariantViewProperties: InvariantViewProperties)&#xA;    -&amp;gt; UILabel&#xA;  {&#xA;    let label = UILabel()&#xA;&#xA;    label.backgroundColor = invariantViewProperties.backgroundColor&#xA;    label.font = invariantViewProperties.font&#xA;    label.textColor = invariantViewProperties.textColor&#xA;&#xA;    label.textAlignment = .center&#xA;    label.clipsToBounds = true&#xA;    label.layer.cornerRadius = 12&#xA;    &#xA;    return label&#xA;  }&#xA;&#xA;  static func setViewModel(_ viewModel: ViewModel, on view: UILabel) {&#xA;    view.text = &#34;\(viewModel.day.day)&#34;&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;CalendarItemViewRepresentable&lt;/code&gt; requires us to implement a &lt;code&gt;static&lt;/code&gt; &lt;code&gt;makeView&lt;/code&gt; function, which should create and return a view given a set of invariant view properties. We want our label to have a configurable font and text color, so we&#39;ve made those configurable via the &lt;code&gt;InvariantViewProperties&lt;/code&gt; type. In our &lt;code&gt;makeView&lt;/code&gt; function, we use those invariant view properties to create and configure an instance of our label.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CalendarItemViewRepresentable&lt;/code&gt; also requires us to implement a &lt;code&gt;static&lt;/code&gt; &lt;code&gt;setViewModel&lt;/code&gt; function, which should update all data-dependent properties (like the day text) on the provided view.&lt;/p&gt; &#xA;&lt;p&gt;Now that we have a type conforming to &lt;code&gt;CalendarItemViewRepresentable&lt;/code&gt;, we can use it to create a &lt;code&gt;CalendarItemModel&lt;/code&gt; to return from the day item model provider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  return CalendarViewContent(...)&#xA;&#xA;    .dayItemProvider { day in&#xA;      DayLabel.calendarItemModel(&#xA;        invariantViewProperties: .init(&#xA;          font: UIFont.systemFont(ofSize: 18), &#xA;          textColor: .darkGray,&#xA;          backgroundColor: .clear),&#xA;        viewModel: .init(day: day))&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using a SwiftUI view is even easier - simply initialize your SwiftUI view and call &lt;code&gt;.calendarItemModel&lt;/code&gt; on it. There&#39;s no need to create a custom type conforming to &lt;code&gt;CalendarItemViewRepresentable&lt;/code&gt; like we had to do with the UIKit example above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  return CalendarViewContent(...)&#xA;&#xA;    .dayItemProvider { day in&#xA;      Text(&#34;\(day.day)&#34;)&#xA;        .font(.system(size: 18))&#xA;        .foregroundColor(Color(UIColor.darkGray))&#xA;        .calendarItemModel&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar item model provider functions are available to customize the views used for month headers, day-of-the-week items, and more.&lt;/p&gt; &#xA;&lt;p&gt;If you build and run your app, it should now look like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/tutorial2.png&#34; alt=&#34;Custom Day Views&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Adjusting layout metrics&lt;/h4&gt; &#xA;&lt;p&gt;We can also use &lt;code&gt;CalendarViewContent&lt;/code&gt; to adjust layout metrics. We can improve the layout of our current &lt;code&gt;CalendarView&lt;/code&gt; by adding some additional spacing between individual days and months:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  return CalendarViewContent(...)&#xA;    .dayItemProvider { ... }&#xA;&#xA;    .interMonthSpacing(24)&#xA;    .verticalDayMargin(8)&#xA;    .horizontalDayMargin(8)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like when we configured a custom day view via the day item provider, changes to layout metrics are also done through &lt;code&gt;CalendarViewContent&lt;/code&gt;. &lt;code&gt;interMonthSpacing(_:)&lt;/code&gt;, &lt;code&gt;verticalDayMargin(_:)&lt;/code&gt;, and &lt;code&gt;horizontalDayMargin(_:)&lt;/code&gt; each return a mutated &lt;code&gt;CalendarViewContent&lt;/code&gt; with the corresponding layout metric value updated, enabling you to chain function calls together to produce a final content instance.&lt;/p&gt; &#xA;&lt;p&gt;After building and running your app, you should see a much less cramped layout:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/tutorial3.png&#34; alt=&#34;Custom Layout Metrics&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Adding a day range indicator&lt;/h4&gt; &#xA;&lt;p&gt;Day range indicators are useful for date pickers that need to highlight not just individual days, but ranges of days. &lt;code&gt;HorizonCalendar&lt;/code&gt; offers an API to do exactly this via the &lt;code&gt;CalendarViewContent&lt;/code&gt; function &lt;code&gt;dayRangeItemProvider(for:_:)&lt;/code&gt;. Similar to what we did for our custom day item model provider, for day ranges, we need to provide a &lt;code&gt;CalendarItemModel&lt;/code&gt; for each day range we want to highlight.&lt;/p&gt; &#xA;&lt;p&gt;First, we need to create a &lt;code&gt;ClosedRange&amp;lt;Date&amp;gt;&lt;/code&gt; that represents the day range for which we&#39;d like to provide a &lt;code&gt;CalendarItemModel&lt;/code&gt;. The &lt;code&gt;Date&lt;/code&gt;s in our range will be interpreted as &lt;code&gt;Day&lt;/code&gt;s using the &lt;code&gt;Calendar&lt;/code&gt; instance with which we initialized our &lt;code&gt;CalendarViewContent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  let lowerDate = calendar.date(from: DateComponents(year: 2020, month: 01, day: 20))!&#xA;  let upperDate = calendar.date(from: DateComponents(year: 2020, month: 02, day: 07))!&#xA;  let dateRangeToHighlight = lowerDate...upperDate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we need to invoke the &lt;code&gt;dayRangeItemProvider(for:_:)&lt;/code&gt; on our &lt;code&gt;CalendarViewContent&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  return CalendarViewContent(...)&#xA;    ...&#xA;    &#xA;    .dayRangeItemProvider(for: [dateRangeToHighlight]) { dayRangeLayoutContext in &#xA;      // Return a `CalendarItemModel` representing the view that highlights the entire day range&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For each day range derived from the &lt;code&gt;Set&amp;lt;ClosedRange&amp;lt;Date&amp;gt;&amp;gt;&lt;/code&gt; passed into this function, our day range item model provider closure will be invoked with a context instance that contains all of the information needed for us to render a view to be used to highlight a particular day range. Here is an example implementation of such a view:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit&#xA;&#xA;final class DayRangeIndicatorView: UIView {&#xA;&#xA;  private let indicatorColor: UIColor&#xA;&#xA;  init(indicatorColor: UIColor) {&#xA;    self.indicatorColor = indicatorColor&#xA;    super.init(frame: frame)&#xA;    backgroundColor = .clear&#xA;  }&#xA;&#xA;  required init?(coder: NSCoder) { fatalError(&#34;init(coder:) has not been implemented&#34;) }&#xA;&#xA;  var framesOfDaysToHighlight = [CGRect]() {&#xA;    didSet {&#xA;      guard framesOfDaysToHighlight != oldValue else { return }&#xA;      setNeedsDisplay()&#xA;    }&#xA;  }&#xA;&#xA;  override func draw(_ rect: CGRect) {&#xA;    let context = UIGraphicsGetCurrentContext()&#xA;    context?.setFillColor(indicatorColor.cgColor)&#xA;&#xA;    // Get frames of day rows in the range&#xA;    var dayRowFrames = [CGRect]()&#xA;    var currentDayRowMinY: CGFloat?&#xA;    for dayFrame in framesOfDaysToHighlight {&#xA;      if dayFrame.minY != currentDayRowMinY {&#xA;        currentDayRowMinY = dayFrame.minY&#xA;        dayRowFrames.append(dayFrame)&#xA;      } else {&#xA;        let lastIndex = dayRowFrames.count - 1&#xA;        dayRowFrames[lastIndex] = dayRowFrames[lastIndex].union(dayFrame)&#xA;      }&#xA;    }&#xA;&#xA;    // Draw rounded rectangles for each day row&#xA;    for dayRowFrame in dayRowFrames {&#xA;      let roundedRectanglePath = UIBezierPath(roundedRect: dayRowFrame, cornerRadius: 12)&#xA;      context?.addPath(roundedRectanglePath.cgPath)&#xA;      context?.fillPath()&#xA;    }&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we need a type that conforms to &lt;code&gt;CalendarItemViewRepresentable&lt;/code&gt; that knows how to create and update instances of &lt;code&gt;DayRangeIndicatorView&lt;/code&gt;. To make things easy, we can just make our view conform to this protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import HorizonCalendar&#xA;&#xA;extension DayRangeIndicatorView: CalendarItemViewRepresentable {&#xA;&#xA;  struct InvariantViewProperties: Hashable {&#xA;    let indicatorColor = UIColor.blue.withAlphaComponent(0.15)&#xA;  }&#xA;&#xA;  struct ViewModel: Equatable {&#xA;    let framesOfDaysToHighlight: [CGRect]&#xA;  }&#xA;&#xA;  static func makeView(&#xA;    withInvariantViewProperties invariantViewProperties: InvariantViewProperties)&#xA;    -&amp;gt; DayRangeIndicatorView&#xA;  {&#xA;    DayRangeIndicatorView(indicatorColor: invariantViewProperties.indicatorColor)&#xA;  }&#xA;&#xA;  static func setViewModel(_ viewModel: ViewModel, on view: DayRangeIndicatorView) {&#xA;    view.framesOfDaysToHighlight = viewModel.framesOfDaysToHighlight&#xA;  }&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Last, we need to return a &lt;code&gt;CalendarItemModel&lt;/code&gt; representing our &lt;code&gt;DayRangeIndicatorView&lt;/code&gt; from the day range item model provider closure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  return CalendarViewContent(...)&#xA;    ...&#xA;    &#xA;    .dayRangeItemProvider(for: [dateRangeToHighlight]) { dayRangeLayoutContext in&#xA;      DayRangeIndicatorView.calendarItemModel(&#xA;        invariantViewProperties: .init(indicatorColor: UIColor.blue.withAlphaComponent(0.15)),&#xA;        viewModel: .init(framesOfDaysToHighlight: dayRangeLayoutContext.daysAndFrames.map { $0.frame }))&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you build and run the app, you should see a day range indicator view that highlights 2020-01-20 to 2020-02-07:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/tutorial4.png&#34; alt=&#34;Day Range Indicator&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Adding a tooltip&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;HorizonCalendar&lt;/code&gt; provides an API to overlay parts of the calendar with custom views. One use case that this enables is adding tooltips to certain days - a feature that&#39;s used in the Airbnb app to inform users when their checkout date must be a certain number of days in the future from their check-in date.&lt;/p&gt; &#xA;&lt;p&gt;First, we need to decide on the locations of the items that we&#39;d like to overlay with our own custom view. We can overlay a &lt;code&gt;day&lt;/code&gt; or a &lt;code&gt;monthHeader&lt;/code&gt; - the two cases available on &lt;code&gt;CalendarViewContent.OverlaidItemLocation&lt;/code&gt;. Let&#39;s overlay the day at 2020-01-15:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  let dateToOverlay = calendar.date(from: DateComponents(year: 2020, month: 01, day: 15))!&#xA;  let overlaidItemLocation: CalendarViewContent.OverlaidItemLocation = .day(containingDate: dateToOverlay) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like all other customizations, we&#39;ll add an overlay by calling a function on our &lt;code&gt;CalendarViewContent&lt;/code&gt; instance that configures an overlay item model provider closure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  return CalendarViewContent(...)&#xA;    ...&#xA;    &#xA;    .overlayItemProvider(for: [overlaidItemLocation]) { overlayLayoutContext in&#xA;      // Return a `CalendarItemModel` representing the view to use as an overlay for the overlaid item location&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For each overlaid item location in the &lt;code&gt;Set&amp;lt;CalendarViewContent.OverlaidItemLocation&amp;gt;&lt;/code&gt; passed into this function, our overlay item model provider closure will be invoked with a context instance that contains all of the information needed for us to render a view to be used as an overlay for a particular overlaid item location. Here is an example implementation of a tooltip overlay view:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit&#xA;&#xA;final class TooltipView: UIView {&#xA;&#xA;  init(backgroundColor: UIColor, borderColor: UIColor, font: UIFont, textColor: UIColor) {&#xA;    super.init(frame: .zero)&#xA;&#xA;    backgroundView.backgroundColor = backgroundColor&#xA;    backgroundView.layer.borderColor = borderColor&#xA;    addSubview(backgroundView)&#xA;&#xA;    label.font = font&#xA;    label.textColor = textColor&#xA;    addSubview(label)&#xA;  }&#xA;&#xA;  required init?(coder: NSCoder) { fatalError(&#34;init(coder:) has not been implemented&#34;) }&#xA;  &#xA;  var text: String {&#xA;    get { label.text ?? &#34;&#34; }&#xA;    set { label.text = newValue }&#xA;  }&#xA;&#xA;  var frameOfTooltippedItem: CGRect? {&#xA;    didSet {&#xA;      guard frameOfTooltippedItem != oldValue else { return }&#xA;      setNeedsLayout()&#xA;    }&#xA;  }&#xA;&#xA;  override func layoutSubviews() {&#xA;    super.layoutSubviews()&#xA;&#xA;    guard let frameOfTooltippedItem = frameOfTooltippedItem else { return }&#xA;&#xA;    label.sizeToFit()&#xA;    let labelSize = CGSize(&#xA;      width: min(label.bounds.size.width, bounds.width),&#xA;      height: label.bounds.size.height)&#xA;&#xA;    let backgroundSize = CGSize(width: labelSize.width + 16, height: labelSize.height + 16)&#xA;&#xA;    let proposedFrame = CGRect(&#xA;      x: frameOfTooltippedItem.midX - (backgroundSize.width / 2),&#xA;      y: frameOfTooltippedItem.minY - backgroundSize.height - 4,&#xA;      width: backgroundSize.width,&#xA;      height: backgroundSize.height)&#xA;&#xA;    let frame: CGRect&#xA;    if proposedFrame.maxX &amp;gt; bounds.width {&#xA;      frame = proposedFrame.applying(.init(translationX: bounds.width - proposedFrame.maxX, y: 0))&#xA;    } else if proposedFrame.minX &amp;lt; 0 {&#xA;      frame = proposedFrame.applying(.init(translationX: -proposedFrame.minX, y: 0))&#xA;    } else {&#xA;      frame = proposedFrame&#xA;    }&#xA;&#xA;    backgroundView.frame = frame&#xA;    label.center = backgroundView.center&#xA;  }&#xA;&#xA;  // MARK: Private&#xA;&#xA;  private lazy var backgroundView: UIView = {&#xA;    let view = UIView()&#xA;    view.layer.borderWidth = 1&#xA;    view.layer.cornerRadius = 6&#xA;    view.layer.shadowColor = UIColor.black.cgColor&#xA;    view.layer.shadowOpacity = 0.8&#xA;    view.layer.shadowOffset = .zero&#xA;    view.layer.shadowRadius = 8&#xA;    return view&#xA;  }()&#xA;&#xA;  private lazy var label: UILabel = {&#xA;    let label = UILabel()&#xA;    label.textAlignment = .center&#xA;    label.lineBreakMode = .byTruncatingTail&#xA;    return label&#xA;  }()&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we need a type that conforms to &lt;code&gt;CalendarItemViewRepresentable&lt;/code&gt; that knows how to create and update instances of &lt;code&gt;TooltipView&lt;/code&gt;. To make things easy, we can just make our view conform to this protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import HorizonCalendar&#xA;&#xA;extension TooltipView: CalendarItemViewRepresentable {&#xA;&#xA;  struct InvariantViewProperties: Hashable {&#xA;    let backgroundColor: UIColor&#xA;    let borderColor: UIColor&#xA;    let font: UIFont&#xA;    let textColor: UIColor&#xA;  }&#xA;&#xA;  struct ViewModel: Equatable {&#xA;    let frameOfTooltippedItem: CGRect?&#xA;    let text: String&#xA;  }&#xA;&#xA;  static func makeView(&#xA;    withInvariantViewProperties invariantViewProperties: InvariantViewProperties)&#xA;    -&amp;gt; TooltipView&#xA;  {&#xA;  TooltipView(&#xA;    borderColor: invariantViewProperties.borderColor, &#xA;    font: invariantViewProperties.font, &#xA;    textColor: invariantViewProperties.textColor)&#xA;  }&#xA;&#xA;  static func setViewModel(_ viewModel: ViewModel, on view: TooltipView) {&#xA;    view.frameOfTooltippedItem = viewModel.frameOfTooltippedItem&#xA;    view.text = viewModel.text&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Last, we need to return a &lt;code&gt;CalendarItemModel&lt;/code&gt; representing our &lt;code&gt;TooltipView&lt;/code&gt; from the overlay item model provider closure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  return CalendarViewContent(...)&#xA;    ...&#xA;    &#xA;    .overlayItemProvider(for: [overlaidItemLocation]) { overlayLayoutContext in&#xA;      TooltipView.calendarItemModel(&#xA;        invariantViewProperties: .init(&#xA;          backgroundColor: .white, &#xA;          borderColor: .black, &#xA;          font: UIFont.systemFont(ofSize: 16), &#xA;          textColor: .black),&#xA;        viewModel: .init(&#xA;          frameOfTooltippedItem: overlayLayoutContext.overlaidItemFrame, &#xA;          text: &#34;Dr. Martin Luther King Jr.&#39;s Birthday&#34;))&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you build and run the app, you should see a tooltip view hovering above 2020-01-15:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/tutorial5.png&#34; alt=&#34;Tooltip View&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Responding to day selection&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re building a date picker, you&#39;ll most likely need to respond to the user tapping on days in the calendar. To do this, provide a day selection handler closure via &lt;code&gt;CalendarView&lt;/code&gt;&#39;s &lt;code&gt;daySelectionHandler&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;calendarView.daySelectionHandler = { [weak self] day in&#xA;  self?.selectedDay = day&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;private var selectedDay: Day?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The day selection handler closure is invoked whenever a day in the calendar is selected. You&#39;re provided with a &lt;code&gt;Day&lt;/code&gt; instance for the day that was selected. If we want to highlight the selected day once its been tapped, we&#39;ll need to create a new &lt;code&gt;CalendarViewContent&lt;/code&gt; with a day calendar item model that looks different for the selected day:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  let selectedDay = self.selectedDay&#xA;&#xA;  return CalendarViewContent(...)&#xA;&#xA;    .dayItemProvider { day in&#xA;      var invariantViewProperties = DayLabel.InvariantViewProperties(&#xA;        font: UIFont.systemFont(ofSize: 18), &#xA;        textColor: .darkGray,&#xA;        backgroundColor: .clear)&#xA;&#xA;      if day == selectedDay {&#xA;        invariantViewProperties.textColor = .white&#xA;        invariantViewProperties.backgroundColor = .blue&#xA;      }&#xA;      &#xA;      return DayLabel.calendarItemModel(&#xA;        invariantViewProperties: invariantViewProperties,&#xA;        viewModel: .init(day: day))&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Last, we&#39;ll change our day selection handler so that it not only stores the selected day, but also sets an updated content instance on &lt;code&gt;calendarView&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;calendarView.daySelectionHandler = { [weak self] day in&#xA;  guard let self = self else { return }&#xA;  &#xA;  self.selectedDay = day&#xA;  &#xA;  let newContent = self.makeContent()&#xA;  self.calendarView.setContent(newContent)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After building and running the app, tapping days should cause them to turn blue:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/Images/tutorial6.png&#34; alt=&#34;Day Selection&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Technical Details&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to learn about how &lt;code&gt;HorizonCalendar&lt;/code&gt; was implemented, check out the &lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/TECHNICAL_DETAILS.md&#34;&gt;Technical Details&lt;/a&gt; document. It provides an overview of &lt;code&gt;HorizonCalendar&lt;/code&gt;&#39;s architecture, along with information about why it&#39;s not implemented using &lt;code&gt;UICollectionView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;HorizonCalendar&lt;/code&gt; welcomes fixes, improvements, and feature additions. If you&#39;d like to contribute, open a pull request with a detailed description of your changes.&lt;/p&gt; &#xA;&lt;p&gt;As a rule of thumb, if you&#39;re proposing an API-breaking change or a change to existing functionality, consider proposing it by opening an issue, rather than a pull request; we&#39;ll use the issue as a public forum for discussing whether the proposal makes sense or not. See &lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/Docs/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Bryan Keller&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bryankeller&#34;&gt;https://github.com/bryankeller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/BKyourway19&#34;&gt;https://twitter.com/BKyourway19&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;Bryan Keller&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bryankeller&#34;&gt;https://github.com/bryankeller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/BKyourway19&#34;&gt;https://twitter.com/BKyourway19&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bryn Bodayle&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brynbodayle&#34;&gt;https://github.com/brynbodayle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/brynbodayle&#34;&gt;https://twitter.com/brynbodayle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you or your company has found &lt;code&gt;HorizonCalendar&lt;/code&gt; to be useful, let us know!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;HorizonCalendar&lt;/code&gt; is released under the Apache License 2.0. See &lt;a href=&#34;https://raw.githubusercontent.com/airbnb/HorizonCalendar/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>