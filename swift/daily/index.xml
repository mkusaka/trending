<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-13T01:49:15Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pvieito/PythonKit</title>
    <updated>2023-02-13T01:49:15Z</updated>
    <id>tag:github.com,2023-02-13:/pvieito/PythonKit</id>
    <link href="https://github.com/pvieito/PythonKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift framework to interact with Python.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PythonKit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swiftpackageindex.com/pvieito/PythonKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpvieito%2FPythonKit%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pvieito/PythonKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpvieito%2FPythonKit%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swift framework to interact with Python.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Some Python code like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys&#xA;&#xA;print(f&#34;Python {sys.version_info.major}.{sys.version_info.minor}&#34;)&#xA;print(f&#34;Python Version: {sys.version}&#34;)&#xA;print(f&#34;Python Encoding: {sys.getdefaultencoding().upper()}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can be implemented in Swift through PythonKit with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PythonKit&#xA;&#xA;let sys = Python.import(&#34;sys&#34;)&#xA;&#xA;print(&#34;Python \(sys.version_info.major).\(sys.version_info.minor)&#34;)&#xA;print(&#34;Python Version: \(sys.version)&#34;)&#xA;print(&#34;Python Encoding: \(sys.getdefaultencoding().upper())&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add the following dependency to your &lt;code&gt;Package.swift&lt;/code&gt; manifest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/pvieito/PythonKit.git&#34;, .branch(&#34;master&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;As the Python library are loaded at runtime by &lt;strong&gt;PythonKit&lt;/strong&gt;, it will try to find the most modern Python version available in the system. You can force a given version with the &lt;code&gt;PYTHON_VERSION&lt;/code&gt; environment variable or an specific Python library path or name with &lt;code&gt;PYTHON_LIBRARY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ PYTHON_VERSION=3 swift run&#xA;[*] Python 3.5&#xA;$ PYTHON_VERSION=2.7 swift run&#xA;[*] Python 2.7&#xA;$ PYTHON_LIBRARY=libpython3.5.so swift run&#xA;[*] Python 3.5&#xA;$ PYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython2.7.so swift run&#xA;[*] Python 2.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;strong&gt;PythonKit&lt;/strong&gt; cannot find and load the Python library you can set the &lt;code&gt;PYTHON_LOADER_LOGGING&lt;/code&gt; environment variable to know from which locations &lt;strong&gt;PythonKit&lt;/strong&gt; is trying to load the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ PYTHON_LOADER_LOGGING=TRUE PYTHON_VERSION=3.8 swift run&#xA;Loading symbol &#39;Py_Initialize&#39; from the Python library...&#xA;Trying to load library at &#39;Python.framework/Versions/3.8/Python&#39;...&#xA;Trying to load library at &#39;/usr/local/Frameworks/Python.framework/Versions/3.8/Python&#39;...&#xA;Fatal error: Python library not found. Set the PYTHON_LIBRARY environment variable with the path to a Python library.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If your are targeting the Mac platform with the &lt;a href=&#34;https://developer.apple.com/documentation/security/hardened_runtime&#34;&gt;Hardened Runtime&lt;/a&gt; enabled make sure you are properly signing and embedding the Python framework you are trying to load with &lt;strong&gt;PythonKit&lt;/strong&gt;. The Hardened Runtime &lt;a href=&#34;https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_cs_disable-library-validation&#34;&gt;Library Validation mechanism&lt;/a&gt; prevents a process from loading libraries that are not signed by Apple or the same developer as the main process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Originally &lt;strong&gt;PythonKit&lt;/strong&gt; was based on the &lt;code&gt;Python&lt;/code&gt; module from the &lt;a href=&#34;https://github.com/tensorflow/swift&#34;&gt;&lt;strong&gt;Swift for TensorFlow&lt;/strong&gt;&lt;/a&gt; experimental project.&lt;/li&gt; &#xA; &lt;li&gt;If you have questions about &lt;strong&gt;PythonKit&lt;/strong&gt; you can ask on the &lt;a href=&#34;https://forums.swift.org/c/related-projects/&#34;&gt;&lt;strong&gt;Swift Forums&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>altstoreio/AltStore</title>
    <updated>2023-02-13T01:49:15Z</updated>
    <id>tag:github.com,2023-02-13:/altstoreio/AltStore</id>
    <link href="https://github.com/altstoreio/AltStore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AltStore&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.0-orange.svg?sanitize=true&#34; alt=&#34;Swift Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: AGPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AltStore is an iOS application that allows you to sideload other apps (.ipa files) onto your iOS device with just your Apple ID. AltStore resigns apps with your personal development certificate and sends them to a desktop app, AltServer, which installs the resigned apps back to your device using iTunes WiFi sync. To prevent apps from expiring, AltStore will also periodically refresh your apps in the background when on the same WiFi as AltServer.&lt;/p&gt; &#xA;&lt;p&gt;For the initial release, I focused on building a solid foundation for distributing my own apps â€” primarily Delta, &lt;a href=&#34;https://github.com/rileytestut/Delta&#34;&gt;my all-in-one emulator for iOS&lt;/a&gt;. Now that Delta has been released, however, I&#39;m beginning work on adding support for &lt;em&gt;anyone&lt;/em&gt; to list and distribute their apps through AltStore (contributions welcome! ðŸ™‚).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs apps over WiFi using AltServer&lt;/li&gt; &#xA; &lt;li&gt;Resigns and installs any app with your Apple ID&lt;/li&gt; &#xA; &lt;li&gt;Refreshes apps periodically in the background to prevent them from expiring (when on same WiFi as AltServer)&lt;/li&gt; &#xA; &lt;li&gt;Handles app updates directly through AltStore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11&lt;/li&gt; &#xA; &lt;li&gt;iOS 12.2+ (AltStore)&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.14.4+ (AltServer)&lt;/li&gt; &#xA; &lt;li&gt;Swift 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why iOS 12.2+ and macOS 10.14.4+? Doing so allows me to distribute all AltStore apps without embedding Swift libraries inside them. This helps me afford bandwidth costs by reducing download sizes by roughly 30%, but also noticeably improves how long it takes to install/refresh apps with AltStore. If you&#39;re compiling AltStore and/or AltServer yourself, however, you should be able to lower their deployment targets to iOS 12.0 and macOS 10.14.0, respectively, without any issues.&lt;/p&gt; &#xA;&lt;h2&gt;Project Overview&lt;/h2&gt; &#xA;&lt;h3&gt;AltStore&lt;/h3&gt; &#xA;&lt;p&gt;AltStore is a just regular, sandboxed iOS application. The AltStore app target contains the vast majority of AltStore&#39;s functionality, including all the logic for downloading and updating apps through AltStore. AltStore makes heavy use of standard iOS frameworks and technologies most iOS developers are familiar with, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core Data&lt;/li&gt; &#xA; &lt;li&gt;Storyboards/Nibs&lt;/li&gt; &#xA; &lt;li&gt;Auto Layout&lt;/li&gt; &#xA; &lt;li&gt;Background App Refresh&lt;/li&gt; &#xA; &lt;li&gt;Network.framework (new in iOS 12)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;AltServer&lt;/h3&gt; &#xA;&lt;p&gt;AltServer is also just a regular, sandboxed macOS application. AltServer is significantly less complex than AltStore though, and for that reason consists of only a handful of files.&lt;/p&gt; &#xA;&lt;h3&gt;AltKit&lt;/h3&gt; &#xA;&lt;p&gt;AltKit is a shared framework that includes common code between AltStore and AltServer.&lt;/p&gt; &#xA;&lt;h3&gt;AltSign&lt;/h3&gt; &#xA;&lt;p&gt;AltSign is my internal framework used by both AltStore and AltServer to communicate with Apple&#39;s servers and resign apps. For more info, check the &lt;a href=&#34;https://github.com/rileytestut/altsign&#34;&gt;AltSign repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Roxas&lt;/h3&gt; &#xA;&lt;p&gt;Roxas is my internal framework used across all my iOS projects, developed to simplify a variety of common tasks used in iOS development. For more info, check the &lt;a href=&#34;https://github.com/rileytestut/roxas&#34;&gt;Roxas repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation Instructions&lt;/h2&gt; &#xA;&lt;p&gt;AltStore and AltServer are both fairly straightforward to compile and run if you&#39;re already an iOS or macOS developer. To compile AltStore and/or AltServer:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository &lt;pre&gt;&lt;code&gt;git clone https://github.com/rileytestut/AltStore.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update submodules: &lt;pre&gt;&lt;code&gt;cd AltStore &#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;AltStore.xcworkspace&lt;/code&gt; and select the AltStore project in the project navigator. On the &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt; tab, change the team from &lt;code&gt;Yvette Testut&lt;/code&gt; to your own account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTDeviceID&lt;/code&gt; in the Info.plist to your device&#39;s UDID. Normally, AltServer embeds the device&#39;s UDID in AltStore&#39;s Info.plist during installation. When running through Xcode you&#39;ll need to set the value yourself or else AltStore won&#39;t resign (or even install) apps for the proper device.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTServerID&lt;/code&gt; in the Info.plist to your AltServer&#39;s serverID. This is embedded by AltServer during installation to help AltStore distinguish between multiple AltServers on the same network, and you can find this by using a Bonjour browsing application and noting the serverID advertised by AltServer. This isn&#39;t strictly necessary, because if AltStore can&#39;t find the AltServer with the embedded serverID it still falls back to trying another AltServer. However, this will help in cases where there are multiple AltServers running (plus the error messages are more helpful).&lt;/li&gt; &#xA; &lt;li&gt;Build + run app! ðŸŽ‰&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Due to the licensing of some dependencies used by AltStore, I have no choice but to distribute AltStore under the &lt;strong&gt;AGPLv3 license&lt;/strong&gt;. That being said, my goal for AltStore is for it to be an open source project &lt;em&gt;anyone&lt;/em&gt; can use without restrictions, so I explicitly give permission for anyone to use, modify, and distribute all &lt;em&gt;my&lt;/em&gt; original code for this project in any form, with or without attribution, without fear of legal consequences (dependencies remain under their original licenses, however).&lt;/p&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:riley@rileytestut.com&#34;&gt;riley@rileytestut.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/rileytestut&#34;&gt;@rileytestut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Questions about AltStore in general? Make sure to read the FAQ at &lt;a href=&#34;https://altstore.io/faq/&#34;&gt;https://altstore.io/faq/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>matteozappia/DynamicCow</title>
    <updated>2023-02-13T01:49:15Z</updated>
    <id>tag:github.com,2023-02-13:/matteozappia/DynamicCow</id>
    <link href="https://github.com/matteozappia/DynamicCow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enable Dynamic Island on every device that is running iOS 16.0 to 16.1.2 using the MacDirtyCow exploit.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DynamicCow&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/matteozappia/DynamicCow/main/Images/dynamiccowiconpreview.png&#34; width=&#34;100&#34; height=&#34;100&#34;&gt; &#xA;&lt;p&gt;Enable Dynamic Island on every device that is running iOS 16.0 to 16.1.2 using the MacDirtyCow exploit.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matteozappia/DynamicCow/main/Images/IMG_2393.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/matteozappia/DynamicCow/main/Images/IMG_2392.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/matteozappia/DynamicCow/main/Images/IMG_2391.PNG&#34; width=&#34;300&#34; height=&#34;650&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshoot&lt;/h2&gt; &#xA;&lt;p&gt;The app now have a Troubleshoot section to restore the plist file, but if you want you can also use &lt;a href=&#34;https://routinehub.co/shortcut/4920/&#34;&gt;this shortcut&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The shortcut will &#34;reset&#34; the plist file to an initial state solving any kind of problem.&lt;/p&gt; &#xA;&lt;h3&gt;How to use the shortcut&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Simply start it and wait for a drop-down menu to appear.&lt;/li&gt; &#xA; &lt;li&gt;Then click on &#34;View it in Quick View&#34;.&lt;/li&gt; &#xA; &lt;li&gt;You should see some writing, if the file is empty restart the shortcut.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;iOS 15/14/13 are &lt;strong&gt;NOT&lt;/strong&gt; and will never be supported, as this is &lt;strong&gt;NOT&lt;/strong&gt; a tweak. If you have one of the above listed iOS versions, please stay away from it cause it can bootloop your device.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I deleted the issue section because of meaningless spam of some users.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I will keep you updated on &lt;a href=&#34;https://twitter.com/aboutzeph&#34;&gt;Twitter&lt;/a&gt; and on this readme about new features and bug fixes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/leminlimez&#34;&gt;leminlimez&lt;/a&gt; for deviceSubType improvement.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/sourcelocation&#34;&gt;sourcelocation&lt;/a&gt; for ResSet16 methods.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/34306&#34;&gt;Little34306&lt;/a&gt; for red bar fix idea.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ginsudev/WDBFontOverwrite&#34;&gt;FontOverwrite&lt;/a&gt; for exploit code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>