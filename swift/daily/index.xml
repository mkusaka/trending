<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-11T01:42:42Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emqx/CocoaMQTT</title>
    <updated>2025-04-11T01:42:42Z</updated>
    <id>tag:github.com,2025-04-11:/emqx/CocoaMQTT</id>
    <link href="https://github.com/emqx/CocoaMQTT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MQTT 5.0 client library for iOS and macOS written in Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CocoaMQTT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/CocoaMQTT5.svg?sanitize=true&#34; alt=&#34;PodVersion&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/CocoaMQTT5.svg?sanitize=true&#34; alt=&#34;Platforms&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/l/BadgeSwift.svg?style=flat&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/swift-5-orange.svg?sanitize=true&#34; alt=&#34;Swift version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;MQTT v3.1.1 and v5.0 client library for iOS/macOS/tvOS written with Swift 5&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Build with Xcode 11.1 / Swift 5.1&lt;/p&gt; &#xA;&lt;p&gt;IOS Target: 12.0 or above OSX Target: 10.13 or above TVOS Target: 10.0 or above&lt;/p&gt; &#xA;&lt;h2&gt;xcode 14.3 issue:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;File not found: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/arc/libarclite_iphonesimulator.a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter the issue, Please update your project minimum depolyments to 11.0&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;To integrate CocoaMQTT into your Xcode project using &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, you need to modify you &lt;code&gt;Podfile&lt;/code&gt; like the followings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&#xA;target &#39;Example&#39; do&#xA;    pod &#39;CocoaMQTT&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At last, import &#34;CocoaMQTT&#34; to your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import CocoaMQTT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Install using &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; by adding the following lines to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;emqx/CocoaMQTT&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ carthage update --platform iOS,macOS,tvOS --use-xcframeworks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At last:&lt;/p&gt; &#xA;&lt;p&gt;On your application targets “General” settings tab, in the &#34;Frameworks, Libraries, and Embedded content&#34; section, drag and drop CocoaMQTT.xcframework, CocoaAsyncSocket.xcframework and Starscream.xcframework from the Carthage/Build folder on disk. Then select &#34;Embed &amp;amp; Sign&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Create a client to connect &lt;a href=&#34;https://www.emqx.com/en/mqtt/public-mqtt5-broker&#34;&gt;MQTT broker&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;///MQTT 5.0&#xA;let clientID = &#34;CocoaMQTT-&#34; + String(ProcessInfo().processIdentifier)&#xA;let mqtt5 = CocoaMQTT5(clientID: clientID, host: &#34;broker.emqx.io&#34;, port: 1883)&#xA;&#xA;let connectProperties = MqttConnectProperties()&#xA;connectProperties.topicAliasMaximum = 0&#xA;connectProperties.sessionExpiryInterval = 0&#xA;connectProperties.receiveMaximum = 100&#xA;connectProperties.maximumPacketSize = 500&#xA;mqtt5.connectProperties = connectProperties&#xA;&#xA;mqtt5.username = &#34;test&#34;&#xA;mqtt5.password = &#34;public&#34;&#xA;mqtt5.willMessage = CocoaMQTTMessage(topic: &#34;/will&#34;, string: &#34;dieout&#34;)&#xA;mqtt5.keepAlive = 60&#xA;mqtt5.delegate = self&#xA;mqtt5.connect()&#xA;&#xA;///MQTT 3.1.1&#xA;let clientID = &#34;CocoaMQTT-&#34; + String(ProcessInfo().processIdentifier)&#xA;let mqtt = CocoaMQTT(clientID: clientID, host: &#34;broker.emqx.io&#34;, port: 1883)&#xA;mqtt.username = &#34;test&#34;&#xA;mqtt.password = &#34;public&#34;&#xA;mqtt.willMessage = CocoaMQTTMessage(topic: &#34;/will&#34;, string: &#34;dieout&#34;)&#xA;mqtt.keepAlive = 60&#xA;mqtt.delegate = self&#xA;mqtt.connect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use closures instead of &lt;code&gt;CocoaMQTTDelegate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;mqtt.didReceiveMessage = { mqtt, message, id in&#xA;    print(&#34;Message received in topic \(message.topic) with payload \(message.string!)&#34;)           &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SSL Secure&lt;/h2&gt; &#xA;&lt;h4&gt;One-way certification&lt;/h4&gt; &#xA;&lt;p&gt;No certificate is required locally. If you want to trust all untrust CA certificates, you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;mqtt.allowUntrustCACertificate = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Two-way certification&lt;/h4&gt; &#xA;&lt;p&gt;Need a .p12 file which is generated by a public key file and a private key file. You can generate the p12 file in the terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl pkcs12 -export -clcerts -in client-cert.pem -inkey client-key.pem -out client.p12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Please use openssl version 1.1 (e.g. &lt;code&gt;brew install openssl@1.1&lt;/code&gt;), otherwise you may not be able to import the generated .p12 file to the system correctly.&lt;/p&gt; &#xA;&lt;h2&gt;MQTT over Websocket&lt;/h2&gt; &#xA;&lt;p&gt;In the 1.3.0, The CocoaMQTT has supported to connect to MQTT Broker by Websocket.&lt;/p&gt; &#xA;&lt;p&gt;If you integrated by &lt;strong&gt;CocoaPods&lt;/strong&gt;, you need to modify you &lt;code&gt;Podfile&lt;/code&gt; like the followings and execute &lt;code&gt;pod install&lt;/code&gt; again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&#xA;target &#39;Example&#39; do&#xA;    pod &#39;CocoaMQTT/WebSockets&#39;&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using CocoaMQTT in a project with only a &lt;code&gt;.podspec&lt;/code&gt; and no &lt;code&gt;Podfile&lt;/code&gt;, e.g. in a module for React Native, add this line to your &lt;code&gt;.podspec&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Pod::Spec.new do |s|&#xA;  ...&#xA;  s.dependency &#34;Starscream&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, Create a MQTT instance over Websocket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;///MQTT 5.0&#xA;let websocket = CocoaMQTTWebSocket(uri: &#34;/mqtt&#34;)&#xA;let mqtt5 = CocoaMQTT5(clientID: clientID, host: host, port: 8083, socket: websocket)&#xA;let connectProperties = MqttConnectProperties()&#xA;connectProperties.topicAliasMaximum = 0&#xA;// ...&#xA;mqtt5.connectProperties = connectProperties&#xA;// ...&#xA;&#xA;_ = mqtt5.connect()&#xA;&#xA;///MQTT 3.1.1&#xA;let websocket = CocoaMQTTWebSocket(uri: &#34;/mqtt&#34;)&#xA;let mqtt = CocoaMQTT(clientID: clientID, host: host, port: 8083, socket: websocket)&#xA;&#xA;// ...&#xA;&#xA;_ = mqtt.connect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to add additional custom header to the connection, you can use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let websocket = CocoaMQTTWebSocket(uri: &#34;/mqtt&#34;)&#xA;websocket.headers = [&#xA;            &#34;x-api-key&#34;: &#34;value&#34;&#xA;        ]&#xA;        websocket.enableSSL = true&#xA;&#xA;let mqtt = CocoaMQTT(clientID: clientID, host: host, port: 8083, socket: websocket)&#xA;&#xA;// ...&#xA;&#xA;_ = mqtt.connect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example App&lt;/h2&gt; &#xA;&lt;p&gt;You can follow the Example App to learn how to use it. But we need to make the Example App works fisrt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd Examples&#xA;&#xA;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, open the &lt;code&gt;Example.xcworkspace/&lt;/code&gt; by Xcode and start it!&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;These third-party functions are used:&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/robbiehanson/CocoaAsyncSocket&#34;&gt;GCDAsyncSocket&lt;/a&gt;&lt;/del&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leeway1208/MqttCocoaAsyncSocket&#34;&gt;MqttCocoaAsyncSocket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daltoniam/Starscream&#34;&gt;Starscream&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;MIT License (see &lt;code&gt;LICENSE&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andypiper&#34;&gt;@andypiper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/turtleDeng&#34;&gt;@turtleDeng&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jan-bednar&#34;&gt;@jan-bednar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmiltner&#34;&gt;@jmiltner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/manucheri&#34;&gt;@manucheri&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cyrusingraham&#34;&gt;@Cyrus Ingraham&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feng Lee &lt;a href=&#34;mailto:feng@emqx.io&#34;&gt;feng@emqx.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CrazyWisdom &lt;a href=&#34;mailto:zh.whong@gmail.com&#34;&gt;zh.whong@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alex Yu &lt;a href=&#34;mailto:alexyu.dc@gmail.com&#34;&gt;alexyu.dc@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Leeway &lt;a href=&#34;mailto:leeway1208@gmail.com&#34;&gt;leeway1208@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Twitter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/EMQTech&#34;&gt;https://twitter.com/EMQTech&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>