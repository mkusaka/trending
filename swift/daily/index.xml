<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-17T01:57:02Z</updated>
  <subtitle>Daily Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ther0n/UnnaturalScrollWheels</title>
    <updated>2022-06-17T01:57:02Z</updated>
    <id>tag:github.com,2022-06-17:/ther0n/UnnaturalScrollWheels</id>
    <link href="https://github.com/ther0n/UnnaturalScrollWheels" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Invert scroll direction for physical scroll wheels while maintaining &#34;Natural&#34; scrolling for trackpads on MacOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UnnaturalScrollWheels&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ther0n/UnnaturalScrollWheels/master/UnnaturalScrollWheels/Assets.xcassets/AppIcon.appiconset/256x256.png?raw=true&#34; alt=&#34;App Icon&#34; title=&#34;App Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Invert scroll direction for physical scroll wheels while maintaining &#34;Natural&#34; scrolling for trackpads on MacOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ther0n/UnnaturalScrollWheels/master/Screenshots/Screenshot.png?raw=true&#34; alt=&#34;Screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why? What does it do?&lt;/h2&gt; &#xA;&lt;p&gt;For some reason in macOS, toggling the &#34;Scroll direction: Natural&#34; option in &lt;em&gt;Mouse&lt;/em&gt; settings also changes it in &lt;em&gt;Trackpad&lt;/em&gt; settings despite being in separate places.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ther0n/UnnaturalScrollWheels/master/Screenshots/MouseSettings.png?raw=true&#34; alt=&#34;Mouse Settings&#34; title=&#34;Mouse Settings&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ther0n/UnnaturalScrollWheels/master/Screenshots/TrackpadSettings.png?raw=true&#34; alt=&#34;Trackpad Settings&#34; title=&#34;Trackpad Settings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This application makes it so that scroll direction for physical scroll wheels is the opposite of what is shown in settings without messing with the scroll direction of the trackpad.&lt;/p&gt; &#xA;&lt;p&gt;The issue is described here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apple.stackexchange.com/questions/116617/how-to-separate-mouse-and-trackpad-settings&#34;&gt;https://apple.stackexchange.com/questions/116617/how-to-separate-mouse-and-trackpad-settings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately most/all solutions no longer work reliably if at all in Catalina.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install --cask unnaturalscrollwheels&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual download&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the latest &lt;code&gt;.dmg&lt;/code&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/ther0n/releases&#34;&gt;releases page&lt;/a&gt;, mount it, and copy the &lt;code&gt;.app&lt;/code&gt; to your applications folder and open it like any other application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The app requires accessibility permissions to &#34;Control your computer&#34;. This is required to intercept scroll events, invert them and modify their deltas to disable acceleration and apply your settings.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ther0n/UnnaturalScrollWheels/master/Screenshots/AccessibilityPopup.png?raw=true&#34; alt=&#34;Accessibility Popup&#34; title=&#34;Accessibility Popup&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ther0n/UnnaturalScrollWheels/master/Screenshots/macOSAccessibilityPopup.png?raw=true&#34; alt=&#34;macOS Accessibility Popup&#34; title=&#34;macOS Accessibility Popup&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ther0n/UnnaturalScrollWheels/master/Screenshots/AccessibilitySettings.png?raw=true&#34; alt=&#34;Accessibility Settings&#34; title=&#34;Accessibility Settings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For the most part, things are self explanatory. One possible point of confusion may be how to modify your preferences once you&#39;ve hidden the app from menu bar. To show preferences and to temporarily show the menu bar icon again, with the application running the background, simply open the application again which will display the preferences window.&lt;/p&gt; &#xA;&lt;h2&gt;Run at login&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ther0n/UnnaturalScrollWheels/master/RunAtLogin.md&#34;&gt;See here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cbpowell/MarqueeLabel</title>
    <updated>2022-06-17T01:57:02Z</updated>
    <id>tag:github.com,2022-06-17:/cbpowell/MarqueeLabel</id>
    <link href="https://github.com/cbpowell/MarqueeLabel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A drop-in replacement for UILabel, which automatically adds a scrolling marquee effect when the label&#39;s text does not fit inside the specified frame&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;MarqueeLabel is a UILabel subclass adds a scrolling marquee effect when the text of the label outgrows the available width. The label scrolling direction and speed/rate can be specified as well. All standard UILabel properties (where it makes sense) are available in MarqueeLabel, with the intent of MarqueeLabel behaving just like a UILabel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MarqueeLabel will be maintained in Swift &lt;em&gt;only&lt;/em&gt; starting with &lt;a href=&#34;https://github.com/cbpowell/MarqueeLabel/releases/tag/4.0.0&#34;&gt;release 4.0&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;MarqueeLabel is compatible with both iOS and tvOS, and currently works with Swift 5.0 and the iOS 12.2 SDK! (But if you&#39;re looking for prior version Swift compatibility, &lt;a href=&#34;https://github.com/cbpowell/MarqueeLabel/releases/&#34;&gt;you can check the older releases&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Check it out!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cbpowell/MarqueeLabel/master/Metadata/MarqueeLabelDemo.gif&#34; alt=&#34;GIF of MarqueeLabelDemo in action&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How To Get Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone MarqueeLabel from GitHub, and check out the demo project.&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;http://cocoadocs.org/docsets/MarqueeLabel/&#34;&gt;MarqueeLabel CocoaDocs documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Take a look at the &lt;a href=&#34;https://github.com/cbpowell/MarqueeLabel/raw/master/README.mdown#special-notes&#34;&gt;special notes&lt;/a&gt; section to be aware of any gotchas.&lt;/li&gt; &#xA; &lt;li&gt;Drop in MarqueeLabel as a replacement to your lengthy UILabels!&lt;/li&gt; &#xA; &lt;li&gt;Help out with bug fixes and new features.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;To use MarqueeLabel in a project, add the following to your project&#39;s Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;MarqueeLabel&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to your project&#39;s Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;cbpowell/MarqueeLabel&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual Installation&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add MarqueeLabel.swift, to your project.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;strong&gt;QuartzCore.framework&lt;/strong&gt; to your project frameworks.&lt;/li&gt; &#xA; &lt;li&gt;Import MarqueeLabel and replace your UILabels with MarqueeLabels as needed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Using MarqueeLabel in your own Swift Framework?&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/cbpowell/MarqueeLabel/raw/master/README.mdown#swiftframeworkusage&#34;&gt;Special Note below&lt;/a&gt; on supporting Cocoapods and Carthage simultaneously in a Swift framework!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;MarqueeLabel automatically scrolls its text, at either a defined rate (points per second) or over a duration (seconds), whenever the length of the label&#39;s text exceeds the space available given the label&#39;s frame.&lt;/p&gt; &#xA;&lt;p&gt;There are several options for the Marquee type, and the default is &lt;code&gt;Continuous&lt;/code&gt; (which looks just like what Apple typically uses). The animation curve of this scroll can be defined, and defaults to &lt;code&gt;UIViewAnimationOptionCurveLinear&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are also several optional features to help with your integration of the scrolling nature of MarqueeLabel:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An optional edge fade at the left and right edges of the view, in order to fade the label text into the background rather than simply being clipped off&lt;/li&gt; &#xA; &lt;li&gt;Leading and trailing buffers to offset the label text inside its frame, giving you better control over alignment&lt;/li&gt; &#xA; &lt;li&gt;&#34;Labelization&#34; to make your MarqueeLabel &lt;em&gt;exactly&lt;/em&gt; like a UILabel.&lt;/li&gt; &#xA; &lt;li&gt;Scroll animation &#34;holding&#34; and pausing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the included demo project for several use case examples!&lt;/p&gt; &#xA;&lt;h3&gt;Code&lt;/h3&gt; &#xA;&lt;p&gt;These lines of code create a MarqueeLabel that will scroll across its content in 8.0 seconds, and adds 10.0 point long fade at the left and right boundaries.&lt;/p&gt; &#xA;&lt;p&gt;Replace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var lengthyLabel = UILabel.init(frame:aFrame)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var lengthyLabel = MarqueeLabel.init(frame: aFrame, duration: 8.0, fadeLength: 10.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Storyboards&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Storyboards/Interface Builder you can create a MarqueeLabel instance by adding a normal UILabel view to your Storyboard, and then manually changing the view&#39;s class to &lt;code&gt;MarqueeLabel&lt;/code&gt; in the &#34;Custom Class&#34; field of the Identity Inspector tab on the Utilities panel (the right-side panel). &lt;em&gt;Note:&lt;/em&gt; If you forget to change the Custom Class field to &lt;code&gt;MarqueeLabel&lt;/code&gt; and then try to access/set MarqueeLabel-specific properties in your code, you will get crashes!&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cbpowell/MarqueeLabel/master/Metadata/Storyboards_config.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;p&gt;You can then configure the normal UILabel properties, as well as most of the MarqueeLabel configuration properties, via the Attributes tab of the Utility panel!&lt;/p&gt; &#xA;&lt;h3&gt;Even More&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;http://cocoadocs.org/docsets/MarqueeLabel/&#34;&gt;MarqueeLabel documentation&lt;/a&gt; for more about all the features, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bulk-manipulation class methods to conveniently restart, pause, and unpause all labels in a view controller&lt;/li&gt; &#xA; &lt;li&gt;Scrolling direction: left-&amp;gt;right, right-&amp;gt;left, and continuous looping (both left and right)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;p&gt;Also check out &lt;a href=&#34;https://raw.githubusercontent.com/cbpowell/MarqueeLabel/master/Extras&#34;&gt;the Extras folder&lt;/a&gt;, a collection of subclasses, extensions, and modifications for MarqueeLabel to implement various functionality that has been requested or suggested, but not merged into the MarqueeLabel code.&lt;/p&gt; &#xA;&lt;h2&gt;Special Notes&lt;a id=&#34;specialnotes&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h4&gt;Automatic Font Size Adjustment&lt;/h4&gt; &#xA;&lt;p&gt;Starting with release 4.1, MarqueeLabel allows setting the &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uilabel/1620546-adjustsfontsizetofitwidth&#34;&gt;&lt;code&gt;adjustsFontSizeToWidth&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;true&lt;/code&gt;. When configured this way, MarqueeLabel will check to see if the text string (non-attributed or attributed) will fit within the frame when adjusted to the specified minimum scale factor, and:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if the text will fit at the adjusted scale without requiring truncation, the label will &lt;strong&gt;not scroll&lt;/strong&gt;. Instead, the label text will be allowed to adjust to that size and will remain static.&lt;/li&gt; &#xA; &lt;li&gt;if the text will not fit, the label will scroll and retain the unscaled font size (i.e., like all releases prior to 4.1)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Previously MarqueeLabel would override any attempts to set &lt;code&gt;adjustsFontSizetoWidth&lt;/code&gt; and &lt;code&gt;minimumScaleFactor&lt;/code&gt; to the default settings used by UILabel (&lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;0.0&lt;/code&gt;, respectively). As such the default behavior remains the same: the label will not adjust it&#39;s font size to &#39;avoid&#39; scrolling.&lt;/p&gt; &#xA;&lt;h4&gt;IBDesignables&lt;/h4&gt; &#xA;&lt;p&gt;MarqueeLabel includes support for IBInspectable and IBDesignable, to allow configuration of the label inside Interface Builder/Storyboards. However, if you see these warnings when building:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;IB Designables: Failed to update auto layout status: Failed to load designables from path (null)&#xA;IB Designables: Failed to render instance of MarqueeLabel: Failed to load designables from path (null)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...then you are likely using MarqueeLabel as a static library, which does not support IBInspectable/IBDesignable. Some workarounds include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install MarqueeLabel as a dynamic framework using CocoaPods with use_frameworks! in your Podfile&lt;/li&gt; &#xA; &lt;li&gt;Install MarqueeLabel with Carthage&lt;/li&gt; &#xA; &lt;li&gt;Install MarqueeLabel by manually importing the source files into your project (may be only option if you&#39;re targeting iOS 7.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Automatic Scrolling&lt;/h4&gt; &#xA;&lt;p&gt;MarqueeLabel tries its best to automatically begin scrolling when appropriate, but sometimes the way your view/view controller appears onscreen can trip it up.&lt;/p&gt; &#xA;&lt;p&gt;To combat this, you can try:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;restartLabel&lt;/code&gt; instance method to manually start scrolling on a MarqueeLabel&lt;/li&gt; &#xA; &lt;li&gt;Try using the bulk manipulation class methods - but note that these don&#39;t currently play well with UIViewController containment. You&#39;ll need to pass them the lowest UIViewController in your hierarchy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Use in UITableView and UICollectionView&lt;/h4&gt; &#xA;&lt;p&gt;As noted above, MarqueeLabel can sometimes have trouble detecting when the scroll animation should start when used in UITableViews and UICollectionViews - although recent reviews have improved this.&lt;/p&gt; &#xA;&lt;p&gt;Usually you&#39;ll configure the MarqueeLabel instance when building the cell in &lt;code&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt; (or similar for UICollectionView), but at this point the cell is not onscreen so MarqueeLabel will not begin the scrolling animation. Even when the cell is eventually placed onscreen as the user scrolls, due to timing it&#39;s possible that the animation will not fire.&lt;/p&gt; &#xA;&lt;p&gt;To make sure the scrolling animation &lt;em&gt;does&lt;/em&gt; begin as the cell scrolls onscreen, you can use the the &lt;code&gt;restartLabel&lt;/code&gt; method on your MarqueeLabels inside the &lt;code&gt;tableView:willDisplayCell:forRowAtIndexPath:&lt;/code&gt; delegate method (or similar for UICollectionView).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;That said&lt;/strong&gt; - the UITableView/UICollectionView best practice is to minimize things like excessive animation, subviews, and custom drawing in your cells, in order to get glassy smooth scrolling. In general I would recommend against allowing your labels to automatically animate during user scrolling of the UITableView/UICollectionView. I suggest &lt;a href=&#34;http://cocoadocs.org/docsets/MarqueeLabel/3.0.3/Classes/MarqueeLabel.html#//api/name/holdScrolling&#34;&gt;holding scrolling&lt;/a&gt; or &lt;a href=&#34;http://cocoadocs.org/docsets/MarqueeLabel/3.0.3/Classes/MarqueeLabel.html#//api/name/labelize&#34;&gt;labelizing&lt;/a&gt; the labels while the user scrolls. See the table view example in the demo!&lt;/p&gt; &#xA;&lt;h4&gt;Important Animation Note&lt;a id=&#34;importantanimationnote&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;MarqueeLabel is based on Core Animation, which does cause some problems when views appear and disappear and the repeating animation is stopped by iOS and does not automatically restart.&lt;/p&gt; &#xA;&lt;p&gt;To address this, MarqueeLabel provides a few class methods that allow easy &#34;restarting&#34; of all MarqueeLabels associated with a UIViewController. Specifically, the class method &lt;code&gt;restartLabelsOfController:&lt;/code&gt; should be called by your view controller (which passes in &lt;code&gt;self&lt;/code&gt; for the &lt;code&gt;controller&lt;/code&gt; parameter) when it is revealed or about to be revealed. Keep in mind that presenting a modal view controller can pause repeating UIView animations in the controller that is being covered!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;controllerLabelsLabelize:&lt;/code&gt; and &lt;code&gt;controllerLabelsAnimate:&lt;/code&gt; are for convenience, allowing labelizing and re-animating all labels of a UIViewController. Labelizing can be useful for performance, such as labelizing all MarqueeLabels when a UITableView/UIScrollView starts scrolling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    override  func viewDidAppear(_ animated: Bool) {&#xA;        super.viewDidAppear(animated)&#xA;        MarqueeLabel.controllerViewDidAppear(self)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ideas?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Charles Powell&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/cbpowell&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/seventhcolumn&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/cbpowell&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Give me a shout if you&#39;re using this in your project!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nalexn/clean-architecture-swiftui</title>
    <updated>2022-06-17T01:57:02Z</updated>
    <id>tag:github.com,2022-06-17:/nalexn/clean-architecture-swiftui</id>
    <link href="https://github.com/nalexn/clean-architecture-swiftui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SwiftUI sample app using Clean Architecture. Examples of working with CoreData persistence, networking, dependency injection, unit testing, and more.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Articles related to this project&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nalexn.github.io/clean-architecture-swiftui/?utm_source=nalexn_github&#34;&gt;Clean Architecture for SwiftUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nalexn.github.io/swiftui-deep-linking/?utm_source=nalexn_github&#34;&gt;Programmatic navigation in SwiftUI project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nalexn.github.io/separation-of-concerns/?utm_source=nalexn_github&#34;&gt;Separation of Concerns in Software Design&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Clean Architecture for SwiftUI + Combine&lt;/h1&gt; &#xA;&lt;p&gt;A demo project showcasing the setup of the SwiftUI app with Clean Architecture.&lt;/p&gt; &#xA;&lt;p&gt;The app uses the &lt;a href=&#34;https://restcountries.com/&#34;&gt;restcountries.com&lt;/a&gt; REST API to show the list of countries and details about them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Check out &lt;a href=&#34;https://github.com/nalexn/clean-architecture-swiftui/tree/mvvm&#34;&gt;mvvm branch&lt;/a&gt; for the MVVM revision of the same app.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the example of handling the &lt;strong&gt;authentication state&lt;/strong&gt; in the app, you can refer to my &lt;a href=&#34;https://github.com/nalexn/uikit-swiftui&#34;&gt;other tiny project&lt;/a&gt; that harnesses the locks and keys principle for solving this problem.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/platforms-iPhone%20%7C%20iPad%20%7C%20macOS-lightgrey&#34; alt=&#34;platforms&#34;&gt; &lt;a href=&#34;https://travis-ci.com/nalexn/clean-architecture-swiftui&#34;&gt;&lt;img src=&#34;https://travis-ci.com/nalexn/clean-architecture-swiftui.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/nalexn/clean-architecture-swiftui&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/nalexn/clean-architecture-swiftui/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-nalexn-clean-architecture-swiftui-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/db33561b-0b2b-4ee1-a941-a08efbd0ebd7&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nalexn/blob_files/raw/master/images/countries_preview.png?raw=true&#34; alt=&#34;Diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vanilla &lt;strong&gt;SwiftUI&lt;/strong&gt; + &lt;strong&gt;Combine&lt;/strong&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;Decoupled &lt;strong&gt;Presentation&lt;/strong&gt;, &lt;strong&gt;Business Logic&lt;/strong&gt;, and &lt;strong&gt;Data Access&lt;/strong&gt; layers&lt;/li&gt; &#xA; &lt;li&gt;Full test coverage, including the UI (thanks to the &lt;a href=&#34;https://github.com/nalexn/ViewInspector&#34;&gt;ViewInspector&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Redux&lt;/strong&gt;-like centralized &lt;code&gt;AppState&lt;/code&gt; as the single source of truth&lt;/li&gt; &#xA; &lt;li&gt;Data persistence with &lt;strong&gt;CoreData&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Native SwiftUI dependency injection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Programmatic navigation&lt;/strong&gt;. Push notifications with deep link&lt;/li&gt; &#xA; &lt;li&gt;Simple yet flexible networking layer built on Generics&lt;/li&gt; &#xA; &lt;li&gt;Handling of the system events (such as &lt;code&gt;didBecomeActive&lt;/code&gt;, &lt;code&gt;willResignActive&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Built with SOLID, DRY, KISS, YAGNI in mind&lt;/li&gt; &#xA; &lt;li&gt;Designed for scalability. It can be used as a reference for building large production apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture overview&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nalexn/blob_files/raw/master/images/swiftui_arc_001.png?raw=true&#34; alt=&#34;Diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Presentation Layer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SwiftUI views&lt;/strong&gt; that contain no business logic and are a function of the state.&lt;/p&gt; &#xA;&lt;p&gt;Side effects are triggered by the user&#39;s actions (such as a tap on a button) or view lifecycle event &lt;code&gt;onAppear&lt;/code&gt; and are forwarded to the &lt;code&gt;Interactors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;State and business logic layer (&lt;code&gt;AppState&lt;/code&gt; + &lt;code&gt;Interactors&lt;/code&gt;) are natively injected into the view hierarchy with &lt;code&gt;@Environment&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Business Logic Layer&lt;/h3&gt; &#xA;&lt;p&gt;Business Logic Layer is represented by &lt;code&gt;Interactors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Interactors receive requests to perform work, such as obtaining data from an external source or making computations, but they never return data back directly.&lt;/p&gt; &#xA;&lt;p&gt;Instead, they forward the result to the &lt;code&gt;AppState&lt;/code&gt; or to a &lt;code&gt;Binding&lt;/code&gt;. The latter is used when the result of work (the data) is used locally by one View and does not belong to the &lt;code&gt;AppState&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nalexn/clean-architecture-swiftui/releases/tag/1.0&#34;&gt;Previously&lt;/a&gt;, this app did not use CoreData for persistence, and all loaded data were stored in the &lt;code&gt;AppState&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the persistence layer in place we have a choice - either to load the DB content onto the &lt;code&gt;AppState&lt;/code&gt;, or serve the data from &lt;code&gt;Interactors&lt;/code&gt; on an on-demand basis through &lt;code&gt;Binding&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first option suits best when you don&#39;t have a lot of data, for example, when you just store the last used login email in the &lt;code&gt;UserDefaults&lt;/code&gt;. Then, the corresponding string value can just be loaded onto the &lt;code&gt;AppState&lt;/code&gt; at launch and updated by the &lt;code&gt;Interactor&lt;/code&gt; when the user changes the input.&lt;/p&gt; &#xA;&lt;p&gt;The second option is better when you have massive amounts of data and introduce a fully-fledged database for storing it locally.&lt;/p&gt; &#xA;&lt;h3&gt;Data Access Layer&lt;/h3&gt; &#xA;&lt;p&gt;Data Access Layer is represented by &lt;code&gt;Repositories&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Repositories provide asynchronous API (&lt;code&gt;Publisher&lt;/code&gt; from Combine) for making &lt;a href=&#34;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&#34;&gt;CRUD&lt;/a&gt; operations on the backend or a local database. They don&#39;t contain business logic, neither do they mutate the &lt;code&gt;AppState&lt;/code&gt;. Repositories are accessible and used only by the Interactors.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/nallexn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-nallexn-blue&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nalexn.github.io/?utm_source=nalexn_github&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/blog-github-blue&#34; alt=&#34;blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://venmo.com/nallexn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%8D%BA-Venmo-brightgreen&#34; alt=&#34;venmo&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>