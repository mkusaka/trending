<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-01T02:10:30Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nalexn/clean-architecture-swiftui</title>
    <updated>2024-02-01T02:10:30Z</updated>
    <id>tag:github.com,2024-02-01:/nalexn/clean-architecture-swiftui</id>
    <link href="https://github.com/nalexn/clean-architecture-swiftui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SwiftUI sample app using Clean Architecture. Examples of working with CoreData persistence, networking, dependency injection, unit testing, and more.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Articles related to this project&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nalexn.github.io/clean-architecture-swiftui/?utm_source=nalexn_github&#34;&gt;Clean Architecture for SwiftUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nalexn.github.io/swiftui-deep-linking/?utm_source=nalexn_github&#34;&gt;Programmatic navigation in SwiftUI project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nalexn.github.io/separation-of-concerns/?utm_source=nalexn_github&#34;&gt;Separation of Concerns in Software Design&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Clean Architecture for SwiftUI + Combine&lt;/h1&gt; &#xA;&lt;p&gt;A demo project showcasing the setup of the SwiftUI app with Clean Architecture.&lt;/p&gt; &#xA;&lt;p&gt;The app uses the &lt;a href=&#34;https://restcountries.com/&#34;&gt;restcountries.com&lt;/a&gt; REST API to show the list of countries and details about them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Check out &lt;a href=&#34;https://github.com/nalexn/clean-architecture-swiftui/tree/mvvm&#34;&gt;mvvm branch&lt;/a&gt; for the MVVM revision of the same app.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the example of handling the &lt;strong&gt;authentication state&lt;/strong&gt; in the app, you can refer to my &lt;a href=&#34;https://github.com/nalexn/uikit-swiftui&#34;&gt;other tiny project&lt;/a&gt; that harnesses the locks and keys principle for solving this problem.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/platforms-iPhone%20%7C%20iPad%20%7C%20macOS-lightgrey&#34; alt=&#34;platforms&#34;&gt; &lt;a href=&#34;https://travis-ci.com/nalexn/clean-architecture-swiftui&#34;&gt;&lt;img src=&#34;https://travis-ci.com/nalexn/clean-architecture-swiftui.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/nalexn/clean-architecture-swiftui&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/nalexn/clean-architecture-swiftui/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-nalexn-clean-architecture-swiftui-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/db33561b-0b2b-4ee1-a941-a08efbd0ebd7&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nalexn/blob_files/raw/master/images/countries_preview.png?raw=true&#34; alt=&#34;Diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vanilla &lt;strong&gt;SwiftUI&lt;/strong&gt; + &lt;strong&gt;Combine&lt;/strong&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;Decoupled &lt;strong&gt;Presentation&lt;/strong&gt;, &lt;strong&gt;Business Logic&lt;/strong&gt;, and &lt;strong&gt;Data Access&lt;/strong&gt; layers&lt;/li&gt; &#xA; &lt;li&gt;Full test coverage, including the UI (thanks to the &lt;a href=&#34;https://github.com/nalexn/ViewInspector&#34;&gt;ViewInspector&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Redux&lt;/strong&gt;-like centralized &lt;code&gt;AppState&lt;/code&gt; as the single source of truth&lt;/li&gt; &#xA; &lt;li&gt;Data persistence with &lt;strong&gt;CoreData&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Native SwiftUI dependency injection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Programmatic navigation&lt;/strong&gt;. Push notifications with deep link&lt;/li&gt; &#xA; &lt;li&gt;Simple yet flexible networking layer built on Generics&lt;/li&gt; &#xA; &lt;li&gt;Handling of the system events (such as &lt;code&gt;didBecomeActive&lt;/code&gt;, &lt;code&gt;willResignActive&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Built with SOLID, DRY, KISS, YAGNI in mind&lt;/li&gt; &#xA; &lt;li&gt;Designed for scalability. It can be used as a reference for building large production apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture overview&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nalexn/blob_files/raw/master/images/swiftui_arc_001.png?raw=true&#34; alt=&#34;Diagram&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Presentation Layer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SwiftUI views&lt;/strong&gt; that contain no business logic and are a function of the state.&lt;/p&gt; &#xA;&lt;p&gt;Side effects are triggered by the user&#39;s actions (such as a tap on a button) or view lifecycle event &lt;code&gt;onAppear&lt;/code&gt; and are forwarded to the &lt;code&gt;Interactors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;State and business logic layer (&lt;code&gt;AppState&lt;/code&gt; + &lt;code&gt;Interactors&lt;/code&gt;) are natively injected into the view hierarchy with &lt;code&gt;@Environment&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Business Logic Layer&lt;/h3&gt; &#xA;&lt;p&gt;Business Logic Layer is represented by &lt;code&gt;Interactors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Interactors receive requests to perform work, such as obtaining data from an external source or making computations, but they never return data back directly.&lt;/p&gt; &#xA;&lt;p&gt;Instead, they forward the result to the &lt;code&gt;AppState&lt;/code&gt; or to a &lt;code&gt;Binding&lt;/code&gt;. The latter is used when the result of work (the data) is used locally by one View and does not belong to the &lt;code&gt;AppState&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nalexn/clean-architecture-swiftui/releases/tag/1.0&#34;&gt;Previously&lt;/a&gt;, this app did not use CoreData for persistence, and all loaded data were stored in the &lt;code&gt;AppState&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With the persistence layer in place we have a choice - either to load the DB content onto the &lt;code&gt;AppState&lt;/code&gt;, or serve the data from &lt;code&gt;Interactors&lt;/code&gt; on an on-demand basis through &lt;code&gt;Binding&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first option suits best when you don&#39;t have a lot of data, for example, when you just store the last used login email in the &lt;code&gt;UserDefaults&lt;/code&gt;. Then, the corresponding string value can just be loaded onto the &lt;code&gt;AppState&lt;/code&gt; at launch and updated by the &lt;code&gt;Interactor&lt;/code&gt; when the user changes the input.&lt;/p&gt; &#xA;&lt;p&gt;The second option is better when you have massive amounts of data and introduce a fully-fledged database for storing it locally.&lt;/p&gt; &#xA;&lt;h3&gt;Data Access Layer&lt;/h3&gt; &#xA;&lt;p&gt;Data Access Layer is represented by &lt;code&gt;Repositories&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Repositories provide asynchronous API (&lt;code&gt;Publisher&lt;/code&gt; from Combine) for making &lt;a href=&#34;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&#34;&gt;CRUD&lt;/a&gt; operations on the backend or a local database. They don&#39;t contain business logic, neither do they mutate the &lt;code&gt;AppState&lt;/code&gt;. Repositories are accessible and used only by the Interactors.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/nallexn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-nallexn-blue&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nalexn.github.io/?utm_source=nalexn_github&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/blog-github-blue&#34; alt=&#34;blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://venmo.com/nallexn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%8D%BA-Venmo-brightgreen&#34; alt=&#34;venmo&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>krzysztofzablocki/Sourcery</title>
    <updated>2024-02-01T02:10:30Z</updated>
    <id>tag:github.com,2024-02-01:/krzysztofzablocki/Sourcery</id>
    <link href="https://github.com/krzysztofzablocki/Sourcery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Meta-programming for Swift, stop writing boilerplate code.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/actions/workflows/test_macOS.yml&#34;&gt;&lt;img src=&#34;https://github.com/krzysztofzablocki/Sourcery/actions/workflows/test_macOS.yml/badge.svg?sanitize=true&#34; alt=&#34;macOS 13&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/actions/workflows/test_ubuntu.yml&#34;&gt;&lt;img src=&#34;https://github.com/krzysztofzablocki/Sourcery/actions/workflows/test_ubuntu.yml/badge.svg?branch=master&#34; alt=&#34;ubuntu x86_64&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![codecov](https://codecov.io/gh/krzysztofzablocki/Sourcery/branch/master/graph/badge.svg)](https://codecov.io/gh/krzysztofzablocki/Sourcery) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/index.html&#34;&gt;&lt;img src=&#34;https://krzysztofzablocki.github.io/Sourcery/badge.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Sourcery&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Sourcery.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Sourcery&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Sourcery.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Sourcery&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Sourcery.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.swiftystack.com/&#34;&gt;&lt;strong&gt;In-Depth Sourcery guide is covered as part of my SwiftyStack engineering course.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sourcery Pro provides a powerful Stencil editor and extends Xcode with the ability to handle live AST templates: &lt;a href=&#34;https://apps.apple.com/us/app/sourcery-pro/id1561780836?mt=12&#34;&gt;available on Mac App Store&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1468993/114271090-f6c19200-9a0f-11eb-9bd8-d7bb15129eb2.mp4&#34;&gt;https://user-images.githubusercontent.com/1468993/114271090-f6c19200-9a0f-11eb-9bd8-d7bb15129eb2.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://merowing.info/sourcery-pro/&#34;&gt;Learn more about Sourcery Pro&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/Resources/icon-128.png&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sourcery&lt;/strong&gt; is a code generator for Swift language, built on top of Apple&#39;s own SwiftSyntax. It extends the language abstractions to allow you to generate boilerplate code automatically.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s used in over 40,000 projects on both iOS and macOS and it powers some of the most popular and critically-acclaimed apps you have used (including Airbnb, Bumble, New York Times). Its massive community adoption was one of the factors that pushed Apple to implement derived Equality and automatic Codable conformance. Sourcery is maintained by a growing community of &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Try &lt;strong&gt;Sourcery&lt;/strong&gt; for your next project or add it to an existing one -- you&#39;ll save a lot of time and be happy you did!&lt;/p&gt; &#xA;&lt;h2&gt;TL;DR&lt;/h2&gt; &#xA;&lt;p&gt;Sourcery allows you to get rid of repetitive code and create better architecture and developer workflows. An example might be implementing &lt;code&gt;Mocks&lt;/code&gt; for all your protocols, without Sourcery you will need to write &lt;strong&gt;hundreds lines of code per each protocol&lt;/strong&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyProtocolMock: MyProtocol {&#xA;&#xA;    //MARK: - sayHelloWith&#xA;    var sayHelloWithNameCallsCount = 0&#xA;    var sayHelloWithNameCalled: Bool {&#xA;        return sayHelloWithNameCallsCount &amp;gt; 0&#xA;    }&#xA;    var sayHelloWithNameReceivedName: String?&#xA;    var sayHelloWithNameReceivedInvocations: [String] = []&#xA;    var sayHelloWithNameClosure: ((String) -&amp;gt; Void)?&#xA;&#xA;    func sayHelloWith(name: String) {&#xA;        sayHelloWithNameCallsCount += 1&#xA;        sayHelloWithNameReceivedName = name&#xA;        sayHelloWithNameReceivedInvocations.append(name)&#xA;        sayHelloWithNameClosure?(name)&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and with Sourcery ?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension MyProtocol: AutoMockable {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sourcery removes the need to write any of the mocks code, how many protocols do you have in your project? Imagine how much time you&#39;ll save, using Sourcery will also make every single mock consistent and if you refactor or add properties, the mock code will be automatically updated for you, eliminating possible human errors.&lt;/p&gt; &#xA;&lt;p&gt;Sourcery can be applied to arbitrary problems across your codebase, if you can describe an algorithm to another human, you can automate it using Sourcery.&lt;/p&gt; &#xA;&lt;p&gt;Most common uses are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/equatable.html&#34;&gt;Equality&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/hashable.html&#34;&gt;Hashing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/enum-cases.html&#34;&gt;Enum cases &amp;amp; Counts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/lenses.html&#34;&gt;Lenses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/mocks.html&#34;&gt;Mocks &amp;amp; Stubs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/linuxmain.html&#34;&gt;LinuxMain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/decorator.html&#34;&gt;Decorators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/codable.html&#34;&gt;Persistence and advanced Codable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/diffable.html&#34;&gt;Property level diffing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But how about more specific use-cases, like automatically generating all the UI for your app &lt;code&gt;BetaSetting&lt;/code&gt;? &lt;a href=&#34;https://github.com/krzysztofzablocki/AutomaticSettings&#34;&gt;you can use Sourcery for that too&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you start writing your own template and learn the power of Sourcery you won&#39;t be able to live without it.&lt;/p&gt; &#xA;&lt;h2&gt;How To Get Started&lt;/h2&gt; &#xA;&lt;p&gt;There are plenty of tutorials for different uses of Sourcery, and you can always ask for help in our &lt;a href=&#34;https://forums.swift.org/c/related-projects/sourcery&#34;&gt;Swift Forum Category&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.caseyliss.com/2017/3/31/the-magic-of-sourcery&#34;&gt;The Magic of Sourcery&lt;/a&gt; is a great starting tutorial&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/158803/sourcery-tutorial-generating-swift-code-ios&#34;&gt;Generating Swift Code for iOS&lt;/a&gt; deals with JSON handling code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atomicrobot.io/blog/sourcery/&#34;&gt;How To Automate Swift Boilerplate with Sourcery&lt;/a&gt; generates conversions to dictionaries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://littlebitesofcocoa.com/318-codable-enums&#34;&gt;Codable Enums&lt;/a&gt; implements Codable support for Enumerations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/SourceryWorkshops&#34;&gt;Sourcery Workshops&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Mocking Intro &amp;amp; Getting Started Video&lt;/h3&gt; &#xA;&lt;p&gt;You can also watch this quick getting started and intro to mocking video by Inside iOS Dev: &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/-ZbBNuttlt4?t=214&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/Resources/Inside-iOS-Dev-Sourcery-Intro-To-Mocking-Video-Thumbnail.png&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Binary form&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Download the latest release with the prebuilt binary from &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/releases/latest&#34;&gt;release tab&lt;/a&gt;. Unzip the archive into the desired destination and run &lt;code&gt;bin/sourcery&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;brew install sourcery&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Add &lt;code&gt;pod &#39;Sourcery&#39;&lt;/code&gt; to your &lt;code&gt;Podfile&lt;/code&gt; and run &lt;code&gt;pod update Sourcery&lt;/code&gt;. This will download the latest release binary and will put it in your project&#39;s CocoaPods path so you will run it with &lt;code&gt;$PODS_ROOT/Sourcery/bin/sourcery&lt;/code&gt;&lt;/p&gt; &lt;p&gt;If you only want to install the &lt;code&gt;sourcery&lt;/code&gt; binary, you may want to use the &lt;code&gt;CLI-Only&lt;/code&gt; subspec: &lt;code&gt;pod &#39;Sourcery&#39;, :subspecs =&amp;gt; [&#39;CLI-Only&#39;]&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/yonaskolb/Mint&#34;&gt;Mint&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;mint run krzysztofzablocki/Sourcery&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Building from Source&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Download the latest release source code from &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/releases/latest&#34;&gt;the release tab&lt;/a&gt; or clone the repository and build Sourcery manually.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Building with Swift Package Manager&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Run &lt;code&gt;swift build -c release&lt;/code&gt; in the root folder and then copy &lt;code&gt;.build/release/sourcery&lt;/code&gt; to your desired destination.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;Note: JS templates are not supported when building with SPM yet.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Building with Xcode&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Run &lt;code&gt;xcodebuild -scheme sourcery -destination generic/platform=macOS -archivePath sourcery.xcarchive archive&lt;/code&gt; and export the binary from the archive.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;SPM (for plugin use only)&lt;/em&gt; Add the package dependency to your &lt;code&gt;Package.swift&lt;/code&gt; manifest from version &lt;code&gt;1.8.3&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;.package(url: &#34;https://github.com/krzysztofzablocki/Sourcery.git&#34;, from: &#34;1.8.3&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt;&lt;/em&gt; Add the dependency to &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;- repo: https://github.com/krzysztofzablocki/Sourcery&#xA;  rev: 1.9.1&#xA;  hooks:&#xA;  - id: sourcery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation for the latest release is available &lt;a href=&#34;http://merowing.info/Sourcery/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Linux Support&lt;/h2&gt; &#xA;&lt;p&gt;Linux support is &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/LINUX.md&#34;&gt;described on this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Running the executable&lt;/h3&gt; &#xA;&lt;p&gt;Sourcery is a command line tool; you can either run it manually or in a custom build phase using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./bin/sourcery --sources &amp;lt;sources path&amp;gt; --templates &amp;lt;templates path&amp;gt; --output &amp;lt;output path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: this command differs depending on how you installed Sourcery (see &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/#installation&#34;&gt;Installation&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Swift Package command&lt;/h3&gt; &#xA;&lt;p&gt;Sourcery can now be used as a Swift package command plugin. In order to do this, the package must be added as a dependency to your Swift package or Xcode project (see &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/#installation&#34;&gt;Installation&lt;/a&gt; above).&lt;/p&gt; &#xA;&lt;p&gt;To provide a configuration for the plugin to use, place a &lt;code&gt;.sourcery.yml&lt;/code&gt; file at the root of the target&#39;s directory (in the sources folder rather than the root of the package).&lt;/p&gt; &#xA;&lt;h4&gt;Running from the command line&lt;/h4&gt; &#xA;&lt;p&gt;To verify the plugin can be found by SwiftPM, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ swift package plugin --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the code generator, you need to allow changes to the project with the &lt;code&gt;--allow-writing-to-package-directory&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ swift package --allow-writing-to-package-directory sourcery-command&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running in Xcode&lt;/h4&gt; &#xA;&lt;p&gt;Inside a project/package that uses this command plugin, right-click the project and select &#34;SourceryCommand&#34; from the &#34;SourceryPlugins&#34; menu group.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Note that this is only available from Xcode 14 onwards.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Command line options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--sources&lt;/code&gt; - Path to a source swift files or directories. You can provide multiple paths using multiple &lt;code&gt;--sources&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--templates&lt;/code&gt; - Path to templates. File or Directory. You can provide multiple paths using multiple &lt;code&gt;--templates&lt;/code&gt; options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--force-parse&lt;/code&gt; - File extensions of Sourcery generated file you want to parse. You can provide multiple extension using multiple &lt;code&gt;--force-parse&lt;/code&gt; options. (i.e. &lt;code&gt;file.toparse.swift&lt;/code&gt; will be parsed even if generated by Sourcery if &lt;code&gt;--force-parse toparse&lt;/code&gt;). Useful when trying to implement a multiple phases generation. &lt;code&gt;--force-parse&lt;/code&gt; can also be used to process within a sourcery annotation. For example to process code within &lt;code&gt;sourcery:inline:auto:Type.AutoCodable&lt;/code&gt; annotation you can use &lt;code&gt;--force-parse AutoCodable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--output&lt;/code&gt; [default: current path] - Path to output. File or Directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--config&lt;/code&gt; [default: current path] - Path to config file. File or Directory. See &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/#configuration-file&#34;&gt;Configuration file&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--args&lt;/code&gt; - Additional arguments to pass to templates. Each argument can have an explicit value or will have implicit &lt;code&gt;true&lt;/code&gt; value. Arguments should be separated with &lt;code&gt;,&lt;/code&gt; without spaces (i.e. &lt;code&gt;--args arg1=value,arg2&lt;/code&gt;). Arguments are accessible in templates via &lt;code&gt;argument.name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--watch&lt;/code&gt; [default: false] - Watch both code and template folders for changes and regenerate automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--verbose&lt;/code&gt; [default: false] - Turn on verbose logging&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--quiet&lt;/code&gt; [default: false] - Turn off any logging, only emit errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--disableCache&lt;/code&gt; [default: false] - Turn off caching of parsed data&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--prune&lt;/code&gt; [default: false] - Prune empty generated files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt; - Display the current version of Sourcery&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--help&lt;/code&gt; - Display help information&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cacheBasePath&lt;/code&gt; - Base path to the cache directory. Can be overriden by the config file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--buildPath&lt;/code&gt; - Path to directory used when building from .swifttemplate files. This defaults to system temp directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration file&lt;/h3&gt; &#xA;&lt;p&gt;Instead of CLI arguments, you can use a &lt;code&gt;.sourcery.yml&lt;/code&gt; configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sources:&#xA;  - &amp;lt;sources path&amp;gt;&#xA;  - &amp;lt;sources path&amp;gt;&#xA;templates:&#xA;  - &amp;lt;templates path&amp;gt;&#xA;  - &amp;lt;templates path&amp;gt;&#xA;forceParse:&#xA;  - &amp;lt;string value&amp;gt;&#xA;  - &amp;lt;string value&amp;gt;&#xA;output:&#xA;  &amp;lt;output path&amp;gt;&#xA;args:&#xA;  &amp;lt;name&amp;gt;: &amp;lt;value&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about this configuration file &lt;a href=&#34;https://krzysztofzablocki.github.io/Sourcery/usage.html#configuration-file&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you get an unverified developer warning when using binary zip distribution try: &lt;code&gt;xattr -dr com.apple.quarantine Sourcery-1.1.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Sourcery are welcomed and encouraged!&lt;/p&gt; &#xA;&lt;p&gt;It is easy to get involved. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/graphs/contributors&#34;&gt;A list of contributors is available through GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To clarify what is expected of our community, Sourcery has adopted the code of conduct defined by the Contributor Covenant. This document is used across many open source communities, and articulates my values well. For more, see the &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsoring&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to support Sourcery development you can do so through &lt;a href=&#34;https://github.com/sponsors/krzysztofzablocki&#34;&gt;GitHub Sponsors&lt;/a&gt; or &lt;a href=&#34;https://opencollective.com/sourcery&#34;&gt;Open Collective&lt;/a&gt;, it&#39;s highly appreciated 🙇‍&lt;/p&gt; &#xA;&lt;p&gt;If you are a company and would like to sponsor the project directly and get it&#39;s logo here, you can &lt;a href=&#34;mailto:krzysztof.zablocki@pixle.pl?subject=%5BSourcery-Sponsorship%5D&#34;&gt;contact me directly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://team.bumble.com/teams/engineering&#34;&gt;&lt;img alt=&#34;Bumble Inc&#34; width=&#34;256px&#34; src=&#34;https://github.com/krzysztofzablocki/Sourcery/assets/1468993/159e0943-c890-42b7-9de7-9de9e70dd720&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://airbnb.io/&#34;&gt;&lt;img alt=&#34;Airbnb Engineering&#34; width=&#34;128px&#34; src=&#34;https://github.com/krzysztofzablocki/Sourcery/assets/1468993/b1c06e1c-06da-4a77-a4f1-7dabd02bbaba&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Sourcery is available under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Sourcery/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;p&gt;This tool is powered by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylef/Stencil&#34;&gt;Stencil&lt;/a&gt; and few other libs by &lt;a href=&#34;https://github.com/kylef&#34;&gt;Kyle Fuller&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you! to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/faktory&#34;&gt;Mariusz Ostrowski&lt;/a&gt; for creating the logo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/artsy/eidolon&#34;&gt;Artsy Eidolon&lt;/a&gt; team, because we use their codebase as a stub data for performance testing the parser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AliSoftware&#34;&gt;Olivier Halligon&lt;/a&gt; for showing me his setup scripts for CLI tools which are powering our rakefile.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpsim&#34;&gt;JP Simard&lt;/a&gt; for creating &lt;a href=&#34;https://github.com/jpsim/SourceKitten&#34;&gt;SourceKitten&lt;/a&gt; that originally powered Sourcery and was instrumental in making this project happen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Libraries / Tools&lt;/h2&gt; &#xA;&lt;p&gt;If you want to generate code for asset related data like .xib, .storyboards etc. use &lt;a href=&#34;https://github.com/AliSoftware/SwiftGen&#34;&gt;SwiftGen&lt;/a&gt;. SwiftGen and Sourcery are complementary tools.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to check my other libraries and tools, especially:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/KZPlayground&#34;&gt;KZPlayground&lt;/a&gt; - Powerful playgrounds for Swift and Objective-C&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/KZFileWatchers&#34;&gt;KZFileWatchers&lt;/a&gt; - Daemon for observing local and remote file changes, used for building other developer tools (Sourcery uses it)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;http://twitter.com/merowing_&#34;&gt;follow me on Twitter&lt;/a&gt; for news/updates about other projects I am creating.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PureKFD/PureKFD</title>
    <updated>2024-02-01T02:10:30Z</updated>
    <id>tag:github.com,2024-02-01:/PureKFD/PureKFD</id>
    <link href="https://github.com/PureKFD/PureKFD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A KFD Focused Package Manager that supports 14.0-16.6.1!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;right&#34;&gt; &lt;img align=&#34;right&#34; height=&#34;140&#34; src=&#34;https://github.com/PureKFD/PureKFD/raw/main/Icon.png?raw=true&#34; alt=&#34;PureKFD Logo&#34; style=&#34;float: right; border-radius: 10px;&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;left&#34;&gt;PureKFD - The Purest iOS Toolbox&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/PureKFD/PureKFD/releases/latest&#34;&gt;Download&lt;/a&gt;&lt;/strong&gt; • &lt;strong&gt;&lt;a href=&#34;https://discord.gg/Mve4nWJMrz&#34;&gt;Discord&lt;/a&gt;&lt;/strong&gt; • &lt;strong&gt;&lt;a href=&#34;https://twitter.com/Lrdsnow101&#34;&gt;Twitter&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;PureKFD is a KFD Focused Package Manager, supporting iOS versions 14.0 through 16.6.1 using KFD &lt;code&gt;CVE-2023-41974&lt;/code&gt; and MDC &lt;code&gt;CVE-2022-46689&lt;/code&gt;. PureKFD allows users to customize their experience through a user-friendly interface, utilizing community-developed tweaks available from the community’s repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatibility:&lt;/strong&gt; Ensure your iOS device is running an iOS version 14.0 through 16.6.1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Installation:&lt;/strong&gt; Download PureKFD from the &lt;a href=&#34;https://github.com/PureKFD/PureKFD/releases/latest&#34;&gt;github releases&lt;/a&gt; for the latest release or &lt;a href=&#34;https://discord.gg/Mve4nWJMrz&#34;&gt;our discord&lt;/a&gt; for the latest betas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customize:&lt;/strong&gt; Explore the vast array of tweaks, personalize your iOS experience, and make your device truly yours.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Lrdsnow&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Main Developer&amp;amp;logo=github&amp;amp;logoColor=000000&amp;amp;label=Lrdsnow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/asdfugil&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Developer&amp;amp;logo=github&amp;amp;logoColor=000000&amp;amp;label=Nick Chan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/leminlimez&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Springboard Color Manager&amp;amp;color=768CFF&amp;amp;logo=github&amp;amp;logoColor=000000&amp;amp;label=leminlimez&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://icons8.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Plumpy Icons&amp;amp;logo=icons8&amp;amp;logoColor=1FB141&amp;amp;label=icons8&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emmikat&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=M1/M2 Fixes&amp;amp;logo=github&amp;amp;logoColor=000000&amp;amp;label=emmikat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dhinakg&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=M1/M2 Fixes&amp;amp;logo=github&amp;amp;logoColor=000000&amp;amp;label=dhinakg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lilmayofuksu&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=M1/M2 Fixes&amp;amp;logo=github&amp;amp;logoColor=000000&amp;amp;label=lilmayofuksu&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/noxwell&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=M1/M2 Fixes&amp;amp;logo=github&amp;amp;logoColor=000000&amp;amp;label=noxwell&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/users/455513497288310785&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Icon/Tweak Creator/Translator&amp;amp;logo=discord&amp;amp;logoColor=454FBF&amp;amp;label=dor4a&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/users/424899221267939328&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Icon/Tweak Creator&amp;amp;logo=discord&amp;amp;logoColor=454FBF&amp;amp;label=hackzy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/users/669665537051197491&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Icon/Tweak Creator&amp;amp;logo=discord&amp;amp;logoColor=454FBF&amp;amp;label=dreelpoop_er&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/olivertzeng&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Translator&amp;amp;logo=github&amp;amp;logoColor=000000&amp;amp;label=Oliver Tzeng&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/users/1070904865657729035&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Icon Creator&amp;amp;logo=discord&amp;amp;logoColor=454FBF&amp;amp;label=lunginspector&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/users/717985587235258388&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Icon Creator&amp;amp;logo=discord&amp;amp;logoColor=454FBF&amp;amp;label=k3wl.4id&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/users/995151326264705074&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Icon Creator&amp;amp;logo=discord&amp;amp;logoColor=454FBF&amp;amp;label=_severalpeople_&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/users/822833988997218314&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Icon Creator&amp;amp;logo=discord&amp;amp;logoColor=454FBF&amp;amp;label=mildpeppercat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/users/672886506859266051&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=social&amp;amp;message=Icon Creator&amp;amp;logo=discord&amp;amp;logoColor=454FBF&amp;amp;label=modmenus&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>