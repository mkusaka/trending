<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:54:14Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>seemoo-lab/openhaystack</title>
    <updated>2022-06-02T02:54:14Z</updated>
    <id>tag:github.com,2022-06-02:/seemoo-lab/openhaystack</id>
    <link href="https://github.com/seemoo-lab/openhaystack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build your own &#39;AirTags&#39; üè∑ today! Framework for tracking personal Bluetooth devices via Apple&#39;s massive Find My network.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/Icon/OpenHaystackIcon.png&#34; alt=&#34;OpenHaystack application icon&#34; height=&#34;42&#34; width=&#34;42&#34; valign=&#34;bottom&#34;&gt; OpenHaystack&lt;/h1&gt; &#xA;&lt;p&gt;OpenHaystack is a framework for tracking personal Bluetooth devices via Apple&#39;s massive Find My network. Use it to create your own tracking &lt;em&gt;tags&lt;/em&gt; that you can append to physical objects (keyrings, backpacks, ...) or integrate it into other Bluetooth-capable devices such as notebooks.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/OpenHaystack-Screenshot.png&#34; alt=&#34;Screenshot of the app&#34; width=&#34;701&#34;&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#what-is-openhaystack&#34;&gt;What is &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#history&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-use-openhaystack&#34;&gt;How to use &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#system-requirements&#34;&gt;System requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-does-apples-find-my-network-work&#34;&gt;How does Apple&#39;s Find My network work?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#pairing-1&#34;&gt;Pairing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#losing-2&#34;&gt;Losing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#finding-3&#34;&gt;Finding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#searching-4&#34;&gt;Searching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;How to track other Bluetooth devices?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#openhaystack-mobile&#34;&gt;OpenHaystack Mobile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#authors&#34;&gt;Authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack is an application that allows you to create your own accessories that are tracked by Apple&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-does-apples-find-my-network-work&#34;&gt;Find My network&lt;/a&gt;. All you need is a Mac and a &lt;a href=&#34;https://microbit.org/&#34;&gt;BBC micro:bit&lt;/a&gt; or any &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;other Bluetooth-capable device&lt;/a&gt;. By using the app, you can track your accessories anywhere on earth without cellular coverage. Nearby iPhones will discover your accessories and upload their location to Apple&#39;s servers when they have a network connection.&lt;/p&gt; &#xA;&lt;h3&gt;History&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack is the result of reverse-engineering and security analysis work of Apple&#39;s &lt;em&gt;Find My network&lt;/em&gt; (or &lt;em&gt;offline finding&lt;/em&gt;). We at the &lt;a href=&#34;https://seemoo.de&#34;&gt;Secure Mobile Networking Lab&lt;/a&gt; of TU Darmstadt started analyzing offline finding after its initial announcement in June 2019. We identified how Apple devices can be found by iPhones devices, even when they are offline through this work. The whole system is a clever combination of Bluetooth advertisements, public-key cryptography, and a central database of encrypted location reports. We disclosed a specification of the closed parts of offline finding and conducted a comprehensive security and privacy analysis. We found two distinct vulnerabilities. The most severe one, which allowed a malicious application to access location data, has meanwhile been fixed by Apple (&lt;a href=&#34;https://support.apple.com/en-us/HT211849&#34;&gt;CVE-2020-9986&lt;/a&gt;). For more information about the security analysis, please read &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;our paper&lt;/a&gt;. Since its release, we received quite a bit of &lt;a href=&#34;https://owlink.org/press/&#34;&gt;press and media coverage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Disclaimer&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack is experimental software. The code is untested and incomplete. For example, OpenHaystack accessories using our &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware&lt;/a&gt; broadcast a fixed public key and, therefore, are trackable by other devices in proximity (this might change in a future release). OpenHaystack is not affiliated with or endorsed by Apple Inc.&lt;/p&gt; &#xA;&lt;h2&gt;How to use &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack consists of two components. First, we provide a &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/OpenHaystack&#34;&gt;macOS application&lt;/a&gt; that can display the last reported location of your personal Bluetooth devices. Second, the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware image&lt;/a&gt; enables Bluetooth devices to broadcast beacons that make them discoverable by iPhones.&lt;/p&gt; &#xA;&lt;h3&gt;System requirements&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack requires macOS 11 (Big Sur).&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The OpenHaystack application requires a custom plugin for Apple Mail. It is used to download location reports from Apple&#39;s servers via a private API (technical explanation: the plugin inherits Apple Mail&#39;s entitlements required to use this API). Therefore, the installation procedure is slightly different and requires you to temporarily disable &lt;a href=&#34;https://support.apple.com/guide/security/gatekeeper-and-runtime-protection-sec5599b66df/1/web/1&#34;&gt;Gatekeeper&lt;/a&gt;. Our plugin does not access any other private data such as emails (see &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/OpenHaystack/OpenHaystackMail&#34;&gt;source code&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a precompiled binary release from our &lt;a href=&#34;https://github.com/seemoo-lab/openhaystack/releases&#34;&gt;GitHub page&lt;/a&gt;.&lt;br&gt; &lt;em&gt;Alternative:&lt;/em&gt; build the application from source via Xcode.&lt;/li&gt; &#xA; &lt;li&gt;Open OpenHaystack. This will ask you to install the Mail plugin in &lt;code&gt;~/Library/Mail/Bundle&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and run &lt;code&gt;sudo spctl --master-disable&lt;/code&gt;, which will disable Gatekeeper and allow our Apple Mail plugin to run.&lt;/li&gt; &#xA; &lt;li&gt;Open Apple Mail. Go to &lt;em&gt;Preferences&lt;/em&gt; ‚Üí &lt;em&gt;General&lt;/em&gt; ‚Üí &lt;em&gt;Manage Plug-Ins...&lt;/em&gt; and activate the checkbox next to &lt;em&gt;OpenHaystackMail.mailbundle&lt;/em&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the &lt;em&gt;Manage Plug-Ins...&lt;/em&gt; button does not appear. Run this command in terminal &lt;code&gt;sudo defaults write &#34;/Library/Preferences/com.apple.mail&#34; EnableBundles 1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Allow access and restart Mail.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and enter &lt;code&gt;sudo spctl --master-enable&lt;/code&gt;, which will enable Gatekeeper again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adding a new accessory.&lt;/strong&gt; To create a new accessory, you just need to enter a name for it and optionally select a suitable icon and a color. The app then generates a new key pair that is used to encrypt and decrypt the location reports. The private key is stored in your Mac&#39;s keychain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deploy to device.&lt;/strong&gt; Connect a &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;supported device&lt;/a&gt; via USB to your Mac and hit the &lt;em&gt;Deploy&lt;/em&gt; button next to the accessory&#39;s name and choose the corresponding. Instead of using OpenHaystack&#39;s integrated deployment, you may also copy the public key used for advertising (right click on accessory) and deploy it manually.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Display devices&#39; locations.&lt;/strong&gt; It can take up to 30 minutes until you will see the first location report on the map on the right side. The map will always show all your items&#39; most recent locations. You can click on every item to check when the last update was received. By clicking the reload button, you can update the location reports.&lt;/p&gt; &#xA;&lt;h2&gt;How does Apple&#39;s Find My network work?&lt;/h2&gt; &#xA;&lt;p&gt;We briefly explain Apple&#39;s offline finding system (aka &lt;a href=&#34;https://developer.apple.com/find-my/&#34;&gt;&lt;em&gt;Find My network&lt;/em&gt;&lt;/a&gt;). Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;PETS paper and Apple&#39;s accessory specification&lt;/a&gt; for more details. We provide a schematic overview (from our paper) and explain how we integrate the different steps in OpenHaystack below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/FindMyOverview.png&#34; alt=&#34;Find My Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pairing (1)&lt;/h3&gt; &#xA;&lt;p&gt;To use Apple&#39;s Find My network, we generate a public-private key pair on an elliptic curve (P-224). The private key remains on the Mac securely stored in the keychain, and the public key is deployed on the accessory, e.g., an attached micro:bit.&lt;/p&gt; &#xA;&lt;h3&gt;Losing (2)&lt;/h3&gt; &#xA;&lt;p&gt;In short, the accessories broadcast the public key as Bluetooth Low Energy (BLE) advertisements (see &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware&lt;/a&gt;). Nearby iPhones will not be able to distinguish our accessories from a genuine Apple device or certified accessory.&lt;/p&gt; &#xA;&lt;h3&gt;Finding (3)&lt;/h3&gt; &#xA;&lt;p&gt;When a nearby iPhone receives a BLE advertisement, the iPhone fetches its current location via GPS, encrypts it using public key from the advertisement, and uploads the encrypted report to Apple&#39;s server. All iPhones on iOS 13 or newer do this by default. OpenHaystack is not involved in this step.&lt;/p&gt; &#xA;&lt;h3&gt;Searching (4)&lt;/h3&gt; &#xA;&lt;p&gt;Apple does not know which encrypted locations belong to which Apple account or device. Therefore, every Apple user can download any location report as long as they know the corresponding public key. This is not a security issue: all reports are end-to-end encrypted and cannot be decrypted unless one knows the corresponding private key (stored in the keychain). We leverage this feature to download the reports from Apple that have been created for our OpenHaystack accessories. We use our private keys to decrypt the location reports and show the most recent one on the map.&lt;/p&gt; &#xA;&lt;p&gt;Apple protects their database against arbitrary access by requiring an authenticated Apple user to download location reports. We use our Apple Mail plugin, which runs with elevated privileges, to access the required authentication information. The OpenHaystack app communicates with the plugin while downloading reports. This is why you need to keep Mail open while using OpenHaystack.&lt;/p&gt; &#xA;&lt;h2&gt;How to track other Bluetooth devices?&lt;/h2&gt; &#xA;&lt;p&gt;In principle, any Bluetooth device can be turned into an OpenHaystack accessory that is trackable via Apple&#39;s Find My network. Currently, we provide a convenient deployment method of our OpenHaystack firmwares for a small number of embedded devices (see table below). We also support Linux devices via our generic HCI script. Feel free to port OpenHaystack to other devices that support Bluetooth Low Energy based on the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;source code of our firmware&lt;/a&gt; and the specification in &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;our paper&lt;/a&gt;. Please share your results with us!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Tested on&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Deploy via app&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/Microbit_v1&#34;&gt;Nordic nRF51&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;BBC micro:bit v1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úì&lt;/td&gt; &#xA;   &lt;td&gt;Only supports nRF51822 at this time (see issue #6).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/ESP32&#34;&gt;Espressif ESP32&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SP32-WROOM, ESP32-WROVER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úì&lt;/td&gt; &#xA;   &lt;td&gt;Deployment can take up to 3 minutes. Requires Python 3. Thanks &lt;strong&gt;@fhessel&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/Linux_HCI&#34;&gt;Linux HCI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Raspberry Pi 4 w/ Raspbian&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Should support any Linux machine.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/Setup.jpg&#34; alt=&#34;Setup&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;OpenHaystack Mobile&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack Mobile is a complete reimplementation of the OpenHaystack macOS application for smartphones. The app provides the same functionality to create and track accessories and aims to increase the usability, especially for new users. In contrast to the macOS application, the location reports cannot be fetched directly on the smartphone, so the app requires a proxy server hosted on Mac hardware to access the Find My network. The proxy server can be accessed over a network by multiple users simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;To connect to your proxy server set the correct URL in: openhaystack-mobile/lib/findMy/reports_fetcher.dart&lt;/p&gt; &#xA;&lt;p&gt;&lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/mobile-map-view.png&#34;&gt; &lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/mobile-accessory-history.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenHaystack Mobile is built with the cross-platform &lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter framework&lt;/a&gt; and currently runs on Android and iOS. More information about the app and usage instructions can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/openhaystack-mobile&#34;&gt;openhaystack-mobile&lt;/a&gt; folder of this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alexander Heinrich&lt;/strong&gt; (&lt;a href=&#34;https://github.com/Sn0wfreezeDev&#34;&gt;@Sn0wfreezeDev&lt;/a&gt;, &lt;a href=&#34;mailto:aheinrich@seemoo.tu-darmstadt.de&#34;&gt;email&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Milan Stute&lt;/strong&gt; (&lt;a href=&#34;https://github.com/schmittner&#34;&gt;@schmittner&lt;/a&gt;, &lt;a href=&#34;mailto:mstute@seemoo.tu-darmstadt.de&#34;&gt;email&lt;/a&gt;, &lt;a href=&#34;https://seemoo.de/mstute&#34;&gt;web&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alexander Heinrich, Milan Stute, Tim Kornhuber, Matthias Hollick. &lt;strong&gt;Who Can &lt;em&gt;Find My&lt;/em&gt; Devices? Security and Privacy of Apple&#39;s Crowd-Sourced Bluetooth Location Tracking System.&lt;/strong&gt; &lt;em&gt;Proceedings on Privacy Enhancing Technologies (PoPETs)&lt;/em&gt;, 2021. &lt;a href=&#34;https://doi.org/10.2478/popets-2021-0045&#34;&gt;doi:10.2478/popets-2021-0045&lt;/a&gt; &lt;a href=&#34;https://www.petsymposium.org/2021/files/papers/issue3/popets-2021-0045.pdf&#34;&gt;üìÑ Paper&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2103.02282&#34;&gt;üìÑ Preprint&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Alexander Heinrich, Milan Stute, and Matthias Hollick. &lt;strong&gt;DEMO: OpenHaystack: A Framework for Tracking Personal Bluetooth Devices via Apple‚Äôs Massive Find My Network.&lt;/strong&gt; &lt;em&gt;14th ACM Conference on Security and Privacy in Wireless and Mobile (WiSec ‚Äô21)&lt;/em&gt;, 2021.&lt;/li&gt; &#xA; &lt;li&gt;Tim Kornhuber. &lt;strong&gt;Analysis of Apple&#39;s Crowd-Sourced Location Tracking System.&lt;/strong&gt; &lt;em&gt;Technical University of Darmstadt&lt;/em&gt;, Master&#39;s thesis, 2020.&lt;/li&gt; &#xA; &lt;li&gt;Apple Inc. &lt;strong&gt;Find My Network Accessory Specification ‚Äì Developer Preview ‚Äì Release R3.&lt;/strong&gt; 2020. &lt;a href=&#34;https://developer.apple.com/find-my/&#34;&gt;üìÑ Download&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/LICENSE&#34;&gt;&lt;strong&gt;GNU Affero General Public License v3.0&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Swinject/Swinject</title>
    <updated>2022-06-02T02:54:14Z</updated>
    <id>tag:github.com,2022-06-02:/Swinject/Swinject</id>
    <link href="https://github.com/Swinject/Swinject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dependency injection framework for Swift with iOS/macOS/Linux&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/13637225?v=3&amp;amp;s=600&#34; width=&#34;33%&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Swinject&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/Swinject/Swinject&#34;&gt;&lt;img src=&#34;https://travis-ci.com/Swinject/Swinject.svg?branch=master&#34; alt=&#34;Travis CI Com&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/1ucas/Swinject/actions/workflows/Project%20Testing.yml/badge.svg?branch=master&#34; alt=&#34;Github Actions&#34;&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Swinject&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Swinject.svg?style=flat&#34; alt=&#34;CocoaPods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Swinject&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Swinject.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Swinject&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg?sanitize=true&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-4.2--5.4-F16D39.svg?style=flat&#34; alt=&#34;Swift Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swinject is a lightweight &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;dependency injection&lt;/a&gt; framework for Swift.&lt;/p&gt; &#xA;&lt;p&gt;Dependency injection (DI) is a software design pattern that implements Inversion of Control (IoC) for resolving dependencies. In the pattern, Swinject helps your app split into loosely-coupled components, which can be developed, tested and maintained more easily. Swinject is powered by the Swift generic type system and first class functions to define dependencies of your app simply and fluently.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/README.md#user-content-pure-swift-type-support&#34;&gt;Pure Swift Type Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/DIContainer.md#registration-with-arguments-to-di-container&#34;&gt;Injection with Arguments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/InjectionPatterns.md&#34;&gt;Initializer/Property/Method Injections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/InjectionPatterns.md#user-content-initialization-callback&#34;&gt;Initialization Callback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/CircularDependencies.md&#34;&gt;Circular Dependency Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ObjectScopes.md&#34;&gt;Object Scopes as None (Transient), Graph, Container (Singleton) and Hierarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support of both Reference and &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Misc.md#value-types&#34;&gt;Value Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Misc.md#self-registration-self-binding&#34;&gt;Self-registration (Self-binding)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ContainerHierarchy.md&#34;&gt;Container Hierarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ThreadSafety.md&#34;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Assembler.md&#34;&gt;Modular Components&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectPropertyLoader&#34;&gt;SwinjectPropertyLoader&lt;/a&gt;&lt;/strong&gt;: Loading property values from resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectStoryboard&#34;&gt;SwinjectStoryboard&lt;/a&gt;&lt;/strong&gt;: Automatic dependency injection via Storyboard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/Swinject-CodeGen&#34;&gt;Swinject-CodeGen&lt;/a&gt;&lt;/strong&gt;: Type-safe code generation of &lt;code&gt;Container&lt;/code&gt; from a CSV/YAML file defining dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectAutoregistration&#34;&gt;SwinjectAutoregistration&lt;/a&gt;&lt;/strong&gt;: Automatic registration of services by leveraging the Swift Generics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 9.0+ / Mac OS X 10.10+ / watchOS 2.0+ / tvOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.2+&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.2+&lt;/li&gt; &#xA; &lt;li&gt;Carthage 0.18+ (if you use)&lt;/li&gt; &#xA; &lt;li&gt;CocoaPods 1.1.1+ (if you use)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Swinject is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, or &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To install Swinject with Carthage, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Swinject/Swinject&#34;&#xA;&#xA;# Uncomment if you use SwinjectStoryboard&#xA;# github &#34;Swinject/SwinjectStoryboard&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update --no-use-binaries&lt;/code&gt; command or just &lt;code&gt;carthage update&lt;/code&gt;. For details of the installation and usage of Carthage, visit &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;its project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;To install Swinject with CocoaPods, add the following lines to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;9.0&#39; # or platform :osx, &#39;10.10&#39; if your target is OS X.&#xA;use_frameworks!&#xA;&#xA;pod &#39;Swinject&#39;&#xA;&#xA;# Uncomment if you use SwinjectStoryboard&#xA;# pod &#39;SwinjectStoryboard&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt; command. For details of the installation and usage of CocoaPods, visit &lt;a href=&#34;https://cocoapods.org&#34;&gt;its official website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;in &lt;code&gt;Package.swift&lt;/code&gt; add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    // Dependencies declare other packages that this package depends on.&#xA;    // .package(url: /* package url */, from: &#34;1.0.0&#34;),&#xA;    .package(url: &#34;https://github.com/Swinject/Swinject.git&#34;, from: &#34;2.8.0&#34;)&#xA;],&#xA;targets: [&#xA;    .target(&#xA;        name: &#34;MyProject&#34;,&#xA;        dependencies: [..., &#34;Swinject&#34;]&#xA;    )&#xA;    ...&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation&#34;&gt;Technical documents&lt;/a&gt; including patterns of dependency injection and examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/Swinject/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, register a service and component pair to a &lt;code&gt;Container&lt;/code&gt;, where the component is created by the registered closure as a factory. In this example, &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;PetOwner&lt;/code&gt; are component classes implementing &lt;code&gt;Animal&lt;/code&gt; and &lt;code&gt;Person&lt;/code&gt; service protocols, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let container = Container()&#xA;container.register(Animal.self) { _ in Cat(name: &#34;Mimi&#34;) }&#xA;container.register(Person.self) { r in&#xA;    PetOwner(pet: r.resolve(Animal.self)!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then get an instance of a service from the container. The person is resolved to a pet owner, and playing with the cat named Mimi!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person = container.resolve(Person.self)!&#xA;person.play() // prints &#34;I&#39;m playing with Mimi.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where definitions of the protocols and classes are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Animal {&#xA;    var name: String? { get }&#xA;}&#xA;&#xA;class Cat: Animal {&#xA;    let name: String?&#xA;&#xA;    init(name: String?) {&#xA;        self.name = name&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Person {&#xA;    func play()&#xA;}&#xA;&#xA;class PetOwner: Person {&#xA;    let pet: Animal&#xA;&#xA;    init(pet: Animal) {&#xA;        self.pet = pet&#xA;    }&#xA;&#xA;    func play() {&#xA;        let name = pet.name ?? &#34;someone&#34;&#xA;        print(&#34;I&#39;m playing with \(name).&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the &lt;code&gt;pet&lt;/code&gt; of &lt;code&gt;PetOwner&lt;/code&gt; is automatically set as the instance of &lt;code&gt;Cat&lt;/code&gt; when &lt;code&gt;Person&lt;/code&gt; is resolved to the instance of &lt;code&gt;PetOwner&lt;/code&gt;. If a container already set up is given, you do not have to care what are the actual types of the services and how they are created with their dependency.&lt;/p&gt; &#xA;&lt;h2&gt;Where to Register Services&lt;/h2&gt; &#xA;&lt;p&gt;Services must be registered to a container before they are used. The typical registration approach will differ depending upon whether you are using &lt;code&gt;SwinjectStoryboard&lt;/code&gt; or not.&lt;/p&gt; &#xA;&lt;p&gt;The following view controller class is used in addition to the protocols and classes above in the examples below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PersonViewController: UIViewController {&#xA;    var person: Person?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With SwinjectStoryboard&lt;/h3&gt; &#xA;&lt;p&gt;Import SwinjectStoryboard at the top of your swift source file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwinjectStoryboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services should be registered in an extension of &lt;code&gt;SwinjectStoryboard&lt;/code&gt; if you use &lt;code&gt;SwinjectStoryboard&lt;/code&gt;. Refer to &lt;a href=&#34;https://github.com/Swinject/SwinjectStoryboard&#34;&gt;the project page of SwinjectStoryboard&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension SwinjectStoryboard {&#xA;    @objc class func setup() {&#xA;        defaultContainer.register(Animal.self) { _ in Cat(name: &#34;Mimi&#34;) }&#xA;        defaultContainer.register(Person.self) { r in&#xA;            PetOwner(pet: r.resolve(Animal.self)!)&#xA;        }&#xA;        defaultContainer.register(PersonViewController.self) { r in&#xA;            let controller = PersonViewController()&#xA;            controller.person = r.resolve(Person.self)&#xA;            return controller&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Without SwinjectStoryboard&lt;/h3&gt; &#xA;&lt;p&gt;If you do not use &lt;code&gt;SwinjectStoryboard&lt;/code&gt; to instantiate view controllers, services should be registered to a container in your application&#39;s &lt;code&gt;AppDelegate&lt;/code&gt;. Registering before exiting &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; will ensure that the services are setup appropriately before they are used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;    var window: UIWindow?&#xA;    let container: Container = {&#xA;        let container = Container()&#xA;        container.register(Animal.self) { _ in Cat(name: &#34;Mimi&#34;) }&#xA;        container.register(Person.self) { r in&#xA;            PetOwner(pet: r.resolve(Animal.self)!)&#xA;        }&#xA;        container.register(PersonViewController.self) { r in&#xA;            let controller = PersonViewController()&#xA;            controller.person = r.resolve(Person.self)&#xA;            return controller&#xA;        }&#xA;        return container&#xA;    }()&#xA;&#xA;    func application(&#xA;        _ application: UIApplication,&#xA;        didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -&amp;gt; Bool {&#xA;&#xA;        // Instantiate a window.&#xA;        let window = UIWindow(frame: UIScreen.main.bounds)&#xA;        window.makeKeyAndVisible()&#xA;        self.window = window&#xA;&#xA;        // Instantiate the root view controller with dependencies injected by the container.&#xA;        window.rootViewController = container.resolve(PersonViewController.self)&#xA;&#xA;        return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the example uses a convenience initializer taking a closure to register services to the new instance of &lt;code&gt;Container&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Play in Playground!&lt;/h2&gt; &#xA;&lt;p&gt;The project contains &lt;code&gt;Sample-iOS.playground&lt;/code&gt; to demonstrate the features of Swinject. Download or clone the project, run the playground, modify it, and play with it to learn Swinject.&lt;/p&gt; &#xA;&lt;p&gt;To run the playground in the project, first build the project, then select &lt;code&gt;Editor &amp;gt; Execute Playground&lt;/code&gt; menu in Xcode.&lt;/p&gt; &#xA;&lt;h2&gt;Example Apps&lt;/h2&gt; &#xA;&lt;p&gt;Some example apps using Swinject can be found on &lt;a href=&#34;https://github.com/search?o=desc&amp;amp;q=swinject&amp;amp;s=updated&amp;amp;type=Repositories&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Blog Posts&lt;/h2&gt; &#xA;&lt;p&gt;The following blog posts introduce the concept of dependency injection and Swinject.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/14223279-dependency-injection-tutorial-for-ios-getting-started&#34;&gt;Dependency Injection Tutorial for iOS: Getting Started&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://www.raywenderlich.com/u/galata&#34;&gt;Irina Galata&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/17-swinject-tutorial-for-ios-getting-started&#34;&gt;Swinject Tutorial for iOS: Getting Started&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://www.raywenderlich.com/u/gemmakbarlow&#34;&gt;Gemma Barlow&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/flawless-app-stories/ios-dependency-injection-using-swinject-9c4ceff99e41&#34;&gt;iOS Dependency Injection Using Swinject&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://ali-akhtar.medium.com&#34;&gt;Ali Akhtar&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/its-tinkoff/di-in-ios-complete-guide-cd76a079d2d&#34;&gt;DI in iOS: Complete guide&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://medium.com/@batrakov.vitaly&#34;&gt;Vitaly Batrakov&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks the authors!&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guide&lt;/h2&gt; &#xA;&lt;p&gt;A guide to &lt;a href=&#34;https://github.com/Swinject/Swinject/issues&#34;&gt;submit issues&lt;/a&gt;, to ask general questions, or to &lt;a href=&#34;https://github.com/Swinject/Swinject/pulls&#34;&gt;open pull requests&lt;/a&gt; is &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Question?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/swinject&#34;&gt;Stack Overflow&lt;/a&gt; we are trying to monitor questions tagged &lt;code&gt;swinject&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The DI container features of Swinject are inspired by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ninject.org&#34;&gt;Ninject&lt;/a&gt; - &lt;a href=&#34;https://github.com/enkari&#34;&gt;Enkari, Ltd&lt;/a&gt; and &lt;a href=&#34;https://github.com/ninject/Ninject/graphs/contributors&#34;&gt;the Ninject project contributors&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://autofac.org&#34;&gt;Autofac&lt;/a&gt; - &lt;a href=&#34;https://github.com/autofac/Autofac&#34;&gt;Autofac Project&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and highly inspired by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://funq.codeplex.com&#34;&gt;Funq&lt;/a&gt; - &lt;a href=&#34;http://www.codeplex.com/site/users/view/dcazzulino&#34;&gt;Daniel Cazzulino&lt;/a&gt; and &lt;a href=&#34;http://funq.codeplex.com/team/view&#34;&gt;the project team&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/LICENSE&#34;&gt;LICENSE file&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>