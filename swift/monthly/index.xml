<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T02:23:27Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danielgindi/Charts</title>
    <updated>2023-06-01T02:23:27Z</updated>
    <id>tag:github.com,2023-06-01:/danielgindi/Charts</id>
    <link href="https://github.com/danielgindi/Charts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Beautiful charts for iOS/tvOS/OSX! The Apple side of the crossplatform MPAndroidChart.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Version 4.0.0&lt;/strong&gt;, synced to &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart/commit/f6a398b&#34;&gt;MPAndroidChart #f6a398b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/danielgindi/Charts/master/Assets/feature_graphic.png&#34; alt=&#34;alt tag&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/Charts.svg?sanitize=true&#34; alt=&#34;Supported Platforms&#34;&gt; &lt;a href=&#34;https://github.com/danielgindi/Charts/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/danielgindi/Charts.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/charts&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Charts.svg?sanitize=true&#34; alt=&#34;Latest pod release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/danielgindi/Charts&#34;&gt;&lt;img src=&#34;https://travis-ci.org/danielgindi/Charts.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/danielgindi/Charts&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/danielgindi/Charts/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/danielgindi/Charts?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/danielgindi/Charts.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/danielgindi/Charts&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Just a heads up: Charts 3.0 has some breaking changes. Please read &lt;a href=&#34;https://github.com/danielgindi/Charts/releases/tag/v3.0.0&#34;&gt;the release/migration notes&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;h3&gt;Another heads up: ChartsRealm is now in a &lt;a href=&#34;https://github.com/danielgindi/ChartsRealm&#34;&gt;separate repo&lt;/a&gt;. Pods is also now &lt;code&gt;Charts&lt;/code&gt; and &lt;code&gt;ChartsRealm&lt;/code&gt;, instead of &lt;del&gt;&lt;code&gt;Charts/Core&lt;/code&gt;&lt;/del&gt; and &lt;del&gt;&lt;code&gt;Charts/Realm&lt;/code&gt;&lt;/del&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;One more heads up: As Swift evolves, if you are not using the latest Swift compiler, you shouldn&#39;t check out the master branch. Instead, you should go to the release page and pick up whatever suits you.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 14 / Swift 5.7 (master branch)&lt;/li&gt; &#xA; &lt;li&gt;iOS &amp;gt;= 12.0 (Use as an &lt;strong&gt;Embedded&lt;/strong&gt; Framework)&lt;/li&gt; &#xA; &lt;li&gt;tvOS &amp;gt;= 12.0&lt;/li&gt; &#xA; &lt;li&gt;macOS &amp;gt;= 10.13&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Okay so there&#39;s this beautiful library called &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; by &lt;a href=&#34;https://www.linkedin.com/in/philippjahoda&#34;&gt;Philipp Jahoda&lt;/a&gt; which has become very popular amongst Android developers, but there was no decent solution to create charts for iOS.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve chosen to write it in &lt;code&gt;Swift&lt;/code&gt; as it can be highly optimized by the compiler, and can be used in both &lt;code&gt;Swift&lt;/code&gt; and &lt;code&gt;ObjC&lt;/code&gt; project. The demo project is written in &lt;code&gt;ObjC&lt;/code&gt; to demonstrate how it works.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;An amazing feature&lt;/strong&gt; of this library now, for Android, iOS, tvOS and macOS, is the time it saves you when developing for both platforms, as the learning curve is singleton- it happens only once, and the code stays very similar so developers don&#39;t have to go around and re-invent the app to produce the same output with a different library. (And that&#39;s not even considering the fact that there&#39;s not really another good choice out there currently...)&lt;/p&gt; &#xA;&lt;h2&gt;Having trouble running the demo?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ChartsDemo/ChartsDemo.xcodeproj&lt;/code&gt; is the demo project for iOS/tvOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ChartsDemo-OSX/ChartsDemo-OSX.xcodeproj&lt;/code&gt; is the demo project for macOS&lt;/li&gt; &#xA; &lt;li&gt;Make sure you are running a supported version of Xcode. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Usually it is specified here a few lines above.&lt;/li&gt; &#xA;   &lt;li&gt;In most cases it will be the latest Xcode version.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Make sure that your project supports Swift 5.0&lt;/li&gt; &#xA; &lt;li&gt;Optional: Run &lt;code&gt;carthage checkout&lt;/code&gt; in the project folder, to fetch dependencies (i.e testing dependencies). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you don&#39;t have Carthage - you can get it &lt;a href=&#34;https://github.com/Carthage/Carthage/releases&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In order to correctly compile:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag the &lt;code&gt;Charts.xcodeproj&lt;/code&gt; to your project&lt;/li&gt; &#xA; &lt;li&gt;Go to your target&#39;s settings, hit the &#34;+&#34; under the &#34;Frameworks, Libraries, and Embedded Content&#34; section, and select the Charts.framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@import Charts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;When using Swift in an ObjC project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need to import your Bridging Header. Usually it is &#34;&lt;em&gt;YourProject-Swift.h&lt;/em&gt;&#34;, so in ChartsDemo it&#39;s &#34;&lt;em&gt;ChartsDemo-Swift.h&lt;/em&gt;&#34;. Do not try to actually include &#34;&lt;em&gt;ChartsDemo-Swift.h&lt;/em&gt;&#34; in your project :-)&lt;/li&gt; &#xA; &lt;li&gt;(Xcode 8.1 and earlier) Under &#34;Build Options&#34;, mark &#34;Embedded Content Contains Swift Code&#34;&lt;/li&gt; &#xA; &lt;li&gt;(Xcode 8.2+) Under &#34;Build Options&#34;, mark &#34;Always Embed Swift Standard Libraries&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;When using &lt;a href=&#34;https://realm.io/&#34;&gt;Realm.io&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that the Realm framework is not linked with Charts - it is only there for &lt;em&gt;optional&lt;/em&gt; bindings. Which means that you need to have the framework in your project, and in a compatible version to whatever is compiled with Charts. We will do our best to always compile against the latest version.&lt;/li&gt; &#xA;   &lt;li&gt;You&#39;ll need to add &lt;code&gt;ChartsRealm&lt;/code&gt; as a dependency too.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;3rd party tutorials&lt;/h2&gt; &#xA;&lt;h4&gt;Video tutorials&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mWhwe_tLNE8&amp;amp;list=PL_csAAO9PQ8bjzg-wxEff1Fr0Y5W1hrum&amp;amp;index=5&#34;&gt;Chart in Swift - Setting Up a Basic Line Chart Using iOS Charts(Alex Nagy)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/csd7pyfEXgw&#34;&gt;Charts Framework in SwiftUI - Bar Chart (Stewart Lynch)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Blog posts&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@skoli/using-realm-and-charts-with-swift-3-in-ios-10-40c42e3838c0#.2gyymwfh8&#34;&gt;Using Realm and Charts with Swift 3 in iOS 10 (Sami Korpela)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@OsianSmith/creating-a-line-chart-in-swift-3-and-ios-10-2f647c95392e&#34;&gt;Creating a Line Chart in Swift 3 and iOS 10 (Osian Smith)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/annalizhaz/ChartsForSwiftBasic&#34;&gt;Beginning Set-up and Example Using Charts with Swift 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@HeyDaveTheDev/creating-a-radar-chart-in-swift-5791afcf92f0&#34;&gt;Creating a Radar Chart in Swift (David Piper)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@zzzzbh/plotting-in-ios-using-charts-framework-with-swiftui-222034a2bea6&#34;&gt;Plotting in IOS using Charts framework with SwiftUI (Evgeny Basisty)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@penny-huang/swift-setting-up-a-basic-bar-chart-using-ios-charts-afd6aad96ac&#34;&gt;Set Up a Basic Bar Chart Using iOS-Charts (Penny Huang)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@penny-huang/swift-ios-charts-tutorial-highlight-selected-value-with-a-custom-marker-30ccbf92aa1b&#34;&gt;iOS-Charts Tutorial: Highlight Selected Value With a Custom Marker (Penny Huang)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want your tutorial to show here? Create a PR!&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h4&gt;Can&#39;t compile?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please note the difference between installing a compiled framework from CocoaPods or Carthage, and copying the source code.&lt;/li&gt; &#xA; &lt;li&gt;Please read the &lt;strong&gt;Usage&lt;/strong&gt; section again.&lt;/li&gt; &#xA; &lt;li&gt;Search in the issues&lt;/li&gt; &#xA; &lt;li&gt;Try to politely ask in the issues section&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other problems / feature requests&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search in the issues&lt;/li&gt; &#xA; &lt;li&gt;Try to politely ask in the issues section&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CocoaPods Install&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;pod &#39;Charts&#39;&lt;/code&gt; to your Podfile. &#34;Charts&#34; is the name of the library.&lt;br&gt; For &lt;a href=&#34;https://realm.io/&#34;&gt;Realm&lt;/a&gt; support, please add &lt;code&gt;pod &#39;ChartsRealm&#39;&lt;/code&gt; too.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;del&gt;&lt;code&gt;pod &#39;ios-charts&#39;&lt;/code&gt;&lt;/del&gt; is not the correct library, and refers to a different project by someone else.&lt;/p&gt; &#xA;&lt;h2&gt;Carthage Install&lt;/h2&gt; &#xA;&lt;p&gt;Charts now include Carthage prebuilt binaries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-carthage&#34;&gt;github &#34;danielgindi/Charts&#34; == 4.1.0&#xA;github &#34;danielgindi/Charts&#34; ~&amp;gt; 4.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to build the binaries for a new release, use &lt;code&gt;carthage build --no-skip-current &amp;amp;&amp;amp; carthage archive Charts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Package Manager Install&lt;/h2&gt; &#xA;&lt;p&gt;Swift Package Manager&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/danielgindi/Charts.git&#34;, .upToNextMajor(from: &#34;4.1.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3rd party bindings&lt;/h2&gt; &#xA;&lt;p&gt;Xamarin (by @Flash3001): &lt;em&gt;iOS&lt;/em&gt; - &lt;a href=&#34;https://github.com/Flash3001/iOSCharts.Xamarin&#34;&gt;GitHub&lt;/a&gt;/&lt;a href=&#34;https://www.nuget.org/packages/iOSCharts/&#34;&gt;NuGet&lt;/a&gt;. &lt;em&gt;Android&lt;/em&gt; - &lt;a href=&#34;https://github.com/Flash3001/MPAndroidChart.Xamarin&#34;&gt;GitHub&lt;/a&gt;/&lt;a href=&#34;https://www.nuget.org/packages/MPAndroidChart/&#34;&gt;NuGet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you like what you see here, and want to support the work being done in this repository, you could:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contribute code, issues and pull requests&lt;/li&gt; &#xA; &lt;li&gt;Let people know this library exists (&lt;span&gt;🔥&lt;/span&gt; spread the word &lt;span&gt;🔥&lt;/span&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=68UL6Y8KUPS96&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; (You can buy me a beer, or you can buy me dinner :-)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The author of &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; is the reason that this library exists, and is accepting &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart#donations&#34;&gt;donations&lt;/a&gt; on his page. He deserves them!&lt;/p&gt; &#xA;&lt;h2&gt;Questions &amp;amp; Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are having questions or problems, you should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you are using the latest version of the library. Check the &lt;a href=&#34;https://github.com/danielgindi/Charts/releases&#34;&gt;&lt;strong&gt;release-section&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Study the Android version&#39;s &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart/wiki&#34;&gt;&lt;strong&gt;Documentation-Wiki&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Search or open questions on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/ios-charts&#34;&gt;&lt;strong&gt;stackoverflow&lt;/strong&gt;&lt;/a&gt; with the &lt;code&gt;ios-charts&lt;/code&gt; tag&lt;/li&gt; &#xA; &lt;li&gt;Search &lt;a href=&#34;https://github.com/danielgindi/Charts/issues&#34;&gt;&lt;strong&gt;known issues&lt;/strong&gt;&lt;/a&gt; for your problem (open and closed)&lt;/li&gt; &#xA; &lt;li&gt;Create new issues (please &lt;span&gt;🔥&lt;/span&gt; &lt;strong&gt;search known issues before&lt;/strong&gt; &lt;span&gt;🔥&lt;/span&gt;, do not create duplicate issues)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;8 different chart types&lt;/li&gt; &#xA; &lt;li&gt;Scaling on both axes (with touch-gesture, axes separately or pinch-zoom)&lt;/li&gt; &#xA; &lt;li&gt;Dragging / Panning (with touch-gesture)&lt;/li&gt; &#xA; &lt;li&gt;Combined-Charts (line-, bar-, scatter-, candle-stick-, bubble-)&lt;/li&gt; &#xA; &lt;li&gt;Dual (separate) Axes&lt;/li&gt; &#xA; &lt;li&gt;Customizable Axes (both x- and y-axis)&lt;/li&gt; &#xA; &lt;li&gt;Highlighting values (with customizable popup-views)&lt;/li&gt; &#xA; &lt;li&gt;Save chart to camera-roll / export to PNG/JPEG&lt;/li&gt; &#xA; &lt;li&gt;Predefined color templates&lt;/li&gt; &#xA; &lt;li&gt;Legends (generated automatically, customizable)&lt;/li&gt; &#xA; &lt;li&gt;Animations (build up animations, on both x- and y-axis)&lt;/li&gt; &#xA; &lt;li&gt;Limit lines (providing additional information, maximums, ...)&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable (paints, typefaces, legends, colors, background, gestures, dashed lines, ...)&lt;/li&gt; &#xA; &lt;li&gt;Plotting data directly from &lt;a href=&#34;https://realm.io&#34;&gt;&lt;strong&gt;Realm.io&lt;/strong&gt;&lt;/a&gt; mobile database (&lt;a href=&#34;https://github.com/danielgindi/ChartsRealm&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chart types:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshots are currently taken from the original repository, as they render exactly the same :-)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (with legend, simple design)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_linechart4.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (with legend, simple design)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_linechart3.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (cubic lines)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/cubiclinechart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (gradient fill)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/line_chart_gradient.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Combined-Chart (bar- and linechart in this case)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/combined_chart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;BarChart (with legend, simple design)&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_barchart3.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BarChart (grouped DataSets)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/groupedbarchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Horizontal-BarChart&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/horizontal_barchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PieChart (with selection, ...)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/simpledesign_piechart1.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ScatterChart&lt;/strong&gt; (with squares, triangles, circles, ... and more)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/scatterchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CandleStickChart&lt;/strong&gt; (for financial data)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/candlestickchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BubbleChart&lt;/strong&gt; (area covered by bubbles indicates the value)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/bubblechart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RadarChart&lt;/strong&gt; (spider web chart)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/radarchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Currently there&#39;s no need for documentation for the iOS/tvOS/macOS version, as the API is &lt;strong&gt;95% the same&lt;/strong&gt; as on Android.&lt;br&gt; You can read the official &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; documentation here: &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart/wiki&#34;&gt;&lt;strong&gt;Wiki&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can see the Charts Demo project in both Objective-C and Swift (&lt;a href=&#34;https://github.com/danielgindi/Charts/tree/master/ChartsDemo-iOS&#34;&gt;&lt;strong&gt;ChartsDemo-iOS&lt;/strong&gt;&lt;/a&gt;, as well as macOS &lt;a href=&#34;https://github.com/danielgindi/Charts/tree/master/ChartsDemo-macOS&#34;&gt;&lt;strong&gt;ChartsDemo-macOS&lt;/strong&gt;&lt;/a&gt;) and learn the how-tos from it.&lt;/p&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;p&gt;Goes to &lt;a href=&#34;https://github.com/liuxuan30&#34;&gt;@liuxuan30&lt;/a&gt;, &lt;a href=&#34;https://github.com/petester42&#34;&gt;@petester42&lt;/a&gt; and &lt;a href=&#34;https://github.com/AlBirdie&#34;&gt;@AlBirdie&lt;/a&gt; for new features, bugfixes, and lots and lots of involvement in our open-sourced community! You guys are a huge help to all of those coming here with questions and issues, and I couldn&#39;t respond to all of those without you.&lt;/p&gt; &#xA;&lt;h3&gt;Our amazing sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://debricked.com/&#34;&gt;Debricked&lt;/a&gt;: Use open source securely&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://debricked.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4375169/73585544-25bfa800-44dd-11ea-9661-82519a125302.jpg&#34; alt=&#34;debricked&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2016 Daniel Cohen Gindi &amp;amp; Philipp Jahoda&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>onevcat/Kingfisher</title>
    <updated>2023-06-01T02:23:27Z</updated>
    <id>tag:github.com,2023-06-01:/onevcat/Kingfisher</id>
    <link href="https://github.com/onevcat/Kingfisher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight, pure-Swift library for downloading and caching images from the web.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/logo.png&#34; alt=&#34;Kingfisher&#34; title=&#34;Kingfisher&#34; width=&#34;557&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/onevcat/Kingfisher/actions?query=workflow%3Abuild&#34;&gt;&lt;img src=&#34;https://github.com/onevcat/kingfisher/workflows/build/badge.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/onevcat/Kingfisher/master/documentation/kingfisher&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-Doc-DE5C43.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Kingfisher&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/onevcat/Kingfisher.svg?color=blue&amp;amp;include_prereleases=&amp;amp;sort=semver&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-black&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Kingfisher is a powerful, pure-Swift library for downloading and caching images from the web. It provides you a chance to use a pure-Swift way to work with remote images in your next app.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Asynchronous image downloading and caching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Loading image from either &lt;code&gt;URLSession&lt;/code&gt;-based networking or local provided data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Useful image processors and filters provided.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple-layer hybrid cache for both memory and disk.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fine control on cache behavior. Customizable expiration date and size limit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cancelable downloading and auto-reusing previous downloaded content to improve performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Independent components. Use the downloader, caching system, and image processors separately as you need.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prefetching images and showing them from the cache to boost your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extensions for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;NSImageView&lt;/code&gt;, &lt;code&gt;NSButton&lt;/code&gt;, &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;NSTextAttachment&lt;/code&gt;, &lt;code&gt;WKInterfaceImage&lt;/code&gt;, &lt;code&gt;TVMonogramView&lt;/code&gt; and &lt;code&gt;CPListItem&lt;/code&gt; to directly set an image from a URL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built-in transition animation when setting images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customizable placeholder and indicator while loading images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extensible image processing and image format easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Low Data Mode support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SwiftUI support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Kingfisher 101&lt;/h3&gt; &#xA;&lt;p&gt;The simplest use-case is setting an image to an image view with the &lt;code&gt;UIImageView&lt;/code&gt; extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Kingfisher&#xA;&#xA;let url = URL(string: &#34;https://example.com/image.png&#34;)&#xA;imageView.kf.setImage(with: url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kingfisher will download the image from &lt;code&gt;url&lt;/code&gt;, send it to both memory cache and disk cache, and display it in &lt;code&gt;imageView&lt;/code&gt;. When you set it with the same URL later, the image will be retrieved from the cache and shown immediately.&lt;/p&gt; &#xA;&lt;p&gt;It also works if you use SwiftUI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {&#xA;    KFImage(URL(string: &#34;https://example.com/image.png&#34;)!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;A More Advanced Example&lt;/h3&gt; &#xA;&lt;p&gt;With the powerful options, you can do hard tasks with Kingfisher in a simple way. For example, the code below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Downloads a high-resolution image.&lt;/li&gt; &#xA; &lt;li&gt;Downsamples it to match the image view size.&lt;/li&gt; &#xA; &lt;li&gt;Makes it round cornered with a given radius.&lt;/li&gt; &#xA; &lt;li&gt;Shows a system indicator and a placeholder image while downloading.&lt;/li&gt; &#xA; &lt;li&gt;When prepared, it animates the small thumbnail image with a &#34;fade in&#34; effect.&lt;/li&gt; &#xA; &lt;li&gt;The original large image is also cached to disk for later use, to get rid of downloading it again in a detail view.&lt;/li&gt; &#xA; &lt;li&gt;A console log is printed when the task finishes, either for success or failure.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let url = URL(string: &#34;https://example.com/high_resolution_image.png&#34;)&#xA;let processor = DownsamplingImageProcessor(size: imageView.bounds.size)&#xA;             |&amp;gt; RoundCornerImageProcessor(cornerRadius: 20)&#xA;imageView.kf.indicatorType = .activity&#xA;imageView.kf.setImage(&#xA;    with: url,&#xA;    placeholder: UIImage(named: &#34;placeholderImage&#34;),&#xA;    options: [&#xA;        .processor(processor),&#xA;        .scaleFactor(UIScreen.main.scale),&#xA;        .transition(.fade(1)),&#xA;        .cacheOriginalImage&#xA;    ])&#xA;{&#xA;    result in&#xA;    switch result {&#xA;    case .success(let value):&#xA;        print(&#34;Task done for: \(value.source.url?.absoluteString ?? &#34;&#34;)&#34;)&#xA;    case .failure(let error):&#xA;        print(&#34;Job failed: \(error.localizedDescription)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is a common situation I can meet in my daily work. Think about how many lines you need to write without Kingfisher!&lt;/p&gt; &#xA;&lt;h3&gt;Method Chaining&lt;/h3&gt; &#xA;&lt;p&gt;If you are not a fan of the &lt;code&gt;kf&lt;/code&gt; extension, you can also prefer to use the &lt;code&gt;KF&lt;/code&gt; builder and chained the method invocations. The code below is doing the same thing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Use `kf` extension&#xA;imageView.kf.setImage(&#xA;    with: url,&#xA;    placeholder: placeholderImage,&#xA;    options: [&#xA;        .processor(processor),&#xA;        .loadDiskFileSynchronously,&#xA;        .cacheOriginalImage,&#xA;        .transition(.fade(0.25)),&#xA;        .lowDataMode(.network(lowResolutionURL))&#xA;    ],&#xA;    progressBlock: { receivedSize, totalSize in&#xA;        // Progress updated&#xA;    },&#xA;    completionHandler: { result in&#xA;        // Done&#xA;    }&#xA;)&#xA;&#xA;// Use `KF` builder&#xA;KF.url(url)&#xA;  .placeholder(placeholderImage)&#xA;  .setProcessor(processor)&#xA;  .loadDiskFileSynchronously()&#xA;  .cacheMemoryOnly()&#xA;  .fade(duration: 0.25)&#xA;  .lowDataModeSource(.network(lowResolutionURL))&#xA;  .onProgress { receivedSize, totalSize in  }&#xA;  .onSuccess { result in  }&#xA;  .onFailure { error in }&#xA;  .set(to: imageView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And even better, if later you want to switch to SwiftUI, just change the &lt;code&gt;KF&lt;/code&gt; above to &lt;code&gt;KFImage&lt;/code&gt;, and you&#39;ve done:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    var body: some View {&#xA;        KFImage.url(url)&#xA;          .placeholder(placeholderImage)&#xA;          .setProcessor(processor)&#xA;          .loadDiskFileSynchronously()&#xA;          .cacheMemoryOnly()&#xA;          .fade(duration: 0.25)&#xA;          .lowDataModeSource(.network(lowResolutionURL))&#xA;          .onProgress { receivedSize, totalSize in  }&#xA;          .onSuccess { result in  }&#xA;          .onFailure { error in }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Learn More&lt;/h3&gt; &#xA;&lt;p&gt;To learn the use of Kingfisher by more examples, take a look at the well-prepared &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet&#34;&gt;Cheat Sheet&lt;/a&gt;. There we summarized the most common tasks in Kingfisher, you can get a better idea of what this framework can do. There are also some performance tips, remember to check them too.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 12.0+ / macOS 10.14+ / tvOS 12.0+ / watchOS 5.0+ (if you use only UIKit/AppKit)&lt;/li&gt; &#xA; &lt;li&gt;iOS 14.0+ / macOS 11.0+ / tvOS 14.0+ / watchOS 7.0+ (if you use it in SwiftUI)&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you need support from iOS 10 (UIKit/AppKit) or iOS 13 (SwiftUI), use Kingfisher version 6.x. But it won&#39;t work with Xcode 13.0 and Xcode 13.1 &lt;a href=&#34;https://github.com/onevcat/Kingfisher/issues/1802&#34;&gt;#1802&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you need to use Xcode 13.0 and 13.1 but cannot upgrade to v7, use the &lt;code&gt;version6-xcode13&lt;/code&gt; branch. However, you have to drop iOS 10 support due to another Xcode 13 bug.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;UIKit&lt;/th&gt; &#xA;    &lt;th&gt;SwiftUI&lt;/th&gt; &#xA;    &lt;th&gt;Xcode&lt;/th&gt; &#xA;    &lt;th&gt;Kingfisher&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;iOS 10+&lt;/td&gt; &#xA;    &lt;td&gt;iOS 13+&lt;/td&gt; &#xA;    &lt;td&gt;12&lt;/td&gt; &#xA;    &lt;td&gt;~&amp;gt; 6.3.1&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;iOS 11+&lt;/td&gt; &#xA;    &lt;td&gt;iOS 13+&lt;/td&gt; &#xA;    &lt;td&gt;13&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;version6-xcode13&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;iOS 12+&lt;/td&gt; &#xA;    &lt;td&gt;iOS 14+&lt;/td&gt; &#xA;    &lt;td&gt;13&lt;/td&gt; &#xA;    &lt;td&gt;~&amp;gt; 7.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;A detailed guide for installation can be found in &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Installation-Guide&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;https://github.com/onevcat/Kingfisher.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Up to Next Major&#34; with &#34;7.0.0&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;12.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;MyApp&#39; do&#xA;  pod &#39;Kingfisher&#39;, &#39;~&amp;gt; 7.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;onevcat/Kingfisher&#34; ~&amp;gt; 7.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Migrating&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-7.0-Migration-Guide&#34;&gt;Kingfisher 7.0 Migration&lt;/a&gt; - Kingfisher 7.x is NOT fully compatible with the previous version. However, changes should be trivial or not required at all. Please follow the &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-7.0-Migration-Guide&#34;&gt;migration guide&lt;/a&gt; when you prepare to upgrade Kingfisher in your project.&lt;/p&gt; &#xA;&lt;p&gt;If you are using an even earlier version, see the guides below to know the steps for migrating.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-6.0-Migration-Guide&#34;&gt;Kingfisher 6.0 Migration&lt;/a&gt; - Kingfisher 6.x is NOT fully compatible with the previous version. However, migration is not difficult. Depending on your use cases, it may take no effect or several minutes to modify your existing code for the new version. Please follow the &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-6.0-Migration-Guide&#34;&gt;migration guide&lt;/a&gt; when you prepare to upgrade Kingfisher in your project.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-5.0-Migration-Guide&#34;&gt;Kingfisher 5.0 Migration&lt;/a&gt; - If you are upgrading to Kingfisher 5.x from 4.x, please read this for more information.&lt;/li&gt; &#xA;  &lt;li&gt;Kingfisher 4.0 Migration - Kingfisher 3.x should be source compatible to Kingfisher 4. The reason for a major update is that we need to specify the Swift version explicitly for Xcode. All deprecated methods in Kingfisher 3 were removed, so please ensure you have no warning left before you migrate from Kingfisher 3 with Kingfisher 4. If you have any trouble when migrating, please open an issue to discuss.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-3.0-Migration-Guide&#34;&gt;Kingfisher 3.0 Migration&lt;/a&gt; - If you are upgrading to Kingfisher 3.x from an earlier version, please read this for more information.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;We prepared a &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki&#34;&gt;wiki page&lt;/a&gt;. You can find tons of useful things there.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Installation-Guide&#34;&gt;Installation Guide&lt;/a&gt; - Follow it to integrate Kingfisher into your project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet&#34;&gt;Cheat Sheet&lt;/a&gt;- Curious about what Kingfisher could do and how would it look like when used in your project? See this page for useful code snippets. If you are already familiar with Kingfisher, you could also learn new tricks to improve the way you use Kingfisher!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/onevcat/Kingfisher/master/documentation/kingfisher&#34;&gt;API Reference&lt;/a&gt; - Lastly, please remember to read the full API reference whenever you need more detailed documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;h3&gt;Future of Kingfisher&lt;/h3&gt; &#xA;&lt;p&gt;I want to keep Kingfisher lightweight. This framework focuses on providing a simple solution for downloading and caching images. This doesn’t mean the framework can’t be improved. Kingfisher is far from perfect, so necessary and useful updates will be made to make it better.&lt;/p&gt; &#xA;&lt;h3&gt;Developments and Tests&lt;/h3&gt; &#xA;&lt;p&gt;Any contributing and pull requests are warmly welcome. However, before you plan to implement some features or try to fix an uncertain issue, it is recommended to open a discussion first. It would be appreciated if your pull requests could build with all tests green. :)&lt;/p&gt; &#xA;&lt;h3&gt;About the logo&lt;/h3&gt; &#xA;&lt;p&gt;The logo of Kingfisher is inspired by &lt;a href=&#34;http://en.wikipedia.org/wiki/Tangram&#34;&gt;Tangram (七巧板)&lt;/a&gt;, a dissection puzzle consisting of seven flat shapes from China. I believe she&#39;s a kingfisher bird instead of a swift, but someone insists that she is a pigeon. I guess I should give her a name. Hi, guys, do you have any suggestions?&lt;/p&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;Follow and contact me on &lt;a href=&#34;http://twitter.com/onevcat&#34;&gt;Twitter&lt;/a&gt; or &lt;a href=&#34;http://weibo.com/onevcat&#34;&gt;Sina Weibo&lt;/a&gt;. If you find an issue, &lt;a href=&#34;https://github.com/onevcat/Kingfisher/issues/new&#34;&gt;open a ticket&lt;/a&gt;. Pull requests are warmly welcome as well.&lt;/p&gt; &#xA;&lt;h2&gt;Backers &amp;amp; Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Open-source projects cannot live long without your help. If you find Kingfisher to be useful, please consider supporting this project by becoming a sponsor. Your user icon or company logo shows up &lt;a href=&#34;https://onevcat.com/tabs/about/&#34;&gt;on my blog&lt;/a&gt; with a link to your home page.&lt;/p&gt; &#xA;&lt;p&gt;Become a sponsor through &lt;a href=&#34;https://github.com/sponsors/onevcat&#34;&gt;GitHub Sponsors&lt;/a&gt;. &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.ly/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1812216/106253726-271ed000-6218-11eb-98e0-c9c681925770.png&#34; alt=&#34;imgly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Kingfisher is released under the MIT license. See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RevenueCat/purchases-ios</title>
    <updated>2023-06-01T02:23:27Z</updated>
    <id>tag:github.com,2023-06-01:/RevenueCat/purchases-ios</id>
    <link href="https://github.com/RevenueCat/purchases-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In-app purchases and subscriptions made easy. Support for iOS, iPadOS, watchOS, and Mac.&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt;😻 In-App Subscriptions Made Easy 😻&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/pods/RevenueCat&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/RevenueCat.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/RevenueCat&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/RevenueCat.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.revenuecat.com/docs/ios#section-install-via-carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.revenuecat.com/docs/ios#section-install-via-swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-orange.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/RevenueCat/purchases-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FRevenueCat%2Fpurchases-ios%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/RevenueCat/purchases-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FRevenueCat%2Fpurchases-ios%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;RevenueCat is a powerful, reliable, and free to use in-app purchase server with cross-platform support. Our open-source framework provides a backend and a wrapper around StoreKit and Google Play Billing to make implementing in-app purchases and subscriptions easy.&lt;/p&gt; &#xA;&lt;p&gt;Whether you are building a new app or already have millions of customers, you can use RevenueCat to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetch products, make purchases, and check subscription status with our &lt;a href=&#34;https://docs.revenuecat.com/docs/installation&#34;&gt;native SDKs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Host and &lt;a href=&#34;https://docs.revenuecat.com/docs/entitlements&#34;&gt;configure products&lt;/a&gt; remotely from our dashboard.&lt;/li&gt; &#xA; &lt;li&gt;Analyze the most important metrics for your app business &lt;a href=&#34;https://docs.revenuecat.com/docs/charts&#34;&gt;in one place&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See customer transaction histories, chart lifetime value, and &lt;a href=&#34;https://docs.revenuecat.com/docs/customers&#34;&gt;grant promotional subscriptions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Get notified of real-time events through &lt;a href=&#34;https://docs.revenuecat.com/docs/webhooks&#34;&gt;webhooks&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Send enriched purchase events to analytics and attribution tools with our easy integrations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sign up to &lt;a href=&#34;https://app.revenuecat.com/signup&#34;&gt;get started for free&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;RevenueCat.framework&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;RevenueCat&lt;/em&gt; is the client for the &lt;a href=&#34;https://www.revenuecat.com/&#34;&gt;RevenueCat&lt;/a&gt; subscription and purchase tracking system. It&#39;s 100% &lt;code&gt;Swift&lt;/code&gt; and compatible with &lt;code&gt;Objective-C&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migrating from Purchases v3&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See our &lt;a href=&#34;https://revenuecat.github.io/purchases-ios-docs/v4_api_migration_guide.html&#34;&gt;Migration guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RevenueCat SDK Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;RevenueCat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Server-side receipt validation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;➡️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs/webhooks&#34;&gt;Webhooks&lt;/a&gt; - enhanced server-to-server communication with events for purchases, renewals, cancellations, and more&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🖥&lt;/td&gt; &#xA;   &lt;td&gt;iOS, tvOS, macOS and watchOS support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🎯&lt;/td&gt; &#xA;   &lt;td&gt;Subscription status tracking - know whether a user is subscribed whether they&#39;re on iOS, Android or web&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📊&lt;/td&gt; &#xA;   &lt;td&gt;Analytics - automatic calculation of metrics like conversion, mrr, and churn&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📝&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs&#34;&gt;Online documentation&lt;/a&gt; and &lt;a href=&#34;http://revenuecat.github.io/purchases-ios-docs/&#34;&gt;SDK Reference&lt;/a&gt; up to date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔀&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.revenuecat.com/integrations&#34;&gt;Integrations&lt;/a&gt; - over a dozen integrations to easily send purchase data where you need it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;💯&lt;/td&gt; &#xA;   &lt;td&gt;Well maintained - &lt;a href=&#34;https://github.com/RevenueCat/purchases-ios/releases&#34;&gt;frequent releases&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📮&lt;/td&gt; &#xA;   &lt;td&gt;Great support - &lt;a href=&#34;https://revenuecat.com/support&#34;&gt;Contact us&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed information, you can view our complete documentation at &lt;a href=&#34;https://docs.revenuecat.com/docs&#34;&gt;docs.revenuecat.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://docs.revenuecat.com/docs/&#34;&gt;Quickstart Guide&lt;/a&gt; for more information on how to install the SDK.&lt;/p&gt; &#xA;&lt;p&gt;Or view our iOS sample apps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RevenueCat/purchases-ios/main/Examples/MagicWeather&#34;&gt;MagicWeather&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RevenueCat/purchases-ios/main/Examples/MagicWeatherSwiftUI&#34;&gt;MagicWeather SwiftUI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 14.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Minimum target&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td&gt;11.0+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tvOS&lt;/td&gt; &#xA;   &lt;td&gt;11.0+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;10.13+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;watchOS&lt;/td&gt; &#xA;   &lt;td&gt;6.2+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;SDK Reference&lt;/h2&gt; &#xA;&lt;p&gt;Our full SDK reference &lt;a href=&#34;https://revenuecat.github.io/purchases-ios-docs&#34;&gt;can be found here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! To learn how you can contribute, please see the &lt;a href=&#34;https://raw.githubusercontent.com/RevenueCat/purchases-ios/main/Contributing/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>