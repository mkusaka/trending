<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T02:53:52Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Moya/Moya</title>
    <updated>2022-06-03T02:53:52Z</updated>
    <id>tag:github.com,2022-06-03:/Moya/Moya</id>
    <link href="https://github.com/Moya/Moya" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Network abstraction layer written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;160&#34; src=&#34;https://raw.githubusercontent.com/Moya/Moya/master/web/logo_github.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Moya 15.0.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/Moya/Moya/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/Moya/Moya/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/Moya/Moya?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/Moya/Moya/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Moya&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Moya.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A Chinese version of this document can be found &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Readme_CN.md&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re a smart developer. You probably use &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; to abstract away access to &lt;code&gt;URLSession&lt;/code&gt; and all those nasty details you don&#39;t really care about. But then, like lots of smart developers, you write ad hoc network abstraction layers. They are probably called &#34;APIManager&#34; or &#34;NetworkModel&#34;, and they always end in tears.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Moya/Moya/master/web/diagram.png&#34; alt=&#34;Moya Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ad hoc network layers are common in iOS apps. They&#39;re bad for a few reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Makes it hard to write new apps (&#34;where do I begin?&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Makes it hard to maintain existing apps (&#34;oh my god, this mess...&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Makes it hard to write unit tests (&#34;how do I do this again?&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So the basic idea of Moya is that we want some network abstraction layer that sufficiently encapsulates actually calling Alamofire directly. It should be simple enough that common things are easy, but comprehensive enough that complicated things are also easy.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you use Alamofire to abstract away &lt;code&gt;URLSession&lt;/code&gt;, why not use something to abstract away the nitty gritty of URLs, parameters, etc?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some awesome features of Moya:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile-time checking for correct API endpoint accesses.&lt;/li&gt; &#xA; &lt;li&gt;Lets you define a clear usage of different endpoints with associated enum values.&lt;/li&gt; &#xA; &lt;li&gt;Treats test stubs as first-class citizens so unit testing is super-easy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can check out more about the project direction in the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Vision.md&#34;&gt;vision document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Projects&lt;/h2&gt; &#xA;&lt;p&gt;We have provided two sample projects in the repository. To use it download the repo, run &lt;code&gt;carthage update&lt;/code&gt; to download the required libraries and open &lt;a href=&#34;https://github.com/Moya/Moya/tree/master/Moya.xcodeproj&#34;&gt;Moya.xcodeproj&lt;/a&gt;. You&#39;ll see two schemes: &lt;code&gt;Basic&lt;/code&gt; and &lt;code&gt;Multi-Target&lt;/code&gt; - select one and then build &amp;amp; run! Source files for these are in the &lt;code&gt;Examples&lt;/code&gt; directory in project navigator. Have fun!&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is actively under development, and is being used in &lt;a href=&#34;https://github.com/Artsy/eidolon&#34;&gt;Artsy&#39;s auction app&lt;/a&gt;. We consider it ready for production use.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Moya version vs Swift version.&lt;/h3&gt; &#xA;&lt;p&gt;Below is a table that shows which version of Moya you should use for your Swift version.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Moya&lt;/th&gt; &#xA;   &lt;th&gt;RxMoya&lt;/th&gt; &#xA;   &lt;th&gt;ReactiveMoya&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.X&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.X&lt;/td&gt; &#xA;   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;10.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.X&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.3&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.2&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: If you are using Swift 4.2 in your project, but you are using Xcode 10.2, Moya 13 should work correctly even though we use Swift 5.0.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Upgrading to a new major version of Moya? Check out our &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/MigrationGuides&#34;&gt;migration guides&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Instructions below are for using &lt;strong&gt;SwiftPM&lt;/strong&gt; without the Xcode UI. It&#39;s the easiest to go to your Project Settings -&amp;gt; Swift Packages and add Moya from there.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To integrate using Apple&#39;s Swift package manager, without Xcode integration, add the following as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/Moya/Moya.git&#34;, .upToNextMajor(from: &#34;15.0.0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then specify &lt;code&gt;&#34;Moya&#34;&lt;/code&gt; as a dependency of the Target in which you wish to use Moya. If you want to use reactive extensions, add also &lt;code&gt;&#34;ReactiveMoya&#34;&lt;/code&gt;, &lt;code&gt;&#34;RxMoya&#34;&lt;/code&gt; or &lt;code&gt;&#34;CombineMoya&#34;&lt;/code&gt; as your target dependency respectively. Here&#39;s an example &lt;code&gt;PackageDescription&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.3&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyPackage&#34;,&#xA;    products: [&#xA;        .library(&#xA;            name: &#34;MyPackage&#34;,&#xA;            targets: [&#34;MyPackage&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/Moya/Moya.git&#34;, .upToNextMajor(from: &#34;15.0.0&#34;))&#xA;    ],&#xA;    targets: [&#xA;        .target(&#xA;            name: &#34;MyPackage&#34;,&#xA;            dependencies: [&#34;ReactiveMoya&#34;])&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Combine note: if you&#39;re using &lt;strong&gt;CombineMoya&lt;/strong&gt;, make sure that you use Xcode 11.5.0 or later. With earlier versions of Xcode you will have to manually add Combine as a weakly linked framework to your application target.&lt;/p&gt; &#xA;&lt;h3&gt;Accio&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;Accio&lt;/a&gt; is a dependency manager based on SwiftPM which can build frameworks for iOS/macOS/tvOS/watchOS. Therefore the integration steps of Moya are exactly the same as described above. Once your &lt;code&gt;Package.swift&lt;/code&gt; file is configured, run &lt;code&gt;accio update&lt;/code&gt; instead of &lt;code&gt;swift package update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;For Moya, use the following entry in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;pod &#39;Moya&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or &#xA;&#xA;pod &#39;Moya/RxSwift&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or&#xA;&#xA;pod &#39;Moya/ReactiveSwift&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or&#xA;&#xA;pod &#39;Moya/Combine&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In any file you&#39;d like to use Moya in, don&#39;t forget to import the framework with &lt;code&gt;import Moya&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Carthage users can point to this repository and use whichever generated framework they&#39;d like, &lt;code&gt;Moya&lt;/code&gt;, &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;ReactiveMoya&lt;/code&gt;, or &lt;code&gt;CombineMoya&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make the following entry in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Moya/Moya&#34; ~&amp;gt; 15.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: At this time, Carthage does not provide a way to build only specific repository submodules. All submodules and their dependencies will be built with the above command. However, you don&#39;t need to copy frameworks you aren&#39;t using into your project. For instance, if you aren&#39;t using &lt;code&gt;ReactiveSwift&lt;/code&gt;, feel free to delete that framework along with &lt;code&gt;ReactiveMoya&lt;/code&gt; from the Carthage Build directory after &lt;code&gt;carthage update&lt;/code&gt; completes. Or if you are using &lt;code&gt;ReactiveSwift&lt;/code&gt; but not &lt;code&gt;RxSwift&lt;/code&gt; or &lt;code&gt;Combine&lt;/code&gt;, then &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;RxTest&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt;, &lt;code&gt;CombineMoya&lt;/code&gt; etc. can safely be deleted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &lt;em&gt;if&lt;/em&gt; your project is not initialized as a git repository:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Alamofire &amp;amp; Moya as a git &lt;a href=&#34;http://git-scm.com/docs/git-submodule&#34;&gt;submodule&lt;/a&gt; by running the following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git&#xA;$ git submodule add https://github.com/Moya/Moya.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project. Do the same with the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; in the &lt;code&gt;Moya&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;They should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify that the deployment targets of the &lt;code&gt;xcodeproj&lt;/code&gt;s match that of your application target in the Project Navigator.&lt;/li&gt; &#xA; &lt;li&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &#34;Targets&#34; heading in the sidebar.&lt;/li&gt; &#xA; &lt;li&gt;In the tab bar at the top of that window, open the &#34;General&#34; panel.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &#34;Embedded Binaries&#34; section.&lt;/li&gt; &#xA; &lt;li&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as either &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt; or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under &#34;Embedded Binaries&#34; again and add the correct build target for &lt;code&gt;Moya&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The three frameworks are automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/Examples/Basic.md&#34;&gt;some setup&lt;/a&gt;, using Moya is really simple. You can access an API like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.request(.zen) { result in&#xA;    switch result {&#xA;    case let .success(moyaResponse):&#xA;        let data = moyaResponse.data&#xA;        let statusCode = moyaResponse.statusCode&#xA;        // do something with the response data or statusCode&#xA;    case let .failure(error):&#xA;        // this means there was a network failure - either the request&#xA;        // wasn&#39;t sent (connectivity), or no response was received (server&#xA;        // timed out).  If the server responds with a 4xx or 5xx error, that&#xA;        // will be sent as a &#34;.success&#34;-ful response.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s a basic example. Many API requests need parameters. Moya encodes these into the enum you use to access the endpoint, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.request(.userProfile(&#34;ashfurrow&#34;)) { result in&#xA;    // do something with the result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No more typos in URLs. No more missing parameter values. No more messing with parameter encoding.&lt;/p&gt; &#xA;&lt;p&gt;For more examples, see the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/Examples&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reactive Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Even cooler are the reactive extensions. Moya provides reactive extensions for &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift&#34;&gt;ReactiveSwift&lt;/a&gt;, &lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt;, and &lt;a href=&#34;https://developer.apple.com/documentation/combine&#34;&gt;Combine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ReactiveSwift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/ReactiveSwift.md&#34;&gt;&lt;code&gt;ReactiveSwift&lt;/code&gt; extension&lt;/a&gt; provides both &lt;code&gt;reactive.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;reactive.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods that immediately return &lt;code&gt;SignalProducer&lt;/code&gt;s that you can start, bind, map, or whatever you want to do. To handle errors, for instance, we could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.reactive.request(.userProfile(&#34;ashfurrow&#34;)).start { event in&#xA;    switch event {&#xA;    case let .value(response):&#xA;        image = UIImage(data: response.data)&#xA;    case let .failed(error):&#xA;        print(error)&#xA;    default:&#xA;        break&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RxSwift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/RxSwift.md&#34;&gt;&lt;code&gt;RxSwift&lt;/code&gt; extension&lt;/a&gt; also provide both &lt;code&gt;rx.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods, but return type is different for both. In case of a normal &lt;code&gt;rx.request(:callbackQueue)&lt;/code&gt;, the return type is &lt;code&gt;Single&amp;lt;Response&amp;gt;&lt;/code&gt; which emits either single element or an error. In case of a &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt;, the return type is &lt;code&gt;Observable&amp;lt;ProgressResponse&amp;gt;&lt;/code&gt;, since we may get multiple events from progress and one last event which is a response.&lt;/p&gt; &#xA;&lt;p&gt;To handle errors, for instance, we could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.rx.request(.userProfile(&#34;ashfurrow&#34;)).subscribe { event in&#xA;    switch event {&#xA;    case let .success(response):&#xA;        image = UIImage(data: response.data)&#xA;    case let .error(error):&#xA;        print(error)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to the option of using signals instead of callback blocks, there are also a series of signal operators for RxSwift and ReactiveSwift that will attempt to map the data received from the network response into either an image, some JSON, or a string, with &lt;code&gt;mapImage()&lt;/code&gt;, &lt;code&gt;mapJSON()&lt;/code&gt;, and &lt;code&gt;mapString()&lt;/code&gt;, respectively. If the mapping is unsuccessful, you&#39;ll get an error on the signal. You also get handy methods for filtering out certain status codes. This means that you can place your code for handling API errors like 400&#39;s in the same places as code for handling invalid responses.&lt;/p&gt; &#xA;&lt;h3&gt;Combine&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Combine&lt;/code&gt; extension provides &lt;code&gt;requestPublisher(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;requestWithProgressPublisher(:callbackQueue)&lt;/code&gt; returning &lt;code&gt;AnyPublisher&amp;lt;Response, MoyaError&amp;gt;&lt;/code&gt; and &lt;code&gt;AnyPublisher&amp;lt;ProgressResponse, MoyaError&amp;gt;&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of &lt;code&gt;requestPublisher&lt;/code&gt; usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;let cancellable = provider.requestPublisher(.userProfile(&#34;ashfurrow&#34;))&#xA;    .sink(receiveCompletion: { completion in&#xA;        guard case let .failure(error) = completion else { return }&#xA;&#xA;        print(error)&#xA;    }, receiveValue: { response in&#xA;        image = UIImage(data: response.data)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community Projects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/CommunityProjects.md&#34;&gt;Moya has a great community around it and some people have created some very helpful extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Hey! Do you like Moya? Awesome! We could actually really use your help!&lt;/p&gt; &#xA;&lt;p&gt;Open source isn&#39;t just writing code. Moya could use your help with any of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finding (and reporting!) bugs.&lt;/li&gt; &#xA; &lt;li&gt;New feature suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Answering questions on issues.&lt;/li&gt; &#xA; &lt;li&gt;Documentation improvements.&lt;/li&gt; &#xA; &lt;li&gt;Reviewing pull requests.&lt;/li&gt; &#xA; &lt;li&gt;Helping to manage issue priorities.&lt;/li&gt; &#xA; &lt;li&gt;Fixing bugs/new features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If any of that sounds cool to you, send a pull request! After your first contribution, we will add you as a member to the repo so you can merge pull requests and help steer the ship &lt;span&gt;🚢&lt;/span&gt; You can read more details about that &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Contributing.md&#34;&gt;in our contributor guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Moya&#39;s community has a tremendous positive energy, and the maintainers are committed to keeping things awesome. Like &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/wiki/Communication-&amp;amp;-Design-Rules&#34;&gt;in the CocoaPods community&lt;/a&gt;, always assume positive intent. Even if a comment sounds mean-spirited, give the person the benefit of the doubt.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Code%20of%20Conduct.md&#34;&gt;its terms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new source files&lt;/h3&gt; &#xA;&lt;p&gt;If you add or remove a source file from Moya, a corresponding change needs to be made to the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; project at the root of this repository. This project is used for Carthage. Don&#39;t worry, you&#39;ll get an automated warning when submitting a pull request if you forget.&lt;/p&gt; &#xA;&lt;h3&gt;Help us improve Moya documentation&lt;/h3&gt; &#xA;&lt;p&gt;Whether you’re a core member or a user trying it out for the first time, you can make a valuable contribution to Moya by improving the documentation. Help us by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending us feedback about something you thought was confusing or simply missing.&lt;/li&gt; &#xA; &lt;li&gt;Suggesting better wording or ways of explaining certain topics.&lt;/li&gt; &#xA; &lt;li&gt;Sending us a pull request via GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Improving the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Readme_CN.md&#34;&gt;Chinese documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Moya is released under an MIT license. See &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/License.md&#34;&gt;License.md&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ochococo/Design-Patterns-In-Swift</title>
    <updated>2022-06-03T02:53:52Z</updated>
    <id>tag:github.com,2022-06-03:/ochococo/Design-Patterns-In-Swift</id>
    <link href="https://github.com/ochococo/Design-Patterns-In-Swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📖 Design Patterns implemented in Swift 5.0&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Design Patterns implemented in Swift 5.0&lt;/h1&gt; &#xA;&lt;p&gt;A short cheat-sheet with Xcode 10.2 Playground (&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/Design-Patterns.playground.zip&#34;&gt;Design-Patterns.playground.zip&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/ochococo/Design-Patterns-In-Swift/raw/master/README-CN.md&#34;&gt;🇨🇳中文版&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;👷 Project started by: &lt;a href=&#34;http://twitter.com/nsmeme&#34;&gt;@nsmeme&lt;/a&gt; (Oktawian Chojnacki)&lt;/p&gt; &#xA;&lt;p&gt;👷 中文版由 &lt;a href=&#34;https://twitter.com/binglogo&#34;&gt;@binglogo&lt;/a&gt; (棒棒彬) 整理翻译。&lt;/p&gt; &#xA;&lt;p&gt;🚀 How to generate README, Playground and zip from source: &lt;a href=&#34;https://github.com/ochococo/Design-Patterns-In-Swift/raw/master/GENERATE.md&#34;&gt;GENERATE.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;print(&#34;Welcome!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#behavioral&#34;&gt;Behavioral&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#creational&#34;&gt;Creational&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#structural&#34;&gt;Structural&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-chain-of-responsibility&#34;&gt;🐝 Chain Of Responsibility&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-abstract-factory&#34;&gt;🌰 Abstract Factory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-adapter&#34;&gt;🔌 Adapter&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-command&#34;&gt;👫 Command&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-builder&#34;&gt;👷 Builder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-bridge&#34;&gt;🌉 Bridge&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-interpreter&#34;&gt;🎶 Interpreter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-factory-method&#34;&gt;🏭 Factory Method&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-composite&#34;&gt;🌿 Composite&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-iterator&#34;&gt;🍫 Iterator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-monostate&#34;&gt;🔂 Monostate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-decorator&#34;&gt;🍧 Decorator&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-mediator&#34;&gt;💐 Mediator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-prototype&#34;&gt;🃏 Prototype&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-fa-ade&#34;&gt;🎁 Façade&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-memento&#34;&gt;💾 Memento&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-singleton&#34;&gt;💍 Singleton&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-flyweight&#34;&gt;🍃 Flyweight&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-observer&#34;&gt;👓 Observer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-protection-proxy&#34;&gt;☔ Protection Proxy&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-state&#34;&gt;🐉 State&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-virtual-proxy&#34;&gt;🍬 Virtual Proxy&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-strategy&#34;&gt;💡 Strategy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-visitor&#34;&gt;🏃 Visitor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ochococo/Design-Patterns-In-Swift/master/#-template-method&#34;&gt;📝 Template Method&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Behavioral&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Behavioral_pattern&#34;&gt;wikipedia.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🐝 Chain Of Responsibility&lt;/h2&gt; &#xA;&lt;p&gt;The chain of responsibility pattern is used to process varied requests, each of which may be dealt with by a different handler.&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;protocol Withdrawing {&#xA;    func withdraw(amount: Int) -&amp;gt; Bool&#xA;}&#xA;&#xA;final class MoneyPile: Withdrawing {&#xA;&#xA;    let value: Int&#xA;    var quantity: Int&#xA;    var next: Withdrawing?&#xA;&#xA;    init(value: Int, quantity: Int, next: Withdrawing?) {&#xA;        self.value = value&#xA;        self.quantity = quantity&#xA;        self.next = next&#xA;    }&#xA;&#xA;    func withdraw(amount: Int) -&amp;gt; Bool {&#xA;&#xA;        var amount = amount&#xA;&#xA;        func canTakeSomeBill(want: Int) -&amp;gt; Bool {&#xA;            return (want / self.value) &amp;gt; 0&#xA;        }&#xA;&#xA;        var quantity = self.quantity&#xA;&#xA;        while canTakeSomeBill(want: amount) {&#xA;&#xA;            if quantity == 0 {&#xA;                break&#xA;            }&#xA;&#xA;            amount -= self.value&#xA;            quantity -= 1&#xA;        }&#xA;&#xA;        guard amount &amp;gt; 0 else {&#xA;            return true&#xA;        }&#xA;&#xA;        if let next = self.next {&#xA;            return next.withdraw(amount: amount)&#xA;        }&#xA;&#xA;        return false&#xA;    }&#xA;}&#xA;&#xA;final class ATM: Withdrawing {&#xA;&#xA;    private var hundred: Withdrawing&#xA;    private var fifty: Withdrawing&#xA;    private var twenty: Withdrawing&#xA;    private var ten: Withdrawing&#xA;&#xA;    private var startPile: Withdrawing {&#xA;        return self.hundred&#xA;    }&#xA;&#xA;    init(hundred: Withdrawing,&#xA;           fifty: Withdrawing,&#xA;          twenty: Withdrawing,&#xA;             ten: Withdrawing) {&#xA;&#xA;        self.hundred = hundred&#xA;        self.fifty = fifty&#xA;        self.twenty = twenty&#xA;        self.ten = ten&#xA;    }&#xA;&#xA;    func withdraw(amount: Int) -&amp;gt; Bool {&#xA;        return startPile.withdraw(amount: amount)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create piles of money and link them together 10 &amp;lt; 20 &amp;lt; 50 &amp;lt; 100.**&#xA;let ten = MoneyPile(value: 10, quantity: 6, next: nil)&#xA;let twenty = MoneyPile(value: 20, quantity: 2, next: ten)&#xA;let fifty = MoneyPile(value: 50, quantity: 2, next: twenty)&#xA;let hundred = MoneyPile(value: 100, quantity: 1, next: fifty)&#xA;&#xA;// Build ATM.&#xA;var atm = ATM(hundred: hundred, fifty: fifty, twenty: twenty, ten: ten)&#xA;atm.withdraw(amount: 310) // Cannot because ATM has only 300&#xA;atm.withdraw(amount: 100) // Can withdraw - 1x100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👫 Command&lt;/h2&gt; &#xA;&lt;p&gt;The command pattern is used to express a request, including the call to be made and all of its required parameters, in a command object. The command may then be executed immediately or held for later use.&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DoorCommand {&#xA;    func execute() -&amp;gt; String&#xA;}&#xA;&#xA;final class OpenCommand: DoorCommand {&#xA;    let doors:String&#xA;&#xA;    required init(doors: String) {&#xA;        self.doors = doors&#xA;    }&#xA;    &#xA;    func execute() -&amp;gt; String {&#xA;        return &#34;Opened \(doors)&#34;&#xA;    }&#xA;}&#xA;&#xA;final class CloseCommand: DoorCommand {&#xA;    let doors:String&#xA;&#xA;    required init(doors: String) {&#xA;        self.doors = doors&#xA;    }&#xA;    &#xA;    func execute() -&amp;gt; String {&#xA;        return &#34;Closed \(doors)&#34;&#xA;    }&#xA;}&#xA;&#xA;final class HAL9000DoorsOperations {&#xA;    let openCommand: DoorCommand&#xA;    let closeCommand: DoorCommand&#xA;    &#xA;    init(doors: String) {&#xA;        self.openCommand = OpenCommand(doors:doors)&#xA;        self.closeCommand = CloseCommand(doors:doors)&#xA;    }&#xA;    &#xA;    func close() -&amp;gt; String {&#xA;        return closeCommand.execute()&#xA;    }&#xA;    &#xA;    func open() -&amp;gt; String {&#xA;        return openCommand.execute()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let podBayDoors = &#34;Pod Bay Doors&#34;&#xA;let doorModule = HAL9000DoorsOperations(doors:podBayDoors)&#xA;&#xA;doorModule.open()&#xA;doorModule.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🎶 Interpreter&lt;/h2&gt; &#xA;&lt;p&gt;The interpreter pattern is used to evaluate sentences in a language.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;protocol IntegerExpression {&#xA;    func evaluate(_ context: IntegerContext) -&amp;gt; Int&#xA;    func replace(character: Character, integerExpression: IntegerExpression) -&amp;gt; IntegerExpression&#xA;    func copied() -&amp;gt; IntegerExpression&#xA;}&#xA;&#xA;final class IntegerContext {&#xA;    private var data: [Character:Int] = [:]&#xA;&#xA;    func lookup(name: Character) -&amp;gt; Int {&#xA;        return self.data[name]!&#xA;    }&#xA;&#xA;    func assign(expression: IntegerVariableExpression, value: Int) {&#xA;        self.data[expression.name] = value&#xA;    }&#xA;}&#xA;&#xA;final class IntegerVariableExpression: IntegerExpression {&#xA;    let name: Character&#xA;&#xA;    init(name: Character) {&#xA;        self.name = name&#xA;    }&#xA;&#xA;    func evaluate(_ context: IntegerContext) -&amp;gt; Int {&#xA;        return context.lookup(name: self.name)&#xA;    }&#xA;&#xA;    func replace(character name: Character, integerExpression: IntegerExpression) -&amp;gt; IntegerExpression {&#xA;        if name == self.name {&#xA;            return integerExpression.copied()&#xA;        } else {&#xA;            return IntegerVariableExpression(name: self.name)&#xA;        }&#xA;    }&#xA;&#xA;    func copied() -&amp;gt; IntegerExpression {&#xA;        return IntegerVariableExpression(name: self.name)&#xA;    }&#xA;}&#xA;&#xA;final class AddExpression: IntegerExpression {&#xA;    private var operand1: IntegerExpression&#xA;    private var operand2: IntegerExpression&#xA;&#xA;    init(op1: IntegerExpression, op2: IntegerExpression) {&#xA;        self.operand1 = op1&#xA;        self.operand2 = op2&#xA;    }&#xA;&#xA;    func evaluate(_ context: IntegerContext) -&amp;gt; Int {&#xA;        return self.operand1.evaluate(context) + self.operand2.evaluate(context)&#xA;    }&#xA;&#xA;    func replace(character: Character, integerExpression: IntegerExpression) -&amp;gt; IntegerExpression {&#xA;        return AddExpression(op1: operand1.replace(character: character, integerExpression: integerExpression),&#xA;                             op2: operand2.replace(character: character, integerExpression: integerExpression))&#xA;    }&#xA;&#xA;    func copied() -&amp;gt; IntegerExpression {&#xA;        return AddExpression(op1: self.operand1, op2: self.operand2)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var context = IntegerContext()&#xA;&#xA;var a = IntegerVariableExpression(name: &#34;A&#34;)&#xA;var b = IntegerVariableExpression(name: &#34;B&#34;)&#xA;var c = IntegerVariableExpression(name: &#34;C&#34;)&#xA;&#xA;var expression = AddExpression(op1: a, op2: AddExpression(op1: b, op2: c)) // a + (b + c)&#xA;&#xA;context.assign(expression: a, value: 2)&#xA;context.assign(expression: b, value: 1)&#xA;context.assign(expression: c, value: 3)&#xA;&#xA;var result = expression.evaluate(context)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍫 Iterator&lt;/h2&gt; &#xA;&lt;p&gt;The iterator pattern is used to provide a standard interface for traversing a collection of items in an aggregate object without the need to understand its underlying structure.&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Novella {&#xA;    let name: String&#xA;}&#xA;&#xA;struct Novellas {&#xA;    let novellas: [Novella]&#xA;}&#xA;&#xA;struct NovellasIterator: IteratorProtocol {&#xA;&#xA;    private var current = 0&#xA;    private let novellas: [Novella]&#xA;&#xA;    init(novellas: [Novella]) {&#xA;        self.novellas = novellas&#xA;    }&#xA;&#xA;    mutating func next() -&amp;gt; Novella? {&#xA;        defer { current += 1 }&#xA;        return novellas.count &amp;gt; current ? novellas[current] : nil&#xA;    }&#xA;}&#xA;&#xA;extension Novellas: Sequence {&#xA;    func makeIterator() -&amp;gt; NovellasIterator {&#xA;        return NovellasIterator(novellas: novellas)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let greatNovellas = Novellas(novellas: [Novella(name: &#34;The Mist&#34;)] )&#xA;&#xA;for novella in greatNovellas {&#xA;    print(&#34;I&#39;ve read: \(novella)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💐 Mediator&lt;/h2&gt; &#xA;&lt;p&gt;The mediator pattern is used to reduce coupling between classes that communicate with each other. Instead of classes communicating directly, and thus requiring knowledge of their implementation, the classes send messages via a mediator object.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Receiver {&#xA;    associatedtype MessageType&#xA;    func receive(message: MessageType)&#xA;}&#xA;&#xA;protocol Sender {&#xA;    associatedtype MessageType&#xA;    associatedtype ReceiverType: Receiver&#xA;    &#xA;    var recipients: [ReceiverType] { get }&#xA;    &#xA;    func send(message: MessageType)&#xA;}&#xA;&#xA;struct Programmer: Receiver {&#xA;    let name: String&#xA;    &#xA;    init(name: String) {&#xA;        self.name = name&#xA;    }&#xA;    &#xA;    func receive(message: String) {&#xA;        print(&#34;\(name) received: \(message)&#34;)&#xA;    }&#xA;}&#xA;&#xA;final class MessageMediator: Sender {&#xA;    internal var recipients: [Programmer] = []&#xA;    &#xA;    func add(recipient: Programmer) {&#xA;        recipients.append(recipient)&#xA;    }&#xA;    &#xA;    func send(message: String) {&#xA;        for recipient in recipients {&#xA;            recipient.receive(message: message)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func spamMonster(message: String, worker: MessageMediator) {&#xA;    worker.send(message: message)&#xA;}&#xA;&#xA;let messagesMediator = MessageMediator()&#xA;&#xA;let user0 = Programmer(name: &#34;Linus Torvalds&#34;)&#xA;let user1 = Programmer(name: &#34;Avadis &#39;Avie&#39; Tevanian&#34;)&#xA;messagesMediator.add(recipient: user0)&#xA;messagesMediator.add(recipient: user1)&#xA;&#xA;spamMonster(message: &#34;I&#39;d Like to Add you to My Professional Network&#34;, worker: messagesMediator)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💾 Memento&lt;/h2&gt; &#xA;&lt;p&gt;The memento pattern is used to capture the current state of an object and store it in such a manner that it can be restored at a later time without breaking the rules of encapsulation.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias Memento = [String: String]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Originator&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol MementoConvertible {&#xA;    var memento: Memento { get }&#xA;    init?(memento: Memento)&#xA;}&#xA;&#xA;struct GameState: MementoConvertible {&#xA;&#xA;    private enum Keys {&#xA;        static let chapter = &#34;com.valve.halflife.chapter&#34;&#xA;        static let weapon = &#34;com.valve.halflife.weapon&#34;&#xA;    }&#xA;&#xA;    var chapter: String&#xA;    var weapon: String&#xA;&#xA;    init(chapter: String, weapon: String) {&#xA;        self.chapter = chapter&#xA;        self.weapon = weapon&#xA;    }&#xA;&#xA;    init?(memento: Memento) {&#xA;        guard let mementoChapter = memento[Keys.chapter],&#xA;              let mementoWeapon = memento[Keys.weapon] else {&#xA;            return nil&#xA;        }&#xA;&#xA;        chapter = mementoChapter&#xA;        weapon = mementoWeapon&#xA;    }&#xA;&#xA;    var memento: Memento {&#xA;        return [ Keys.chapter: chapter, Keys.weapon: weapon ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Caretaker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum CheckPoint {&#xA;&#xA;    private static let defaults = UserDefaults.standard&#xA;&#xA;    static func save(_ state: MementoConvertible, saveName: String) {&#xA;        defaults.set(state.memento, forKey: saveName)&#xA;        defaults.synchronize()&#xA;    }&#xA;&#xA;    static func restore(saveName: String) -&amp;gt; Any? {&#xA;        return defaults.object(forKey: saveName)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var gameState = GameState(chapter: &#34;Black Mesa Inbound&#34;, weapon: &#34;Crowbar&#34;)&#xA;&#xA;gameState.chapter = &#34;Anomalous Materials&#34;&#xA;gameState.weapon = &#34;Glock 17&#34;&#xA;CheckPoint.save(gameState, saveName: &#34;gameState1&#34;)&#xA;&#xA;gameState.chapter = &#34;Unforeseen Consequences&#34;&#xA;gameState.weapon = &#34;MP5&#34;&#xA;CheckPoint.save(gameState, saveName: &#34;gameState2&#34;)&#xA;&#xA;gameState.chapter = &#34;Office Complex&#34;&#xA;gameState.weapon = &#34;Crossbow&#34;&#xA;CheckPoint.save(gameState, saveName: &#34;gameState3&#34;)&#xA;&#xA;if let memento = CheckPoint.restore(saveName: &#34;gameState1&#34;) as? Memento {&#xA;    let finalState = GameState(memento: memento)&#xA;    dump(finalState)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👓 Observer&lt;/h2&gt; &#xA;&lt;p&gt;The observer pattern is used to allow an object to publish changes to its state. Other objects subscribe to be immediately notified of any changes.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol PropertyObserver : class {&#xA;    func willChange(propertyName: String, newPropertyValue: Any?)&#xA;    func didChange(propertyName: String, oldPropertyValue: Any?)&#xA;}&#xA;&#xA;final class TestChambers {&#xA;&#xA;    weak var observer:PropertyObserver?&#xA;&#xA;    private let testChamberNumberName = &#34;testChamberNumber&#34;&#xA;&#xA;    var testChamberNumber: Int = 0 {&#xA;        willSet(newValue) {&#xA;            observer?.willChange(propertyName: testChamberNumberName, newPropertyValue: newValue)&#xA;        }&#xA;        didSet {&#xA;            observer?.didChange(propertyName: testChamberNumberName, oldPropertyValue: oldValue)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;final class Observer : PropertyObserver {&#xA;    func willChange(propertyName: String, newPropertyValue: Any?) {&#xA;        if newPropertyValue as? Int == 1 {&#xA;            print(&#34;Okay. Look. We both said a lot of things that you&#39;re going to regret.&#34;)&#xA;        }&#xA;    }&#xA;&#xA;    func didChange(propertyName: String, oldPropertyValue: Any?) {&#xA;        if oldPropertyValue as? Int == 0 {&#xA;            print(&#34;Sorry about the mess. I&#39;ve really let the place go since you killed me.&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var observerInstance = Observer()&#xA;var testChambers = TestChambers()&#xA;testChambers.observer = observerInstance&#xA;testChambers.testChamberNumber += 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🐉 State&lt;/h2&gt; &#xA;&lt;p&gt;The state pattern is used to alter the behaviour of an object as its internal state changes. The pattern allows the class for an object to apparently change at run-time.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class Context {&#xA;&#x9;private var state: State = UnauthorizedState()&#xA;&#xA;    var isAuthorized: Bool {&#xA;        get { return state.isAuthorized(context: self) }&#xA;    }&#xA;&#xA;    var userId: String? {&#xA;        get { return state.userId(context: self) }&#xA;    }&#xA;&#xA;&#x9;func changeStateToAuthorized(userId: String) {&#xA;&#x9;&#x9;state = AuthorizedState(userId: userId)&#xA;&#x9;}&#xA;&#xA;&#x9;func changeStateToUnauthorized() {&#xA;&#x9;&#x9;state = UnauthorizedState()&#xA;&#x9;}&#xA;}&#xA;&#xA;protocol State {&#xA;&#x9;func isAuthorized(context: Context) -&amp;gt; Bool&#xA;&#x9;func userId(context: Context) -&amp;gt; String?&#xA;}&#xA;&#xA;class UnauthorizedState: State {&#xA;&#x9;func isAuthorized(context: Context) -&amp;gt; Bool { return false }&#xA;&#xA;&#x9;func userId(context: Context) -&amp;gt; String? { return nil }&#xA;}&#xA;&#xA;class AuthorizedState: State {&#xA;&#x9;let userId: String&#xA;&#xA;&#x9;init(userId: String) { self.userId = userId }&#xA;&#xA;&#x9;func isAuthorized(context: Context) -&amp;gt; Bool { return true }&#xA;&#xA;&#x9;func userId(context: Context) -&amp;gt; String? { return userId }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let userContext = Context()&#xA;(userContext.isAuthorized, userContext.userId)&#xA;userContext.changeStateToAuthorized(userId: &#34;admin&#34;)&#xA;(userContext.isAuthorized, userContext.userId) // now logged in as &#34;admin&#34;&#xA;userContext.changeStateToUnauthorized()&#xA;(userContext.isAuthorized, userContext.userId)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💡 Strategy&lt;/h2&gt; &#xA;&lt;p&gt;The strategy pattern is used to create an interchangeable family of algorithms from which the required process is chosen at run-time.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;struct TestSubject {&#xA;    let pupilDiameter: Double&#xA;    let blushResponse: Double&#xA;    let isOrganic: Bool&#xA;}&#xA;&#xA;protocol RealnessTesting: AnyObject {&#xA;    func testRealness(_ testSubject: TestSubject) -&amp;gt; Bool&#xA;}&#xA;&#xA;final class VoightKampffTest: RealnessTesting {&#xA;    func testRealness(_ testSubject: TestSubject) -&amp;gt; Bool {&#xA;        return testSubject.pupilDiameter &amp;lt; 30.0 || testSubject.blushResponse == 0.0&#xA;    }&#xA;}&#xA;&#xA;final class GeneticTest: RealnessTesting {&#xA;    func testRealness(_ testSubject: TestSubject) -&amp;gt; Bool {&#xA;        return testSubject.isOrganic&#xA;    }&#xA;}&#xA;&#xA;final class BladeRunner {&#xA;    private let strategy: RealnessTesting&#xA;&#xA;    init(test: RealnessTesting) {&#xA;        self.strategy = test&#xA;    }&#xA;&#xA;    func testIfAndroid(_ testSubject: TestSubject) -&amp;gt; Bool {&#xA;        return !strategy.testRealness(testSubject)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;let rachel = TestSubject(pupilDiameter: 30.2,&#xA;                         blushResponse: 0.3,&#xA;                         isOrganic: false)&#xA;&#xA;// Deckard is using a traditional test&#xA;let deckard = BladeRunner(test: VoightKampffTest())&#xA;let isRachelAndroid = deckard.testIfAndroid(rachel)&#xA;&#xA;// Gaff is using a very precise method&#xA;let gaff = BladeRunner(test: GeneticTest())&#xA;let isDeckardAndroid = gaff.testIfAndroid(rachel)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📝 Template Method&lt;/h2&gt; &#xA;&lt;p&gt;The template method pattern defines the steps of an algorithm and allows the redefinition of one or more of these steps. In this way, the template method protects the algorithm, the order of execution and provides abstract methods that can be implemented by concrete types.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Garden {&#xA;    func prepareSoil()&#xA;    func plantSeeds()&#xA;    func waterPlants()&#xA;    func prepareGarden()&#xA;}&#xA;&#xA;extension Garden {&#xA;&#xA;    func prepareGarden() {&#xA;        prepareSoil()&#xA;        plantSeeds()&#xA;        waterPlants()&#xA;    }&#xA;}&#xA;&#xA;final class RoseGarden: Garden {&#xA;&#xA;    func prepare() {&#xA;        prepareGarden()&#xA;    }&#xA;&#xA;    func prepareSoil() {&#xA;        print (&#34;prepare soil for rose garden&#34;)&#xA;    }&#xA;&#xA;    func plantSeeds() {&#xA;        print (&#34;plant seeds for rose garden&#34;)&#xA;    }&#xA;&#xA;    func waterPlants() {&#xA;       print (&#34;water the rose garden&#34;)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;let roseGarden = RoseGarden()&#xA;roseGarden.prepare()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🏃 Visitor&lt;/h2&gt; &#xA;&lt;p&gt;The visitor pattern is used to separate a relatively complex set of structured data classes from the functionality that may be performed upon the data that they hold.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol PlanetVisitor {&#xA;&#x9;func visit(planet: PlanetAlderaan)&#xA;&#x9;func visit(planet: PlanetCoruscant)&#xA;&#x9;func visit(planet: PlanetTatooine)&#xA;    func visit(planet: MoonJedha)&#xA;}&#xA;&#xA;protocol Planet {&#xA;&#x9;func accept(visitor: PlanetVisitor)&#xA;}&#xA;&#xA;final class MoonJedha: Planet {&#xA;    func accept(visitor: PlanetVisitor) { visitor.visit(planet: self) }&#xA;}&#xA;&#xA;final class PlanetAlderaan: Planet {&#xA;    func accept(visitor: PlanetVisitor) { visitor.visit(planet: self) }&#xA;}&#xA;&#xA;final class PlanetCoruscant: Planet {&#xA;&#x9;func accept(visitor: PlanetVisitor) { visitor.visit(planet: self) }&#xA;}&#xA;&#xA;final class PlanetTatooine: Planet {&#xA;&#x9;func accept(visitor: PlanetVisitor) { visitor.visit(planet: self) }&#xA;}&#xA;&#xA;final class NameVisitor: PlanetVisitor {&#xA;&#x9;var name = &#34;&#34;&#xA;&#xA;&#x9;func visit(planet: PlanetAlderaan)  { name = &#34;Alderaan&#34; }&#xA;&#x9;func visit(planet: PlanetCoruscant) { name = &#34;Coruscant&#34; }&#xA;&#x9;func visit(planet: PlanetTatooine)  { name = &#34;Tatooine&#34; }&#xA;    func visit(planet: MoonJedha)     &#x9;{ name = &#34;Jedha&#34; }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let planets: [Planet] = [PlanetAlderaan(), PlanetCoruscant(), PlanetTatooine(), MoonJedha()]&#xA;&#xA;let names = planets.map { (planet: Planet) -&amp;gt; String in&#xA;&#x9;let visitor = NameVisitor()&#xA;    planet.accept(visitor: visitor)&#xA;&#xA;    return visitor.name&#xA;}&#xA;&#xA;names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Creational&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In software engineering, creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Creational_pattern&#34;&gt;wikipedia.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🌰 Abstract Factory&lt;/h2&gt; &#xA;&lt;p&gt;The abstract factory pattern is used to provide a client with a set of related or dependant objects. The &#34;family&#34; of objects created by the factory are determined at run-time.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Protocols&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;protocol BurgerDescribing {&#xA;    var ingredients: [String] { get }&#xA;}&#xA;&#xA;struct CheeseBurger: BurgerDescribing {&#xA;    let ingredients: [String]&#xA;}&#xA;&#xA;protocol BurgerMaking {&#xA;    func make() -&amp;gt; BurgerDescribing&#xA;}&#xA;&#xA;// Number implementations with factory methods&#xA;&#xA;final class BigKahunaBurger: BurgerMaking {&#xA;    func make() -&amp;gt; BurgerDescribing {&#xA;        return CheeseBurger(ingredients: [&#34;Cheese&#34;, &#34;Burger&#34;, &#34;Lettuce&#34;, &#34;Tomato&#34;])&#xA;    }&#xA;}&#xA;&#xA;final class JackInTheBox: BurgerMaking {&#xA;    func make() -&amp;gt; BurgerDescribing {&#xA;        return CheeseBurger(ingredients: [&#34;Cheese&#34;, &#34;Burger&#34;, &#34;Tomato&#34;, &#34;Onions&#34;])&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Abstract factory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;enum BurgerFactoryType: BurgerMaking {&#xA;&#xA;    case bigKahuna&#xA;    case jackInTheBox&#xA;&#xA;    func make() -&amp;gt; BurgerDescribing {&#xA;        switch self {&#xA;        case .bigKahuna:&#xA;            return BigKahunaBurger().make()&#xA;        case .jackInTheBox:&#xA;            return JackInTheBox().make()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bigKahuna = BurgerFactoryType.bigKahuna.make()&#xA;let jackInTheBox = BurgerFactoryType.jackInTheBox.make()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;👷 Builder&lt;/h2&gt; &#xA;&lt;p&gt;The builder pattern is used to create complex objects with constituent parts that must be created in the same order or using a specific algorithm. An external class controls the construction algorithm.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class DeathStarBuilder {&#xA;&#xA;    var x: Double?&#xA;    var y: Double?&#xA;    var z: Double?&#xA;&#xA;    typealias BuilderClosure = (DeathStarBuilder) -&amp;gt; ()&#xA;&#xA;    init(buildClosure: BuilderClosure) {&#xA;        buildClosure(self)&#xA;    }&#xA;}&#xA;&#xA;struct DeathStar : CustomStringConvertible {&#xA;&#xA;    let x: Double&#xA;    let y: Double&#xA;    let z: Double&#xA;&#xA;    init?(builder: DeathStarBuilder) {&#xA;&#xA;        if let x = builder.x, let y = builder.y, let z = builder.z {&#xA;            self.x = x&#xA;            self.y = y&#xA;            self.z = z&#xA;        } else {&#xA;            return nil&#xA;        }&#xA;    }&#xA;&#xA;    var description:String {&#xA;        return &#34;Death Star at (x:\(x) y:\(y) z:\(z))&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let empire = DeathStarBuilder { builder in&#xA;    builder.x = 0.1&#xA;    builder.y = 0.2&#xA;    builder.z = 0.3&#xA;}&#xA;&#xA;let deathStar = DeathStar(builder:empire)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🏭 Factory Method&lt;/h2&gt; &#xA;&lt;p&gt;The factory pattern is used to replace class constructors, abstracting the process of object generation so that the type of the object instantiated can be determined at run-time.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol CurrencyDescribing {&#xA;    var symbol: String { get }&#xA;    var code: String { get }&#xA;}&#xA;&#xA;final class Euro: CurrencyDescribing {&#xA;    var symbol: String {&#xA;        return &#34;€&#34;&#xA;    }&#xA;    &#xA;    var code: String {&#xA;        return &#34;EUR&#34;&#xA;    }&#xA;}&#xA;&#xA;final class UnitedStatesDolar: CurrencyDescribing {&#xA;    var symbol: String {&#xA;        return &#34;$&#34;&#xA;    }&#xA;    &#xA;    var code: String {&#xA;        return &#34;USD&#34;&#xA;    }&#xA;}&#xA;&#xA;enum Country {&#xA;    case unitedStates&#xA;    case spain&#xA;    case uk&#xA;    case greece&#xA;}&#xA;&#xA;enum CurrencyFactory {&#xA;    static func currency(for country: Country) -&amp;gt; CurrencyDescribing? {&#xA;&#xA;        switch country {&#xA;            case .spain, .greece:&#xA;                return Euro()&#xA;            case .unitedStates:&#xA;                return UnitedStatesDolar()&#xA;            default:&#xA;                return nil&#xA;        }&#xA;        &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let noCurrencyCode = &#34;No Currency Code Available&#34;&#xA;&#xA;CurrencyFactory.currency(for: .greece)?.code ?? noCurrencyCode&#xA;CurrencyFactory.currency(for: .spain)?.code ?? noCurrencyCode&#xA;CurrencyFactory.currency(for: .unitedStates)?.code ?? noCurrencyCode&#xA;CurrencyFactory.currency(for: .uk)?.code ?? noCurrencyCode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔂 Monostate&lt;/h2&gt; &#xA;&lt;p&gt;The monostate pattern is another way to achieve singularity. It works through a completely different mechanism, it enforces the behavior of singularity without imposing structural constraints. So in that case, monostate saves the state as static instead of the entire instance as a singleton. &lt;a href=&#34;http://staff.cs.utu.fi/~jounsmed/doos_06/material/SingletonAndMonostate.pdf&#34;&gt;SINGLETON and MONOSTATE - Robert C. Martin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Settings {&#xA;&#xA;    enum Theme {&#xA;        case `default`&#xA;        case old&#xA;        case new&#xA;    }&#xA;&#xA;    private static var theme: Theme?&#xA;&#xA;    var currentTheme: Theme {&#xA;        get { Settings.theme ?? .default }&#xA;        set(newTheme) { Settings.theme = newTheme }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;import SwiftUI&#xA;&#xA;// When change the theme&#xA;let settings = Settings() // Starts using theme .old&#xA;settings.currentTheme = .new // Change theme to .new&#xA;&#xA;// On screen 1&#xA;let screenColor: Color = Settings().currentTheme == .old ? .gray : .white&#xA;&#xA;// On screen 2&#xA;let screenTitle: String = Settings().currentTheme == .old ? &#34;Itunes Connect&#34; : &#34;App Store Connect&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🃏 Prototype&lt;/h2&gt; &#xA;&lt;p&gt;The prototype pattern is used to instantiate a new object by copying all of the properties of an existing object, creating an independent clone. This practise is particularly useful when the construction of a new object is inefficient.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MoonWorker {&#xA;&#xA;    let name: String&#xA;    var health: Int = 100&#xA;&#xA;    init(name: String) {&#xA;        self.name = name&#xA;    }&#xA;&#xA;    func clone() -&amp;gt; MoonWorker {&#xA;        return MoonWorker(name: name)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let prototype = MoonWorker(name: &#34;Sam Bell&#34;)&#xA;&#xA;var bell1 = prototype.clone()&#xA;bell1.health = 12&#xA;&#xA;var bell2 = prototype.clone()&#xA;bell2.health = 23&#xA;&#xA;var bell3 = prototype.clone()&#xA;bell3.health = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💍 Singleton&lt;/h2&gt; &#xA;&lt;p&gt;The singleton pattern ensures that only one object of a particular class is ever created. All further references to objects of the singleton class refer to the same underlying instance. There are very few applications, do not overuse this pattern!&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class ElonMusk {&#xA;&#xA;    static let shared = ElonMusk()&#xA;&#xA;    private init() {&#xA;        // Private initialization to ensure just one instance is created.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let elon = ElonMusk.shared // There is only one Elon Musk folks.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Structural&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In software engineering, structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships between entities.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Structural_pattern&#34;&gt;wikipedia.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🔌 Adapter&lt;/h2&gt; &#xA;&lt;p&gt;The adapter pattern is used to provide a link between two otherwise incompatible types by wrapping the &#34;adaptee&#34; with a class that supports the interface required by the client.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol NewDeathStarSuperLaserAiming {&#xA;    var angleV: Double { get }&#xA;    var angleH: Double { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adaptee&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct OldDeathStarSuperlaserTarget {&#xA;    let angleHorizontal: Float&#xA;    let angleVertical: Float&#xA;&#xA;    init(angleHorizontal: Float, angleVertical: Float) {&#xA;        self.angleHorizontal = angleHorizontal&#xA;        self.angleVertical = angleVertical&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adapter&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct NewDeathStarSuperlaserTarget: NewDeathStarSuperLaserAiming {&#xA;&#xA;    private let target: OldDeathStarSuperlaserTarget&#xA;&#xA;    var angleV: Double {&#xA;        return Double(target.angleVertical)&#xA;    }&#xA;&#xA;    var angleH: Double {&#xA;        return Double(target.angleHorizontal)&#xA;    }&#xA;&#xA;    init(_ target: OldDeathStarSuperlaserTarget) {&#xA;        self.target = target&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let target = OldDeathStarSuperlaserTarget(angleHorizontal: 14.0, angleVertical: 12.0)&#xA;let newFormat = NewDeathStarSuperlaserTarget(target)&#xA;&#xA;newFormat.angleH&#xA;newFormat.angleV&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🌉 Bridge&lt;/h2&gt; &#xA;&lt;p&gt;The bridge pattern is used to separate the abstract elements of a class from the implementation details, providing the means to replace the implementation details without modifying the abstraction.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Switch {&#xA;    var appliance: Appliance { get set }&#xA;    func turnOn()&#xA;}&#xA;&#xA;protocol Appliance {&#xA;    func run()&#xA;}&#xA;&#xA;final class RemoteControl: Switch {&#xA;    var appliance: Appliance&#xA;&#xA;    func turnOn() {&#xA;        self.appliance.run()&#xA;    }&#xA;    &#xA;    init(appliance: Appliance) {&#xA;        self.appliance = appliance&#xA;    }&#xA;}&#xA;&#xA;final class TV: Appliance {&#xA;    func run() {&#xA;        print(&#34;tv turned on&#34;);&#xA;    }&#xA;}&#xA;&#xA;final class VacuumCleaner: Appliance {&#xA;    func run() {&#xA;        print(&#34;vacuum cleaner turned on&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let tvRemoteControl = RemoteControl(appliance: TV())&#xA;tvRemoteControl.turnOn()&#xA;&#xA;let fancyVacuumCleanerRemoteControl = RemoteControl(appliance: VacuumCleaner())&#xA;fancyVacuumCleanerRemoteControl.turnOn()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🌿 Composite&lt;/h2&gt; &#xA;&lt;p&gt;The composite pattern is used to create hierarchical, recursive tree structures of related objects where any element of the structure may be accessed and utilised in a standard manner.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Component&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Shape {&#xA;    func draw(fillColor: String)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Leafs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class Square: Shape {&#xA;    func draw(fillColor: String) {&#xA;        print(&#34;Drawing a Square with color \(fillColor)&#34;)&#xA;    }&#xA;}&#xA;&#xA;final class Circle: Shape {&#xA;    func draw(fillColor: String) {&#xA;        print(&#34;Drawing a circle with color \(fillColor)&#34;)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Composite&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class Whiteboard: Shape {&#xA;&#xA;    private lazy var shapes = [Shape]()&#xA;&#xA;    init(_ shapes: Shape...) {&#xA;        self.shapes = shapes&#xA;    }&#xA;&#xA;    func draw(fillColor: String) {&#xA;        for shape in self.shapes {&#xA;            shape.draw(fillColor: fillColor)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var whiteboard = Whiteboard(Circle(), Square())&#xA;whiteboard.draw(fillColor: &#34;Red&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍧 Decorator&lt;/h2&gt; &#xA;&lt;p&gt;The decorator pattern is used to extend or alter the functionality of objects at run- time by wrapping them in an object of a decorator class. This provides a flexible alternative to using inheritance to modify behaviour.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol CostHaving {&#xA;    var cost: Double { get }&#xA;}&#xA;&#xA;protocol IngredientsHaving {&#xA;    var ingredients: [String] { get }&#xA;}&#xA;&#xA;typealias BeverageDataHaving = CostHaving &amp;amp; IngredientsHaving&#xA;&#xA;struct SimpleCoffee: BeverageDataHaving {&#xA;    let cost: Double = 1.0&#xA;    let ingredients = [&#34;Water&#34;, &#34;Coffee&#34;]&#xA;}&#xA;&#xA;protocol BeverageHaving: BeverageDataHaving {&#xA;    var beverage: BeverageDataHaving { get }&#xA;}&#xA;&#xA;struct Milk: BeverageHaving {&#xA;&#xA;    let beverage: BeverageDataHaving&#xA;&#xA;    var cost: Double {&#xA;        return beverage.cost + 0.5&#xA;    }&#xA;&#xA;    var ingredients: [String] {&#xA;        return beverage.ingredients + [&#34;Milk&#34;]&#xA;    }&#xA;}&#xA;&#xA;struct WhipCoffee: BeverageHaving {&#xA;&#xA;    let beverage: BeverageDataHaving&#xA;&#xA;    var cost: Double {&#xA;        return beverage.cost + 0.5&#xA;    }&#xA;&#xA;    var ingredients: [String] {&#xA;        return beverage.ingredients + [&#34;Whip&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var someCoffee: BeverageDataHaving = SimpleCoffee()&#xA;print(&#34;Cost: \(someCoffee.cost); Ingredients: \(someCoffee.ingredients)&#34;)&#xA;someCoffee = Milk(beverage: someCoffee)&#xA;print(&#34;Cost: \(someCoffee.cost); Ingredients: \(someCoffee.ingredients)&#34;)&#xA;someCoffee = WhipCoffee(beverage: someCoffee)&#xA;print(&#34;Cost: \(someCoffee.cost); Ingredients: \(someCoffee.ingredients)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🎁 Façade&lt;/h2&gt; &#xA;&lt;p&gt;The facade pattern is used to define a simplified interface to a more complex subsystem.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class Defaults {&#xA;&#xA;    private let defaults: UserDefaults&#xA;&#xA;    init(defaults: UserDefaults = .standard) {&#xA;        self.defaults = defaults&#xA;    }&#xA;&#xA;    subscript(key: String) -&amp;gt; String? {&#xA;        get {&#xA;            return defaults.string(forKey: key)&#xA;        }&#xA;&#xA;        set {&#xA;            defaults.set(newValue, forKey: key)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let storage = Defaults()&#xA;&#xA;// Store&#xA;storage[&#34;Bishop&#34;] = &#34;Disconnect me. I’d rather be nothing&#34;&#xA;&#xA;// Read&#xA;storage[&#34;Bishop&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍃 Flyweight&lt;/h2&gt; &#xA;&lt;p&gt;The flyweight pattern is used to minimize memory usage or computational expenses by sharing as much as possible with other similar objects.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Instances of SpecialityCoffee will be the Flyweights&#xA;struct SpecialityCoffee {&#xA;    let origin: String&#xA;}&#xA;&#xA;protocol CoffeeSearching {&#xA;    func search(origin: String) -&amp;gt; SpecialityCoffee?&#xA;}&#xA;&#xA;// Menu acts as a factory and cache for SpecialityCoffee flyweight objects&#xA;final class Menu: CoffeeSearching {&#xA;&#xA;    private var coffeeAvailable: [String: SpecialityCoffee] = [:]&#xA;&#xA;    func search(origin: String) -&amp;gt; SpecialityCoffee? {&#xA;        if coffeeAvailable.index(forKey: origin) == nil {&#xA;            coffeeAvailable[origin] = SpecialityCoffee(origin: origin)&#xA;        }&#xA;&#xA;        return coffeeAvailable[origin]&#xA;    }&#xA;}&#xA;&#xA;final class CoffeeShop {&#xA;    private var orders: [Int: SpecialityCoffee] = [:]&#xA;    private let menu: CoffeeSearching&#xA;&#xA;    init(menu: CoffeeSearching) {&#xA;        self.menu = menu&#xA;    }&#xA;&#xA;    func takeOrder(origin: String, table: Int) {&#xA;        orders[table] = menu.search(origin: origin)&#xA;    }&#xA;&#xA;    func serve() {&#xA;        for (table, origin) in orders {&#xA;            print(&#34;Serving \(origin) to table \(table)&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let coffeeShop = CoffeeShop(menu: Menu())&#xA;&#xA;coffeeShop.takeOrder(origin: &#34;Yirgacheffe, Ethiopia&#34;, table: 1)&#xA;coffeeShop.takeOrder(origin: &#34;Buziraguhindwa, Burundi&#34;, table: 3)&#xA;&#xA;coffeeShop.serve()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;☔ Protection Proxy&lt;/h2&gt; &#xA;&lt;p&gt;The proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. Protection proxy is restricting access.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DoorOpening {&#xA;    func open(doors: String) -&amp;gt; String&#xA;}&#xA;&#xA;final class HAL9000: DoorOpening {&#xA;    func open(doors: String) -&amp;gt; String {&#xA;        return (&#34;HAL9000: Affirmative, Dave. I read you. Opened \(doors).&#34;)&#xA;    }&#xA;}&#xA;&#xA;final class CurrentComputer: DoorOpening {&#xA;    private var computer: HAL9000!&#xA;&#xA;    func authenticate(password: String) -&amp;gt; Bool {&#xA;&#xA;        guard password == &#34;pass&#34; else {&#xA;            return false&#xA;        }&#xA;&#xA;        computer = HAL9000()&#xA;&#xA;        return true&#xA;    }&#xA;&#xA;    func open(doors: String) -&amp;gt; String {&#xA;&#xA;        guard computer != nil else {&#xA;            return &#34;Access Denied. I&#39;m afraid I can&#39;t do that.&#34;&#xA;        }&#xA;&#xA;        return computer.open(doors: doors)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let computer = CurrentComputer()&#xA;let podBay = &#34;Pod Bay Doors&#34;&#xA;&#xA;computer.open(doors: podBay)&#xA;&#xA;computer.authenticate(password: &#34;pass&#34;)&#xA;computer.open(doors: podBay)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍬 Virtual Proxy&lt;/h2&gt; &#xA;&lt;p&gt;The proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. Virtual proxy is used for loading object on demand.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol HEVSuitMedicalAid {&#xA;    func administerMorphine() -&amp;gt; String&#xA;}&#xA;&#xA;final class HEVSuit: HEVSuitMedicalAid {&#xA;    func administerMorphine() -&amp;gt; String {&#xA;        return &#34;Morphine administered.&#34;&#xA;    }&#xA;}&#xA;&#xA;final class HEVSuitHumanInterface: HEVSuitMedicalAid {&#xA;&#xA;    lazy private var physicalSuit: HEVSuit = HEVSuit()&#xA;&#xA;    func administerMorphine() -&amp;gt; String {&#xA;        return physicalSuit.administerMorphine()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let humanInterface = HEVSuitHumanInterface()&#xA;humanInterface.administerMorphine()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Info&lt;/h1&gt; &#xA;&lt;p&gt;📖 Descriptions from: &lt;a href=&#34;http://www.blackwasp.co.uk/GangOfFour.aspx&#34;&gt;Gang of Four Design Patterns Reference Sheet&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iVoider/PlayCover</title>
    <updated>2022-06-03T02:53:52Z</updated>
    <id>tag:github.com,2022-06-03:/iVoider/PlayCover</id>
    <link href="https://github.com/iVoider/PlayCover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PlayCover is a project that allows you to sideload iOS apps on macOS (currently arm, Intel support will be tested)&lt;/p&gt;&lt;hr&gt;&lt;div id=&#34;top&#34;&gt;&lt;/div&gt; &#xA;&lt;p&gt;‎&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/iVoider/PlayCover/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/iVoider/PlayCover.svg?style=for-the-badge&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iVoider/PlayCover/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/iVoider/PlayCover.svg?style=for-the-badge&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iVoider/PlayCover/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/iVoider/PlayCover.svg?style=for-the-badge&#34; alt=&#34;Stargazers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iVoider/PlayCover/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/iVoider/PlayCover.svg?style=for-the-badge&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iVoider/PlayCover/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/iVoider/PlayCover.svg?style=for-the-badge&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt; &lt;/h1&gt; &#xA;&lt;!-- PROJECT LOGO --&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/iVoider/PlayCover&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/images/logo.png&#34; alt=&#34;Logo&#34; width=&#34;80&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt;PlayCover&lt;/h3&gt; &#xA; &lt;p align=&#34;center&#34;&gt; Run iOS apps &amp;amp; games on M1 Mac with mouse, keyboard and controller support. &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=grY63FBJ6N4&#34;&gt;Showcase&lt;/a&gt; · &lt;a href=&#34;https://github.com/iVoider/PlayCover/pulls&#34;&gt;Contribute&lt;/a&gt; · &lt;a href=&#34;https://discord.gg/rMv5qxGTGC&#34;&gt;Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- ABOUT THE PROJECT --&gt; &#xA;&lt;h2&gt;About The Project&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to PlayCover! This software is all about allowing you to run apps &amp;amp; games on your M1 device runnnig macOS 12.0 or newer.&lt;/p&gt; &#xA;&lt;p&gt;It does this by putting the applications through a wrapper which imitates an iPad. This allows the apps to perform very well and run natively, because the M1 chip is essentially a glorified mobile chip. Another advantage to the software is that you can insert and manipulate custom controls with your keyboard, which is not possible in alternative sideloading methods such as Sideloadly. These controls include all the essentials, from WASD, Camera movement, Left and Right clicks, and individual keymapping, similar to a popular Android emulator’s keymapping system called Bluestacks.&lt;/p&gt; &#xA;&lt;p&gt;While this software was originally created to allow you to run Genshin Impact on your M1 device, it grew to allow many more applications to run. Although support for all games is not promised and bugs with games are expected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/images/dark.png#gh-dark-mode-only&#34; alt=&#34;Fancy logo&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/images/light.png#gh-light-mode-only&#34; alt=&#34;Fancy logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;⬆️ Back to top️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- GETTING STARTED --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Following the installation instructions will get Genshin Impact you up and running in no time. The steps can be repeated if you want to try out other games or apps.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;At the moment, PlayCover can only be installed and executed on M1 MacBooks. Devices with the following chips are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;M1&lt;/li&gt; &#xA; &lt;li&gt;M1 Pro&lt;/li&gt; &#xA; &lt;li&gt;M1 Max&lt;/li&gt; &#xA; &lt;li&gt;M1 Ultra&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unfortunately, it cannot run on any Intel chips, so you are forced to use Bootcamp or other emulators.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Disable SIP&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This can be done by shutting down your mac, holding down power button&lt;/li&gt; &#xA;   &lt;li&gt;After this, click on your username/ssd, then keep going until you can see &lt;code&gt;Utilities&lt;/code&gt; at the top&lt;/li&gt; &#xA;   &lt;li&gt;When you see this, click on it and click on &lt;code&gt;Terminal&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;After this, you should be in a terminal window&lt;/li&gt; &#xA;   &lt;li&gt;Type &lt;code&gt;csrutil disable&lt;/code&gt; in that terminal window&lt;/li&gt; &#xA;   &lt;li&gt;Put your password and everything, then restart your mac&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify nvram boot-args&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When you have SIP disabled, type the following: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Command + Space&lt;/code&gt;, type &lt;code&gt;Terminal&lt;/code&gt; in the search box&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;It should open a normal terminal window&lt;/li&gt; &#xA;   &lt;li&gt;Type the following in this window (or copy paste it) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;sudo nvram boot-args=&#34;amfi_get_out_of_my_way=1&#34;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;If it appears that nothing has happened, this is correct.&lt;/li&gt; &#xA;   &lt;li&gt;Now restart your mac once again&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Genshin&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open Genshin Impact with PlayCover, and you should be greeted with a Login button&lt;/li&gt; &#xA;   &lt;li&gt;Login to your account, then wait until the door appears and quit the game with &lt;code&gt;Command + Q&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Thats all which is required in Genshin for now&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable SIP&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shut down your mac again&lt;/li&gt; &#xA;   &lt;li&gt;Hold down the power button until you get to recovery options&lt;/li&gt; &#xA;   &lt;li&gt;Click on your username and your storage disk respectively like you did for step 1.&lt;/li&gt; &#xA;   &lt;li&gt;You should see &lt;code&gt;Utilities&lt;/code&gt; at the top&lt;/li&gt; &#xA;   &lt;li&gt;Click on it, and Click on &lt;code&gt;Terminal&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;In terminal, type the following: &lt;code&gt;csrutil enable&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;csrutil clear&lt;/code&gt; should also work&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Reboot your mac by going to &lt;code&gt;Apple Logo&lt;/code&gt; &amp;gt; &lt;code&gt;Restart&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Genshin&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You&#39;re done! Enjoy playing genshin!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Video Instructions&lt;/h3&gt; &#xA;&lt;p&gt;The above steps are shown in the following video:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZRmCjkS3UZE&#34;&gt;How to play Genshin Impact using Playcover on your M1 Mac (2020 or newer)!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;⬆️ Back to top️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- USAGE EXAMPLES --&gt; &#xA;&lt;h2&gt;Keymapping&lt;/h2&gt; &#xA;&lt;h3&gt;Button Events&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Opens a menu to add a button element &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on the screen&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Edit keymapping binding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Click on a keymap and press the key you want binded&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bind left mouse button &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on &lt;strong&gt;&#39;LB&#39;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bind right mouse button &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on &lt;strong&gt;&#39;RB&#39;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bind middle mouse button &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on &lt;strong&gt;&#39;🖱️&#39;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Adds a W/A/S/D joystick &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on the &lt;strong&gt;&#39;➕&#39;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Adds a mouse area for mouse control &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clicking on the &lt;strong&gt;&#39;🔁&#39;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Flow Control&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increase the selected buttons size &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Menu Bar &amp;gt; &lt;code&gt;Keymapping&lt;/code&gt; &amp;gt; Upsize Selected Element OR &lt;code&gt;Cmd + &#39;↑&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Decrease the selected buttons size &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Menu Bar &amp;gt; &lt;code&gt;Keymapping&lt;/code&gt; &amp;gt; Upsize Selected Element OR &lt;code&gt;Cmd + &#39;↓&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Delete the selected keymapping &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CMD + delete (backspace)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Toggle between show/hide cursor &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press option (⌥)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Importing Keybinds&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the &lt;code&gt;.playmap&lt;/code&gt; file from &lt;a href=&#34;https://discord.com/channels/871829896492642387/922068254569160745&#34;&gt;#📝・keymap-showcase&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open PlayCover and right click the app you wish to import the keybinds to&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on &lt;code&gt;Import Keymapping&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the previously downloaded &lt;code&gt;.playmap&lt;/code&gt; file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Quit and reopen the app&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This step is required for the newly imported keymapping to work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;For additional help, please join the &lt;a href=&#34;https://discord.gg/rMv5qxGTGC&#34;&gt;Discord server&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;⬆️ Back to top️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- CONTRIBUTING --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have a suggestion that would make this better, please fork the repo and create a pull request. Don&#39;t forget to give the project a star! Thanks again!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;⬆️ Back to top️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- LICENSE --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the AGPLv3 License. See &lt;code&gt;LICENSE&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;⬆️ Back to top️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- CONTACT --&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Alexandr Dorofeev - &lt;a href=&#34;mailto:business@playcover.me&#34;&gt;business@playcover.me&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Link: &lt;a href=&#34;https://github.com/iVoider/PlayCover&#34;&gt;https://github.com/iVoider/PlayCover&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;⬆️ Back to top️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ACKNOWLEDGMENTS --&gt; &#xA;&lt;h2&gt;Libraries Used&lt;/h2&gt; &#xA;&lt;p&gt;These open source libraries were used to create this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paradiseduo/appdecrypt/tree/main/Sources/appdecrypt&#34;&gt;appdecrypt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexzielenski/optool&#34;&gt;optool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ret70/PTFakeTouch&#34;&gt;PTFakeTouch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iVoider/PlayCover/main/#top&#34;&gt;⬆️ Back to top️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt;</summary>
  </entry>
</feed>