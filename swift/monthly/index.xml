<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:57:03Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jellyfin/Swiftfin</title>
    <updated>2023-01-01T01:57:03Z</updated>
    <id>tag:github.com,2023-01-01:/jellyfin/Swiftfin</id>
    <link href="https://github.com/jellyfin/Swiftfin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Native Jellyfin Client for iOS and tvOS&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Swiftfin&#34; height=&#34;125&#34; src=&#34;https://github.com/jellyfin/Swiftfin/raw/main/Swiftfin/Assets.xcassets/AppIcon.appiconset/152.png&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;Swiftfin&lt;/h2&gt; &#xA;&lt;a href=&#34;https://translate.jellyfin.org/engage/swiftfin/&#34;&gt; &lt;img src=&#34;https://translate.jellyfin.org/widgets/swiftfin/-/svg-badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://matrix.to/#/+jellyfin:matrix.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/matrix/jellyfin:matrix.org&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://discord.gg/zHBxVSXdBV&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Talk%20on-Discord-brightgreen&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Swiftfin&lt;/b&gt; is a modern video client for the &lt;a href=&#34;https://github.com/jellyfin/jellyfin&#34;&gt;Jellyfin&lt;/a&gt; media server. Redesigned in Swift to maximize direct play with the power of &lt;b&gt;VLC&lt;/b&gt; and look &lt;b&gt;native&lt;/b&gt; on all classes of Apple devices. &lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è TestFlight&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚ú®New! Updated TestFlight Link&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://testflight.apple.com/join/oZd0QzWv&#34;&gt;&lt;img height=&#34;70&#34; alt=&#34;Join the Beta on TestFlight&#34; src=&#34;https://anotherlens.app/testflight-badge.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Apple TV (without an iOS/iPadOS device)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have an Apple TV and do not own an iOS device, please use this &lt;a href=&#34;https://forms.gle/U5CczbfQzm8MbpJX9&#34;&gt;Google Form&lt;/a&gt; to get an invitation code.&lt;/p&gt; &#xA;&lt;h2&gt;üìö Translations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t see Swiftfin in your language?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://translate.jellyfin.org/projects/swiftfin/&#34;&gt;Weblate instance&lt;/a&gt; to help translate Swiftfin and other projects.&lt;/p&gt; &#xA;&lt;a href=&#34;https://translate.jellyfin.org/engage/swiftfin/&#34;&gt; &lt;img src=&#34;https://translate.jellyfin.org/widgets/swiftfin/-/multi-auto.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Development&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for your interest in Swiftfin! Please check out the &lt;a href=&#34;https://github.com/jellyfin/Swiftfin/raw/main/contributing.md&#34;&gt;Contribution Guidelines&lt;/a&gt; to get started.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rileytestut/AltStore</title>
    <updated>2023-01-01T01:57:03Z</updated>
    <id>tag:github.com,2023-01-01:/rileytestut/AltStore</id>
    <link href="https://github.com/rileytestut/AltStore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AltStore&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.0-orange.svg?sanitize=true&#34; alt=&#34;Swift Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: AGPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AltStore is an iOS application that allows you to sideload other apps (.ipa files) onto your iOS device with just your Apple ID. AltStore resigns apps with your personal development certificate and sends them to a desktop app, AltServer, which installs the resigned apps back to your device using iTunes WiFi sync. To prevent apps from expiring, AltStore will also periodically refresh your apps in the background when on the same WiFi as AltServer.&lt;/p&gt; &#xA;&lt;p&gt;For the initial release, I focused on building a solid foundation for distributing my own apps ‚Äî primarily Delta, &lt;a href=&#34;https://github.com/rileytestut/Delta&#34;&gt;my all-in-one emulator for iOS&lt;/a&gt;. Now that Delta has been released, however, I&#39;m beginning work on adding support for &lt;em&gt;anyone&lt;/em&gt; to list and distribute their apps through AltStore (contributions welcome! üôÇ).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs apps over WiFi using AltServer&lt;/li&gt; &#xA; &lt;li&gt;Resigns and installs any app with your Apple ID&lt;/li&gt; &#xA; &lt;li&gt;Refreshes apps periodically in the background to prevent them from expiring (when on same WiFi as AltServer)&lt;/li&gt; &#xA; &lt;li&gt;Handles app updates directly through AltStore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11&lt;/li&gt; &#xA; &lt;li&gt;iOS 12.2+ (AltStore)&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.14.4+ (AltServer)&lt;/li&gt; &#xA; &lt;li&gt;Swift 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why iOS 12.2+ and macOS 10.14.4+? Doing so allows me to distribute all AltStore apps without embedding Swift libraries inside them. This helps me afford bandwidth costs by reducing download sizes by roughly 30%, but also noticeably improves how long it takes to install/refresh apps with AltStore. If you&#39;re compiling AltStore and/or AltServer yourself, however, you should be able to lower their deployment targets to iOS 12.0 and macOS 10.14.0, respectively, without any issues.&lt;/p&gt; &#xA;&lt;h2&gt;Project Overview&lt;/h2&gt; &#xA;&lt;h3&gt;AltStore&lt;/h3&gt; &#xA;&lt;p&gt;AltStore is a just regular, sandboxed iOS application. The AltStore app target contains the vast majority of AltStore&#39;s functionality, including all the logic for downloading and updating apps through AltStore. AltStore makes heavy use of standard iOS frameworks and technologies most iOS developers are familiar with, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core Data&lt;/li&gt; &#xA; &lt;li&gt;Storyboards/Nibs&lt;/li&gt; &#xA; &lt;li&gt;Auto Layout&lt;/li&gt; &#xA; &lt;li&gt;Background App Refresh&lt;/li&gt; &#xA; &lt;li&gt;Network.framework (new in iOS 12)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;AltServer&lt;/h3&gt; &#xA;&lt;p&gt;AltServer is also just a regular, sandboxed macOS application. AltServer is significantly less complex than AltStore though, and for that reason consists of only a handful of files.&lt;/p&gt; &#xA;&lt;h3&gt;AltKit&lt;/h3&gt; &#xA;&lt;p&gt;AltKit is a shared framework that includes common code between AltStore and AltServer.&lt;/p&gt; &#xA;&lt;h3&gt;AltSign&lt;/h3&gt; &#xA;&lt;p&gt;AltSign is my internal framework used by both AltStore and AltServer to communicate with Apple&#39;s servers and resign apps. For more info, check the &lt;a href=&#34;https://github.com/rileytestut/altsign&#34;&gt;AltSign repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Roxas&lt;/h3&gt; &#xA;&lt;p&gt;Roxas is my internal framework used across all my iOS projects, developed to simplify a variety of common tasks used in iOS development. For more info, check the &lt;a href=&#34;https://github.com/rileytestut/roxas&#34;&gt;Roxas repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation Instructions&lt;/h2&gt; &#xA;&lt;p&gt;AltStore and AltServer are both fairly straightforward to compile and run if you&#39;re already an iOS or macOS developer. To compile AltStore and/or AltServer:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository &lt;pre&gt;&lt;code&gt;git clone https://github.com/rileytestut/AltStore.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update submodules: &lt;pre&gt;&lt;code&gt;cd AltStore &#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;AltStore.xcworkspace&lt;/code&gt; and select the AltStore project in the project navigator. On the &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt; tab, change the team from &lt;code&gt;Yvette Testut&lt;/code&gt; to your own account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTDeviceID&lt;/code&gt; in the Info.plist to your device&#39;s UDID. Normally, AltServer embeds the device&#39;s UDID in AltStore&#39;s Info.plist during installation. When running through Xcode you&#39;ll need to set the value yourself or else AltStore won&#39;t resign (or even install) apps for the proper device.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTServerID&lt;/code&gt; in the Info.plist to your AltServer&#39;s serverID. This is embedded by AltServer during installation to help AltStore distinguish between multiple AltServers on the same network, and you can find this by using a Bonjour browsing application and noting the serverID advertised by AltServer. This isn&#39;t strictly necessary, because if AltStore can&#39;t find the AltServer with the embedded serverID it still falls back to trying another AltServer. However, this will help in cases where there are multiple AltServers running (plus the error messages are more helpful).&lt;/li&gt; &#xA; &lt;li&gt;Build + run app! üéâ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Due to the licensing of some dependencies used by AltStore, I have no choice but to distribute AltStore under the &lt;strong&gt;AGPLv3 license&lt;/strong&gt;. That being said, my goal for AltStore is for it to be an open source project &lt;em&gt;anyone&lt;/em&gt; can use without restrictions, so I explicitly give permission for anyone to use, modify, and distribute all &lt;em&gt;my&lt;/em&gt; original code for this project in any form, with or without attribution, without fear of legal consequences (dependencies remain under their original licenses, however).&lt;/p&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:riley@rileytestut.com&#34;&gt;riley@rileytestut.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/rileytestut&#34;&gt;@rileytestut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Questions about AltStore in general? Make sure to read the FAQ at &lt;a href=&#34;https://altstore.io/faq/&#34;&gt;https://altstore.io/faq/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mac-cain13/R.swift</title>
    <updated>2023-01-01T01:57:03Z</updated>
    <id>tag:github.com,2023-01-01:/mac-cain13/R.swift</id>
    <link href="https://github.com/mac-cain13/R.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Strong typed, autocompleted resources like images, fonts and segues in Swift projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;R.swift &lt;a href=&#34;https://cocoapods.org/pods/R.swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/R.swift.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/blob/master/License&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/R.swift.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/R.swift.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Get strong typed, autocompleted resources like images, fonts and segues in Swift projects&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why use this?&lt;/h2&gt; &#xA;&lt;p&gt;It makes your code that uses resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fully typed&lt;/strong&gt;, less casting and guessing what a method will return&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compile time checked&lt;/strong&gt;, no more incorrect strings that make your app crash at runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Autocompleted&lt;/strong&gt;, never have to guess that image name again&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently you type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let icon = UIImage(named: &#34;settings-icon&#34;)&#xA;let font = UIFont(name: &#34;San Francisco&#34;, size: 42)&#xA;let color = UIColor(named: &#34;indicator highlight&#34;)&#xA;let viewController = CustomViewController(nibName: &#34;CustomView&#34;, bundle: nil)&#xA;let string = String(format: NSLocalizedString(&#34;welcome.withName&#34;, comment: &#34;&#34;), locale: NSLocale.current, &#34;Arthur Dent&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With R.swift it becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let icon = R.image.settingsIcon()&#xA;let font = R.font.sanFrancisco(size: 42)&#xA;let color = R.color.indicatorHighlight()&#xA;let viewController = CustomViewController(nib: R.nib.customView)&#xA;let string = R.string.localizable.welcomeWithName(&#34;Arthur Dent&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md&#34;&gt;more examples&lt;/a&gt; or hear about &lt;a href=&#34;https://academy.realm.io/posts/slug-javi-soto-building-fabric-in-swift/#rswift-2956&#34;&gt;how Fabric.app uses R.swift&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Autocompleted images:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/DemoUseImage.gif&#34; alt=&#34;Autocompleted images&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiletime checked images:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/DemoRenameImage.gif&#34; alt=&#34;Compiletime checked images&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is only the beginning, check out &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md&#34;&gt;more examples&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;CocoaHeadsNL presentation&lt;/h2&gt; &#xA;&lt;p&gt;Mathijs Kadijk presented R.swift at the September 2016 CocoaHeadsNL meetup. Talking about the ideas behind R.swift and demonstrating how to move from plain stringly-typed iOS code to statically typed code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/embed/C8kRUTV9TOA&#34;&gt;&lt;img src=&#34;https://i.ytimg.com/vi/C8kRUTV9TOA/maxresdefault.jpg&#34; width=&#34;560&#34; alt=&#34;R.swift presentation at CocoaHeadsNL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;After installing R.swift into your project you can use the &lt;code&gt;R&lt;/code&gt;-struct to access resources. If the struct is outdated just build and R.swift will correct any missing/changed/added resources.&lt;/p&gt; &#xA;&lt;p&gt;R.swift currently supports these types of resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#custom-fonts&#34;&gt;Fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#resource-files&#34;&gt;Resource files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#colors&#34;&gt;Colors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#localized-strings&#34;&gt;Localized strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#storyboards&#34;&gt;Storyboards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#segues&#34;&gt;Segues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#nibs&#34;&gt;Nibs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#reusable-table-view-cells&#34;&gt;Reusable cells&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Runtime validation with &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#runtime-validation&#34;&gt;&lt;code&gt;R.validate()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If all images used in storyboards and nibs are available&lt;/li&gt; &#xA; &lt;li&gt;If all named colors used in storyboards and nibs are available&lt;/li&gt; &#xA; &lt;li&gt;If all view controllers with storyboard identifiers can be loaded&lt;/li&gt; &#xA; &lt;li&gt;If all custom fonts can be loaded&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#why-was-rswift-created&#34;&gt;Why was R.swift created?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#why-should-i-choose-rswift-over-alternative-x-or-y&#34;&gt;Why should I choose R.swift over alternative X or Y?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#what-are-the-requirements-to-run-rswift&#34;&gt;What are the requirements to run R.swift?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-use-methods-with-a-void-argument&#34;&gt;How to use methods with a &lt;code&gt;Void&lt;/code&gt; argument?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-fix-missing-imports-in-the-generated-file&#34;&gt;How to fix missing imports in the generated file?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-use-classes-with-the-same-name-as-their-module&#34;&gt;How to use classes with the same name as their module?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Ignoring.md&#34;&gt;Can I ignore resources?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#can-i-use-rswift-in-a-library&#34;&gt;Can I use R.swift in a library?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-does-rswift-work&#34;&gt;How does R.swift work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Migration.md&#34;&gt;How to upgrade to a new major version?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift/raw/master/Documentation/Ignoring.md#only-run-specific-generators-exclude-rsomething&#34;&gt;How can I only run specific generators?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;As of Rswift 7, Swift Package Manager is the recommended method of installation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/icihJ_hin3I?t=66&#34;&gt;Demo video: Updating from R.swift 6 to Rswift 7&lt;/a&gt; (Starting at 1:06, this describes the installation of Rswift 7).&lt;/p&gt; &#xA;&lt;h3&gt;Xcode project - SPM&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In Project Settings, on the tab &#34;Package Dependencies&#34;, click &#34;+&#34; and add &lt;code&gt;github.com/mac-cain13/R.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select your target, on the tab &#34;General&#34;, in the section &#34;Frameworks, Libraries, and Embeded Content&#34;, click &#34;+&#34; and add &lt;code&gt;RswiftLibrary&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select your target, on the tab &#34;Build Phases&#34;, in the section &#34;Run Build Tool Plug-ins&#34;, click &#34;+&#34; and add &lt;code&gt;RswiftGenerateInternalResources&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Right-click on your project, click &lt;code&gt;RswiftModifyXcodePackages&lt;/code&gt;, click &lt;code&gt;Run&lt;/code&gt;, click &lt;code&gt;Allow Command to Change Files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build your project, now the &lt;code&gt;R&lt;/code&gt; struct should be available in your code, use auto-complete to explore all static references&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/RunBuildToolPluginsRswift.png&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Package.swift based SPM project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add a dependency in Package.swift: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/mac-cain13/R.swift.git&#34;, from: &#34;7.0.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;For each relevant target, add a dependency and a plugin &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(&#xA;    name: &#34;Example&#34;,&#xA;    dependencies: [.product(name: &#34;RswiftLibrary&#34;, package: &#34;R.swift&#34;)],&#xA;    plugins: [.plugin(name: &#34;RswiftGeneratePublicResources&#34;, package: &#34;R.swift&#34;)]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build your project, now the &lt;code&gt;R&lt;/code&gt; struct should be available in your code, use auto-complete to explore all static references&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;CocoaPods&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;pod &#39;R.swift&#39;&lt;/code&gt; to your &lt;a href=&#34;http://cocoapods.org/#get_started&#34;&gt;Podfile&lt;/a&gt; and run &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA;  &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase and &lt;strong&gt;below&lt;/strong&gt; &lt;code&gt;Check Pods Manifest.lock&lt;/code&gt;, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;$PODS_ROOT/R.swift/rswift&#34; generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA;  &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA;  &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/BuildPhaseExample.png&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Mint&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;ol start=&#34;0&#34;&gt; &#xA;  &lt;li&gt;Add the &lt;a href=&#34;https://github.com/mac-cain13/R.swift&#34;&gt;R.swift&lt;/a&gt; library to your project&lt;/li&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;mac-cain13/R.swift&lt;/code&gt; to your &lt;a href=&#34;https://github.com/yonaskolb/Mint#mintfile&#34;&gt;Mintfile&lt;/a&gt; and run &lt;code&gt;mint bootstrap&lt;/code&gt; to install this package without linking it globally (recommended)&lt;/li&gt; &#xA;  &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA;  &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if mint list | grep -q &#39;R.swift&#39;; then&#xA;  mint run R.swift@v7.0.1 rswift generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;else&#xA;  echo &#34;error: R.swift not installed; run &#39;mint bootstrap&#39; to install&#34;&#xA;  return -1&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA;  &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA;  &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Homebrew&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;R.swift is also available through &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;. This makes it possible to install R.swift globally on your system. Install R.swift by running: &lt;code&gt;brew install rswift&lt;/code&gt;. The Homebrew formula is maintained by &lt;a href=&#34;https://github.com/tomasharkema&#34;&gt;@tomasharkema&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Manually&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;ol start=&#34;0&#34;&gt; &#xA;  &lt;li&gt;Add the &lt;a href=&#34;https://github.com/mac-cain13/R.swift&#34;&gt;R.swift&lt;/a&gt; library to your project&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift/releases&#34;&gt;Download&lt;/a&gt; a R.swift release, unzip it and put it into your source root directory&lt;/li&gt; &#xA;  &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA;  &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;$SRCROOT/rswift&#34; generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA;  &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA;  &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/ManualBuildPhaseExample.png&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ll love contributions, read the &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Contribute.md&#34;&gt;contribute docs&lt;/a&gt; for info on how to report issues, submit ideas and submit pull requests!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift&#34;&gt;R.swift&lt;/a&gt; and &lt;a href=&#34;https://github.com/mac-cain13/R.swift.Library&#34;&gt;R.swift.Library&lt;/a&gt; are created by &lt;a href=&#34;https://github.com/mac-cain13&#34;&gt;Mathijs Kadijk&lt;/a&gt; and released under a &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/License&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/tomlokhorst&#34;&gt;Tom Lokhorst&lt;/a&gt; for his major contributions and help maintaining this project.&lt;/p&gt;</summary>
  </entry>
</feed>