<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-01T01:56:55Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AppHouseKitchen/AlDente-Charge-Limiter</title>
    <updated>2025-07-01T01:56:55Z</updated>
    <id>tag:github.com,2025-07-01:/AppHouseKitchen/AlDente-Charge-Limiter</id>
    <link href="https://github.com/AppHouseKitchen/AlDente-Charge-Limiter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Menubar Tool to set Charge Limits and Prolong Battery Lifespan&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/AppHouseKitchen/AlDente-Charge-Limiter/master/AlDente/Assets.xcassets/AppIcon.appiconset/512pt_Mac_1x.png&#34; width=&#34;200&#34; height=&#34;200&#34;&gt; &#xA; &lt;h1&gt;AlDente - Charge Limiter&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;em&gt;MacOS menu bar tool to limit maximum charging percentage&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Don&#39;t overcook your battery! Keep it fresh and chewy with AlDente.&lt;/h4&gt; &#xA;&lt;h2&gt;Why do I need this?&lt;/h2&gt; &#xA;&lt;p&gt;Li-Ion batteries (like the one in your MacBook) last the longest when operating between 20 and 80 percent. Keeping your battery at 100% at all times can shorten the lifespan of your MacBook significantly. More information can be found at &lt;a href=&#34;https://batteryuniversity.com/article/bu-415-how-to-charge-and-when-to-charge&#34;&gt;Battery University&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What‚Äôs AlDente Pro?&lt;/h2&gt; &#xA;&lt;p&gt;AlDente Pro is our paid version of AlDente. It has many more features such as Heat Protection, Sailing Mode, Top Up, Calibration Mode,... It offers a better design and has live status icons. If you are interested in getting the most out of your battery, check out our &lt;a href=&#34;https://apphousekitchen.com/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;AlDente Pro is now available on &lt;a href=&#34;https://apphousekitchen.com/pricing/&#34;&gt;Setapp&lt;/a&gt; too.&lt;/p&gt; &#xA;&lt;h2&gt;Features of AlDente Free&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Charge Limiter allows you to set your maximum charging percentage between 20 and 100 percent. You can either set it by using the slide bar or by typing in the desired percentage in the field above and pressing enter afterwards. Read more about the Charge Limiter feature in this article &lt;a href=&#34;https://apphousekitchen.com/feature-explanation-charge-limiter/&#34;&gt;&#34;Feature Explanation: Charge Limiter&#34;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Discharge - This feature allows your MacBook to run completely on Battery even if it is plugged in. Therefore, you can actively discharge your MacBook to a more healthy percentage. Unfortunately, while Discharge is activated, clamshell mode is not supported due to technical limitations. Read more about the Discharge feature in this article &lt;a href=&#34;https://apphousekitchen.com/feature-explanation-discharge/&#34;&gt;&#34;Feature Explanation: Discharge&#34;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported MacBook Models (macOS 11 Big Sur or later required)&lt;/h2&gt; &#xA;&lt;p&gt;Check out if your MacBook is supported on our &lt;a href=&#34;https://apphousekitchen.com/faq/&#34;&gt;FAQ page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download the app from GitHub: &lt;a href=&#34;https://github.com/davidwernhart/AlDente/releases&#34;&gt;https://github.com/davidwernhart/AlDente/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation Guide&lt;/h2&gt; &#xA;&lt;p&gt;An installation guide can be found on our website:&lt;a href=&#34;https://apphousekitchen.com/installation-guide/&#34;&gt;Installation Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;When the installation is finished, enter your desired max. charging percentage by clicking on the üçù icon on your menu bar. Usually, the operating system will take a minute or two registering the changes, so be patient. You can check if it&#39;s working by setting the max. percentage to e.g.: 80%. After a while, clicking on your battery icon will report &#34;Battery is not charging&#34; if you have more than ‚âà73% left, even though your charger is connected. Notice that in this state, your MacBook is still powered by the charger, but the battery is not charging anymore.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT: Keeping your battery at a lower percentage, such as under 80%, over weeks without doing full cycles (100%-0%) can result in a disturbed battery calibration. When this happens, your Macbook might turn off with 40-50% left or your battery capacity will drop significantly. However, this is only due to a disturbed battery calibration and not because of a faulty or degraded battery. To avoid this issue, we recommend doing at least one full cycle (0%-100%) every two weeks. Even if your battery calibration gets disturbed, doing 4+ full cycles will recalibrate your battery and the capacity will go up again.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Most questions are already answered on our &lt;a href=&#34;https://apphousekitchen.com/faq/&#34;&gt;FAQ page&lt;/a&gt; or on our &lt;a href=&#34;https://apphousekitchen.com/blog/&#34;&gt;blog&lt;/a&gt;. Check them out!&lt;/li&gt; &#xA; &lt;li&gt;E-mail support is only available for AlDente Pro customers. Check out our &lt;a href=&#34;https://apphousekitchen.com/support/&#34;&gt;support page&lt;/a&gt; if you want to contact us.&lt;/li&gt; &#xA; &lt;li&gt;Due to limited recourses, we are not able providing support to AlDente Free users or here in Github.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other tools used in this project:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/beltex/SMCKit&#34;&gt;https://github.com/beltex/SMCKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/LaunchAtLogin&#34;&gt;https://github.com/sindresorhus/LaunchAtLogin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andreyvit/create-dmg&#34;&gt;https://github.com/andreyvit/create-dmg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer:&lt;/h2&gt; &#xA;&lt;p&gt;I do not take any responsibility for any sort of damage in result of using this tool! Although this had no negative side effects for me and thousands of others, AlDente still taps in some very low level system functions that are not meant to be tampered with. Use it at your own risk!&lt;/p&gt; &#xA;&lt;p&gt;Copyright(c) 2021 AppHouseKitchen&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>siteline/swiftui-introspect</title>
    <updated>2025-07-01T01:56:55Z</updated>
    <id>tag:github.com,2025-07-01:/siteline/swiftui-introspect</id>
    <link href="https://github.com/siteline/swiftui-introspect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Introspect underlying UIKit/AppKit components from SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUI Introspect&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/siteline/swiftui-introspect/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/siteline/swiftui-introspect/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Status Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsiteline%2Fswiftui-introspect%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;Swift Version Compatibility Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsiteline%2Fswiftui-introspect%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;Platform Compatibility Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SwiftUI Introspect allows you to get the underlying UIKit or AppKit element of a SwiftUI view.&lt;/p&gt; &#xA;&lt;p&gt;For instance, with SwiftUI Introspect you can access &lt;code&gt;UITableView&lt;/code&gt; to modify separators, or &lt;code&gt;UINavigationController&lt;/code&gt; to customize the tab bar.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;SwiftUI Introspect works by adding an invisible &lt;code&gt;IntrospectionView&lt;/code&gt; on top of the selected view, and an invisible &#34;anchor&#34; view underneath it, then looking through the UIKit/AppKit view hierarchy between the two to find the relevant view.&lt;/p&gt; &#xA;&lt;p&gt;For instance, when introspecting a &lt;code&gt;ScrollView&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item 1&#34;)&#xA;}&#xA;.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { scrollView in&#xA;    // do something with UIScrollView&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... it will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add marker views in front and behind &lt;code&gt;ScrollView&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Traverse through all subviews between both marker views until a &lt;code&gt;UIScrollView&lt;/code&gt; instance (if any) is found.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Although this introspection method is very solid and unlikely to break in itself, future OS releases require explicit opt-in for introspection (&lt;code&gt;.iOS(.vXYZ)&lt;/code&gt;), given potential differences in underlying UIKit/AppKit view types between major OS versions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;.introspect&lt;/code&gt; modifier acts directly on its &lt;em&gt;receiver&lt;/em&gt;. This means calling &lt;code&gt;.introspect&lt;/code&gt; from inside the view you&#39;re trying to introspect won&#39;t have any effect. However, there are times when this is not possible or simply too inflexible, in which case you &lt;strong&gt;can&lt;/strong&gt; introspect an &lt;em&gt;ancestor&lt;/em&gt;, but you must opt into this explicitly by overriding the introspection &lt;code&gt;scope&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item 1&#34;)&#xA;        .introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26), scope: .ancestor) { scrollView in&#xA;            // do something with UIScrollView&#xA;        }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage in production&lt;/h3&gt; &#xA;&lt;p&gt;SwiftUI Introspect is meant to be used in production. It does not use any private API. It only inspects the view hierarchy using publicly available methods. The library takes a defensive approach to inspecting the view hierarchy: there is no hard assumption that elements are laid out a certain way, there is no force-cast to UIKit/AppKit classes, and the &lt;code&gt;.introspect&lt;/code&gt; modifier is simply ignored if UIKit/AppKit views cannot be found.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;h4&gt;Xcode&lt;/h4&gt; &#xA;&lt;img width=&#34;656&#34; src=&#34;https://github.com/siteline/swiftui-introspect/assets/2538074/d19c1dd3-9aa4-4e4f-a5a5-b2d6a5b9b927&#34;&gt; &#xA;&lt;h4&gt;Package.swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/siteline/swiftui-introspect&#34;, from: &#34;1.0.0&#34;),&#xA;    ],&#xA;    targets: [&#xA;        .target(name: &amp;lt;#Target Name#&amp;gt;, dependencies: [&#xA;            .product(name: &#34;SwiftUIIntrospect&#34;, package: &#34;swiftui-introspect&#34;),&#xA;        ]),&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftUIIntrospect&#39;, &#39;~&amp;gt; 1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introspection&lt;/h2&gt; &#xA;&lt;h3&gt;Implemented&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/buttontype&#34;&gt;&lt;code&gt;Button&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/colorpickertype&#34;&gt;&lt;code&gt;ColorPicker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickertype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithcompactstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.compact&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithfieldstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.field&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithgraphicalstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.graphical&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithstepperfieldstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.stepperField&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithwheelstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.wheel&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/formtype&#34;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/formwithgroupedstyletype&#34;&gt;&lt;code&gt;Form&lt;/code&gt; with &lt;code&gt;.grouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/fullScreenCovertype&#34;&gt;&lt;code&gt;.fullScreenCover&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listtype&#34;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithborderedstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.bordered&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithgroupedstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.grouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithinsetgroupedstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.insetGrouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithinsetstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.inset&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithsidebarstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.sidebar&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listcelltype&#34;&gt;&lt;code&gt;ListCell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/maptype&#34;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/navigationsplitviewtype&#34;&gt;&lt;code&gt;NavigationSplitView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/navigationstacktype&#34;&gt;&lt;code&gt;NavigationStack&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/NavigationViewWithColumnsStyleType&#34;&gt;&lt;code&gt;NavigationView&lt;/code&gt; with &lt;code&gt;.columns&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/NavigationViewWithStackStyleType&#34;&gt;&lt;code&gt;NavigationView&lt;/code&gt; with &lt;code&gt;.stack&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pagecontroltype&#34;&gt;&lt;code&gt;PageControl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithmenustyletype&#34;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.menu&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithsegmentedstyletype&#34;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.segmented&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithwheelstyletype&#34;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.wheel&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/popovertype&#34;&gt;&lt;code&gt;.popover&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/progressviewwithcircularstyletype&#34;&gt;&lt;code&gt;ProgressView&lt;/code&gt; with &lt;code&gt;.circular&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/progressviewwithlinearstyletype&#34;&gt;&lt;code&gt;ProgressView&lt;/code&gt; with &lt;code&gt;.linear&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/scrollviewtype&#34;&gt;&lt;code&gt;ScrollView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/searchfieldtype&#34;&gt;&lt;code&gt;.searchable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/securefieldtype&#34;&gt;&lt;code&gt;SecureField&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/sheettype&#34;&gt;&lt;code&gt;.sheet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/slidertype&#34;&gt;&lt;code&gt;Slider&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/steppertype&#34;&gt;&lt;code&gt;Stepper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/tabletype&#34;&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/tabviewtype&#34;&gt;&lt;code&gt;TabView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/TabViewWithPageStyleType&#34;&gt;&lt;code&gt;TabView&lt;/code&gt; with &lt;code&gt;.page&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/texteditortype&#34;&gt;&lt;code&gt;TextEditor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/textfieldtype&#34;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/TextFieldWithVerticalAxisType&#34;&gt;&lt;code&gt;TextField&lt;/code&gt; with &lt;code&gt;.vertical&lt;/code&gt; axis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/toggletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithbuttonstyletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;button&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithcheckboxstyletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;checkbox&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithswitchstyletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;switch&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/videoplayertype&#34;&gt;&lt;code&gt;VideoPlayer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/viewtype&#34;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/viewcontrollertype&#34;&gt;&lt;code&gt;ViewController&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/windowtype&#34;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&#34;https://github.com/siteline/swiftui-introspect/discussions/new?category=ideas&#34;&gt;start a discussion&lt;/a&gt;. As a temporary solution, you can &lt;a href=&#34;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#implement-your-own-introspectable-type&#34;&gt;implement your own introspectable view type&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cannot implement&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI&lt;/th&gt; &#xA;   &lt;th&gt;Affected Frameworks&lt;/th&gt; &#xA;   &lt;th&gt;Why&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text&lt;/td&gt; &#xA;   &lt;td&gt;UIKit, AppKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UILabel / NSLabel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;UIKit, AppKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UIImageView / NSImageView&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button&lt;/td&gt; &#xA;   &lt;td&gt;UIKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UIButton&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;List&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;List {&#xA;    Text(&#34;Item&#34;)&#xA;}&#xA;.introspect(.list, on: .iOS(.v13, .v14, .v15)) { tableView in&#xA;    tableView.backgroundView = UIView()&#xA;    tableView.backgroundColor = .cyan&#xA;}&#xA;.introspect(.list, on: .iOS(.v16, .v17, .v18, .v26)) { collectionView in&#xA;    collectionView.backgroundView = UIView()&#xA;    collectionView.subviews.dropFirst(1).first?.backgroundColor = .cyan&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ScrollView&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item&#34;)&#xA;}&#xA;.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { scrollView in&#xA;    scrollView.backgroundColor = .red&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NavigationView&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;NavigationView {&#xA;    Text(&#34;Item&#34;)&#xA;}&#xA;.navigationViewStyle(.stack)&#xA;.introspect(.navigationView(style: .stack), on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { navigationController in&#xA;    navigationController.navigationBar.backgroundColor = .cyan&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TextField&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;TextField(&#34;Text Field&#34;, text: &amp;lt;#Binding&amp;lt;String&amp;gt;#&amp;gt;)&#xA;    .introspect(.textField, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { textField in&#xA;        textField.backgroundColor = .red&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;h3&gt;Implement your own introspectable type&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&#34;https://github.com/siteline/swiftui-introspect/discussions/new?category=ideas&#34;&gt;start a discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case SwiftUI Introspect (unlikely) doesn&#39;t support the SwiftUI element that you&#39;re looking for, you can implement your own introspectable type.&lt;/p&gt; &#xA;&lt;p&gt;For example, here&#39;s how the library implements the introspectable &lt;code&gt;TextField&lt;/code&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;@_spi(Advanced) import SwiftUIIntrospect&#xA;&#xA;public struct TextFieldType: IntrospectableViewType {}&#xA;&#xA;extension IntrospectableViewType where Self == TextFieldType {&#xA;    public static var textField: Self { .init() }&#xA;}&#xA;&#xA;#if canImport(UIKit)&#xA;extension iOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {&#xA;    public static let v13 = Self(for: .v13)&#xA;    public static let v14 = Self(for: .v14)&#xA;    public static let v15 = Self(for: .v15)&#xA;    public static let v16 = Self(for: .v16)&#xA;    public static let v17 = Self(for: .v17)&#xA;    public static let v18 = Self(for: .v18)&#xA;    public static let v26 = Self(for: .v26)&#xA;}&#xA;&#xA;extension tvOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {&#xA;    public static let v13 = Self(for: .v13)&#xA;    public static let v14 = Self(for: .v14)&#xA;    public static let v15 = Self(for: .v15)&#xA;    public static let v16 = Self(for: .v16)&#xA;    public static let v17 = Self(for: .v17)&#xA;    public static let v18 = Self(for: .v18)&#xA;    public static let v26 = Self(for: .v26)&#xA;}&#xA;&#xA;extension visionOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {&#xA;    public static let v1 = Self(for: .v1)&#xA;    public static let v2 = Self(for: .v2)&#xA;    public static let v26 = Self(for: .v26)&#xA;}&#xA;#elseif canImport(AppKit)&#xA;extension macOSViewVersion&amp;lt;TextFieldType, NSTextField&amp;gt; {&#xA;    public static let v10_15 = Self(for: .v10_15)&#xA;    public static let v11 = Self(for: .v11)&#xA;    public static let v12 = Self(for: .v12)&#xA;    public static let v13 = Self(for: .v13)&#xA;    public static let v14 = Self(for: .v14)&#xA;    public static let v15 = Self(for: .v15)&#xA;    public static let v26 = Self(for: .v26)&#xA;}&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Introspect on future platform versions&lt;/h3&gt; &#xA;&lt;p&gt;By default, introspection applies per specific platform version. This is a sensible default for maximum predictability in regularly maintained codebases, but it&#39;s not always a good fit for e.g. library developers who may want to cover as many future platform versions as possible in order to provide the best chance for long-term future functionality of their library without regular maintenance.&lt;/p&gt; &#xA;&lt;p&gt;For such cases, SwiftUI Introspect offers range-based platform version predicates behind the Advanced SPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;@_spi(Advanced) import SwiftUIIntrospect&#xA;&#xA;struct ContentView: View {&#xA;    var body: some View {&#xA;        ScrollView {&#xA;            // ...&#xA;        }&#xA;        .introspect(.scrollView, on: .iOS(.v13...)) { scrollView in&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bear in mind this should be used cautiously, and with full knowledge that any future OS version might break the expected introspection types unless explicitly available. For instance, if in the example above hypothetically iOS 19 stops using UIScrollView under the hood, the customization closure will never be called on said platform.&lt;/p&gt; &#xA;&lt;h3&gt;Keep instances outside the customize closure&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, you might need to keep your introspected instance around for longer than the customization closure lifetime. In such cases, &lt;code&gt;@State&lt;/code&gt; is not a good option because it produces retain cycles. Instead, SwiftUI Introspect offers a &lt;code&gt;@Weak&lt;/code&gt; property wrapper behind the Advanced SPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;@_spi(Advanced) import SwiftUIIntrospect&#xA;&#xA;struct ContentView: View {&#xA;    @Weak var scrollView: UIScrollView?&#xA;&#xA;    var body: some View {&#xA;        ScrollView {&#xA;            // ...&#xA;        }&#xA;        .introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17, .v18, .v26)) { scrollView in&#xA;            self.scrollView = scrollView&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community projects&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a list of open source libraries powered by the SwiftUI Introspect library:&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/paescebu/CustomKeyboardKit&#34;&gt; &lt;img src=&#34;https://github-readme-stats.vercel.app/api/pin/?username=paescebu&amp;amp;repo=CustomKeyboardKit&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/davdroman/swiftui-navigation-transitions&#34;&gt; &lt;img src=&#34;https://github-readme-stats.vercel.app/api/pin/?username=davdroman&amp;amp;repo=swiftui-navigation-transitions&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;If you&#39;re working on a library built on SwiftUI Introspect or know of one, feel free to submit a PR adding it to the list.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>home-assistant/iOS</title>
    <updated>2025-07-01T01:56:55Z</updated>
    <id>tag:github.com,2025-07-01:/home-assistant/iOS</id>
    <link href="https://github.com/home-assistant/iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üì± Home Assistant for Apple platforms&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Home Assistant for Apple Platforms&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.home-assistant.io/ios/beta/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TestFlight-Beta-blue.svg?sanitize=true&#34; alt=&#34;TestFlight Beta invite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://itunes.apple.com/app/home-assistant-open-source-home-automation/id1099568401&#34;&gt;&lt;img src=&#34;https://img.shields.io/itunes/v/1099568401.svg?sanitize=true&#34; alt=&#34;Download on the App Store&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/home-assistant/iOS/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/home-assistant/iOS.svg?style=flat&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/home-assistant/iOS/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-green.svg?style=flat&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Home Assistant uses Bundler, Homebrew and Cocoapods to manage build dependencies. You&#39;ll need Xcode 15.3 (or later) which you can download from the &lt;a href=&#34;https://developer.apple.com/download/&#34;&gt;App Store&lt;/a&gt;. You can get the app running using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/home-assistant/iOS.git&#xA;cd iOS&#xA;&#xA;# you must do one of the following, but you do not need to do all of them:&#xA;&#xA;## install cocoapods via homebrew, use that&#xA;brew install cocoapods&#xA;$(brew --prefix)/opt/ruby/bin/gem install cocoapods-acknowledgements&#xA;pod install --repo-update&#xA;&#xA;## install ruby via homebrew, use that&#xA;brew install ruby@3.1&#xA;$(brew --prefix)/opt/ruby@3.1/bin/bundle install&#xA;$(brew --prefix)/opt/ruby@3.1/bin/bundle exec pod install --repo-update&#xA;&#xA;## install ruby via rbenv, use that&#xA;brew install rbenv ruby-build&#xA;rbenv install&#xA;bundle install&#xA;bundle exec pod install --repo-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once this completes, you can launch &lt;code&gt;HomeAssistant.xcworkspace&lt;/code&gt; and run the &lt;code&gt;App-Debug&lt;/code&gt; scheme onto your simulator or iOS device.&lt;/p&gt; &#xA;&lt;h2&gt;Testing just the frontend&lt;/h2&gt; &#xA;&lt;p&gt;To just test the &lt;a href=&#34;https://github.com/home-assistant/frontend&#34;&gt;frontend&lt;/a&gt;, you can use a simulator version built by our GitHub actions.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Xcode from the &lt;a href=&#34;https://developer.apple.com/download/&#34;&gt;App Store&lt;/a&gt; making sure it&#39;s at least the version noted above. You do not need to install or run anything else.&lt;/li&gt; &#xA; &lt;li&gt;Launch the simulator at &lt;code&gt;/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app&lt;/code&gt; or in Xcode under the Xcode menu &amp;gt; Open Developer Tool.&lt;/li&gt; &#xA; &lt;li&gt;Open a simulator under File &amp;gt; Open Simulator. You can install older versions of iOS in Xcode&#39;s Components preferences.&lt;/li&gt; &#xA; &lt;li&gt;Download a simulator build from the &lt;a href=&#34;https://github.com/home-assistant/iOS/actions/workflows/ci.yml?query=branch%3Amaster&#34;&gt;the GitHub action&lt;/a&gt; under &#34;Artifacts.&#34;&lt;/li&gt; &#xA; &lt;li&gt;Drag the result &lt;code&gt;.app&lt;/code&gt; on drop it on top of the simulator.&lt;/li&gt; &#xA; &lt;li&gt;Locate the app on the home screen and click it to launch.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The simulator behaves different than you might expect:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th&gt;Effect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click&lt;/td&gt; &#xA;   &lt;td&gt;Tap&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click &amp;amp; drag&lt;/td&gt; &#xA;   &lt;td&gt;Scroll&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hold ‚å•&lt;/td&gt; &#xA;   &lt;td&gt;Add a second touch point&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hold ‚áß‚å•&lt;/td&gt; &#xA;   &lt;td&gt;Move both touch points&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚åò‚Üê, ‚åò‚Üí&lt;/td&gt; &#xA;   &lt;td&gt;Rotate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚åòS&lt;/td&gt; &#xA;   &lt;td&gt;Take screenshot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚åòR&lt;/td&gt; &#xA;   &lt;td&gt;Record video&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚åòK&lt;/td&gt; &#xA;   &lt;td&gt;Toggle software keyboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can now debug the WebView in this simulator build using Safari&#39;s Web Inspector:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure &#34;Show Develop menu in menu bar&#34; is enabled in Safari&#39;s Advanced preferences.&lt;/li&gt; &#xA; &lt;li&gt;Under the Develop menu, expand the &#34;Simulator&#34; menu for the simulator you&#39;ve opened.&lt;/li&gt; &#xA; &lt;li&gt;Choose the WebView you want to inspect. A new window will open.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Code Signing&lt;/h2&gt; &#xA;&lt;p&gt;Although the app is set up to use Automatic provisioning for Debug builds, you&#39;ll need to customize a few of the options. This is because the app makes heavy use of entitlements that require code signing, even for simulator builds.&lt;/p&gt; &#xA;&lt;p&gt;Edit the file &lt;code&gt;Configuration/HomeAssistant.overrides.xcconfig&lt;/code&gt; (which will not exist by default and is ignored by git) and add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DEVELOPMENT_TEAM = YourTeamID&#xA;BUNDLE_ID_PREFIX = some.bundle.prefix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Xcode should generate provisioning profiles in your Team ID and our configuration will disable features your team doesn&#39;t have like Critical Alerts. You can find your Team ID on Apple&#39;s &lt;a href=&#34;https://developer.apple.com/account&#34;&gt;developer portal&lt;/a&gt;; it looks something like &lt;code&gt;ABCDEFG123&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code style&lt;/h2&gt; &#xA;&lt;p&gt;Linters run as part of Pull Request checks. Additionally, some linting requirements can be autocorrected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# checks for linting problems, doesn&#39;t fix&#xA;bundle exec fastlane lint&#xA;# checks for linting problems and fixes them&#xA;bundle exec fastlane autocorrect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the Xcode project, the autocorrectable linters will not modify your source code but will provide warnings. This project uses several linters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;SwiftFormat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/realm/swiftlint&#34;&gt;SwiftLint&lt;/a&gt; (for things SwiftFormat doesn&#39;t automate)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubocop.org&#34;&gt;Rubocop&lt;/a&gt; (largely for Fastlane)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yamllint.readthedocs.io/en/stable/index.html&#34;&gt;YamlLint&lt;/a&gt; (largely for GitHub Actions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/home-assistant/iOS/actions&#34;&gt;Github Actions&lt;/a&gt; alongside &lt;a href=&#34;https://fastlane.tools/&#34;&gt;Fastlane&lt;/a&gt; to perform continuous integration both by unit testing and deploying to &lt;a href=&#34;https://appstoreconnect.apple.com&#34;&gt;App Store Connect&lt;/a&gt;. Mac Developer ID builds are available as an artifact on every build of master.&lt;/p&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;Fastlane scripts read from the environment or &lt;code&gt;.env&lt;/code&gt; file for configuration like team IDs. See &lt;a href=&#34;https://github.com/home-assistant/iOS/raw/master/.env.sample&#34;&gt;&lt;code&gt;.env.sample&lt;/code&gt;&lt;/a&gt; for available values.&lt;/p&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;Although all the deployment is done through Github Actions, you can do it manually through &lt;a href=&#34;https://github.com/home-assistant/iOS/raw/master/fastlane/README.md&#34;&gt;Fastlane&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;Deployment to App Store Connect&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# creates the builds and uploads to the app store&#xA;# each save their artifacts to build/&#xA;bundle exec fastlane mac build&#xA;bundle exec fastlane ios build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/home-assistant/iOS/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Apache-2.0&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The format and some content of this README.md comes from the &lt;a href=&#34;https://github.com/ivanbruel/SwipeIt&#34;&gt;SwipeIt&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openhomefoundation.org/&#34;&gt;&lt;img src=&#34;https://www.openhomefoundation.org/badges/home-assistant.png&#34; alt=&#34;Home Assistant - A project from the Open Home Foundation&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>