<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T02:54:34Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mrousavy/react-native-vision-camera</title>
    <updated>2022-07-01T02:54:34Z</updated>
    <id>tag:github.com,2022-07-01:/mrousavy/react-native-vision-camera</id>
    <link href="https://github.com/mrousavy/react-native-vision-camera" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ“¸ The Camera library that sees the vision.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://margelo.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/banner.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Vision Camera&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/11.png&#34; width=&#34;50%&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;blockquote&gt;&#xA;  &lt;b&gt;ðŸ“¸ The Camera library that sees the vision.&lt;/b&gt;&#xA; &lt;/blockquote&gt; &#xA; &lt;pre align=&#34;center&#34;&gt;npm i &lt;a href=&#34;https://www.npmjs.com/package/react-native-vision-camera&#34;&gt;react-native-vision-camera&lt;/a&gt;&lt;br&gt;npx pod-install                 &lt;/pre&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://ko-fi.com/F1F8CLXG&#34; target=&#34;_blank&#34;&gt; &lt;img height=&#34;36&#34; style=&#34;border:0px;height:36px;&#34; src=&#34;https://az743702.vo.msecnd.net/cdn/kofi2.png?v=0&#34; border=&#34;0&#34; alt=&#34;Buy Me a Coffee at ko-fi.com&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://github.com/mrousavy?tab=followers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/followers/mrousavy?label=Follow%20%40mrousavy&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://twitter.com/mrousavy&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/mrousavy?label=Follow%20%40mrousavy&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;div&gt; &#xA; &lt;img align=&#34;right&#34; width=&#34;35%&#34; src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/example.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/guides&#34;&gt;Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/example/&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Photo, Video and Snapshot capture&lt;/li&gt; &#xA; &lt;li&gt;Customizable devices and multi-cameras (smoothly zoom out to &#34;fish-eye&#34; camera)&lt;/li&gt; &#xA; &lt;li&gt;Customizable FPS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/guides/frame-processors&#34;&gt;Frame Processors&lt;/a&gt; (JS worklets to run QR-Code scanning, facial recognition, AI object detection, realtime video chats, ...)&lt;/li&gt; &#xA; &lt;li&gt;Smooth zooming (Reanimated)&lt;/li&gt; &#xA; &lt;li&gt;Fast pause and resume&lt;/li&gt; &#xA; &lt;li&gt;HDR &amp;amp; Night modes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/example/&#34;&gt;example&lt;/a&gt; app&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;function App() {&#xA;  const devices = useCameraDevices(&#39;wide-angle-camera&#39;)&#xA;  const device = devices.back&#xA;&#xA;  if (device == null) return &amp;lt;LoadingView /&amp;gt;&#xA;  return (&#xA;    &amp;lt;Camera&#xA;      style={StyleSheet.absoluteFill}&#xA;      device={device}&#xA;      isActive={true}&#xA;    /&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adopting at scale&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/sponsors/mrousavy&#34;&gt; &lt;img align=&#34;right&#34; width=&#34;160&#34; alt=&#34;This library helped you? Consider sponsoring!&#34; src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/.github/funding-octocat.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;VisionCamera is provided &lt;em&gt;as is&lt;/em&gt;, I work on it in my free time.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re integrating VisionCamera in a production app, consider &lt;a href=&#34;https://github.com/sponsors/mrousavy&#34;&gt;funding this project&lt;/a&gt; and &lt;a href=&#34;mailto:me@mrousavy.com?subject=Adopting VisionCamera at scale&#34;&gt;contact me&lt;/a&gt; to receive premium enterprise support, help with issues, prioritize bugfixes, request features, help at integrating VisionCamera and/or Frame Processors, and more.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;ðŸš€ Get started by &lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/guides/&#34;&gt;setting up permissions&lt;/a&gt;!&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>p0deje/Maccy</title>
    <updated>2022-07-01T02:54:34Z</updated>
    <id>tag:github.com,2022-07-01:/p0deje/Maccy</id>
    <link href="https://github.com/p0deje/Maccy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight clipboard manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;128px&#34; src=&#34;https://maccy.app/img/maccy/Logo.png&#34; alt=&#34;Logo&#34; align=&#34;left&#34;&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://maccy.app&#34;&gt;Maccy&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/p0deje/Maccy/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/p0deje/Maccy/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.bitrise.io/app/716921b669780314&#34;&gt;&lt;img src=&#34;https://img.shields.io/bitrise/716921b669780314/master?token=3pMiCb5dpFzlO-7jTYtO3Q&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/p0deje&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/buy%20me%20a%20coffee-donate-yellow.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maccy is a lightweight clipboard manager for macOS. It keeps the history of what you copy and lets you quickly navigate, search, and use previous clipboard contents.&lt;/p&gt; &#xA;&lt;p&gt;Maccy works on macOS Mojave 10.14 or higher.&lt;/p&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#advanced&#34;&gt;Advanced&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#ignore-copied-items&#34;&gt;Ignore Copied Items&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#ignore-custom-copy-types&#34;&gt;Ignore Custom Copy Types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lightweight and fast&lt;/li&gt; &#xA; &lt;li&gt;Keyboard-first&lt;/li&gt; &#xA; &lt;li&gt;Secure and private&lt;/li&gt; &#xA; &lt;li&gt;Native UI&lt;/li&gt; &#xA; &lt;li&gt;Open source and free&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest version from the &lt;a href=&#34;https://github.com/p0deje/Maccy/releases/latest&#34;&gt;releases&lt;/a&gt; page, or use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install --cask maccy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;kbd&gt;SHIFT (â‡§)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (âŒ˜)&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; to popup Maccy or click on its icon in the menu bar.&lt;/li&gt; &#xA; &lt;li&gt;Type what you want to find.&lt;/li&gt; &#xA; &lt;li&gt;To select the history item you wish to copy, press &lt;kbd&gt;ENTER&lt;/kbd&gt;, or click the item, or use &lt;kbd&gt;COMMAND (âŒ˜)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; &#xA; &lt;li&gt;To choose the history item and paste, press &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;ENTER&lt;/kbd&gt;, or &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;CLICK&lt;/kbd&gt; the item, or use &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; &#xA; &lt;li&gt;To choose the history item and paste without formatting, press &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (â‡§)&lt;/kbd&gt; + &lt;kbd&gt;ENTER&lt;/kbd&gt;, or &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (â‡§)&lt;/kbd&gt; + &lt;kbd&gt;CLICK&lt;/kbd&gt; the item, or use &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (â‡§)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; &#xA; &lt;li&gt;To delete the history item, press &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (âŒ«)&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To see the full text of the history item, wait a couple of seconds for tooltip.&lt;/li&gt; &#xA; &lt;li&gt;To pin the history item so that it remains on top of the list, press &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt;. The item will be moved to the top with a random but permanent keyboard shortcut. To unpin it, press &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt; again.&lt;/li&gt; &#xA; &lt;li&gt;To clear all unpinned items, select &lt;em&gt;Clear&lt;/em&gt; in the menu, or press &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (âŒ˜)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (âŒ«)&lt;/kbd&gt;. To clear all items including pinned, select &lt;em&gt;Clear&lt;/em&gt; in the menu with &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; pressed, or press &lt;kbd&gt;SHIFT (â‡§)&lt;/kbd&gt; + &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (âŒ˜)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (âŒ«)&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To disable Maccy and ignore new copies, click on the menu icon with &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; pressed.&lt;/li&gt; &#xA; &lt;li&gt;To ignore only the next copy, click on the menu icon with &lt;kbd&gt;OPTION (âŒ¥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (â‡§)&lt;/kbd&gt; pressed.&lt;/li&gt; &#xA; &lt;li&gt;To customize the behavior, check &#34;Preferences...&#34; window, or press &lt;kbd&gt;COMMAND (âŒ˜)&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h4&gt;Ignore Copied Items&lt;/h4&gt; &#xA;&lt;p&gt;You can tell Maccy to ignore all copied items:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;defaults write org.p0deje.Maccy ignoreEvents true # default is false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful if you have some workflow for copying sensitive data. You can set &lt;code&gt;ignoreEvents&lt;/code&gt; to true, copy the data and set &lt;code&gt;ignoreEvents&lt;/code&gt; back to false.&lt;/p&gt; &#xA;&lt;h4&gt;Ignore Custom Copy Types&lt;/h4&gt; &#xA;&lt;p&gt;By default Maccy will ignore certain copy types that are considered to be confidential or temporary. The default list always include the following types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org.nspasteboard.TransientType&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.nspasteboard.ConcealedType&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.nspasteboard.AutoGeneratedType&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, default configuration includes the following types but they can be removed or overwritten:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;com.agilebits.onepassword&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.typeit4me.clipping&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;de.petermaurer.TransientPasteboardType&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pasteboard generator type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;net.antelle.keeweb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can add additional custom types using preferences or &lt;code&gt;defaults&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;defaults write org.p0deje.Maccy ignoredPasteboardTypes -array-add &#34;com.myapp.CustomType&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to find what custom types are used by an application, you can use free application &lt;a href=&#34;https://github.com/sindresorhus/Pasteboard-Viewer&#34;&gt;Pasteboard-Viewer&lt;/a&gt;. Simply download the application, open it, copy something from the application you want to ignore and look for any custom types in the left sidebar. &lt;a href=&#34;https://github.com/p0deje/Maccy/issues/125&#34;&gt;Here is an example of using this approach to ignore Adobe InDesign&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you accidentally removed default types, you can restore the original configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;defaults write org.p0deje.Maccy ignoredPasteboardTypes -array &#34;de.petermaurer.TransientPasteboardType&#34; &#34;com.typeit4me.clipping&#34; &#34;Pasteboard generator type&#34; &#34;com.agilebits.onepassword&#34; &#34;net.antelle.keeweb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;There are dozens of similar applications out there, so why build another? Over the past years since I moved from Linux to macOS, I struggled to find a clipboard manager that is as free and simple as &lt;a href=&#34;http://parcellite.sourceforge.net&#34;&gt;Parcellite&lt;/a&gt;, but I couldn&#39;t. So I&#39;ve decided to build one.&lt;/p&gt; &#xA;&lt;p&gt;Also, I wanted to learn Swift and get acquainted with macOS application development.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stephencelis/SQLite.swift</title>
    <updated>2022-07-01T02:54:34Z</updated>
    <id>tag:github.com,2022-07-01:/stephencelis/SQLite.swift</id>
    <link href="https://github.com/stephencelis/SQLite.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A type-safe, Swift-language layer over SQLite3.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SQLite.swift&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/stephencelis/SQLite.swift/Build%20and%20test&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://cocoapods.org/pods/SQLite.swift&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/SQLite.swift/badge.png&#34; alt=&#34;CocoaPods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5-orange.svg?style=flat&#34; alt=&#34;Swift5 compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SQLite.swift&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/p/SQLite.swift/badge.png&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/stephencelis/SQLite.swift&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/stephencelis/SQLite.swift.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/stephencelis/SQLite.swift&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A type-safe, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift&lt;/a&gt;-language layer over &lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stephencelis/SQLite.swift&#34;&gt;SQLite.swift&lt;/a&gt; provides compile-time confidence in SQL statement syntax &lt;em&gt;and&lt;/em&gt; intent.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A pure-Swift interface&lt;/li&gt; &#xA; &lt;li&gt;A type-safe, optional-aware SQL expression builder&lt;/li&gt; &#xA; &lt;li&gt;A flexible, chainable, lazy-executing query layer&lt;/li&gt; &#xA; &lt;li&gt;Automatically-typed data access&lt;/li&gt; &#xA; &lt;li&gt;A lightweight, uncomplicated query and parameter binding interface&lt;/li&gt; &#xA; &lt;li&gt;Developer-friendly error handling and debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#full-text-search&#34;&gt;Full-text search&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#sqliteswift-documentation&#34;&gt;Well-documented&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extensively tested&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34;&gt;SQLCipher&lt;/a&gt; support via CocoaPods&lt;/li&gt; &#xA; &lt;li&gt;Works on &lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Linux.md&#34;&gt;Linux&lt;/a&gt; (with some limitations)&lt;/li&gt; &#xA; &lt;li&gt;Active support at &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sqlite.swift&#34;&gt;StackOverflow&lt;/a&gt;, and &lt;a href=&#34;https://gitter.im/stephencelis/SQLite.swift&#34;&gt;Gitter Chat Room&lt;/a&gt; (&lt;em&gt;experimental&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SQLite&#xA;&#xA;// Wrap everything in a do...catch to handle errors&#xA;do {&#xA;    let db = try Connection(&#34;path/to/db.sqlite3&#34;)&#xA;&#xA;    let users = Table(&#34;users&#34;)&#xA;    let id = Expression&amp;lt;Int64&amp;gt;(&#34;id&#34;)&#xA;    let name = Expression&amp;lt;String?&amp;gt;(&#34;name&#34;)&#xA;    let email = Expression&amp;lt;String&amp;gt;(&#34;email&#34;)&#xA;&#xA;    try db.run(users.create { t in&#xA;        t.column(id, primaryKey: true)&#xA;        t.column(name)&#xA;        t.column(email, unique: true)&#xA;    })&#xA;    // CREATE TABLE &#34;users&#34; (&#xA;    //     &#34;id&#34; INTEGER PRIMARY KEY NOT NULL,&#xA;    //     &#34;name&#34; TEXT,&#xA;    //     &#34;email&#34; TEXT NOT NULL UNIQUE&#xA;    // )&#xA;&#xA;    let insert = users.insert(name &amp;lt;- &#34;Alice&#34;, email &amp;lt;- &#34;alice@mac.com&#34;)&#xA;    let rowid = try db.run(insert)&#xA;    // INSERT INTO &#34;users&#34; (&#34;name&#34;, &#34;email&#34;) VALUES (&#39;Alice&#39;, &#39;alice@mac.com&#39;)&#xA;&#xA;    for user in try db.prepare(users) {&#xA;        print(&#34;id: \(user[id]), name: \(user[name]), email: \(user[email])&#34;)&#xA;        // id: 1, name: Optional(&#34;Alice&#34;), email: alice@mac.com&#xA;    }&#xA;    // SELECT * FROM &#34;users&#34;&#xA;&#xA;    let alice = users.filter(id == rowid)&#xA;&#xA;    try db.run(alice.update(email &amp;lt;- email.replace(&#34;mac.com&#34;, with: &#34;me.com&#34;)))&#xA;    // UPDATE &#34;users&#34; SET &#34;email&#34; = replace(&#34;email&#34;, &#39;mac.com&#39;, &#39;me.com&#39;)&#xA;    // WHERE (&#34;id&#34; = 1)&#xA;&#xA;    try db.run(alice.delete())&#xA;    // DELETE FROM &#34;users&#34; WHERE (&#34;id&#34; = 1)&#xA;&#xA;    try db.scalar(users.count) // 0&#xA;    // SELECT count(*) FROM &#34;users&#34;&#xA;} catch {&#xA;    print (error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite.swift also works as a lightweight, Swift-friendly wrapper over the C API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Wrap everything in a do...catch to handle errors&#xA;do {&#xA;    // ...&#xA;    &#xA;    let stmt = try db.prepare(&#34;INSERT INTO users (email) VALUES (?)&#34;)&#xA;    for email in [&#34;betty@icloud.com&#34;, &#34;cathy@icloud.com&#34;] {&#xA;        try stmt.run(email)&#xA;    }&#xA;&#xA;    db.totalChanges    // 3&#xA;    db.changes         // 1&#xA;    db.lastInsertRowid // 3&#xA;&#xA;    for row in try db.prepare(&#34;SELECT id, email FROM users&#34;) {&#xA;        print(&#34;id: \(row[0]), email: \(row[1])&#34;)&#xA;        // id: Optional(2), email: Optional(&#34;betty@icloud.com&#34;)&#xA;        // id: Optional(3), email: Optional(&#34;cathy@icloud.com&#34;)&#xA;    }&#xA;&#xA;    try db.scalar(&#34;SELECT count(*) FROM users&#34;) // 2&#xA;} catch {&#xA;    print (error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#sqliteswift-documentation&#34;&gt;Read the documentation&lt;/a&gt; or explore more, interactively, from the Xcode projectâ€™s playground.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Resources/playground@2x.png&#34; alt=&#34;SQLite.playground Screen Shot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a more comprehensive example, see &lt;a href=&#34;https://masteringswift.blogspot.com/2015/09/create-data-access-layer-with.html&#34;&gt;this article&lt;/a&gt; and the &lt;a href=&#34;https://github.com/hoffmanjon/SQLiteDataAccessLayer2/tree/master&#34;&gt;companion repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Version 0.11.6 and later requires Swift 5 (and &lt;a href=&#34;https://developer.apple.com/xcode/downloads/&#34;&gt;Xcode&lt;/a&gt; 10.2) or greater. Version 0.11.5 requires Swift 4.2 (and &lt;a href=&#34;https://developer.apple.com/xcode/downloads/&#34;&gt;Xcode&lt;/a&gt; 10.1) or greater.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/stephencelis/SQLite.swift.git&#34;, from: &#34;0.13.3&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build your project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/tree/master/Tests/SPM&#34;&gt;Tests/SPM&lt;/a&gt; folder for a small demo project which uses SPM.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a simple, decentralized dependency manager for Cocoa. To install SQLite.swift with Carthage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure Carthage is &lt;a href=&#34;https://github.com/Carthage/Carthage#installing-carthage&#34;&gt;installed&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your Cartfile to include the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;stephencelis/SQLite.swift&#34; ~&amp;gt; 0.13.3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; and &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;add the appropriate framework&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. To install SQLite.swift with CocoaPods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure CocoaPods is &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html#getting-started&#34;&gt;installed&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Using the default Ruby install will require you to use sudo when&#xA;# installing and updating gems.&#xA;[sudo] gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your Podfile to include the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&#xA;target &#39;YourAppTargetName&#39; do&#xA;    pod &#39;SQLite.swift&#39;, &#39;~&amp;gt; 0.13.3&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;pod install --repo-update&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;To install SQLite.swift as an Xcode sub-project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag the &lt;strong&gt;SQLite.xcodeproj&lt;/strong&gt; file into your own project. (&lt;a href=&#34;https://git-scm.com/book/en/Git-Tools-Submodules&#34;&gt;Submodule&lt;/a&gt;, clone, or &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/archive/master.zip&#34;&gt;download&lt;/a&gt; the project first.)&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Resources/installation@2x.png&#34; alt=&#34;Installation Screen Shot&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your targetâ€™s &lt;strong&gt;General&lt;/strong&gt; tab, click the &lt;strong&gt;+&lt;/strong&gt; button under &lt;strong&gt;Linked Frameworks and Libraries&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the appropriate &lt;strong&gt;SQLite.framework&lt;/strong&gt; for your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Some additional steps are required to install the application on an actual device:&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;strong&gt;General&lt;/strong&gt; tab, click the &lt;strong&gt;+&lt;/strong&gt; button under &lt;strong&gt;Embedded Binaries&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the appropriate &lt;strong&gt;SQLite.framework&lt;/strong&gt; for your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Planning.md&#34;&gt;See the planning document&lt;/a&gt; for a roadmap and existing feature requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/CONTRIBUTING.md#contributing&#34;&gt;Read the contributing guidelines&lt;/a&gt;. The &lt;em&gt;TL;DR&lt;/em&gt; (but please; &lt;em&gt;R&lt;/em&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Need &lt;strong&gt;help&lt;/strong&gt; or have a &lt;strong&gt;general question&lt;/strong&gt;? &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sqlite.swift&#34;&gt;Ask on Stack Overflow&lt;/a&gt; (tag &lt;code&gt;sqlite.swift&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Found a &lt;strong&gt;bug&lt;/strong&gt; or have a &lt;strong&gt;feature request&lt;/strong&gt;? &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/issues/new&#34;&gt;Open an issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Want to &lt;strong&gt;contribute&lt;/strong&gt;? &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/fork&#34;&gt;Submit a pull request&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:stephen@stephencelis.com&#34;&gt;Stephen Celis&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;@stephencelis&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SQLite.swift is available under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/LICENSE.txt&#34;&gt;the LICENSE file&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;p&gt;These projects enhance or use SQLite.swift:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/garriguv/SQLiteMigrationManager.swift&#34;&gt;SQLiteMigrationManager.swift&lt;/a&gt; (inspired by &lt;a href=&#34;https://github.com/layerhq/FMDBMigrationManager&#34;&gt;FMDBMigrationManager&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/delta-math-helper/id1436506800&#34;&gt;Delta: Math helper&lt;/a&gt; (see &lt;a href=&#34;https://github.com/GroupeMINASTE/Delta-iOS/raw/master/Delta/Utils/Database.swift&#34;&gt;Delta/Utils/Database.swift&lt;/a&gt; for production implementation example)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;Looking for something else? Try another Swift wrapper (or &lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;FMDB&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remirobert/Camembert&#34;&gt;Camembert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift&#34;&gt;GRDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FahimF/SQLiteDB&#34;&gt;SQLiteDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nerdyc/Squeal&#34;&gt;Squeal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryanfowler/SwiftData&#34;&gt;SwiftData&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>