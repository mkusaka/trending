<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-01T02:29:44Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ReactiveX/RxSwift</title>
    <updated>2023-12-01T02:29:44Z</updated>
    <id>tag:github.com,2023-12-01:/ReactiveX/RxSwift</id>
    <link href="https://github.com/ReactiveX/RxSwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reactive Programming in Swift&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/RxSwift_Logo.png&#34; width=&#34;35%&#34; alt=&#34;RxSwift Logo&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/ReactiveX/RxSwift/goto&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/ReactiveX/RxSwift/workflows/RxSwift/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-333333.svg?sanitize=true&#34; alt=&#34;Supported Platforms: iOS, macOS, tvOS, watchOS &amp;amp; Linux&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://cocoapods.org/pods/RxSwift&#34; alt=&#34;RxSwift on CocoaPods&#34; title=&#34;RxSwift on CocoaPods&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/RxSwift.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34; alt=&#34;RxSwift on Carthage&#34; title=&#34;RxSwift on Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34; alt=&#34;RxSwift on Swift Package Manager&#34; title=&#34;RxSwift on Swift Package Manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Rx is a &lt;a href=&#34;https://youtu.be/looJcaeboBY&#34;&gt;generic abstraction of computation&lt;/a&gt; expressed through &lt;code&gt;Observable&amp;lt;Element&amp;gt;&lt;/code&gt; interface, which lets you broadcast and subscribe to values and other events from an &lt;code&gt;Observable&lt;/code&gt; stream.&lt;/p&gt; &#xA;&lt;p&gt;RxSwift is the Swift-specific implementation of the &lt;a href=&#34;http://reactivex.io&#34;&gt;Reactive Extensions&lt;/a&gt; standard.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/example.png&#34; width=&#34;55%&#34; alt=&#34;RxSwift Observable Example of a price constantly changing and updating the app&#39;s UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;While this version aims to stay true to the original spirit and naming conventions of Rx, this project also aims to provide a true Swift-first API for Rx APIs.&lt;/p&gt; &#xA;&lt;p&gt;Cross platform documentation can be found on &lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Like other Rx implementations, RxSwift&#39;s intention is to enable easy composition of asynchronous operations and streams of data in the form of &lt;code&gt;Observable&lt;/code&gt; objects and a suite of methods to transform and compose these pieces of asynchronous work.&lt;/p&gt; &#xA;&lt;p&gt;KVO observation, async operations, UI Events and other streams of data are all unified under &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#observables-aka-sequences&#34;&gt;abstraction of sequence&lt;/a&gt;. This is the reason why Rx is so simple, elegant and powerful.&lt;/p&gt; &#xA;&lt;h2&gt;I came here because I want to ...&lt;/h2&gt; &#xA;&lt;h6&gt;... understand&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Why.md&#34;&gt;why use rx?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md&#34;&gt;the basics, getting started with RxSwift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Traits.md&#34;&gt;traits&lt;/a&gt; - what are &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Completable&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Driver&lt;/code&gt;, and &lt;code&gt;ControlProperty&lt;/code&gt; ... and why do they exist?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/UnitTests.md&#34;&gt;testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Tips.md&#34;&gt;tips and common errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#debugging&#34;&gt;debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/MathBehindRx.md&#34;&gt;the math behind Rx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/HotAndColdObservables.md&#34;&gt;what are hot and cold observable sequences?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... install&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrate RxSwift/RxCocoa with my app. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/#installation&#34;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... hack around&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with the example app. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/ExampleApp.md&#34;&gt;Running Example App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;with operators in playgrounds. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Playgrounds.md&#34;&gt;Playgrounds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... interact&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All of this is great, but it would be nice to talk with other people using RxSwift and exchange experiences. &lt;br&gt;&lt;a href=&#34;http://slack.rxswift.org&#34;&gt;Join Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Report a problem using the library. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/.github/ISSUE_TEMPLATE.md&#34;&gt;Open an Issue With Bug Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Request a new feature. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/NewFeatureRequestTemplate.md&#34;&gt;Open an Issue With Feature Request Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Help out &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/CONTRIBUTING.md&#34;&gt;Check out contribution guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... compare&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/ComparisonWithOtherLibraries.md&#34;&gt;with Combine and ReactiveSwift&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... understand the structure&lt;/h6&gt; &#xA;&lt;p&gt;RxSwift is as compositional as the asynchronous work it drives. The core unit is RxSwift itself, while other dependencies can be added for UI Work, testing, and more.&lt;/p&gt; &#xA;&lt;p&gt;It comprises five separate components depending on each other in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;┌──────────────┐    ┌──────────────┐&#xA;│   RxCocoa    ├────▶   RxRelay    │&#xA;└───────┬──────┘    └──────┬───────┘&#xA;        │                  │        &#xA;┌───────▼──────────────────▼───────┐&#xA;│             RxSwift              │&#xA;└───────▲──────────────────▲───────┘&#xA;        │                  │        &#xA;┌───────┴──────┐    ┌──────┴───────┐&#xA;│    RxTest    │    │  RxBlocking  │&#xA;└──────────────┘    └──────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxSwift&lt;/strong&gt;: The core of RxSwift, providing the Rx standard as (mostly) defined by &lt;a href=&#34;https://reactivex.io&#34;&gt;ReactiveX&lt;/a&gt;. It has no other dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxCocoa&lt;/strong&gt;: Provides Cocoa-specific capabilities for general iOS/macOS/watchOS &amp;amp; tvOS app development, such as Shared Sequences, Traits, and much more. It depends on both &lt;code&gt;RxSwift&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxRelay&lt;/strong&gt;: Provides &lt;code&gt;PublishRelay&lt;/code&gt;, &lt;code&gt;BehaviorRelay&lt;/code&gt; and &lt;code&gt;ReplayRelay&lt;/code&gt;, three &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/Subjects.md#relays&#34;&gt;simple wrappers around Subjects&lt;/a&gt;. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxTest&lt;/strong&gt; and &lt;strong&gt;RxBlocking&lt;/strong&gt;: Provides testing capabilities for Rx-based systems. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;30%&#34;&gt;Here&#39;s an example&lt;/th&gt; &#xA;   &lt;th width=&#34;30%&#34;&gt;In Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Define search for GitHub repositories ...&lt;/td&gt; &#xA;   &lt;th rowspan=&#34;9&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/GithubSearch.gif&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div class=&#34;highlight highlight-source-swift&#34;&gt;&#xA;     &lt;pre&gt;&#xA;let searchResults = searchBar.rx.text.orEmpty&#xA;    .throttle(.milliseconds(300), scheduler: MainScheduler.instance)&#xA;    .distinctUntilChanged()&#xA;    .flatMapLatest { query -&amp;gt; Observable&amp;lt;[Repository]&amp;gt; in&#xA;        if query.isEmpty {&#xA;            return .just([])&#xA;        }&#xA;        return searchGitHub(query)&#xA;            .catchAndReturn([])&#xA;    }&#xA;    .observe(on: MainScheduler.instance)&lt;/pre&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;... then bind the results to your tableview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;30%&#34;&gt;&#xA;    &lt;div class=&#34;highlight highlight-source-swift&#34;&gt;&#xA;     &lt;pre&gt;&#xA;searchResults&#xA;    .bind(to: tableView.rx.items(cellIdentifier: &#34;Cell&#34;)) {&#xA;        (index, repository: Repository, cell) in&#xA;        cell.textLabel?.text = repository.name&#xA;        cell.detailTextLabel?.text = repository.url&#xA;    }&#xA;    .disposed(by: disposeBag)&lt;/pre&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.x&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Xcode 11 and below, &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/releases/tag/5.1.1&#34;&gt;use RxSwift 5.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;RxSwift doesn&#39;t contain any external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;These are currently the supported installation options:&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Open Rx.xcworkspace, choose &lt;code&gt;RxExample&lt;/code&gt; and hit run. This method will build everything and run the sample app&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Podfile&#xA;use_frameworks!&#xA;&#xA;target &#39;YOUR_TARGET_NAME&#39; do&#xA;    pod &#39;RxSwift&#39;, &#39;6.6.0&#39;&#xA;    pod &#39;RxCocoa&#39;, &#39;6.6.0&#39;&#xA;end&#xA;&#xA;# RxTest and RxBlocking make the most sense in the context of unit/integration tests&#xA;target &#39;YOUR_TESTING_TARGET&#39; do&#xA;    pod &#39;RxBlocking&#39;, &#39;6.6.0&#39;&#xA;    pod &#39;RxTest&#39;, &#39;6.6.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;YOUR_TARGET_NAME&lt;/code&gt; and then, in the &lt;code&gt;Podfile&lt;/code&gt; directory, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;XCFrameworks&lt;/h3&gt; &#xA;&lt;p&gt;Each release starting with RxSwift 6 includes &lt;code&gt;*.xcframework&lt;/code&gt; framework binaries.&lt;/p&gt; &#xA;&lt;p&gt;Simply drag the needed framework binaries to your &lt;strong&gt;Frameworks, Libraries, and Embedded Content&lt;/strong&gt; section under your target&#39;s &lt;strong&gt;General&lt;/strong&gt; tab.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using &lt;code&gt;RxCocoa&lt;/code&gt;, be sure to also drag &lt;strong&gt;RxCocoaRuntime.xcframework&lt;/strong&gt; before importing &lt;code&gt;RxCocoa&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/xcframeworks.png&#34; alt=&#34;XCFrameworks instructions&#34; width=&#34;65%&#34;&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;ReactiveX/RxSwift&#34; &#34;6.6.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage as a Static Library&lt;/h4&gt; &#xA;&lt;p&gt;Carthage defaults to building RxSwift as a Dynamic Library.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to build RxSwift as a Static Library using Carthage you may use the script below to manually modify the framework type before building with Carthage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;carthage update RxSwift --platform iOS --no-build&#xA;sed -i -e &#39;s/MACH_O_TYPE = mh_dylib/MACH_O_TYPE = staticlib/g&#39; Carthage/Checkouts/RxSwift/Rx.xcodeproj/project.pbxproj&#xA;carthage build RxSwift --platform iOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is a critical cross-dependency bug affecting many projects including RxSwift in Swift Package Manager. We&#39;ve &lt;a href=&#34;https://bugs.swift.org/browse/SR-12303&#34;&gt;filed a bug (SR-12303)&lt;/a&gt; in early 2020 but have no answer yet. Your mileage may vary. A partial workaround can be found &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/issues/2127#issuecomment-717830502&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.0&#xA;&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;RxTestProject&#34;,&#xA;  dependencies: [&#xA;    .package(url: &#34;https://github.com/ReactiveX/RxSwift.git&#34;, .exact(&#34;6.6.0&#34;))&#xA;  ],&#xA;  targets: [&#xA;    .target(name: &#34;RxTestProject&#34;, dependencies: [&#34;RxSwift&#34;, &#34;RxCocoa&#34;])&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build or test a module with RxTest dependency, set &lt;code&gt;TEST=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ TEST=1 swift test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually using git submodules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add RxSwift as a submodule&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add git@github.com:ReactiveX/RxSwift.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag &lt;code&gt;Rx.xcodeproj&lt;/code&gt; into Project Navigator&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Project &amp;gt; Targets &amp;gt; Build Phases &amp;gt; Link Binary With Libraries&lt;/code&gt;, click &lt;code&gt;+&lt;/code&gt; and select &lt;code&gt;RxSwift&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt; targets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://reactivex.io/&#34;&gt;http://reactivex.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Reactive-Extensions&#34;&gt;Reactive Extensions GitHub (GitHub)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://store.raywenderlich.com/products/rxswift-reactive-programming-with-swift&#34;&gt;RxSwift RayWenderlich.com Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GdvLP0ZAhhc&#34;&gt;RxSwift: Debunking the myth of hard (YouTube)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://boxueio.com/series/rxswift-101&#34;&gt;Boxue.io RxSwift Online Course&lt;/a&gt; (Chinese 🇨🇳)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/looJcaeboBY&#34;&gt;Expert to Expert: Brian Beckman and Erik Meijer - Inside the .NET Reactive Framework (Rx) (video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/-8Y1-lE6NSA&#34;&gt;Reactive Programming Overview (Jafar Husain from Netflix)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://csl.stanford.edu/~christos/pldi2010.fit/meijer.duality.pdf&#34;&gt;Subject/Observer is Dual to Iterator (paper)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;Rx standard sequence operators visualized (visualization tool)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-async-algorithms</title>
    <updated>2023-12-01T02:29:44Z</updated>
    <id>tag:github.com,2023-12-01:/apple/swift-async-algorithms</id>
    <link href="https://github.com/apple/swift-async-algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Async Algorithms for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swift-async-algorithms&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift Async Algorithms&lt;/strong&gt; is an open-source package of asynchronous sequence and advanced algorithms that involve concurrency, along with their related types.&lt;/p&gt; &#xA;&lt;p&gt;This package has three main goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First-class integration with &lt;code&gt;async/await&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Provide a home for time-based algorithms&lt;/li&gt; &#xA; &lt;li&gt;Be cross-platform and open source&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;AsyncAlgorithms is a package for algorithms that work with &lt;em&gt;values over time&lt;/em&gt;. That includes those primarily about &lt;em&gt;time&lt;/em&gt;, like &lt;code&gt;debounce&lt;/code&gt; and &lt;code&gt;throttle&lt;/code&gt;, but also algorithms about &lt;em&gt;order&lt;/em&gt; like &lt;code&gt;combineLatest&lt;/code&gt; and &lt;code&gt;merge&lt;/code&gt;. Operations that work with multiple inputs (like &lt;code&gt;zip&lt;/code&gt; does on &lt;code&gt;Sequence&lt;/code&gt;) can be surprisingly complex to implement, with subtle behaviors and many edge cases to consider. A shared package can get these details correct, with extensive testing and documentation, for the benefit of all Swift apps.&lt;/p&gt; &#xA;&lt;p&gt;The foundation for AsyncAlgorithms was included in Swift 5.5 from &lt;a href=&#34;https://github.com/apple/swift-evolution/raw/main/proposals/0298-asyncsequence.md&#34;&gt;AsyncSequence&lt;/a&gt;. Swift 5.5 also brings the ability to use a natural &lt;code&gt;for/in&lt;/code&gt; loop with &lt;code&gt;await&lt;/code&gt; to process the values in an &lt;code&gt;AsyncSequence&lt;/code&gt; and &lt;code&gt;Sequence&lt;/code&gt;-equivalent API like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;. Structured concurrency allows us to write code where intermediate state is simply a local variable, &lt;code&gt;try&lt;/code&gt; can be used directly on functions that &lt;code&gt;throw&lt;/code&gt;, and generally treat the logic for asynchronous code similar to that of synchronous code.&lt;/p&gt; &#xA;&lt;p&gt;This package is the home for these APIs. Development and API design take place on &lt;a href=&#34;https://github.com/apple/swift-async-algorithms&#34;&gt;GitHub&lt;/a&gt; and the &lt;a href=&#34;https://forums.swift.org/c/related-projects/swift-async-algorithms&#34;&gt;Swift Forums&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;h4&gt;Combining asynchronous sequences&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Chain.md&#34;&gt;&lt;code&gt;chain(_:...)&lt;/code&gt;&lt;/a&gt;: Concatenates two or more asynchronous sequences with the same element type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/CombineLatest.md&#34;&gt;&lt;code&gt;combineLatest(_:...)&lt;/code&gt;&lt;/a&gt;: Combines two or more asynchronous sequences into an asynchronous sequence producing a tuple of elements from those base asynchronous sequences that updates when any of the base sequences produce a value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Merge.md&#34;&gt;&lt;code&gt;merge(_:...)&lt;/code&gt;&lt;/a&gt;: Merges two or more asynchronous sequence into a single asynchronous sequence producing the elements of all of the underlying asynchronous sequences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Zip.md&#34;&gt;&lt;code&gt;zip(_:...)&lt;/code&gt;&lt;/a&gt;: Creates an asynchronous sequence of pairs built out of underlying asynchronous sequences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Joined.md&#34;&gt;&lt;code&gt;joined(separator:)&lt;/code&gt;&lt;/a&gt;: Concatenated elements of an asynchronous sequence of asynchronous sequences, inserting the given separator between each element.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Creating asynchronous sequences&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Lazy.md&#34;&gt;&lt;code&gt;async&lt;/code&gt;&lt;/a&gt;: Create an asynchronous sequence composed from a synchronous sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Channel.md&#34;&gt;&lt;code&gt;AsyncChannel&lt;/code&gt;&lt;/a&gt;: An asynchronous sequence with back pressure sending semantics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Channel.md&#34;&gt;&lt;code&gt;AsyncThrowingChannel&lt;/code&gt;&lt;/a&gt;: An asynchronous sequence with back pressure sending semantics that can emit failures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Performance optimized asynchronous iterators&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/BufferedBytes.md&#34;&gt;&lt;code&gt;AsyncBufferedByteIterator&lt;/code&gt;&lt;/a&gt;: A highly efficient iterator useful for iterating byte sequences derived from asynchronous read functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other useful asynchronous sequences&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/AdjacentPairs.md&#34;&gt;&lt;code&gt;adjacentPairs()&lt;/code&gt;&lt;/a&gt;: Collects tuples of adjacent elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Chunked.md&#34;&gt;&lt;code&gt;chunks(...)&lt;/code&gt; and &lt;code&gt;chunked(...)&lt;/code&gt;&lt;/a&gt;: Collect values into chunks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Compacted.md&#34;&gt;&lt;code&gt;compacted()&lt;/code&gt;&lt;/a&gt;: Remove nil values from an asynchronous sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/RemoveDuplicates.md&#34;&gt;&lt;code&gt;removeDuplicates()&lt;/code&gt;&lt;/a&gt;: Remove sequentially adjacent duplicate values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Intersperse.md&#34;&gt;&lt;code&gt;interspersed(with:)&lt;/code&gt;&lt;/a&gt;: Place a value between every two elements of an asynchronous sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Asynchronous Sequences that transact in time&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Debounce.md&#34;&gt;&lt;code&gt;debounce(for:tolerance:clock:)&lt;/code&gt;&lt;/a&gt;: Emit values after a quiescence period has been reached.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Throttle.md&#34;&gt;&lt;code&gt;throttle(for:clock:reducing:)&lt;/code&gt;&lt;/a&gt;: Ensure a minimum interval has elapsed between events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Timer.md&#34;&gt;&lt;code&gt;AsyncTimerSequence&lt;/code&gt;&lt;/a&gt;: Emit the value of now at a given interval repeatedly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Obtaining all values from an asynchronous sequence&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&#34;&gt;&lt;code&gt;RangeReplaceableCollection.init(_:)&lt;/code&gt;&lt;/a&gt;: Creates a new instance of a collection containing the elements of an asynchronous sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&#34;&gt;&lt;code&gt;Dictionary.init(uniqueKeysWithValues:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary from the key-value pairs in the given asynchronous sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&#34;&gt;&lt;code&gt;Dictionary.init(_:uniquingKeysWith:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary from the key-value pairs in the given asynchronous sequence, using a combining closure to determine the value for any duplicate keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&#34;&gt;&lt;code&gt;Dictionary.init(grouping:by:)&lt;/code&gt;&lt;/a&gt;: Creates a new dictionary whose keys are the groupings returned by the given closure and whose values are arrays of the elements that returned each key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Collections.md&#34;&gt;&lt;code&gt;SetAlgebra.init(_:)&lt;/code&gt;&lt;/a&gt;: Creates a new set from an asynchronous sequence of items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Effects&lt;/h4&gt; &#xA;&lt;p&gt;Each algorithm has specific behavioral effects. For throwing effects these can either be if the sequence throws, does not throw, or rethrows errors. Sendability effects in some asynchronous sequences are conditional whereas others require the composed parts to all be sendable to satisfy a requirement of &lt;code&gt;Sendable&lt;/code&gt;. The effects are &lt;a href=&#34;https://github.com/apple/swift-async-algorithms/raw/main/Sources/AsyncAlgorithms/AsyncAlgorithms.docc/Guides/Effects.md&#34;&gt;listed here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Adding Swift Async Algorithms as a Dependency&lt;/h2&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;AsyncAlgorithms&lt;/code&gt; library in a SwiftPM project, add the following line to the dependencies in your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/apple/swift-async-algorithms&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include &lt;code&gt;&#34;AsyncAlgorithms&#34;&lt;/code&gt; as a dependency for your executable target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(name: &#34;&amp;lt;target&amp;gt;&#34;, dependencies: [&#xA;    .product(name: &#34;AsyncAlgorithms&#34;, package: &#34;swift-async-algorithms&#34;),&#xA;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, add &lt;code&gt;import AsyncAlgorithms&lt;/code&gt; to your source code.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;⚠️ Please note that this package requires Xcode 14 on macOS hosts. Previous versions of Xcode do not contain the required Swift version.&lt;/p&gt; &#xA;&lt;h3&gt;Building/Testing Using Xcode on macOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the &lt;code&gt;swift-async-algorithms&lt;/code&gt; directory run &lt;code&gt;swift build&lt;/code&gt; or &lt;code&gt;swift test&lt;/code&gt; accordingly&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building/Testing on Linux&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the most recent development toolchain for your Linux distribution&lt;/li&gt; &#xA; &lt;li&gt;Decompress the archive to a path in which the &lt;code&gt;swift&lt;/code&gt; executable is in the binary search path environment variable (&lt;code&gt;$PATH&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;swift-async-algorithms&lt;/code&gt; directory run &lt;code&gt;swift build&lt;/code&gt; or &lt;code&gt;swift test&lt;/code&gt; accordingly&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Source Stability&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Async Algorithms package has a goal of being source stable as soon as possible; version numbers will follow &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;. Source breaking changes to public API can only land in a new major version.&lt;/p&gt; &#xA;&lt;p&gt;The public API of version 1.0 of the &lt;code&gt;swift-async-algorithms&lt;/code&gt; package will consist of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;AsyncAlgorithms&lt;/code&gt; module. Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may introduce changes to these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. Requiring a new Swift release will only require a minor version bump.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yonaskolb/XcodeGen</title>
    <updated>2023-12-01T02:29:44Z</updated>
    <id>tag:github.com,2023-12-01:/yonaskolb/XcodeGen</id>
    <link href="https://github.com/yonaskolb/XcodeGen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift command line tool for generating your Xcode project&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/yonaskolb/XcodeGen&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Assets/Logo_animated.gif&#34; alt=&#34;XcodeGen&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/yonaskolb/XcodeGen/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/yonaskolb/xcodegen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/yonaskolb/XcodeGen&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fyonaskolb%2FXcodeGen%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;Swift Package Manager Platforms&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/yonaskolb/XcodeGen&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fyonaskolb%2FXcodeGen%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;Swift Versions&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/yonaskolb/XcodeGen/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/yonaskolb/XcodeGen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;XcodeGen&lt;/h1&gt; &#xA;&lt;p&gt;XcodeGen is a command line tool written in Swift that generates your Xcode project using your folder structure and a project spec.&lt;/p&gt; &#xA;&lt;p&gt;The project spec is a YAML or JSON file that defines your targets, configurations, schemes, custom build settings and many other options. All your source directories are automatically parsed and referenced appropriately while preserving your folder structure. Sensible defaults are used in many places, so you only need to customize what is needed. Very complex projects can also be defined using more advanced features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Generate projects on demand and remove your &lt;code&gt;.xcodeproj&lt;/code&gt; from git, which means &lt;strong&gt;no more merge conflicts&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;✅ Groups and files in Xcode are always &lt;strong&gt;synced&lt;/strong&gt; to your directories on disk&lt;/li&gt; &#xA; &lt;li&gt;✅ Easy &lt;strong&gt;configuration&lt;/strong&gt; of projects which is human readable and git friendly&lt;/li&gt; &#xA; &lt;li&gt;✅ Easily copy and paste &lt;strong&gt;files and directories&lt;/strong&gt; without having to edit anything in Xcode&lt;/li&gt; &#xA; &lt;li&gt;✅ Share build settings across multiple targets with &lt;strong&gt;build setting groups&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ Automatically generate Schemes for &lt;strong&gt;different environments&lt;/strong&gt; like test and production&lt;/li&gt; &#xA; &lt;li&gt;✅ Easily &lt;strong&gt;create new projects&lt;/strong&gt; with complicated setups on demand without messing around with Xcode&lt;/li&gt; &#xA; &lt;li&gt;✅ Generate from anywhere including on &lt;strong&gt;CI&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ Distribute your spec amongst multiple files for easy &lt;strong&gt;sharing&lt;/strong&gt; and overriding&lt;/li&gt; &#xA; &lt;li&gt;✅ Easily create &lt;strong&gt;multi-platform&lt;/strong&gt; frameworks&lt;/li&gt; &#xA; &lt;li&gt;✅ Integrate &lt;strong&gt;Carthage&lt;/strong&gt; frameworks without any work&lt;/li&gt; &#xA; &lt;li&gt;✅ Export &lt;strong&gt;Dependency Diagrams&lt;/strong&gt; to view in &lt;a href=&#34;https://www.graphviz.org&#34;&gt;Graphviz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Given an example project spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: MyProject&#xA;include:&#xA;  - base_spec.yml&#xA;options:&#xA;  bundleIdPrefix: com.myapp&#xA;packages:&#xA;  Yams:&#xA;    url: https://github.com/jpsim/Yams&#xA;    from: 2.0.0&#xA;targets:&#xA;  MyApp:&#xA;    type: application&#xA;    platform: iOS&#xA;    deploymentTarget: &#34;10.0&#34;&#xA;    sources: [MyApp]&#xA;    settings:&#xA;      configs:&#xA;        debug:&#xA;          CUSTOM_BUILD_SETTING: my_debug_value&#xA;        release:&#xA;          CUSTOM_BUILD_SETTING: my_release_value&#xA;    dependencies:&#xA;      - target: MyFramework&#xA;      - carthage: Alamofire&#xA;      - framework: Vendor/MyFramework.framework&#xA;      - sdk: Contacts.framework&#xA;      - sdk: libc++.tbd&#xA;      - package: Yams&#xA;  MyFramework:&#xA;    type: framework&#xA;    platform: iOS&#xA;    sources: [MyFramework]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A project would be created with 2 connected targets, with all the required configurations and build settings. See the &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/ProjectSpec.md&#34;&gt;Project Spec&lt;/a&gt; documentation for all the options you can specify, and &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/Usage.md&#34;&gt;Usage&lt;/a&gt; for more general documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Make sure the latest stable (non-beta) version of Xcode is installed first.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/yonaskolb/mint&#34;&gt;Mint&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mint install yonaskolb/xcodegen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/yonaskolb/XcodeGen.git&#xA;cd XcodeGen&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install xcodegen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use as CLI&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/yonaskolb/XcodeGen.git&#xA;cd XcodeGen&#xA;swift run xcodegen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use as dependency&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your Package.swift file&#39;s dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/yonaskolb/XcodeGen.git&#34;, from: &#34;2.38.0&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then import wherever needed: &lt;code&gt;import XcodeGenKit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xcodegen generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will look for a project spec in the current directory called &lt;code&gt;project.yml&lt;/code&gt; and generate an Xcode project with the name defined in the spec.&lt;/p&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;--spec&lt;/strong&gt;: An optional path to a &lt;code&gt;.yml&lt;/code&gt; or &lt;code&gt;.json&lt;/code&gt; project spec. Defaults to &lt;code&gt;project.yml&lt;/code&gt;. (It is also possible to link to multiple spec files by comma separating them. Note that all other flags will be the same.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;--project&lt;/strong&gt;: An optional path to a directory where the project will be generated. By default this is the directory the spec lives in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;--quiet&lt;/strong&gt;: Suppress informational and success messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;--use-cache&lt;/strong&gt;: Used to prevent unnecessarily generating the project. If this is set, then a cache file will be written to when a project is generated. If &lt;code&gt;xcodegen&lt;/code&gt; is later run but the spec and all the files it contains are the same, the project won&#39;t be generated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;--cache-path&lt;/strong&gt;: A custom path to use for your cache file. This defaults to &lt;code&gt;~/.xcodegen/cache/{PROJECT_SPEC_PATH_HASH}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are other commands as well such as &lt;code&gt;xcodegen dump&lt;/code&gt; which lets out output the resolved spec in many different formats, or write it to a file. Use &lt;code&gt;xcodegen help&lt;/code&gt; to see more detailed usage information.&lt;/p&gt; &#xA;&lt;h2&gt;Dependency Diagrams&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand!&lt;/summary&gt; &#xA; &lt;h4&gt;How to export dependency diagrams:&lt;/h4&gt; &#xA; &lt;p&gt;To stdout:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;xcodegen dump --type graphviz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To a file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;xcodegen dump --type graphviz --file Graph.viz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;During implementation, &lt;code&gt;graphviz&lt;/code&gt; formatting was validated using &lt;a href=&#34;https://dreampuf.github.io/GraphvizOnline/&#34;&gt;GraphvizOnline&lt;/a&gt;, &lt;a href=&#34;http://www.webgraphviz.com&#34;&gt;WebGraphviz&lt;/a&gt;, and &lt;a href=&#34;https://graphviz.org&#34;&gt;Graphviz on MacOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Editing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/yonaskolb/XcodeGen.git&#xA;cd XcodeGen&#xA;swift package generate-xcodeproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This uses Swift Package Manager to create an &lt;code&gt;xcodeproj&lt;/code&gt; file that you can open, edit and run in Xcode, which makes editing any code easier.&lt;/p&gt; &#xA;&lt;p&gt;If you want to pass any required arguments when running in Xcode, you can edit the scheme to include launch arguments.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/ProjectSpec.md&#34;&gt;Project Spec&lt;/a&gt; documentation for all the various properties and options that can be set&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/Usage.md&#34;&gt;Usage&lt;/a&gt; for more specific usage and use case documentation&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/FAQ.md&#34;&gt;FAQ&lt;/a&gt; for a list of some frequently asked questions&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/Docs/Examples.md&#34;&gt;Examples&lt;/a&gt; for some real world XcodeGen project specs out in the wild&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;If XcodeGen doesn&#39;t meet your needs try these great alternatives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuist/tuist&#34;&gt;Tuist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/igor-makarov/xcake&#34;&gt;Xcake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/workshop/struct&#34;&gt;struct&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;p&gt;This tool is powered by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuist/XcodeProj&#34;&gt;XcodeProj&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yonaskolb/JSONUtilities&#34;&gt;JSONUtilities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylef/Spectre&#34;&gt;Spectre&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylef/PathKit&#34;&gt;PathKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpsim/Yams&#34;&gt;Yams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jakeheis/SwiftCLI&#34;&gt;SwiftCLI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Inspiration for this tool came from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/workshop/struct&#34;&gt;struct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/igor-makarov/xcake&#34;&gt;Xcake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CocoaPods/Xcodeproj&#34;&gt;CocoaPods Xcodeproj&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests and issues are always welcome. Please open any issues and PRs for bugs, features, or documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/0&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/0&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/1&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/1&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/2&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/2&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/3&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/3&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/4&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/4&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/5&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/5&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/6&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/6&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/links/7&#34;&gt;&lt;img src=&#34;https://sourcerer.io/fame/yonaskolb/yonaskolb/XcodeGen/images/7&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;XcodeGen is licensed under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/yonaskolb/XcodeGen/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more info.&lt;/p&gt;</summary>
  </entry>
</feed>