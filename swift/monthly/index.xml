<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-01T02:10:07Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apple/swift-algorithms</title>
    <updated>2023-11-01T02:10:07Z</updated>
    <id>tag:github.com,2023-11-01:/apple/swift-algorithms</id>
    <link href="https://github.com/apple/swift-algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Commonly used sequence and collection algorithms for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Algorithms&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift Algorithms&lt;/strong&gt; is an open-source package of sequence and collection algorithms, along with their related types.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the package, and the intent behind it, in the &lt;a href=&#34;https://swift.org/blog/swift-algorithms/&#34;&gt;announcement on swift.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;h4&gt;Combinations / permutations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Combinations.md&#34;&gt;&lt;code&gt;combinations(ofCount:)&lt;/code&gt;&lt;/a&gt;: Combinations of particular sizes of the elements in a collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Permutations.md&#34;&gt;&lt;code&gt;permutations(ofCount:)&lt;/code&gt;&lt;/a&gt;: Permutations of a particular size of the elements in a collection, or of the full collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Permutations.md&#34;&gt;&lt;code&gt;uniquePermutations(ofCount:)&lt;/code&gt;&lt;/a&gt;: Permutations of a collection&#39;s elements, skipping any duplicate permutations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mutating algorithms&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Rotate.md&#34;&gt;&lt;code&gt;rotate(toStartAt:)&lt;/code&gt;, &lt;code&gt;rotate(subrange:toStartAt:)&lt;/code&gt;&lt;/a&gt;: In-place rotation of elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Partition.md&#34;&gt;&lt;code&gt;stablePartition(by:)&lt;/code&gt;, &lt;code&gt;stablePartition(subrange:by:)&lt;/code&gt;&lt;/a&gt;: A partition that preserves the relative order of the resulting prefix and suffix.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Combining collections&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Chain.md&#34;&gt;&lt;code&gt;chain(_:_:)&lt;/code&gt;&lt;/a&gt;: Concatenates two collections with the same element type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Cycle.md&#34;&gt;&lt;code&gt;cycled()&lt;/code&gt;, &lt;code&gt;cycled(times:)&lt;/code&gt;&lt;/a&gt;: Repeats the elements of a collection forever or a set number of times.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Joined.md&#34;&gt;&lt;code&gt;joined(by:)&lt;/code&gt;&lt;/a&gt;: Concatenate sequences of sequences, using an element or sequence as a separator, or using a closure to generate each separator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Product.md&#34;&gt;&lt;code&gt;product(_:_:)&lt;/code&gt;&lt;/a&gt;: Iterates over all the pairs of two collections; equivalent to nested &lt;code&gt;for&lt;/code&gt;-&lt;code&gt;in&lt;/code&gt; loops.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Subsetting operations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Compacted.md&#34;&gt;&lt;code&gt;compacted()&lt;/code&gt;&lt;/a&gt;: Drops the &lt;code&gt;nil&lt;/code&gt;s from a sequence or collection, unwrapping the remaining elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Partition.md&#34;&gt;&lt;code&gt;partitioned(by:)&lt;/code&gt;&lt;/a&gt;: Returns the elements in a sequence or collection that do and do not match a given predicate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/RandomSampling.md&#34;&gt;&lt;code&gt;randomSample(count:)&lt;/code&gt;, &lt;code&gt;randomSample(count:using:)&lt;/code&gt;&lt;/a&gt;: Randomly selects a specific number of elements from a collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/RandomSampling.md&#34;&gt;&lt;code&gt;randomStableSample(count:)&lt;/code&gt;, &lt;code&gt;randomStableSample(count:using:)&lt;/code&gt;&lt;/a&gt;: Randomly selects a specific number of elements from a collection, preserving their original relative order.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Stride.md&#34;&gt;&lt;code&gt;striding(by:)&lt;/code&gt;&lt;/a&gt;: Returns every nth element of a collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Suffix.md&#34;&gt;&lt;code&gt;suffix(while:)&lt;/code&gt;&lt;/a&gt;: Returns the suffix of a collection where all element pass a given predicate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Trim.md&#34;&gt;&lt;code&gt;trimmingPrefix(while:)&lt;/code&gt;, &lt;code&gt;trimmingSuffix(while)&lt;/code&gt;, &lt;code&gt;trimming(while:)&lt;/code&gt;&lt;/a&gt;: Returns a slice by trimming elements from a collection&#39;s start, end, or both. The mutating &lt;code&gt;trim...&lt;/code&gt; methods trim a collection in place.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Unique.md&#34;&gt;&lt;code&gt;uniqued()&lt;/code&gt;, &lt;code&gt;uniqued(on:)&lt;/code&gt;&lt;/a&gt;: The unique elements of a collection, preserving their order.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/MinMax.md&#34;&gt;&lt;code&gt;minAndMax()&lt;/code&gt;, &lt;code&gt;minAndMax(by:)&lt;/code&gt;&lt;/a&gt;: Returns the smallest and largest elements of a sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Partial sorting&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/MinMax.md&#34;&gt;&lt;code&gt;min(count:)&lt;/code&gt;, &lt;code&gt;max(count:)&lt;/code&gt;, &lt;code&gt;min(count:sortedBy:)&lt;/code&gt;, &lt;code&gt;max(count:sortedBy:)&lt;/code&gt;&lt;/a&gt;: Returns the smallest or largest elements of a collection, sorted by a predicate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other useful operations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/AdjacentPairs.md&#34;&gt;&lt;code&gt;adjacentPairs()&lt;/code&gt;&lt;/a&gt;: Lazily iterates over tuples of adjacent elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Chunked.md&#34;&gt;&lt;code&gt;chunked(by:)&lt;/code&gt;, &lt;code&gt;chunked(on:)&lt;/code&gt;, &lt;code&gt;chunks(ofCount:)&lt;/code&gt;&lt;/a&gt;: Eager and lazy operations that break a collection into chunks based on either a binary predicate or when the result of a projection changes or chunks of a given count.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/FirstNonNil.md&#34;&gt;&lt;code&gt;firstNonNil(_:)&lt;/code&gt;&lt;/a&gt;: Returns the first non-&lt;code&gt;nil&lt;/code&gt; result from transforming a sequence&#39;s elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Indexed.md&#34;&gt;&lt;code&gt;indexed()&lt;/code&gt;&lt;/a&gt;: Iterate over tuples of a collection&#39;s indices and elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Intersperse.md&#34;&gt;&lt;code&gt;interspersed(with:)&lt;/code&gt;&lt;/a&gt;: Place a value between every two elements of a sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Partition.md&#34;&gt;&lt;code&gt;partitioningIndex(where:)&lt;/code&gt;&lt;/a&gt;: Returns the starting index of the partition of a collection that matches a predicate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Reductions.md&#34;&gt;&lt;code&gt;reductions(_:)&lt;/code&gt;, &lt;code&gt;reductions(_:_:)&lt;/code&gt;&lt;/a&gt;: Returns all the intermediate states of reducing the elements of a sequence or collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Split.md&#34;&gt;&lt;code&gt;split(maxSplits:omittingEmptySubsequences:whereSeparator)&lt;/code&gt;, &lt;code&gt;split(separator:maxSplits:omittingEmptySubsequences)&lt;/code&gt;&lt;/a&gt;: Lazy versions of the Standard Library&#39;s eager operations that split sequences and collections into subsequences separated by the specified separator element.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Windows.md&#34;&gt;&lt;code&gt;windows(ofCount:)&lt;/code&gt;&lt;/a&gt;: Breaks a collection into overlapping subsequences where elements are slices from the original collection.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding Swift Algorithms as a Dependency&lt;/h2&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;Algorithms&lt;/code&gt; library in a SwiftPM project, add the following line to the dependencies in your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/apple/swift-algorithms&#34;, from: &#34;1.0.0&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include &lt;code&gt;&#34;Algorithms&#34;&lt;/code&gt; as a dependency for your executable target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(name: &#34;&amp;lt;target&amp;gt;&#34;, dependencies: [&#xA;    .product(name: &#34;Algorithms&#34;, package: &#34;swift-algorithms&#34;),&#xA;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, add &lt;code&gt;import Algorithms&lt;/code&gt; to your source code.&lt;/p&gt; &#xA;&lt;h2&gt;Source Stability&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Algorithms package is source stable; version numbers follow &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;. Source breaking changes to public API can only land in a new major version.&lt;/p&gt; &#xA;&lt;p&gt;The public API of version 1.0 of the &lt;code&gt;swift-algorithms&lt;/code&gt; package consists of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;Algorithms&lt;/code&gt; module. Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may introduce changes to these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. Requiring a new Swift release will only require a minor version bump.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Swinject/Swinject</title>
    <updated>2023-11-01T02:10:07Z</updated>
    <id>tag:github.com,2023-11-01:/Swinject/Swinject</id>
    <link href="https://github.com/Swinject/Swinject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dependency injection framework for Swift with iOS/macOS/Linux&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://avatars0.githubusercontent.com/u/13637225?v=3&amp;amp;s=600&#34; width=&#34;33%&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Swinject&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/Swinject/Swinject&#34;&gt;&lt;img src=&#34;https://travis-ci.com/Swinject/Swinject.svg?branch=master&#34; alt=&#34;Travis CI Com&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/1ucas/Swinject/actions/workflows/Project%20Testing.yml/badge.svg?branch=master&#34; alt=&#34;Github Actions&#34;&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Swinject&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Swinject.svg?style=flat&#34; alt=&#34;CocoaPods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Swinject&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Swinject.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Swinject&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg?sanitize=true&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-4.2--5.4-F16D39.svg?style=flat&#34; alt=&#34;Swift Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swinject is a lightweight &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;dependency injection&lt;/a&gt; framework for Swift.&lt;/p&gt; &#xA;&lt;p&gt;Dependency injection (DI) is a software design pattern that implements Inversion of Control (IoC) for resolving dependencies. In the pattern, Swinject helps your app split into loosely-coupled components, which can be developed, tested and maintained more easily. Swinject is powered by the Swift generic type system and first class functions to define dependencies of your app simply and fluently.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/README.md#user-content-pure-swift-type-support&#34;&gt;Pure Swift Type Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/DIContainer.md#registration-with-arguments-to-di-container&#34;&gt;Injection with Arguments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/InjectionPatterns.md&#34;&gt;Initializer/Property/Method Injections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/InjectionPatterns.md#user-content-initialization-callback&#34;&gt;Initialization Callback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/CircularDependencies.md&#34;&gt;Circular Dependency Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ObjectScopes.md&#34;&gt;Object Scopes as None (Transient), Graph, Container (Singleton) and Hierarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support of both Reference and &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Misc.md#value-types&#34;&gt;Value Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Misc.md#self-registration-self-binding&#34;&gt;Self-registration (Self-binding)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ContainerHierarchy.md&#34;&gt;Container Hierarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/ThreadSafety.md&#34;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation/Assembler.md&#34;&gt;Modular Components&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectPropertyLoader&#34;&gt;SwinjectPropertyLoader&lt;/a&gt;&lt;/strong&gt;: Loading property values from resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectStoryboard&#34;&gt;SwinjectStoryboard&lt;/a&gt;&lt;/strong&gt;: Automatic dependency injection via Storyboard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/Swinject-CodeGen&#34;&gt;Swinject-CodeGen&lt;/a&gt;&lt;/strong&gt;: Type-safe code generation of &lt;code&gt;Container&lt;/code&gt; from a CSV/YAML file defining dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Swinject/SwinjectAutoregistration&#34;&gt;SwinjectAutoregistration&lt;/a&gt;&lt;/strong&gt;: Automatic registration of services by leveraging the Swift Generics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 11.0+ / Mac OS X 10.13+ / watchOS 4.0+ / tvOS 11.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 14.3+&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.2+&lt;/li&gt; &#xA; &lt;li&gt;Carthage 0.18+ (if you use)&lt;/li&gt; &#xA; &lt;li&gt;CocoaPods 1.1.1+ (if you use)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Swinject is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;, or &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;To install Swinject with Carthage, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Swinject/Swinject&#34;&#xA;&#xA;# Uncomment if you use SwinjectStoryboard&#xA;# github &#34;Swinject/SwinjectStoryboard&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update --no-use-binaries&lt;/code&gt; command or just &lt;code&gt;carthage update&lt;/code&gt;. For details of the installation and usage of Carthage, visit &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;its project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;To install Swinject with CocoaPods, add the following lines to your &lt;code&gt;Podfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;11.0&#39; # or platform :osx, &#39;10.13&#39; if your target is OS X.&#xA;use_frameworks!&#xA;&#xA;pod &#39;Swinject&#39;&#xA;&#xA;# Uncomment if you use SwinjectStoryboard&#xA;# pod &#39;SwinjectStoryboard&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt; command. For details of the installation and usage of CocoaPods, visit &lt;a href=&#34;https://cocoapods.org&#34;&gt;its official website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;in &lt;code&gt;Package.swift&lt;/code&gt; add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    // Dependencies declare other packages that this package depends on.&#xA;    // .package(url: /* package url */, from: &#34;1.0.0&#34;),&#xA;    .package(url: &#34;https://github.com/Swinject/Swinject.git&#34;, from: &#34;2.8.0&#34;)&#xA;],&#xA;targets: [&#xA;    .target(&#xA;        name: &#34;MyProject&#34;,&#xA;        dependencies: [..., &#34;Swinject&#34;]&#xA;    )&#xA;    ...&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/Documentation&#34;&gt;Technical documents&lt;/a&gt; including patterns of dependency injection and examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/Swinject/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, register a service and component pair to a &lt;code&gt;Container&lt;/code&gt;, where the component is created by the registered closure as a factory. In this example, &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;PetOwner&lt;/code&gt; are component classes implementing &lt;code&gt;Animal&lt;/code&gt; and &lt;code&gt;Person&lt;/code&gt; service protocols, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let container = Container()&#xA;container.register(Animal.self) { _ in Cat(name: &#34;Mimi&#34;) }&#xA;container.register(Person.self) { r in&#xA;    PetOwner(pet: r.resolve(Animal.self)!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then get an instance of a service from the container. The person is resolved to a pet owner, and playing with the cat named Mimi!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let person = container.resolve(Person.self)!&#xA;person.play() // prints &#34;I&#39;m playing with Mimi.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where definitions of the protocols and classes are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Animal {&#xA;    var name: String? { get }&#xA;}&#xA;&#xA;class Cat: Animal {&#xA;    let name: String?&#xA;&#xA;    init(name: String?) {&#xA;        self.name = name&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Person {&#xA;    func play()&#xA;}&#xA;&#xA;class PetOwner: Person {&#xA;    let pet: Animal&#xA;&#xA;    init(pet: Animal) {&#xA;        self.pet = pet&#xA;    }&#xA;&#xA;    func play() {&#xA;        let name = pet.name ?? &#34;someone&#34;&#xA;        print(&#34;I&#39;m playing with \(name).&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the &lt;code&gt;pet&lt;/code&gt; of &lt;code&gt;PetOwner&lt;/code&gt; is automatically set as the instance of &lt;code&gt;Cat&lt;/code&gt; when &lt;code&gt;Person&lt;/code&gt; is resolved to the instance of &lt;code&gt;PetOwner&lt;/code&gt;. If a container already set up is given, you do not have to care what are the actual types of the services and how they are created with their dependency.&lt;/p&gt; &#xA;&lt;h2&gt;Where to Register Services&lt;/h2&gt; &#xA;&lt;p&gt;Services must be registered to a container before they are used. The typical registration approach will differ depending upon whether you are using &lt;code&gt;SwinjectStoryboard&lt;/code&gt; or not.&lt;/p&gt; &#xA;&lt;p&gt;The following view controller class is used in addition to the protocols and classes above in the examples below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PersonViewController: UIViewController {&#xA;    var person: Person?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With SwinjectStoryboard&lt;/h3&gt; &#xA;&lt;p&gt;Import SwinjectStoryboard at the top of your swift source file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwinjectStoryboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services should be registered in an extension of &lt;code&gt;SwinjectStoryboard&lt;/code&gt; if you use &lt;code&gt;SwinjectStoryboard&lt;/code&gt;. Refer to &lt;a href=&#34;https://github.com/Swinject/SwinjectStoryboard&#34;&gt;the project page of SwinjectStoryboard&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension SwinjectStoryboard {&#xA;    @objc class func setup() {&#xA;        defaultContainer.register(Animal.self) { _ in Cat(name: &#34;Mimi&#34;) }&#xA;        defaultContainer.register(Person.self) { r in&#xA;            PetOwner(pet: r.resolve(Animal.self)!)&#xA;        }&#xA;        defaultContainer.register(PersonViewController.self) { r in&#xA;            let controller = PersonViewController()&#xA;            controller.person = r.resolve(Person.self)&#xA;            return controller&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Without SwinjectStoryboard&lt;/h3&gt; &#xA;&lt;p&gt;If you do not use &lt;code&gt;SwinjectStoryboard&lt;/code&gt; to instantiate view controllers, services should be registered to a container in your application&#39;s &lt;code&gt;AppDelegate&lt;/code&gt;. Registering before exiting &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt; will ensure that the services are setup appropriately before they are used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;    var window: UIWindow?&#xA;    let container: Container = {&#xA;        let container = Container()&#xA;        container.register(Animal.self) { _ in Cat(name: &#34;Mimi&#34;) }&#xA;        container.register(Person.self) { r in&#xA;            PetOwner(pet: r.resolve(Animal.self)!)&#xA;        }&#xA;        container.register(PersonViewController.self) { r in&#xA;            let controller = PersonViewController()&#xA;            controller.person = r.resolve(Person.self)&#xA;            return controller&#xA;        }&#xA;        return container&#xA;    }()&#xA;&#xA;    func application(&#xA;        _ application: UIApplication,&#xA;        didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -&amp;gt; Bool {&#xA;&#xA;        // Instantiate a window.&#xA;        let window = UIWindow(frame: UIScreen.main.bounds)&#xA;        window.makeKeyAndVisible()&#xA;        self.window = window&#xA;&#xA;        // Instantiate the root view controller with dependencies injected by the container.&#xA;        window.rootViewController = container.resolve(PersonViewController.self)&#xA;&#xA;        return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the example uses a convenience initializer taking a closure to register services to the new instance of &lt;code&gt;Container&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Play in Playground!&lt;/h2&gt; &#xA;&lt;p&gt;The project contains &lt;code&gt;Sample-iOS.playground&lt;/code&gt; to demonstrate the features of Swinject. Download or clone the project, run the playground, modify it, and play with it to learn Swinject.&lt;/p&gt; &#xA;&lt;p&gt;To run the playground in the project, first build the project, then select &lt;code&gt;Editor &amp;gt; Execute Playground&lt;/code&gt; menu in Xcode.&lt;/p&gt; &#xA;&lt;h2&gt;Example Apps&lt;/h2&gt; &#xA;&lt;p&gt;Some example apps using Swinject can be found on &lt;a href=&#34;https://github.com/search?o=desc&amp;amp;q=swinject&amp;amp;s=updated&amp;amp;type=Repositories&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Blog Posts&lt;/h2&gt; &#xA;&lt;p&gt;The following blog posts introduce the concept of dependency injection and Swinject.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/14223279-dependency-injection-tutorial-for-ios-getting-started&#34;&gt;Dependency Injection Tutorial for iOS: Getting Started&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://www.raywenderlich.com/u/galata&#34;&gt;Irina Galata&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/17-swinject-tutorial-for-ios-getting-started&#34;&gt;Swinject Tutorial for iOS: Getting Started&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://www.raywenderlich.com/u/gemmakbarlow&#34;&gt;Gemma Barlow&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/flawless-app-stories/ios-dependency-injection-using-swinject-9c4ceff99e41&#34;&gt;iOS Dependency Injection Using Swinject&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://ali-akhtar.medium.com&#34;&gt;Ali Akhtar&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/its-tinkoff/di-in-ios-complete-guide-cd76a079d2d&#34;&gt;DI in iOS: Complete guide&lt;/a&gt; &lt;em&gt;by &lt;a href=&#34;https://medium.com/@batrakov.vitaly&#34;&gt;Vitaly Batrakov&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks the authors!&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guide&lt;/h2&gt; &#xA;&lt;p&gt;A guide to &lt;a href=&#34;https://github.com/Swinject/Swinject/issues&#34;&gt;submit issues&lt;/a&gt;, to ask general questions, or to &lt;a href=&#34;https://github.com/Swinject/Swinject/pulls&#34;&gt;open pull requests&lt;/a&gt; is &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Question?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/swinject&#34;&gt;Stack Overflow&lt;/a&gt; we are trying to monitor questions tagged &lt;code&gt;swinject&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The DI container features of Swinject are inspired by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ninject.org&#34;&gt;Ninject&lt;/a&gt; - &lt;a href=&#34;https://github.com/enkari&#34;&gt;Enkari, Ltd&lt;/a&gt; and &lt;a href=&#34;https://github.com/ninject/Ninject/graphs/contributors&#34;&gt;the Ninject project contributors&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://autofac.org&#34;&gt;Autofac&lt;/a&gt; - &lt;a href=&#34;https://github.com/autofac/Autofac&#34;&gt;Autofac Project&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and highly inspired by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://funq.codeplex.com&#34;&gt;Funq&lt;/a&gt; - &lt;a href=&#34;http://www.codeplex.com/site/users/view/dcazzulino&#34;&gt;Daniel Cazzulino&lt;/a&gt; and &lt;a href=&#34;http://funq.codeplex.com/team/view&#34;&gt;the project team&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Swinject/Swinject/master/LICENSE&#34;&gt;LICENSE file&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Whisky-App/Whisky</title>
    <updated>2023-11-01T02:10:07Z</updated>
    <id>tag:github.com,2023-11-01:/Whisky-App/Whisky</id>
    <link href="https://github.com/Whisky-App/Whisky" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern Wine wrapper for macOS built with SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Whisky 🥃&lt;/h1&gt; &#xA; &lt;p&gt;&lt;em&gt;Wine but a bit stronger&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IsaacMarovitz/Whisky/SwiftLint.yml?style=for-the-badge&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://discord.gg/CsqAfs9CnM&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1115955071549702235?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;img width=&#34;650&#34; alt=&#34;Screenshot 2023-03-31 at 17 14 00&#34; src=&#34;https://user-images.githubusercontent.com/42140194/229232488-dbad85f4-cecb-45e1-a182-f737fe9d2b1f.png&#34;&gt; &#xA;&lt;p&gt;Familiar UI that integrates seamlessly with macOS&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;img width=&#34;650&#34; alt=&#34;Screenshot 2023-03-31 at 17 14 22&#34; src=&#34;https://user-images.githubusercontent.com/42140194/229232557-07f78a79-f695-45f6-be45-15a5b2f3c053.png&#34;&gt; &#xA; &lt;p&gt;One-click bottle creation and management&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;img width=&#34;650&#34; alt=&#34;debug&#34; src=&#34;https://user-images.githubusercontent.com/42140194/229176642-57b80801-d29b-4123-b1c2-f3b31408ffc6.png&#34;&gt; &#xA;&lt;p&gt;Debug and profile with ease&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Whisky provides a clean and easy to use graphical wrapper for Wine built in native SwiftUI. You can make and manage bottles, install and run Windows apps and games, and unlock the full potential of your Mac with no technical knowledge required. Whisky is built on top of CrossOver 22.1.1, and Apple&#39;s own &lt;code&gt;Game Porting Toolkit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;Translated on &lt;a href=&#34;https://crowdin.com/project/whisky&#34;&gt;Crowdin&lt;/a&gt;.&lt;/del&gt; TEMPORARILY OFFLINE, PR LOCALE CHANGES DIRECTLY&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU: Apple Silicon (M-series chips)&lt;/li&gt; &#xA; &lt;li&gt;OS: macOS Sonoma 14.0 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Homebrew&lt;/h2&gt; &#xA;&lt;p&gt;Whisky is on homebrew! Install with &lt;code&gt;brew install --cask whisky&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;My game isn&#39;t working!&lt;/h2&gt; &#xA;&lt;p&gt;Some games need special steps to get working. Check out the &lt;a href=&#34;https://github.com/IsaacMarovitz/Whisky/wiki/Game-Support&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Credits &amp;amp; Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Whisky is possible thanks to the magic of several projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marzent/wine-msync&#34;&gt;msync&lt;/a&gt; by marzent&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gcenx/DXVK-macOS&#34;&gt;DXVK-macOS&lt;/a&gt; by Gcenx and doitsujin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KhronosGroup/MoltenVK&#34;&gt;MoltenVK&lt;/a&gt; by KhronosGroup&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sparkle-project/Sparkle&#34;&gt;Sparkle&lt;/a&gt; by sparkle-project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SwiftPackageIndex/SemanticVersion&#34;&gt;SemanticVersion&lt;/a&gt; by SwiftPackageIndex&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-argument-parser&#34;&gt;swift-argument-parser&lt;/a&gt; by Apple&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scottrhoyt/SwiftyTextTable&#34;&gt;SwiftTextTable&lt;/a&gt; by scottrhoyt&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codeweavers.com/crossover&#34;&gt;CrossOver 22.1.1&lt;/a&gt; by CodeWeavers and WineHQ&lt;/li&gt; &#xA; &lt;li&gt;D3DMetal by Apple&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Special thanks to Gcenx, ohaiibuzzle, and Nat Brown for their support and contributions!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &#xA;    &lt;picture&gt; &#xA;     &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./images/cw-dark.png&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/Whisky-App/Whisky/main/images/cw-light.png&#34; width=&#34;500&#34;&gt; &#xA;    &lt;/picture&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Whisky doesn&#39;t exist without CrossOver. Support the work of CodeWeavers using our &lt;a href=&#34;https://www.codeweavers.com/store?ad=1010&#34;&gt;affiliate link&lt;/a&gt;. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
</feed>