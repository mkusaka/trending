<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-01T02:03:43Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RobotsAndPencils/XcodesApp</title>
    <updated>2022-10-01T02:03:43Z</updated>
    <id>tag:github.com,2022-10-01:/RobotsAndPencils/XcodesApp</id>
    <link href="https://github.com/RobotsAndPencils/XcodesApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The easiest way to install and switch between multiple versions of Xcode - with a mouse click.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/icon.png&#34; align=&#34;center&#34; width=&#34;50&#34; height=&#34;50&#34;&gt; Xcodes.app&lt;/h1&gt; &#xA;&lt;p&gt;The easiest way to install and switch between multiple versions of Xcode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you&#39;re looking for a command-line version of Xcodes.app, try &lt;a href=&#34;https://github.com/RobotsAndPencils/xcodes&#34;&gt;&lt;code&gt;xcodes&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/RobotsAndPencils/Xcodes.app/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/screenshot_light.png#gh-light-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/screenshot_dark.png#gh-dark-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List all available Xcode versions from &lt;a href=&#34;https://xcodereleases.com&#34;&gt;Xcode Releases&#39;&lt;/a&gt; data or the Apple Developer website.&lt;/li&gt; &#xA; &lt;li&gt;Install any Xcode version, &lt;strong&gt;fully automated&lt;/strong&gt; from start to finish. Xcodes uses &lt;a href=&#34;https://aria2.github.io&#34;&gt;&lt;code&gt;aria2&lt;/code&gt;&lt;/a&gt;, which uses up to 16 connections to download 3-5x faster than URLSession.&lt;/li&gt; &#xA; &lt;li&gt;Automatically resumes installs if network errors.&lt;/li&gt; &#xA; &lt;li&gt;Apple ID required to download Xcode versions.&lt;/li&gt; &#xA; &lt;li&gt;Just click a button to make a version active with &lt;code&gt;xcode-select&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;View release notes, OS compatibility, included SDKs and compilers from &lt;a href=&#34;https://xcodereleases.com&#34;&gt;Xcode Releases&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dark/Light Mode supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Experiments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to the wonderful work of &lt;a href=&#34;https://github.com/saagarjha/unxip&#34;&gt;https://github.com/saagarjha/unxip&lt;/a&gt;, turn on the experiment to increase your unxipping time by up to 70%! More can be found on his repo, but bugs, high memory may occur if used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/experiment_light.jpg#gh-light-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/experiment_dark.jpg#gh-dark-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;Xcodes supports localization in several languages.&lt;/p&gt; &#xA;&lt;p&gt;The following languages are supported because of the following community users!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French 🇫🇷&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dompepin&#34;&gt;@dompepin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Italian 🇮🇹&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gualtierofrigerio&#34;&gt;gualtierofrigerio&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish 🇪🇸🇲&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cesartru88&#34;&gt;@cesartru88&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Korean 🇰🇷&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ryan-son&#34;&gt;@ryan-son&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian 🇷🇺&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alexmazlov&#34;&gt;@alexmazlov&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Turkish 🇹🇷&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/egrimo&#34;&gt;@egrimo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hindi 🇮🇳&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/KGurpreet&#34;&gt;@KGurpreet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chinese-Simplified 🇨🇳&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/megabitsenmzq&#34;&gt;@megabitsenmzq&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Finnish 🇫🇮&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/marcusziade&#34;&gt;@marcusziade&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chinese-Traditional 🇹🇼&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/itszero&#34;&gt;@itszero&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ukranian 🇺🇦&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gelosi&#34;&gt;@gelosi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Japanese 🇯🇵&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tatsuz0u&#34;&gt;@tatsuz0u&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;German 🇩🇪&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/drct&#34;&gt;@drct&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Want to add more languages? Simply create a PR with the updated strings file.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Xcodes.app runs on macOS Big Sur 11.0 or later.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew Cask&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install --cask xcodes&#xA;&#xA;# These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download a release&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version &lt;a href=&#34;https://github.com/RobotsAndPencils/XcodesApp/releases/latest&#34;&gt;here&lt;/a&gt; using the &lt;strong&gt;Xcodes.zip&lt;/strong&gt; asset. These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/li&gt; &#xA; &lt;li&gt;Move the unzipped &lt;code&gt;Xcodes.app&lt;/code&gt; to your &lt;code&gt;/Applications&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need macOS 12 Big Sur and Xcode 13 in order to build and run Xcodes.app.&lt;/p&gt; &#xA;&lt;p&gt;If you aren&#39;t a Robots and Pencils employee you&#39;ll need to change the CODE_SIGNING_SUBJECT_ORGANIZATIONAL_UNIT build setting to your Apple Developer team ID in order for code signing validation to succeed between the main app and the privileged helper.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Unxip&lt;/code&gt; and &lt;code&gt;aria2&lt;/code&gt; must be compiled as a universal binary&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# compile for Intel&#xA; swiftc -parse-as-library -O -target x86_64-apple-macos11 unxip.swift&#xA;# compile for M1&#xA; swiftc -parse-as-library -O -target arm64-apple-macos11 unxip.swift&#xA;&#xA;# combine for universal binary&#xA; lipo -create -output unxip unxip_intel unxip_m1  &#xA;# check it&#xA; lipo -archs unxip &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notable design decisions are recorded in &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/DECISIONS.md&#34;&gt;DECISIONS.md&lt;/a&gt;. The Apple authentication flow is described in &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/Apple.paw&#34;&gt;Apple.paw&lt;/a&gt;, which will allow you to play with the API endpoints that are involved using the &lt;a href=&#34;https://paw.cloud&#34;&gt;Paw&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xcpretty/xcode-install&#34;&gt;&lt;code&gt;xcode-install&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/spaceship&#34;&gt;fastlane/spaceship&lt;/a&gt; both deserve credit for figuring out the hard parts of what makes this possible.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Releasing a new version&lt;/summary&gt; &#xA; &lt;p&gt;Follow the steps below to build and release a new version of Xcodes.app. For any of the git steps, you can use your preferred tool, but please sign the tag.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Update the version number in Xcode and commit the change, if necessary&#xA;&#xA;# Question: Did anything in XPCHelper change?&#xA;# - com.robotsandpencils.XcodesApp.Helper folder and HelperXPCShared&#xA;# - if so, bump the version number in com.robotsandpencils.XcodesApp.Helper target.&#xA;# Note: you do not have to bump the version number if nothing has changed.&#xA;# Note2: If you do bump the version, the end user, must re-install the XPCHelper and give permission again.&#xA;&#xA;# Increment the build number&#xA;scripts/increment_build_number.sh&#xA;&#xA;# Commit the change&#xA;git add Xcodes/Resources/Info.plist&#xA;git commit -asm &#34;Increment build number&#34;&#xA;&#xA;# Tag the latest commit&#xA;# Replace $VERSION and $BUILD below with the latest real values&#xA;git tag -asm &#34;v$VERSIONb$BUILD&#34; &#34;v$VERSIONb$BUILD&#34;&#xA;&#xA;# Push to origin&#xA;git push --follow-tags&#xA;&#xA;# Build the app&#xA;# Make sure you have the Xcode Selected you want to build with&#xA;scripts/package_release.sh&#xA;&#xA;# Notarize the app&#xA;# Do this from the Product directory so the app is zipped without being nested inside Product&#xA;# Create a app specific password on appleid.apple.com if you haven&#39;t already&#xA;# xcrun notarytool store-credentials &#34;AC_PASSWORD&#34; \&#xA;#              --apple-id &#34;test@example.com&#34; \&#xA;#              --team-id &#34;teamid&#34; \&#xA;#               --password &#34;app specific password&#34;&#xA;&#xA;pushd Product&#xA;../scripts/notarize.sh Xcodes.zip &amp;lt;MYORG&amp;gt;&#xA;&#xA;# Sign the .zip for Sparkle, note the signature in the output for later&#xA;# If you&#39;re warned about the signing key not being found, see the Xcodes 1Password vault for the key and installation instructions.&#xA;../scripts/sign_update Xcodes.zip&#xA;popd&#xA;&#xA;# Go to https://github.com/RobotsAndPencils/XcodesApp/releases&#xA;# If there are uncategorized PRs, add the appropriate label and run the Release Drafter action manually&#xA;# Edit the latest draft release&#xA;# Set its tag to the tag you just pushed&#xA;# Set its title to a string with the format &#34;$VERSION ($BUILD)&#34;&#xA;# Polish the draft release notes, if necessary&#xA;# Add the signature to the bottom of the release notes in a comment, like:&#xA;&amp;lt;!-- sparkle:edSignature=$SIGNATURE --&amp;gt;&#xA;# Attach the zip that was created in the Product directory to the release&#xA;# Publish the release&#xA;&#xA;# Update the [Homebrew Cask](https://github.com/RobotsAndPencils/homebrew-cask/blob/master/Casks/xcodes.rb).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mattkiazyk&#34;&gt;Matt Kiazyk&lt;/a&gt; - &lt;a href=&#34;https://www.twitter.com/mattkiazyk&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.robotsandpencils.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/R&amp;amp;PLogo.png&#34; width=&#34;153&#34; height=&#34;74&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Made with ❤️ by &lt;a href=&#34;http://www.robotsandpencils.com&#34;&gt;Robots &amp;amp; Pencils&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/xcodesApp&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://github.com/robotsandpencils&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pointfreeco/swift-snapshot-testing</title>
    <updated>2022-10-01T02:03:43Z</updated>
    <id>tag:github.com,2022-10-01:/pointfreeco/swift-snapshot-testing</id>
    <link href="https://github.com/pointfreeco/swift-snapshot-testing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📸 Delightful Swift snapshot testing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;📸 SnapshotTesting&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://actions-badge.atrox.dev/pointfreeco/swift-snapshot-testing/goto&#34;&gt;&lt;img src=&#34;https://github.com/pointfreeco/swift-snapshot-testing/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-snapshot-testing&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-snapshot-testing%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-snapshot-testing&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-snapshot-testing%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Delightful Swift snapshot testing.&lt;/p&gt; &#xA;&lt;!--&#xA;![An example of a snapshot failure in Xcode.](.github/snapshot-test-1.png)&#xA;--&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/#installation&#34;&gt;installed&lt;/a&gt;, &lt;em&gt;no additional configuration is required&lt;/em&gt;. You can import the &lt;code&gt;SnapshotTesting&lt;/code&gt; module and call the &lt;code&gt;assertSnapshot&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SnapshotTesting&#xA;import XCTest&#xA;&#xA;class MyViewControllerTests: XCTestCase {&#xA;  func testMyViewController() {&#xA;    let vc = MyViewController()&#xA;&#xA;    assertSnapshot(matching: vc, as: .image)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When an assertion first runs, a snapshot is automatically recorded to disk and the test will fail, printing out the file path of any newly-recorded reference.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🛑 failed - No reference was found on disk. Automatically recorded snapshot: …&lt;/p&gt; &#xA; &lt;p&gt;open &#34;…/MyAppTests/__Snapshots__/MyViewControllerTests/testMyViewController.png&#34;&lt;/p&gt; &#xA; &lt;p&gt;Re-run &#34;testMyViewController&#34; to test against the newly-recorded snapshot.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Repeat test runs will load this reference and compare it with the runtime value. If they don&#39;t match, the test will fail and describe the difference. Failures can be inspected from Xcode&#39;s Report Navigator or by inspecting the file URLs of the failure.&lt;/p&gt; &#xA;&lt;p&gt;You can record a new reference by setting the &lt;code&gt;record&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; on the assertion or setting &lt;code&gt;isRecording&lt;/code&gt; globally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: vc, as: .image, record: true)&#xA;&#xA;// or globally&#xA;&#xA;isRecording = true&#xA;assertSnapshot(matching: vc, as: .image)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Snapshot Anything&lt;/h2&gt; &#xA;&lt;p&gt;While most snapshot testing libraries in the Swift community are limited to &lt;code&gt;UIImage&lt;/code&gt;s of &lt;code&gt;UIView&lt;/code&gt;s, SnapshotTesting can work with &lt;em&gt;any&lt;/em&gt; format of &lt;em&gt;any&lt;/em&gt; value on &lt;em&gt;any&lt;/em&gt; Swift platform!&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;assertSnapshot&lt;/code&gt; function accepts a value and any snapshot strategy that value supports. This means that a &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#uiview&#34;&gt;view&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#uiviewcontroller&#34;&gt;view controller&lt;/a&gt; can be tested against an image representation &lt;em&gt;and&lt;/em&gt; against a textual representation of its properties and subview hierarchy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: vc, as: .image)&#xA;assertSnapshot(matching: vc, as: .recursiveDescription)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View testing is &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#uiviewcontroller&#34;&gt;highly configurable&lt;/a&gt;. You can override trait collections (for specific size classes and content size categories) and generate device-agnostic snapshots, all from a single simulator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: vc, as: .image(on: .iPhoneSe))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPhoneSe))&#xA;&#xA;assertSnapshot(matching: vc, as: .image(on: .iPhoneSe(.landscape)))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPhoneSe(.landscape)))&#xA;&#xA;assertSnapshot(matching: vc, as: .image(on: .iPhoneX))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPhoneX))&#xA;&#xA;assertSnapshot(matching: vc, as: .image(on: .iPadMini(.portrait)))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPadMini(.portrait)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Warning: Snapshots must be compared using the exact same simulator that originally took the reference to avoid discrepancies between images.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Better yet, SnapshotTesting isn&#39;t limited to views and view controllers! There are &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md&#34;&gt;a number of available snapshot strategies&lt;/a&gt; to choose from.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can snapshot test URL requests (&lt;em&gt;e.g.&lt;/em&gt;, those that your API client prepares).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: urlRequest, as: .raw)&#xA;// POST http://localhost:8080/account&#xA;// Cookie: pf_session={&#34;userId&#34;:&#34;1&#34;}&#xA;//&#xA;// email=blob%40pointfree.co&amp;amp;name=Blob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can snapshot test &lt;code&gt;Encodable&lt;/code&gt; values against their JSON &lt;em&gt;and&lt;/em&gt; property list representations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: user, as: .json)&#xA;// {&#xA;//   &#34;bio&#34; : &#34;Blobbed around the world.&#34;,&#xA;//   &#34;id&#34; : 1,&#xA;//   &#34;name&#34; : &#34;Blobby&#34;&#xA;// }&#xA;&#xA;assertSnapshot(matching: user, as: .plist)&#xA;// &amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;// &amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;// &amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;// &amp;lt;dict&amp;gt;&#xA;//   &amp;lt;key&amp;gt;bio&amp;lt;/key&amp;gt;&#xA;//   &amp;lt;string&amp;gt;Blobbed around the world.&amp;lt;/string&amp;gt;&#xA;//   &amp;lt;key&amp;gt;id&amp;lt;/key&amp;gt;&#xA;//   &amp;lt;integer&amp;gt;1&amp;lt;/integer&amp;gt;&#xA;//   &amp;lt;key&amp;gt;name&amp;lt;/key&amp;gt;&#xA;//   &amp;lt;string&amp;gt;Blobby&amp;lt;/string&amp;gt;&#xA;// &amp;lt;/dict&amp;gt;&#xA;// &amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In fact, &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#any&#34;&gt;any&lt;/a&gt;&lt;/em&gt; value can be snapshot-tested by default using its &lt;a href=&#34;https://developer.apple.com/documentation/swift/mirror&#34;&gt;mirror&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: user, as: .dump)&#xA;// ▿ User&#xA;//   - bio: &#34;Blobbed around the world.&#34;&#xA;//   - id: 1&#xA;//   - name: &#34;Blobby&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your data can be represented as an image, text, or data, you can write a snapshot test for it! Check out &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md&#34;&gt;all of the snapshot strategies&lt;/a&gt; that ship with SnapshotTesting and &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Defining-Custom-Snapshot-Strategies.md&#34;&gt;learn how to define your own custom strategies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Xcode&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Warning: By default, Xcode will try to add the SnapshotTesting package to your project&#39;s main application/framework target. Please ensure that SnapshotTesting is added to a &lt;em&gt;test&lt;/em&gt; target instead, as documented in the last step, below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, navigate through &lt;strong&gt;Swift Packages&lt;/strong&gt; and select &lt;strong&gt;Add Package Dependency…&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enter package repository URL: &lt;code&gt;https://github.com/pointfreeco/swift-snapshot-testing&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Confirm the version and let Xcode resolve the package&lt;/li&gt; &#xA; &lt;li&gt;On the final dialog, update SnapshotTesting&#39;s &lt;strong&gt;Add to Target&lt;/strong&gt; column to a test target that will contain snapshot tests (if you have more than one test target, you can later add SnapshotTesting to them by manually linking the library in its build phase)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use SnapshotTesting in any other project that uses &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;SwiftPM&lt;/a&gt;, add the package as a dependency in &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(&#xA;    url: &#34;https://github.com/pointfreeco/swift-snapshot-testing&#34;,&#xA;    from: &#34;1.10.0&#34;&#xA;  ),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add &lt;code&gt;SnapshotTesting&lt;/code&gt; as a dependency of your test target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;targets: [&#xA;  .target(name: &#34;MyApp&#34;),&#xA;  .testTarget(&#xA;    name: &#34;MyAppTests&#34;,&#xA;    dependencies: [&#xA;      &#34;MyApp&#34;,&#xA;      .product(name: &#34;SnapshotTesting&#34;, package: &#34;swift-snapshot-testing&#34;),&#xA;    ]&#xA;  )&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md&#34;&gt;&lt;strong&gt;Dozens of snapshot strategies&lt;/strong&gt;&lt;/a&gt;. Snapshot testing isn&#39;t just for &lt;code&gt;UIView&lt;/code&gt;s and &lt;code&gt;CALayer&lt;/code&gt;s. Write snapshots against &lt;em&gt;any&lt;/em&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Defining-Custom-Snapshot-Strategies.md&#34;&gt;&lt;strong&gt;Write your own snapshot strategies&lt;/strong&gt;&lt;/a&gt;. If you can convert it to an image, string, data, or your own diffable format, you can snapshot test it! Build your own snapshot strategies from scratch or transform existing ones.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No configuration required.&lt;/strong&gt; Don&#39;t fuss with scheme settings and environment variables. Snapshots are automatically saved alongside your tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;More hands-off.&lt;/strong&gt; New snapshots are recorded whether &lt;code&gt;isRecording&lt;/code&gt; mode is &lt;code&gt;true&lt;/code&gt; or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Subclass-free.&lt;/strong&gt; Assert from any XCTest case or Quick spec.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Device-agnostic snapshots.&lt;/strong&gt; Render views and view controllers for specific devices and trait collections from a single simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;First-class Xcode support.&lt;/strong&gt; Image differences are captured as XCTest attachments. Text differences are rendered in inline error messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supports any platform that supports Swift.&lt;/strong&gt; Write snapshot tests for iOS, Linux, macOS, and tvOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SceneKit, SpriteKit, and WebKit support.&lt;/strong&gt; Most snapshot testing libraries don&#39;t support these view subclasses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Codable&lt;/code&gt; support&lt;/strong&gt;. Snapshot encodable data structures into their &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#json&#34;&gt;JSON&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#plist&#34;&gt;property list&lt;/a&gt; representations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom diff tool integration&lt;/strong&gt;. Configure failure messages to print diff commands for &lt;a href=&#34;https://kaleidoscope.app&#34;&gt;Kaleidoscope&lt;/a&gt; (or your diff tool of choice). &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SnapshotTesting.diffTool = &#34;ksdiff&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plug-ins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Killectro/swift-snapshot-testing-nimble&#34;&gt;swift-snapshot-testing-nimble&lt;/a&gt; adds &lt;a href=&#34;https://github.com/Quick/Nimble&#34;&gt;Nimble&lt;/a&gt; matchers for SnapshotTesting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-html&#34;&gt;swift-html&lt;/a&gt; is a Swift DSL for type-safe, extensible, and transformable HTML documents and includes an &lt;code&gt;HtmlSnapshotTesting&lt;/code&gt; module to snapshot test its HTML documents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/SebastianOsinski/GRDBSnapshotTesting&#34;&gt;GRDBSnapshotTesting&lt;/a&gt; adds snapshot strategy for testing SQLite database migrations made with &lt;a href=&#34;https://github.com/groue/GRDB.swift&#34;&gt;GRDB&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cashapp/AccessibilitySnapshot&#34;&gt;AccessibilitySnapshot&lt;/a&gt; adds easy regression testing for iOS accessibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Sherlouk/AccessibilitySnapshotColorBlindness&#34;&gt;AccessibilitySnapshotColorBlindness&lt;/a&gt; adds snapshot strategies for color blindness simulation on iOS views, view controllers and images.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Sherlouk/swift-snapshot-testing-stitch/&#34;&gt;swift-snapshot-testing-stitch&lt;/a&gt; adds the ability to stitch multiple UIView&#39;s or UIViewController&#39;s together in a single test.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/alexey1312/SnapshotTestingHEIC&#34;&gt;SnapshotTestingHEIC&lt;/a&gt; adds image support using the HEIC storage format which reduces file sizes in comparison to PNG.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have you written your own SnapshotTesting plug-in? &lt;a href=&#34;https://github.com/pointfreeco/swift-snapshot-testing/edit/master/README.md&#34;&gt;Add it here&lt;/a&gt; and submit a pull request!&lt;/p&gt; &#xA;&lt;h2&gt;Related Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/&#34;&gt;&lt;code&gt;iOSSnapshotTestCase&lt;/code&gt;&lt;/a&gt; helped introduce screen shot testing to a broad audience in the iOS community. Experience with it inspired the creation of this library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://jestjs.io&#34;&gt;Jest&lt;/a&gt; brought generalized snapshot testing to the JavaScript community with a polished user experience. Several features of this library (diffing, automatically capturing new snapshots) were directly influenced.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;SnapshotTesting was designed with &lt;a href=&#34;https://www.pointfree.co/episodes/ep39-witness-oriented-library-design&#34;&gt;witness-oriented programming&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This concept (and more) are explored thoroughly in a series of episodes on &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt;, a video series exploring functional programming and Swift hosted by &lt;a href=&#34;https://twitter.com/mbrandonw&#34;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Witness-oriented programming and the design of this library was explored in the following &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt; episodes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep33-protocol-witnesses-part-1&#34;&gt;Episode 33&lt;/a&gt;: Protocol Witnesses: Part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep34-protocol-witnesses-part-1&#34;&gt;Episode 34&lt;/a&gt;: Protocol Witnesses: Part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep35-advanced-protocol-witnesses-part-1&#34;&gt;Episode 35&lt;/a&gt;: Advanced Protocol Witnesses: Part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep36-advanced-protocol-witnesses-part-2&#34;&gt;Episode 36&lt;/a&gt;: Advanced Protocol Witnesses: Part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep37-protocol-oriented-library-design-part-1&#34;&gt;Episode 37&lt;/a&gt;: Protocol-Oriented Library Design: Part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep38-protocol-oriented-library-design-part-2&#34;&gt;Episode 38&lt;/a&gt;: Protocol-Oriented Library Design: Part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep39-witness-oriented-library-design&#34;&gt;Episode 39&lt;/a&gt;: Witness-Oriented Library Design&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep40-async-functional-refactoring&#34;&gt;Episode 40&lt;/a&gt;: Async Functional Refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing&#34;&gt;Episode 41&lt;/a&gt;: A Tour of Snapshot Testing 🆓&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing&#34;&gt; &lt;img alt=&#34;video poster image&#34; src=&#34;https://d3rccdn33rt8ze.cloudfront.net/episodes/0041.jpeg&#34; width=&#34;480&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hackiftekhar/IQKeyboardManager</title>
    <updated>2022-10-01T02:03:43Z</updated>
    <id>tag:github.com,2022-10-01:/hackiftekhar/IQKeyboardManager</id>
    <link href="https://github.com/hackiftekhar/IQKeyboardManager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Codeless drop-in universal library allows to prevent issues of keyboard sliding up and cover UITextField/UITextView. Neither need to write any code nor any setup required and much more.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Demo/Resources/icon.png&#34; alt=&#34;Icon&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;IQKeyboardManager&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/hackiftekhar/IQKeyboardManager.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hackiftekhar/IQKeyboardManager&#34;&gt;&lt;img src=&#34;https://travis-ci.org/hackiftekhar/IQKeyboardManager.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;While developing iOS apps, we often run into issues where the iPhone keyboard slides up and covers the &lt;code&gt;UITextField/UITextView&lt;/code&gt;. &lt;code&gt;IQKeyboardManager&lt;/code&gt; allows you to prevent this issue of keyboard sliding up and covering &lt;code&gt;UITextField/UITextView&lt;/code&gt; without needing you to write any code or make any additional setup. To use &lt;code&gt;IQKeyboardManager&lt;/code&gt; you simply need to add source files to your project.&lt;/p&gt; &#xA;&lt;h4&gt;Key Features&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;**CODELESS**, Zero Lines of Code&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Works Automatically&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More UIScrollView&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More Subclasses&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More Manual Work&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More #imports&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;IQKeyboardManager&lt;/code&gt; works on all orientations, and with the toolbar. It also has nice optional features allowing you to customize the distance from the text field, behaviour of previous, next and done buttons in the keyboard toolbar, play sound when the user navigates through the form and more.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://youtu.be/6nhLw6hju2A&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManagerScreenshot.png&#34; alt=&#34;IQKeyboardManager&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://youtu.be/6nhLw6hju2A&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManagerSettings.png&#34; alt=&#34;Settings&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GIF animation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://youtu.be/6nhLw6hju2A&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManager.gif&#34; alt=&#34;IQKeyboardManager&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://youtu.be/WAYc2Qj-OQg&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/WAYc2Qj-OQg/0.jpg&#34; alt=&#34;IQKeyboardManager Demo Video&#34; width=&#34;480&#34; height=&#34;360&#34; border=&#34;10&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial video by @rebeloper (&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/issues/1135&#34;&gt;#1135&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;@rebeloper demonstrated two videos on how to implement &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; at it&#39;s core:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL_csAAO9PQ8aTL87XnueOXi3RpWE2m_8v&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Screenshot/ThirdPartyYoutubeTutorial.jpg&#34; alt=&#34;Youtube Tutorial Playlist&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL_csAAO9PQ8aTL87XnueOXi3RpWE2m_8v&#34;&gt;https://www.youtube.com/playlist?list=PL_csAAO9PQ8aTL87XnueOXi3RpWE2m_8v&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If you&#39;re planning to build SDK/library/framework and want to handle UITextField/UITextView with IQKeyboardManager then you&#39;re totally going the wrong way.&lt;/strong&gt; I would never suggest to add &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; as &lt;strong&gt;dependency/adding/shipping&lt;/strong&gt; with any third-party library. Instead of adding &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; you should implement your own solution to achieve same kind of results. &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; is totally designed for projects to help developers for their convenience, it&#39;s not designed for &lt;strong&gt;adding/dependency/shipping&lt;/strong&gt; with any &lt;strong&gt;third-party library&lt;/strong&gt;, because &lt;strong&gt;doing this could block adoption by other developers for their projects as well (who are not using IQKeyboardManager and have implemented their custom solution to handle UITextField/UITextView in the project).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;If &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; conflicts with other &lt;strong&gt;third-party library&lt;/strong&gt;, then it&#39;s &lt;strong&gt;developer responsibility&lt;/strong&gt; to &lt;strong&gt;enable/disable IQKeyboardManager&lt;/strong&gt; when &lt;strong&gt;presenting/dismissing&lt;/strong&gt; third-party library UI. Third-party libraries are not responsible to handle IQKeyboardManager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-iOS-blue.svg?style=fla&#34; alt=&#34;Platform iOS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Minimum iOS Target&lt;/th&gt; &#xA;   &lt;th&gt;Minimum Xcode Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IQKeyboardManager&lt;/td&gt; &#xA;   &lt;td&gt;Obj-C&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8.0&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IQKeyboardManagerSwift&lt;/td&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8.0&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Demo Project&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Swift versions support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Xcode&lt;/th&gt; &#xA;   &lt;th&gt;IQKeyboardManagerSwift&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.1, 5.0, 4.2, 4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 6.5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.0,4.2, 4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;10.2&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 6.2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.2, 4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;10.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 6.0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;9.0&lt;/td&gt; &#xA;   &lt;td&gt;5.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h4&gt;Installation with CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/IQKeyboardManager&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/IQKeyboardManager.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Objective-C):&lt;/strong&gt;&lt;/em&gt; IQKeyboardManager is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile: (&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/issues/9&#34;&gt;#9&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IQKeyboardManager&#39; #iOS8 and later&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Swift):&lt;/strong&gt;&lt;/em&gt; IQKeyboardManagerSwift is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile: (&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/issues/236&#34;&gt;#236&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Swift 5.1, 5.0, 4.2, 4.0, 3.2, 3.0 (Xcode 11)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IQKeyboardManagerSwift&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Or you can choose the version you need based on Swift support table from &lt;a href=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/README.md#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IQKeyboardManagerSwift&#39;, &#39;6.3.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In AppDelegate.swift, just import IQKeyboardManagerSwift framework and enable IQKeyboardManager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import IQKeyboardManagerSwift&#xA;&#xA;@UIApplicationMain&#xA;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;&#xA;    var window: UIWindow?&#xA;&#xA;    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;&#xA;      IQKeyboardManager.shared.enable = true&#xA;&#xA;      return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installation with Carthage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate &lt;code&gt;IQKeyboardManger&lt;/code&gt; or &lt;code&gt;IQKeyboardManagerSwift&lt;/code&gt; into your Xcode project using Carthage, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;hackiftekhar/IQKeyboardManager&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage&lt;/code&gt; to build the frameworks and drag the appropriate framework (&lt;code&gt;IQKeyboardManager.framework&lt;/code&gt; or &lt;code&gt;IQKeyboardManagerSwift.framework&lt;/code&gt;) into your Xcode project based on your need. Make sure to add only one framework and not both.&lt;/p&gt; &#xA;&lt;h4&gt;Installation with Source Code&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/hackiftekhar/iqkeyboardmanager.svg?sanitize=true&#34; alt=&#34;Github tag&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Objective-C):&lt;/strong&gt;&lt;/em&gt; Just &lt;em&gt;&lt;strong&gt;drag and drop&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;IQKeyboardManager&lt;/code&gt; directory from demo project to your project. That&#39;s it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Swift):&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;&lt;strong&gt;Drag and drop&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;IQKeyboardManagerSwift&lt;/code&gt; directory from demo project to your project&lt;/p&gt; &#xA;&lt;p&gt;In AppDelegate.swift, just enable IQKeyboardManager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@UIApplicationMain&#xA;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;&#xA;    var window: UIWindow?&#xA;&#xA;    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;&#xA;      IQKeyboardManager.shared.enable = true&#xA;&#xA;      return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installation with Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager(SPM)&lt;/a&gt; is Apple&#39;s dependency manager tool. It is now supported in Xcode 11. So it can be used in all appleOS types of projects. It can be used alongside other tools like CocoaPods and Carthage as well.&lt;/p&gt; &#xA;&lt;p&gt;To install IQKeyboardManager package into your packages, add a reference to IQKeyboardManager and a targeting release version in the dependencies section in &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;YOUR_PROJECT_NAME&#34;,&#xA;    products: [],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/hackiftekhar/IQKeyboardManager.git&#34;, from: &#34;6.5.0&#34;)&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install IQKeyboardManager package via Xcode&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency...&lt;/li&gt; &#xA; &lt;li&gt;Then search for &lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager.git&#34;&gt;https://github.com/hackiftekhar/IQKeyboardManager.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And choose the version you want&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Migration Guide&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/IQKeyboardManager-6.0.0-Migration-Guide&#34;&gt;IQKeyboardManager 6.0.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/Known-Issues&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/Manual-Management&#34;&gt;Manual Management Tweaks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/Properties-&amp;amp;-Functions&#34;&gt;Properties and functions usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flow Diagram&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Screenshot/IQKeyboardManagerFlowDiagram.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Screenshot/IQKeyboardManagerFlowDiagram.jpg&#34; alt=&#34;IQKeyboardManager CFD&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to see detailed Flow diagram then check &lt;a href=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManagerCFD.jpg&#34;&gt;Detailed Flow Diagram&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Any contribution is more than welcome! You can contribute through pull requests and issues on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to contact me, email at: &lt;a href=&#34;mailto:hack.iftekhar@gmail.com&#34;&gt;hack.iftekhar@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>