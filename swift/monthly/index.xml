<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-01T02:13:34Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kishikawakatsumi/KeychainAccess</title>
    <updated>2024-04-01T02:13:34Z</updated>
    <id>tag:github.com,2024-04-01:/kishikawakatsumi/KeychainAccess</id>
    <link href="https://github.com/kishikawakatsumi/KeychainAccess" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Swift wrapper for Keychain that works on iOS, watchOS, tvOS and macOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KeychainAccess&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/kishikawakatsumi/KeychainAccess&#34;&gt;&lt;img src=&#34;https://travis-ci.com/kishikawakatsumi/KeychainAccess.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&#34; alt=&#34;SPM supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/KeychainAccess&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/KeychainAccess.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/KeychainAccess&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/KeychainAccess.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;KeychainAccess is a simple Swift wrapper for Keychain that works on iOS and macOS. Makes using Keychain APIs extremely easy and much more palatable to use in Swift.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kishikawakatsumi/KeychainAccess/assets/40610/4de4aae1-6fc1-4477-af6d-afbe6d164da0&#34; width=&#34;320px&#34;&gt; &lt;img src=&#34;https://github.com/kishikawakatsumi/KeychainAccess/assets/40610/2980ea84-862b-4067-b9b7-90de629171b9&#34; width=&#34;320px&#34;&gt; &lt;img src=&#34;https://github.com/kishikawakatsumi/KeychainAccess/assets/40610/3299347d-eb1b-446c-921c-778fa493f818&#34; width=&#34;320px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;💡&lt;/span&gt; Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple interface&lt;/li&gt; &#xA; &lt;li&gt;Support access group&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#accessibility&#34;&gt;Support accessibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#icloud_sharing&#34;&gt;Support iCloud sharing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#touch_id_integration&#34;&gt;Support TouchID and Keychain integration (iOS 8+)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#shared_web_credentials&#34;&gt;Support Shared Web Credentials (iOS 8+)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;Works on both iOS &amp;amp; macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;watchOS and tvOS are supported&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;Mac Catalyst is supported&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;Swift 3, 4 and 5 compatible&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;📖&lt;/span&gt; Usage&lt;/h2&gt; &#xA;&lt;h5&gt;&lt;span&gt;👀&lt;/span&gt; See also:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kishikawakatsumi/KeychainAccess/tree/master/Examples/Example-iOS&#34;&gt;&lt;span&gt;🔗&lt;/span&gt; iOS Example Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Basics&lt;/h3&gt; &#xA;&lt;h4&gt;Saving Application Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Saving Internet Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Instantiation&lt;/h3&gt; &#xA;&lt;h4&gt;Create Keychain for Application Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;, accessGroup: &#34;12ABCD3E4F.shared&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create Keychain for Internet Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https, authenticationType: .htmlForm)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Adding an item&lt;/h3&gt; &#xA;&lt;h4&gt;subscripting&lt;/h4&gt; &#xA;&lt;h5&gt;for String&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[string: &#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;for NSData&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[data: &#34;secret&#34;] = NSData(contentsOfFile: &#34;secret.bin&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;set method&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain.set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;error handling&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try keychain.set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;}&#xA;catch let error {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Obtaining an item&lt;/h3&gt; &#xA;&lt;h4&gt;subscripting&lt;/h4&gt; &#xA;&lt;h5&gt;for String (If the value is NSData, attempt to convert to String)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = keychain[&#34;kishikawakatsumi&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = keychain[string: &#34;kishikawakatsumi&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;for NSData&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let secretData = keychain[data: &#34;secret&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;get methods&lt;/h4&gt; &#xA;&lt;h5&gt;as String&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = try? keychain.get(&#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = try? keychain.getString(&#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;as NSData&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let data = try? keychain.getData(&#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Removing an item&lt;/h3&gt; &#xA;&lt;h4&gt;subscripting&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[&#34;kishikawakatsumi&#34;] = nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;remove method&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try keychain.remove(&#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Set Label and Comment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;do {&#xA;    try keychain&#xA;        .label(&#34;github.com (kishikawakatsumi)&#34;)&#xA;        .comment(&#34;github access token&#34;)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Obtaining Other Attributes&lt;/h3&gt; &#xA;&lt;h4&gt;PersistentRef&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;let persistentRef = keychain[attributes: &#34;kishikawakatsumi&#34;]?.persistentRef&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Creation Date&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;let creationDate = keychain[attributes: &#34;kishikawakatsumi&#34;]?.creationDate&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;All Attributes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;do {&#xA;    let attributes = try keychain.get(&#34;kishikawakatsumi&#34;) { $0 }&#xA;    print(attributes?.comment)&#xA;    print(attributes?.label)&#xA;    print(attributes?.creator)&#xA;    ...&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;subscripting&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;if let attributes = keychain[attributes: &#34;kishikawakatsumi&#34;] {&#xA;    print(attributes.comment)&#xA;    print(attributes.label)&#xA;    print(attributes.creator)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Configuration (Accessibility, Sharing, iCloud Sync)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Provides fluent interfaces&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .label(&#34;github.com (kishikawakatsumi)&#34;)&#xA;    .synchronizable(true)&#xA;    .accessibility(.afterFirstUnlock)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;accessibility&#34;&gt; Accessibility&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;a name=&#34;accessibility&#34;&gt; &lt;h5&gt;Default accessibility matches background application (=kSecAttrAccessibleAfterFirstUnlock)&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h5&gt;For background application&lt;/h5&gt; &lt;h6&gt;Creating instance&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .accessibility(.afterFirstUnlock)&#xA;&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;One-shot&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain&#xA;        .accessibility(.afterFirstUnlock)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h5&gt;For foreground application&lt;/h5&gt; &lt;h6&gt;Creating instance&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .accessibility(.whenUnlocked)&#xA;&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;One-shot&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain&#xA;        .accessibility(.whenUnlocked)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;👫&lt;/span&gt; Sharing Keychain items&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;, accessGroup: &#34;12ABCD3E4F.shared&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h4&gt;&lt;a name=&#34;accessibility&#34;&gt;&lt;/a&gt;&lt;a name=&#34;icloud_sharing&#34;&gt; &lt;span&gt;🔄&lt;/span&gt; Synchronizing Keychain items with iCloud&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;a name=&#34;icloud_sharing&#34;&gt; &lt;h6&gt;Creating instance&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .synchronizable(true)&#xA;&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;One-shot&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain&#xA;        .synchronizable(true)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a name=&#34;icloud_sharing&#34;&gt;&lt;/a&gt;&lt;a name=&#34;touch_id_integration&#34;&gt; &lt;span&gt;🌀&lt;/span&gt; Touch ID (Face ID) integration&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a name=&#34;touch_id_integration&#34;&gt; &lt;p&gt;&lt;strong&gt;Any Operation that require authentication must be run in the background thread.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;If you run in the main thread, UI thread will lock for the system to try to display the authentication dialog.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;To use Face ID, add &lt;code&gt;NSFaceIDUsageDescription&lt;/code&gt; key to your &lt;code&gt;Info.plist&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Adding a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;If you want to store the Touch ID protected Keychain item, specify &lt;code&gt;accessibility&lt;/code&gt; and &lt;code&gt;authenticationPolicy&lt;/code&gt; attributes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;DispatchQueue.global().async {&#xA;    do {&#xA;        // Should be the secret invalidated when passcode is removed? If not then use `.WhenUnlocked`&#xA;        try keychain&#xA;            .accessibility(.whenPasscodeSetThisDeviceOnly, authenticationPolicy: [.biometryAny])&#xA;            .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;    } catch let error {&#xA;        // Error handling if needed...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Updating a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;The same way as when adding.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Do not run in the main thread if there is a possibility that the item you are trying to add already exists, and protected.&lt;/strong&gt; &lt;strong&gt;Because updating protected items requires authentication.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Additionally, you want to show custom authentication prompt message when updating, specify an &lt;code&gt;authenticationPrompt&lt;/code&gt; attribute. If the item not protected, the &lt;code&gt;authenticationPrompt&lt;/code&gt; parameter just be ignored.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;DispatchQueue.global().async {&#xA;    do {&#xA;        // Should be the secret invalidated when passcode is removed? If not then use `.WhenUnlocked`&#xA;        try keychain&#xA;            .accessibility(.whenPasscodeSetThisDeviceOnly, authenticationPolicy: [.biometryAny])&#xA;            .authenticationPrompt(&#34;Authenticate to update your access token&#34;)&#xA;            .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;    } catch let error {&#xA;        // Error handling if needed...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Obtaining a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;The same way as when you get a normal item. It will be displayed automatically Touch ID or passcode authentication If the item you try to get is protected.&lt;br&gt; If you want to show custom authentication prompt message, specify an &lt;code&gt;authenticationPrompt&lt;/code&gt; attribute. If the item not protected, the &lt;code&gt;authenticationPrompt&lt;/code&gt; parameter just be ignored.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;DispatchQueue.global().async {&#xA;    do {&#xA;        let password = try keychain&#xA;            .authenticationPrompt(&#34;Authenticate to login to server&#34;)&#xA;            .get(&#34;kishikawakatsumi&#34;)&#xA;&#xA;        print(&#34;password: \(password)&#34;)&#xA;    } catch let error {&#xA;        // Error handling if needed...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Removing a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;The same way as when you remove a normal item. There is no way to show Touch ID or passcode authentication when removing Keychain items.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain.remove(&#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    // Error handling if needed...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a name=&#34;touch_id_integration&#34;&gt;&lt;/a&gt;&lt;a name=&#34;shared_web_credentials&#34;&gt; &lt;span&gt;🔑&lt;/span&gt; Shared Web Credentials&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a name=&#34;shared_web_credentials&#34;&gt; &lt;/a&gt;&#xA;&lt;blockquote&gt;&#xA; &lt;a name=&#34;shared_web_credentials&#34;&gt; &lt;p&gt;Shared web credentials is a programming interface that enables native iOS apps to share credentials with their website counterparts. For example, a user may log in to a website in Safari, entering a user name and password, and save those credentials using the iCloud Keychain. Later, the user may run a native app from the same developer, and instead of the app requiring the user to reenter a user name and password, shared web credentials gives it access to the credentials that were entered earlier in Safari. The user can also create new accounts, update passwords, or delete her account from within the app. These changes are then saved and used by Safari.&lt;br&gt; &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&#34;&gt;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&lt;/a&gt;&lt;/p&gt;&lt;/a&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://www.kishikawakatsumi.com&#34;, protocolType: .HTTPS)&#xA;&#xA;let username = &#34;kishikawakatsumi@mac.com&#34;&#xA;&#xA;// First, check the credential in the app&#39;s Keychain&#xA;if let password = try? keychain.get(username) {&#xA;    // If found password in the Keychain,&#xA;    // then log into the server&#xA;} else {&#xA;    // If not found password in the Keychain,&#xA;    // try to read from Shared Web Credentials&#xA;    keychain.getSharedPassword(username) { (password, error) -&amp;gt; () in&#xA;        if password != nil {&#xA;            // If found password in the Shared Web Credentials,&#xA;            // then log into the server&#xA;            // and save the password to the Keychain&#xA;&#xA;            keychain[username] = password&#xA;        } else {&#xA;            // If not found password either in the Keychain also Shared Web Credentials,&#xA;            // prompt for username and password&#xA;&#xA;            // Log into server&#xA;&#xA;            // If the login is successful,&#xA;            // save the credentials to both the Keychain and the Shared Web Credentials.&#xA;&#xA;            keychain[username] = inputPassword&#xA;            keychain.setSharedPassword(inputPassword, account: username)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Request all associated domain&#39;s credentials&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Keychain.requestSharedWebCredential { (credentials, error) -&amp;gt; () in&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generate strong random password&lt;/h4&gt; &#xA;&lt;p&gt;Generate strong random password that is in the same format used by Safari autofill (xxx-xxx-xxx-xxx).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password = Keychain.generatePassword() // =&amp;gt; Nhu-GKm-s3n-pMx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to set up Shared Web Credentials&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add a com.apple.developer.associated-domains entitlement to your app. This entitlement must include all the domains with which you want to share credentials.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add an apple-app-site-association file to your website. This file must include application identifiers for all the apps with which the site wants to share credentials, and it must be properly signed.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;When the app is installed, the system downloads and verifies the site association file for each of its associated domains. If the verification is successful, the app is associated with the domain.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;More details:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&#34;&gt;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔍&lt;/span&gt; Debugging&lt;/h3&gt; &#xA;&lt;h4&gt;Display all stored items if print keychain object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;print(&#34;\(keychain)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt;&#xA;[&#xA;  [authenticationType: default, key: kishikawakatsumi, server: github.com, class: internetPassword, protocol: https]&#xA;  [authenticationType: default, key: hirohamada, server: github.com, class: internetPassword, protocol: https]&#xA;  [authenticationType: default, key: honeylemon, server: github.com, class: internetPassword, protocol: https]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Obtaining all stored keys&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;&#xA;let keys = keychain.allKeys()&#xA;for key in keys {&#xA;  print(&#34;key: \(key)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt;&#xA;key: kishikawakatsumi&#xA;key: hirohamada&#xA;key: honeylemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Obtaining all stored items&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;&#xA;let items = keychain.allItems()&#xA;for item in items {&#xA;  print(&#34;item: \(item)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt;&#xA;item: [authenticationType: Default, key: kishikawakatsumi, server: github.com, class: InternetPassword, protocol: https]&#xA;item: [authenticationType: Default, key: hirohamada, server: github.com, class: InternetPassword, protocol: https]&#xA;item: [authenticationType: Default, key: honeylemon, server: github.com, class: InternetPassword, protocol: https]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keychain sharing capability&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter the error below, you need to add an &lt;code&gt;Keychain.entitlements&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OSStatus error:[-34018] Internal error when a required entitlement isn&#39;t present, client has neither application-identifier nor keychain-access-groups entitlements.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Screen Shot 2019-10-27 at 8 08 50&#34; src=&#34;https://user-images.githubusercontent.com/40610/67627108-1a7f2f80-f891-11e9-97bc-7f7313cb63d1.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/40610/67627072-333b1580-f890-11e9-9feb-bf507abc2724.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v1.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+&lt;/td&gt; &#xA;   &lt;td&gt;1.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v1.2.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+&lt;/td&gt; &#xA;   &lt;td&gt;1.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.0.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+, watchOS 2+&lt;/td&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+, watchOS 2+&lt;/td&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.2.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;2.0, 2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.3.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;2.0, 2.1, 2.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.4.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;2.2, 2.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v3.0.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;3.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v3.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v3.2.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2, 5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v4.0.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2, 5.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v4.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 3+, tvOS 9+, Mac Catalyst 13+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2, 5.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;KeychainAccess is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following lines to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;pod &#39;KeychainAccess&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;KeychainAccess is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. To install it, simply add the following line to your Cartfile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;github &#34;kishikawakatsumi/KeychainAccess&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;KeychainAccess is also available through &lt;a href=&#34;https://github.com/apple/swift-package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Xcode&lt;/h4&gt; &#xA;&lt;p&gt;Select &lt;code&gt;File &amp;gt; Add Packages... &amp;gt; Add Package Dependency...&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/40610/67627000-2833b580-f88f-11e9-89ef-18819b1a6c67.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;h4&gt;CLI&lt;/h4&gt; &#xA;&lt;p&gt;First, create &lt;code&gt;Package.swift&lt;/code&gt; that its package declaration includes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.0&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyLibrary&#34;,&#xA;    products: [&#xA;        .library(name: &#34;MyLibrary&#34;, targets: [&#34;MyLibrary&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/kishikawakatsumi/KeychainAccess.git&#34;, from: &#34;3.0.0&#34;),&#xA;    ],&#xA;    targets: [&#xA;        .target(name: &#34;MyLibrary&#34;, dependencies: [&#34;KeychainAccess&#34;]),&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To manually add to your project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;Lib/KeychainAccess.xcodeproj&lt;/code&gt; to your project&lt;/li&gt; &#xA; &lt;li&gt;Link &lt;code&gt;KeychainAccess.framework&lt;/code&gt; with your target&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;Copy Files Build Phase&lt;/code&gt; to include the framework to your application bundle&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://github.com/kishikawakatsumi/KeychainAccess/tree/master/Examples/Example-iOS&#34;&gt;iOS Example Project&lt;/a&gt; as reference.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/kishikawakatsumi/KeychainAccess/assets/40610/b7a46cfb-714d-47d5-84ea-6a80f640e03d&#34; width=&#34;800px&#34;&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;kishikawa katsumi, &lt;a href=&#34;mailto:kishikawakatsumi@mac.com&#34;&gt;kishikawakatsumi@mac.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KeychainAccess is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DevToys-app/DevToysMac</title>
    <updated>2024-04-01T02:13:34Z</updated>
    <id>tag:github.com,2024-04-01:/DevToys-app/DevToysMac</id>
    <link href="https://github.com/DevToys-app/DevToysMac" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DevToys For mac&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DevToysMac&lt;/h1&gt; &#xA;&lt;p&gt;This is the mac app version of &lt;a href=&#34;https://github.com/veler/DevToys&#34;&gt;DevToys for Windows&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/20896810/154781951-f4c6fa80-2fcc-40fe-a94b-fccfc0f2ccf1.png&#34; alt=&#34;Dribbble Shot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to install&lt;/h1&gt; &#xA;&lt;h2&gt;Manually&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://github.com/ObuchiYuki/DevToysMac/releases/latest&#34;&gt;latest release&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract &lt;code&gt;DevToys.app&lt;/code&gt; from &lt;code&gt;DevToys.app.zip&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Homebrew&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. Then install DevToysMac with &lt;code&gt;brew install --cask devtoys&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;h3&gt;Home&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 01 01&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695286-7984d264-e590-43b8-9ed7-03853967b0e4.png&#34;&gt; &#xA;&lt;h3&gt;Json &amp;lt;&amp;gt; Yaml Converter&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 01 23&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695289-cf2a4c2f-8ca9-4537-a896-5fc944b706ac.png&#34;&gt; &#xA;&lt;h3&gt;Number Base Converter&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 01 41&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695294-88c629d9-514f-4966-a174-1fcec9c29185.png&#34;&gt; &#xA;&lt;h3&gt;HTML Encoder / Decoder&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 02 05&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695300-e0dccd31-b3ac-42e6-904d-d287e56e4e63.png&#34;&gt; &#xA;&lt;h3&gt;URL Encoder / Decoder&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 02 11&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695305-a88c6106-3086-4289-bd61-8670cd1d1bac.png&#34;&gt; &#xA;&lt;h3&gt;Base64 Encoder / Decoder&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 02 49&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695317-a821fc62-64b6-4e09-a7dc-cb661f10ee7d.png&#34;&gt; &#xA;&lt;h3&gt;JSON Formatter&lt;/h3&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;スクリーンショット 2022-01-30 19 04 43&#34; src=&#34;https://user-images.githubusercontent.com/20896810/151695321-f996ddc7-27d3-457e-8086-d40848ce8d68.png&#34;&gt; &#xA;&lt;p&gt;and more...&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Moya/Moya</title>
    <updated>2024-04-01T02:13:34Z</updated>
    <id>tag:github.com,2024-04-01:/Moya/Moya</id>
    <link href="https://github.com/Moya/Moya" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Network abstraction layer written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;160&#34; src=&#34;https://raw.githubusercontent.com/Moya/Moya/master/web/logo_github.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Moya 15.0.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/Moya/Moya/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/Moya/Moya/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/Moya/Moya?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/Moya/Moya/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Moya&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Moya.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A Chinese version of this document can be found &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Readme_CN.md&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re a smart developer. You probably use &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; to abstract away access to &lt;code&gt;URLSession&lt;/code&gt; and all those nasty details you don&#39;t really care about. But then, like lots of smart developers, you write ad hoc network abstraction layers. They are probably called &#34;APIManager&#34; or &#34;NetworkModel&#34;, and they always end in tears.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Moya/Moya/master/web/diagram.png&#34; alt=&#34;Moya Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ad hoc network layers are common in iOS apps. They&#39;re bad for a few reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Makes it hard to write new apps (&#34;where do I begin?&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Makes it hard to maintain existing apps (&#34;oh my god, this mess...&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Makes it hard to write unit tests (&#34;how do I do this again?&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So the basic idea of Moya is that we want some network abstraction layer that sufficiently encapsulates actually calling Alamofire directly. It should be simple enough that common things are easy, but comprehensive enough that complicated things are also easy.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you use Alamofire to abstract away &lt;code&gt;URLSession&lt;/code&gt;, why not use something to abstract away the nitty gritty of URLs, parameters, etc?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some awesome features of Moya:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile-time checking for correct API endpoint accesses.&lt;/li&gt; &#xA; &lt;li&gt;Lets you define a clear usage of different endpoints with associated enum values.&lt;/li&gt; &#xA; &lt;li&gt;Treats test stubs as first-class citizens so unit testing is super-easy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can check out more about the project direction in the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Vision.md&#34;&gt;vision document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Projects&lt;/h2&gt; &#xA;&lt;p&gt;We have provided two sample projects in the repository. To use it download the repo, run &lt;code&gt;carthage update&lt;/code&gt; to download the required libraries and open &lt;a href=&#34;https://github.com/Moya/Moya/tree/master/Moya.xcodeproj&#34;&gt;Moya.xcodeproj&lt;/a&gt;. You&#39;ll see two schemes: &lt;code&gt;Basic&lt;/code&gt; and &lt;code&gt;Multi-Target&lt;/code&gt; - select one and then build &amp;amp; run! Source files for these are in the &lt;code&gt;Examples&lt;/code&gt; directory in project navigator. Have fun!&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is actively under development, and is being used in &lt;a href=&#34;https://github.com/Artsy/eidolon&#34;&gt;Artsy&#39;s auction app&lt;/a&gt;. We consider it ready for production use.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Moya version vs Swift version.&lt;/h3&gt; &#xA;&lt;p&gt;Below is a table that shows which version of Moya you should use for your Swift version.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Moya&lt;/th&gt; &#xA;   &lt;th&gt;RxMoya&lt;/th&gt; &#xA;   &lt;th&gt;ReactiveMoya&lt;/th&gt; &#xA;   &lt;th&gt;RxSwift&lt;/th&gt; &#xA;   &lt;th&gt;ReactiveSwift&lt;/th&gt; &#xA;   &lt;th&gt;Alamofire&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;= 5.2&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 15.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 15.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 15.0.0&lt;/td&gt; &#xA;   &lt;td&gt;6.X&lt;/td&gt; &#xA;   &lt;td&gt;6.X&lt;/td&gt; &#xA;   &lt;td&gt;5.X&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.X&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 14.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 14.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 14.0.0&lt;/td&gt; &#xA;   &lt;td&gt;5.X&lt;/td&gt; &#xA;   &lt;td&gt;6.X&lt;/td&gt; &#xA;   &lt;td&gt;5.X&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.X&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;4.X&lt;/td&gt; &#xA;   &lt;td&gt;5.X&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 4.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.X&lt;/td&gt; &#xA;   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;10.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;4.X(&amp;gt;= 10.0.0)&lt;/td&gt; &#xA;   &lt;td&gt;4.X(&amp;gt;= 12.0.0)&lt;/td&gt; &#xA;   &lt;td&gt;4.1(&amp;gt;= 11.0.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.X&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.3&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.2&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: If you are using Swift 4.2 in your project, but you are using Xcode 10.2, Moya 13 should work correctly even though we use Swift 5.0.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Upgrading to a new major version of Moya? Check out our &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/MigrationGuides&#34;&gt;migration guides&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Instructions below are for using &lt;strong&gt;SwiftPM&lt;/strong&gt; without the Xcode UI. It&#39;s the easiest to go to your Project Settings -&amp;gt; Swift Packages and add Moya from there.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To integrate using Apple&#39;s Swift package manager, without Xcode integration, add the following as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/Moya/Moya.git&#34;, .upToNextMajor(from: &#34;15.0.0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then specify &lt;code&gt;&#34;Moya&#34;&lt;/code&gt; as a dependency of the Target in which you wish to use Moya. If you want to use reactive extensions, add also &lt;code&gt;&#34;ReactiveMoya&#34;&lt;/code&gt;, &lt;code&gt;&#34;RxMoya&#34;&lt;/code&gt; or &lt;code&gt;&#34;CombineMoya&#34;&lt;/code&gt; as your target dependency respectively. Here&#39;s an example &lt;code&gt;PackageDescription&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.3&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyPackage&#34;,&#xA;    products: [&#xA;        .library(&#xA;            name: &#34;MyPackage&#34;,&#xA;            targets: [&#34;MyPackage&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/Moya/Moya.git&#34;, .upToNextMajor(from: &#34;15.0.0&#34;))&#xA;    ],&#xA;    targets: [&#xA;        .target(&#xA;            name: &#34;MyPackage&#34;,&#xA;            dependencies: [&#34;ReactiveMoya&#34;])&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Combine note: if you&#39;re using &lt;strong&gt;CombineMoya&lt;/strong&gt;, make sure that you use Xcode 11.5.0 or later. With earlier versions of Xcode you will have to manually add Combine as a weakly linked framework to your application target.&lt;/p&gt; &#xA;&lt;h3&gt;Accio&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;Accio&lt;/a&gt; is a dependency manager based on SwiftPM which can build frameworks for iOS/macOS/tvOS/watchOS. Therefore the integration steps of Moya are exactly the same as described above. Once your &lt;code&gt;Package.swift&lt;/code&gt; file is configured, run &lt;code&gt;accio update&lt;/code&gt; instead of &lt;code&gt;swift package update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;For Moya, use the following entry in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;pod &#39;Moya&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or &#xA;&#xA;pod &#39;Moya/RxSwift&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or&#xA;&#xA;pod &#39;Moya/ReactiveSwift&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or&#xA;&#xA;pod &#39;Moya/Combine&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In any file you&#39;d like to use Moya in, don&#39;t forget to import the framework with &lt;code&gt;import Moya&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Carthage users can point to this repository and use whichever generated framework they&#39;d like, &lt;code&gt;Moya&lt;/code&gt;, &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;ReactiveMoya&lt;/code&gt;, or &lt;code&gt;CombineMoya&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make the following entry in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Moya/Moya&#34; ~&amp;gt; 15.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: At this time, Carthage does not provide a way to build only specific repository submodules. All submodules and their dependencies will be built with the above command. However, you don&#39;t need to copy frameworks you aren&#39;t using into your project. For instance, if you aren&#39;t using &lt;code&gt;ReactiveSwift&lt;/code&gt;, feel free to delete that framework along with &lt;code&gt;ReactiveMoya&lt;/code&gt; from the Carthage Build directory after &lt;code&gt;carthage update&lt;/code&gt; completes. Or if you are using &lt;code&gt;ReactiveSwift&lt;/code&gt; but not &lt;code&gt;RxSwift&lt;/code&gt; or &lt;code&gt;Combine&lt;/code&gt;, then &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;RxTest&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt;, &lt;code&gt;CombineMoya&lt;/code&gt; etc. can safely be deleted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &lt;em&gt;if&lt;/em&gt; your project is not initialized as a git repository:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Alamofire &amp;amp; Moya as a git &lt;a href=&#34;http://git-scm.com/docs/git-submodule&#34;&gt;submodule&lt;/a&gt; by running the following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git&#xA;$ git submodule add https://github.com/Moya/Moya.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project. Do the same with the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; in the &lt;code&gt;Moya&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;They should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify that the deployment targets of the &lt;code&gt;xcodeproj&lt;/code&gt;s match that of your application target in the Project Navigator.&lt;/li&gt; &#xA; &lt;li&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &#34;Targets&#34; heading in the sidebar.&lt;/li&gt; &#xA; &lt;li&gt;In the tab bar at the top of that window, open the &#34;General&#34; panel.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &#34;Embedded Binaries&#34; section.&lt;/li&gt; &#xA; &lt;li&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as either &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt; or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under &#34;Embedded Binaries&#34; again and add the correct build target for &lt;code&gt;Moya&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The three frameworks are automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/Examples/Basic.md&#34;&gt;some setup&lt;/a&gt;, using Moya is really simple. You can access an API like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.request(.zen) { result in&#xA;    switch result {&#xA;    case let .success(moyaResponse):&#xA;        let data = moyaResponse.data&#xA;        let statusCode = moyaResponse.statusCode&#xA;        // do something with the response data or statusCode&#xA;    case let .failure(error):&#xA;        // this means there was a network failure - either the request&#xA;        // wasn&#39;t sent (connectivity), or no response was received (server&#xA;        // timed out).  If the server responds with a 4xx or 5xx error, that&#xA;        // will be sent as a &#34;.success&#34;-ful response.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s a basic example. Many API requests need parameters. Moya encodes these into the enum you use to access the endpoint, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.request(.userProfile(&#34;ashfurrow&#34;)) { result in&#xA;    // do something with the result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No more typos in URLs. No more missing parameter values. No more messing with parameter encoding.&lt;/p&gt; &#xA;&lt;p&gt;For more examples, see the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/Examples&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reactive Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Even cooler are the reactive extensions. Moya provides reactive extensions for &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift&#34;&gt;ReactiveSwift&lt;/a&gt;, &lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt;, and &lt;a href=&#34;https://developer.apple.com/documentation/combine&#34;&gt;Combine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ReactiveSwift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/ReactiveSwift.md&#34;&gt;&lt;code&gt;ReactiveSwift&lt;/code&gt; extension&lt;/a&gt; provides both &lt;code&gt;reactive.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;reactive.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods that immediately return &lt;code&gt;SignalProducer&lt;/code&gt;s that you can start, bind, map, or whatever you want to do. To handle errors, for instance, we could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.reactive.request(.userProfile(&#34;ashfurrow&#34;)).start { event in&#xA;    switch event {&#xA;    case let .value(response):&#xA;        image = UIImage(data: response.data)&#xA;    case let .failed(error):&#xA;        print(error)&#xA;    default:&#xA;        break&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RxSwift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/RxSwift.md&#34;&gt;&lt;code&gt;RxSwift&lt;/code&gt; extension&lt;/a&gt; also provide both &lt;code&gt;rx.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods, but return type is different for both. In case of a normal &lt;code&gt;rx.request(:callbackQueue)&lt;/code&gt;, the return type is &lt;code&gt;Single&amp;lt;Response&amp;gt;&lt;/code&gt; which emits either single element or an error. In case of a &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt;, the return type is &lt;code&gt;Observable&amp;lt;ProgressResponse&amp;gt;&lt;/code&gt;, since we may get multiple events from progress and one last event which is a response.&lt;/p&gt; &#xA;&lt;p&gt;To handle errors, for instance, we could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.rx.request(.userProfile(&#34;ashfurrow&#34;)).subscribe { event in&#xA;    switch event {&#xA;    case let .success(response):&#xA;        image = UIImage(data: response.data)&#xA;    case let .error(error):&#xA;        print(error)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to the option of using signals instead of callback blocks, there are also a series of signal operators for RxSwift and ReactiveSwift that will attempt to map the data received from the network response into either an image, some JSON, or a string, with &lt;code&gt;mapImage()&lt;/code&gt;, &lt;code&gt;mapJSON()&lt;/code&gt;, and &lt;code&gt;mapString()&lt;/code&gt;, respectively. If the mapping is unsuccessful, you&#39;ll get an error on the signal. You also get handy methods for filtering out certain status codes. This means that you can place your code for handling API errors like 400&#39;s in the same places as code for handling invalid responses.&lt;/p&gt; &#xA;&lt;h3&gt;Combine&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Combine&lt;/code&gt; extension provides &lt;code&gt;requestPublisher(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;requestWithProgressPublisher(:callbackQueue)&lt;/code&gt; returning &lt;code&gt;AnyPublisher&amp;lt;Response, MoyaError&amp;gt;&lt;/code&gt; and &lt;code&gt;AnyPublisher&amp;lt;ProgressResponse, MoyaError&amp;gt;&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of &lt;code&gt;requestPublisher&lt;/code&gt; usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;let cancellable = provider.requestPublisher(.userProfile(&#34;ashfurrow&#34;))&#xA;    .sink(receiveCompletion: { completion in&#xA;        guard case let .failure(error) = completion else { return }&#xA;&#xA;        print(error)&#xA;    }, receiveValue: { response in&#xA;        image = UIImage(data: response.data)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community Projects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/CommunityProjects.md&#34;&gt;Moya has a great community around it and some people have created some very helpful extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Hey! Do you like Moya? Awesome! We could actually really use your help!&lt;/p&gt; &#xA;&lt;p&gt;Open source isn&#39;t just writing code. Moya could use your help with any of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finding (and reporting!) bugs.&lt;/li&gt; &#xA; &lt;li&gt;New feature suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Answering questions on issues.&lt;/li&gt; &#xA; &lt;li&gt;Documentation improvements.&lt;/li&gt; &#xA; &lt;li&gt;Reviewing pull requests.&lt;/li&gt; &#xA; &lt;li&gt;Helping to manage issue priorities.&lt;/li&gt; &#xA; &lt;li&gt;Fixing bugs/new features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If any of that sounds cool to you, send a pull request! After your first contribution, we will add you as a member to the repo so you can merge pull requests and help steer the ship &lt;span&gt;🚢&lt;/span&gt; You can read more details about that &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Contributing.md&#34;&gt;in our contributor guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Moya&#39;s community has a tremendous positive energy, and the maintainers are committed to keeping things awesome. Like &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/wiki/Communication-&amp;amp;-Design-Rules&#34;&gt;in the CocoaPods community&lt;/a&gt;, always assume positive intent. Even if a comment sounds mean-spirited, give the person the benefit of the doubt.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Code%20of%20Conduct.md&#34;&gt;its terms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new source files&lt;/h3&gt; &#xA;&lt;p&gt;If you add or remove a source file from Moya, a corresponding change needs to be made to the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; project at the root of this repository. This project is used for Carthage. Don&#39;t worry, you&#39;ll get an automated warning when submitting a pull request if you forget.&lt;/p&gt; &#xA;&lt;h3&gt;Help us improve Moya documentation&lt;/h3&gt; &#xA;&lt;p&gt;Whether you’re a core member or a user trying it out for the first time, you can make a valuable contribution to Moya by improving the documentation. Help us by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending us feedback about something you thought was confusing or simply missing.&lt;/li&gt; &#xA; &lt;li&gt;Suggesting better wording or ways of explaining certain topics.&lt;/li&gt; &#xA; &lt;li&gt;Sending us a pull request via GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Improving the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Readme_CN.md&#34;&gt;Chinese documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Moya is released under an MIT license. See &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/License.md&#34;&gt;License.md&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>