<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-01T02:18:56Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rxhanson/Rectangle</title>
    <updated>2024-01-01T02:18:56Z</updated>
    <id>tag:github.com,2024-01-01:/rxhanson/Rectangle</id>
    <link href="https://github.com/rxhanson/Rectangle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Move and resize windows on macOS with keyboard shortcuts and snap areas&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rectangle&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rxhanson/Rectangle/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/rxhanson/Rectangle/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rectangle is a window management app based on Spectacle, written in Swift.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13651296/183785536-a67a2e2a-7c55-4c19-9bf8-482e734b1632.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Rectangle supports macOS v10.15+. The last version that is supported for macOS 10.13 and 10.14 is &lt;a href=&#34;https://github.com/rxhanson/Rectangle/releases/tag/v0.73&#34;&gt;https://github.com/rxhanson/Rectangle/releases/tag/v0.73&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can download the latest dmg from &lt;a href=&#34;https://rectangleapp.com&#34;&gt;https://rectangleapp.com&lt;/a&gt; or the &lt;a href=&#34;https://github.com/rxhanson/Rectangle/releases&#34;&gt;Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or install with brew cask:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask rectangle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://support.apple.com/guide/mac-help/what-are-those-symbols-shown-in-menus-cpmh0011/mac&#34;&gt;keyboard shortcuts&lt;/a&gt; are self explanatory, but the snap areas can use some explanation if you&#39;ve never used them on Windows or other window management apps.&lt;/p&gt; &#xA;&lt;p&gt;Drag a window to the edge of the screen. When the mouse cursor reaches the edge of the screen, you&#39;ll see a footprint that Rectangle will attempt to resize and move the window to when the click is released.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Snap Area&lt;/th&gt; &#xA;   &lt;th&gt;Resulting Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Left or right edge&lt;/td&gt; &#xA;   &lt;td&gt;Left or right half&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Top&lt;/td&gt; &#xA;   &lt;td&gt;Maximize&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Corners&lt;/td&gt; &#xA;   &lt;td&gt;Quarter in respective corner&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Left or right edge, just above or below a corner&lt;/td&gt; &#xA;   &lt;td&gt;Top or bottom half&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bottom left, center, or right third&lt;/td&gt; &#xA;   &lt;td&gt;Respective third&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bottom left or right third, then drag to bottom center&lt;/td&gt; &#xA;   &lt;td&gt;First or last two thirds, respectively&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Ignore an app&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Focus the app that you want to ignore (make a window from that app frontmost).&lt;/li&gt; &#xA; &lt;li&gt;Open the Rectangle menu and select &#34;Ignore app&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Execute an action by URL&lt;/h2&gt; &#xA;&lt;p&gt;Open the URL &lt;code&gt;rectangle://execute-action?name=[name]&lt;/code&gt;. Do not activate Rectangle.&lt;/p&gt; &#xA;&lt;p&gt;Available values for &lt;code&gt;[name]&lt;/code&gt;: &lt;code&gt;left-half&lt;/code&gt;, &lt;code&gt;right-half&lt;/code&gt;, &lt;code&gt;center-half&lt;/code&gt;, &lt;code&gt;top-half&lt;/code&gt;, &lt;code&gt;bottom-half&lt;/code&gt;, &lt;code&gt;top-left&lt;/code&gt;, &lt;code&gt;top-right&lt;/code&gt;, &lt;code&gt;bottom-left&lt;/code&gt;, &lt;code&gt;bottom-right&lt;/code&gt;, &lt;code&gt;first-third&lt;/code&gt;, &lt;code&gt;center-third&lt;/code&gt;, &lt;code&gt;last-third&lt;/code&gt;, &lt;code&gt;first-two-thirds&lt;/code&gt;, &lt;code&gt;last-two-thirds&lt;/code&gt;, &lt;code&gt;maximize&lt;/code&gt;, &lt;code&gt;almost-maximize&lt;/code&gt;, &lt;code&gt;maximize-height&lt;/code&gt;, &lt;code&gt;smaller&lt;/code&gt;, &lt;code&gt;larger&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;restore&lt;/code&gt;, &lt;code&gt;next-display&lt;/code&gt;, &lt;code&gt;previous-display&lt;/code&gt;, &lt;code&gt;move-left&lt;/code&gt;, &lt;code&gt;move-right&lt;/code&gt;, &lt;code&gt;move-up&lt;/code&gt;, &lt;code&gt;move-down&lt;/code&gt;, &lt;code&gt;first-fourth&lt;/code&gt;, &lt;code&gt;second-fourth&lt;/code&gt;, &lt;code&gt;third-fourth&lt;/code&gt;, &lt;code&gt;last-fourth&lt;/code&gt;, &lt;code&gt;first-three-fourths&lt;/code&gt;, &lt;code&gt;last-three-fourths&lt;/code&gt;, &lt;code&gt;top-left-sixth&lt;/code&gt;, &lt;code&gt;top-center-sixth&lt;/code&gt;, &lt;code&gt;top-right-sixth&lt;/code&gt;, &lt;code&gt;bottom-left-sixth&lt;/code&gt;, &lt;code&gt;bottom-center-sixth&lt;/code&gt;, &lt;code&gt;bottom-right-sixth&lt;/code&gt;, &lt;code&gt;specified&lt;/code&gt;, &lt;code&gt;reverse-all&lt;/code&gt;, &lt;code&gt;top-left-ninth&lt;/code&gt;, &lt;code&gt;top-center-ninth&lt;/code&gt;, &lt;code&gt;top-right-ninth&lt;/code&gt;, &lt;code&gt;middle-left-ninth&lt;/code&gt;, &lt;code&gt;middle-center-ninth&lt;/code&gt;, &lt;code&gt;middle-right-ninth&lt;/code&gt;, &lt;code&gt;bottom-left-ninth&lt;/code&gt;, &lt;code&gt;bottom-center-ninth&lt;/code&gt;, &lt;code&gt;bottom-right-ninth&lt;/code&gt;, &lt;code&gt;top-left-third&lt;/code&gt;, &lt;code&gt;top-right-third&lt;/code&gt;, &lt;code&gt;bottom-left-third&lt;/code&gt;, &lt;code&gt;bottom-right-third&lt;/code&gt;, &lt;code&gt;top-left-eighth&lt;/code&gt;, &lt;code&gt;top-center-left-eighth&lt;/code&gt;, &lt;code&gt;top-center-right-eighth&lt;/code&gt;, &lt;code&gt;top-right-eighth&lt;/code&gt;, &lt;code&gt;bottom-left-eighth&lt;/code&gt;, &lt;code&gt;bottom-center-left-eighth&lt;/code&gt;, &lt;code&gt;bottom-center-right-eighth&lt;/code&gt;, &lt;code&gt;bottom-right-eighth&lt;/code&gt;, &lt;code&gt;tile-all&lt;/code&gt;, &lt;code&gt;cascade-all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example, from a shell: &lt;code&gt;open -g &#34;rectangle://execute-action?name=left-half&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Terminal Commands for Hidden Preferences&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rxhanson/Rectangle/master/TerminalCommands.md&#34;&gt;TerminalCommands.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Differences with Spectacle&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rectangle uses &lt;a href=&#34;https://github.com/shpakovski/MASShortcut&#34;&gt;MASShortcut&lt;/a&gt; for keyboard shortcut recording. Spectacle used its own shortcut recorder.&lt;/li&gt; &#xA; &lt;li&gt;Rectangle has additional window actions: move windows to each edge without resizing, maximize only the height of a window, almost maximizing a window.&lt;/li&gt; &#xA; &lt;li&gt;Next/prev screen thirds is replaced with explicitly first third, first two thirds, center third, last two thirds, and last third. Screen orientation is taken into account, as in first third will be left third on landscape and top third on portrait. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can however emulate Spectacle&#39;s third cycling using first and last third actions. So, if you repeatedly execute first third, it will cycle through thirds (first, center, last) and vice-versa with the last third.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;There&#39;s an option to have windows traverse across displays on subsequent left or right executions.&lt;/li&gt; &#xA; &lt;li&gt;Windows will snap when dragged to edges/corners of the screen. This can be disabled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Common Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Rectangle doesn&#39;t have the ability to move to other desktops/spaces&lt;/h3&gt; &#xA;&lt;p&gt;Apple never released a public API for Spaces. Other apps that move windows between spaces use unsupported or undesirable ways to achieve this. If Apple decides to release a public API for it, I&#39;ll add it in.&lt;/p&gt; &#xA;&lt;h3&gt;Window resizing is off slightly for iTerm2&lt;/h3&gt; &#xA;&lt;p&gt;By default iTerm2 will only resize in increments of character widths. There might be a setting inside iTerm2 to disable this, but you can change it with the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write com.googlecode.iterm2 DisableWindowSizeSnap -integer 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rectangle appears to cause Notification Center to freeze&lt;/h3&gt; &#xA;&lt;p&gt;This appears to affect only a small amount of users. To prevent this from happening, uncheck the box for &#34;Snap windows by dragging&#34;. See issue &lt;a href=&#34;https://github.com/rxhanson/Rectangle/issues/317&#34;&gt;317&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;If windows aren&#39;t resizing or moving as you expect, here&#39;s some initial steps to get to the bottom of it. Most issues of this type have been caused by other apps.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure macOS is up to date.&lt;/li&gt; &#xA; &lt;li&gt;Restart your machine (this often fixes things right after a macOS update).&lt;/li&gt; &#xA; &lt;li&gt;Make sure there are no other window manager applications running.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the app whose windows are not behaving properly does not have any conflicting keyboard shortcuts.&lt;/li&gt; &#xA; &lt;li&gt;Try using the menu items to execute a window action or changing the keyboard shortcut to something different so we can tell if it&#39;s a keyboard shortcut issue or not.&lt;/li&gt; &#xA; &lt;li&gt;Enable debug logging, as per the instructions in the following section.&lt;/li&gt; &#xA; &lt;li&gt;The logs are pretty straightforward. If your calculated rect and your resulting rect are identical, chances are that there is another application causing issues. Save your logs if needed to attach to an issue if you create one.&lt;/li&gt; &#xA; &lt;li&gt;If you suspect there may be another application causing issues, try creating and logging in as a new macOS user.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Try resetting the macOS accessibility permissions for Rectangle:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tccutil reset All com.knollsoft.Rectangle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, this can be done with the following steps instead of the tccutil terminal command.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Close Rectangle if it&#39;s running&lt;/li&gt; &#xA; &lt;li&gt;In System Settings -&amp;gt; Privacy &amp;amp; Security -&amp;gt; Accessibility, first disable Rectangle, then remove it with the minus button. (it&#39;s important to do both of those steps in that order)&lt;/li&gt; &#xA; &lt;li&gt;Restart your mac.&lt;/li&gt; &#xA; &lt;li&gt;Launch Rectangle and enable settings for it as prompted.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;View Debug Logging&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hold down the alt (option) key with the Rectangle menu open.&lt;/li&gt; &#xA; &lt;li&gt;Select the &#34;View Logging...&#34; menu item, which is in place of the &#34;About&#34; menu item.&lt;/li&gt; &#xA; &lt;li&gt;Logging will appear in the window as you perform Rectangle commands.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Import &amp;amp; export JSON config&lt;/h2&gt; &#xA;&lt;p&gt;There are buttons for importing and exporting the config as a JSON file in the settings tab of the preferences window.&lt;/p&gt; &#xA;&lt;p&gt;Upon launch, Rectangle will load a config file at &lt;code&gt;~/Library/Application Support/Rectangle/RectangleConfig.json&lt;/code&gt; if it is present and will rename that file with a time/date stamp so that it isn&#39;t read on subsequent launches.&lt;/p&gt; &#xA;&lt;h2&gt;Preferences Storage&lt;/h2&gt; &#xA;&lt;p&gt;The configuration for Rectangle is stored using NSUserDefaults, meaning it is stored in the following location: &lt;code&gt;~/Library/Preferences/com.knollsoft.Rectangle.plist&lt;/code&gt; Note that shortcuts in v0.41+ are stored in a different format and will not load in prior versions.&lt;/p&gt; &#xA;&lt;p&gt;That file can be backed up or transferred to other machines.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Rectangle v0.44+, you can also use the import/export button in the Preferences pane to share to your preferences and keyboard shortcuts across machines using a JSON file.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstallation&lt;/h2&gt; &#xA;&lt;p&gt;Rectangle can be uninstalled by quitting the app and moving it to the trash. You can remove the Rectangle defaults from your machine with the following terminal command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults delete com.knollsoft.Rectangle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Logic from Rectangle is used in the &lt;a href=&#34;https://multitouch.app&#34;&gt;Multitouch&lt;/a&gt; app. The &lt;a href=&#34;https://rectangleapp.com/pro&#34;&gt;Rectangle Pro&lt;/a&gt; app is entirely built on top of Rectangle. If you contribute significant code or localizations that get merged into Rectangle, you get a free license of Multitouch or Rectangle Pro. Contributors to Sparkle, MASShortcut, or Spectacle can also receive free Multitouch or Rectangle Pro licenses (just send me a direct message on &lt;a href=&#34;https://gitter.im&#34;&gt;Gitter&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Localization&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to contribute to localization, all of the translations are held in the Main.strings per language. If you would like to add a localization but one doesn&#39;t currently exist and you don&#39;t know how to create one, create an issue and a translation file can be initialized.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests for new localizations or improvements on existing localizations are welcome.&lt;/p&gt; &#xA;&lt;h3&gt;Running the app in Xcode (for developers)&lt;/h3&gt; &#xA;&lt;p&gt;Rectangle uses &lt;a href=&#34;https://www.swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; to install Sparkle and MASShortcut.&lt;/p&gt; &#xA;&lt;p&gt;The original repository for MASShortcut was archived, so Rectangle uses my &lt;a href=&#34;https://github.com/rxhanson/MASShortcut&#34;&gt;fork&lt;/a&gt;. If you want to make any changes that involve MASShortcut, please make a pull request on my fork.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EmergeTools/Pow</title>
    <updated>2024-01-01T02:18:56Z</updated>
    <id>tag:github.com,2024-01-01:/EmergeTools/Pow</id>
    <link href="https://github.com/EmergeTools/Pow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Delightful SwiftUI effects for your app&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/images/og-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Pow&lt;/h1&gt; &#xA;&lt;p&gt;Delightful SwiftUI effects for your app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.emergetools.com/open-source&#34;&gt;Check out other open source projects from Emerge Tools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To add a package dependency to your Xcode project, select &lt;em&gt;File&lt;/em&gt; &amp;gt; &lt;em&gt;Add Package&lt;/em&gt; and enter this repository&#39;s URL (&lt;a href=&#34;https://github.com/EmergeTools/Pow&#34;&gt;https://github.com/EmergeTools/Pow&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To add a package dependency to Swift Package, add this repository to your list of dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/EmergeTools/Pow&#34;, from: Version(1, 0, 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to your target as a product:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.product(name: &#34;Pow&#34;, package: &#34;Pow&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are moving from the previously closed source Pow framework to the new open source package, please refer to our &lt;a href=&#34;&#34;&gt;Transition Guide&lt;/a&gt;. If you have any problems please file an &lt;a href=&#34;https://github.com/EmergeTools/Pow/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;Pow features a selection of &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#transitions&#34;&gt;SwiftUI transitions&lt;/a&gt; as well as &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#change-effects&#34;&gt;Change Effects&lt;/a&gt; that trigger every time a value is updated.&lt;/p&gt; &#xA;&lt;p&gt;You can find previews of all effects &lt;a href=&#34;https://movingparts.io/pow&#34;&gt;on the Pow website&lt;/a&gt;. If you have an iOS Developer Environment, you can check out the &lt;a href=&#34;https://github.com/EmergeTools/Pow/tree/main/Example&#34;&gt;Pow Example App&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Feedback &amp;amp; Contribution&lt;/h1&gt; &#xA;&lt;p&gt;This project provides multiple forms of delivering feedback to maintainers.&lt;/p&gt; &#xA;&lt;p&gt;If you are figuring out how to use about Pow or one of it&#39;s effects we ask that you first consult the &lt;a href=&#34;https://movingparts.io/pow&#34;&gt;effects examples page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you still have a question, enhancement, or a way to improve Pow, this project leverages GitHub&#39;s &lt;a href=&#34;https://github.com/EmergeTools/Pow/issues&#34;&gt;Issues&lt;/a&gt; to manage your requests. If you find a bug and wish to report it, an issue would be greatly appreciated.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 15.0+&lt;/li&gt; &#xA; &lt;li&gt;macOS 12.0&lt;/li&gt; &#xA; &lt;li&gt;Mac Catalyst 15.0+&lt;/li&gt; &#xA; &lt;li&gt;visionOS beta 6 (requires Xcode 15.1 beta 3)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change Effects&lt;/h2&gt; &#xA;&lt;p&gt;Change Effects are effects that will trigger a visual or haptic every time a value changes.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;changeEffect&lt;/code&gt; modifier and pass in an &lt;code&gt;AnyChangeEffect&lt;/code&gt; as well as a value to watch for changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Button {&#xA;    post.toggleLike()&#xA;} label: {&#xA;    Label(post.likes.formatted(), systemName: &#34;heart.fill&#34;)&#xA;}&#xA;.changeEffect(.spray { heart }, value: post.likes, isEnabled: post.isLiked)&#xA;.tint(post.isLiked ? .red : .gray)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can choose from the following Change Effects: &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#spray&#34;&gt;Spray&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#haptic-feedback&#34;&gt;Haptic Feedback&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#jump&#34;&gt;Jump&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#ping&#34;&gt;Ping&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#rise&#34;&gt;Rise&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#shake&#34;&gt;Shake&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#shine&#34;&gt;Shine&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/EmergeTools/Pow/main/#spin&#34;&gt;Spin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Spray&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#spray&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An effect that emits multiple particles in different shades and sizes moving up from the origin point.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;likeButton&#xA;  .changeEffect(&#xA;    .spray(origin: .center) { Image(systemName: &#34;heart.fill&#34;) },&#xA;    value: likes&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;origin&lt;/code&gt;: The origin of the particles.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;layer&lt;/code&gt;: The &lt;code&gt;ParticleLayer&lt;/code&gt; on which to render the effect, default is &lt;code&gt;local&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;particles&lt;/code&gt;: The particles to emit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func spray(origin: UnitPoint = .center, layer: ParticleLayer = .local, @ViewBuilder _ particles: () -&amp;gt; some View) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Haptic Feedback&lt;/h3&gt; &#xA;&lt;p&gt;Triggers haptic feedback to communicate successes, failures, and warnings whenever a value changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;notification&lt;/code&gt;: The feedback type to trigger.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func feedback(hapticNotification type: UINotificationFeedbackGenerator.FeedbackType) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Triggers haptic feedback to simulate physical impacts whenever a value changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;impact&lt;/code&gt;: The feedback style to trigger.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func feedback(hapticImpact style: UIImpactFeedbackGenerator.FeedbackStyle) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Triggers haptic feedback to indicate a change in selection whenever a value changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var feedbackHapticSelection: AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jump&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#jump&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Makes the view jump the given height and then bounces a few times before settling.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: The height of the jump.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func jump(height: CGFloat) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ping&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#ping&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Adds one or more shapes that slowly grow and fade-out behind the view.&lt;/p&gt; &#xA;&lt;p&gt;The shape will be colored by the current tint style.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;shape&lt;/code&gt;: The shape to use for the effect.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;count&lt;/code&gt;: The number of shapes to emit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;  static func ping(shape: some InsettableShape, count: Int) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An effect that adds one or more shapes that slowly grow and fade-out behind the view.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;shape&lt;/code&gt;: The shape to use for the effect.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;style&lt;/code&gt;: The style to use for the effect.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;count&lt;/code&gt;: The number of shapes to emit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func ping(shape: some InsettableShape, style: some ShapeStyle, count: Int) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rise&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#rise&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An effect that emits the provided particles from the origin point and slowly float up while moving side to side.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;origin&lt;/code&gt;: The origin of the particle.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;layer&lt;/code&gt;: The &lt;code&gt;ParticleLayer&lt;/code&gt; on which to render the effect, default is &lt;code&gt;local&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;particles&lt;/code&gt;: The particles to emit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func rise(origin: UnitPoint = .center, layer: ParticleLayer = .local, @ViewBuilder _ particles: () -&amp;gt; some View) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shake&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#shake&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shakes the view when a change happens.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var shake: AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An effect that shakes the view when a change happens.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rate&lt;/code&gt;: The rate of the shake.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func shake(rate: ShakeRate) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shine&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#shine&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Highlights the view with a shine moving over the view.&lt;/p&gt; &#xA;&lt;p&gt;The shine moves from the top leading edge to bottom trailing edge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var shine: AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Highlights the view with a shine moving over the view.&lt;/p&gt; &#xA;&lt;p&gt;The shine moves from the top leading edge to bottom trailing edge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func shine(duration: Double) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Highlights the view with a shine moving over the view.&lt;/p&gt; &#xA;&lt;p&gt;The angle is relative to the current &lt;code&gt;layoutDirection&lt;/code&gt;, such that 0° represents sweeping towards the trailing edge and 90° represents sweeping towards the bottom edge.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;angle&lt;/code&gt;: The angle of the animation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;duration&lt;/code&gt;: The duration of the animation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func shine(angle: Angle, duration: Double = 1.0) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sound Effect Feedback&lt;/h3&gt; &#xA;&lt;p&gt;Triggers a sound effect as feedback whenever a value changes.&lt;/p&gt; &#xA;&lt;p&gt;This effect will not interrupt or duck any other audio that may currently playing. It may also not triggered based on the setting of the user&#39;s silent switch or playback device.&lt;/p&gt; &#xA;&lt;p&gt;To relay important information to the user, you should always accompany audio effects with visual cues.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;soundEffect&lt;/code&gt;: The sound effect to trigger.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func feedback(_ soundEffect: SoundEffect) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spin&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#spin&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spins the view around the given axis when a change happens.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var spin: AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Spins the view around the given axis when a change happens.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;axis: The x, y and z elements that specify the axis of rotation.&lt;/li&gt; &#xA;   &lt;li&gt;anchor: The location with a default of center that defines a point in 3D space about which the rotation is anchored.&lt;/li&gt; &#xA;   &lt;li&gt;anchorZ: The location with a default of 0 that defines a point in 3D space about which the rotation is anchored.&lt;/li&gt; &#xA;   &lt;li&gt;perspective: The relative vanishing point with a default of 1 / 6 for this rotation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func spin(axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint = .center, anchorZ: CGFloat = 0, perspective: CGFloat = 1 / 6) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delay&lt;/h3&gt; &#xA;&lt;p&gt;Every change effect can be delayed to trigger the effect after some time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Button(&#34;Submit&#34;) { &#xA;    &amp;lt;#code#&amp;gt;&#xA;}&#xA;.buttonStyle(.borderedProminent)&#xA;.disabled(name.isEmpty)&#xA;.changeEffect(.shine.delay(1), value: name.isEmpty, isEnabled: !name.isEmpty)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;delay&lt;/code&gt;: The delay in seconds.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func delay(_ delay: Double) -&amp;gt; AnyChangeEffect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Particle Layer&lt;/h2&gt; &#xA;&lt;p&gt;A particle layer is a context in which particle effects draw their particles.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;particleLayer(name:)&lt;/code&gt; view modifier wraps the view in a particle layer with the given name.&lt;/p&gt; &#xA;&lt;p&gt;Particle effects such as &lt;code&gt;AnyChangeEffect.spray&lt;/code&gt; can render their particles on this position in the view tree to avoid being clipped by their immediate ancestor.&lt;/p&gt; &#xA;&lt;p&gt;For example, certain &lt;code&gt;List&lt;/code&gt; styles may clip their rows. Use &lt;code&gt;particleLayer(_:)&lt;/code&gt; to render particles on top of the entire &lt;code&gt;List&lt;/code&gt; or even its enclosing &lt;code&gt;NavigationStack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func particleLayer(name: AnyHashable) -&amp;gt; some View&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transitions&lt;/h2&gt; &#xA;&lt;p&gt;All transitions are namespaced under the &lt;code&gt;movingParts&lt;/code&gt; static variable, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;myView.transition(.movingParts.anvil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Anvil&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#anvil&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that drops the view down from the top with matching haptic feedback.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on insertion and takes 1.4 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var anvil: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Blinds&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#blinds&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that reveals the view as if it was behind window blinds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var blinds: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that reveals the view as if it was behind window blinds.&lt;/p&gt; &#xA;&lt;p&gt;Parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;slatWidth&lt;/code&gt;: The width of each slat.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;style&lt;/code&gt;: The style of blinds, either &lt;code&gt;.venetian&lt;/code&gt; or &lt;code&gt;.vertical&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isStaggered&lt;/code&gt;: Whether all slats opens at the same time or in sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func blinds(slatWidth: CGFloat, style: BlindsStyle = .venetian, isStaggered: Bool = false) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Blur&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#blur&#34;&gt;Preview &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition from blurry to sharp on insertion, and from sharp to blurry on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var blur: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Boing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#boing&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that moves the view down with any overshoot resulting in an elastic deformation of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var boing: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that moves the view from the specified edge on insertion,&lt;br&gt; and towards it on removal, with any overshoot resulting in an elastic&lt;br&gt; deformation of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func boing(edge: Edge) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clock&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#clock&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition using a clockwise sweep around the centerpoint of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var clock: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition using a clockwise sweep around the centerpoint of the view.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func clock(blurRadius: CGFloat)  -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flicker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#flicker&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that toggles the visibility of the view multiple times before settling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var flicker: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that toggles the visibility of the view multiple times before settling.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;count&lt;/code&gt;: The number of times the visibility is toggled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func flicker(count: Int) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Film Exposure&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#film-exposure&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition from completely dark to fully visible on insertion, and from fully visible to completely dark on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var filmExposure: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flip&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#flip&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that inserts by rotating the view towards the viewer, and removes by rotating the view away from the viewer.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Any overshoot of the animation will result in the view continuing the rotation past the view&#39;s normal state before eventually settling.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var flip: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Glare&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#glare&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transitions that shows the view by combining a diagonal wipe with a white streak.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var glare: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transitions that shows the view by combining a wipe with a colored streak.&lt;/p&gt; &#xA;&lt;p&gt;The angle is relative to the current &lt;code&gt;layoutDirection&lt;/code&gt;, such that 0° represents sweeping towards the trailing edge on insertion and 90° represents sweeping towards the bottom edge.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the removal of the view is using a glare with an exponential ease-in curve, combined with a anticipating scale animation, making for a more dramatic exit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;infoBox&#xA;  .transition(&#xA;    .asymmetric(&#xA;      insertion: .movingParts.glare(angle: .degrees(225)),&#xA;      removal: .movingParts.glare(angle: .degrees(45)&#xA;    )&#xA;    .animation(.movingParts.easeInExponential(duration: 0.9))&#xA;        .combined(with:&#xA;          .scale(scale: 1.4)&#xA;            .animation(.movingParts.anticipate(duration: 0.9).delay(0.1)&#xA;        )&#xA;      )&#xA;    )&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: The angle of the wipe.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;color&lt;/code&gt;: The color of the glare effect.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func glare(angle: Angle, color: Color = .white) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Iris&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#iris&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that takes the shape of a growing circle when inserting, and a shrinking circle when removing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;origin&lt;/code&gt;: The center point of the circle as it grows or shrinks.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func iris(origin: UnitPoint = .center, blurRadius: CGFloat = 0) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Move&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#move&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that moves the view from the specified edge of the on insertion and towards it on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func move(edge: Edge) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that moves the view at the specified angle.&lt;/p&gt; &#xA;&lt;p&gt;The angle is relative to the current &lt;code&gt;layoutDirection&lt;/code&gt;, such that 0° represents animating towards the trailing edge on insertion and 90° represents inserting towards the bottom edge.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the view insertion is animated by moving it towards the top trailing corner and the removal is animated by moving it towards the bottom edge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Hello&#34;)&#xA;  .transition(&#xA;    .asymmetric(&#xA;      insertion: .movingParts.move(angle: .degrees(45)),&#xA;      removal:   .movingParts.move(angle: .degrees(90))&#xA;    )&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;angle&lt;/code&gt;: The direction of the animation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func move(angle: Angle) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pop&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#pop&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that shows a view with a ripple effect and a flurry of tint-colored particles.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on insertion and takes 1.2 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var pop: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that shows a view with a ripple effect and a flurry of colored particles.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the star uses the pop effect only when transitioning from &lt;code&gt;starred == false&lt;/code&gt; to &lt;code&gt;starred == true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Button {&#xA;  starred.toggle()&#xA;} label: {&#xA;  if starred {&#xA;    Image(systemName: &#34;star.fill&#34;)&#xA;      .foregroundStyle(.orange)&#xA;      .transition(.movingParts.pop(.orange))&#xA;  } else {&#xA;    Image(systemName: &#34;star&#34;)&#xA;      .foregroundStyle(.gray)&#xA;      .transition(.identity)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The transition is only performed on insertion.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;style&lt;/code&gt;: The style to use for the effect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func pop&amp;lt;S: ShapeStyle&amp;gt;(_ style: S) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Poof&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#poof&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that removes the view in a dissolving cartoon style cloud.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on removal and takes 0.4 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var poof: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rotate3D&lt;/h3&gt; &#xA;&lt;p&gt;A transition that inserts by rotating from the specified rotation, and removes by rotating to the specified rotation in three dimensions.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the view is rotated 90˚ about the y axis around its bottom edge as if it was rising from lying on its back face:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Hello&#34;)&#xA;  .transition(.movingParts.rotate3D(&#xA;    .degrees(90),&#xA;      axis: (1, 0, 0),&#xA;      anchor: .bottom,&#xA;      perspective: 1.0 / 6.0)&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Any overshoot of the animation will result in the view continuing the rotation past the view&#39;s normal state before eventually settling.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;angle&lt;/code&gt;: The angle from which to rotate the view.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;axis&lt;/code&gt;: The x, y and z elements that specify the axis of rotation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;anchor&lt;/code&gt;: The location with a default of center that defines a point in 3D space about which the rotation is anchored.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;anchorZ&lt;/code&gt;: The location with a default of 0 that defines a point in 3D space about which the rotation is anchored.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;perspective&lt;/code&gt;: The relative vanishing point with a default of 1 for this rotation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func rotate3D(_ angle: Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint = .center, anchorZ: CGFloat = 0, perspective: CGFloat = 1) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snapshot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#snapshot&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition from completely bright to fully visible on insertion, and from fully visible to completely bright on removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var snapshot: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Skid&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#skid&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that moves the view in from its leading edge with any overshoot resulting in an elastic deformation of the view.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var skid: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that moves the view in from the specified edge during insertion and towards it during removal with any overshoot resulting in an elastic deformation of the view.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;direction&lt;/code&gt;: The direction of the transition.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func skid(direction: SkidDirection) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swoosh&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#swoosh&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A three-dimensional transition from the back of the towards the front during insertion and from the front towards the back during removal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var swoosh: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vanish&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#vanish&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition that dissolves the view into many small particles.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on removal.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This transition will use an ease-out animation with a duration of 900ms if the current &lt;code&gt;Animation&lt;/code&gt; is &lt;code&gt;.default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static var vanish: AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that dissolves the view into many small particles.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on removal.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This transition will use an ease-out animation with a duration of 900ms if the current &lt;code&gt;Animation&lt;/code&gt; is &lt;code&gt;.default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;style&lt;/code&gt;: The style to use for the particles.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func vanish&amp;lt;S: ShapeStyle&amp;gt;(_ style: S) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition that dissolves the view into many small particles following a given shape.&lt;/p&gt; &#xA;&lt;p&gt;The transition is only performed on removal.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This transition will use an ease-out animation with a duration of 900ms if the current &lt;code&gt;Animation&lt;/code&gt; is &lt;code&gt;.default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;style&lt;/code&gt;: The style to use for the particles.&lt;/li&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;mask&lt;/code&gt;: The mask that determines where particles should be placed.&lt;/li&gt; &#xA; &lt;li&gt;Parameter &lt;code&gt;eoFill&lt;/code&gt;: A Boolean that indicates whether the shape is interpreted with the even-odd winding number rule.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func vanish&amp;lt;T: ShapeStyle, S: Shape&amp;gt;(_ style: T, mask: S, eoFill: Bool = false) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wipe&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://movingparts.io/pow/#wipe&#34;&gt;Preview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A transition using a sweep from the specified edge on insertion, and towards it on removal.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;edge&lt;/code&gt;: The edge at which the sweep starts or ends.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func wipe(edge: Edge, blurRadius: CGFloat = 0) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A transition using a sweep at the specified angle.&lt;/p&gt; &#xA;&lt;p&gt;The angle is relative to the current &lt;code&gt;layoutDirection&lt;/code&gt;, such that 0° represents sweeping towards the trailing edge on insertion and 90° represents sweeping towards the bottom edge.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;angle&lt;/code&gt;: The angle of the animation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;blurRadius&lt;/code&gt;: The radius of the blur applied to the mask.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;static func wipe(angle: Angle, blurRadius: CGFloat = 0) -&amp;gt; AnyTransition&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-aoc-starter-example</title>
    <updated>2024-01-01T02:18:56Z</updated>
    <id>tag:github.com,2024-01-01:/apple/swift-aoc-starter-example</id>
    <link href="https://github.com/apple/swift-aoc-starter-example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift starter project for solving Advent of Code challenges.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Advent of Code Swift Starter Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Swift-red.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Daily programming puzzles at &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;, by &lt;a href=&#34;http://was.tl/&#34;&gt;Eric Wastl&lt;/a&gt;. This is a small example starter project for building Advent of Code solutions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Swift comes with Xcode, or you can &lt;a href=&#34;https://www.swift.org/install/&#34;&gt;install it&lt;/a&gt; on a supported macOS, Linux, or Windows platform.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Xcode, you can open this project by choosing File / Open and select the parent directory.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer the command line, you can run the test suite with &lt;code&gt;swift test&lt;/code&gt;, and run the output with &lt;code&gt;swift run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Visual Studio Code to edit, you might find these Swift extensions useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sswg.swift-lang&#34;&gt;Swift&lt;/a&gt; (provides core language edit / debug / test features)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-apple-swift-format&#34;&gt;apple-swift-format&lt;/a&gt; (supports the &lt;a href=&#34;https://github.com/apple/swift-format&#34;&gt;swift-format&lt;/a&gt; package)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Challenges&lt;/h2&gt; &#xA;&lt;p&gt;The challenges assume three files (replace 00 with the day of the challenge).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Sources/Data/Day00.txt&lt;/code&gt;: the input data provided for the challenge&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Sources/Day00.swift&lt;/code&gt;: the code to solve the challenge&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Tests/Day00.swift&lt;/code&gt;: any unit tests that you want to include&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To start a new day&#39;s challenge, make a copy of these files, updating 00 to the day number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;// Add each new day implementation to this array:&#xA;let allChallenges: [any AdventDay] = [&#xA;-  Day00()&#xA;+  Day00(),&#xA;+  Day01(),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then implement part 1 and 2. The &lt;code&gt;AdventOfCode.swift&lt;/code&gt; file controls which challenge is run with &lt;code&gt;swift run&lt;/code&gt;. Add your new type to its &lt;code&gt;allChallenges&lt;/code&gt; array. By default it runs the most recent challenge.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;AdventOfCode.swift&lt;/code&gt; file controls which day&#39;s challenge is run with &lt;code&gt;swift run&lt;/code&gt;. By default that runs the most recent challenge in the package.&lt;/p&gt; &#xA;&lt;p&gt;To supply command line arguments use &lt;code&gt;swift run AdventOfCode&lt;/code&gt;. For example, &lt;code&gt;swift run -c release AdventOfCode --benchmark 3&lt;/code&gt; builds the binary with full optimizations, and benchmarks the challenge for day 3.&lt;/p&gt; &#xA;&lt;h2&gt;Linting and Formatting&lt;/h2&gt; &#xA;&lt;p&gt;Challenge source code can be linted and formatted automatically using the included dependency on &lt;code&gt;swift-format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lint source code with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ swift package lint-source-code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Format source code with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ swift package format-source-code&#xA;Plugin ‘Format Source Code’ wants permission to write to the package directory.&#xA;Stated reason: “This command formats the Swift source files”.&#xA;Allow this plugin to write to the package directory? (yes/no)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid the interactive prompt when formatting source code, use the &lt;code&gt;--allow-writing-to-package-directory&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ swift package format-source-code --allow-writing-to-package-directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;swift-format will use the built-in default style to lint and format code. A &lt;code&gt;.swift-format&lt;/code&gt; configuration file can be used to customize the style used, see &lt;a href=&#34;https://github.com/apple/swift-format/raw/main/Documentation/Configuration.md&#34;&gt;Configuration&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
</feed>