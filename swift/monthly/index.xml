<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-01T01:55:18Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MrKai77/Loop</title>
    <updated>2024-07-01T01:55:18Z</updated>
    <id>tag:github.com,2024-07-01:/MrKai77/Loop</id>
    <link href="https://github.com/MrKai77/Loop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Window management made elegant.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MrKai77/Loop/develop/assets/graphics/social_preview.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Loop is a macOS app that simplifies window management for you! You can effortlessly choose your window direction using a radial menu triggered by a simple key press, and customize it according to your preferences with personalized colors and settings. You can easily move, resize, and arrange your windows with just a few clicks, saving you valuable time and energy.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/MrKai77/Loop/develop/assets/graphics/loop_demo.gif&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Compatible with macOS 13 and later&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;brew install loop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Simply download the latest release &lt;a href=&#34;https://github.com/MrKai77/Loop/releases/latest&#34;&gt;here&lt;/a&gt;! Unzip the file, and open the app, grant it accessibility access, and you&#39;re good to go!&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Window resizing with &lt;em&gt;style&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customizable app colors&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable radial menu&lt;/li&gt; &#xA; &lt;li&gt;Option to change circular menu to rounded rectangle&lt;/li&gt; &#xA; &lt;li&gt;Additional keybindings for non-mouse use&lt;/li&gt; &#xA; &lt;li&gt;Custom trigger key for Loop&lt;/li&gt; &#xA; &lt;li&gt;Unlock new app icons with increased Loop usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After installation, launch Loop from your Applications folder.&lt;/li&gt; &#xA; &lt;li&gt;Press the designated hotkey (see &lt;a href=&#34;https://raw.githubusercontent.com/MrKai77/Loop/develop/#triggering-loop&#34;&gt;here&lt;/a&gt;) to trigger the radial menu.&lt;/li&gt; &#xA; &lt;li&gt;Move your mouse to the direction you want your window to move.&lt;/li&gt; &#xA; &lt;li&gt;Release the hotkey to apply the window movement.&lt;/li&gt; &#xA; &lt;li&gt;To customize Loop&#39;s settings, click on the Loop icon in the menu bar and select &#34;Settings&#34;. From there, you can customize the hotkey, colors, and other settings to your liking.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it! With Loop, window management is a breeze.&lt;/p&gt; &#xA;&lt;h1&gt;Triggering Loop&lt;/h1&gt; &#xA;&lt;p&gt;You can set your own custom trigger key for Loop! Currently, the available options for triggering loop are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Globe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Left Control&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Right Control&lt;/code&gt; (To use Caps Lock, look &lt;a href=&#34;https://raw.githubusercontent.com/MrKai77/Loop/develop/#using-caps-lock&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Left Option&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Right Option&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Left Command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Right Command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Left Shift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Right Shift&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using Caps Lock&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MrKai77/Loop/develop/assets/graphics/caps_lock.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To set &lt;code&gt;Caps Lock&lt;/code&gt; as the trigger key, remap it to &lt;code&gt;Control&lt;/code&gt; in System Settings, and repeat the process for every connected keyboard. In Loop, make sure the &lt;code&gt;Right Control&lt;/code&gt; key is selected as your trigger.&lt;/p&gt; &#xA;&lt;h1&gt;Additional Notes&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/MrKai77/Loop/develop/LICENSE&#34;&gt;GNU GPLv3 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nikitabobko/AeroSpace</title>
    <updated>2024-07-01T01:55:18Z</updated>
    <id>tag:github.com,2024-07-01:/nikitabobko/AeroSpace</id>
    <link href="https://github.com/nikitabobko/AeroSpace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AeroSpace is an i3-like tiling window manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/xcode-app-bundle-launcher/Assets.xcassets/AppIcon.appiconset/icon.png&#34; width=&#34;40%&#34; height=&#34;40%&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;AeroSpace Beta &lt;a href=&#34;https://github.com/nikitabobko/AeroSpace/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/nikitabobko/AeroSpace/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;AeroSpace is an i3-like tiling window manager for macOS&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UOl7ErqWbrk&#34;&gt;YouTube Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide&#34;&gt;AeroSpace Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/commands&#34;&gt;AeroSpace Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/config-examples&#34;&gt;AeroSpace Config Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/goodness&#34;&gt;AeroSpace Goodness&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;Public Beta. Feedback is very much welcome&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I encourage you to try AeroSpace and file GitHub issues if something doesn&#39;t work for you&lt;/li&gt; &#xA; &lt;li&gt;I already use AeroSpace on daily basis and I&#39;m happy with it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide&#34;&gt;The documentation&lt;/a&gt; covers all major things you need to know&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tiling window manager based on a &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#tree&#34;&gt;tree paradigm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://i3wm.org/&#34;&gt;i3&lt;/a&gt; inspired&lt;/li&gt; &#xA; &lt;li&gt;Fast workspaces switching without animations and without the necessity to disable SIP&lt;/li&gt; &#xA; &lt;li&gt;AeroSpace employs its &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&#34;&gt;own emulation of virtual workspaces&lt;/a&gt; instead of relying on native macOS Spaces due to &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&#34;&gt;their considerable limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Plain text configuration (dotfiles friendly). See: &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/config-examples#default-config&#34;&gt;default-config.toml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CLI first (manpages and shell completion included)&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t require disabling SIP (System Integrity Protection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#multiple-monitors&#34;&gt;Proper multi-monitor support&lt;/a&gt; (i3-like paradigm)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; to get autoupdates (Preferred)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install --cask nikitabobko/tap/aerospace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Optional)&lt;/strong&gt; If you want shell completion, you need to configure your shell to enable completion provided by homebrew packages: &lt;a href=&#34;https://docs.brew.sh/Shell-Completion&#34;&gt;https://docs.brew.sh/Shell-Completion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#manual-installation&#34;&gt;Manual installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] By using AeroSpace, you acknowledge that it&#39;s not &lt;a href=&#34;https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution&#34;&gt;notarized&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Notarization is a &#34;security&#34; feature by Apple. You send binaries to Apple, and they either approve the binaries or not. In reality, notarization is about building binaries the way Apple likes it.&lt;/p&gt; &#xA; &lt;p&gt;Let&#39;s be honest. Tiling window manager is not something Apple will be totally ok with. Even if they approve one version, it doesn&#39;t mean that they won&#39;t revoke it (yes, they can do it), or approve further versions.&lt;/p&gt; &#xA; &lt;p&gt;I don&#39;t have anything against notarization as a concept. I specifically don&#39;t like the way Apple does notarization. I don&#39;t have time to fight Apple.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/nikitabobko/homebrew-tap/raw/main/Casks/aerospace.rb&#34;&gt;Homebrew installation script&lt;/a&gt; is configured to automatically delete &lt;code&gt;com.apple.quarantine&lt;/code&gt; attribute, that&#39;s why the app should work out of the box, without any warnings that &#34;Apple cannot check AeroSpace for malicious software&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing, creating issues, submitting pull requests&lt;/h2&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;A notes on how to setup the project, build it, how to run the tests, etc. can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/dev-docs/development.md&#34;&gt;dev-docs/development.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Values of the project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AeroSpace is targeted at advanced users and developers&lt;/li&gt; &#xA; &lt;li&gt;Keyboard centric&lt;/li&gt; &#xA; &lt;li&gt;Breaking changes (configuration files, CLI, behavior) are avoided as much as possible, but it must not let the software stagnate. Thus breaking changes can happen, but with careful considerations and helpful message. &lt;a href=&#34;https://semver.org/&#34;&gt;Semver&lt;/a&gt; major version is bumped in case of a breaking change (It&#39;s all guaranteed once AeroSpace reaches 1.0 version, until then breaking changes just happen)&lt;/li&gt; &#xA; &lt;li&gt;AeroSpace doesn&#39;t use GUI, unless necessarily &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AeroSpace will never provide a GUI for configuration. For advanced users, it&#39;s easier to edit a configuration file in text editor rather than navigating through checkboxes in GUI.&lt;/li&gt; &#xA;   &lt;li&gt;Status menu icon is ok, because visual feedback is needed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Provide &lt;em&gt;practical&lt;/em&gt; features. Fancy appearance features are not &lt;em&gt;practical&lt;/em&gt; (e.g. window borders, transparency, etc)&lt;/li&gt; &#xA; &lt;li&gt;If &#34;dark magic&#34; (aka &#34;private APIs&#34;, &#34;code injections&#34;, etc) can be avoided, it must be avoided &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Right now, AeroSpace uses only a single private API to get window ID of accessibility object &lt;code&gt;_AXUIElementGetWindow&lt;/code&gt;. Everything else is &lt;a href=&#34;https://developer.apple.com/documentation/applicationservices/axuielement_h&#34;&gt;macOS public accessibility API&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;AeroSpace will never require you to disable SIP (System Integrity Protection). For example, yabai &lt;a href=&#34;https://github.com/koekeishiya/yabai/issues/1863&#34;&gt;requires you to disable SIP&lt;/a&gt; to use some of its features. AeroSpace will either find another way (such as &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&#34;&gt;emulation of workspaces&lt;/a&gt;) or will not implement this feature at all (window transparency and window shadowing are not &lt;em&gt;practical&lt;/em&gt; features)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Non Values&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Play nicely with existing macOS features. If limitations are imposed then AeroSpace won&#39;t play nicely with existing macOS features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;E.g. AeroSpace doesn&#39;t acknowledge the existence of macOS Spaces, and it uses &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide#emulation-of-virtual-workspaces&#34;&gt;emulation of its own workspaces&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tip of the day&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write -g NSWindowShouldDragOnGesture YES&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can move windows by holding &lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;cmd&lt;/code&gt; and dragging any part of the window (not necessarily the window title)&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://www.reddit.com/r/MacOS/comments/k6hiwk/keyboard_modifier_to_simplify_click_drag_of/&#34;&gt;reddit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ianyh/Amethyst&#34;&gt;Amethyst&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koekeishiya/yabai&#34;&gt;yabai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>TelegramMessenger/Telegram-iOS</title>
    <updated>2024-07-01T01:55:18Z</updated>
    <id>tag:github.com,2024-07-01:/TelegramMessenger/Telegram-iOS</id>
    <link href="https://github.com/TelegramMessenger/Telegram-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram-iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Telegram iOS Source Code Compilation Guide&lt;/h1&gt; &#xA;&lt;p&gt;We welcome all developers to use our API and source code to create applications on our platform. There are several things we require from &lt;strong&gt;all developers&lt;/strong&gt; for the moment.&lt;/p&gt; &#xA;&lt;h1&gt;Creating your Telegram Application&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://core.telegram.org/api/obtaining_api_id&#34;&gt;&lt;strong&gt;Obtain your own api_id&lt;/strong&gt;&lt;/a&gt; for your application.&lt;/li&gt; &#xA; &lt;li&gt;Please &lt;strong&gt;do not&lt;/strong&gt; use the name Telegram for your app — or make sure your users understand that it is unofficial.&lt;/li&gt; &#xA; &lt;li&gt;Kindly &lt;strong&gt;do not&lt;/strong&gt; use our standard logo (white paper plane in a blue circle) as your app&#39;s logo.&lt;/li&gt; &#xA; &lt;li&gt;Please study our &lt;a href=&#34;https://core.telegram.org/mtproto/security_guidelines&#34;&gt;&lt;strong&gt;security guidelines&lt;/strong&gt;&lt;/a&gt; and take good care of your users&#39; data and privacy.&lt;/li&gt; &#xA; &lt;li&gt;Please remember to publish &lt;strong&gt;your&lt;/strong&gt; code too in order to comply with the licences.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Quick Compilation Guide&lt;/h1&gt; &#xA;&lt;h2&gt;Get the Code&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive -j8 https://github.com/TelegramMessenger/Telegram-iOS.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup Xcode&lt;/h2&gt; &#xA;&lt;p&gt;Install Xcode (directly from &lt;a href=&#34;https://developer.apple.com/download/applications&#34;&gt;https://developer.apple.com/download/applications&lt;/a&gt; or using the App Store).&lt;/p&gt; &#xA;&lt;h2&gt;Adjust Configuration&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generate a random identifier:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl rand -hex 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create a new Xcode project. Use &lt;code&gt;Telegram&lt;/code&gt; as the Product Name. Use &lt;code&gt;org.{identifier from step 1}&lt;/code&gt; as the Organization Identifier.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Keychain Access&lt;/code&gt; and navigate to &lt;code&gt;Certificates&lt;/code&gt;. Locate &lt;code&gt;Apple Development: your@email.address (XXXXXXXXXX)&lt;/code&gt; and double tap the certificate. Under &lt;code&gt;Details&lt;/code&gt;, locate &lt;code&gt;Organizational Unit&lt;/code&gt;. This is the Team ID.&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;build-system/template_minimal_development_configuration.json&lt;/code&gt;. Use data from the previous steps.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Generate an Xcode project&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=build-system/template_minimal_development_configuration.json \&#xA;    --xcodeManagedCodesigning&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Advanced Compilation Guide&lt;/h1&gt; &#xA;&lt;h2&gt;Xcode&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy and edit &lt;code&gt;build-system/appstore-configuration.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;build-system/fake-codesigning&lt;/code&gt;. Create and download provisioning profiles, using the &lt;code&gt;profiles&lt;/code&gt; folder as a reference for the entitlements.&lt;/li&gt; &#xA; &lt;li&gt;Generate an Xcode project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=configuration_from_step_1.json \&#xA;    --codesigningInformationPath=directory_from_step_2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;IPA&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Repeat the steps from the previous section. Use distribution provisioning profiles.&lt;/li&gt; &#xA; &lt;li&gt;Run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    build \&#xA;    --configurationPath=...see previous section... \&#xA;    --codesigningInformationPath=...see previous section... \&#xA;    --buildNumber=100001 \&#xA;    --configuration=release_arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;Xcode is stuck at &#34;build-request.json not updated yet&#34;&lt;/h2&gt; &#xA;&lt;p&gt;Occasionally, you might observe the following message in your build log:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;/Users/xxx/Library/Developer/Xcode/DerivedData/Telegram-xxx/Build/Intermediates.noindex/XCBuildData/xxx.xcbuilddata/build-request.json&#34; not updated yet, waiting...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should this occur, simply cancel the ongoing build and initiate a new one.&lt;/p&gt; &#xA;&lt;h2&gt;Telegram_xcodeproj: no such package&lt;/h2&gt; &#xA;&lt;p&gt;Following a system restart, the auto-generated Xcode project might encounter a build failure accompanied by this error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ERROR: Skipping &#39;@rules_xcodeproj_generated//generator/Telegram/Telegram_xcodeproj:Telegram_xcodeproj&#39;: no such package &#39;@rules_xcodeproj_generated//generator/Telegram/Telegram_xcodeproj&#39;: BUILD file not found in directory &#39;generator/Telegram/Telegram_xcodeproj&#39; of external repository @rules_xcodeproj_generated. Add a BUILD file to a directory to mark it as a package.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter this issue, re-run the project generation steps in the README.&lt;/p&gt; &#xA;&lt;h1&gt;Tips&lt;/h1&gt; &#xA;&lt;h2&gt;Codesigning is not required for simulator-only builds&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;--disableProvisioningProfiles&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=path-to-configuration.json \&#xA;    --codesigningInformationPath=path-to-provisioning-data \&#xA;    --disableProvisioningProfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;Each release is built using a specific Xcode version (see &lt;code&gt;versions.json&lt;/code&gt;). The helper script checks the versions of the installed software and reports an error if they don&#39;t match the ones specified in &lt;code&gt;versions.json&lt;/code&gt;. It is possible to bypass these checks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py --overrideXcodeVersion build ... # Don&#39;t check the version of Xcode&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>