<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:49:54Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rileytestut/Delta</title>
    <updated>2024-05-01T01:49:54Z</updated>
    <id>tag:github.com,2024-05-01:/rileytestut/Delta</id>
    <link href="https://github.com/rileytestut/Delta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Delta is an all-in-one classic video game emulator for non-jailbroken iOS devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Delta&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Delta is an all-in-one classic video game emulator for non-jailbroken iOS devices.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.0-orange.svg?sanitize=true&#34; alt=&#34;Swift Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: AGPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Delta is an iOS application that allows you to emulate and play video games for several classic video game systems, including Game Boy Advance, Nintendo 64, and Nintendo DS. Delta is the spiritual successor to &lt;a href=&#34;http://www.gba4iosapp.com&#34;&gt;GBA4iOS&lt;/a&gt; — a Game Boy Advance emulator for iOS devices &lt;a href=&#34;https://twitter.com/pau1thor&#34;&gt;Paul Thorsen&lt;/a&gt; and I made while in high school together — rebuilt from the ground up with modern iOS features and support for more systems.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/705880/115471008-203aa480-a1ec-11eb-8aba-237a46799543.png&#34; width=&#34;75%&#34;&gt;&lt;br&gt; &lt;em&gt;Mario and Pokémon are properties of Nintendo Co., Ltd. and are not associated with Delta or AltStore LLC.&lt;/em&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Supported Systems&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nintendo Entertainment System (NES)&lt;/li&gt; &#xA; &lt;li&gt;Super Nintendo Entertainment System (SNES)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo 64 (N64)&lt;/li&gt; &#xA; &lt;li&gt;Game Boy / Game Boy Color (GBC)&lt;/li&gt; &#xA; &lt;li&gt;Game Boy Advance (GBA)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo DS (DS)&lt;/li&gt; &#xA; &lt;li&gt;Sega Genesis / Mega Drive (GEN) &lt;strong&gt;(in beta)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accurate, full speed emulation thanks to mature underlying emulator cores. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NES: &lt;a href=&#34;https://github.com/0ldsk00l/nestopia&#34;&gt;Nestopia&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;SNES: &lt;a href=&#34;https://github.com/snes9xgit/snes9x&#34;&gt;Snes9x&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;N64: &lt;a href=&#34;https://github.com/mupen64plus/mupen64plus-core&#34;&gt;mupen64plus&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GBC: &lt;a href=&#34;https://github.com/sinamas/gambatte&#34;&gt;Gambatte&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GBA: &lt;a href=&#34;https://github.com/visualboyadvance-m/visualboyadvance-m&#34;&gt;visualboyadvance-m&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;DS: &lt;a href=&#34;https://github.com/Arisotura/melonDS&#34;&gt;melonDS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GEN: &lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus GX&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Beautiful, native UI. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Browse and play your favorite games with a UI designed from the ground up for iOS.&lt;/li&gt; &#xA;   &lt;li&gt;Automatically displays appropriate box art for imported games.&lt;/li&gt; &#xA;   &lt;li&gt;Change a game’s artwork to anything you want, or select from the built-in game artwork database.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Controller Support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports PS4, PS5, Xbox One S, Xbox Series X, and MFi game controllers.&lt;/li&gt; &#xA;   &lt;li&gt;Supports bluetooth (and wired) keyboards, as well as the Apple Smart Keyboard.&lt;/li&gt; &#xA;   &lt;li&gt;Completely customize button mappings on a per-system, per-controller basis.&lt;/li&gt; &#xA;   &lt;li&gt;Map buttons to special “Quick Save”, “Quick Load,” and “Fast Forward” actions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom Controller Skins &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Beautiful built-in controller skins for all systems.&lt;/li&gt; &#xA;   &lt;li&gt;Import controller skins made by others, or even make your own to share with the world!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Save States &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Save and load save states for any game from the pause menu.&lt;/li&gt; &#xA;   &lt;li&gt;Lock save states to prevent them from being accidentally overwritten.&lt;/li&gt; &#xA;   &lt;li&gt;Automatically makes backup save states to ensure you never lose your progress.&lt;/li&gt; &#xA;   &lt;li&gt;Support for “Quick Saves,” save states that can be quickly saved/loaded with a single button press (requires external controller).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fast Forwarding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Speed through slower parts of games by running the game much faster than normal.&lt;/li&gt; &#xA;   &lt;li&gt;Easily enable or disable from the pause menu, or optionally with a mapped button on an external controller.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Delta Sync &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sync your games, game saves, save states, cheats, controller skins, and controller mappings between devices.&lt;/li&gt; &#xA;   &lt;li&gt;View version histories of everything you sync and optionally restore them to earlier versions.&lt;/li&gt; &#xA;   &lt;li&gt;Supports both Google Drive and Dropbox.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Hold Button &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Choose buttons for Delta to hold down on your behalf, freeing up your thumbs to press other buttons instead.&lt;/li&gt; &#xA;   &lt;li&gt;Perfect for games that typically require one button be held down constantly (ex: run button in Mario games, or the A button in Mario Kart).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;3D/Haptic Touch &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use 3D or Haptic Touch to “peek” at games, save states, and cheat codes.&lt;/li&gt; &#xA;   &lt;li&gt;App icon shortcuts allow quick access to your most recently played games, or optionally customize the shortcuts to always include certain games.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cheat Codes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NES &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Game Genie&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;SNES: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Game Genie&lt;/li&gt; &#xA;     &lt;li&gt;Pro Action Replay&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;N64 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;GameShark&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;GBC &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Game Genie&lt;/li&gt; &#xA;     &lt;li&gt;GameShark&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;GBA &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Action Replay&lt;/li&gt; &#xA;     &lt;li&gt;Code Breaker&lt;/li&gt; &#xA;     &lt;li&gt;GameShark&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;DS &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Action Replay&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Gyroscope support &lt;strong&gt;(WarioWare: Twisted! only)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Microphone support &lt;strong&gt;(DS only)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/705880/114452847-c1db4980-9b8d-11eb-8f8f-de7998562222.png&#34; width=&#34;100px&#34; height=&#34;100px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Delta was originally developed under the impression Apple would allow it into the App Store. Unfortunately Apple later changed their minds, leaving me no choice but to find a new way to distribute Delta. Long story short, this led me to create &lt;a href=&#34;https://github.com/rileytestut/AltStore&#34;&gt;AltStore&lt;/a&gt;, which now serves as the official way to install Delta onto your device.&lt;/p&gt; &#xA;&lt;p&gt;To install Delta with AltStore:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download AltServer for Mac or PC from &lt;a href=&#34;https://altstore.io&#34;&gt;https://altstore.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Connect your iOS device to your computer via lightning cable (or USB-C for iPads).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://altstore.io/faq/&#34;&gt;Follow these instructions&lt;/a&gt; to install AltStore onto your device with AltServer.&lt;/li&gt; &#xA; &lt;li&gt;Open AltStore on your device, then navigate to the &#34;Browse&#34; tab.&lt;/li&gt; &#xA; &lt;li&gt;Find Delta, then press the &lt;code&gt;FREE&lt;/code&gt; button to start installing the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once you&#39;ve installed Delta with AltStore, &lt;strong&gt;you&#39;ll need to refresh it at least once every 7 days to prevent it from expiring&lt;/strong&gt; and requiring a re-installation. AltStore will periodically attempt to refresh your apps in the background when on the same WiFi as AltServer, but you can also manually refresh apps by pressing &#34;Refresh All&#34; in AltStore. AltStore will also let you know whenever a new update is released, allowing you to update Delta directly within AltStore.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you are welcome to download the compiled &lt;code&gt;.ipa&lt;/code&gt;&#39;s from &lt;a href=&#34;https://github.com/rileytestut/Delta/releases&#34;&gt;Releases&lt;/a&gt; and sideload them using whatever sideloading method you prefer, but you will not receive automatic updates and will have to manually update Delta by re-sideloading each new version.&lt;/p&gt; &#xA;&lt;h2&gt;Project Overview&lt;/h2&gt; &#xA;&lt;p&gt;Delta was designed from the beginning to be modular, and for that reason each &#34;Delta Core&#34; has its own GitHub repo and is added as a submodule to the main Delta project. Additionally, Delta uses two of my own private frameworks I use to share common functionality between my apps: Roxas and Harmony.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rileytestut/Delta&#34;&gt;&lt;strong&gt;Delta&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; Delta is just a regular, sandboxed iOS application. The Delta app repo (aka this one) contains all the code specific to the Delta app itself, such as storyboards, app-specific view controllers, database logic, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rileytestut/DeltaCore&#34;&gt;&lt;strong&gt;DeltaCore&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; DeltaCore serves as the “middle-man” between the high-level app code and the specific emulation cores. By working with this framework, you have access to all the core Delta features, such as emulation, controller skins, save states, cheat codes, etc. Other potential emulator apps will use this framework extensively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rileytestut/Roxas&#34;&gt;&lt;strong&gt;Roxas&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; Roxas is my own framework used across my projects, developed to simplify a variety of common tasks used in iOS development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rileytestut/Harmony&#34;&gt;&lt;strong&gt;Harmony&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; Harmony is my personal syncing framework designed to sync Core Data databases. Harmony listens for changes to an app&#39;s persistent store, then syncs any changes with a remote file service (such as Google Drive or Dropbox).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Delta Cores&lt;/strong&gt;&lt;br&gt; Each system in Delta is implemented as its own &#34;Delta Core&#34;, which serves as a standard emulation API Delta can understand regardless of the underlying core. For the most part, you don&#39;t interact directly with specific Delta Cores, but rather indirectly through &lt;code&gt;DeltaCore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/NESDeltaCore&#34;&gt;NESDeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/SNESDeltaCore&#34;&gt;SNESDeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/N64DeltaCore&#34;&gt;N64DeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/GBCDeltaCore&#34;&gt;GBCDeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/GBADeltaCore&#34;&gt;GBADeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/MelonDSDeltaCore&#34;&gt;MelonDSDeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/GPGXDeltaCore&#34;&gt;GPGXDeltaCore&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Minimum Project Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 15&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.9&lt;/li&gt; &#xA; &lt;li&gt;iOS 14.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compilation Instructions&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Delta uses Git LFS to manage large files, so first make sure you have &lt;a href=&#34;https://git-lfs.github.com&#34;&gt;installed Git LFS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository by running the following command in Terminal*&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/rileytestut/Delta.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Update Git submodules&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd Delta&#xA;$ git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Systems/Systems.xcworkspace&lt;/code&gt; and select the &#34;Systems&#34; project in the project navigator (a.k.a. the left sidebar).&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Systems&#34; under &lt;code&gt;Targets&lt;/code&gt;, then click the &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Change &lt;code&gt;Team&lt;/code&gt; from &#34;Yvette Testut&#34; to your own account.&lt;/li&gt; &#xA; &lt;li&gt;Close &lt;code&gt;Systems/Systems.xcworkspace&lt;/code&gt;, then open &lt;code&gt;Delta.xcworkspace&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Repeat steps 4 &amp;amp; 5 with the &#34;Delta&#34; target.&lt;/li&gt; &#xA; &lt;li&gt;Change Delta&#39;s &lt;code&gt;Bundle Identifier&lt;/code&gt; to something unique, such as by appending your GitHub username (ex: &lt;code&gt;com.rileytestut.Delta.MyGitHubUsername&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Build + run app! 🎉&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;* This will checkout the &lt;code&gt;main&lt;/code&gt; branch by default, which is kept up-to-date with the latest public version. Ongoing development (including &lt;a href=&#34;https://www.patreon.com/rileytestut&#34;&gt;Patreon betas&lt;/a&gt;) is done on the &lt;code&gt;develop&lt;/code&gt; branch, and is periodically merged into &lt;code&gt;main&lt;/code&gt; whenever a new public version is released. If you&#39;d prefer to compile the &lt;code&gt;develop&lt;/code&gt; version instead, replace the &lt;code&gt;git clone&lt;/code&gt; command in Step #1 with this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone -b develop https://github.com/rileytestut/Delta.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Due to the licensing of emulator cores used by Delta, I have no choice but to distribute Delta under the &lt;strong&gt;AGPLv3 license&lt;/strong&gt;. That being said, I explicitly give permission for anyone to use, modify, and distribute all &lt;em&gt;my&lt;/em&gt; original code for this project in any form, with or without attribution, without fear of legal consequences — unless you plan to submit your app to Apple’s App Store, in which case written permission from me is explicitly required. Dependencies remain under their original licenses.&lt;/p&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:riley@rileytestut.com&#34;&gt;riley@rileytestut.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/rileytestut&#34;&gt;@rileytestut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>daltoniam/Starscream</title>
    <updated>2024-05-01T01:49:54Z</updated>
    <id>tag:github.com,2024-05-01:/daltoniam/Starscream</id>
    <link href="https://github.com/daltoniam/Starscream" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Websockets in swift for iOS and OSX&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/daltoniam/starscream/assets/starscream.jpg&#34; alt=&#34;starscream&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Starscream is a conforming WebSocket (&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6455&#34;&gt;RFC 6455&lt;/a&gt;) library in Swift.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Conforms to all of the base &lt;a href=&#34;https://crossbar.io/autobahn/&#34;&gt;Autobahn test suite&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Nonblocking. Everything happens in the background, thanks to GCD.&lt;/li&gt; &#xA; &lt;li&gt;TLS/WSS support.&lt;/li&gt; &#xA; &lt;li&gt;Compression Extensions support (&lt;a href=&#34;https://tools.ietf.org/html/rfc7692&#34;&gt;RFC 7692&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Import the framework&lt;/h3&gt; &#xA;&lt;p&gt;First thing is to import the framework. See the Installation instructions on how to add the framework to your project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Starscream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connect to the WebSocket Server&lt;/h3&gt; &#xA;&lt;p&gt;Once imported, you can open a connection to your WebSocket server. Note that &lt;code&gt;socket&lt;/code&gt; is probably best as a property, so it doesn&#39;t get deallocated right after being setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var request = URLRequest(url: URL(string: &#34;http://localhost:8080&#34;)!)&#xA;request.timeoutInterval = 5&#xA;socket = WebSocket(request: request)&#xA;socket.delegate = self&#xA;socket.connect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you are connected, there is either a delegate or closure you can use for process WebSocket events.&lt;/p&gt; &#xA;&lt;h3&gt;Receiving data from a WebSocket&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;didReceive&lt;/code&gt; receives all the WebSocket events in a single easy to handle enum.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func didReceive(event: WebSocketEvent, client: WebSocket) {&#xA;&#x9;switch event {&#xA;&#x9;case .connected(let headers):&#xA;&#x9;&#x9;isConnected = true&#xA;&#x9;&#x9;print(&#34;websocket is connected: \(headers)&#34;)&#xA;&#x9;case .disconnected(let reason, let code):&#xA;&#x9;&#x9;isConnected = false&#xA;&#x9;&#x9;print(&#34;websocket is disconnected: \(reason) with code: \(code)&#34;)&#xA;&#x9;case .text(let string):&#xA;&#x9;&#x9;print(&#34;Received text: \(string)&#34;)&#xA;&#x9;case .binary(let data):&#xA;&#x9;&#x9;print(&#34;Received data: \(data.count)&#34;)&#xA;&#x9;case .ping(_):&#xA;&#x9;&#x9;break&#xA;&#x9;case .pong(_):&#xA;&#x9;&#x9;break&#xA;&#x9;case .viabilityChanged(_):&#xA;&#x9;&#x9;break&#xA;&#x9;case .reconnectSuggested(_):&#xA;&#x9;&#x9;break&#xA;&#x9;case .cancelled:&#xA;&#x9;&#x9;isConnected = false&#xA;&#x9;case .error(let error):&#xA;&#x9;&#x9;isConnected = false&#xA;&#x9;&#x9;handleError(error)&#xA;        case .peerClosed:&#xA;               break&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The closure of this would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.onEvent = { event in&#xA;&#x9;switch event {&#xA;&#x9;&#x9;// handle events just like above...&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Writing to a WebSocket&lt;/h3&gt; &#xA;&lt;h3&gt;write a binary frame&lt;/h3&gt; &#xA;&lt;p&gt;The writeData method gives you a simple way to send &lt;code&gt;Data&lt;/code&gt; (binary) data to the server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.write(data: data) //write some Data over the socket!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;write a string frame&lt;/h3&gt; &#xA;&lt;p&gt;The writeString method is the same as writeData, but sends text/string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.write(string: &#34;Hi Server!&#34;) //example on how to write text over the socket!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;write a ping frame&lt;/h3&gt; &#xA;&lt;p&gt;The writePing method is the same as write, but sends a ping control frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.write(ping: Data()) //example on how to write a ping control frame over the socket!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;write a pong frame&lt;/h3&gt; &#xA;&lt;p&gt;the writePong method is the same as writePing, but sends a pong control frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.write(pong: Data()) //example on how to write a pong control frame over the socket!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starscream will automatically respond to incoming &lt;code&gt;ping&lt;/code&gt; control frames so you do not need to manually send &lt;code&gt;pong&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;p&gt;However if for some reason you need to control this process you can turn off the automatic &lt;code&gt;ping&lt;/code&gt; response by disabling &lt;code&gt;respondToPingWithPong&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.respondToPingWithPong = false //Do not automaticaly respond to incoming pings with pongs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In most cases you will not need to do this.&lt;/p&gt; &#xA;&lt;h3&gt;disconnect&lt;/h3&gt; &#xA;&lt;p&gt;The disconnect method does what you would expect and closes the socket.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.disconnect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The disconnect method can also send a custom close code if desired.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket.disconnect(closeCode: CloseCode.normal.rawValue)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Headers, Protocols and Timeout&lt;/h3&gt; &#xA;&lt;p&gt;You can override the default websocket headers, add your own custom ones and set a timeout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var request = URLRequest(url: URL(string: &#34;ws://localhost:8080/&#34;)!)&#xA;request.timeoutInterval = 5 // Sets the timeout for the connection&#xA;request.setValue(&#34;someother protocols&#34;, forHTTPHeaderField: &#34;Sec-WebSocket-Protocol&#34;)&#xA;request.setValue(&#34;14&#34;, forHTTPHeaderField: &#34;Sec-WebSocket-Version&#34;)&#xA;request.setValue(&#34;chat,superchat&#34;, forHTTPHeaderField: &#34;Sec-WebSocket-Protocol&#34;)&#xA;request.setValue(&#34;Everything is Awesome!&#34;, forHTTPHeaderField: &#34;My-Awesome-Header&#34;)&#xA;let socket = WebSocket(request: request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SSL Pinning&lt;/h3&gt; &#xA;&lt;p&gt;SSL Pinning is also supported in Starscream.&lt;/p&gt; &#xA;&lt;p&gt;Allow Self-signed certificates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var request = URLRequest(url: URL(string: &#34;ws://localhost:8080/&#34;)!)&#xA;let pinner = FoundationSecurity(allowSelfSigned: true) // don&#39;t validate SSL certificates&#xA;let socket = WebSocket(request: request, certPinner: pinner)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TODO: Update docs on how to load certificates and public keys into an app bundle, use the builtin pinner and TrustKit.&lt;/p&gt; &#xA;&lt;h3&gt;Compression Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Compression Extensions (&lt;a href=&#34;https://tools.ietf.org/html/rfc7692&#34;&gt;RFC 7692&lt;/a&gt;) is supported in Starscream. Compression is enabled by default, however compression will only be used if it is supported by the server as well. You may enable compression by adding a &lt;code&gt;compressionHandler&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var request = URLRequest(url: URL(string: &#34;ws://localhost:8080/&#34;)!)&#xA;let compression = WSCompression()&#xA;let socket = WebSocket(request: request, compressionHandler: compression)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compression should be disabled if your application is transmitting already-compressed, random, or other uncompressable data.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Queue&lt;/h3&gt; &#xA;&lt;p&gt;A custom queue can be specified when delegate methods are called. By default &lt;code&gt;DispatchQueue.main&lt;/code&gt; is used, thus making all delegate methods calls run on the main thread. It is important to note that all WebSocket processing is done on a background thread, only the delegate method calls are changed when modifying the queue. The actual processing is always on a background thread and will not pause your app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;socket = WebSocket(url: URL(string: &#34;ws://localhost:8080/&#34;)!, protocols: [&#34;chat&#34;,&#34;superchat&#34;])&#xA;//create a custom queue&#xA;socket.callbackQueue = DispatchQueue(label: &#34;com.vluxe.starscream.myapp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Project&lt;/h2&gt; &#xA;&lt;p&gt;Check out the SimpleTest project in the examples directory to see how to setup a simple connection to a WebSocket server.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Starscream works with iOS 8/10.10 or above for CocoaPods/framework support. To use Starscream with a project targeting iOS 7, you must include all Swift files directly in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding Starscream as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/daltoniam/Starscream.git&#34;, from: &#34;4.0.6&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;http://cocoapods.org/&#34;&gt;Get Started&lt;/a&gt; tab on &lt;a href=&#34;http://cocoapods.org/&#34;&gt;cocoapods.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use Starscream in your project add the following &#39;Podfile&#39; to your project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;12.0&#39;&#xA;use_frameworks!&#xA;&#xA;pod &#39;Starscream&#39;, &#39;~&amp;gt; 4.0.6&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; docs on how to add a install. The &lt;code&gt;Starscream&lt;/code&gt; framework is already setup with shared schemes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;Carthage Install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate Starscream into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;daltoniam/Starscream&#34; &amp;gt;= 4.0.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;Simply grab the framework (either via git submodule or another package manager).&lt;/p&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;Starscream.xcodeproj&lt;/code&gt; to your Xcode project. Once that is complete, in your &#34;Build Phases&#34; add the &lt;code&gt;Starscream.framework&lt;/code&gt; to your &#34;Link Binary with Libraries&#34; phase.&lt;/p&gt; &#xA;&lt;h3&gt;Add Copy Frameworks Phase&lt;/h3&gt; &#xA;&lt;p&gt;If you are running this in an OSX app or on a physical iOS device you will need to make sure you add the &lt;code&gt;Starscream.framework&lt;/code&gt; to be included in your app bundle. To do this, in Xcode, navigate to the target configuration window by clicking on the blue project icon, and selecting the application target under the &#34;Targets&#34; heading in the sidebar. In the tab bar at the top of that window, open the &#34;Build Phases&#34; panel. Expand the &#34;Link Binary with Libraries&#34; group, and add &lt;code&gt;Starscream.framework&lt;/code&gt;. Click on the + button at the top left of the panel and select &#34;New Copy Files Phase&#34;. Rename this new phase to &#34;Copy Frameworks&#34;, set the &#34;Destination&#34; to &#34;Frameworks&#34;, and add &lt;code&gt;Starscream.framework&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;h2&gt;TODOs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Proxy support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Thread safe implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better testing/CI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SSL Pinning/client auth examples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Starscream is licensed under the Apache v2 License.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;h3&gt;Dalton Cherry&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daltoniam&#34;&gt;https://github.com/daltoniam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/daltoniam&#34;&gt;http://twitter.com/daltoniam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://daltoniam.com&#34;&gt;http://daltoniam.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Austin Cherry&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acmacalister&#34;&gt;https://github.com/acmacalister&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/acmacalister&#34;&gt;http://twitter.com/acmacalister&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://austincherry.me&#34;&gt;http://austincherry.me&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mapbox/mapbox-maps-ios</title>
    <updated>2024-05-01T01:49:54Z</updated>
    <id>tag:github.com,2024-05-01:/mapbox/mapbox-maps-ios</id>
    <link href="https://github.com/mapbox/mapbox-maps-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interactive, thoroughly customizable maps for iOS powered by vector tiles and Metal&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mapbox-maps-ios&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cla-assistant.io/mapbox/mapbox-maps-ios&#34;&gt;&lt;img src=&#34;https://cla-assistant.io/readme/badge/mapbox/mapbox-maps-ios&#34; alt=&#34;CLA assistant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Mapbox Maps SDK for iOS is a public library for displaying interactive, thoroughly customizable maps in native iOS. It takes map styles that conform to the &lt;a href=&#34;https://docs.mapbox.com/mapbox-gl-js/style-spec/&#34;&gt;Mapbox Style Specification&lt;/a&gt;, applies them to vector tiles that conform to the &lt;a href=&#34;https://github.com/mapbox/vector-tile-spec&#34;&gt;Mapbox Vector Tile Specification&lt;/a&gt;, and renders them using Metal.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This README is intended for developers who are interested in contributing to the Mapbox Maps SDK for iOS. Please visit &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/&#34;&gt;https://docs.mapbox.com/ios/maps/guides/&lt;/a&gt; for general information and instructions on using the Maps SDK in your iOS application.&lt;/p&gt; &#xA;&lt;h2&gt;Examples App&lt;/h2&gt; &#xA;&lt;p&gt;The Examples app shows how to use many of the features in the Maps SDK. See the &lt;a href=&#34;https://github.com/mapbox/mapbox-maps-ios/tree/main/Apps/Examples/README.md&#34;&gt;Examples README&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in contributing to the Maps SDK, please see the &lt;a href=&#34;https://github.com/mapbox/mapbox-maps-ios/tree/main/DEVELOPING.md&#34;&gt;DEVELOPING.md&lt;/a&gt; file for information on setting up, running and building the SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting issues / Need help?&lt;/h2&gt; &#xA;&lt;h4&gt;Report a bug &lt;span&gt;🪲&lt;/span&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Please use our &lt;a href=&#34;https://github.com/mapbox/mapbox-maps-ios/issues/new?labels=bug%20%3Abeetle%3A&amp;amp;template=bug.md&#34;&gt;bug template&lt;/a&gt; to report any issues.&lt;/p&gt; &#xA;&lt;h4&gt;Request a new feature or enhancement &lt;span&gt;🍏&lt;/span&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Please use our &lt;a href=&#34;https://github.com/mapbox/mapbox-maps-ios/issues/new?labels=feature%20%3Agreen_apple%3A&amp;amp;template=feature.md&#34;&gt;feature template&lt;/a&gt; to request new features or enhancements.&lt;/p&gt; &#xA;&lt;h4&gt;Other questions&lt;/h4&gt; &#xA;&lt;p&gt;If you have any questions about how to use the SDK or if you need help with specific features, you can reach out to our support team &lt;a href=&#34;https://docs.mapbox.com/help/&#34;&gt;via our website&lt;/a&gt; or connect with our developer community by joining our &lt;a href=&#34;https://discord.gg/UshjQYyDFw&#34;&gt;Discord channel&lt;/a&gt;. We kindly ask you to avoid using the issue tracker in this repository for questions and instead use our support channels.&lt;/p&gt; &#xA;&lt;h2&gt;Historical Note&lt;/h2&gt; &#xA;&lt;p&gt;This repository is a continuation of the Mapbox Maps SDK for iOS available at &lt;a href=&#34;https://github.com/mapbox/mapbox-gl-native-ios&#34;&gt;mapbox/mapbox-gl-native-ios&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>