<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-01T01:49:49Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>whoeevee/EeveeSpotify</title>
    <updated>2024-06-01T01:49:49Z</updated>
    <id>tag:github.com,2024-06-01:/whoeevee/EeveeSpotify</id>
    <link href="https://github.com/whoeevee/EeveeSpotify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tweak to get Spotify Premium for free, just like Spotilife&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/whoeevee/EeveeSpotify/swift/Images/banner.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;EeveeSpotify&lt;/h1&gt; &#xA;&lt;p&gt;This tweak makes Spotify think you have a Premium subscription, granting free listening, just like Spotilife, and provides some additional features like custom lyrics.&lt;/p&gt; &#xA;&lt;h2&gt;The History&lt;/h2&gt; &#xA;&lt;p&gt;Several months ago, Spotilife, the only tweak to get Spotify Premium, stopped working on new Spotify versions. I decompiled Spotilife, reverse-engineered Spotify, intercepted requests, etc., and created this tweak.&lt;/p&gt; &#xA;&lt;h2&gt;Restrictions&lt;/h2&gt; &#xA;&lt;p&gt;Please refrain from opening issues about the following features, as they are server-sided and will &lt;strong&gt;NEVER&lt;/strong&gt; work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very High audio quality&lt;/li&gt; &#xA; &lt;li&gt;Native playlist downloading (you can download podcast episodes though)&lt;/li&gt; &#xA; &lt;li&gt;Jam (hosting a Spotify Jam and joining it remotely requires Premium; only joining in-person works)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In theory, implementing downloading/offline mode locally &lt;em&gt;should&lt;/em&gt; be possible, but it will &lt;strong&gt;not&lt;/strong&gt; be included in this tweak.&lt;/p&gt; &#xA;&lt;h2&gt;Lyrics Support&lt;/h2&gt; &#xA;&lt;p&gt;EeveeSpotify replaces Spotify monthly limited lyrics with one of the following three lyrics providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Genius: Offers the best quality lyrics, provides the most songs, and updates lyrics the fastest. Does not and will never be time-synced.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LRCLIB: The most open service, offering time-synced lyrics. However, it lacks lyrics for many songs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Musixmatch: The service Spotify uses. Provides time-synced lyrics for many songs, but you&#39;ll need a user token to use this source. To obtain the token, download Musixmatch from the App Store, sign up, then go to Settings &amp;gt; Get help &amp;gt; Copy debug info, and paste it into EeveeSpotify alert. You can also extract the token using MITM.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the tweak is unable to find a song or process the lyrics, you&#39;ll see a &#34;Couldn&#39;t load the lyrics for this song&#34; message. The lyrics might be wrong for some songs (e.g. another song, song article) when using Genius due to how the tweak searches songs. While I&#39;ve made it work in most cases, kindly refrain from opening issues about it.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Starting with version 4.0, EeveeSpotify intercepts Spotify requests to load user data, deserializes it, and modifies the parameters in real-time. This method is the best so far and works incredibly stable. You can select the dynamic Premium patching method in the EeveeSpotify settings.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Upon login, Spotify fetches user data and caches it in the &lt;code&gt;offline.bnk&lt;/code&gt; file in the &lt;code&gt;/Library/Application Support/PersistentCache&lt;/code&gt; directory. It uses its proprietary binary format to store data, incorporating a length byte before each value, among other conventions. Certain keys, such as &lt;code&gt;player-license&lt;/code&gt;, &lt;code&gt;financial-product&lt;/code&gt;, &lt;code&gt;streaming-rules&lt;/code&gt;, and others, determine the user abilities.&lt;/p&gt; &#xA;&lt;p&gt;The tweak patches this file while initializing; Spotify loads it and assumes you have Premium. To be honest, it doesn&#39;t really patch due to challenges with dynamic length and varied bytes. The tweak extracts the username from the current &lt;code&gt;offline.bnk&lt;/code&gt; file and inserts it into &lt;code&gt;premiumblank.bnk&lt;/code&gt; (a file containing all premium values preset), replacing &lt;code&gt;offline.bnk&lt;/code&gt;. Spotify may reload user data, and you&#39;ll be switched to the Free plan. When this happens, you&#39;ll see a popup with quick restart app and reset data actions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/whoeevee/EeveeSpotify/swift/Images/hex.png&#34; alt=&#34;Hex&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tweak also changes query parameters &lt;code&gt;trackRows&lt;/code&gt; and &lt;code&gt;video&lt;/code&gt; in HTTP requests to true, so Spotify loads videos and not just track names at the artist page. It can stop working just like Spotilife, but so far, it works on the latest Spotify 8.9.## (Spotilife also patches &lt;code&gt;offline.bnk&lt;/code&gt;, however, it changes obscure bytes that do nothing on new versions).&lt;/p&gt; &#xA;&lt;p&gt;To open Spotify links in sideloaded app, use &lt;a href=&#34;https://github.com/BillyCurtis/OpenSpotifySafariExtension&#34;&gt;OpenSpotifySafariExtension&lt;/a&gt;. Remember to activate it and allow access in Settings &amp;gt; Safari &amp;gt; Extensions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lihaoyun6/QuickRecorder</title>
    <updated>2024-06-01T01:49:49Z</updated>
    <id>tag:github.com,2024-06-01:/lihaoyun6/QuickRecorder</id>
    <link href="https://github.com/lihaoyun6/QuickRecorder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight screen recorder based on ScreenCapture Kit for macOS / 基于 ScreenCapture Kit 的轻量化多功能 macOS 录屏工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lihaoyun6/QuickRecorder/main/QuickRecorder/Assets.xcassets/AppIcon.appiconset/icon_128x128@2x.png&#34; width=&#34;200&#34; height=&#34;200&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;QuickRecorder&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;A lightweight and high-performance screen recorder for macOS&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lihaoyun6/QuickRecorder/main/README_zh.md&#34;&gt;[中文版本]&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://lihaoyun6.github.io/quickrecorder/&#34;&gt;[Landing Page]&lt;/a&gt; &lt;p&gt;&lt;/p&gt; &lt;/h3&gt;&#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./img/preview_en_dark.png&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./img/preview_en.png&#34;&gt; &#xA;  &lt;img alt=&#34;QuickRecorder Screenshots&#34; src=&#34;https://raw.githubusercontent.com/lihaoyun6/QuickRecorder/main/img/preview_en.png&#34; width=&#34;840&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation and Usage&lt;/h2&gt; &#xA;&lt;h3&gt;System Requirements:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 12.3 and Later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install:&lt;/h3&gt; &#xA;&lt;p&gt;Download the latest installation file &lt;a href=&#34;https://raw.githubusercontent.com/lihaoyun6/releases/latest&#34;&gt;here&lt;/a&gt; or install via Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install lihaoyun6/tap/quickrecorder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Features/Usage:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use QuickRecorder to record your screens / windows / applications / mobile devices... etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QuickRecorder supports driver-free audio loopback recording, mouse highlighting, screen magnifier and many more useful features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The new &lt;strong&gt;&#34;&lt;a href=&#34;https://support.apple.com/guide/facetime/presenter-overlay-video-conferencing-fctm6333f4bd/mac&#34;&gt;Presenter Overlay&lt;/a&gt;&#34;&lt;/strong&gt; in macOS 14 was fully supported by QuickRecorder, which can overlay the camera in real time on your recording &lt;em&gt;(macOS 12/13 can only use camera floating window)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QuickRecorder is able to record &lt;code&gt;HEVC with Alpha&lt;/code&gt; video format, that can contain alpha channel in the output file &lt;em&gt;(currently only iMovie and FCPX support this feature)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Where can I reopen the main panel after closing it?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Click the Dock tile or Menubar icon of QuickRecorder to reopen the main panel at any time.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Why does QuickRecorder not a sandbox app?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;QuickRecorder has no plans to be uploaded to the App Store, so it does not need to be designed as a sandbox app.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. How to independently control the volume of system sound and sound from microphone in other video editor?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;QuickRecorder will merge the audio input from the microphone to the main audio track after recording by default. If you need to edit the video, you can turn off the &#34;Mixdown the track from microphone&#34; option in the settings panel. After turning off, the system sound and sound from microphone will be recorded into two audio tracks and can be edited independently.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mnpn/Azayaka&#34;&gt;Azayaka&lt;/a&gt; @Mnpn&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The source of inspiration and part of the code of the screen recording engine comes from the Azayaka project, and I am also one of the code contributors to this project&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/KeyboardShortcuts&#34;&gt;KeyboardShortcuts&lt;/a&gt; @sindresorhus&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;QuickRecorder uses this swift library to handle shortcut key events&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hidden-spectrum/SwiftLAME&#34;&gt;SwiftLAME&lt;/a&gt; @Hidden Spectrum&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;QuickRecorder uses this swift library to handle MP3 output&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chat.openai.com&#34;&gt;ChatGPT&lt;/a&gt; @OpenAI&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Part of the code in this project was generated or refactored using ChatGPT.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>markiv/SwiftUI-Shimmer</title>
    <updated>2024-06-01T01:49:49Z</updated>
    <id>tag:github.com,2024-06-01:/markiv/SwiftUI-Shimmer</id>
    <link href="https://github.com/markiv/SwiftUI-Shimmer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shimmer is a super-light modifier that adds a shimmering effect to any SwiftUI View, for example, to show that an operation is in progress. It works well on light and dark modes, and across iOS, macOS, tvOS, watchOS and visionOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUI-Shimmer ✨&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Shimmer&lt;/code&gt; is a super-light modifier that adds a &#34;shimmering&#34; effect to any SwiftUI &lt;code&gt;View&lt;/code&gt;, for example, to show that an operation is in progress. It works well on light and dark modes, left-to-right and right-to-left layout directions, and across all Apple platforms: iOS, macOS, tvOS, watchOS and even visionOS! 📱💻🖥️📺⌚️🥽✨&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/Shimmer-visionOS.gif&#34; alt=&#34;visionOS&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/Shimmer-watchOS.gif&#34; alt=&#34;watchOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import Shimmer&#xA;⋮&#xA;⋮&#xA;Text(&#34;SwiftUI Shimmer&#34;).modifier(Shimmer())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or more conveniently&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;SwiftUI Shimmer&#34;).shimmering()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/light.gif&#34; alt=&#34;Light Mode&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/dark.gif&#34; alt=&#34;Dark Mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Optional Parameters ⚙️&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;active&lt;/code&gt;: Convenience parameter to conditionally enable the effect. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;animation&lt;/code&gt;: A custom animation. Defaults to &lt;code&gt;Shimmer.defaultAnimation&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gradient&lt;/code&gt;: A custom gradient. Defaults to &lt;code&gt;Shimmer.defaultGradient&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bandSize&lt;/code&gt;: The size of the animated mask&#39;s &#34;band&#34;. Defaults to 0.2 unit points, which corresponds to 20% of the extent of the gradient.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backward Compatible Parameters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;active&lt;/code&gt;: Convenience parameter to conditionally enable the effect. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;duration&lt;/code&gt;: The duration of a shimmer cycle in seconds. Default: &lt;code&gt;1.5&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bounce&lt;/code&gt;: Whether to bounce (reverse) the animation back and forth. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delay&lt;/code&gt;: A delay in seconds. Defaults to &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/bounce3.gif&#34; alt=&#34;Bounce 3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Custom Animations&lt;/h2&gt; &#xA;&lt;p&gt;You can supply any custom animation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Loading...&#34;)&#xA;    .shimmering(&#xA;        active: isAnimating,&#xA;        animation: .easeInOut(duration: 2).repeatCount(5, autoreverses: false).delay(1)&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gradient Mode&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the original masking mode (which is still the default), Shimmer now supports additional modes to apply the gradient, including as a background or an overlay with a custom blend mode:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/custom-gradient-mode.gif&#34; alt=&#34;Loading&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Custom Gradient Mode&#34;).bold()&#xA;    .font(.largeTitle)&#xA;    .shimmering(&#xA;        gradient: Gradient(colors: [.clear, .orange, .white, .green, .clear]),&#xA;        bandSize: 0.5,&#xA;        mode: .overlay()&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Animated Skeletons ☠️&lt;/h2&gt; &#xA;&lt;p&gt;Of course, you can combine &lt;code&gt;.shimmering(...)&lt;/code&gt; with the &lt;code&gt;.redacted(...)&lt;/code&gt; modifier to create interesting animated skeleton views.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/loading.gif&#34; alt=&#34;Loading&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Some text&#34;)&#xA;    .redacted(reason: .placeholder)&#xA;    .shimmering()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Right-To-Left (RTL) Support&lt;/h2&gt; &#xA;&lt;p&gt;The mask and animation now adjusts automatically to the environment&#39;s &lt;code&gt;layoutDirection&lt;/code&gt; in order to better support different languages and locales.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Use the package URL or search for the SwiftUI-Shimmer package: &lt;a href=&#34;https://github.com/markiv/SwiftUI-Shimmer&#34;&gt;https://github.com/markiv/SwiftUI-Shimmer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For how-to integrate package dependencies refer to &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;Adding Package Dependencies to Your App documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;Add this to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftUI-Shimmer&#39;, :git =&amp;gt; &#39;https://github.com/markiv/SwiftUI-Shimmer.git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What About UIKit?&lt;/h2&gt; &#xA;&lt;p&gt;For an older, UIKit-based shimmer effect, see &lt;a href=&#34;https://github.com/markiv/UIView-Shimmer&#34;&gt;UIView-Shimmer&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>