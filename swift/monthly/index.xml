<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-01T02:23:20Z</updated>
  <subtitle>Monthly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>intitni/CopilotForXcode</title>
    <updated>2023-04-01T02:23:20Z</updated>
    <id>tag:github.com,2023-04-01:/intitni/CopilotForXcode</id>
    <link href="https://github.com/intitni/CopilotForXcode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The missing GitHub Copilot and ChatGPT Xcode Source Editor Extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot for Xcode &lt;img alt=&#34;Logo&#34; src=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/AppIcon.png&#34; align=&#34;right&#34; height=&#34;50&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/Screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copilot for Xcode is an Xcode Source Editor Extension that provides Github Copilot and ChatGPT support for Xcode. It uses the LSP provided through &lt;a href=&#34;https://github.com/github/copilot.vim/tree/release/copilot/dist&#34;&gt;Copilot.vim&lt;/a&gt; to generate suggestions and displays them as comments or in a separate window.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/TerminalFi/LSP-copilot&#34;&gt;LSP-copilot&lt;/a&gt; for showing the way to interact with Copilot. And thanks to &lt;a href=&#34;https://github.com/ChimeHQ/LanguageClient&#34;&gt;LanguageClient&lt;/a&gt; for the Language Server Protocol support in Swift.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/intitni&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#permissions-required&#34;&gt;Permissions Required&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#installation-and-setup&#34;&gt;Installation and Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#sign-in-github-copilot&#34;&gt;Sign In GitHub Copilot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#granting-permissions-to-the-app&#34;&gt;Granting Permissions to the App&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#managing-copilotforxcodeextensionserviceapp&#34;&gt;Managing &lt;code&gt;CopilotForXcodeExtensionService.app&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#update&#34;&gt;Update&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#key-bindings&#34;&gt;Key Bindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#prevent-suggestions-being-committed&#34;&gt;Prevent Suggestions Being Committed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intitni/CopilotForXcode/issues/65&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For development instruction, check &lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/DEVELOPMENT.md&#34;&gt;Development.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node&lt;/a&gt; installed to run the Copilot LSP.&lt;/li&gt; &#xA; &lt;li&gt;Public network connection.&lt;/li&gt; &#xA; &lt;li&gt;Active GitHub Copilot subscription (to use suggestion features).&lt;/li&gt; &#xA; &lt;li&gt;Valid OpenAI API key (to use chat features).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions Required&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Folder Access&lt;/li&gt; &#xA; &lt;li&gt;Accessibility API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you are concerned about key logging and cannot trust the binary, we recommend examining the code and &lt;a href=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/DEVELOPMENT.md&#34;&gt;building it yourself&lt;/a&gt;. To address any concerns, you can specifically search for &lt;code&gt;CGEvent.tapCreate&lt;/code&gt;, &lt;code&gt;AXObserver&lt;/code&gt;, &lt;code&gt;AX___&lt;/code&gt; within the code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation and Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;You can install it via &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask copilot-for-xcode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it manually, by downloading the &lt;code&gt;Copilot for Xcode.app&lt;/code&gt; from the latest &lt;a href=&#34;https://github.com/intitni/CopilotForXcode/releases&#34;&gt;release&lt;/a&gt;, and extract it to the Applications folder.&lt;/p&gt; &#xA;&lt;p&gt;Then set it up with the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the app, the app will create a launch agent to setup a background running Service that does the real job.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optionally setup the path to Node. The default value is just &lt;code&gt;node&lt;/code&gt;, Copilot for Xcode.app will try to find the Node from &lt;code&gt;/usr/bin:/usr/local/bin&lt;/code&gt;. If your Node is installed somewhere else, you can run &lt;code&gt;which node&lt;/code&gt; from terminal to get the path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable the extension in &lt;code&gt;System Settings.app&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;From the Apple menu located in the top-left corner of your screen click &lt;code&gt;System Settings&lt;/code&gt;. Navigate to &lt;code&gt;Privacy &amp;amp; Security&lt;/code&gt; then toward the bottom click &lt;code&gt;Extensions&lt;/code&gt;. Click &lt;code&gt;Xcode Source Editor&lt;/code&gt; and tick &lt;code&gt;Copilot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you are using macOS Monterey, enter the &lt;code&gt;Extensions&lt;/code&gt; menu in &lt;code&gt;System Preferences.app&lt;/code&gt; with its dedicated icon.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Sign In GitHub Copilot&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the app, refresh the Copilot status (it may fail for the first time, try at least one more time).&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Sign In&#34;, and you will be directed to a verification website provided by GitHub, and a user code will be pasted into your clipboard.&lt;/li&gt; &#xA; &lt;li&gt;After signing in, go back to the app and click &#34;Confirm Sign-in&#34; to finish.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Granting Permissions to the App&lt;/h3&gt; &#xA;&lt;p&gt;The first time the app is open and command run, the extension will ask for the necessary permissions.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you may manually grant the required permissions by navigating to the &lt;code&gt;Privacy &amp;amp; Security&lt;/code&gt; tab in the &lt;code&gt;System Settings.app&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To grant permissions for the Accessibility API, click &lt;code&gt;Accessibility&lt;/code&gt;, and drag &lt;code&gt;CopilotForXcodeExtensionService.app&lt;/code&gt; to the list. You can locate the extension app by clicking &lt;code&gt;Reveal Extension App in Finder&lt;/code&gt; in the host app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img alt=&#34;Accessibility API&#34; src=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/accessibility_api_permission.png&#34; width=&#34;500px&#34;&gt; &#xA;&lt;p&gt;If you encounter an alert requesting permission that you have previously granted, please remove the permission from the list and add it again to re-grant the necessary permissions.&lt;/p&gt; &#xA;&lt;h3&gt;Managing &lt;code&gt;CopilotForXcodeExtensionService.app&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This app runs whenever you open &lt;code&gt;Copilot for Xcode.app&lt;/code&gt; or &lt;code&gt;Xcode.app&lt;/code&gt;. You can quit it with its menu bar item that looks like a steering wheel.&lt;/p&gt; &#xA;&lt;p&gt;You can also set it to quit automatically when the above 2 apps are closed.&lt;/p&gt; &#xA;&lt;h2&gt;Update&lt;/h2&gt; &#xA;&lt;p&gt;If the app was installed via Homebrew, you can update it by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew upgrade --cask copilot-for-xcode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, You can use the in-app updater or download the latest version manually from the latest &lt;a href=&#34;https://github.com/intitni/CopilotForXcode/releases&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are upgrading from a version lower than &lt;strong&gt;0.7.0&lt;/strong&gt;, please run &lt;code&gt;Copilot for Xcode.app&lt;/code&gt; at least once to let it set up the new launch agent for you and re-grant the permissions according to the new rules.&lt;/p&gt; &#xA;&lt;p&gt;If you want to keep track of the new releases, you can watch the releases of this repo to get notifications about updates.&lt;/p&gt; &#xA;&lt;p&gt;If you find that some of the features are no longer working, please first try regranting permissions to the app.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Suggestion&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get Suggestions: Get suggestions for the editing file at the current cursor position.&lt;/li&gt; &#xA; &lt;li&gt;Next Suggestion: If there is more than one suggestion, switch to the next one.&lt;/li&gt; &#xA; &lt;li&gt;Previous Suggestion: If there is more than one suggestion, switch to the previous one.&lt;/li&gt; &#xA; &lt;li&gt;Accept Suggestion: Add the suggestion to the code.&lt;/li&gt; &#xA; &lt;li&gt;Reject Suggestion: Remove the suggestion comments.&lt;/li&gt; &#xA; &lt;li&gt;Toggle Real-time Suggestions: When turn on, Copilot will auto-insert suggestion comments to your code while editing.&lt;/li&gt; &#xA; &lt;li&gt;Real-time Suggestions: Call only by Copilot for Xcode. When suggestions are successfully fetched, Copilot for Xcode will run this command to present the suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Prefetch Suggestions: Call only by Copilot for Xcode. In the background, Copilot for Xcode will occasionally run this command to prefetch real-time suggestions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;About real-time suggestions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whenever you stop typing for a few milliseconds, the app will automatically fetch suggestions for you, you can cancel this by clicking the mouse, or pressing &lt;strong&gt;Escape&lt;/strong&gt; or the &lt;strong&gt;arrow keys&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chat&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat with Selection: Open a chat window, if there is a selection, the selected code will be added to the prompt.&lt;/li&gt; &#xA; &lt;li&gt;Explain Selection: Open a chat window and explain the selected code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Chat commands are not available in comment mode.&lt;/p&gt; &#xA;&lt;h2&gt;Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;It looks like there is no way to add default key bindings to commands, but you can set them up in &lt;code&gt;Xcode settings &amp;gt; Key Bindings&lt;/code&gt;. You can filter the list by typing &lt;code&gt;copilot&lt;/code&gt; in the search bar.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/intitni/CopilotForXcode/issues/14&#34;&gt;recommended setup&lt;/a&gt; that should cause no conflict is&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Key Binding&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get Suggestions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;⌥?&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Accept Suggestions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;⌥}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reject Suggestion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;⌥{&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Next Suggestion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;⌥&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Previous Suggestion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;⌥&amp;lt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Essentially using &lt;code&gt;⌥⇧&lt;/code&gt; as the &#34;access&#34; key combination for all bindings.&lt;/p&gt; &#xA;&lt;p&gt;Another convenient method to access commands is by using the &lt;code&gt;⇧⌘/&lt;/code&gt; shortcut to search for a command in the menu bar.&lt;/p&gt; &#xA;&lt;h2&gt;Prevent Suggestions Being Committed (in comment mode)&lt;/h2&gt; &#xA;&lt;p&gt;Since the suggestions are presented as comments, they are in your code. If you are not careful enough, they can be committed to your git repo. To avoid that, I would recommend adding a pre-commit git hook to prevent this from happening.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh&#xA;&#xA;# Check if the commit message contains the string&#xA;if git diff --cached --diff-filter=ACMR | grep -q &#34;/*========== Copilot Suggestion&#34;; then&#xA;  echo &#34;Error: Commit contains Copilot suggestions generated by Copilot for Xcode.&#34;&#xA;  exit 1&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first run of the extension will be slow. Be patient.&lt;/li&gt; &#xA; &lt;li&gt;The extension uses some dirty tricks to get the file and project/workspace paths. It may fail, it may be incorrect, especially when you have multiple Xcode windows running, and maybe even worse when they are in different displays. I am not sure about that though.&lt;/li&gt; &#xA; &lt;li&gt;The suggestions are presented as C-style comments in comment mode, they may break your code if you are editing a JSON file or something.&lt;/li&gt; &#xA; &lt;li&gt;When a real-time suggestion request is triggered, there is a chance that it may briefly block the editor. This can occur at most once for each file after each restart of the extension because the extension needs to initiate real-time suggestion by clicking an item from the menu bar. However, once a command has been executed and some information is cached, the extension will be able to trigger real-time suggestion using a different method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>adamrushy/OpenAISwift</title>
    <updated>2023-04-01T02:23:20Z</updated>
    <id>tag:github.com,2023-04-01:/adamrushy/OpenAISwift</id>
    <link href="https://github.com/adamrushy/OpenAISwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a wrapper library around the ChatGPT and OpenAI HTTP API&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://swiftpackageindex.com/adamrushy/OpenAISwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fadamrushy%2FOpenAISwift%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/adamrushy/OpenAISwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fadamrushy%2FOpenAISwift%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/adamrushy/OpenAISwift&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/adamrushy/OpenAISwift/swift.yml?branch=main&#34; alt=&#34;GitHub Workflow Status (with branch)&#34;&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/adam9rush&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/adam9rush?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;OpenAI API Client Library in Swift&lt;/h1&gt; &#xA;&lt;p&gt;This is a community-maintained library to access OpenAI HTTP API&#39;s. The full API docs can be found here: &lt;a href=&#34;https://beta.openai.com/docs&#34;&gt;https://beta.openai.com/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation 💻&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager (Preferred)&lt;/h3&gt; &#xA;&lt;p&gt;You can use Swift Package Manager to integrate the library by adding the following dependency in the &lt;code&gt;Package.swift&lt;/code&gt; file or by adding it directly within Xcode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.Package(url: &#34;https://github.com/adamrushy/OpenAISwift.git&#34;, majorVersion: 1)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Copy the source files into your own project.&lt;/p&gt; &#xA;&lt;h2&gt;Usage 🤩&lt;/h2&gt; &#xA;&lt;p&gt;Import the framework in your project:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;import OpenAISwift&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;Create an OpenAI API key&lt;/a&gt; and add it to your configuration:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;let openAI = OpenAISwift(authToken: &#34;TOKEN&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This framework supports Swift concurrency; each example below has both an async/await and completion handler variant.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://platform.openai.com/docs/api-reference/completions&#34;&gt;Completions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Predict completions for input text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;openAI.sendCompletion(with: &#34;Hello how are you&#34;) { result in // Result&amp;lt;OpenAI, OpenAIError&amp;gt;&#xA;    switch result {&#xA;    case .success(let success):&#xA;        print(success.choices.first?.text ?? &#34;&#34;)&#xA;    case .failure(let failure):&#xA;        print(failure.localizedDescription)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This returns an &lt;code&gt;OpenAI&lt;/code&gt; object containing the completions.&lt;/p&gt; &#xA;&lt;p&gt;Other API parameters are also supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let result = try await openAI.sendCompletion(&#xA;        with: &#34;What&#39;s your favorite color?&#34;,&#xA;        model: .gpt3(.davinci), // optional `OpenAIModelType`&#xA;        maxTokens: 16,          // optional `Int?`&#xA;        temperature: 1          // optional `Double?`&#xA;    )&#xA;    // use result&#xA;} catch {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a full list of supported models, see &lt;a href=&#34;https://github.com/adamrushy/OpenAISwift/raw/main/Sources/OpenAISwift/Models/OpenAIModelType.swift&#34;&gt;OpenAIModelType.swift&lt;/a&gt;. For more information on the models see the &lt;a href=&#34;https://beta.openai.com/docs/models&#34;&gt;OpenAI API Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat&#34;&gt;Chat&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Get responses to chat conversations through ChatGPT (aka GPT-3.5) and GPT-4 (in beta).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let chat: [ChatMessage] = [&#xA;        ChatMessage(role: .system, content: &#34;You are a helpful assistant.&#34;),&#xA;        ChatMessage(role: .user, content: &#34;Who won the world series in 2020?&#34;),&#xA;        ChatMessage(role: .assistant, content: &#34;The Los Angeles Dodgers won the World Series in 2020.&#34;),&#xA;        ChatMessage(role: .user, content: &#34;Where was it played?&#34;)&#xA;    ]&#xA;                &#xA;    let result = try await openAI.sendChat(with: chat)&#xA;    // use result&#xA;} catch {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All API parameters are supported, except streaming message content before it is completed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let chat: [ChatMessage] = [...]&#xA;&#xA;    let result = try await openAI.sendChat(&#xA;        with: chat,&#xA;        model: .chat(.chatgpt),         // optional `OpenAIModelType`&#xA;        user: nil,                      // optional `String?`&#xA;        temperature: 1,                 // optional `Double?`&#xA;        topProbabilityMass: 1,          // optional `Double?`&#xA;        choices: 1,                     // optional `Int?`&#xA;        stop: nil,                      // optional `[String]?`&#xA;        maxTokens: nil,                 // optional `Int?`&#xA;        presencePenalty: nil,           // optional `Double?`&#xA;        frequencyPenalty: nil,          // optional `Double?`&#xA;        logitBias: nil                 // optional `[Int: Double]?` (see inline documentation)&#xA;    )&#xA;    // use result&#xA;} catch {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://platform.openai.com/docs/api-reference/images/create&#34;&gt;Images (DALL·E)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Generate an image based on a prompt.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;openAI.sendImages(with: &#34;A 3d render of a rocket ship&#34;, numImages: 1, size: .size1024) { result in // Result&amp;lt;OpenAI, OpenAIError&amp;gt;&#xA;    switch result {&#xA;    case .success(let success):&#xA;        print(success.data.first?.url ?? &#34;&#34;)&#xA;    case .failure(let failure):&#xA;        print(failure.localizedDescription)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://platform.openai.com/docs/api-reference/edits&#34;&gt;Edits&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Edits text based on a prompt and an instruction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let result = try await openAI.sendEdits(&#xA;        with: &#34;Improve the tone of this text.&#34;,&#xA;        model: .feature(.davinci),               // optional `OpenAIModelType`&#xA;        input: &#34;I am resigning!&#34;&#xA;    )&#xA;    // use result&#xA;} catch {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://platform.openai.com/docs/api-reference/moderations&#34;&gt;Moderation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Classifies text for moderation purposes (see OpenAI reference for more info).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let result = try await openAI.sendModeration(&#xA;        with: &#34;Some harmful text...&#34;,&#xA;        model: .moderation(.latest)     // optional `OpenAIModelType`&#xA;    )&#xA;    // use result&#xA;} catch {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute ❤️&lt;/h2&gt; &#xA;&lt;p&gt;I created this mainly for fun, we can add more endpoints and explore the library even further. Feel free to raise a PR to help grow the library.&lt;/p&gt; &#xA;&lt;h2&gt;Licence 📥&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2022 Adam Rush&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>overtake/TelegramSwift</title>
    <updated>2023-04-01T02:23:20Z</updated>
    <id>tag:github.com,2023-04-01:/overtake/TelegramSwift</id>
    <link href="https://github.com/overtake/TelegramSwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code of Telegram for macos on Swift 5.0&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/overtake/TelegramSwift/master/Telegram-Mac/Assets.xcassets/AppIcon.appiconset/Logo_1024.png&#34; width=&#34;125&#34; height=&#34;125&#34;&gt; &#xA; &lt;h2 align=&#34;center&#34;&gt;Telegram for macOS&lt;/h2&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/overtake/TelegramSwift/master/images/tg.png&#34; alt=&#34;Telegram macOS screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://telegram.org&#34;&gt;&lt;strong&gt;Telegram&lt;/strong&gt;&lt;/a&gt; is a messaging app with a focus on speed and security. It’s superfast, simple, and free! This repo contains the official source code for &lt;a href=&#34;https://macos.telegram.org/&#34;&gt;Telegram for macOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get it&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/telegram/id747648890?mt=12&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/overtake/TelegramSwift/master/images/mas_badge.png&#34; alt=&#34;Download on the Mac App Store&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew cask install telegram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;mas-cli&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;mas install 747648890&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual download&lt;/h3&gt; &#xA;&lt;p&gt;If you would like, you can &lt;a href=&#34;https://telegram.org/dl/macos&#34;&gt;download the non-MAS version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://telegram.org/dl/macos/beta&#34;&gt;download the beta version&lt;/a&gt; if you want to try the latest features and you are prepared for bugs and crashes. If you are running the beta, join the &lt;a href=&#34;https://t.me/macswift&#34;&gt;beta testing chat on Telegram&lt;/a&gt; to report bugs.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Contributors on GitHub&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/overtake/TelegramSwift/graphs/contributors&#34;&gt;this repository’s contributors graph&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bugs and Suggestions&lt;/h3&gt; &#xA;&lt;p&gt;You can report bug or suggestions feature for Telegram for macOS on &lt;a href=&#34;https://bugs.telegram.org&#34;&gt;Telegram’s Bugs &amp;amp; Suggestions platform&lt;/a&gt;. Read &lt;a href=&#34;https://bugs.telegram.org/c/746&#34;&gt;the platform tip&lt;/a&gt; before creating first card.&lt;/p&gt; &#xA;&lt;h3&gt;Translations&lt;/h3&gt; &#xA;&lt;p&gt;You can help translate Telegram for macOS on &lt;a href=&#34;https://translations.telegram.org&#34;&gt;Telegram’s translations platform&lt;/a&gt;. Pick your language, then look for the macOS translation set.&lt;/p&gt; &#xA;&lt;!--### Third-party libraries--&gt; &#xA;&lt;!--See [LIBRARIES](LIBRARIES.md).--&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;p&gt;Telegram strives to protect your privacy. This app asks for as few permissions as possible:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Microphone&lt;/strong&gt;: You can send voice messages and make audio calls with Telegram.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Camera&lt;/strong&gt;: You can set your profile picture using your Mac’s iSight camera.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Location&lt;/strong&gt;: You can send your location to friends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Outgoing network connections&lt;/strong&gt;: Telegram needs to connect to the internet to send your messages to your friends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Incoming network connections&lt;/strong&gt;: Telegram needs to accept incoming connections for peer-to-peer voice calls.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User-selected files&lt;/strong&gt;: You can save files or images to your Mac.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Downloads folder&lt;/strong&gt;: Telegram can automatically download files or images you receive.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/overtake/TelegramSwift/wiki&#34;&gt;Shortcuts&lt;/a&gt; you can learn how easy is navigate using your devices.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Telegram for macOS is licensed under the GNU Public License, version 2.0. See &lt;a href=&#34;https://raw.githubusercontent.com/overtake/TelegramSwift/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Forking&lt;/h2&gt; &#xA;&lt;p&gt;You can fork this application and make something awesome! Make sure that your fork follows these five requirements:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Do&lt;/strong&gt; &lt;a href=&#34;https://core.telegram.org/api/obtaining_api_id&#34;&gt;get your own API ID&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Don’t&lt;/strong&gt; call your fork &lt;strong&gt;Telegram&lt;/strong&gt; — or at least make sure your users understand that yours is unofficial.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Don’t&lt;/strong&gt; use our standard logo (white paper plane in a blue circle) for your fork.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Do&lt;/strong&gt; read and follow our &lt;a href=&#34;https://core.telegram.org/mtproto/security_guidelines&#34;&gt;security guidelines&lt;/a&gt; to make sure you take good care of your users’ data and protect their privacy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Do&lt;/strong&gt; publish your code. The &lt;a href=&#34;https://raw.githubusercontent.com/overtake/TelegramSwift/master/LICENSE&#34;&gt;GPL license&lt;/a&gt; requires it!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;Instructions for building Telegram for macOS are in &lt;a href=&#34;https://raw.githubusercontent.com/overtake/TelegramSwift/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>