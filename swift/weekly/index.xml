<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-21T02:03:31Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/generative-ai-swift</title>
    <updated>2023-05-21T02:03:31Z</updated>
    <id>tag:github.com,2023-05-21:/google/generative-ai-swift</id>
    <link href="https://github.com/google/generative-ai-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google Generative AI SDK for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google Generative AI SDK for Swift&lt;/h1&gt; &#xA;&lt;p&gt;The Google Generative AI SDK for Swift allows developers to use state-of-the-art Large Language Models (LLMs) to build language applications.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve added the Swift package to your Swift application, you can call the API as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GoogleGenerativeAI&#xA;&#xA;let palmClient = GenerativeLanguage(apiKey: &#34;YOUR API KEY&#34;)&#xA;response = try await palmClient.chat(message: &#34;Hello&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a few sample apps. To try them out, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out this repository. &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;git clone https://github.com/google/generative-ai-swift&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Follow the instructions on the &lt;a href=&#34;https://developers.generativeai.google/tutorials/setup&#34;&gt;setup page&lt;/a&gt; to obtain an API key.&lt;/li&gt; &#xA; &lt;li&gt;Open and build one of the examples in the &lt;code&gt;Examples&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;Paste the API key into the &lt;code&gt;API_KEY&lt;/code&gt; property in the &lt;code&gt;PaLM-Info.plist&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Run the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using the PaLM SDK in your own app&lt;/h2&gt; &#xA;&lt;p&gt;To use the Swift SDK for the PaLM API in your own apps, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new Swift app (or use your existing app).&lt;/li&gt; &#xA; &lt;li&gt;Right-click on your project in the project navigator.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;em&gt;Add Packages&lt;/em&gt; from the context menu.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;em&gt;Add Packages&lt;/em&gt; dialog, paste the package URL into the search bar: &lt;a href=&#34;https://github.com/google/generative-ai-swift&#34;&gt;https://github.com/google/generative-ai-swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;em&gt;Add Package&lt;/em&gt;. Xcode will now add the &lt;em&gt;GoogleGenerativeAI&lt;/em&gt; to your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Initializing the API client&lt;/h3&gt; &#xA;&lt;p&gt;Before you can make any API calls, you need to import and initialize the API client.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Import the &lt;code&gt;GoogleGenerativeAI&lt;/code&gt; module: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GoogleGenerativeAI&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Initialize the API client: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let palmClient = GenerativeLanguage(apiKey: &#34;YOUR API KEY&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Calling the API&lt;/h3&gt; &#xA;&lt;p&gt;Now you&#39;re ready to call the PaLM API&#39;s methods.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All API methods are asynchronous, so you need to call them using Swift&#39;s async/await.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For example, here is how you can call the &lt;code&gt;generateText&lt;/code&gt; method to summarize a Wikipedia article:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let prompt = &#34;Summarise the following text: https://wikipedia.org/...&#34;&#xA;&#xA;let response = try await palmClient.generateText(with: prompt)&#xA;&#xA;if let candidate = response?.candidates?.first, let text = candidate.output {&#xA;  print(text)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the documentation for the PaLM API at &lt;a href=&#34;https://developers.generativeai.google.com/guide&#34;&gt;https://developers.generativeai.google.com/guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/generative-ai-swift/main/docs/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Generative AI SDK for Swift.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository are licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twostraws/ControlRoom</title>
    <updated>2023-05-21T02:03:31Z</updated>
    <id>tag:github.com,2023-05-21:/twostraws/ControlRoom</id>
    <link href="https://github.com/twostraws/ControlRoom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A macOS app to control the Xcode Simulator.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://www.hackingwithswift.com/files/controlroom/logo.png&#34; alt=&#34;Control Room logo&#34; width=&#34;400” maxHeight=&#34; 91&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/macOS-13+-blue.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5.8-brightgreen.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://twitter.com/twostraws&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Contact-@twostraws-lightgrey.svg?style=flat&#34; alt=&#34;Twitter: @twostraws&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Control Room is a macOS app that lets you control the simulators for iOS, tvOS, and watchOS –&amp;nbsp;their UI appearance, status bar configuration, and more. It wraps Apple’s own &lt;strong&gt;simctl&lt;/strong&gt; command-line tool, so you’ll need Xcode installed.&lt;/p&gt; &#xA;&lt;p&gt;You’ll need Xcode 14.0 or later to build and use Control Room on your Mac.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To try Control Room yourself, download the code and build it through Xcode. It’s built using SwiftUI, so you’ll need macOS Big Sur in order to run it. You will also need Xcode installed, because it relies on the &lt;strong&gt;simctl&lt;/strong&gt; command being present –&amp;nbsp;if you see an error that you’re missing the command line tools, go to Xcode&#39;s Preferences, choose the Locations tab, then make sure Xcode is selected for Command Line Tools.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Control Room is packed with features to help you develop apps more effectively, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Taking screenshots and movies, optionally adding the device bezels to your screenshots.&lt;/li&gt; &#xA; &lt;li&gt;Adjusting the system time and date to whatever you want, including Apple’s preferred 9:41.&lt;/li&gt; &#xA; &lt;li&gt;Controlling status of WiFi, cellular service, and battery.&lt;/li&gt; &#xA; &lt;li&gt;Opening the data folder for your app, or editing your &lt;code&gt;UserDefaults&lt;/code&gt; entries.&lt;/li&gt; &#xA; &lt;li&gt;Overriding dark or light mode, language, accessibility options, and Dynamic Type content size.&lt;/li&gt; &#xA; &lt;li&gt;Picking a custom user location from anywhere in the world.&lt;/li&gt; &#xA; &lt;li&gt;Starting, stopping, installing, and removing apps.&lt;/li&gt; &#xA; &lt;li&gt;Sending test push notifications or triggering deep links.&lt;/li&gt; &#xA; &lt;li&gt;Selecting colors from the simulator, converting them to UIKit or SwiftUI code, or even dragging directly into your asset catalog.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Plus there’s an optional menu bar icon adding quick actions such as re-sending the last push notification or re-opening your last deep link.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution guide&lt;/h2&gt; &#xA;&lt;p&gt;Any help you can offer with this project is most welcome – there are opportunities big and small so that someone with only a small amount of Swift experience can help.&lt;/p&gt; &#xA;&lt;p&gt;Some suggestions you might want to explore:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handle errors in a meaningful way.&lt;/li&gt; &#xA; &lt;li&gt;Add documentation in the code or here in the README.&lt;/li&gt; &#xA; &lt;li&gt;Did I mention handling errors in a meaningful way?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You’re also welcome to try adding some tests, although given our underlying use of simctl that might be tricky.&lt;/p&gt; &#xA;&lt;p&gt;If you spot any errors please open an issue and let us know which macOS and Xcode versions you’re using.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please ensure that SwiftLint returns no errors or warnings before you send in changes.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Control Room was originally designed and built by Paul Hudson, and is copyright © Paul Hudson 2023. The icon was designed by Raphael Lopes.&lt;/p&gt; &#xA;&lt;p&gt;Control Room is licensed under the MIT license; for the full license please see the &lt;a href=&#34;https://raw.githubusercontent.com/twostraws/ControlRoom/main/LICENSE&#34;&gt;LICENSE file&lt;/a&gt;. Many other folks have contributed features, fixes, and more to make Control Room what it is today. Control Room is built on top of Apple’s &lt;strong&gt;simctl&lt;/strong&gt; command – the team who built that deserve the real credit here.&lt;/p&gt; &#xA;&lt;p&gt;Swift, the Swift logo, and Xcode are trademarks of Apple Inc., registered in the U.S. and other countries.&lt;/p&gt; &#xA;&lt;p&gt;If you find Control Room useful, you might find my website full of Swift tutorials equally useful: &lt;a href=&#34;https://www.hackingwithswift.com&#34;&gt;Hacking with Swift&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emqx/MQTT-Client-Examples</title>
    <updated>2023-05-21T02:03:31Z</updated>
    <id>tag:github.com,2023-05-21:/emqx/MQTT-Client-Examples</id>
    <link href="https://github.com/emqx/MQTT-Client-Examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MQTT Client Examples&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MQTT Client Examples&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains examples of MQTT clients using the MQTT 3.1, 3.1.1, and 5.0 protocols. You can use these examples to learn about the MQTT protocol and how to use MQTT clients with any MQTT broker.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT SECURITY TIP&lt;/strong&gt;: Before submitting any code changes, please change your username and password to &#34;emqx/public&#34; in the examples&#39; configuration files. This will prevent any unintended access to your MQTT broker.&lt;/p&gt; &#xA;&lt;h2&gt;MQTT Broker for Testing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to test these examples, you can use the MQTT broker provided by EMQ X at &lt;code&gt;broker.emqx.io&lt;/code&gt;. Please note that this is a public broker and should not be used for production.&lt;/p&gt; &#xA;&lt;p&gt;The broker supports the following protocols:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Broker: broker.emqx.io&lt;/li&gt; &#xA; &lt;li&gt;TCP Port: 1883&lt;/li&gt; &#xA; &lt;li&gt;WebSocket Port: 8083&lt;/li&gt; &#xA; &lt;li&gt;SSL/TLS Port: 8883&lt;/li&gt; &#xA; &lt;li&gt;WebSocket Secure Port: 8084&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directory Structure&lt;/h2&gt; &#xA;&lt;p&gt;Each directory contains examples in the respective programming language. Examples are organized into folders, with each folder containing an example program. Please see the README file for each example program to learn how to run the example.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have any suggestions or improvements regarding MQTT client examples, feel free to submit a pull request. Before submitting a PR, please make sure that you have tested your code and passed all test cases.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repository is licensed under the MIT License. Please see the LICENSE file for more information&lt;/p&gt;</summary>
  </entry>
</feed>