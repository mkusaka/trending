<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-10T02:24:11Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SnapKit/SnapKit</title>
    <updated>2022-07-10T02:24:11Z</updated>
    <id>tag:github.com,2022-07-10:/SnapKit/SnapKit</id>
    <link href="https://github.com/SnapKit/SnapKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift Autolayout DSL for iOS &amp; OS X&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://snapkit.github.io/SnapKit/images/banner.jpg&#34; alt=&#34;&#34;&gt; &#xA;&lt;p&gt;SnapKit is a DSL to make Auto Layout easy on both iOS and OS X.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SnapKit/SnapKit&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SnapKit/SnapKit.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SnapKit/SnapKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/SnapKit.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SnapKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SnapKit.svg?sanitize=true&#34; alt=&#34;Cocoapods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;⚠️ &lt;strong&gt;To use with Swift 4.x please ensure you are using &amp;gt;= 4.0.0&lt;/strong&gt; ⚠️&lt;/h4&gt; &#xA;&lt;h4&gt;⚠️ &lt;strong&gt;To use with Swift 5.x please ensure you are using &amp;gt;= 5.0.0&lt;/strong&gt; ⚠️&lt;/h4&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#migration-guides&#34;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#communication&#34;&gt;Communication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.0+ / Mac OS X 10.12+ / tvOS 10.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.0+&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Migration Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/Documentation/SnapKit%203.0%20Migration%20Guide.md&#34;&gt;SnapKit 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/snapkit&#34;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;snapkit&#39;)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/snapkit&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. You can install it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CocoaPods 1.1.0+ is required to build SnapKit 4.0.0+.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To integrate SnapKit into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;10.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;    pod &#39;SnapKit&#39;, &#39;~&amp;gt; 5.6.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate SnapKit into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;SnapKit/SnapKit&#34; ~&amp;gt; 5.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; to build the framework and drag the built &lt;code&gt;SnapKit.framework&lt;/code&gt; into your Xcode project.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code. It’s integrated with the Swift build system to automate the process of downloading, compiling, and linking dependencies.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Xcode 11+ is required to build SnapKit using Swift Package Manager.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To integrate SnapKit into your Xcode project using Swift Package Manager, add it to the dependencies value of your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/SnapKit/SnapKit.git&#34;, .upToNextMajor(from: &#34;5.0.1&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use either of the aforementioned dependency managers, you can integrate SnapKit into your project manually.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SnapKit&#xA;&#xA;class MyViewController: UIViewController {&#xA;&#xA;    lazy var box = UIView()&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;&#xA;        self.view.addSubview(box)&#xA;        box.backgroundColor = .green&#xA;        box.snp.makeConstraints { (make) -&amp;gt; Void in&#xA;           make.width.height.equalTo(50)&#xA;           make.center.equalTo(self.view)&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Playground&lt;/h3&gt; &#xA;&lt;p&gt;You can try SnapKit in Playground.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To try SnapKit in playground, open &lt;code&gt;SnapKit.xcworkspace&lt;/code&gt; and build SnapKit.framework for any simulator first.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snapkit.github.io/SnapKit/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snapkit.github.io/SnapKit/faq/&#34;&gt;F.A.Q.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Robert Payne (&lt;a href=&#34;https://twitter.com/robertjpayne&#34;&gt;@robertjpayne&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Many other contributors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SnapKit is released under the MIT license. See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>danielgindi/Charts</title>
    <updated>2022-07-10T02:24:11Z</updated>
    <id>tag:github.com,2022-07-10:/danielgindi/Charts</id>
    <link href="https://github.com/danielgindi/Charts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Beautiful charts for iOS/tvOS/OSX! The Apple side of the crossplatform MPAndroidChart.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Version 4.0.0&lt;/strong&gt;, synced to &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart/commit/f6a398b&#34;&gt;MPAndroidChart #f6a398b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/danielgindi/Charts/master/Assets/feature_graphic.png&#34; alt=&#34;alt tag&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/Charts.svg?sanitize=true&#34; alt=&#34;Supported Platforms&#34;&gt; &lt;a href=&#34;https://github.com/danielgindi/Charts/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/danielgindi/Charts.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/charts&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Charts.svg?sanitize=true&#34; alt=&#34;Latest pod release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/danielgindi/Charts&#34;&gt;&lt;img src=&#34;https://travis-ci.org/danielgindi/Charts.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/danielgindi/Charts&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/danielgindi/Charts/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/danielgindi/Charts?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/danielgindi/Charts.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/danielgindi/Charts&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Just a heads up: Charts 3.0 has some breaking changes. Please read &lt;a href=&#34;https://github.com/danielgindi/Charts/releases/tag/v3.0.0&#34;&gt;the release/migration notes&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;h3&gt;Another heads up: ChartsRealm is now in a &lt;a href=&#34;https://github.com/danielgindi/ChartsRealm&#34;&gt;separate repo&lt;/a&gt;. Pods is also now &lt;code&gt;Charts&lt;/code&gt; and &lt;code&gt;ChartsRealm&lt;/code&gt;, instead of &lt;del&gt;&lt;code&gt;Charts/Core&lt;/code&gt;&lt;/del&gt; and &lt;del&gt;&lt;code&gt;Charts/Realm&lt;/code&gt;&lt;/del&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;One more heads up: As Swift evolves, if you are not using the latest Swift compiler, you shouldn&#39;t check out the master branch. Instead, you should go to the release page and pick up whatever suits you.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11 / Swift 5 (master branch)&lt;/li&gt; &#xA; &lt;li&gt;iOS &amp;gt;= 8.0 (Use as an &lt;strong&gt;Embedded&lt;/strong&gt; Framework)&lt;/li&gt; &#xA; &lt;li&gt;tvOS &amp;gt;= 9.0&lt;/li&gt; &#xA; &lt;li&gt;macOS &amp;gt;= 10.11&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Okay so there&#39;s this beautiful library called &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; by &lt;a href=&#34;https://www.linkedin.com/in/philippjahoda&#34;&gt;Philipp Jahoda&lt;/a&gt; which has become very popular amongst Android developers, but there was no decent solution to create charts for iOS.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve chosen to write it in &lt;code&gt;Swift&lt;/code&gt; as it can be highly optimized by the compiler, and can be used in both &lt;code&gt;Swift&lt;/code&gt; and &lt;code&gt;ObjC&lt;/code&gt; project. The demo project is written in &lt;code&gt;ObjC&lt;/code&gt; to demonstrate how it works.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;An amazing feature&lt;/strong&gt; of this library now, for Android, iOS, tvOS and macOS, is the time it saves you when developing for both platforms, as the learning curve is singleton- it happens only once, and the code stays very similar so developers don&#39;t have to go around and re-invent the app to produce the same output with a different library. (And that&#39;s not even considering the fact that there&#39;s not really another good choice out there currently...)&lt;/p&gt; &#xA;&lt;h2&gt;Having trouble running the demo?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ChartsDemo/ChartsDemo.xcodeproj&lt;/code&gt; is the demo project for iOS/tvOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ChartsDemo-OSX/ChartsDemo-OSX.xcodeproj&lt;/code&gt; is the demo project for macOS&lt;/li&gt; &#xA; &lt;li&gt;Make sure you are running a supported version of Xcode. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Usually it is specified here a few lines above.&lt;/li&gt; &#xA;   &lt;li&gt;In most cases it will be the latest Xcode version.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Make sure that your project supports Swift 5.0&lt;/li&gt; &#xA; &lt;li&gt;Optional: Run &lt;code&gt;carthage checkout&lt;/code&gt; in the project folder, to fetch dependencies (i.e testing dependencies). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you don&#39;t have Carthage - you can get it &lt;a href=&#34;https://github.com/Carthage/Carthage/releases&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In order to correctly compile:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag the &lt;code&gt;Charts.xcodeproj&lt;/code&gt; to your project&lt;/li&gt; &#xA; &lt;li&gt;Go to your target&#39;s settings, hit the &#34;+&#34; under the &#34;Embedded Binaries&#34; section, and select the Charts.framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@import Charts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;When using Swift in an ObjC project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need to import your Bridging Header. Usually it is &#34;&lt;em&gt;YourProject-Swift.h&lt;/em&gt;&#34;, so in ChartsDemo it&#39;s &#34;&lt;em&gt;ChartsDemo-Swift.h&lt;/em&gt;&#34;. Do not try to actually include &#34;&lt;em&gt;ChartsDemo-Swift.h&lt;/em&gt;&#34; in your project :-)&lt;/li&gt; &#xA; &lt;li&gt;(Xcode 8.1 and earlier) Under &#34;Build Options&#34;, mark &#34;Embedded Content Contains Swift Code&#34;&lt;/li&gt; &#xA; &lt;li&gt;(Xcode 8.2+) Under &#34;Build Options&#34;, mark &#34;Always Embed Swift Standard Libraries&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;When using &lt;a href=&#34;https://realm.io/&#34;&gt;Realm.io&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that the Realm framework is not linked with Charts - it is only there for &lt;em&gt;optional&lt;/em&gt; bindings. Which means that you need to have the framework in your project, and in a compatible version to whatever is compiled with Charts. We will do our best to always compile against the latest version.&lt;/li&gt; &#xA;   &lt;li&gt;You&#39;ll need to add &lt;code&gt;ChartsRealm&lt;/code&gt; as a dependency too.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;3rd party tutorials&lt;/h2&gt; &#xA;&lt;h4&gt;Video tutorials&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mWhwe_tLNE8&amp;amp;list=PL_csAAO9PQ8bjzg-wxEff1Fr0Y5W1hrum&amp;amp;index=5&#34;&gt;Chart in Swift - Setting Up a Basic Line Chart Using iOS Charts(Alex Nagy)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/csd7pyfEXgw&#34;&gt;Charts Framework in SwiftUI - Bar Chart (Stewart Lynch)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Blog posts&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@skoli/using-realm-and-charts-with-swift-3-in-ios-10-40c42e3838c0#.2gyymwfh8&#34;&gt;Using Realm and Charts with Swift 3 in iOS 10 (Sami Korpela)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@OsianSmith/creating-a-line-chart-in-swift-3-and-ios-10-2f647c95392e&#34;&gt;Creating a Line Chart in Swift 3 and iOS 10 (Osian Smith)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/annalizhaz/ChartsForSwiftBasic&#34;&gt;Beginning Set-up and Example Using Charts with Swift 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@HeyDaveTheDev/creating-a-radar-chart-in-swift-5791afcf92f0&#34;&gt;Creating a Radar Chart in Swift (David Piper)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@zzzzbh/plotting-in-ios-using-charts-framework-with-swiftui-222034a2bea6&#34;&gt;Plotting in IOS using Charts framework with SwiftUI (Evgeny Basisty)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@penny-huang/swift-setting-up-a-basic-bar-chart-using-ios-charts-afd6aad96ac&#34;&gt;Set Up a Basic Bar Chart Using iOS-Charts (Penny Huang)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@penny-huang/swift-ios-charts-tutorial-highlight-selected-value-with-a-custom-marker-30ccbf92aa1b&#34;&gt;iOS-Charts Tutorial: Highlight Selected Value With a Custom Marker (Penny Huang)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want your tutorial to show here? Create a PR!&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h4&gt;Can&#39;t compile?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please note the difference between installing a compiled framework from CocoaPods or Carthage, and copying the source code.&lt;/li&gt; &#xA; &lt;li&gt;Please read the &lt;strong&gt;Usage&lt;/strong&gt; section again.&lt;/li&gt; &#xA; &lt;li&gt;Search in the issues&lt;/li&gt; &#xA; &lt;li&gt;Try to politely ask in the issues section&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other problems / feature requests&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search in the issues&lt;/li&gt; &#xA; &lt;li&gt;Try to politely ask in the issues section&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CocoaPods Install&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;pod &#39;Charts&#39;&lt;/code&gt; to your Podfile. &#34;Charts&#34; is the name of the library.&lt;br&gt; For &lt;a href=&#34;https://realm.io/&#34;&gt;Realm&lt;/a&gt; support, please add &lt;code&gt;pod &#39;ChartsRealm&#39;&lt;/code&gt; too.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;del&gt;&lt;code&gt;pod &#39;ios-charts&#39;&lt;/code&gt;&lt;/del&gt; is not the correct library, and refers to a different project by someone else.&lt;/p&gt; &#xA;&lt;h2&gt;Carthage Install&lt;/h2&gt; &#xA;&lt;p&gt;Charts now include Carthage prebuilt binaries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-carthage&#34;&gt;github &#34;danielgindi/Charts&#34; == 4.0.0&#xA;github &#34;danielgindi/Charts&#34; ~&amp;gt; 4.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to build the binaries for a new release, use &lt;code&gt;carthage build --no-skip-current &amp;amp;&amp;amp; carthage archive Charts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Package Manager Install&lt;/h2&gt; &#xA;&lt;p&gt;Swift Package Manager&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/danielgindi/Charts.git&#34;, .upToNextMajor(from: &#34;4.0.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3rd party bindings&lt;/h2&gt; &#xA;&lt;p&gt;Xamarin (by @Flash3001): &lt;em&gt;iOS&lt;/em&gt; - &lt;a href=&#34;https://github.com/Flash3001/iOSCharts.Xamarin&#34;&gt;GitHub&lt;/a&gt;/&lt;a href=&#34;https://www.nuget.org/packages/iOSCharts/&#34;&gt;NuGet&lt;/a&gt;. &lt;em&gt;Android&lt;/em&gt; - &lt;a href=&#34;https://github.com/Flash3001/MPAndroidChart.Xamarin&#34;&gt;GitHub&lt;/a&gt;/&lt;a href=&#34;https://www.nuget.org/packages/MPAndroidChart/&#34;&gt;NuGet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you like what you see here, and want to support the work being done in this repository, you could:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contribute code, issues and pull requests&lt;/li&gt; &#xA; &lt;li&gt;Let people know this library exists (&lt;span&gt;🔥&lt;/span&gt; spread the word &lt;span&gt;🔥&lt;/span&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=68UL6Y8KUPS96&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; (You can buy me a beer, or you can buy me dinner :-)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The author of &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; is the reason that this library exists, and is accepting &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart#donations&#34;&gt;donations&lt;/a&gt; on his page. He deserves them!&lt;/p&gt; &#xA;&lt;h2&gt;Questions &amp;amp; Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you are having questions or problems, you should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you are using the latest version of the library. Check the &lt;a href=&#34;https://github.com/danielgindi/Charts/releases&#34;&gt;&lt;strong&gt;release-section&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Study the Android version&#39;s &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart/wiki&#34;&gt;&lt;strong&gt;Documentation-Wiki&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Search or open questions on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/ios-charts&#34;&gt;&lt;strong&gt;stackoverflow&lt;/strong&gt;&lt;/a&gt; with the &lt;code&gt;ios-charts&lt;/code&gt; tag&lt;/li&gt; &#xA; &lt;li&gt;Search &lt;a href=&#34;https://github.com/danielgindi/Charts/issues&#34;&gt;&lt;strong&gt;known issues&lt;/strong&gt;&lt;/a&gt; for your problem (open and closed)&lt;/li&gt; &#xA; &lt;li&gt;Create new issues (please &lt;span&gt;🔥&lt;/span&gt; &lt;strong&gt;search known issues before&lt;/strong&gt; &lt;span&gt;🔥&lt;/span&gt;, do not create duplicate issues)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;8 different chart types&lt;/li&gt; &#xA; &lt;li&gt;Scaling on both axes (with touch-gesture, axes separately or pinch-zoom)&lt;/li&gt; &#xA; &lt;li&gt;Dragging / Panning (with touch-gesture)&lt;/li&gt; &#xA; &lt;li&gt;Combined-Charts (line-, bar-, scatter-, candle-stick-, bubble-)&lt;/li&gt; &#xA; &lt;li&gt;Dual (separate) Axes&lt;/li&gt; &#xA; &lt;li&gt;Customizable Axes (both x- and y-axis)&lt;/li&gt; &#xA; &lt;li&gt;Highlighting values (with customizable popup-views)&lt;/li&gt; &#xA; &lt;li&gt;Save chart to camera-roll / export to PNG/JPEG&lt;/li&gt; &#xA; &lt;li&gt;Predefined color templates&lt;/li&gt; &#xA; &lt;li&gt;Legends (generated automatically, customizable)&lt;/li&gt; &#xA; &lt;li&gt;Animations (build up animations, on both x- and y-axis)&lt;/li&gt; &#xA; &lt;li&gt;Limit lines (providing additional information, maximums, ...)&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable (paints, typefaces, legends, colors, background, gestures, dashed lines, ...)&lt;/li&gt; &#xA; &lt;li&gt;Plotting data directly from &lt;a href=&#34;https://realm.io&#34;&gt;&lt;strong&gt;Realm.io&lt;/strong&gt;&lt;/a&gt; mobile database (&lt;a href=&#34;https://github.com/danielgindi/ChartsRealm&#34;&gt;here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chart types:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshots are currently taken from the original repository, as they render exactly the same :-)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (with legend, simple design)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_linechart4.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (with legend, simple design)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_linechart3.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (cubic lines)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/cubiclinechart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;LineChart (gradient fill)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/line_chart_gradient.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Combined-Chart (bar- and linechart in this case)&lt;/strong&gt; &lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/combined_chart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;BarChart (with legend, simple design)&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/simpledesign_barchart3.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BarChart (grouped DataSets)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/groupedbarchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Horizontal-BarChart&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPChart/master/screenshots/horizontal_barchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PieChart (with selection, ...)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/simpledesign_piechart1.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ScatterChart&lt;/strong&gt; (with squares, triangles, circles, ... and more)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/scatterchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CandleStickChart&lt;/strong&gt; (for financial data)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/candlestickchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BubbleChart&lt;/strong&gt; (area covered by bubbles indicates the value)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/bubblechart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RadarChart&lt;/strong&gt; (spider web chart)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/PhilJay/MPAndroidChart/master/screenshots/radarchart.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Currently there&#39;s no need for documentation for the iOS/tvOS/macOS version, as the API is &lt;strong&gt;95% the same&lt;/strong&gt; as on Android.&lt;br&gt; You can read the official &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart&#34;&gt;MPAndroidChart&lt;/a&gt; documentation here: &lt;a href=&#34;https://github.com/PhilJay/MPAndroidChart/wiki&#34;&gt;&lt;strong&gt;Wiki&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can see the Charts Demo project in both Objective-C and Swift (&lt;a href=&#34;https://github.com/danielgindi/Charts/tree/master/ChartsDemo-iOS&#34;&gt;&lt;strong&gt;ChartsDemo-iOS&lt;/strong&gt;&lt;/a&gt;, as well as macOS &lt;a href=&#34;https://github.com/danielgindi/Charts/tree/master/ChartsDemo-macOS&#34;&gt;&lt;strong&gt;ChartsDemo-macOS&lt;/strong&gt;&lt;/a&gt;) and learn the how-tos from it.&lt;/p&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;p&gt;Goes to &lt;a href=&#34;https://github.com/liuxuan30&#34;&gt;@liuxuan30&lt;/a&gt;, &lt;a href=&#34;https://github.com/petester42&#34;&gt;@petester42&lt;/a&gt; and &lt;a href=&#34;https://github.com/AlBirdie&#34;&gt;@AlBirdie&lt;/a&gt; for new features, bugfixes, and lots and lots of involvement in our open-sourced community! You guys are a huge help to all of those coming here with questions and issues, and I couldn&#39;t respond to all of those without you.&lt;/p&gt; &#xA;&lt;h3&gt;Our amazing sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://debricked.com/&#34;&gt;Debricked&lt;/a&gt;: Use open source securely&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://debricked.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4375169/73585544-25bfa800-44dd-11ea-9661-82519a125302.jpg&#34; alt=&#34;debricked&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2016 Daniel Cohen Gindi &amp;amp; Philipp Jahoda&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://www.apache.org/licenses/LICENSE-2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SwiftyJSON/SwiftyJSON</title>
    <updated>2022-07-10T02:24:11Z</updated>
    <id>tag:github.com,2022-07-10:/SwiftyJSON/SwiftyJSON</id>
    <link href="https://github.com/SwiftyJSON/SwiftyJSON" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The better way to deal with JSON data in Swift.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftyJSON&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/SwiftyJSON.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%208.0%20%7C%20macOS%2010.10%20%7C%20tvOS%209.0%20%7C%20watchOS%203.0-F28D00.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SwiftyJSON makes it easy to deal with JSON data in Swift.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Build Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;*OS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://travis-ci.org/SwiftyJSON/SwiftyJSON&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SwiftyJSON/SwiftyJSON.svg?branch=master&#34; alt=&#34;Travis CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/IBM-Swift/SwiftyJSON&#34;&gt;Linux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://travis-ci.org/IBM-Swift/SwiftyJSON&#34;&gt;&lt;img src=&#34;https://travis-ci.org/IBM-Swift/SwiftyJSON.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#why-is-the-typical-json-handling-in-swift-not-good&#34;&gt;Why is the typical JSON handling in Swift NOT good&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#integration&#34;&gt;Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#subscript&#34;&gt;Subscript&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#loop&#34;&gt;Loop&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#error&#34;&gt;Error&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#optional-getter&#34;&gt;Optional getter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#non-optional-getter&#34;&gt;Non-optional getter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#setter&#34;&gt;Setter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#raw-object&#34;&gt;Raw object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#literal-convertibles&#34;&gt;Literal convertibles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#merging&#34;&gt;Merging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#work-with-alamofire&#34;&gt;Work with Alamofire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#work-with-moya&#34;&gt;Work with Moya&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#swiftyjson-model-generator&#34;&gt;SwiftyJSON Model Generator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Why is the typical JSON handling in Swift NOT good?&lt;/h2&gt; &#xA;&lt;p&gt;Swift is very strict about types. But although explicit typing is good for saving us from mistakes, it becomes painful when dealing with JSON and other areas that are, by nature, implicit about types.&lt;/p&gt; &#xA;&lt;p&gt;Take the Twitter API for example. Say we want to retrieve a user&#39;s &#34;name&#34; value of some tweet in Swift (according to &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline&#34;&gt;Twitter&#39;s API&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The code would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let statusesArray = try? JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [[String: Any]],&#xA;    let user = statusesArray[0][&#34;user&#34;] as? [String: Any],&#xA;    let username = user[&#34;name&#34;] as? String {&#xA;    // Finally we got the username&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s not good.&lt;/p&gt; &#xA;&lt;p&gt;Even if we use optional chaining, it would be messy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let JSONObject = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [[String: Any]],&#xA;    let username = (JSONObject[0][&#34;user&#34;] as? [String: Any])?[&#34;name&#34;] as? String {&#xA;        // There&#39;s our username&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An unreadable mess--for something that should really be simple!&lt;/p&gt; &#xA;&lt;p&gt;With SwiftyJSON all you have to do is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(data: dataFromNetworking)&#xA;if let userName = json[0][&#34;user&#34;][&#34;name&#34;].string {&#xA;  //Now you got your value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And don&#39;t worry about the Optional Wrapping thing. It&#39;s done for you automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(data: dataFromNetworking)&#xA;let result = json[999999][&#34;wrong_key&#34;][&#34;wrong_name&#34;]&#xA;if let userName = result.string {&#xA;    //Calm down, take it easy, the &#34;.string&#34; property still produces the correct Optional String type with safety&#xA;} else {&#xA;    //Print the error&#xA;    print(result.error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 8.0+ | macOS 10.10+ | tvOS 9.0+ | watchOS 2.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods (iOS 8+, OS X 10.9+)&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding it to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;8.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;MyApp&#39; do&#xA;    pod &#39;SwiftyJSON&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage (iOS 8+, OS X 10.9+)&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding it to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;SwiftyJSON/SwiftyJSON&#34; ~&amp;gt; 4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use Carthage to build your dependencies, make sure you have added &lt;code&gt;SwiftyJSON.framework&lt;/code&gt; to the &#34;Linked Frameworks and Libraries&#34; section of your target, and have included them in your Carthage framework copying build phase.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;The Swift Package Manager&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding the proper description to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:4.0&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;YOUR_PROJECT_NAME&#34;,&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/SwiftyJSON/SwiftyJSON.git&#34;, from: &#34;4.0.0&#34;),&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;swift build&lt;/code&gt; whenever you get prepared.&lt;/p&gt; &#xA;&lt;h4&gt;Manually (iOS 7+, OS X 10.9+)&lt;/h4&gt; &#xA;&lt;p&gt;To use this library in your project manually you may:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;for Projects, just drag SwiftyJSON.swift to the project tree&lt;/li&gt; &#xA; &lt;li&gt;for Workspaces, include the whole SwiftyJSON.xcodeproj&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Initialization&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftyJSON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(data: dataFromNetworking)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(jsonObject)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let dataFromString = jsonString.data(using: .utf8, allowLossyConversion: false) {&#xA;    let json = JSON(data: dataFromString)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Subscript&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting a double from a JSON Array&#xA;let name = json[0].double&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting an array of string from a JSON Array&#xA;let arrayNames =  json[&#34;users&#34;].arrayValue.map {$0[&#34;name&#34;].stringValue}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting a string from a JSON Dictionary&#xA;let name = json[&#34;name&#34;].stringValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting a string using a path to the element&#xA;let path: [JSONSubscriptType] = [1,&#34;list&#34;,2,&#34;name&#34;]&#xA;let name = json[path].string&#xA;// Just the same&#xA;let name = json[1][&#34;list&#34;][2][&#34;name&#34;].string&#xA;// Alternatively&#xA;let name = json[1,&#34;list&#34;,2,&#34;name&#34;].string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With a hard way&#xA;let name = json[].string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With a custom way&#xA;let keys:[JSONSubscriptType] = [1,&#34;list&#34;,2,&#34;name&#34;]&#xA;let name = json[keys].string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Loop&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If json is .Dictionary&#xA;for (key,subJson):(String, JSON) in json {&#xA;   // Do something you want&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;The first element is always a String, even if the JSON is an Array&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If json is .Array&#xA;// The `index` is 0..&amp;lt;json.count&#39;s string value&#xA;for (index,subJson):(String, JSON) in json {&#xA;    // Do something you want&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Error&lt;/h4&gt; &#xA;&lt;h5&gt;SwiftyJSON 4.x&lt;/h5&gt; &#xA;&lt;p&gt;SwiftyJSON 4.x introduces an enum type called &lt;code&gt;SwiftyJSONError&lt;/code&gt;, which includes &lt;code&gt;unsupportedType&lt;/code&gt;, &lt;code&gt;indexOutOfBounds&lt;/code&gt;, &lt;code&gt;elementTooDeep&lt;/code&gt;, &lt;code&gt;wrongType&lt;/code&gt;, &lt;code&gt;notExist&lt;/code&gt; and &lt;code&gt;invalidJSON&lt;/code&gt;, at the same time, &lt;code&gt;ErrorDomain&lt;/code&gt; are being replaced by &lt;code&gt;SwiftyJSONError.errorDomain&lt;/code&gt;. Note: Those old error types are deprecated in SwiftyJSON 4.x and will be removed in the future release.&lt;/p&gt; &#xA;&lt;h5&gt;SwiftyJSON 3.x&lt;/h5&gt; &#xA;&lt;p&gt;Use a subscript to get/set a value in an Array or Dictionary&lt;/p&gt; &#xA;&lt;p&gt;If the JSON is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;an array, the app may crash with &#34;index out-of-bounds.&#34;&lt;/li&gt; &#xA; &lt;li&gt;a dictionary, it will be assigned to &lt;code&gt;nil&lt;/code&gt; without a reason.&lt;/li&gt; &#xA; &lt;li&gt;not an array or a dictionary, the app may crash with an &#34;unrecognised selector&#34; exception.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will never happen in SwiftyJSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON([&#34;name&#34;, &#34;age&#34;])&#xA;if let name = json[999].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[999].error!) // &#34;Array[999] is out of bounds&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON([&#34;name&#34;:&#34;Jack&#34;, &#34;age&#34;: 25])&#xA;if let name = json[&#34;address&#34;].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[&#34;address&#34;].error!) // &#34;Dictionary[&#34;address&#34;] does not exist&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(12345)&#xA;if let age = json[0].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[0])       // &#34;Array[0] failure, It is not an array&#34;&#xA;    print(json[0].error!) // &#34;Array[0] failure, It is not an array&#34;&#xA;}&#xA;&#xA;if let name = json[&#34;name&#34;].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[&#34;name&#34;])       // &#34;Dictionary[\&#34;name&#34;] failure, It is not an dictionary&#34;&#xA;    print(json[&#34;name&#34;].error!) // &#34;Dictionary[\&#34;name&#34;] failure, It is not an dictionary&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Optional getter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// NSNumber&#xA;if let id = json[&#34;user&#34;][&#34;favourites_count&#34;].number {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;favourites_count&#34;].error!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// String&#xA;if let id = json[&#34;user&#34;][&#34;name&#34;].string {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;name&#34;].error!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Bool&#xA;if let id = json[&#34;user&#34;][&#34;is_translator&#34;].bool {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;is_translator&#34;].error!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Int&#xA;if let id = json[&#34;user&#34;][&#34;id&#34;].int {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;id&#34;].error!)&#xA;}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Non-optional getter&lt;/h4&gt; &#xA;&lt;p&gt;Non-optional getter is named &lt;code&gt;xxxValue&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not a Number or nil, return 0&#xA;let id: Int = json[&#34;id&#34;].intValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not a String or nil, return &#34;&#34;&#xA;let name: String = json[&#34;name&#34;].stringValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not an Array or nil, return []&#xA;let list: Array&amp;lt;JSON&amp;gt; = json[&#34;list&#34;].arrayValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not a Dictionary or nil, return [:]&#xA;let user: Dictionary&amp;lt;String, JSON&amp;gt; = json[&#34;user&#34;].dictionaryValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;json[&#34;name&#34;] = JSON(&#34;new-name&#34;)&#xA;json[0] = JSON(1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;json[&#34;id&#34;].int =  1234567890&#xA;json[&#34;coordinate&#34;].double =  8766.766&#xA;json[&#34;name&#34;].string =  &#34;Jack&#34;&#xA;json.arrayObject = [1,2,3,4]&#xA;json.dictionaryObject = [&#34;name&#34;:&#34;Jack&#34;, &#34;age&#34;:25]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Raw object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rawObject: Any = json.object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rawValue: Any = json.rawValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//convert the JSON to raw NSData&#xA;do {&#xA;&#x9;let rawData = try json.rawData()&#xA;  //Do something you want&#xA;} catch {&#xA;&#x9;print(&#34;Error \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//convert the JSON to a raw String&#xA;if let rawString = json.rawString() {&#xA;  //Do something you want&#xA;} else {&#xA;&#x9;print(&#34;json.rawString is nil&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Existence&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// shows you whether value specified in JSON or not&#xA;if json[&#34;name&#34;].exists()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Literal convertibles&lt;/h4&gt; &#xA;&lt;p&gt;For more info about literal convertibles: &lt;a href=&#34;http://nshipster.com/swift-literal-convertible/&#34;&gt;Swift Literal Convertibles&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// StringLiteralConvertible&#xA;let json: JSON = &#34;I&#39;m a json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/ /IntegerLiteralConvertible&#xA;let json: JSON =  12345&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// BooleanLiteralConvertible&#xA;let json: JSON =  true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// FloatLiteralConvertible&#xA;let json: JSON =  2.8765&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DictionaryLiteralConvertible&#xA;let json: JSON =  [&#34;I&#34;:&#34;am&#34;, &#34;a&#34;:&#34;json&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// ArrayLiteralConvertible&#xA;let json: JSON =  [&#34;I&#34;, &#34;am&#34;, &#34;a&#34;, &#34;json&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With subscript in array&#xA;var json: JSON =  [1,2,3]&#xA;json[0] = 100&#xA;json[1] = 200&#xA;json[2] = 300&#xA;json[999] = 300 // Don&#39;t worry, nothing will happen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With subscript in dictionary&#xA;var json: JSON =  [&#34;name&#34;: &#34;Jack&#34;, &#34;age&#34;: 25]&#xA;json[&#34;name&#34;] = &#34;Mike&#34;&#xA;json[&#34;age&#34;] = &#34;25&#34; // It&#39;s OK to set String&#xA;json[&#34;address&#34;] = &#34;L.A.&#34; // Add the &#34;address&#34;: &#34;L.A.&#34; in json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Array &amp;amp; Dictionary&#xA;var json: JSON =  [&#34;name&#34;: &#34;Jack&#34;, &#34;age&#34;: 25, &#34;list&#34;: [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, [&#34;what&#34;: &#34;this&#34;]]]&#xA;json[&#34;list&#34;][3][&#34;what&#34;] = &#34;that&#34;&#xA;json[&#34;list&#34;,3,&#34;what&#34;] = &#34;that&#34;&#xA;let path: [JSONSubscriptType] = [&#34;list&#34;,3,&#34;what&#34;]&#xA;json[path] = &#34;that&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With other JSON objects&#xA;let user: JSON = [&#34;username&#34; : &#34;Steve&#34;, &#34;password&#34;: &#34;supersecurepassword&#34;]&#xA;let auth: JSON = [&#xA;  &#34;user&#34;: user.object, // use user.object instead of just user&#xA;  &#34;apikey&#34;: &#34;supersecretapitoken&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Merging&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to merge one JSON into another JSON. Merging a JSON into another JSON adds all non existing values to the original JSON which are only present in the &lt;code&gt;other&lt;/code&gt; JSON.&lt;/p&gt; &#xA;&lt;p&gt;If both JSONs contain a value for the same key, &lt;em&gt;mostly&lt;/em&gt; this value gets overwritten in the original JSON, but there are two cases where it provides some special treatment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In case of both values being a &lt;code&gt;JSON.Type.array&lt;/code&gt; the values form the array found in the &lt;code&gt;other&lt;/code&gt; JSON getting appended to the original JSON&#39;s array value.&lt;/li&gt; &#xA; &lt;li&gt;In case of both values being a &lt;code&gt;JSON.Type.dictionary&lt;/code&gt; both JSON-values are getting merged the same way the encapsulating JSON is merged.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In a case where two fields in a JSON have different types, the value will get always overwritten.&lt;/p&gt; &#xA;&lt;p&gt;There are two different fashions for merging: &lt;code&gt;merge&lt;/code&gt; modifies the original JSON, whereas &lt;code&gt;merged&lt;/code&gt; works non-destructively on a copy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let original: JSON = [&#xA;    &#34;first_name&#34;: &#34;John&#34;,&#xA;    &#34;age&#34;: 20,&#xA;    &#34;skills&#34;: [&#34;Coding&#34;, &#34;Reading&#34;],&#xA;    &#34;address&#34;: [&#xA;        &#34;street&#34;: &#34;Front St&#34;,&#xA;        &#34;zip&#34;: &#34;12345&#34;,&#xA;    ]&#xA;]&#xA;&#xA;let update: JSON = [&#xA;    &#34;last_name&#34;: &#34;Doe&#34;,&#xA;    &#34;age&#34;: 21,&#xA;    &#34;skills&#34;: [&#34;Writing&#34;],&#xA;    &#34;address&#34;: [&#xA;        &#34;zip&#34;: &#34;12342&#34;,&#xA;        &#34;city&#34;: &#34;New York City&#34;&#xA;    ]&#xA;]&#xA;&#xA;let updated = original.merge(with: update)&#xA;// [&#xA;//     &#34;first_name&#34;: &#34;John&#34;,&#xA;//     &#34;last_name&#34;: &#34;Doe&#34;,&#xA;//     &#34;age&#34;: 21,&#xA;//     &#34;skills&#34;: [&#34;Coding&#34;, &#34;Reading&#34;, &#34;Writing&#34;],&#xA;//     &#34;address&#34;: [&#xA;//         &#34;street&#34;: &#34;Front St&#34;,&#xA;//         &#34;zip&#34;: &#34;12342&#34;,&#xA;//         &#34;city&#34;: &#34;New York City&#34;&#xA;//     ]&#xA;// ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;String representation&lt;/h2&gt; &#xA;&lt;p&gt;There are two options available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use the default Swift one&lt;/li&gt; &#xA; &lt;li&gt;use a custom one that will handle optionals well and represent &lt;code&gt;nil&lt;/code&gt; as &lt;code&gt;&#34;null&#34;&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = [&#34;1&#34;:2, &#34;2&#34;:&#34;two&#34;, &#34;3&#34;: nil] as [String: Any?]&#xA;let json = JSON(dict)&#xA;let representation = json.rawString(options: [.castNilToNSNull: true])&#xA;// representation is &#34;{\&#34;1\&#34;:2,\&#34;2\&#34;:\&#34;two\&#34;,\&#34;3\&#34;:null}&#34;, which represents {&#34;1&#34;:2,&#34;2&#34;:&#34;two&#34;,&#34;3&#34;:null}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Work with &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;SwiftyJSON nicely wraps the result of the Alamofire JSON response handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Alamofire.request(url, method: .get).validate().responseJSON { response in&#xA;    switch response.result {&#xA;    case .success(let value):&#xA;        let json = JSON(value)&#xA;        print(&#34;JSON: \(json)&#34;)&#xA;    case .failure(let error):&#xA;        print(error)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also provide an extension of Alamofire for serializing NSData to SwiftyJSON&#39;s JSON.&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/SwiftyJSON/Alamofire-SwiftyJSON&#34;&gt;Alamofire-SwiftyJSON&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Work with &lt;a href=&#34;https://github.com/Moya/Moya&#34;&gt;Moya&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;SwiftyJSON parse data to JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let provider = MoyaProvider&amp;lt;Backend&amp;gt;()&#xA;provider.request(.showProducts) { result in&#xA;    switch result {&#xA;    case let .success(moyaResponse):&#xA;        let data = moyaResponse.data&#xA;        let json = JSON(data: data) // convert network data to json&#xA;        print(json)&#xA;    case let .failure(error):&#xA;        print(&#34;error: \(error)&#34;)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SwiftyJSON Model Generator&lt;/h2&gt; &#xA;&lt;p&gt;Tools to generate SwiftyJSON Models&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jsoncafe.com/&#34;&gt;JSON Cafe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ahmed-Ali/JSONExport&#34;&gt;JSON Export&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>