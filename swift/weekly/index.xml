<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-24T02:02:25Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hotwired/turbo-ios</title>
    <updated>2023-09-24T02:02:25Z</updated>
    <id>tag:github.com,2023-09-24:/hotwired/turbo-ios</id>
    <link href="https://github.com/hotwired/turbo-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS framework for making Turbo native apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Turbo Native for iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build high-fidelity hybrid apps with native navigation and a single shared web view.&lt;/strong&gt; Turbo Native for iOS provides the tooling to wrap your &lt;a href=&#34;https://github.com/hotwired/turbo&#34;&gt;Turbo 7&lt;/a&gt;-enabled web app in a native iOS shell. It manages a single WKWebView instance across multiple view controllers, giving you native navigation UI with all the client-side performance benefits of Turbo.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deliver fast, efficient hybrid apps.&lt;/strong&gt; Avoid reloading JavaScript and CSS. Save memory by sharing one WKWebView.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reuse mobile web views across platforms.&lt;/strong&gt; Create your views once, on the server, in HTML. Deploy them to iOS, &lt;a href=&#34;https://github.com/hotwired/turbo-android&#34;&gt;Android&lt;/a&gt;, and mobile browsers simultaneously. Ship new features without waiting on App Store approval.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhance web views with native UI.&lt;/strong&gt; Navigate web views using native patterns. Augment web UI with native controls.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Produce large apps with small teams.&lt;/strong&gt; Achieve baseline HTML coverage for free. Upgrade to native views as needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Turbo iOS is written in Swift 5.3 and requires iOS 14 or higher. It supports web apps using either Turbo 7 or Turbolinks 5. The Turbo iOS framework has no dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You should understand how Turbo works with web applications in the browser before attempting to use Turbo iOS. See the &lt;a href=&#34;https://github.com/hotwired/turbo&#34;&gt;Turbo 7 documentation&lt;/a&gt; for details. Ensure that your web app sets the &lt;code&gt;window.Turbo&lt;/code&gt; global variable as it&#39;s required by the native apps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { Turbo } from &#34;@hotwired/turbo-rails&#34;&#xA;window.Turbo = Turbo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The best way to get started with Turbo iOS to try out the demo app first to get familiar with the framework. The demo app walks you through all the basic Turbo flows as well as some advanced features. To run the demo, clone this repo and open &lt;code&gt;Demo/Demo.xcodeproj&lt;/code&gt; in Xcode and run the Demo target. See &lt;a href=&#34;https://raw.githubusercontent.com/hotwired/turbo-ios/main/Demo/README.md&#34;&gt;Demo/README.md&lt;/a&gt; for more details about the demo. When you‚Äôre ready to start your own application, read through the rest of the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add Turbo as a dependency through Xcode or directly to a Package.swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.package(url: &#34;https://github.com/hotwired/turbo-ios&#34;, from: &#34;&amp;lt;latest-version&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also integrate the framework manually if your prefer, such as by adding the repo as a submodule, and linking &lt;code&gt;Turbo.framework&lt;/code&gt; to your project.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotwired/turbo-ios/main/Docs/QuickStartGuide.md&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotwired/turbo-ios/main/Docs/Overview.md&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotwired/turbo-ios/main/Docs/Authentication.md&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotwired/turbo-ios/main/Docs/PathConfiguration.md&#34;&gt;Path Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotwired/turbo-ios/main/Docs/Migration.md&#34;&gt;Migration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hotwired/turbo-ios/main/Docs/Advanced.md&#34;&gt;Advanced&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Turbo iOS is open-source software, freely distributable under the terms of an &lt;a href=&#34;https://raw.githubusercontent.com/hotwired/turbo-ios/main/LICENSE&#34;&gt;MIT-style license&lt;/a&gt;. The &lt;a href=&#34;https://github.com/hotwired/turbo-ios&#34;&gt;source code is hosted on GitHub&lt;/a&gt;. Development is sponsored by &lt;a href=&#34;https://37signals.com/&#34;&gt;37signals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We welcome contributions in the form of bug reports, pull requests, or thoughtful discussions in the &lt;a href=&#34;https://github.com/hotwired/turbo-ios/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/hotwired/turbo-ios/main/CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;¬© 2023 37signals LLC&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>securing/IOSSecuritySuite</title>
    <updated>2023-09-24T02:02:25Z</updated>
    <id>tag:github.com,2023-09-24:/securing/IOSSecuritySuite</id>
    <link href="https://github.com/securing/IOSSecuritySuite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS platform security &amp; anti-tampering Swift library&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;‚≠êÔ∏è Do you want to become a certified iOS Application Security Engineer? ‚≠êÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;Check out our practical &amp;amp; fully online course at: &lt;a href=&#34;https://courses.securing.pl/courses/iase?utm_source=githubiosss&amp;amp;utm_medium=githubiosss&amp;amp;utm_campaign=githubiosss&amp;amp;utm_id=githubiosss&#34;&gt;https://courses.securing.pl/courses/iase&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/securing/IOSSecuritySuite/master/iase_bg.png&#34; alt=&#34;iASE logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ISS Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/securing/IOSSecuritySuite/master/logo.png&#34; alt=&#34;ISS logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;by &lt;a href=&#34;https://twitter.com/_r3ggi&#34;&gt;@_r3ggi&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;üåè iOS Security Suite is an advanced and easy-to-use platform security &amp;amp; anti-tampering library written in pure Swift! If you are developing for iOS and you want to protect your app according to the OWASP &lt;a href=&#34;https://github.com/OWASP/owasp-masvs&#34;&gt;MASVS&lt;/a&gt; standard, chapter v8, then this library could save you a lot of time. üöÄ&lt;/p&gt; &#xA;&lt;p&gt;What ISS detects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jailbreak (even the iOS 11+ with brand new indicators! üî•)&lt;/li&gt; &#xA; &lt;li&gt;Attached debugger üë®üèª‚ÄçüöÄ&lt;/li&gt; &#xA; &lt;li&gt;If an app was run in an emulator üëΩ&lt;/li&gt; &#xA; &lt;li&gt;Common reverse engineering tools running on the device üî≠&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;There are 4 ways you can start using IOSSecuritySuite&lt;/p&gt; &#xA;&lt;h3&gt;1. Add source&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;IOSSecuritySuite/*.swift&lt;/code&gt; files to your project&lt;/p&gt; &#xA;&lt;h3&gt;2. Setup with CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pod &#39;IOSSecuritySuite&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. Setup with Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;github &#34;securing/IOSSecuritySuite&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4. Setup with Swift Package Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/securing/IOSSecuritySuite.git&#34;, from: &#34;1.5.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update Info.plist&lt;/h3&gt; &#xA;&lt;p&gt;After adding ISS to your project, you will also need to update your main Info.plist. There is a check in jailbreak detection module that uses &lt;code&gt;canOpenURL(_:)&lt;/code&gt; method and &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl&#34;&gt;requires&lt;/a&gt; specifying URLs that will be queried.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;    &amp;lt;string&amp;gt;undecimus&amp;lt;/string&amp;gt;&#xA;    &amp;lt;string&amp;gt;sileo&amp;lt;/string&amp;gt;&#xA;    &amp;lt;string&amp;gt;zbra&amp;lt;/string&amp;gt;&#xA;    &amp;lt;string&amp;gt;filza&amp;lt;/string&amp;gt;&#xA;    &amp;lt;string&amp;gt;activator&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notice&lt;/h3&gt; &#xA;&lt;p&gt;iOS Security Suite is meant to be used on iOS/iPadOS. It should not be used on Macs with Apple Silicon.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;Jailbreak detector module&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The simplest method&lt;/strong&gt; returns True/False if you just want to know if the device is jailbroken or jailed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;if IOSSecuritySuite.amIJailbroken() {&#xA;&#x9;print(&#34;This device is jailbroken&#34;)&#xA;} else {&#xA;&#x9;print(&#34;This device is not jailbroken&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Verbose&lt;/strong&gt;, if you also want to know what indicators were identified&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let jailbreakStatus = IOSSecuritySuite.amIJailbrokenWithFailMessage()&#xA;if jailbreakStatus.jailbroken {&#xA;&#x9;print(&#34;This device is jailbroken&#34;)&#xA;&#x9;print(&#34;Because: \(jailbreakStatus.failMessage)&#34;)&#xA;} else {&#xA;&#x9;print(&#34;This device is not jailbroken&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The failMessage is a String containing comma-separated indicators as shown on the example below: &lt;code&gt;sileo:// URL scheme detected, Suspicious file exists: /Library/MobileSubstrate/MobileSubstrate.dylib, Fork was able to create a new process&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Verbose &amp;amp; filterable&lt;/strong&gt;, if you also want to for example identify devices that were jailbroken in the past, but now are jailed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let jailbreakStatus = IOSSecuritySuite.amIJailbrokenWithFailedChecks()&#xA;if jailbreakStatus.jailbroken {&#xA;   if (jailbreakStatus.failedChecks.contains { $0.check == .existenceOfSuspiciousFiles }) &amp;amp;&amp;amp; (jailbreakStatus.failedChecks.contains { $0.check == .suspiciousFilesCanBeOpened }) {&#xA;         print(&#34;This is real jailbroken device&#34;)&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugger detector module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let amIDebugged: Bool = IOSSecuritySuite.amIDebugged()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deny debugger at all&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;IOSSecuritySuite.denyDebugger()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Emulator detector module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let runInEmulator: Bool = IOSSecuritySuite.amIRunInEmulator()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reverse engineering tools detector module&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;The simplest method&lt;/strong&gt; returns True/False if you just want to know if the device has evidence of reverse engineering&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;if IOSSecuritySuite.amIReverseEngineered() {&#xA;  print(&#34;This device has evidence of reverse engineering&#34;)&#xA;} else {&#xA;  print(&#34;This device hasn&#39;t evidence of reverse engineering&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Verbose &amp;amp; filterable&lt;/strong&gt;, if you also want the list of checks done&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let reverseStatus = IOSSecuritySuite.amIReverseEngineeredWithFailedChecks()&#xA;if reverseStatus.reverseEngineered {&#xA;   // check for reverseStatus.failedChecks for more details&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;System proxy detector module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let amIProxied: Bool = IOSSecuritySuite.amIProxied()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Experimental features&lt;/h2&gt; &#xA;&lt;h3&gt;Runtime hook detector module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;let amIRuntimeHooked: Bool = amIRuntimeHook(dyldWhiteList: dylds, detectionClass: SomeClass.self, selector: #selector(SomeClass.someFunction), isClassMethod: false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Symbol hook deny module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;// If we want to deny symbol hook of Swift function, we have to pass mangled name of that function&#xA;denySymbolHook(&#34;$s10Foundation5NSLogyySS_s7CVarArg_pdtF&#34;)   // denying hooking for the NSLog function&#xA;NSLog(&#34;Hello Symbol Hook&#34;)&#xA;     &#xA;denySymbolHook(&#34;abort&#34;) &#xA;abort()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MSHook detector module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;// Function declaration&#xA;func someFunction(takes: Int) -&amp;gt; Bool {&#xA;&#x9;return false&#xA;} &#xA;&#xA;// Defining FunctionType : @convention(thin) indicates a ‚Äúthin‚Äù function reference, which uses the Swift calling convention with no special ‚Äúself‚Äù or ‚Äúcontext‚Äù parameters.&#xA;typealias FunctionType = @convention(thin) (Int) -&amp;gt; (Bool)&#xA;&#xA;// Getting pointer address of function we want to verify&#xA;func getSwiftFunctionAddr(_ function: @escaping FunctionType) -&amp;gt; UnsafeMutableRawPointer {&#xA;&#x9;return unsafeBitCast(function, to: UnsafeMutableRawPointer.self)&#xA;}&#xA;&#xA;let funcAddr = getSwiftFunctionAddr(someFunction)&#xA;let amIMSHooked = IOSSecuritySuite.amIMSHooked(funcAddr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MSHook deny module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;// Function declaration&#xA;func denyDebugger(value: Int) {&#xA;}&#xA;&#xA;// Defining FunctionType : @convention(thin) indicates a ‚Äúthin‚Äù function reference, which uses the Swift calling convention with no special ‚Äúself‚Äù or ‚Äúcontext‚Äù parameters.&#xA;typealias FunctionType = @convention(thin) (Int)-&amp;gt;()&#xA;&#xA;// Getting original function address&#xA;let funcDenyDebugger: FunctionType = denyDebugger &#xA;let funcAddr = unsafeBitCast(funcDenyDebugger, to: UnsafeMutableRawPointer.self)&#xA;&#xA;&#xA;if let originalDenyDebugger = denyMSHook(funcAddr) {&#xA;// Call the original function with 1337 as Int argument&#xA;     unsafeBitCast(originalDenyDebugger, to: FunctionType.self)(1337)&#xA; } else {&#xA;     denyDebugger()&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File integrity verifier module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;// Determine if application has been tampered with &#xA;if IOSSecuritySuite.amITampered([.bundleID(&#34;biz.securing.FrameworkClientApp&#34;),&#xA;    .mobileProvision(&#34;2976c70b56e9ae1e2c8e8b231bf6b0cff12bbbd0a593f21846d9a004dd181be3&#34;),&#xA;    .machO(&#34;IOSSecuritySuite&#34;, &#34;6d8d460b9a4ee6c0f378e30f137cebaf2ce12bf31a2eef3729c36889158aa7fc&#34;)]).result {&#xA;    print(&#34;I have been Tampered.&#34;)&#xA;}&#xA;else {&#xA;    print(&#34;I have not been Tampered.&#34;)&#xA;}&#xA;&#xA;// Manually verify SHA256 hash value of a loaded dylib&#xA;if let hashValue = IOSSecuritySuite.getMachOFileHashValue(.custom(&#34;IOSSecuritySuite&#34;)), hashValue == &#34;6d8d460b9a4ee6c0f378e30f137cebaf2ce12bf31a2eef3729c36889158aa7fc&#34; {&#xA;    print(&#34;I have not been Tampered.&#34;)&#xA;}&#xA;else {&#xA;    print(&#34;I have been Tampered.&#34;)&#xA;}&#xA; &#xA;// Check SHA256 hash value of the main executable&#xA;// Tip: Your application may retrieve this value from the server&#xA;if let hashValue = IOSSecuritySuite.getMachOFileHashValue(.default), hashValue == &#34;your-application-executable-hash-value&#34; {&#xA;    print(&#34;I have not been Tampered.&#34;)&#xA;}&#xA;else {&#xA;    print(&#34;I have been Tampered.&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Breakpoint detection module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;func denyDebugger() {&#xA;    // Set breakpoint here&#xA;}&#xA;     &#xA;typealias FunctionType = @convention(thin) ()-&amp;gt;()&#xA;let func_denyDebugger: FunctionType = denyDebugger   // `: FunctionType` is a must&#xA;let func_addr = unsafeBitCast(func_denyDebugger, to: UnsafeMutableRawPointer.self)&#xA;let hasBreakpoint = IOSSecuritySuite.hasBreakpointAt(func_addr, functionSize: nil)&#xA;&#xA;if hasBreakpoint {&#xA;    print(&#34;Breakpoint found in the specified function&#34;)&#xA;} else {&#xA;    print(&#34;Breakpoint not found in the specified function&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Watchpoint detection module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;// Set a breakpoint at the testWatchpoint function&#xA;func testWatchpoint() -&amp;gt; Bool{&#xA;&#x9;&#x9;// lldb: watchpoint set expression ptr&#xA;    var ptr = malloc(9)&#xA;    // lldb: watchpoint set variable count&#xA;    var count = 3&#xA;    return IOSSecuritySuite.hasWatchpoint()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security considerations&lt;/h2&gt; &#xA;&lt;p&gt;Before using this and other platform security checkers, you have to understand that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Including this tool in your project is not the only thing you should do in order to improve your app security! You can read a general mobile security whitepaper &lt;a href=&#34;https://www.securing.biz/en/mobile-application-security-best-practices/index.html&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Detecting if a device is jailbroken is done locally on the device. It means that every jailbreak detector may be bypassed (even this)!&lt;/li&gt; &#xA; &lt;li&gt;Swift code is considered to be harder to manipulate dynamically than Objective-C. Since this library was written in pure Swift, the IOSSecuritySuite methods shouldn&#39;t be exposed to Objective-C runtime (which makes it more difficult to bypass ‚úÖ). You have to know that attacker is still able to MSHookFunction/MSFindSymbol Swift symbols and dynamically change Swift code execution flow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution ‚ù§Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;Yes, please! If you have a better idea or you just want to improve this project, please text me on &lt;a href=&#34;https://twitter.com/_r3ggi&#34;&gt;Twitter&lt;/a&gt; or &lt;a href=&#34;https://www.linkedin.com/in/wojciech-regula/&#34;&gt;Linkedin&lt;/a&gt;. Pull requests are more than welcome!&lt;/p&gt; &#xA;&lt;h3&gt;Special thanks: üëèüèª&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubajakowski&#34;&gt;kubajakowski&lt;/a&gt; for pointing out the problem with &lt;code&gt;canOpenURL(_:)&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/olbartek&#34;&gt;olbartek&lt;/a&gt; for code review and pull request&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benbahrenburg&#34;&gt;benbahrenburg&lt;/a&gt; for various ISS improvements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fotiDim&#34;&gt;fotiDim&lt;/a&gt; for adding new file paths to check&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gcharita&#34;&gt;gcharita&lt;/a&gt; for adding the Swift Package Manager support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rynaardb&#34;&gt;rynaardb&lt;/a&gt; for creating the &lt;code&gt;amIJailbrokenWithFailedChecks()&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/undeaDD&#34;&gt;undeaDD&lt;/a&gt; for various ISS improvements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fnxpt&#34;&gt;fnxpt&lt;/a&gt; for adding multiple JB detections&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TannerJin&#34;&gt;TannerJin&lt;/a&gt; for MSHook, RuntimeHook, SymbolHook and Watchpoint Detection modules&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NikoXu&#34;&gt;NikoXu&lt;/a&gt; for adding file integrity module&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hellpf&#34;&gt;hellpf&lt;/a&gt; for fixing a dangling socket problem&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ant-tree&#34;&gt;Ant-tree&lt;/a&gt; for improving hooking resistence&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/izmcm&#34;&gt;izmcm&lt;/a&gt; for implementing the &lt;code&gt;amIReverseEngineeredWithFailedChecks()&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sanu&#34;&gt;sanu&lt;/a&gt; for new providing new file checks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marsepu&#34;&gt;marsepu&lt;/a&gt; for a well-done PR with new improvements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Research Installer5 and Zebra Package Manager detection ( Cydia Alternatives )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the LICENSE file.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;While creating this tool I used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üîó &lt;a href=&#34;https://github.com/TheSwiftyCoder/JailBreak-Detection&#34;&gt;https://github.com/TheSwiftyCoder/JailBreak-Detection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üîó &lt;a href=&#34;https://github.com/abhinashjain/jailbreakdetection&#34;&gt;https://github.com/abhinashjain/jailbreakdetection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üîó &lt;a href=&#34;https://gist.github.com/ddrccw/8412847&#34;&gt;https://gist.github.com/ddrccw/8412847&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üîó &lt;a href=&#34;https://gist.github.com/bugaevc/4307eaf045e4b4264d8e395b5878a63b&#34;&gt;https://gist.github.com/bugaevc/4307eaf045e4b4264d8e395b5878a63b&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üìö &#34;iOS Application Security&#34; by David Thiel&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>siteline/swiftui-introspect</title>
    <updated>2023-09-24T02:02:25Z</updated>
    <id>tag:github.com,2023-09-24:/siteline/swiftui-introspect</id>
    <link href="https://github.com/siteline/swiftui-introspect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Introspect underlying UIKit/AppKit components from SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUI Introspect&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/siteline/swiftui-introspect/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/siteline/swiftui-introspect/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Status Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsiteline%2Fswiftui-introspect%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;Swift Version Compatibility Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fsiteline%2Fswiftui-introspect%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;Platform Compatibility Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SwiftUI Introspect allows you to get the underlying UIKit or AppKit element of a SwiftUI view.&lt;/p&gt; &#xA;&lt;p&gt;For instance, with SwiftUI Introspect you can access &lt;code&gt;UITableView&lt;/code&gt; to modify separators, or &lt;code&gt;UINavigationController&lt;/code&gt; to customize the tab bar.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;SwiftUI Introspect works by adding an invisible &lt;code&gt;IntrospectionView&lt;/code&gt; on top of the selected view, and an invisible &#34;anchor&#34; view underneath it, then looking through the UIKit/AppKit view hierarchy between the two to find the relevant view.&lt;/p&gt; &#xA;&lt;p&gt;For instance, when introspecting a &lt;code&gt;ScrollView&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item 1&#34;)&#xA;}&#xA;.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17)) { scrollView in&#xA;    // do something with UIScrollView&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... it will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add marker views in front and behind &lt;code&gt;ScrollView&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Traverse through all subviews between both marker views until a &lt;code&gt;UIScrollView&lt;/code&gt; instance (if any) is found.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Although this introspection method is very solid and unlikely to break in itself, future OS releases require explicit opt-in for introspection (&lt;code&gt;.iOS(.vXYZ)&lt;/code&gt;), given potential differences in underlying UIKit/AppKit view types between major OS versions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;.introspect&lt;/code&gt; modifier acts directly on its &lt;em&gt;receiver&lt;/em&gt;. This means calling &lt;code&gt;.introspect&lt;/code&gt; from inside the view you&#39;re trying to introspect won&#39;t have any effect. However, there are times when this is not possible or simply too inflexible, in which case you &lt;strong&gt;can&lt;/strong&gt; introspect an &lt;em&gt;ancestor&lt;/em&gt;, but you must opt into this explicitly by overriding the introspection &lt;code&gt;scope&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item 1&#34;)&#xA;        .introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17), scope: .ancestor) { scrollView in&#xA;            // do something with UIScrollView&#xA;        }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage in production&lt;/h3&gt; &#xA;&lt;p&gt;SwiftUI Introspect is meant to be used in production. It does not use any private API. It only inspects the view hierarchy using publicly available methods. The library takes a defensive approach to inspecting the view hierarchy: there is no hard assumption that elements are laid out a certain way, there is no force-cast to UIKit/AppKit classes, and the &lt;code&gt;.introspect&lt;/code&gt; modifier is simply ignored if UIKit/AppKit views cannot be found.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/siteline/swiftui-introspect&#34;, from: &#34;1.0.0&#34;),&#xA;    ],&#xA;    targets: [&#xA;        .target(name: &amp;lt;#Target Name#&amp;gt;, dependencies: [&#xA;            .product(name: &#34;SwiftUIIntrospect&#34;, package: &#34;swiftui-introspect&#34;),&#xA;        ]),&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftUIIntrospect&#39;, &#39;~&amp;gt; 1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introspection&lt;/h2&gt; &#xA;&lt;h3&gt;Implemented&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/buttontype&#34;&gt;&lt;code&gt;Button&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/colorpickertype&#34;&gt;&lt;code&gt;ColorPicker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickertype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithcompactstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.compact&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithfieldstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.field&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithgraphicalstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.graphical&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithstepperfieldstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.stepperField&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/datepickerwithwheelstyletype&#34;&gt;&lt;code&gt;DatePicker&lt;/code&gt; with &lt;code&gt;.wheel&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/formtype&#34;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/formwithgroupedstyletype&#34;&gt;&lt;code&gt;Form&lt;/code&gt; with &lt;code&gt;.grouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/fullScreenCovertype&#34;&gt;&lt;code&gt;.fullScreenCover&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listtype&#34;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithborderedstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.bordered&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithgroupedstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.grouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithinsetgroupedstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.insetGrouped&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithinsetstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.inset&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listwithsidebarstyletype&#34;&gt;&lt;code&gt;List&lt;/code&gt; with &lt;code&gt;.sidebar&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/listcelltype&#34;&gt;&lt;code&gt;ListCell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/maptype&#34;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/navigationsplitviewtype&#34;&gt;&lt;code&gt;NavigationSplitView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/navigationstacktype&#34;&gt;&lt;code&gt;NavigationStack&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/NavigationViewWithColumnsStyleType&#34;&gt;&lt;code&gt;NavigationView&lt;/code&gt; with &lt;code&gt;.columns&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/NavigationViewWithStackStyleType&#34;&gt;&lt;code&gt;NavigationView&lt;/code&gt; with &lt;code&gt;.stack&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pagecontroltype&#34;&gt;&lt;code&gt;PageControl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithmenustyletype&#34;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.menu&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithsegmentedstyletype&#34;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.segmented&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/pickerwithwheelstyletype&#34;&gt;&lt;code&gt;Picker&lt;/code&gt; with &lt;code&gt;.wheel&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/popovertype&#34;&gt;&lt;code&gt;.popover&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/progressviewwithcircularstyletype&#34;&gt;&lt;code&gt;ProgressView&lt;/code&gt; with &lt;code&gt;.circular&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/progressviewwithlinearstyletype&#34;&gt;&lt;code&gt;ProgressView&lt;/code&gt; with &lt;code&gt;.linear&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/scrollviewtype&#34;&gt;&lt;code&gt;ScrollView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/searchfieldtype&#34;&gt;&lt;code&gt;.searchable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/securefieldtype&#34;&gt;&lt;code&gt;SecureField&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/sheettype&#34;&gt;&lt;code&gt;.sheet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/SignInWithAppleButtonType&#34;&gt;&lt;code&gt;SignInWithAppleButton&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/slidertype&#34;&gt;&lt;code&gt;Slider&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/steppertype&#34;&gt;&lt;code&gt;Stepper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/tabletype&#34;&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/tabviewtype&#34;&gt;&lt;code&gt;TabView&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/TabViewWithPageStyleType&#34;&gt;&lt;code&gt;TabView&lt;/code&gt; with &lt;code&gt;.page&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/texteditortype&#34;&gt;&lt;code&gt;TextEditor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/textfieldtype&#34;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/TextFieldWithVerticalAxisType&#34;&gt;&lt;code&gt;TextField&lt;/code&gt; with &lt;code&gt;.vertical&lt;/code&gt; axis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/toggletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithbuttonstyletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;button&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithcheckboxstyletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;checkbox&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/togglewithswitchstyletype&#34;&gt;&lt;code&gt;Toggle&lt;/code&gt; with &lt;code&gt;switch&lt;/code&gt; style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/videoplayertype&#34;&gt;&lt;code&gt;VideoPlayer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/viewtype&#34;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/viewcontrollertype&#34;&gt;&lt;code&gt;ViewController&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/siteline/swiftui-introspect/main/documentation/swiftuiintrospect/windowtype&#34;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&#34;https://github.com/siteline/swiftui-introspect/discussions/new?category=ideas&#34;&gt;start a discussion&lt;/a&gt;. As a temporary solution, you can &lt;a href=&#34;https://raw.githubusercontent.com/siteline/swiftui-introspect/main/#implement-your-own-introspectable-type&#34;&gt;implement your own introspectable view type&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cannot implement&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI&lt;/th&gt; &#xA;   &lt;th&gt;Affected Frameworks&lt;/th&gt; &#xA;   &lt;th&gt;Why&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text&lt;/td&gt; &#xA;   &lt;td&gt;UIKit, AppKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UILabel / NSLabel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;UIKit, AppKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UIImageView / NSImageView&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button&lt;/td&gt; &#xA;   &lt;td&gt;UIKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UIButton&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;List&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;List {&#xA;    Text(&#34;Item&#34;)&#xA;}&#xA;.introspect(.list, on: .iOS(.v13, .v14, .v15)) { tableView in&#xA;    tableView.backgroundView = UIView()&#xA;    tableView.backgroundColor = .cyan&#xA;}&#xA;.introspect(.list, on: .iOS(.v16, .v17)) { collectionView in&#xA;    collectionView.backgroundView = UIView()&#xA;    collectionView.subviews.dropFirst(1).first?.backgroundColor = .cyan&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ScrollView&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item&#34;)&#xA;}&#xA;.introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17)) { scrollView in&#xA;    scrollView.backgroundColor = .red&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NavigationView&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;NavigationView {&#xA;    Text(&#34;Item&#34;)&#xA;}&#xA;.navigationViewStyle(.stack)&#xA;.introspect(.navigationView(style: .stack), on: .iOS(.v13, .v14, .v15, .v16, .v17)) { navigationController in&#xA;    navigationController.navigationBar.backgroundColor = .cyan&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TextField&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;TextField(&#34;Text Field&#34;, text: &amp;lt;#Binding&amp;lt;String&amp;gt;#&amp;gt;)&#xA;    .introspect(.textField, on: .iOS(.v13, .v14, .v15, .v16, .v17)) { textField in&#xA;        textField.backgroundColor = .red&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;h3&gt;Implement your own introspectable type&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&#34;https://github.com/siteline/swiftui-introspect/discussions/new?category=ideas&#34;&gt;start a discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case SwiftUI Introspect (unlikely) doesn&#39;t support the SwiftUI element that you&#39;re looking for, you can implement your own introspectable type.&lt;/p&gt; &#xA;&lt;p&gt;For example, here&#39;s how the library implements the introspectable &lt;code&gt;TextField&lt;/code&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;@_spi(Advanced) import SwiftUIIntrospect&#xA;&#xA;public struct TextFieldType: IntrospectableViewType {}&#xA;&#xA;extension IntrospectableViewType where Self == TextFieldType {&#xA;    public static var textField: Self { .init() }&#xA;}&#xA;&#xA;#if canImport(UIKit)&#xA;extension iOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {&#xA;    public static let v13 = Self(for: .v13)&#xA;    public static let v14 = Self(for: .v14)&#xA;    public static let v15 = Self(for: .v15)&#xA;    public static let v16 = Self(for: .v16)&#xA;    public static let v17 = Self(for: .v17)&#xA;}&#xA;&#xA;extension tvOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {&#xA;    public static let v13 = Self(for: .v13)&#xA;    public static let v14 = Self(for: .v14)&#xA;    public static let v15 = Self(for: .v15)&#xA;    public static let v16 = Self(for: .v16)&#xA;    public static let v17 = Self(for: .v17)&#xA;}&#xA;&#xA;extension visionOSViewVersion&amp;lt;TextFieldType, UITextField&amp;gt; {&#xA;    public static let v1 = Self(for: .v1)&#xA;}&#xA;#elseif canImport(AppKit)&#xA;extension macOSViewVersion&amp;lt;TextFieldType, NSTextField&amp;gt; {&#xA;    public static let v10_15 = Self(for: .v10_15)&#xA;    public static let v11 = Self(for: .v11)&#xA;    public static let v12 = Self(for: .v12)&#xA;    public static let v13 = Self(for: .v13)&#xA;    public static let v14 = Self(for: .v14)&#xA;}&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Introspect on future platform versions&lt;/h3&gt; &#xA;&lt;p&gt;By default, introspection applies per specific platform version. This is a sensible default for maximum predictability in regularly maintained codebases, but it&#39;s not always a good fit for e.g. library developers who may want to cover as many future platform versions as possible in order to provide the best chance for long-term future functionality of their library without regular maintenance.&lt;/p&gt; &#xA;&lt;p&gt;For such cases, SwiftUI Introspect offers range-based platform version predicates behind the Advanced SPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;@_spi(Advanced) import SwiftUIIntrospect&#xA;&#xA;struct ContentView: View {&#xA;    var body: some View {&#xA;        ScrollView {&#xA;            // ...&#xA;        }&#xA;        .introspect(.scrollView, on: .iOS(.v13...)) { scrollView in&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bear in mind this should be used cautiosly, and with full knowledge that any future OS version might break the expected introspection types unless explicitly available. For instance, if in the example above hypothetically iOS 18 stops using UIScrollView under the hood, the customization closure will never be called on said platform.&lt;/p&gt; &#xA;&lt;h3&gt;Keep instances outside the customize closure&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, you might need to keep your introspected instance around for longer than the customization closure lifetime. In such cases, &lt;code&gt;@State&lt;/code&gt; is not a good option because it produces retain cycles. Instead, SwiftUI Introspect offers a &lt;code&gt;@Weak&lt;/code&gt; property wrapper behind the Advanced SPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;@_spi(Advanced) import SwiftUIIntrospect&#xA;&#xA;struct ContentView: View {&#xA;    @Weak var scrollView: UIScrollView?&#xA;&#xA;    var body: some View {&#xA;        ScrollView {&#xA;            // ...&#xA;        }&#xA;        .introspect(.scrollView, on: .iOS(.v13, .v14, .v15, .v16, .v17)) { scrollView in&#xA;            self.scrollView = scrollView&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community projects&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a list of open source libraries powered by the SwiftUI Introspect library:&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/paescebu/CustomKeyboardKit&#34;&gt; &lt;img src=&#34;https://github-readme-stats.vercel.app/api/pin/?username=paescebu&amp;amp;repo=CustomKeyboardKit&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/davdroman/swiftui-navigation-transitions&#34;&gt; &lt;img src=&#34;https://github-readme-stats.vercel.app/api/pin/?username=davdroman&amp;amp;repo=swiftui-navigation-transitions&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;If you&#39;re working on a library built on SwiftUI Introspect or know of one, feel free to submit a PR adding it to the list.&lt;/p&gt;</summary>
  </entry>
</feed>