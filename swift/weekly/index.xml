<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-18T01:50:59Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apple/swift-format</title>
    <updated>2022-12-18T01:50:59Z</updated>
    <id>tag:github.com,2022-12-18:/apple/swift-format</id>
    <link href="https://github.com/apple/swift-format" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Formatting technology for Swift source code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swift-format&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;swift-format&lt;/code&gt; provides the formatting technology for &lt;a href=&#34;https://github.com/apple/sourcekit-lsp&#34;&gt;SourceKit-LSP&lt;/a&gt; and the building blocks for doing code formatting transformations.&lt;/p&gt; &#xA;&lt;p&gt;This package can be used as a &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-format/main/#command-line-usage&#34;&gt;command line tool&lt;/a&gt; or linked into other applications as a Swift Package Manager dependency and invoked via an &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-format/main/#api-usage&#34;&gt;API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: No default Swift code style guidelines have yet been proposed. The style that is currently applied by &lt;code&gt;swift-format&lt;/code&gt; is just one possibility, and the code is provided so that it can be tested on real-world code and experiments can be made by modifying it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Matching swift-format to Your Swift Version (Swift 5.7 and earlier)&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: &lt;code&gt;swift-format&lt;/code&gt; on the &lt;code&gt;main&lt;/code&gt; branch now uses a version of &lt;a href=&#34;https://github.com/apple/swift-syntax&#34;&gt;SwiftSyntax&lt;/a&gt; whose parser has been rewritten in Swift and no longer has dependencies on libraries in the Swift toolchain. This allows &lt;code&gt;swift-format&lt;/code&gt; to be built, developed, and run using any version of Swift that can compile it, decoupling it from the version that supported a particular syntax.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;swift-format&lt;/code&gt; versions 0.50700.0 and earlier depend on versions of &lt;a href=&#34;https://github.com/apple/swift-syntax&#34;&gt;SwiftSyntax&lt;/a&gt; that used a standalone parsing library distributed as part of the Swift toolchain. When using these versions, you should check out and build &lt;code&gt;swift-format&lt;/code&gt; from the release tag or branch that is compatible with the version of Swift you are using.&lt;/p&gt; &#xA;&lt;p&gt;The major and minor version components of &lt;code&gt;swift-format&lt;/code&gt; and SwiftSyntax must be the same—this is expressed in the &lt;code&gt;SwiftSyntax&lt;/code&gt; dependency in &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-format/main/Package.swift&#34;&gt;Package.swift&lt;/a&gt;—and those version components must match the Swift toolchain that is installed and used to build and run the formatter:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Xcode Release&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Swift Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;code&gt;swift-format&lt;/code&gt; Branch / Tags&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;–&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift at &lt;code&gt;main&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 14.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;release/5.7&lt;/code&gt; / &lt;code&gt;0.50700.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 13.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;release/5.6&lt;/code&gt; / &lt;code&gt;0.50600.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 13.0–13.2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;swift-5.5-branch&lt;/code&gt; / &lt;code&gt;0.50500.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 12.5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;swift-5.4-branch&lt;/code&gt; / &lt;code&gt;0.50400.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 12.0–12.4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;swift-5.3-branch&lt;/code&gt; / &lt;code&gt;0.50300.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 11.4–11.7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;swift-5.2-branch&lt;/code&gt; / &lt;code&gt;0.50200.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 11.0–11.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;swift-5.1-branch&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For example, if you are using Xcode 13.3 (Swift 5.6), you will need &lt;code&gt;swift-format&lt;/code&gt; 0.50600.0.&lt;/p&gt; &#xA;&lt;h2&gt;Getting swift-format&lt;/h2&gt; &#xA;&lt;p&gt;If you are mainly interested in using swift-format (rather than developing it), then once you have identified the version you need, you can check out the source and build it using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;VERSION=0.50700.0  # replace this with the version you need&#xA;git clone https://github.com/apple/swift-format.git&#xA;cd swift-format&#xA;git checkout &#34;tags/$VERSION&#34;&#xA;swift build -c release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;git checkout&lt;/code&gt; command above will leave the repository in a &#34;detached HEAD&#34; state. This is fine if building and running the tool is all you want to do.&lt;/p&gt; &#xA;&lt;p&gt;Once the build has finished, the &lt;code&gt;swift-format&lt;/code&gt; executable will be located at &lt;code&gt;.build/release/swift-format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To test that the formatter was built successfully and is compatible with your Swift toolchain, you can also run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift test --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend using the &lt;code&gt;--parallel&lt;/code&gt; flag to speed up the test run since there are a large number of tests.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Usage&lt;/h2&gt; &#xA;&lt;p&gt;The general invocation syntax for &lt;code&gt;swift-format&lt;/code&gt; is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift-format [SUBCOMMAND] [OPTIONS...] [FILES...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tool supports a number of subcommands, each of which has its own options and are described below. Descriptions of the subcommands that are available can also be obtained by running &lt;code&gt;swift-format --help&lt;/code&gt;, and the description of a specific subcommand can be obtained by using the &lt;code&gt;--help&lt;/code&gt; flag after the subcommand name; for example, &lt;code&gt;swift-format lint --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift-format [format] [OPTIONS...] [FILES...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;format&lt;/code&gt; subcommand formats one or more Swift source files (or source code from standard input if no file paths are given on the command line). Writing out the &lt;code&gt;format&lt;/code&gt; subcommand is optional; it is the default behavior if no other subcommand is given.&lt;/p&gt; &#xA;&lt;p&gt;This subcommand supports all of the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-format/main/#options-supported-by-formatting-and-linting&#34;&gt;common lint and format options&lt;/a&gt;, as well as the formatting-only options below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-i/--in-place&lt;/code&gt;: Overwrites the input files when formatting instead of printing the results to standard output. &lt;em&gt;No backup of the original file is made before it is overwritten.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift-format lint [OPTIONS...] [FILES...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;lint&lt;/code&gt; subcommand checks one or more Swift source files (or source code from standard input if no file paths are given on the command line) for style violations and prints diagnostics to standard error for any violations that are detected.&lt;/p&gt; &#xA;&lt;p&gt;This subcommand supports all of the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-format/main/#options-supported-by-formatting-and-linting&#34;&gt;common lint and format options&lt;/a&gt;, as well as the linting-only options below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-s/--strict&lt;/code&gt;: If this option is specified, lint warnings will cause the tool to exit with a non-zero exit code (failure). By default, lint warnings do not prevent a successful exit; only fatal errors (for example, trying to lint a file that does not exist) cause the tool to exit unsuccessfully.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Options Supported by Formatting and Linting&lt;/h3&gt; &#xA;&lt;p&gt;The following options are supported by both the &lt;code&gt;format&lt;/code&gt; and &lt;code&gt;lint&lt;/code&gt; subcommands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--assume-filename &amp;lt;path&amp;gt;&lt;/code&gt;: The file path that should be used in diagnostics when linting or formatting from standard input. If this option is not provided, then &lt;code&gt;&amp;lt;stdin&amp;gt;&lt;/code&gt; will be used as the filename printed in diagnostics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--color-diagnostics/--no-color-diagnostics&lt;/code&gt;: By default, &lt;code&gt;swift-format&lt;/code&gt; will print diagnostics in color if standard error is connected to a terminal and without color otherwise (for example, if standard error is being redirected to a file). These flags can be used to force colors on or off respectively, regardless of whether the output is going to a terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--configuration &amp;lt;file&amp;gt;&lt;/code&gt;: The path to a JSON file that contains &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-format/main/#configuring-the-command-line-tool&#34;&gt;configurable settings&lt;/a&gt; for &lt;code&gt;swift-format&lt;/code&gt;. If omitted, a default configuration is use (which can be seen by running &lt;code&gt;swift-format dump-configuration&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--ignore-unparsable-files&lt;/code&gt;: If this option is specified and a source file contains syntax errors or can otherwise not be parsed successfully by the Swift syntax parser, it will be ignored (no diagnostics will be emitted and it will not be formatted). Without this option, an error will be emitted for any unparsable files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-p/--parallel&lt;/code&gt;: Process files in parallel, simultaneously across multiple cores.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-r/--recursive&lt;/code&gt;: If specified, then the tool will process &lt;code&gt;.swift&lt;/code&gt; source files in any directories listed on the command line and their descendants. Without this flag, it is an error to list a directory on the command line.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Viewing the Default Configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift-format dump-configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;dump-configuration&lt;/code&gt; subcommand dumps the default configuration in JSON format to standard output. This can be used to simplify generating a custom configuration, by redirecting it to a file and editing it.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring the Command Line Tool&lt;/h3&gt; &#xA;&lt;p&gt;For any source file being checked or formatted, &lt;code&gt;swift-format&lt;/code&gt; looks for a JSON-formatted file named &lt;code&gt;.swift-format&lt;/code&gt; in the same directory. If one is found, then that file is loaded to determine the tool&#39;s configuration. If the file is not found, then it looks in the parent directory, and so on.&lt;/p&gt; &#xA;&lt;p&gt;If no configuration file is found, a default configuration is used. The settings in the default configuration can be viewed by running &lt;code&gt;swift-format --mode dump-configuration&lt;/code&gt;, which will dump it to standard output.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;--configuration &amp;lt;file&amp;gt;&lt;/code&gt; option is passed to &lt;code&gt;swift-format&lt;/code&gt;, then that configuration will be used unconditionally and the file system will not be searched.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-format/main/Documentation/Configuration.md&#34;&gt;Documentation/Configuration.md&lt;/a&gt; for a description of the configuration file format and the settings that are available.&lt;/p&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;Running &lt;code&gt;swift-format -v&lt;/code&gt; or &lt;code&gt;swift-format --version&lt;/code&gt; will print version information about &lt;code&gt;swift-format&lt;/code&gt; version and then exit.&lt;/p&gt; &#xA;&lt;h2&gt;API Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;swift-format&lt;/code&gt; can be easily integrated into other tools written in Swift. Instead of invoking the formatter by spawning a subprocess, users can depend on &lt;code&gt;swift-format&lt;/code&gt; as a Swift Package Manager dependency and import the &lt;code&gt;SwiftFormat&lt;/code&gt; module, which contains the entry points into the formatter&#39;s diagnostic and correction behavior.&lt;/p&gt; &#xA;&lt;p&gt;Formatting behavior is provided by the &lt;code&gt;SwiftFormatter&lt;/code&gt; class and linting behavior is provided by the &lt;code&gt;SwiftLinter&lt;/code&gt; class. These APIs can be passed either a Swift source file &lt;code&gt;URL&lt;/code&gt; or a &lt;code&gt;Syntax&lt;/code&gt; node representing a SwiftSyntax syntax tree. The latter capability is particularly useful for writing code generators, since it significantly reduces the amount of trivia that the generator needs to be concerned about adding to the syntax nodes it creates. Instead, it can pass the in-memory syntax tree to the &lt;code&gt;SwiftFormat&lt;/code&gt; API and receive perfectly formatted code as output.&lt;/p&gt; &#xA;&lt;p&gt;Please see the documentation in the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-format/main/Sources/SwiftFormat/SwiftFormatter.swift&#34;&gt;&lt;code&gt;SwiftFormatter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-format/main/Sources/SwiftFormat/SwiftLinter.swift&#34;&gt;&lt;code&gt;SwiftLinter&lt;/code&gt;&lt;/a&gt; classes for more information about their usage.&lt;/p&gt; &#xA;&lt;h3&gt;Checking Out the Source Code for Development&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; branch is used for development. Pull requests should be created to merge into the &lt;code&gt;main&lt;/code&gt; branch; changes that are low-risk and compatible with the latest release branch may be cherry-picked into that branch after they have been merged into &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in developing &lt;code&gt;swift-format&lt;/code&gt;, there is additional documentation about that &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-format/main/Documentation/Development.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>signalapp/Signal-iOS</title>
    <updated>2022-12-18T01:50:59Z</updated>
    <id>tag:github.com,2022-12-18:/signalapp/Signal-iOS</id>
    <link href="https://github.com/signalapp/Signal-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A private messenger for iOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Signal iOS&lt;/h1&gt; &#xA;&lt;p&gt;Signal is a free, open source, messaging app for simple private communication with friends.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apps.apple.com/app/id874139669&#34;&gt;&lt;img src=&#34;http://cl.ly/WouG/Download_on_the_App_Store_Badge_US-UK_135x40.svg?sanitize=true&#34; alt=&#34;Available on the App Store&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also available on &lt;a href=&#34;https://github.com/signalapp/signal-android&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://github.com/signalapp/signal-desktop&#34;&gt;Desktop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Questions?&lt;/h2&gt; &#xA;&lt;p&gt;For troubleshooting and questions, please visit our &lt;a href=&#34;https://support.signal.org/&#34;&gt;support center&lt;/a&gt; or &lt;a href=&#34;https://community.signalusers.org/&#34;&gt;unofficial community forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Bug Reports&lt;/h2&gt; &#xA;&lt;p&gt;We use GitHub for bug tracking. Please search &lt;a href=&#34;https://github.com/signalapp/signal-ios/issues&#34;&gt;existing issues&lt;/a&gt; and create a new one if the issue is not yet tracked. For Android users, please use the &lt;a href=&#34;https://github.com/signalapp/signal-android/issues&#34;&gt;Signal for Android issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Code&lt;/h2&gt; &#xA;&lt;p&gt;Instructions on how to setup your development environment and build Signal-iOS can be found in &lt;a href=&#34;https://github.com/signalapp/Signal-iOS/raw/main/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt;. Other useful instructions for development can be found in the &lt;a href=&#34;https://github.com/signalapp/Signal-iOS/wiki/Development-Guide&#34;&gt;Development Guide wiki page&lt;/a&gt;. We also recommend reading the &lt;a href=&#34;https://github.com/signalapp/Signal-iOS/raw/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Ideas&lt;/h2&gt; &#xA;&lt;p&gt;Have something you want to say about Signal Foundation projects or want to be part of the conversation? Get involved in the &lt;a href=&#34;https://community.signalusers.org&#34;&gt;community forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cryptography Notice&lt;/h2&gt; &#xA;&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country&#39;s laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href=&#34;http://www.wassenaar.org/&#34;&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GPLv3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2014-2022 Open Whisper Systems&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Apple and the Apple logo are trademarks of Apple Inc., registered in the U.S. and other countries. App Store is a service mark of Apple Inc., registered in the U.S. and other countries.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rileytestut/AltStore</title>
    <updated>2022-12-18T01:50:59Z</updated>
    <id>tag:github.com,2022-12-18:/rileytestut/AltStore</id>
    <link href="https://github.com/rileytestut/AltStore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AltStore&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AltStore is an alternative app store for non-jailbroken iOS devices.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.0-orange.svg?sanitize=true&#34; alt=&#34;Swift Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: AGPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AltStore is an iOS application that allows you to sideload other apps (.ipa files) onto your iOS device with just your Apple ID. AltStore resigns apps with your personal development certificate and sends them to a desktop app, AltServer, which installs the resigned apps back to your device using iTunes WiFi sync. To prevent apps from expiring, AltStore will also periodically refresh your apps in the background when on the same WiFi as AltServer.&lt;/p&gt; &#xA;&lt;p&gt;For the initial release, I focused on building a solid foundation for distributing my own apps — primarily Delta, &lt;a href=&#34;https://github.com/rileytestut/Delta&#34;&gt;my all-in-one emulator for iOS&lt;/a&gt;. Now that Delta has been released, however, I&#39;m beginning work on adding support for &lt;em&gt;anyone&lt;/em&gt; to list and distribute their apps through AltStore (contributions welcome! 🙂).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs apps over WiFi using AltServer&lt;/li&gt; &#xA; &lt;li&gt;Resigns and installs any app with your Apple ID&lt;/li&gt; &#xA; &lt;li&gt;Refreshes apps periodically in the background to prevent them from expiring (when on same WiFi as AltServer)&lt;/li&gt; &#xA; &lt;li&gt;Handles app updates directly through AltStore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11&lt;/li&gt; &#xA; &lt;li&gt;iOS 12.2+ (AltStore)&lt;/li&gt; &#xA; &lt;li&gt;macOS 10.14.4+ (AltServer)&lt;/li&gt; &#xA; &lt;li&gt;Swift 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why iOS 12.2+ and macOS 10.14.4+? Doing so allows me to distribute all AltStore apps without embedding Swift libraries inside them. This helps me afford bandwidth costs by reducing download sizes by roughly 30%, but also noticeably improves how long it takes to install/refresh apps with AltStore. If you&#39;re compiling AltStore and/or AltServer yourself, however, you should be able to lower their deployment targets to iOS 12.0 and macOS 10.14.0, respectively, without any issues.&lt;/p&gt; &#xA;&lt;h2&gt;Project Overview&lt;/h2&gt; &#xA;&lt;h3&gt;AltStore&lt;/h3&gt; &#xA;&lt;p&gt;AltStore is a just regular, sandboxed iOS application. The AltStore app target contains the vast majority of AltStore&#39;s functionality, including all the logic for downloading and updating apps through AltStore. AltStore makes heavy use of standard iOS frameworks and technologies most iOS developers are familiar with, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core Data&lt;/li&gt; &#xA; &lt;li&gt;Storyboards/Nibs&lt;/li&gt; &#xA; &lt;li&gt;Auto Layout&lt;/li&gt; &#xA; &lt;li&gt;Background App Refresh&lt;/li&gt; &#xA; &lt;li&gt;Network.framework (new in iOS 12)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;AltServer&lt;/h3&gt; &#xA;&lt;p&gt;AltServer is also just a regular, sandboxed macOS application. AltServer is significantly less complex than AltStore though, and for that reason consists of only a handful of files.&lt;/p&gt; &#xA;&lt;h3&gt;AltKit&lt;/h3&gt; &#xA;&lt;p&gt;AltKit is a shared framework that includes common code between AltStore and AltServer.&lt;/p&gt; &#xA;&lt;h3&gt;AltSign&lt;/h3&gt; &#xA;&lt;p&gt;AltSign is my internal framework used by both AltStore and AltServer to communicate with Apple&#39;s servers and resign apps. For more info, check the &lt;a href=&#34;https://github.com/rileytestut/altsign&#34;&gt;AltSign repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Roxas&lt;/h3&gt; &#xA;&lt;p&gt;Roxas is my internal framework used across all my iOS projects, developed to simplify a variety of common tasks used in iOS development. For more info, check the &lt;a href=&#34;https://github.com/rileytestut/roxas&#34;&gt;Roxas repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation Instructions&lt;/h2&gt; &#xA;&lt;p&gt;AltStore and AltServer are both fairly straightforward to compile and run if you&#39;re already an iOS or macOS developer. To compile AltStore and/or AltServer:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository &lt;pre&gt;&lt;code&gt;git clone https://github.com/rileytestut/AltStore.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update submodules: &lt;pre&gt;&lt;code&gt;cd AltStore &#xA;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;AltStore.xcworkspace&lt;/code&gt; and select the AltStore project in the project navigator. On the &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt; tab, change the team from &lt;code&gt;Yvette Testut&lt;/code&gt; to your own account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTDeviceID&lt;/code&gt; in the Info.plist to your device&#39;s UDID. Normally, AltServer embeds the device&#39;s UDID in AltStore&#39;s Info.plist during installation. When running through Xcode you&#39;ll need to set the value yourself or else AltStore won&#39;t resign (or even install) apps for the proper device.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;(AltStore only)&lt;/strong&gt; Change the value for &lt;code&gt;ALTServerID&lt;/code&gt; in the Info.plist to your AltServer&#39;s serverID. This is embedded by AltServer during installation to help AltStore distinguish between multiple AltServers on the same network, and you can find this by using a Bonjour browsing application and noting the serverID advertised by AltServer. This isn&#39;t strictly necessary, because if AltStore can&#39;t find the AltServer with the embedded serverID it still falls back to trying another AltServer. However, this will help in cases where there are multiple AltServers running (plus the error messages are more helpful).&lt;/li&gt; &#xA; &lt;li&gt;Build + run app! 🎉&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Due to the licensing of some dependencies used by AltStore, I have no choice but to distribute AltStore under the &lt;strong&gt;AGPLv3 license&lt;/strong&gt;. That being said, my goal for AltStore is for it to be an open source project &lt;em&gt;anyone&lt;/em&gt; can use without restrictions, so I explicitly give permission for anyone to use, modify, and distribute all &lt;em&gt;my&lt;/em&gt; original code for this project in any form, with or without attribution, without fear of legal consequences (dependencies remain under their original licenses, however).&lt;/p&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:riley@rileytestut.com&#34;&gt;riley@rileytestut.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/rileytestut&#34;&gt;@rileytestut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Questions about AltStore in general? Make sure to read the FAQ at &lt;a href=&#34;https://altstore.io/faq/&#34;&gt;https://altstore.io/faq/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>