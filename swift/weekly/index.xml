<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T02:00:21Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wordpress-mobile/WordPress-iOS</title>
    <updated>2023-09-17T02:00:21Z</updated>
    <id>tag:github.com,2023-09-17:/wordpress-mobile/WordPress-iOS</id>
    <link href="https://github.com/wordpress-mobile/WordPress-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WordPress for iOS - Official repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WordPress for iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://buildkite.com/automattic/wordpress-ios&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/2f3fbb17bfbb5bba508efd80f1ea8d640db5ca2465a516a457.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the sections below for more detailed information. The instructions assume the work is performed from a command line.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note –&amp;nbsp;these setup instructions only apply to Intel-based machines. M1-based Mac support is coming, but isn&#39;t yet supported by our tooling.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/downloads/index.action&#34;&gt;Download&lt;/a&gt; and install Xcode. &lt;em&gt;WordPress for iOS&lt;/em&gt; requires Xcode 11.2.1 or newer.&lt;/li&gt; &#xA; &lt;li&gt;From a command line, run &lt;code&gt;git clone git@github.com:wordpress-mobile/WordPress-iOS.git&lt;/code&gt; in the folder of your preference.&lt;/li&gt; &#xA; &lt;li&gt;Now, run &lt;code&gt;cd WordPress-iOS&lt;/code&gt; to enter the working directory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Create WordPress.com API Credentials&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a WordPress.com account at &lt;a href=&#34;https://wordpress.com/start/user&#34;&gt;https://wordpress.com/start/user&lt;/a&gt; (if you don&#39;t already have one).&lt;/li&gt; &#xA; &lt;li&gt;Create an application at &lt;a href=&#34;https://developer.wordpress.com/apps/&#34;&gt;https://developer.wordpress.com/apps/&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set &#34;Redirect URLs&#34;= &lt;code&gt;https://localhost&lt;/code&gt; and &#34;Type&#34; = &lt;code&gt;Native&lt;/code&gt; and click &#34;Create&#34; then &#34;Update&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;Client ID&lt;/code&gt; and &lt;code&gt;Client Secret&lt;/code&gt; from the OAuth Information.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Configure Your WordPress App Development Environment&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check that your local version of Ruby matches the one in &lt;a href=&#34;https://raw.githubusercontent.com/wordpress-mobile/WordPress-iOS/trunk/.ruby-version&#34;&gt;.ruby-version&lt;/a&gt;. We recommend installing a tool like &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; so your system will always use the version defined in that file. Once installed, simply run &lt;code&gt;rbenv install&lt;/code&gt; in the repo to match the version.&lt;/li&gt; &#xA; &lt;li&gt;Return to the command line and run &lt;code&gt;rake init:oss&lt;/code&gt; to configure your computer and WordPress app to be able to run and login to WordPress.com&lt;/li&gt; &#xA; &lt;li&gt;Once completed, run &lt;code&gt;rake xcode&lt;/code&gt; to open the project in Xcode.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If all went well you can now compile to your iOS device or simulator, and log into the WordPress app.&lt;/p&gt; &#xA;&lt;p&gt;Note: You can only log in with the WordPress.com account that you used to create the WordPress application.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Details&lt;/h2&gt; &#xA;&lt;p&gt;The steps above will help you configure the WordPress app to run and compile. But you may sometimes need to update or re-run specific parts of the initial setup (like updating the dependencies.) To see how to do that, please check out the steps below.&lt;/p&gt; &#xA;&lt;h3&gt;Third party tools&lt;/h3&gt; &#xA;&lt;p&gt;We use a few tools to help with development. Running &lt;code&gt;rake dependencies&lt;/code&gt; will configure or update them for you.&lt;/p&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;WordPress for iOS uses &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; to manage third party libraries. Third party libraries and resources managed by CocoaPods will be installed by the &lt;code&gt;rake dependencies&lt;/code&gt; command above.&lt;/p&gt; &#xA;&lt;h4&gt;SwiftLint&lt;/h4&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt; to enforce a common style for Swift code. The app should build and work without it, but if you plan to write code, you are encouraged to install it. No commit should have lint warnings or errors.&lt;/p&gt; &#xA;&lt;p&gt;You can set up a Git &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&#34;&gt;pre-commit hook&lt;/a&gt; to run SwiftLint automatically when committing by running:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rake git:install_hooks&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the recommended way to include SwiftLint in your workflow, as it catches lint issues locally before your code makes its way to Github.&lt;/p&gt; &#xA;&lt;p&gt;Alternately, a SwiftLint scheme is exposed within the project; Xcode will show a warning if you don&#39;t have SwiftLint installed.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can also run SwiftLint manually from the command line with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rake lint&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your code has any style violations, you can try to automatically correct them by running:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rake lint:autocorrect&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Otherwise you have to fix them manually.&lt;/p&gt; &#xA;&lt;h3&gt;Open Xcode&lt;/h3&gt; &#xA;&lt;p&gt;Launch the workspace by running the following from the command line:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rake xcode&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will ensure any dependencies are ready before launching Xcode.&lt;/p&gt; &#xA;&lt;p&gt;You can also open the project by double clicking on &lt;code&gt;WordPress.xcworkspace&lt;/code&gt; file, or launching Xcode and choose &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Open&lt;/code&gt; and browse to &lt;code&gt;WordPress.xcworkspace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setup Credentials&lt;/h3&gt; &#xA;&lt;p&gt;In order to login to WordPress.com with the app you need to create an account over at the &lt;a href=&#34;https://developer.wordpress.com&#34;&gt;WordPress.com Developer Portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After you create an account you can create an application on the &lt;a href=&#34;https://developer.wordpress.com/apps/&#34;&gt;WordPress.com applications manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When creating your application, you should select &#34;Native client&#34; for the application type. The &#34;&lt;strong&gt;Website URL&lt;/strong&gt;&#34;, &#34;&lt;strong&gt;Redirect URLs&lt;/strong&gt;&#34;, and &#34;&lt;strong&gt;Javascript Origins&lt;/strong&gt;&#34; fields are required but not used for the mobile apps. Just use &lt;code&gt;https://localhost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Your new application will have an associated client ID and a client secret key. These are used to authenticate the API calls made by your application.&lt;/p&gt; &#xA;&lt;p&gt;Next, run the command &lt;code&gt;rake credentials:setup&lt;/code&gt; you will be prompted for your Client ID and your Client Secret. Once added you will be able to log into the WordPress app&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remember the only WordPress.com account you will be able to login in with is the one used to create your client ID and client secret.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://developer.wordpress.com/docs/oauth2/&#34;&gt;OAuth2&lt;/a&gt; and the &lt;a href=&#34;https://developer.wordpress.com/docs/api/&#34;&gt;WordPress.com REST endpoint&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://raw.githubusercontent.com/wordpress-mobile/WordPress-iOS/trunk/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; to learn about reporting issues, contributing code, and more ways to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you happen to find a security vulnerability, we would appreciate you letting us know at &lt;a href=&#34;https://hackerone.com/automattic&#34;&gt;https://hackerone.com/automattic&lt;/a&gt; and allowing us to respond before disclosing the issue publicly.&lt;/p&gt; &#xA;&lt;h2&gt;Getting in Touch&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions about getting setup or just want to say hi, join the &lt;a href=&#34;https://chat.wordpress.org&#34;&gt;WordPress Slack&lt;/a&gt; and drop a message on the &lt;code&gt;#mobile&lt;/code&gt; channel.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/wordpress-mobile/WordPress-iOS/trunk/docs/&#34;&gt;docs&lt;/a&gt; contain information about our development practices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://make.wordpress.org/mobile&#34;&gt;WordPress Mobile Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://make.wordpress.org/mobile/handbook/&#34;&gt;WordPress Mobile Handbook&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;WordPress for iOS is an Open Source project covered by the &lt;a href=&#34;https://raw.githubusercontent.com/wordpress-mobile/WordPress-iOS/trunk/LICENSE&#34;&gt;GNU General Public License version 2&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SDWebImage/SDWebImageSwiftUI</title>
    <updated>2023-09-17T02:00:21Z</updated>
    <id>tag:github.com,2023-09-17:/SDWebImage/SDWebImageSwiftUI</id>
    <link href="https://github.com/SDWebImage/SDWebImageSwiftUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SwiftUI Image loading and Animation framework powered by SDWebImage&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SDWebImageSwiftUI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SDWebImage/SDWebImageSwiftUI&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SDWebImage/SDWebImageSwiftUI.svg?branch=master&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SDWebImageSwiftUI&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SDWebImageSwiftUI.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SDWebImageSwiftUI&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/SDWebImageSwiftUI.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SDWebImageSwiftUI&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/SDWebImageSwiftUI.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;SwiftPM compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/SDWebImage/SDWebImageSwiftUI&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/SDWebImage/SDWebImageSwiftUI/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you support iOS 15+/macOS 12+ only and don&#39;t care about animated image format, try SwiftUI&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/asyncimage&#34;&gt;AsyncImage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What&#39;s for&lt;/h2&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI is a SwiftUI image loading framework, which based on &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage&#34;&gt;SDWebImage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It brings all your favorite features from SDWebImage, like async image loading, memory/disk caching, animated image playback and performances.&lt;/p&gt; &#xA;&lt;p&gt;The framework provide the different View structs, which API match the SwiftUI framework guideline. If you&#39;re familiar with &lt;code&gt;Image&lt;/code&gt;, you&#39;ll find it easy to use &lt;code&gt;WebImage&lt;/code&gt; and &lt;code&gt;AnimatedImage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Apple VisionOS&lt;/h2&gt; &#xA;&lt;p&gt;From v3.0.0 (beta), SDWebImageSwiftUI can be compiled for visionOS platform. However, due to the lacking package manager support (need tools update), we don&#39;t support CocoaPods/SPM yet.&lt;/p&gt; &#xA;&lt;p&gt;You can only use the Xcode&#39;s built-in package manager dependency to build on visionOS.&lt;/p&gt; &#xA;&lt;p&gt;To run the visionOS example, you need to clone and add both &lt;code&gt;SDWebImage&lt;/code&gt; and &lt;code&gt;SDWebImageSwiftUI&lt;/code&gt;, open the &lt;code&gt;SDWebImageSwiftUI.xcworkspace&lt;/code&gt; and drag those folders to become local package dependency, see: &lt;a href=&#34;https://developer.apple.com/documentation/xcode/editing-a-package-dependency-as-a-local-package&#34;&gt;Editing a package dependency as a local package&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you really want to build framework instead of using Xcode&#39;s package dependency, following the manual steps below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone SDWebImage, open &lt;code&gt;SDWebImage.xcodeproj&lt;/code&gt; and build &lt;code&gt;SDWebImage&lt;/code&gt; target for visionOS platform (Change &lt;code&gt;MACH_O_TYPE&lt;/code&gt; to static library if you need)&lt;/li&gt; &#xA; &lt;li&gt;Clone SDWebImageSwiftUI, create directory at &lt;code&gt;Carthage/Build/visionOS&lt;/code&gt; and copy &lt;code&gt;SDWebImage.framework&lt;/code&gt; into it&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;SDWebImageSwiftUI.xcodeproj&lt;/code&gt; and build &lt;code&gt;SDWebImageSwiftUI visionOS&lt;/code&gt; target&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Since SDWebImageSwiftUI is built on top of SDWebImage, it provide both the out-of-box features as well as advanced powerful features you may want in real world Apps. Check our &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage&#34;&gt;Wiki&lt;/a&gt; when you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Animated Image full-stack solution, with balance of CPU &amp;amp;&amp;amp; RAM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Progressive image loading, with animation support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reusable download, never request single URL twice&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; URL Request / Response Modifier, provide custom HTTP Header&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Image Transformer, apply corner radius or CIFilter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple caches system, query from different source&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple loaders system, load from different resource&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also get all benefits from the existing community around with SDWebImage. You can have massive image format support (GIF/APNG/WebP/HEIF/AVIF/SVG/PDF) via &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Coder-Plugin-List&#34;&gt;Coder Plugins&lt;/a&gt;, PhotoKit support via &lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePhotosPlugin&#34;&gt;SDWebImagePhotosPlugin&lt;/a&gt;, Firebase integration via &lt;a href=&#34;https://github.com/firebase/FirebaseUI-iOS&#34;&gt;FirebaseUI&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Besides all these features, we do optimization for SwiftUI, like Binding, View Modifier, using the same design pattern to become a good SwiftUI citizen.&lt;/p&gt; &#xA;&lt;h2&gt;Version&lt;/h2&gt; &#xA;&lt;p&gt;This framework is under heavily development, it&#39;s recommended to use &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSwiftUI/releases&#34;&gt;the latest release&lt;/a&gt; as much as possible (including SDWebImage dependency).&lt;/p&gt; &#xA;&lt;p&gt;This framework follows &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;. Each source-break API changes will bump to a major version.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;This project use &lt;a href=&#34;https://keepachangelog.com/en/1.0.0/&#34;&gt;keep a changelog&lt;/a&gt; format to record the changes. Check the &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageSwiftUI/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; about the changes between versions. The changes will also be updated in Release page.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;All issue reports, feature requests, contributions, and GitHub stars are welcomed. Hope for active feedback and promotion if you find this framework useful.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 14+&lt;/li&gt; &#xA; &lt;li&gt;iOS 14+&lt;/li&gt; &#xA; &lt;li&gt;macOS 11+&lt;/li&gt; &#xA; &lt;li&gt;tvOS 14+&lt;/li&gt; &#xA; &lt;li&gt;watchOS 7+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;for SwiftUI 1.0 (iOS 13)&lt;/h2&gt; &#xA;&lt;p&gt;iOS 14(macOS 11) introduce the SwiftUI 2.0, which keep the most API compatible, but changes many internal behaviors, which breaks the SDWebImageSwiftUI&#39;s function.&lt;/p&gt; &#xA;&lt;p&gt;From v3.0.0 (Beta), SDWebImageSwiftUI drop iOS 13 support. To use on iOS 13, checkout the latest v2.x version (or using &lt;code&gt;2.x&lt;/code&gt; branch) instead.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI is available through &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For App integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For App integration, you should using Xcode 12 or higher, to add this package to your App target. To do this, check &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app?language=objc&#34;&gt;Adding Package Dependencies to Your App&lt;/a&gt; about the step by step tutorial using Xcode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For downstream framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For downstream framework author, you should create a &lt;code&gt;Package.swift&lt;/code&gt; file into your git repo, then add the following line to mark your framework dependent our SDWebImageSwiftUI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/SDWebImage/SDWebImageSwiftUI.git&#34;, from: &#34;2.0.0&#34;)&#xA;    ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SDWebImageSwiftUI&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;SDWebImage/SDWebImageSwiftUI&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;WebImage&lt;/code&gt; to load network image&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports placeholder and detail options control for image loading as SDWebImage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports progressive image loading (like baseline)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports success/failure/progress changes event for custom handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports indicator with activity/progress indicator and customization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports built-in animation and transition, powered by SwiftUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports animated image as well!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {&#xA;    WebImage(url: URL(string: &#34;https://nokiatech.github.io/heif/content/images/ski_jump_1440x960.heic&#34;))&#xA;    // Supports options and context, like `.delayPlaceholder` to show placeholder only when error&#xA;    .onSuccess { image, data, cacheType in&#xA;        // Success&#xA;        // Note: Data exist only when queried from disk cache or network. Use `.queryMemoryData` if you really need data&#xA;    }&#xA;    .resizable() // Resizable like SwiftUI.Image, you must use this modifier or the view will use the image bitmap size&#xA;    .placeholder(Image(systemName: &#34;photo&#34;)) // Placeholder Image&#xA;    // Supports ViewBuilder as well&#xA;    .placeholder {&#xA;        Rectangle().foregroundColor(.gray)&#xA;    }&#xA;    .indicator(.activity) // Activity Indicator&#xA;    .transition(.fade(duration: 0.5)) // Fade Transition with duration&#xA;    .scaledToFit()&#xA;    .frame(width: 300, height: 300, alignment: .center)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: This &lt;code&gt;WebImage&lt;/code&gt; using &lt;code&gt;Image&lt;/code&gt; for internal implementation, which is the best compatible for SwiftUI layout and animation system. But unlike SwiftUI&#39;s &lt;code&gt;Image&lt;/code&gt; which does not support animated image or vector image, &lt;code&gt;WebImage&lt;/code&gt; supports animated image as well (by defaults from v2.0.0).&lt;/p&gt; &#xA;&lt;p&gt;However, The &lt;code&gt;WebImage&lt;/code&gt; animation provide simple common use case, so it&#39;s still recommend to use &lt;code&gt;AnimatedImage&lt;/code&gt; for advanced controls like progressive animation rendering, or vector image rendering.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@State var isAnimating: Bool = true&#xA;var body: some View {&#xA;    WebImage(url: URL(string: &#34;https://raw.githubusercontent.com/liyong03/YLGIFImage/master/YLGIFImageDemo/YLGIFImageDemo/joy.gif&#34;), isAnimating: $isAnimating)) // Animation Control, supports dynamic changes&#xA;    // The initial value of binding should be true&#xA;    .customLoopCount(1) // Custom loop count&#xA;    .playbackRate(2.0) // Playback speed rate&#xA;    .playbackMode(.bounce) // Playback normally to the end, then reversely back to the start&#xA;    // `WebImage` supports advanced control just like `AnimatedImage`, but without the progressive animation support&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: For indicator, you can custom your own as well. For example, iOS 14/watchOS 7 introduce the new &lt;code&gt;ProgressView&lt;/code&gt;, which can be easily used via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;WebImage(url: url)&#xA;.indicator(.activity)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can just write like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;WebImage(url: url)&#xA;.indicator {&#xA;    Indicator { _, _ in&#xA;        ProgressView()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;AnimatedImage&lt;/code&gt; to play animation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports network image as well as local data and bundle image&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports animated image format as well as vector image format&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports animated progressive image loading (like web browser)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports animation control using the SwiftUI Binding&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports indicator and transition, powered by SDWebImage and Core Animation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports advanced control like loop count, playback rate, buffer size, runloop mode, etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports coordinate with native UIKit/AppKit view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {&#xA;    Group {&#xA;        AnimatedImage(url: URL(string: &#34;https://raw.githubusercontent.com/liyong03/YLGIFImage/master/YLGIFImageDemo/YLGIFImageDemo/joy.gif&#34;))&#xA;        // Supports options and context, like `.progressiveLoad` for progressive animation loading&#xA;        .onFailure { error in&#xA;            // Error&#xA;        }&#xA;        .resizable() // Resizable like SwiftUI.Image, you must use this modifier or the view will use the image bitmap size&#xA;        .placeholder(UIImage(systemName: &#34;photo&#34;)) // Placeholder Image&#xA;        // Supports ViewBuilder as well&#xA;        .placeholder {&#xA;            Circle().foregroundColor(.gray)&#xA;        }&#xA;        .indicator(SDWebImageActivityIndicator.medium) // Activity Indicator&#xA;        .transition(.fade) // Fade Transition&#xA;        .scaledToFit() // Attention to call it on AnimatedImage, but not `some View` after View Modifier (Swift Protocol Extension method is static dispatched)&#xA;        &#xA;        // Data&#xA;        AnimatedImage(data: try! Data(contentsOf: URL(fileURLWithPath: &#34;/tmp/foo.webp&#34;)))&#xA;        .customLoopCount(1) // Custom loop count&#xA;        .playbackRate(2.0) // Playback speed rate&#xA;        &#xA;        // Bundle (not Asset Catalog)&#xA;        AnimatedImage(name: &#34;animation1.gif&#34;, isAnimating: $isAnimating) // Animation control binding&#xA;        .maxBufferSize(.max)&#xA;        .onViewUpdate { view, context in // Advanced native view coordinate&#xA;            // AppKit tooltip for mouse hover&#xA;            view.toolTip = &#34;Mouseover Tip&#34;&#xA;            // UIKit advanced content mode&#xA;            view.contentMode = .topLeft&#xA;            // Coordinator, used for Cocoa Binding or Delegate method&#xA;            let coordinator = context.coordinator&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;AnimatedImage&lt;/code&gt; supports both image url or image data for animated image format. Which use the SDWebImage&#39;s &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/Advanced-Usage#animated-image-50&#34;&gt;Animated ImageView&lt;/a&gt; for internal implementation. Pay attention that since this base on UIKit/AppKit representable, some advanced SwiftUI layout and animation system may not work as expected. You may need UIKit/AppKit and Core Animation to modify the native view.&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;AnimatedImage&lt;/code&gt; some methods like &lt;code&gt;.transition&lt;/code&gt;, &lt;code&gt;.indicator&lt;/code&gt; and &lt;code&gt;.aspectRatio&lt;/code&gt; have the same naming as &lt;code&gt;SwiftUI.View&lt;/code&gt; protocol methods. But the args receive the different type. This is because &lt;code&gt;AnimatedImage&lt;/code&gt; supports to be used with UIKit/AppKit component and animation. If you find ambiguity, use full type declaration instead of the dot expression syntax.&lt;/p&gt; &#xA;&lt;p&gt;Note: some of methods on &lt;code&gt;AnimatedImage&lt;/code&gt; will return &lt;code&gt;some View&lt;/code&gt;, a new Modified Content. You&#39;ll lose the type related modifier method. For this case, you can either reorder the method call, or use Native View in &lt;code&gt;.onViewUpdate&lt;/code&gt; for rescue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;// Using UIKit components&#xA;var body: some View {&#xA;    AnimatedImage(name: &#34;animation2.gif&#34;) &#xA;    .indicator(SDWebImageProgressIndicator.default) // UIKit indicator component&#xA;    .transition(SDWebImageTransition.flipFromLeft) // UIKit animation transition&#xA;}&#xA;&#xA;// Using SwiftUI components&#xA;var body: some View {&#xA;    AnimatedImage(name: &#34;animation2.gif&#34;)&#xA;    .indicator(Indicator.progress) // SwiftUI indicator component&#xA;    .transition(AnyTransition.flipFromLeft) // SwiftUI animation transition&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Which View to choose&lt;/h3&gt; &#xA;&lt;p&gt;Why we have two different View types here, is because of current SwiftUI limit. But we&#39;re aimed to provide best solution for all use cases.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t need animated image, prefer to use &lt;code&gt;WebImage&lt;/code&gt; firstly. Which behaves the seamless as built-in SwiftUI View. If SwiftUI works, it works. If SwiftUI doesn&#39;t work, it either :)&lt;/p&gt; &#xA;&lt;p&gt;If you need simple animated image, use &lt;code&gt;WebImage&lt;/code&gt;. Which provide the basic animated image support. But it does not support progressive animation rendering, nor vector image, if you don&#39;t care about this.&lt;/p&gt; &#xA;&lt;p&gt;If you need powerful animated image, &lt;code&gt;AnimatedImage&lt;/code&gt; is the one to choose. Remember it supports static image as well, you don&#39;t need to check the format, just use as it. Also, some powerful feature like UIKit/AppKit tint color, vector image, symbol image configuration, tvOS layered image, only available in &lt;code&gt;AnimatedImage&lt;/code&gt; but not currently in SwfitUI.&lt;/p&gt; &#xA;&lt;p&gt;But, because &lt;code&gt;AnimatedImage&lt;/code&gt; use &lt;code&gt;UIViewRepresentable&lt;/code&gt; and driven by UIKit, currently there may be some small incompatible issues between UIKit and SwiftUI layout and animation system, or bugs related to SwiftUI itself. We try our best to match SwiftUI behavior, and provide the same API as &lt;code&gt;WebImage&lt;/code&gt;, which make it easy to switch between these two types if needed.&lt;/p&gt; &#xA;&lt;h3&gt;Use &lt;code&gt;ImageManager&lt;/code&gt; for your own View type&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;ImageManager&lt;/code&gt; is a class which conforms to Combine&#39;s &lt;a href=&#34;https://developer.apple.com/documentation/combine/observableobject&#34;&gt;ObservableObject&lt;/a&gt; protocol. Which is the core fetching data source of &lt;code&gt;WebImage&lt;/code&gt; we provided.&lt;/p&gt; &#xA;&lt;p&gt;For advanced use case, like loading image into the complicated View graph which you don&#39;t want to use &lt;code&gt;WebImage&lt;/code&gt;. You can directly bind your own View type with the Manager.&lt;/p&gt; &#xA;&lt;p&gt;It looks familiar like &lt;code&gt;SDWebImageManager&lt;/code&gt;, but it&#39;s built for SwiftUI world, which provide the Source of Truth for loading images. You&#39;d better use SwiftUI&#39;s &lt;code&gt;@ObservedObject&lt;/code&gt; to bind each single manager instance for your View instance, which automatically update your View&#39;s body when image status changed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MyView : View {&#xA;    @ObservedObject var imageManager = ImageManager()&#xA;    var body: some View {&#xA;        // Your custom complicated view graph&#xA;        Group {&#xA;            if imageManager.image != nil {&#xA;                Image(uiImage: imageManager.image!)&#xA;            } else {&#xA;                Rectangle().fill(Color.gray)&#xA;            }&#xA;        }&#xA;        // Trigger image loading when appear&#xA;        .onAppear { self.imageManager.load(url: url) }&#xA;        // Cancel image loading when disappear&#xA;        .onDisappear { self.imageManager.cancel() }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customization and configuration setup&lt;/h3&gt; &#xA;&lt;p&gt;This framework is based on SDWebImage, which supports advanced customization and configuration to meet different users&#39; demand.&lt;/p&gt; &#xA;&lt;p&gt;You can register multiple coder plugins for external image format. You can register multiple caches (different paths and config), multiple loaders (URLSession and Photos URLs). You can control the cache expiration date, size, download priority, etc. All in our &lt;a href=&#34;https://github.com/SDWebImage/SDWebImage/wiki/&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The best place to put these setup code for SwiftUI App, it&#39;s the &lt;code&gt;AppDelegate.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;    // Add WebP/SVG/PDF support&#xA;    SDImageCodersManager.shared.addCoder(SDImageWebPCoder.shared)&#xA;    SDImageCodersManager.shared.addCoder(SDImageSVGCoder.shared)&#xA;    SDImageCodersManager.shared.addCoder(SDImagePDFCoder.shared)&#xA;    &#xA;    // Add default HTTP header&#xA;    SDWebImageDownloader.shared.setValue(&#34;image/webp,image/apng,image/*,*/*;q=0.8&#34;, forHTTPHeaderField: &#34;Accept&#34;)&#xA;    &#xA;    // Add multiple caches&#xA;    let cache = SDImageCache(namespace: &#34;tiny&#34;)&#xA;    cache.config.maxMemoryCost = 100 * 1024 * 1024 // 100MB memory&#xA;    cache.config.maxDiskSize = 50 * 1024 * 1024 // 50MB disk&#xA;    SDImageCachesManager.shared.addCache(cache)&#xA;    SDWebImageManager.defaultImageCache = SDImageCachesManager.shared&#xA;    &#xA;    // Add multiple loaders with Photos Asset support&#xA;    SDImageLoadersManager.shared.addLoader(SDImagePhotosLoader.shared)&#xA;    SDWebImageManager.defaultImageLoader = SDImageLoadersManager.shared&#xA;    return true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, it&#39;s really recommended to check our demo, to learn detailed API usage. You can also have a check at the latest API documentation, for advanced usage.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sdwebimage.github.io/SDWebImageSwiftUI/&#34;&gt;SDWebImageSwiftUI API documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sdwebimage.github.io/&#34;&gt;SDWebImage API documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Common Problems&lt;/h3&gt; &#xA;&lt;h4&gt;Using WebImage/AnimatedImage in List/LazyStack/LazyGrid and ForEach&lt;/h4&gt; &#xA;&lt;p&gt;SwiftUI has a known behavior(bug?) when using stateful view in &lt;code&gt;List/LazyStack/LazyGrid&lt;/code&gt;. Only the &lt;strong&gt;Top Level&lt;/strong&gt; view can hold its own &lt;code&gt;@State/@StateObject&lt;/code&gt;, but the sub structure will lose state when scroll out of screen. However, WebImage/Animated is both stateful. To ensure the state keep in sync even when scroll out of screen. you may use some tricks.&lt;/p&gt; &#xA;&lt;p&gt;See more: &lt;a href=&#34;https://twitter.com/fatbobman/status/1572507700436807683?s=21&amp;amp;t=z4FkAWTMvjsgL-wKdJGreQ&#34;&gt;https://twitter.com/fatbobman/status/1572507700436807683?s=21&amp;amp;t=z4FkAWTMvjsgL-wKdJGreQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In short, it&#39;s not recommanded to do so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView {&#xA;    @State var imageURLs: [String]&#xA;    var body: some View {&#xA;        List {&#xA;            ForEach(imageURLs, id: \.self) { url in&#xA;                VStack {&#xA;                    WebImage(url) // The top level is `VStack`&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;instead, using this approach:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView {&#xA;    struct BodyView {&#xA;        @State var url: String&#xA;        var body: some View {&#xA;            VStack {&#xA;                WebImage(url)&#xA;            }&#xA;        }&#xA;    }&#xA;    @State var imageURLs: [String]&#xA;    var body: some View {&#xA;        List {&#xA;            ForEach(imageURLs, id: \.self) { url in&#xA;                BodyView(url: url)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Image/WebImage/AnimatedImage in Button/NavigationLink&lt;/h4&gt; &#xA;&lt;p&gt;SwiftUI&#39;s &lt;code&gt;Button&lt;/code&gt; apply overlay to its content (except &lt;code&gt;Text&lt;/code&gt;) by default, this is common mistake to write code like this, which cause strange behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Wrong&#xA;Button(action: {&#xA;    // Clicked&#xA;}) {&#xA;    WebImage(url: url)&#xA;}&#xA;// NavigationLink create Button implicitly&#xA;NavigationView {&#xA;    NavigationLink(destination: Text(&#34;Detail view here&#34;)) {&#xA;        WebImage(url: url)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead, you must override the &lt;code&gt;.buttonStyle&lt;/code&gt; to use the plain style, or the &lt;code&gt;.renderingMode&lt;/code&gt; to use original mode. You can also use the &lt;code&gt;.onTapGesture&lt;/code&gt; modifier for touch handling. See &lt;a href=&#34;https://www.hackingwithswift.com/quick-start/swiftui/how-to-disable-the-overlay-color-for-images-inside-button-and-navigationlink&#34;&gt;How to disable the overlay color for images inside Button and NavigationLink&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Correct&#xA;Button(action: {&#xA;    // Clicked&#xA;}) {&#xA;    WebImage(url: url)&#xA;}&#xA;.buttonStyle(PlainButtonStyle())&#xA;// Or&#xA;NavigationView {&#xA;    NavigationLink(destination: Text(&#34;Detail view here&#34;)) {&#xA;        WebImage(url: url)&#xA;        .renderingMode(.original)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using with external loaders/caches/coders&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImage itself, supports many custom loaders (like &lt;a href=&#34;https://github.com/firebase/FirebaseUI-iOS&#34;&gt;Firebase Storage&lt;/a&gt; and &lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePhotosPlugin&#34;&gt;PhotosKit&lt;/a&gt;), caches (like &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageYYPlugin&#34;&gt;YYCache&lt;/a&gt; and &lt;a href=&#34;https://github.com/SDWebImage/SDWebImagePINPlugin&#34;&gt;PINCache&lt;/a&gt;), and coders (like &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageWebPCoder&#34;&gt;WebP&lt;/a&gt; and &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageAVIFCoder&#34;&gt;AVIF&lt;/a&gt;, even &lt;a href=&#34;https://github.com/SDWebImage/SDWebImageLottieCoder&#34;&gt;Lottie&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Here is the tutorial to setup these external components with SwiftUI environment.&lt;/p&gt; &#xA;&lt;h5&gt;Setup external SDKs&lt;/h5&gt; &#xA;&lt;p&gt;You can put the setup code inside your SwiftUI &lt;code&gt;App.init()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@main&#xA;struct MyApp: App {&#xA;    &#xA;    init() {&#xA;        // Custom Firebase Storage Loader&#xA;        FirebaseApp.configure()&#xA;        SDImageLoadersManager.shared.loaders = [FirebaseUI.StorageImageLoader.shared]&#xA;        SDWebImageManager.defaultImageLoader = SDImageLoadersManager.shared&#xA;        // WebP support&#xA;        SDImageCodersManager.shared.addCoder(SDImageWebPCoder.shared)&#xA;    }&#xA;    &#xA;    var body: some Scene {&#xA;        WindowGroup {&#xA;            ContentView()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, if your App have complicated &lt;code&gt;AppDelegate&lt;/code&gt; class, put setup code there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class AppDelegate: NSObject, UIApplicationDelegate {&#xA;    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -&amp;gt; Bool {&#xA;        SDImageCachesManager.shared.caches = [YYCache(name: &#34;default&#34;)]&#xA;        SDWebImageManager.defaultImageCache = SDImageCachesManager.shared&#xA;        return true&#xA;    }&#xA;}&#xA;&#xA;@main&#xA;struct MyApp: App {&#xA;    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate&#xA;&#xA;    var body: some Scene {&#xA;        WindowGroup {&#xA;            ContentView()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Use external SDKs&lt;/h5&gt; &#xA;&lt;p&gt;For some of custom loaders, you need to create the &lt;code&gt;URL&lt;/code&gt; struct with some special APIs, so that SDWebImage can retrieve the context from other SDKs, like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FirebaseStorage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let storageRef: StorageReference&#xA;let storageURL = NSURL.sd_URL(with: storageRef) as URL?&#xA;// Or via convenience extension&#xA;let storageURL = storageRef.sd_URLRepresentation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PhotosKit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let asset: PHAsset&#xA;let photosURL = NSURL.sd_URL(with: asset) as URL?&#xA;// Or via convenience extension&#xA;let photosURL = asset.sd_URLRepresentation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For some of custom coders, you need to request the image with some options to control the behavior, like Vector Images SVG/PDF. Because SwiftUI.Image or WebImage does not supports vector graph at all.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SVG/PDF Coder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let vectorURL: URL? // URL to SVG or PDF&#xA;WebImage(url: vectorURL, context: [.imageThumbnailPixelSize: CGSize(width: 100, height: 100)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lottie Coder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let lottieURL: URL? // URL to Lottie.json&#xA;WebImage(url: lottieURL, isAnimating: $isAnimating)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For caches, you actually don&#39;t need to worry about anything. It just works after setup.&lt;/p&gt; &#xA;&lt;h4&gt;Using for backward deployment and weak linking SwiftUI&lt;/h4&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI supports to use when your App Target has a deployment target version less than iOS 14/macOS 11/tvOS 14/watchOS 7. Which will weak linking of SwiftUI(Combine) to allows writing code with available check at runtime.&lt;/p&gt; &#xA;&lt;p&gt;To use backward deployment, you have to do the follow things:&lt;/p&gt; &#xA;&lt;h5&gt;Add weak linking framework&lt;/h5&gt; &#xA;&lt;p&gt;Add &lt;code&gt;-weak_framework SwiftUI -weak_framework Combine&lt;/code&gt; in your App Target&#39;s &lt;code&gt;Other Linker Flags&lt;/code&gt; build setting. You can also do this using Xcode&#39;s &lt;code&gt;Optional Framework&lt;/code&gt; checkbox, there have the same effect.&lt;/p&gt; &#xA;&lt;p&gt;You should notice that all the third party SwiftUI frameworks should have this build setting as well, not only just SDWebImageSwiftUI. Or when running on iOS 12 device, it will trigger the runtime dyld error on startup.&lt;/p&gt; &#xA;&lt;h5&gt;Backward deployment on iOS 12.1-&lt;/h5&gt; &#xA;&lt;p&gt;For deployment target version below iOS 12.2 (The first version which Swift 5 Runtime bundled in iOS system), you have to change the min deployment target version of SDWebImageSwiftUI. This may take some side effect on compiler&#39;s optimization and trigger massive warnings for some frameworks.&lt;/p&gt; &#xA;&lt;p&gt;However, for iOS 12.2+, you can still keep the min deployment target version to iOS 14, no extra warnings or performance slow down for iOS 14 client.&lt;/p&gt; &#xA;&lt;p&gt;Because Swift use the min deployment target version to detect whether to link the App bundled Swift runtime, or the System built-in one (&lt;code&gt;/usr/lib/swift/libswiftCore.dylib&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For CocoaPods user, you can change the min deployment target version in the Podfile via post installer:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post_install do |installer|&#xA;  installer.pods_project.targets.each do |target|&#xA;    target.build_configurations.each do |config|&#xA;      config.build_settings[&#39;IPHONEOS_DEPLOYMENT_TARGET&#39;] = &#39;11.0&#39; # version you need&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For Carthage user, you can use &lt;code&gt;carthage update --no-build&lt;/code&gt; to download the dependency, then change the Xcode Project&#39;s deployment target version and build the binary framework.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For SwiftPM user, you have to use the local dependency (with the Git submodule) to change the deployment target version.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Backward deployment on iOS 12.2+&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For Carthage user, the built binary framework will use &lt;a href=&#34;https://swift.org/blog/abi-stability-and-more/&#34;&gt;Library Evolution&lt;/a&gt; to support for backward deployment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For CocoaPods user, you can skip the platform version validation in Podfile with:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;14.0&#39; # This does not effect your App Target&#39;s deployment target version, just a hint for CocoaPods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For SwiftPM user, SwiftPM does not support weak linking nor Library Evolution, so it can not deployment to iOS 12+ user without changing the min deployment target.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Add available annotation&lt;/h5&gt; &#xA;&lt;p&gt;Add &lt;strong&gt;all the SwiftUI code&lt;/strong&gt; with the available annotation and runtime check, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// AppDelegate.swift&#xA;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;    // ...&#xA;    if #available(iOS 14, *) {&#xA;        window.rootViewController = UIHostingController(rootView: ContentView())&#xA;    } else {&#xA;        window.rootViewController = ViewController()&#xA;    }&#xA;    // ...&#xA;}&#xA;&#xA;// ViewController.swift&#xA;class ViewController: UIViewController {&#xA;    var label: UILabel = UILabel()&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        view.backgroundColor = .white&#xA;        view.addSubview(label)&#xA;        label.text = &#34;Hello World iOS 12!&#34;&#xA;        label.sizeToFit()&#xA;        label.center = view.center&#xA;    }&#xA;}&#xA;&#xA;// ContentView.swift&#xA;@available(iOS 14.0, OSX 11.0, tvOS 14.0, watchOS 7.0, *)&#xA;struct ContentView : View {&#xA;    var body: some View {&#xA;        Group {&#xA;            Text(&#34;Hello World iOS 14!&#34;)&#xA;            WebImage(url: URL(string: &#34;https://i.loli.net/2019/09/24/rX2RkVWeGKIuJvc.jpg&#34;))&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;To run the example using SwiftUI, following the steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;SDWebImageSwiftUI.xcworkspace&lt;/code&gt;, wait for SwiftPM finishing downloading the test dependency.&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;code&gt;SDWebImageSwiftUIDemo&lt;/code&gt; (or other platforms) scheme and run the demo application.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: The &lt;code&gt;Podfile&lt;/code&gt; here is because history we use CocoaPods to integrate libs into Demo, but now we use SPM.&lt;/p&gt; &#xA;&lt;p&gt;Since SwiftUI is aimed to support all Apple platforms, our demo does this as well, one codebase including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS (iPhone/iPad/Mac Catalyst)&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;tvOS&lt;/li&gt; &#xA; &lt;li&gt;watchOS&lt;/li&gt; &#xA; &lt;li&gt;visionOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Demo Tips:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Switch&lt;/code&gt; (right-click on macOS/force press on watchOS) to switch between &lt;code&gt;WebImage&lt;/code&gt; and &lt;code&gt;AnimatedImage&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Reload&lt;/code&gt; (right-click on macOS/force press on watchOS) to clear cache.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Swipe Left&lt;/code&gt; (menu button on tvOS) to delete one image url from list.&lt;/li&gt; &#xA; &lt;li&gt;Pinch gesture (Digital Crown on watchOS, play button on tvOS) to zoom-in detail page image.&lt;/li&gt; &#xA; &lt;li&gt;Clear cache and go to detail page to see progressive loading.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI has Unit Test to increase code quality. For SwiftUI, there are no official Unit Test solution provided by Apple.&lt;/p&gt; &#xA;&lt;p&gt;However, since SwiftUI is State-Based and Attributed-Implemented layout system, there are open source projects who provide the solution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalexn/ViewInspector&#34;&gt;ViewInspector&lt;/a&gt;: Inspect View&#39;s runtime attribute value (like &lt;code&gt;.frame&lt;/code&gt; modifier, &lt;code&gt;.image&lt;/code&gt; value). We use this to test &lt;code&gt;AnimatedImage&lt;/code&gt; and &lt;code&gt;WebImage&lt;/code&gt;. It also allows the inspect to native UIView/NSView.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run the test:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pod install&lt;/code&gt; on root directory to install the dependency.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;SDWebImageSwiftUI.xcworkspace&lt;/code&gt;, wait for SwiftPM finishing downloading the test dependency.&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;code&gt;SDWebImageSwiftUITests&lt;/code&gt; scheme and start testing.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We&#39;ve already setup the CI pipeline, each PR will run the test case and upload the test report to &lt;a href=&#34;https://codecov.io/gh/SDWebImage/SDWebImageSwiftUI&#34;&gt;codecov&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImageSwiftUI/master/Example/Screenshot/Demo-iOS.jpg&#34; height=&#34;960&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImageSwiftUI/master/Example/Screenshot/Demo-macOS.jpg&#34; width=&#34;960&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tvOS Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImageSwiftUI/master/Example/Screenshot/Demo-tvOS.jpg&#34; width=&#34;960&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;watchOS Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SDWebImage/SDWebImageSwiftUI/master/Example/Screenshot/Demo-watchOS.jpg&#34; width=&#34;480&#34;&gt; &#xA;&lt;h2&gt;Extra Notes&lt;/h2&gt; &#xA;&lt;p&gt;Besides all above things, this project can also ensure the following function available on Swift platform for SDWebImage itself.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SwiftUI compatibility&lt;/li&gt; &#xA; &lt;li&gt;Swift Package Manager integration&lt;/li&gt; &#xA; &lt;li&gt;Swift source code compatibility and Swifty&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Which means, this project is one core use case and downstream dependency, which driven SDWebImage itself future development.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dreampiggy&#34;&gt;DreamPiggy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/SDWebImage&#34;&gt;SDWebImage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SDWebImage/libwebp-Xcode&#34;&gt;libwebp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher&#34;&gt;Kingfisher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SwiftUIX/SwiftUIX&#34;&gt;SwiftUIX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JagCesar/Espera&#34;&gt;Espera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/siteline/SwiftUI-Introspect&#34;&gt;SwiftUI-Introspect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nalexn/ViewInspector&#34;&gt;ViewInspector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shaps80/SwiftUIBackports&#34;&gt;SwiftUIBackports&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SDWebImageSwiftUI is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EhPanda-Team/EhPanda</title>
    <updated>2023-09-17T02:00:21Z</updated>
    <id>tag:github.com,2023-09-17:/EhPanda-Team/EhPanda</id>
    <link href="https://github.com/EhPanda-Team/EhPanda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial E-Hentai App for iOS built with SwiftUI &amp; TCA.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;EhPanda&lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;An unofficial E-Hentai App for iOS.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/31207151/105609404-0acbff00-5de4-11eb-9e88-f3c6e0ba9d44.png&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/EhPanda-Team/EhPanda/main/README.md&#34;&gt;English&lt;/a&gt;・ &lt;a href=&#34;https://raw.githubusercontent.com/EhPanda-Team/EhPanda/main/READMEs/README.de.md&#34;&gt;Deutsch&lt;/a&gt;・ &lt;a href=&#34;https://raw.githubusercontent.com/EhPanda-Team/EhPanda/main/READMEs/README.ko.md&#34;&gt;한국어&lt;/a&gt;・ &lt;a href=&#34;https://raw.githubusercontent.com/EhPanda-Team/EhPanda/main/READMEs/README.jpn.md&#34;&gt;日本語&lt;/a&gt;・ &lt;a href=&#34;https://raw.githubusercontent.com/EhPanda-Team/EhPanda/main/READMEs/README.cht.md&#34;&gt;繁體中文&lt;/a&gt;・ &lt;a href=&#34;https://raw.githubusercontent.com/EhPanda-Team/EhPanda/main/READMEs/README.chs.md&#34;&gt;简体中文&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;📢 Translations Wanted 📢&lt;/h2&gt; &#xA;&lt;p&gt;Please submit a pull request if you want to help with translation.&lt;/p&gt; &#xA;&lt;p&gt;App Strings: &lt;a href=&#34;https://raw.githubusercontent.com/EhPanda-Team/EhPanda/main/EhPanda/App&#34;&gt;{lang}.lproj&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub Readme: &lt;a href=&#34;https://raw.githubusercontent.com/EhPanda-Team/EhPanda/main/READMEs&#34;&gt;README.{lang}.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ehpanda.app&#34;&gt;https://ehpanda.app&lt;/a&gt;: &lt;a href=&#34;https://github.com/EhPanda-Team/ehpanda-website/raw/main/src/main.js&#34;&gt;main.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get the ipa file from &lt;a href=&#34;https://github.com/EhPanda-Team/EhPanda/releases&#34;&gt;Releases&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use some software like &lt;a href=&#34;https://altstore.io&#34;&gt;AltStore&lt;/a&gt; to install the ipa file on your device.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This app requires iOS / iPadOS 16.0 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Content &amp;amp; Copyright&lt;/h2&gt; &#xA;&lt;p&gt;The content in this application is derived from E-Hentai, which is user-generated content.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Users of this application should access the E-Hentai content at their own risk.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Questions &amp;amp; Feedback&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/ehpandaapp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-2CA5E0?style=for-the-badge&amp;amp;logo=twitter&amp;amp;logoColor=white&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/BSBE9FCBTq&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/ehpanda&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-858585?style=for-the-badge&amp;amp;logo=telegram&amp;amp;logoColor=white&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ehpanda.app&#34;&gt;https://ehpanda.app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;App Icon&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2023 荒木辰造. All rights reserved.&lt;/p&gt;</summary>
  </entry>
</feed>