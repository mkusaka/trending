<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-20T01:47:51Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aheze/SwiftUICraft</title>
    <updated>2022-11-20T01:47:51Z</updated>
    <id>tag:github.com,2022-11-20:/aheze/SwiftUICraft</id>
    <link href="https://github.com/aheze/SwiftUICraft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minecraft but made with SwiftUI.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUICraft&lt;/h1&gt; &#xA;&lt;p&gt;Minecraft but made with SwiftUI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;100% SwiftUI. No SceneKit, SpriteKit, or anything else.&lt;/li&gt; &#xA; &lt;li&gt;Powered by &lt;a href=&#34;https://github.com/aheze/Prism&#34;&gt;Prism&lt;/a&gt;, a lightweight 3D renderer for SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;Place and destroy 20+ blocks.&lt;/li&gt; &#xA; &lt;li&gt;Supports liquid physics with water and lava.&lt;/li&gt; &#xA; &lt;li&gt;Works in both landscape and portrait mode.&lt;/li&gt; &#xA; &lt;li&gt;Includes 3 levels to choose from.&lt;/li&gt; &#xA; &lt;li&gt;Auto-saves your progress.&lt;/li&gt; &#xA; &lt;li&gt;LASERS!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/49819455/200998762-50a279ca-6460-4aa9-bb85-0d1b96c580ed.mp4&#34;&gt;https://user-images.githubusercontent.com/49819455/200998762-50a279ca-6460-4aa9-bb85-0d1b96c580ed.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwiftUICraft/main/Assets/Level1.PNG&#34; alt=&#34;Level 1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwiftUICraft/main/Assets/Level2.PNG&#34; alt=&#34;Level 2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwiftUICraft/main/Assets/Level3.PNG&#34; alt=&#34;Level 3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwiftUICraft/main/Assets/Lasers.gif&#34; alt=&#34;Lasers&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwiftUICraft/main/Assets/Level1Portrait.PNG&#34; alt=&#34;Level 1 in portrait mode&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwiftUICraft/main/Assets/Level2Portrait.PNG&#34; alt=&#34;Level 2 in portrait mode&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwiftUICraft/main/Assets/Menu.PNG&#34; alt=&#34;Main menu&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Author&lt;/th&gt; &#xA;   &lt;th&gt;Contributing&lt;/th&gt; &#xA;   &lt;th&gt;Need Help?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SwiftUICraft is made by &lt;a href=&#34;https://github.com/SwiftUICraft&#34;&gt;aheze&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;All contributions are welcome. Just &lt;a href=&#34;https://github.com/aheze/SwiftUICraft/fork&#34;&gt;fork&lt;/a&gt; the repo, then make a pull request.&lt;/td&gt; &#xA;   &lt;td&gt;Open an &lt;a href=&#34;https://github.com/aheze/SwiftUICraft/issues&#34;&gt;issue&lt;/a&gt; or join the &lt;a href=&#34;https://discord.com/invite/Pmq8fYcus2&#34;&gt;Discord server&lt;/a&gt;. You can also ping me on &lt;a href=&#34;https://twitter.com/aheze0&#34;&gt;Twitter&lt;/a&gt;. Or read the source code — there&#39;s lots of comments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;I thought SwiftUI was for making buttons and VStacks and other stuff!&lt;/h3&gt; &#xA;&lt;p&gt;Yes. No one said you couldn&#39;t make it 3D though :)&lt;/p&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Perspective transforms. All the 3D functions are warped in my &lt;a href=&#34;https://github.com/aheze/Prism&#34;&gt;Prism&lt;/a&gt; library which I released last month.&lt;/p&gt; &#xA;&lt;h3&gt;Is it 100% SwiftUI?&lt;/h3&gt; &#xA;&lt;p&gt;Yep, literally 100%. No UIKit, SceneKit, SpriteKit, or the other stuff. SwiftUI animations are unmatched and has great performance.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2022 A. Zheng&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/SwiftUICraft/main/Assets/SocialPreview.jpg&#34; alt=&#34;Promotional graphic&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Not affiliated with Minecraft or Microsoft or anything. This was just a weekend project — if there&#39;s any copyright stuff or whatever that you&#39;d like me to change, just &lt;a href=&#34;https://twitter.com/aheze0&#34;&gt;message me&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rxhanson/Rectangle</title>
    <updated>2022-11-20T01:47:51Z</updated>
    <id>tag:github.com,2022-11-20:/rxhanson/Rectangle</id>
    <link href="https://github.com/rxhanson/Rectangle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Move and resize windows on macOS with keyboard shortcuts and snap areas&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rectangle&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rxhanson/Rectangle/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/rxhanson/Rectangle/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rectangle is a window management app based on Spectacle, written in Swift.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13651296/183785536-a67a2e2a-7c55-4c19-9bf8-482e734b1632.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Rectangle supports macOS v10.11+.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can download the latest dmg from &lt;a href=&#34;https://rectangleapp.com&#34;&gt;https://rectangleapp.com&lt;/a&gt; or the &lt;a href=&#34;https://github.com/rxhanson/Rectangle/releases&#34;&gt;Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or install with brew cask:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask rectangle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;p&gt;The keyboard shortcuts are self explanatory, but the snap areas can use some explanation if you&#39;ve never used them on Windows or other window management apps.&lt;/p&gt; &#xA;&lt;p&gt;Drag a window to the edge of the screen. When the mouse cursor reaches the edge of the screen, you&#39;ll see a footprint that Rectangle will attempt to resize and move the window to when the click is released.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Snap Area&lt;/th&gt; &#xA;   &lt;th&gt;Resulting Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Left or right edge&lt;/td&gt; &#xA;   &lt;td&gt;Left or right half&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Top&lt;/td&gt; &#xA;   &lt;td&gt;Maximize&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Corners&lt;/td&gt; &#xA;   &lt;td&gt;Quarter in respective corner&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Left or right edge, just above or below a corner&lt;/td&gt; &#xA;   &lt;td&gt;Top or bottom half&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bottom left, center, or right third&lt;/td&gt; &#xA;   &lt;td&gt;Respective third&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bottom left or right third, then drag to bottom center&lt;/td&gt; &#xA;   &lt;td&gt;First or last two thirds, respectively&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Ignore an app&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Focus the app that you want to ignore (make a window from that app frontmost).&lt;/li&gt; &#xA; &lt;li&gt;Open the Rectangle menu and select &#34;Ignore app&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Execute an action by URL&lt;/h2&gt; &#xA;&lt;p&gt;Open the URL &lt;code&gt;rectangle://execute-action?name=[name]&lt;/code&gt;. Do not activate Rectangle.&lt;/p&gt; &#xA;&lt;p&gt;Available values for &lt;code&gt;[name]&lt;/code&gt;: &lt;code&gt;left-half&lt;/code&gt;, &lt;code&gt;right-half&lt;/code&gt;, &lt;code&gt;center-half&lt;/code&gt;, &lt;code&gt;top-half&lt;/code&gt;, &lt;code&gt;bottom-half&lt;/code&gt;, &lt;code&gt;top-left&lt;/code&gt;, &lt;code&gt;top-right&lt;/code&gt;, &lt;code&gt;bottom-left&lt;/code&gt;, &lt;code&gt;bottom-right&lt;/code&gt;, &lt;code&gt;first-third&lt;/code&gt;, &lt;code&gt;center-third&lt;/code&gt;, &lt;code&gt;last-third&lt;/code&gt;, &lt;code&gt;first-two-thirds&lt;/code&gt;, &lt;code&gt;last-two-thirds&lt;/code&gt;, &lt;code&gt;maximize&lt;/code&gt;, &lt;code&gt;almost-maximize&lt;/code&gt;, &lt;code&gt;maximize-height&lt;/code&gt;, &lt;code&gt;smaller&lt;/code&gt;, &lt;code&gt;larger&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;restore&lt;/code&gt;, &lt;code&gt;next-display&lt;/code&gt;, &lt;code&gt;previous-display&lt;/code&gt;, &lt;code&gt;move-left&lt;/code&gt;, &lt;code&gt;move-right&lt;/code&gt;, &lt;code&gt;move-up&lt;/code&gt;, &lt;code&gt;move-down&lt;/code&gt;, &lt;code&gt;first-fourth&lt;/code&gt;, &lt;code&gt;second-fourth&lt;/code&gt;, &lt;code&gt;third-fourth&lt;/code&gt;, &lt;code&gt;last-fourth&lt;/code&gt;, &lt;code&gt;first-three-fourths&lt;/code&gt;, &lt;code&gt;last-three-fourths&lt;/code&gt;, &lt;code&gt;top-left-sixth&lt;/code&gt;, &lt;code&gt;top-center-sixth&lt;/code&gt;, &lt;code&gt;top-right-sixth&lt;/code&gt;, &lt;code&gt;bottom-left-sixth&lt;/code&gt;, &lt;code&gt;bottom-center-sixth&lt;/code&gt;, &lt;code&gt;bottom-right-sixth&lt;/code&gt;, &lt;code&gt;specified&lt;/code&gt;, &lt;code&gt;reverse-all&lt;/code&gt;, &lt;code&gt;top-left-ninth&lt;/code&gt;, &lt;code&gt;top-center-ninth&lt;/code&gt;, &lt;code&gt;top-right-ninth&lt;/code&gt;, &lt;code&gt;middle-left-ninth&lt;/code&gt;, &lt;code&gt;middle-center-ninth&lt;/code&gt;, &lt;code&gt;middle-right-ninth&lt;/code&gt;, &lt;code&gt;bottom-left-ninth&lt;/code&gt;, &lt;code&gt;bottom-center-ninth&lt;/code&gt;, &lt;code&gt;bottom-right-ninth&lt;/code&gt;, &lt;code&gt;top-left-third&lt;/code&gt;, &lt;code&gt;top-right-third&lt;/code&gt;, &lt;code&gt;bottom-left-third&lt;/code&gt;, &lt;code&gt;bottom-right-third&lt;/code&gt;, &lt;code&gt;top-left-eighth&lt;/code&gt;, &lt;code&gt;top-center-left-eighth&lt;/code&gt;, &lt;code&gt;top-center-right-eighth&lt;/code&gt;, &lt;code&gt;top-right-eighth&lt;/code&gt;, &lt;code&gt;bottom-left-eighth&lt;/code&gt;, &lt;code&gt;bottom-center-left-eighth&lt;/code&gt;, &lt;code&gt;bottom-center-right-eighth&lt;/code&gt;, &lt;code&gt;bottom-right-eighth&lt;/code&gt;, &lt;code&gt;tile-all&lt;/code&gt;, &lt;code&gt;cascade-all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example, from a shell: &lt;code&gt;open -g &#34;rectangle://execute-action?name=left-half&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Terminal Commands for Hidden Preferences&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rxhanson/Rectangle/master/TerminalCommands.md&#34;&gt;TerminalCommands.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Differences with Spectacle&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rectangle uses &lt;a href=&#34;https://github.com/shpakovski/MASShortcut&#34;&gt;MASShortcut&lt;/a&gt; for keyboard shortcut recording. Spectacle used its own shortcut recorder.&lt;/li&gt; &#xA; &lt;li&gt;Rectangle has additional window actions: move windows to each edge without resizing, maximize only the height of a window, almost maximizing a window.&lt;/li&gt; &#xA; &lt;li&gt;Next/prev screen thirds is replaced with explicitly first third, first two thirds, center third, last two thirds, and last third. Screen orientation is taken into account, as in first third will be left third on landscape and top third on portrait. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can however emulate Spectacle&#39;s third cycling using first and last third actions. So, if you repeatedly execute first third, it will cycle through thirds (first, center, last) and vice-versa with the last third.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;There&#39;s an option to have windows traverse across displays on subsequent left or right executions.&lt;/li&gt; &#xA; &lt;li&gt;Windows will snap when dragged to edges/corners of the screen. This can be disabled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Common Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Rectangle doesn&#39;t have the ability to move to other desktops/spaces&lt;/h3&gt; &#xA;&lt;p&gt;Apple never released a public API for Spaces. Other apps that move windows between spaces use unsupported or undesirable ways to achieve this. If Apple decides to release a public API for it, I&#39;ll add it in.&lt;/p&gt; &#xA;&lt;h3&gt;Window resizing is off slightly for iTerm2&lt;/h3&gt; &#xA;&lt;p&gt;By default iTerm2 will only resize in increments of character widths. There might be a setting inside iTerm2 to disable this, but you can change it with the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write com.googlecode.iterm2 DisableWindowSizeSnap -integer 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rectangle appears to cause Notification Center to freeze&lt;/h3&gt; &#xA;&lt;p&gt;This appears to affect only a small amount of users. To prevent this from happening, uncheck the box for &#34;Snap windows by dragging&#34;. See issue &lt;a href=&#34;https://github.com/rxhanson/Rectangle/issues/317&#34;&gt;317&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;If windows aren&#39;t resizing or moving as you expect, here&#39;s some initial steps to get to the bottom of it. Most issues of this type have been caused by other apps.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure macOS is up to date, if possible.&lt;/li&gt; &#xA; &lt;li&gt;Restart your machine.&lt;/li&gt; &#xA; &lt;li&gt;Make sure there are no other window manager applications running.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the app whose windows are not behaving properly does not have any conflicting keyboard shortcuts.&lt;/li&gt; &#xA; &lt;li&gt;Try using the menu items to execute a window action or changing the keyboard shortcut to something different so we can tell if it&#39;s a keyboard shortcut issue or not.&lt;/li&gt; &#xA; &lt;li&gt;Enable debug logging, as per the instructions in the following section.&lt;/li&gt; &#xA; &lt;li&gt;The logs are pretty straightforward. If your calculated rect and your resulting rect are identical, chances are that there is another application causing issues. Save your logs if needed to attach to an issue if you create one.&lt;/li&gt; &#xA; &lt;li&gt;If you suspect there may be another application causing issues, try creating and logging in as a new macOS user.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;View Debug Logging&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hold down the alt (option) key with the Rectangle menu open.&lt;/li&gt; &#xA; &lt;li&gt;Select the &#34;View Logging...&#34; menu item, which is in place of the &#34;About&#34; menu item.&lt;/li&gt; &#xA; &lt;li&gt;Logging will appear in the window as you perform Rectangle commands.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Import &amp;amp; export JSON config&lt;/h2&gt; &#xA;&lt;p&gt;There are buttons for importing and exporting the config as a JSON file in the settings tab of the preferences window.&lt;/p&gt; &#xA;&lt;p&gt;Upon launch, Rectangle will load a config file at &lt;code&gt;~/Library/Application Support/Rectangle/RectangleConfig.json&lt;/code&gt; if it is present and will rename that file with a time/date stamp so that it isn&#39;t read on subsequent launches.&lt;/p&gt; &#xA;&lt;h2&gt;Preferences Storage&lt;/h2&gt; &#xA;&lt;p&gt;The configuration for Rectangle is stored using NSUserDefaults, meaning it is stored in the following location: &lt;code&gt;~/Library/Preferences/com.knollsoft.Rectangle.plist&lt;/code&gt; Note that shortcuts in v0.41+ are stored in a different format and will not load in prior versions.&lt;/p&gt; &#xA;&lt;p&gt;That file can be backed up or transferred to other machines.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Rectangle v0.44+, you can also use the import/export button in the Preferences pane to share to your preferences and keyboard shortcuts across machines using a JSON file.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstallation&lt;/h2&gt; &#xA;&lt;p&gt;Rectangle can be uninstalled by moving it to the trash. Prior to moving it to the trash, you might want to uncheck the box for launching on login to unregister the launcher, but this is not necessary. You can remove the Rectangle defaults from your machine with the following terminal command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults delete com.knollsoft.Rectangle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Logic from Rectangle is used in the &lt;a href=&#34;https://multitouch.app&#34;&gt;Multitouch&lt;/a&gt; app. The &lt;a href=&#34;https://rectangleapp.com/pro&#34;&gt;Rectangle Pro&lt;/a&gt; app is entirely built on top of Rectangle. If you contribute significant code or localizations that get merged into Rectangle, you get a free license of Multitouch or Rectangle Pro. Contributors to Sparkle, MASShortcut, or Spectacle can also receive free Multitouch or Rectangle Pro licenses (just send me a direct message on &lt;a href=&#34;https://gitter.im&#34;&gt;Gitter&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Localization&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to contribute to localization, all of the translations are held in the Main.strings per language. If you would like to add a localization but one doesn&#39;t currently exist and you don&#39;t know how to create one, create an issue and a translation file can be initialized.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests for new localizations or improvements on existing localizations are welcome.&lt;/p&gt; &#xA;&lt;h3&gt;Running the app in Xcode (for developers)&lt;/h3&gt; &#xA;&lt;p&gt;Rectangle uses &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; to install Sparkle and MASShortcut.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure CocoaPods is installed and up to date on your machine (&lt;code&gt;sudo gem install cocoapods&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;pod install&lt;/code&gt; the root directory of the project.&lt;/li&gt; &#xA; &lt;li&gt;Open the generated xcworkspace file (&lt;code&gt;open Rectangle.xcworkspace&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>realm/SwiftLint</title>
    <updated>2022-11-20T01:47:51Z</updated>
    <id>tag:github.com,2022-11-20:/realm/SwiftLint</id>
    <link href="https://github.com/realm/SwiftLint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool to enforce Swift style and conventions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftLint&lt;/h1&gt; &#xA;&lt;p&gt;A tool to enforce Swift style and conventions, loosely based on the now archived &lt;a href=&#34;https://github.com/github/swift-style-guide&#34;&gt;GitHub Swift Style Guide&lt;/a&gt;. SwiftLint enforces the style guide rules that are generally accepted by the Swift community. These rules are well described in popular style guides like &lt;a href=&#34;https://github.com/raywenderlich/swift-style-guide&#34;&gt;Ray Wenderlich&#39;s Swift Style Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SwiftLint hooks into &lt;a href=&#34;http://clang.llvm.org&#34;&gt;Clang&lt;/a&gt; and &lt;a href=&#34;http://www.jpsim.com/uncovering-sourcekit&#34;&gt;SourceKit&lt;/a&gt; to use the &lt;a href=&#34;http://clang.llvm.org/docs/IntroductionToTheClangAST.html&#34;&gt;AST&lt;/a&gt; representation of your source files for more accurate results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/jpsim/SwiftLint/_build/latest?definitionId=4?branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/jpsim/SwiftLint/_apis/build/status/realm.SwiftLint?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/realm/SwiftLint?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/github/realm/SwiftLint/coverage.svg?branch=main&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project adheres to the &lt;a href=&#34;https://realm.io/conduct&#34;&gt;Contributor Covenant Code of Conduct&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;a href=&#34;mailto:info@realm.io&#34;&gt;info@realm.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Language Switch: &lt;a href=&#34;https://github.com/realm/SwiftLint/raw/main/README_CN.md&#34;&gt;中文&lt;/a&gt;, &lt;a href=&#34;https://github.com/realm/SwiftLint/raw/main/README_KR.md&#34;&gt;한국어&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install swiftlint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;Simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftLint&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download the SwiftLint binaries and dependencies in &lt;code&gt;Pods/&lt;/code&gt; during your next &lt;code&gt;pod install&lt;/code&gt; execution and will allow you to invoke it via &lt;code&gt;${PODS_ROOT}/SwiftLint/swiftlint&lt;/code&gt; in your Script Build Phases.&lt;/p&gt; &#xA;&lt;p&gt;This is the recommended way to install a specific version of SwiftLint since it supports installing a pinned version rather than simply the latest (which is the case with Homebrew).&lt;/p&gt; &#xA;&lt;p&gt;Note that this will add the SwiftLint binaries, its dependencies&#39; binaries, and the Swift binary library distribution to the &lt;code&gt;Pods/&lt;/code&gt; directory, so checking in this directory to SCM such as git is discouraged.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/yonaskolb/mint&#34;&gt;Mint&lt;/a&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mint install realm/SwiftLint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a pre-built package:&lt;/h3&gt; &#xA;&lt;p&gt;You can also install SwiftLint by downloading &lt;code&gt;SwiftLint.pkg&lt;/code&gt; from the &lt;a href=&#34;https://github.com/realm/SwiftLint/releases/latest&#34;&gt;latest GitHub release&lt;/a&gt; and running it.&lt;/p&gt; &#xA;&lt;h3&gt;Installing from source:&lt;/h3&gt; &#xA;&lt;p&gt;You can also build and install from source by cloning this project and running &lt;code&gt;make install&lt;/code&gt; (Xcode 13.3 or later).&lt;/p&gt; &#xA;&lt;h3&gt;Using Bazel&lt;/h3&gt; &#xA;&lt;p&gt;Put this in your &lt;code&gt;WORKSPACE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;WORKSPACE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;load(&#34;@bazel_tools//tools/build_defs/repo:http.bzl&#34;, &#34;http_archive&#34;)&#xA;&#xA;http_archive(&#xA;    name = &#34;build_bazel_rules_apple&#34;,&#xA;    sha256 = &#34;f94e6dddf74739ef5cb30f000e13a2a613f6ebfa5e63588305a71fce8a8a9911&#34;,&#xA;    url = &#34;https://github.com/bazelbuild/rules_apple/releases/download/1.1.3/rules_apple.1.1.3.tar.gz&#34;,&#xA;)&#xA;&#xA;load(&#xA;    &#34;@build_bazel_rules_apple//apple:repositories.bzl&#34;,&#xA;    &#34;apple_rules_dependencies&#34;,&#xA;)&#xA;&#xA;apple_rules_dependencies()&#xA;&#xA;load(&#xA;    &#34;@build_bazel_rules_swift//swift:repositories.bzl&#34;,&#xA;    &#34;swift_rules_dependencies&#34;,&#xA;)&#xA;&#xA;swift_rules_dependencies()&#xA;&#xA;load(&#xA;    &#34;@build_bazel_rules_swift//swift:extras.bzl&#34;,&#xA;    &#34;swift_rules_extra_dependencies&#34;,&#xA;)&#xA;&#xA;swift_rules_extra_dependencies()&#xA;&#xA;http_archive(&#xA;    name = &#34;SwiftLint&#34;,&#xA;    sha256 = &#34;7c454ff4abeeecdd9513f6293238a6d9f803b587eb93de147f9aa1be0d8337c4&#34;,&#xA;    url = &#34;https://github.com/realm/SwiftLint/releases/download/0.49.1/bazel.tar.gz&#34;,&#xA;)&#xA;&#xA;load(&#34;@SwiftLint//bazel:repos.bzl&#34;, &#34;swiftlint_repos&#34;)&#xA;&#xA;swiftlint_repos()&#xA;&#xA;load(&#34;@SwiftLint//bazel:deps.bzl&#34;, &#34;swiftlint_deps&#34;)&#xA;&#xA;swiftlint_deps()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Then you can run SwiftLint in the current directory with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;bazel run -c opt @SwiftLint//:swiftlint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Presentation&lt;/h3&gt; &#xA;&lt;p&gt;To get a high-level overview of recommended ways to integrate SwiftLint into your project, we encourage you to watch this presentation or read the transcript:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/9Z1nTMTejqU&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/presentation.svg?sanitize=true&#34; alt=&#34;Presentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Xcode&lt;/h3&gt; &#xA;&lt;p&gt;Integrate SwiftLint into your Xcode project to get warnings and errors displayed in the issue navigator.&lt;/p&gt; &#xA;&lt;p&gt;To do this select the project in the file navigator, then select the primary app target, and go to Build Phases. Click the + and select &#34;New Run Script Phase&#34;. Insert the following as the script:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/runscript.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you installed SwiftLint via Homebrew on Apple Silicon, you might experience this warning:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;warning: SwiftLint not installed, download from &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;https://github.com/realm/SwiftLint&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;That is because Homebrew on Apple Silicon installs the binaries into the &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; folder by default. To instruct Xcode where to find SwiftLint, you can either add &lt;code&gt;/opt/homebrew/bin&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt; environment variable in your build phase&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=&#34;$PATH:/opt/homebrew/bin&#34;&#xA;if which swiftlint &amp;gt; /dev/null; then&#xA;  swiftlint&#xA;else&#xA;  echo &#34;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can create a symbolic link in &lt;code&gt;/usr/local/bin&lt;/code&gt; pointing to the actual binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ln -s /opt/homebrew/bin/swiftlint /usr/local/bin/swiftlint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You might want to move your SwiftLint phase directly before the &#39;Compile Sources&#39; step to detect errors quickly before compiling. However, SwiftLint is designed to run on valid Swift code that cleanly completes the compiler&#39;s parsing stage. So running SwiftLint before &#39;Compile Sources&#39; might yield some incorrect results.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to fix violations as well, your script could run &lt;code&gt;swiftlint --fix &amp;amp;&amp;amp; swiftlint&lt;/code&gt; instead of just &lt;code&gt;swiftlint&lt;/code&gt;. This will mean that all correctable violations are fixed while ensuring warnings show up in your project for remaining violations.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve installed SwiftLint via CocoaPods the script should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;${PODS_ROOT}/SwiftLint/swiftlint&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plug-in Support&lt;/h3&gt; &#xA;&lt;p&gt;SwiftLint can be used as a build tool plug-in for both Xcode projects as well as Swift packages.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Due to limitations with Swift Package Manager Plug-ins this is only recommended for projects that have a SwiftLint configuration in their root directory as there is currently no way to pass any additional options to the SwiftLint executable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Xcode&lt;/h4&gt; &#xA;&lt;p&gt;You can integrate SwiftLint as a Xcode Build Tool Plug-in if you&#39;re working with a project in Xcode.&lt;/p&gt; &#xA;&lt;p&gt;Add SwiftLint as a package dependency to your project without linking any of the products.&lt;/p&gt; &#xA;&lt;p&gt;Select the target you want to add linting to and open the &lt;code&gt;Build Phases&lt;/code&gt; inspector. Open &lt;code&gt;Run Build Tool Plug-ins&lt;/code&gt; and select the &lt;code&gt;+&lt;/code&gt; button. Select &lt;code&gt;SwiftLintPlugin&lt;/code&gt; from the list and add it to the project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/select-swiftlint-plugin.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package&lt;/h4&gt; &#xA;&lt;p&gt;You can integrate SwiftLint as a Swift Package Manager Plug-in if you&#39;re working with a Swift Package with a &lt;code&gt;Package.swift&lt;/code&gt; manifest.&lt;/p&gt; &#xA;&lt;p&gt;Add SwiftLint as a package dependency to your &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;br&gt; Add SwiftLint to a target using the &lt;code&gt;plugins&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(&#xA;    ...&#xA;    plugins: [.plugin(name: &#34;SwiftLintPlugin&#34;, package: &#34;SwiftLint&#34;)]&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AppCode&lt;/h3&gt; &#xA;&lt;p&gt;To integrate SwiftLint with AppCode, install &lt;a href=&#34;https://plugins.jetbrains.com/plugin/9175&#34;&gt;this plugin&lt;/a&gt; and configure SwiftLint&#39;s installed path in the plugin&#39;s preferences. The &lt;code&gt;fix&lt;/code&gt; action is available via &lt;code&gt;⌥⏎&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;To integrate SwiftLint with &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;vscode&lt;/a&gt;, install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-swiftlint&#34;&gt;&lt;code&gt;vscode-swiftlint&lt;/code&gt;&lt;/a&gt; extension from the marketplace.&lt;/p&gt; &#xA;&lt;h3&gt;fastlane&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://docs.fastlane.tools/actions/swiftlint&#34;&gt;official swiftlint fastlane action&lt;/a&gt; to run SwiftLint as part of your fastlane process.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;swiftlint(&#xA;    mode: :lint,                            # SwiftLint mode: :lint (default) or :autocorrect&#xA;    executable: &#34;Pods/SwiftLint/swiftlint&#34;, # The SwiftLint binary path (optional). Important if you&#39;ve installed it via CocoaPods&#xA;    path: &#34;/path/to/lint&#34;,                  # Specify path to lint (optional)&#xA;    output_file: &#34;swiftlint.result.json&#34;,   # The path of the output file (optional)&#xA;    reporter: &#34;json&#34;,                       # The custom reporter to use (optional)&#xA;    config_file: &#34;.swiftlint-ci.yml&#34;,       # The path of the configuration file (optional)&#xA;    files: [                                # List of files to process (optional)&#xA;        &#34;AppDelegate.swift&#34;,&#xA;        &#34;path/to/project/Model.swift&#34;&#xA;    ],&#xA;    ignore_exit_status: true,               # Allow fastlane to continue even if SwiftLint returns a non-zero exit status (Default: false)&#xA;    quiet: true,                            # Don&#39;t print status logs like &#39;Linting &#39; &amp;amp; &#39;Done linting&#39; (Default: false)&#xA;    strict: true                            # Fail on warnings? (Default: false)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;swiftlint&lt;/code&gt; is also available as a &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; image using &lt;code&gt;Ubuntu&lt;/code&gt;. So just the first time you need to pull the docker image using the next command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull ghcr.io/realm/swiftlint:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then following times, you just run &lt;code&gt;swiftlint&lt;/code&gt; inside of the docker like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will execute &lt;code&gt;swiftlint&lt;/code&gt; in the folder where you are right now (&lt;code&gt;pwd&lt;/code&gt;), showing an output like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest&#xA;Linting Swift files in current working directory&#xA;Linting &#39;RuleDocumentation.swift&#39; (1/490)&#xA;...&#xA;Linting &#39;YamlSwiftLintTests.swift&#39; (490/490)&#xA;Done linting! Found 0 violations, 0 serious in 490 files.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here you have more documentation about the usage of &lt;a href=&#34;https://docs.docker.com/&#34;&gt;Docker Images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ swiftlint help&#xA;OVERVIEW: A tool to enforce Swift style and conventions.&#xA;&#xA;USAGE: swiftlint &amp;lt;subcommand&amp;gt;&#xA;&#xA;OPTIONS:&#xA;  --version               Show the version.&#xA;  -h, --help              Show help information.&#xA;&#xA;SUBCOMMANDS:&#xA;  analyze                 Run analysis rules&#xA;  docs                    Open SwiftLint documentation website in the default web browser&#xA;  generate-docs           Generates markdown documentation for all rules&#xA;  lint (default)          Print lint warnings and errors&#xA;  rules                   Display the list of rules and their identifiers&#xA;  version                 Display the current version of SwiftLint&#xA;&#xA;  See &#39;swiftlint help &amp;lt;subcommand&amp;gt;&#39; for detailed help.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;swiftlint&lt;/code&gt; in the directory containing the Swift files to lint. Directories will be searched recursively.&lt;/p&gt; &#xA;&lt;p&gt;To specify a list of files when using &lt;code&gt;lint&lt;/code&gt; or &lt;code&gt;analyze&lt;/code&gt; (like the list of files modified by Xcode specified by the &lt;a href=&#34;https://github.com/norio-nomura/ExtraBuildPhase&#34;&gt;&lt;code&gt;ExtraBuildPhase&lt;/code&gt;&lt;/a&gt; Xcode plugin, or modified files in the working tree based on &lt;code&gt;git ls-files -m&lt;/code&gt;), you can do so by passing the option &lt;code&gt;--use-script-input-files&lt;/code&gt; and setting the following instance variables: &lt;code&gt;SCRIPT_INPUT_FILE_COUNT&lt;/code&gt; and &lt;code&gt;SCRIPT_INPUT_FILE_0&lt;/code&gt;, &lt;code&gt;SCRIPT_INPUT_FILE_1&lt;/code&gt;...&lt;code&gt;SCRIPT_INPUT_FILE_{SCRIPT_INPUT_FILE_COUNT - 1}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These are same environment variables set for input files to &lt;a href=&#34;http://indiestack.com/2014/12/speeding-up-custom-script-phases/&#34;&gt;custom Xcode script phases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Working With Multiple Swift Versions&lt;/h3&gt; &#xA;&lt;p&gt;SwiftLint hooks into SourceKit so it continues working even as Swift evolves!&lt;/p&gt; &#xA;&lt;p&gt;This also keeps SwiftLint lean, as it doesn&#39;t need to ship with a full Swift compiler, it just communicates with the official one you already have installed on your machine.&lt;/p&gt; &#xA;&lt;p&gt;You should always run SwiftLint with the same toolchain you use to compile your code.&lt;/p&gt; &#xA;&lt;p&gt;You may want to override SwiftLint&#39;s default Swift toolchain if you have multiple toolchains or Xcodes installed.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the order in which SwiftLint determines which Swift toolchain to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$XCODE_DEFAULT_TOOLCHAIN_OVERRIDE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$TOOLCHAIN_DIR&lt;/code&gt; or &lt;code&gt;$TOOLCHAINS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xcrun -find swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;sourcekitd.framework&lt;/code&gt; is expected to be found in the &lt;code&gt;usr/lib/&lt;/code&gt; subdirectory of the value passed in the paths above.&lt;/p&gt; &#xA;&lt;p&gt;You may also set the &lt;code&gt;TOOLCHAINS&lt;/code&gt; environment variable to the reverse-DNS notation that identifies a Swift toolchain version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ TOOLCHAINS=com.apple.dt.toolchain.Swift_2_3 swiftlint --fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux, SourceKit is expected to be located in &lt;code&gt;/usr/lib/libsourcekitdInProc.so&lt;/code&gt; or specified by the &lt;code&gt;LINUX_SOURCEKIT_LIB_PATH&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;SwiftLint can be run as a &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; hook. Once &lt;a href=&#34;https://pre-commit.com/#install&#34;&gt;installed&lt;/a&gt;, add this to the &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; in the root of your repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;repos:&#xA;  - repo: https://github.com/realm/SwiftLint&#xA;    rev: 0.44.0&#xA;    hooks:&#xA;      - id: swiftlint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust &lt;code&gt;rev&lt;/code&gt; to the SwiftLint version of your choice.&lt;/p&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;Over 200 rules are included in SwiftLint and the Swift community (that&#39;s you!) continues to contribute more over time. &lt;a href=&#34;https://raw.githubusercontent.com/realm/SwiftLint/main/CONTRIBUTING.md&#34;&gt;Pull requests&lt;/a&gt; are encouraged.&lt;/p&gt; &#xA;&lt;p&gt;You can find an updated list of rules and more information about them &lt;a href=&#34;https://realm.github.io/SwiftLint/rule-directory.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also check &lt;a href=&#34;https://github.com/realm/SwiftLint/tree/main/Source/SwiftLintFramework/Rules&#34;&gt;Source/SwiftLintFramework/Rules&lt;/a&gt; directory to see their implementation.&lt;/p&gt; &#xA;&lt;h3&gt;Opt-In Rules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;opt_in_rules&lt;/code&gt; are disabled by default (i.e., you have to explicitly enable them in your configuration file).&lt;/p&gt; &#xA;&lt;p&gt;Guidelines on when to mark a rule as opt-in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A rule that can have many false positives (e.g. &lt;code&gt;empty_count&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A rule that is too slow&lt;/li&gt; &#xA; &lt;li&gt;A rule that is not general consensus or is only useful in some cases (e.g. &lt;code&gt;force_unwrapping&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Disable rules in code&lt;/h3&gt; &#xA;&lt;p&gt;Rules can be disabled with a comment inside a source file with the following format:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;// swiftlint:disable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; &amp;lt;rule3&amp;gt;...]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The rules will be disabled until the end of the file or until the linter sees a matching enable comment:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;// swiftlint:enable &amp;lt;rule1&amp;gt; [&amp;lt;rule2&amp;gt; &amp;lt;rule3&amp;gt;...]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swiftlint:disable colon&#xA;let noWarning :String = &#34;&#34; // No warning about colons immediately after variable names!&#xA;// swiftlint:enable colon&#xA;let hasWarning :String = &#34;&#34; // Warning generated about colons immediately after variable names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Including the &lt;code&gt;all&lt;/code&gt; keyword will disable all rules until the linter sees a matching enable comment:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;// swiftlint:disable all&lt;/code&gt; &lt;code&gt;// swiftlint:enable all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swiftlint:disable all&#xA;let noWarning :String = &#34;&#34; // No warning about colons immediately after variable names!&#xA;let i = &#34;&#34; // Also no warning about short identifier names&#xA;// swiftlint:enable all&#xA;let hasWarning :String = &#34;&#34; // Warning generated about colons immediately after variable names&#xA;let y = &#34;&#34; // Warning generated about short identifier names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to modify a &lt;code&gt;disable&lt;/code&gt; or &lt;code&gt;enable&lt;/code&gt; command by appending &lt;code&gt;:previous&lt;/code&gt;, &lt;code&gt;:this&lt;/code&gt; or &lt;code&gt;:next&lt;/code&gt; for only applying the command to the previous, this (current) or next line respectively.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swiftlint:disable:next force_cast&#xA;let noWarning = NSNumber() as! Int&#xA;let hasWarning = NSNumber() as! Int&#xA;let noWarning2 = NSNumber() as! Int // swiftlint:disable:this force_cast&#xA;let noWarning3 = NSNumber() as! Int&#xA;// swiftlint:disable:previous force_cast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;swiftlint rules&lt;/code&gt; to print a list of all available rules and their identifiers.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Configure SwiftLint by adding a &lt;code&gt;.swiftlint.yml&lt;/code&gt; file from the directory you&#39;ll run SwiftLint from. The following parameters can be configured:&lt;/p&gt; &#xA;&lt;p&gt;Rule inclusion:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;disabled_rules&lt;/code&gt;: Disable rules from the default enabled set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opt_in_rules&lt;/code&gt;: Enable rules that are not part of the default set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;only_rules&lt;/code&gt;: Only the rules specified in this list will be enabled. Cannot be specified alongside &lt;code&gt;disabled_rules&lt;/code&gt; or &lt;code&gt;opt_in_rules&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;analyzer_rules&lt;/code&gt;: This is an entirely separate list of rules that are only run by the &lt;code&gt;analyze&lt;/code&gt; command. All analyzer rules are opt-in, so this is the only configurable rule list, there are no equivalents for &lt;code&gt;disabled_rules&lt;/code&gt; &lt;code&gt;only_rules&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# By default, SwiftLint uses a set of sensible default rules you can adjust:&#xA;disabled_rules: # rule identifiers turned on by default to exclude from running&#xA;  - colon&#xA;  - comma&#xA;  - control_statement&#xA;opt_in_rules: # some rules are turned off by default, so you need to opt-in&#xA;  - empty_count # Find all the available rules by running: `swiftlint rules`&#xA;&#xA;# Alternatively, specify all rules explicitly by uncommenting this option:&#xA;# only_rules: # delete `disabled_rules` &amp;amp; `opt_in_rules` if using this&#xA;#   - empty_parameters&#xA;#   - vertical_whitespace&#xA;&#xA;included: # paths to include during linting. `--path` is ignored if present.&#xA;  - Source&#xA;excluded: # paths to ignore during linting. Takes precedence over `included`.&#xA;  - Carthage&#xA;  - Pods&#xA;  - Source/ExcludedFolder&#xA;  - Source/ExcludedFile.swift&#xA;  - Source/*/ExcludedFile.swift # Exclude files with a wildcard&#xA;analyzer_rules: # Rules run by `swiftlint analyze`&#xA;  - explicit_self&#xA;&#xA;# configurable rules can be customized from this configuration file&#xA;# binary rules can set their severity level&#xA;force_cast: warning # implicitly&#xA;force_try:&#xA;  severity: warning # explicitly&#xA;# rules that have both warning and error levels, can set just the warning level&#xA;# implicitly&#xA;line_length: 110&#xA;# they can set both implicitly with an array&#xA;type_body_length:&#xA;  - 300 # warning&#xA;  - 400 # error&#xA;# or they can set both explicitly&#xA;file_length:&#xA;  warning: 500&#xA;  error: 1200&#xA;# naming rules can set warnings/errors for min_length and max_length&#xA;# additionally they can set excluded names&#xA;type_name:&#xA;  min_length: 4 # only warning&#xA;  max_length: # warning and error&#xA;    warning: 40&#xA;    error: 50&#xA;  excluded: iPhone # excluded via string&#xA;  allowed_symbols: [&#34;_&#34;] # these are allowed in type names&#xA;identifier_name:&#xA;  min_length: # only min_length&#xA;    error: 4 # only error&#xA;  excluded: # excluded via string array&#xA;    - id&#xA;    - URL&#xA;    - GlobalAPIKey&#xA;reporter: &#34;xcode&#34; # reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use environment variables in your configuration file, by using &lt;code&gt;${SOME_VARIABLE}&lt;/code&gt; in a string.&lt;/p&gt; &#xA;&lt;h4&gt;Defining Custom Rules&lt;/h4&gt; &#xA;&lt;p&gt;You can define custom regex-based rules in your configuration file using the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;custom_rules:&#xA;  pirates_beat_ninjas: # rule identifier&#xA;    included: &#xA;      - &#34;.*\\.swift&#34; # regex that defines paths to include during linting. optional.&#xA;    excluded: &#xA;      - &#34;.*Test\\.swift&#34; # regex that defines paths to exclude during linting. optional&#xA;    name: &#34;Pirates Beat Ninjas&#34; # rule name. optional.&#xA;    regex: &#34;([nN]inja)&#34; # matching pattern&#xA;    capture_group: 0 # number of regex capture group to highlight the rule violation at. optional.&#xA;    match_kinds: # SyntaxKinds to match. optional.&#xA;      - comment&#xA;      - identifier&#xA;    message: &#34;Pirates are better than ninjas.&#34; # violation message. optional.&#xA;    severity: error # violation severity. optional.&#xA;  no_hiding_in_strings:&#xA;    regex: &#34;([nN]inja)&#34;&#xA;    match_kinds: string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is what the output would look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/custom-rule.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can filter the matches by providing one or more &lt;code&gt;match_kinds&lt;/code&gt;, which will reject matches that include syntax kinds that are not present in this list. Here are all the possible syntax kinds:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;attribute.builtin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;attribute.id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buildconfig.id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buildconfig.keyword&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;comment.mark&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;comment.url&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doccomment&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doccomment.field&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;identifier&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keyword&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;objectliteral&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parameter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;placeholder&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;string_interpolation_anchor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;typeidentifier&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All syntax kinds used in a snippet of Swift code can be extracted asking &lt;a href=&#34;https://github.com/jpsim/SourceKitten&#34;&gt;SourceKitten&lt;/a&gt;. For example, &lt;code&gt;sourcekitten syntax --text &#34;struct S {}&#34;&lt;/code&gt; delivers&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;source.lang.swift.syntaxtype.keyword&lt;/code&gt; for the &lt;code&gt;struct&lt;/code&gt; keyword and&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source.lang.swift.syntaxtype.identifier&lt;/code&gt; for its name &lt;code&gt;S&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;which match to &lt;code&gt;keyword&lt;/code&gt; and &lt;code&gt;identifier&lt;/code&gt; in the above list.&lt;/p&gt; &#xA;&lt;p&gt;If using custom rules in combination with &lt;code&gt;only_rules&lt;/code&gt;, make sure to add &lt;code&gt;custom_rules&lt;/code&gt; as an item under &lt;code&gt;only_rules&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Auto-correct&lt;/h3&gt; &#xA;&lt;p&gt;SwiftLint can automatically correct certain violations. Files on disk are overwritten with a corrected version.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to have backups of these files before running &lt;code&gt;swiftlint --fix&lt;/code&gt;, otherwise important data may be lost.&lt;/p&gt; &#xA;&lt;p&gt;Standard linting is disabled while correcting because of the high likelihood of violations (or their offsets) being incorrect after modifying a file while applying corrections.&lt;/p&gt; &#xA;&lt;h3&gt;Analyze&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;swiftlint analyze&lt;/code&gt; command can lint Swift files using the full type-checked AST. The compiler log path containing the clean &lt;code&gt;swiftc&lt;/code&gt; build command invocation (incremental builds will fail) must be passed to &lt;code&gt;analyze&lt;/code&gt; via the &lt;code&gt;--compiler-log-path&lt;/code&gt; flag. e.g. &lt;code&gt;--compiler-log-path /path/to/xcodebuild.log&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This can be obtained by&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Cleaning DerivedData (incremental builds won&#39;t work with analyze)&lt;/li&gt; &#xA; &lt;li&gt;Running &lt;code&gt;xcodebuild -workspace {WORKSPACE}.xcworkspace -scheme {SCHEME} &amp;gt; xcodebuild.log&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Running &lt;code&gt;swiftlint analyze --compiler-log-path xcodebuild.log&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Analyzer rules tend to be considerably slower than lint rules.&lt;/p&gt; &#xA;&lt;h2&gt;Using Multiple Configuration Files&lt;/h2&gt; &#xA;&lt;p&gt;SwiftLint offers a variety of ways to include multiple configuration files. Multiple configuration files get merged into one single configuration that is then applied just as a single configuration file would get applied.&lt;/p&gt; &#xA;&lt;p&gt;There are quite a lot of use cases where using multiple configuration files could be helpful:&lt;/p&gt; &#xA;&lt;p&gt;For instance, one could use a team-wide shared SwiftLint configuration while allowing overrides in each project via a child configuration file.&lt;/p&gt; &#xA;&lt;p&gt;Team-Wide Configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;disabled_rules:&#xA;- force_cast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Project-Specific Configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;opt_in_rules:&#xA;- force_cast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Child / Parent Configs (Locally)&lt;/h3&gt; &#xA;&lt;p&gt;You can specify a &lt;code&gt;child_config&lt;/code&gt; and / or a &lt;code&gt;parent_config&lt;/code&gt; reference within a configuration file. These references should be local paths relative to the folder of the configuration file they are specified in. This even works recursively, as long as there are no cycles and no ambiguities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A child config is treated as a refinement and therefore has a higher priority&lt;/strong&gt;, while a parent config is considered a base with lower priority in case of conflicts.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example, assuming you have the following file structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ProjectRoot&#xA;    |_ .swiftlint.yml&#xA;    |_ .swiftlint_refinement.yml&#xA;    |_ Base&#xA;        |_ .swiftlint_base.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To include both the refinement and the base file, your &lt;code&gt;.swiftlint.yml&lt;/code&gt; should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;child_config: .swiftlint_refinement.yml&#xA;parent_config: Base/.swiftlint_base.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When merging parent and child configs, &lt;code&gt;included&lt;/code&gt; and &lt;code&gt;excluded&lt;/code&gt; configurations are processed carefully to account for differences in the directory location of the containing configuration files.&lt;/p&gt; &#xA;&lt;h3&gt;Child / Parent Configs (Remote)&lt;/h3&gt; &#xA;&lt;p&gt;Just as you can provide local &lt;code&gt;child_config&lt;/code&gt; / &lt;code&gt;parent_config&lt;/code&gt; references, instead of referencing local paths, you can just put urls that lead to configuration files. In order for SwiftLint to detect these remote references, they must start with &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The referenced remote configuration files may even recursively reference other remote configuration files, but aren&#39;t allowed to include local references.&lt;/p&gt; &#xA;&lt;p&gt;Using a remote reference, your &lt;code&gt;.swiftlint.yml&lt;/code&gt; could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;parent_config: https://myteamserver.com/our-base-swiftlint-config.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every time you run SwiftLint and have an Internet connection, SwiftLint tries to get a new version of every remote configuration that is referenced. If this request times out, a cached version is used if available. If there is no cached version available, SwiftLint fails – but no worries, a cached version should be there once SwiftLint has run successfully at least once.&lt;/p&gt; &#xA;&lt;p&gt;If needed, the timeouts for the remote configuration fetching can be specified manually via the configuration file(s) using the &lt;code&gt;remote_timeout&lt;/code&gt; / &lt;code&gt;remote_timeout_if_cached&lt;/code&gt; specifiers. These values default to 2 / 1 second(s).&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;Instead of just providing one configuration file when running SwiftLint via the command line, you can also pass a hierarchy, where the first configuration is treated as a parent, while the last one is treated as the highest-priority child.&lt;/p&gt; &#xA;&lt;p&gt;A simple example including just two configuration files looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;swiftlint --config .swiftlint.yml --config .swiftlint_child.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Nested Configurations&lt;/h3&gt; &#xA;&lt;p&gt;In addition to a main configuration (the &lt;code&gt;.swiftlint.yml&lt;/code&gt; file in the root folder), you can put other configuration files named &lt;code&gt;.swiftlint.yml&lt;/code&gt; into the directory structure that then get merged as a child config, but only with an effect for those files that are within the same directory as the config or in a deeper directory where there isn&#39;t another configuration file. In other words: Nested configurations don&#39;t work recursively – there&#39;s a maximum number of one nested configuration per file that may be applied in addition to the main configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;.swiftlint.yml&lt;/code&gt; files are only considered as a nested configuration if they have not been used to build the main configuration already (e. g. by having been referenced via something like &lt;code&gt;child_config: Folder/.swiftlint.yml&lt;/code&gt;). Also, &lt;code&gt;parent_config&lt;/code&gt; / &lt;code&gt;child_config&lt;/code&gt; specifications of nested configurations are getting ignored because there&#39;s no sense to that.&lt;/p&gt; &#xA;&lt;p&gt;If one (or more) SwiftLint file(s) are explicitly specified via the &lt;code&gt;--config&lt;/code&gt; parameter, that configuration will be treated as an override, no matter whether there exist other &lt;code&gt;.swiftlint.yml&lt;/code&gt; files somewhere within the directory. &lt;strong&gt;So if you want to use nested configurations, you can&#39;t use the &lt;code&gt;--config&lt;/code&gt; parameter.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/realm/SwiftLint/main/LICENSE&#34;&gt;MIT licensed.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/realm.png&#34; width=&#34;184&#34;&gt; &#xA;&lt;p&gt;SwiftLint is maintained and funded by Realm Inc. The names and logos for Realm are trademarks of Realm Inc.&lt;/p&gt; &#xA;&lt;p&gt;We &lt;span&gt;❤️&lt;/span&gt; open source software! See &lt;a href=&#34;https://github.com/realm&#34;&gt;our other open source projects&lt;/a&gt;, read &lt;a href=&#34;https://realm.io/news&#34;&gt;our blog&lt;/a&gt;, or say hi on twitter (&lt;a href=&#34;https://twitter.com/realm&#34;&gt;@realm&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/realm/SwiftLint/main/assets/macstadium.png&#34; width=&#34;184&#34;&gt; &#xA;&lt;p&gt;Our thanks to MacStadium for providing a Mac Mini to run our performance tests.&lt;/p&gt;</summary>
  </entry>
</feed>