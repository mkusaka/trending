<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-05T01:41:36Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lihaoyun6/QuickRecorder</title>
    <updated>2024-05-05T01:41:36Z</updated>
    <id>tag:github.com,2024-05-05:/lihaoyun6/QuickRecorder</id>
    <link href="https://github.com/lihaoyun6/QuickRecorder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight screen recorder based on ScreenCapture Kit for macOS / 基于 ScreenCapture Kit 的轻量化多功能 macOS 录屏工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lihaoyun6/QuickRecorder/main/QuickRecorder/Assets.xcassets/AppIcon.appiconset/icon_128x128@2x.png&#34; width=&#34;200&#34; height=&#34;200&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;QuickRecorder&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;多功能、轻量化、高性能的 macOS 屏幕录制工具&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lihaoyun6/QuickRecorder/main/README_en.md&#34;&gt;[English Version]&lt;/a&gt; / &lt;a href=&#34;https://lihaoyun6.github.io/quickrecorder/&#34;&gt;[软件主页]&lt;/a&gt; &lt;p&gt;&lt;/p&gt; &lt;/h3&gt;&#xA;&lt;h2&gt;运行截图&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./img/preview_dark.png&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;./img/preview.png&#34;&gt; &#xA;  &lt;img alt=&#34;QuickRecorder Screenshots&#34; src=&#34;https://raw.githubusercontent.com/lihaoyun6/QuickRecorder/main/img/preview.png&#34; width=&#34;840&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;h2&gt;安装与使用&lt;/h2&gt; &#xA;&lt;h3&gt;系统版本要求:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 12.3 及更高版本&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;安装:&lt;/h3&gt; &#xA;&lt;p&gt;可&lt;a href=&#34;https://raw.githubusercontent.com/lihaoyun6/releases/latest&#34;&gt;点此前往&lt;/a&gt;下载最新版安装文件. 或使用homebrew安装:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install lihaoyun6/tap/quickrecorder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;特色 / 使用:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;使用 SwiftUI 编写, 体积小巧轻量化. 软件大小仅有不到 10MB, 无任何累赘功能.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持窗口录制, App 录制, 录制移动设备等; 支持窗口声音内录, 鼠标高亮, 隐藏桌面文件等功能.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;完整支持 macOS 14 新增的 &lt;strong&gt;&lt;a href=&#34;https://support.apple.com/zh-cn/guide/facetime/fctm6333f4bd/mac&#34;&gt;演讲者前置&lt;/a&gt;&lt;/strong&gt; 特性, 可在实时叠加摄像头画面 (低版本 macOS 可以使用悬浮窗模式).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持 &lt;code&gt;HEVC with Alpha&lt;/code&gt; 特性, 可在输出文件中包含 Alpha 通道 (目前仅 iMovie 与 FCPX 支持此特性)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;更多功能陆续开发中...&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. 主面板关闭之后在哪里重新打开?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;单击 QuickRecorder 的 Dock 栏图标即可随时重新呼出主功能面板.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. 为什么 QuickRecorder 不是沙盒 App?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;苹果沙盒权限管理机制比较复杂, 使用起来麻烦. 加之 QuickRecorder 并没有上架 App Store的打算, 故没有做成沙盒 App.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. 为什么开启了&#34;录制麦克风&#34;, 视频里却听不到我讲话的声音?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;QuickRecorder 默认会将麦克风输入的音频录制到第二条音轨上, 听不到是因为部分视频播放器不支持多条音轨同时播放, 并不是录音丢失. 使用 QuickTime 播放即可.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;赞助&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/lihaoyun6/QuickRecorder/main/img/donate.png&#34; width=&#34;352&#34;&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mnpn/Azayaka&#34;&gt;Azayaka&lt;/a&gt; @Mnpn&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;灵感来源以及屏幕录制引擎的部分代码来自于 Azayaka 项目, 同时我也是此项目的代码贡献者之一&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/KeyboardShortcuts&#34;&gt;KeyboardShortcuts&lt;/a&gt; @sindresorhus&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;QuickRecorder 使用此swift库来处理快捷键事件&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chat.openai.com&#34;&gt;ChatGPT&lt;/a&gt; @OpenAI&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注: 本项目部分代码使用 ChatGPT 生成或重构整理&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>whoeevee/EeveeSpotify</title>
    <updated>2024-05-05T01:41:36Z</updated>
    <id>tag:github.com,2024-05-05:/whoeevee/EeveeSpotify</id>
    <link href="https://github.com/whoeevee/EeveeSpotify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tweak to get Spotify Premium for free, just like Spotilife&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/whoeevee/EeveeSpotify/swift/Images/banner.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;EeveeSpotify&lt;/h1&gt; &#xA;&lt;p&gt;This tweak makes Spotify think that you have a Premium subscription, granting free listening, just like Spotilife.&lt;/p&gt; &#xA;&lt;h2&gt;The History&lt;/h2&gt; &#xA;&lt;p&gt;Several months ago, Spotilife, the only tweak to get Spotify Premium, stopped working on new Spotify versions. I decompiled Spotilife, reverse-engineered Spotify, intercepted requests, etc., and created this tweak.&lt;/p&gt; &#xA;&lt;h2&gt;Restrictions&lt;/h2&gt; &#xA;&lt;p&gt;Please refrain from opening issues about the following features, as they are server-sided and will &lt;strong&gt;NEVER&lt;/strong&gt; work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very High audio quality&lt;/li&gt; &#xA; &lt;li&gt;Native playlist downloading (you can download podcast episodes though)&lt;/li&gt; &#xA; &lt;li&gt;Lyrics (server-sided with monthly limit, see &lt;a href=&#34;https://raw.githubusercontent.com/whoeevee/issues/42&#34;&gt;#42&lt;/a&gt; for more info)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In theory, implementing downloading/offline mode locally &lt;em&gt;should&lt;/em&gt; be possible, but it will &lt;strong&gt;not&lt;/strong&gt; be included in this tweak.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;Upon login, Spotify fetches user data, including active subscription, and caches it in the &lt;code&gt;offline.bnk&lt;/code&gt; file in the &lt;code&gt;/Library/Application Support/PersistentCache&lt;/code&gt; directory. It uses its proprietary binary format to store data, incorporating a length byte before each value, among other conventions. Certain keys, such as &lt;code&gt;player-license&lt;/code&gt;, &lt;code&gt;financial-product&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt;, determines the user abilities.&lt;/p&gt; &#xA;&lt;p&gt;The tweak patches this file while initializing; Spotify loads it and assumes you have Premium. To be honest, it doesn&#39;t really patch due to challenges with dynamic length and varied bytes. Ideally, there should be a parser capable of deserializing and serializing such format. However, for now, the tweak simply extracts the username from the current &lt;code&gt;offline.bnk&lt;/code&gt; file and inserts it into &lt;code&gt;premiumblank.bnk&lt;/code&gt; (a file containing all premium values preset), replacing &lt;code&gt;offline.bnk&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/whoeevee/EeveeSpotify/swift/Images/hex.png&#34; alt=&#34;Hex&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tweak also changes query parameters &lt;code&gt;trackRows&lt;/code&gt; and &lt;code&gt;video&lt;/code&gt; in HTTP requests to true, so Spotify loads videos and not just track names at the artist page. Sorry if the code seems cringe; the main focus is on the concept. It can stop working just like Spotilife, but so far, it works on the latest Spotify 8.9.## (Spotilife also patches &lt;code&gt;offline.bnk&lt;/code&gt;, but it changes obscure bytes that do nothing on new versions). Spotify reloads user data from time to time (and on changing network, for example), so if Premium stops working, simply restart the app.&lt;/p&gt; &#xA;&lt;p&gt;To open Spotify links in sideloaded app, use &lt;a href=&#34;https://github.com/BillyCurtis/OpenSpotifySafariExtension&#34;&gt;OpenSpotifySafariExtension&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wikimedia/wikipedia-ios</title>
    <updated>2024-05-05T01:41:36Z</updated>
    <id>tag:github.com,2024-05-05:/wikimedia/wikipedia-ios</id>
    <link href="https://github.com/wikimedia/wikipedia-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📱The official Wikipedia iOS app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wikipedia iOS&lt;/h1&gt; &#xA;&lt;p&gt;The official Wikipedia iOS app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wikimedia/wikipedia-ios&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/wikimedia/wikipedia-ios.svg?style=shield&#34; alt=&#34;Wikipedia&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wikimedia/wikipedia-ios/main/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-lightgrey.svg?sanitize=true&#34; alt=&#34;MIT license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;License&lt;/strong&gt;: MIT License&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Source repo&lt;/strong&gt;: &lt;a href=&#34;https://github.com/wikimedia/wikipedia-ios&#34;&gt;https://github.com/wikimedia/wikipedia-ios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Planning (bugs &amp;amp; features)&lt;/strong&gt;: &lt;a href=&#34;https://phabricator.wikimedia.org/project/view/782/&#34;&gt;https://phabricator.wikimedia.org/project/view/782/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Team page&lt;/strong&gt;: &lt;a href=&#34;https://www.mediawiki.org/wiki/Wikimedia_Apps/Team/iOS&#34;&gt;https://www.mediawiki.org/wiki/Wikimedia_Apps/Team/iOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building and Running&lt;/h2&gt; &#xA;&lt;p&gt;In the directory, run &lt;code&gt;./scripts/setup&lt;/code&gt;. Note: going to &lt;code&gt;scripts&lt;/code&gt; directory and running &lt;code&gt;setup&lt;/code&gt; will not work due to relative paths.&lt;/p&gt; &#xA;&lt;p&gt;Running &lt;code&gt;scripts/setup&lt;/code&gt; will setup your computer to build and run the app. The script assumes you have Xcode installed already. It will install &lt;a href=&#34;https://brew.sh&#34;&gt;homebrew&lt;/a&gt;, &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt;, and &lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;ClangFormat&lt;/a&gt;. It will also create a pre-commit hook that uses ClangFormat for linting Objective-C code.&lt;/p&gt; &#xA;&lt;p&gt;After running &lt;code&gt;scripts/setup&lt;/code&gt;, you should be able to open &lt;code&gt;Wikipedia.xcodeproj&lt;/code&gt; and run the app on the iOS Simulator (using the &lt;strong&gt;Wikipedia&lt;/strong&gt; scheme and target). If you encounter any issues, please don&#39;t hesitate to let us know via a &lt;a href=&#34;https://phabricator.wikimedia.org/maniphest/task/edit/form/1/?title=%5BBUG%5D&amp;amp;projects=wikipedia-ios-app-product-backlog,ios-app-bugs&amp;amp;description=%3D%3D%3D+How+many+times+were+you+able+to+reproduce+it?%0D%0A%0D%0A%3D%3D%3D+Steps+to+reproduce%0D%0A%23+%0D%0A%23+%0D%0A%23+%0D%0A%0D%0A%3D%3D%3D+Expected+results%0D%0A%0D%0A%3D%3D%3D+Actual+results%0D%0A%0D%0A%3D%3D%3D+Screenshots%0D%0A%0D%0A%3D%3D%3D+Environments+observed%0D%0A**App+version%3A+**+%0D%0A**OS+versions%3A**+%0D%0A**Device+model%3A**+%0D%0A**Device+language%3A**+%0D%0A%0D%0A%3D%3D%3D+Regression?+%0D%0A%0D%0A+Tag++task+with+%23Regression+%0A&#34;&gt;bug report&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Required Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d rather install the development prerequisites yourself without our script:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835&#34;&gt;&lt;strong&gt;Xcode&lt;/strong&gt;&lt;/a&gt; - The easiest way to get Xcode is from the &lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&#34;&gt;App Store&lt;/a&gt;, but you can also download it from &lt;a href=&#34;https://developer.apple.com/&#34;&gt;developer.apple.com&lt;/a&gt; if you have an Apple ID registered with an Apple Developer account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;&lt;strong&gt;SwiftLint&lt;/strong&gt;&lt;/a&gt; - We use this for linting Swift code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;&lt;strong&gt;ClangFormat&lt;/strong&gt;&lt;/a&gt; - We use this for linting Objective-C code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Covered in the &lt;a href=&#34;https://raw.githubusercontent.com/wikimedia/wikipedia-ios/main/CONTRIBUTING.md&#34;&gt;contributing document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;These are general guidelines rather than hard rules.&lt;/p&gt; &#xA;&lt;h3&gt;Coding Guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Objective-C&lt;/strong&gt; - &lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html&#34;&gt;Apple&#39;s Coding Guidelines for Cocoa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swift&lt;/strong&gt; - &lt;a href=&#34;https://swift.org/documentation/api-design-guidelines/&#34;&gt;swift.org API Design Guidelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;p&gt;We use Xcode&#39;s default 4 space indentation and our &lt;code&gt;.clang-format&lt;/code&gt; file with the pre-commit hook setup by &lt;code&gt;scripts/setup&lt;/code&gt;. Where possible, our Swift code is automatically formatted by &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt; based on the rules defined in &lt;code&gt;.swiftlint-autocorrect.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Process and Code Review Norms&lt;/h3&gt; &#xA;&lt;p&gt;Covered in the &lt;a href=&#34;https://raw.githubusercontent.com/wikimedia/wikipedia-ios/main/docs/process.md&#34;&gt;process document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;When reading logs, note that the log levels are shortened to emoji.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🗣️ Verbose&lt;/li&gt; &#xA; &lt;li&gt;💬 Debug&lt;/li&gt; &#xA; &lt;li&gt;ℹ️ Info&lt;/li&gt; &#xA; &lt;li&gt;⚠️ Warning&lt;/li&gt; &#xA; &lt;li&gt;🚨 Error&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Wikipedia&lt;/strong&gt; scheme is configured to execute the project&#39;s iOS unit tests, which can be run using the &lt;code&gt;Cmd+U&lt;/code&gt; hotkey or the &lt;strong&gt;Product → Test&lt;/strong&gt; menu bar action. In order for the tests to pass, the test device&#39;s language and region must be set to &lt;code&gt;en-US&lt;/code&gt; in Settings → General → Language &amp;amp; Region. There is a &lt;a href=&#34;https://phabricator.wikimedia.org/T259859&#34;&gt;ticket filed&lt;/a&gt; to update the tests to pass regardless of language and region.&lt;/p&gt; &#xA;&lt;h3&gt;Schemes and Targets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wikipedia&lt;/strong&gt; - Points to production servers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Staging&lt;/strong&gt; - Points to various staging server environments. You can adjust these environments by changing the &lt;code&gt;current&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wikimedia/wikipedia-ios/main/WMF%20Framework/Configuration.swift#L41&#34;&gt;property&lt;/a&gt; of &lt;code&gt;Configuration&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An option of &lt;code&gt;appsLabsForPCS&lt;/code&gt; will point to the &lt;a href=&#34;https://mobileapps.wmflabs.org&#34;&gt;Apps team&#39;s staging environment&lt;/a&gt; for page content.&lt;/li&gt; &#xA;   &lt;li&gt;An option of &lt;code&gt;betaCluster&lt;/code&gt; will point to the &lt;a href=&#34;https://www.mediawiki.org/wiki/Beta_Cluster&#34;&gt;MediaWiki beta cluster environment&lt;/a&gt; for most API calls. This is meant to be a more blanket environment setting, so if this value exists it will also force the beta cluster environment for page content on the article view. This beta cluster environment is also where developers can test sandbox push notifications triggered across various wikis. This is selected by default.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;The Staging scheme also has our feature flags set to true. It displays features that are still in development. It is pushed to TestFlight as a separate app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Experimental&lt;/strong&gt; - For one-off builds, to demonstrate early development or prototype features. This points to production servers by default, but can be adjusted to whatever server environment is needed via temporary adjustments in &lt;code&gt;Configuration&lt;/code&gt;. We also sometimes use it for design review, before features go through PR review. It is pushed to TestFlight as a separate app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Local Page Content Service and Announcements&lt;/strong&gt; - used by engineers in Debug-mode only. This has the ability to toggle different local environments within the &lt;code&gt;current&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/wikimedia/wikipedia-ios/main/WMF%20Framework/Configuration.swift#L41&#34;&gt;property&lt;/a&gt; of &lt;code&gt;Configuration&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An option of &lt;code&gt;localPCS&lt;/code&gt; will point to a locally running &lt;a href=&#34;https://gerrit.wikimedia.org/r/q/project:mediawiki%252Fservices%252Fmobileapps&#34;&gt;mobileapps&lt;/a&gt; repository for page content. This is selected by default.&lt;/li&gt; &#xA;   &lt;li&gt;An option of &lt;code&gt;localAnnouncements&lt;/code&gt; will point to a locally running &lt;a href=&#34;https://gerrit.wikimedia.org/r/q/project:mediawiki%252Fservices%252Fwikifeeds&#34;&gt;wikifeeds&lt;/a&gt; repository for the announcements endpoint. This is selected by default.&lt;/li&gt; &#xA;   &lt;li&gt;All other endpoints will point to production.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;RTL&lt;/strong&gt; - Launches the app in an RTL locale using the &lt;code&gt;-AppleLocale&lt;/code&gt; launch argument. This is used by engineers in Debug-mode only.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance Testing&lt;/strong&gt; - This is a duplicate scheme of Wikipedia, but uses the Release configuration in its Run step instead of Debug. We use this scheme when we manually run performance tests as a part of our pre-release checklist.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;WMF&lt;/strong&gt; - Bundles up the app logic shared between the main app and the extensions (widgets, notifications).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update Localizations&lt;/strong&gt; - Covered in the &lt;a href=&#34;https://raw.githubusercontent.com/wikimedia/wikipedia-ios/main/docs/localization.md&#34;&gt;localization document&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update Languages&lt;/strong&gt; - For adding new Wikipedia languages or updating language configurations. Covered in the &lt;a href=&#34;https://raw.githubusercontent.com/wikimedia/wikipedia-ios/main/docs/languages.md&#34;&gt;languages document&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;{{name}}Widget, {{name}}Notification, {{name}}Stickers&lt;/strong&gt; - Extensions for widgets, notifications, and stickers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Continuous Integration&lt;/h3&gt; &#xA;&lt;p&gt;Covered in the &lt;a href=&#34;https://raw.githubusercontent.com/wikimedia/wikipedia-ios/main/docs/ci.md&#34;&gt;CI document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Event Logging&lt;/h3&gt; &#xA;&lt;p&gt;Covered in the &lt;a href=&#34;https://raw.githubusercontent.com/wikimedia/wikipedia-ios/main/docs/event_logging.md&#34;&gt;event logging document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Web Development&lt;/h3&gt; &#xA;&lt;p&gt;The article view and several other components of the app rely on web components. Instructions for working on these components are covered in the &lt;a href=&#34;https://raw.githubusercontent.com/wikimedia/wikipedia-ios/main/docs/web_dev.md&#34;&gt;web development document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contact Us&lt;/h3&gt; &#xA;&lt;p&gt;If you have any questions or comments, you can email us at ios-support[at]wikimedia dot org. We&#39;ll also gladly accept any &lt;a href=&#34;https://phabricator.wikimedia.org/maniphest/task/edit/form/1/?title=%5BBUG%5D&amp;amp;projects=wikipedia-ios-app-product-backlog,ios-app-bugs&amp;amp;description=%3D%3D%3D+How+many+times+were+you+able+to+reproduce+it?%0D%0A%0D%0A%3D%3D%3D+Steps+to+reproduce%0D%0A%23+%0D%0A%23+%0D%0A%23+%0D%0A%0D%0A%3D%3D%3D+Expected+results%0D%0A%0D%0A%3D%3D%3D+Actual+results%0D%0A%0D%0A%3D%3D%3D+Screenshots%0D%0A%0D%0A%3D%3D%3D+Environments+observed%0D%0A**App+version%3A+**+%0D%0A**OS+versions%3A**+%0D%0A**Device+model%3A**+%0D%0A**Device+language%3A**+%0D%0A**App+language%3A**+%0D%0A%0D%0A%3D%3D%3D+Regression?+%0D%0A%0D%0A+Tag++task+with+%23Regression+%0A&#34;&gt;bug reports&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>