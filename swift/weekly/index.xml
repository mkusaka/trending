<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-22T01:45:38Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>swiftlang/swift-testing</title>
    <updated>2024-09-22T01:45:38Z</updated>
    <id>tag:github.com,2024-09-22:/swiftlang/swift-testing</id>
    <link href="https://github.com/swiftlang/swift-testing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern, expressive testing package for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Testing&lt;/h1&gt; &#xA;&lt;!--&#xA;This source file is part of the Swift.org open source project&#xA;&#xA;Copyright (c) 2024 Apple Inc. and the Swift project authors&#xA;Licensed under Apache License v2.0 with Runtime Library Exception&#xA;&#xA;See https://swift.org/LICENSE.txt for license information&#xA;See https://swift.org/CONTRIBUTORS.txt for Swift project authors&#xA;--&gt; &#xA;&lt;p&gt;Swift Testing is a package with expressive and intuitive APIs that make testing your Swift code a breeze.&lt;/p&gt; &#xA;&lt;h2&gt;Feature overview&lt;/h2&gt; &#xA;&lt;h3&gt;Clear, expressive API&lt;/h3&gt; &#xA;&lt;p&gt;Swift Testing has a clear and expressive API built using macros, so you can declare complex behaviors with a small amount of code. The &lt;code&gt;#expect&lt;/code&gt; API uses Swift expressions and operators, and captures the evaluated values so you can quickly understand what went wrong when a test fails.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Test func helloWorld() {&#xA;  let greeting = &#34;Hello, world!&#34;&#xA;  #expect(greeting == &#34;Hello&#34;) // Expectation failed: (greeting → &#34;Hello, world!&#34;) == &#34;Hello&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom test behaviors&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the behavior of tests or test suites using traits specified in your code. Traits can describe the runtime conditions for a test, like which device a test should run on, or limit a test to certain operating system versions. Traits can also help you use continuous integration effectively by specifying execution time limits for your tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Test(.enabled(if: AppFeatures.isCommentingEnabled))&#xA;func videoCommenting() async throws {&#xA;    let video = try #require(await videoLibrary.video(named: &#34;A Beach&#34;))&#xA;    #expect(video.comments.contains(&#34;So picturesque!&#34;))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Easy and flexible organization&lt;/h3&gt; &#xA;&lt;p&gt;Swift Testing provides many ways to keep your tests organized. Structure related tests using a hierarchy of groups and subgroups. Apply tags to flexibly manage, edit, and run tests with common characteristics across your test suite, like tests that target a specific device or use a specific module. You can also give tests a descriptive name so you know what they’re doing at a glance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Test(&#34;Check video metadata&#34;,&#xA;      .tags(.metadata))&#xA;func videoMetadata() {&#xA;    let video = Video(fileName: &#34;By the Lake.mov&#34;)&#xA;    let expectedMetadata = Metadata(duration: .seconds(90))&#xA;    #expect(video.metadata == expectedMetadata)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scalable coverage and execution&lt;/h3&gt; &#xA;&lt;p&gt;Parameterized tests help you run the same test over a sequence of values so you can write less code. And all tests integrate seamlessly with Swift Concurrency and run in parallel by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@Test(&#34;Continents mentioned in videos&#34;, arguments: [&#xA;    &#34;A Beach&#34;,&#xA;    &#34;By the Lake&#34;,&#xA;    &#34;Camping in the Woods&#34;&#xA;])&#xA;func mentionedContinents(videoName: String) async throws {&#xA;    let videoLibrary = try await VideoLibrary()&#xA;    let video = try #require(await videoLibrary.video(named: videoName))&#xA;    #expect(video.mentionedContinents.count &amp;lt;= 3)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cross-platform support&lt;/h3&gt; &#xA;&lt;p&gt;Swift Testing works on all major platforms supported by Swift, including Apple platforms, Linux, and Windows, so your tests can behave more consistently when moving between platforms. It’s developed as open source and discussed on the &lt;a href=&#34;https://forums.swift.org/c/related-projects/swift-testing&#34;&gt;Swift Forums&lt;/a&gt; so the very best ideas, from anywhere, can help shape the future of testing in Swift.&lt;/p&gt; &#xA;&lt;p&gt;The table below describes the current level of support that Swift Testing has for various platforms:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Platform&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;CI Status (6.0)&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;CI Status (main)&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Support Status&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/swift-testing-main-swift-6.0-macos/&#34;&gt;&lt;img src=&#34;https://ci.swift.org/buildStatus/icon?job=swift-testing-main-swift-6.0-macos&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/view/Swift%20Packages/job/swift-testing-main-swift-main-macos/&#34;&gt;&lt;img src=&#34;https://ci.swift.org/buildStatus/icon?job=swift-testing-main-swift-main-macos&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;iOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;watchOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;tvOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;visionOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ubuntu 22.04&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/job/swift-testing-main-swift-6.0-linux/&#34;&gt;&lt;img src=&#34;https://ci.swift.org/buildStatus/icon?job=swift-testing-main-swift-6.0-linux&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci.swift.org/view/Swift%20Packages/job/swift-testing-main-swift-main-linux/&#34;&gt;&lt;img src=&#34;https://ci.swift.org/buildStatus/icon?job=swift-testing-main-swift-main-linux&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://ci-external.swift.org/job/swift-testing-main-swift-main-windows/&#34;&gt;&lt;img src=&#34;https://ci-external.swift.org/buildStatus/icon?job=swift-testing-main-swift-main-windows&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Wasm&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Experimental&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Works with XCTest&lt;/h3&gt; &#xA;&lt;p&gt;If you already have tests written using XCTest, you can run them side-by-side with newer tests written using Swift Testing. This helps you migrate tests incrementally, at your own pace.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] This package is under active, ongoing development and requires a recent &lt;strong&gt;6.0 development snapshot&lt;/strong&gt; toolchain. Its contents and interfaces are still considered experimental at this time and may change. See this &lt;a href=&#34;https://forums.swift.org/t/an-update-on-swift-testing-progress-and-stable-release-plans/71455&#34;&gt;Forum post&lt;/a&gt; for details about stable release plans.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Detailed documentation for Swift Testing can be found on the &lt;a href=&#34;https://swiftpackageindex.com/swiftlang/swift-testing/main/documentation/testing&#34;&gt;Swift Package Index&lt;/a&gt;. There, you can delve into comprehensive guides, tutorials, and API references to make the most out of this package. Swift Testing is included with the Swift 6 toolchain and Xcode 16.&lt;/p&gt; &#xA;&lt;p&gt;Other documentation resources for this project can be found in the &lt;a href=&#34;https://github.com/swiftlang/swift-testing/raw/main/Documentation/README.md&#34;&gt;README&lt;/a&gt; of the &lt;code&gt;Documentation/&lt;/code&gt; subdirectory.&lt;/p&gt;</summary>
  </entry>
</feed>