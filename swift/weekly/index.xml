<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:47:56Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Aidoku/Aidoku</title>
    <updated>2022-10-16T01:47:56Z</updated>
    <id>tag:github.com,2022-10-16:/Aidoku/Aidoku</id>
    <link href="https://github.com/Aidoku/Aidoku" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free and open source manga reader for iOS and iPadOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Aidoku&lt;/h1&gt; &#xA;&lt;p&gt;A free and open source manga reading application for iOS and iPadOS.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ad free&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Robust WASM source system&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Online reading through external sources&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; iCloud sync support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Downloads&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tracker support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Update notifications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The latest ipa will always be available from the &lt;a href=&#34;https://github.com/Aidoku/Aidoku/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For detailed installation instructions, check out &lt;a href=&#34;https://aidoku.app&#34;&gt;the website&lt;/a&gt;. To join the TestFlight, you will need to join the &lt;a href=&#34;https://discord.gg/9U8cC5Zk3s&#34;&gt;Aidoku Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Aidoku is still relatively new, and there are a lot of planned features and fixes. If you&#39;re interested in contributing, I&#39;d first recommend checking with me on &lt;a href=&#34;https://discord.gg/9U8cC5Zk3s&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Translations&lt;/h3&gt; &#xA;&lt;p&gt;Interested in translating Aidoku? We use &lt;a href=&#34;https://hosted.weblate.org/engage/aidoku/&#34;&gt;Weblate&lt;/a&gt; to crowdsource translations, so anyone can create an account and contribute!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-collections</title>
    <updated>2022-10-16T01:47:56Z</updated>
    <id>tag:github.com,2022-10-16:/apple/swift-collections</id>
    <link href="https://github.com/apple/swift-collections" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Commonly used data structures for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Collections&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift Collections&lt;/strong&gt; is an open-source package of data structure implementations for the Swift programming language.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the package, and the intent behind it, in the &lt;a href=&#34;https://swift.org/blog/swift-collections&#34;&gt;announcement on swift.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;The package currently provides the following implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/BitSet.md&#34;&gt;&lt;code&gt;BitSet&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/BitArray.md&#34;&gt;&lt;code&gt;BitArray&lt;/code&gt;&lt;/a&gt;, dynamic bit vectors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Deque.md&#34;&gt;&lt;code&gt;Deque&amp;lt;Element&amp;gt;&lt;/code&gt;&lt;/a&gt;, a double-ended queue backed by a ring buffer. Deques are range-replaceable, mutable, random-access collections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Heap.md&#34;&gt;&lt;code&gt;Heap&lt;/code&gt;&lt;/a&gt;, a min-max heap backed by an array, suitable for use as a priority queue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/OrderedSet.md&#34;&gt;&lt;code&gt;OrderedSet&amp;lt;Element&amp;gt;&lt;/code&gt;&lt;/a&gt;, a variant of the standard &lt;code&gt;Set&lt;/code&gt; where the order of items is well-defined and items can be arbitrarily reordered. Uses a &lt;code&gt;ContiguousArray&lt;/code&gt; as its backing store, augmented by a separate hash table of bit packed offsets into it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/OrderedDictionary.md&#34;&gt;&lt;code&gt;OrderedDictionary&amp;lt;Key, Value&amp;gt;&lt;/code&gt;&lt;/a&gt;, an ordered variant of the standard &lt;code&gt;Dictionary&lt;/code&gt;, providing similar benefits.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/PersistentSet.md&#34;&gt;&lt;code&gt;PersistentSet&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/PersistentDictionary.md&#34;&gt;&lt;code&gt;PersistentDictionary&lt;/code&gt;&lt;/a&gt;, persistent hashed collections implementing Compressed Hash-Array Mapped Prefix Trees (CHAMP). These work similar to the standard &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Dictionary&lt;/code&gt;, but they excel at use cases that mutate shared copies, offering dramatic memory savings and radical time improvements.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following data structures are currently being worked on but they aren&#39;t ready for inclusion in a tagged release:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/pull/65&#34;&gt;&lt;code&gt;SortedSet&lt;/code&gt; and &lt;code&gt;SortedDictionary&lt;/code&gt;&lt;/a&gt;, sorted collections backed by in-memory persistent b-trees.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/pull/80&#34;&gt;&lt;code&gt;SparseSet&lt;/code&gt;&lt;/a&gt;, a constant time set construct, trading off memory for speed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Swift Collections uses the same modularization approach as &lt;a href=&#34;https://github.com/apple/swift-numerics&#34;&gt;&lt;strong&gt;Swift Numerics&lt;/strong&gt;&lt;/a&gt;: it provides a standalone module for each thematic group of data structures it implements. For instance, if you only need a double-ended queue type, you can pull in only that by importing &lt;code&gt;DequeModule&lt;/code&gt;. &lt;code&gt;OrderedSet&lt;/code&gt; and &lt;code&gt;OrderedDictionary&lt;/code&gt; share much of the same underlying implementation, so they are provided by a single module, called &lt;code&gt;OrderedCollections&lt;/code&gt;. However, there is also a top-level &lt;code&gt;Collections&lt;/code&gt; module that gives you every collection type with a single import statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Collections&#xA;&#xA;var deque: Deque&amp;lt;String&amp;gt; = [&#34;Ted&#34;, &#34;Rebecca&#34;]&#xA;deque.prepend(&#34;Keeley&#34;)&#xA;deque.append(&#34;Nathan&#34;)&#xA;print(deque) // [&#34;Keeley&#34;, &#34;Ted&#34;, &#34;Rebecca&#34;, &#34;Nathan&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Collections package is source stable. The version numbers follow &lt;a href=&#34;https://semver.org&#34;&gt;Semantic Versioning&lt;/a&gt; -- source breaking changes to public API can only land in a new major version.&lt;/p&gt; &#xA;&lt;p&gt;The public API of version 1.1 of the &lt;code&gt;swift-collections&lt;/code&gt; package consists of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;Collections&lt;/code&gt;, &lt;code&gt;BitCollections&lt;/code&gt;, &lt;code&gt;DequeModule&lt;/code&gt;, &lt;code&gt;HeapModule&lt;/code&gt;, &lt;code&gt;OrderedCollections&lt;/code&gt; and &lt;code&gt;PersistentCollections&lt;/code&gt; modules.&lt;/p&gt; &#xA;&lt;p&gt;Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases. If you have a use case that requires using underscored APIs, please &lt;a href=&#34;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&#34;&gt;submit a Feature Request&lt;/a&gt; describing it! We&#39;d like the public interface to be as useful as possible -- although preferably without compromising safety or limiting future evolution.&lt;/p&gt; &#xA;&lt;p&gt;By &#34;underscored declarations&#34; we mean declarations that have a leading underscore anywhere in their fully qualified name. For instance, here are some names that wouldn&#39;t be considered part of the public API, even if they were technically marked public:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule.Bar._someMember(value:)&lt;/code&gt; (underscored member)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule._Bar.someMember&lt;/code&gt; (underscored type)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_FooModule.Bar&lt;/code&gt; (underscored module)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FooModule.Bar.init(_value:)&lt;/code&gt; (underscored initializer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that contents of the &lt;code&gt;Tests&lt;/code&gt;, &lt;code&gt;Utils&lt;/code&gt; and &lt;code&gt;Benchmarks&lt;/code&gt; subdirectories aren&#39;t public API. We don&#39;t make any source compatibility promises about them -- they may change at whim, and code may be removed in any new release. Do not rely on anything about them.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may update these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. (This allows the package to make use of new language/stdlib features, build on compiler bug fixes, and adopt new package manager functionality as soon as they are available.) Requiring a new Swift release will only need a minor version bump.&lt;/p&gt; &#xA;&lt;p&gt;The following table maps existing package releases to their minimum required Swift toolchain release:&lt;/p&gt; &#xA;&lt;p&gt;| Package version | Swift version | |---|---|---| | swift-collections 1.0.x | &amp;gt;= Swift 5.3 | | swift-collections 1.1.x | &amp;gt;= Swift 5.5 |&lt;/p&gt; &#xA;&lt;p&gt;(Note: the package has no minimum deployment target, so while it does require clients to use a recent Swift toolchain to build it, the code itself is able to run on any OS release that supports running Swift code.)&lt;/p&gt; &#xA;&lt;h2&gt;Using &lt;strong&gt;Swift Collections&lt;/strong&gt; in your project&lt;/h2&gt; &#xA;&lt;p&gt;To use this package in a SwiftPM project, you need to set it up as a package dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.7&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;MyPackage&#34;,&#xA;  dependencies: [&#xA;    .package(&#xA;      url: &#34;https://github.com/apple/swift-collections.git&#34;, &#xA;      .upToNextMinor(from: &#34;1.1.0&#34;) // or `.upToNextMajor&#xA;    )&#xA;  ],&#xA;  targets: [&#xA;    .target(&#xA;      name: &#34;MyTarget&#34;,&#xA;      dependencies: [&#xA;        .product(name: &#34;Collections&#34;, package: &#34;swift-collections&#34;)&#xA;      ]&#xA;    )&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing to Swift Collections&lt;/h2&gt; &#xA;&lt;p&gt;We have a dedicated &lt;a href=&#34;https://forums.swift.org/c/related-projects/collections&#34;&gt;Swift Collections Forum&lt;/a&gt; where people can ask and answer questions on how to use or work on this package. It&#39;s also a great place to discuss its evolution.&lt;/p&gt; &#xA;&lt;p&gt;If you find something that looks like a bug, please open a &lt;a href=&#34;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=BUG_REPORT.md&#34;&gt;Bug Report&lt;/a&gt;! Fill out as many details as you can.&lt;/p&gt; &#xA;&lt;h3&gt;Working on the package&lt;/h3&gt; &#xA;&lt;p&gt;We have some basic &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/Documentation/Internals/README.md&#34;&gt;documentation on package internals&lt;/a&gt; that will help you get started.&lt;/p&gt; &#xA;&lt;p&gt;By submitting a pull request, you represent that you have the right to license your contribution to Apple and the community, and agree by submitting the patch that your contributions are licensed under the &lt;a href=&#34;https://swift.org/LICENSE.txt&#34;&gt;Swift License&lt;/a&gt;, a copy of which is &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/LICENSE.txt&#34;&gt;provided in this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Fixing a bug or making a small improvement&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-collections/compare&#34;&gt;Submit a PR&lt;/a&gt; with your change. If there is an &lt;a href=&#34;https://github.com/apple/swift-collections/issues&#34;&gt;existing issue&lt;/a&gt; for the bug you&#39;re fixing, please include a reference to it.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to add tests covering whatever changes you are making.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Proposing a small enhancement&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Raise a &lt;a href=&#34;https://github.com/apple/swift-collections/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=FEATURE_REQUEST.md&#34;&gt;Feature Request&lt;/a&gt;. Discuss why it would be important to implement it.&lt;/li&gt; &#xA; &lt;li&gt;Submit a PR with your implementation, participate in the review discussion.&lt;/li&gt; &#xA; &lt;li&gt;When there is a consensus that the feature is desirable, and the implementation works well, it is fully tested and documented, then it will be merged.&lt;/li&gt; &#xA; &lt;li&gt;Rejoice!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Proposing the addition of a new data structure&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start a topic on the &lt;a href=&#34;https://forums.swift.org/c/related-projects/collections&#34;&gt;forum&lt;/a&gt;, explaining why you believe it would be important to implement the data structure. This way we can figure out if it would be right for the package, discuss implementation strategies, and plan to allocate capacity to help.&lt;/li&gt; &#xA; &lt;li&gt;When maintainers agreed to your implementation plan, start work on it, and submit a PR with your implementation as soon as you have something that&#39;s ready to show! We&#39;d love to get involved as early as you like.&lt;/li&gt; &#xA; &lt;li&gt;Participate in the review discussion, and adapt the code accordingly. Sometimes we may need to go through several revisions! This is fine -- it makes the end result that much better.&lt;/li&gt; &#xA; &lt;li&gt;When there is a consensus that the feature is ready, and the implementation is fully tested and documented, the PR will be merged by a maintainer.&lt;/li&gt; &#xA; &lt;li&gt;Celebrate! You&#39;ve achieved something great!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;Like all Swift.org projects, we would like the Swift Collections project to foster a diverse and friendly community. We expect contributors to adhere to the &lt;a href=&#34;https://swift.org/code-of-conduct/&#34;&gt;Swift.org Code of Conduct&lt;/a&gt;. A copy of this document is &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-collections/main/CODE_OF_CONDUCT.md&#34;&gt;available in this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contact information&lt;/h3&gt; &#xA;&lt;p&gt;The current code owner of this package is Karoy Lorentey (&lt;a href=&#34;https://github.com/lorentey&#34;&gt;@lorentey&lt;/a&gt;). You can contact him &lt;a href=&#34;https://forums.swift.org/u/lorentey/summary&#34;&gt;on the Swift forums&lt;/a&gt;, or by writing an email to klorentey at apple dot com. (Please keep it related to this project.)&lt;/p&gt; &#xA;&lt;p&gt;In case of moderation issues, you can also directly contact a member of the &lt;a href=&#34;https://swift.org/community/#community-structure&#34;&gt;Swift Core Team&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Moya/Moya</title>
    <updated>2022-10-16T01:47:56Z</updated>
    <id>tag:github.com,2022-10-16:/Moya/Moya</id>
    <link href="https://github.com/Moya/Moya" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Network abstraction layer written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;160&#34; src=&#34;https://raw.githubusercontent.com/Moya/Moya/master/web/logo_github.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Moya 15.0.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/Moya/Moya/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/Moya/Moya/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/Moya/Moya?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/Moya/Moya/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Moya&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Moya.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A Chinese version of this document can be found &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Readme_CN.md&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re a smart developer. You probably use &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; to abstract away access to &lt;code&gt;URLSession&lt;/code&gt; and all those nasty details you don&#39;t really care about. But then, like lots of smart developers, you write ad hoc network abstraction layers. They are probably called &#34;APIManager&#34; or &#34;NetworkModel&#34;, and they always end in tears.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Moya/Moya/master/web/diagram.png&#34; alt=&#34;Moya Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ad hoc network layers are common in iOS apps. They&#39;re bad for a few reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Makes it hard to write new apps (&#34;where do I begin?&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Makes it hard to maintain existing apps (&#34;oh my god, this mess...&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Makes it hard to write unit tests (&#34;how do I do this again?&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So the basic idea of Moya is that we want some network abstraction layer that sufficiently encapsulates actually calling Alamofire directly. It should be simple enough that common things are easy, but comprehensive enough that complicated things are also easy.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you use Alamofire to abstract away &lt;code&gt;URLSession&lt;/code&gt;, why not use something to abstract away the nitty gritty of URLs, parameters, etc?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some awesome features of Moya:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile-time checking for correct API endpoint accesses.&lt;/li&gt; &#xA; &lt;li&gt;Lets you define a clear usage of different endpoints with associated enum values.&lt;/li&gt; &#xA; &lt;li&gt;Treats test stubs as first-class citizens so unit testing is super-easy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can check out more about the project direction in the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Vision.md&#34;&gt;vision document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Projects&lt;/h2&gt; &#xA;&lt;p&gt;We have provided two sample projects in the repository. To use it download the repo, run &lt;code&gt;carthage update&lt;/code&gt; to download the required libraries and open &lt;a href=&#34;https://github.com/Moya/Moya/tree/master/Moya.xcodeproj&#34;&gt;Moya.xcodeproj&lt;/a&gt;. You&#39;ll see two schemes: &lt;code&gt;Basic&lt;/code&gt; and &lt;code&gt;Multi-Target&lt;/code&gt; - select one and then build &amp;amp; run! Source files for these are in the &lt;code&gt;Examples&lt;/code&gt; directory in project navigator. Have fun!&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is actively under development, and is being used in &lt;a href=&#34;https://github.com/Artsy/eidolon&#34;&gt;Artsy&#39;s auction app&lt;/a&gt;. We consider it ready for production use.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Moya version vs Swift version.&lt;/h3&gt; &#xA;&lt;p&gt;Below is a table that shows which version of Moya you should use for your Swift version.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Moya&lt;/th&gt; &#xA;   &lt;th&gt;RxMoya&lt;/th&gt; &#xA;   &lt;th&gt;ReactiveMoya&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.X&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 13.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.X&lt;/td&gt; &#xA;   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;10.0.0 - 12.0.1&lt;/td&gt; &#xA;   &lt;td&gt;9.0.0 - 12.0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.X&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;   &lt;td&gt;8.0.0 - 8.0.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.3&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;   &lt;td&gt;7.0.2 - 7.0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.2&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;= 7.0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: If you are using Swift 4.2 in your project, but you are using Xcode 10.2, Moya 13 should work correctly even though we use Swift 5.0.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Upgrading to a new major version of Moya? Check out our &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/MigrationGuides&#34;&gt;migration guides&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Instructions below are for using &lt;strong&gt;SwiftPM&lt;/strong&gt; without the Xcode UI. It&#39;s the easiest to go to your Project Settings -&amp;gt; Swift Packages and add Moya from there.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To integrate using Apple&#39;s Swift package manager, without Xcode integration, add the following as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/Moya/Moya.git&#34;, .upToNextMajor(from: &#34;15.0.0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then specify &lt;code&gt;&#34;Moya&#34;&lt;/code&gt; as a dependency of the Target in which you wish to use Moya. If you want to use reactive extensions, add also &lt;code&gt;&#34;ReactiveMoya&#34;&lt;/code&gt;, &lt;code&gt;&#34;RxMoya&#34;&lt;/code&gt; or &lt;code&gt;&#34;CombineMoya&#34;&lt;/code&gt; as your target dependency respectively. Here&#39;s an example &lt;code&gt;PackageDescription&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.3&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyPackage&#34;,&#xA;    products: [&#xA;        .library(&#xA;            name: &#34;MyPackage&#34;,&#xA;            targets: [&#34;MyPackage&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/Moya/Moya.git&#34;, .upToNextMajor(from: &#34;15.0.0&#34;))&#xA;    ],&#xA;    targets: [&#xA;        .target(&#xA;            name: &#34;MyPackage&#34;,&#xA;            dependencies: [&#34;ReactiveMoya&#34;])&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Combine note: if you&#39;re using &lt;strong&gt;CombineMoya&lt;/strong&gt;, make sure that you use Xcode 11.5.0 or later. With earlier versions of Xcode you will have to manually add Combine as a weakly linked framework to your application target.&lt;/p&gt; &#xA;&lt;h3&gt;Accio&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;Accio&lt;/a&gt; is a dependency manager based on SwiftPM which can build frameworks for iOS/macOS/tvOS/watchOS. Therefore the integration steps of Moya are exactly the same as described above. Once your &lt;code&gt;Package.swift&lt;/code&gt; file is configured, run &lt;code&gt;accio update&lt;/code&gt; instead of &lt;code&gt;swift package update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;For Moya, use the following entry in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;pod &#39;Moya&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or &#xA;&#xA;pod &#39;Moya/RxSwift&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or&#xA;&#xA;pod &#39;Moya/ReactiveSwift&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&#xA;# or&#xA;&#xA;pod &#39;Moya/Combine&#39;, &#39;~&amp;gt; 15.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In any file you&#39;d like to use Moya in, don&#39;t forget to import the framework with &lt;code&gt;import Moya&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Carthage users can point to this repository and use whichever generated framework they&#39;d like, &lt;code&gt;Moya&lt;/code&gt;, &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;ReactiveMoya&lt;/code&gt;, or &lt;code&gt;CombineMoya&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make the following entry in your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;Moya/Moya&#34; ~&amp;gt; 15.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: At this time, Carthage does not provide a way to build only specific repository submodules. All submodules and their dependencies will be built with the above command. However, you don&#39;t need to copy frameworks you aren&#39;t using into your project. For instance, if you aren&#39;t using &lt;code&gt;ReactiveSwift&lt;/code&gt;, feel free to delete that framework along with &lt;code&gt;ReactiveMoya&lt;/code&gt; from the Carthage Build directory after &lt;code&gt;carthage update&lt;/code&gt; completes. Or if you are using &lt;code&gt;ReactiveSwift&lt;/code&gt; but not &lt;code&gt;RxSwift&lt;/code&gt; or &lt;code&gt;Combine&lt;/code&gt;, then &lt;code&gt;RxMoya&lt;/code&gt;, &lt;code&gt;RxTest&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt;, &lt;code&gt;CombineMoya&lt;/code&gt; etc. can safely be deleted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &lt;em&gt;if&lt;/em&gt; your project is not initialized as a git repository:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add Alamofire &amp;amp; Moya as a git &lt;a href=&#34;http://git-scm.com/docs/git-submodule&#34;&gt;submodule&lt;/a&gt; by running the following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git&#xA;$ git submodule add https://github.com/Moya/Moya.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project. Do the same with the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; in the &lt;code&gt;Moya&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;They should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify that the deployment targets of the &lt;code&gt;xcodeproj&lt;/code&gt;s match that of your application target in the Project Navigator.&lt;/li&gt; &#xA; &lt;li&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &#34;Targets&#34; heading in the sidebar.&lt;/li&gt; &#xA; &lt;li&gt;In the tab bar at the top of that window, open the &#34;General&#34; panel.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &#34;Embedded Binaries&#34; section.&lt;/li&gt; &#xA; &lt;li&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as either &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt; or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under &#34;Embedded Binaries&#34; again and add the correct build target for &lt;code&gt;Moya&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The three frameworks are automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/Examples/Basic.md&#34;&gt;some setup&lt;/a&gt;, using Moya is really simple. You can access an API like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.request(.zen) { result in&#xA;    switch result {&#xA;    case let .success(moyaResponse):&#xA;        let data = moyaResponse.data&#xA;        let statusCode = moyaResponse.statusCode&#xA;        // do something with the response data or statusCode&#xA;    case let .failure(error):&#xA;        // this means there was a network failure - either the request&#xA;        // wasn&#39;t sent (connectivity), or no response was received (server&#xA;        // timed out).  If the server responds with a 4xx or 5xx error, that&#xA;        // will be sent as a &#34;.success&#34;-ful response.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s a basic example. Many API requests need parameters. Moya encodes these into the enum you use to access the endpoint, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.request(.userProfile(&#34;ashfurrow&#34;)) { result in&#xA;    // do something with the result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No more typos in URLs. No more missing parameter values. No more messing with parameter encoding.&lt;/p&gt; &#xA;&lt;p&gt;For more examples, see the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/Examples&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reactive Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Even cooler are the reactive extensions. Moya provides reactive extensions for &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveSwift&#34;&gt;ReactiveSwift&lt;/a&gt;, &lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt;, and &lt;a href=&#34;https://developer.apple.com/documentation/combine&#34;&gt;Combine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ReactiveSwift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/ReactiveSwift.md&#34;&gt;&lt;code&gt;ReactiveSwift&lt;/code&gt; extension&lt;/a&gt; provides both &lt;code&gt;reactive.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;reactive.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods that immediately return &lt;code&gt;SignalProducer&lt;/code&gt;s that you can start, bind, map, or whatever you want to do. To handle errors, for instance, we could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.reactive.request(.userProfile(&#34;ashfurrow&#34;)).start { event in&#xA;    switch event {&#xA;    case let .value(response):&#xA;        image = UIImage(data: response.data)&#xA;    case let .failed(error):&#xA;        print(error)&#xA;    default:&#xA;        break&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RxSwift&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/RxSwift.md&#34;&gt;&lt;code&gt;RxSwift&lt;/code&gt; extension&lt;/a&gt; also provide both &lt;code&gt;rx.request(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt; methods, but return type is different for both. In case of a normal &lt;code&gt;rx.request(:callbackQueue)&lt;/code&gt;, the return type is &lt;code&gt;Single&amp;lt;Response&amp;gt;&lt;/code&gt; which emits either single element or an error. In case of a &lt;code&gt;rx.requestWithProgress(:callbackQueue:)&lt;/code&gt;, the return type is &lt;code&gt;Observable&amp;lt;ProgressResponse&amp;gt;&lt;/code&gt;, since we may get multiple events from progress and one last event which is a response.&lt;/p&gt; &#xA;&lt;p&gt;To handle errors, for instance, we could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;provider.rx.request(.userProfile(&#34;ashfurrow&#34;)).subscribe { event in&#xA;    switch event {&#xA;    case let .success(response):&#xA;        image = UIImage(data: response.data)&#xA;    case let .error(error):&#xA;        print(error)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to the option of using signals instead of callback blocks, there are also a series of signal operators for RxSwift and ReactiveSwift that will attempt to map the data received from the network response into either an image, some JSON, or a string, with &lt;code&gt;mapImage()&lt;/code&gt;, &lt;code&gt;mapJSON()&lt;/code&gt;, and &lt;code&gt;mapString()&lt;/code&gt;, respectively. If the mapping is unsuccessful, you&#39;ll get an error on the signal. You also get handy methods for filtering out certain status codes. This means that you can place your code for handling API errors like 400&#39;s in the same places as code for handling invalid responses.&lt;/p&gt; &#xA;&lt;h3&gt;Combine&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Combine&lt;/code&gt; extension provides &lt;code&gt;requestPublisher(:callbackQueue:)&lt;/code&gt; and &lt;code&gt;requestWithProgressPublisher(:callbackQueue)&lt;/code&gt; returning &lt;code&gt;AnyPublisher&amp;lt;Response, MoyaError&amp;gt;&lt;/code&gt; and &lt;code&gt;AnyPublisher&amp;lt;ProgressResponse, MoyaError&amp;gt;&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of &lt;code&gt;requestPublisher&lt;/code&gt; usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;provider = MoyaProvider&amp;lt;GitHub&amp;gt;()&#xA;let cancellable = provider.requestPublisher(.userProfile(&#34;ashfurrow&#34;))&#xA;    .sink(receiveCompletion: { completion in&#xA;        guard case let .failure(error) = completion else { return }&#xA;&#xA;        print(error)&#xA;    }, receiveValue: { response in&#xA;        image = UIImage(data: response.data)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community Projects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Moya/Moya/raw/master/docs/CommunityProjects.md&#34;&gt;Moya has a great community around it and some people have created some very helpful extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Hey! Do you like Moya? Awesome! We could actually really use your help!&lt;/p&gt; &#xA;&lt;p&gt;Open source isn&#39;t just writing code. Moya could use your help with any of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finding (and reporting!) bugs.&lt;/li&gt; &#xA; &lt;li&gt;New feature suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Answering questions on issues.&lt;/li&gt; &#xA; &lt;li&gt;Documentation improvements.&lt;/li&gt; &#xA; &lt;li&gt;Reviewing pull requests.&lt;/li&gt; &#xA; &lt;li&gt;Helping to manage issue priorities.&lt;/li&gt; &#xA; &lt;li&gt;Fixing bugs/new features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If any of that sounds cool to you, send a pull request! After your first contribution, we will add you as a member to the repo so you can merge pull requests and help steer the ship &lt;span&gt;🚢&lt;/span&gt; You can read more details about that &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Contributing.md&#34;&gt;in our contributor guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Moya&#39;s community has a tremendous positive energy, and the maintainers are committed to keeping things awesome. Like &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/wiki/Communication-&amp;amp;-Design-Rules&#34;&gt;in the CocoaPods community&lt;/a&gt;, always assume positive intent. Even if a comment sounds mean-spirited, give the person the benefit of the doubt.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Code%20of%20Conduct.md&#34;&gt;its terms&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new source files&lt;/h3&gt; &#xA;&lt;p&gt;If you add or remove a source file from Moya, a corresponding change needs to be made to the &lt;code&gt;Moya.xcodeproj&lt;/code&gt; project at the root of this repository. This project is used for Carthage. Don&#39;t worry, you&#39;ll get an automated warning when submitting a pull request if you forget.&lt;/p&gt; &#xA;&lt;h3&gt;Help us improve Moya documentation&lt;/h3&gt; &#xA;&lt;p&gt;Whether you’re a core member or a user trying it out for the first time, you can make a valuable contribution to Moya by improving the documentation. Help us by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending us feedback about something you thought was confusing or simply missing.&lt;/li&gt; &#xA; &lt;li&gt;Suggesting better wording or ways of explaining certain topics.&lt;/li&gt; &#xA; &lt;li&gt;Sending us a pull request via GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Improving the &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/Readme_CN.md&#34;&gt;Chinese documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Moya is released under an MIT license. See &lt;a href=&#34;https://github.com/Moya/Moya/raw/master/License.md&#34;&gt;License.md&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>