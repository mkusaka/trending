<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-11T02:02:58Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>XcodesOrg/xcodes</title>
    <updated>2023-06-11T02:02:58Z</updated>
    <id>tag:github.com,2023-06-11:/XcodesOrg/xcodes</id>
    <link href="https://github.com/XcodesOrg/xcodes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The best command-line tool to install and switch between multiple versions of Xcode.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xcodes&lt;/h1&gt; &#xA;&lt;p&gt;The best command-line tool to install and switch between multiple versions of Xcode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you&#39;re looking for an app version of &lt;code&gt;xcodes&lt;/code&gt;, try &lt;a href=&#34;https://github.com/XcodesOrg/XcodesApp&#34;&gt;Xcodes.app&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/XcodesOrg/xcodes/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XcodesOrg/xcodes/main/Header.png&#34; alt=&#34;Header Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;🎉&lt;/span&gt; Announcment&lt;/h3&gt; &#xA;&lt;p&gt;Xcodes is now part of the &lt;code&gt;XcodesOrg&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/XcodesOrg/xcodes/main/nextstep.md&#34;&gt;read more here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew (Preferred)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install xcodesorg/made/xcodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Download a release&lt;/summary&gt; &#xA; &lt;p&gt;Download the latest release from the &lt;a href=&#34;https://github.com/XcodesOrg/xcodes/releases&#34;&gt;Releases&lt;/a&gt; page. These are Developer ID-signed release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using &lt;a href=&#34;https://github.com/yonaskolb/Mint&#34;&gt;Mint&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mint install XcodesOrg/xcodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Build from source&lt;/summary&gt; &#xA; &lt;p&gt;Building from source requires Xcode 12.0 or later, so it&#39;s not an option for setting up a computer from scratch.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/XcodesOrg/xcodes&#xA;cd xcodes&#xA;make install&#xA;# or, if /usr/local/ isn&#39;t in your PATH&#xA;PREFIX=/your/install/directory make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;While installing, you may get the following output:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift build&#xA;error: terminated(72): xcrun --sdk macosx --find xctest output:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If that occurs, it means you need to select a version of Xcode. You can do this with &lt;code&gt;xcode-select&lt;/code&gt; or by choosing a Command Line Tools option in Xcode&#39;s preferences Locations tab.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install a specific version of Xcode using a command like one of these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xcodes install 10.2.1&#xA;xcodes install 11 Beta 7&#xA;xcodes install 11.2 GM seed&#xA;xcodes install 9.0 --path ~/Archive/Xcode_9.xip&#xA;xcodes install --latest-prerelease&#xA;xcodes install --latest --directory &#34;/Volumes/Bag Of Holding/&#34;&#xA;xcodes install --latest --experimental-unxip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll then be prompted to enter your Apple ID username and password. You can also provide these with the &lt;code&gt;XCODES_USERNAME&lt;/code&gt; and &lt;code&gt;XCODES_PASSWORD&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;After successfully authenticating, xcodes will save your Apple ID password into the keychain and will remember your Apple ID for future use. If you need to use a different Apple ID than the one that&#39;s remembered, set the &lt;code&gt;XCODES_USERNAME&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;xcodes will download and install the version you asked for so that it&#39;s ready to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;(1/6) Downloading Xcode 11.2.0: 100%&#xA;(2/6) Unarchiving Xcode (This can take a while)&#xA;(3/6) Moving Xcode to /Applications/Xcode-11.2.0.app&#xA;(4/6) Moving Xcode archive Xcode-11.2.0.xip to the Trash&#xA;(5/6) Checking security assessment and code signing&#xA;(6/6) Finishing installation&#xA;xcodes requires superuser privileges in order to finish installation.&#xA;macOS User Password:&#xA;&#xA;Xcode 11.2.0 has been installed to /Applications/Xcode-11.2.0.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://aria2.github.io&#34;&gt;aria2&lt;/a&gt; installed (it&#39;s available in Homebrew, &lt;code&gt;brew install aria2&lt;/code&gt;), then xcodes will default to use it for downloads. It uses up to 16 connections to download Xcode 3-5x faster than URLSession.&lt;/p&gt; &#xA;&lt;p&gt;Xcode will be installed to /Applications by default, but you can provide the path to a different directory with the &lt;code&gt;--directory&lt;/code&gt; option or the &lt;code&gt;XCODES_DIRECTORY&lt;/code&gt; environment variable. All of the xcodes commands support this option, like &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;uninstall&lt;/code&gt;, so you can manage Xcode versions that aren&#39;t in /Applications. xcodes supports having all of your Xcode versions installed in &lt;em&gt;one&lt;/em&gt; directory, wherever that may be.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;.xcode-version&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;We recommend the creation of a &lt;code&gt;.xcode-version&lt;/code&gt; file to explicitly declare and store the Xcode version to be used by your CI environment as well as your team.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;13.4.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/XcodesOrg/xcodes/main/XCODE_VERSION.md&#34;&gt;the proposal&lt;/a&gt; of &lt;code&gt;.xcode-version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;download &amp;lt;version&amp;gt;&lt;/code&gt;: Download a specific version of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;install &amp;lt;version&amp;gt;&lt;/code&gt;: Download and install a specific version of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;installed&lt;/code&gt;: List the versions of Xcode that are installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt;: List all versions of Xcode that are available to install&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;select&lt;/code&gt;: Change the selected Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uninstall&lt;/code&gt;: Uninstall a specific version of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;update&lt;/code&gt;: Update the list of available versions of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: Print the version number of xcodes itself&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;signout&lt;/code&gt;: Clears the stored username and password&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Experimental Unxip - for faster unxipping&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to the amazing work by &lt;a href=&#34;https://github.com/saagarjha/unxip&#34;&gt;saagarjhi&lt;/a&gt; - Xcodes now includes the ability to unxip up to 70% faster on some systems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xcodes install --latest --experimental-unxip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell Completion Scripts&lt;/h3&gt; &#xA;&lt;p&gt;xcodes can generate completion scripts which allow you to press the tab key on your keyboard to autocomplete commands and arguments when typing an xcodes command. The steps to install a completion script depend on the shell that you use. More information about installation instructions for different shells and the underlying implementation is available in the &lt;a href=&#34;https://github.com/apple/swift-argument-parser/raw/main/Sources/ArgumentParser/Documentation.docc/Articles/InstallingCompletionScripts.md&#34;&gt;swift-argument-parser repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Zsh, with oh-my-zsh:&lt;/summary&gt; &#xA; &lt;p&gt;Run the following commands:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir ~/.oh-my-zsh/completions&#xA;xcodes --generate-completion-script &amp;gt; ~/.oh-my-zsh/completions/_xcodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need Xcode 13 in order to build and run xcodes.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Xcode&lt;/summary&gt; Even though xcodes is a command-line app, all of the normal functionality works in Xcode, like building, running, and running tests. You can even type text into Xcode&#39;s console when it prompts you for input like your Apple ID or 2FA code. &#xA; &lt;p&gt;When running xcodes from Xcode, if you want to run a particular command or pass some arguments, you can hold the option key to present a sheet with more options. This means you&#39;d use &lt;kbd&gt;Option&lt;/kbd&gt; + &lt;kbd&gt;Command&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt; or hold &lt;kbd&gt;Option&lt;/kbd&gt; while clicking the Run button. Here you can add, remove, and toggle arguments that will be passed to xcodes when it&#39;s launched.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XcodesOrg/xcodes/main/XcodeRunSheet.png&#34; alt=&#34;Xcode Edit Scheme Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Swift command line tools&lt;/summary&gt; You can also use the Swift command line tools once you have Xcode installed: &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Build: &lt;code&gt;swift build&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Run: &lt;code&gt;swift run&lt;/code&gt;, or commands like &lt;code&gt;swift run xcodes list&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Run tests: &lt;code&gt;swift test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;There&#39;s a Makefile to help build xcodes for distribution. We already do this for you in order to provide Developer ID-signed and notarized release builds via Homebrew (see &lt;a href=&#34;https://raw.githubusercontent.com/XcodesOrg/xcodes/main/#installation&#34;&gt;Installation&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Releasing a new version of xcodes&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Bump the version number in Version.swift, commit the change, and tag it&#xA;vim Sources/XcodesKit/Version.swift&#xA;git add Sources/XcodesKit/Version.swift&#xA;git commit -m &#34;Bump version to $VERSION&#34;&#xA;git tag -asm &#34;$VERSION&#34; &#34;$VERSION&#34;&#xA;&#xA;# Clean first&#xA;make clean&#xA;&#xA;# Make a release build of xcodes, sign it, and zip it&#xA;make zip&#xA;# Create a Homebrew bottle&#xA;make bottle VERSION=&#34;$VERSION&#34;&#xA;&#xA;# Notarize the release build&#xA;# This can take a while&#xA;make notarize \&#xA;    TEAMID=&#34;ABC123&#34;&#xA;&#xA;# Push the new version bump commit and tag&#xA;git push --follow-tags&#xA;&#xA;# Edit the draft release created by Release Drafter to point at the new tag&#xA;# Set the release title to the new version&#xA;# Add the xcodes.zip and xcodes-$VERSION.mojave.tar.gz files to the release&#xA;# Publish the release&#xA;&#xA;# Update the Homebrew Bottle: https://github.com/XcodesOrg/homebrew-made/blob/master/Formula/xcodes.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Notable design decisions are recorded in &lt;a href=&#34;https://raw.githubusercontent.com/XcodesOrg/xcodes/main/DECISIONS.md&#34;&gt;DECISIONS.md&lt;/a&gt;. The Apple authentication flow is described in &lt;a href=&#34;https://raw.githubusercontent.com/XcodesOrg/xcodes/main/Apple.paw&#34;&gt;Apple.paw&lt;/a&gt;, which will allow you to play with the API endpoints that are involved using the &lt;a href=&#34;https://paw.cloud&#34;&gt;Paw&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xcpretty/xcode-install&#34;&gt;&lt;code&gt;xcode-install&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/spaceship&#34;&gt;fastlane/spaceship&lt;/a&gt; both deserve credit for figuring out the hard parts of what makes this possible.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mattkiazyk&#34;&gt;Matt Kiazyk&lt;/a&gt; - &lt;a href=&#34;https://www.twitter.com/mattkiazyk&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>XcodesOrg/XcodesApp</title>
    <updated>2023-06-11T02:02:58Z</updated>
    <id>tag:github.com,2023-06-11:/XcodesOrg/XcodesApp</id>
    <link href="https://github.com/XcodesOrg/XcodesApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The easiest way to install and switch between multiple versions of Xcode - with a mouse click.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/icon.png&#34; align=&#34;center&#34; width=&#34;50&#34; height=&#34;50&#34;&gt; Xcodes.app&lt;/h1&gt; &#xA;&lt;p&gt;The easiest way to install and switch between multiple versions of Xcode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you&#39;re looking for a command-line version of Xcodes.app, try &lt;a href=&#34;https://github.com/XcodesOrg/xcodes&#34;&gt;&lt;code&gt;xcodes&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/XcodesOrg/XcodesApp/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/screenshot_light.png#gh-light-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/screenshot_dark.png#gh-dark-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;🎉&lt;/span&gt; Announcment&lt;/h3&gt; &#xA;&lt;p&gt;XcodesApp is now part of the &lt;code&gt;XcodesOrg&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/nextstep.md&#34;&gt;read more here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List all available Xcode versions from &lt;a href=&#34;https://xcodereleases.com&#34;&gt;Xcode Releases&#39;&lt;/a&gt; data or the Apple Developer website.&lt;/li&gt; &#xA; &lt;li&gt;Install any Xcode version, &lt;strong&gt;fully automated&lt;/strong&gt; from start to finish. Xcodes uses &lt;a href=&#34;https://aria2.github.io&#34;&gt;&lt;code&gt;aria2&lt;/code&gt;&lt;/a&gt;, which uses up to 16 connections to download 3-5x faster than URLSession.&lt;/li&gt; &#xA; &lt;li&gt;Automatically resumes installs if network errors.&lt;/li&gt; &#xA; &lt;li&gt;Apple ID required to download Xcode versions.&lt;/li&gt; &#xA; &lt;li&gt;Just click a button to make a version active with &lt;code&gt;xcode-select&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;View release notes, OS compatibility, included SDKs and compilers from &lt;a href=&#34;https://xcodereleases.com&#34;&gt;Xcode Releases&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dark/Light Mode supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Experiments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to the wonderful work of &lt;a href=&#34;https://github.com/saagarjha/unxip&#34;&gt;https://github.com/saagarjha/unxip&lt;/a&gt;, turn on the experiment to increase your unxipping time by up to 70%! More can be found on his repo, but bugs, high memory may occur if used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/experiment_light.png#gh-light-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/experiment_dark.png#gh-dark-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;Xcodes supports localization in several languages.&lt;/p&gt; &#xA;&lt;p&gt;The following languages are supported because of the following community users!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French 🇫🇷&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dompepin&#34;&gt;@dompepin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Italian 🇮🇹&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gualtierofrigerio&#34;&gt;gualtierofrigerio&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish 🇪🇸🇲&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cesartru88&#34;&gt;@cesartru88&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Korean 🇰🇷&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ryan-son&#34;&gt;@ryan-son&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian 🇷🇺&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alexmazlov&#34;&gt;@alexmazlov&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Turkish 🇹🇷&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/egesucu&#34;&gt;@egesucu&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hindi 🇮🇳&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/KGurpreet&#34;&gt;@KGurpreet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chinese-Simplified 🇨🇳&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/megabitsenmzq&#34;&gt;@megabitsenmzq&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Finnish 🇫🇮&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/marcusziade&#34;&gt;@marcusziade&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chinese-Traditional 🇹🇼&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/itszero&#34;&gt;@itszero&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ukranian 🇺🇦&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gelosi&#34;&gt;@gelosi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Japanese 🇯🇵&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tatsuz0u&#34;&gt;@tatsuz0u&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;German 🇩🇪&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/drct&#34;&gt;@drct&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dutch 🇳🇱&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github/com/jfversluis&#34;&gt;@jfversluis&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Brazilian Portuguese 🇧🇷&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/brunomunizaf&#34;&gt;@brunomunizaf&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Polish 🇵🇱&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jakex7&#34;&gt;@jakex7&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Want to add more languages? Simply create a PR with the updated strings file.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Xcodes.app runs on macOS Big Sur 11.0 or later.&lt;/p&gt; &#xA;&lt;h3&gt;Install with Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;Developer ID-signed and notarized release builds are available on Homebrew. These don&#39;t require Xcode to already be installed in order to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install --cask xcodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually install&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version &lt;a href=&#34;https://github.com/XcodesOrg/XcodesApp/releases/latest&#34;&gt;here&lt;/a&gt; using the &lt;strong&gt;Xcodes.zip&lt;/strong&gt; asset. These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/li&gt; &#xA; &lt;li&gt;Move the unzipped &lt;code&gt;Xcodes.app&lt;/code&gt; to your &lt;code&gt;/Applications&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need macOS 12 Big Sur and Xcode 13 in order to build and run Xcodes.app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Unxip&lt;/code&gt; and &lt;code&gt;aria2&lt;/code&gt; must be compiled as a universal binary&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# compile for Intel&#xA; swiftc -parse-as-library -O -target x86_64-apple-macos11 unxip.swift&#xA;# compile for M1&#xA; swiftc -parse-as-library -O -target arm64-apple-macos11 unxip.swift&#xA;&#xA;# combine for universal binary&#xA; lipo -create -output unxip unxip_intel unxip_m1  &#xA;# check it&#xA; lipo -archs unxip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notable design decisions are recorded in &lt;a href=&#34;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/DECISIONS.md&#34;&gt;DECISIONS.md&lt;/a&gt;. The Apple authentication flow is described in &lt;a href=&#34;https://raw.githubusercontent.com/XcodesOrg/XcodesApp/main/Apple.paw&#34;&gt;Apple.paw&lt;/a&gt;, which will allow you to play with the API endpoints that are involved using the &lt;a href=&#34;https://paw.cloud&#34;&gt;Paw&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xcpretty/xcode-install&#34;&gt;&lt;code&gt;xcode-install&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/spaceship&#34;&gt;fastlane/spaceship&lt;/a&gt; both deserve credit for figuring out the hard parts of what makes this possible.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Releasing a new version&lt;/summary&gt; &#xA; &lt;p&gt;Follow the steps below to build and release a new version of Xcodes.app. For any of the git steps, you can use your preferred tool, but please sign the tag.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Update the version number in Xcode and commit the change, if necessary&#xA;&#xA;# Question: Did anything in XPCHelper change?&#xA;# - com.robotsandpencils.XcodesApp.Helper folder and HelperXPCShared&#xA;# - if so, bump the version number in com.robotsandpencils.XcodesApp.Helper target.&#xA;# Note: you do not have to bump the version number if nothing has changed.&#xA;# Note2: If you do bump the version, the end user, must re-install the XPCHelper and give permission again.&#xA;&#xA;# Increment the build number&#xA;scripts/increment_build_number.sh&#xA;&#xA;# Commit the change&#xA;git add Xcodes/Resources/Info.plist&#xA;git commit -asm &#34;Increment build number&#34;&#xA;&#xA;# Tag the latest commit&#xA;# Replace $VERSION and $BUILD below with the latest real values&#xA;git tag -asm &#34;v$VERSIONb$BUILD&#34; &#34;v$VERSIONb$BUILD&#34;&#xA;&#xA;# Push to origin&#xA;git push --follow-tags&#xA;&#xA;# Build the app&#xA;# Make sure you have the Xcode Selected you want to build with&#xA;scripts/package_release.sh&#xA;&#xA;# Notarize the app&#xA;# Do this from the Product directory so the app is zipped without being nested inside Product&#xA;# Create a app specific password on appleid.apple.com if you haven&#39;t already&#xA;# xcrun notarytool store-credentials &#34;AC_PASSWORD&#34; \&#xA;#              --apple-id &#34;test@example.com&#34; \&#xA;#              --team-id &#34;teamid&#34; \&#xA;#               --password &#34;app specific password&#34;&#xA;&#xA;pushd Product&#xA;../scripts/notarize.sh Xcodes.zip &amp;lt;MYORG&amp;gt;&#xA;&#xA;# Sign the .zip for Sparkle, note the signature in the output for later&#xA;# If you&#39;re warned about the signing key not being found, see the Xcodes 1Password vault for the key and installation instructions.&#xA;../scripts/sign_update Xcodes.zip&#xA;popd&#xA;&#xA;# Go to https://github.com/XcodesOrg/XcodesApp/releases&#xA;# If there are uncategorized PRs, add the appropriate label and run the Release Drafter action manually&#xA;# Edit the latest draft release&#xA;# Set its tag to the tag you just pushed&#xA;# Set its title to a string with the format &#34;$VERSION ($BUILD)&#34;&#xA;# Polish the draft release notes, if necessary&#xA;# Add the signature to the bottom of the release notes in a comment, like:&#xA;&amp;lt;!-- sparkle:edSignature=$SIGNATURE --&amp;gt;&#xA;# Attach the zip that was created in the Product directory to the release&#xA;# Publish the release&#xA;&#xA;# Update the [Homebrew Cask](https://github.com/RobotsAndPencils/homebrew-cask/blob/master/Casks/xcodes.rb).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mattkiazyk&#34;&gt;Matt Kiazyk&lt;/a&gt; - &lt;a href=&#34;https://www.twitter.com/mattkiazyk&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/xcodesApp&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://github.com/xcodesOrg&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HyperARCo/Mirador</title>
    <updated>2023-06-11T02:02:58Z</updated>
    <id>tag:github.com,2023-06-11:/HyperARCo/Mirador</id>
    <link href="https://github.com/HyperARCo/Mirador" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirador makes it easy to build impressive “Point of Interest” AR experiences, on Apple&#39;s new RealityKit framework.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/HyperARCo/Mirador/main/banner.jpg&#34; alt=&#34;Mirador&#34; title=&#34;Mirador&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mirador makes it easy to build impressive point-of-interest AR experiences on top of Apple’s new AR platform, RealityKit.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/HyperARCo/Mirador/main/demo.gif&#34; alt=&#34;Mirador demo&#34; title=&#34;Mirador demo&#34; width=&#34;300&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Mirador is built by &lt;a href=&#34;https://twitter.com/andrewhartar&#34;&gt;Andrew Hart&lt;/a&gt;, who pioneered AR navigation and built the largest open-source project for Apple’s first AR platform, ARKit. Andrew is now founder of &lt;a href=&#34;https://HyperAR.com&#34;&gt;Hyper&lt;/a&gt;, bringing the same technology to retail stores.&lt;/p&gt; &#xA;&lt;h2&gt;What is Mirador&lt;/h2&gt; &#xA;&lt;p&gt;There are many use-cases for highlighting points of interest on a skyline in AR: tourism apps, mountain ranges, city viewpoints, observation decks etc.. I receive messages quite often from people who used my first library, asking &#34;How do I do this? There are still some technical challenges in the way.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the problem: RealityKit, and AR in general, is location-agnostic. It tracks device motion in xyz, like a video game, but doesn’t hold the concept of GPS or real-world location.&lt;/p&gt; &#xA;&lt;p&gt;Adding to this challenge, the GPS and compass in phones is also infamously bad - everyone knows the experience of walking in the wrong direction down a busy street because your phone didn’t know where you were or which direction you were facing. Imagine trying to higlight points of interest in AR, while the location is off by 10m and the device heading is off by 90º.&lt;/p&gt; &#xA;&lt;p&gt;Mirador solves all of this. It uses a visual anchor to understand the device location, and then takes care of displaying AR elements in the right place.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Mirador uses a visual anchor, provided by the developer, to understand the user’s location. At most viewpoints, there are informational boards, or other landmarks that can be used as visual anchors. It builds on RealityKit’s existing ImageAnchor system, for recognising 2D images.&lt;/p&gt; &#xA;&lt;p&gt;The library then takes care of displaying points interest in the right place, also provided by the developer. There are also a few extra features thrown in to make it a great spatial experience.&lt;/p&gt; &#xA;&lt;h2&gt;Install using Swift Package Manager&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://github.com/HyperARCo/Mirador.git&#34;&gt;https://github.com/HyperARCo/Mirador.git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;There are three steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Setup Points of Interest (POIs) - you can do this in code, or with JSON&lt;/li&gt; &#xA; &lt;li&gt;Provide an anchor image&lt;/li&gt; &#xA; &lt;li&gt;Run MiradorView&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup POIs with code&lt;/h2&gt; &#xA;&lt;p&gt;You can setup a Mirador experience with some boilerplate code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import Mirador&#xA;&#xA;//Setup the anchor&#xA;let anchorLocation = Location(coordinate: Coordinate(latitude: 51.47787836, longitude: -0.00084588), altitude: 46)&#xA;let locationAnchor = LocationAnchor(name: &#34;greenwich&#34;, physicalWidth: 0.5, location: anchorLocation, bearing: Float(-30).degreesToRadians, orientation: .horizontal)&#xA;&#xA;//Setup a few points of interest&#xA;let canaryWharfCoordinate = Coordinate(latitude: 51.50493780, longitude: -0.01948017)&#xA;let canaryWharfLocation = Location(coordinate: canaryWharfCoordinate, altitude: 50)&#xA;let canaryWharfPOI = PointOfInterest(name: &#34;Canary Wharf&#34;, location: canaryWharfLocation)&#xA;locationAnchor.pointsOfInterest.append(canaryWharfPOI)&#xA;&#xA;let o2Coordinate = Coordinate(latitude: 51.50296112, longitude: 0.00321850)&#xA;let o2Location = Location(coordinate: o2Coordinate, altitude: 50)&#xA;let o2POI = PointOfInterest(name: &#34;O2 Arena&#34;, location: o2Location)&#xA;locationAnchor.pointsOfInterest.append(o2POI)&#xA;&#xA;let miradorView = MiradorView(locationAnchor: locationAnchor)&#xA;miradorView.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup POIs with JSON&lt;/h2&gt; &#xA;&lt;p&gt;Once you have more than a few points of interest, writing all of this out can be combersome. Mirador also supports setting up the whole experience from a JSON file. Here’s the JSON file you’ll need for the same experience:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;anchor&#34;: {&#xA;        &#34;name&#34;: &#34;greenwich&#34;,&#xA;        &#34;physical_width&#34;: 0.5,&#xA;        &#34;coordinate&#34;: [-0.00084588, 51.47787836], //[long, lat]&#xA;        &#34;altitude&#34;: 46.0,&#xA;        &#34;bearing_degrees&#34;: -30,&#xA;        &#34;orientation&#34;: &#34;vertical&#34; //&#34;vertical&#34; or &#34;horizontal&#34;&#xA;    },&#xA;    &#34;points_of_interest&#34;: [&#xA;        {&#xA;            &#34;name&#34;: &#34;Canary Wharf&#34;,&#xA;            &#34;coordinate&#34;: [-0.01948017, 51.50493780],&#xA;            &#34;altitude&#34;: 235&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;O2 Arena&#34;,&#xA;            &#34;coordinate&#34;: [0.00321850, 51.50296112],&#xA;            &#34;altitude&#34;: 52&#xA;        }&#xA;    },&#xA;    &#34;version&#34;: &#34;1.0&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use this JSON like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;if let path = Bundle.main.path(forResource: “greenwich”, ofType: “.json”) {&#xA;    let anchor = LocationAnchor.anchorFromFile(atPath: path)&#xA;&#xA;    let miradorView = MiradorView(locationAnchor: locationAnchor)&#xA;    miradorView.run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Provide an anchor image&lt;/h2&gt; &#xA;&lt;p&gt;Add a clear image of the anchor to your Assets, with the same name specified in the LocationAnchor.name.&lt;/p&gt; &#xA;&lt;p&gt;Try and take the image face-on, without any shadows or harsh reflections. Perspective transforming the image to be perfect doesn&#39;t work - in my testing, RealityKit doesn&#39;t recognise images that have been skewed. An image &lt;em&gt;designed to be an anchor&lt;/em&gt; (such as a QR code) could work best, and could also be seen as a good marketing opportunity, e.g. an image which promotes the app, and is also the anchor.&lt;/p&gt; &#xA;&lt;h2&gt;Final setup steps&lt;/h2&gt; &#xA;&lt;p&gt;If you’re using SwiftUI, you can instantiate in mostly the same way, but using &lt;code&gt;MiradorViewContainer(locationAnchor: locationAnchor)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Call &lt;code&gt;miradorView.run()&lt;/code&gt; when the experience is launched or brought back to the foreground, and &lt;code&gt;miradorView.pause()&lt;/code&gt; when the app is in the background.&lt;/p&gt; &#xA;&lt;p&gt;Finally, add &lt;code&gt;NSCameraUsageDescription&lt;/code&gt; to your info.plist, with a description for accessing the camera.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to run on your device - RealityKit requires the camera and doesn’t work in the Simulator.&lt;/p&gt; &#xA;&lt;h2&gt;Custom elements&lt;/h2&gt; &#xA;&lt;p&gt;All of the Points of Interest come with a standard out-of-the-box appearance, but you might want to customise this.&lt;/p&gt; &#xA;&lt;h3&gt;Displaying an image&lt;/h3&gt; &#xA;&lt;p&gt;You can display your own image within the AR space by using &lt;code&gt;addPOIImage()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let cityCoordinate = Coordinate(latitude:51.51438463, longitude: -0.08024839)&#xA;let cityLocation = Location(coordinate: cityCoordinate, altitude: 200)&#xA;let image = UIImage(named: &#34;skyline&#34;)!&#xA;&#xA;miradorView.addPOIImage(location: cityLocation, image: image)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This supports transparency, so if your image is a PNG that&#39;s fine. The AR entity displayed will have ScreenScale and FaceCamera properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ScreenScale: The entity scales to always appear at the size it was designed. If your image is 300x300, it&#39;ll appear at 300x300 points on-screen.&lt;/li&gt; &#xA; &lt;li&gt;FaceCamera: The entity always faces the camera.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Typically, RealityKit content can appear dimmed, but we&#39;ve developed a number of advanced rendering techniques, so the images support transparency, drop-shadows and they render with the correct colouring. Dig into &lt;code&gt;setupRealityKitPlane()&lt;/code&gt; within the source code if you&#39;re interested to see how that works.&lt;/p&gt; &#xA;&lt;p&gt;(Massive thanks to &lt;a href=&#34;https://twitter.com/maxxfrazer&#34;&gt;MaxxFrazer&lt;/a&gt; for most of this. Yes, I borrowed the number 1 RealityKit developer to help me build this.)&lt;/p&gt; &#xA;&lt;p&gt;If you want to display your own UI, you can use the SwiftUI &lt;code&gt;ImageRenderer&lt;/code&gt; API to convert this into an image. Check out the &lt;code&gt;addPOILabel()&lt;/code&gt; function within Mirador for some sample code.&lt;/p&gt; &#xA;&lt;p&gt;You can also add a RealityKit &lt;code&gt;Entity&lt;/code&gt; with the same ScreenScale and FaceCamera, functionality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;addPOIEntity(location: Location, entity: Entity)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can add a RealityKit Entity without ScreenScale or FaceCamera, but still anchored to a location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;addLocationEntity(location: Location, entity: Entity)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing the app from home&lt;/h2&gt; &#xA;&lt;p&gt;These experiences are designed to be used at iconic viewpoints, but it’s not practical to be on-site all day while developing your app. Here are some suggestions for improving the development process:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can run the experience from home by loading the anchor image on your computer screen, then scanning it with your app. This will let you quickly test if your AR elements are displaying properly, if there are enough/too many etc.&lt;/li&gt; &#xA; &lt;li&gt;You can record a RealityKit session, including video feed and AR motion data, using the Reality Composer app. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create a new session, tap the three dots in the top right &amp;gt; Developer &amp;gt; Record AR Session.&lt;/li&gt; &#xA;   &lt;li&gt;Record a session, as though you can see the AR elements and are demoing the final app. Make sure to point towards the anchor near the start. You don’t need to enable the location recording in the bottom right, we don’t use that.&lt;/li&gt; &#xA;   &lt;li&gt;Tap share, Save to Files. The file will be really big, over 100MB. AirDrop this file once you’re back at your computer. In my experience, if you save the video to Camera Roll, it saves at the same quality but removes the embedded data, and if you try to send it on WhatsApp or another app it compresses it to be much smaller. So make sure to save to Files, or send directly via AirDrop to stop the file from being compressed.&lt;/li&gt; &#xA;   &lt;li&gt;In Xcode, with your phone plugged in and selected, go to Edit Scheme… Run &amp;gt; Options &amp;gt; ARKit, and enable Replay data, then select the file. Note: This option won&#39;t appear unless you have your phone selected.&lt;/li&gt; &#xA;   &lt;li&gt;When you run the app, it’ll playback the video session, and should recognise your anchor image.&lt;/li&gt; &#xA;   &lt;li&gt;Note: In my experience, it seems that sessions recoded on LiDAR devices can only be played back on other LiDAR devices, and the same for non-LiDAR devices.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample project&lt;/h2&gt; &#xA;&lt;p&gt;The sample project provides a straightforward implementation which works at &lt;em&gt;Prime Meridian, Greenwich&lt;/em&gt; (the center of the world!). It demonstrates two ways you can use the library - from code, with some manual elements, or from JSON.&lt;/p&gt; &#xA;&lt;p&gt;Note: In both cases, the &lt;code&gt;greenwich&lt;/code&gt; anchor in the sample project is set to horizontal. You can change this to &lt;code&gt;vertical&lt;/code&gt; if you’re displaying it on your screen. If you’re in Greenwich and trying it in-person, it’ll be horizontal on the ground.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each frame where the anchor is visible, RealityKit updates its position. Sometimes the image can only be seen on the edge of a frame, so RealityKit&#39;s update to its position is not as precise, but there&#39;s no way to know which are &lt;em&gt;good&lt;/em&gt; anchor updates. And you can imagine the anchored content can jitter around every time it updates the position of the anchor. So I&#39;ve implemented a Kalman filter on these position updates, which basically averages out the data and should arrive at the correct heading.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Next steps&lt;/h2&gt; &#xA;&lt;p&gt;This is v1. There are endless opportunities to take Mirador further. Feel free to fork, and submit PRs with improvements and new features.&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;Mirador was built by &lt;a href=&#34;https://twitter.com/AndrewHartAR&#34;&gt;Andrew Hart&lt;/a&gt;. A common follow-up question I get is &#34;this is great - can this be integrated with retail stores?&#34; That&#39;s the purpose of my startup, &lt;a href=&#34;https://HyperAR.com&#34;&gt;Hyper&lt;/a&gt;. Mirador is free, open-source for Point of Interest applications. Hyper is our full indoor spatial platform for retail (indoor maps, precise location, AR navigation etc.)&lt;/p&gt; &#xA;&lt;p&gt;Massive thanks to &lt;a href=&#34;https://twitter.com/maxxfrazer&#34;&gt;MaxxFrazer&lt;/a&gt;, the king of RealityKit, who helped with many of the rendering issues.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Mirador is available under MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>