<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-18T02:03:25Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IsaacMarovitz/Whisky</title>
    <updated>2023-06-18T02:03:25Z</updated>
    <id>tag:github.com,2023-06-18:/IsaacMarovitz/Whisky</id>
    <link href="https://github.com/IsaacMarovitz/Whisky" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern Wine wrapper for macOS built with SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Whisky ðŸ¥ƒ&lt;/h1&gt; &#xA; &lt;p&gt;&lt;em&gt;Wine but a bit stronger&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IsaacMarovitz/Whisky/SwiftLint.yml?style=for-the-badge&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://discord.gg/CsqAfs9CnM&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1115955071549702235?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;img width=&#34;650&#34; alt=&#34;Screenshot 2023-03-31 at 17 14 00&#34; src=&#34;https://user-images.githubusercontent.com/42140194/229232488-dbad85f4-cecb-45e1-a182-f737fe9d2b1f.png&#34;&gt; &#xA;&lt;p&gt;Familiar UI that integrates seamlessly with macOS&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;img width=&#34;650&#34; alt=&#34;Screenshot 2023-03-31 at 17 14 22&#34; src=&#34;https://user-images.githubusercontent.com/42140194/229232557-07f78a79-f695-45f6-be45-15a5b2f3c053.png&#34;&gt; &#xA; &lt;p&gt;One-click bottle creation and management&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;img width=&#34;650&#34; alt=&#34;debug&#34; src=&#34;https://user-images.githubusercontent.com/42140194/229176642-57b80801-d29b-4123-b1c2-f3b31408ffc6.png&#34;&gt; &#xA;&lt;p&gt;Debug and profile with ease&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Whisky provides a clean and easy to use graphical wrapper for Wine built in native SwiftUI. You can make and manage bottles, install and run Windows apps and games, and unlock the full potential of your Mac with no technical knowledge required. Whisky is built on top of CrossOver 22.1.1, and Apple&#39;s own &lt;code&gt;Game Porting Toolkit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/Gcenx&#34;&gt;Gcenx&lt;/a&gt;, without your amazing work Whisky wouldn&#39;t be possible.&lt;/p&gt; &#xA;&lt;p&gt;Translated on &lt;a href=&#34;https://crowdin.com/project/whisky&#34;&gt;Crowdin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h3&gt;The direct download link for the toolkit doesn&#39;t work&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you&#39;re logged in to the Apple Developer website. If it still won&#39;t work use an &lt;a href=&#34;https://developer.apple.com/download/all/?q=porting&#34;&gt;indirect link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Do I need to follow the steps in the toolkit&#39;s README?&lt;/h3&gt; &#xA;&lt;p&gt;No, you don&#39;t, in fact you shouldn&#39;t follow them.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DougGregor/swift-macro-examples</title>
    <updated>2023-06-18T02:03:25Z</updated>
    <id>tag:github.com,2023-06-18:/DougGregor/swift-macro-examples</id>
    <link href="https://github.com/DougGregor/swift-macro-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Example macros for the Swift macros effort&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Macro Examples&lt;/h1&gt; &#xA;&lt;p&gt;There is an active effort to introduce &lt;a href=&#34;https://forums.swift.org/t/a-possible-vision-for-macros-in-swift/60900&#34;&gt;macros&lt;/a&gt; into the Swift programming language. This repository includes some example macros that can be used to explore the macro proposals and experiment with the current implementation of the feature.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Macros are an experimental feature, so you will need a custom Swift toolchain and some extra compiler flags. The Xcode project in this repository is a good starting point. To use it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a &lt;a href=&#34;https://www.swift.org/download/#snapshots&#34;&gt;development snapshot&lt;/a&gt; of the compiler from Swift.org from May 10, 2023 or later. At present, we only have these working on macOS, but are working to get other platforms working with other build systems.&lt;/li&gt; &#xA; &lt;li&gt;To use SwiftPM to build the example project, use &lt;code&gt;swift build&lt;/code&gt; from the toolchain, e.g.: &lt;pre&gt;&lt;code&gt;/Library/Developer/Toolchains/swift-DEVELOPMENT-SNAPSHOT-2023-03-08-a.xctoolchain/usr/bin/swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To use Xcode to build the example project: a. Open &lt;code&gt;MacroExamples.xcodeproj&lt;/code&gt; in Xcode b. Go to the Xcode -&amp;gt; Toolchains menu and select the development toolchain you downloaded. c. Make sure the &lt;code&gt;MacroExamples&lt;/code&gt; scheme is selected, then build and run! If the first build fails, build again--there&#39;s something funky going on with the dependencies. Then build again!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The output of the &lt;code&gt;MacroExamples&lt;/code&gt; program is pretty simple: it shows the result of running the example macro(s). The &lt;code&gt;main.swift&lt;/code&gt; file is annotated to describe what the macros are actually doing.&lt;/p&gt; &#xA;&lt;h2&gt;Example macros&lt;/h2&gt; &#xA;&lt;p&gt;A number of macros in this package are designed to illustrate different capabilities of the macro system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@AddCompletionHandler&lt;/code&gt;: Adds a completion-handler form of an &lt;code&gt;async&lt;/code&gt; function that creates a new task, calls the async function, and delivers the result to a completion handler. There&#39;s also the opposite form, &lt;code&gt;@AddAsync&lt;/code&gt;, to add an &lt;code&gt;async&lt;/code&gt; version for a synchronous function with a completion handler, automating the use of &lt;code&gt;withCheckedContinuation&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@CaseDetectionMacro&lt;/code&gt;: Augments an enum with &lt;code&gt;isXXX&lt;/code&gt; properties corresponding to each enum case, so one can easily test for a specific case, e.g., &lt;code&gt;filePath.isAbsolute&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@Observable&lt;/code&gt;: Observation facilities for a property, using a combination of macro kinds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;#addBlocker&lt;/code&gt;: Demonstrates how a freestanding macro can emit compiler diagnostics based on the source code for the macro argument, by producing a warning for each use of the binary &lt;code&gt;+&lt;/code&gt; operator with range highlighting and a Fix-It to replace the &lt;code&gt;+&lt;/code&gt; with &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding your own macro&lt;/h2&gt; &#xA;&lt;p&gt;This examples package is meant to grow to include additional macros that have interesting behavior. To add a macro requires both &lt;em&gt;declaring&lt;/em&gt; the macro and also &lt;em&gt;implementing&lt;/em&gt; the macro, which happen in separate targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;: a macro is defined in the &lt;code&gt;MacroExamplesPlugin&lt;/code&gt; target, by creating a new &lt;code&gt;public struct&lt;/code&gt; type that implements one of the macro protocols. The &lt;code&gt;stringify&lt;/code&gt; macro implements the &lt;code&gt;ExpressionMacro&lt;/code&gt; protocol, e.g.,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public struct StringifyMacro: ExpressionMacro { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test a macro implementation, introduce new tests into the &lt;code&gt;MacroExamplesPluginTest&lt;/code&gt; target. These tests start with source code (like &lt;code&gt;#stringify(x + y)&lt;/code&gt;) and will run the macro implementation to produce new source code. The translation can make use of the &lt;a href=&#34;https://github.com/apple/swift-syntax&#34;&gt;swift-syntax&lt;/a&gt; package, a copy of which is included in the toolchain. We recommend implementing and testing your macro this way first so you know it does the source translation you want.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Declaration&lt;/strong&gt;: a macro is declared in the &lt;code&gt;MacroExamplesLib&lt;/code&gt; target, using the &lt;code&gt;macro&lt;/code&gt; introducer. For example, the simple &lt;code&gt;stringify&lt;/code&gt; macro is declared like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@freestanding(expression)&#xA;public macro stringify&amp;lt;T&amp;gt;(_ value: T) -&amp;gt; (T, String) = #externalMacro(module: &#34;MacroExamplesPlugin&#34;, type: &#34;StringifyMacro&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The name after &lt;code&gt;macro&lt;/code&gt; is the name to be used in source code, whereas the name after the &lt;code&gt;=&lt;/code&gt; is the module and type name for your macro implementation. If you haven&#39;t implemented that type, or get the name wrong, you will get a compiler warning.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have both a declaration and an implementation, it&#39;s time to use your macro! Go back to &lt;code&gt;MacroExamples&lt;/code&gt; and write some code there to exercise your macro however you want.&lt;/p&gt; &#xA;&lt;h2&gt;Macros proposals&lt;/h2&gt; &#xA;&lt;p&gt;The introduction of macros into Swift will involve a number of different proposals. The &lt;a href=&#34;https://gist.github.com/DougGregor/de840fcf6d6f307792121eee11c0da85&#34;&gt;Swift macros dashboard&lt;/a&gt; keeps track of all of them.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-syntax</title>
    <updated>2023-06-18T02:03:25Z</updated>
    <id>tag:github.com,2023-06-18:/apple/swift-syntax</id>
    <link href="https://github.com/apple/swift-syntax" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A set of Swift libraries for parsing, inspecting, generating, and transforming Swift source code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftSyntax&lt;/h1&gt; &#xA;&lt;p&gt;SwiftSyntax is a set of Swift libraries for parsing, inspecting, generating, and transforming Swift source code.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can read SwiftSyntaxâ€™s documentation on &lt;a href=&#34;https://swiftpackageindex.com/apple/swift-syntax/documentation&#34;&gt;swiftpackageindex.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A great way to interactively explore the SwiftSyntax tree of a source file is &lt;a href=&#34;https://swift-ast-explorer.com&#34;&gt;https://swift-ast-explorer.com&lt;/a&gt;, developed by &lt;a href=&#34;https://github.com/kishikawakatsumi&#34;&gt;@kishikawakatsumi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Adding SwiftSyntax as a Dependency&lt;/h2&gt; &#xA;&lt;h3&gt;Trunk Development (main)&lt;/h3&gt; &#xA;&lt;p&gt;The mainline branch of SwiftSyntax tracks the latest developments. It is not an official release, and is subject to rapid changes in APIs and behaviors. To use it, add this repository to the &lt;code&gt;Package.swift&lt;/code&gt; manifest of your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.7&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;MyTool&#34;,&#xA;  dependencies: [&#xA;    .package(url: &#34;https://github.com/apple/swift-syntax.git&#34;, branch: &#34;main&#34;),&#xA;  ],&#xA;  targets: [&#xA;    .target(name: &#34;MyTool&#34;, dependencies: [&#xA;      .product(name: &#34;SwiftSyntax&#34;, package: &#34;swift-syntax&#34;),&#xA;    ]),&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mainline SwiftSyntax also includes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SwiftParser&lt;/code&gt; for natively parsing source code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SwiftOperators&lt;/code&gt; for folding SwiftSyntax trees containing operators&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SwiftSyntaxBuilder&lt;/code&gt; for generating Swift code with a result builder-style interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;p&gt;Releases of SwiftSyntax are aligned with corresponding language and tooling releases and are stable. To use them, add this repository to the &lt;code&gt;Package.swift&lt;/code&gt; manifest of your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.7&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;MyTool&#34;,&#xA;  dependencies: [&#xA;    .package(url: &#34;https://github.com/apple/swift-syntax.git&#34;, exact: &#34;&amp;lt;#Specify Release tag#&amp;gt;&#34;),&#xA;  ],&#xA;  targets: [&#xA;    .target(name: &#34;MyTool&#34;, dependencies: [&#xA;      .product(name: &#34;SwiftSyntax&#34;, package: &#34;swift-syntax&#34;),&#xA;    ]),&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;&amp;lt;#Specify Release tag#&amp;gt;&lt;/code&gt; by the version of SwiftSyntax that you want to use (see the following table for mapping details).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Xcode Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Swift Release Tag&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;SwiftSyntax Release Tag&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 14.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.8-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;508.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 14.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.7-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50700.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 13.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.6-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50600.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 13.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.5-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50500.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 12.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.4-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50400.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.3-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50300.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Xcode 11.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;swift-5.2-RELEASE&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.50200.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;SwiftSyntax uses &lt;a href=&#34;https://developer.apple.com/documentation/docc&#34;&gt;DocC&lt;/a&gt; bundles for its documentation. To view rendered documentation in Xcode, open the SwiftSyntax package and select&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Product &amp;gt; Build Documentation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Associated articles are written in markdown, and can be viewed in a browser, text editor, or IDE.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-syntax/main/Sources/SwiftSyntax/Documentation.docc&#34;&gt;SwiftSyntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-syntax/main/Sources/SwiftParser/SwiftParser.docc&#34;&gt;SwiftParser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-syntax/main/Sources/SwiftOperators/SwiftOperators.docc&#34;&gt;SwiftOperators&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Start contributing to SwiftSyntax see &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-syntax/main/CONTRIBUTING.md&#34;&gt;this guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you should hit any issues while using SwiftSyntax, we appreciate bug reports on &lt;a href=&#34;https://github.com/apple/swift-syntax/issues&#34;&gt;GitHub Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bazel&lt;/h2&gt; &#xA;&lt;p&gt;SwiftSyntax provides an experimental &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; build configuration, maintained by Keith Smiley. To use it you can pull the source archive from the relevant release tag into your &lt;code&gt;WORKSPACE&lt;/code&gt; and depend on the libraries you need from the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-syntax/main/BUILD.bazel&#34;&gt;&lt;code&gt;BUILD.bazel&lt;/code&gt;&lt;/a&gt; file. Each library also has an associated &lt;code&gt;Library_opt&lt;/code&gt; target (such as &lt;code&gt;SwiftSyntax_opt&lt;/code&gt;) which forces SwiftSyntax to always build with optimizations enabled. This may help local runtime performance at the cost of debuggability, and initial build time. Please tag any &lt;a href=&#34;https://github.com/apple/swift-syntax/issues&#34;&gt;issues&lt;/a&gt; related to the Bazel configuration with the label &#34;Bazel&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-syntax/main/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>