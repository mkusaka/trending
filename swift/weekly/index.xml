<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:26:21Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Juanpe/SkeletonView</title>
    <updated>2022-06-04T02:26:21Z</updated>
    <id>tag:github.com,2022-06-04:/Juanpe/SkeletonView</id>
    <link href="https://github.com/Juanpe/SkeletonView" rel="alternate"></link>
    <summary type="html">&lt;p&gt;☠️ An elegant way to show users that something is happening and also prepare them to which contents they are awaiting&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/header2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Juanpe/SkeletonView/actions?query=workflow%3ACI&#34;&gt; &lt;img src=&#34;https://github.com/Juanpe/SkeletonView/workflows/CI/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-juanpe-skeletonview-main&#34;&gt;&lt;img alt=&#34;codebeat badge&#34; src=&#34;https://codebeat.co/badges/1f37bbab-a1c8-4a4a-94d7-f21740d461e9&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SkeletonView&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SkeletonView.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-Green.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FJuanpe%2FSkeletonView%2Fbadge%3Ftype%3Dplatforms&#34;&gt; &lt;a href=&#34;https://badge.bow-swift.io/recipe?name=SkeletonView&amp;amp;description=An%20elegant%20way%20to%20show%20users%20that%20something%20is%20happening%20and%20also%20prepare%20them%20to%20which%20contents%20he%20is%20waiting&amp;amp;url=https://github.com/juanpe/skeletonview&amp;amp;owner=Juanpe&amp;amp;avatar=https://avatars0.githubusercontent.com/u/1409041?v=4&amp;amp;tag=1.20.0&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bow-swift/bow-art/master/badges/nef-playgrounds-badge.svg?sanitize=true&#34; alt=&#34;SkeletonView Playground&#34; style=&#34;height:20px&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-guides&#34;&gt;Guides&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt; • &lt;a href=&#34;#️-contributing&#34;&gt;Contributing&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🌎 README is available in other languages: &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Translations/README_es.md&#34;&gt;🇪🇸&lt;/a&gt; . &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Translations/README_zh.md&#34;&gt;🇨🇳&lt;/a&gt; . &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Translations/README_pt-br.md&#34;&gt;🇧🇷&lt;/a&gt; . &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Translations/README_ko.md&#34;&gt;🇰🇷&lt;/a&gt; . &lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Translations/README_fr.md&#34;&gt;🇫🇷&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Today almost all apps have async processes, such as API requests, long running processes, etc. While the processes are working, usually developers place a loading view to show users that something is going on.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SkeletonView&lt;/strong&gt; has been conceived to address this need, an elegant way to show users that something is happening and also prepare them for which contents are waiting.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy it! 🙂&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-features&#34;&gt;🌟 Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-guides&#34;&gt;🎬 Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-installation&#34;&gt;📲 Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-usage&#34;&gt;🐒 Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-collections&#34;&gt;🌿 Collections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-texts&#34;&gt;🔠 Texts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-appearance&#34;&gt;🦋 Appearance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-custom-colors&#34;&gt;🎨 Custom colors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#%EF%B8%8F-animations&#34;&gt;🏃‍♀️ Animations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-transitions&#34;&gt;🏄 Transitions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-miscellaneous&#34;&gt;✨ Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#%EF%B8%8F-contributing&#34;&gt;❤️ Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-mentions&#34;&gt;📢 Mentions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-sponsors&#34;&gt;🏆 Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-author&#34;&gt;👨🏻‍💻 Author&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/#-license&#34;&gt;👮🏻 License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌟 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;All UIViews are skeletonables&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable&lt;/li&gt; &#xA; &lt;li&gt;Universal (iPhone &amp;amp; iPad)&lt;/li&gt; &#xA; &lt;li&gt;Interface Builder friendly&lt;/li&gt; &#xA; &lt;li&gt;Simple Swift syntax&lt;/li&gt; &#xA; &lt;li&gt;Lightweight readable codebase&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎬 Guides&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/75kgOhWsPNA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/75kgOhWsPNA/maxresdefault.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/MVCiM_VdxVA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/MVCiM_VdxVA/maxresdefault.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/Qq3Evspeea8&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/Qq3Evspeea8/maxresdefault.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Zx1Pg1gPfxA&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/Zx1Pg1gPfxA/maxresdefault.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/75kgOhWsPNA&#34;&gt;&lt;strong&gt;SkeletonView Guides - Getting started&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/MVCiM_VdxVA&#34;&gt;&lt;strong&gt;How to Create Loading View with Skeleton View in Swift 5.2&lt;/strong&gt;&lt;/a&gt; by iKh4ever Studio&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtu.be/Qq3Evspeea8&#34;&gt;&lt;strong&gt;Create Skeleton Loading View in App (Swift 5) - Xcode 11, 2020&lt;/strong&gt;&lt;/a&gt; by iOS Academy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Zx1Pg1gPfxA&#34;&gt;&lt;strong&gt;Cómo crear una ANIMACIÓN de CARGA de DATOS en iOS&lt;/strong&gt;&lt;/a&gt; by MoureDev&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;📲 Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SkeletonView&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;Juanpe/SkeletonView&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(url: &#34;https://github.com/Juanpe/SkeletonView.git&#34;, from: &#34;1.7.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🐒 Usage&lt;/h2&gt; &#xA;&lt;p&gt;Only &lt;strong&gt;3&lt;/strong&gt; steps needed to use &lt;code&gt;SkeletonView&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;1️⃣ Import SkeletonView in proper place.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SkeletonView&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2️⃣ Now, set which views will be &lt;code&gt;skeletonables&lt;/code&gt;. You achieve this in two ways:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using code:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;avatarImageView.isSkeletonable = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using IB/Storyboards:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/storyboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;3️⃣ Once you&#39;ve set the views, you can show the &lt;strong&gt;skeleton&lt;/strong&gt;. To do so, you have &lt;strong&gt;4&lt;/strong&gt; choices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;(1) view.showSkeleton()                 // Solid&#xA;(2) view.showGradientSkeleton()         // Gradient&#xA;(3) view.showAnimatedSkeleton()         // Solid animated&#xA;(4) view.showAnimatedGradientSkeleton() // Gradient animated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     Solid&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     Gradient&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     Solid Animated&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     Gradient Animated&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/solid.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/gradient.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/solid_animated.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/gradient_animated.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📣 &lt;strong&gt;IMPORTANT!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;SkeletonView&lt;/code&gt; is recursive, so if you want show the skeleton in all skeletonable views, you only need to call the show method in the main container view. For example, with &lt;code&gt;UIViewControllers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🌿 Collections&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SkeletonView&lt;/code&gt; is compatible with &lt;code&gt;UITableView&lt;/code&gt; and &lt;code&gt;UICollectionView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UITableView&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to show the skeleton in a &lt;code&gt;UITableView&lt;/code&gt;, you need to conform to &lt;code&gt;SkeletonTableViewDataSource&lt;/code&gt; protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol SkeletonTableViewDataSource: UITableViewDataSource {&#xA;    func numSections(in collectionSkeletonView: UITableView) -&amp;gt; Int // Default: 1&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -&amp;gt; ReusableCellIdentifier&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, skeletonCellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell? // Default: nil&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, prepareCellForSkeleton cell: UITableViewCell, at indexPath: IndexPath)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, this protocol inherits from &lt;code&gt;UITableViewDataSource&lt;/code&gt;, so you can replace this protocol with the skeleton protocol.&lt;/p&gt; &#xA;&lt;p&gt;This protocol has a default implementation for some methods. For example, the number of rows for each section is calculated in runtime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func collectionSkeletonView(_ skeletonView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int&#xA;// Default:&#xA;// It calculates how many cells need to populate whole tableview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📣 &lt;strong&gt;IMPORTANT!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you return &lt;code&gt;UITableView.automaticNumberOfSkeletonRows&lt;/code&gt; in the above method, it acts like the default behavior (i.e. it calculates how many cells needed to populate the whole tableview).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There is only one method you need to implement to let Skeleton know the cell identifier. This method doesn&#39;t have default implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -&amp;gt; ReusableCellIdentifier {&#xA;   return &#34;CellIdentifier&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the library dequeues the cells from each indexPath, but you can also do this if you want to make some changes before the skeleton appears:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func collectionSkeletonView(_ skeletonView: UITableView, skeletonCellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell? {&#xA;    let cell = skeletonView.dequeueReusableCell(withIdentifier: &#34;CellIdentifier&#34;, for: indexPath) as? Cell&#xA;    cell?.textField.isHidden = indexPath.row == 0&#xA;    return cell&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to leave the deque part to the library you can configure the cell using this method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func collectionSkeletonView(_ skeletonView: UITableView, prepareCellForSkeleton cell: UITableViewCell, at indexPath: IndexPath) {&#xA;    let cell = cell as? Cell&#xA;    cell?.textField.isHidden = indexPath.row == 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides, you can skeletonize both the headers and footers. You need to conform to &lt;code&gt;SkeletonTableViewDelegate&lt;/code&gt; protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol SkeletonTableViewDelegate: UITableViewDelegate {&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, identifierForHeaderInSection section: Int) -&amp;gt; ReusableHeaderFooterIdentifier? // default: nil&#xA;    func collectionSkeletonView(_ skeletonView: UITableView, identifierForFooterInSection section: Int) -&amp;gt; ReusableHeaderFooterIdentifier? // default: nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📣 &lt;strong&gt;IMPORTANT!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;1️⃣ If you are using resizable cells (&lt;strong&gt;&lt;code&gt;tableView.rowHeight = UITableViewAutomaticDimension&lt;/code&gt;&lt;/strong&gt;), it&#39;s mandatory define the &lt;strong&gt;&lt;code&gt;estimatedRowHeight&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;2️⃣ When you add elements in a &lt;strong&gt;&lt;code&gt;UITableViewCell&lt;/code&gt;&lt;/strong&gt; you should add it to &lt;strong&gt;&lt;code&gt;contentView&lt;/code&gt;&lt;/strong&gt; and not to the cell directly.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.contentView.addSubview(titleLabel) ✅         &#xA;self.addSubview(titleLabel) ❌&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;UICollectionView&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;UICollectionView&lt;/code&gt;, you need to conform to &lt;code&gt;SkeletonCollectionViewDataSource&lt;/code&gt; protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol SkeletonCollectionViewDataSource: UICollectionViewDataSource {&#xA;    func numSections(in collectionSkeletonView: UICollectionView) -&amp;gt; Int  // default: 1&#xA;    func collectionSkeletonView(_ skeletonView: UICollectionView, numberOfItemsInSection section: Int) -&amp;gt; Int&#xA;    func collectionSkeletonView(_ skeletonView: UICollectionView, cellIdentifierForItemAt indexPath: IndexPath) -&amp;gt; ReusableCellIdentifier&#xA;    func collectionSkeletonView(_ skeletonView: UICollectionView, supplementaryViewIdentifierOfKind: String, at indexPath: IndexPath) -&amp;gt; ReusableCellIdentifier? // default: nil&#xA;    func collectionSkeletonView(_ skeletonView: UICollectionView, skeletonCellForItemAt indexPath: IndexPath) -&amp;gt; UICollectionViewCell?  // default: nil&#xA;    func collectionSkeletonView(_ skeletonView: UICollectionView, prepareCellForSkeleton cell: UICollectionViewCell, at indexPath: IndexPath)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rest of the process is the same as &lt;code&gt;UITableView&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🔠 Texts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multilines2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When using elements with text, &lt;code&gt;SkeletonView&lt;/code&gt; draws lines to simulate text.&lt;/p&gt; &#xA;&lt;p&gt;You can set some properties for multilines elements.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;lastLineFillPercent&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CGFloat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;70&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_lastline.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;linesCornerRadius&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_corner.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;skeletonLineSpacing&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CGFloat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_lineSpacing.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;skeletonPaddingInsets&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;UIEdgeInsets&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.zero&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_insets.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;skeletonTextLineHeight&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SkeletonTextLineHeight&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.fixed(15)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_lineHeight.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;skeletonTextNumberOfLines&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SkeletonTextNumberOfLines&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.inherited&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_corner.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;To modify the percent or radius &lt;strong&gt;using code&lt;/strong&gt;, set the properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;descriptionTextView.lastLineFillPercent = 50&#xA;descriptionTextView.linesCornerRadius = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you prefer use &lt;strong&gt;IB/Storyboard&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/multiline_customize.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to define the number of lines?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, the number of lines is the same as the value of the &lt;code&gt;numberOfLines&lt;/code&gt; property. And, if it&#39;s set to &lt;strong&gt;zero&lt;/strong&gt;, it&#39;ll calculate how many lines are needed to populate the whole skeleton and draw it.&lt;/p&gt; &#xA;&lt;p&gt;However, if you want to set a specific number of skeleton lines you can do it by setting the &lt;code&gt;skeletonTextNumberOfLines&lt;/code&gt; property. This property has two possible values, &lt;code&gt;inherited&lt;/code&gt; which returns &lt;code&gt;numberOfLines&lt;/code&gt; value and &lt;code&gt;custom(Int)&lt;/code&gt; which returns the specific number of lines specified as the associated value.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.skeletonTextNumberOfLines = 3   // .custom(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ DEPRECATED!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;useFontLineHeight&lt;/strong&gt; has been deprecated. You can use &lt;strong&gt;skeletonTextLineHeight&lt;/strong&gt; instead:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;descriptionTextView.skeletonTextLineHeight = .relativeToFont&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;📣 IMPORTANT!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Please note that for views without multiple lines, the single line will be considered as the last line.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🦋 Appearance&lt;/h3&gt; &#xA;&lt;p&gt;The skeletons have a default appearance. So, when you don&#39;t specify the color, gradient or multilines properties, &lt;code&gt;SkeletonView&lt;/code&gt; uses the default values.&lt;/p&gt; &#xA;&lt;p&gt;Default values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;tintColor&lt;/strong&gt;: &lt;code&gt;UIColor&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: &lt;code&gt;.skeletonDefault&lt;/code&gt; (same as &lt;code&gt;.clouds&lt;/code&gt; but adaptive to dark mode)&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gradient&lt;/strong&gt;: SkeletonGradient &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: &lt;code&gt;SkeletonGradient(baseColor: .skeletonDefault)&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;multilineHeight&lt;/strong&gt;: &lt;code&gt;CGFloat&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: 15&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;multilineSpacing&lt;/strong&gt;: &lt;code&gt;CGFloat&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: 10&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;multilineLastLineFillPercent&lt;/strong&gt;: &lt;code&gt;Int&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: 70&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;multilineCornerRadius&lt;/strong&gt;: &lt;code&gt;Int&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: 0&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;skeletonCornerRadius&lt;/strong&gt;: &lt;code&gt;CGFloat&lt;/code&gt; (IBInspectable) (Make your skeleton view with corner) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;default: 0&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To get these default values you can use &lt;code&gt;SkeletonAppearance.default&lt;/code&gt;. Using this property you can set the values as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SkeletonAppearance.default.multilineHeight = 20&#xA;SkeletonAppearance.default.tintColor = .green&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ DEPRECATED!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;useFontLineHeight&lt;/strong&gt; has been deprecated. You can use &lt;strong&gt;textLineHeight&lt;/strong&gt; instead:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SkeletonAppearance.default.textLineHeight = .relativeToFont&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🎨 Custom colors&lt;/h3&gt; &#xA;&lt;p&gt;You can decide which color the skeleton is tinted with. You only need to pass as a parameter the color or gradient you want.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using solid colors&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.showSkeleton(usingColor: UIColor.gray) // Solid&#xA;// or&#xA;view.showSkeleton(usingColor: UIColor(red: 25.0, green: 30.0, blue: 255.0, alpha: 1.0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using gradients&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let gradient = SkeletonGradient(baseColor: UIColor.midnightBlue)&#xA;view.showGradientSkeleton(usingGradient: gradient) // Gradient&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides, &lt;strong&gt;SkeletonView&lt;/strong&gt; features 20 flat colors 🤙🏼&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;UIColor.turquoise, UIColor.greenSea, UIColor.sunFlower, UIColor.flatOrange ...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/flatcolors.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h6&gt;Image captured from website &lt;a href=&#34;https://flatuicolors.com&#34;&gt;https://flatuicolors.com&lt;/a&gt;&lt;/h6&gt; &#xA;&lt;h3&gt;🏃‍♀️ Animations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SkeletonView&lt;/strong&gt; has two built-in animations, &lt;em&gt;pulse&lt;/em&gt; for solid skeletons and &lt;em&gt;sliding&lt;/em&gt; for gradients.&lt;/p&gt; &#xA;&lt;p&gt;Besides, if you want to do your own skeleton animation, it&#39;s really easy.&lt;/p&gt; &#xA;&lt;p&gt;Skeleton provides the &lt;code&gt;showAnimatedSkeleton&lt;/code&gt; function which has a &lt;code&gt;SkeletonLayerAnimation&lt;/code&gt; closure where you can define your custom animation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public typealias SkeletonLayerAnimation = (CALayer) -&amp;gt; CAAnimation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can call the function like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.showAnimatedSkeleton { (layer) -&amp;gt; CAAnimation in&#xA;  let animation = CAAnimation()&#xA;  // Customize here your animation&#xA;&#xA;  return animation&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s available &lt;code&gt;SkeletonAnimationBuilder&lt;/code&gt;. It&#39;s a builder to make &lt;code&gt;SkeletonLayerAnimation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Today, you can create &lt;strong&gt;sliding animations&lt;/strong&gt; for gradients, deciding the &lt;strong&gt;direction&lt;/strong&gt; and setting the &lt;strong&gt;duration&lt;/strong&gt; of the animation (default = 1.5s).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// func makeSlidingAnimation(withDirection direction: GradientDirection, duration: CFTimeInterval = 1.5) -&amp;gt; SkeletonLayerAnimation&#xA;&#xA;let animation = SkeletonAnimationBuilder().makeSlidingAnimation(withDirection: .leftToRight)&#xA;view.showAnimatedGradientSkeleton(usingGradient: gradient, animation: animation)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;GradientDirection&lt;/code&gt; is an enum, with theses cases:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Direction&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.leftRight&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_left_to_right.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.rightLeft&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_right_to_left.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.topBottom&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_top_to_bottom.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.bottomTop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_bottom_to_top.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.topLeftBottomRight&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_topLeft_to_bottomRight.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.bottomRightTopLeft&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/sliding_bottomRight_to_topLeft.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;😉 TRICK!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Exist another way to create sliding animations, just using this shortcut:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let animation = GradientDirection.leftToRight.slidingAnimation()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🏄 Transitions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SkeletonView&lt;/strong&gt; has built-in transitions to &lt;strong&gt;show&lt;/strong&gt; or &lt;strong&gt;hide&lt;/strong&gt; the skeletons in a &lt;em&gt;smoother&lt;/em&gt; way 🤙&lt;/p&gt; &#xA;&lt;p&gt;To use the transition, simply add the &lt;code&gt;transition&lt;/code&gt; parameter to your &lt;code&gt;showSkeleton()&lt;/code&gt; or &lt;code&gt;hideSkeleton()&lt;/code&gt; function with the transition time, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.showSkeleton(transition: .crossDissolve(0.25))     //Show skeleton cross dissolve transition with 0.25 seconds fade time&#xA;view.hideSkeleton(transition: .crossDissolve(0.25))     //Hide skeleton cross dissolve transition with 0.25 seconds fade time&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default value is &lt;code&gt;crossDissolve(0.25)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     None&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &#xA;    &lt;center&gt;&#xA;     Cross dissolve&#xA;    &lt;/center&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/skeleton_transition_nofade.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/skeleton_transition_fade.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;✨ Miscellaneous&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hierarchy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;code&gt;SkeletonView&lt;/code&gt; is recursive, and we want skeleton to be very efficient, we want to stop recursion as soon as possible. For this reason, you must set the container view as &lt;code&gt;Skeletonable&lt;/code&gt;, because Skeleton will stop looking for &lt;code&gt;skeletonable&lt;/code&gt; subviews as soon as a view is not Skeletonable, breaking then the recursion.&lt;/p&gt; &#xA;&lt;p&gt;Because an image is worth a thousand words:&lt;/p&gt; &#xA;&lt;p&gt;In this example we have a &lt;code&gt;UIViewController&lt;/code&gt; with a &lt;code&gt;ContainerView&lt;/code&gt; and a &lt;code&gt;UITableView&lt;/code&gt;. When the view is ready, we show the skeleton using this method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;view.showSkeleton()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;isSkeletonable&lt;/code&gt;= ☠️&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Configuration&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Result&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/no_skeletonable.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/no_skeletonables_result.png&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/container_no_skeletonable.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/no_skeletonables_result.png&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/container_skeletonable.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/container_skeletonable_result.png&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/all_skeletonables.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/all_skeletonables_result.png&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/tableview_no_skeletonable.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/tableview_no_skeletonable_result.png&#34; height=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/tableview_skeletonable.jpg&#34; width=&#34;350&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/tableview_skeletonable_result.png&#34; height=&#34;350&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Skeleton views layout&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sometimes skeleton layout may not fit your layout because the parent view bounds have changed. &lt;del&gt;For example, rotating the device.&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can relayout the skeleton views like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLayoutSubviews() {&#xA;    view.layoutSkeletonIfNeeded()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📣 &lt;strong&gt;IMPORTANT!&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;You shouldn&#39;t call this method. From &lt;strong&gt;version 1.8.1&lt;/strong&gt; you don&#39;t need to call this method, the library does automatically. So, you can use this method &lt;strong&gt;ONLY&lt;/strong&gt; in the cases when you need to update the layout of the skeleton manually.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update skeleton&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can change the skeleton configuration at any time like its colour, animation, etc. with the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;(1) view.updateSkeleton()                 // Solid&#xA;(2) view.updateGradientSkeleton()         // Gradient&#xA;(3) view.updateAnimatedSkeleton()         // Solid animated&#xA;(4) view.updateAnimatedGradientSkeleton() // Gradient animated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hiding views when the animation starts&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sometimes you wanna hide some view when the animation starts, so there is a quick property that you can use to make this happen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.isHiddenWhenSkeletonIsActive = true  // This works only when isSkeletonable = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t modify user interaction when the skeleton is active&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, the user interaction is disabled for skeletonized items, but if you don&#39;t want to modify the user interaction indicator when skeleton is active, you can use the &lt;code&gt;isUserInteractionDisabledWhenSkeletonIsActive&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;view.isUserInteractionDisabledWhenSkeletonIsActive = false  // The view will be active when the skeleton will be active.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t use the font line height for the skeleton lines in labels&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;False to disable skeleton to auto-adjust to font height for a &lt;code&gt;UILabel&lt;/code&gt; or &lt;code&gt;UITextView&lt;/code&gt;. By default, the skeleton lines height is auto-adjusted to font height to more accurately reflect the text in the label rect rather than using the bounding box.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;label.useFontLineHeight = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Delayed show skeleton&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can delay the presentation of the skeleton if the views update quickly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func showSkeleton(usingColor: UIColor,&#xA;                  animated: Bool,&#xA;                  delay: TimeInterval,&#xA;                  transition: SkeletonTransitionStyle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func showGradientSkeleton(usingGradient: SkeletonGradient,&#xA;                          animated: Bool,&#xA;                          delay: TimeInterval,&#xA;                          transition: SkeletonTransitionStyle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debug&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To facilitate the debug tasks when something is not working fine. &lt;strong&gt;&lt;code&gt;SkeletonView&lt;/code&gt;&lt;/strong&gt; has some new tools.&lt;/p&gt; &#xA;&lt;p&gt;First, &lt;code&gt;UIView&lt;/code&gt; has available a property with his skeleton info:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var sk.skeletonTreeDescription: String&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides, you can activate the new &lt;strong&gt;debug mode&lt;/strong&gt;. You just add the environment variable &lt;code&gt;SKELETON_DEBUG&lt;/code&gt; and activate it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Juanpe/SkeletonView/main/Assets/debug_mode.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, when the skeleton appears, you can see the view hierarchy in the Xcode console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{ &#xA;  &#34;type&#34; : &#34;UIView&#34;, // UITableView, UILabel...&#xA;  &#34;isSkeletonable&#34; : true,&#xA;  &#34;reference&#34; : &#34;0x000000014751ce30&#34;,&#xA;  &#34;children&#34; : [&#xA;    {&#xA;      &#34;type&#34; : &#34;UIView&#34;,&#xA;      &#34;isSkeletonable&#34; : true,&#xA;      &#34;children&#34; : [ ... ],&#xA;      &#34;reference&#34; : &#34;0x000000014751cfa0&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported OS &amp;amp; SDK Versions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;tvOS 9.0+&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;❤️ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This is an open source project, so feel free to contribute. How?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open an &lt;a href=&#34;https://github.com/Juanpe/SkeletonView/issues/new&#34;&gt;issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Send feedback via &lt;a href=&#34;mailto://juanpecatalan.com&#34;&gt;email&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Propose your own fixes, suggestions and open a pull request with the changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/Juanpe/SkeletonView/graphs/contributors&#34;&gt;all contributors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information, please read the &lt;a href=&#34;https://github.com/Juanpe/SkeletonView/raw/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📢 Mentions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://iosdevweekly.com/issues/327#start&#34;&gt;iOS Dev Weekly #327&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/40/skeletonview-makes-loading-content-beautiful&#34;&gt;Hacking with Swift Articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.mybridge.co/swift-top-10-articles-for-the-past-month-v-nov-2017-dfed7861cd65&#34;&gt;Top 10 Swift Articles November&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.mybridge.co/30-amazing-ios-swift-libraries-for-the-past-year-v-2018-7cf15027eee9&#34;&gt;30 Amazing iOS Swift Libraries (v2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://digest.appcoda.com/issues/appcoda-weekly-issue-44-81899&#34;&gt;AppCoda Weekly #44&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://us11.campaign-archive.com/?u=cd1f3ed33c6527331d82107ba&amp;amp;id=48131a516d&#34;&gt;iOS Cookies Newsletter #103&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://andybargh.com/swiftdevelopments-113/&#34;&gt;Swift Developments Newsletter #113&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ios-goodies.com/post/167557280951/week-204&#34;&gt;iOS Goodies #204&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://digest.swiftweekly.com/issues/swift-weekly-issue-96-81759&#34;&gt;Swift Weekly #96&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cocoacontrols.com/controls/skeletonview&#34;&gt;CocoaControls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ios.libhunt.com/newsletter/74&#34;&gt;Awesome iOS Newsletter #74&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mAGpsQiy6so&#34;&gt;Swift News #36&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/flawless-app-stories/best-ios-articles-new-tools-more-fcbe673e10d&#34;&gt;Best iOS articles, new tools &amp;amp; more&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🏆 Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Open-source projects cannot live long without your help. If you find &lt;strong&gt;SkeletonView&lt;/strong&gt; is useful, please consider supporting this project by becoming a sponsor.&lt;/p&gt; &#xA;&lt;p&gt;Become a sponsor through &lt;a href=&#34;https://github.com/sponsors/Juanpe&#34;&gt;GitHub Sponsors&lt;/a&gt; &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👨🏻‍💻 Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.twitter.com/JuanpeCatalan&#34;&gt;Juanpe Catalán&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a class=&#34;bmc-button&#34; target=&#34;_blank&#34; href=&#34;https://www.buymeacoffee.com/CDou4xtIK&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy me a coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;span style=&#34;margin-left:5px&#34;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👮🏻 License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2017 Juanpe Catalán&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>