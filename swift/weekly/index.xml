<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-07T02:23:15Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yichengchen/clashX</title>
    <updated>2022-08-07T02:23:15Z</updated>
    <id>tag:github.com,2022-08-07:/yichengchen/clashX</id>
    <link href="https://github.com/yichengchen/clashX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Dreamacro/clash/raw/master/docs/logo.png&#34; alt=&#34;Clash&#34; width=&#34;200&#34;&gt; &lt;br&gt; ClashX &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p&gt;A rule based proxy For Mac base on &lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Clash&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ClashX 旨在提供一个简单轻量化的代理客户端，如果需要更多的定制化，可以考虑使用 &lt;a href=&#34;https://github.com/Fndroid/clash_for_windows_pkg/releases&#34;&gt;CFW Mac 版&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTTP/HTTPS and SOCKS protocol&lt;/li&gt; &#xA; &lt;li&gt;Surge like configuration&lt;/li&gt; &#xA; &lt;li&gt;GeoIP rule support&lt;/li&gt; &#xA; &lt;li&gt;Support Vmess/Shadowsocks/Socks5/Trojan&lt;/li&gt; &#xA; &lt;li&gt;Support for Netfilter TCP redirect&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can download from &lt;a href=&#34;https://github.com/yichengchen/clashX/releases&#34;&gt;Release&lt;/a&gt; page&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Download ClashX Pro With enhanced mode and Native Apple Silicon support at &lt;a href=&#34;https://install.appcenter.ms/users/clashx/apps/clashx-pro/distribution_groups/public&#34;&gt;AppCenter&lt;/a&gt; for free permanently.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure have python3 and golang installed in your computer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Golang&lt;/p&gt; &lt;pre&gt;&lt;code&gt;brew install golang&#xA;&#xA;or download from https://golang.org&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download deps&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bash install_dependency.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and run.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Config&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration directory is &lt;code&gt;$HOME/.config/clash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The default name of the configuration file is &lt;code&gt;config.yaml&lt;/code&gt;. You can use your custom config name and switch config in menu &lt;code&gt;Config&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Checkout &lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Clash&lt;/a&gt; or &lt;a href=&#34;https://github.com/Hackl0us/SS-Rule-Snippet/raw/master/LAZY_RULES/clash.yaml&#34;&gt;SS-Rule-Snippet for Clash&lt;/a&gt; or &lt;a href=&#34;https://lancellc.gitbook.io/clash/&#34;&gt;lancellc&#39;s gitbook&lt;/a&gt; for more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Advance Config&lt;/h2&gt; &#xA;&lt;h3&gt;Change the ports of ClashX&lt;/h3&gt; &#xA;&lt;p&gt;Please modify the &lt;code&gt;config.yaml&lt;/code&gt; file generated by ClashX, not the other config file you created or downloaded. The &lt;code&gt;General&lt;/code&gt; section settings in your custom config file would be ignored. Then relaunch ClashX to apply changes.&lt;/p&gt; &#xA;&lt;h3&gt;Change your status menu icon&lt;/h3&gt; &#xA;&lt;p&gt;Place your icon file in the &lt;code&gt;~/.config/clash/menuImage.png&lt;/code&gt; then restart ClashX&lt;/p&gt; &#xA;&lt;h3&gt;Change default system ignore list.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Download sample plist in the &lt;a href=&#34;https://raw.githubusercontent.com/yichengchen/clashX/master/proxyIgnoreList.plist&#34;&gt;Here&lt;/a&gt; and place in the&lt;/p&gt; &lt;pre&gt;&lt;code&gt;~/.config/clash/proxyIgnoreList.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the &lt;code&gt;proxyIgnoreList.plist&lt;/code&gt; to set up your own proxy ignore list&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;URL Schemes.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using url scheme to import remote config.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;clash://install-config?url=http%3A%2F%2Fexample.com&amp;amp;name=example&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using url scheme to reload current config.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;clash://update-config&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get process name&lt;/h3&gt; &#xA;&lt;p&gt;You can add the follow config in your config file, and set your proxy mode to rule. Then open the log via help menu in ClashX.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;script:&#xA;  code: |&#xA;    def main(ctx, metadata):&#xA;      # Log ProcessName&#xA;      ctx.log(&#39;Process Name: &#39; + ctx.resolve_process_name(metadata))&#xA;      return &#39;DIRECT&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Q: How to get shell command with external IP?&lt;br&gt; A: Click the clashX menu icon and then press &lt;code&gt;Option-Command-C&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;关闭ClashX的通知&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在系统设置中关闭 clashx 的推送权限&lt;/li&gt; &#xA; &lt;li&gt;执行&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;defaults write com.west2online.ClashX disableNoti -bool true&#xA;defaults write com.west2online.ClashXPro disableNoti -bool true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note：强烈不推荐这么做，这可能导致clashx的很多重要错误提醒无法显示。&lt;/p&gt; &#xA;&lt;h3&gt;全局快捷键&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;设置详情点击 &lt;a href=&#34;https://raw.githubusercontent.com/yichengchen/clashX/master/Shortcuts.md&#34;&gt;全局快捷键&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>scenee/FloatingPanel</title>
    <updated>2022-08-07T02:23:15Z</updated>
    <id>tag:github.com,2022-08-07:/scenee/FloatingPanel</id>
    <link href="https://github.com/scenee/FloatingPanel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A clean and easy-to-use floating panel UI component for iOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SCENEE/FloatingPanel&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SCENEE/FloatingPanel.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/FloatingPanel&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/FloatingPanel.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/FloatingPanel&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/FloatingPanel.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-5-orange.svg?style=flat&#34; alt=&#34;Swift 5&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FloatingPanel&lt;/h1&gt; &#xA;&lt;p&gt;FloatingPanel is a simple and easy-to-use UI component for a new interface introduced in Apple Maps, Shortcuts and Stocks app. The new interface displays the related contents and utilities in parallel as a user wants.&lt;/p&gt; &#xA;&lt;p&gt;📝&lt;a href=&#34;https://docs.scenee.com/documentation/floatingpanel&#34;&gt;Here&lt;/a&gt; is the API references for the latest version powered by &lt;a href=&#34;https://developer.apple.com/documentation/docc&#34;&gt;DocC&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SCENEE/FloatingPanel/raw/master/assets/maps.gif&#34; alt=&#34;Maps&#34;&gt; &lt;img src=&#34;https://github.com/SCENEE/FloatingPanel/raw/master/assets/stocks.gif&#34; alt=&#34;Stocks&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SCENEE/FloatingPanel/raw/master/assets/maps-landscape.gif&#34; alt=&#34;Maps(Landscape)&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#add-a-floating-panel-as-a-child-view-controller&#34;&gt;Add a floating panel as a child view controller&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#present-a-floating-panel-as-a-modality&#34;&gt;Present a floating panel as a modality&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#view-hierarchy&#34;&gt;View hierarchy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#showhide-a-floating-panel-in-a-view-with-your-view-hierarchy&#34;&gt;Show/Hide a floating panel in a view with your view hierarchy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#scale-the-content-view-when-the-surface-position-changes&#34;&gt;Scale the content view when the surface position changes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-the-layout-with-floatingpanellayout-protocol&#34;&gt;Customize the layout with &lt;code&gt;FloatingPanelLayout&lt;/code&gt; protocol&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#change-the-initial-layout&#34;&gt;Change the initial layout&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#update-your-panel-layout&#34;&gt;Update your panel layout&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#support-your-landscape-layout&#34;&gt;Support your landscape layout&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#use-the-intrinsic-size-of-a-content-in-your-panel-layout&#34;&gt;Use the intrinsic size of a content in your panel layout&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#specify-an-anchor-for-each-state-by-an-inset-of-the-floatingpanelcontrollerview-frame&#34;&gt;Specify an anchor for each state by an inset of the &lt;code&gt;FloatingPanelController.view&lt;/code&gt; frame&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#change-the-backdrop-alpha&#34;&gt;Change the backdrop alpha&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#using-custome-panel-states&#34;&gt;Using custome panel states&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-the-behavior-with-floatingpanelbehavior-protocol&#34;&gt;Customize the behavior with &lt;code&gt;FloatingPanelBehavior&lt;/code&gt; protocol&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#modify-your-floating-panels-interaction&#34;&gt;Modify your floating panel&#39;s interaction&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#activate-the-rubber-band-effect-on-panel-edges&#34;&gt;Activate the rubber-band effect on panel edges&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#manage-the-projection-of-a-pan-gesture-momentum&#34;&gt;Manage the projection of a pan gesture momentum&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#specify-the-panel-moves-boundary&#34;&gt;Specify the panel move&#39;s boundary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-the-surface-design&#34;&gt;Customize the surface design&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#modify-your-surface-appearance&#34;&gt;Modify your surface appearance&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#use-a-custom-grabber-handle&#34;&gt;Use a custom grabber handle&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-layout-of-the-grabber-handle&#34;&gt;Customize layout of the grabber handle&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-content-padding-from-surface-edges&#34;&gt;Customize content padding from surface edges&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-margins-of-the-surface-edges&#34;&gt;Customize margins of the surface edges&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#customize-gestures&#34;&gt;Customize gestures&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#suppress-the-panel-interaction&#34;&gt;Suppress the panel interaction&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#add-tap-gestures-to-the-surface-view&#34;&gt;Add tap gestures to the surface view&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#interrupt-the-delegate-methods-of-floatingpanelcontrollerpangesturerecognizer&#34;&gt;Interrupt the delegate methods of &lt;code&gt;FloatingPanelController.panGestureRecognizer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#create-an-additional-floating-panel-for-a-detail&#34;&gt;Create an additional floating panel for a detail&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#move-a-position-with-an-animation&#34;&gt;Move a position with an animation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#work-your-contents-together-with-a-floating-panel-behavior&#34;&gt;Work your contents together with a floating panel behavior&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#enabling-the-tap-to-dismiss-action-of-the-backdrop-view&#34;&gt;Enabling the tap-to-dismiss action of the backdrop view&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#notes&#34;&gt;Notes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#show-or-show-detail-segues-from-floatingpanelcontrollers-content-view-controller&#34;&gt;&#39;Show&#39; or &#39;Show Detail&#39; Segues from &lt;code&gt;FloatingPanelController&lt;/code&gt;&#39;s content view controller&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#uisearchcontroller-issue&#34;&gt;UISearchController issue&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#floatingpanelsurfaceviews-issue-on-ios-10&#34;&gt;FloatingPanelSurfaceView&#39;s issue on iOS 10&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#maintainer&#34;&gt;Maintainer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scenee/FloatingPanel/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Simple container view controller&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fluid behavior using numeric springing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Scroll view tracking&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Removal interaction&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi panel support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Modal presentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 4 positioning support(top, left, bottom, right)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 1 or more magnetic anchors(full, half, tip and more)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Layout support for all trait environments(i.e. Landscape orientation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Common UI elements: surface, backdrop and grabber handle&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Free from common issues of Auto Layout and gesture handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Compatible with Objective-C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples are here.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/tree/master/Examples/Maps&#34;&gt;Examples/Maps&lt;/a&gt; like Apple Maps.app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/tree/master/Examples/Stocks&#34;&gt;Examples/Stocks&lt;/a&gt; like Apple Stocks.app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/tree/master/Examples/Samples&#34;&gt;Examples/Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/tree/master/Examples/SamplesObjC&#34;&gt;Examples/SamplesObjC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;FloatingPanel is written in Swift 5.0+. Compatible with iOS 11.0+.&lt;/p&gt; &#xA;&lt;p&gt;The deployment is still iOS 10, but it is recommended to use this library on iOS 11+.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; You would like to use Swift 4.0. Please use FloatingPanel v1.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;FloatingPanel is available through &lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;FloatingPanel&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; FloatingPanel v1.7.0 or later requires CocoaPods v1.7.0+ for &lt;code&gt;swift_versions&lt;/code&gt; support.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;, add the following to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;scenee/FloatingPanel&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app&#34;&gt;this doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Add a floating panel as a child view controller&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit&#xA;import FloatingPanel&#xA;&#xA;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    var fpc: FloatingPanelController!&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        // Initialize a `FloatingPanelController` object.&#xA;        fpc = FloatingPanelController()&#xA;&#xA;        // Assign self as the delegate of the controller.&#xA;        fpc.delegate = self // Optional&#xA;&#xA;        // Set a content view controller.&#xA;        let contentVC = ContentViewController()&#xA;        fpc.set(contentViewController: contentVC)&#xA;&#xA;        // Track a scroll view(or the siblings) in the content view controller.&#xA;        fpc.track(scrollView: contentVC.tableView)&#xA;&#xA;        // Add and show the views managed by the `FloatingPanelController` object to self.view.&#xA;        fpc.addPanel(toParent: self)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Present a floating panel as a modality&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let fpc = FloatingPanelController()&#xA;let contentVC = ...&#xA;fpc.set(contentViewController: contentVC)&#xA;&#xA;fpc.isRemovalInteractionEnabled = true // Optional: Let it removable by a swipe-down&#xA;&#xA;self.present(fpc, animated: true, completion: nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can show a floating panel over UINavigationController from the container view controllers as a modality of &lt;code&gt;.overCurrentContext&lt;/code&gt; style.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; FloatingPanelController has the custom presentation controller. If you would like to customize the presentation/dismissal, please see &lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/raw/master/Sources/Transitioning.swift&#34;&gt;Transitioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;View hierarchy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;FloatingPanelController&lt;/code&gt; manages the views as the following view hierarchy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FloatingPanelController.view (FloatingPanelPassThroughView)&#xA; ├─ .backdropView (FloatingPanelBackdropView)&#xA; └─ .surfaceView (FloatingPanelSurfaceView)&#xA;    ├─ .containerView (UIView)&#xA;    │  └─ .contentView (FloatingPanelController.contentViewController.view)&#xA;    └─ .grabber (FloatingPanelGrabberView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Show/Hide a floating panel in a view with your view hierarchy&lt;/h3&gt; &#xA;&lt;p&gt;If you need more control over showing and hiding the floating panel, you can forgo the &lt;code&gt;addPanel&lt;/code&gt; and &lt;code&gt;removePanelFromParent&lt;/code&gt; methods. These methods are a convenience wrapper for &lt;strong&gt;FloatingPanel&lt;/strong&gt;&#39;s &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;hide&lt;/code&gt; methods along with some required setup.&lt;/p&gt; &#xA;&lt;p&gt;There are two ways to work with the &lt;code&gt;FloatingPanelController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add it to the hierarchy once and then call &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;hide&lt;/code&gt; methods to make it appear/disappear.&lt;/li&gt; &#xA; &lt;li&gt;Add it to the hierarchy when needed and remove afterwards.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The following example shows how to add the controller to your &lt;code&gt;UIViewController&lt;/code&gt; and how to remove it. Make sure that you never add the same &lt;code&gt;FloatingPanelController&lt;/code&gt; to the hierarchy before removing it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;self.&lt;/code&gt; prefix is not required, nor recommended. It&#39;s used here to make it clearer where do the functions used come from. &lt;code&gt;self&lt;/code&gt; is an instance of a custom UIViewController in your code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Add the floating panel view to the controller&#39;s view on top of other views.&#xA;self.view.addSubview(fpc.view)&#xA;&#xA;// REQUIRED. It makes the floating panel view have the same size as the controller&#39;s view.&#xA;fpc.view.frame = self.view.bounds&#xA;&#xA;// In addition, Auto Layout constraints are highly recommended.&#xA;// Constraint the fpc.view to all four edges of your controller&#39;s view.&#xA;// It makes the layout more robust on trait collection change.&#xA;fpc.view.translatesAutoresizingMaskIntoConstraints = false&#xA;NSLayoutConstraint.activate([&#xA;  fpc.view.topAnchor.constraint(equalTo: self.view.topAnchor, constant: 0.0),&#xA;  fpc.view.leftAnchor.constraint(equalTo: self.view.leftAnchor, constant: 0.0),&#xA;  fpc.view.rightAnchor.constraint(equalTo: self.view.rightAnchor, constant: 0.0),&#xA;  fpc.view.bottomAnchor.constraint(equalTo: self.view.bottomAnchor, constant: 0.0),&#xA;])&#xA;&#xA;// Add the floating panel controller to the controller hierarchy.&#xA;self.addChild(fpc)&#xA;&#xA;// Show the floating panel at the initial position defined in your `FloatingPanelLayout` object.&#xA;fpc.show(animated: true) {&#xA;    // Inform the floating panel controller that the transition to the controller hierarchy has completed.&#xA;    fpc.didMove(toParent: self)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you add the &lt;code&gt;FloatingPanelController&lt;/code&gt; as seen above, you can call &lt;code&gt;fpc.show(animated: true) { }&lt;/code&gt; to show the panel and &lt;code&gt;fpc.hide(animated: true) { }&lt;/code&gt; to hide it.&lt;/p&gt; &#xA;&lt;p&gt;To remove the &lt;code&gt;FloatingPanelController&lt;/code&gt; from the hierarchy, follow the example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Inform the panel controller that it will be removed from the hierarchy.&#xA;fpc.willMove(toParent: nil)&#xA;    &#xA;// Hide the floating panel.&#xA;fpc.hide(animated: true) {&#xA;    // Remove the floating panel view from your controller&#39;s view.&#xA;    fpc.view.removeFromSuperview()&#xA;    // Remove the floating panel controller from the controller hierarchy.&#xA;    fpc.removeFromParent()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scale the content view when the surface position changes&lt;/h3&gt; &#xA;&lt;p&gt;Specify the &lt;code&gt;contentMode&lt;/code&gt; to &lt;code&gt;.fitToBounds&lt;/code&gt; if the surface height fits the bounds of &lt;code&gt;FloatingPanelController.view&lt;/code&gt; when the surface position changes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.contentMode = .fitToBounds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, &lt;code&gt;FloatingPanelController&lt;/code&gt; fixes the content by the height of the top most position.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; In &lt;code&gt;.fitToBounds&lt;/code&gt; mode, the surface height changes as following a user interaction so that you have a responsibility to configure Auto Layout constrains not to break the layout of a content view by the elastic surface height.&lt;/p&gt; &#xA;&lt;h3&gt;Customize the layout with &lt;code&gt;FloatingPanelLayout&lt;/code&gt; protocol&lt;/h3&gt; &#xA;&lt;h4&gt;Change the initial layout&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    ... {&#xA;        fpc = FloatingPanelController(delegate: self)&#xA;        fpc.layout = MyFloatingPanelLayout()&#xA;    }&#xA;}&#xA;&#xA;class MyFloatingPanelLayout: FloatingPanelLayout {&#xA;    let position: FloatingPanelPosition = .bottom&#xA;    let initialState: FloatingPanelState = .tip&#xA;    var anchors: [FloatingPanelState: FloatingPanelLayoutAnchoring] {&#xA;        return [&#xA;            .full: FloatingPanelLayoutAnchor(absoluteInset: 16.0, edge: .top, referenceGuide: .safeArea),&#xA;            .half: FloatingPanelLayoutAnchor(fractionalInset: 0.5, edge: .bottom, referenceGuide: .safeArea),&#xA;            .tip: FloatingPanelLayoutAnchor(absoluteInset: 44.0, edge: .bottom, referenceGuide: .safeArea),&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update your panel layout&lt;/h3&gt; &#xA;&lt;p&gt;There are 2 ways to update the panel layout.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Manually set &lt;code&gt;FloatingPanelController.layout&lt;/code&gt; to the new layout object directly.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.layout = MyPanelLayout()&#xA;fpc.invalidateLayout() // If needed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you already set the &lt;code&gt;delegate&lt;/code&gt; property of your &lt;code&gt;FloatingPanelController&lt;/code&gt; instance, &lt;code&gt;invalidateLayout()&lt;/code&gt; overrides the layout object of &lt;code&gt;FloatingPanelController&lt;/code&gt; with one returned by the delegate object.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Returns an appropriate layout object in one of 2 &lt;code&gt;floatingPanel(_:layoutFor:)&lt;/code&gt; delegates.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    ...&#xA;    func floatingPanel(_ vc: FloatingPanelController, layoutFor newCollection: UITraitCollection) -&amp;gt; FloatingPanelLayout {&#xA;        return MyFloatingPanelLayout()&#xA;    }&#xA;&#xA;    // OR&#xA;    func floatingPanel(_ vc: FloatingPanelController, layoutFor size: CGSize) -&amp;gt; FloatingPanelLayout {&#xA;        return MyFloatingPanelLayout()&#xA;    } &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Support your landscape layout&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    ...&#xA;    func floatingPanel(_ vc: FloatingPanelController, layoutFor newCollection: UITraitCollection) -&amp;gt; FloatingPanelLayout {&#xA;        return (newCollection.verticalSizeClass == .compact) ? LandscapePanelLayout() : FloatingPanelBottomLayout()&#xA;    }&#xA;}&#xA;&#xA;class LandscapePanelLayout: FloatingPanelLayout {&#xA;    let position: FloatingPanelPosition = .bottom&#xA;    let initialState: FloatingPanelState = .tip&#xA;    var anchors: [FloatingPanelState: FloatingPanelLayoutAnchoring] {&#xA;        return [&#xA;            .full: FloatingPanelLayoutAnchor(absoluteInset: 16.0, edge: .top, referenceGuide: .safeArea),&#xA;            .tip: FloatingPanelLayoutAnchor(absoluteInset: 69.0, edge: .bottom, referenceGuide: .safeArea),&#xA;        ]&#xA;    }&#xA;    func prepareLayout(surfaceView: UIView, in view: UIView) -&amp;gt; [NSLayoutConstraint] {&#xA;        return [&#xA;            surfaceView.leftAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leftAnchor, constant: 8.0),&#xA;            surfaceView.widthAnchor.constraint(equalToConstant: 291),&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use the intrinsic size of a content in your panel layout&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Lay out your content View with the intrinsic height size. For example, see &#34;Detail View Controller scene&#34;/&#34;Intrinsic View Controller scene&#34; of &lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/raw/master/Examples/Samples/Sources/Base.lproj/Main.storyboard&#34;&gt;Main.storyboard&lt;/a&gt;. The &#39;Stack View.bottom&#39; constraint determines the intrinsic height.&lt;/li&gt; &#xA; &lt;li&gt;Specify layout anchors using &lt;code&gt;FloatingPanelIntrinsicLayoutAnchor&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class IntrinsicPanelLayout: FloatingPanelLayout {&#xA;    let position: FloatingPanelPosition = .bottom&#xA;    let initialState: FloatingPanelState = .full&#xA;    var anchors: [FloatingPanelState: FloatingPanelLayoutAnchoring] {&#xA;        return [&#xA;            .full: FloatingPanelIntrinsicLayoutAnchor(absoluteOffset: 0, referenceGuide: .safeArea),&#xA;            .half: FloatingPanelIntrinsicLayoutAnchor(fractionalOffset: 0.5, referenceGuide: .safeArea),&#xA;        ]&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; &lt;code&gt;FloatingPanelIntrinsicLayout&lt;/code&gt; is deprecated on v1.&lt;/p&gt; &#xA;&lt;h4&gt;Specify an anchor for each state by an inset of the &lt;code&gt;FloatingPanelController.view&lt;/code&gt; frame&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;.superview&lt;/code&gt; reference guide in your anchors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyFullScreenLayout: FloatingPanelLayout {&#xA;    ...&#xA;    var anchors: [FloatingPanelState: FloatingPanelLayoutAnchoring] {&#xA;        return [&#xA;            .full: FloatingPanelLayoutAnchor(absoluteInset: 16.0, edge: .top, referenceGuide: .superview),&#xA;            .half: FloatingPanelLayoutAnchor(fractionalInset: 0.5, edge: .bottom, referenceGuide: .superview),&#xA;            .tip: FloatingPanelLayoutAnchor(absoluteInset: 44.0, edge: .bottom, referenceGuide: .superview),&#xA;        ]&#xA;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; &lt;code&gt;FloatingPanelFullScreenLayout&lt;/code&gt; is deprecated on v1.&lt;/p&gt; &#xA;&lt;h4&gt;Change the backdrop alpha&lt;/h4&gt; &#xA;&lt;p&gt;You can change the backdrop alpha by &lt;code&gt;FloatingPanelLayout.backdropAlpha(for:)&lt;/code&gt; for each state(&lt;code&gt;.full&lt;/code&gt;, &lt;code&gt;.half&lt;/code&gt; and &lt;code&gt;.tip&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For instance, if a panel seems like the backdrop view isn&#39;t there on &lt;code&gt;.half&lt;/code&gt; state, it&#39;s time to implement the backdropAlpha API and return a value for the state as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyPanelLayout: FloatingPanelLayout {&#xA;    func backdropAlpha(for state: FloatingPanelState) -&amp;gt; CGFloat {&#xA;        switch state {&#xA;        case .full, .half: return 0.3&#xA;        default: return 0.0&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using custome panel states&lt;/h4&gt; &#xA;&lt;p&gt;You&#39;re able to define custom panel states and use them as the following example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension FloatingPanelState {&#xA;    static let lastQuart: FloatingPanelState = FloatingPanelState(rawValue: &#34;lastQuart&#34;, order: 750)&#xA;    static let firstQuart: FloatingPanelState = FloatingPanelState(rawValue: &#34;firstQuart&#34;, order: 250)&#xA;}&#xA;&#xA;class FloatingPanelLayoutWithCustomState: FloatingPanelBottomLayout {&#xA;    override var anchors: [FloatingPanelState: FloatingPanelLayoutAnchoring] {&#xA;        return [&#xA;            .full: FloatingPanelLayoutAnchor(absoluteInset: 0.0, edge: .top, referenceGuide: .safeArea),&#xA;            .lastQuart: FloatingPanelLayoutAnchor(fractionalInset: 0.75, edge: .bottom, referenceGuide: .safeArea),&#xA;            .half: FloatingPanelLayoutAnchor(fractionalInset: 0.5, edge: .bottom, referenceGuide: .safeArea),&#xA;            .firstQuart: FloatingPanelLayoutAnchor(fractionalInset: 0.25, edge: .bottom, referenceGuide: .safeArea),&#xA;            .tip: FloatingPanelLayoutAnchor(absoluteInset: 20.0, edge: .bottom, referenceGuide: .safeArea),&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize the behavior with &lt;code&gt;FloatingPanelBehavior&lt;/code&gt; protocol&lt;/h3&gt; &#xA;&lt;h4&gt;Modify your floating panel&#39;s interaction&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    ...&#xA;    func viewDidLoad() {&#xA;        ...&#xA;        fpc.behavior =  CustomPanelBehavior()&#xA;    }&#xA;}&#xA;&#xA;class CustomPanelBehavior: FloatingPanelBehavior {&#xA;    let springDecelerationRate = UIScrollView.DecelerationRate.fast.rawValue + 0.02&#xA;    let springResponseTime = 0.4&#xA;    func shouldProjectMomentum(_ fpc: FloatingPanelController, to proposedTargetPosition: FloatingPanelState) -&amp;gt; Bool {&#xA;        return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; &lt;code&gt;floatingPanel(_ vc:behaviorFor:)&lt;/code&gt; is deprecated on v1.&lt;/p&gt; &#xA;&lt;h4&gt;Activate the rubber-band effect on panel edges&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyPanelBehavior: FloatingPanelBehavior {&#xA;    ...&#xA;    func allowsRubberBanding(for edge: UIRectEdge) -&amp;gt; Bool {&#xA;        return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manage the projection of a pan gesture momentum&lt;/h4&gt; &#xA;&lt;p&gt;This allows full projectional panel behavior. For example, a user can swipe up a panel from tip to full nearby the tip position.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyPanelBehavior: FloatingPanelBehavior {&#xA;    ...&#xA;    func shouldProjectMomentum(_ fpc: FloatingPanelController, to proposedTargetPosition: FloatingPanelPosition) -&amp;gt; Bool {&#xA;        return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specify the panel move&#39;s boundary&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FloatingPanelController.surfaceLocation&lt;/code&gt; in &lt;code&gt;floatingPanelDidMove(_:)&lt;/code&gt; delegate method behaves like &lt;code&gt;UIScrollView.contentOffset&lt;/code&gt; in &lt;code&gt;scrollViewDidScroll(_:)&lt;/code&gt;. As a result, you can specify the boundary of a panel move as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func floatingPanelDidMove(_ vc: FloatingPanelController) {&#xA;    if vc.isAttracting == false {&#xA;        let loc = vc.surfaceLocation&#xA;        let minY = vc.surfaceLocation(for: .full).y - 6.0&#xA;        let maxY = vc.surfaceLocation(for: .tip).y + 6.0&#xA;        vc.surfaceLocation = CGPoint(x: loc.x, y: min(max(loc.y, minY), maxY))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; &lt;code&gt;{top,bottom}InteractionBuffer&lt;/code&gt; property is removed from &lt;code&gt;FloatingPanelLayout&lt;/code&gt; since v2.&lt;/p&gt; &#xA;&lt;h3&gt;Customize the surface design&lt;/h3&gt; &#xA;&lt;h4&gt;Modify your surface appearance&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a new appearance.&#xA;let appearance = SurfaceAppearance()&#xA;&#xA;// Define shadows&#xA;let shadow = SurfaceAppearance.Shadow()&#xA;shadow.color = UIColor.black&#xA;shadow.offset = CGSize(width: 0, height: 16)&#xA;shadow.radius = 16&#xA;shadow.spread = 8&#xA;appearance.shadows = [shadow]&#xA;&#xA;// Define corner radius and background color&#xA;appearance.cornerRadius = 8.0&#xA;appearance.backgroundColor = .clear&#xA;&#xA;// Set the new appearance&#xA;fpc.surfaceView.appearance = appearance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use a custom grabber handle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let myGrabberHandleView = MyGrabberHandleView()&#xA;fpc.surfaceView.grabberHandle.isHidden = true&#xA;fpc.surfaceView.addSubview(myGrabberHandleView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customize layout of the grabber handle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.surfaceView.grabberHandlePadding = 10.0&#xA;fpc.surfaceView.grabberHandleSize = .init(width: 44.0, height: 12.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;✏&lt;/span&gt; Note that &lt;code&gt;grabberHandleSize&lt;/code&gt; width and height are reversed in the left/right position.&lt;/p&gt; &#xA;&lt;h4&gt;Customize content padding from surface edges&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.surfaceView.contentPadding = .init(top: 20, left: 20, bottom: 20, right: 20)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customize margins of the surface edges&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.surfaceView.containerMargins = .init(top: 20.0, left: 16.0, bottom: 16.0, right: 16.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The feature can be used for these 2 kind panels&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Facebook/Slack-like panel whose surface top edge is separated from the grabber handle.&lt;/li&gt; &#xA; &lt;li&gt;iOS native panel to display AirPods information, for example.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Customize gestures&lt;/h3&gt; &#xA;&lt;h4&gt;Suppress the panel interaction&lt;/h4&gt; &#xA;&lt;p&gt;You can disable the pan gesture recognizer directly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.panGestureRecognizer.isEnabled = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use this &lt;code&gt;FloatingPanelControllerDelegate&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func floatingPanelShouldBeginDragging(_ vc: FloatingPanelController) -&amp;gt; Bool {&#xA;    return aCondition ?  false : true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add tap gestures to the surface view&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLoad() {&#xA;    ...&#xA;    let surfaceTapGesture = UITapGestureRecognizer(target: self, action: #selector(handleSurface(tapGesture:)))&#xA;    fpc.surfaceView.addGestureRecognizer(surfaceTapGesture)&#xA;    surfaceTapGesture.isEnabled = (fpc.position == .tip)&#xA;}&#xA;&#xA;// Enable `surfaceTapGesture` only at `tip` state&#xA;func floatingPanelDidChangeState(_ vc: FloatingPanelController) {&#xA;    surfaceTapGesture.isEnabled = (vc.position == .tip)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Interrupt the delegate methods of &lt;code&gt;FloatingPanelController.panGestureRecognizer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you are set &lt;code&gt;FloatingPanelController.panGestureRecognizer.delegateProxy&lt;/code&gt; to an object adopting &lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt;, it overrides delegate methods of the pan gesture recognizer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyGestureRecognizerDelegate: UIGestureRecognizerDelegate {&#xA;    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRequireFailureOf otherGestureRecognizer: UIGestureRecognizer) -&amp;gt; Bool {&#xA;        return false&#xA;    }&#xA;}&#xA;&#xA;class ViewController: UIViewController {&#xA;    let myGestureDelegate = MyGestureRecognizerDelegate()&#xA;&#xA;    func setUpFpc() {&#xA;        ....&#xA;        fpc.panGestureRecognizer.delegateProxy = myGestureDelegate&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create an additional floating panel for a detail&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLoad() {&#xA;    // Setup Search panel&#xA;    self.searchPanelVC = FloatingPanelController()&#xA;&#xA;    let searchVC = SearchViewController()&#xA;    self.searchPanelVC.set(contentViewController: searchVC)&#xA;    self.searchPanelVC.track(scrollView: contentVC.tableView)&#xA;&#xA;    self.searchPanelVC.addPanel(toParent: self)&#xA;&#xA;    // Setup Detail panel&#xA;    self.detailPanelVC = FloatingPanelController()&#xA;&#xA;    let contentVC = ContentViewController()&#xA;    self.detailPanelVC.set(contentViewController: contentVC)&#xA;    self.detailPanelVC.track(scrollView: contentVC.scrollView)&#xA;&#xA;    self.detailPanelVC.addPanel(toParent: self)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Move a position with an animation&lt;/h3&gt; &#xA;&lt;p&gt;In the following example, I move a floating panel to full or half position while opening or closing a search bar like Apple Maps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {&#xA;    ...&#xA;    fpc.move(to: .half, animated: true)&#xA;}&#xA;&#xA;func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {&#xA;    ...&#xA;    fpc.move(to: .full, animated: true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a view animation to move a panel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;UIView.animate(withDuration: 0.25) {&#xA;    self.fpc.move(to: .half, animated: false)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Work your contents together with a floating panel behavior&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController, FloatingPanelControllerDelegate {&#xA;    ...&#xA;    func floatingPanelWillBeginDragging(_ vc: FloatingPanelController) {&#xA;        if vc.position == .full {&#xA;            searchVC.searchBar.showsCancelButton = false&#xA;            searchVC.searchBar.resignFirstResponder()&#xA;        }&#xA;    }&#xA;&#xA;    func floatingPanelWillEndDragging(_ vc: FloatingPanelController, withVelocity velocity: CGPoint, targetState: UnsafeMutablePointer&amp;lt;FloatingPanelState&amp;gt;) {&#xA;        if targetState.pointee != .full {&#xA;            searchVC.hideHeader()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enabling the tap-to-dismiss action of the backdrop view&lt;/h3&gt; &#xA;&lt;p&gt;The tap-to-dismiss action is disabled by default. So it needs to be enabled as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;fpc.backdropView.dismissalTapGestureRecognizer.isEnabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;h3&gt;&#39;Show&#39; or &#39;Show Detail&#39; Segues from &lt;code&gt;FloatingPanelController&lt;/code&gt;&#39;s content view controller&lt;/h3&gt; &#xA;&lt;p&gt;&#39;Show&#39; or &#39;Show Detail&#39; segues from a content view controller will be managed by a view controller(hereinafter called &#39;master VC&#39;) adding a floating panel. Because a floating panel is just a subview of the master VC(except for modality).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FloatingPanelController&lt;/code&gt; has no way to manage a stack of view controllers like &lt;code&gt;UINavigationController&lt;/code&gt;. If so, it would be so complicated and the interface will become &lt;code&gt;UINavigationController&lt;/code&gt;. This component should not have the responsibility to manage the stack.&lt;/p&gt; &#xA;&lt;p&gt;By the way, a content view controller can present a view controller modally with &lt;code&gt;present(_:animated:completion:)&lt;/code&gt; or &#39;Present Modally&#39; segue.&lt;/p&gt; &#xA;&lt;p&gt;However, sometimes you want to show a destination view controller of &#39;Show&#39; or &#39;Show Detail&#39; segue with another floating panel. It&#39;s possible to override &lt;code&gt;show(_:sender)&lt;/code&gt; of the master VC!&lt;/p&gt; &#xA;&lt;p&gt;Here is an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController {&#xA;    var fpc: FloatingPanelController!&#xA;    var secondFpc: FloatingPanelController!&#xA;&#xA;    ...&#xA;    override func show(_ vc: UIViewController, sender: Any?) {&#xA;        secondFpc = FloatingPanelController()&#xA;&#xA;        secondFpc.set(contentViewController: vc)&#xA;&#xA;        secondFpc.addPanel(toParent: self)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;FloatingPanelController&lt;/code&gt; object proxies an action for &lt;code&gt;show(_:sender)&lt;/code&gt; to the master VC. That&#39;s why the master VC can handle a destination view controller of a &#39;Show&#39; or &#39;Show Detail&#39; segue and you can hook &lt;code&gt;show(_:sender)&lt;/code&gt; to show a secondary floating panel set the destination view controller to the content.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a great way to decouple between a floating panel and the content VC.&lt;/p&gt; &#xA;&lt;h3&gt;UISearchController issue&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;UISearchController&lt;/code&gt; isn&#39;t able to be used with &lt;code&gt;FloatingPanelController&lt;/code&gt; by the system design.&lt;/p&gt; &#xA;&lt;p&gt;Because &lt;code&gt;UISearchController&lt;/code&gt; automatically presents itself modally when a user interacts with the search bar, and then it swaps the superview of the search bar to the view managed by itself while it displays. As a result, &lt;code&gt;FloatingPanelController&lt;/code&gt; can&#39;t control the search bar when it&#39;s active, as you can see from &lt;a href=&#34;https://github.com/SCENEE/FloatingPanel/issues/248#issuecomment-521263831&#34;&gt;the screen shot&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;FloatingPanelSurfaceView&#39;s issue on iOS 10&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On iOS 10, &lt;code&gt;FloatingPanelSurfaceView.cornerRadius&lt;/code&gt; isn&#39;t not automatically masked with the top rounded corners because of &lt;code&gt;UIVisualEffectView&lt;/code&gt; issue. See &lt;a href=&#34;https://forums.developer.apple.com/thread/50854&#34;&gt;https://forums.developer.apple.com/thread/50854&lt;/a&gt;. So you need to draw top rounding corners of your content. Here is an example in Examples/Maps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;override func viewDidLayoutSubviews() {&#xA;    super.viewDidLayoutSubviews()&#xA;    if #available(iOS 10, *) {&#xA;        visualEffectView.layer.cornerRadius = 9.0&#xA;        visualEffectView.clipsToBounds = true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you sets clear color to &lt;code&gt;FloatingPanelSurfaceView.backgroundColor&lt;/code&gt;, please note the bottom overflow of your content on bouncing at full position. To prevent it, you need to expand your content. For example, See Example/Maps App&#39;s Auto Layout settings of &lt;code&gt;UIVisualEffectView&lt;/code&gt; in Main.storyboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainer&lt;/h2&gt; &#xA;&lt;p&gt;Shin Yamamoto &lt;a href=&#34;mailto:shin@scenee.com&#34;&gt;shin@scenee.com&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/scenee&#34;&gt;@scenee&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;FloatingPanel is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hackiftekhar/IQKeyboardManager</title>
    <updated>2022-08-07T02:23:15Z</updated>
    <id>tag:github.com,2022-08-07:/hackiftekhar/IQKeyboardManager</id>
    <link href="https://github.com/hackiftekhar/IQKeyboardManager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Codeless drop-in universal library allows to prevent issues of keyboard sliding up and cover UITextField/UITextView. Neither need to write any code nor any setup required and much more.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Demo/Resources/icon.png&#34; alt=&#34;Icon&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;IQKeyboardManager&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/hackiftekhar/IQKeyboardManager.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hackiftekhar/IQKeyboardManager&#34;&gt;&lt;img src=&#34;https://travis-ci.org/hackiftekhar/IQKeyboardManager.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;While developing iOS apps, we often run into issues where the iPhone keyboard slides up and covers the &lt;code&gt;UITextField/UITextView&lt;/code&gt;. &lt;code&gt;IQKeyboardManager&lt;/code&gt; allows you to prevent this issue of keyboard sliding up and covering &lt;code&gt;UITextField/UITextView&lt;/code&gt; without needing you to write any code or make any additional setup. To use &lt;code&gt;IQKeyboardManager&lt;/code&gt; you simply need to add source files to your project.&lt;/p&gt; &#xA;&lt;h4&gt;Key Features&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;**CODELESS**, Zero Lines of Code&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Works Automatically&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More UIScrollView&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More Subclasses&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More Manual Work&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;No More #imports&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;IQKeyboardManager&lt;/code&gt; works on all orientations, and with the toolbar. It also has nice optional features allowing you to customize the distance from the text field, behaviour of previous, next and done buttons in the keyboard toolbar, play sound when the user navigates through the form and more.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://youtu.be/6nhLw6hju2A&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManagerScreenshot.png&#34; alt=&#34;IQKeyboardManager&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://youtu.be/6nhLw6hju2A&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManagerSettings.png&#34; alt=&#34;Settings&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;GIF animation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://youtu.be/6nhLw6hju2A&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManager.gif&#34; alt=&#34;IQKeyboardManager&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://youtu.be/WAYc2Qj-OQg&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/WAYc2Qj-OQg/0.jpg&#34; alt=&#34;IQKeyboardManager Demo Video&#34; width=&#34;480&#34; height=&#34;360&#34; border=&#34;10&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial video by @rebeloper (&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/issues/1135&#34;&gt;#1135&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;@rebeloper demonstrated two videos on how to implement &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; at it&#39;s core:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL_csAAO9PQ8aTL87XnueOXi3RpWE2m_8v&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Screenshot/ThirdPartyYoutubeTutorial.jpg&#34; alt=&#34;Youtube Tutorial Playlist&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL_csAAO9PQ8aTL87XnueOXi3RpWE2m_8v&#34;&gt;https://www.youtube.com/playlist?list=PL_csAAO9PQ8aTL87XnueOXi3RpWE2m_8v&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;If you&#39;re planning to build SDK/library/framework and want to handle UITextField/UITextView with IQKeyboardManager then you&#39;re totally going the wrong way.&lt;/strong&gt; I would never suggest to add &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; as &lt;strong&gt;dependency/adding/shipping&lt;/strong&gt; with any third-party library. Instead of adding &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; you should implement your own solution to achieve same kind of results. &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; is totally designed for projects to help developers for their convenience, it&#39;s not designed for &lt;strong&gt;adding/dependency/shipping&lt;/strong&gt; with any &lt;strong&gt;third-party library&lt;/strong&gt;, because &lt;strong&gt;doing this could block adoption by other developers for their projects as well (who are not using IQKeyboardManager and have implemented their custom solution to handle UITextField/UITextView in the project).&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;If &lt;strong&gt;IQKeyboardManager&lt;/strong&gt; conflicts with other &lt;strong&gt;third-party library&lt;/strong&gt;, then it&#39;s &lt;strong&gt;developer responsibility&lt;/strong&gt; to &lt;strong&gt;enable/disable IQKeyboardManager&lt;/strong&gt; when &lt;strong&gt;presenting/dismissing&lt;/strong&gt; third-party library UI. Third-party libraries are not responsible to handle IQKeyboardManager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-iOS-blue.svg?style=fla&#34; alt=&#34;Platform iOS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Minimum iOS Target&lt;/th&gt; &#xA;   &lt;th&gt;Minimum Xcode Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IQKeyboardManager&lt;/td&gt; &#xA;   &lt;td&gt;Obj-C&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8.0&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IQKeyboardManagerSwift&lt;/td&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8.0&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Demo Project&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Swift versions support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Xcode&lt;/th&gt; &#xA;   &lt;th&gt;IQKeyboardManagerSwift&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.1, 5.0, 4.2, 4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 6.5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.0,4.2, 4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;10.2&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 6.2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.2, 4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;10.0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;= 6.0.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4.0, 3.2, 3.0&lt;/td&gt; &#xA;   &lt;td&gt;9.0&lt;/td&gt; &#xA;   &lt;td&gt;5.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h4&gt;Installation with CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoadocs.org/docsets/IQKeyboardManager&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/IQKeyboardManager.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Objective-C):&lt;/strong&gt;&lt;/em&gt; IQKeyboardManager is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile: (&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/issues/9&#34;&gt;#9&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IQKeyboardManager&#39; #iOS8 and later&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Swift):&lt;/strong&gt;&lt;/em&gt; IQKeyboardManagerSwift is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following line to your Podfile: (&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/issues/236&#34;&gt;#236&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Swift 5.1, 5.0, 4.2, 4.0, 3.2, 3.0 (Xcode 11)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IQKeyboardManagerSwift&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Or you can choose the version you need based on Swift support table from &lt;a href=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/README.md#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;IQKeyboardManagerSwift&#39;, &#39;6.3.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In AppDelegate.swift, just import IQKeyboardManagerSwift framework and enable IQKeyboardManager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import IQKeyboardManagerSwift&#xA;&#xA;@UIApplicationMain&#xA;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;&#xA;    var window: UIWindow?&#xA;&#xA;    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;&#xA;      IQKeyboardManager.shared.enable = true&#xA;&#xA;      return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installation with Carthage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate &lt;code&gt;IQKeyboardManger&lt;/code&gt; or &lt;code&gt;IQKeyboardManagerSwift&lt;/code&gt; into your Xcode project using Carthage, add the following line to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;hackiftekhar/IQKeyboardManager&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage&lt;/code&gt; to build the frameworks and drag the appropriate framework (&lt;code&gt;IQKeyboardManager.framework&lt;/code&gt; or &lt;code&gt;IQKeyboardManagerSwift.framework&lt;/code&gt;) into your Xcode project based on your need. Make sure to add only one framework and not both.&lt;/p&gt; &#xA;&lt;h4&gt;Installation with Source Code&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/hackiftekhar/iqkeyboardmanager.svg?sanitize=true&#34; alt=&#34;Github tag&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Objective-C):&lt;/strong&gt;&lt;/em&gt; Just &lt;em&gt;&lt;strong&gt;drag and drop&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;IQKeyboardManager&lt;/code&gt; directory from demo project to your project. That&#39;s it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;IQKeyboardManager (Swift):&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;&lt;strong&gt;Drag and drop&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;IQKeyboardManagerSwift&lt;/code&gt; directory from demo project to your project&lt;/p&gt; &#xA;&lt;p&gt;In AppDelegate.swift, just enable IQKeyboardManager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@UIApplicationMain&#xA;class AppDelegate: UIResponder, UIApplicationDelegate {&#xA;&#xA;    var window: UIWindow?&#xA;&#xA;    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&amp;gt; Bool {&#xA;&#xA;      IQKeyboardManager.shared.enable = true&#xA;&#xA;      return true&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installation with Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager(SPM)&lt;/a&gt; is Apple&#39;s dependency manager tool. It is now supported in Xcode 11. So it can be used in all appleOS types of projects. It can be used alongside other tools like CocoaPods and Carthage as well.&lt;/p&gt; &#xA;&lt;p&gt;To install IQKeyboardManager package into your packages, add a reference to IQKeyboardManager and a targeting release version in the dependencies section in &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;YOUR_PROJECT_NAME&#34;,&#xA;    products: [],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/hackiftekhar/IQKeyboardManager.git&#34;, from: &#34;6.5.0&#34;)&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install IQKeyboardManager package via Xcode&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency...&lt;/li&gt; &#xA; &lt;li&gt;Then search for &lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager.git&#34;&gt;https://github.com/hackiftekhar/IQKeyboardManager.git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And choose the version you want&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Migration Guide&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/IQKeyboardManager-6.0.0-Migration-Guide&#34;&gt;IQKeyboardManager 6.0.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/Known-Issues&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/Manual-Management&#34;&gt;Manual Management Tweaks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager/wiki/Properties-&amp;amp;-Functions&#34;&gt;Properties and functions usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flow Diagram&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Screenshot/IQKeyboardManagerFlowDiagram.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/master/Screenshot/IQKeyboardManagerFlowDiagram.jpg&#34; alt=&#34;IQKeyboardManager CFD&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to see detailed Flow diagram then check &lt;a href=&#34;https://raw.githubusercontent.com/hackiftekhar/IQKeyboardManager/v3.3.0/Screenshot/IQKeyboardManagerCFD.jpg&#34;&gt;Detailed Flow Diagram&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Any contribution is more than welcome! You can contribute through pull requests and issues on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to contact me, email at: &lt;a href=&#34;mailto:hack.iftekhar@gmail.com&#34;&gt;hack.iftekhar@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>