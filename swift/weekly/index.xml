<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:25:32Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ReactiveX/RxSwift</title>
    <updated>2022-06-02T02:25:32Z</updated>
    <id>tag:github.com,2022-06-02:/ReactiveX/RxSwift</id>
    <link href="https://github.com/ReactiveX/RxSwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reactive Programming in Swift&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/RxSwift_Logo.png&#34; width=&#34;35%&#34; alt=&#34;RxSwift Logo&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/ReactiveX/RxSwift/goto&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/ReactiveX/RxSwift/workflows/RxSwift/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-333333.svg?sanitize=true&#34; alt=&#34;Supported Platforms: iOS, macOS, tvOS, watchOS &amp;amp; Linux&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://cocoapods.org/pods/RxSwift&#34; alt=&#34;RxSwift on CocoaPods&#34; title=&#34;RxSwift on CocoaPods&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/RxSwift.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34; alt=&#34;RxSwift on Carthage&#34; title=&#34;RxSwift on Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34; alt=&#34;RxSwift on Swift Package Manager&#34; title=&#34;RxSwift on Swift Package Manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift%20Package%20Manager-compatible-brightgreen.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Rx is a &lt;a href=&#34;https://youtu.be/looJcaeboBY&#34;&gt;generic abstraction of computation&lt;/a&gt; expressed through &lt;code&gt;Observable&amp;lt;Element&amp;gt;&lt;/code&gt; interface, which lets you broadcast and subscribe to values and other events from an &lt;code&gt;Observable&lt;/code&gt; stream.&lt;/p&gt; &#xA;&lt;p&gt;RxSwift is the Swift-specific implementation of the &lt;a href=&#34;http://reactivex.io&#34;&gt;Reactive Extensions&lt;/a&gt; standard.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/example.png&#34; width=&#34;55%&#34; alt=&#34;RxSwift Observable Example of a price constantly changing and updating the app&#39;s UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;While this version aims to stay true to the original spirit and naming conventions of Rx, this projects also aims to provide a true Swift-first API for Rx APIs.&lt;/p&gt; &#xA;&lt;p&gt;Cross platform documentation can be found on &lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Like other Rx implementation, RxSwift&#39;s intention is to enable easy composition of asynchronous operations and streams of data in the form of &lt;code&gt;Observable&lt;/code&gt; objects and a suite of methods to transform and compose these pieces of asynchronous work.&lt;/p&gt; &#xA;&lt;p&gt;KVO observation, async operations, UI Events and other streams of data are all unified under &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#observables-aka-sequences&#34;&gt;abstraction of sequence&lt;/a&gt;. This is the reason why Rx is so simple, elegant and powerful.&lt;/p&gt; &#xA;&lt;h2&gt;I came here because I want to ...&lt;/h2&gt; &#xA;&lt;h6&gt;... understand&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Why.md&#34;&gt;why use rx?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md&#34;&gt;the basics, getting started with RxSwift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Traits.md&#34;&gt;traits&lt;/a&gt; - what are &lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Completable&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Driver&lt;/code&gt;, and &lt;code&gt;ControlProperty&lt;/code&gt; ... and why do they exist?&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/UnitTests.md&#34;&gt;testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Tips.md&#34;&gt;tips and common errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/GettingStarted.md#debugging&#34;&gt;debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/MathBehindRx.md&#34;&gt;the math behind Rx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/HotAndColdObservables.md&#34;&gt;what are hot and cold observable sequences?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... install&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrate RxSwift/RxCocoa with my app. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/#installation&#34;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... hack around&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with the example app. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/ExampleApp.md&#34;&gt;Running Example App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;with operators in playgrounds. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/Playgrounds.md&#34;&gt;Playgrounds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... interact&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All of this is great, but it would be nice to talk with other people using RxSwift and exchange experiences. &lt;br&gt;&lt;a href=&#34;http://slack.rxswift.org&#34;&gt;Join Slack Channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Report a problem using the library. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/.github/ISSUE_TEMPLATE.md&#34;&gt;Open an Issue With Bug Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Request a new feature. &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/NewFeatureRequestTemplate.md&#34;&gt;Open an Issue With Feature Request Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Help out &lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/CONTRIBUTING.md&#34;&gt;Check out contribution guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... compare&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/Documentation/ComparisonWithOtherLibraries.md&#34;&gt;with Combine and ReactiveSwift&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;... understand the structure&lt;/h6&gt; &#xA;&lt;p&gt;RxSwift is as compositional as the asynchronous work it drives. The core unit is RxSwift itself, while other dependencies can be added for UI Work, testing, and more.&lt;/p&gt; &#xA;&lt;p&gt;It comprises five separate components depending on each other in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;┌──────────────┐    ┌──────────────┐&#xA;│   RxCocoa    ├────▶   RxRelay    │&#xA;└───────┬──────┘    └──────┬───────┘&#xA;        │                  │        &#xA;┌───────▼──────────────────▼───────┐&#xA;│             RxSwift              │&#xA;└───────▲──────────────────▲───────┘&#xA;        │                  │        &#xA;┌───────┴──────┐    ┌──────┴───────┐&#xA;│    RxTest    │    │  RxBlocking  │&#xA;└──────────────┘    └──────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxSwift&lt;/strong&gt;: The core of RxSwift, providing the Rx standard as (mostly) defined by &lt;a href=&#34;https://reactivex.io&#34;&gt;ReactiveX&lt;/a&gt;. It has no other dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxCocoa&lt;/strong&gt;: Provides Cocoa-specific capabilities for general iOS/macOS/watchOS &amp;amp; tvOS app development, such as Shared Sequences, Traits, and much more. It depends on both &lt;code&gt;RxSwift&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxRelay&lt;/strong&gt;: Provides &lt;code&gt;PublishRelay&lt;/code&gt;, &lt;code&gt;BehaviorRelay&lt;/code&gt; and &lt;code&gt;ReplayRelay&lt;/code&gt;, three &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/raw/main/Documentation/Subjects.md#relays&#34;&gt;simple wrappers around Subjects&lt;/a&gt;. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;RxTest&lt;/strong&gt; and &lt;strong&gt;RxBlocking&lt;/strong&gt;: Provides testing capabilities for Rx-based systems. It depends on &lt;code&gt;RxSwift&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;30%&#34;&gt;Here&#39;s an example&lt;/th&gt; &#xA;   &lt;th width=&#34;30%&#34;&gt;In Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Define search for GitHub repositories ...&lt;/td&gt; &#xA;   &lt;th rowspan=&#34;9&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/GithubSearch.gif&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#xA;    &lt;div class=&#34;highlight highlight-source-swift&#34;&gt;&#xA;     &lt;pre&gt;&#xA;let searchResults = searchBar.rx.text.orEmpty&#xA;    .throttle(.milliseconds(300), scheduler: MainScheduler.instance)&#xA;    .distinctUntilChanged()&#xA;    .flatMapLatest { query -&amp;gt; Observable&amp;lt;[Repository]&amp;gt; in&#xA;        if query.isEmpty {&#xA;            return .just([])&#xA;        }&#xA;        return searchGitHub(query)&#xA;            .catchAndReturn([])&#xA;    }&#xA;    .observe(on: MainScheduler.instance)&lt;/pre&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;... then bind the results to your tableview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;30%&#34;&gt;&#xA;    &lt;div class=&#34;highlight highlight-source-swift&#34;&gt;&#xA;     &lt;pre&gt;&#xA;searchResults&#xA;    .bind(to: tableView.rx.items(cellIdentifier: &#34;Cell&#34;)) {&#xA;        (index, repository: Repository, cell) in&#xA;        cell.textLabel?.text = repository.name&#xA;        cell.detailTextLabel?.text = repository.url&#xA;    }&#xA;    .disposed(by: disposeBag)&lt;/pre&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.x&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Xcode 11 and below, &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/releases/tag/5.1.1&#34;&gt;use RxSwift 5.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;RxSwift doesn&#39;t contain any external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;These are currently the supported installation options:&lt;/p&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Open Rx.xcworkspace, choose &lt;code&gt;RxExample&lt;/code&gt; and hit run. This method will build everything and run the sample app&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Podfile&#xA;use_frameworks!&#xA;&#xA;target &#39;YOUR_TARGET_NAME&#39; do&#xA;    pod &#39;RxSwift&#39;, &#39;6.5.0&#39;&#xA;    pod &#39;RxCocoa&#39;, &#39;6.5.0&#39;&#xA;end&#xA;&#xA;# RxTest and RxBlocking make the most sense in the context of unit/integration tests&#xA;target &#39;YOUR_TESTING_TARGET&#39; do&#xA;    pod &#39;RxBlocking&#39;, &#39;6.5.0&#39;&#xA;    pod &#39;RxTest&#39;, &#39;6.5.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;YOUR_TARGET_NAME&lt;/code&gt; and then, in the &lt;code&gt;Podfile&lt;/code&gt; directory, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;XCFrameworks&lt;/h3&gt; &#xA;&lt;p&gt;Each release starting with RxSwift 6 includes &lt;code&gt;*.xcframework&lt;/code&gt; framework binaries.&lt;/p&gt; &#xA;&lt;p&gt;Simply drag the needed framework binaries to your &lt;strong&gt;Frameworks, Libraries, and Embedded Content&lt;/strong&gt; section under your target&#39;s &lt;strong&gt;General&lt;/strong&gt; tab.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re using &lt;code&gt;RxCocoa&lt;/code&gt;, be sure to also drag &lt;strong&gt;RxCocoaRuntime.xcframework&lt;/strong&gt; before importing &lt;code&gt;RxCocoa&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ReactiveX/RxSwift/main/assets/xcframeworks.png&#34; alt=&#34;XCFrameworks instructions&#34; width=&#34;65%&#34;&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;Cartfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;ReactiveX/RxSwift&#34; &#34;6.5.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage as a Static Library&lt;/h4&gt; &#xA;&lt;p&gt;Carthage defaults to building RxSwift as a Dynamic Library.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to build RxSwift as a Static Library using Carthage you may use the script below to manually modify the framework type before building with Carthage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;carthage update RxSwift --platform iOS --no-build&#xA;sed -i -e &#39;s/MACH_O_TYPE = mh_dylib/MACH_O_TYPE = staticlib/g&#39; Carthage/Checkouts/RxSwift/Rx.xcodeproj/project.pbxproj&#xA;carthage build RxSwift --platform iOS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is a critical cross-dependency bug affecting many projects including RxSwift in Swift Package Manager. We&#39;ve &lt;a href=&#34;https://bugs.swift.org/browse/SR-12303&#34;&gt;filed a bug (SR-12303)&lt;/a&gt; in early 2020 but have no answer yet. Your mileage may vary. A partial workaround can be found &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/issues/2127#issuecomment-717830502&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.0&#xA;&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;  name: &#34;RxTestProject&#34;,&#xA;  dependencies: [&#xA;    .package(url: &#34;https://github.com/ReactiveX/RxSwift.git&#34;, .exact(&#34;6.5.0&#34;))&#xA;  ],&#xA;  targets: [&#xA;    .target(name: &#34;RxTestProject&#34;, dependencies: [&#34;RxSwift&#34;, &#34;RxCocoa&#34;])&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build or test a module with RxTest dependency, set &lt;code&gt;TEST=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ TEST=1 swift test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually using git submodules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add RxSwift as a submodule&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add git@github.com:ReactiveX/RxSwift.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag &lt;code&gt;Rx.xcodeproj&lt;/code&gt; into Project Navigator&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Project &amp;gt; Targets &amp;gt; Build Phases &amp;gt; Link Binary With Libraries&lt;/code&gt;, click &lt;code&gt;+&lt;/code&gt; and select &lt;code&gt;RxSwift&lt;/code&gt;, &lt;code&gt;RxCocoa&lt;/code&gt; and &lt;code&gt;RxRelay&lt;/code&gt; targets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://reactivex.io/&#34;&gt;http://reactivex.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Reactive-Extensions&#34;&gt;Reactive Extensions GitHub (GitHub)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://store.raywenderlich.com/products/rxswift-reactive-programming-with-swift&#34;&gt;RxSwift RayWenderlich.com Book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GdvLP0ZAhhc&#34;&gt;RxSwift: Debunking the myth of hard (YouTube)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://boxueio.com/series/rxswift-101&#34;&gt;Boxue.io RxSwift Online Course&lt;/a&gt; (Chinese 🇨🇳)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/looJcaeboBY&#34;&gt;Expert to Expert: Brian Beckman and Erik Meijer - Inside the .NET Reactive Framework (Rx) (video)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/-8Y1-lE6NSA&#34;&gt;Reactive Programming Overview (Jafar Husain from Netflix)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://csl.stanford.edu/~christos/pldi2010.fit/meijer.duality.pdf&#34;&gt;Subject/Observer is Dual to Iterator (paper)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;Rx standard sequence operators visualized (visualization tool)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SwiftyJSON/SwiftyJSON</title>
    <updated>2022-06-02T02:25:32Z</updated>
    <id>tag:github.com,2022-06-02:/SwiftyJSON/SwiftyJSON</id>
    <link href="https://github.com/SwiftyJSON/SwiftyJSON" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The better way to deal with JSON data in Swift.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftyJSON&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/SwiftyJSON.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%208.0%20%7C%20macOS%2010.10%20%7C%20tvOS%209.0%20%7C%20watchOS%203.0-F28D00.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SwiftyJSON makes it easy to deal with JSON data in Swift.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Build Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;*OS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://travis-ci.org/SwiftyJSON/SwiftyJSON&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SwiftyJSON/SwiftyJSON.svg?branch=master&#34; alt=&#34;Travis CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/IBM-Swift/SwiftyJSON&#34;&gt;Linux&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://travis-ci.org/IBM-Swift/SwiftyJSON&#34;&gt;&lt;img src=&#34;https://travis-ci.org/IBM-Swift/SwiftyJSON.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#why-is-the-typical-json-handling-in-swift-not-good&#34;&gt;Why is the typical JSON handling in Swift NOT good&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#integration&#34;&gt;Integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#subscript&#34;&gt;Subscript&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#loop&#34;&gt;Loop&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#error&#34;&gt;Error&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#optional-getter&#34;&gt;Optional getter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#non-optional-getter&#34;&gt;Non-optional getter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#setter&#34;&gt;Setter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#raw-object&#34;&gt;Raw object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#literal-convertibles&#34;&gt;Literal convertibles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#merging&#34;&gt;Merging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#work-with-alamofire&#34;&gt;Work with Alamofire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#work-with-moya&#34;&gt;Work with Moya&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SwiftyJSON/SwiftyJSON/master/#swiftyjson-model-generator&#34;&gt;SwiftyJSON Model Generator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Why is the typical JSON handling in Swift NOT good?&lt;/h2&gt; &#xA;&lt;p&gt;Swift is very strict about types. But although explicit typing is good for saving us from mistakes, it becomes painful when dealing with JSON and other areas that are, by nature, implicit about types.&lt;/p&gt; &#xA;&lt;p&gt;Take the Twitter API for example. Say we want to retrieve a user&#39;s &#34;name&#34; value of some tweet in Swift (according to &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline&#34;&gt;Twitter&#39;s API&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The code would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let statusesArray = try? JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [[String: Any]],&#xA;    let user = statusesArray[0][&#34;user&#34;] as? [String: Any],&#xA;    let username = user[&#34;name&#34;] as? String {&#xA;    // Finally we got the username&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s not good.&lt;/p&gt; &#xA;&lt;p&gt;Even if we use optional chaining, it would be messy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let JSONObject = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [[String: Any]],&#xA;    let username = (JSONObject[0][&#34;user&#34;] as? [String: Any])?[&#34;name&#34;] as? String {&#xA;        // There&#39;s our username&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An unreadable mess--for something that should really be simple!&lt;/p&gt; &#xA;&lt;p&gt;With SwiftyJSON all you have to do is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(data: dataFromNetworking)&#xA;if let userName = json[0][&#34;user&#34;][&#34;name&#34;].string {&#xA;  //Now you got your value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And don&#39;t worry about the Optional Wrapping thing. It&#39;s done for you automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(data: dataFromNetworking)&#xA;let result = json[999999][&#34;wrong_key&#34;][&#34;wrong_name&#34;]&#xA;if let userName = result.string {&#xA;    //Calm down, take it easy, the &#34;.string&#34; property still produces the correct Optional String type with safety&#xA;} else {&#xA;    //Print the error&#xA;    print(result.error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 8.0+ | macOS 10.10+ | tvOS 9.0+ | watchOS 2.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods (iOS 8+, OS X 10.9+)&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding it to your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;8.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;MyApp&#39; do&#xA;    pod &#39;SwiftyJSON&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage (iOS 8+, OS X 10.9+)&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding it to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;SwiftyJSON/SwiftyJSON&#34; ~&amp;gt; 4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use Carthage to build your dependencies, make sure you have added &lt;code&gt;SwiftyJSON.framework&lt;/code&gt; to the &#34;Linked Frameworks and Libraries&#34; section of your target, and have included them in your Carthage framework copying build phase.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;The Swift Package Manager&lt;/a&gt; to install &lt;code&gt;SwiftyJSON&lt;/code&gt; by adding the proper description to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:4.0&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;YOUR_PROJECT_NAME&#34;,&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/SwiftyJSON/SwiftyJSON.git&#34;, from: &#34;4.0.0&#34;),&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;swift build&lt;/code&gt; whenever you get prepared.&lt;/p&gt; &#xA;&lt;h4&gt;Manually (iOS 7+, OS X 10.9+)&lt;/h4&gt; &#xA;&lt;p&gt;To use this library in your project manually you may:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;for Projects, just drag SwiftyJSON.swift to the project tree&lt;/li&gt; &#xA; &lt;li&gt;for Workspaces, include the whole SwiftyJSON.xcodeproj&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Initialization&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftyJSON&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(data: dataFromNetworking)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(jsonObject)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let dataFromString = jsonString.data(using: .utf8, allowLossyConversion: false) {&#xA;    let json = JSON(data: dataFromString)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Subscript&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting a double from a JSON Array&#xA;let name = json[0].double&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting an array of string from a JSON Array&#xA;let arrayNames =  json[&#34;users&#34;].arrayValue.map {$0[&#34;name&#34;].stringValue}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting a string from a JSON Dictionary&#xA;let name = json[&#34;name&#34;].stringValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Getting a string using a path to the element&#xA;let path: [JSONSubscriptType] = [1,&#34;list&#34;,2,&#34;name&#34;]&#xA;let name = json[path].string&#xA;// Just the same&#xA;let name = json[1][&#34;list&#34;][2][&#34;name&#34;].string&#xA;// Alternatively&#xA;let name = json[1,&#34;list&#34;,2,&#34;name&#34;].string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With a hard way&#xA;let name = json[].string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With a custom way&#xA;let keys:[JSONSubscriptType] = [1,&#34;list&#34;,2,&#34;name&#34;]&#xA;let name = json[keys].string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Loop&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If json is .Dictionary&#xA;for (key,subJson):(String, JSON) in json {&#xA;   // Do something you want&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;The first element is always a String, even if the JSON is an Array&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If json is .Array&#xA;// The `index` is 0..&amp;lt;json.count&#39;s string value&#xA;for (index,subJson):(String, JSON) in json {&#xA;    // Do something you want&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Error&lt;/h4&gt; &#xA;&lt;h5&gt;SwiftyJSON 4.x&lt;/h5&gt; &#xA;&lt;p&gt;SwiftyJSON 4.x introduces an enum type called &lt;code&gt;SwiftyJSONError&lt;/code&gt;, which includes &lt;code&gt;unsupportedType&lt;/code&gt;, &lt;code&gt;indexOutOfBounds&lt;/code&gt;, &lt;code&gt;elementTooDeep&lt;/code&gt;, &lt;code&gt;wrongType&lt;/code&gt;, &lt;code&gt;notExist&lt;/code&gt; and &lt;code&gt;invalidJSON&lt;/code&gt;, at the same time, &lt;code&gt;ErrorDomain&lt;/code&gt; are being replaced by &lt;code&gt;SwiftyJSONError.errorDomain&lt;/code&gt;. Note: Those old error types are deprecated in SwiftyJSON 4.x and will be removed in the future release.&lt;/p&gt; &#xA;&lt;h5&gt;SwiftyJSON 3.x&lt;/h5&gt; &#xA;&lt;p&gt;Use a subscript to get/set a value in an Array or Dictionary&lt;/p&gt; &#xA;&lt;p&gt;If the JSON is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;an array, the app may crash with &#34;index out-of-bounds.&#34;&lt;/li&gt; &#xA; &lt;li&gt;a dictionary, it will be assigned to &lt;code&gt;nil&lt;/code&gt; without a reason.&lt;/li&gt; &#xA; &lt;li&gt;not an array or a dictionary, the app may crash with an &#34;unrecognised selector&#34; exception.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will never happen in SwiftyJSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON([&#34;name&#34;, &#34;age&#34;])&#xA;if let name = json[999].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[999].error!) // &#34;Array[999] is out of bounds&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON([&#34;name&#34;:&#34;Jack&#34;, &#34;age&#34;: 25])&#xA;if let name = json[&#34;address&#34;].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[&#34;address&#34;].error!) // &#34;Dictionary[&#34;address&#34;] does not exist&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let json = JSON(12345)&#xA;if let age = json[0].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[0])       // &#34;Array[0] failure, It is not an array&#34;&#xA;    print(json[0].error!) // &#34;Array[0] failure, It is not an array&#34;&#xA;}&#xA;&#xA;if let name = json[&#34;name&#34;].string {&#xA;    // Do something you want&#xA;} else {&#xA;    print(json[&#34;name&#34;])       // &#34;Dictionary[\&#34;name&#34;] failure, It is not an dictionary&#34;&#xA;    print(json[&#34;name&#34;].error!) // &#34;Dictionary[\&#34;name&#34;] failure, It is not an dictionary&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Optional getter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// NSNumber&#xA;if let id = json[&#34;user&#34;][&#34;favourites_count&#34;].number {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;favourites_count&#34;].error!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// String&#xA;if let id = json[&#34;user&#34;][&#34;name&#34;].string {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;name&#34;].error!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Bool&#xA;if let id = json[&#34;user&#34;][&#34;is_translator&#34;].bool {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;is_translator&#34;].error!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Int&#xA;if let id = json[&#34;user&#34;][&#34;id&#34;].int {&#xA;   // Do something you want&#xA;} else {&#xA;   // Print the error&#xA;   print(json[&#34;user&#34;][&#34;id&#34;].error!)&#xA;}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Non-optional getter&lt;/h4&gt; &#xA;&lt;p&gt;Non-optional getter is named &lt;code&gt;xxxValue&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not a Number or nil, return 0&#xA;let id: Int = json[&#34;id&#34;].intValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not a String or nil, return &#34;&#34;&#xA;let name: String = json[&#34;name&#34;].stringValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not an Array or nil, return []&#xA;let list: Array&amp;lt;JSON&amp;gt; = json[&#34;list&#34;].arrayValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If not a Dictionary or nil, return [:]&#xA;let user: Dictionary&amp;lt;String, JSON&amp;gt; = json[&#34;user&#34;].dictionaryValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;json[&#34;name&#34;] = JSON(&#34;new-name&#34;)&#xA;json[0] = JSON(1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;json[&#34;id&#34;].int =  1234567890&#xA;json[&#34;coordinate&#34;].double =  8766.766&#xA;json[&#34;name&#34;].string =  &#34;Jack&#34;&#xA;json.arrayObject = [1,2,3,4]&#xA;json.dictionaryObject = [&#34;name&#34;:&#34;Jack&#34;, &#34;age&#34;:25]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Raw object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rawObject: Any = json.object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rawValue: Any = json.rawValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//convert the JSON to raw NSData&#xA;do {&#xA;&#x9;let rawData = try json.rawData()&#xA;  //Do something you want&#xA;} catch {&#xA;&#x9;print(&#34;Error \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//convert the JSON to a raw String&#xA;if let rawString = json.rawString() {&#xA;  //Do something you want&#xA;} else {&#xA;&#x9;print(&#34;json.rawString is nil&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Existence&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// shows you whether value specified in JSON or not&#xA;if json[&#34;name&#34;].exists()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Literal convertibles&lt;/h4&gt; &#xA;&lt;p&gt;For more info about literal convertibles: &lt;a href=&#34;http://nshipster.com/swift-literal-convertible/&#34;&gt;Swift Literal Convertibles&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// StringLiteralConvertible&#xA;let json: JSON = &#34;I&#39;m a json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/ /IntegerLiteralConvertible&#xA;let json: JSON =  12345&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// BooleanLiteralConvertible&#xA;let json: JSON =  true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// FloatLiteralConvertible&#xA;let json: JSON =  2.8765&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DictionaryLiteralConvertible&#xA;let json: JSON =  [&#34;I&#34;:&#34;am&#34;, &#34;a&#34;:&#34;json&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// ArrayLiteralConvertible&#xA;let json: JSON =  [&#34;I&#34;, &#34;am&#34;, &#34;a&#34;, &#34;json&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With subscript in array&#xA;var json: JSON =  [1,2,3]&#xA;json[0] = 100&#xA;json[1] = 200&#xA;json[2] = 300&#xA;json[999] = 300 // Don&#39;t worry, nothing will happen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With subscript in dictionary&#xA;var json: JSON =  [&#34;name&#34;: &#34;Jack&#34;, &#34;age&#34;: 25]&#xA;json[&#34;name&#34;] = &#34;Mike&#34;&#xA;json[&#34;age&#34;] = &#34;25&#34; // It&#39;s OK to set String&#xA;json[&#34;address&#34;] = &#34;L.A.&#34; // Add the &#34;address&#34;: &#34;L.A.&#34; in json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Array &amp;amp; Dictionary&#xA;var json: JSON =  [&#34;name&#34;: &#34;Jack&#34;, &#34;age&#34;: 25, &#34;list&#34;: [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, [&#34;what&#34;: &#34;this&#34;]]]&#xA;json[&#34;list&#34;][3][&#34;what&#34;] = &#34;that&#34;&#xA;json[&#34;list&#34;,3,&#34;what&#34;] = &#34;that&#34;&#xA;let path: [JSONSubscriptType] = [&#34;list&#34;,3,&#34;what&#34;]&#xA;json[path] = &#34;that&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// With other JSON objects&#xA;let user: JSON = [&#34;username&#34; : &#34;Steve&#34;, &#34;password&#34;: &#34;supersecurepassword&#34;]&#xA;let auth: JSON = [&#xA;  &#34;user&#34;: user.object, // use user.object instead of just user&#xA;  &#34;apikey&#34;: &#34;supersecretapitoken&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Merging&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to merge one JSON into another JSON. Merging a JSON into another JSON adds all non existing values to the original JSON which are only present in the &lt;code&gt;other&lt;/code&gt; JSON.&lt;/p&gt; &#xA;&lt;p&gt;If both JSONs contain a value for the same key, &lt;em&gt;mostly&lt;/em&gt; this value gets overwritten in the original JSON, but there are two cases where it provides some special treatment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In case of both values being a &lt;code&gt;JSON.Type.array&lt;/code&gt; the values form the array found in the &lt;code&gt;other&lt;/code&gt; JSON getting appended to the original JSON&#39;s array value.&lt;/li&gt; &#xA; &lt;li&gt;In case of both values being a &lt;code&gt;JSON.Type.dictionary&lt;/code&gt; both JSON-values are getting merged the same way the encapsulating JSON is merged.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In a case where two fields in a JSON have different types, the value will get always overwritten.&lt;/p&gt; &#xA;&lt;p&gt;There are two different fashions for merging: &lt;code&gt;merge&lt;/code&gt; modifies the original JSON, whereas &lt;code&gt;merged&lt;/code&gt; works non-destructively on a copy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let original: JSON = [&#xA;    &#34;first_name&#34;: &#34;John&#34;,&#xA;    &#34;age&#34;: 20,&#xA;    &#34;skills&#34;: [&#34;Coding&#34;, &#34;Reading&#34;],&#xA;    &#34;address&#34;: [&#xA;        &#34;street&#34;: &#34;Front St&#34;,&#xA;        &#34;zip&#34;: &#34;12345&#34;,&#xA;    ]&#xA;]&#xA;&#xA;let update: JSON = [&#xA;    &#34;last_name&#34;: &#34;Doe&#34;,&#xA;    &#34;age&#34;: 21,&#xA;    &#34;skills&#34;: [&#34;Writing&#34;],&#xA;    &#34;address&#34;: [&#xA;        &#34;zip&#34;: &#34;12342&#34;,&#xA;        &#34;city&#34;: &#34;New York City&#34;&#xA;    ]&#xA;]&#xA;&#xA;let updated = original.merge(with: update)&#xA;// [&#xA;//     &#34;first_name&#34;: &#34;John&#34;,&#xA;//     &#34;last_name&#34;: &#34;Doe&#34;,&#xA;//     &#34;age&#34;: 21,&#xA;//     &#34;skills&#34;: [&#34;Coding&#34;, &#34;Reading&#34;, &#34;Writing&#34;],&#xA;//     &#34;address&#34;: [&#xA;//         &#34;street&#34;: &#34;Front St&#34;,&#xA;//         &#34;zip&#34;: &#34;12342&#34;,&#xA;//         &#34;city&#34;: &#34;New York City&#34;&#xA;//     ]&#xA;// ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;String representation&lt;/h2&gt; &#xA;&lt;p&gt;There are two options available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use the default Swift one&lt;/li&gt; &#xA; &lt;li&gt;use a custom one that will handle optionals well and represent &lt;code&gt;nil&lt;/code&gt; as &lt;code&gt;&#34;null&#34;&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = [&#34;1&#34;:2, &#34;2&#34;:&#34;two&#34;, &#34;3&#34;: nil] as [String: Any?]&#xA;let json = JSON(dict)&#xA;let representation = json.rawString(options: [.castNilToNSNull: true])&#xA;// representation is &#34;{\&#34;1\&#34;:2,\&#34;2\&#34;:\&#34;two\&#34;,\&#34;3\&#34;:null}&#34;, which represents {&#34;1&#34;:2,&#34;2&#34;:&#34;two&#34;,&#34;3&#34;:null}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Work with &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;SwiftyJSON nicely wraps the result of the Alamofire JSON response handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Alamofire.request(url, method: .get).validate().responseJSON { response in&#xA;    switch response.result {&#xA;    case .success(let value):&#xA;        let json = JSON(value)&#xA;        print(&#34;JSON: \(json)&#34;)&#xA;    case .failure(let error):&#xA;        print(error)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also provide an extension of Alamofire for serializing NSData to SwiftyJSON&#39;s JSON.&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/SwiftyJSON/Alamofire-SwiftyJSON&#34;&gt;Alamofire-SwiftyJSON&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Work with &lt;a href=&#34;https://github.com/Moya/Moya&#34;&gt;Moya&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;SwiftyJSON parse data to JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let provider = MoyaProvider&amp;lt;Backend&amp;gt;()&#xA;provider.request(.showProducts) { result in&#xA;    switch result {&#xA;    case let .success(moyaResponse):&#xA;        let data = moyaResponse.data&#xA;        let json = JSON(data: data) // convert network data to json&#xA;        print(json)&#xA;    case let .failure(error):&#xA;        print(&#34;error: \(error)&#34;)&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SwiftyJSON Model Generator&lt;/h2&gt; &#xA;&lt;p&gt;Tools to generate SwiftyJSON Models&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jsoncafe.com/&#34;&gt;JSON Cafe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ahmed-Ali/JSONExport&#34;&gt;JSON Export&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>exelban/stats</title>
    <updated>2022-06-02T02:25:32Z</updated>
    <id>tag:github.com,2022-06-02:/exelban/stats</id>
    <link href="https://github.com/exelban/stats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;macOS system monitor in your menu bar&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stats&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;img src=&#34;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/logo.png?raw=true&amp;amp;v=1&#34; width=&#34;120&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;img src=&#34;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/menus%3Fv2.3.2.png?v1&#34; alt=&#34;Stats&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/exelban/stats/releases&#34;&gt;&lt;img src=&#34;https://serhiy.s3.eu-central-1.amazonaws.com/Github_repo/stats/popups%3Fv2.3.2.png?v3&#34; alt=&#34;Stats&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;macOS system monitor in your menu bar&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;You can download the latest version &lt;a href=&#34;https://github.com/exelban/stats/releases/latest/download/Stats.dmg&#34;&gt;here&lt;/a&gt;.&lt;br&gt; This will download a file called &lt;code&gt;Stats.dmg&lt;/code&gt;. Open it and move the app to the application folder.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;To install it using Homebrew, open the Terminal app and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask stats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Stats is currently supported on macOS 10.13 (High Sierra) and higher.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Stats is an application that allows you to monitor your macOS system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Battery level&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth devices&lt;/li&gt; &#xA; &lt;li&gt;CPU utilization&lt;/li&gt; &#xA; &lt;li&gt;Disk utilization&lt;/li&gt; &#xA; &lt;li&gt;Fan/s control&lt;/li&gt; &#xA; &lt;li&gt;GPU utilization&lt;/li&gt; &#xA; &lt;li&gt;Memory usage&lt;/li&gt; &#xA; &lt;li&gt;Network usage&lt;/li&gt; &#xA; &lt;li&gt;Sensors information (Temperature/Voltage/Power)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;How do you change the order of the menu bar icons?&lt;/h3&gt; &#xA;&lt;p&gt;macOS decides the order of the menu bar items not &lt;code&gt;Stats&lt;/code&gt; - it may change after the first reboot after installing Stats.&lt;/p&gt; &#xA;&lt;p&gt;To change the order of any menu bar icon - macOS Mojave (version 10.14) and up.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Hold down ⌘ (command key).&lt;/li&gt; &#xA; &lt;li&gt;Drag the icon to the desired position on the menu bar.&lt;/li&gt; &#xA; &lt;li&gt;Release ⌘ (command key)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English&lt;/li&gt; &#xA; &lt;li&gt;Polski&lt;/li&gt; &#xA; &lt;li&gt;Українська&lt;/li&gt; &#xA; &lt;li&gt;Русский&lt;/li&gt; &#xA; &lt;li&gt;中文 (简体) (thanks to &lt;a href=&#34;https://github.com/chenguokai&#34;&gt;chenguokai&lt;/a&gt; and &lt;a href=&#34;https://github.com/Tai-Zhou&#34;&gt;Tai-Zhou&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Türkçe (thanks to &lt;a href=&#34;https://github.com/yusufozgul&#34;&gt;yusufozgul&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Korean (thanks to &lt;a href=&#34;https://github.com/escapeanaemia&#34;&gt;escapeanaemia&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;German (thanks to &lt;a href=&#34;https://github.com/natterstefan&#34;&gt;natterstefan&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;中文 (繁體) (thanks to &lt;a href=&#34;https://github.com/iamch15542&#34;&gt;iamch15542&lt;/a&gt; and &lt;a href=&#34;https://github.com/jrthsr700tmax&#34;&gt;jrthsr700tmax&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Spanish (thanks to &lt;a href=&#34;https://github.com/jcconca&#34;&gt;jcconca&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Vietnamese (thanks to &lt;a href=&#34;https://github.com/xuandung38&#34;&gt;xuandung38&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;French (thanks to &lt;a href=&#34;https://github.com/RomainLt&#34;&gt;RomainLt&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Italian (thanks to &lt;a href=&#34;https://github.com/gmcinalli&#34;&gt;gmcinalli&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Portuguese (Brazil) (thanks to &lt;a href=&#34;https://github.com/marcelochaves95&#34;&gt;marcelochaves95&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Norwegian Bokmål (thanks to &lt;a href=&#34;https://github.com/rubjo&#34;&gt;rubjo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;日本語 (thanks to &lt;a href=&#34;https://github.com/treastrain&#34;&gt;treastrain&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Portuguese (Portugal) (thanks to &lt;a href=&#34;https://github.com/AdamModus&#34;&gt;AdamModus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Czech (thanks to &lt;a href=&#34;https://github.com/mpl75&#34;&gt;mpl75&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Magyar (thanks to &lt;a href=&#34;https://github.com/moriczr&#34;&gt;moriczr&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Bulgarian (thanks to &lt;a href=&#34;https://github.com/zbrox&#34;&gt;zbrox&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Romanian (thanks to &lt;a href=&#34;https://github.com/razluta&#34;&gt;razluta&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dutch (thanks to &lt;a href=&#34;https://github.com/ngohungphuc&#34;&gt;ngohungphuc&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Hrvatski (thanks to &lt;a href=&#34;https://github.com/milotype&#34;&gt;milotype&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Danish (thanks to &lt;a href=&#34;https://github.com/casperes1996&#34;&gt;casperes1996&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Catalan (thanks to &lt;a href=&#34;https://github.com/davidalonso&#34;&gt;davidalonso&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Indonesian (thanks to &lt;a href=&#34;https://github.com/yooody&#34;&gt;yooody&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Hebrew (thanks to &lt;a href=&#34;https://github.com/BadSugar&#34;&gt;BadSugar&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Slovenian (thanks to &lt;a href=&#34;https://github.com/zigapovhe&#34;&gt;zigapovhe&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can help by adding a new language or improve the existing translation.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/exelban/stats/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Alamofire/Alamofire</title>
    <updated>2022-06-02T02:25:32Z</updated>
    <id>tag:github.com,2022-06-02:/Alamofire/Alamofire</id>
    <link href="https://github.com/Alamofire/Alamofire" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elegant HTTP Networking in Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/AlamofireLogo.png&#34; alt=&#34;Alamofire: Elegant Networking in Swift&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.shields.io/badge/Swift-5.3_5.4_5.5_5.6-Orange?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-5.3_5.4_5.5_5.6-orange?style=flat-square&#34; alt=&#34;Swift&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_Linux_Windows-Green?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platforms-macOS_iOS_tvOS_watchOS_Linux_Windows-yellowgreen?style=flat-square&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/cocoapods/v/Alamofire.svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Alamofire.svg?style=flat-square&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat-square&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34; alt=&#34;Swift Package Manager&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/AlamofireSF&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@AlamofireSF-blue.svg?style=flat-square&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire/37&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift_Forums-Alamofire-orange?style=flat-square&#34; alt=&#34;Swift Forums&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alamofire is an HTTP networking library written in Swift.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#component-libraries&#34;&gt;Component Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#migration-guides&#34;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#communication&#34;&gt;Communication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#using-alamofire&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#introduction&#34;&gt;&lt;strong&gt;Introduction -&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#making-requests&#34;&gt;Making Requests&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-handling&#34;&gt;Response Handling&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-validation&#34;&gt;Response Validation&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#response-caching&#34;&gt;Response Caching&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;HTTP -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-methods&#34;&gt;HTTP Methods&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md##request-parameters-and-parameter-encoders&#34;&gt;Parameters and Parameter Encoder&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#http-headers&#34;&gt;HTTP Headers&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Large Data -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#downloading-data-to-a-file&#34;&gt;Downloading Data to a File&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#uploading-data-to-a-server&#34;&gt;Uploading Data to a Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Tools -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#statistical-metrics&#34;&gt;Statistical Metrics&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Usage.md#curl-command-output&#34;&gt;cURL Command Output&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md&#34;&gt;Advanced Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;URL Session -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#session&#34;&gt;Session Manager&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#sessiondelegate&#34;&gt;Session Delegate&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#request&#34;&gt;Request&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Routing -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#routing-requests&#34;&gt;Routing Requests&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#adapting-and-retrying-requests-with-requestinterceptor&#34;&gt;Adapting and Retrying Requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Model Objects -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#customizing-response-handlers&#34;&gt;Custom Response Handlers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Advanced Concurrency -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-swift-concurrency&#34;&gt;Swift Concurrency&lt;/a&gt; and &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#using-alamofire-with-combine&#34;&gt;Combine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Connection -&lt;/strong&gt; &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#security&#34;&gt;Security&lt;/a&gt;, &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/AdvancedUsage.md#network-reachability&#34;&gt;Network Reachability&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#open-radars&#34;&gt;Open Radars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#donations&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chainable Request / Response Methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Swift Concurrency Support Back to iOS 13, macOS 10.15, tvOS 13, and watchOS 6.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Combine Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; URL / JSON Parameter Encoding&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Upload File / Data / Stream / MultipartFormData&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Download File using Request or Resume Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Authentication with &lt;code&gt;URLCredential&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP Response Validation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Upload and Download Progress Closures with Progress&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cURL Command Output&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dynamically Adapt and Retry Requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TLS Certificate and Public Key Pinning&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Network Reachability&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Comprehensive Unit and Integration Test Coverage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://alamofire.github.io/Alamofire&#34;&gt;Complete Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Component Libraries&lt;/h2&gt; &#xA;&lt;p&gt;In order to keep Alamofire focused specifically on core networking implementations, additional component libraries have been created by the &lt;a href=&#34;https://github.com/Alamofire/Foundation&#34;&gt;Alamofire Software Foundation&lt;/a&gt; to bring additional functionality to the Alamofire ecosystem.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/AlamofireImage&#34;&gt;AlamofireImage&lt;/a&gt; - An image library including image response serializers, &lt;code&gt;UIImage&lt;/code&gt; and &lt;code&gt;UIImageView&lt;/code&gt; extensions, custom image filters, an auto-purging in-memory cache, and a priority-based image downloading system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/AlamofireNetworkActivityIndicator&#34;&gt;AlamofireNetworkActivityIndicator&lt;/a&gt; - Controls the visibility of the network activity indicator on iOS using Alamofire. It contains configurable delay timers to help mitigate flicker and can support &lt;code&gt;URLSession&lt;/code&gt; instances not managed by Alamofire.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Minimum Swift Version&lt;/th&gt; &#xA;   &lt;th&gt;Installation&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS 10.0+ / macOS 10.12+ / tvOS 10.0+ / watchOS 3.0+&lt;/td&gt; &#xA;   &lt;td&gt;5.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#carthage&#34;&gt;Carthage&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#manually&#34;&gt;Manual&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fully Tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;Latest Only&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Building But Unsupported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;Latest Only&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Building But Unsupported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Known Issues on Linux and Windows&lt;/h4&gt; &#xA;&lt;p&gt;Alamofire builds on Linux and Windows but there are missing features and many issues in the underlying &lt;code&gt;swift-corelibs-foundation&lt;/code&gt; that prevent full functionality and may cause crashes. These include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ServerTrustManager&lt;/code&gt; and associated certificate functionality is unavailable, so there is no certificate pinning and no client certificate support.&lt;/li&gt; &#xA; &lt;li&gt;Various methods of HTTP authentication may crash, including HTTP Basic and HTTP Digest. Crashes may occur if responses contain server challenges.&lt;/li&gt; &#xA; &lt;li&gt;Cache control through &lt;code&gt;CachedResponseHandler&lt;/code&gt; and associated APIs is unavailable, as the underlying delegate methods aren&#39;t called.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; are never gathered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Due to these issues, Alamofire is unsupported on Linux and Windows. Please report any crashes to the &lt;a href=&#34;https://bugs.swift.org&#34;&gt;Swift bug reporter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migration Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%205.0%20Migration%20Guide.md&#34;&gt;Alamofire 5.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%204.0%20Migration%20Guide.md&#34;&gt;Alamofire 4.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%203.0%20Migration%20Guide.md&#34;&gt;Alamofire 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/Documentation/Alamofire%202.0%20Migration%20Guide.md&#34;&gt;Alamofire 2.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help with making network requests&lt;/strong&gt; using Alamofire, use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/alamofire&#34;&gt;Stack Overflow&lt;/a&gt; and tag &lt;code&gt;alamofire&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you need to &lt;strong&gt;find or understand an API&lt;/strong&gt;, check &lt;a href=&#34;http://alamofire.github.io/Alamofire/&#34;&gt;our documentation&lt;/a&gt; or &lt;a href=&#34;https://developer.apple.com/documentation/foundation/url_loading_system&#34;&gt;Apple&#39;s documentation for &lt;code&gt;URLSession&lt;/code&gt;&lt;/a&gt;, on top of which Alamofire is built.&lt;/li&gt; &#xA; &lt;li&gt;If you need &lt;strong&gt;help with an Alamofire feature&lt;/strong&gt;, use &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire&#34;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss Alamofire best practices&lt;/strong&gt;, use &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire&#34;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;discuss a feature request&lt;/strong&gt;, use &lt;a href=&#34;https://forums.swift.org/c/related-projects/alamofire&#34;&gt;our forum on swift.org&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue here on GitHub and follow the guide. The more detail the better!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate Alamofire into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;Alamofire&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate Alamofire into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;Alamofire/Alamofire&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the &lt;code&gt;swift&lt;/code&gt; compiler.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding Alamofire as a dependency is as easy as adding it to the &lt;code&gt;dependencies&lt;/code&gt; value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/Alamofire/Alamofire.git&#34;, .upToNextMajor(from: &#34;5.6.1&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use any of the aforementioned dependency managers, you can integrate Alamofire into your project manually.&lt;/p&gt; &#xA;&lt;h4&gt;Embedded Framework&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Open up Terminal, &lt;code&gt;cd&lt;/code&gt; into your top-level project directory, and run the following command &#34;if&#34; your project is not initialized as a git repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Alamofire as a git &lt;a href=&#34;https://git-scm.com/docs/git-submodule&#34;&gt;submodule&lt;/a&gt; by running the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add https://github.com/Alamofire/Alamofire.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the new &lt;code&gt;Alamofire&lt;/code&gt; folder, and drag the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; into the Project Navigator of your application&#39;s Xcode project.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It should appear nested underneath your application&#39;s blue project icon. Whether it is above or below all the other Xcode groups does not matter.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; in the Project Navigator and verify the deployment target matches that of your application target.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the &#34;Targets&#34; heading in the sidebar.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the tab bar at the top of that window, open the &#34;General&#34; panel.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &lt;code&gt;+&lt;/code&gt; button under the &#34;Embedded Binaries&#34; section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will see two different &lt;code&gt;Alamofire.xcodeproj&lt;/code&gt; folders each with two different versions of the &lt;code&gt;Alamofire.framework&lt;/code&gt; nested inside a &lt;code&gt;Products&lt;/code&gt; folder.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It does not matter which &lt;code&gt;Products&lt;/code&gt; folder you choose from, but it does matter whether you choose the top or bottom &lt;code&gt;Alamofire.framework&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the top &lt;code&gt;Alamofire.framework&lt;/code&gt; for iOS and the bottom one for macOS.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You can verify which one you selected by inspecting the build log for your project. The build target for &lt;code&gt;Alamofire&lt;/code&gt; will be listed as &lt;code&gt;Alamofire iOS&lt;/code&gt;, &lt;code&gt;Alamofire macOS&lt;/code&gt;, &lt;code&gt;Alamofire tvOS&lt;/code&gt;, or &lt;code&gt;Alamofire watchOS&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;And that&#39;s it!&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The &lt;code&gt;Alamofire.framework&lt;/code&gt; is automagically added as a target dependency, linked framework and embedded framework in a copy files build phase which is all you need to build on the simulator and a device.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Before contributing to Alamofire, please read the instructions detailed in our &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Open Radars&lt;/h2&gt; &#xA;&lt;p&gt;The following radars have some effect on the current implementation of Alamofire.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.openradar.me/radar?id=5517037090635776&#34;&gt;&lt;code&gt;rdar://21349340&lt;/code&gt;&lt;/a&gt; - Compiler throwing warning due to toll-free bridging issue in the test case&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rdar://26870455&lt;/code&gt; - Background URL Session Configurations do not work in the simulator&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rdar://26849668&lt;/code&gt; - Some URLProtocol APIs do not properly handle &lt;code&gt;URLRequest&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resolved Radars&lt;/h2&gt; &#xA;&lt;p&gt;The following radars have been resolved over time after being filed against the Alamofire project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.openradar.me/radar?id=5010235949318144&#34;&gt;&lt;code&gt;rdar://26761490&lt;/code&gt;&lt;/a&gt; - Swift string interpolation causing memory leak with common usage. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Resolved): 9/1/17 in Xcode 9 beta 6.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://openradar.appspot.com/radar?id=4942308441063424&#34;&gt;&lt;code&gt;rdar://36082113&lt;/code&gt;&lt;/a&gt; - &lt;code&gt;URLSessionTaskMetrics&lt;/code&gt; failing to link on watchOS 3.0+ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Resolved): Just add &lt;code&gt;CFNetwork&lt;/code&gt; to your linked frameworks.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FB7624529&lt;/code&gt; - &lt;code&gt;urlSession(_:task:didFinishCollecting:)&lt;/code&gt; never called on watchOS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Resolved): Metrics now collected on watchOS 7+.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;What&#39;s the origin of the name Alamofire?&lt;/h3&gt; &#xA;&lt;p&gt;Alamofire is named after the &lt;a href=&#34;https://aggie-horticulture.tamu.edu/wildseed/alamofire.html&#34;&gt;Alamo Fire flower&lt;/a&gt;, a hybrid variant of the Bluebonnet, the official state flower of Texas.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Alamofire is owned and maintained by the &lt;a href=&#34;http://alamofire.org&#34;&gt;Alamofire Software Foundation&lt;/a&gt;. You can follow them on Twitter at &lt;a href=&#34;https://twitter.com/AlamofireSF&#34;&gt;@AlamofireSF&lt;/a&gt; for project updates and releases.&lt;/p&gt; &#xA;&lt;h3&gt;Security Disclosure&lt;/h3&gt; &#xA;&lt;p&gt;If you believe you have identified a security vulnerability with Alamofire, you should report it as soon as possible via email to &lt;a href=&#34;mailto:security@alamofire.org&#34;&gt;security@alamofire.org&lt;/a&gt;. Please do not post it to a public issue tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/Alamofire/Foundation#members&#34;&gt;ASF&lt;/a&gt; is looking to raise money to officially stay registered as a federal non-profit organization. Registering will allow Foundation members to gain some legal protections and also allow us to put donations to use, tax-free. Sponsoring the ASF will enable us to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pay our yearly legal fees to keep the non-profit in good status&lt;/li&gt; &#xA; &lt;li&gt;Pay for our mail servers to help us stay on top of all questions and security issues&lt;/li&gt; &#xA; &lt;li&gt;Potentially fund test servers to make it easier for us to test the edge cases&lt;/li&gt; &#xA; &lt;li&gt;Potentially fund developers to work on one of our projects full-time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The community adoption of the ASF libraries has been amazing. We are greatly humbled by your enthusiasm around the projects and want to continue to do everything we can to move the needle forward. With your continued support, the ASF will be able to improve its reach and also provide better legal safety for the core members. If you use any of our libraries for work, see if your employers would be interested in donating. Any amount you can donate, whether once or monthly, to help us reach our goal would be greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/Alamofire&#34;&gt;Sponsor Alamofire&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supporters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://macstadium.com&#34;&gt;MacStadium&lt;/a&gt; provides Alamofire with a free, hosted Mac mini.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Alamofire/Alamofire/master/Resources/MacStadiumLogo.png&#34; alt=&#34;Powered by MacStadium&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Alamofire is released under the MIT license. &lt;a href=&#34;https://github.com/Alamofire/Alamofire/raw/master/LICENSE&#34;&gt;See LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SnapKit/SnapKit</title>
    <updated>2022-06-02T02:25:32Z</updated>
    <id>tag:github.com,2022-06-02:/SnapKit/SnapKit</id>
    <link href="https://github.com/SnapKit/SnapKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swift Autolayout DSL for iOS &amp; OS X&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://snapkit.github.io/SnapKit/images/banner.jpg&#34; alt=&#34;&#34;&gt; &#xA;&lt;p&gt;SnapKit is a DSL to make Auto Layout easy on both iOS and OS X.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/SnapKit/SnapKit&#34;&gt;&lt;img src=&#34;https://travis-ci.org/SnapKit/SnapKit.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SnapKit/SnapKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/SnapKit.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SnapKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SnapKit.svg?sanitize=true&#34; alt=&#34;Cocoapods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;⚠️ &lt;strong&gt;To use with Swift 4.x please ensure you are using &amp;gt;= 4.0.0&lt;/strong&gt; ⚠️&lt;/h4&gt; &#xA;&lt;h4&gt;⚠️ &lt;strong&gt;To use with Swift 5.x please ensure you are using &amp;gt;= 5.0.0&lt;/strong&gt; ⚠️&lt;/h4&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#migration-guides&#34;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#communication&#34;&gt;Communication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 10.0+ / Mac OS X 10.12+ / tvOS 10.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 10.0+&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Migration Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SnapKit/SnapKit/develop/Documentation/SnapKit%203.0%20Migration%20Guide.md&#34;&gt;SnapKit 3.0 Migration Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/snapkit&#34;&gt;Stack Overflow&lt;/a&gt;. (Tag &#39;snapkit&#39;)&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to &lt;strong&gt;ask a general question&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/snapkit&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt;, open an issue.&lt;/li&gt; &#xA; &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt;, submit a pull request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. You can install it with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CocoaPods 1.1.0+ is required to build SnapKit 4.0.0+.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To integrate SnapKit into your Xcode project using CocoaPods, specify it in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;10.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;&amp;lt;Your Target Name&amp;gt;&#39; do&#xA;    pod &#39;SnapKit&#39;, &#39;~&amp;gt; 5.6.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.&lt;/p&gt; &#xA;&lt;p&gt;You can install Carthage with &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To integrate SnapKit into your Xcode project using Carthage, specify it in your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;SnapKit/SnapKit&#34; ~&amp;gt; 5.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; to build the framework and drag the built &lt;code&gt;SnapKit.framework&lt;/code&gt; into your Xcode project.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code. It’s integrated with the Swift build system to automate the process of downloading, compiling, and linking dependencies.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Xcode 11+ is required to build SnapKit using Swift Package Manager.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To integrate SnapKit into your Xcode project using Swift Package Manager, add it to the dependencies value of your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/SnapKit/SnapKit.git&#34;, .upToNextMajor(from: &#34;5.0.1&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use either of the aforementioned dependency managers, you can integrate SnapKit into your project manually.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SnapKit&#xA;&#xA;class MyViewController: UIViewController {&#xA;&#xA;    lazy var box = UIView()&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;&#xA;        self.view.addSubview(box)&#xA;        box.backgroundColor = .green&#xA;        box.snp.makeConstraints { (make) -&amp;gt; Void in&#xA;           make.width.height.equalTo(50)&#xA;           make.center.equalTo(self.view)&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Playground&lt;/h3&gt; &#xA;&lt;p&gt;You can try SnapKit in Playground.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To try SnapKit in playground, open &lt;code&gt;SnapKit.xcworkspace&lt;/code&gt; and build SnapKit.framework for any simulator first.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snapkit.github.io/SnapKit/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snapkit.github.io/SnapKit/faq/&#34;&gt;F.A.Q.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Robert Payne (&lt;a href=&#34;https://twitter.com/robertjpayne&#34;&gt;@robertjpayne&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Many other contributors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SnapKit is released under the MIT license. See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
</feed>