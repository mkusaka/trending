<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-14T02:07:48Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kingslay/KSPlayer</title>
    <updated>2024-01-14T02:07:48Z</updated>
    <id>tag:github.com,2024-01-14:/kingslay/KSPlayer</id>
    <link href="https://github.com/kingslay/KSPlayer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS/macOS/tvOS/visionOS video player&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/build-%20passing%20-blue.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-%20iOS%20macOS%20tvOS%20visionOS%20-blue.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-GPL-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;KSPlayer&lt;/h1&gt; &#xA;&lt;p&gt;KSPlayer is a powerful media play framework for iOS, tvOS, macOS, xrOS, visionOS, Mac Catalyst, SwiftUI, Apple Silicon M1 .&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/kingslay/KSPlayer/develop/README_CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Based On&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FFmpeg&lt;/li&gt; &#xA; &lt;li&gt;Metal&lt;/li&gt; &#xA; &lt;li&gt;AVAudioEngine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; iOS, tvOS, macOS, visionOS, Mac Catalyst, Apple Silicon M1, SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple audio/video tracks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hardware accelerator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 4k/HDR/HDR10/HDR10+/Dolby Vision&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; text subtitle/Closed Captions/image subtitle(dvbsub/dvdsub/pgssub)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Picture in Picture&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Record video&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; De-interlace auto detect&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Spatial Audio&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 360° panorama video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; libsmbclient protocol&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 13 +, macOS 10.15 +, tvOS 13 +, xrOS 1 +&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Demo&#xA;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open Demo/Demo.xcworkspace with Xcode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testflight&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://testflight.apple.com/join/eNmYbmZN&#34;&gt;https://testflight.apple.com/join/eNmYbmZN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;Make sure to use the latest version &lt;strong&gt;cocoapods 1.10.1+&lt;/strong&gt;, which can be installed using the command &lt;code&gt;brew install cocoapods&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;target &#39;ProjectName&#39; do&#xA;    use_frameworks!&#xA;    pod &#39;KSPlayer&#39;,:git =&amp;gt; &#39;https://github.com/kingslay/KSPlayer.git&#39;, :branch =&amp;gt; &#39;develop&#39;&#xA;    pod &#39;DisplayCriteria&#39;,:git =&amp;gt; &#39;https://github.com/kingslay/KSPlayer.git&#39;, :branch =&amp;gt; &#39;develop&#39;&#xA;    pod &#39;FFmpegKit&#39;,:git =&amp;gt; &#39;https://github.com/kingslay/FFmpegKit.git&#39;, :branch =&amp;gt; &#39;main&#39;&#xA;    pod &#39;Libass&#39;,:git =&amp;gt; &#39;https://github.com/kingslay/FFmpegKit.git&#39;, :branch =&amp;gt; &#39;main&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/kingslay/KSPlayer.git&#34;, .branch(&#34;develop&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;initialize&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;KSOptions.secondPlayerType = KSMEPlayer.self&#xA;playerView = IOSVideoPlayerView()&#xA;view.addSubview(playerView)&#xA;playerView.translatesAutoresizingMaskIntoConstraints = false&#xA;NSLayoutConstraint.activate([&#xA;    playerView.topAnchor.constraint(equalTo: view.readableContentGuide.topAnchor),&#xA;    playerView.leftAnchor.constraint(equalTo: view.leftAnchor),&#xA;    playerView.rightAnchor.constraint(equalTo: view.rightAnchor),&#xA;    playerView.bottomAnchor.constraint(equalTo: view.bottomAnchor),&#xA;])&#xA;playerView.backBlock = { [unowned self] in&#xA;    if UIApplication.shared.statusBarOrientation.isLandscape {&#xA;        self.playerView.updateUI(isLandscape: false)&#xA;    } else {&#xA;        self.navigationController?.popViewController(animated: true)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setting up a regular video&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;playerView.set(url:URL(string: &#34;http://baobab.wdjcdn.com/14525705791193.mp4&#34;)!)&#xA;playerView.set(resource: KSPlayerResource(url: url, name: name!, cover: URL(string: &#34;http://img.wdjimg.com/image/video/447f973848167ee5e44b67c8d4df9839_0_0.jpeg&#34;), subtitleURL: URL(string: &#34;http://example.ksplay.subtitle&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi-definition, with cover video&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let res0 = KSPlayerResourceDefinition(url: URL(string: &#34;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&#34;)!,&#xA;                                      definition: &#34;高清&#34;)&#xA;let res1 = KSPlayerResourceDefinition(url: URL(string: &#34;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&#34;)!,&#xA;                                      definition: &#34;标清&#34;)&#xA;   &#xA;let asset = KSPlayerResource(name: &#34;Big Buck Bunny&#34;,&#xA;                             definitions: [res0, res1],&#xA;                             cover: URL(string: &#34;https://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/Big_buck_bunny_poster_big.jpg/848px-Big_buck_bunny_poster_big.jpg&#34;))&#xA;playerView.set(resource: asset)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Setting up an HTTP header&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let options = KSOptions()&#xA;options.appendHeader([&#34;Referer&#34;:&#34;https:www.xxx.com&#34;])&#xA;let definition = KSPlayerResourceDefinition(url: URL(string: &#34;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&#34;)!,&#xA;                                            definition: &#34;高清&#34;,&#xA;                                            options: options)&#xA;let asset = KSPlayerResource(name: &#34;Video Name&#34;,&#xA;                             definitions: [definition])&#xA;playerView.set(resource: asset)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Listening status change&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Listen to play time change&#xA;playerView.playTimeDidChange = { (currentTime: TimeInterval, totalTime: TimeInterval) in&#xA;    print(&#34;playTimeDidChange currentTime: \(currentTime) totalTime: \(totalTime)&#34;)&#xA;}&#xA;&#xA;// Delegates&#xA;public protocol PlayerControllerDelegate: class {&#xA;    func playerController(state: KSPlayerState)&#xA;    func playerController(currentTime: TimeInterval, totalTime: TimeInterval)&#xA;    func playerController(finish error: Error?)&#xA;    func playerController(maskShow: Bool)&#xA;    func playerController(action: PlayerButtonType)&#xA;    // `bufferedCount: 0` indicates first time loading&#xA;    func playerController(bufferedCount: Int, consumeTime: TimeInterval)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;Inherits PlayerView&#39;s custom play logic and UI.&lt;/h3&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class CustomVideoPlayerView: IOSVideoPlayerView {&#xA;    override func updateUI(isLandscape: Bool) {&#xA;        super.updateUI(isLandscape: isLandscape)&#xA;        toolBar.playbackRateButton.isHidden = true&#xA;    }&#xA;&#xA;    override func onButtonPressed(type: PlayerButtonType, button: UIButton) {&#xA;        if type == .landscape {&#xA;            // Your own button press behaviour here&#xA;        } else {&#xA;            super.onButtonPressed(type: type, button: button)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;Selecting Tracks&lt;/h3&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;   override open func player(layer: KSPlayerLayer, state: KSPlayerState) {&#xA;        super.player(layer: layer, state: state)&#xA;        if state == .readyToPlay, let player = layer.player {&#xA;            let tracks = player.tracks(mediaType: .audio)&#xA;            let track = tracks[1]&#xA;            /// the name of the track&#xA;            let name = track.name&#xA;            /// the language of the track&#xA;            let language = track.language&#xA;            /// selecting the one&#xA;            player.select(track: track)&#xA;        }&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;Set the properties in KSOptions&lt;/h3&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;open class KSOptions {&#xA;  /// 最低缓存视频时间&#xA;  @Published&#xA;  public var preferredForwardBufferDuration = KSOptions.preferredForwardBufferDuration&#xA;  /// 最大缓存视频时间&#xA;  public var maxBufferDuration = KSOptions.maxBufferDuration&#xA;  /// 是否开启秒开&#xA;  public var isSecondOpen = KSOptions.isSecondOpen&#xA;  /// 开启精确seek&#xA;  public var isAccurateSeek = KSOptions.isAccurateSeek&#xA;  /// Applies to short videos only&#xA;  public var isLoopPlay = KSOptions.isLoopPlay&#xA;  /// 是否自动播放，默认false&#xA;  public var isAutoPlay = KSOptions.isAutoPlay&#xA;  /// seek完是否自动播放&#xA;  public var isSeekedAutoPlay = KSOptions.isSeekedAutoPlay&#xA;  /*&#xA;   AVSEEK_FLAG_BACKWARD: 1&#xA;   AVSEEK_FLAG_BYTE: 2&#xA;   AVSEEK_FLAG_ANY: 4&#xA;   AVSEEK_FLAG_FRAME: 8&#xA;   */&#xA;  public var seekFlags = Int32(0)&#xA;  // ffmpeg only cache http&#xA;  public var cache = false&#xA;  public var outputURL: URL?&#xA;  public var display = DisplayEnum.plane&#xA;  public var avOptions = [String: Any]()&#xA;  public var formatContextOptions = [String: Any]()&#xA;  public var decoderOptions = [String: Any]()&#xA;  public var probesize: Int64?&#xA;  public var maxAnalyzeDuration: Int64?&#xA;  public var lowres = UInt8(0)&#xA;  public var startPlayTime: TimeInterval = 0&#xA;  public var startPlayRate: Float = 1.0&#xA;  public var registerRemoteControll: Bool = true // 默认支持来自系统控制中心的控制&#xA;  public var referer: String?&#xA;  public var userAgent: String?&#xA;    // audio&#xA;  public var audioFilters = [String]()&#xA;  public var syncDecodeAudio = false&#xA;  // sutile&#xA;  public var autoSelectEmbedSubtitle = true&#xA;  public var subtitleDisable = false&#xA;  public var isSeekImageSubtitle = false&#xA;  // video&#xA;  public var videoDelay = 0.0 // s&#xA;  public var autoDeInterlace = false&#xA;  public var autoRotate = true&#xA;  public var destinationDynamicRange: DynamicRange?&#xA;  public var videoAdaptable = true&#xA;  public var videoFilters = [String]()&#xA;  public var syncDecodeVideo = false&#xA;  public var hardwareDecode = KSOptions.hardwareDecode&#xA;  public var asynchronousDecompression = true&#xA;  public var videoDisable = false&#xA;  public var canStartPictureInPictureAutomaticallyFromInline = true&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Effect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kingslay/KSPlayer/develop/Demo/demo.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developments and Tests&lt;/h2&gt; &#xA;&lt;p&gt;Any contributing and pull requests are warmly welcome. However, before you plan to implement some features or try to fix an uncertain issue, it is recommended to open a discussion first. It would be appreciated if your pull requests could build and with all tests green. :)&lt;/p&gt; &#xA;&lt;h2&gt;Backers &amp;amp; Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Open-source projects cannot live long without your help. If you find KSPlayer to be useful, please consider supporting this project by becoming a sponsor.&lt;/p&gt; &#xA;&lt;p&gt;Become a sponsor through &lt;a href=&#34;https://github.com/sponsors/kingslay/&#34;&gt;GitHub Sponsors&lt;/a&gt;. &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Your user icon or company logo shows up this with a link to your home page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/UnknownCoder807&#34;&gt;UnknownCoder807&lt;/a&gt; &lt;a href=&#34;https://github.com/skrew&#34;&gt;skrew&lt;/a&gt; &lt;a href=&#34;https://github.com/Kimentanm&#34;&gt;Kimentanm&lt;/a&gt; &lt;a href=&#34;https://github.com/nakiostudio&#34;&gt;nakiostudio&lt;/a&gt; &lt;a href=&#34;https://github.com/byMohamedali&#34;&gt;byMohamedali&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/nightfall708&#34;&gt;nightfall708&lt;/a&gt; for sponsoring a mac mini&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/cdguy&#34;&gt;cdguy&lt;/a&gt; &lt;a href=&#34;https://github.com/UnknownCoder807&#34;&gt;UnknownCoder807&lt;/a&gt; &lt;a href=&#34;https://github.com/skrew&#34;&gt;skrew&lt;/a&gt; and LillyPlayer community for sponsoring a LG S95QR Sound Bar&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/skrew&#34;&gt;skrew&lt;/a&gt; and LillyPlayer community for sponsoring a 2022 Apple TV 4K&lt;/p&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kingslay/KSPlayer/raw/develop/Documents/Sponsors.jpg&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email : &lt;a href=&#34;mailto:kingslay@icloud.com&#34;&gt;kingslay@icloud.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>