<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T02:06:34Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kishikawakatsumi/KeychainAccess</title>
    <updated>2023-01-15T02:06:34Z</updated>
    <id>tag:github.com,2023-01-15:/kishikawakatsumi/KeychainAccess</id>
    <link href="https://github.com/kishikawakatsumi/KeychainAccess" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Swift wrapper for Keychain that works on iOS, watchOS, tvOS and macOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KeychainAccess&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/kishikawakatsumi/KeychainAccess&#34;&gt;&lt;img src=&#34;https://travis-ci.com/kishikawakatsumi/KeychainAccess.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&#34; alt=&#34;SPM supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/KeychainAccess&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/KeychainAccess.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoadocs.org/docsets/KeychainAccess&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/KeychainAccess.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;KeychainAccess is a simple Swift wrapper for Keychain that works on iOS and OS X. Makes using Keychain APIs extremely easy and much more palatable to use in Swift.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/Screenshots/01.png&#34; width=&#34;320px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/Screenshots/02.png&#34; width=&#34;320px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/Screenshots/03.png&#34; width=&#34;320px&#34;&gt; &#xA;&lt;h2&gt;&lt;span&gt;💡&lt;/span&gt; Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple interface&lt;/li&gt; &#xA; &lt;li&gt;Support access group&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#accessibility&#34;&gt;Support accessibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#icloud_sharing&#34;&gt;Support iCloud sharing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#touch_id_integration&#34;&gt;Support TouchID and Keychain integration (iOS 8+)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#shared_web_credentials&#34;&gt;Support Shared Web Credentials (iOS 8+)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;Works on both iOS &amp;amp; macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;watchOS and tvOS are supported&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;Mac Catalyst is supported&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/#requirements&#34;&gt;Swift 3, 4 and 5 compatible&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;📖&lt;/span&gt; Usage&lt;/h2&gt; &#xA;&lt;h5&gt;&lt;span&gt;👀&lt;/span&gt; See also:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kishikawakatsumi/KeychainAccess/tree/master/Examples/Example-iOS&#34;&gt;&lt;span&gt;🔗&lt;/span&gt; iOS Example Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Basics&lt;/h3&gt; &#xA;&lt;h4&gt;Saving Application Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Saving Internet Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Instantiation&lt;/h3&gt; &#xA;&lt;h4&gt;Create Keychain for Application Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;, accessGroup: &#34;12ABCD3E4F.shared&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create Keychain for Internet Password&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https, authenticationType: .htmlForm)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Adding an item&lt;/h3&gt; &#xA;&lt;h4&gt;subscripting&lt;/h4&gt; &#xA;&lt;h5&gt;for String&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[string: &#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;for NSData&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[data: &#34;secret&#34;] = NSData(contentsOfFile: &#34;secret.bin&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;set method&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain.set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;error handling&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try keychain.set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;}&#xA;catch let error {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Obtaining an item&lt;/h3&gt; &#xA;&lt;h4&gt;subscripting&lt;/h4&gt; &#xA;&lt;h5&gt;for String (If the value is NSData, attempt to convert to String)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = keychain[&#34;kishikawakatsumi&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = keychain[string: &#34;kishikawakatsumi&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;for NSData&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let secretData = keychain[data: &#34;secret&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;get methods&lt;/h4&gt; &#xA;&lt;h5&gt;as String&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = try? keychain.get(&#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let token = try? keychain.getString(&#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;as NSData&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let data = try? keychain.getData(&#34;kishikawakatsumi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Removing an item&lt;/h3&gt; &#xA;&lt;h4&gt;subscripting&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;keychain[&#34;kishikawakatsumi&#34;] = nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;remove method&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try keychain.remove(&#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Set Label and Comment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;do {&#xA;    try keychain&#xA;        .label(&#34;github.com (kishikawakatsumi)&#34;)&#xA;        .comment(&#34;github access token&#34;)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Obtaining Other Attributes&lt;/h3&gt; &#xA;&lt;h4&gt;PersistentRef&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;let persistentRef = keychain[attributes: &#34;kishikawakatsumi&#34;]?.persistentRef&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Creation Date&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;let creationDate = keychain[attributes: &#34;kishikawakatsumi&#34;]?.creationDate&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;All Attributes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;do {&#xA;    let attributes = try keychain.get(&#34;kishikawakatsumi&#34;) { $0 }&#xA;    print(attributes?.comment)&#xA;    print(attributes?.label)&#xA;    print(attributes?.creator)&#xA;    ...&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;subscripting&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain()&#xA;if let attributes = keychain[attributes: &#34;kishikawakatsumi&#34;] {&#xA;    print(attributes.comment)&#xA;    print(attributes.label)&#xA;    print(attributes.creator)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔑&lt;/span&gt; Configuration (Accessibility, Sharing, iCloud Sync)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Provides fluent interfaces&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .label(&#34;github.com (kishikawakatsumi)&#34;)&#xA;    .synchronizable(true)&#xA;    .accessibility(.afterFirstUnlock)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;accessibility&#34;&gt; Accessibility&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;a name=&#34;accessibility&#34;&gt; &lt;h5&gt;Default accessibility matches background application (=kSecAttrAccessibleAfterFirstUnlock)&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h5&gt;For background application&lt;/h5&gt; &lt;h6&gt;Creating instance&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .accessibility(.afterFirstUnlock)&#xA;&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;One-shot&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain&#xA;        .accessibility(.afterFirstUnlock)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h5&gt;For foreground application&lt;/h5&gt; &lt;h6&gt;Creating instance&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .accessibility(.whenUnlocked)&#xA;&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;One-shot&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain&#xA;        .accessibility(.whenUnlocked)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;👫&lt;/span&gt; Sharing Keychain items&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;, accessGroup: &#34;12ABCD3E4F.shared&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h4&gt;&lt;a name=&#34;accessibility&#34;&gt;&lt;/a&gt;&lt;a name=&#34;icloud_sharing&#34;&gt; &lt;span&gt;🔄&lt;/span&gt; Synchronizing Keychain items with iCloud&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;a name=&#34;icloud_sharing&#34;&gt; &lt;h6&gt;Creating instance&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;    .synchronizable(true)&#xA;&#xA;keychain[&#34;kishikawakatsumi&#34;] = &#34;01234567-89ab-cdef-0123-456789abcdef&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;One-shot&lt;/h6&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain&#xA;        .synchronizable(true)&#xA;        .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    print(&#34;error: \(error)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a name=&#34;icloud_sharing&#34;&gt;&lt;/a&gt;&lt;a name=&#34;touch_id_integration&#34;&gt; &lt;span&gt;🌀&lt;/span&gt; Touch ID (Face ID) integration&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a name=&#34;touch_id_integration&#34;&gt; &lt;p&gt;&lt;strong&gt;Any Operation that require authentication must be run in the background thread.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;If you run in the main thread, UI thread will lock for the system to try to display the authentication dialog.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;To use Face ID, add &lt;code&gt;NSFaceIDUsageDescription&lt;/code&gt; key to your &lt;code&gt;Info.plist&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Adding a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;If you want to store the Touch ID protected Keychain item, specify &lt;code&gt;accessibility&lt;/code&gt; and &lt;code&gt;authenticationPolicy&lt;/code&gt; attributes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;DispatchQueue.global().async {&#xA;    do {&#xA;        // Should be the secret invalidated when passcode is removed? If not then use `.WhenUnlocked`&#xA;        try keychain&#xA;            .accessibility(.whenPasscodeSetThisDeviceOnly, authenticationPolicy: [.biometryAny])&#xA;            .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;    } catch let error {&#xA;        // Error handling if needed...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Updating a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;The same way as when adding.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Do not run in the main thread if there is a possibility that the item you are trying to add already exists, and protected.&lt;/strong&gt; &lt;strong&gt;Because updating protected items requires authentication.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Additionally, you want to show custom authentication prompt message when updating, specify an &lt;code&gt;authenticationPrompt&lt;/code&gt; attribute. If the item not protected, the &lt;code&gt;authenticationPrompt&lt;/code&gt; parameter just be ignored.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;DispatchQueue.global().async {&#xA;    do {&#xA;        // Should be the secret invalidated when passcode is removed? If not then use `.WhenUnlocked`&#xA;        try keychain&#xA;            .accessibility(.whenPasscodeSetThisDeviceOnly, authenticationPolicy: [.biometryAny])&#xA;            .authenticationPrompt(&#34;Authenticate to update your access token&#34;)&#xA;            .set(&#34;01234567-89ab-cdef-0123-456789abcdef&#34;, key: &#34;kishikawakatsumi&#34;)&#xA;    } catch let error {&#xA;        // Error handling if needed...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Obtaining a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;The same way as when you get a normal item. It will be displayed automatically Touch ID or passcode authentication If the item you try to get is protected.&lt;br&gt; If you want to show custom authentication prompt message, specify an &lt;code&gt;authenticationPrompt&lt;/code&gt; attribute. If the item not protected, the &lt;code&gt;authenticationPrompt&lt;/code&gt; parameter just be ignored.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;DispatchQueue.global().async {&#xA;    do {&#xA;        let password = try keychain&#xA;            .authenticationPrompt(&#34;Authenticate to login to server&#34;)&#xA;            .get(&#34;kishikawakatsumi&#34;)&#xA;&#xA;        print(&#34;password: \(password)&#34;)&#xA;    } catch let error {&#xA;        // Error handling if needed...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;&lt;span&gt;🔐&lt;/span&gt; Removing a Touch ID (Face ID) protected item&lt;/h4&gt; &lt;p&gt;The same way as when you remove a normal item. There is no way to show Touch ID or passcode authentication when removing Keychain items.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(service: &#34;com.example.github-token&#34;)&#xA;&#xA;do {&#xA;    try keychain.remove(&#34;kishikawakatsumi&#34;)&#xA;} catch let error {&#xA;    // Error handling if needed...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&#xA;&lt;h3&gt;&lt;a name=&#34;touch_id_integration&#34;&gt;&lt;/a&gt;&lt;a name=&#34;shared_web_credentials&#34;&gt; &lt;span&gt;🔑&lt;/span&gt; Shared Web Credentials&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;a name=&#34;shared_web_credentials&#34;&gt; &lt;/a&gt;&#xA;&lt;blockquote&gt;&#xA; &lt;a name=&#34;shared_web_credentials&#34;&gt; &lt;p&gt;Shared web credentials is a programming interface that enables native iOS apps to share credentials with their website counterparts. For example, a user may log in to a website in Safari, entering a user name and password, and save those credentials using the iCloud Keychain. Later, the user may run a native app from the same developer, and instead of the app requiring the user to reenter a user name and password, shared web credentials gives it access to the credentials that were entered earlier in Safari. The user can also create new accounts, update passwords, or delete her account from within the app. These changes are then saved and used by Safari.&lt;br&gt; &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&#34;&gt;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&lt;/a&gt;&lt;/p&gt;&lt;/a&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://www.kishikawakatsumi.com&#34;, protocolType: .HTTPS)&#xA;&#xA;let username = &#34;kishikawakatsumi@mac.com&#34;&#xA;&#xA;// First, check the credential in the app&#39;s Keychain&#xA;if let password = try? keychain.get(username) {&#xA;    // If found password in the Keychain,&#xA;    // then log into the server&#xA;} else {&#xA;    // If not found password in the Keychain,&#xA;    // try to read from Shared Web Credentials&#xA;    keychain.getSharedPassword(username) { (password, error) -&amp;gt; () in&#xA;        if password != nil {&#xA;            // If found password in the Shared Web Credentials,&#xA;            // then log into the server&#xA;            // and save the password to the Keychain&#xA;&#xA;            keychain[username] = password&#xA;        } else {&#xA;            // If not found password either in the Keychain also Shared Web Credentials,&#xA;            // prompt for username and password&#xA;&#xA;            // Log into server&#xA;&#xA;            // If the login is successful,&#xA;            // save the credentials to both the Keychain and the Shared Web Credentials.&#xA;&#xA;            keychain[username] = inputPassword&#xA;            keychain.setSharedPassword(inputPassword, account: username)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Request all associated domain&#39;s credentials&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Keychain.requestSharedWebCredential { (credentials, error) -&amp;gt; () in&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generate strong random password&lt;/h4&gt; &#xA;&lt;p&gt;Generate strong random password that is in the same format used by Safari autofill (xxx-xxx-xxx-xxx).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password = Keychain.generatePassword() // =&amp;gt; Nhu-GKm-s3n-pMx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;How to set up Shared Web Credentials&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add a com.apple.developer.associated-domains entitlement to your app. This entitlement must include all the domains with which you want to share credentials.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add an apple-app-site-association file to your website. This file must include application identifiers for all the apps with which the site wants to share credentials, and it must be properly signed.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;When the app is installed, the system downloads and verifies the site association file for each of its associated domains. If the verification is successful, the app is associated with the domain.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;More details:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&#34;&gt;https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔍&lt;/span&gt; Debugging&lt;/h3&gt; &#xA;&lt;h4&gt;Display all stored items if print keychain object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;print(&#34;\(keychain)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt;&#xA;[&#xA;  [authenticationType: default, key: kishikawakatsumi, server: github.com, class: internetPassword, protocol: https]&#xA;  [authenticationType: default, key: hirohamada, server: github.com, class: internetPassword, protocol: https]&#xA;  [authenticationType: default, key: honeylemon, server: github.com, class: internetPassword, protocol: https]&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Obtaining all stored keys&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;&#xA;let keys = keychain.allKeys()&#xA;for key in keys {&#xA;  print(&#34;key: \(key)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt;&#xA;key: kishikawakatsumi&#xA;key: hirohamada&#xA;key: honeylemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Obtaining all stored items&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let keychain = Keychain(server: &#34;https://github.com&#34;, protocolType: .https)&#xA;&#xA;let items = keychain.allItems()&#xA;for item in items {&#xA;  print(&#34;item: \(item)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;=&amp;gt;&#xA;item: [authenticationType: Default, key: kishikawakatsumi, server: github.com, class: InternetPassword, protocol: https]&#xA;item: [authenticationType: Default, key: hirohamada, server: github.com, class: InternetPassword, protocol: https]&#xA;item: [authenticationType: Default, key: honeylemon, server: github.com, class: InternetPassword, protocol: https]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keychain sharing capability&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter the error below, you need to add an &lt;code&gt;Keychain.entitlements&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OSStatus error:[-34018] Internal error when a required entitlement isn&#39;t present, client has neither application-identifier nor keychain-access-groups entitlements.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Screen Shot 2019-10-27 at 8 08 50&#34; src=&#34;https://user-images.githubusercontent.com/40610/67627108-1a7f2f80-f891-11e9-97bc-7f7313cb63d1.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/40610/67627072-333b1580-f890-11e9-9feb-bf507abc2724.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v1.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+&lt;/td&gt; &#xA;   &lt;td&gt;1.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v1.2.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+&lt;/td&gt; &#xA;   &lt;td&gt;1.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.0.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+, watchOS 2+&lt;/td&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 7+, macOS 10.9+, watchOS 2+&lt;/td&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.2.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;2.0, 2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.3.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;2.0, 2.1, 2.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v2.4.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;2.2, 2.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v3.0.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;3.x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v3.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v3.2.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2, 5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v4.0.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2, 5.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v4.1.x&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;iOS 8+, macOS 10.9+, watchOS 3+, tvOS 9+, Mac Catalyst 13+&lt;/td&gt; &#xA;   &lt;td&gt;4.0, 4.1, 4.2, 5.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;KeychainAccess is available through &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. To install it, simply add the following lines to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;pod &#39;KeychainAccess&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;KeychainAccess is available through &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. To install it, simply add the following line to your Cartfile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;github &#34;kishikawakatsumi/KeychainAccess&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;KeychainAccess is also available through &lt;a href=&#34;https://github.com/apple/swift-package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Xcode&lt;/h4&gt; &#xA;&lt;p&gt;Select &lt;code&gt;File &amp;gt; Add Packages... &amp;gt; Add Package Dependency...&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/40610/67627000-2833b580-f88f-11e9-89ef-18819b1a6c67.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;h4&gt;CLI&lt;/h4&gt; &#xA;&lt;p&gt;First, create &lt;code&gt;Package.swift&lt;/code&gt; that its package declaration includes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:5.0&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyLibrary&#34;,&#xA;    products: [&#xA;        .library(name: &#34;MyLibrary&#34;, targets: [&#34;MyLibrary&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/kishikawakatsumi/KeychainAccess.git&#34;, from: &#34;3.0.0&#34;),&#xA;    ],&#xA;    targets: [&#xA;        .target(name: &#34;MyLibrary&#34;, dependencies: [&#34;KeychainAccess&#34;]),&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To manually add to your project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;Lib/KeychainAccess.xcodeproj&lt;/code&gt; to your project&lt;/li&gt; &#xA; &lt;li&gt;Link &lt;code&gt;KeychainAccess.framework&lt;/code&gt; with your target&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;Copy Files Build Phase&lt;/code&gt; to include the framework to your application bundle&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;See &lt;a href=&#34;https://github.com/kishikawakatsumi/KeychainAccess/tree/master/Examples/Example-iOS&#34;&gt;iOS Example Project&lt;/a&gt; as reference.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kishikawakatsumi/KeychainAccess/master/Screenshots/Installation.png&#34; width=&#34;800px&#34;&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;kishikawa katsumi, &lt;a href=&#34;mailto:kishikawakatsumi@mac.com&#34;&gt;kishikawakatsumi@mac.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KeychainAccess is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Dimillian/IceCubesApp</title>
    <updated>2023-01-15T02:06:34Z</updated>
    <id>tag:github.com,2023-01-15:/Dimillian/IceCubesApp</id>
    <link href="https://github.com/Dimillian/IceCubesApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A SwiftUI Mastodon client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IceCubesApp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://testflight.apple.com/join/tqI3dK1u&#34;&gt;Public TestFlight beta&lt;/a&gt; (A proper App Store release will come eventually)&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Dimillian/IceCubesApp/main/Images/image1.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Dimillian/IceCubesApp/main/Images/image2.png&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Dimillian/IceCubesApp/main/Images/image3.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Dimillian/IceCubesApp/main/Images/image4.png&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Dimillian/IceCubesApp/main/Images/image5.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Dimillian/IceCubesApp/main/Images/image6.png&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;For contributors and myself, here is a todo list of features that could be added (while giving you a good idea of what&#39;s already done if not in this list, the app is quite complete already!)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[&amp;nbsp;] Editor: Add / Edit polls&lt;/li&gt; &#xA; &lt;li&gt;[&amp;nbsp;] Editor: Support video types&lt;/li&gt; &#xA; &lt;li&gt;[&amp;nbsp;] Editor: Add photos from camera&lt;/li&gt; &#xA; &lt;li&gt;[&amp;nbsp;] Editor: Support custom emojis&lt;/li&gt; &#xA; &lt;li&gt;[&amp;nbsp;] Edit filters&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support IceCubesApp://any mastodon links&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Translate button / display post language / set post language&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Widgets&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Proper iPad support&lt;/li&gt; &#xA; &lt;li&gt;[&amp;nbsp;] macOS support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;IceCubesApp is an open source application for accessing the decentralized social network Mastodon! It&#39;s built entirely in SwiftUI, making it fast, lightweight, and easy to use.&lt;/p&gt; &#xA;&lt;p&gt;You can connect to any Mastodon instance and browse your timeline, interact with other users, and post updates and media.&lt;/p&gt; &#xA;&lt;p&gt;The project is split into different Swift Packages to make it easier to manage and maintain the codebase. Each package is focused on a specific aspect of the application, such as the UI, network communication, or data models. This modular approach allows for easier collaboration and ensures that the code is organized and easy to understand.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a great starting point for learning SwiftUI. The app covers many of the basic concepts of SwiftUI, such as building layouts, working with data, and handling user interaction. By exploring the code, you can gain a solid understanding of how to use SwiftUI in your daily life. Plus, the open source nature of IceCubesApp means that you can see how real-world applications are built and get a sense of best practices for using SwiftUI.&lt;/p&gt; &#xA;&lt;p&gt;The architecture is straighforward MVVM for most parts, no redux on this one ;)&lt;/p&gt; &#xA;&lt;p&gt;Please note that IceCubesApp is currently in an early stage of development and as such, there are many features that are still missing. While the app is functional and can be used to browse and interact with Mastodon, there are still many features that are planned for the future.&lt;/p&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dimillian/IceCubesApp/main/IceCubesApp/Assets.xcassets/AppIcon.appiconset/icon.png?&#34; alt=&#34;Icon&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>leminlimez/Cowabunga</title>
    <updated>2023-01-15T02:06:34Z</updated>
    <id>tag:github.com,2023-01-15:/leminlimez/Cowabunga</id>
    <link href="https://github.com/leminlimez/Cowabunga" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS 14.0-16.1.2 MacDirtyCow ToolBox&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cowabunga&lt;/h1&gt; &#xA;&lt;p&gt;A Jailed toolbox application for iOS 14.0-16.1.2 using &lt;a href=&#34;https://support.apple.com/en-us/HT213530&#34;&gt;CVE-2022-46689&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Warning: Changes are permanent on iOS 14.0-14.8.1&lt;/p&gt; &#xA;&lt;p&gt;IPA available in the &lt;a href=&#34;https://github.com/leminlimez/DockHider/releases&#34;&gt;Releases&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;This is my first solo app made with Xcode!&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hide dock&lt;/li&gt; &#xA; &lt;li&gt;Hide home bar&lt;/li&gt; &#xA; &lt;li&gt;Hide folder backgrounds&lt;/li&gt; &#xA; &lt;li&gt;Disable folder background blur&lt;/li&gt; &#xA; &lt;li&gt;Disable app switcher blur&lt;/li&gt; &#xA; &lt;li&gt;Change system version (shows in settings, iOS 15+)&lt;/li&gt; &#xA; &lt;li&gt;Enable iPhone X Gestures&lt;/li&gt; &#xA; &lt;li&gt;Enable Dynamic Island (iOS 16+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ssZcQNK.png&#34; alt=&#34;SpringBoard Tools&#34;&gt; &lt;img src=&#34;https://i.imgur.com/g4sEzUU.png&#34; alt=&#34;Miscellaneous Mods&#34;&gt; &lt;img src=&#34;https://i.imgur.com/vgxk3R9.png&#34; alt=&#34;No Dock&#34;&gt; &lt;img src=&#34;https://i.imgur.com/6K945m3.png&#34; alt=&#34;No Folder Background&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;You can install through AltStore or TrollStore (if your device supports it)&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Just build like a normal xCode project. There are no extra entitlements needed. You can also build the IPA file with &lt;code&gt;build.command&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sourcelocation/TrollTools&#34;&gt;TrollTools&lt;/a&gt; for ipabuild.command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ginsudev/WDBFontOverwrite&#34;&gt;FontOverwrite&lt;/a&gt; for exploit code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BomberFish&#34;&gt;BomberFish&lt;/a&gt; for AirPower sound.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/c22dev&#34;&gt;c22dev&lt;/a&gt; for fixing AirPower and adding Retro and MagSafe audios.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matteozappia/DynamicCow&#34;&gt;DynamicCow&lt;/a&gt; for DynamicIsland tweak + improved plist function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mineekdev&#34;&gt;mineek&lt;/a&gt; and &lt;a href=&#34;https://github.com/mineek/SantanderMacDirtyCow&#34;&gt;SantanderMacDirtyCow&lt;/a&gt; for providing me with an initial code basis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/user/dayanch96/&#34;&gt;dayanch96&lt;/a&gt; for DockHider v3.0.0-v4.0.1 app icon.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>