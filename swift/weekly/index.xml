<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T02:02:17Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>seemoo-lab/openhaystack</title>
    <updated>2023-02-19T02:02:17Z</updated>
    <id>tag:github.com,2023-02-19:/seemoo-lab/openhaystack</id>
    <link href="https://github.com/seemoo-lab/openhaystack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build your own &#39;AirTags&#39; üè∑ today! Framework for tracking personal Bluetooth devices via Apple&#39;s massive Find My network.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/Icon/OpenHaystackIcon.png&#34; alt=&#34;OpenHaystack application icon&#34; height=&#34;42&#34; width=&#34;42&#34; valign=&#34;bottom&#34;&gt; OpenHaystack&lt;/h1&gt; &#xA;&lt;p&gt;OpenHaystack is a framework for tracking personal Bluetooth devices via Apple&#39;s massive Find My network. Use it to create your own tracking &lt;em&gt;tags&lt;/em&gt; that you can append to physical objects (keyrings, backpacks, ...) or integrate it into other Bluetooth-capable devices such as notebooks.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/OpenHaystack-Screenshot.png&#34; alt=&#34;Screenshot of the app&#34; width=&#34;701&#34;&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#what-is-openhaystack&#34;&gt;What is &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#history&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-use-openhaystack&#34;&gt;How to use &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#system-requirements&#34;&gt;System requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-does-apples-find-my-network-work&#34;&gt;How does Apple&#39;s Find My network work?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#pairing-1&#34;&gt;Pairing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#losing-2&#34;&gt;Losing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#finding-3&#34;&gt;Finding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#searching-4&#34;&gt;Searching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;How to track other Bluetooth devices?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#openhaystack-mobile&#34;&gt;OpenHaystack Mobile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#authors&#34;&gt;Authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack is an application that allows you to create your own accessories that are tracked by Apple&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-does-apples-find-my-network-work&#34;&gt;Find My network&lt;/a&gt;. All you need is a Mac and a &lt;a href=&#34;https://microbit.org/&#34;&gt;BBC micro:bit&lt;/a&gt; or any &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;other Bluetooth-capable device&lt;/a&gt;. By using the app, you can track your accessories anywhere on earth without cellular coverage. Nearby iPhones will discover your accessories and upload their location to Apple&#39;s servers when they have a network connection.&lt;/p&gt; &#xA;&lt;h3&gt;History&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack is the result of reverse-engineering and security analysis work of Apple&#39;s &lt;em&gt;Find My network&lt;/em&gt; (or &lt;em&gt;offline finding&lt;/em&gt;). We at the &lt;a href=&#34;https://seemoo.de&#34;&gt;Secure Mobile Networking Lab&lt;/a&gt; of TU Darmstadt started analyzing offline finding after its initial announcement in June 2019. We identified how Apple devices can be found by iPhones devices, even when they are offline through this work. The whole system is a clever combination of Bluetooth advertisements, public-key cryptography, and a central database of encrypted location reports. We disclosed a specification of the closed parts of offline finding and conducted a comprehensive security and privacy analysis. We found two distinct vulnerabilities. The most severe one, which allowed a malicious application to access location data, has meanwhile been fixed by Apple (&lt;a href=&#34;https://support.apple.com/en-us/HT211849&#34;&gt;CVE-2020-9986&lt;/a&gt;). For more information about the security analysis, please read &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;our paper&lt;/a&gt;. Since its release, we received quite a bit of &lt;a href=&#34;https://owlink.org/press/&#34;&gt;press and media coverage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Disclaimer&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack is experimental software. The code is untested and incomplete. For example, OpenHaystack accessories using our &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware&lt;/a&gt; broadcast a fixed public key and, therefore, are trackable by other devices in proximity (this might change in a future release). OpenHaystack is not affiliated with or endorsed by Apple Inc.&lt;/p&gt; &#xA;&lt;h2&gt;How to use &lt;em&gt;OpenHaystack&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack consists of two components. First, we provide a &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/OpenHaystack&#34;&gt;macOS application&lt;/a&gt; that can display the last reported location of your personal Bluetooth devices. Second, the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware image&lt;/a&gt; enables Bluetooth devices to broadcast beacons that make them discoverable by iPhones.&lt;/p&gt; &#xA;&lt;h3&gt;System requirements&lt;/h3&gt; &#xA;&lt;p&gt;OpenHaystack requires macOS 11 (Big Sur).&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The OpenHaystack application requires a custom plugin for Apple Mail. It is used to download location reports from Apple&#39;s servers via a private API (technical explanation: the plugin inherits Apple Mail&#39;s entitlements required to use this API). Therefore, the installation procedure is slightly different and requires you to temporarily disable &lt;a href=&#34;https://support.apple.com/guide/security/gatekeeper-and-runtime-protection-sec5599b66df/1/web/1&#34;&gt;Gatekeeper&lt;/a&gt;. Our plugin does not access any other private data such as emails (see &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/OpenHaystack/OpenHaystackMail&#34;&gt;source code&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a precompiled binary release from our &lt;a href=&#34;https://github.com/seemoo-lab/openhaystack/releases&#34;&gt;GitHub page&lt;/a&gt;.&lt;br&gt; &lt;em&gt;Alternative:&lt;/em&gt; build the application from source via Xcode.&lt;/li&gt; &#xA; &lt;li&gt;Open OpenHaystack. This will ask you to install the Mail plugin in &lt;code&gt;~/Library/Mail/Bundle&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and run &lt;code&gt;sudo spctl --master-disable&lt;/code&gt;, which will disable Gatekeeper and allow our Apple Mail plugin to run.&lt;/li&gt; &#xA; &lt;li&gt;Open Apple Mail. Go to &lt;em&gt;Preferences&lt;/em&gt; ‚Üí &lt;em&gt;General&lt;/em&gt; ‚Üí &lt;em&gt;Manage Plug-Ins...&lt;/em&gt; and activate the checkbox next to &lt;em&gt;OpenHaystackMail.mailbundle&lt;/em&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If the &lt;em&gt;Manage Plug-Ins...&lt;/em&gt; button does not appear. Run this command in terminal &lt;code&gt;sudo defaults write &#34;/Library/Preferences/com.apple.mail&#34; EnableBundles 1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Allow access and restart Mail.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal and enter &lt;code&gt;sudo spctl --master-enable&lt;/code&gt;, which will enable Gatekeeper again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Adding a new accessory.&lt;/strong&gt; To create a new accessory, you just need to enter a name for it and optionally select a suitable icon and a color. The app then generates a new key pair that is used to encrypt and decrypt the location reports. The private key is stored in your Mac&#39;s keychain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deploy to device.&lt;/strong&gt; Connect a &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#how-to-track-other-bluetooth-devices&#34;&gt;supported device&lt;/a&gt; via USB to your Mac and hit the &lt;em&gt;Deploy&lt;/em&gt; button next to the accessory&#39;s name and choose the corresponding. Instead of using OpenHaystack&#39;s integrated deployment, you may also copy the public key used for advertising (right click on accessory) and deploy it manually.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Display devices&#39; locations.&lt;/strong&gt; It can take up to 30 minutes until you will see the first location report on the map on the right side. The map will always show all your items&#39; most recent locations. You can click on every item to check when the last update was received. By clicking the reload button, you can update the location reports.&lt;/p&gt; &#xA;&lt;h2&gt;How does Apple&#39;s Find My network work?&lt;/h2&gt; &#xA;&lt;p&gt;We briefly explain Apple&#39;s offline finding system (aka &lt;a href=&#34;https://developer.apple.com/find-my/&#34;&gt;&lt;em&gt;Find My network&lt;/em&gt;&lt;/a&gt;). Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;PETS paper and Apple&#39;s accessory specification&lt;/a&gt; for more details. We provide a schematic overview (from our paper) and explain how we integrate the different steps in OpenHaystack below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/FindMyOverview.png&#34; alt=&#34;Find My Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pairing (1)&lt;/h3&gt; &#xA;&lt;p&gt;To use Apple&#39;s Find My network, we generate a public-private key pair on an elliptic curve (P-224). The private key remains on the Mac securely stored in the keychain, and the public key is deployed on the accessory, e.g., an attached micro:bit.&lt;/p&gt; &#xA;&lt;h3&gt;Losing (2)&lt;/h3&gt; &#xA;&lt;p&gt;In short, the accessories broadcast the public key as Bluetooth Low Energy (BLE) advertisements (see &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;firmware&lt;/a&gt;). Nearby iPhones will not be able to distinguish our accessories from a genuine Apple device or certified accessory.&lt;/p&gt; &#xA;&lt;h3&gt;Finding (3)&lt;/h3&gt; &#xA;&lt;p&gt;When a nearby iPhone receives a BLE advertisement, the iPhone fetches its current location via GPS, encrypts it using public key from the advertisement, and uploads the encrypted report to Apple&#39;s server. All iPhones on iOS 13 or newer do this by default. OpenHaystack is not involved in this step.&lt;/p&gt; &#xA;&lt;h3&gt;Searching (4)&lt;/h3&gt; &#xA;&lt;p&gt;Apple does not know which encrypted locations belong to which Apple account or device. Therefore, every Apple user can download any location report as long as they know the corresponding public key. This is not a security issue: all reports are end-to-end encrypted and cannot be decrypted unless one knows the corresponding private key (stored in the keychain). We leverage this feature to download the reports from Apple that have been created for our OpenHaystack accessories. We use our private keys to decrypt the location reports and show the most recent one on the map.&lt;/p&gt; &#xA;&lt;p&gt;Apple protects their database against arbitrary access by requiring an authenticated Apple user to download location reports. We use our Apple Mail plugin, which runs with elevated privileges, to access the required authentication information. The OpenHaystack app communicates with the plugin while downloading reports. This is why you need to keep Mail open while using OpenHaystack.&lt;/p&gt; &#xA;&lt;h2&gt;How to track other Bluetooth devices?&lt;/h2&gt; &#xA;&lt;p&gt;In principle, any Bluetooth device can be turned into an OpenHaystack accessory that is trackable via Apple&#39;s Find My network. Currently, we provide a convenient deployment method of our OpenHaystack firmwares for a small number of embedded devices (see table below). We also support Linux devices via our generic HCI script. Feel free to port OpenHaystack to other devices that support Bluetooth Low Energy based on the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware&#34;&gt;source code of our firmware&lt;/a&gt; and the specification in &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/#references&#34;&gt;our paper&lt;/a&gt;. Please share your results with us!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Tested on&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Deploy via app&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/Microbit_v1&#34;&gt;Nordic nRF51&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;BBC micro:bit v1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úì&lt;/td&gt; &#xA;   &lt;td&gt;Only supports nRF51822 at this time (see issue #6).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/ESP32&#34;&gt;Espressif ESP32&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SP32-WROOM, ESP32-WROVER&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úì&lt;/td&gt; &#xA;   &lt;td&gt;Deployment can take up to 3 minutes. Requires Python 3. Thanks &lt;strong&gt;@fhessel&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Firmware/Linux_HCI&#34;&gt;Linux HCI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Raspberry Pi 4 w/ Raspbian&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Should support any Linux machine.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/Setup.jpg&#34; alt=&#34;Setup&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;OpenHaystack Mobile&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack Mobile is a complete reimplementation of the OpenHaystack macOS application for smartphones. The app provides the same functionality to create and track accessories and aims to increase the usability, especially for new users. In contrast to the macOS application, the location reports cannot be fetched directly on the smartphone, so the app requires a proxy server hosted on Mac hardware to access the Find My network. The proxy server can be accessed over a network by multiple users simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;To connect to your proxy server set the correct URL in: openhaystack-mobile/lib/findMy/reports_fetcher.dart&lt;/p&gt; &#xA;&lt;p&gt;&lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/mobile-map-view.png&#34;&gt; &lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/Resources/mobile-accessory-history.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenHaystack Mobile is built with the cross-platform &lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter framework&lt;/a&gt; and currently runs on Android and iOS. More information about the app and usage instructions can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/openhaystack-mobile&#34;&gt;openhaystack-mobile&lt;/a&gt; folder of this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alexander Heinrich&lt;/strong&gt; (&lt;a href=&#34;https://github.com/Sn0wfreezeDev&#34;&gt;@Sn0wfreezeDev&lt;/a&gt;, &lt;a href=&#34;mailto:aheinrich@seemoo.tu-darmstadt.de&#34;&gt;email&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Milan Stute&lt;/strong&gt; (&lt;a href=&#34;https://github.com/schmittner&#34;&gt;@schmittner&lt;/a&gt;, &lt;a href=&#34;mailto:mstute@seemoo.tu-darmstadt.de&#34;&gt;email&lt;/a&gt;, &lt;a href=&#34;https://seemoo.de/mstute&#34;&gt;web&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alexander Heinrich, Milan Stute, Tim Kornhuber, Matthias Hollick. &lt;strong&gt;Who Can &lt;em&gt;Find My&lt;/em&gt; Devices? Security and Privacy of Apple&#39;s Crowd-Sourced Bluetooth Location Tracking System.&lt;/strong&gt; &lt;em&gt;Proceedings on Privacy Enhancing Technologies (PoPETs)&lt;/em&gt;, 2021. &lt;a href=&#34;https://doi.org/10.2478/popets-2021-0045&#34;&gt;doi:10.2478/popets-2021-0045&lt;/a&gt; &lt;a href=&#34;https://www.petsymposium.org/2021/files/papers/issue3/popets-2021-0045.pdf&#34;&gt;üìÑ Paper&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2103.02282&#34;&gt;üìÑ Preprint&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Alexander Heinrich, Milan Stute, and Matthias Hollick. &lt;strong&gt;DEMO: OpenHaystack: A Framework for Tracking Personal Bluetooth Devices via Apple‚Äôs Massive Find My Network.&lt;/strong&gt; &lt;em&gt;14th ACM Conference on Security and Privacy in Wireless and Mobile (WiSec ‚Äô21)&lt;/em&gt;, 2021.&lt;/li&gt; &#xA; &lt;li&gt;Tim Kornhuber. &lt;strong&gt;Analysis of Apple&#39;s Crowd-Sourced Location Tracking System.&lt;/strong&gt; &lt;em&gt;Technical University of Darmstadt&lt;/em&gt;, Master&#39;s thesis, 2020.&lt;/li&gt; &#xA; &lt;li&gt;Apple Inc. &lt;strong&gt;Find My Network Accessory Specification ‚Äì Developer Preview ‚Äì Release R3.&lt;/strong&gt; 2020. &lt;a href=&#34;https://developer.apple.com/find-my/&#34;&gt;üìÑ Download&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;OpenHaystack is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/seemoo-lab/openhaystack/main/LICENSE&#34;&gt;&lt;strong&gt;GNU Affero General Public License v3.0&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>groue/GRDB.swift</title>
    <updated>2023-02-19T02:02:17Z</updated>
    <id>tag:github.com,2023-02-19:/groue/GRDB.swift</id>
    <link href="https://github.com/groue/GRDB.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolkit for SQLite databases, with a focus on application development&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/GRDB.png&#34; alt=&#34;GRDB: A toolkit for SQLite databases, with a focus on application development&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;A toolkit for SQLite databases, with a focus on application development&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img alt=&#34;Swift 5.7&#34; src=&#34;https://img.shields.io/badge/swift-5.7-orange.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img alt=&#34;Platforms&#34; src=&#34;https://img.shields.io/cocoapods/p/GRDB.swift.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/raw/master/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/groue/GRDB.swift.svg?maxAge=2592000&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/actions/workflows/CI.yml&#34;&gt;&lt;img alt=&#34;CI Status&#34; src=&#34;https://github.com/groue/GRDB.swift/actions/workflows/CI.yml/badge.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Latest release&lt;/strong&gt;: January 15, 2023 ‚Ä¢ &lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v6.6.1&#34;&gt;version 6.6.1&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GRDB6MigrationGuide.md&#34;&gt;Migrating From GRDB 5 to GRDB 6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;: iOS 11.0+ / macOS 10.13+ / tvOS 11.0+ / watchOS 4.0+ ‚Ä¢ SQLite 3.19.3+ ‚Ä¢ Swift 5.7+ / Xcode 14+&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Swift version&lt;/th&gt; &#xA;   &lt;th&gt;GRDB version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Swift 5.7+&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;v6.6.1&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v5.26.1&#34;&gt;v5.26.1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 5.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v5.12.0&#34;&gt;v5.12.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 5.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v4.14.0&#34;&gt;v4.14.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v4.14.0&#34;&gt;v4.14.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 4.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v4.14.0&#34;&gt;v4.14.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 4.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v3.7.0&#34;&gt;v3.7.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v2.10.0&#34;&gt;v2.10.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 3.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v1.3.0&#34;&gt;v1.3.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 3.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v1.3.0&#34;&gt;v1.3.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v1.0&#34;&gt;v1.0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 2.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v0.81.2&#34;&gt;v0.81.2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift 2.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/tree/v0.80.2&#34;&gt;v0.80.2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contact&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Release announcements and usage tips: follow &lt;a href=&#34;http://twitter.com/groue&#34;&gt;@groue&lt;/a&gt; on Twitter, &lt;a href=&#34;https://hachyderm.io/@groue&#34;&gt;@groue@hachyderm.io&lt;/a&gt; on Mastodon.&lt;/li&gt; &#xA; &lt;li&gt;Report bugs in a &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/new&#34;&gt;Github issue&lt;/a&gt;. Make sure you check the &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues?q=is%3Aopen&#34;&gt;existing issues&lt;/a&gt; first.&lt;/li&gt; &#xA; &lt;li&gt;A question? Looking for advice? Do you wonder how to contribute? Fancy a chat? Go to the &lt;a href=&#34;https://forums.swift.org/c/related-projects/grdb&#34;&gt;GRDB forums&lt;/a&gt;, or open a &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/new&#34;&gt;Github issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;GRDB provides raw access to SQL and advanced SQLite features, because one sometimes enjoys a sharp tool. It has robust concurrency primitives, so that multi-threaded applications can efficiently use their databases. It grants your application models with persistence and fetching methods, so that you don&#39;t have to deal with SQL and raw database rows when you don&#39;t want to.&lt;/p&gt; &#xA;&lt;p&gt;Compared to &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift&#34;&gt;SQLite.swift&lt;/a&gt; or &lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;FMDB&lt;/a&gt;, GRDB can spare you a lot of glue code. Compared to &lt;a href=&#34;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/&#34;&gt;Core Data&lt;/a&gt; or &lt;a href=&#34;http://realm.io&#34;&gt;Realm&lt;/a&gt;, it can simplify your multi-threaded applications.&lt;/p&gt; &#xA;&lt;p&gt;It comes with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&#34;&gt;up-to-date documentation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#general-guides--good-practices&#34;&gt;general guides&lt;/a&gt;, and it is &lt;a href=&#34;https://github.com/groue/GRDB.swift/wiki/Performance&#34;&gt;fast&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/WhyAdoptGRDB.md&#34;&gt;Why Adopt GRDB?&lt;/a&gt; if you are looking for your favorite database library.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#features&#34;&gt;Features&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#usage&#34;&gt;Usage&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#installation&#34;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&#34;&gt;Documentation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Programming tools for both database beginners and SQLite experts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;Access to raw SQL and SQLite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;: Fetching and persistence methods for your custom structs and class hierarchies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;Query Interface&lt;/a&gt;: A swift way to avoid the SQL language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;: Relations and joins between record types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasepool&#34;&gt;WAL Mode Support&lt;/a&gt;: Extra performance for multi-threaded applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/migrations&#34;&gt;Migrations&lt;/a&gt;: Transform your database as your application evolves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseobservation&#34;&gt;Database Observation&lt;/a&gt;: Observe database changes and transactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;Full-Text Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;Encryption&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;Support for Custom SQLite Builds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In-depth integration with our programming environment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/concurrency&#34;&gt;Swift Concurrency&lt;/a&gt;: &lt;code&gt;try await&lt;/code&gt; your database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/groue/GRDBQuery&#34;&gt;SwiftUI&lt;/a&gt;: Access and observe the database from your SwiftUI views.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&#34;&gt;Combine&lt;/a&gt;: Access and observe the database with Combine publishers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RxSwiftCommunity/RxGRDB&#34;&gt;RxSwift&lt;/a&gt;: Access and observe the database with RxSwift observables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Start using the database in four steps&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;// 1. Open a database connection&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;&#xA;// 2. Define the database schema&#xA;try dbQueue.write { db in&#xA;    try db.create(table: &#34;player&#34;) { t in&#xA;        t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;        t.column(&#34;name&#34;, .text).notNull()&#xA;        t.column(&#34;score&#34;, .integer).notNull()&#xA;    }&#xA;}&#xA;&#xA;// 3. Define a record type&#xA;struct Player: Codable, FetchableRecord, PersistableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;// 4. Access the database&#xA;try dbQueue.write { db in&#xA;    try Player(id: 1, name: &#34;Arthur&#34;, score: 100).insert(db)&#xA;    try Player(id: 2, name: &#34;Barbara&#34;, score: 1000).insert(db)&#xA;}&#xA;&#xA;let players: [Player] = try dbQueue.read { db in&#xA;    try Player.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Activate the WAL mode&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;// Simple database connection&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;&#xA;// Enhanced multithreading based on SQLite&#39;s WAL mode&#xA;let dbPool = try DatabasePool(path: &#34;/path/to/database.sqlite&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;Database Connections&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Access to raw SQL&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;&#34;&#34;&#xA;        CREATE TABLE place (&#xA;          id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;          title TEXT NOT NULL,&#xA;          favorite BOOLEAN NOT NULL DEFAULT 0,&#xA;          latitude DOUBLE NOT NULL,&#xA;          longitude DOUBLE NOT NULL)&#xA;        &#34;&#34;&#34;)&#xA;    &#xA;    try db.execute(sql: &#34;&#34;&#34;&#xA;        INSERT INTO place (title, favorite, latitude, longitude)&#xA;        VALUES (?, ?, ?, ?)&#xA;        &#34;&#34;&#34;, arguments: [&#34;Paris&#34;, true, 48.85341, 2.3488])&#xA;    &#xA;    let parisId = db.lastInsertedRowID&#xA;    &#xA;    // Avoid SQL injection with SQL interpolation&#xA;    try db.execute(literal: &#34;&#34;&#34;&#xA;        INSERT INTO place (title, favorite, latitude, longitude)&#xA;        VALUES (\(&#34;King&#39;s Cross&#34;), \(true), \(51.52151), \(-0.12763))&#xA;        &#34;&#34;&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;Executing Updates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Access to raw database rows and values&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Fetch database rows&#xA;    let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM place&#34;)&#xA;    while let row = try rows.next() {&#xA;        let title: String = row[&#34;title&#34;]&#xA;        let isFavorite: Bool = row[&#34;favorite&#34;]&#xA;        let coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[&#34;latitude&#34;],&#xA;            longitude: row[&#34;longitude&#34;])&#xA;    }&#xA;    &#xA;    // Fetch values&#xA;    let placeCount = try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) FROM place&#34;)! // Int&#xA;    let placeTitles = try String.fetchAll(db, sql: &#34;SELECT title FROM place&#34;) // [String]&#xA;}&#xA;&#xA;let placeCount = try dbQueue.read { db in&#xA;    try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) FROM place&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;Fetch Queries&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Database model types aka &#34;records&#34;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;}&#xA;&#xA;// snip: turn Place into a &#34;record&#34; by adopting the protocols that&#xA;// provide fetching and persistence methods.&#xA;&#xA;try dbQueue.write { db in&#xA;    // Create database table&#xA;    try db.create(table: &#34;place&#34;) { t in&#xA;        t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;        t.column(&#34;title&#34;, .text).notNull()&#xA;        t.column(&#34;favorite&#34;, .boolean).notNull().defaults(to: false)&#xA;        t.column(&#34;longitude&#34;, .double).notNull()&#xA;        t.column(&#34;latitude&#34;, .double).notNull()&#xA;    }&#xA;    &#xA;    var berlin = Place(&#xA;        id: nil,&#xA;        title: &#34;Berlin&#34;,&#xA;        isFavorite: false,&#xA;        coordinate: CLLocationCoordinate2D(latitude: 52.52437, longitude: 13.41053))&#xA;    &#xA;    try berlin.insert(db)&#xA;    berlin.id // some value&#xA;    &#xA;    berlin.isFavorite = true&#xA;    try berlin.update(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Query the database with the Swift query interface&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Place&#xA;    let paris = try Place.find(db, id: 1)&#xA;    &#xA;    // Place?&#xA;    let berlin = try Place.filter(Column(&#34;title&#34;) == &#34;Berlin&#34;).fetchOne(db)&#xA;    &#xA;    // [Place]&#xA;    let favoritePlaces = try Place&#xA;        .filter(Column(&#34;favorite&#34;) == true)&#xA;        .order(Column(&#34;title&#34;))&#xA;        .fetchAll(db)&#xA;    &#xA;    // Int&#xA;    let favoriteCount = try Place.filter(Column(&#34;favorite&#34;)).fetchCount(db)&#xA;    &#xA;    // SQL is always welcome&#xA;    let places = try Place.fetchAll(db, sql: &#34;SELECT * FROM place&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;Query Interface&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Database changes notifications&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Define the observed value&#xA;let observation = ValueObservation.tracking { db in&#xA;    try Place.fetchAll(db)&#xA;}&#xA;&#xA;// Start observation&#xA;let cancellable = observation.start(&#xA;    in: dbQueue,&#xA;    onError: { error in ... },&#xA;    onChange: { (places: [Place]) in print(&#34;Fresh places: \(places)&#34;) })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Ready-made support for Combine and RxSwift:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Combine&#xA;let cancellable = observation.publisher(in: dbQueue).sink(&#xA;    receiveCompletion: { completion in ... },&#xA;    receiveValue: { (places: [Place]) in print(&#34;Fresh places: \(places)&#34;) })&#xA;&#xA;// RxSwift&#xA;let disposable = observation.rx.observe(in: dbQueue).subscribe(&#xA;    onNext: { (places: [Place]) in print(&#34;Fresh places: \(places)&#34;) },&#xA;    onError: { error in ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseobservation&#34;&gt;Database Observation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/Combine.md&#34;&gt;Combine Support&lt;/a&gt;, &lt;a href=&#34;https://github.com/RxSwiftCommunity/RxGRDB&#34;&gt;RxGRDB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB runs on top of SQLite&lt;/strong&gt;: you should get familiar with the &lt;a href=&#34;http://www.sqlite.org/faq.html&#34;&gt;SQLite FAQ&lt;/a&gt;. For general and detailed information, jump to the &lt;a href=&#34;http://www.sqlite.org/docs.html&#34;&gt;SQLite Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Demo Applications &amp;amp; Frequently Asked Questions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt;: Three flavors: vanilla UIKit, Combine + SwiftUI, and Async/Await + SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-opening-connections&#34;&gt;Opening Connections&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-associations&#34;&gt;Associations&lt;/a&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Reference&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/&#34;&gt;GRDB Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Getting Started&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;Database Connections&lt;/a&gt;: Connect to SQLite databases&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;SQLite and SQL&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;SQLite API&lt;/a&gt;: The low-level SQLite API ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;executing updates&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;fetch queries&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Records and the Query Interface&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;: Fetching and persistence methods for your custom structs and class hierarchies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;Query Interface&lt;/a&gt;: A swift way to generate SQL ‚Ä¢ &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseschema&#34;&gt;create tables&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;associations between record types&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Application Tools&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/migrations&#34;&gt;Migrations&lt;/a&gt;: Transform your database as your application evolves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;Full-Text Search&lt;/a&gt;: Perform efficient and customizable full-text searches.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt;: Consume complex joined queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseobservation&#34;&gt;Database Observation&lt;/a&gt;: Observe database changes and transactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;Encryption&lt;/a&gt;: Encrypt your database with SQLCipher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#backup&#34;&gt;Backup&lt;/a&gt;: Dump the content of a database to another.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#interrupt-a-database&#34;&gt;Interrupt a Database&lt;/a&gt;: Abort any pending database operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasesharing&#34;&gt;Sharing a Database&lt;/a&gt;: Recommendations for App Group Containers and sandboxed macOS apps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Good to Know&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&#34;&gt;Avoiding SQL Injection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#unicode&#34;&gt;Unicode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#memory-management&#34;&gt;Memory Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-protection&#34;&gt;Data Protection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/concurrency&#34;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;General Guides &amp;amp; Good Practices&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GoodPracticesForDesigningRecordTypes.md&#34;&gt;Good Practices for Designing Record Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GRDB6MigrationGuide.md&#34;&gt;Migrating From GRDB 5 to GRDB 6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues?q=is%3Aissue+label%3A%22best+practices%22&#34;&gt;Issues tagged &#34;best practices&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚ùì&lt;/span&gt; &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue%20label%3Aquestion&#34;&gt;Issues tagged &#34;question&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/WhyAdoptGRDB.md&#34;&gt;Why Adopt GRDB?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://medium.com/@gwendal.roue/how-to-build-an-ios-application-with-sqlite-and-grdb-swift-d023a06c29b3&#34;&gt;How to build an iOS application with SQLite and GRDB.swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://medium.com/@gwendal.roue/four-different-ways-to-handle-sqlite-concurrency-db3bcc74d00e&#34;&gt;Four different ways to handle SQLite concurrency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://hackernoon.com/unexpected-sqlite-with-swift-ddc6343bcbfc&#34;&gt;Unexpected SQLite with Swift&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sample-code&#34;&gt;Sample Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The installation procedures below have GRDB use the version of SQLite that ships with the target operating system.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;Encryption&lt;/a&gt; for the installation procedure of GRDB with SQLCipher.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;Custom SQLite builds&lt;/a&gt; for the installation procedure of GRDB with a customized build of SQLite.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#enabling-fts5-support&#34;&gt;Enabling FTS5 Support&lt;/a&gt; for the installation procedure of GRDB with support for the FTS5 full-text engine.&lt;/p&gt; &#xA;&lt;h2&gt;CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Xcode projects. To use GRDB with CocoaPods (version 1.2 or higher), specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;GRDB.swift&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GRDB can be installed as a framework, or a static library.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Package Manager&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; automates the distribution of Swift code. To use GRDB with SPM, add a dependency to &lt;code&gt;https://github.com/groue/GRDB.swift.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;GRDB offers two libraries, &lt;code&gt;GRDB&lt;/code&gt; and &lt;code&gt;GRDB-dynamic&lt;/code&gt;. Pick only one. When in doubt, prefer &lt;code&gt;GRDB&lt;/code&gt;. The &lt;code&gt;GRDB-dynamic&lt;/code&gt; library can reveal useful if you are going to link it with multiple targets within your app and only wish to link to a shared, dynamic framework once. See &lt;a href=&#34;https://forums.swift.org/t/how-to-link-a-swift-package-as-dynamic/32062&#34;&gt;How to link a Swift Package as dynamic&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Linux is not currently supported.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Due to an Xcode bug, you will get &#34;No such module &#39;CSQLite&#39;&#34; errors when you want to embed the GRDB package in other targets than the main application (watch extensions, for example). UI and Unit testing targets are OK, though. See &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/642#issuecomment-575994093&#34;&gt;#642&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Carthage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is &lt;strong&gt;unsupported&lt;/strong&gt;. For some context about this decision, see &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/433&#34;&gt;#433&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manually&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift/releases&#34;&gt;Download&lt;/a&gt; a copy of GRDB, or clone its repository and make sure you checkout the latest tagged version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Embed the &lt;code&gt;GRDB.xcodeproj&lt;/code&gt; project in your own project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;GRDB&lt;/code&gt; target in the &lt;strong&gt;Target Dependencies&lt;/strong&gt; section of the &lt;strong&gt;Build Phases&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;GRDB.framework&lt;/code&gt; to the &lt;strong&gt;Embedded Binaries&lt;/strong&gt; section of the &lt;strong&gt;General&lt;/strong&gt; tab of your application target (extension target for WatchOS).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for examples of such integration.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Database Connections&lt;/h1&gt; &#xA;&lt;p&gt;GRDB provides two classes for accessing SQLite databases: &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasequeue&#34;&gt;&lt;code&gt;DatabaseQueue&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasepool&#34;&gt;&lt;code&gt;DatabasePool&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;// Pick one:&#xA;let dbQueue = try DatabaseQueue(path: &#34;/path/to/database.sqlite&#34;)&#xA;let dbPool = try DatabasePool(path: &#34;/path/to/database.sqlite&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The differences are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Database pools allow concurrent database accesses (this can improve the performance of multithreaded applications).&lt;/li&gt; &#xA; &lt;li&gt;Database pools open your SQLite database in the &lt;a href=&#34;https://www.sqlite.org/wal.html&#34;&gt;WAL mode&lt;/a&gt; (unless read-only).&lt;/li&gt; &#xA; &lt;li&gt;Database queues support &lt;a href=&#34;https://www.sqlite.org/inmemorydb.html&#34;&gt;in-memory databases&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are not sure, choose &lt;code&gt;DatabaseQueue&lt;/code&gt;.&lt;/strong&gt; You will always be able to switch to &lt;code&gt;DatabasePool&lt;/code&gt; later.&lt;/p&gt; &#xA;&lt;h1&gt;SQLite API&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;In this section of the documentation, we will talk SQL.&lt;/strong&gt; Jump to the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt; if SQL is not your cup of tea.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;Executing Updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;Fetch Queries&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;Fetching Methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;Row Queries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;Value Queries&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-and-memory-savings&#34;&gt;Data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;Date and DateComponents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;NSNumber, NSDecimalNumber, and Decimal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#swift-enums&#34;&gt;Swift enums&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;Custom Value Types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/transactions&#34;&gt;Transactions and Savepoints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Advanced topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;Prepared Statements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions-and-aggregates&#34;&gt;Custom SQL Functions and Aggregates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-schema-introspection&#34;&gt;Database Schema Introspection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;Row Adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#raw-sqlite-pointers&#34;&gt;Raw SQLite Pointers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Executing Updates&lt;/h2&gt; &#xA;&lt;p&gt;Once granted with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;, the &lt;code&gt;execute&lt;/code&gt; method executes the SQL statements that do not return any database row, such as &lt;code&gt;CREATE TABLE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;ALTER&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;&#34;&#34;&#xA;        CREATE TABLE player (&#xA;            id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;            name TEXT NOT NULL,&#xA;            score INT)&#xA;        &#34;&#34;&#34;)&#xA;    &#xA;    try db.execute(&#xA;        sql: &#34;INSERT INTO player (name, score) VALUES (?, ?)&#34;,&#xA;        arguments: [&#34;Barbara&#34;, 1000])&#xA;    &#xA;    try db.execute(&#xA;        sql: &#34;UPDATE player SET score = :score WHERE id = :id&#34;,&#xA;        arguments: [&#34;score&#34;: 1000, &#34;id&#34;: 1])&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:score&lt;/code&gt; in the SQL query are the &lt;strong&gt;statements arguments&lt;/strong&gt;. You pass arguments with arrays or dictionaries, as in the example above. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/statementarguments&#34;&gt;StatementArguments&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt; &#xA;&lt;p&gt;You can also embed query arguments right into your SQL queries, with the &lt;code&gt;literal&lt;/code&gt; argument label, as in the example below. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(literal: &#34;&#34;&#34;&#xA;        INSERT INTO player (name, score) VALUES (\(&#34;O&#39;Brien&#34;), \(550))&#xA;        &#34;&#34;&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Never ever embed values directly in your raw SQL strings&lt;/strong&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&#34;&gt;Avoiding SQL Injection&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WRONG: don&#39;t embed values in raw SQL strings&#xA;let id = 123&#xA;let name = textField.text&#xA;try db.execute(&#xA;    sql: &#34;UPDATE player SET name = &#39;\(name)&#39; WHERE id = \(id)&#34;)&#xA;&#xA;// CORRECT: use arguments dictionary&#xA;try db.execute(&#xA;    sql: &#34;UPDATE player SET name = :name WHERE id = :id&#34;,&#xA;    arguments: [&#34;name&#34;: name, &#34;id&#34;: id])&#xA;&#xA;// CORRECT: use arguments array&#xA;try db.execute(&#xA;    sql: &#34;UPDATE player SET name = ? WHERE id = ?&#34;,&#xA;    arguments: [name, id])&#xA;&#xA;// CORRECT: use SQL Interpolation&#xA;try db.execute(&#xA;    literal: &#34;UPDATE player SET name = \(name) WHERE id = \(id)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Join multiple statements with a semicolon&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.execute(sql: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    &#34;&#34;&#34;, arguments: [&#34;Arthur&#34;, 750, &#34;Barbara&#34;, 1000])&#xA;&#xA;try db.execute(literal: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;Arthur&#34;), \(750));&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;Barbara&#34;), \(1000));&#xA;    &#34;&#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to make sure that a single statement is executed, use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;Prepared Statements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;After an INSERT statement&lt;/strong&gt;, you can get the row ID of the inserted row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.execute(&#xA;    sql: &#34;INSERT INTO player (name, score) VALUES (?, ?)&#34;,&#xA;    arguments: [&#34;Arthur&#34;, 1000])&#xA;let playerId = db.lastInsertedRowID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t miss &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;, that provide classic &lt;strong&gt;persistence methods&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var player = Player(name: &#34;Arthur&#34;, score: 1000)&#xA;try player.insert(db)&#xA;let playerId = player.id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fetch Queries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;Database connections&lt;/a&gt; let you fetch database rows, plain values, and custom models aka &#34;records&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rows&lt;/strong&gt; are the raw results of SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    if let row = try Row.fetchOne(db, sql: &#34;SELECT * FROM wine WHERE id = ?&#34;, arguments: [1]) {&#xA;        let name: String = row[&#34;name&#34;]&#xA;        let color: Color = row[&#34;color&#34;]&#xA;        print(name, color)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt; are the Bool, Int, String, Date, Swift enums, etc. stored in row columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    let urls = try URL.fetchCursor(db, sql: &#34;SELECT url FROM wine&#34;)&#xA;    while let url = try urls.next() {&#xA;        print(url)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Records&lt;/strong&gt; are your application objects that can initialize themselves from rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let wines = try dbQueue.read { db in&#xA;    try Wine.fetchAll(db, sql: &#34;SELECT * FROM wine&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;Fetching Methods&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;Cursors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;Row Queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;Value Queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fetching Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Throughout GRDB&lt;/strong&gt;, you can always fetch &lt;em&gt;cursors&lt;/em&gt;, &lt;em&gt;arrays&lt;/em&gt;, &lt;em&gt;sets&lt;/em&gt;, or &lt;em&gt;single values&lt;/em&gt; of any fetchable type (database &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-queries&#34;&gt;row&lt;/a&gt;, simple &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;value&lt;/a&gt;, or custom &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;record&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Row.fetchCursor(...) // A Cursor of Row&#xA;try Row.fetchAll(...)    // [Row]&#xA;try Row.fetchSet(...)    // Set&amp;lt;Row&amp;gt;&#xA;try Row.fetchOne(...)    // Row?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchCursor&lt;/code&gt; returns a &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;cursor&lt;/a&gt;&lt;/strong&gt; over fetched values:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT ...&#34;) // A Cursor of Row&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchAll&lt;/code&gt; returns an &lt;strong&gt;array&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let players = try Player.fetchAll(db, sql: &#34;SELECT ...&#34;) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchSet&lt;/code&gt; returns a &lt;strong&gt;set&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let names = try String.fetchSet(db, sql: &#34;SELECT ...&#34;) // Set&amp;lt;String&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fetchOne&lt;/code&gt; returns a &lt;strong&gt;single optional value&lt;/strong&gt;, and consumes a single database row (if any).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let count = try Int.fetchOne(db, sql: &#34;SELECT COUNT(*) ...&#34;) // Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;All those fetching methods require an SQL string that contains a single SQL statement.&lt;/strong&gt; When you want to fetch from multiple statements joined with a semicolon, iterate the multiple &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;prepared statements&lt;/a&gt; found in the SQL string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statements = try db.allStatements(sql: &#34;&#34;&#34;&#xA;    SELECT ...; &#xA;    SELECT ...; &#xA;    SELECT ...;&#xA;    &#34;&#34;&#34;)&#xA;while let statement = try statements.next() {&#xA;    let players = try Player.fetchAll(statement)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can join the results of all statements yielded by the &lt;code&gt;allStatements&lt;/code&gt; method, like the SQLite &lt;a href=&#34;https://www.sqlite.org/c3ref/exec.html&#34;&gt;&lt;code&gt;sqlite3_exec&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A single cursor of all rows from all statements&#xA;let rows = try db&#xA;    .allStatements(sql: &#34;...&#34;)&#xA;    .flatMap { statement in try Row.fetchCursor(statement) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;prepared statements&lt;/a&gt; for more information about &lt;code&gt;allStatements()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cursors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Whenever you consume several rows from the database, you can fetch an Array, a Set, or a Cursor&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;fetchAll()&lt;/code&gt; and &lt;code&gt;fetchSet()&lt;/code&gt; methods return regular Swift array and sets, that you iterate like all other arrays and sets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // [Player]&#xA;    let players = try Player.fetchAll(db, sql: &#34;SELECT ...&#34;)&#xA;    for player in players {&#xA;        // use player&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike arrays and sets, cursors returned by &lt;code&gt;fetchCursor()&lt;/code&gt; load their results step after step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Cursor of Player&#xA;    let players = try Player.fetchCursor(db, sql: &#34;SELECT ...&#34;)&#xA;    while let player = try players.next() {&#xA;        // use player&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can not be used on any thread&lt;/strong&gt;: you must consume a cursor on the dispatch queue it was created in. Particularly, don&#39;t extract a cursor out of a database access method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Wrong&#xA;let cursor = try dbQueue.read { db in&#xA;    try Player.fetchCursor(db, ...)&#xA;}&#xA;while let player = try cursor.next() { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Conversely, arrays and sets may be consumed on any thread:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// OK&#xA;let array = try dbQueue.read { db in&#xA;    try Player.fetchAll(db, ...)&#xA;}&#xA;for player in array { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can be iterated only one time.&lt;/strong&gt; Arrays and sets can be iterated many times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors iterate database results in a lazy fashion&lt;/strong&gt;, and don&#39;t consume much memory. Arrays and sets contain copies of database values, and may take a lot of memory when there are many fetched results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors are granted with direct access to SQLite,&lt;/strong&gt; unlike arrays and sets that have to take the time to copy database values. If you look after extra performance, you may prefer cursors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors can feed Swift collections.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You will most of the time use &lt;code&gt;fetchAll&lt;/code&gt; or &lt;code&gt;fetchSet&lt;/code&gt; when you want an array or a set. For more specific needs, you may prefer one of the initializers below. All of them accept an extra optional &lt;code&gt;minimumCapacity&lt;/code&gt; argument which helps optimizing your app when you have an idea of the number of elements in a cursor (the built-in &lt;code&gt;fetchAll&lt;/code&gt; and &lt;code&gt;fetchSet&lt;/code&gt; do not perform such an optimization).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt; and all types conforming to &lt;code&gt;RangeReplaceableCollection&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [String]&#xA;let cursor = try String.fetchCursor(db, ...)&#xA;let array = try Array(cursor)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Sets&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Set&amp;lt;Int&amp;gt;&#xA;let cursor = try Int.fetchCursor(db, ...)&#xA;let set = try Set(cursor)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Dictionaries&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [Int64: [Player]]&#xA;let cursor = try Player.fetchCursor(db)&#xA;let dictionary = try Dictionary(grouping: cursor, by: { $0.teamID })&#xA;&#xA;// [Int64: Player]&#xA;let cursor = try Player.fetchCursor(db).map { ($0.id, $0) }&#xA;let dictionary = try Dictionary(uniqueKeysWithValues: cursor)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors adopt the &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/cursor&#34;&gt;Cursor&lt;/a&gt; protocol, which looks a lot like standard &lt;a href=&#34;https://developer.apple.com/reference/swift/lazysequenceprotocol&#34;&gt;lazy sequences&lt;/a&gt; of Swift.&lt;/strong&gt; As such, cursors come with many convenience methods: &lt;code&gt;compactMap&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;dropFirst&lt;/code&gt;, &lt;code&gt;dropLast&lt;/code&gt;, &lt;code&gt;drop(while:)&lt;/code&gt;, &lt;code&gt;enumerated&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;joined&lt;/code&gt;, &lt;code&gt;joined(separator:)&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;max(by:)&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;min(by:)&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;prefix(while:)&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;reduce(into:)&lt;/code&gt;, &lt;code&gt;suffix&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Prints all Github links&#xA;try URL&#xA;    .fetchCursor(db, sql: &#34;SELECT url FROM link&#34;)&#xA;    .filter { url in url.host == &#34;github.com&#34; }&#xA;    .forEach { url in print(url) }&#xA;&#xA;// An efficient cursor of coordinates:&#xA;let locations = try Row.&#xA;    .fetchCursor(db, sql: &#34;SELECT latitude, longitude FROM place&#34;)&#xA;    .map { row in&#xA;        CLLocationCoordinate2D(latitude: row[0], longitude: row[1])&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors are not Swift sequences.&lt;/strong&gt; That&#39;s because Swift sequences can&#39;t handle iteration errors, when reading SQLite results may fail at any time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cursors require a little care&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Don&#39;t modify the results during a cursor iteration:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Undefined behavior&#xA;while let player = try players.next() {&#xA;    try db.execute(sql: &#34;DELETE ...&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Don&#39;t turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array or a set. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. To get a set of rows, use &lt;code&gt;Row.fetchSet(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t see, or don&#39;t care about the difference, use arrays. If you care about memory and performance, use cursors when appropriate.&lt;/p&gt; &#xA;&lt;h3&gt;Row Queries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-rows&#34;&gt;Fetching Rows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&#34;&gt;Column Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rows-as-dictionaries&#34;&gt;Rows as Dictionaries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Fetching Rows&lt;/h4&gt; &#xA;&lt;p&gt;Fetch &lt;strong&gt;cursors&lt;/strong&gt; of rows, &lt;strong&gt;arrays&lt;/strong&gt;, &lt;strong&gt;sets&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; rows (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    try Row.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments: ...) // A Cursor of Row&#xA;    try Row.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // [Row]&#xA;    try Row.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Set&amp;lt;Row&amp;gt;&#xA;    try Row.fetchOne(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Row?&#xA;    &#xA;    let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM wine&#34;)&#xA;    while let row = try rows.next() {&#xA;        let name: String = row[&#34;name&#34;]&#xA;        let color: Color = row[&#34;color&#34;]&#xA;        print(name, color)&#xA;    }&#xA;}&#xA;&#xA;let rows = try dbQueue.read { db in&#xA;    try Row.fetchAll(db, sql: &#34;SELECT * FROM player&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments are optional arrays or dictionaries that fill the positional &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:name&lt;/code&gt; in the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchAll(db,&#xA;    sql: &#34;SELECT * FROM player WHERE name = ?&#34;,&#xA;    arguments: [&#34;Arthur&#34;])&#xA;&#xA;let rows = try Row.fetchAll(db,&#xA;    sql: &#34;SELECT * FROM player WHERE name = :name&#34;,&#xA;    arguments: [&#34;name&#34;: &#34;Arthur&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported arguments types (Bool, Int, String, Date, Swift enums, etc.), and &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/statementarguments&#34;&gt;StatementArguments&lt;/a&gt; for a detailed documentation of SQLite arguments.&lt;/p&gt; &#xA;&lt;p&gt;Unlike row arrays that contain copies of the database rows, row cursors are close to the SQLite metal, and require a little care:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;strong&gt;Don&#39;t turn a cursor of &lt;code&gt;Row&lt;/code&gt; into an array or a set&lt;/strong&gt;. You would not get the distinct rows you expect. To get a array of rows, use &lt;code&gt;Row.fetchAll(...)&lt;/code&gt;. To get a set of rows, use &lt;code&gt;Row.fetchSet(...)&lt;/code&gt;. Generally speaking, make sure you copy a row whenever you extract it from a cursor for later use: &lt;code&gt;row.copy()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Column Values&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read column values&lt;/strong&gt; by index or column name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String = row[0]      // 0 is the leftmost column&#xA;let name: String = row[&#34;name&#34;] // Leftmost matching column - lookup is case-insensitive&#xA;let name: String = row[Column(&#34;name&#34;)] // Using query interface&#39;s Column&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to ask for an optional when the value may be NULL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String? = row[&#34;name&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;row[]&lt;/code&gt; subscript returns the type you ask for. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported value types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bookCount: Int     = row[&#34;bookCount&#34;]&#xA;let bookCount64: Int64 = row[&#34;bookCount&#34;]&#xA;let hasBooks: Bool     = row[&#34;bookCount&#34;] // false when 0&#xA;&#xA;let string: String     = row[&#34;date&#34;]      // &#34;2015-09-11 18:14:15.123&#34;&#xA;let date: Date         = row[&#34;date&#34;]      // Date&#xA;self.date = row[&#34;date&#34;] // Depends on the type of the property.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;code&gt;as&lt;/code&gt; type casting operator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;row[...] as Int&#xA;row[...] as Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: avoid the &lt;code&gt;as!&lt;/code&gt; and &lt;code&gt;as?&lt;/code&gt; operators:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let int = row[...] as? Int { ... } // BAD - doesn&#39;t work&#xA;if let int = row[...] as Int? { ... } // GOOD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Generally speaking, you can extract the type you need, provided it can be converted from the underlying SQLite value:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Successful conversions include:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All numeric SQLite values to all numeric Swift types, and Bool (zero is the only false boolean).&lt;/li&gt; &#xA;   &lt;li&gt;Text SQLite values to Swift String.&lt;/li&gt; &#xA;   &lt;li&gt;Blob SQLite values to Foundation Data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported types (Bool, Int, String, Date, Swift enums, etc.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;NULL returns nil.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT NULL&#34;)!&#xA;row[0] as Int? // nil&#xA;row[0] as Int  // fatal error: could not convert NULL to Int.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is one exception, though: the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;row[0] as DatabaseValue // DatabaseValue.null&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Missing columns return nil.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;foo&#39; AS foo&#34;)!&#xA;row[&#34;missing&#34;] as String? // nil&#xA;row[&#34;missing&#34;] as String  // fatal error: no such column: missing&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can explicitly check for a column presence with the &lt;code&gt;hasColumn&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Invalid conversions throw a fatal error.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Mom‚Äôs birthday&#39;&#34;)!&#xA;row[0] as String // &#34;Mom‚Äôs birthday&#34;&#xA;row[0] as Date?  // fatal error: could not convert &#34;Mom‚Äôs birthday&#34; to Date.&#xA;row[0] as Date   // fatal error: could not convert &#34;Mom‚Äôs birthday&#34; to Date.&#xA;&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 256&#34;)!&#xA;row[0] as Int    // 256&#xA;row[0] as UInt8? // fatal error: could not convert 256 to UInt8.&#xA;row[0] as UInt8  // fatal error: could not convert 256 to UInt8.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Those conversion fatal errors can be avoided with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Mom‚Äôs birthday&#39;&#34;)!&#xA;let dbValue: DatabaseValue = row[0]&#xA;if dbValue.isNull {&#xA;    // Handle NULL&#xA;} else if let date = Date.fromDatabaseValue(dbValue) {&#xA;    // Handle valid date&#xA;} else {&#xA;    // Handle invalid date&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This extra verbosity is the consequence of having to deal with an untrusted database: you may consider fixing the content of your database instead. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&#34;&gt;Fatal Errors&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SQLite has a weak type system, and provides &lt;a href=&#34;https://www.sqlite.org/c3ref/column_blob.html&#34;&gt;convenience conversions&lt;/a&gt; that can turn String to Int, Double to Blob, etc.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;GRDB will sometimes let those conversions go through:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT &#39;20 small cigars&#39;&#34;)&#xA;while let row = try rows.next() {&#xA;    row[0] as Int   // 20&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Don&#39;t freak out: those conversions did not prevent SQLite from becoming the immensely successful database engine you want to use. And GRDB adds safety checks described just above. You can also prevent those convenience conversions altogether by using the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;DatabaseValue&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;DatabaseValue is an intermediate type between SQLite and your values, which gives information about the raw value stored in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You get DatabaseValue just like other value types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dbValue: DatabaseValue = row[0]&#xA;let dbValue: DatabaseValue? = row[&#34;name&#34;] // nil if and only if column does not exist&#xA;&#xA;// Check for NULL:&#xA;dbValue.isNull // Bool&#xA;&#xA;// The stored value:&#xA;dbValue.storage.value // Int64, Double, String, Data, or nil&#xA;&#xA;// All the five storage classes supported by SQLite:&#xA;switch dbValue.storage {&#xA;case .null:                 print(&#34;NULL&#34;)&#xA;case .int64(let int64):     print(&#34;Int64: \(int64)&#34;)&#xA;case .double(let double):   print(&#34;Double: \(double)&#34;)&#xA;case .string(let string):   print(&#34;String: \(string)&#34;)&#xA;case .blob(let data):       print(&#34;Data: \(data)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can extract regular &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) from DatabaseValue with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible.fromDatabaseValue()&lt;/a&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dbValue: DatabaseValue = row[&#34;bookCount&#34;]&#xA;let bookCount   = Int.fromDatabaseValue(dbValue)   // Int?&#xA;let bookCount64 = Int64.fromDatabaseValue(dbValue) // Int64?&#xA;let hasBooks    = Bool.fromDatabaseValue(dbValue)  // Bool?, false when 0&#xA;&#xA;let dbValue: DatabaseValue = row[&#34;date&#34;]&#xA;let string = String.fromDatabaseValue(dbValue)     // &#34;2015-09-11 18:14:15.123&#34;&#xA;let date   = Date.fromDatabaseValue(dbValue)       // Date?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fromDatabaseValue&lt;/code&gt; returns nil for invalid conversions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Mom‚Äôs birthday&#39;&#34;)!&#xA;let dbValue: DatabaseValue = row[0]&#xA;let string = String.fromDatabaseValue(dbValue) // &#34;Mom‚Äôs birthday&#34;&#xA;let int    = Int.fromDatabaseValue(dbValue)    // nil&#xA;let date   = Date.fromDatabaseValue(dbValue)   // nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rows as Dictionaries&lt;/h4&gt; &#xA;&lt;p&gt;Row adopts the standard &lt;a href=&#34;https://developer.apple.com/documentation/swift/randomaccesscollection&#34;&gt;RandomAccessCollection&lt;/a&gt; protocol, and can be seen as a dictionary of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// All the (columnName, dbValue) tuples, from left to right:&#xA;for (columnName, dbValue) in row {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can build rows from dictionaries&lt;/strong&gt; (standard Swift dictionaries and NSDictionary). See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information on supported types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row: Row = [&#34;name&#34;: &#34;foo&#34;, &#34;date&#34;: nil]&#xA;let row = Row([&#34;name&#34;: &#34;foo&#34;, &#34;date&#34;: nil])&#xA;let row = Row(/* [AnyHashable: Any] */) // nil if invalid dictionary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet rows are not real dictionaries: they may contain duplicate columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT 1 AS foo, 2 AS foo&#34;)!&#xA;row.columnNames    // [&#34;foo&#34;, &#34;foo&#34;]&#xA;row.databaseValues // [1, 2]&#xA;row[&#34;foo&#34;]         // 1 (leftmost matching column)&#xA;for (columnName, dbValue) in row { ... } // (&#34;foo&#34;, 1), (&#34;foo&#34;, 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you build a dictionary from a row&lt;/strong&gt;, you have to disambiguate identical columns, and choose how to present database values. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: DatabaseValue]&lt;/code&gt; dictionary that keeps leftmost value in case of duplicated column name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = Dictionary(row, uniquingKeysWith: { (left, _) in left })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: AnyObject]&lt;/code&gt; dictionary which keeps rightmost value in case of duplicated column name. This dictionary is identical to FMResultSet&#39;s resultDictionary from FMDB. It contains NSNull values for null columns, and can be shared with Objective-C:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = Dictionary(&#xA;    row.map { (column, dbValue) in&#xA;        (column, dbValue.storage.value as AnyObject)&#xA;    },&#xA;    uniquingKeysWith: { (_, right) in right })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;[String: Any]&lt;/code&gt; dictionary that can feed, for example, JSONSerialization:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dict = Dictionary(&#xA;    row.map { (column, dbValue) in&#xA;        (column, dbValue.storage.value)&#xA;    },&#xA;    uniquingKeysWith: { (left, _) in left })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the documentation of &lt;a href=&#34;https://developer.apple.com/documentation/swift/dictionary/2892961-init&#34;&gt;&lt;code&gt;Dictionary.init(_:uniquingKeysWith:)&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Value Queries&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instead of rows, you can directly fetch values.&lt;/strong&gt; There are many supported &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;value types&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Like rows, fetch values as &lt;strong&gt;cursors&lt;/strong&gt;, &lt;strong&gt;arrays&lt;/strong&gt;, &lt;strong&gt;sets&lt;/strong&gt;, or &lt;strong&gt;single&lt;/strong&gt; values (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt;). Values are extracted from the leftmost column of the SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    try Int.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments: ...) // A Cursor of Int&#xA;    try Int.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // [Int]&#xA;    try Int.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Set&amp;lt;Int&amp;gt;&#xA;    try Int.fetchOne(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Int?&#xA;    &#xA;    let maxScore = try Int.fetchOne(db, sql: &#34;SELECT MAX(score) FROM player&#34;) // Int?&#xA;    let names = try String.fetchAll(db, sql: &#34;SELECT name FROM player&#34;)       // [String]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Int.fetchOne&lt;/code&gt; returns nil in two cases: either the SELECT statement yielded no row, or one row with a NULL value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// No row:&#xA;try Int.fetchOne(db, sql: &#34;SELECT 42 WHERE FALSE&#34;) // nil&#xA;&#xA;// One row with a NULL value:&#xA;try Int.fetchOne(db, sql: &#34;SELECT NULL&#34;)           // nil&#xA;&#xA;// One row with a non-NULL value:&#xA;try Int.fetchOne(db, sql: &#34;SELECT 42&#34;)             // 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For requests which may contain NULL, fetch optionals:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    try Optional&amp;lt;Int&amp;gt;.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments: ...) // A Cursor of Int?&#xA;    try Optional&amp;lt;Int&amp;gt;.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // [Int?]&#xA;    try Optional&amp;lt;Int&amp;gt;.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments: ...)    // Set&amp;lt;Int?&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: One advanced use case, when you fetch one value, is to distinguish the cases of a statement that yields no row, or one row with a NULL value. To do so, use &lt;code&gt;Optional&amp;lt;Int&amp;gt;.fetchOne&lt;/code&gt;, which returns a double optional &lt;code&gt;Int??&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// No row:&#xA;try Optional&amp;lt;Int&amp;gt;.fetchOne(db, sql: &#34;SELECT 42 WHERE FALSE&#34;) // .none&#xA;// One row with a NULL value:&#xA;try Optional&amp;lt;Int&amp;gt;.fetchOne(db, sql: &#34;SELECT NULL&#34;)           // .some(.none)&#xA;// One row with a non-NULL value:&#xA;try Optional&amp;lt;Int&amp;gt;.fetchOne(db, sql: &#34;SELECT 42&#34;)             // .some(.some(42))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are many supported value types (Bool, Int, String, Date, Swift enums, etc.). See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;Values&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Values&lt;/h2&gt; &#xA;&lt;p&gt;GRDB ships with built-in support for the following value types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Swift Standard Library&lt;/strong&gt;: Bool, Double, Float, all signed and unsigned integer types, String, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#swift-enums&#34;&gt;Swift enums&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Foundation&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-and-memory-savings&#34;&gt;Data&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;Date&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;DateComponents&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;Decimal&lt;/a&gt;, NSNull, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;NSNumber&lt;/a&gt;, NSString, URL, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#uuid&#34;&gt;UUID&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CoreGraphics&lt;/strong&gt;: CGFloat.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;&lt;/strong&gt;, the type which gives information about the raw value stored in the database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Full-Text Patterns&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts3pattern&#34;&gt;FTS3Pattern&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts5pattern&#34;&gt;FTS5Pattern&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generally speaking, all types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible&lt;/a&gt; protocol.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Values can be used as &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/statementarguments&#34;&gt;statement arguments&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let url: URL = ...&#xA;let verified: Bool = ...&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO link (url, verified) VALUES (?, ?)&#34;,&#xA;    arguments: [url, verified])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Values can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&#34;&gt;extracted from rows&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM link&#34;)&#xA;while let row = try rows.next() {&#xA;    let url: URL = row[&#34;url&#34;]&#xA;    let verified: Bool = row[&#34;verified&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Values can be &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#value-queries&#34;&gt;directly fetched&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let urls = try URL.fetchAll(db, sql: &#34;SELECT url FROM link&#34;)  // [URL]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use values in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Link: FetchableRecord {&#xA;    var url: URL&#xA;    var isVerified: Bool&#xA;    &#xA;    init(row: Row) {&#xA;        url = row[&#34;url&#34;]&#xA;        isVerified = row[&#34;verified&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use values in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let url: URL = ...&#xA;let link = try Link.filter(Column(&#34;url&#34;) == url).fetchOne(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data (and Memory Savings)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data&lt;/strong&gt; suits the BLOB SQLite columns. It can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(db, sql: &#34;SELECT data, ...&#34;)&#xA;while let row = try rows.next() {&#xA;    let data: Data = row[&#34;data&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At each step of the request iteration, the &lt;code&gt;row[]&lt;/code&gt; subscript creates &lt;em&gt;two copies&lt;/em&gt; of the database bytes: one fetched by SQLite, and another, stored in the Swift Data value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You have the opportunity to save memory&lt;/strong&gt; by not copying the data fetched by SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;while let row = try rows.next() {&#xA;    try row.withUnsafeData(name: &#34;data&#34;) { (data: Data?) in&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The non-copied data does not live longer than the iteration step: make sure that you do not use it past this point.&lt;/p&gt; &#xA;&lt;h3&gt;Date and DateComponents&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date&#34;&gt;&lt;strong&gt;Date&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#datecomponents&#34;&gt;&lt;strong&gt;DateComponents&lt;/strong&gt;&lt;/a&gt; can be stored and fetched from the database.&lt;/p&gt; &#xA;&lt;p&gt;Here is how GRDB supports the various &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;date formats&lt;/a&gt; supported by SQLite:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;SQLite format&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Date&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;DateComponents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD HH:MM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD HH:MM:SS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD HH:MM:SS.SSS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤ / Write ¬π&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;YYYY-MM-DD&lt;strong&gt;T&lt;/strong&gt;HH:MM:SS.SSS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬π ¬≤&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HH:MM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HH:MM:SS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HH:MM:SS.SSS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≤ / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Timestamps since unix epoch&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read ¬≥&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;now&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;¬π Missing components are assumed to be zero. Dates are stored and read in the UTC time zone, unless the format is followed by a timezone indicator ‚ÅΩ¬≤‚Åæ.&lt;/p&gt; &#xA;&lt;p&gt;¬≤ This format may be optionally followed by a timezone indicator of the form &lt;code&gt;[+-]HH:MM&lt;/code&gt; or just &lt;code&gt;Z&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;¬≥ GRDB 2+ interprets numerical values as timestamps that fuel &lt;code&gt;Date(timeIntervalSince1970:)&lt;/code&gt;. Previous GRDB versions used to interpret numbers as &lt;a href=&#34;https://en.wikipedia.org/wiki/Julian_day&#34;&gt;julian days&lt;/a&gt;. Julian days are still supported, with the &lt;code&gt;Date(julianDay:)&lt;/code&gt; initializer.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years in the SQLite date formats is 0000-9999. You will need to pick another date format when your application needs to process years outside of this range. See the following chapters.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Date&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Date&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.execute(&#xA;    sql: &#34;INSERT INTO player (creationDate, ...) VALUES (?, ...)&#34;,&#xA;    arguments: [Date(), ...])&#xA;&#xA;let row = try Row.fetchOne(db, ...)!&#xA;let creationDate: Date = row[&#34;creationDate&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dates are stored using the format &#34;YYYY-MM-DD HH:MM:SS.SSS&#34; in the UTC time zone. It is precise to the millisecond.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this format was chosen because it is the only format that is:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Comparable (&lt;code&gt;ORDER BY date&lt;/code&gt; works)&lt;/li&gt; &#xA;  &lt;li&gt;Comparable with the SQLite keyword CURRENT_TIMESTAMP (&lt;code&gt;WHERE date &amp;gt; CURRENT_TIMESTAMP&lt;/code&gt; works)&lt;/li&gt; &#xA;  &lt;li&gt;Able to feed &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Precise enough&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years in the SQLite date format is 0000-9999. You will experience problems with years outside of this range, such as decoding errors, or invalid date computations with &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some applications may prefer another date format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some may prefer ISO-8601, with a &lt;code&gt;T&lt;/code&gt; separator.&lt;/li&gt; &#xA; &lt;li&gt;Some may prefer ISO-8601, with a time zone.&lt;/li&gt; &#xA; &lt;li&gt;Some may need to store years beyond the 0000-9999 range.&lt;/li&gt; &#xA; &lt;li&gt;Some may need sub-millisecond precision.&lt;/li&gt; &#xA; &lt;li&gt;Some may need exact &lt;code&gt;Date&lt;/code&gt; roundtrip.&lt;/li&gt; &#xA; &lt;li&gt;Etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;You should think twice before choosing a different date format:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ISO-8601 is about &lt;em&gt;exchange and communication&lt;/em&gt;, when SQLite is about &lt;em&gt;storage and data manipulation&lt;/em&gt;. Sharing the same representation in your database and in JSON files only provides a superficial convenience, and should be the least of your priorities. Don&#39;t store dates as ISO-8601 without understanding what you lose. For example, ISO-8601 time zones forbid database-level date comparison.&lt;/li&gt; &#xA; &lt;li&gt;Sub-millisecond precision and exact &lt;code&gt;Date&lt;/code&gt; roundtrip are not as obvious needs as it seems at first sight. Dates generally don&#39;t precisely roundtrip as soon as they leave your application anyway, because the other systems your app communicates with use their own date representation (the Android version of your app, the server your application is talking to, etc.) On top of that, &lt;code&gt;Date&lt;/code&gt; comparison is at least as hard and nasty as &lt;a href=&#34;https://www.google.com/search?q=floating+point+comparison+is+hard&#34;&gt;floating point comparison&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The customization of date format is explicit. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let date = Date()&#xA;let timeInterval = date.timeIntervalSinceReferenceDate&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO player (creationDate, ...) VALUES (?, ...)&#34;,&#xA;    arguments: [timeInterval, ...])&#xA;&#xA;if let row = try Row.fetchOne(db, ...) {&#xA;    let timeInterval: TimeInterval = row[&#34;creationDate&#34;]&#xA;    let creationDate = Date(timeIntervalSinceReferenceDate: timeInterval)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more date customization options, and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible&lt;/a&gt; if you want to define a Date-wrapping type with customized database representation.&lt;/p&gt; &#xA;&lt;h4&gt;DateComponents&lt;/h4&gt; &#xA;&lt;p&gt;DateComponents is indirectly supported, through the &lt;strong&gt;DatabaseDateComponents&lt;/strong&gt; helper type.&lt;/p&gt; &#xA;&lt;p&gt;DatabaseDateComponents reads date components from all &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;date formats supported by SQLite&lt;/a&gt;, and stores them in the format of your choice, from HH:MM to YYYY-MM-DD HH:MM:SS.SSS.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the range of valid years is 0000-9999. You will experience problems with years outside of this range, such as decoding errors, or invalid date computations with &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;SQLite date &amp;amp; time functions&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date&#34;&gt;Date&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;DatabaseDateComponents can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let components = DateComponents()&#xA;components.year = 1973&#xA;components.month = 9&#xA;components.day = 18&#xA;&#xA;// Store &#34;1973-09-18&#34;&#xA;let dbComponents = DatabaseDateComponents(components, format: .YMD)&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO player (birthDate, ...) VALUES (?, ...)&#34;,&#xA;    arguments: [dbComponents, ...])&#xA;&#xA;// Read &#34;1973-09-18&#34;&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT birthDate ...&#34;)!&#xA;let dbComponents: DatabaseDateComponents = row[&#34;birthDate&#34;]&#xA;dbComponents.format         // .YMD (the actual format found in the database)&#xA;dbComponents.dateComponents // DateComponents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NSNumber, NSDecimalNumber, and Decimal&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NSNumber&lt;/strong&gt; and &lt;strong&gt;Decimal&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is how GRDB supports the various data types supported by SQLite:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Integer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Double&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;String&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSNumber&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NSDecimalNumber&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Decimal&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Read / Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All three types can decode database integers and doubles:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let number = try NSNumber.fetchOne(db, sql: &#34;SELECT 10&#34;)            // NSNumber&#xA;let number = try NSDecimalNumber.fetchOne(db, sql: &#34;SELECT 1.23&#34;)   // NSDecimalNumber&#xA;let number = try Decimal.fetchOne(db, sql: &#34;SELECT -100&#34;)           // Decimal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All three types decode database strings as decimal numbers:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let number = try NSNumber.fetchOne(db, sql: &#34;SELECT &#39;10&#39;&#34;)          // NSDecimalNumber (sic)&#xA;let number = try NSDecimalNumber.fetchOne(db, sql: &#34;SELECT &#39;1.23&#39;&#34;) // NSDecimalNumber&#xA;let number = try Decimal.fetchOne(db, sql: &#34;SELECT &#39;-100&#39;&#34;)         // Decimal&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NSNumber&lt;/code&gt; and &lt;code&gt;NSDecimalNumber&lt;/code&gt; send 64-bit signed integers and doubles in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT INTO transfer VALUES (10)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSNumber(value: 10)])&#xA;&#xA;// INSERT INTO transfer VALUES (10.0)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSNumber(value: 10.0)])&#xA;&#xA;// INSERT INTO transfer VALUES (10)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSDecimalNumber(string: &#34;10.0&#34;)])&#xA;&#xA;// INSERT INTO transfer VALUES (10.5)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [NSDecimalNumber(string: &#34;10.5&#34;)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: since SQLite does not support decimal numbers, sending a non-integer &lt;code&gt;NSDecimalNumber&lt;/code&gt; can result in a loss of precision during the conversion to double.&lt;/p&gt; &#xA;   &lt;p&gt;Instead of sending non-integer &lt;code&gt;NSDecimalNumber&lt;/code&gt; to the database, you may prefer:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Send &lt;code&gt;Decimal&lt;/code&gt; instead (those store decimal strings in the database).&lt;/li&gt; &#xA;    &lt;li&gt;Send integers instead (for example, store amounts of cents instead of amounts of Euros).&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Decimal&lt;/code&gt; sends decimal strings in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT INTO transfer VALUES (&#39;10&#39;)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [Decimal(10)])&#xA;&#xA;// INSERT INTO transfer VALUES (&#39;10.5&#39;)&#xA;try db.execute(sql: &#34;INSERT INTO transfer VALUES (?)&#34;, arguments: [Decimal(string: &#34;10.5&#34;)!])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UUID&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;UUID&lt;/strong&gt; can be stored and fetched from the database just like other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GRDB stores uuids as 16-bytes data blobs, and decodes them from both 16-bytes data blobs and strings such as &#34;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Enums&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift enums&lt;/strong&gt; and generally all types that adopt the &lt;a href=&#34;https://developer.apple.com/library/tvos/documentation/Swift/Reference/Swift_RawRepresentable_Protocol/index.html&#34;&gt;RawRepresentable&lt;/a&gt; protocol can be stored and fetched from the database just like their raw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Color : Int {&#xA;    case red, white, rose&#xA;}&#xA;&#xA;enum Grape : String {&#xA;    case chardonnay, merlot, riesling&#xA;}&#xA;&#xA;// Declare empty DatabaseValueConvertible adoption&#xA;extension Color : DatabaseValueConvertible { }&#xA;extension Grape : DatabaseValueConvertible { }&#xA;&#xA;// Store&#xA;try db.execute(&#xA;    sql: &#34;INSERT INTO wine (grape, color) VALUES (?, ?)&#34;,&#xA;    arguments: [Grape.merlot, Color.red])&#xA;&#xA;// Read&#xA;let rows = try Row.fetchCursor(db, sql: &#34;SELECT * FROM wine&#34;)&#xA;while let row = try rows.next() {&#xA;    let grape: Grape = row[&#34;grape&#34;]&#xA;    let color: Color = row[&#34;color&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When a database value does not match any enum case&lt;/strong&gt;, you get a fatal error. This fatal error can be avoided with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;syrah&#39;&#34;)!&#xA;&#xA;row[0] as String  // &#34;syrah&#34;&#xA;row[0] as Grape?  // fatal error: could not convert &#34;syrah&#34; to Grape.&#xA;row[0] as Grape   // fatal error: could not convert &#34;syrah&#34; to Grape.&#xA;&#xA;let dbValue: DatabaseValue = row[0]&#xA;if dbValue.isNull {&#xA;    // Handle NULL&#xA;} else if let grape = Grape.fromDatabaseValue(dbValue) {&#xA;    // Handle valid grape&#xA;} else {&#xA;    // Handle unknown grape&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Value Types&lt;/h3&gt; &#xA;&lt;p&gt;Conversion to and from the database is based on the &lt;code&gt;DatabaseValueConvertible&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DatabaseValueConvertible {&#xA;    /// Returns a value that can be stored in the database.&#xA;    var databaseValue: DatabaseValue { get }&#xA;    &#xA;    /// Returns a value initialized from dbValue, if possible.&#xA;    static func fromDatabaseValue(_ dbValue: DatabaseValue) -&amp;gt; Self?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All types that adopt this protocol can be used like all other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;databaseValue&lt;/code&gt; property returns &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;, a type that wraps the five values supported by SQLite: NULL, Int64, Double, String and Data. Since DatabaseValue has no public initializer, use &lt;code&gt;DatabaseValue.null&lt;/code&gt;, or another type that already adopts the protocol: &lt;code&gt;1.databaseValue&lt;/code&gt;, &lt;code&gt;&#34;foo&#34;.databaseValue&lt;/code&gt;, etc. Conversion to DatabaseValue &lt;em&gt;must not&lt;/em&gt; fail.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;fromDatabaseValue()&lt;/code&gt; factory method returns an instance of your custom type if the database value contains a suitable value. If the database value does not contain a suitable value, such as &#34;foo&#34; for Date, &lt;code&gt;fromDatabaseValue&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; return nil (GRDB will interpret this nil result as a conversion error, and react accordingly).&lt;/p&gt; &#xA;&lt;p&gt;Value types that adopt both &lt;code&gt;DatabaseValueConvertible&lt;/code&gt; and an archival protocol (&lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&#34;&gt;Codable, Encodable or Decodable&lt;/a&gt;) are automatically coded and decoded from JSON arrays and objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Encoded as a JSON object in the database:&#xA;struct Color: Codable, DatabaseValueConvertible {&#xA;    var r: Double&#xA;    var g: Double&#xA;    var b: Double&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For such codable value types, GRDB uses the standard &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsondecoder&#34;&gt;JSONDecoder&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsonencoder&#34;&gt;JSONEncoder&lt;/a&gt; from Foundation. By default, Data values are handled with the &lt;code&gt;.base64&lt;/code&gt; strategy, Date with the &lt;code&gt;.millisecondsSince1970&lt;/code&gt; strategy, and non conforming floats with the &lt;code&gt;.throw&lt;/code&gt; strategy.&lt;/p&gt; &#xA;&lt;p&gt;In order to customize the JSON format, provide a custom implementation of the &lt;code&gt;DatabaseValueConvertible&lt;/code&gt; requirements.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: standard sequences such as &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, or &lt;code&gt;Dictionary&lt;/code&gt; do not conform to &lt;code&gt;DatabaseValueConvertible&lt;/code&gt;, even conditionally. You won&#39;t be able to directly fetch or store arrays, sets, or dictionaries as JSON database values. You can get free JSON support from these standard types when they are embedded as properties of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;, though.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Prepared Statements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prepared Statements&lt;/strong&gt; let you prepare an SQL query and execute it later, several times if you need, with different arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    let insertSQL = &#34;INSERT INTO player (name, score) VALUES (:name, :score)&#34;&#xA;    let insertStatement = try db.makeStatement(sql: insertSQL)&#xA;    &#xA;    let selectSQL = &#34;SELECT * FROM player WHERE name = ?&#34;&#xA;    let selectStatement = try db.makeStatement(sql: selectSQL)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; and colon-prefixed keys like &lt;code&gt;:name&lt;/code&gt; in the SQL query are the statement arguments. You set them with arrays or dictionaries (arguments are actually of type &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/statementarguments&#34;&gt;StatementArguments&lt;/a&gt;, which happens to adopt the ExpressibleByArrayLiteral and ExpressibleByDictionaryLiteral protocols).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;insertStatement.arguments = [&#34;name&#34;: &#34;Arthur&#34;, &#34;score&#34;: 1000]&#xA;selectStatement.arguments = [&#34;Arthur&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can create a prepared statement with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let insertStatement = try db.makeStatement(literal: &#34;INSERT ...&#34;)&#xA;let selectStatement = try db.makeStatement(literal: &#34;SELECT ...&#34;)&#xA;//                                         ~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Statements can be executed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try insertStatement.execute()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Statements can be used wherever a raw SQL query string would fit (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;fetch queries&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rows = try Row.fetchCursor(selectStatement)    // A Cursor of Row&#xA;let players = try Player.fetchAll(selectStatement) // [Player]&#xA;let players = try Player.fetchSet(selectStatement) // Set&amp;lt;Player&amp;gt;&#xA;let player = try Player.fetchOne(selectStatement)  // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the arguments at the moment of the statement execution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try insertStatement.execute(arguments: [&#34;name&#34;: &#34;Arthur&#34;, &#34;score&#34;: 1000])&#xA;let player = try Player.fetchOne(selectStatement, arguments: [&#34;Arthur&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you want to build multiple statements joined with a semicolon&lt;/strong&gt;, use the &lt;code&gt;allStatements&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statements = try db.allStatements(sql: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    INSERT INTO player (name, score) VALUES (?, ?);&#xA;    &#34;&#34;&#34;, arguments: [&#34;Arthur&#34;, 100, &#34;O&#39;Brien&#34;, 1000])&#xA;while let statement = try statements.next() {&#xA;    try statement.execute()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;allStatements&lt;/code&gt; also supports &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statements = try db.allStatements(literal: &#34;&#34;&#34;&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;Arthur&#34;), \(100));&#xA;    INSERT INTO player (name, score) VALUES (\(&#34;O&#39;Brien&#34;), \(1000));&#xA;    &#34;&#34;&#34;)&#xA;while let statement = try statements.next() {&#xA;    try statement.execute()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can turn the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;cursor&lt;/a&gt; returned from &lt;code&gt;allStatements&lt;/code&gt; into a regular Swift array, but in this case make sure all individual statements can compile even if the previous ones were not run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// OK: Array of statements&#xA;let statements = try Array(db.allStatements(sql: &#34;&#34;&#34;&#xA;    INSERT ...; &#xA;    UPDATE ...; &#xA;    SELECT ...;&#xA;    &#34;&#34;&#34;))&#xA;&#xA;// FAILURE: Can&#39;t build an array of statements since &#xA;// the INSERT won&#39;t compile until CREATE TABLE is run.&#xA;let statements = try Array(db.allStatements(sql: &#34;&#34;&#34;&#xA;    CREATE TABLE player ...; &#xA;    INSERT INTO player ...;&#xA;    &#34;&#34;&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;code&gt;Database.execute(sql:)&lt;/code&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;Executing Updates&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: it is a programmer error to reuse a prepared statement that has failed: GRDB may crash if you do so.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For more information about prepared statements, see the &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/statement&#34;&gt;Statement reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prepared Statements Cache&lt;/h3&gt; &#xA;&lt;p&gt;When the same query will be used several times in the lifetime of your application, you may feel a natural desire to cache prepared statements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t cache statements yourself.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is because you don&#39;t have the necessary tools. Statements are tied to specific SQLite connections and dispatch queues which you don&#39;t manage yourself, especially when you use &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasepool&#34;&gt;database pools&lt;/a&gt;. A change in the database schema &lt;a href=&#34;https://www.sqlite.org/compile.html#max_schema_retry&#34;&gt;may, or may not&lt;/a&gt; invalidate a statement.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Instead, use the &lt;code&gt;cachedStatement&lt;/code&gt; method. GRDB does all the hard caching and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#memory-management&#34;&gt;memory management&lt;/a&gt; stuff for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statement = try db.cachedStatement(sql: sql)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cached statements also support &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statement = try db.cachedStatement(literal: &#34;INSERT ...&#34;)&#xA;//                                     ~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Should a cached prepared statement throw an error, don&#39;t reuse it (it is a programmer error). Instead, reload one from the cache.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Custom SQL Functions and Aggregates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite lets you define SQL functions and aggregates.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A custom SQL function or aggregate extends SQLite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT reverse(name) FROM player;   -- custom function&#xA;SELECT maxLength(name) FROM player; -- custom aggregate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions&#34;&gt;Custom SQL Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-aggregates&#34;&gt;Custom Aggregates&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom SQL Functions&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;em&gt;function&lt;/em&gt; argument takes an array of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;, and returns any valid &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) The number of database values is guaranteed to be &lt;em&gt;argumentCount&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SQLite has the opportunity to perform additional optimizations when functions are &#34;pure&#34;, which means that their result only depends on their arguments. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let reverse = DatabaseFunction(&#34;reverse&#34;, argumentCount: 1, pure: true) { (values: [DatabaseValue]) in&#xA;    // Extract string value, if any...&#xA;    guard let string = String.fromDatabaseValue(values[0]) else {&#xA;        return nil&#xA;    }&#xA;    // ... and return reversed string:&#xA;    return String(string.reversed())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You make a function available to a database connection through its configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.add(function: reverse)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    // &#34;oof&#34;&#xA;    try String.fetchOne(db, sql: &#34;SELECT reverse(&#39;foo&#39;)&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Functions can take a variable number of arguments:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you don&#39;t provide any explicit &lt;em&gt;argumentCount&lt;/em&gt;, the function can take any number of arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let averageOf = DatabaseFunction(&#34;averageOf&#34;, pure: true) { (values: [DatabaseValue]) in&#xA;    let doubles = values.compactMap { Double.fromDatabaseValue($0) }&#xA;    return doubles.reduce(0, +) / Double(doubles.count)&#xA;}&#xA;db.add(function: averageOf)&#xA;&#xA;// 2.0&#xA;try Double.fetchOne(db, sql: &#34;SELECT averageOf(1, 2, 3)&#34;)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Functions can throw:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sqrt = DatabaseFunction(&#34;sqrt&#34;, argumentCount: 1, pure: true) { (values: [DatabaseValue]) in&#xA;    guard let double = Double.fromDatabaseValue(values[0]) else {&#xA;        return nil&#xA;    }&#xA;    guard double &amp;gt;= 0 else {&#xA;        throw DatabaseError(message: &#34;invalid negative number&#34;)&#xA;    }&#xA;    return sqrt(double)&#xA;}&#xA;db.add(function: sqrt)&#xA;&#xA;// SQLite error 1 with statement `SELECT sqrt(-1)`: invalid negative number&#xA;try Double.fetchOne(db, sql: &#34;SELECT sqrt(-1)&#34;)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use custom functions in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT reverseString(&#34;name&#34;) FROM player&#xA;Player.select(reverseString(nameColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB ships with built-in SQL functions that perform unicode-aware string transformations.&lt;/strong&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#unicode&#34;&gt;Unicode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Aggregates&lt;/h3&gt; &#xA;&lt;p&gt;Before registering a custom aggregate, you need to define a type that adopts the &lt;code&gt;DatabaseAggregate&lt;/code&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol DatabaseAggregate {&#xA;    // Initializes an aggregate&#xA;    init()&#xA;    &#xA;    // Called at each step of the aggregation&#xA;    mutating func step(_ dbValues: [DatabaseValue]) throws&#xA;    &#xA;    // Returns the final result&#xA;    func finalize() throws -&amp;gt; DatabaseValueConvertible?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MaxLength : DatabaseAggregate {&#xA;    var maxLength: Int = 0&#xA;    &#xA;    mutating func step(_ dbValues: [DatabaseValue]) {&#xA;        // At each step, extract string value, if any...&#xA;        guard let string = String.fromDatabaseValue(dbValues[0]) else {&#xA;            return&#xA;        }&#xA;        // ... and update the result&#xA;        let length = string.count&#xA;        if length &amp;gt; maxLength {&#xA;            maxLength = length&#xA;        }&#xA;    }&#xA;    &#xA;    func finalize() -&amp;gt; DatabaseValueConvertible? {&#xA;        maxLength&#xA;    }&#xA;}&#xA;&#xA;let maxLength = DatabaseFunction(&#xA;    &#34;maxLength&#34;,&#xA;    argumentCount: 1,&#xA;    pure: true,&#xA;    aggregate: MaxLength.self)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions&#34;&gt;custom SQL Functions&lt;/a&gt;, you make an aggregate function available to a database connection through its configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.add(function: maxLength)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    // Some Int&#xA;    try Int.fetchOne(db, sql: &#34;SELECT maxLength(name) FROM player&#34;)!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;step&lt;/code&gt; method of the aggregate takes an array of &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt;. This array contains as many values as the &lt;em&gt;argumentCount&lt;/em&gt; parameter (or any number of values, when &lt;em&gt;argumentCount&lt;/em&gt; is omitted).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;finalize&lt;/code&gt; method of the aggregate returns the final aggregated &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.).&lt;/p&gt; &#xA;&lt;p&gt;SQLite has the opportunity to perform additional optimizations when aggregates are &#34;pure&#34;, which means that their result only depends on their inputs. So make sure to set the &lt;em&gt;pure&lt;/em&gt; argument to true when possible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use custom aggregates in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT maxLength(&#34;name&#34;) FROM player&#xA;let request = Player.select(maxLength.apply(nameColumn))&#xA;try Int.fetchOne(db, request) // Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Database Schema Introspection&lt;/h2&gt; &#xA;&lt;p&gt;GRDB comes with a set of schema introspection methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // Bool, true if the table exists&#xA;    try db.tableExists(&#34;player&#34;)&#xA;    &#xA;    // [ColumnInfo], the columns in the table&#xA;    try db.columns(in: &#34;player&#34;)&#xA;    &#xA;    // PrimaryKeyInfo&#xA;    try db.primaryKey(&#34;player&#34;)&#xA;    &#xA;    // [ForeignKeyInfo], the foreign keys defined on the table&#xA;    try db.foreignKeys(on: &#34;player&#34;)&#xA;    &#xA;    // [IndexInfo], the indexes defined on the table&#xA;    try db.indexes(on: &#34;player&#34;)&#xA;    &#xA;    // Bool, true if column(s) is a unique key (primary key or unique index)&#xA;    try db.table(&#34;player&#34;, hasUniqueKey: [&#34;email&#34;])&#xA;}&#xA;&#xA;// Bool, true if argument is the name of an internal SQLite table&#xA;Database.isSQLiteInternalTable(...)&#xA;&#xA;// Bool, true if argument is the name of an internal GRDB table&#xA;Database.isGRDBInternalTable(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Row Adapters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Row adapters let you present database rows in the way expected by the row consumers.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;They basically help two incompatible row interfaces to work together. For example, a row consumer expects a column named &#34;consumed&#34;, but the produced row has a column named &#34;produced&#34;.&lt;/p&gt; &#xA;&lt;p&gt;In this case, the &lt;code&gt;ColumnMapping&lt;/code&gt; row adapter comes in handy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Turn the &#39;produced&#39; column into &#39;consumed&#39;:&#xA;let adapter = ColumnMapping([&#34;consumed&#34;: &#34;produced&#34;])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT &#39;Hello&#39; AS produced&#34;, adapter: adapter)!&#xA;&#xA;// [consumed:&#34;Hello&#34;]&#xA;print(row)&#xA;&#xA;// &#34;Hello&#34;&#xA;print(row[&#34;consumed&#34;])&#xA;&#xA;// ‚ñø [consumed:&#34;Hello&#34;]&#xA;//   unadapted: [produced:&#34;Hello&#34;]&#xA;print(row.debugDescription)&#xA;&#xA;// [produced:&#34;Hello&#34;]&#xA;print(row.unadapted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Record types&lt;/a&gt; are typical row consumers that expect database rows to have a specific layout so that they can decode them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct MyRecord: Decodable, FetchableRecord {&#xA;    var consumed: String&#xA;}&#xA;let record = try MyRecord.fetchOne(db, sql: &#34;SELECT &#39;Hello&#39; AS produced&#34;, adapter: adapter)!&#xA;print(record.consumed) // &#34;Hello&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are several situations where row adapters are useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;They help disambiguate columns with identical names, which may happen when you select columns from several tables. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt; for an example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;They help when SQLite outputs unexpected column names, which may happen with some subqueries. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#renamecolumnadapter&#34;&gt;RenameColumnAdapter&lt;/a&gt; for an example.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available row adapters are described below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columnmapping&#34;&gt;ColumnMapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#emptyrowadapter&#34;&gt;EmptyRowAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rangerowadapter&#34;&gt;RangeRowAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#renamecolumnadapter&#34;&gt;RenameColumnAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#scopeadapter&#34;&gt;ScopeAdapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#suffixrowadapter&#34;&gt;SuffixRowAdapter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ColumnMapping&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ColumnMapping&lt;/code&gt; renames columns. Build one with a dictionary whose keys are adapted column names, and values the column names in the raw row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [newA:0, newB:1]&#xA;let adapter = ColumnMapping([&#34;newA&#34;: &#34;a&#34;, &#34;newB&#34;: &#34;b&#34;])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that columns that are not present in the dictionary are not present in the resulting adapted row.&lt;/p&gt; &#xA;&lt;h3&gt;EmptyRowAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;EmptyRowAdapter&lt;/code&gt; hides all columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let adapter = EmptyRowAdapter()&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;row.isEmpty // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This limit adapter may turn out useful in some narrow use cases. You&#39;ll be happy to find it when you need it.&lt;/p&gt; &#xA;&lt;h3&gt;RangeRowAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;RangeRowAdapter&lt;/code&gt; only exposes a range of columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [b:1]&#xA;let adapter = RangeRowAdapter(1..&amp;lt;2)&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RenameColumnAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;RenameColumnAdapter&lt;/code&gt; lets you transform column names with a function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [arrr:0, brrr:1, crrr:2]&#xA;let adapter = RenameColumnAdapter { column in column + &#34;rrr&#34; }&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adapter may turn out useful, for example, when subqueries contain duplicated column names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sql = &#34;SELECT * FROM (SELECT 1 AS id, 2 AS id)&#34;&#xA;&#xA;// Prints [&#34;id&#34;, &#34;id:1&#34;]&#xA;// Note the &#34;id:1&#34; column, generated by SQLite.&#xA;let row = try Row.fetchOne(db, sql: sql)!&#xA;print(Array(row.columnNames))&#xA;&#xA;// Drop the `:...` suffix, and prints [&#34;id&#34;, &#34;id&#34;]&#xA;let adapter = RenameColumnAdapter { String($0.prefix(while: { $0 != &#34;:&#34; })) }&#xA;let adaptedRow = try Row.fetchOne(db, sql: sql, adapter: adapter)!&#xA;print(Array(adaptedRow.columnNames))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ScopeAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ScopeAdapter&lt;/code&gt; defines &lt;em&gt;row scopes&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let adapter = ScopeAdapter([&#xA;    &#34;left&#34;: RangeRowAdapter(0..&amp;lt;2),&#xA;    &#34;right&#34;: RangeRowAdapter(2..&amp;lt;4)])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ScopeAdapter does not change the columns and values of the fetched row. Instead, it defines &lt;em&gt;scopes&lt;/em&gt;, which you access through the &lt;code&gt;Row.scopes&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;row                   // [a:0 b:1 c:2 d:3]&#xA;row.scopes[&#34;left&#34;]    // [a:0 b:1]&#xA;row.scopes[&#34;right&#34;]   // [c:2 d:3]&#xA;row.scopes[&#34;missing&#34;] // nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scopes can be nested:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let adapter = ScopeAdapter([&#xA;    &#34;left&#34;: ScopeAdapter([&#xA;        &#34;left&#34;: RangeRowAdapter(0..&amp;lt;1),&#xA;        &#34;right&#34;: RangeRowAdapter(1..&amp;lt;2)]),&#xA;    &#34;right&#34;: ScopeAdapter([&#xA;        &#34;left&#34;: RangeRowAdapter(2..&amp;lt;3),&#xA;        &#34;right&#34;: RangeRowAdapter(3..&amp;lt;4)])&#xA;    ])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&#34;, adapter: adapter)!&#xA;&#xA;let leftRow = row.scopes[&#34;left&#34;]!&#xA;leftRow.scopes[&#34;left&#34;]  // [a:0]&#xA;leftRow.scopes[&#34;right&#34;] // [b:1]&#xA;&#xA;let rightRow = row.scopes[&#34;right&#34;]!&#xA;rightRow.scopes[&#34;left&#34;]  // [c:2]&#xA;rightRow.scopes[&#34;right&#34;] // [d:3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any adapter can be extended with scopes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let baseAdapter = RangeRowAdapter(0..&amp;lt;2)&#xA;let adapter = ScopeAdapter(base: baseAdapter, scopes: [&#xA;    &#34;remainder&#34;: SuffixRowAdapter(fromIndex: 2)])&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c, 3 AS d&#34;, adapter: adapter)!&#xA;&#xA;row // [a:0 b:1]&#xA;row.scopes[&#34;remainder&#34;] // [c:2 d:3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see how &lt;code&gt;ScopeAdapter&lt;/code&gt; can be used, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SuffixRowAdapter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SuffixRowAdapter&lt;/code&gt; hides the first columns in a row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// [b:1 c:2]&#xA;let adapter = SuffixRowAdapter(fromIndex: 1)&#xA;let row = try Row.fetchOne(db, sql: &#34;SELECT 0 AS a, 1 AS b, 2 AS c&#34;, adapter: adapter)!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Raw SQLite Pointers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;If not all SQLite APIs are exposed in GRDB, you can still use the &lt;a href=&#34;https://www.sqlite.org/c3ref/intro.html&#34;&gt;SQLite C Interface&lt;/a&gt; and call &lt;a href=&#34;https://www.sqlite.org/c3ref/funclist.html&#34;&gt;SQLite C functions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Those functions are embedded right into the GRDB module, regardless of the underlying SQLite implementation (system SQLite, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;SQLCipher&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import GRDB&#xA;&#xA;let sqliteVersion = String(cString: sqlite3_libversion())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Raw pointers to database connections and statements are available through the &lt;code&gt;Database.sqliteConnection&lt;/code&gt; and &lt;code&gt;Statement.sqliteStatement&lt;/code&gt; properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    // The raw pointer to a database connection:&#xA;    let sqliteConnection = db.sqliteConnection&#xA;&#xA;    // The raw pointer to a statement:&#xA;    let statement = try db.makeStatement(sql: &#34;SELECT ...&#34;)&#xA;    let sqliteStatement = statement.sqliteStatement&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Those pointers are owned by GRDB: don&#39;t close connections or finalize statements created by GRDB.&lt;/li&gt; &#xA;  &lt;li&gt;GRDB opens SQLite connections in the &#34;&lt;a href=&#34;https://www.sqlite.org/threadsafe.html&#34;&gt;multi-thread mode&lt;/a&gt;&#34;, which (oddly) means that &lt;strong&gt;they are not thread-safe&lt;/strong&gt;. Make sure you touch raw databases and statements inside their dedicated dispatch queues.&lt;/li&gt; &#xA;  &lt;li&gt;Use the raw SQLite C Interface at your own risk. GRDB won&#39;t prevent you from shooting yourself in the foot.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Records&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;On top of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;SQLite API&lt;/a&gt;, GRDB provides protocols and a class&lt;/strong&gt; that help manipulating database rows as regular objects named &#34;records&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    if var place = try Place.fetchOne(db, id: 1) {&#xA;        place.isFavorite = true&#xA;        try place.update(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you need to open a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;, and &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseschema&#34;&gt;create database tables&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;To define your custom records, you subclass the ready-made &lt;code&gt;Record&lt;/code&gt; class, or you extend your structs and classes with protocols that come with focused sets of features: fetching methods, persistence methods, record comparison...&lt;/p&gt; &#xA;&lt;p&gt;Extending structs with record protocols is more &#34;swifty&#34;. Subclassing the Record class is more &#34;classic&#34;. You can choose either way. See some &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&#34;&gt;examples of record definitions&lt;/a&gt;, and the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods&#34;&gt;list of record methods&lt;/a&gt; for an overview.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are familiar with Core Data&#39;s NSManagedObject or Realm&#39;s Object, you may experience a cultural shock: GRDB records are not uniqued, do not auto-update, and do not lazy-load. This is both a purpose, and a consequence of protocol-oriented programming. You should read &lt;a href=&#34;https://medium.com/@gwendal.roue/how-to-build-an-ios-application-with-sqlite-and-grdb-swift-d023a06c29b3&#34;&gt;How to build an iOS application with SQLite and GRDB.swift&lt;/a&gt; for a general introduction.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: after you have read this chapter, check the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GoodPracticesForDesigningRecordTypes.md&#34;&gt;Good Practices for Designing Record Types&lt;/a&gt; Guide.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample apps that uses records.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#inserting-records&#34;&gt;Inserting Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-records&#34;&gt;Fetching Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#updating-records&#34;&gt;Updating Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#deleting-records&#34;&gt;Deleting Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#counting-records&#34;&gt;Counting Records&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Protocols and the Record Class&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord Protocol&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&#34;&gt;Persistence Methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods-and-the-returning-clause&#34;&gt;Persistence Methods and the &lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&#34;&gt;Persistence Callbacks&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-customization-options&#34;&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Records in a Glance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&#34;&gt;Examples of Record Definitions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods&#34;&gt;List of Record Methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inserting Records&lt;/h3&gt; &#xA;&lt;p&gt;To insert a record in the database, call the &lt;code&gt;insert&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = Player(name: &#34;Arthur&#34;, email: &#34;arthur@example.com&#34;)&#xA;try player.insert(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; &lt;code&gt;insert&lt;/code&gt; is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Fetching Records&lt;/h3&gt; &#xA;&lt;p&gt;To fetch records from the database, call a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching method&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let arthur = try Player.fetchOne(db,            // Player?&#xA;    sql: &#34;SELECT * FROM players WHERE name = ?&#34;,&#xA;    arguments: [&#34;Arthur&#34;])&#xA;&#xA;let bestPlayers = try Player                    // [Player]&#xA;    .order(Column(&#34;score&#34;).desc)&#xA;    .limit(10)&#xA;    .fetchAll(db)&#xA;    &#xA;let spain = try Country.fetchOne(db, id: &#34;ES&#34;)  // Country?&#xA;let italy = try Country.find(db, id: &#34;IT&#34;)      // Country&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; Fetching from raw SQL is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; Fetching without SQL, using the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;, is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt both &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Updating Records&lt;/h3&gt; &#xA;&lt;p&gt;To update a record in the database, call the &lt;code&gt;update&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var player: Player = ...&#xA;player.score = 1000&#xA;try player.update(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;avoid useless updates&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// does not hit the database if score has not changed&#xA;try player.updateChanges(db) {&#xA;    $0.score = 1000&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt; for batch updates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player&#xA;    .filter(Column(&#34;team&#34;) == &#34;red&#34;)&#xA;    .updateAll(db, Column(&#34;score&#34;) += 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; update methods are available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol. Batch updates are available on the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Deleting Records&lt;/h3&gt; &#xA;&lt;p&gt;To delete a record in the database, call the &lt;code&gt;delete&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player: Player = ...&#xA;try player.delete(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also delete by primary key, unique key, or perform batch deletes (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#delete-requests&#34;&gt;Delete Requests&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.deleteOne(db, id: 1)&#xA;try Player.deleteOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Country.deleteAll(db, ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;try Player&#xA;    .filter(Column(&#34;email&#34;) == nil)&#xA;    .deleteAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; delete methods are available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol. Batch deletes are available on the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;h3&gt;Counting Records&lt;/h3&gt; &#xA;&lt;p&gt;To count records, call the &lt;code&gt;fetchCount&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let playerCount: Int = try Player.fetchCount(db)&#xA;&#xA;let playerWithEmailCount: Int = try Player&#xA;    .filter(Column(&#34;email&#34;) == nil)&#xA;    .fetchCount(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;üëâ&lt;/span&gt; &lt;code&gt;fetchCount&lt;/code&gt; is available for subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, and types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol.&lt;/p&gt; &#xA;&lt;p&gt;Details follow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-customization-options&#34;&gt;Record Customization Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#examples-of-record-definitions&#34;&gt;Examples of Record Definitions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods&#34;&gt;List of Record Methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Record Protocols Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB ships with three record protocols&lt;/strong&gt;. Your own types will adopt one or several of them, according to the abilities you want to extend your types with.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; is able to &lt;strong&gt;decode database rows&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: FetchableRecord { ... }&#xA;let places = try dbQueue.read { db in&#xA;    try Place.fetchAll(db, sql: &#34;SELECT * FROM place&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;FetchableRecord&lt;/code&gt; can derive its implementation from the standard &lt;code&gt;Decodable&lt;/code&gt; protocol. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;code&gt;FetchableRecord&lt;/code&gt; can decode database rows, but it is not able to build SQL requests for you. For that, you also need &lt;code&gt;TableRecord&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; is able to &lt;strong&gt;generate SQL queries&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord { ... }&#xA;let placeCount = try dbQueue.read { db in&#xA;    // Generates and runs `SELECT COUNT(*) FROM place`&#xA;    try Place.fetchCount(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When a type adopts both &lt;code&gt;TableRecord&lt;/code&gt; and &lt;code&gt;FetchableRecord&lt;/code&gt;, it can load from those requests:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord, FetchableRecord { ... }&#xA;try dbQueue.read { db in&#xA;    let places = try Place.order(Column(&#34;title&#34;)).fetchAll(db)&#xA;    let paris = try Place.fetchOne(id: 1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; is able to &lt;strong&gt;write&lt;/strong&gt;: it can create, update, and delete rows in the database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place : PersistableRecord { ... }&#xA;try dbQueue.write { db in&#xA;    try Place.delete(db, id: 1)&#xA;    try Place(...).insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A persistable record can also &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;compare&lt;/a&gt; itself against other records, and avoid useless database updates.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: &lt;code&gt;PersistableRecord&lt;/code&gt; can derive its implementation from the standard &lt;code&gt;Encodable&lt;/code&gt; protocol. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FetchableRecord Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The FetchableRecord protocol grants fetching methods to any type&lt;/strong&gt; that can be built from a database row:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    /// Row initializer&#xA;    init(row: Row) throws&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To use FetchableRecord&lt;/strong&gt;, subclass the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, or adopt it explicitly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var coordinate: CLLocationCoordinate2D&#xA;}&#xA;&#xA;extension Place : FetchableRecord {&#xA;    init(row: Row) {&#xA;        id = row[&#34;id&#34;]&#xA;        title = row[&#34;title&#34;]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[&#34;latitude&#34;],&#xA;            longitude: row[&#34;longitude&#34;])&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rows also accept column enums:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Place : FetchableRecord {&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, latitude, longitude&#xA;    }&#xA;    &#xA;    init(row: Row) {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-values&#34;&gt;column values&lt;/a&gt; for more information about the &lt;code&gt;row[]&lt;/code&gt; subscript.&lt;/p&gt; &#xA;&lt;p&gt;When your record type adopts the standard Decodable protocol, you don&#39;t have to provide the implementation for &lt;code&gt;init(row:)&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// That&#39;s all&#xA;struct Player: Decodable, FetchableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FetchableRecord allows adopting types to be fetched from SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Place.fetchCursor(db, sql: &#34;SELECT ...&#34;, arguments:...) // A Cursor of Place&#xA;try Place.fetchAll(db, sql: &#34;SELECT ...&#34;, arguments:...)    // [Place]&#xA;try Place.fetchSet(db, sql: &#34;SELECT ...&#34;, arguments:...)    // Set&amp;lt;Place&amp;gt;&#xA;try Place.fetchOne(db, sql: &#34;SELECT ...&#34;, arguments:...)    // Place?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt;, &lt;code&gt;fetchSet&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods. See &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/statementarguments&#34;&gt;StatementArguments&lt;/a&gt; for more information about the query arguments.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: for performance reasons, the same row argument to &lt;code&gt;init(row:)&lt;/code&gt; is reused during the iteration of a fetch query. If you want to keep the row for later use, make sure to store a copy: &lt;code&gt;self.row = row.copy()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;FetchableRecord.init(row:)&lt;/code&gt; initializer fits the needs of most applications. But some application are more demanding than others. When FetchableRecord does not exactly provide the support you need, have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&#34;&gt;Beyond FetchableRecord&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;TableRecord Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The TableRecord protocol&lt;/strong&gt; generates SQL for you. To use TableRecord, subclass the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, or adopt it explicitly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol TableRecord {&#xA;    static var databaseTableName: String { get }&#xA;    static var databaseSelection: [any SQLSelectable] { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;databaseSelection&lt;/code&gt; type property is optional, and documented in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt; chapter.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;databaseTableName&lt;/code&gt; type property is the name of a database table. By default, it is derived from the type name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord { }&#xA;print(Place.databaseTableName) // prints &#34;place&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Place: &lt;code&gt;place&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Country: &lt;code&gt;country&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;PostalAddress: &lt;code&gt;postalAddress&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTPRequest: &lt;code&gt;httpRequest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;TOEFL: &lt;code&gt;toefl&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can still provide a custom table name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: TableRecord {&#xA;    static let databaseTableName = &#34;location&#34;&#xA;}&#xA;print(Place.databaseTableName) // prints &#34;location&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subclasses of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class must always override their superclass&#39;s &lt;code&gt;databaseTableName&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Place: Record {&#xA;    override class var databaseTableName: String { &#34;place&#34; }&#xA;}&#xA;print(Place.databaseTableName) // prints &#34;place&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a type adopts both TableRecord and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;, it can be fetched using the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM place WHERE name = &#39;Paris&#39;&#xA;let paris = try Place.filter(nameColumn == &#34;Paris&#34;).fetchOne(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TableRecord can also fetch deal with primary and unique keys: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-by-key&#34;&gt;Fetching by Key&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#testing-for-record-existence&#34;&gt;Testing for Record Existence&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;PersistableRecord Protocol&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB record types can create, update, and delete rows in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Those abilities are granted by three protocols:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Defines how a record encodes itself into the database&#xA;protocol EncodableRecord {&#xA;    /// Defines the values persisted in the database&#xA;    func encode(to container: inout PersistenceContainer) throws&#xA;}&#xA;&#xA;// Adds persistence methods&#xA;protocol MutablePersistableRecord: TableRecord, EncodableRecord {&#xA;    /// Optional method that lets your adopting type store its rowID upon&#xA;    /// successful insertion. Don&#39;t call it directly: it is called for you.&#xA;    mutating func didInsert(_ inserted: InsertionSuccess)&#xA;}&#xA;&#xA;// Adds immutability&#xA;protocol PersistableRecord: MutablePersistableRecord {&#xA;    /// Non-mutating version of the optional didInsert(_:)&#xA;    func didInsert(_ inserted: InsertionSuccess)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yes, three protocols instead of one. Here is how you pick one or the other:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your type is a class&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;. On top of that, implement &lt;code&gt;didInsert(_:)&lt;/code&gt; if the database table has an auto-incremented primary key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If your type is a struct, and the database table has an auto-incremented primary key&lt;/strong&gt;, choose &lt;code&gt;MutablePersistableRecord&lt;/code&gt;, and implement &lt;code&gt;didInsert(_:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Otherwise&lt;/strong&gt;, choose &lt;code&gt;PersistableRecord&lt;/code&gt;, and ignore &lt;code&gt;didInsert(_:)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;encode(to:)&lt;/code&gt; method defines which &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.) are assigned to database columns.&lt;/p&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;didInsert&lt;/code&gt; method lets the adopting type store its rowID after successful insertion, and is only useful for tables that have an auto-incremented primary key. It is called from a protected dispatch queue, and serialized with all database updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To use the persistable protocols&lt;/strong&gt;, subclass the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, or adopt one of them explicitly. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Place : MutablePersistableRecord {&#xA;    /// The values persisted in the database&#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[&#34;id&#34;] = id&#xA;        container[&#34;title&#34;] = title&#xA;        container[&#34;latitude&#34;] = coordinate.latitude&#xA;        container[&#34;longitude&#34;] = coordinate.longitude&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(_ inserted: InsertionSuccess) {&#xA;        id = inserted.rowID&#xA;    }&#xA;}&#xA;&#xA;var paris = Place(&#xA;    id: nil,&#xA;    title: &#34;Paris&#34;,&#xA;    coordinate: CLLocationCoordinate2D(latitude: 48.8534100, longitude: 2.3488000))&#xA;&#xA;try paris.insert(db)&#xA;paris.id   // some value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Persistence containers also accept column enums:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Place : MutablePersistableRecord {&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, latitude, longitude&#xA;    }&#xA;    &#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When your record type adopts the standard Encodable protocol, you don&#39;t have to provide the implementation for &lt;code&gt;encode(to:)&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// That&#39;s all&#xA;struct Player: Encodable, MutablePersistableRecord {&#xA;    var id: Int64?&#xA;    var name: String&#xA;    var score: Int&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(_ inserted: InsertionSuccess) {&#xA;        id = inserted.rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Persistence Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; subclasses and types that adopt &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; are given methods that insert, update, and delete:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT&#xA;try place.insert(db)&#xA;let insertedPlace = try place.inserted(db) // non-mutating&#xA;&#xA;// UPDATE&#xA;try place.update(db)&#xA;try place.update(db, columns: [&#34;title&#34;])&#xA;&#xA;// Maybe UPDATE&#xA;try place.updateChanges(db, from: otherPlace)&#xA;try place.updateChanges(db) { $0.isFavorite = true }&#xA;try place.updateChanges(db) // Record class only&#xA;&#xA;// INSERT or UPDATE&#xA;try place.save(db)&#xA;let savedPlace = place.saved(db) // non-mutating&#xA;&#xA;// UPSERT&#xA;try place.upsert(db)&#xA;let insertedPlace = place.upsertAndFetch(db)&#xA;&#xA;// DELETE&#xA;try place.delete(db)&#xA;&#xA;// EXISTENCE CHECK&#xA;let exists = try place.exists(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#upsert&#34;&gt;Upsert&lt;/a&gt; below for more information about upserts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol comes with batch operations&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE&#xA;try Place.updateAll(db, ...)&#xA;&#xA;// DELETE&#xA;try Place.deleteAll(db)&#xA;try Place.deleteAll(db, ids:...)&#xA;try Place.deleteAll(db, keys:...)&#xA;try Place.deleteOne(db, id:...)&#xA;try Place.deleteOne(db, key:...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about batch updates, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#update-requests&#34;&gt;Update Requests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All persistence methods can throw a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&#34;&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;update&lt;/code&gt; and &lt;code&gt;updateChanges&lt;/code&gt; throw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&#34;&gt;RecordError&lt;/a&gt; if the database does not contain any row for the primary key of the record.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;save&lt;/code&gt; makes sure your values are stored in the database. It performs an UPDATE if the record has a non-null primary key, and then, if no row was modified, an INSERT. It directly performs an INSERT if the record has no primary key, or a null primary key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;deleteOne&lt;/code&gt; returns whether a database row was deleted or not. &lt;code&gt;deleteAll&lt;/code&gt; returns the number of deleted rows. &lt;code&gt;updateAll&lt;/code&gt; returns the number of updated rows. &lt;code&gt;updateChanges&lt;/code&gt; returns whether a database row was updated or not.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;All primary keys are supported&lt;/strong&gt;, including composite primary keys that span several columns, and the &lt;a href=&#34;https://www.sqlite.org/rowidtable.html&#34;&gt;hidden &lt;code&gt;rowid&lt;/code&gt; column&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To customize persistence methods&lt;/strong&gt;, you provide &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&#34;&gt;Persistence Callbacks&lt;/a&gt;, described below. Do not attempt at overriding the ready-made persistence methods.&lt;/p&gt; &#xA;&lt;h3&gt;Upsert&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sqlite.org/lang_UPSERT.html&#34;&gt;UPSERT&lt;/a&gt; is an SQLite feature that causes an INSERT to behave as an UPDATE or a no-op if the INSERT would violate a uniqueness constraint (primary key or unique index).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Upsert apis are available from SQLite 3.35.0+: iOS 15.0+, macOS 12.0+, tvOS 15.0+, watchOS 8.0+, or with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;SQLCipher&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: With regard to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#available-callbacks&#34;&gt;persistence callbacks&lt;/a&gt;, an upsert behaves exactly like an insert. In particular: the &lt;code&gt;aroundInsert(_:)&lt;/code&gt; and &lt;code&gt;didInsert(_:)&lt;/code&gt; callbacks reports the rowid of the inserted or updated row; &lt;code&gt;willUpdate&lt;/code&gt;, &lt;code&gt;aroundUdate&lt;/code&gt;, &lt;code&gt;didUdate&lt;/code&gt; are not called.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; provides three upsert methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;upsert(_:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Inserts or updates a record.&lt;/p&gt; &lt;p&gt;The upsert behavior is triggered by a violation of any uniqueness constraint on the table (primary key or unique index). In case of conflict, all columns but the primary key are overwritten with the inserted values:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Encodable, PersistableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;// INSERT INTO player (id, name, score)&#xA;// VALUES (1, &#39;Arthur&#39;, 1000)&#xA;// ON CONFLICT DO UPDATE SET&#xA;//   name = excluded.name,&#xA;//   score = excluded.score&#xA;let player = Player(id: 1, name: &#34;Arthur&#34;, score: 1000)&#xA;try player.upsert(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;upsertAndFetch(_:onConflict:doUpdate:)&lt;/code&gt; (requires &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; conformance)&lt;/p&gt; &lt;p&gt;Inserts or updates a record, and returns the upserted record.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;onConflict&lt;/code&gt; and &lt;code&gt;doUpdate&lt;/code&gt; arguments let you further control the upsert behavior. Make sure you check the &lt;a href=&#34;https://www.sqlite.org/lang_UPSERT.html&#34;&gt;SQLite UPSERT documentation&lt;/a&gt; for detailed information.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;onConflict&lt;/code&gt;: the &#34;conflict target&#34; is the array of columns in the uniqueness constraint (primary key or unique index) that triggers the upsert.&lt;/p&gt; &lt;p&gt;If empty (the default), all uniqueness constraint are considered.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;doUpdate&lt;/code&gt;: a closure that returns columns assignments to perform in case of conflict. Other columns are overwritten with the inserted values.&lt;/p&gt; &lt;p&gt;By default, all inserted columns but the primary key and the conflict target are overwritten.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;In the example below, we upsert the new vocabulary word &#34;jovial&#34;. It is inserted if that word is not already in the dictionary. Otherwise, &lt;code&gt;count&lt;/code&gt; is incremented, &lt;code&gt;isTainted&lt;/code&gt; is not overwritten, and &lt;code&gt;kind&lt;/code&gt; is overwritten:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE vocabulary(&#xA;//   word TEXT NOT NULL PRIMARY KEY,&#xA;//   kind TEXT NOT NULL,&#xA;//   isTainted BOOLEAN DEFAULT 0,&#xA;//   count INT DEFAULT 1))&#xA;struct Vocabulary: Encodable, PersistableRecord {&#xA;    var word: String&#xA;    var kind: String&#xA;    var isTainted: Bool&#xA;}&#xA;&#xA;// INSERT INTO vocabulary(word, kind, isTainted)&#xA;// VALUES(&#39;jovial&#39;, &#39;adjective&#39;, 0)&#xA;// ON CONFLICT(word) DO UPDATE SET \&#xA;//   count = count + 1,   -- on conflict, count is incremented&#xA;//   kind = excluded.kind -- on conflict, kind is overwritten&#xA;// RETURNING *&#xA;let vocabulary = Vocabulary(word: &#34;jovial&#34;, kind: &#34;adjective&#34;, isTainted: false)&#xA;let upserted = try vocabulary.upsertAndFetch(&#xA;    db, onConflict: [&#34;word&#34;],&#xA;    doUpdate: { _ in&#xA;        [Column(&#34;count&#34;) += 1,            // on conflict, count is incremented&#xA;         Column(&#34;isTainted&#34;).noOverwrite] // on conflict, isTainted is NOT overwritten&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;doUpdate&lt;/code&gt; closure accepts an &lt;code&gt;excluded&lt;/code&gt; TableAlias argument that refers to the inserted values that trigger the conflict. You can use it to specify an explicit overwrite, or to perform a computation. In the next example, the upsert keeps the maximum date in case of conflict:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// INSERT INTO message(id, text, date)&#xA;// VALUES(...)&#xA;// ON CONFLICT DO UPDATE SET \&#xA;//   text = excluded.text,&#xA;//   date = MAX(date, excluded.date)&#xA;// RETURNING *&#xA;let upserted = try message.upsertAndFetch(doUpdate: { excluded in&#xA;    // keep the maximum date in case of conflict&#xA;    [Column(&#34;date&#34;).set(to: max(Column(&#34;date&#34;), excluded[&#34;date&#34;]))]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;upsertAndFetch(_:as:onConflict:doUpdate:)&lt;/code&gt; (does not require &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; conformance)&lt;/p&gt; &lt;p&gt;This method is identical to &lt;code&gt;upsertAndFetch(_:onConflict:doUpdate:)&lt;/code&gt; described above, but you can provide a distinct &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; record type as a result, in order to specify the returned columns.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Persistence Methods and the &lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/h3&gt; &#xA;&lt;p&gt;SQLite is able to return values from a inserted, updated, or deleted row, with the &lt;a href=&#34;https://www.sqlite.org/lang_returning.html&#34;&gt;&lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Support for the &lt;code&gt;RETURNING&lt;/code&gt; clause is available from SQLite 3.35.0+: iOS 15.0+, macOS 12.0+, tvOS 15.0+, watchOS 8.0+, or with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#encryption&#34;&gt;SQLCipher&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;RETURNING&lt;/code&gt; clause helps dealing with database features such as auto-incremented ids, default values, and &lt;a href=&#34;https://sqlite.org/gencol.html&#34;&gt;generated columns&lt;/a&gt;. You can, for example, insert a few columns and fetch the default or generated ones in one step.&lt;/p&gt; &#xA;&lt;p&gt;GRDB uses the &lt;code&gt;RETURNING&lt;/code&gt; clause in all persistence methods that contain &lt;code&gt;AndFetch&lt;/code&gt; in their name.&lt;/p&gt; &#xA;&lt;p&gt;For example, given a database table with an auto-incremented primary key and a default score:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;&#34;&#34;&#xA;        CREATE TABLE player(&#xA;          id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;          name TEXT NOT NULL,&#xA;          score INTEGER NOT NULL DEFAULT 1000)&#xA;        &#34;&#34;&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define a record type with full database information, and another partial record type that deals with a subset of columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A player with full database information&#xA;struct Player: Codable, PersistableRecord, FetchableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;// A partial player&#xA;struct PartialPlayer: Encodable, PersistableRecord {&#xA;    static let databaseTableName = &#34;player&#34;&#xA;    var name: String&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now you can get a full player by inserting a partial one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    let partialPlayer = PartialPlayer(name: &#34;Alice&#34;)&#xA;    &#xA;    // INSERT INTO player (name) VALUES (&#39;Alice&#39;) RETURNING *&#xA;    if let player = try partialPlayer.insertAndFetch(db, as: Player.self) {&#xA;        print(player.id)    // The inserted id&#xA;        print(player.name)  // The inserted name&#xA;        print(player.score) // The default score&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For extra precision, you can select only the columns you need, and fetch the desired value from the provided &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;prepared statement&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    let partialPlayer = PartialPlayer(name: &#34;Alice&#34;)&#xA;    &#xA;    // INSERT INTO player (name) VALUES (&#39;Alice&#39;) RETURNING score&#xA;    let score = try partialPlayer.insertAndFetch(db, selection: [Column(&#34;score&#34;)]) { statement in&#xA;        try Int.fetchOne(statement)&#xA;    }&#xA;    print(score) // Prints 1000, the default score&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are other similar persistence methods, such as &lt;code&gt;upsertAndFetch&lt;/code&gt;, &lt;code&gt;saveAndFetch&lt;/code&gt;, &lt;code&gt;updateAndFetch&lt;/code&gt;, &lt;code&gt;updateChangesAndFetch&lt;/code&gt;, etc. They all behave like &lt;code&gt;upsert&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;updateChanges&lt;/code&gt;, except that they return saved values. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Save and return the saved player&#xA;let savedPlayer = try player.saveAndFetch(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&#34;&gt;Persistence Methods&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#upsert&#34;&gt;Upsert&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-updatechanges-methods&#34;&gt;&lt;code&gt;updateChanges&lt;/code&gt; methods&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Batch operations&lt;/strong&gt; can return updated or deleted values:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Make sure you check the &lt;a href=&#34;https://www.sqlite.org/lang_returning.html&#34;&gt;documentation of the &lt;code&gt;RETURNING&lt;/code&gt; clause&lt;/a&gt;, which describes important limitations and caveats for batch operations.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.filter(...)...&#xA;&#xA;// Fetch all deleted players&#xA;// DELETE FROM player RETURNING *&#xA;let deletedPlayers = try request.deleteAndFetchAll(db) // [Player]&#xA;&#xA;// Fetch a selection of columns from the deleted rows&#xA;// DELETE FROM player RETURNING name&#xA;let statement = try request.deleteAndFetchStatement(db, selection: [Column(&#34;name&#34;)])&#xA;let deletedNames = try String.fetchSet(statement)&#xA;&#xA;// Fetch all updated players&#xA;// UPDATE player SET score = score + 10 RETURNING *&#xA;let updatedPlayers = try request.updateAndFetchAll(db, [Column(&#34;score&#34;) += 10]) // [Player]&#xA;&#xA;// Fetch a selection of columns from the updated rows&#xA;// UPDATE player SET score = score + 10 RETURNING score&#xA;let statement = try request.updateAndFetchStatement(&#xA;    db, [Column(&#34;score&#34;) += 10],&#xA;    select: [Column(&#34;score&#34;)])&#xA;let updatedScores = try Int.fetchAll(statement)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Persistence Callbacks&lt;/h3&gt; &#xA;&lt;p&gt;Your custom type may want to perform extra work when the persistence methods are invoked.&lt;/p&gt; &#xA;&lt;p&gt;To this end, your record type can implement &lt;strong&gt;persistence callbacks&lt;/strong&gt;. Callbacks are methods that get called at certain moments of a record&#39;s life cycle. With callbacks it is possible to write code that will run whenever an record is inserted, updated, or deleted.&lt;/p&gt; &#xA;&lt;p&gt;In order to use a callback method, you need to provide its implementation. For example, a frequently used callback is &lt;code&gt;didInsert&lt;/code&gt;, in the case of auto-incremented database ids:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: MutablePersistableRecord {&#xA;    var id: Int64?&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(_ inserted: InsertionSuccess) {&#xA;        id = inserted.rowID&#xA;    }&#xA;}&#xA;&#xA;try dbQueue.write { db in&#xA;    var player = Player(id: nil, ...)&#xA;    try player.insert(db)&#xA;    print(player.id) // didInsert was called: prints some non-nil id&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you subclass the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class, override the callback, and make sure you call &lt;code&gt;super&lt;/code&gt; at some point of your implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Player: Record {&#xA;    var id: Int64?&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    func didInsert(_ inserted: InsertionSuccess) {&#xA;        super.didInsert(inserted)&#xA;        id = inserted.rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Callbacks can also help implementing record validation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Link: PersistableRecord {&#xA;    var url: URL&#xA;    &#xA;    func willSave(_ db: Database) throws {&#xA;        if url.host == nil {&#xA;            throw ValidationError(&#34;url must be absolute.&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;try link.insert(db) // Calls the willSave callback&#xA;try link.update(db) // Calls the willSave callback&#xA;try link.save(db)   // Calls the willSave callback&#xA;try link.upsert(db) // Calls the willSave callback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available Callbacks&lt;/h4&gt; &#xA;&lt;p&gt;Here is a list with all the available &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&#34;&gt;persistence callbacks&lt;/a&gt;, listed in the same order in which they will get called during the respective operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Inserting a record (all &lt;code&gt;record.insert&lt;/code&gt; and &lt;code&gt;record.upsert&lt;/code&gt; methods)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;willSave&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aroundSave&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;willInsert&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aroundInsert&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;didInsert&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;didSave&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Updating a record (all &lt;code&gt;record.update&lt;/code&gt; methods)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;willSave&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aroundSave&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;willUpdate&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aroundUpdate&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;didUpdate&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;didSave&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deleting a record (only the &lt;code&gt;record.delete(_:)&lt;/code&gt; method)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;willDelete&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;aroundDelete&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;didDelete&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For detailed information about each callback, check the &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/mutablepersistablerecord/&#34;&gt;reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;MutablePersistableRecord&lt;/code&gt; protocol, &lt;code&gt;willInsert&lt;/code&gt; and &lt;code&gt;didInsert&lt;/code&gt; are mutating methods. In &lt;code&gt;PersistableRecord&lt;/code&gt;, they are not mutating.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;record.save(_:)&lt;/code&gt; method performs an UPDATE if the record has a non-null primary key, and then, if no row was modified, an INSERT. It directly performs an INSERT if the record has no primary key, or a null primary key. It triggers update and/or insert callbacks accordingly.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Callbacks are only invoked from persistence methods called on record instances. Callbacks are not invoked when you call a type method, perform a batch operations, or execute raw SQL.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: When a &lt;code&gt;did***&lt;/code&gt; callback is invoked, do not assume that the change is actually persisted on disk, because the database may still be inside an uncommitted transaction. When you need to handle transaction completions, use the &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/database/afternexttransaction(oncommit:onrollback:)&#34;&gt;afterNextTransaction(onCommit:onRollback:)&lt;/a&gt;. For example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct PictureFile: PersistableRecord {&#xA;    var path: String&#xA;    &#xA;    func willDelete(_ db: Database) {&#xA;        db.afterNextTransaction { _ in&#xA;            try? deleteFileOnDisk()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Identifiable Records&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;When a record type maps a table with a single-column primary key, it is recommended to have it adopt the standard &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt; protocol.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Identifiable, FetchableRecord, PersistableRecord {&#xA;    var id: Int64 // fulfills the Identifiable requirement&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;id&lt;/code&gt; has a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;database-compatible type&lt;/a&gt; (Int64, Int, String, UUID, ...), the &lt;code&gt;Identifiable&lt;/code&gt; conformance unlocks type-safe record and request methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = try Player.find(db, id: 1)               // Player&#xA;let player = try Player.fetchOne(db, id: 1)           // Player?&#xA;let players = try Player.fetchAll(db, ids: [1, 2, 3]) // [Player]&#xA;let players = try Player.fetchSet(db, ids: [1, 2, 3]) // Set&amp;lt;Player&amp;gt;&#xA;&#xA;let request = Player.filter(id: 1)&#xA;let request = Player.filter(ids: [1, 2, 3])&#xA;&#xA;try Player.deleteOne(db, id: 1)&#xA;try Player.deleteAll(db, ids: [1, 2, 3])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;Identifiable&lt;/code&gt; is not available on all application targets, and not all tables have a single-column primary key. GRDB provides other methods that deal with primary and unique keys, but they won&#39;t check the type of their arguments:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Those methods are not type-checked&#xA;try Player.fetchOne(db, key: 1)&#xA;try Player.fetchOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Country.fetchAll(db, keys: [&#34;FR&#34;, &#34;US&#34;])&#xA;try Citizenship.fetchOne(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&#xA;let request = Player.filter(key: 1)&#xA;let request = Player.filter(keys: [1, 2, 3])&#xA;&#xA;try Player.deleteOne(db, key: 1)&#xA;try Player.deleteAll(db, keys: [1, 2, 3])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some database tables have a single-column primary key which is not called &#34;id&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.create(table: &#34;country&#34;) { t in&#xA;    t.primaryKey(&#34;isoCode&#34;, .text)&#xA;    t.column(&#34;name&#34;, .text).notNull()&#xA;    t.column(&#34;population&#34;, .integer).notNull()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, &lt;code&gt;Identifiable&lt;/code&gt; conformance can be achieved, for example, by returning the primary key column from the &lt;code&gt;id&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Country: Identifiable, FetchableRecord, PersistableRecord {&#xA;    var isoCode: String&#xA;    var name: String&#xA;    var population: Int&#xA;    &#xA;    // Fulfill the Identifiable requirement&#xA;    var id: String { isoCode }&#xA;}&#xA;&#xA;let france = try dbQueue.read { db in&#xA;    try Country.fetchOne(db, id: &#34;FR&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Codable Records&lt;/h2&gt; &#xA;&lt;p&gt;Record types that adopt an archival protocol (&lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&#34;&gt;Codable, Encodable or Decodable&lt;/a&gt;) get free database support just by declaring conformance to the desired &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;record protocols&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Declare a record...&#xA;struct Player: Codable, FetchableRecord, PersistableRecord {&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;// ...and there you go:&#xA;try dbQueue.write { db in&#xA;    try Player(name: &#34;Arthur&#34;, score: 100).insert(db)&#xA;    let players = try Player.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Codable records encode and decode their properties according to their own implementation of the Encodable and Decodable protocols. Yet databases have specific requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Properties are always coded according to their preferred database representation, when they have one (all &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;values&lt;/a&gt; that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-value-types&#34;&gt;DatabaseValueConvertible&lt;/a&gt; protocol).&lt;/li&gt; &#xA; &lt;li&gt;You can customize the encoding and decoding of dates and uuids.&lt;/li&gt; &#xA; &lt;li&gt;Complex properties (arrays, dictionaries, nested structs, etc.) are stored as JSON.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information about Codable records, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;JSON Columns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-names-coding-strategies&#34;&gt;Column Names Coding Strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;Date and UUID Coding Strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;The userInfo Dictionary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tip-derive-columns-from-coding-keys&#34;&gt;Tip: Derive Columns from Coding Keys&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt; for sample code that uses Codable records.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;JSON Columns&lt;/h3&gt; &#xA;&lt;p&gt;When a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable record&lt;/a&gt; contains a property that is not a simple &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;value&lt;/a&gt; (Bool, Int, String, Date, Swift enums, etc.), that value is encoded and decoded as a &lt;strong&gt;JSON string&lt;/strong&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum AchievementColor: String, Codable {&#xA;    case bronze, silver, gold&#xA;}&#xA;&#xA;struct Achievement: Codable {&#xA;    var name: String&#xA;    var color: AchievementColor&#xA;}&#xA;&#xA;struct Player: Codable, FetchableRecord, PersistableRecord {&#xA;    var name: String&#xA;    var score: Int&#xA;    var achievements: [Achievement] // stored in a JSON column&#xA;}&#xA;&#xA;try dbQueue.write { db in&#xA;    // INSERT INTO player (name, score, achievements)&#xA;    // VALUES (&#xA;    //   &#39;Arthur&#39;,&#xA;    //   100,&#xA;    //   &#39;[{&#34;color&#34;:&#34;gold&#34;,&#34;name&#34;:&#34;Use Codable Records&#34;}]&#39;)&#xA;    let achievement = Achievement(name: &#34;Use Codable Records&#34;, color: .gold)&#xA;    let player = Player(name: &#34;Arthur&#34;, score: 100, achievements: [achievement])&#xA;    try player.insert(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GRDB uses the standard &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsondecoder&#34;&gt;JSONDecoder&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsonencoder&#34;&gt;JSONEncoder&lt;/a&gt; from Foundation. By default, Data values are handled with the &lt;code&gt;.base64&lt;/code&gt; strategy, Date with the &lt;code&gt;.millisecondsSince1970&lt;/code&gt; strategy, and non conforming floats with the &lt;code&gt;.throw&lt;/code&gt; strategy.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the JSON format by implementing those methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static func databaseJSONDecoder(for column: String) -&amp;gt; JSONDecoder&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static func databaseJSONEncoder(for column: String) -&amp;gt; JSONEncoder&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; &lt;strong&gt;Tip&lt;/strong&gt;: Make sure you set the JSONEncoder &lt;code&gt;sortedKeys&lt;/code&gt; option. This option makes sure that the JSON output is stable. This stability is required for &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt; to work as expected, and database observation tools such as &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/valueobservation&#34;&gt;ValueObservation&lt;/a&gt; to accurately recognize changed records.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Column Names Coding Strategies&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; store their values into database columns that match their coding keys: the &lt;code&gt;teamID&lt;/code&gt; property is stored into the &lt;code&gt;teamID&lt;/code&gt; column.&lt;/p&gt; &#xA;&lt;p&gt;This behavior can be overridden, so that you can, for example, store the &lt;code&gt;teamID&lt;/code&gt; property into the &lt;code&gt;team_id&lt;/code&gt; column:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static var databaseColumnDecodingStrategy: DatabaseColumnDecodingStrategy { get }&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static var databaseColumnEncodingStrategy: DatabaseColumnEncodingStrategy { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasecolumndecodingstrategy&#34;&gt;DatabaseColumnDecodingStrategy&lt;/a&gt; and &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasecolumnencodingstrategy/&#34;&gt;DatabaseColumnEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt; &#xA;&lt;h3&gt;Date and UUID Coding Strategies&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; encode and decode their Date and UUID properties as described in the general &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-datecomponents&#34;&gt;Date and DateComponents&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#uuid&#34;&gt;UUID&lt;/a&gt; chapters.&lt;/p&gt; &#xA;&lt;p&gt;To sum up: dates encode themselves in the &#34;YYYY-MM-DD HH:MM:SS.SSS&#34; format, in the UTC time zone, and decode a variety of date formats and timestamps. UUIDs encode themselves as 16-bytes data blobs, and decode both 16-bytes data blobs and strings such as &#34;E621E1F8-C36C-495A-93FC-0C247A3E6E5F&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Those behaviors can be overridden:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy { get }&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static var databaseDateEncodingStrategy: DatabaseDateEncodingStrategy { get }&#xA;    static var databaseUUIDEncodingStrategy: DatabaseUUIDEncodingStrategy { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasedatedecodingstrategy/&#34;&gt;DatabaseDateDecodingStrategy&lt;/a&gt;, &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasedateencodingstrategy/&#34;&gt;DatabaseDateEncodingStrategy&lt;/a&gt;, and &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseuuidencodingstrategy/&#34;&gt;DatabaseUUIDEncodingStrategy&lt;/a&gt; to learn about all available strategies.&lt;/p&gt; &#xA;&lt;p&gt;There is no customization of uuid decoding, because UUID can already decode all its encoded variants (16-bytes blobs and uuid strings, both uppercase and lowercase).&lt;/p&gt; &#xA;&lt;p&gt;Customized date and uuid handling apply:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When encoding and decoding database rows to and from records (fetching and persistence methods).&lt;/li&gt; &#xA; &lt;li&gt;In requests by single-column primary key: &lt;code&gt;fetchOne(_&lt;span&gt;üÜî&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;filter(id:)&lt;/code&gt;, &lt;code&gt;deleteAll(_:keys:)&lt;/code&gt;, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;They do not apply&lt;/em&gt; in other requests based on date or uuid values.&lt;/p&gt; &#xA;&lt;p&gt;So make sure that dates and uuids are properly encoded in your requests. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Codable, FetchableRecord, PersistableRecord, Identifiable {&#xA;    // UUIDs are stored as strings&#xA;    static let databaseUUIDEncodingStrategy = DatabaseUUIDEncodingStrategy.uppercaseString&#xA;    var id: UUID&#xA;    ...&#xA;}&#xA;&#xA;try dbQueue.write { db in&#xA;    let uuid = UUID()&#xA;    let player = Player(id: uuid, ...)&#xA;    &#xA;    // OK: inserts a player in the database, with a string uuid&#xA;    try player.insert(db)&#xA;    &#xA;    // OK: performs a string-based query, finds the inserted player&#xA;    _ = try Player.filter(id: uuid).fetchOne(db)&#xA;&#xA;    // NOT OK: performs a blob-based query, fails to find the inserted player&#xA;    _ = try Player.filter(Column(&#34;id&#34;) == uuid).fetchOne(db)&#xA;    &#xA;    // OK: performs a string-based query, finds the inserted player&#xA;    _ = try Player.filter(Column(&#34;id&#34;) == uuid.uuidString).fetchOne(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The userInfo Dictionary&lt;/h3&gt; &#xA;&lt;p&gt;Your &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; can be stored in the database, but they may also have other purposes. In this case, you may need to customize their implementations of &lt;code&gt;Decodable.init(from:)&lt;/code&gt; and &lt;code&gt;Encodable.encode(to:)&lt;/code&gt;, depending on the context.&lt;/p&gt; &#xA;&lt;p&gt;The standard way to provide such context is the &lt;code&gt;userInfo&lt;/code&gt; dictionary. Implement those properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol FetchableRecord {&#xA;    static var databaseDecodingUserInfo: [CodingUserInfoKey: Any] { get }&#xA;}&#xA;&#xA;protocol EncodableRecord {&#xA;    static var databaseEncodingUserInfo: [CodingUserInfoKey: Any] { get }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, here is a Player type that customizes its decoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A key that holds a decoder&#39;s name&#xA;let decoderName = CodingUserInfoKey(rawValue: &#34;decoderName&#34;)!&#xA;&#xA;struct Player: FetchableRecord, Decodable {&#xA;    init(from decoder: Decoder) throws {&#xA;        // Print the decoder name&#xA;        let decoderName = decoder.userInfo[decoderName] as? String&#xA;        print(&#34;Decoded from \(decoderName ?? &#34;unknown decoder&#34;)&#34;)&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can have a specific decoding from JSON...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// prints &#34;Decoded from JSON&#34;&#xA;let decoder = JSONDecoder()&#xA;decoder.userInfo = [decoderName: &#34;JSON&#34;]&#xA;let player = try decoder.decode(Player.self, from: jsonData)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... and another one from database rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Player: FetchableRecord {&#xA;    static let databaseDecodingUserInfo: [CodingUserInfoKey: Any] = [decoderName: &#34;database row&#34;]&#xA;}&#xA;&#xA;// prints &#34;Decoded from database row&#34;&#xA;let player = try Player.fetchOne(db, ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseDecodingUserInfo&lt;/code&gt; and &lt;code&gt;databaseEncodingUserInfo&lt;/code&gt; properties are explicitly declared as &lt;code&gt;[CodingUserInfoKey: Any]&lt;/code&gt;. If they are not, the Swift compiler may silently miss the protocol requirement, resulting in sticky empty userInfo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Tip: Derive Columns from Coding Keys&lt;/h3&gt; &#xA;&lt;p&gt;Codable types are granted with a &lt;a href=&#34;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&#34;&gt;CodingKeys&lt;/a&gt; enum. You can use them to safely define database columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Codable {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var score: Int&#xA;}&#xA;&#xA;extension Player: FetchableRecord, PersistableRecord {&#xA;    enum Columns {&#xA;        static let id = Column(CodingKeys.id)&#xA;        static let name = Column(CodingKeys.name)&#xA;        static let score = Column(CodingKeys.score)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/GoodPracticesForDesigningRecordTypes.md&#34;&gt;Good Practices for Designing Record Types&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h2&gt;Record Class&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Record&lt;/strong&gt; is a class that is designed to be subclassed. It inherits its features from the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;FetchableRecord, TableRecord, and PersistableRecord&lt;/a&gt; protocols. On top of that, Record instances can compare against previous versions of themselves in order to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;avoid useless updates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Record subclasses define their custom database relationship by overriding database methods. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Place: Record {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;    &#xA;    init(id: Int64?, title: String, isFavorite: Bool, coordinate: CLLocationCoordinate2D) {&#xA;        self.id = id&#xA;        self.title = title&#xA;        self.isFavorite = isFavorite&#xA;        self.coordinate = coordinate&#xA;        super.init()&#xA;    }&#xA;    &#xA;    /// The table name&#xA;    override class var databaseTableName: String { &#34;place&#34; }&#xA;    &#xA;    /// The table columns&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, favorite, latitude, longitude&#xA;    }&#xA;    &#xA;    /// Creates a record from a database row&#xA;    required init(row: Row) throws {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        isFavorite = row[Columns.favorite]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;        try super.init(row: row)&#xA;    }&#xA;    &#xA;    /// The values persisted in the database&#xA;    override func encode(to container: inout PersistenceContainer) throws {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.favorite] = isFavorite&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;    &#xA;    /// Update record ID after a successful insertion&#xA;    override func didInsert(_ inserted: InsertionSuccess) {&#xA;        super.didInsert(inserted)&#xA;        id = inserted.rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Record Comparison&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Records that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt; protocol can compare against other records, or against previous versions of themselves.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This helps avoiding costly UPDATE statements when a record has not been edited.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-updatechanges-methods&#34;&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databaseequals-method&#34;&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-databasechanges-and-hasdatabasechanges-methods&#34;&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;updateChanges&lt;/code&gt; Methods&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;updateChanges&lt;/code&gt; methods perform a database update of the changed columns only (and does nothing if record has no change).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:from:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This method lets you compare two records:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let oldPlayer = try Player.fetchOne(db, id: 42) {&#xA;    var newPlayer = oldPlayer&#xA;    newPlayer.score = 100&#xA;    if try newPlayer.updateChanges(db, from: oldPlayer) {&#xA;        print(&#34;player was modified, and updated in the database&#34;)&#xA;    } else {&#xA;        print(&#34;player was not modified, and database was not hit&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:modify:)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This method lets you update a record in place:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if var player = try Player.fetchOne(db, id: 42) {&#xA;    let modified = try player.updateChanges(db) {&#xA;        $0.score = 100&#xA;    }&#xA;    if modified {&#xA;        print(&#34;player was modified, and updated in the database&#34;)&#xA;    } else {&#xA;        print(&#34;player was not modified, and database was not hit&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;updateChanges(_:)&lt;/code&gt; (Record class only)&lt;/p&gt; &lt;p&gt;Instances of the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class are able to compare against themselves, and know if they have changes that have not been saved since the last fetch or saving:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Record class only&#xA;if let player = try Player.fetchOne(db, id: 42) {&#xA;    player.score = 100&#xA;    if try player.updateChanges(db) {&#xA;        print(&#34;player was modified, and updated in the database&#34;)&#xA;    } else {&#xA;        print(&#34;player was not modified, and database was not hit&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The &lt;code&gt;databaseEquals&lt;/code&gt; Method&lt;/h3&gt; &#xA;&lt;p&gt;This method returns whether two records have the same database representation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let oldPlayer: Player = ...&#xA;var newPlayer: Player = ...&#xA;if newPlayer.databaseEquals(oldPlayer) == false {&#xA;    try newPlayer.save(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The comparison is performed on the database representation of records. As long as your record type adopts the EncodableRecord protocol, you don&#39;t need to care about Equatable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The &lt;code&gt;databaseChanges&lt;/code&gt; and &lt;code&gt;hasDatabaseChanges&lt;/code&gt; Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;databaseChanges(from:)&lt;/code&gt; returns a dictionary of differences between two records:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let oldPlayer = Player(id: 1, name: &#34;Arthur&#34;, score: 100)&#xA;let newPlayer = Player(id: 1, name: &#34;Arthur&#34;, score: 1000)&#xA;for (column, oldValue) in try newPlayer.databaseChanges(from: oldPlayer) {&#xA;    print(&#34;\(column) was \(oldValue)&#34;)&#xA;}&#xA;// prints &#34;score was 100&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class is able to compare against itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Record class only&#xA;let player = Player(id: 1, name: &#34;Arthur&#34;, score: 100)&#xA;try player.insert(db)&#xA;player.score = 1000&#xA;for (column, oldValue) in try player.databaseChanges {&#xA;    print(&#34;\(column) was \(oldValue)&#34;)&#xA;}&#xA;// prints &#34;score was 100&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; instances also have a &lt;code&gt;hasDatabaseChanges&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Record class only&#xA;player.score = 1000&#xA;if player.hasDatabaseChanges {&#xA;    try player.save(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Record.hasDatabaseChanges&lt;/code&gt; is false after a Record instance has been fetched or saved into the database. Subsequent modifications may set it, or not: &lt;code&gt;hasDatabaseChanges&lt;/code&gt; is based on value comparison. &lt;strong&gt;Setting a property to the same value does not set the changed flag&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = Player(name: &#34;Barbara&#34;, score: 750)&#xA;player.hasDatabaseChanges  // true&#xA;&#xA;try player.insert(db)&#xA;player.hasDatabaseChanges  // false&#xA;&#xA;player.name = &#34;Barbara&#34;&#xA;player.hasDatabaseChanges  // false&#xA;&#xA;player.score = 1000&#xA;player.hasDatabaseChanges  // true&#xA;try player.databaseChanges // [&#34;score&#34;: 750]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an efficient algorithm which synchronizes the content of a database table with a JSON payload, check &lt;a href=&#34;https://github.com/groue/SortedDifference&#34;&gt;groue/SortedDifference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Record Customization Options&lt;/h2&gt; &#xA;&lt;p&gt;GRDB records come with many default behaviors, that are designed to fit most situations. Many of those defaults can be customized for your specific needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&#34;&gt;Persistence Callbacks&lt;/a&gt;: define what happens when you call a persistence method such as &lt;code&gt;player.insert(db)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&#34;&gt;Conflict Resolution&lt;/a&gt;: Run &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; queries, and generally define what happens when a persistence method violates a unique index.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;: define which columns are selected by requests such as &lt;code&gt;Player.fetchAll(db)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&#34;&gt;Beyond FetchableRecord&lt;/a&gt;: the FetchableRecord protocol is not the end of the story.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; have a few extra options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;JSON Columns&lt;/a&gt;: control the format of JSON columns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#column-names-coding-strategies&#34;&gt;Column Names Coding Strategies&lt;/a&gt;: control how coding keys are turned into column names&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;Date and UUID Coding Strategies&lt;/a&gt;: control the format of Date and UUID properties in your Codable records.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;The userInfo Dictionary&lt;/a&gt;: adapt your Codable implementation for the database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Conflict Resolution&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Insertions and updates can create conflicts&lt;/strong&gt;: for example, a query may attempt to insert a duplicate row that violates a unique index.&lt;/p&gt; &#xA;&lt;p&gt;Those conflicts normally end with an error. Yet SQLite let you alter the default behavior, and handle conflicts with specific policies. For example, the &lt;code&gt;INSERT OR REPLACE&lt;/code&gt; statement handles conflicts with the &#34;replace&#34; policy which replaces the conflicting row instead of throwing an error.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.sqlite.org/lang_conflict.html&#34;&gt;five different policies&lt;/a&gt; are: abort (the default), replace, rollback, fail, and ignore.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite let you specify conflict policies at two different places:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In the definition of the database table:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE player (&#xA;//     id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;//     email TEXT UNIQUE ON CONFLICT REPLACE&#xA;// )&#xA;try db.create(table: &#34;player&#34;) { t in&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    t.column(&#34;email&#34;, .text).unique(onConflict: .replace) // &amp;lt;--&#xA;}&#xA;&#xA;// Despite the unique index on email, both inserts succeed.&#xA;// The second insert replaces the first row:&#xA;try db.execute(sql: &#34;INSERT INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;try db.execute(sql: &#34;INSERT INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In each modification query:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// CREATE TABLE player (&#xA;//     id INTEGER PRIMARY KEY AUTOINCREMENT,&#xA;//     email TEXT UNIQUE&#xA;// )&#xA;try db.create(table: &#34;player&#34;) { t in&#xA;    t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;    t.column(&#34;email&#34;, .text).unique()&#xA;}&#xA;&#xA;// Again, despite the unique index on email, both inserts succeed.&#xA;try db.execute(sql: &#34;INSERT OR REPLACE INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;try db.execute(sql: &#34;INSERT OR REPLACE INTO player (email) VALUES (?)&#34;, arguments: [&#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When you want to handle conflicts at the query level, specify a custom &lt;code&gt;persistenceConflictPolicy&lt;/code&gt; in your type that adopts the PersistableRecord protocol. It will alter the INSERT and UPDATE queries run by the &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-methods&#34;&gt;persistence methods&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol MutablePersistableRecord {&#xA;    /// The policy that handles SQLite conflicts when records are&#xA;    /// inserted or updated.&#xA;    ///&#xA;    /// This property is optional: its default value uses the ABORT&#xA;    /// policy for both insertions and updates, so that GRDB generate&#xA;    /// regular INSERT and UPDATE queries.&#xA;    static var persistenceConflictPolicy: PersistenceConflictPolicy { get }&#xA;}&#xA;&#xA;struct Player : MutablePersistableRecord {&#xA;    static let persistenceConflictPolicy = PersistenceConflictPolicy(&#xA;        insert: .replace,&#xA;        update: .replace)&#xA;}&#xA;&#xA;// INSERT OR REPLACE INTO player (...) VALUES (...)&#xA;try player.insert(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you specify the &lt;code&gt;ignore&lt;/code&gt; policy for inserts, the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&#34;&gt;&lt;code&gt;didInsert&lt;/code&gt; callback&lt;/a&gt; will be called with some random id in case of failed insert. You can detect failed insertions with &lt;code&gt;insertAndFetch&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// How to detect failed `INSERT OR IGNORE`:&#xA;// INSERT OR IGNORE INTO player ... RETURNING *&#xA;if let insertedPlayer = try player.insertAndFetch(db) {&#xA;    // Succesful insertion&#xA;} else {&#xA;    // Ignored failure&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;replace&lt;/code&gt; policy may have to delete rows so that inserts and updates can succeed. Those deletions are not reported to &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/transactionobserver&#34;&gt;transaction observers&lt;/a&gt; (this might change in a future release of SQLite).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Beyond FetchableRecord&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Some GRDB users eventually discover that the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol does not fit all situations.&lt;/strong&gt; Use cases that are not well handled by FetchableRecord include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Your application needs polymorphic row decoding: it decodes some type or another, depending on the values contained in a database row.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your application needs to decode rows with a context: each decoded value should be initialized with some extra value that does not come from the database.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since those use cases are not well handled by FetchableRecord, don&#39;t try to implement them on top of this protocol: you&#39;ll just fight the framework.&lt;/p&gt; &#xA;&lt;h2&gt;Examples of Record Definitions&lt;/h2&gt; &#xA;&lt;p&gt;We will show below how to declare a record type for the following database table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.create(table: &#34;place&#34;) { t in&#xA;        t.autoIncrementedPrimaryKey(&#34;id&#34;)&#xA;        t.column(&#34;title&#34;, .text).notNull()&#xA;        t.column(&#34;isFavorite&#34;, .boolean).notNull().defaults(to: false)&#xA;        t.column(&#34;longitude&#34;, .double).notNull()&#xA;        t.column(&#34;latitude&#34;, .double).notNull()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each one of the three examples below is correct. You will pick one or the other depending on your personal preferences and the requirements of your application:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Define a Codable struct, and adopt the record protocols you need&lt;/summary&gt; &#xA; &lt;p&gt;This is the shortest way to define a record type.&lt;/p&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: Codable {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    private var latitude: CLLocationDegrees&#xA;    private var longitude: CLLocationDegrees&#xA;    &#xA;    var coordinate: CLLocationCoordinate2D {&#xA;        get {&#xA;            CLLocationCoordinate2D(&#xA;                latitude: latitude,&#xA;                longitude: longitude)&#xA;        }&#xA;        set {&#xA;            latitude = newValue.latitude&#xA;            longitude = newValue.longitude&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// SQL generation&#xA;extension Place: TableRecord {&#xA;    /// The table columns&#xA;    enum Columns {&#xA;        static let id = Column(CodingKeys.id)&#xA;        static let title = Column(CodingKeys.title)&#xA;        static let isFavorite = Column(CodingKeys.isFavorite)&#xA;        static let latitude = Column(CodingKeys.latitude)&#xA;        static let longitude = Column(CodingKeys.longitude)&#xA;    }&#xA;}&#xA;&#xA;// Fetching methods&#xA;extension Place: FetchableRecord { }&#xA;&#xA;// Persistence methods&#xA;extension Place: MutablePersistableRecord {&#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(_ inserted: InsertionSuccess) {&#xA;        id = inserted.rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Define a plain struct, and adopt the record protocols you need&lt;/summary&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;}&#xA;&#xA;// SQL generation&#xA;extension Place: TableRecord {&#xA;    /// The table columns&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, isFavorite, latitude, longitude&#xA;    }&#xA;}&#xA;&#xA;// Fetching methods&#xA;extension Place: FetchableRecord {&#xA;    /// Creates a record from a database row&#xA;    init(row: Row) {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        isFavorite = row[Columns.isFavorite]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;    }&#xA;}&#xA;&#xA;// Persistence methods&#xA;extension Place: MutablePersistableRecord {&#xA;    /// The values persisted in the database&#xA;    func encode(to container: inout PersistenceContainer) {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.isFavorite] = isFavorite&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(_ inserted: InsertionSuccess) {&#xA;        id = inserted.rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Define a plain struct optimized for fetching performance&lt;/summary&gt; &#xA; &lt;p&gt;This struct derives its persistence methods from the standard Encodable protocol (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;), but performs optimized row decoding by accessing database columns with numeric indexes.&lt;/p&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-protocols-overview&#34;&gt;Record Protocols Overview&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Place: Encodable {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    private var latitude: CLLocationDegrees&#xA;    private var longitude: CLLocationDegrees&#xA;    &#xA;    var coordinate: CLLocationCoordinate2D {&#xA;        get {&#xA;            CLLocationCoordinate2D(&#xA;                latitude: latitude,&#xA;                longitude: longitude)&#xA;        }&#xA;        set {&#xA;            latitude = newValue.latitude&#xA;            longitude = newValue.longitude&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// SQL generation&#xA;extension Place: TableRecord {&#xA;    /// The table columns&#xA;    enum Columns {&#xA;        static let id = Column(CodingKeys.id)&#xA;        static let title = Column(CodingKeys.title)&#xA;        static let isFavorite = Column(CodingKeys.isFavorite)&#xA;        static let latitude = Column(CodingKeys.latitude)&#xA;        static let longitude = Column(CodingKeys.longitude)&#xA;    }&#xA;    &#xA;    /// Arrange the selected columns and lock their order&#xA;    static let databaseSelection: [any SQLSelectable] = [&#xA;        Columns.id,&#xA;        Columns.title,&#xA;        Columns.favorite,&#xA;        Columns.latitude,&#xA;        Columns.longitude]&#xA;}&#xA;&#xA;// Fetching methods&#xA;extension Place: FetchableRecord {&#xA;    /// Creates a record from a database row&#xA;    init(row: Row) {&#xA;        // For high performance, use numeric indexes that match the&#xA;        // order of Place.databaseSelection&#xA;        id = row[0]&#xA;        title = row[1]&#xA;        isFavorite = row[2]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[3],&#xA;            longitude: row[4])&#xA;    }&#xA;}&#xA;&#xA;// Persistence methods&#xA;extension Place: MutablePersistableRecord {&#xA;    // Update auto-incremented id upon successful insertion&#xA;    mutating func didInsert(_ inserted: InsertionSuccess) {&#xA;        id = inserted.rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Subclass the &lt;code&gt;Record&lt;/code&gt; class&lt;/summary&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record class&lt;/a&gt; for more information.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Place: Record {&#xA;    var id: Int64?&#xA;    var title: String&#xA;    var isFavorite: Bool&#xA;    var coordinate: CLLocationCoordinate2D&#xA;    &#xA;    init(id: Int64?, title: String, isFavorite: Bool, coordinate: CLLocationCoordinate2D) {&#xA;        self.id = id&#xA;        self.title = title&#xA;        self.isFavorite = isFavorite&#xA;        self.coordinate = coordinate&#xA;        super.init()&#xA;    }&#xA;    &#xA;    /// The table name&#xA;    override class var databaseTableName: String { &#34;place&#34; }&#xA;    &#xA;    /// The table columns&#xA;    enum Columns: String, ColumnExpression {&#xA;        case id, title, isFavorite, latitude, longitude&#xA;    }&#xA;    &#xA;    /// Creates a record from a database row&#xA;    required init(row: Row) throws {&#xA;        id = row[Columns.id]&#xA;        title = row[Columns.title]&#xA;        isFavorite = row[Columns.isFavorite]&#xA;        coordinate = CLLocationCoordinate2D(&#xA;            latitude: row[Columns.latitude],&#xA;            longitude: row[Columns.longitude])&#xA;        try super.init(row: row)&#xA;    }&#xA;    &#xA;    /// The values persisted in the database&#xA;    override func encode(to container: inout PersistenceContainer) throws {&#xA;        container[Columns.id] = id&#xA;        container[Columns.title] = title&#xA;        container[Columns.isFavorite] = isFavorite&#xA;        container[Columns.latitude] = coordinate.latitude&#xA;        container[Columns.longitude] = coordinate.longitude&#xA;    }&#xA;    &#xA;    // Update auto-incremented id upon successful insertion&#xA;    override func didInsert(_ inserted: InsertionSuccess) {&#xA;        super.didInsert(inserted)&#xA;        id = inserted.rowID&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;List of Record Methods&lt;/h2&gt; &#xA;&lt;p&gt;This is the list of record methods, along with their required protocols. The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt; class adopts all these protocols, and adds a few extra methods.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Protocols&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Core Methods&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;init(row:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseTableName&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseSelection&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.persistenceConflictPolicy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.encode(to:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Insert and Update Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.insert(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.insertAndFetch(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.insertAndFetch(_:as:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.insertAndFetch(_:selection:fetch:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.inserted(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.save(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.saveAndFetch(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.saveAndFetch(_:as:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.saveAndFetch(_:selection:fetch:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.saved(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.update(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateAndFetch(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateAndFetch(_:as:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateAndFetch(_:selection:fetch:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.update(db, columns:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateAndFetch(_:columns:selection:fetch:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db, from:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db) { ... }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChangesAndFetch(_:columns:as:modify:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChangesAndFetch(_:columns:selection:fetch:modify:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.upsert(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.upsertAndFetch(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.upsertAndFetch(_:as:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.updateAll(db, ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).updateAll(db, ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Delete Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.delete(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteOne(db, key:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteOne(db, id:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteAll(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.deleteAll(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).deleteAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Persistence Callbacks&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.willInsert(_:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.aroundInsert(_:insert:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.didInsert(_:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.willUpdate(_:columns:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.aroundUpdate(_:columns:update:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.didUpdate(_:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.willSave(_:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.aroundSave(_:save:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.didSave(_:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.willDelete(_:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.aroundDelete(_:delete:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.didDelete(deleted:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Check Record Existence&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.exists(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.exists(db, key: ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.exists(db, id: ...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).isEmpty(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Convert Record to Dictionary&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseDictionary&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Count Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCount(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchCount(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Record &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#cursors&#34;&gt;Cursors&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;¬≥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchCursor(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;‚Å¥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchCursor(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Record Arrays&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;¬≥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchAll(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;‚Å¥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchAll(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Record Sets&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db, keys:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db, ids:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;¬≥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchSet(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;‚Å¥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchSet(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Fetch Individual Records&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db, key:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db, id:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(db, sql: sql)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-3&#34;&gt;¬≥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.fetchOne(statement)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-4&#34;&gt;‚Å¥&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...).fetchOne(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.find(db, key:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.find(db, id:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://developer.apple.com/documentation/swift/identifiable&#34;&gt;Identifiable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseDecodingUserInfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseJSONDecoder(for:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseDateDecodingStrategy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseEncodingUserInfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-userinfo-dictionary&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseJSONEncoder(for:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#json-columns&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseDateEncodingStrategy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.databaseUUIDEncodingStrategy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#date-and-uuid-coding-strategies&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Define &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.belongsTo(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasMany(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasOne(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasManyThrough(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.hasOneThrough(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Building Query Interface &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;Requests&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.request(for:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.all()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.none()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.select(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.select(..., as:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.selectPrimaryKey(as:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.annotated(with:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(id:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; Identifiable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.filter(ids:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; &amp;amp; Identifiable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;*&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.matching(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.including(all:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.including(optional:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.including(required:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.joining(optional:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.joining(required:)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.group(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.groupByPrimaryKey()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.having(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.order(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.orderByPrimaryKey()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.limit(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type.with(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseEquals(...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseChanges(from:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;EncodableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db, from:...)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db) { ... }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.hasDatabaseChanges&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.databaseChanges&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;record.updateChanges(db)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-class&#34;&gt;Record&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-1&#34;&gt;¬π&lt;/a&gt; All unique keys are supported: primary keys (single-column, composite, &lt;a href=&#34;https://www.sqlite.org/rowidtable.html&#34;&gt;&lt;code&gt;rowid&lt;/code&gt;&lt;/a&gt;) and unique indexes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.fetchOne(db, id: 1)                                // Player?&#xA;try Player.fetchOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;]) // Player?&#xA;try Country.fetchAll(db, keys: [&#34;FR&#34;, &#34;US&#34;])                  // [Country]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-2&#34;&gt;¬≤&lt;/a&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;Fetch Requests&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.filter(emailColumn != nil).order(nameColumn)&#xA;let players = try request.fetchAll(db)  // [Player]&#xA;let count = try request.fetchCount(db)  // Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-3&#34;&gt;¬≥&lt;/a&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;SQL queries&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let player = try Player.fetchOne(db, sql: &#34;SELECT * FROM player WHERE id = ?&#34;, arguments: [1]) // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;list-of-record-methods-4&#34;&gt;‚Å¥&lt;/a&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;Prepared Statements&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let statement = try db.makeStatement(sql: &#34;SELECT * FROM player WHERE id = ?&#34;)&#xA;let player = try Player.fetchOne(statement, arguments: [1])  // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;The Query Interface&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The query interface lets you write pure Swift instead of SQL:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    // Update database schema&#xA;    try db.create(table: &#34;wine&#34;) { t in ... }&#xA;    &#xA;    // Fetch records&#xA;    let wines = try Wine&#xA;        .filter(originColumn == &#34;Burgundy&#34;)&#xA;        .order(priceColumn)&#xA;        .fetchAll(db)&#xA;    &#xA;    // Count&#xA;    let count = try Wine&#xA;        .filter(colorColumn == Color.red)&#xA;        .fetchCount(db)&#xA;    &#xA;    // Update&#xA;    try Wine&#xA;        .filter(originColumn == &#34;Burgundy&#34;)&#xA;        .updateAll(db, priceColumn *= 0.75)&#xA;    &#xA;    // Delete&#xA;    try Wine&#xA;        .filter(corkedColumn == true)&#xA;        .deleteAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to open a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt; before you can query the database.&lt;/p&gt; &#xA;&lt;p&gt;Please bear in mind that the query interface can not generate all possible SQL queries. You may also &lt;em&gt;prefer&lt;/em&gt; writing SQL, and this is just OK. From little snippets to full queries, your SQL skills are welcome:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    // Update database schema (with SQL)&#xA;    try db.execute(sql: &#34;CREATE TABLE wine (...)&#34;)&#xA;    &#xA;    // Fetch records (with SQL)&#xA;    let wines = try Wine.fetchAll(db,&#xA;        sql: &#34;SELECT * FROM wine WHERE origin = ? ORDER BY price&#34;,&#xA;        arguments: [&#34;Burgundy&#34;])&#xA;    &#xA;    // Count (with an SQL snippet)&#xA;    let count = try Wine&#xA;        .filter(sql: &#34;color = ?&#34;, arguments: [Color.red])&#xA;        .fetchCount(db)&#xA;    &#xA;    // Update (with SQL)&#xA;    try db.execute(sql: &#34;UPDATE wine SET price = price * 0.75 WHERE origin = &#39;Burgundy&#39;&#34;)&#xA;    &#xA;    // Delete (with SQL)&#xA;    try db.execute(sql: &#34;DELETE FROM wine WHERE corked&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So don&#39;t miss the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;SQL API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don&#39;t have your application rely on any specific SQL output.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseschema&#34;&gt;The Database Schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#expressions&#34;&gt;Expressions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-operators&#34;&gt;SQL Operators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&#34;&gt;SQL Functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-from-requests&#34;&gt;Fetching from Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-by-key&#34;&gt;Fetching by Key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#testing-for-record-existence&#34;&gt;Testing for Record Existence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-aggregated-values&#34;&gt;Fetching Aggregated Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#delete-requests&#34;&gt;Delete Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#update-requests&#34;&gt;Update Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-requests&#34;&gt;Custom Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations and Joins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;Common Table Expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìò&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/QueryInterfaceOrganization.md&#34;&gt;Query Interface Organization&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The query interface requests&lt;/strong&gt; let you fetch values from the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.filter(emailColumn != nil).order(nameColumn)&#xA;let players = try request.fetchAll(db)  // [Player]&#xA;let count = try request.fetchCount(db)  // Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Query interface requests usually start from &lt;strong&gt;a type&lt;/strong&gt; that adopts the &lt;code&gt;TableRecord&lt;/code&gt; protocol, such as a &lt;code&gt;Record&lt;/code&gt; subclass (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;Records&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Player: Record { ... }&#xA;&#xA;// The request for all players:&#xA;let request = Player.all()&#xA;let players = try request.fetchAll(db) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you can not use a record type, use &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// The request for all rows from the player table:&#xA;let table = Table(&#34;player&#34;)&#xA;let request = table.all()&#xA;let rows = try request.fetchAll(db)    // [Row]&#xA;&#xA;// The request for all players from the player table:&#xA;let table = Table&amp;lt;Player&amp;gt;(&#34;player&#34;)&#xA;let request = table.all()&#xA;let players = try request.fetchAll(db) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: all examples in the documentation below use a record type, but you can always substitute a &lt;code&gt;Table&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Next, declare the table &lt;strong&gt;columns&lt;/strong&gt; that you want to use for filtering, or sorting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let idColumn = Column(&#34;id&#34;)&#xA;let nameColumn = Column(&#34;name&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also declare column enums, if you prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Columns.id and Columns.name can be used just as&#xA;// idColumn and nameColumn declared above.&#xA;enum Columns: String, ColumnExpression {&#xA;    case id&#xA;    case name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now build requests with the following methods: &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;distinct&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;having&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;reversed&lt;/code&gt;, &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;joining&lt;/code&gt;, &lt;code&gt;including&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;. All those methods return another request, which you can further refine by applying another method: &lt;code&gt;Player.select(...).filter(...).order(...)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all()&lt;/code&gt;, &lt;code&gt;none()&lt;/code&gt;: the requests for all rows, or no row.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player&#xA;Player.all()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, all columns are selected. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;select(...)&lt;/code&gt; and &lt;code&gt;select(..., as:)&lt;/code&gt; define the selected columns. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT name FROM player&#xA;Player.select(nameColumn, as: String.self)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotated(with: expression...)&lt;/code&gt; extends the selection.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT *, (score + bonus) AS total FROM player&#xA;Player.annotated(with: (scoreColumn + bonusColumn).forKey(&#34;total&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotated(with: aggregate)&lt;/code&gt; extends the selection with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md#association-aggregates&#34;&gt;association aggregates&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT team.*, COUNT(DISTINCT player.id) AS playerCount&#xA;// FROM team&#xA;// LEFT JOIN player ON player.teamId = team.id&#xA;// GROUP BY team.id&#xA;Team.annotated(with: Team.players.count)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotated(withRequired: association)&lt;/code&gt; and &lt;code&gt;annotated(withOptional: association)&lt;/code&gt; extends the selection with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT player.*, team.color&#xA;// FROM player&#xA;// JOIN team ON team.id = player.teamId&#xA;Player.annotated(withRequired: Player.team.select(colorColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;distinct()&lt;/code&gt; performs uniquing.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT DISTINCT name FROM player&#xA;Player.select(nameColumn, as: String.self).distinct()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;filter(expression)&lt;/code&gt; applies conditions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id IN (1, 2, 3)&#xA;Player.filter([1,2,3].contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE (name IS NOT NULL) AND (height &amp;gt; 1.75)&#xA;Player.filter(nameColumn != nil &amp;amp;&amp;amp; heightColumn &amp;gt; 1.75)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;filter(id:)&lt;/code&gt; and &lt;code&gt;filter(ids:)&lt;/code&gt; are type-safe methods available on &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id = 1&#xA;Player.filter(id: 1)&#xA;&#xA;// SELECT * FROM country WHERE isoCode IN (&#39;FR&#39;, &#39;US&#39;)&#xA;Country.filter(ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;filter(key:)&lt;/code&gt; and &lt;code&gt;filter(keys:)&lt;/code&gt; apply conditions on primary and unique keys:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id = 1&#xA;Player.filter(key: 1)&#xA;&#xA;// SELECT * FROM country WHERE isoCode IN (&#39;FR&#39;, &#39;US&#39;)&#xA;Country.filter(keys: [&#34;FR&#34;, &#34;US&#34;])&#xA;&#xA;// SELECT * FROM citizenship WHERE citizenId = 1 AND countryCode = &#39;FR&#39;&#xA;Citizenship.filter(key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&#xA;// SELECT * FROM player WHERE email = &#39;arthur@example.com&#39;&#xA;Player.filter(key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;matching(pattern)&lt;/code&gt; performs &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;full-text search&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;&#xA;let pattern = FTS3Pattern(matchingAllTokensIn: &#34;SQLite database&#34;)&#xA;Document.matching(pattern)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the pattern is nil, no row will match.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;group(expression, ...)&lt;/code&gt; groups rows.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT name, MAX(score) FROM player GROUP BY name&#xA;Player&#xA;    .select(nameColumn, max(scoreColumn))&#xA;    .group(nameColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;having(expression)&lt;/code&gt; applies conditions on grouped rows.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT team, MAX(score) FROM player GROUP BY team HAVING MIN(score) &amp;gt;= 1000&#xA;Player&#xA;    .select(teamColumn, max(scoreColumn))&#xA;    .group(teamColumn)&#xA;    .having(min(scoreColumn) &amp;gt;= 1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;having(aggregate)&lt;/code&gt; applies conditions on grouped rows, according to an &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md#association-aggregates&#34;&gt;association aggregate&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT team.*&#xA;// FROM team&#xA;// LEFT JOIN player ON player.teamId = team.id&#xA;// GROUP BY team.id&#xA;// HAVING COUNT(DISTINCT player.id) &amp;gt;= 5&#xA;Team.having(Team.players.count &amp;gt;= 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;order(ordering, ...)&lt;/code&gt; sorts.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY name&#xA;Player.order(nameColumn)&#xA;&#xA;// SELECT * FROM player ORDER BY score DESC, name&#xA;Player.order(scoreColumn.desc, nameColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SQLite considers NULL values to be smaller than any other values for sorting purposes. Hence, NULLs naturally appear at the beginning of an ascending ordering and at the end of a descending ordering. With a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CustomSQLiteBuilds.md&#34;&gt;custom SQLite build&lt;/a&gt;, this can be changed using &lt;code&gt;.ascNullsLast&lt;/code&gt; and &lt;code&gt;.descNullsFirst&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY score ASC NULLS LAST&#xA;Player.order(nameColumn.ascNullsLast)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Each &lt;code&gt;order&lt;/code&gt; call clears any previous ordering:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY name&#xA;Player.order(scoreColumn).order(nameColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reversed()&lt;/code&gt; reverses the eventual orderings.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY score ASC, name DESC&#xA;Player.order(scoreColumn.desc, nameColumn).reversed()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If no ordering was already specified, this method has no effect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player&#xA;Player.all().reversed()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;limit(limit, offset: offset)&lt;/code&gt; limits and pages results.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player LIMIT 5&#xA;Player.limit(5)&#xA;&#xA;// SELECT * FROM player LIMIT 5 OFFSET 10&#xA;Player.limit(5, offset: 10)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;joining(...)&lt;/code&gt; and &lt;code&gt;including(...)&lt;/code&gt; fetch and join records through &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT player.*, team.*&#xA;// FROM player&#xA;// JOIN team ON team.id = player.teamId&#xA;Player.including(required: Player.team)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;with(cte)&lt;/code&gt; embeds a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;common table expression&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WITH ... SELECT * FROM player&#xA;let cte = CommonTableExpression(...)&#xA;Player.with(cte)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other requests that involve the primary key:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;selectPrimaryKey(as:)&lt;/code&gt; selects the primary key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT id FROM player&#xA;Player.selectPrimaryKey(as: Int64.self)    // QueryInterfaceRequest&amp;lt;Int64&amp;gt;&#xA;&#xA;// SELECT code FROM country&#xA;Country.selectPrimaryKey(as: String.self)  // QueryInterfaceRequest&amp;lt;String&amp;gt;&#xA;&#xA;// SELECT citizenId, countryCode FROM citizenship&#xA;Citizenship.selectPrimaryKey(as: Row.self) // QueryInterfaceRequest&amp;lt;Row&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;orderByPrimaryKey()&lt;/code&gt; sorts by primary key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player ORDER BY id&#xA;Player.orderByPrimaryKey()&#xA;&#xA;// SELECT * FROM country ORDER BY code&#xA;Country.orderByPrimaryKey()&#xA;&#xA;// SELECT * FROM citizenship ORDER BY citizenId, countryCode&#xA;Citizenship.orderByPrimaryKey()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;groupByPrimaryKey()&lt;/code&gt; groups rows by primary key.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can refine requests by chaining those methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (email IS NOT NULL) ORDER BY name&#xA;Player.order(nameColumn).filter(emailColumn != nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, and &lt;code&gt;limit&lt;/code&gt; methods ignore and replace previously applied selection, orderings, grouping, and limits. On the opposite, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;matching&lt;/code&gt;, and &lt;code&gt;having&lt;/code&gt; methods extend the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Player                          // SELECT * FROM player&#xA;    .filter(nameColumn != nil)  // WHERE (name IS NOT NULL)&#xA;    .filter(emailColumn != nil) //        AND (email IS NOT NULL)&#xA;    .order(nameColumn)          // - ignored -&#xA;    .reversed()                 // - ignored -&#xA;    .order(scoreColumn)         // ORDER BY score&#xA;    .limit(20, offset: 40)      // - ignored -&#xA;    .limit(10)                  // LIMIT 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Raw SQL snippets are also accepted, with eventual &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/statementarguments&#34;&gt;arguments&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT DATE(creationDate), COUNT(*) FROM player WHERE name = &#39;Arthur&#39; GROUP BY date(creationDate)&#xA;Player&#xA;    .select(sql: &#34;DATE(creationDate), COUNT(*)&#34;)&#xA;    .filter(sql: &#34;name = ?&#34;, arguments: [&#34;Arthur&#34;])&#xA;    .group(sql: &#34;DATE(creationDate)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Columns Selected by a Request&lt;/h3&gt; &#xA;&lt;p&gt;By default, query interface requests select all columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player&#xA;struct Player: TableRecord { ... }&#xA;let request = Player.all()&#xA;&#xA;// SELECT * FROM player&#xA;let table = Table(&#34;player&#34;)&#xA;let request = table.all()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The selection can be changed for each individual requests, or in the case of record-based requests, for all requests built from this record type.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;select(...)&lt;/code&gt; and &lt;code&gt;select(..., as:)&lt;/code&gt; methods change the selection of a single request (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-from-requests&#34;&gt;Fetching from Requests&lt;/a&gt; for detailed information):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.select(max(Column(&#34;score&#34;)))&#xA;let maxScore = try Int.fetchOne(db, request) // Int?&#xA;&#xA;let request = Player.select(max(Column(&#34;score&#34;)), as: Int.self)&#xA;let maxScore = try request.fetchOne(db)      // Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default selection for a record type is controlled by the &lt;code&gt;databaseSelection&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct RestrictedPlayer : TableRecord {&#xA;    static let databaseTableName = &#34;player&#34;&#xA;    static let databaseSelection: [any SQLSelectable] = [Column(&#34;id&#34;), Column(&#34;name&#34;)]&#xA;}&#xA;&#xA;struct ExtendedPlayer : TableRecord {&#xA;    static let databaseTableName = &#34;player&#34;&#xA;    static let databaseSelection: [any SQLSelectable] = [AllColumns(), Column.rowID]&#xA;}&#xA;&#xA;// SELECT id, name FROM player&#xA;let request = RestrictedPlayer.all()&#xA;&#xA;// SELECT *, rowid FROM player&#xA;let request = ExtendedPlayer.all()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: make sure the &lt;code&gt;databaseSelection&lt;/code&gt; property is explicitly declared as &lt;code&gt;[any SQLSelectable]&lt;/code&gt;. If it is not, the Swift compiler may silently miss the protocol requirement, resulting in sticky &lt;code&gt;SELECT *&lt;/code&gt; requests. To verify your setup, see the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;How do I print a request as SQL?&lt;/a&gt; FAQ.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Expressions&lt;/h2&gt; &#xA;&lt;p&gt;Feed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; with SQL expressions built from your Swift code:&lt;/p&gt; &#xA;&lt;h3&gt;SQL Operators&lt;/h3&gt; &#xA;&lt;p&gt;GRDB comes with a Swift version of many SQLite &lt;a href=&#34;https://sqlite.org/lang_expr.html#operators&#34;&gt;built-in operators&lt;/a&gt;, listed below. But not all: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt; for a way to add support for missing SQL operators.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;IS&lt;/code&gt;, &lt;code&gt;IS NOT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Comparison operators are based on the Swift operators &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (name = &#39;Arthur&#39;)&#xA;Player.filter(nameColumn == &#34;Arthur&#34;)&#xA;&#xA;// SELECT * FROM player WHERE (name IS NULL)&#xA;Player.filter(nameColumn == nil)&#xA;&#xA;// SELECT * FROM player WHERE (score IS 1000)&#xA;Player.filter(scoreColumn === 1000)&#xA;&#xA;// SELECT * FROM rectangle WHERE width &amp;lt; height&#xA;Rectangle.filter(widthColumn &amp;lt; heightColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Subqueries are supported:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE score = (SELECT max(score) FROM player)&#xA;let maximumScore = Player.select(max(scoreColumn))&#xA;Player.filter(scoreColumn == maximumScore)&#xA;&#xA;// SELECT * FROM player WHERE score = (SELECT max(score) FROM player)&#xA;let maximumScore = SQLRequest(&#34;SELECT max(score) FROM player&#34;)&#xA;Player.filter(scoreColumn == maximumScore)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&#34;&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;&lt;/p&gt; &lt;p&gt;SQLite arithmetic operators are derived from their Swift equivalent:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT ((temperature * 1.8) + 32) AS fahrenheit FROM planet&#xA;Planet.select((temperatureColumn * 1.8 + 32).forKey(&#34;fahrenheit&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: an expression like &lt;code&gt;nameColumn + &#34;rrr&#34;&lt;/code&gt; will be interpreted by SQLite as a numerical addition (with funny results), not as a string concatenation. See the &lt;code&gt;concat&lt;/code&gt; operator below.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;When you want to join a sequence of expressions with the &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; operator, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT score + bonus + 1000 FROM player&#xA;let values = [&#xA;    scoreColumn,&#xA;    bonusColumn,&#xA;    1000.databaseValue]&#xA;Player.select(values.joined(operator: .add))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note in the example above how you concatenate raw values: &lt;code&gt;1000.databaseValue&lt;/code&gt;. A plain &lt;code&gt;1000&lt;/code&gt; would not compile.&lt;/p&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .add)&lt;/code&gt; returns 0, and &lt;code&gt;joined(operator: .multiply)&lt;/code&gt; returns 1.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;||&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Concatenate several strings:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT firstName || &#39; &#39; || lastName FROM player&#xA;Player.select([firstNameColumn, &#34; &#34;.databaseValue, lastNameColumn].joined(operator: .concat))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note in the example above how you concatenate raw strings: &lt;code&gt;&#34; &#34;.databaseValue&lt;/code&gt;. A plain &lt;code&gt;&#34; &#34;&lt;/code&gt; would not compile.&lt;/p&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .concat)&lt;/code&gt; returns the empty string.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOT&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The SQL logical operators are derived from the Swift &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE ((NOT verified) OR (score &amp;lt; 1000))&#xA;Player.filter(!verifiedColumn || scoreColumn &amp;lt; 1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you want to join a sequence of expressions with the &lt;code&gt;AND&lt;/code&gt; or &lt;code&gt;OR&lt;/code&gt; operator, use &lt;code&gt;joined(operator:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (verified AND (score &amp;gt;= 1000) AND (name IS NOT NULL))&#xA;let conditions = [&#xA;    verifiedColumn,&#xA;    scoreColumn &amp;gt;= 1000,&#xA;    nameColumn != nil]&#xA;Player.filter(conditions.joined(operator: .and))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the sequence is empty, &lt;code&gt;joined(operator: .and)&lt;/code&gt; returns true, and &lt;code&gt;joined(operator: .or)&lt;/code&gt; returns false:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE 1&#xA;Player.filter([].joined(operator: .and))&#xA;&#xA;// SELECT * FROM player WHERE 0&#xA;Player.filter([].joined(operator: .or))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt;, &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;NOT IN&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To check inclusion in a Swift sequence (array, set, range‚Ä¶), call the &lt;code&gt;contains&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id IN (1, 2, 3)&#xA;Player.filter([1, 2, 3].contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE id NOT IN (1, 2, 3)&#xA;Player.filter(![1, 2, 3].contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE score BETWEEN 0 AND 1000&#xA;Player.filter((0...1000).contains(scoreColumn))&#xA;&#xA;// SELECT * FROM player WHERE (score &amp;gt;= 0) AND (score &amp;lt; 1000)&#xA;Player.filter((0..&amp;lt;1000).contains(scoreColumn))&#xA;&#xA;// SELECT * FROM player WHERE initial BETWEEN &#39;A&#39; AND &#39;N&#39;&#xA;Player.filter((&#34;A&#34;...&#34;N&#34;).contains(initialColumn))&#xA;&#xA;// SELECT * FROM player WHERE (initial &amp;gt;= &#39;A&#39;) AND (initial &amp;lt; &#39;N&#39;)&#xA;Player.filter((&#34;A&#34;..&amp;lt;&#34;N&#34;).contains(initialColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To check inclusion inside a subquery, call the &lt;code&gt;contains&lt;/code&gt; method as well:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE id IN (SELECT playerId FROM playerSelection)&#xA;let selectedPlayerIds = PlayerSelection.select(playerIdColumn)&#xA;Player.filter(selectedPlayerIds.contains(idColumn))&#xA;&#xA;// SELECT * FROM player WHERE id IN (SELECT playerId FROM playerSelection)&#xA;let selectedPlayerIds = SQLRequest(&#34;SELECT playerId FROM playerSelection&#34;)&#xA;Player.filter(selectedPlayerIds.contains(idColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To check inclusion inside a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;common table expression&lt;/a&gt;, call the &lt;code&gt;contains&lt;/code&gt; method as well:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WITH selectedName AS (...)&#xA;// SELECT * FROM player WHERE name IN selectedName&#xA;let cte = CommonTableExpression(named: &#34;selectedName&#34;, ...)&#xA;Player&#xA;    .with(cte)&#xA;    .filter(cte.contains(nameColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: SQLite string comparison, by default, is case-sensitive and not Unicode-aware. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&#34;&gt;string comparison&lt;/a&gt; if you need more control.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;EXISTS&lt;/code&gt;, &lt;code&gt;NOT EXISTS&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To check if a subquery would return rows, call the &lt;code&gt;exists&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Teams that have at least one other player&#xA;//&#xA;//  SELECT * FROM team&#xA;//  WHERE EXISTS (SELECT * FROM player WHERE teamID = team.id)&#xA;let teamAlias = TableAlias()&#xA;let player = Player.filter(Column(&#34;teamID&#34;) == teamAlias[Column(&#34;id&#34;)])&#xA;let teams = Team.aliased(teamAlias).filter(player.exists())&#xA;&#xA;// Teams that have no player&#xA;//&#xA;//  SELECT * FROM team&#xA;//  WHERE NOT EXISTS (SELECT * FROM player WHERE teamID = team.id)&#xA;let teams = Team.aliased(teamAlias).filter(!player.exists())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, you use a &lt;code&gt;TableAlias&lt;/code&gt; in order to let a subquery refer to a column from another table.&lt;/p&gt; &lt;p&gt;In the next example, which involves the same table twice, the table alias requires an explicit disambiguation with &lt;code&gt;TableAlias(name:)&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Players who coach at least one other player&#xA;//&#xA;//  SELECT coach.* FROM player coach&#xA;//  WHERE EXISTS (SELECT * FROM player WHERE coachId = coach.id)&#xA;let coachAlias = TableAlias(name: &#34;coach&#34;)&#xA;let coachedPlayer = Player.filter(Column(&#34;coachId&#34;) == coachAlias[Column(&#34;id&#34;)])&#xA;let coaches = Player.aliased(coachAlias).filter(coachedPlayer.exists())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, subqueries can also be expressed as SQL, with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT coach.* FROM player coach&#xA;// WHERE EXISTS (SELECT * FROM player WHERE coachId = coach.id)&#xA;let coachedPlayer = SQLRequest(&#34;SELECT * FROM player WHERE coachId = \(coachAlias[Column(&#34;id&#34;)])&#34;)&#xA;let coaches = Player.aliased(coachAlias).filter(coachedPlayer.exists())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LIKE&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The SQLite LIKE operator is available as the &lt;code&gt;like&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (email LIKE &#39;%@example.com&#39;)&#xA;Player.filter(emailColumn.like(&#34;%@example.com&#34;))&#xA;&#xA;// SELECT * FROM book WHERE (title LIKE &#39;%10\%%&#39; ESCAPE &#39;\&#39;)&#xA;Player.filter(emailColumn.like(&#34;%10\\%%&#34;, escape: &#34;\\&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the SQLite LIKE operator is case-insensitive but not Unicode-aware. For example, the expression &lt;code&gt;&#39;a&#39; LIKE &#39;A&#39;&lt;/code&gt; is true but &lt;code&gt;&#39;√¶&#39; LIKE &#39;√Ü&#39;&lt;/code&gt; is false.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;MATCH&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The full-text MATCH operator is available through &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts3pattern&#34;&gt;FTS3Pattern&lt;/a&gt; (for FTS3 and FTS4 tables) and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#fts5pattern&#34;&gt;FTS5Pattern&lt;/a&gt; (for FTS5):&lt;/p&gt; &lt;p&gt;FTS3 and FTS4:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let pattern = FTS3Pattern(matchingAllTokensIn: &#34;SQLite database&#34;)&#xA;&#xA;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;&#xA;Document.matching(pattern)&#xA;&#xA;// SELECT * FROM document WHERE content MATCH &#39;sqlite database&#39;&#xA;Document.filter(contentColumn.match(pattern))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;FTS5:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let pattern = FTS5Pattern(matchingAllTokensIn: &#34;SQLite database&#34;)&#xA;&#xA;// SELECT * FROM document WHERE document MATCH &#39;sqlite database&#39;&#xA;Document.matching(pattern)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AS&lt;/code&gt;&lt;/p&gt; &lt;p&gt;To give an alias to an expression, use the &lt;code&gt;forKey&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT (score + bonus) AS total&#xA;// FROM player&#xA;Player.select((Column(&#34;score&#34;) + Column(&#34;bonus&#34;)).forKey(&#34;total&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need to refer to this aliased column in another place of the request, use a detached column:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT (score + bonus) AS total&#xA;// FROM player &#xA;// ORDER BY total&#xA;Player&#xA;    .select((Column(&#34;score&#34;) + Column(&#34;bonus&#34;)).forKey(&#34;total&#34;))&#xA;    .order(Column(&#34;total&#34;).detached)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Unlike &lt;code&gt;Column(&#34;total&#34;)&lt;/code&gt;, the detached column &lt;code&gt;Column(&#34;total&#34;).detached&lt;/code&gt; is never associated to the &#34;player&#34; table, so it is always rendered as &lt;code&gt;total&lt;/code&gt; in the generated SQL, even when the request involves other tables via an &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;association&lt;/a&gt; or a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;common table expression&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SQL Functions&lt;/h3&gt; &#xA;&lt;p&gt;GRDB comes with a Swift version of many SQLite &lt;a href=&#34;https://sqlite.org/lang_corefunc.html&#34;&gt;built-in functions&lt;/a&gt;, listed below. But not all: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt; for a way to add support for missing SQL functions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ABS&lt;/code&gt;, &lt;code&gt;AVG&lt;/code&gt;, &lt;code&gt;COUNT&lt;/code&gt;, &lt;code&gt;DATETIME&lt;/code&gt;, &lt;code&gt;JULIANDAY&lt;/code&gt;, &lt;code&gt;LENGTH&lt;/code&gt;, &lt;code&gt;MAX&lt;/code&gt;, &lt;code&gt;MIN&lt;/code&gt;, &lt;code&gt;SUM&lt;/code&gt;, &lt;code&gt;TOTAL&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;Those are based on the &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;dateTime&lt;/code&gt;, &lt;code&gt;julianDay&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;total&lt;/code&gt; Swift functions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT MIN(score), MAX(score) FROM player&#xA;Player.select(min(scoreColumn), max(scoreColumn))&#xA;&#xA;// SELECT COUNT(name) FROM player&#xA;Player.select(count(nameColumn))&#xA;&#xA;// SELECT COUNT(DISTINCT name) FROM player&#xA;Player.select(count(distinct: nameColumn))&#xA;&#xA;// SELECT JULIANDAY(date, &#39;start of year&#39;) FROM game&#xA;Game.select(julianDay(dateColumn, .startOfYear))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more information about the functions &lt;code&gt;dateTime&lt;/code&gt; and &lt;code&gt;julianDay&lt;/code&gt;, see &lt;a href=&#34;https://www.sqlite.org/lang_datefunc.html&#34;&gt;Date And Time Functions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;IFNULL&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Use the Swift &lt;code&gt;??&lt;/code&gt; operator:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;Anonymous&#39;) FROM player&#xA;Player.select(nameColumn ?? &#34;Anonymous&#34;)&#xA;&#xA;// SELECT IFNULL(name, email) FROM player&#xA;Player.select(nameColumn ?? emailColumn)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LOWER&lt;/code&gt;, &lt;code&gt;UPPER&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query interface does not give access to those SQLite functions. Nothing against them, but they are not unicode aware.&lt;/p&gt; &lt;p&gt;Instead, GRDB extends SQLite with SQL functions that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Player.select(nameColumn.uppercased())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When &lt;em&gt;comparing&lt;/em&gt; strings, you&#39;d rather use a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#string-comparison&#34;&gt;collation&lt;/a&gt;:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String = ...&#xA;&#xA;// Not recommended&#xA;nameColumn.uppercased() == name.uppercased()&#xA;&#xA;// Better&#xA;nameColumn.collating(.caseInsensitiveCompare) == name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Custom SQL functions and aggregates&lt;/p&gt; &lt;p&gt;You can apply your own &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-functions-&#34;&gt;custom SQL functions and aggregates&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let f = DatabaseFunction(&#34;f&#34;, ...)&#xA;&#xA;// SELECT f(name) FROM player&#xA;Player.select(f.apply(nameColumn))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Embedding SQL in Query Interface Requests&lt;/h2&gt; &#xA;&lt;p&gt;You will sometimes want to extend your query interface requests with SQL snippets. This can happen because GRDB does not provide a Swift interface for some SQL function or operator, or because you want to use an SQLite construct that GRDB does not support.&lt;/p&gt; &#xA;&lt;p&gt;Support for extensibility is large, but not unlimited. All the SQL queries built by the query interface request have the shape below. &lt;em&gt;If you need something else, you&#39;ll have to use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-api&#34;&gt;raw SQL requests&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;WITH ...     -- 1&#xA;SELECT ...   -- 2&#xA;FROM ...     -- 3&#xA;JOIN ...     -- 4&#xA;WHERE ...    -- 5&#xA;GROUP BY ... -- 6&#xA;HAVING ...   -- 7&#xA;ORDER BY ... -- 8&#xA;LIMIT ...    -- 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WITH ...&lt;/code&gt;: see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/CommonTableExpressions.md&#34;&gt;Common Table Expressions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SELECT ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The selection can be provided as raw SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player&#xA;let request = Player.select(sql: &#34;IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score&#34;)&#xA;&#xA;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let request = Player.select(sql: &#34;IFNULL(name, ?), score&#34;, arguments: [suffix])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The selection can be provided with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;), score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let request = Player.select(literal: &#34;IFNULL(name, \(defaultName)), score&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The selection can be provided with a mix of Swift and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;) AS displayName, score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let displayName: SQL = &#34;IFNULL(\(Column(&#34;name&#34;)), \(defaultName)) AS displayName&#34;&#xA;let request = Player.select(displayName, Column(&#34;score&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the custom SQL snippet should behave as a full-fledged expression, with support for the &lt;code&gt;+&lt;/code&gt; Swift operator, the &lt;code&gt;forKey&lt;/code&gt; aliasing method, and all other &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-operators&#34;&gt;SQL Operators&lt;/a&gt;, build an &lt;em&gt;expression literal&lt;/em&gt; with the &lt;code&gt;SQL.sqlExpression&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT IFNULL(name, &#39;O&#39;&#39;Brien&#39;) AS displayName, score FROM player&#xA;let defaultName = &#34;O&#39;Brien&#34;&#xA;let displayName = SQL(&#34;IFNULL(\(Column(&#34;name&#34;)), \(defaultName))&#34;).sqlExpression&#xA;let request = Player.select(displayName.forKey(&#34;displayName&#34;), Column(&#34;score&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Such expression literals allow you to build a reusable support library of SQL functions or operators that are missing from the query interface. For example, you can define a Swift &lt;code&gt;date&lt;/code&gt; function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func date(_ value: some SQLSpecificExpressible) -&amp;gt; SQLExpression {&#xA;    SQL(&#34;DATE(\(value))&#34;).sqlExpression&#xA;}&#xA;&#xA;// SELECT * FROM &#34;player&#34; WHERE DATE(&#34;createdAt&#34;) = &#39;2020-01-23&#39;&#xA;let request = Player.filter(date(Column(&#34;createdAt&#34;)) == &#34;2020-01-23&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/QueryInterfaceOrganization.md&#34;&gt;Query Interface Organization&lt;/a&gt; for more information about &lt;code&gt;SQLSpecificExpressible&lt;/code&gt; and &lt;code&gt;SQLExpression&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;FROM ...&lt;/code&gt;: only one table is supported here. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;JOIN ...&lt;/code&gt;: joins are fully controlled by &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WHERE ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The WHERE clause can be provided as raw SQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE score &amp;gt;= 1000&#xA;let request = Player.filter(sql: &#34;score &amp;gt;= 1000&#34;)&#xA;&#xA;// SELECT * FROM player WHERE score &amp;gt;= 1000&#xA;let minScore = 1000&#xA;let request = Player.filter(sql: &#34;score &amp;gt;= ?&#34;, arguments: [minScore])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The WHERE clause can be provided with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE score &amp;gt;= 1000&#xA;let minScore = 1000&#xA;let request = Player.filter(literal: &#34;score &amp;gt;= \(minScore)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The WHERE clause can be provided with a mix of Swift and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM player WHERE (score &amp;gt;= 1000) AND (team = &#39;red&#39;)&#xA;let minScore = 1000&#xA;let scoreCondition: SQL = &#34;\(Column(&#34;score&#34;)) &amp;gt;= \(minScore)&#34;&#xA;let request = Player.filter(scoreCondition &amp;amp;&amp;amp; Column(&#34;team&#34;) == &#34;red&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;code&gt;SELECT ...&lt;/code&gt; above for more SQL Interpolation examples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GROUP BY ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The GROUP BY clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HAVING ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The HAVING clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ORDER BY ...&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The ORDER BY clause can be provided as raw SQL, SQL Interpolation, or a mix of Swift and SQL Interpolation, just as the selection and the WHERE clause (see above).&lt;/p&gt; &lt;p&gt;In order to support the &lt;code&gt;desc&lt;/code&gt; and &lt;code&gt;asc&lt;/code&gt; query interface operators, and the &lt;code&gt;reversed()&lt;/code&gt; query interface method, you must provide your orderings as &lt;em&gt;expression literals&lt;/em&gt; with the &lt;code&gt;SQL.sqlExpression&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM &#34;player&#34; &#xA;// ORDER BY (score + bonus) ASC, name DESC&#xA;let total = SQL(&#34;(score + bonus)&#34;).sqlExpression&#xA;let request = Player&#xA;    .order(total.desc, Column(&#34;name&#34;))&#xA;    .reversed()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LIMIT ...&lt;/code&gt;: use the &lt;code&gt;limit(_:offset:)&lt;/code&gt; method. You can not customize this SQL part.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Fetching from Requests&lt;/h2&gt; &#xA;&lt;p&gt;Once you have a request, you can fetch the records at the origin of the request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Some request based on `Player`&#xA;let request = Player.filter(...)... // QueryInterfaceRequest&amp;lt;Player&amp;gt;&#xA;&#xA;// Fetch players:&#xA;try request.fetchCursor(db) // A Cursor of Player&#xA;try request.fetchAll(db)    // [Player]&#xA;try request.fetchSet(db)    // Set&amp;lt;Player&amp;gt;&#xA;try request.fetchOne(db)    // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let allPlayers = try Player.fetchAll(db)                            // [Player]&#xA;let arthur = try Player.filter(nameColumn == &#34;Arthur&#34;).fetchOne(db) // Player?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-methods&#34;&gt;fetching methods&lt;/a&gt; for information about the &lt;code&gt;fetchCursor&lt;/code&gt;, &lt;code&gt;fetchAll&lt;/code&gt;, &lt;code&gt;fetchSet&lt;/code&gt; and &lt;code&gt;fetchOne&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You sometimes want to fetch other values&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The simplest way is to use the request as an argument to a fetching method of the desired type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Fetch an Int&#xA;let request = Player.select(max(scoreColumn))&#xA;let maxScore = try Int.fetchOne(db, request) // Int?&#xA;&#xA;// Fetch a Row&#xA;let request = Player.select(min(scoreColumn), max(scoreColumn))&#xA;let row = try Row.fetchOne(db, request)!     // Row&#xA;let minScore = row[0] as Int?&#xA;let maxScore = row[1] as Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the request so that it knows the type it has to fetch:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;With &lt;code&gt;asRequest(of:)&lt;/code&gt;, useful when you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BookInfo: FetchableRecord, Decodable {&#xA;    var book: Book&#xA;    var author: Author&#xA;}&#xA;&#xA;// A request of BookInfo&#xA;let request = Book&#xA;    .including(required: Book.author)&#xA;    .asRequest(of: BookInfo.self)&#xA;&#xA;let bookInfos = try dbQueue.read { db in&#xA;    try request.fetchAll(db) // [BookInfo]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With &lt;code&gt;select(..., as:)&lt;/code&gt;, which is handy when you change the selection:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// A request of Int&#xA;let request = Player.select(max(scoreColumn), as: Int.self)&#xA;&#xA;let maxScore = try dbQueue.read { db in&#xA;    try request.fetchOne(db) // Int?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fetching by Key&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fetching records according to their primary key&lt;/strong&gt; is a common task.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt; can use the type-safe methods &lt;code&gt;find(_&lt;span&gt;üÜî&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchOne(_&lt;span&gt;üÜî&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchAll(_:ids:)&lt;/code&gt; and &lt;code&gt;fetchSet(_:ids:)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.find(db, id: 1)                   // Player&#xA;try Player.fetchOne(db, id: 1)               // Player?&#xA;try Country.fetchAll(db, ids: [&#34;FR&#34;, &#34;US&#34;])  // [Countries]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All record types can use &lt;code&gt;find(_&lt;span&gt;üîë&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchOne(_&lt;span&gt;üîë&lt;/span&gt;)&lt;/code&gt;, &lt;code&gt;fetchAll(_:keys:)&lt;/code&gt; and &lt;code&gt;fetchSet(_:keys:)&lt;/code&gt; that apply conditions on primary and unique keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.find(db, key: 1)                  // Player&#xA;try Player.fetchOne(db, key: 1)              // Player?&#xA;try Country.fetchAll(db, keys: [&#34;FR&#34;, &#34;US&#34;]) // [Country]&#xA;try Player.fetchOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])            // Player?&#xA;try Citizenship.fetchOne(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;]) // Citizenship?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href=&#34;https://www.sqlite.org/rowidtable.html&#34;&gt;hidden &lt;code&gt;rowid&lt;/code&gt; column&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT * FROM document WHERE rowid = 1&#xA;try Document.fetchOne(db, key: 1)            // Document?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When you want to build a request and plan to fetch from it later&lt;/strong&gt;, use a &lt;code&gt;filter&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.filter(id: 1)&#xA;let request = Country.filter(ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;let request = Player.filter(key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;let request = Citizenship.filter(key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing for Record Existence&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can check if a request has matching rows in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Some request based on `Player`&#xA;let request = Player.filter(...)...&#xA;&#xA;// Check for player existence:&#xA;let noSuchPlayer = try request.isEmpty(db) // Bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should check for emptiness instead of counting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Correct&#xA;let noSuchPlayer = try request.fetchCount(db) == 0&#xA;// Even better&#xA;let noSuchPlayer = try request.isEmpty(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can also check if a given primary or unique key exists in the database.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt; can use the type-safe method &lt;code&gt;exists(_&lt;span&gt;üÜî&lt;/span&gt;)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.exists(db, id: 1)&#xA;try Country.exists(db, id: &#34;FR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All record types can use &lt;code&gt;exists(_&lt;span&gt;üîë&lt;/span&gt;)&lt;/code&gt; that can check primary and unique keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.exists(db, key: 1)&#xA;try Country.exists(db, key: &#34;FR&#34;)&#xA;try Player.exists(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Citizenship.exists(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should check for key existence instead of fetching a record and checking for nil:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Correct&#xA;let playerExists = try Player.fetchOne(db, id: 1) != nil&#xA;// Even better&#xA;let playerExists = try Player.exists(db, id: 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fetching Aggregated Values&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests can count.&lt;/strong&gt; The &lt;code&gt;fetchCount()&lt;/code&gt; method returns the number of rows that would be returned by a fetch request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// SELECT COUNT(*) FROM player&#xA;let count = try Player.fetchCount(db) // Int&#xA;&#xA;// SELECT COUNT(*) FROM player WHERE email IS NOT NULL&#xA;let count = try Player.filter(emailColumn != nil).fetchCount(db)&#xA;&#xA;// SELECT COUNT(DISTINCT name) FROM player&#xA;let count = try Player.select(nameColumn).distinct().fetchCount(db)&#xA;&#xA;// SELECT COUNT(*) FROM (SELECT DISTINCT name, score FROM player)&#xA;let count = try Player.select(nameColumn, scoreColumn).distinct().fetchCount(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other aggregated values&lt;/strong&gt; can also be selected and fetched (see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&#34;&gt;SQL Functions&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.select(max(scoreColumn))&#xA;let maxScore = try Int.fetchOne(db, request) // Int?&#xA;&#xA;let request = Player.select(min(scoreColumn), max(scoreColumn))&#xA;let row = try Row.fetchOne(db, request)!     // Row&#xA;let minScore = row[0] as Int?&#xA;let maxScore = row[1] as Int?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delete Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests can delete records&lt;/strong&gt;, with the &lt;code&gt;deleteAll()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DELETE FROM player&#xA;try Player.deleteAll(db)&#xA;&#xA;// DELETE FROM player WHERE team = &#39;red&#39;&#xA;try Player&#xA;    .filter(teamColumn == &#34;red&#34;)&#xA;    .deleteAll(db)&#xA;&#xA;// DELETE FROM player ORDER BY score LIMIT 10&#xA;try Player&#xA;    .order(scoreColumn)&#xA;    .limit(10)&#xA;    .deleteAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Deletion methods are available on types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol, and &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: TableRecord { ... }&#xA;try Player.deleteAll(db)          // Fine&#xA;try Table(&#34;player&#34;).deleteAll(db) // Just as fine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Deleting records according to their primary key&lt;/strong&gt; is a common task.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#identifiable-records&#34;&gt;Identifiable Records&lt;/a&gt; can use the type-safe methods &lt;code&gt;deleteOne(_&lt;span&gt;üÜî&lt;/span&gt;)&lt;/code&gt; and &lt;code&gt;deleteAll(_:ids:)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.deleteOne(db, id: 1)&#xA;try Country.deleteAll(db, ids: [&#34;FR&#34;, &#34;US&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All record types can use &lt;code&gt;deleteOne(_&lt;span&gt;üîë&lt;/span&gt;)&lt;/code&gt; and &lt;code&gt;deleteAll(_:keys:)&lt;/code&gt; that apply conditions on primary and unique keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.deleteOne(db, key: 1)&#xA;try Country.deleteAll(db, keys: [&#34;FR&#34;, &#34;US&#34;])&#xA;try Player.deleteOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;try Citizenship.deleteOne(db, key: [&#34;citizenId&#34;: 1, &#34;countryCode&#34;: &#34;FR&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the table has no explicit primary key, GRDB uses the &lt;a href=&#34;https://www.sqlite.org/rowidtable.html&#34;&gt;hidden &lt;code&gt;rowid&lt;/code&gt; column&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DELETE FROM document WHERE rowid = 1&#xA;try Document.deleteOne(db, id: 1)             // Document?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Update Requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requests can batch update records&lt;/strong&gt;. The &lt;code&gt;updateAll()&lt;/code&gt; method accepts &lt;em&gt;column assignments&lt;/em&gt; defined with the &lt;code&gt;set(to:)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE player SET score = 0, isHealthy = 1, bonus = NULL&#xA;try Player.updateAll(db, &#xA;    Column(&#34;score&#34;).set(to: 0), &#xA;    Column(&#34;isHealthy&#34;).set(to: true), &#xA;    Column(&#34;bonus&#34;).set(to: nil))&#xA;&#xA;// UPDATE player SET score = 0 WHERE team = &#39;red&#39;&#xA;try Player&#xA;    .filter(Column(&#34;team&#34;) == &#34;red&#34;)&#xA;    .updateAll(db, Column(&#34;score&#34;).set(to: 0))&#xA;&#xA;// UPDATE player SET top = 1 ORDER BY score DESC LIMIT 10&#xA;try Player&#xA;    .order(Column(&#34;score&#34;).desc)&#xA;    .limit(10)&#xA;    .updateAll(db, Column(&#34;top&#34;).set(to: true))&#xA;&#xA;// UPDATE country SET population = 67848156 WHERE id = &#39;FR&#39;&#xA;try Country&#xA;    .filter(id: &#34;FR&#34;)&#xA;    .updateAll(db, Column(&#34;population&#34;).set(to: 67_848_156))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Column assignments accept any expression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE player SET score = score + (bonus * 2)&#xA;try Player.updateAll(db, Column(&#34;score&#34;).set(to: Column(&#34;score&#34;) + Column(&#34;bonus&#34;) * 2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a convenience, you can also use the &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, or &lt;code&gt;/=&lt;/code&gt; operators:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE player SET score = score + (bonus * 2)&#xA;try Player.updateAll(db, Column(&#34;score&#34;) += Column(&#34;bonus&#34;) * 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#conflict-resolution&#34;&gt;Conflict Resolution&lt;/a&gt; rules apply, and you may also provide a specific one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// UPDATE OR IGNORE player SET ...&#xA;try Player.updateAll(db, onConflict: .ignore, /* assignments... */)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;updateAll&lt;/code&gt; method is available on types that adopt the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol, and &lt;code&gt;Table&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: TableRecord { ... }&#xA;try Player.updateAll(db, ...)          // Fine&#xA;try Table(&#34;player&#34;).updateAll(db, ...) // Just as fine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Custom Requests&lt;/h2&gt; &#xA;&lt;p&gt;Until now, we have seen &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#requests&#34;&gt;requests&lt;/a&gt; created from any type that adopts the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = Player.all()  // QueryInterfaceRequest&amp;lt;Player&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those requests of type &lt;code&gt;QueryInterfaceRequest&lt;/code&gt; can fetch and count:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try request.fetchCursor(db) // A Cursor of Player&#xA;try request.fetchAll(db)    // [Player]&#xA;try request.fetchSet(db)    // Set&amp;lt;Player&amp;gt;&#xA;try request.fetchOne(db)    // Player?&#xA;try request.fetchCount(db)  // Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;When the query interface can not generate the SQL you need&lt;/strong&gt;, you can still fallback to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetch-queries&#34;&gt;raw SQL&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Custom SQL is always welcome&#xA;try Player.fetchAll(db, sql: &#34;SELECT ...&#34;)   // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But you may prefer to bring some elegance back in, and build custom requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// No custom SQL in sight&#xA;try Player.customRequest().fetchAll(db) // [Player]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To build custom requests&lt;/strong&gt;, you can use one of the built-in requests or derive requests from other requests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/sqlrequest&#34;&gt;SQLRequest&lt;/a&gt; is a fetch request built from raw SQL. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Player {&#xA;    static func filter(color: Color) -&amp;gt; SQLRequest&amp;lt;Player&amp;gt; {&#xA;        SQLRequest&amp;lt;Player&amp;gt;(&#xA;            sql: &#34;SELECT * FROM player WHERE color = ?&#34;&#xA;            arguments: [color])&#xA;    }&#xA;}&#xA;&#xA;// [Player]&#xA;try Player.filter(color: .red).fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;SQLRequest supports &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Player {&#xA;    static func filter(color: Color) -&amp;gt; SQLRequest&amp;lt;Player&amp;gt; {&#xA;        &#34;SELECT * FROM player WHERE color = \(color)&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;asRequest(of:)&lt;/code&gt; method changes the type fetched by the request. It is useful, for example, when you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BookInfo: FetchableRecord, Decodable {&#xA;    var book: Book&#xA;    var author: Author&#xA;}&#xA;&#xA;let request = Book&#xA;    .including(required: Book.author)&#xA;    .asRequest(of: BookInfo.self)&#xA;&#xA;// [BookInfo]&#xA;try request.fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;adapted(_:)&lt;/code&gt; method eases the consumption of complex rows with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;row adapters&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#joined-queries-support&#34;&gt;Joined Queries Support&lt;/a&gt; for some sample code that uses this method.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Joined Queries Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB helps consuming joined queries with complex selection.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this chapter, we will focus on the extraction of information from complex rows, such as the ones fetched by the query below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- How to consume the left, middle, and right parts of those rows?&#xA;SELECT player.*, team.*, MAX(round.score) AS maxScore&#xA;FROM player&#xA;LEFT JOIN team ON ...&#xA;LEFT JOIN round ON ...&#xA;GROUP BY ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We will not talk about the &lt;em&gt;generation&lt;/em&gt; of joined queries, which is covered in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/AssociationsBasics.md&#34;&gt;Associations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;So what are we talking about?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is difficult to consume rows fetched from complex joined queries, because they often contain several columns with the same name: &lt;code&gt;id&lt;/code&gt; from table &lt;code&gt;player&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; from table &lt;code&gt;team&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;When such ambiguity happens, GRDB row accessors always favor the leftmost matching column. This means that &lt;code&gt;row[&#34;id&#34;]&lt;/code&gt; would give a player id, without any obvious way to access the team id.&lt;/p&gt; &#xA;&lt;p&gt;A classical technique to avoid this ambiguity is to give each column a unique name. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- A classical technique&#xA;SELECT player.id AS player_id, player.name AS player_name, team.id AS team_id, team.name AS team_name, team.color AS team_color, MAX(round.score) AS maxScore&#xA;FROM player&#xA;LEFT JOIN team ON ...&#xA;LEFT JOIN round ON ...&#xA;GROUP BY ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This technique works pretty well, but it has three drawbacks:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The selection becomes hard to read and understand.&lt;/li&gt; &#xA; &lt;li&gt;Such queries are difficult to write by hand.&lt;/li&gt; &#xA; &lt;li&gt;The mangled names are a &lt;em&gt;very&lt;/em&gt; bad fit for &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; types that expect specific column names. After all, if the &lt;code&gt;Team&lt;/code&gt; record type can read &lt;code&gt;SELECT * FROM team ...&lt;/code&gt;, it should be able to read &lt;code&gt;SELECT ..., team.*, ...&lt;/code&gt; as well.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We thus need another technique. &lt;strong&gt;Below we&#39;ll see how to split rows into slices, and preserve column names.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SELECT player.*, team.*, MAX(round.score) AS maxScore FROM ...&lt;/code&gt; will be split into three slices: one that contains player&#39;s columns, one that contains team&#39;s columns, and a remaining slice that contains remaining column(s). The Player record type will be able to read the first slice, which contains the columns expected by the &lt;code&gt;Player.init(row:)&lt;/code&gt; initializer. In the same way, the Team record type could read the second slice.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the name-mangling technique, splitting rows keeps SQL legible, accepts your hand-crafted SQL queries, and plays as nicely as possible with your existing &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;record types&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-an-introduction&#34;&gt;Splitting Rows, an Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-record-way&#34;&gt;Splitting Rows, the Record Way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-codable-way&#34;&gt;Splitting Rows, the Codable Way&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Splitting Rows, an Introduction&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s first write some introductory code, hoping that this chapter will make you understand how pieces fall together. We&#39;ll see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-record-way&#34;&gt;later&lt;/a&gt; how records will help us streamline the initial approach, how to track changes in joined requests, and how we can use the standard Decodable protocol.&lt;/p&gt; &#xA;&lt;p&gt;To split rows, we will use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;row adapters&lt;/a&gt;. Row adapters adapt rows so that row consumers see exactly the columns they want. Among other things, row adapters can define several &lt;em&gt;row scopes&lt;/em&gt; that give access to as many &lt;em&gt;row slices&lt;/em&gt;. Sounds like a perfect match.&lt;/p&gt; &#xA;&lt;p&gt;At the very beginning, there is an SQL query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    let sql = &#34;&#34;&#34;&#xA;        SELECT player.*, team.*, MAX(round.score) AS maxScore&#xA;        FROM player&#xA;        LEFT JOIN team ON ...&#xA;        LEFT JOIN round ON ...&#xA;        GROUP BY ...&#xA;        &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We need an adapter that extracts player columns, in a slice that has as many columns as there are columns in the player table. That&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#rangerowadapter&#34;&gt;RangeRowAdapter&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // SELECT player.*, team.*, ...&#xA;    //        &amp;lt;------&amp;gt;&#xA;    let playerWidth = try db.columns(in: &#34;player&#34;).count&#xA;    let playerAdapter = RangeRowAdapter(0 ..&amp;lt; playerWidth)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also need an adapter that extracts team columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    // SELECT player.*, team.*, ...&#xA;    //                  &amp;lt;----&amp;gt;&#xA;    let teamWidth = try db.columns(in: &#34;team&#34;).count&#xA;    let teamAdapter = RangeRowAdapter(playerWidth ..&amp;lt; (playerWidth + teamWidth))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We merge those two adapters in a single &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#scopeadapter&#34;&gt;ScopeAdapter&lt;/a&gt; that will allow us to access both sliced rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    let playerScope = &#34;player&#34;&#xA;    let teamScope = &#34;team&#34;&#xA;    let adapter = ScopeAdapter([&#xA;        playerScope: playerAdapter,&#xA;        teamScope: teamAdapter])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now we can fetch, and start consuming our rows. You already know &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetching-rows&#34;&gt;row cursors&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    let rows = try Row.fetchCursor(db, sql: sql, adapter: adapter)&#xA;    while let row = try rows.next() {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From a fetched row, we can build a player:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        let player: Player = row[playerScope]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the SQL query, the team is joined with the &lt;code&gt;LEFT JOIN&lt;/code&gt; operator. This means that the team may be missing: its slice may contain team values, or it may only contain NULLs. When this happens, we don&#39;t want to build a Team record, and we thus load an &lt;em&gt;optional&lt;/em&gt; Team:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        let team: Team? = row[teamScope]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally, we can load the maximum score, assuming that the &#34;maxScore&#34; column is not ambiguous:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        let maxScore: Int = row[&#34;maxScore&#34;]&#xA;        &#xA;        print(&#34;player: \(player)&#34;)&#xA;        print(&#34;team: \(team)&#34;)&#xA;        print(&#34;maxScore: \(maxScore)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; In this chapter, we have learned:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;how to use &lt;code&gt;RangeRowAdapter&lt;/code&gt; to extract a specific table&#39;s columns into a &lt;em&gt;row slice&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;how to use &lt;code&gt;ScopeAdapter&lt;/code&gt; to gives access to several row slices through named scopes.&lt;/li&gt; &#xA;  &lt;li&gt;how to use Row subscripting to extract records from rows, or optional records in order to deal with left joins.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Splitting Rows, the Record Way&lt;/h3&gt; &#xA;&lt;p&gt;Our introduction above has introduced important techniques. It uses &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#row-adapters&#34;&gt;row adapters&lt;/a&gt; in order to split rows. It uses Row subscripting in order to extract records from row slices.&lt;/p&gt; &#xA;&lt;p&gt;But we may want to make it more usable and robust:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It&#39;s generally easier to consume records than raw rows.&lt;/li&gt; &#xA; &lt;li&gt;Joined records not always need all columns from a table (see &lt;code&gt;TableRecord.databaseSelection&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;Columns Selected by a Request&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Building row adapters is long and error prone.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To address the first bullet, let&#39;s define a record that holds our player, optional team, and maximum score. Since it can decode database rows, it adopts the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct PlayerInfo {&#xA;    var player: Player&#xA;    var team: Team?&#xA;    var maxScore: Int&#xA;}&#xA;&#xA;/// PlayerInfo can decode rows:&#xA;extension PlayerInfo: FetchableRecord {&#xA;    private enum Scopes {&#xA;        static let player = &#34;player&#34;&#xA;        static let team = &#34;team&#34;&#xA;    }&#xA;    &#xA;    init(row: Row) {&#xA;        player = row[Scopes.player]&#xA;        team = row[Scopes.team]&#xA;        maxScore = row[&#34;maxScore&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we write a method that returns a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-requests&#34;&gt;custom request&lt;/a&gt;, and then build the fetching method on top of that request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension PlayerInfo {&#xA;    /// The request for all player infos&#xA;    static func all() -&amp;gt; some FetchRequest&amp;lt;PlayerInfo&amp;gt; {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To acknowledge that both Player and Team records may customize their selection of the &#34;player&#34; and &#34;team&#34; columns, we&#39;ll write our SQL in a slightly different way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        // Let Player and Team customize their selection:&#xA;        let request: SQLRequest&amp;lt;PlayerInfo&amp;gt; = &#34;&#34;&#34;&#xA;            SELECT&#xA;                \(columnsOf: Player.self), -- instead of player.*&#xA;                \(columnsOf: Team.self),   -- instead of team.*&#xA;                MAX(round.score) AS maxScore&#xA;            FROM player&#xA;            LEFT JOIN team ON ...&#xA;            LEFT JOIN round ON ...&#xA;            GROUP BY ...&#xA;            &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our SQL is no longer a regular String, but an &lt;code&gt;SQLRequest&amp;lt;PlayerInfo&amp;gt;&lt;/code&gt; which profits from &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt;. Inside this request, &lt;code&gt;\(columnsOf: Player.self)&lt;/code&gt; outputs &lt;code&gt;player.*&lt;/code&gt;, unless Player defines a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#columns-selected-by-a-request&#34;&gt;customized selection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now we need to build adapters.&lt;/p&gt; &#xA;&lt;p&gt;We use the &lt;code&gt;splittingRowAdapters&lt;/code&gt; global function, whose job is precisely to build row adapters of desired widths:&lt;/p&gt; &#xA;&lt;p&gt;And since counting table columns require a database connection, we use the &lt;code&gt;adapted(_:)&lt;/code&gt; request method. It allows requests to adapt themselves right before execution, when a database connection is available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        return request.adapted { db in&#xA;            let adapters = try splittingRowAdapters(columnCounts: [&#xA;                Player.numberOfSelectedColumns(db),&#xA;                Team.numberOfSelectedColumns(db)])&#xA;            return ScopeAdapter([&#xA;                Scopes.player: adapters[0],&#xA;                Scopes.team: adapters[1]])&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;splittingRowAdapters&lt;/code&gt; returns as many adapters as necessary to fully split a row. In the example above, it returns &lt;em&gt;three&lt;/em&gt; adapters: one for player, one for team, and one for the remaining columns.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;And finally, we can define the fetching method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    /// Fetches all player infos&#xA;    static func fetchAll(_ db: Database) throws -&amp;gt; [PlayerInfo] {&#xA;        try all().fetchAll(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And when your app needs to fetch player infos, it now reads:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Fetch player infos&#xA;let playerInfos = try dbQueue.read { db in&#xA;    try PlayerInfo.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; In this chapter, we have learned:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;how to define a &lt;code&gt;FetchableRecord&lt;/code&gt; record that consumes rows fetched from a joined query.&lt;/li&gt; &#xA;  &lt;li&gt;how to use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/SQLInterpolation.md&#34;&gt;SQL Interpolation&lt;/a&gt; and &lt;code&gt;numberOfSelectedColumns&lt;/code&gt; in order to deal with nested record types that define custom selection.&lt;/li&gt; &#xA;  &lt;li&gt;how to use &lt;code&gt;splittingRowAdapters&lt;/code&gt; in order to streamline the definition of row slices.&lt;/li&gt; &#xA;  &lt;li&gt;how to gather all relevant methods and constants in a record type, fully responsible of its relationship with the database.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Splitting Rows, the Codable Way&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#codable-records&#34;&gt;Codable Records&lt;/a&gt; build on top of the standard Decodable protocol in order to decode database rows.&lt;/p&gt; &#xA;&lt;p&gt;You can consume complex joined queries with Codable records as well. As a demonstration, we&#39;ll rewrite the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#splitting-rows-the-record-way&#34;&gt;above&lt;/a&gt; sample code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Player: Decodable, FetchableRecord, TableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;}&#xA;struct Team: Decodable, FetchableRecord, TableRecord {&#xA;    var id: Int64&#xA;    var name: String&#xA;    var color: Color&#xA;}&#xA;struct PlayerInfo: Decodable, FetchableRecord {&#xA;    var player: Player&#xA;    var team: Team?&#xA;    var maxScore: Int&#xA;}&#xA;&#xA;extension PlayerInfo {&#xA;    /// The request for all player infos&#xA;    static func all() -&amp;gt; some FetchRequest&amp;lt;PlayerInfo&amp;gt; {&#xA;        let request: SQLRequest&amp;lt;PlayerInfo&amp;gt; = &#34;&#34;&#34;&#xA;            SELECT&#xA;                \(columnsOf: Player.self),&#xA;                \(columnsOf: Team.self),&#xA;                MAX(round.score) AS maxScore&#xA;            FROM player&#xA;            LEFT JOIN team ON ...&#xA;            LEFT JOIN round ON ...&#xA;            GROUP BY ...&#xA;            &#34;&#34;&#34;&#xA;        return request.adapted { db in&#xA;            let adapters = try splittingRowAdapters(columnCounts: [&#xA;                Player.numberOfSelectedColumns(db),&#xA;                Team.numberOfSelectedColumns(db)])&#xA;            return ScopeAdapter([&#xA;                CodingKeys.player.stringValue: adapters[0],&#xA;                CodingKeys.team.stringValue: adapters[1]])&#xA;        }&#xA;    }&#xA;    &#xA;    /// Fetches all player infos&#xA;    static func fetchAll(_ db: Database) throws -&amp;gt; [PlayerInfo] {&#xA;        try all().fetchAll(db)&#xA;    }&#xA;}&#xA;&#xA;// Fetch player infos&#xA;let playerInfos = try dbQueue.read { db in&#xA;    try PlayerInfo.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üí°&lt;/span&gt; In this chapter, we have learned how to use the &lt;code&gt;Decodable&lt;/code&gt; protocol and its associated &lt;code&gt;CodingKeys&lt;/code&gt; enum in order to dry up our code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Encryption&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;GRDB can encrypt your database with &lt;a href=&#34;http://sqlcipher.net&#34;&gt;SQLCipher&lt;/a&gt; v3.4+.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;, and specify in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# GRDB with SQLCipher 4&#xA;pod &#39;GRDB.swift/SQLCipher&#39;&#xA;pod &#39;SQLCipher&#39;, &#39;~&amp;gt; 4.0&#39;&#xA;&#xA;# GRDB with SQLCipher 3&#xA;pod &#39;GRDB.swift/SQLCipher&#39;&#xA;pod &#39;SQLCipher&#39;, &#39;~&amp;gt; 3.4&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you remove any existing &lt;code&gt;pod &#39;GRDB.swift&#39;&lt;/code&gt; from your Podfile. &lt;code&gt;GRDB.swift/SQLCipher&lt;/code&gt; must be the only active GRDB pod in your whole project, or you will face linker or runtime errors, due to the conflicts between SQLCipher and the system SQLite.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#creating-or-opening-an-encrypted-database&#34;&gt;Creating or Opening an Encrypted Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#changing-the-passphrase-of-an-encrypted-database&#34;&gt;Changing the Passphrase of an Encrypted Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#exporting-a-database-to-an-encrypted-database&#34;&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#security-considerations&#34;&gt;Security Considerations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Creating or Opening an Encrypted Database&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;You create and open an encrypted database&lt;/strong&gt; by providing a passphrase to your &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;database connection&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also in &lt;code&gt;prepareDatabase&lt;/code&gt; that you perform other &lt;a href=&#34;https://www.zetetic.net/sqlcipher/sqlcipher-api/&#34;&gt;SQLCipher configuration steps&lt;/a&gt; that must happen early in the lifetime of a SQLCipher connection. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;    try db.execute(sql: &#34;PRAGMA cipher_page_size = ...&#34;)&#xA;    try db.execute(sql: &#34;PRAGMA kdf_iter = ...&#34;)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to open an existing SQLCipher 3 database with SQLCipher 4, you may want to run the &lt;code&gt;cipher_compatibility&lt;/code&gt; pragma:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Open an SQLCipher 3 database with SQLCipher 4&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;    try db.execute(sql: &#34;PRAGMA cipher_compatibility = 3&#34;)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.zetetic.net/blog/2018/11/30/sqlcipher-400-release/&#34;&gt;SQLCipher 4.0.0 Release&lt;/a&gt; and &lt;a href=&#34;https://discuss.zetetic.net/t/upgrading-to-sqlcipher-4/3283&#34;&gt;Upgrading to SQLCipher 4&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Changing the Passphrase of an Encrypted Database&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can change the passphrase&lt;/strong&gt; of an already encrypted database.&lt;/p&gt; &#xA;&lt;p&gt;When you use a &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasequeue&#34;&gt;database queue&lt;/a&gt;, open the database with the old passphrase, and then apply the new passphrase:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try db.changePassphrase(&#34;newSecret&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you use a &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasepool&#34;&gt;database pool&lt;/a&gt;, make sure that no concurrent read can happen by changing the passphrase within the &lt;code&gt;barrierWriteWithoutTransaction&lt;/code&gt; block. You must also ensure all future reads open a new database connection by calling the &lt;code&gt;invalidateReadOnlyConnections&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbPool.barrierWriteWithoutTransaction { db in&#xA;    try db.changePassphrase(&#34;newSecret&#34;)&#xA;    dbPool.invalidateReadOnlyConnections()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When an application wants to keep on using a database queue or pool after the passphrase has changed, it is responsible for providing the correct passphrase to the &lt;code&gt;usePassphrase&lt;/code&gt; method called in the database preparation function. Consider:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// WRONG: this won&#39;t work across a passphrase change&#xA;let passphrase = try getPassphrase()&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&#xA;// CORRECT: get the latest passphrase when it is needed&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try getPassphrase()&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;DatabasePool.barrierWriteWithoutTransaction&lt;/code&gt; method does not prevent &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasesnapshot&#34;&gt;database snapshots&lt;/a&gt; from accessing the database during the passphrase change, or after the new passphrase has been applied to the database. Those database accesses may throw errors. Applications should provide their own mechanism for invalidating open snapshots before the passphrase is changed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Instead of changing the passphrase &#34;in place&#34; as described here, you can also export the database in a new encrypted database that uses the new passphrase. See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#exporting-a-database-to-an-encrypted-database&#34;&gt;Exporting a Database to an Encrypted Database&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Exporting a Database to an Encrypted Database&lt;/h3&gt; &#xA;&lt;p&gt;Providing a passphrase won&#39;t encrypt a clear-text database that already exists, though. SQLCipher can&#39;t do that, and you will get an error instead: &lt;code&gt;SQLite error 26: file is encrypted or is not a database&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead, create a new encrypted database, at a distinct location, and export the content of the existing database. This can both encrypt a clear-text database, or change the passphrase of an encrypted database.&lt;/p&gt; &#xA;&lt;p&gt;The technique to do that is &lt;a href=&#34;https://discuss.zetetic.net/t/how-to-encrypt-a-plaintext-sqlite-database-to-use-sqlcipher-and-avoid-file-is-encrypted-or-is-not-a-database-errors/868/1&#34;&gt;documented&lt;/a&gt; by SQLCipher.&lt;/p&gt; &#xA;&lt;p&gt;With GRDB, it gives:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// The existing database&#xA;let existingDBQueue = try DatabaseQueue(path: &#34;/path/to/existing.db&#34;)&#xA;&#xA;// The new encrypted database, at some distinct location:&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(&#34;secret&#34;)&#xA;}&#xA;let newDBQueue = try DatabaseQueue(path: &#34;/path/to/new.db&#34;, configuration: config)&#xA;&#xA;try existingDBQueue.inDatabase { db in&#xA;    try db.execute(&#xA;        sql: &#34;&#34;&#34;&#xA;            ATTACH DATABASE ? AS encrypted KEY ?;&#xA;            SELECT sqlcipher_export(&#39;encrypted&#39;);&#xA;            DETACH DATABASE encrypted;&#xA;            &#34;&#34;&#34;,&#xA;        arguments: [newDBQueue.path, &#34;secret&#34;])&#xA;}&#xA;&#xA;// Now the export is completed, and the existing database can be deleted.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Security Considerations&lt;/h3&gt; &#xA;&lt;h4&gt;Managing the lifetime of the passphrase string&lt;/h4&gt; &#xA;&lt;p&gt;It is recommended to avoid keeping the passphrase in memory longer than necessary. To do this, make sure you load the passphrase from the &lt;code&gt;prepareDatabase&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// NOT RECOMMENDED: this keeps the passphrase in memory longer than necessary&#xA;let passphrase = try getPassphrase()&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&#xA;// RECOMMENDED: only load the passphrase when it is needed&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try getPassphrase()&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This technique helps manages the lifetime of the passphrase, although keep in mind that the content of a String may remain intact in memory long after the object has been released.&lt;/p&gt; &#xA;&lt;p&gt;For even better control over the lifetime of the passphrase in memory, use a Data object which natively provides the &lt;code&gt;resetBytes&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// RECOMMENDED: only load the passphrase when it is needed and reset its content immediately after use&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try getPassphraseData() // Data&#xA;    defer {&#xA;        passphrase.resetBytes(in: 0..&amp;lt;data.count)&#xA;    }&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some demanding users will want to go further, and manage the lifetime of the raw passphrase bytes. See below.&lt;/p&gt; &#xA;&lt;h4&gt;Managing the lifetime of the passphrase bytes&lt;/h4&gt; &#xA;&lt;p&gt;GRDB offers convenience methods for providing the database passphrases as Swift strings: &lt;code&gt;usePassphrase(_:)&lt;/code&gt; and &lt;code&gt;changePassphrase(_:)&lt;/code&gt;. Those methods don&#39;t keep the passphrase String in memory longer than necessary. But they are as secure as the standard String type: the lifetime of actual passphrase bytes in memory is not under control.&lt;/p&gt; &#xA;&lt;p&gt;When you want to precisely manage the passphrase bytes, talk directly to SQLCipher, using its raw C functions.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    ... // Carefully load passphrase bytes&#xA;    let code = sqlite3_key(db.sqliteConnection, /* passphrase bytes */)&#xA;    ... // Carefully dispose passphrase bytes&#xA;    guard code == SQLITE_OK else {&#xA;        throw DatabaseError(&#xA;            resultCode: ResultCode(rawValue: code), &#xA;            message: db.lastErrorMessage)&#xA;    }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Passphrase availability vs. Database availability&lt;/h4&gt; &#xA;&lt;p&gt;When the passphrase is securely stored in the system keychain, your application can protect it using the &lt;a href=&#34;https://developer.apple.com/documentation/security/ksecattraccessible&#34;&gt;&lt;code&gt;kSecAttrAccessible&lt;/code&gt;&lt;/a&gt; attribute.&lt;/p&gt; &#xA;&lt;p&gt;Such protection prevents GRDB from creating SQLite connections when the passphrase is not available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    let passphrase = try loadPassphraseFromSystemKeychain()&#xA;    try db.usePassphrase(passphrase)&#xA;}&#xA;&#xA;// Success if and only if the passphrase is available&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the same reason, &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasepool&#34;&gt;database pools&lt;/a&gt;, which open SQLite connections on demand, may fail at any time as soon as the passphrase becomes unavailable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Success if and only if the passphrase is available&#xA;let dbPool = try DatabasePool(path: dbPath, configuration: config)&#xA;&#xA;// May fail if passphrase has turned unavailable&#xA;try dbPool.read { ... }&#xA;&#xA;// May trigger value observation failure if passphrase has turned unavailable&#xA;try dbPool.write { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because DatabasePool maintains a pool of long-lived SQLite connections, some database accesses will use an existing connection, and succeed. And some other database accesses will fail, as soon as the pool wants to open a new connection. It is impossible to predict which accesses will succeed or fail.&lt;/p&gt; &#xA;&lt;p&gt;For the same reason, a database queue, which also maintains a long-lived SQLite connection, will remain available even after the passphrase has turned unavailable.&lt;/p&gt; &#xA;&lt;p&gt;Applications are thus responsible for protecting database accesses when the passphrase is unavailable. To this end, they can use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-protection&#34;&gt;Data Protection&lt;/a&gt;. They can also destroy their instances of database queue or pool when the passphrase becomes unavailable.&lt;/p&gt; &#xA;&lt;h2&gt;Backup&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can backup (copy) a database into another.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Backups can for example help you copying an in-memory database to and from a database file when you implement NSDocument subclasses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let source: DatabaseQueue = ...      // or DatabasePool&#xA;let destination: DatabaseQueue = ... // or DatabasePool&#xA;try source.backup(to: destination)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; method blocks the current thread until the destination database contains the same contents as the source database.&lt;/p&gt; &#xA;&lt;p&gt;When the source is a &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasepool&#34;&gt;database pool&lt;/a&gt;, concurrent writes can happen during the backup. Those writes may, or may not, be reflected in the backup, but they won&#39;t trigger any error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Database&lt;/code&gt; has an analogous &lt;code&gt;backup&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let source: DatabaseQueue = ...      // or DatabasePool&#xA;let destination: DatabaseQueue = ... // or DatabasePool&#xA;try source.write { sourceDb in&#xA;    try destination.barrierWriteWithoutTransaction { destDb in&#xA;        try sourceDb.backup(to: destDb)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method allows for the choice of source and destination &lt;code&gt;Database&lt;/code&gt; handles with which to backup the database.&lt;/p&gt; &#xA;&lt;h3&gt;Backup Progress Reporting&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;backup&lt;/code&gt; methods take optional &lt;code&gt;pagesPerStep&lt;/code&gt; and &lt;code&gt;progress&lt;/code&gt; parameters. Together these parameters can be used to track a database backup in progress and abort an incomplete backup.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;pagesPerStep&lt;/code&gt; is provided, the database backup is performed in &lt;em&gt;steps&lt;/em&gt;. At each step, no more than &lt;code&gt;pagesPerStep&lt;/code&gt; database pages are copied from the source to the destination. The backup proceeds one step at a time until all pages have been copied.&lt;/p&gt; &#xA;&lt;p&gt;When a &lt;code&gt;progress&lt;/code&gt; callback is provided, &lt;code&gt;progress&lt;/code&gt; is called after every backup step, including the last. Even if a non-default &lt;code&gt;pagesPerStep&lt;/code&gt; is specified or the backup is otherwise completed in a single step, the &lt;code&gt;progress&lt;/code&gt; callback will be called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try source.backup(&#xA;    to: destination,&#xA;    pagesPerStep: ...)&#xA;    { backupProgress in&#xA;       print(&#34;Database backup progress:&#34;, backupProgress)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Aborting an Incomplete Backup&lt;/h3&gt; &#xA;&lt;p&gt;If a call to &lt;code&gt;progress&lt;/code&gt; throws when &lt;code&gt;backupProgress.isComplete == false&lt;/code&gt;, the backup will be aborted and the error rethrown. However, if a call to &lt;code&gt;progress&lt;/code&gt; throws when &lt;code&gt;backupProgress.isComplete == true&lt;/code&gt;, the backup is unaffected and the error is silently ignored.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Passing non-default values of &lt;code&gt;pagesPerStep&lt;/code&gt; or &lt;code&gt;progress&lt;/code&gt; to the backup methods is an advanced API intended to provide additional capabilities to expert users. GRDB&#39;s backup API provides a faithful, low-level wrapper to the underlying SQLite online backup API. GRDB&#39;s documentation is not a comprehensive substitute for the official SQLite &lt;a href=&#34;https://www.sqlite.org/c3ref/backup_finish.html&#34;&gt;documentation of their backup API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Interrupt a Database&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The &lt;code&gt;interrupt()&lt;/code&gt; method&lt;/strong&gt; causes any pending database operation to abort and return at its earliest opportunity.&lt;/p&gt; &#xA;&lt;p&gt;It can be called from any thread.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dbQueue.interrupt()&#xA;dbPool.interrupt()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A call to &lt;code&gt;interrupt()&lt;/code&gt; that occurs when there are no running SQL statements is a no-op and has no effect on SQL statements that are started after &lt;code&gt;interrupt()&lt;/code&gt; returns.&lt;/p&gt; &#xA;&lt;p&gt;A database operation that is interrupted will throw a DatabaseError with code &lt;code&gt;SQLITE_INTERRUPT&lt;/code&gt;. If the interrupted SQL operation is an INSERT, UPDATE, or DELETE that is inside an explicit transaction, then the entire transaction will be rolled back automatically. If the rolled back transaction was started by a transaction-wrapping method such as &lt;code&gt;DatabaseWriter.write&lt;/code&gt; or &lt;code&gt;Database.inTransaction&lt;/code&gt;, then all database accesses will throw a DatabaseError with code &lt;code&gt;SQLITE_ABORT&lt;/code&gt; until the wrapping method returns.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.write { db in&#xA;    try Player(...).insert(db)     // throws SQLITE_INTERRUPT&#xA;    try Player(...).insert(db)     // not executed&#xA;}                                  // throws SQLITE_INTERRUPT&#xA;&#xA;try dbQueue.write { db in&#xA;    do {&#xA;        try Player(...).insert(db) // throws SQLITE_INTERRUPT&#xA;    } catch { }&#xA;}                                  // throws SQLITE_ABORT&#xA;&#xA;try dbQueue.write { db in&#xA;    do {&#xA;        try Player(...).insert(db) // throws SQLITE_INTERRUPT&#xA;    } catch { }&#xA;    try Player(...).insert(db)     // throws SQLITE_ABORT&#xA;}                                  // throws SQLITE_ABORT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can catch both &lt;code&gt;SQLITE_INTERRUPT&lt;/code&gt; and &lt;code&gt;SQLITE_ABORT&lt;/code&gt; errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try dbPool.write { db in ... }&#xA;} catch DatabaseError.SQLITE_INTERRUPT, DatabaseError.SQLITE_ABORT {&#xA;    // Oops, the database was interrupted.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://www.sqlite.org/c3ref/interrupt.html&#34;&gt;Interrupt A Long-Running Query&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Avoiding SQL Injection&lt;/h2&gt; &#xA;&lt;p&gt;SQL injection is a technique that lets an attacker nuke your database.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/exploits_of_a_mom.png&#34; alt=&#34;XKCD: Exploits of a Mom&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://xkcd.com/327/&#34;&gt;https://xkcd.com/327/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is an example of code that is vulnerable to SQL injection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// BAD BAD BAD&#xA;let id = 1&#xA;let name = textField.text&#xA;try dbQueue.write { db in&#xA;    try db.execute(sql: &#34;UPDATE students SET name = &#39;\(name)&#39; WHERE id = \(id)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the user enters a funny string like &lt;code&gt;Robert&#39;; DROP TABLE students; --&lt;/code&gt;, SQLite will see the following SQL, and drop your database table instead of updating a name as intended:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE students SET name = &#39;Robert&#39;;&#xA;DROP TABLE students;&#xA;--&#39; WHERE id = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid those problems, &lt;strong&gt;never embed raw values in your SQL queries&lt;/strong&gt;. The only correct technique is to provide &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#executing-updates&#34;&gt;arguments&lt;/a&gt; to your raw SQL queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name = textField.text&#xA;try dbQueue.write { db in&#xA;    // Good&#xA;    try db.execute(&#xA;        sql: &#34;UPDATE students SET name = ? WHERE id = ?&#34;,&#xA;        arguments: [name, id])&#xA;    &#xA;    // Just as good&#xA;    try db.execute(&#xA;        sql: &#34;UPDATE students SET name = :name WHERE id = :id&#34;,&#xA;        arguments: [&#34;name&#34;: name, &#34;id&#34;: id])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#records&#34;&gt;records&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;, GRDB always prevents SQL injection for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let id = 1&#xA;let name = textField.text&#xA;try dbQueue.write { db in&#xA;    if var student = try Student.fetchOne(db, id: id) {&#xA;        student.name = name&#xA;        try student.update(db)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;p&gt;GRDB can throw &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;DatabaseError&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&#34;&gt;RecordError&lt;/a&gt;, or crash your program with a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&#34;&gt;fatal error&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Considering that a local database is not some JSON loaded from a remote server, GRDB focuses on &lt;strong&gt;trusted databases&lt;/strong&gt;. Dealing with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-to-deal-with-untrusted-inputs&#34;&gt;untrusted databases&lt;/a&gt; requires extra care.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;DatabaseError&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&#34;&gt;RecordError&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fatal-errors&#34;&gt;Fatal Errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-to-deal-with-untrusted-inputs&#34;&gt;How to Deal with Untrusted Inputs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-log&#34;&gt;Error Log&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DatabaseError&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;DatabaseError&lt;/strong&gt; are thrown on SQLite errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try Pet(masterId: 1, name: &#34;Bobby&#34;).insert(db)&#xA;} catch let error as DatabaseError {&#xA;    // The SQLite error code: 19 (SQLITE_CONSTRAINT)&#xA;    error.resultCode&#xA;    &#xA;    // The extended error code: 787 (SQLITE_CONSTRAINT_FOREIGNKEY)&#xA;    error.extendedResultCode&#xA;    &#xA;    // The eventual SQLite message: FOREIGN KEY constraint failed&#xA;    error.message&#xA;    &#xA;    // The eventual erroneous SQL query&#xA;    // &#34;INSERT INTO pet (masterId, name) VALUES (?, ?)&#34;&#xA;    error.sql&#xA;    &#xA;    // The eventual SQL arguments&#xA;    // [1, &#34;Bobby&#34;]&#xA;    error.arguments&#xA;    &#xA;    // Full error description&#xA;    // &amp;gt; SQLite error 19: FOREIGN KEY constraint failed -&#xA;    // &amp;gt; while executing `INSERT INTO pet (masterId, name) VALUES (?, ?)`&#xA;    error.description&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see statement arguments in the error description, &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/configuration/publicstatementarguments&#34;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite uses &lt;a href=&#34;https://www.sqlite.org/rescode.html&#34;&gt;results codes&lt;/a&gt; to distinguish between various errors&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can catch a DatabaseError and match on result codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try ...&#xA;} catch let error as DatabaseError {&#xA;    switch error {&#xA;    case DatabaseError.SQLITE_CONSTRAINT_FOREIGNKEY:&#xA;        // foreign key constraint error&#xA;    case DatabaseError.SQLITE_CONSTRAINT:&#xA;        // any other constraint error&#xA;    default:&#xA;        // any other database error&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also directly match errors on result codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try ...&#xA;} catch DatabaseError.SQLITE_CONSTRAINT_FOREIGNKEY {&#xA;    // foreign key constraint error&#xA;} catch DatabaseError.SQLITE_CONSTRAINT {&#xA;    // any other constraint error&#xA;} catch {&#xA;    // any other database error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each DatabaseError has two codes: an &lt;code&gt;extendedResultCode&lt;/code&gt; (see &lt;a href=&#34;https://www.sqlite.org/rescode.html#extended_result_code_list&#34;&gt;extended result code&lt;/a&gt;), and a less precise &lt;code&gt;resultCode&lt;/code&gt; (see &lt;a href=&#34;https://www.sqlite.org/rescode.html#primary_result_code_list&#34;&gt;primary result code&lt;/a&gt;). Extended result codes are refinements of primary result codes, as &lt;code&gt;SQLITE_CONSTRAINT_FOREIGNKEY&lt;/code&gt; is to &lt;code&gt;SQLITE_CONSTRAINT&lt;/code&gt;, for example.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: SQLite has progressively introduced extended result codes across its versions. The &lt;a href=&#34;http://www.sqlite.org/changes.html&#34;&gt;SQLite release notes&lt;/a&gt; are unfortunately not quite clear about that: write your handling of extended result codes with care.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;RecordError&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;RecordError&lt;/strong&gt; is thrown by the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; protocol when the &lt;code&gt;update&lt;/code&gt; method could not find any row to update:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try player.update(db)&#xA;} catch let RecordError.recordNotFound(databaseTableName: table, key: key) {&#xA;    print(&#34;Key \(key) was not found in table \(table).&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;RecordError&lt;/strong&gt; is also thrown by the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; protocol when the &lt;code&gt;find&lt;/code&gt; method does not find any record:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let player = try Player.find(db, id: 42)&#xA;} catch let RecordError.recordNotFound(databaseTableName: table, key: key) {&#xA;    print(&#34;Key \(key) was not found in table \(table).&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fatal Errors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fatal errors notify that the program, or the database, has to be changed.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;They uncover programmer errors, false assumptions, and prevent misuses. Here are a few examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The code asks for a non-optional value, when the database contains NULL:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: could not convert NULL to String.&#xA;let name: String = row[&#34;name&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: fix the contents of the database, use &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/columndefinition/notnull(onconflict:)&#34;&gt;NOT NULL constraints&lt;/a&gt;, or load an optional:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String? = row[&#34;name&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Conversion from database value to Swift type fails:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: could not convert &#34;Mom‚Äôs birthday&#34; to Date.&#xA;let date: Date = row[&#34;date&#34;]&#xA;&#xA;// fatal error: could not convert &#34;&#34; to URL.&#xA;let url: URL = row[&#34;url&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: fix the contents of the database, or use &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; to handle all possible cases:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dbValue: DatabaseValue = row[&#34;date&#34;]&#xA;if dbValue.isNull {&#xA;    // Handle NULL&#xA;} else if let date = Date.fromDatabaseValue(dbValue) {&#xA;    // Handle valid date&#xA;} else {&#xA;    // Handle invalid date&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The database can&#39;t guarantee that the code does what it says:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: table player has no unique index on column email&#xA;try Player.deleteOne(db, key: [&#34;email&#34;: &#34;arthur@example.com&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: add a unique index to the player.email column, or use the &lt;code&gt;deleteAll&lt;/code&gt; method to make it clear that you may delete more than one row:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;).deleteAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Database connections are not reentrant:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// fatal error: Database methods are not reentrant.&#xA;dbQueue.write { db in&#xA;    dbQueue.write { db in&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Solution: avoid reentrancy, and instead pass a database connection along.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to Deal with Untrusted Inputs&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s consider the code below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sql = &#34;SELECT ...&#34;&#xA;&#xA;// Some untrusted arguments for the query&#xA;let arguments: [String: Any] = ...&#xA;let rows = try Row.fetchCursor(db, sql: sql, arguments: StatementArguments(arguments))&#xA;&#xA;while let row = try rows.next() {&#xA;    // Some untrusted database value:&#xA;    let date: Date? = row[0]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It has two opportunities to throw fatal errors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Untrusted arguments&lt;/strong&gt;: The dictionary may contain values that do not conform to the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#values&#34;&gt;DatabaseValueConvertible protocol&lt;/a&gt;, or may miss keys required by the statement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Untrusted database content&lt;/strong&gt;: The row may contain a non-null value that can&#39;t be turned into a date.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In such a situation, you can still avoid fatal errors by exposing and handling each failure point, one level down in the GRDB API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Untrusted arguments&#xA;if let arguments = StatementArguments(arguments) {&#xA;    let statement = try db.makeStatement(sql: sql)&#xA;    try statement.setArguments(arguments)&#xA;    &#xA;    var cursor = try Row.fetchCursor(statement)&#xA;    while let row = try iterator.next() {&#xA;        // Untrusted database content&#xA;        let dbValue: DatabaseValue = row[0]&#xA;        if dbValue.isNull {&#xA;            // Handle NULL&#xA;        if let date = Date.fromDatabaseValue(dbValue) {&#xA;            // Handle valid date&#xA;        } else {&#xA;            // Handle invalid date&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#prepared-statements&#34;&gt;prepared statements&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databasevalue&#34;&gt;DatabaseValue&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Error Log&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLite can be configured to invoke a callback function containing an error code and a terse error message whenever anomalies occur.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This global error callback must be configured early in the lifetime of your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Database.logError = { (resultCode, message) in&#xA;    NSLog(&#34;%@&#34;, &#34;SQLite error \(resultCode): \(message)&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Database.logError must be set before any database connection is opened. This includes the connections that your application opens with GRDB, but also connections opened by other tools, such as third-party libraries. Setting it after a connection has been opened is an SQLite misuse, and has no effect.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://sqlite.org/errlog.html&#34;&gt;The Error And Warning Log&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Unicode&lt;/h2&gt; &#xA;&lt;p&gt;SQLite lets you store unicode strings in the database.&lt;/p&gt; &#xA;&lt;p&gt;However, SQLite does not provide any unicode-aware string transformations or comparisons.&lt;/p&gt; &#xA;&lt;h3&gt;Unicode functions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;UPPER&lt;/code&gt; and &lt;code&gt;LOWER&lt;/code&gt; built-in SQLite functions are not unicode-aware:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// &#34;J√©R√¥ME&#34;&#xA;try String.fetchOne(db, sql: &#34;SELECT UPPER(&#39;J√©r√¥me&#39;)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GRDB extends SQLite with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#custom-sql-functions-and-aggregates&#34;&gt;SQL functions&lt;/a&gt; that call the Swift built-in string functions &lt;code&gt;capitalized&lt;/code&gt;, &lt;code&gt;lowercased&lt;/code&gt;, &lt;code&gt;uppercased&lt;/code&gt;, &lt;code&gt;localizedCapitalized&lt;/code&gt;, &lt;code&gt;localizedLowercased&lt;/code&gt; and &lt;code&gt;localizedUppercased&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// &#34;J√âR√îME&#34;&#xA;let uppercased = DatabaseFunction.uppercase&#xA;try String.fetchOne(db, sql: &#34;SELECT \(uppercased.name)(&#39;J√©r√¥me&#39;)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those unicode-aware string functions are also readily available in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sql-functions&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Player.select(nameColumn.uppercased)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;String Comparison&lt;/h3&gt; &#xA;&lt;p&gt;SQLite compares strings in many occasions: when you sort rows according to a string column, or when you use a comparison operator such as &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The comparison result comes from a &lt;em&gt;collating function&lt;/em&gt;, or &lt;em&gt;collation&lt;/em&gt;. SQLite comes with three built-in collations that do not support Unicode: &lt;a href=&#34;https://www.sqlite.org/datatype3.html#collation&#34;&gt;binary, nocase, and rtrim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GRDB comes with five extra collations that leverage unicode-aware comparisons based on the standard Swift String comparison functions and operators:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;unicodeCompare&lt;/code&gt; (uses the built-in &lt;code&gt;&amp;lt;=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; Swift operators)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;caseInsensitiveCompare&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localizedCompare&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localizedStandardCompare&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A collation can be applied to a table column. All comparisons involving this column will then automatically trigger the comparison function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try db.create(table: &#34;player&#34;) { t in&#xA;    // Guarantees case-insensitive email unicity&#xA;    t.column(&#34;email&#34;, .text).unique().collate(.nocase)&#xA;    &#xA;    // Sort names in a localized case insensitive way&#xA;    t.column(&#34;name&#34;, .text).collate(.localizedCaseInsensitiveCompare)&#xA;}&#xA;&#xA;// Players are sorted in a localized case insensitive way:&#xA;let players = try Player.order(nameColumn).fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: SQLite &lt;em&gt;requires&lt;/em&gt; host applications to provide the definition of any collation other than binary, nocase and rtrim. When a database file has to be shared or migrated to another SQLite library of platform (such as the Android version of your application), make sure you provide a compatible collation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you can&#39;t or don&#39;t want to define the comparison behavior of a column (see warning above), you can still use an explicit collation in SQL requests and in the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#the-query-interface&#34;&gt;query interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let collation = DatabaseCollation.localizedCaseInsensitiveCompare&#xA;let players = try Player.fetchAll(db,&#xA;    sql: &#34;SELECT * FROM player ORDER BY name COLLATE \(collation.name))&#34;)&#xA;let players = try Player.order(nameColumn.collating(collation)).fetchAll(db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can also define your own collations&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let collation = DatabaseCollation(&#34;customCollation&#34;) { (lhs, rhs) -&amp;gt; NSComparisonResult in&#xA;    // return the comparison of lhs and rhs strings.&#xA;}&#xA;&#xA;// Make the collation available to a database connection&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.add(collation: collation)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Memory Management&lt;/h2&gt; &#xA;&lt;p&gt;Both SQLite and GRDB use non-essential memory that help them perform better.&lt;/p&gt; &#xA;&lt;p&gt;You can reclaim this memory with the &lt;code&gt;releaseMemory&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Release as much memory as possible.&#xA;dbQueue.releaseMemory()&#xA;dbPool.releaseMemory()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method blocks the current thread until all current database accesses are completed, and the memory collected.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: If &lt;code&gt;DatabasePool.releaseMemory()&lt;/code&gt; is called while a long read is performed concurrently, then no other read access will be possible until this long read has completed, and the memory has been released. If this does not suit your application needs, look for the asynchronous options below:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can release memory in an asynchronous way as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// On a DatabaseQueue&#xA;dbQueue.asyncWriteWithoutTransaction { db in&#xA;    db.releaseMemory()&#xA;}&#xA;&#xA;// On a DatabasePool&#xA;dbPool.releaseMemoryEventually()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;DatabasePool.releaseMemoryEventually()&lt;/code&gt; does not block the current thread, and does not prevent concurrent database accesses. In exchange for this convenience, you don&#39;t know when memory has been freed.&lt;/p&gt; &#xA;&lt;h3&gt;Memory Management on iOS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;The iOS operating system likes applications that do not consume much memory.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasequeue&#34;&gt;Database queues&lt;/a&gt; and &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasepool&#34;&gt;pools&lt;/a&gt; automatically free non-essential memory when the application receives a memory warning, and when the application enters background.&lt;/p&gt; &#xA;&lt;p&gt;You can opt out of this automatic memory management:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.automaticMemoryManagement = false&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config) // or DatabasePool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Protection&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/StrategiesforImplementingYourApp/StrategiesforImplementingYourApp.html#//apple_ref/doc/uid/TP40007072-CH5-SW21&#34;&gt;Data Protection&lt;/a&gt; lets you protect files so that they are encrypted and unavailable until the device is unlocked.&lt;/p&gt; &#xA;&lt;p&gt;Data protection can be enabled &lt;a href=&#34;https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW30&#34;&gt;globally&lt;/a&gt; for all files created by an application.&lt;/p&gt; &#xA;&lt;p&gt;You can also explicitly protect a database, by configuring its enclosing &lt;em&gt;directory&lt;/em&gt;. This will not only protect the database file, but also all &lt;a href=&#34;https://www.sqlite.org/tempfiles.html&#34;&gt;temporary files&lt;/a&gt; created by SQLite (including the persistent &lt;code&gt;.shm&lt;/code&gt; and &lt;code&gt;.wal&lt;/code&gt; files created by &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasepool&#34;&gt;database pools&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For example, to explicitly use &lt;a href=&#34;https://developer.apple.com/reference/foundation/fileprotectiontype/1616200-complete&#34;&gt;complete&lt;/a&gt; protection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Paths&#xA;let fileManager = FileManager.default&#xA;let directoryURL = try fileManager&#xA;    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)&#xA;    .appendingPathComponent(&#34;database&#34;, isDirectory: true)&#xA;let databaseURL = directoryURL.appendingPathComponent(&#34;db.sqlite&#34;)&#xA;&#xA;// Create directory if needed&#xA;var isDirectory: ObjCBool = false&#xA;if !fileManager.fileExists(atPath: directoryURL.path, isDirectory: &amp;amp;isDirectory) {&#xA;    try fileManager.createDirectory(atPath: directoryURL.path, withIntermediateDirectories: false)&#xA;} else if !isDirectory.boolValue {&#xA;    throw NSError(domain: NSCocoaErrorDomain, code: NSFileWriteFileExistsError, userInfo: nil)&#xA;}&#xA;&#xA;// Enable data protection&#xA;try fileManager.setAttributes([.protectionKey : FileProtectionType.complete], ofItemAtPath: directoryURL.path)&#xA;&#xA;// Open database&#xA;let dbQueue = try DatabaseQueue(path: databaseURL.path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a database is protected, an application that runs in the background on a locked device won&#39;t be able to read or write from it. Instead, it will get &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#error-handling&#34;&gt;DatabaseError&lt;/a&gt; with code &lt;a href=&#34;https://www.sqlite.org/rescode.html#ioerr&#34;&gt;&lt;code&gt;SQLITE_IOERR&lt;/code&gt;&lt;/a&gt; (10) &#34;disk I/O error&#34;, or &lt;a href=&#34;https://www.sqlite.org/rescode.html#auth&#34;&gt;&lt;code&gt;SQLITE_AUTH&lt;/code&gt;&lt;/a&gt; (23) &#34;not authorized&#34;.&lt;/p&gt; &#xA;&lt;p&gt;You can catch those errors and wait for &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom&#34;&gt;UIApplicationDelegate.applicationProtectedDataDidBecomeAvailable(_:)&lt;/a&gt; or &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationprotecteddatadidbecomeavailable&#34;&gt;UIApplicationProtectedDataDidBecomeAvailable&lt;/a&gt; notification in order to retry the failed database operation.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-opening-connections&#34;&gt;FAQ: Opening Connections&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-create-a-database-in-my-application&#34;&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&#34;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-close-a-database-connection&#34;&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-sql&#34;&gt;FAQ: SQL&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-general&#34;&gt;FAQ: General&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-monitor-the-duration-of-database-statements-execution&#34;&gt;How do I monitor the duration of database statements execution?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#does-grdb-support-library-evolution-and-abi-stability&#34;&gt;Does GRDB support library evolution and ABI stability?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-associations&#34;&gt;FAQ: Associations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-select-only-one-column-of-an-associated-record&#34;&gt;How do I select only one column of an associated record?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-valueobservation&#34;&gt;FAQ: ValueObservation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#why-is-valueobservation-not-publishing-value-changes&#34;&gt;Why is ValueObservation not publishing value changes?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq-errors&#34;&gt;FAQ: Errors&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#generic-parameter-t-could-not-be-inferred&#34;&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#mutation-of-captured-var-in-concurrently-executing-code&#34;&gt;Mutation of captured var in concurrently-executing code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-1-no-such-column&#34;&gt;SQLite error 1 &#34;no such column&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized&#34;&gt;SQLite error 10 &#34;disk I/O error&#34;, SQLite error 23 &#34;not authorized&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries&#34;&gt;SQLite error 21 &#34;wrong number of statement arguments&#34; with LIKE queries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ: Opening Connections&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-create-a-database-in-my-application&#34;&gt;How do I create a database in my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&#34;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-close-a-database-connection&#34;&gt;How do I close a database connection?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I create a database in my application?&lt;/h3&gt; &#xA;&lt;p&gt;This question assumes that your application has to create a new database from scratch. If your app has to open an existing database that is embedded inside your application as a resource, see &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-open-a-database-stored-as-a-resource-of-my-application&#34;&gt;How do I open a database stored as a resource of my application?&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;The database has to be stored in a valid place where it can be created and modified. For example, in the &lt;a href=&#34;https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html&#34;&gt;Application Support directory&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let databaseURL = try FileManager.default&#xA;    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)&#xA;    .appendingPathComponent(&#34;db.sqlite&#34;)&#xA;let dbQueue = try DatabaseQueue(path: databaseURL.path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I open a database stored as a resource of my application?&lt;/h3&gt; &#xA;&lt;p&gt;If your application does not need to modify the database, open a read-only &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;connection&lt;/a&gt; to your resource:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.readonly = true&#xA;let dbPath = Bundle.main.path(forResource: &#34;db&#34;, ofType: &#34;sqlite&#34;)!&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the application should modify the database, you need to copy it to a place where it can be modified. For example, in the &lt;a href=&#34;https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html&#34;&gt;Application Support directory&lt;/a&gt;. Only then, open a &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#database-connections&#34;&gt;connection&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let fileManager = FileManager.default&#xA;let dbPath = try fileManager&#xA;    .url(for: .applicationSupportDirectory, in: .userDomainMask, appropriateFor: nil, create: true)&#xA;    .appendingPathComponent(&#34;db.sqlite&#34;)&#xA;    .path&#xA;if !fileManager.fileExists(atPath: dbPath) {&#xA;    let dbResourcePath = Bundle.main.path(forResource: &#34;db&#34;, ofType: &#34;sqlite&#34;)!&#xA;    try fileManager.copyItem(atPath: dbResourcePath, toPath: dbPath)&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How do I close a database connection?&lt;/h3&gt; &#xA;&lt;p&gt;Database connections are automatically closed when they are deinitialized.&lt;/p&gt; &#xA;&lt;p&gt;When the correct execution of your program depends on precise database closing, use the &lt;code&gt;close()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This explicit &lt;code&gt;close()&lt;/code&gt; may fail with an error. See the inline documentation of this method for more information. Generally speaking, you should not call this method: rely on automatic closing instead.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: SQL&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-print-a-request-as-sql&#34;&gt;How do I print a request as SQL?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I print a request as SQL?&lt;/h3&gt; &#xA;&lt;p&gt;When you want to debug a request that does not deliver the expected results, you may want to print the SQL that is actually executed.&lt;/p&gt; &#xA;&lt;p&gt;You can compile the request into a prepared statement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try dbQueue.read { db in&#xA;    let request = Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;)&#xA;    let statement = try request.makePreparedRequest(db).statement&#xA;    print(statement) // SELECT * FROM player WHERE email = ?&#xA;    print(statement.arguments) // [&#34;arthur@example.com&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option is to setup a tracing function that prints out the executed SQL requests. For example, provide a tracing function when you connect to the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Prints all SQL statements&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.trace { print($0) }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    // Prints &#34;SELECT * FROM player WHERE email = ?&#34;&#xA;    let players = try Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;).fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see statement arguments such as &lt;code&gt;&#39;arthur@example.com&#39;&lt;/code&gt; in the logged statements, &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/configuration/publicstatementarguments&#34;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the generated SQL may change between GRDB releases, without notice: don&#39;t have your application rely on any specific SQL output.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;FAQ: General&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-monitor-the-duration-of-database-statements-execution&#34;&gt;How do I monitor the duration of database statements execution?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;What Are Experimental Features?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#does-grdb-support-library-evolution-and-abi-stability&#34;&gt;Does GRDB support library evolution and ABI stability?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I monitor the duration of database statements execution?&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;trace(options:_:)&lt;/code&gt; method, with the &lt;code&gt;.profile&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.trace(options: .profile) { event in&#xA;        // Prints all SQL statements with their duration&#xA;        print(event)&#xA;        &#xA;        // Access to detailed profiling information&#xA;        if case let .profile(statement, duration) = event, duration &amp;gt; 0.5 {&#xA;            print(&#34;Slow query: \(statement.sql)&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&#xA;try dbQueue.read { db in&#xA;    let players = try Player.filter(Column(&#34;email&#34;) == &#34;arthur@example.com&#34;).fetchAll(db)&#xA;    // Prints &#34;0.003s SELECT * FROM player WHERE email = ?&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see statement arguments such as &lt;code&gt;&#39;arthur@example.com&#39;&lt;/code&gt; in the logged statements, &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/configuration/publicstatementarguments&#34;&gt;make statement arguments public&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What Are Experimental Features?&lt;/h3&gt; &#xA;&lt;p&gt;Since GRDB 1.0, all backwards compatibility guarantees of &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt; apply: no breaking change will happen until the next major version of the library.&lt;/p&gt; &#xA;&lt;p&gt;There is an exception, though: &lt;em&gt;experimental features&lt;/em&gt;, marked with the &#34;&lt;strong&gt;&lt;span&gt;üî•&lt;/span&gt; EXPERIMENTAL&lt;/strong&gt;&#34; badge. Those are advanced features that are too young, or lack user feedback. They are not stabilized yet.&lt;/p&gt; &#xA;&lt;p&gt;Those experimental features are not protected by semantic versioning, and may break between two minor releases of the library. To help them becoming stable, &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues&#34;&gt;your feedback&lt;/a&gt; is greatly appreciated.&lt;/p&gt; &#xA;&lt;h3&gt;Does GRDB support library evolution and ABI stability?&lt;/h3&gt; &#xA;&lt;p&gt;No, GRDB does not support library evolution and ABI stability. The only promise is API stability according to &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt;, with an exception for &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#what-are-experimental-features&#34;&gt;experimental features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Yet, GRDB can be built with the &#34;Build Libraries for Distribution&#34; Xcode option (&lt;code&gt;BUILD_LIBRARY_FOR_DISTRIBUTION&lt;/code&gt;), so that you can build binary frameworks at your convenience.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: Associations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-select-only-one-column-of-an-associated-record&#34;&gt;How do I select only one column of an associated record?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do I filter records and only keep those that are associated to another record?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to only fetch books that have an author, and discard anonymous books.&lt;/p&gt; &#xA;&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Book: TableRecord {&#xA;    ...&#xA;    static let author = belongsTo(Author.self)&#xA;}&#xA;&#xA;struct Author: TableRecord {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we can write our request and only fetch books that have an author, discarding anonymous ones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let books: [Book] = try dbQueue.read { db in&#xA;    // SELECT book.* FROM book &#xA;    // JOIN author ON author.id = book.authorID&#xA;    let request = Book.joining(required: Book.author)&#xA;    return try request.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note how this request does not use the &lt;code&gt;filter&lt;/code&gt; method. Indeed, we don&#39;t have any condition to express on any column. Instead, we just need to &#34;require that a book can be joined to its author&#34;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-not-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/a&gt; below for the opposite question.&lt;/p&gt; &#xA;&lt;h3&gt;How do I filter records and only keep those that are NOT associated to another record?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to only fetch anonymous books that do not have any author.&lt;/p&gt; &#xA;&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Book: TableRecord {&#xA;    ...&#xA;    static let author = belongsTo(Author.self)&#xA;}&#xA;&#xA;struct Author: TableRecord {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we can write our request and only fetch anonymous books that don&#39;t have any author:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let books: [Book] = try dbQueue.read { db in&#xA;    // SELECT book.* FROM book&#xA;    // LEFT JOIN author ON author.id = book.authorID&#xA;    // WHERE author.id IS NULL&#xA;    let authorAlias = TableAlias()&#xA;    let request = Book&#xA;        .joining(optional: Book.author.aliased(authorAlias))&#xA;        .filter(!authorAlias.exists)&#xA;    return try request.fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This request uses a TableAlias in order to be able to filter on the eventual associated author. We make sure that the &lt;code&gt;Author.primaryKey&lt;/code&gt; is nil, which is another way to say it does not exist: the book has no author.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#how-do-i-filter-records-and-only-keep-those-that-are-associated-to-another-record&#34;&gt;How do I filter records and only keep those that are associated to another record?&lt;/a&gt; above for the opposite question.&lt;/p&gt; &#xA;&lt;h3&gt;How do I select only one column of an associated record?&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you have two record types, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;, and you want to fetch all books with their author name, but not the full associated author records.&lt;/p&gt; &#xA;&lt;p&gt;We start by defining the association between books and authors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Book: Decodable, TableRecord {&#xA;    ...&#xA;    static let author = belongsTo(Author.self)&#xA;}&#xA;&#xA;struct Author: Decodable, TableRecord {&#xA;    ...&#xA;    enum Columns {&#xA;        static let name = Column(CodingKeys.name)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then we can write our request and the ad-hoc record that decodes it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct BookInfo: Decodable, FetchableRecord {&#xA;    var book: Book&#xA;    var authorName: String? // nil when the book is anonymous&#xA;    &#xA;    static func all() -&amp;gt; QueryInterfaceRequest&amp;lt;BookInfo&amp;gt; {&#xA;        // SELECT book.*, author.name AS authorName&#xA;        // FROM book&#xA;        // LEFT JOIN author ON author.id = book.authorID&#xA;        let authorName = Author.Columns.name.forKey(CodingKeys.authorName)&#xA;        return Book&#xA;            .annotated(withOptional: Book.author.select(authorName))&#xA;            .asRequest(of: BookInfo.self)&#xA;    }&#xA;}&#xA;&#xA;let bookInfos: [BookInfo] = try dbQueue.read { db in&#xA;    BookInfo.all().fetchAll(db)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By defining the request as a static method of BookInfo, you have access to the private &lt;code&gt;CodingKeys.authorName&lt;/code&gt;, and a compiler-checked SQL column name.&lt;/p&gt; &#xA;&lt;p&gt;By using the &lt;code&gt;annotated(withOptional:)&lt;/code&gt; method, you append the author name to the top-level selection that can be decoded by the ad-hoc record.&lt;/p&gt; &#xA;&lt;p&gt;By using &lt;code&gt;asRequest(of:)&lt;/code&gt;, you enhance the type-safety of your request.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: ValueObservation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#why-is-valueobservation-not-publishing-value-changes&#34;&gt;Why is ValueObservation not publishing value changes?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why is ValueObservation not publishing value changes?&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it looks that a &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/valueobservation&#34;&gt;ValueObservation&lt;/a&gt; does not notify the changes you expect.&lt;/p&gt; &#xA;&lt;p&gt;There may be four possible reasons for this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The expected changes were not committed into the database.&lt;/li&gt; &#xA; &lt;li&gt;The expected changes were committed into the database, but were quickly overwritten.&lt;/li&gt; &#xA; &lt;li&gt;The observation was stopped.&lt;/li&gt; &#xA; &lt;li&gt;The observation does not track the expected database region.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To answer the first two questions, look at SQL statements executed by the database. This is done when you open the database connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Prints all SQL statements&#xA;var config = Configuration()&#xA;config.prepareDatabase { db in&#xA;    db.trace { print(&#34;SQL: \($0)&#34;) }&#xA;}&#xA;let dbQueue = try DatabaseQueue(path: dbPath, configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If, after that, you are convinced that the expected changes were committed into the database, and not overwritten soon after, trace observation events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let observation = ValueObservation&#xA;    .tracking { db in ... }&#xA;    .print() // &amp;lt;- trace observation events&#xA;let cancellable = observation.start(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Look at the observation logs which start with &lt;code&gt;cancel&lt;/code&gt; or &lt;code&gt;failure&lt;/code&gt;: maybe the observation was cancelled by your app, or did fail with an error.&lt;/p&gt; &#xA;&lt;p&gt;Look at the observation logs which start with &lt;code&gt;value&lt;/code&gt;: make sure, again, that the expected value was not actually notified, then overwritten.&lt;/p&gt; &#xA;&lt;p&gt;Finally, look at the observation logs which start with &lt;code&gt;tracked region&lt;/code&gt;. Does the printed database region cover the expected changes?&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;empty&lt;/code&gt;: The empty region, which tracks nothing and never triggers the observation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(*)&lt;/code&gt;: The full &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(id,name)&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(id,name)[1]&lt;/code&gt;: The &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; columns of the row with id 1 in the &lt;code&gt;player&lt;/code&gt; table&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;player(*),team(*)&lt;/code&gt;: Both the full &lt;code&gt;player&lt;/code&gt; and &lt;code&gt;team&lt;/code&gt; tables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you happen to use the &lt;code&gt;ValueObservation.trackingConstantRegion(_:)&lt;/code&gt; method and see a mismatch between the tracked region and your expectation, then change the definition of your observation by using &lt;code&gt;tracking(_:)&lt;/code&gt;. You should witness that the logs which start with &lt;code&gt;tracked region&lt;/code&gt; now evolve in order to include the expected changes, and that you get the expected notifications.&lt;/p&gt; &#xA;&lt;p&gt;If after all those steps (thanks you!), your observation is still failing you, please &lt;a href=&#34;https://github.com/groue/GRDB.swift/issues/new&#34;&gt;open an issue&lt;/a&gt; and provide a &lt;a href=&#34;https://stackoverflow.com/help/minimal-reproducible-example&#34;&gt;minimal reproducible example&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;FAQ: Errors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚¨Ü&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#generic-parameter-t-could-not-be-inferred&#34;&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#mutation-of-captured-var-in-concurrently-executing-code&#34;&gt;Mutation of captured var in concurrently-executing code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-1-no-such-column&#34;&gt;SQLite error 1 &#34;no such column&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-10-disk-io-error-sqlite-error-23-not-authorized&#34;&gt;SQLite error 10 &#34;disk I/O error&#34;, SQLite error 23 &#34;not authorized&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#sqlite-error-21-wrong-number-of-statement-arguments-with-like-queries&#34;&gt;SQLite error 21 &#34;wrong number of statement arguments&#34; with LIKE queries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generic parameter &#39;T&#39; could not be inferred&lt;/h3&gt; &#xA;&lt;p&gt;You may get this error when using the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; methods of database queues and pools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Generic parameter &#39;T&#39; could not be inferred&#xA;let string = try dbQueue.read { db in&#xA;    let result = try String.fetchOne(db, ...)&#xA;    return result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a limitation of the Swift compiler.&lt;/p&gt; &#xA;&lt;p&gt;The general workaround is to explicitly declare the type of the closure result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// General Workaround&#xA;let string = try dbQueue.read { db -&amp;gt; String? in&#xA;    let result = try String.fetchOne(db, ...)&#xA;    return result&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also, when possible, write a single-line closure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Single-line closure workaround:&#xA;let string = try dbQueue.read { db in&#xA;    try String.fetchOne(db, ...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mutation of captured var in concurrently-executing code&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;persistence methods&lt;/a&gt; can trigger a compiler error in async contexts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var player = Player(id: nil, name: &#34;Arthur&#34;)&#xA;try await dbWriter.write { db in&#xA;    // Error: Mutation of captured var &#39;player&#39; in concurrently-executing code&#xA;    try player.insert(db)&#xA;}&#xA;print(player.id) // A non-nil id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this happens, prefer the &lt;code&gt;inserted&lt;/code&gt; and &lt;code&gt;saved&lt;/code&gt; methods instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// OK&#xA;var player = Player(id: nil, name: &#34;Arthur&#34;)&#xA;player = try await dbWriter.write { [player] db in&#xA;    return try player.inserted(db)&#xA;}&#xA;print(player.id) // A non-nil id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQLite error 1 &#34;no such column&#34;&lt;/h3&gt; &#xA;&lt;p&gt;This error message is self-explanatory: do check for misspelled or non-existing column names.&lt;/p&gt; &#xA;&lt;p&gt;However, sometimes this error only happens when an app runs on a recent operating system (iOS 14+, Big Sur+, etc.) The error does not happen with previous ones.&lt;/p&gt; &#xA;&lt;p&gt;When this is the case, there are two possible explanations:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Maybe a column name is &lt;em&gt;really&lt;/em&gt; misspelled or missing from the database schema.&lt;/p&gt; &lt;p&gt;To find it, check the SQL statement that comes with the &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#databaseerror&#34;&gt;DatabaseError&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Maybe the application is using the character &lt;code&gt;&#34;&lt;/code&gt; instead of the single quote &lt;code&gt;&#39;&lt;/code&gt; as the delimiter for string literals in raw SQL queries. Recent versions of SQLite have learned to tell about this deviation from the SQL standard, and this is why you are seeing this error.&lt;/p&gt; &lt;p&gt;For example: this is not standard SQL: &lt;code&gt;UPDATE player SET name = &#34;Arthur&#34;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The standard version is: &lt;code&gt;UPDATE player SET name = &#39;Arthur&#39;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;It just happens that old versions of SQLite used to accept the former, non-standard version. Newer versions are able to reject it with an error.&lt;/p&gt; &lt;p&gt;The fix is to change the SQL statements run by the application: replace &lt;code&gt;&#34;&lt;/code&gt; with &lt;code&gt;&#39;&lt;/code&gt; in your string literals.&lt;/p&gt; &lt;p&gt;It may also be time to learn about statement arguments and &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#avoiding-sql-injection&#34;&gt;SQL injection&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name: String = ...&#xA;&#xA;// NOT STANDARD (double quote)&#xA;try db.execute(sql: &#34;&#34;&#34;&#xA;    UPDATE player SET name = &#34;\(name)&#34;&#xA;    &#34;&#34;&#34;)&#xA;&#xA;// STANDARD, BUT STILL NOT RECOMMENDED (single quote)&#xA;try db.execute(sql: &#34;UPDATE player SET name = &#39;\(name)&#39;&#34;)&#xA;&#xA;// STANDARD, AND RECOMMENDED (statement arguments)&#xA;try db.execute(sql: &#34;UPDATE player SET name = ?&#34;, arguments: [name])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://sqlite.org/quirks.html#double_quoted_string_literals_are_accepted&#34;&gt;Double-quoted String Literals Are Accepted&lt;/a&gt;, and &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/configuration/acceptsdoublequotedstringliterals&#34;&gt;Configuration.acceptsDoubleQuotedStringLiterals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SQLite error 10 &#34;disk I/O error&#34;, SQLite error 23 &#34;not authorized&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Those errors may be the sign that SQLite can&#39;t access the database due to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#data-protection&#34;&gt;data protection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When your application should be able to run in the background on a locked device, it has to catch this error, and, for example, wait for &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom&#34;&gt;UIApplicationDelegate.applicationProtectedDataDidBecomeAvailable(_:)&lt;/a&gt; or &lt;a href=&#34;https://developer.apple.com/reference/uikit/uiapplicationprotecteddatadidbecomeavailable&#34;&gt;UIApplicationProtectedDataDidBecomeAvailable&lt;/a&gt; notification and retry the failed database operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    try ...&#xA;} catch DatabaseError.SQLITE_IOERR, DatabaseError.SQLITE_AUTH {&#xA;    // Handle possible data protection error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This error can also be prevented altogether by using a more relaxed &lt;a href=&#34;https://developer.apple.com/reference/foundation/filemanager/1653059-file_protection_values&#34;&gt;file protection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SQLite error 21 &#34;wrong number of statement arguments&#34; with LIKE queries&lt;/h3&gt; &#xA;&lt;p&gt;You may get the error &#34;wrong number of statement arguments&#34; when executing a LIKE query similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name = textField.text&#xA;let players = try dbQueue.read { db in&#xA;    try Player.fetchAll(db, sql: &#34;SELECT * FROM player WHERE name LIKE &#39;%?%&#39;&#34;, arguments: [name])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The problem lies in the &lt;code&gt;&#39;%?%&#39;&lt;/code&gt; pattern.&lt;/p&gt; &#xA;&lt;p&gt;SQLite only interprets &lt;code&gt;?&lt;/code&gt; as a parameter when it is a placeholder for a whole value (int, double, string, blob, null). In this incorrect query, &lt;code&gt;?&lt;/code&gt; is just a character in the &lt;code&gt;&#39;%?%&#39;&lt;/code&gt; string: it is not a query parameter, and is not processed in any way. See &lt;a href=&#34;https://www.sqlite.org/lang_expr.html#varparam&#34;&gt;https://www.sqlite.org/lang_expr.html#varparam&lt;/a&gt; for more information about SQLite parameters.&lt;/p&gt; &#xA;&lt;p&gt;To fix the error, you can feed the request with the pattern itself, instead of the name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let name = textField.text&#xA;let players: [Player] = try dbQueue.read { db in&#xA;    let pattern = &#34;%\(name)%&#34;&#xA;    return try Player.fetchAll(db, sql: &#34;SELECT * FROM player WHERE name LIKE ?&#34;, arguments: [pattern])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Sample Code&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#documentation&#34;&gt;Documentation&lt;/a&gt; is full of GRDB snippets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/DemoApps&#34;&gt;Demo Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;GRDB.xcworkspace&lt;/code&gt;: it contains GRDB-enabled playgrounds to play with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/groue/SortedDifference&#34;&gt;groue/SortedDifference&lt;/a&gt;: How to synchronize a database table with a JSON payload&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pierlis.com&#34;&gt;Pierlis&lt;/a&gt;, where we write great software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alextrob&#34;&gt;@alextrob&lt;/a&gt;, &lt;a href=&#34;https://github.com/alexwlchan&#34;&gt;@alexwlchan&lt;/a&gt;, &lt;a href=&#34;https://github.com/bellebethcooper&#34;&gt;@bellebethcooper&lt;/a&gt;, &lt;a href=&#34;https://github.com/bfad&#34;&gt;@bfad&lt;/a&gt;, &lt;a href=&#34;https://github.com/cfilipov&#34;&gt;@cfilipov&lt;/a&gt;, &lt;a href=&#34;https://github.com/charlesmchen-signal&#34;&gt;@charlesmchen-signal&lt;/a&gt;, &lt;a href=&#34;https://github.com/Chiliec&#34;&gt;@Chiliec&lt;/a&gt;, &lt;a href=&#34;https://github.com/chrisballinger&#34;&gt;@chrisballinger&lt;/a&gt;, &lt;a href=&#34;https://github.com/darrenclark&#34;&gt;@darrenclark&lt;/a&gt;, &lt;a href=&#34;https://github.com/davidkraus&#34;&gt;@davidkraus&lt;/a&gt;, &lt;a href=&#34;https://github.com/eburns-vmware&#34;&gt;@eburns-vmware&lt;/a&gt;, &lt;a href=&#34;https://github.com/felixscheinost&#34;&gt;@felixscheinost&lt;/a&gt;, &lt;a href=&#34;https://github.com/fpillet&#34;&gt;@fpillet&lt;/a&gt;, &lt;a href=&#34;https://github.com/gcox&#34;&gt;@gcox&lt;/a&gt;, &lt;a href=&#34;https://github.com/GetToSet&#34;&gt;@GetToSet&lt;/a&gt;, &lt;a href=&#34;https://github.com/gjeck&#34;&gt;@gjeck&lt;/a&gt;, &lt;a href=&#34;https://github.com/guidedways&#34;&gt;@guidedways&lt;/a&gt;, &lt;a href=&#34;https://github.com/gusrota&#34;&gt;@gusrota&lt;/a&gt;, &lt;a href=&#34;https://github.com/haikusw&#34;&gt;@haikusw&lt;/a&gt;, &lt;a href=&#34;https://github.com/hartbit&#34;&gt;@hartbit&lt;/a&gt;, &lt;a href=&#34;https://github.com/holsety&#34;&gt;@holsety&lt;/a&gt;, &lt;a href=&#34;https://github.com/jroselightricks&#34;&gt;@jroselightricks&lt;/a&gt;, &lt;a href=&#34;https://github.com/kdubb&#34;&gt;@kdubb&lt;/a&gt;, &lt;a href=&#34;https://github.com/kluufger&#34;&gt;@kluufger&lt;/a&gt;, &lt;a href=&#34;https://github.com/KyleLeneau&#34;&gt;@KyleLeneau&lt;/a&gt;, &lt;a href=&#34;https://github.com/layoutSubviews&#34;&gt;@layoutSubviews&lt;/a&gt;, &lt;a href=&#34;https://github.com/mallman&#34;&gt;@mallman&lt;/a&gt;, &lt;a href=&#34;https://github.com/MartinP7r&#34;&gt;@MartinP7r&lt;/a&gt;, &lt;a href=&#34;https://github.com/Marus&#34;&gt;@Marus&lt;/a&gt;, &lt;a href=&#34;https://github.com/mattgallagher&#34;&gt;@mattgallagher&lt;/a&gt;, &lt;a href=&#34;https://github.com/MaxDesiatov&#34;&gt;@MaxDesiatov&lt;/a&gt;, &lt;a href=&#34;https://github.com/michaelkirk-signal&#34;&gt;@michaelkirk-signal&lt;/a&gt;, &lt;a href=&#34;https://github.com/mtancock&#34;&gt;@mtancock&lt;/a&gt;, &lt;a href=&#34;https://github.com/pakko972&#34;&gt;@pakko972&lt;/a&gt;, &lt;a href=&#34;https://github.com/peter-ss&#34;&gt;@peter-ss&lt;/a&gt;, &lt;a href=&#34;https://github.com/pierlo&#34;&gt;@pierlo&lt;/a&gt;, &lt;a href=&#34;https://github.com/pocketpixels&#34;&gt;@pocketpixels&lt;/a&gt;, &lt;a href=&#34;https://github.com/pp5x&#34;&gt;@pp5x&lt;/a&gt;, &lt;a href=&#34;https://github.com/professordeng&#34;&gt;@professordeng&lt;/a&gt;, &lt;a href=&#34;https://github.com/robcas3&#34;&gt;@robcas3&lt;/a&gt;, &lt;a href=&#34;https://github.com/runhum&#34;&gt;@runhum&lt;/a&gt;, &lt;a href=&#34;https://github.com/sberrevoets&#34;&gt;@sberrevoets&lt;/a&gt;, &lt;a href=&#34;https://github.com/schveiguy&#34;&gt;@schveiguy&lt;/a&gt;, &lt;a href=&#34;https://github.com/SD10&#34;&gt;@SD10&lt;/a&gt;, &lt;a href=&#34;https://github.com/sobri909&#34;&gt;@sobri909&lt;/a&gt;, &lt;a href=&#34;https://github.com/sroddy&#34;&gt;@sroddy&lt;/a&gt;, &lt;a href=&#34;https://github.com/steipete&#34;&gt;@steipete&lt;/a&gt;, &lt;a href=&#34;https://github.com/swiftlyfalling&#34;&gt;@swiftlyfalling&lt;/a&gt;, &lt;a href=&#34;https://github.com/Timac&#34;&gt;@Timac&lt;/a&gt;, &lt;a href=&#34;https://github.com/tternes&#34;&gt;@tternes&lt;/a&gt;, &lt;a href=&#34;https://github.com/valexa&#34;&gt;@valexa&lt;/a&gt;, &lt;a href=&#34;https://github.com/wuyuehyang&#34;&gt;@wuyuehyang&lt;/a&gt;, &lt;a href=&#34;https://github.com/ZevEisenberg&#34;&gt;@ZevEisenberg&lt;/a&gt;, and &lt;a href=&#34;https://github.com/zmeyc&#34;&gt;@zmeyc&lt;/a&gt; for their contributions, help, and feedback on GRDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aymerick&#34;&gt;@aymerick&lt;/a&gt; and &lt;a href=&#34;https://github.com/kali&#34;&gt;@kali&lt;/a&gt; because SQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;ccgus/fmdb&lt;/a&gt; for its excellency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.w3.org/Provider/Style/URI&#34;&gt;URIs don&#39;t change: people change them.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Adding support for missing SQL functions or operators&lt;/h4&gt; &#xA;&lt;p&gt;This chapter was renamed to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#embedding-sql-in-query-interface-requests&#34;&gt;Embedding SQL in Query Interface Requests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Advanced DatabasePool&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/concurrency&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;After Commit Hook&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/database/afternexttransaction(oncommit:onrollback:)&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Asynchronous APIs&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/concurrency&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Changes Tracking&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#record-comparison&#34;&gt;Record Comparison&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Concurrency&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/concurrency&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customized Decoding of Database Rows&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#beyond-fetchablerecord&#34;&gt;Beyond FetchableRecord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Customizing the Persistence Methods&lt;/h4&gt; &#xA;&lt;p&gt;This chapter was replaced with &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistence-callbacks&#34;&gt;Persistence Callbacks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Database Changes Observation&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseobservation&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Database Configuration&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/configuration&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Database Queues&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasequeue&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Database Pools&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasepool&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Database Snapshots&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/concurrency&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;DatabaseWriter and DatabaseReader Protocols&lt;/h4&gt; &#xA;&lt;p&gt;This chapter was removed. See the references of &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasereader&#34;&gt;DatabaseReader&lt;/a&gt; and &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasewriter&#34;&gt;DatabaseWriter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Dealing with External Connections&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been superseded by the &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databasesharing&#34;&gt;Sharing a Database&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h4&gt;Differences between Database Queues and Pools&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/concurrency&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Enabling FTS5 Support&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md#enabling-fts5-support&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;FetchedRecordsController&lt;/h4&gt; &#xA;&lt;p&gt;FetchedRecordsController has been removed in GRDB 5.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseobservation&#34;&gt;Database Observation&lt;/a&gt; chapter describes the other ways to observe the database.&lt;/p&gt; &#xA;&lt;h4&gt;Full-Text Search&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/Documentation/FullTextSearch.md&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Guarantees and Rules&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/concurrency&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Migrations&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/migrations&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;NSNumber and NSDecimalNumber&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#nsnumber-nsdecimalnumber-and-decimal&#34;&gt;moved&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Persistable Protocol&lt;/h4&gt; &#xA;&lt;p&gt;This protocol has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#persistablerecord-protocol&#34;&gt;PersistableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; &#xA;&lt;h4&gt;PersistenceError&lt;/h4&gt; &#xA;&lt;p&gt;This error was renamed to &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#recorderror&#34;&gt;RecordError&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;RowConvertible Protocol&lt;/h4&gt; &#xA;&lt;p&gt;This protocol has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#fetchablerecord-protocol&#34;&gt;FetchableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; &#xA;&lt;h4&gt;TableMapping Protocol&lt;/h4&gt; &#xA;&lt;p&gt;This protocol has been renamed &lt;a href=&#34;https://raw.githubusercontent.com/groue/GRDB.swift/master/#tablerecord-protocol&#34;&gt;TableRecord&lt;/a&gt; in GRDB 3.0.&lt;/p&gt; &#xA;&lt;h4&gt;Transactions and Savepoints&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/transactions&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Transaction Hook&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/database/afternexttransaction(oncommit:onrollback:)&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;TransactionObserver Protocol&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/transactionobserver&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Unsafe Concurrency APIs&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/concurrency&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ValueObservation&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/valueobservation&#34;&gt;moved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ValueObservation and DatabaseRegionObservation&lt;/h4&gt; &#xA;&lt;p&gt;This chapter has been superseded by &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/valueobservation&#34;&gt;ValueObservation&lt;/a&gt; and &lt;a href=&#34;https://swiftpackageindex.com/groue/grdb.swift/documentation/grdb/databaseregionobservation&#34;&gt;DatabaseRegionObservation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>intitni/CopilotForXcode</title>
    <updated>2023-02-19T02:02:17Z</updated>
    <id>tag:github.com,2023-02-19:/intitni/CopilotForXcode</id>
    <link href="https://github.com/intitni/CopilotForXcode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The missing Github Copilot Xcode Source Editor Extension&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot for Xcode &lt;img alt=&#34;Logo&#34; src=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/AppIcon.png&#34; align=&#34;right&#34; height=&#34;50&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/intitni/CopilotForXcode/main/ScreenRecording.gif&#34; alt=&#34;ScreenRecording&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copilot for Xcode is an Xcode Source Editor Extension that provides Github Copilot support for Xcode. It uses the LSP provided through &lt;a href=&#34;https://github.com/github/copilot.vim/tree/release/copilot/dist&#34;&gt;Copilot.vim&lt;/a&gt; to generate suggestions and displays them as comments.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/TerminalFi/LSP-copilot&#34;&gt;LSP-copilot&lt;/a&gt; for showing the way to interact with Copilot. And thanks to &lt;a href=&#34;https://github.com/ChimeHQ/LanguageClient&#34;&gt;LanguageClient&lt;/a&gt; for the Language Server Protocol support in Swift.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node&lt;/a&gt; installed to run the Copilot LSP.&lt;/li&gt; &#xA; &lt;li&gt;Public network connection.&lt;/li&gt; &#xA; &lt;li&gt;Active GitHub Copilot subscription.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions Required&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accessibility API&lt;/li&gt; &#xA; &lt;li&gt;Folder Access&lt;/li&gt; &#xA; &lt;li&gt;Input Monitoring (for real-time suggestions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;You can install it via &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask copilot-for-xcode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install it manually, by downloading the &lt;code&gt;Copilot for Xcode.app&lt;/code&gt; from the latest &lt;a href=&#34;https://github.com/intitni/CopilotForXcode/releases&#34;&gt;release&lt;/a&gt;, and extract it to the Applications folder.&lt;/p&gt; &#xA;&lt;p&gt;Then set it up with the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the app, the app will create a launch agent to setup a background running Service that does the real job.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable the extension in &lt;code&gt;System Settings.app&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;From the Apple menu located in the top-left corner of your screen click &lt;code&gt;System Settings&lt;/code&gt;. Navigate to &lt;code&gt;Privacy &amp;amp; Security&lt;/code&gt; then toward the bottom click &lt;code&gt;Extensions&lt;/code&gt;. Click &lt;code&gt;Xcode Source Editor&lt;/code&gt; and tick &lt;code&gt;Copilot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you are using macOS Monterey, enter the &lt;code&gt;Extensions&lt;/code&gt; menu in &lt;code&gt;System Preferences.app&lt;/code&gt; with its dedicated icon.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Sign In GitHub Copilot&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the app, refresh the Copilot status (it may fail for the first time, try at least one more time).&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Sign In&#34;, and you will be directed to a verification website provided by GitHub, and a user code will be pasted into your clipboard.&lt;/li&gt; &#xA; &lt;li&gt;After signing in, go back to the app and click &#34;Confirm Sign-in&#34; to finish.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Granting Permissions to the App&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Permissions should be granted to &lt;code&gt;CopilotForXcodeExtensionService.app&lt;/code&gt;&lt;/strong&gt;. Not &lt;code&gt;Copilot for Xcode.app&lt;/code&gt;. It is located in &lt;code&gt;Copilot for Xcode.app/Contents/Applications/CopilotForXcodeExtensionService.app&lt;/code&gt;, you can access this directory by right-clicking the app icon, and selecting &lt;code&gt;Show Package Contents&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first time the commands are run, the extension will ask for the necessary permissions. (except Input Monitoring, you have to enable it manually)&lt;/p&gt; &#xA;&lt;p&gt;Or you can grant them manually by going to the &lt;code&gt;Privacy &amp;amp; Security&lt;/code&gt; tab in &lt;code&gt;System Settings.app&lt;/code&gt;, and&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accessibility API: Click &lt;code&gt;Accessibility&lt;/code&gt;, and drag &lt;code&gt;CopilotForXcodeExtensionService.app&lt;/code&gt; to the list.&lt;/li&gt; &#xA; &lt;li&gt;Input Monitoring (If you need real-time suggestions): Click &lt;code&gt;Input Monitoring&lt;/code&gt; and drag &lt;code&gt;CopilotForXcodeExtensionService.app&lt;/code&gt; to the list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Managing &lt;code&gt;CopilotForXcodeExtensionService.app&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This app runs whenever you open &lt;code&gt;Copilot for Xcode.app&lt;/code&gt; or &lt;code&gt;Xcode.app&lt;/code&gt;. You can quit it with its menu bar item that looks like a steering wheel.&lt;/p&gt; &#xA;&lt;p&gt;You can also set it to quit automatically when the above 2 apps are closed.&lt;/p&gt; &#xA;&lt;h2&gt;Update&lt;/h2&gt; &#xA;&lt;p&gt;If the app was installed via Homebrew, you can update it by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew upgrade --cask copilot-for-xcode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, You can download the latest version manually from the latest &lt;a href=&#34;https://github.com/intitni/CopilotForXcode/releases&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are upgrading from a version lower than 0.7.0, please run &lt;code&gt;Copilot for Xcode.app&lt;/code&gt; at least once to let it set up the new launch agent for you.&lt;/p&gt; &#xA;&lt;p&gt;If you want to keep track of the new releases, you can watch the releases of this repo to get notifications about updates.&lt;/p&gt; &#xA;&lt;p&gt;If you find that some of the features are no longer working, please first try regranting permissions to the app.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get Suggestions: Get suggestions for the editing file at the current cursor position.&lt;/li&gt; &#xA; &lt;li&gt;Next Suggestion: If there is more than one suggestion, switch to the next one.&lt;/li&gt; &#xA; &lt;li&gt;Previous Suggestion: If there is more than one suggestion, switch to the previous one.&lt;/li&gt; &#xA; &lt;li&gt;Accept Suggestion: Add the suggestion to the code.&lt;/li&gt; &#xA; &lt;li&gt;Reject Suggestion: Remove the suggestion comments.&lt;/li&gt; &#xA; &lt;li&gt;Toggle Real-time Suggestions: When turn on, Copilot will auto-insert suggestion comments to your code while editing.&lt;/li&gt; &#xA; &lt;li&gt;Real-time Suggestions: Call only by Copilot for Xcode. When suggestions are successfully fetched, Copilot for Xcode will run this command to present the suggestions.&lt;/li&gt; &#xA; &lt;li&gt;Prefetch Suggestions: Call only by Copilot for Xcode. In the background, Copilot for Xcode will occasionally run this command to prefetch real-time suggestions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;About real-time suggestions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The on/off state is persisted, so be sure to turn it off manually when you no longer want it. When real-time suggestion is turned on, a breathing dot will show up next to the mouse pointer or the editing cursor.&lt;/p&gt; &#xA;&lt;p&gt;Whenever you stop typing for a few seconds, the app will automatically fetch suggestions for you, you can cancel this by clicking the mouse, or pressing &lt;strong&gt;Escape&lt;/strong&gt; or the &lt;strong&gt;arrow keys&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When a fetch occurs, the dot will have a slightly different animation. If you don&#39;t see it, your permissions may not be set correctly.&lt;/p&gt; &#xA;&lt;p&gt;The implementation won&#39;t feel as smooth as that of VSCode. The magic behind it is that it will keep calling the command from the menu when you are not typing or clicking the mouse. So it will have to listen to those events, I am not sure if people like it. Hope that next year, Apple can spend some time on Xcode Extensions.&lt;/p&gt; &#xA;&lt;h2&gt;Key Bindings&lt;/h2&gt; &#xA;&lt;p&gt;It looks like there is no way to add default key bindings to commands, but you can set them up in &lt;code&gt;Xcode settings &amp;gt; Key Bindings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/intitni/CopilotForXcode/issues/14&#34;&gt;recommended setup&lt;/a&gt; that should cause no conflict is&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Key Binding&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get Suggestions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;‚å•?&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Accept Suggestions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;‚å•}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reject Suggestion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;‚å•{&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Next Suggestion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;‚å•&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Previous Suggestion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;‚å•&amp;lt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Essentially using &lt;code&gt;‚å•‚áß&lt;/code&gt; as the &#34;access&#34; key combination for all bindings.&lt;/p&gt; &#xA;&lt;h2&gt;Prevent Suggestions Being Committed&lt;/h2&gt; &#xA;&lt;p&gt;Since the suggestions are presented as comments, they are in your code. If you are not careful enough, they can be committed to your git repo. To avoid that, I would recommend adding a pre-commit git hook to prevent this from happening.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh&#xA;&#xA;# Check if the commit message contains the string&#xA;if git diff --cached --diff-filter=ACMR | grep -q &#34;/*========== Copilot Suggestion&#34;; then&#xA;  echo &#34;Error: Commit contains Copilot suggestions generated by Copilot for Xcode.&#34;&#xA;  exit 1&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first run of the extension will be slow. Be patient.&lt;/li&gt; &#xA; &lt;li&gt;The extension uses some dirty tricks to get the file and project/workspace paths. It may fail, it may be incorrect, especially when you have multiple Xcode windows running, and maybe even worse when they are in different displays. I am not sure about that though.&lt;/li&gt; &#xA; &lt;li&gt;The suggestions are presented as C-style comments, they may break your code if you are editing a JSON file or something.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: The extension doesn&#39;t show up in the &lt;code&gt;Editor&lt;/code&gt; menu.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: Please make sure &lt;code&gt;Copilot&lt;/code&gt; is turned on in &lt;code&gt;System Settings.app &amp;gt; Privacy &amp;amp; Security &amp;gt; Extensions &amp;gt; Xcode Source Editor Extension&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: The extension says it can&#39;t connect to the XPC service/helper.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: If you have just updated the app from an old version, make sure you have restarted the XPC Service.&lt;/p&gt; &#xA; &lt;p&gt;Please make sure you have set up Launch Agents, try running &lt;code&gt;launchctl list | grep com.intii&lt;/code&gt; from the terminal, and see if &lt;code&gt;com.intii.CopilotForXcode.ExtensionService&lt;/code&gt; exists. If not, check &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt; to see if &lt;code&gt;com.intii.CopilotForXcode.ExtensionService.plist&lt;/code&gt; exists. If they don&#39;t, and the button in the app fails to create them, please try to do it by hand.&lt;/p&gt; &#xA; &lt;p&gt;If you are installing multiple versions of the extension on your machine, it&#39;s also possible that Xcode is using the older version of the extension.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: The extension complains that it has no access to the Accessibility API&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: Please check if the &lt;a href=&#34;https://github.com/intitni/CopilotForXcode#granting-permissions-to-the-app&#34;&gt;Accessibility API permission&lt;/a&gt; is setup correctly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: I turned on real-time suggestions, but nothing happens&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: Please check if the &lt;a href=&#34;https://github.com/intitni/CopilotForXcode#granting-permissions-to-the-app&#34;&gt;Accessibility API and Input Monitoring permission&lt;/a&gt; is setup correctly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Will it work in future Xcode updates?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A: I don&#39;t know. This extension uses many tricks to do its job, and these tricks can break in the future.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT.&lt;/p&gt;</summary>
  </entry>
</feed>