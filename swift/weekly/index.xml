<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-08T02:07:24Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ginsudev/WDBFontOverwrite</title>
    <updated>2023-01-08T02:07:24Z</updated>
    <id>tag:github.com,2023-01-08:/ginsudev/WDBFontOverwrite</id>
    <link href="https://github.com/ginsudev/WDBFontOverwrite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proof-of-concept app to overwrite fonts on iOS using CVE-2022-46689.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Proof-of-concept app to overwrite fonts on iOS using &lt;a href=&#34;https://support.apple.com/en-us/HT213530&#34;&gt;CVE-2022-46689&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Works on iOS 16.1.2 and below (tested on iOS 16.1) on unjailbroken devices.&lt;/p&gt; &#xA;&lt;p&gt;IPA available in the &lt;a href=&#34;https://github.com/ginsudev/WDBFontOverwrite/releases&#34;&gt;Releases&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Fonts included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DejaVu Sans Condensed&lt;/li&gt; &#xA; &lt;li&gt;DejaVu Serif&lt;/li&gt; &#xA; &lt;li&gt;DejaVu Sans Mono&lt;/li&gt; &#xA; &lt;li&gt;Go Regular&lt;/li&gt; &#xA; &lt;li&gt;Go Mono&lt;/li&gt; &#xA; &lt;li&gt;Fira Sans&lt;/li&gt; &#xA; &lt;li&gt;Segoe UI&lt;/li&gt; &#xA; &lt;li&gt;Comic Sans MS&lt;/li&gt; &#xA; &lt;li&gt;Choco Cooky&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also import custom fonts that were ported for iOS.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;DejaVu Sans Condensed | DejaVu Serif | DejaVu Sans Mono | Choco Cooky&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/704768/209511898-a1477b66-28e4-471a-87d9-36c1c2eb25ca.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go Regular | Go Mono | Segoe UI | Comic Sans MS&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/704768/209606970-a382c273-bdcb-425c-bca1-1b6f9b31862f.png&#34; alt=&#34;Another screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hanna Soft + JoyPixels | Bronkoh | Noto Serif SC | Fira Sans&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/704768/209753262-b8204c92-b873-41a7-8127-38bf86096470.png&#34; alt=&#34;Another screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Screenshot credit: &lt;a href=&#34;https://twitter.com/ev_ynw&#34;&gt;@ev_ynw&lt;/a&gt; for the ported &lt;a href=&#34;https://app.box.com/s/g4uk1yyqxm36sl9ovbwkpbbpn9isol8h/file/997004671334&#34;&gt;Hanna Soft&lt;/a&gt; and &lt;a href=&#34;https://app.box.com/s/g4uk1yyqxm36sl9ovbwkpbbpn9isol8h/file/915757902297&#34;&gt;Bronkoh&lt;/a&gt; fonts, &lt;a href=&#34;https://joypixels.com/download&#34;&gt;JoyPixels&lt;/a&gt; for the emoji font&lt;/p&gt; &#xA;&lt;h2&gt;Where to find ported fonts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ev_ynw&#34;&gt;@ev_ynw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PoomSmart/EmojiFonts/releases&#34;&gt;@PoomSmart&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The built-in fonts are not properly ported (I don&#39;t know how to port fonts). For best results, use a custom font. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;with the built-in fonts:&lt;/li&gt; &#xA;   &lt;li&gt;Only regular text uses the changed font: thin/medium/bold text falls back to Helvetica instead.&lt;/li&gt; &#xA;   &lt;li&gt;If the font doesn&#39;t show up at all, &lt;a href=&#34;https://twitter.com/m7mdabu7assan/status/1607609484901289985&#34;&gt;disable &#34;Bold Text&#34;&lt;/a&gt; in accessibility settings.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;File pickers in apps will fail to open with the error &#34;Something went wrong while displaying documents.&#34; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This happens if you replace the emoji font, or install fonts with &lt;a href=&#34;https://twitter.com/Gu3hi/status/1607986473198026752&#34;&gt;multiple weights&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Try the experimental .ttc fix by using &#34;Import custom &lt;font&gt; with fix for .ttc&#34;&lt;/font&gt;&lt;/li&gt;&#xA;   &lt;font&gt; &lt;/font&gt;&#xA;  &lt;/ul&gt;&lt;font&gt; &lt;/font&gt;&lt;/li&gt;&#xA; &lt;font&gt; &lt;li&gt;iOS 14.x devices which are jailbroken / were jailbroken before will not be able to revert to the original font. &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Workaround: do not use this app if you&#39;re on iOS 14.x and have previously jailbroken. Instead, just jailbreak and replace fonts normally.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &lt;/font&gt;&#xA;&lt;/ul&gt;&#xA;&lt;font&gt; &lt;h2&gt;Font conversion&lt;/h2&gt; &lt;p&gt;The CVE-2022-46689 issue - as far as I know - only lets you overwrite 16383 bytes out of every 16384 bytes: the last byte of the page can&#39;t be written.&lt;/p&gt; &lt;p&gt;(I could be wrong)&lt;/p&gt; &lt;p&gt;To work around this, I package the font using the &lt;a href=&#34;https://www.w3.org/TR/WOFF2/&#34;&gt;WOFF2&lt;/a&gt; webfont format, which is &lt;a href=&#34;https://twitter.com/myunderpants/status/1503745380365877252&#34;&gt;supported on iOS&lt;/a&gt;. WOFF2 uses &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7932&#34;&gt;Brotli&lt;/a&gt; for compression, which lets me insert padding to skip over the last byte.&lt;/p&gt; &lt;p&gt;See &lt;code&gt;repackfonts/make_woff2src.sh&lt;/code&gt; for details: this script:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;renames the font to .SFUI-Regular with &lt;a href=&#34;https://github.com/fonttools/fonttools&#34;&gt;TTX&lt;/a&gt; following &lt;a href=&#34;https://superuser.com/a/694452&#34;&gt;this answer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;rebuilds the font to .woff2&lt;/li&gt; &#xA;  &lt;li&gt;runs &lt;code&gt;repackfonts/BrotliPadding.swift&lt;/code&gt; to decompress the WOFF2 file and insert padding to skip past the 16384th byte&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;h2&gt;Credits&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Ian Beer of &lt;a href=&#34;https://googleprojectzero.blogspot.com&#34;&gt;Project Zero&lt;/a&gt; for finding CVE-2022-46689.&lt;/li&gt; &#xA;  &lt;li&gt;Apple for the &lt;a href=&#34;https://github.com/apple-oss-distributions/xnu/raw/xnu-8792.61.2/tests/vm/vm_unaligned_copy_switch_race.c&#34;&gt;test case&lt;/a&gt; and &lt;a href=&#34;https://github.com/apple-oss-distributions/xnu/raw/xnu-8792.61.2/osfmk/vm/vm_map.c#L10150&#34;&gt;patch&lt;/a&gt;. (I didn&#39;t change anything: I only wrapped the test case in a library.)&lt;/li&gt; &#xA;  &lt;li&gt;Everyone on Twitter who helped out and experimented with CVE-2022-46689, especially &lt;a href=&#34;https://twitter.com/dedbeddedbed&#34;&gt;@dedbeddedbed&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/AppleDry05&#34;&gt;@AppleDry05&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/haxi0sm&#34;&gt;@haxi0sm&lt;/a&gt; for exploring what can be done with this issue..&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/google/woff2&#34;&gt;WOFF2 compressor&lt;/a&gt; by Google&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/LIJI32/ttcpad&#34;&gt;ttcpad&lt;/a&gt; by LIJI32&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/fontforge/fontforge/raw/master/contrib/fonttools/stripttc.c&#34;&gt;Fontforge stripttc&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The &lt;a href=&#34;https://dejavu-fonts.github.io&#34;&gt;DejaVu fonts&lt;/a&gt; are distributed according to their &lt;a href=&#34;https://dejavu-fonts.github.io/License.html&#34;&gt;license&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;The &lt;a href=&#34;https://go.dev/blog/go-fonts&#34;&gt;Go fonts&lt;/a&gt; are distributed according to their license.&lt;/li&gt; &#xA;  &lt;li&gt;The &lt;a href=&#34;https://mozilla.github.io/Fira/&#34;&gt;Fira Sans&lt;/a&gt; font is converted by &lt;a href=&#34;https://twitter.com/jonpalmisc/status/1607570871421468678&#34;&gt;@jonpalmisc&lt;/a&gt; - thanks!&lt;/li&gt; &#xA;  &lt;li&gt;Segoe UI and Comic Sans MS are the property of Microsoft.&lt;/li&gt; &#xA;  &lt;li&gt;Choco Cooky is the property of Samsung.&lt;/li&gt; &#xA;  &lt;li&gt;I don&#39;t have any rights to redistribute these, but I&#39;m posting them anyways because #yolo.&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;/font&gt;</summary>
  </entry>
  <entry>
    <title>godly-devotion/MochiDiffusion</title>
    <updated>2023-01-08T02:07:24Z</updated>
    <id>tag:github.com,2023-01-08:/godly-devotion/MochiDiffusion</id>
    <link href="https://github.com/godly-devotion/MochiDiffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run Stable Diffusion on Mac natively&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;256&#34; src=&#34;https://github.com/godly-devotion/MochiDiffusion/raw/main/Mochi Diffusion/Resources/Assets.xcassets/AppIcon.appiconset/AppIcon.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Mochi Diffusion&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Run Stable Diffusion on Mac natively&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/raw/main/README.md&#34;&gt;English&lt;/a&gt;, &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/raw/main/README.ko.md&#34;&gt;한국어&lt;/a&gt;, &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/raw/main/README.zh-Hans.md&#34;&gt;中文&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/godly-devotion/MochiDiffusion/main/.github/images/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This app uses &lt;a href=&#34;https://github.com/apple/ml-stable-diffusion&#34;&gt;Apple&#39;s Core ML Stable Diffusion implementation&lt;/a&gt; to achieve maximum performance and speed on Apple Silicon based Macs while reducing memory requirements. It also runs on Intel based Macs too.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extremely fast and memory efficient (~150MB with Neural Engine)&lt;/li&gt; &#xA; &lt;li&gt;Runs well on all Apple Silicon Macs by fully utilizing Neural Engine&lt;/li&gt; &#xA; &lt;li&gt;Generate images locally and completely offline&lt;/li&gt; &#xA; &lt;li&gt;Generated images are saved with prompt info inside EXIF metadata&lt;/li&gt; &#xA; &lt;li&gt;Convert generated images to high resolution (using RealESRGAN)&lt;/li&gt; &#xA; &lt;li&gt;Use custom Stable Diffusion Core ML models&lt;/li&gt; &#xA; &lt;li&gt;No worries about pickled models&lt;/li&gt; &#xA; &lt;li&gt;macOS native app using SwiftUI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest version from the &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;When using a model for the very first time, it may take up to 30 seconds for the Neural Engine to compile a cached version. Afterwards, subsequent generations will be much faster.&lt;/p&gt; &#xA;&lt;h2&gt;Compute Unit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CPU &amp;amp; Neural Engine&lt;/code&gt; provides a good balance between speed and low memory usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CPU &amp;amp; GPU&lt;/code&gt; may be faster on M1 Max, Ultra and later but will use more memory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Depending on the option chosen, you will need to use the correct model version (see Models section for details).&lt;/p&gt; &#xA;&lt;p&gt;Intel Macs uses &lt;code&gt;CPU &amp;amp; GPU&lt;/code&gt; as it doesn&#39;t have Neural Engine.&lt;/p&gt; &#xA;&lt;h2&gt;Models&lt;/h2&gt; &#xA;&lt;p&gt;You will need to convert or download Core ML models in order to use Mochi Diffusion.&lt;/p&gt; &#xA;&lt;p&gt;A few models have been converted and uploaded &lt;a href=&#34;https://huggingface.co/godly-devotion&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/ml-stable-diffusion#-converting-models-to-core-ml&#34;&gt;Convert&lt;/a&gt; or download Core ML models &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;split_einsum&lt;/code&gt; version is compatible with all compute unit options including Neural Engine&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;original&lt;/code&gt; version is only compatible with &lt;code&gt;CPU &amp;amp; GPU&lt;/code&gt; option&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;By default, the app&#39;s working directory will be created under the Documents folder. This location can be customized under Settings&lt;/li&gt; &#xA; &lt;li&gt;In the working folder, create a new folder with the name you&#39;d like displayed in the app then move or extract the converted models here&lt;/li&gt; &#xA; &lt;li&gt;Your directory should look like this: &lt;code&gt;~/Documents/MochiDiffusion/models/[Model Folder Name]/[Model&#39;s Files]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple Silicon (M1 and later) or Intel Mac (high performance CPU &amp;amp; GPU required)&lt;/li&gt; &#xA; &lt;li&gt;macOS Ventura 13.1 and later&lt;/li&gt; &#xA; &lt;li&gt;Xcode 14.2 (to build)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;p&gt;All generation happens locally and absolutely nothing is sent to the cloud.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Mochi Diffusion is always looking for contributions, whether it&#39;s through bug reports, code, or new translations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you find a bug, or would like to suggest a new feature or enhancement, try &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/discussions&#34;&gt;searching for your problem first&lt;/a&gt; as it helps avoid duplicates. If you can&#39;t find your issue, feel free to &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/discussions/new&#34;&gt;create a new discussion&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re looking to contribute code, feel free to &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/pulls&#34;&gt;open a Pull Request&lt;/a&gt; or &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/discussions&#34;&gt;create a new discussion&lt;/a&gt; to talk about it first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;d like to translate Mochi Diffusion to your language, please visit the &lt;a href=&#34;https://crowdin.com/project/mochi-diffusion&#34;&gt;project page on Crowdin&lt;/a&gt;. You can create an account for free and start translating and/or approving. If you want to translate Mochi Diffusion into a new language that is currently not in the list, &lt;a href=&#34;https://github.com/godly-devotion/MochiDiffusion/discussions&#34;&gt;create a new discussion&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/ml-stable-diffusion&#34;&gt;Apple&#39;s Core ML Stable Diffusion implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/swift-coreml-diffusers&#34;&gt;HuggingFace&#39;s Swift UI sample implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;App Icon by &lt;a href=&#34;https://github.com/Zabriskije&#34;&gt;Zabriskije&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>aheze/Popovers</title>
    <updated>2023-01-08T02:07:24Z</updated>
    <id>tag:github.com,2023-01-08:/aheze/Popovers</id>
    <link href="https://github.com/aheze/Popovers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library to present popovers. Simple, modern, and highly customizable. Not boring!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/Header.png&#34; alt=&#34;Header Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Popovers&lt;/h1&gt; &#xA;&lt;p&gt;A library to present popovers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Present &lt;strong&gt;any&lt;/strong&gt; view above your app&#39;s main content.&lt;/li&gt; &#xA; &lt;li&gt;Attach to source views or use picture-in-picture positioning.&lt;/li&gt; &#xA; &lt;li&gt;Display multiple popovers at the same time with smooth transitions.&lt;/li&gt; &#xA; &lt;li&gt;Supports SwiftUI, UIKit, and multitasking windows on iPadOS.&lt;/li&gt; &#xA; &lt;li&gt;Highly customizable API that&#39;s super simple — just add &lt;code&gt;.popover&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Drop-in replacement for iOS 14&#39;s &lt;code&gt;Menu&lt;/code&gt; that works on iOS 13.&lt;/li&gt; &#xA; &lt;li&gt;SwiftUI-based core for a lightweight structure. 0 dependencies.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s 2022 — about time that popovers got interesting!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showroom&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; Alert &lt;/td&gt; &#xA;   &lt;td&gt; Color &lt;/td&gt; &#xA;   &lt;td&gt; Menu &lt;/td&gt; &#xA;   &lt;td&gt; Tip &lt;/td&gt; &#xA;   &lt;td&gt; Standard &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Alert.gif&#34; alt=&#34;Alert&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Color.gif&#34; alt=&#34;Color&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Menu.gif&#34; alt=&#34;Menu&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Tip.gif&#34; alt=&#34;Tip&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Standard.gif&#34; alt=&#34;Standard&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; Tutorial &lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; Picture-in-Picture &lt;/td&gt; &#xA;   &lt;td&gt; Notification &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Tutorial.gif&#34; alt=&#34;Tutorial&#34;&gt; &lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/PIP.gif&#34; alt=&#34;Picture in Picture&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/GIFs/Notification.gif&#34; alt=&#34;Notification&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Includes ~20 popover examples. &lt;a href=&#34;https://github.com/aheze/Popovers/tree/main/Examples&#34;&gt;Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/ExampleApp.png&#34; alt=&#34;Example app&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requires iOS 13+. Popovers can be installed through the &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app&#34;&gt;Swift Package Manager&lt;/a&gt; (recommended) or &lt;a href=&#34;https://cocoapods.org/&#34;&gt;Cocoapods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; Swift Package Manager &lt;/strong&gt; &lt;br&gt; Add the Package URL: &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; Cocoapods &lt;/strong&gt; &lt;br&gt; Add this to your Podfile: &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code&gt;https://github.com/aheze/Popovers&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code&gt;pod &#39;Popovers&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To present a popover in SwiftUI, use the &lt;code&gt;.popover(present:attributes:view)&lt;/code&gt; modifier. By default, the popover uses its parent view as the source frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import Popovers&#xA;&#xA;struct ContentView: View {&#xA;    @State var present = false&#xA;    &#xA;    var body: some View {&#xA;        Button(&#34;Present popover!&#34;) {&#xA;            present = true&#xA;        }&#xA;        .popover(present: $present) { /// here!&#xA;            Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;                .padding()&#xA;                .foregroundColor(.white)&#xA;                .background(.blue)&#xA;                .cornerRadius(16)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In UIKit, create a &lt;code&gt;Popover&lt;/code&gt; instance, then present with &lt;code&gt;UIViewController.present(_:)&lt;/code&gt;. You should also set the source frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import Popovers&#xA;&#xA;class ViewController: UIViewController {&#xA;    @IBOutlet weak var button: UIButton!&#xA;    @IBAction func buttonPressed(_ sender: Any) {&#xA;        var popover = Popover { PopoverView() }&#xA;        popover.attributes.sourceFrame = { [weak button] in&#xA;            button.windowFrame()&#xA;        }&#xA;        &#xA;        present(popover) /// here!&#xA;    }&#xA;}&#xA;&#xA;struct PopoverView: View {&#xA;    var body: some View {&#xA;        Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;            .padding()&#xA;            .foregroundColor(.white)&#xA;            .background(.blue)&#xA;            .cornerRadius(16)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/UsagePopover.png&#34; width=&#34;300&#34; alt=&#34;Button &#39;Present popover!&#39; with a popover underneath.&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#tag--string&#34;&gt;🔖&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#position--position&#34;&gt;💠&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#source-frame-----cgrect&#34;&gt;⬜&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#source-frame-inset--uiedgeinsets&#34;&gt;🔲&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#screen-edge-padding--uiedgeinsets&#34;&gt;⏹&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#presentation--presentation&#34;&gt;🟩&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#dismissal--dismissal&#34;&gt;🟥&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#rubber-banding-mode--rubberbandingmode&#34;&gt;🎾&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#blocks-background-touches--bool&#34;&gt;🛑&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#accessibility--accessibility--v120&#34;&gt;👓&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#on-tap-outside-----void&#34;&gt;👉&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#on-dismiss-----void&#34;&gt;🎈&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#on-context-change--context---void&#34;&gt;🔰&lt;/a&gt; &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Customize popovers through the &lt;code&gt;Attributes&lt;/code&gt; struct. Pretty much everything is customizable, including positioning, animations, and dismissal behavior.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; SwiftUI &lt;/strong&gt; &lt;br&gt; Configure in the &lt;code&gt;attributes&lt;/code&gt; parameter. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; UIKit &lt;/strong&gt; &lt;br&gt; Modify the &lt;code&gt;attributes&lt;/code&gt; property. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.popover(&#xA;    present: $present,&#xA;    attributes: {&#xA;        $0.position = .absolute(&#xA;            originAnchor: .bottom,&#xA;            popoverAnchor: .topLeft&#xA;        )&#xA;    }&#xA;) {&#xA;    Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var popover = Popover {&#xA;    Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;}&#xA;&#xA;popover.attributes.position = .absolute(&#xA;    originAnchor: .bottom,&#xA;    popoverAnchor: .topLeft&#xA;)&#xA;&#xA;present(popover)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;🔖 Tag • &lt;code&gt;AnyHashable?&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Tag popovers to access them later from anywhere. This is useful for updating existing popovers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Set the tag.&#xA;$0.tag = &#34;Your Tag&#34;&#xA;&#xA;/// Access it later.&#xA;let popover = popover(tagged: &#34;Your Tag&#34;) /// Where `self` is a `UIView` or `UIViewController`.&#xA;&#xA;/// If inside a SwiftUI View, use a `WindowReader`:&#xA;WindowReader { window in&#xA;    let popover = window.popover(tagged: &#34;Your Tag&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When you use the &lt;code&gt;.popover(selection:tag:attributes:view:)&lt;/code&gt; modifier, this &lt;code&gt;tag&lt;/code&gt; is automatically set to what you provide in the parameter.&lt;/p&gt; &#xA;&lt;h3&gt;💠 Position • &lt;code&gt;Position&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The popover&#39;s position can either be &lt;code&gt;.absolute&lt;/code&gt; (attached to a view) or &lt;code&gt;.relative&lt;/code&gt; (picture-in-picture). The enum&#39;s associated value additionally configures which sides and corners are used.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Anchor&lt;/code&gt;s represent sides and corners.&lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;.absolute&lt;/code&gt;, provide the origin anchor and popover anchor.&lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;.relative&lt;/code&gt;, provide the popover anchors. If there&#39;s multiple, the user will be able to drag between them like a PIP.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Anchor Reference&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;.absolute(originAnchor: .bottom, popoverAnchor: .topLeft)&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;.relative(popoverAnchors: [.right])&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/Anchors.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/Absolute.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/Relative.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;⬜ Source Frame • &lt;code&gt;(() -&amp;gt; CGRect)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is the frame that the popover attaches to or is placed within, depending on its position. This must be in global window coordinates. Because frames are can change so often, this property is a closure. Whenever the device rotates or some other bounds update happens, the closure will be called.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; SwiftUI &lt;/strong&gt; &lt;br&gt; By default, the source frame is automatically set to the parent view. Setting this will override it. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; UIKit &lt;/strong&gt; &lt;br&gt; It&#39;s highly recommended to provide a source frame, otherwise the popover will appear in the top-left of the screen. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;$0.sourceFrame = {&#xA;    /** some CGRect here */&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt; /// use `weak` to prevent a retain cycle&#xA;attributes.sourceFrame = { [weak button] in&#xA;    button.windowFrame()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;🔲 Source Frame Inset • &lt;code&gt;UIEdgeInsets&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Edge insets to apply to the source frame. Positive values inset the frame, negative values expand it.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Absolute&lt;/th&gt; &#xA;   &lt;th&gt;Relative&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/SourceFrameInsetAbsolute.png&#34; alt=&#34;Source view has padding around it, so the popover is offset down.&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/SourceFrameInsetRelative.png&#34; alt=&#34;Source view is inset, so the popover is brought more towards the center of the screen.&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;⏹ Screen Edge Padding • &lt;code&gt;UIEdgeInsets&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Global insets for all popovers to prevent them from overflowing off the screen. Kind of like a safe area. Default value is &lt;code&gt;UIEdgeInsets(top: 16, left: 16, bottom: 16, right: 16)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🟩 Presentation • &lt;code&gt;Presentation&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This property stores the animation and transition that&#39;s applied when the popover appears.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Default values:&#xA;$0.presentation.animation = .easeInOut&#xA;$0.presentation.transition = .opacity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🟥 Dismissal • &lt;code&gt;Dismissal&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This property stores the popover&#39;s dismissal behavior. There&#39;s a couple sub-properties here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Same thing as `Presentation`.&#xA;$0.dismissal.animation = .easeInOut&#xA;$0.dismissal.transition = .opacity&#xA;&#xA;/// Advanced stuff! Here&#39;s their default values:&#xA;$0.dismissal.mode = .tapOutside&#xA;$0.dismissal.tapOutsideIncludesOtherPopovers = false&#xA;$0.dismissal.excludedFrames = { [] }&#xA;$0.dismissal.dragMovesPopoverOffScreen = true&#xA;$0.dismissal.dragDismissalProximity = CGFloat(0.25)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mode:&lt;/strong&gt; Configure how the popover should auto-dismiss. You can have multiple at the same time!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.tapOutside&lt;/code&gt; - dismiss the popover when the user taps outside it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.dragDown&lt;/code&gt; - dismiss the popover when the user drags it down.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.dragUp&lt;/code&gt; - dismiss the popover when the user drags it up.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.none&lt;/code&gt; - don&#39;t automatically dismiss the popover.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tap Outside Includes Other Popovers:&lt;/strong&gt; Only applies when &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;.tapOutside&lt;/code&gt;. If this is enabled, the popover will be dismissed when the user taps outside, &lt;strong&gt;even when another presented popover is what&#39;s tapped&lt;/strong&gt;. Normally when you tap another popover that&#39;s presented, the current one will not dismiss.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Excluded Frames:&lt;/strong&gt; Only applies when &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;.tapOutside&lt;/code&gt;. When the user taps outside the popover, but the tap lands on one of these frames, the popover will stay presented. If you want multiple popovers, you should set the source frames of your other popovers as the excluded frames.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Set one popover&#39;s source frame as the other&#39;s excluded frame.&#xA;/// This prevents the the current popover from being dismissed before animating to the other one.&#xA;&#xA;let popover1 = Popover { Text(&#34;Hello&#34;) }&#xA;popover1.attributes.sourceFrame = { [weak button1] in button1.windowFrame() }&#xA;popover1.attributes.dismissal.excludedFrames = { [weak button2] in [ button2.windowFrame() ] }&#xA;&#xA;let popover2 = Popover { Text(&#34;Hello&#34;) }&#xA;popover2.attributes.sourceFrame = { [weak button2] in button2.windowFrame() }&#xA;popover2.attributes.dismissal.excludedFrames = { [weak button1] in [ button1.windowFrame() ] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Drag Moves Popover Off Screen:&lt;/strong&gt; Only applies when &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;.dragDown&lt;/code&gt; or &lt;code&gt;.dragUp&lt;/code&gt;. If this is enabled, the popover will continue moving off the screen after the user drags.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Drag Dismissal Proximity:&lt;/strong&gt; Only applies when &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;.dragDown&lt;/code&gt; or &lt;code&gt;.dragUp&lt;/code&gt;. Represents the point on the screen that the drag must reach in order to auto-dismiss. This property is multiplied by the screen&#39;s height.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/DragDismissalProximity.png&#34; width=&#34;300&#34; alt=&#34;Diagram with the top 25% of the screen highlighted in blue.&#34;&gt; &#xA;&lt;h3&gt;🎾 Rubber Banding Mode • &lt;code&gt;RubberBandingMode&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Configures which axes the popover can &#34;rubber-band&#34; on when dragged. The default is &lt;code&gt;[.xAxis, .yAxis]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.xAxis&lt;/code&gt; - enable rubber banding on the x-axis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.yAxis&lt;/code&gt; - enable rubber banding on the y-axis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.none&lt;/code&gt; - disable rubber banding.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;🛑 Blocks Background Touches • &lt;code&gt;Bool&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Set this to true to prevent underlying views from being pressed.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/BlocksBackgroundTouches.png&#34; width=&#34;300&#34; alt=&#34;Popover overlaid over some buttons. Tapping on the buttons has no effect.&#34;&gt; &#xA;&lt;h3&gt;👓 Accessibility • &lt;code&gt;Accessibility&lt;/code&gt; • &lt;a href=&#34;https://github.com/aheze/Popovers/releases/tag/1.2.0&#34;&gt;&lt;em&gt;&lt;code&gt;v1.2.0&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Popovers is fully accessible! The &lt;code&gt;Accessibility&lt;/code&gt; struct provides additional options for how VoiceOver should read out content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Default values:&#xA;$0.accessibility.shiftFocus = true&#xA;$0.accessibility.dismissButtonLabel = defaultDismissButtonLabel /// An X icon wrapped in `AnyView?`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shift Focus:&lt;/strong&gt; If enabled, VoiceOver will focus the popover as soon as it&#39;s presented.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dismiss Button Label:&lt;/strong&gt; A button next to the popover that appears when VoiceOver is on. By default, this is an &lt;kbd&gt;X&lt;/kbd&gt; circle.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/Accessibility.png&#34; width=&#34;300&#34; alt=&#34;VoiceOver highlights the popover, which has a X button next to id.&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Tip: You can also use the accessibility escape gesture (a 2-fingered Z-shape swipe) to dismiss all popovers.&lt;/p&gt; &#xA;&lt;h3&gt;👉 On Tap Outside • &lt;code&gt;(() -&amp;gt; Void)?&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A closure that&#39;s called whenever the user taps outside the popover.&lt;/p&gt; &#xA;&lt;h3&gt;🎈 On Dismiss • &lt;code&gt;(() -&amp;gt; Void)?&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A closure that&#39;s called when the popover is dismissed.&lt;/p&gt; &#xA;&lt;h3&gt;🔰 On Context Change • &lt;code&gt;((Context) -&amp;gt; Void)?&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A closure that&#39;s called whenever the context changed. The context contains the popover&#39;s attributes, current frame, and other visible traits.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Utilities&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#menus&#34;&gt;📘&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#animating-between-popovers&#34;&gt;🧩&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#background&#34;&gt;🌃&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#popover-reader&#34;&gt;📖&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#frame-tags&#34;&gt;🏷&lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/aheze/Popovers#templates&#34;&gt;📄&lt;/a&gt; &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Popovers comes with some features to make your life easier.&lt;/p&gt; &#xA;&lt;h3&gt;📘 Menus&lt;/h3&gt; &#xA;&lt;p&gt;New in &lt;a href=&#34;https://github.com/aheze/Popovers/releases/tag/1.3.0&#34;&gt;v1.3.0&lt;/a&gt;! The template &lt;code&gt;Menu&lt;/code&gt; looks and behaves pretty much exactly like the system menu, but also works on iOS 13. It&#39;s also extremely customizable with support for manual presentation and custom views.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/MenuComparison.gif&#34; width=&#34;500&#34; alt=&#34;The system menu and Popovers&#39; custom menu, side by side&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SwiftUI (Basic)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    var body: some View {&#xA;        Templates.Menu {&#xA;            Templates.MenuButton(title: &#34;Button 1&#34;, systemImage: &#34;1.circle.fill&#34;) { print(&#34;Button 1 pressed&#34;) }&#xA;            Templates.MenuButton(title: &#34;Button 2&#34;, systemImage: &#34;2.circle.fill&#34;) { print(&#34;Button 2 pressed&#34;) }&#xA;        } label: { fade in&#xA;            Text(&#34;Present Menu!&#34;)&#xA;                .opacity(fade ? 0.5 : 1)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SwiftUI (Customized)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Templates.Menu(&#xA;    configuration: {&#xA;        $0.width = 360&#xA;        $0.backgroundColor = .blue.opacity(0.2)&#xA;    }&#xA;) {&#xA;    Text(&#34;Hi, I&#39;m a menu!&#34;)&#xA;        .padding()&#xA;&#xA;    Templates.MenuDivider()&#xA;&#xA;    Templates.MenuItem {&#xA;        print(&#34;Item tapped&#34;)&#xA;    } label: { fade in&#xA;        Color.clear.overlay(&#xA;            AsyncImage(url: URL(string: &#34;https://getfind.app/image.png&#34;)) {&#xA;                $0.resizable().aspectRatio(contentMode: .fill)&#xA;            } placeholder: {&#xA;                Color.clear&#xA;            }&#xA;        )&#xA;        .frame(height: 180)&#xA;        .clipped()&#xA;        .opacity(fade ? 0.5 : 1)&#xA;    }&#xA;&#xA;} label: { fade in&#xA;    Text(&#34;Present Menu!&#34;)&#xA;        .opacity(fade ? 0.5 : 1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SwiftUI (Manual Presentation)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    @State var present = false&#xA;    var body: some View {&#xA;        VStack {&#xA;            Toggle(&#34;Activate&#34;, isOn: $present)&#xA;                .padding()&#xA;                .background(.regularMaterial)&#xA;                .cornerRadius(12)&#xA;                .padding()&#xA;            &#xA;            Templates.Menu(present: $present) {&#xA;                Templates.MenuButton(title: &#34;Button 1&#34;, systemImage: &#34;1.circle.fill&#34;) { print(&#34;Button 1 pressed&#34;) }&#xA;                Templates.MenuButton(title: &#34;Button 2&#34;, systemImage: &#34;2.circle.fill&#34;) { print(&#34;Button 2 pressed&#34;) }&#xA;            } label: { fade in&#xA;                Text(&#34;Present Menu!&#34;)&#xA;                    .opacity(fade ? 0.5 : 1)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;UIKit (Basic)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController {&#xA;    @IBOutlet var label: UILabel!&#xA;&#xA;    lazy var menu = Templates.UIKitMenu(sourceView: label) {&#xA;        Templates.MenuButton(title: &#34;Button 1&#34;, systemImage: &#34;1.circle.fill&#34;) { print(&#34;Button 1 pressed&#34;) }&#xA;        Templates.MenuButton(title: &#34;Button 2&#34;, systemImage: &#34;2.circle.fill&#34;) { print(&#34;Button 2 pressed&#34;) }&#xA;    } fadeLabel: { [weak self] fade in&#xA;        self?.label.alpha = fade ? 0.5 : 1&#xA;    }&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        _ = menu /// Create the menu.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;UIKit (Customized)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController {&#xA;    @IBOutlet var label: UILabel!&#xA;&#xA;    lazy var menu = Templates.UIKitMenu(&#xA;        sourceView: label,&#xA;        configuration: {&#xA;            $0.width = 360&#xA;            $0.backgroundColor = .blue.opacity(0.2)&#xA;        }&#xA;    ) {&#xA;        Text(&#34;Hi, I&#39;m a menu!&#34;)&#xA;            .padding()&#xA;&#xA;        Templates.MenuDivider()&#xA;&#xA;        Templates.MenuItem {&#xA;            print(&#34;Item tapped&#34;)&#xA;        } label: { fade in&#xA;            Color.clear.overlay(&#xA;                AsyncImage(url: URL(string: &#34;https://getfind.app/image.png&#34;)) {&#xA;                    $0.resizable().aspectRatio(contentMode: .fill)&#xA;                } placeholder: {&#xA;                    Color.clear&#xA;                }&#xA;            )&#xA;            .frame(height: 180)&#xA;            .clipped()&#xA;            .opacity(fade ? 0.5 : 1)&#xA;        }&#xA;    } fadeLabel: { [weak self] fade in&#xA;        UIView.animate(withDuration: 0.15) {&#xA;            self?.label.alpha = fade ? 0.5 : 1&#xA;        }&#xA;    }&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        _ = menu /// Create the menu.&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;UIKit (Manual Presentation)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class ViewController: UIViewController {&#xA;    /// ...&#xA;&#xA;    @IBAction func switchPressed(_ sender: UISwitch) {&#xA;        if menu.isPresented {&#xA;            menu.dismiss()&#xA;        } else {&#xA;            menu.present()&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Basic&lt;/th&gt; &#xA;   &lt;th&gt;Customized&lt;/th&gt; &#xA;   &lt;th&gt;Manual Presentation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/MenuBasic.png&#34; alt=&#34;Menu with 2 buttons&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/MenuCustomized.png&#34; alt=&#34;Menu with image and divider&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/MenuManual.png&#34; alt=&#34;Manually activate the menu with a toggle switch&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;🧩 Animating Between Popovers&lt;/h3&gt; &#xA;&lt;p&gt;As long as the view structure is the same, you can smoothly transition from one popover to another.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; SwiftUI &lt;/strong&gt; &lt;br&gt; Use the &lt;code&gt;.popover(selection:tag:attributes:view:)&lt;/code&gt; modifier. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; UIKit &lt;/strong&gt; &lt;br&gt; Get the existing popover using &lt;code&gt;UIResponder.popover(tagged:)&lt;/code&gt;, then call &lt;code&gt;UIResponder.replace(_:with:)&lt;/code&gt;. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    @State var selection: String?&#xA;    &#xA;    var body: some View {&#xA;        HStack {&#xA;            Button(&#34;Present First Popover&#34;) { selection = &#34;1&#34; }&#xA;            .popover(selection: $selection, tag: &#34;1&#34;) {&#xA;&#xA;                /// Will be presented when selection == &#34;1&#34;.&#xA;                Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;                    .background(.blue)&#xA;            }&#xA;            &#xA;            Button(&#34;Present Second Popover&#34;) { selection = &#34;2&#34; }&#xA;            .popover(selection: $selection, tag: &#34;2&#34;) {&#xA;&#xA;                /// Will be presented when selection == &#34;2&#34;.&#xA;                Text(&#34;Hi, I&#39;m a popover.&#34;)&#xA;                    .background(.green)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@IBAction func button1Pressed(_ sender: Any) {&#xA;    var newPopover = Popover { Text(&#34;Hi, I&#39;m a popover.&#34;).background(.blue) }&#xA;    newPopover.attributes.sourceFrame = { [weak button1] in button1.windowFrame() }&#xA;    newPopover.attributes.dismissal.excludedFrames = { [weak button2] in [button2.windowFrame()] }&#xA;    newPopover.attributes.tag = &#34;Popover 1&#34;&#xA;    &#xA;    if let oldPopover = popover(tagged: &#34;Popover 2&#34;) {&#xA;        replace(oldPopover, with: newPopover)&#xA;    } else {&#xA;        present(newPopover) /// Present if the old popover doesn&#39;t exist.&#xA;    }&#xA;}&#xA;@IBAction func button2Pressed(_ sender: Any) {&#xA;    var newPopover = Popover { Text(&#34;Hi, I&#39;m a popover.&#34;).background(.green) }&#xA;    newPopover.attributes.sourceFrame = { [weak button2] in button2.windowFrame() }&#xA;    newPopover.attributes.dismissal.excludedFrames = { [weak button1] in [button1.windowFrame()] }&#xA;    newPopover.attributes.tag = &#34;Popover 2&#34;&#xA;    &#xA;    if let oldPopover = popover(tagged: &#34;Popover 1&#34;) {&#xA;        replace(oldPopover, with: newPopover)&#xA;    } else {&#xA;        present(newPopover)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/AnimatingBetweenPopovers.gif&#34; width=&#34;300&#34; alt=&#34;Smooth transition between popovers (from blue to green and back.&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;🌃 Background&lt;/h3&gt; &#xA;&lt;p&gt;You can put anything in a popover&#39;s background.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; SwiftUI &lt;/strong&gt; &lt;br&gt; Use the &lt;code&gt;.popover(present:attributes:view:background:)&lt;/code&gt; modifier. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; UIKit &lt;/strong&gt; &lt;br&gt; Use the &lt;code&gt;Popover(attributes:view:background:)&lt;/code&gt; initializer. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.popover(present: $present) {&#xA;    PopoverView()&#xA;} background: { /// here!&#xA;    Color.green.opacity(0.5)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var popover = Popover {&#xA;    PopoverView()&#xA;} background: { /// here!&#xA;    Color.green.opacity(0.5)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/PopoverBackground.png&#34; width=&#34;200&#34; alt=&#34;Green background over the entire screen, but underneath the popover&#34;&gt; &#xA;&lt;h3&gt;📖 Popover Reader&lt;/h3&gt; &#xA;&lt;p&gt;This reads the popover&#39;s context, which contains its frame, window, attributes, and various other properties. It&#39;s kind of like &lt;a href=&#34;https://www.hackingwithswift.com/quick-start/swiftui/how-to-provide-relative-sizes-using-geometryreader&#34;&gt;&lt;code&gt;GeometryReader&lt;/code&gt;&lt;/a&gt;, but cooler. You can put it in the popover&#39;s view or its background.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.popover(present: $present) {&#xA;    PopoverView()&#xA;} background: {&#xA;    PopoverReader { context in&#xA;        Path {&#xA;            $0.move(to: context.frame.point(at: .bottom))&#xA;            $0.addLine(to: context.windowBounds.point(at: .bottom))&#xA;        }&#xA;        .stroke(Color.blue, lineWidth: 4)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Assets/PopoverReader.gif&#34; width=&#34;200&#34; alt=&#34;Line connects the bottom of the popover with the bottom of the screen&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;🏷 Frame Tags&lt;/h3&gt; &#xA;&lt;p&gt;Popovers includes a mechanism for tagging and reading SwiftUI view frames. You can use this to provide a popover&#39;s &lt;code&gt;sourceFrame&lt;/code&gt; or &lt;code&gt;excludedFrames&lt;/code&gt;. Also works great when combined with &lt;code&gt;PopoverReader&lt;/code&gt;, for connecting lines with anchor views.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;This is a view&#34;)&#xA;    .frameTag(&#34;Your Tag Name&#34;) /// Adds a tag inside the window.&#xA;&#xA;/// ...&#xA;&#xA;WindowReader { window in&#xA;    Text(&#34;Click me!&#34;)&#xA;    .popover(&#xA;        present: $present,&#xA;        attributes: {&#xA;            $0.sourceFrame = window.frameTagged(&#34;Your Tag Name&#34;) /// Retrieves a tag from the window.&#xA;        }&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;📄 Templates&lt;/h3&gt; &#xA;&lt;p&gt;Get started quickly with some templates. All of them are inside &lt;a href=&#34;https://raw.githubusercontent.com/aheze/Popovers/main/Sources/Templates&#34;&gt;&lt;code&gt;Templates&lt;/code&gt;&lt;/a&gt; with example usage in the example app.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AlertButtonStyle&lt;/code&gt; - a button style resembling a system alert.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;VisualEffectView&lt;/code&gt; - lets you use UIKit blurs in SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Container&lt;/code&gt; - a wrapper view for the &lt;code&gt;BackgroundWithArrow&lt;/code&gt; shape.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shadow&lt;/code&gt; - an easier way to apply shadows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BackgroundWithArrow&lt;/code&gt; - a shape with an arrow that looks like the system popover.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CurveConnector&lt;/code&gt; - an animatable shape with endpoints that you can set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Menu&lt;/code&gt; - the system menu, but built from scratch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;h3&gt;State Re-Rendering&lt;/h3&gt; &#xA;&lt;p&gt;If you directly pass a variable down to the popover&#39;s view, it might not update. Instead, move the view into its own struct and pass down a &lt;code&gt;Binding&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt; Yes &lt;/strong&gt; &lt;br&gt; The popover&#39;s view is in a separate struct, with &lt;code&gt;$string&lt;/code&gt; passed down. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;strong&gt; No &lt;/strong&gt; &lt;br&gt; The button is directly inside the &lt;code&gt;view&lt;/code&gt; parameter and receives &lt;code&gt;string&lt;/code&gt;. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    @State var present = false&#xA;    @State var string = &#34;Hello, I&#39;m a popover.&#34;&#xA;&#xA;    var body: some View {&#xA;        Button(&#34;Present popover!&#34;) { present = true }&#xA;        .popover(present: $present) {&#xA;            PopoverView(string: $string) /// Pass down a Binding ($).&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;/// Create a separate view to ensure that the button updates.&#xA;struct PopoverView: View {&#xA;    @Binding var string: String&#xA;&#xA;    var body: some View {&#xA;        Button(string) { string = &#34;The string changed.&#34; }&#xA;        .background(.mint)&#xA;        .cornerRadius(16)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;br&gt; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    @State var present = false&#xA;    @State var string = &#34;Hello, I&#39;m a popover.&#34;&#xA;&#xA;    var body: some View {&#xA;        Button(&#34;Present popover!&#34;) {&#xA;            present = true&#xA;        }&#xA;        .popover(present: $present) {&#xA;&#xA;            /// Directly passing down the variable (without $) is unsupported.&#xA;            /// The button might not update.&#xA;            Button(string) { &#xA;                string = &#34;The string changed.&#34;&#xA;            }&#xA;            .background(.mint)&#xA;            .cornerRadius(16)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Supporting Multiple Screens • &lt;a href=&#34;https://github.com/aheze/Popovers/releases/tag/1.1.0&#34;&gt;&lt;em&gt;&lt;code&gt;v1.1.0&lt;/code&gt;&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Popovers comes with built-in support for multiple screens, but retrieving frame tags requires a reference to the hosting window. You can get this via &lt;code&gt;WindowReader&lt;/code&gt; or &lt;code&gt;PopoverReader&lt;/code&gt;&#39;s context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;WindowReader { window in &#xA;&#xA;}&#xA;&#xA;/// If inside a popover&#39;s `view` or `background`, use `PopoverReader` instead.&#xA;PopoverReader { context in&#xA;    let window = context.window&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Popover Hierarchy&lt;/h3&gt; &#xA;&lt;p&gt;Manage a popover&#39;s z-axis level by attaching &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/view/zindex(_:)&#34;&gt;&lt;code&gt;.zIndex(_:)&lt;/code&gt;&lt;/a&gt; to its view. A higher index will bring it forwards.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Author&lt;/th&gt; &#xA;   &lt;th&gt;Contributing&lt;/th&gt; &#xA;   &lt;th&gt;Need Help?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Popovers is made by &lt;a href=&#34;https://github.com/aheze&#34;&gt;aheze&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;All contributions are welcome. Just &lt;a href=&#34;https://github.com/aheze/Popovers/fork&#34;&gt;fork&lt;/a&gt; the repo, then make a pull request.&lt;/td&gt; &#xA;   &lt;td&gt;Open an &lt;a href=&#34;https://github.com/aheze/Popovers/issues&#34;&gt;issue&lt;/a&gt; or join the &lt;a href=&#34;https://discord.com/invite/Pmq8fYcus2&#34;&gt;Discord server&lt;/a&gt;. You can also ping me on &lt;a href=&#34;https://twitter.com/aheze0&#34;&gt;Twitter&lt;/a&gt;. Or read the source code — there&#39;s lots of comments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Apps Using Popovers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://getfind.app&#34;&gt;Find&lt;/a&gt; is an app that lets you find text in real life. Popovers is used for the quick tips and as a replacements for menus — download to check it out!&lt;/p&gt; &#xA;&lt;a href=&#34;http://getfind.app&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aheze/OpenFind/main/Assets/v3%20Thumbnail.jpg&#34; height=&#34;300&#34; alt=&#34;Find App&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;If you have an app that uses Popovers, just make a PR or &lt;a href=&#34;https://twitter.com/aheze0&#34;&gt;message me&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2023 A. Zheng&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/7b2a5202040079bf91e27a5195d30e8ebd06dd06.svg?sanitize=true&#34; alt=&#34;Stats&#34; title=&#34;Stats&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>