<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T02:25:32Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>onevcat/Kingfisher</title>
    <updated>2022-06-26T02:25:32Z</updated>
    <id>tag:github.com,2022-06-26:/onevcat/Kingfisher</id>
    <link href="https://github.com/onevcat/Kingfisher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight, pure-Swift library for downloading and caching images from the web.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/onevcat/Kingfisher/master/images/logo.png&#34; alt=&#34;Kingfisher&#34; title=&#34;Kingfisher&#34; width=&#34;557&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/onevcat/Kingfisher/actions?query=workflow%3Abuild&#34;&gt;&lt;img src=&#34;https://github.com/onevcat/kingfisher/workflows/build/badge.svg?branch=master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/onevcat/Kingfisher/master/documentation/kingfisher&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-Doc-DE5C43.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Kingfisher&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Kingfisher.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/onevcat/Kingfisher/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Kingfisher.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/onevcat/Kingfisher/master/documentation/kingfisher&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Kingfisher.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Kingfisher is a powerful, pure-Swift library for downloading and caching images from the web. It provides you a chance to use a pure-Swift way to work with remote images in your next app.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Asynchronous image downloading and caching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Loading image from either &lt;code&gt;URLSession&lt;/code&gt;-based networking or local provided data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Useful image processors and filters provided.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple-layer hybrid cache for both memory and disk.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fine control on cache behavior. Customizable expiration date and size limit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cancelable downloading and auto-reusing previous downloaded content to improve performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Independent components. Use the downloader, caching system, and image processors separately as you need.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prefetching images and showing them from the cache to boost your app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; View extensions for &lt;code&gt;UIImageView&lt;/code&gt;, &lt;code&gt;NSImageView&lt;/code&gt;, &lt;code&gt;NSButton&lt;/code&gt; and &lt;code&gt;UIButton&lt;/code&gt; to directly set an image from a URL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built-in transition animation when setting images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customizable placeholder and indicator while loading images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extensible image processing and image format easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Low Data Mode support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SwiftUI support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Kingfisher 101&lt;/h3&gt; &#xA;&lt;p&gt;The simplest use-case is setting an image to an image view with the &lt;code&gt;UIImageView&lt;/code&gt; extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Kingfisher&#xA;&#xA;let url = URL(string: &#34;https://example.com/image.png&#34;)&#xA;imageView.kf.setImage(with: url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kingfisher will download the image from &lt;code&gt;url&lt;/code&gt;, send it to both memory cache and disk cache, and display it in &lt;code&gt;imageView&lt;/code&gt;. When you set it with the same URL later, the image will be retrieved from the cache and shown immediately.&lt;/p&gt; &#xA;&lt;p&gt;It also works if you use SwiftUI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var body: some View {&#xA;    KFImage(URL(string: &#34;https://example.com/image.png&#34;)!)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;A More Advanced Example&lt;/h3&gt; &#xA;&lt;p&gt;With the powerful options, you can do hard tasks with Kingfisher in a simple way. For example, the code below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Downloads a high-resolution image.&lt;/li&gt; &#xA; &lt;li&gt;Downsamples it to match the image view size.&lt;/li&gt; &#xA; &lt;li&gt;Makes it round cornered with a given radius.&lt;/li&gt; &#xA; &lt;li&gt;Shows a system indicator and a placeholder image while downloading.&lt;/li&gt; &#xA; &lt;li&gt;When prepared, it animates the small thumbnail image with a &#34;fade in&#34; effect.&lt;/li&gt; &#xA; &lt;li&gt;The original large image is also cached to disk for later use, to get rid of downloading it again in a detail view.&lt;/li&gt; &#xA; &lt;li&gt;A console log is printed when the task finishes, either for success or failure.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let url = URL(string: &#34;https://example.com/high_resolution_image.png&#34;)&#xA;let processor = DownsamplingImageProcessor(size: imageView.bounds.size)&#xA;             |&amp;gt; RoundCornerImageProcessor(cornerRadius: 20)&#xA;imageView.kf.indicatorType = .activity&#xA;imageView.kf.setImage(&#xA;    with: url,&#xA;    placeholder: UIImage(named: &#34;placeholderImage&#34;),&#xA;    options: [&#xA;        .processor(processor),&#xA;        .scaleFactor(UIScreen.main.scale),&#xA;        .transition(.fade(1)),&#xA;        .cacheOriginalImage&#xA;    ])&#xA;{&#xA;    result in&#xA;    switch result {&#xA;    case .success(let value):&#xA;        print(&#34;Task done for: \(value.source.url?.absoluteString ?? &#34;&#34;)&#34;)&#xA;    case .failure(let error):&#xA;        print(&#34;Job failed: \(error.localizedDescription)&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is a common situation I can meet in my daily work. Think about how many lines you need to write without Kingfisher!&lt;/p&gt; &#xA;&lt;h3&gt;Method Chaining&lt;/h3&gt; &#xA;&lt;p&gt;If you are not a fan of the &lt;code&gt;kf&lt;/code&gt; extension, you can also prefer to use the &lt;code&gt;KF&lt;/code&gt; builder and chained the method invocations. The code below is doing the same thing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Use `kf` extension&#xA;imageView.kf.setImage(&#xA;    with: url,&#xA;    placeholder: placeholderImage,&#xA;    options: [&#xA;        .processor(processor),&#xA;        .loadDiskFileSynchronously,&#xA;        .cacheOriginalImage,&#xA;        .transition(.fade(0.25)),&#xA;        .lowDataMode(.network(lowResolutionURL))&#xA;    ],&#xA;    progressBlock: { receivedSize, totalSize in&#xA;        // Progress updated&#xA;    },&#xA;    completionHandler: { result in&#xA;        // Done&#xA;    }&#xA;)&#xA;&#xA;// Use `KF` builder&#xA;KF.url(url)&#xA;  .placeholder(placeholderImage)&#xA;  .setProcessor(processor)&#xA;  .loadDiskFileSynchronously()&#xA;  .cacheMemoryOnly()&#xA;  .fade(duration: 0.25)&#xA;  .lowDataModeSource(.network(lowResolutionURL))&#xA;  .onProgress { receivedSize, totalSize in  }&#xA;  .onSuccess { result in  }&#xA;  .onFailure { error in }&#xA;  .set(to: imageView)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And even better, if later you want to switch to SwiftUI, just change the &lt;code&gt;KF&lt;/code&gt; above to &lt;code&gt;KFImage&lt;/code&gt;, and you&#39;ve done:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ContentView: View {&#xA;    var body: some View {&#xA;        KFImage.url(url)&#xA;          .placeholder(placeholderImage)&#xA;          .setProcessor(processor)&#xA;          .loadDiskFileSynchronously()&#xA;          .cacheMemoryOnly()&#xA;          .fade(duration: 0.25)&#xA;          .lowDataModeSource(.network(lowResolutionURL))&#xA;          .onProgress { receivedSize, totalSize in  }&#xA;          .onSuccess { result in  }&#xA;          .onFailure { error in }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Learn More&lt;/h3&gt; &#xA;&lt;p&gt;To learn the use of Kingfisher by more examples, take a look at the well-prepared &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet&#34;&gt;Cheat Sheet&lt;/a&gt;. There we summarized the most common tasks in Kingfisher, you can get a better idea of what this framework can do. There are also some performance tips, remember to check them too.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 12.0+ / macOS 10.14+ / tvOS 12.0+ / watchOS 5.0+ (if you use only UIKit/AppKit)&lt;/li&gt; &#xA; &lt;li&gt;iOS 14.0+ / macOS 11.0+ / tvOS 14.0+ / watchOS 7.0+ (if you use it in SwiftUI)&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you need support from iOS 10 (UIKit/AppKit) or iOS 13 (SwiftUI), use Kingfisher version 6.x. But it won&#39;t work with Xcode 13.0 and Xcode 13.1 &lt;a href=&#34;https://github.com/onevcat/Kingfisher/issues/1802&#34;&gt;#1802&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you need to use Xcode 13.0 and 13.1 but cannot upgrade to v7, use the &lt;code&gt;version6-xcode13&lt;/code&gt; branch. However, you have to drop iOS 10 support due to another Xcode 13 bug.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;UIKit&lt;/th&gt; &#xA;    &lt;th&gt;SwiftUI&lt;/th&gt; &#xA;    &lt;th&gt;Xcode&lt;/th&gt; &#xA;    &lt;th&gt;Kingfisher&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;iOS 10+&lt;/td&gt; &#xA;    &lt;td&gt;iOS 13+&lt;/td&gt; &#xA;    &lt;td&gt;12&lt;/td&gt; &#xA;    &lt;td&gt;~&amp;gt; 6.3.1&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;iOS 11+&lt;/td&gt; &#xA;    &lt;td&gt;iOS 13+&lt;/td&gt; &#xA;    &lt;td&gt;13&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;version6-xcode13&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;iOS 12+&lt;/td&gt; &#xA;    &lt;td&gt;iOS 14+&lt;/td&gt; &#xA;    &lt;td&gt;13&lt;/td&gt; &#xA;    &lt;td&gt;~&amp;gt; 7.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;A detailed guide for installation can be found in &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Installation-Guide&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;https://github.com/onevcat/Kingfisher.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Up to Next Major&#34; with &#34;7.0.0&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;12.0&#39;&#xA;use_frameworks!&#xA;&#xA;target &#39;MyApp&#39; do&#xA;  pod &#39;Kingfisher&#39;, &#39;~&amp;gt; 7.0&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;onevcat/Kingfisher&#34; ~&amp;gt; 7.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Migrating&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-7.0-Migration-Guide&#34;&gt;Kingfisher 7.0 Migration&lt;/a&gt; - Kingfisher 7.x is NOT fully compatible with the previous version. However, changes should be trivial or not required at all. Please follow the &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-7.0-Migration-Guide&#34;&gt;migration guide&lt;/a&gt; when you prepare to upgrade Kingfisher in your project.&lt;/p&gt; &#xA;&lt;p&gt;If you are using an even earlier version, see the guides below to know the steps for migrating.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-6.0-Migration-Guide&#34;&gt;Kingfisher 6.0 Migration&lt;/a&gt; - Kingfisher 6.x is NOT fully compatible with the previous version. However, migration is not difficult. Depending on your use cases, it may take no effect or several minutes to modify your existing code for the new version. Please follow the &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-6.0-Migration-Guide&#34;&gt;migration guide&lt;/a&gt; when you prepare to upgrade Kingfisher in your project.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-5.0-Migration-Guide&#34;&gt;Kingfisher 5.0 Migration&lt;/a&gt; - If you are upgrading to Kingfisher 5.x from 4.x, please read this for more information.&lt;/li&gt; &#xA;  &lt;li&gt;Kingfisher 4.0 Migration - Kingfisher 3.x should be source compatible to Kingfisher 4. The reason for a major update is that we need to specify the Swift version explicitly for Xcode. All deprecated methods in Kingfisher 3 were removed, so please ensure you have no warning left before you migrate from Kingfisher 3 with Kingfisher 4. If you have any trouble when migrating, please open an issue to discuss.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Kingfisher-3.0-Migration-Guide&#34;&gt;Kingfisher 3.0 Migration&lt;/a&gt; - If you are upgrading to Kingfisher 3.x from an earlier version, please read this for more information.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;We prepared a &lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki&#34;&gt;wiki page&lt;/a&gt;. You can find tons of useful things there.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Installation-Guide&#34;&gt;Installation Guide&lt;/a&gt; - Follow it to integrate Kingfisher into your project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet&#34;&gt;Cheat Sheet&lt;/a&gt;- Curious about what Kingfisher could do and how would it look like when used in your project? See this page for useful code snippets. If you are already familiar with Kingfisher, you could also learn new tricks to improve the way you use Kingfisher!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftpackageindex.com/onevcat/Kingfisher/master/documentation/kingfisher&#34;&gt;API Reference&lt;/a&gt; - Lastly, please remember to read the full API reference whenever you need more detailed documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;h3&gt;Future of Kingfisher&lt;/h3&gt; &#xA;&lt;p&gt;I want to keep Kingfisher lightweight. This framework focuses on providing a simple solution for downloading and caching images. This doesn’t mean the framework can’t be improved. Kingfisher is far from perfect, so necessary and useful updates will be made to make it better.&lt;/p&gt; &#xA;&lt;h3&gt;Developments and Tests&lt;/h3&gt; &#xA;&lt;p&gt;Any contributing and pull requests are warmly welcome. However, before you plan to implement some features or try to fix an uncertain issue, it is recommended to open a discussion first. It would be appreciated if your pull requests could build with all tests green. :)&lt;/p&gt; &#xA;&lt;h3&gt;About the logo&lt;/h3&gt; &#xA;&lt;p&gt;The logo of Kingfisher is inspired by &lt;a href=&#34;http://en.wikipedia.org/wiki/Tangram&#34;&gt;Tangram (七巧板)&lt;/a&gt;, a dissection puzzle consisting of seven flat shapes from China. I believe she&#39;s a kingfisher bird instead of a swift, but someone insists that she is a pigeon. I guess I should give her a name. Hi, guys, do you have any suggestions?&lt;/p&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;Follow and contact me on &lt;a href=&#34;http://twitter.com/onevcat&#34;&gt;Twitter&lt;/a&gt; or &lt;a href=&#34;http://weibo.com/onevcat&#34;&gt;Sina Weibo&lt;/a&gt;. If you find an issue, &lt;a href=&#34;https://github.com/onevcat/Kingfisher/issues/new&#34;&gt;open a ticket&lt;/a&gt;. Pull requests are warmly welcome as well.&lt;/p&gt; &#xA;&lt;h2&gt;Backers &amp;amp; Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Open-source projects cannot live long without your help. If you find Kingfisher to be useful, please consider supporting this project by becoming a sponsor. Your user icon or company logo shows up &lt;a href=&#34;https://onevcat.com/tabs/about/&#34;&gt;on my blog&lt;/a&gt; with a link to your home page.&lt;/p&gt; &#xA;&lt;p&gt;Become a sponsor through &lt;a href=&#34;https://github.com/sponsors/onevcat&#34;&gt;GitHub Sponsors&lt;/a&gt;. &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://img.ly/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1812216/106253726-271ed000-6218-11eb-98e0-c9c681925770.png&#34; alt=&#34;imgly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Kingfisher is released under the MIT license. See LICENSE for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>krzyzanowskim/CryptoSwift</title>
    <updated>2022-06-26T02:25:32Z</updated>
    <id>tag:github.com,2022-06-26:/krzyzanowskim/CryptoSwift</id>
    <link href="https://github.com/krzyzanowskim/CryptoSwift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CryptoSwift is a growing collection of standard and secure cryptographic algorithms implemented in Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#installation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platforms-iOS%20%7C%20Android%20%7CmacOS%20%7C%20watchOS%20%7C%20tvOS%20%7C%20Linux-4E4E4E.svg?colorA=28a745&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#swift-versions-support&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Swift-3.1%20%7C%203.2%20%7C%204.0%20%7C%204.1%20%7C%204.2%20%7C%205.0-lightgrey.svg?colorA=28a745&amp;amp;colorB=4E4E4E&#34; alt=&#34;Swift support&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-compatible-brightgreen.svg?style=flat&amp;amp;colorA=28a745&amp;amp;&amp;amp;colorB=4E4E4E&#34; alt=&#34;Swift Package Manager compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/CryptoSwift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/CryptoSwift.svg?style=flat&amp;amp;label=CocoaPods&amp;amp;colorA=28a745&amp;amp;&amp;amp;colorB=4E4E4E&#34; alt=&#34;CocoaPods Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&amp;amp;colorA=28a745&amp;amp;&amp;amp;colorB=4E4E4E&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CryptoSwift&lt;/h1&gt; &#xA;&lt;p&gt;Crypto related functions and helpers for &lt;a href=&#34;https://swift.org&#34;&gt;Swift&lt;/a&gt; implemented in Swift. (&lt;a href=&#34;https://twitter.com/hashtag/pureswift&#34;&gt;#PureSwift&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;main&lt;/code&gt; branch follows the latest currently released &lt;strong&gt;version of Swift&lt;/strong&gt;. If you need an earlier version for an older version of Swift, you can specify its version in your &lt;code&gt;Podfile&lt;/code&gt; or use the code on the branch for that version. Older branches are unsupported. Check &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#swift-versions-support&#34;&gt;versions&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#requirements&#34;&gt;Requirements&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#features&#34;&gt;Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#contribution&#34;&gt;Contribution&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#installation&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#swift-versions-support&#34;&gt;Swift versions&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#how-to&#34;&gt;How-to&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#author&#34;&gt;Author&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#license&#34;&gt;License&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;It takes some time to keep it all for your convenience, so maybe spare $1, so I can keep working on that. There are more than 8000 clones daily. If I&#39;d get $1/month from each company that uses my work here, I&#39;d say we&#39;re even. Hurry up, find the &lt;a href=&#34;https://github.com/users/krzyzanowskim/sponsorship&#34;&gt;Sponsorship&lt;/a&gt; button, and fulfill your duty.&lt;/p&gt; &#xA;&lt;p&gt;CryptoSwift isn&#39;t backed by any big company and is developer in my spare time that I also use to as a freelancer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://twitter.com/krzyzanowskim&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-@krzyzanowskim-blue.svg?style=flat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Good mood&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;Convenient extensions for String and Data&lt;/li&gt; &#xA; &lt;li&gt;Support for incremental updates (stream, ...)&lt;/li&gt; &#xA; &lt;li&gt;iOS, Android, macOS, AppleTV, watchOS, Linux support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Hash (Digest)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc1321&#34;&gt;MD5&lt;/a&gt; | &lt;a href=&#34;http://tools.ietf.org/html/rfc3174&#34;&gt;SHA1&lt;/a&gt; | &lt;a href=&#34;http://tools.ietf.org/html/rfc6234&#34;&gt;SHA2-224&lt;/a&gt; | &lt;a href=&#34;http://tools.ietf.org/html/rfc6234&#34;&gt;SHA2-256&lt;/a&gt; | &lt;a href=&#34;http://tools.ietf.org/html/rfc6234&#34;&gt;SHA2-384&lt;/a&gt; | &lt;a href=&#34;http://tools.ietf.org/html/rfc6234&#34;&gt;SHA2-512&lt;/a&gt; | &lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf&#34;&gt;SHA3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Cyclic Redundancy Check (CRC)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Cyclic_redundancy_check&#34;&gt;CRC32&lt;/a&gt; | &lt;a href=&#34;http://en.wikipedia.org/wiki/Cyclic_redundancy_check&#34;&gt;CRC32C&lt;/a&gt; | &lt;a href=&#34;http://en.wikipedia.org/wiki/Cyclic_redundancy_check&#34;&gt;CRC16&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Cipher&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf&#34;&gt;AES-128, AES-192, AES-256&lt;/a&gt; | &lt;a href=&#34;http://cr.yp.to/chacha/chacha-20080128.pdf&#34;&gt;ChaCha20&lt;/a&gt; | &lt;a href=&#34;https://tools.ietf.org/html/rfc4503&#34;&gt;Rabbit&lt;/a&gt; | &lt;a href=&#34;https://www.schneier.com/academic/blowfish/&#34;&gt;Blowfish&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Message authenticators&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cr.yp.to/mac/poly1305-20050329.pdf&#34;&gt;Poly1305&lt;/a&gt; | &lt;a href=&#34;https://www.ietf.org/rfc/rfc2104.txt&#34;&gt;HMAC (MD5, SHA1, SHA256)&lt;/a&gt; | &lt;a href=&#34;https://tools.ietf.org/html/rfc4493&#34;&gt;CMAC&lt;/a&gt; | &lt;a href=&#34;https://en.wikipedia.org/wiki/CBC-MAC&#34;&gt;CBC-MAC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Cipher mode of operation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Electronic codebook (&lt;a href=&#34;http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_.28ECB.29&#34;&gt;ECB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cipher-block chaining (&lt;a href=&#34;http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher-block_chaining_.28CBC.29&#34;&gt;CBC&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Propagating Cipher Block Chaining (&lt;a href=&#34;http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Propagating_Cipher_Block_Chaining_.28PCBC.29&#34;&gt;PCBC&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cipher feedback (&lt;a href=&#34;http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_feedback_.28CFB.29&#34;&gt;CFB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Output Feedback (&lt;a href=&#34;http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Output_Feedback_.28OFB.29&#34;&gt;OFB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Counter Mode (&lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_.28CTR.29&#34;&gt;CTR&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Galois/Counter Mode (&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-38d/final&#34;&gt;GCM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Counter with Cipher Block Chaining-Message Authentication Code (&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-38c/final&#34;&gt;CCM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OCB Authenticated-Encryption Algorithm (&lt;a href=&#34;https://tools.ietf.org/html/rfc7253&#34;&gt;OCB&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Password-Based Key Derivation Function&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc2898#section-5.1&#34;&gt;PBKDF1&lt;/a&gt; (Password-Based Key Derivation Function 1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc2898#section-5.2&#34;&gt;PBKDF2&lt;/a&gt; (Password-Based Key Derivation Function 2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5869&#34;&gt;HKDF&lt;/a&gt; (HMAC-based Extract-and-Expand Key Derivation Function)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7914&#34;&gt;Scrypt&lt;/a&gt; (The scrypt Password-Based Key Derivation Function)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Data padding&lt;/h4&gt; &#xA;&lt;p&gt;PKCS#5 | &lt;a href=&#34;http://tools.ietf.org/html/rfc5652#section-6.3&#34;&gt;PKCS#7&lt;/a&gt; | &lt;a href=&#34;https://en.wikipedia.org/wiki/Padding_(cryptography)#Zero_padding&#34;&gt;Zero padding&lt;/a&gt; | &lt;a href=&#34;http://www.embedx.com/pdfs/ISO_STD_7816/info_isoiec7816-4%7Bed21.0%7Den.pdf&#34;&gt;ISO78164&lt;/a&gt; | &lt;a href=&#34;https://en.wikipedia.org/wiki/Padding_(cryptography)#ISO_10126&#34;&gt;ISO10126&lt;/a&gt; | No padding&lt;/p&gt; &#xA;&lt;h4&gt;Authenticated Encryption with Associated Data (AEAD)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7539#section-2.8&#34;&gt;AEAD_CHACHA20_POLY1305&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/issues/5&#34;&gt;Why?&lt;/a&gt; &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/issues/5#issuecomment-53379391&#34;&gt;Because I can&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How do I get involved?&lt;/h2&gt; &#xA;&lt;p&gt;You want to help, great! Go ahead and fork our repo, make your changes and send us a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information on how to help with CryptoSwift.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you found a bug, &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/issues&#34;&gt;open an issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you have a feature request, &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/issues&#34;&gt;open an issue&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Hardened Runtime (macOS) and Xcode&lt;/h3&gt; &#xA;&lt;p&gt;Binary CryptoSwift.xcframework (Used by Swift Package Manager package integration) won&#39;t load properly in your app if the app uses &lt;strong&gt;Sign to Run Locally&lt;/strong&gt; Signing Certificate with Hardened Runtime enabled. It is possible to setup Xcode like this. To solve the problem you have two options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use proper Signing Certificate, eg. &lt;em&gt;Development&lt;/em&gt; &amp;lt;- this is the proper action&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Disable Library Validation&lt;/code&gt; aka &lt;code&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt; entitlement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Xcode Project&lt;/h4&gt; &#xA;&lt;p&gt;To install CryptoSwift, add it as a submodule to your project (on the top level project directory):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/krzyzanowskim/CryptoSwift.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is recommended to enable &lt;a href=&#34;https://swift.org/blog/whole-module-optimizations/&#34;&gt;Whole-Module Optimization&lt;/a&gt; to gain better performance. Non-optimized build results in significantly worse performance.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; and specify dependency in &lt;code&gt;Package.swift&lt;/code&gt; by adding this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/krzyzanowskim/CryptoSwift.git&#34;, .upToNextMajor(from: &#34;1.5.1&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;http://blog.krzyzanowskim.com/2016/08/09/package-swift-manual/&#34;&gt;Package.swift - manual&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Notice: Swift Package Manager uses debug configuration for debug Xcode build, that may result in significant (up to x10000) worse performance. Performance characteristic is different in Release build. To overcome this prolem, consider embed &lt;code&gt;CryptoSwift.xcframework&lt;/code&gt; described below.&lt;/p&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://cocoapods.org/pods/CryptoSwift&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;CryptoSwift&#39;, &#39;~&amp;gt; 1.4.1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bear in mind that CocoaPods will build CryptoSwift without &lt;a href=&#34;https://swift.org/blog/whole-module-optimizations/&#34;&gt;Whole-Module Optimization&lt;/a&gt; that may impact performance. You can change it manually after installation, or use &lt;a href=&#34;https://github.com/jedlewison/cocoapods-wholemodule&#34;&gt;cocoapods-wholemodule&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt;. Specify in Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;krzyzanowskim/CryptoSwift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage&lt;/code&gt; to build the framework and drag the built CryptoSwift.framework into your Xcode project. Follow &lt;a href=&#34;https://github.com/Carthage/Carthage#getting-started&#34;&gt;build instructions&lt;/a&gt;. &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/issues/492#issuecomment-330822874&#34;&gt;Common issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;XCFramework&lt;/h4&gt; &#xA;&lt;p&gt;XCFrameworks require Xcode 11 or later and they can be integrated similarly to how we’re used to integrating the &lt;code&gt;.framework&lt;/code&gt; format. Please use script &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/scripts/build-framework.sh&#34;&gt;scripts/build-framework.sh&lt;/a&gt; to generate binary &lt;code&gt;CryptoSwift.xcframework&lt;/code&gt; archive that you can use as a dependency in Xcode.&lt;/p&gt; &#xA;&lt;p&gt;CryptoSwift.xcframework is a Release (Optimized) binary that offer best available Swift code performance.&lt;/p&gt; &#xA;&lt;img width=&#34;320&#34; alt=&#34;Screen Shot 2020-10-27 at 00 06 32&#34; src=&#34;https://user-images.githubusercontent.com/758033/97240586-f0878280-17ee-11eb-9119-e5a960417d04.png&#34;&gt; &#xA;&lt;h4&gt;Embedded Framework&lt;/h4&gt; &#xA;&lt;p&gt;Embedded frameworks require a minimum deployment target of iOS 9 or macOS Sierra (10.12). Drag the &lt;code&gt;CryptoSwift.xcodeproj&lt;/code&gt; file into your Xcode project, and add appropriate framework as a dependency to your target. Now select your App and choose the General tab for the app target. Find &lt;em&gt;Embedded Binaries&lt;/em&gt; and press &#34;+&#34;, then select &lt;code&gt;CryptoSwift.framework&lt;/code&gt; (iOS, macOS, watchOS or tvOS)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/758033/10834511/25a26852-7e9a-11e5-8c01-6cc8f1838459.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sometimes &#34;embedded framework&#34; option is not available. In that case, you have to add new build phase for the target.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/758033/18415615/d5edabb0-77f8-11e6-8c94-f41d9fc2b8cb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;iOS, macOS, watchOS, tvOS&lt;/h5&gt; &#xA;&lt;p&gt;In the project, you&#39;ll find &lt;a href=&#34;https://mxcl.dev/PromiseKit/news/2016/08/Multiplatform-Single-Scheme-Xcode-Projects/&#34;&gt;single scheme&lt;/a&gt; for all platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CryptoSwift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Swift versions support&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift 1.2: branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift12&#34;&gt;swift12&lt;/a&gt; version &amp;lt;= 0.0.13&lt;/li&gt; &#xA; &lt;li&gt;Swift 2.1: branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift21&#34;&gt;swift21&lt;/a&gt; version &amp;lt;= 0.2.3&lt;/li&gt; &#xA; &lt;li&gt;Swift 2.2, 2.3: branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift2&#34;&gt;swift2&lt;/a&gt; version &amp;lt;= 0.5.2&lt;/li&gt; &#xA; &lt;li&gt;Swift 3.1, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift3&#34;&gt;swift3&lt;/a&gt; version &amp;lt;= 0.6.9&lt;/li&gt; &#xA; &lt;li&gt;Swift 3.2, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift32&#34;&gt;swift32&lt;/a&gt; version = 0.7.0&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.0, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift4&#34;&gt;swift4&lt;/a&gt; version &amp;lt;= 0.12.0&lt;/li&gt; &#xA; &lt;li&gt;Swift 4.2, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift42&#34;&gt;swift42&lt;/a&gt; version &amp;lt;= 0.15.0&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.0, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift5&#34;&gt;swift5&lt;/a&gt; version &amp;lt;= 1.2.0&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.1, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/swift51&#34;&gt;swift5&lt;/a&gt; version &amp;lt;= 1.3.3&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.3 and newer, branch &lt;a href=&#34;https://github.com/krzyzanowskim/CryptoSwift/tree/main&#34;&gt;main&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How-to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#basics&#34;&gt;Basics (data types, conversion, ...)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#calculate-digest&#34;&gt;Digest (MD5, SHA...)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#message-authenticators-1&#34;&gt;Message authenticators (HMAC, CMAC...)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#password-based-key-derivation-functions&#34;&gt;Password-Based Key Derivation Function (PBKDF2, ...)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#hmac-based-key-derivation-function&#34;&gt;HMAC-based Key Derivation Function (HKDF)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#data-padding&#34;&gt;Data Padding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#chacha20&#34;&gt;ChaCha20&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#rabbit&#34;&gt;Rabbit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#blowfish&#34;&gt;Blowfish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#aes&#34;&gt;AES - Advanced Encryption Standard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#aes-gcm&#34;&gt;AES-GCM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/#aead&#34;&gt;Authenticated Encryption with Associated Data (AEAD)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Basics&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import CryptoSwift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CryptoSwift uses array of bytes aka &lt;code&gt;Array&amp;lt;UInt8&amp;gt;&lt;/code&gt; as a base type for all operations. Every data may be converted to a stream of bytes. You will find convenience functions that accept &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Data&lt;/code&gt;, and it will be internally converted to the array of bytes.&lt;/p&gt; &#xA;&lt;h5&gt;Data types conversion&lt;/h5&gt; &#xA;&lt;p&gt;For your convenience, &lt;strong&gt;CryptoSwift&lt;/strong&gt; provides two functions to easily convert an array of bytes to &lt;code&gt;Data&lt;/code&gt; or &lt;code&gt;Data&lt;/code&gt; to an array of bytes:&lt;/p&gt; &#xA;&lt;p&gt;Data from bytes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let data = Data( [0x01, 0x02, 0x03])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Data&lt;/code&gt; to &lt;code&gt;Array&amp;lt;UInt8&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bytes = data.bytes                     // [1,2,3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hexadecimal&#34;&gt;Hexadecimal&lt;/a&gt; encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bytes = Array&amp;lt;UInt8&amp;gt;(hex: &#34;0x010203&#34;)  // [1,2,3]&#xA;let hex   = bytes.toHexString()            // &#34;010203&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build bytes out of &lt;code&gt;String&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let bytes: Array&amp;lt;UInt8&amp;gt; = &#34;cipherkey&#34;.bytes  // Array(&#34;cipherkey&#34;.utf8)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also... check out helpers that work with &lt;strong&gt;Base64&lt;/strong&gt; encoded data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#34;aPf/i9th9iX+vf49eR7PYk2q7S5xmm3jkRLejgzHNJs=&#34;.decryptBase64ToString(cipher)&#xA;&#34;aPf/i9th9iX+vf49eR7PYk2q7S5xmm3jkRLejgzHNJs=&#34;.decryptBase64(cipher)&#xA;bytes.toBase64()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Calculate Digest&lt;/h5&gt; &#xA;&lt;p&gt;Hashing a data or array of bytes (aka &lt;code&gt;Array&amp;lt;UInt8&amp;gt;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/* Hash struct usage */&#xA;let bytes: Array&amp;lt;UInt8&amp;gt; = [0x01, 0x02, 0x03]&#xA;let digest = input.md5()&#xA;let digest = Digest.md5(bytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let data = Data([0x01, 0x02, 0x03])&#xA;&#xA;let hash = data.md5()&#xA;let hash = data.sha1()&#xA;let hash = data.sha224()&#xA;let hash = data.sha256()&#xA;let hash = data.sha384()&#xA;let hash = data.sha512()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    var digest = MD5()&#xA;    let partial1 = try digest.update(withBytes: [0x31, 0x32])&#xA;    let partial2 = try digest.update(withBytes: [0x33])&#xA;    let result = try digest.finish()&#xA;} catch { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hashing a String and printing result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let hash = &#34;123&#34;.md5() // &#34;123&#34;.bytes.md5()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Calculate CRC&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;bytes.crc16()&#xA;data.crc16()&#xA;&#xA;bytes.crc32()&#xA;data.crc32()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Message authenticators&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Calculate Message Authentication Code (MAC) for message&#xA;let key: Array&amp;lt;UInt8&amp;gt; = [1,2,3,4,5,6,7,8,9,10,...]&#xA;&#xA;try Poly1305(key: key).authenticate(bytes)&#xA;try HMAC(key: key, variant: .sha256).authenticate(bytes)&#xA;try CMAC(key: key).authenticate(bytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Password-Based Key Derivation Functions&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password: Array&amp;lt;UInt8&amp;gt; = Array(&#34;s33krit&#34;.utf8)&#xA;let salt: Array&amp;lt;UInt8&amp;gt; = Array(&#34;nacllcan&#34;.utf8)&#xA;&#xA;let key = try PKCS5.PBKDF2(password: password, salt: salt, iterations: 4096, keyLength: 32, variant: .sha256).calculate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password: Array&amp;lt;UInt8&amp;gt; = Array(&#34;s33krit&#34;.utf8)&#xA;let salt: Array&amp;lt;UInt8&amp;gt; = Array(&#34;nacllcan&#34;.utf8)&#xA;// Scrypt implementation does not implement work parallelization, so `p` parameter will&#xA;// increase the work time even in multicore systems&#xA;let key = try Scrypt(password: password, salt: salt, dkLen: 64, N: 16384, r: 8, p: 1).calculate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;HMAC-based Key Derivation Function&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password: Array&amp;lt;UInt8&amp;gt; = Array(&#34;s33krit&#34;.utf8)&#xA;let salt: Array&amp;lt;UInt8&amp;gt; = Array(&#34;nacllcan&#34;.utf8)&#xA;&#xA;let key = try HKDF(password: password, salt: salt, variant: .sha256).calculate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Data Padding&lt;/h5&gt; &#xA;&lt;p&gt;Some content-encryption algorithms assume the input length is a multiple of &lt;code&gt;k&lt;/code&gt; octets, where &lt;code&gt;k&lt;/code&gt; is greater than one. For such algorithms, the input shall be padded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Padding.pkcs7.add(to: bytes, blockSize: AES.blockSize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Working with Ciphers&lt;/h4&gt; &#xA;&lt;h5&gt;ChaCha20&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encrypted = try ChaCha20(key: key, iv: iv).encrypt(message)&#xA;let decrypted = try ChaCha20(key: key, iv: iv).decrypt(encrypted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Rabbit&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encrypted = try Rabbit(key: key, iv: iv).encrypt(message)&#xA;let decrypted = try Rabbit(key: key, iv: iv).decrypt(encrypted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Blowfish&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encrypted = try Blowfish(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).encrypt(message)&#xA;let decrypted = try Blowfish(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).decrypt(encrypted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;AES&lt;/h5&gt; &#xA;&lt;p&gt;Notice regarding padding: &lt;em&gt;Manual padding of data is optional, and CryptoSwift is using PKCS7 padding by default. If you need to manually disable/enable padding, you can do this by setting parameter for &lt;strong&gt;AES&lt;/strong&gt; class&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Variant of AES encryption (AES-128, AES-192, AES-256) depends on given key length:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AES-128 = 16 bytes&lt;/li&gt; &#xA; &lt;li&gt;AES-192 = 24 bytes&lt;/li&gt; &#xA; &lt;li&gt;AES-256 = 32 bytes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AES-256 example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encryptedBytes = try AES(key: [1,2,3,...,32], blockMode: CBC(iv: [1,2,3,...,16]), padding: .pkcs7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let password: [UInt8] = Array(&#34;s33krit&#34;.utf8)&#xA;let salt: [UInt8] = Array(&#34;nacllcan&#34;.utf8)&#xA;&#xA;/* Generate a key from a `password`. Optional if you already have a key */&#xA;let key = try PKCS5.PBKDF2(&#xA;    password: password,&#xA;    salt: salt,&#xA;    iterations: 4096,&#xA;    keyLength: 32, /* AES-256 */&#xA;    variant: .sha256&#xA;).calculate()&#xA;&#xA;/* Generate random IV value. IV is public value. Either need to generate, or get it from elsewhere */&#xA;let iv = AES.randomIV(AES.blockSize)&#xA;&#xA;/* AES cryptor instance */&#xA;let aes = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7)&#xA;&#xA;/* Encrypt Data */&#xA;let inputData = Data()&#xA;let encryptedBytes = try aes.encrypt(inputData.bytes)&#xA;let encryptedData = Data(encryptedBytes)&#xA;&#xA;/* Decrypt Data */&#xA;let decryptedBytes = try aes.decrypt(encryptedData.bytes)&#xA;let decryptedData = Data(decryptedBytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;All at once&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    let aes = try AES(key: &#34;keykeykeykeykeyk&#34;, iv: &#34;drowssapdrowssap&#34;) // aes128&#xA;    let ciphertext = try aes.encrypt(Array(&#34;Nullam quis risus eget urna mollis ornare vel eu leo.&#34;.utf8))&#xA;} catch { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Incremental updates&lt;/h6&gt; &#xA;&lt;p&gt;Incremental operations use instance of Cryptor and encrypt/decrypt one part at a time, this way you can save on memory for large files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    var encryptor = try AES(key: &#34;keykeykeykeykeyk&#34;, iv: &#34;drowssapdrowssap&#34;).makeEncryptor()&#xA;&#xA;    var ciphertext = Array&amp;lt;UInt8&amp;gt;()&#xA;    // aggregate partial results&#xA;    ciphertext += try encryptor.update(withBytes: Array(&#34;Nullam quis risus &#34;.utf8))&#xA;    ciphertext += try encryptor.update(withBytes: Array(&#34;eget urna mollis &#34;.utf8))&#xA;    ciphertext += try encryptor.update(withBytes: Array(&#34;ornare vel eu leo.&#34;.utf8))&#xA;    // finish at the end&#xA;    ciphertext += try encryptor.finish()&#xA;&#xA;    print(ciphertext.toHexString())&#xA;} catch {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;AES Advanced usage&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let input: Array&amp;lt;UInt8&amp;gt; = [0,1,2,3,4,5,6,7,8,9]&#xA;&#xA;let key: Array&amp;lt;UInt8&amp;gt; = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]&#xA;let iv: Array&amp;lt;UInt8&amp;gt; = // Random bytes of `AES.blockSize` length&#xA;&#xA;do {&#xA;    let encrypted = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).encrypt(input)&#xA;    let decrypted = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).decrypt(encrypted)&#xA;} catch {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AES without data padding&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let input: Array&amp;lt;UInt8&amp;gt; = [0,1,2,3,4,5,6,7,8,9]&#xA;let encrypted: Array&amp;lt;UInt8&amp;gt; = try! AES(key: Array(&#34;secret0key000000&#34;.utf8), blockMode: CBC(iv: Array(&#34;0123456789012345&#34;.utf8)), padding: .noPadding).encrypt(input)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using convenience extensions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let plain = Data([0x01, 0x02, 0x03])&#xA;let encrypted = try! plain.encrypt(ChaCha20(key: key, iv: iv))&#xA;let decrypted = try! encrypted.decrypt(ChaCha20(key: key, iv: iv))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;AES-GCM&lt;/h5&gt; &#xA;&lt;p&gt;The result of Galois/Counter Mode (GCM) encryption is ciphertext and &lt;strong&gt;authentication tag&lt;/strong&gt;, that is later used to decryption.&lt;/p&gt; &#xA;&lt;p&gt;encryption&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    // In combined mode, the authentication tag is directly appended to the encrypted message. This is usually what you want.&#xA;    let gcm = GCM(iv: iv, mode: .combined)&#xA;    let aes = try AES(key: key, blockMode: gcm, padding: .noPadding)&#xA;    let encrypted = try aes.encrypt(plaintext)&#xA;    let tag = gcm.authenticationTag&#xA;} catch {&#xA;    // failed&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;decryption&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    // In combined mode, the authentication tag is appended to the encrypted message. This is usually what you want.&#xA;    let gcm = GCM(iv: iv, mode: .combined)&#xA;    let aes = try AES(key: key, blockMode: gcm, padding: .noPadding)&#xA;    return try aes.decrypt(encrypted)&#xA;} catch {&#xA;    // failed&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: GCM instance is not intended to be reused. So you can&#39;t use the same &lt;code&gt;GCM&lt;/code&gt; instance from encoding to also perform decoding.&lt;/p&gt; &#xA;&lt;h5&gt;AES-CCM&lt;/h5&gt; &#xA;&lt;p&gt;The result of Counter with Cipher Block Chaining-Message Authentication Code encryption is ciphertext and &lt;strong&gt;authentication tag&lt;/strong&gt;, that is later used to decryption.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;do {&#xA;    // The authentication tag is appended to the encrypted message.&#xA;&#x9;let tagLength = 8&#xA;&#x9;let ccm = CCM(iv: iv, tagLength: tagLength, messageLength: ciphertext.count - tagLength, additionalAuthenticatedData: data)&#xA;    let aes = try AES(key: key, blockMode: ccm, padding: .noPadding)&#xA;    return try aes.decrypt(encrypted)&#xA;} catch {&#xA;    // failed&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check documentation or CCM specification for valid parameters for CCM.&lt;/p&gt; &#xA;&lt;h5&gt;AEAD&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let encrypt = try AEADChaCha20Poly1305.encrypt(plaintext, key: key, iv: nonce, authenticationHeader: header)&#xA;let decrypt = try AEADChaCha20Poly1305.decrypt(ciphertext, key: key, iv: nonce, authenticationHeader: header, authenticationTag: tagArr: tag)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;RSA&lt;/h5&gt; &#xA;&lt;p&gt;RSA initialization from parameters&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let input: Array&amp;lt;UInt8&amp;gt; = [0,1,2,3,4,5,6,7,8,9]&#xA;&#xA;let n: Array&amp;lt;UInt8&amp;gt; = // RSA modulus&#xA;let e: Array&amp;lt;UInt8&amp;gt; = // RSA public exponent&#xA;let d: Array&amp;lt;UInt8&amp;gt; = // RSA private exponent&#xA;&#xA;let rsa = RSA(n: n, e: e, d: d)&#xA;&#xA;do {&#xA;    let encrypted = try rsa.encrypt(input)&#xA;    let decrypted = try rsa.decrypt(encrypted)&#xA;} catch {&#xA;    print(error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RSA key generation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let rsa = RSA(keySize: 2048) // This generates a modulus, public exponent and private exponent with the given size&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;CryptoSwift is owned and maintained by &lt;a href=&#34;http://www.krzyzanowskim.com&#34;&gt;Marcin Krzyżanowski&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can follow me on Twitter at &lt;a href=&#34;http://twitter.com/krzyzanowskim&#34;&gt;@krzyzanowskim&lt;/a&gt; for project updates and releases.&lt;/p&gt; &#xA;&lt;h1&gt;Cryptography Notice&lt;/h1&gt; &#xA;&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country&#39;s laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href=&#34;http://www.wassenaar.org/&#34;&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2014-2021 Marcin Krzyżanowski &lt;a href=&#34;mailto:marcin@krzyzanowskim.com&#34;&gt;marcin@krzyzanowskim.com&lt;/a&gt; This software is provided &#39;as-is&#39;, without any express or implied warranty.&lt;/p&gt; &#xA;&lt;p&gt;In no event will the authors be held liable for any damages arising from the use of this software.&lt;/p&gt; &#xA;&lt;p&gt;Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, &lt;strong&gt;an acknowledgment in the product documentation is required&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.&lt;/li&gt; &#xA; &lt;li&gt;This notice may not be removed or altered from any source or binary distribution.&lt;/li&gt; &#xA; &lt;li&gt;Redistributions of any form whatsoever must retain the following acknowledgment: &#39;This product includes software developed by the &#34;Marcin Krzyzanowski&#34; (&lt;a href=&#34;http://krzyzanowskim.com/&#34;&gt;http://krzyzanowskim.com/&lt;/a&gt;).&#39;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/krzyzanowskim/CryptoSwift/main/CHANGELOG&#34;&gt;CHANGELOG&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stephencelis/SQLite.swift</title>
    <updated>2022-06-26T02:25:32Z</updated>
    <id>tag:github.com,2022-06-26:/stephencelis/SQLite.swift</id>
    <link href="https://github.com/stephencelis/SQLite.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A type-safe, Swift-language layer over SQLite3.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SQLite.swift&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/stephencelis/SQLite.swift/Build%20and%20test&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://cocoapods.org/pods/SQLite.swift&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/v/SQLite.swift/badge.png&#34; alt=&#34;CocoaPods Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5-orange.svg?style=flat&#34; alt=&#34;Swift5 compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/SQLite.swift&#34;&gt;&lt;img src=&#34;https://cocoapod-badges.herokuapp.com/p/SQLite.swift/badge.png&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/stephencelis/SQLite.swift&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/stephencelis/SQLite.swift.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/stephencelis/SQLite.swift&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A type-safe, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift&lt;/a&gt;-language layer over &lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stephencelis/SQLite.swift&#34;&gt;SQLite.swift&lt;/a&gt; provides compile-time confidence in SQL statement syntax &lt;em&gt;and&lt;/em&gt; intent.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A pure-Swift interface&lt;/li&gt; &#xA; &lt;li&gt;A type-safe, optional-aware SQL expression builder&lt;/li&gt; &#xA; &lt;li&gt;A flexible, chainable, lazy-executing query layer&lt;/li&gt; &#xA; &lt;li&gt;Automatically-typed data access&lt;/li&gt; &#xA; &lt;li&gt;A lightweight, uncomplicated query and parameter binding interface&lt;/li&gt; &#xA; &lt;li&gt;Developer-friendly error handling and debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#full-text-search&#34;&gt;Full-text search&lt;/a&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#sqliteswift-documentation&#34;&gt;Well-documented&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extensively tested&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34;&gt;SQLCipher&lt;/a&gt; support via CocoaPods&lt;/li&gt; &#xA; &lt;li&gt;Works on &lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Linux.md&#34;&gt;Linux&lt;/a&gt; (with some limitations)&lt;/li&gt; &#xA; &lt;li&gt;Active support at &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sqlite.swift&#34;&gt;StackOverflow&lt;/a&gt;, and &lt;a href=&#34;https://gitter.im/stephencelis/SQLite.swift&#34;&gt;Gitter Chat Room&lt;/a&gt; (&lt;em&gt;experimental&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SQLite&#xA;&#xA;// Wrap everything in a do...catch to handle errors&#xA;do {&#xA;    let db = try Connection(&#34;path/to/db.sqlite3&#34;)&#xA;&#xA;    let users = Table(&#34;users&#34;)&#xA;    let id = Expression&amp;lt;Int64&amp;gt;(&#34;id&#34;)&#xA;    let name = Expression&amp;lt;String?&amp;gt;(&#34;name&#34;)&#xA;    let email = Expression&amp;lt;String&amp;gt;(&#34;email&#34;)&#xA;&#xA;    try db.run(users.create { t in&#xA;        t.column(id, primaryKey: true)&#xA;        t.column(name)&#xA;        t.column(email, unique: true)&#xA;    })&#xA;    // CREATE TABLE &#34;users&#34; (&#xA;    //     &#34;id&#34; INTEGER PRIMARY KEY NOT NULL,&#xA;    //     &#34;name&#34; TEXT,&#xA;    //     &#34;email&#34; TEXT NOT NULL UNIQUE&#xA;    // )&#xA;&#xA;    let insert = users.insert(name &amp;lt;- &#34;Alice&#34;, email &amp;lt;- &#34;alice@mac.com&#34;)&#xA;    let rowid = try db.run(insert)&#xA;    // INSERT INTO &#34;users&#34; (&#34;name&#34;, &#34;email&#34;) VALUES (&#39;Alice&#39;, &#39;alice@mac.com&#39;)&#xA;&#xA;    for user in try db.prepare(users) {&#xA;        print(&#34;id: \(user[id]), name: \(user[name]), email: \(user[email])&#34;)&#xA;        // id: 1, name: Optional(&#34;Alice&#34;), email: alice@mac.com&#xA;    }&#xA;    // SELECT * FROM &#34;users&#34;&#xA;&#xA;    let alice = users.filter(id == rowid)&#xA;&#xA;    try db.run(alice.update(email &amp;lt;- email.replace(&#34;mac.com&#34;, with: &#34;me.com&#34;)))&#xA;    // UPDATE &#34;users&#34; SET &#34;email&#34; = replace(&#34;email&#34;, &#39;mac.com&#39;, &#39;me.com&#39;)&#xA;    // WHERE (&#34;id&#34; = 1)&#xA;&#xA;    try db.run(alice.delete())&#xA;    // DELETE FROM &#34;users&#34; WHERE (&#34;id&#34; = 1)&#xA;&#xA;    try db.scalar(users.count) // 0&#xA;    // SELECT count(*) FROM &#34;users&#34;&#xA;} catch {&#xA;    print (error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite.swift also works as a lightweight, Swift-friendly wrapper over the C API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Wrap everything in a do...catch to handle errors&#xA;do {&#xA;    // ...&#xA;    &#xA;    let stmt = try db.prepare(&#34;INSERT INTO users (email) VALUES (?)&#34;)&#xA;    for email in [&#34;betty@icloud.com&#34;, &#34;cathy@icloud.com&#34;] {&#xA;        try stmt.run(email)&#xA;    }&#xA;&#xA;    db.totalChanges    // 3&#xA;    db.changes         // 1&#xA;    db.lastInsertRowid // 3&#xA;&#xA;    for row in try db.prepare(&#34;SELECT id, email FROM users&#34;) {&#xA;        print(&#34;id: \(row[0]), email: \(row[1])&#34;)&#xA;        // id: Optional(2), email: Optional(&#34;betty@icloud.com&#34;)&#xA;        // id: Optional(3), email: Optional(&#34;cathy@icloud.com&#34;)&#xA;    }&#xA;&#xA;    try db.scalar(&#34;SELECT count(*) FROM users&#34;) // 2&#xA;} catch {&#xA;    print (error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Index.md#sqliteswift-documentation&#34;&gt;Read the documentation&lt;/a&gt; or explore more, interactively, from the Xcode project’s playground.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Resources/playground@2x.png&#34; alt=&#34;SQLite.playground Screen Shot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a more comprehensive example, see &lt;a href=&#34;https://masteringswift.blogspot.com/2015/09/create-data-access-layer-with.html&#34;&gt;this article&lt;/a&gt; and the &lt;a href=&#34;https://github.com/hoffmanjon/SQLiteDataAccessLayer2/tree/master&#34;&gt;companion repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Version 0.11.6 and later requires Swift 5 (and &lt;a href=&#34;https://developer.apple.com/xcode/downloads/&#34;&gt;Xcode&lt;/a&gt; 10.2) or greater. Version 0.11.5 requires Swift 4.2 (and &lt;a href=&#34;https://developer.apple.com/xcode/downloads/&#34;&gt;Xcode&lt;/a&gt; 10.1) or greater.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/stephencelis/SQLite.swift.git&#34;, from: &#34;0.13.3&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Build your project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ swift build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/tree/master/Tests/SPM&#34;&gt;Tests/SPM&lt;/a&gt; folder for a small demo project which uses SPM.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a simple, decentralized dependency manager for Cocoa. To install SQLite.swift with Carthage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure Carthage is &lt;a href=&#34;https://github.com/Carthage/Carthage#installing-carthage&#34;&gt;installed&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your Cartfile to include the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;stephencelis/SQLite.swift&#34; ~&amp;gt; 0.13.3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt; and &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;add the appropriate framework&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. To install SQLite.swift with CocoaPods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure CocoaPods is &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html#getting-started&#34;&gt;installed&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Using the default Ruby install will require you to use sudo when&#xA;# installing and updating gems.&#xA;[sudo] gem install cocoapods&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your Podfile to include the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;&#xA;target &#39;YourAppTargetName&#39; do&#xA;    pod &#39;SQLite.swift&#39;, &#39;~&amp;gt; 0.13.3&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;pod install --repo-update&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;To install SQLite.swift as an Xcode sub-project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag the &lt;strong&gt;SQLite.xcodeproj&lt;/strong&gt; file into your own project. (&lt;a href=&#34;https://git-scm.com/book/en/Git-Tools-Submodules&#34;&gt;Submodule&lt;/a&gt;, clone, or &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/archive/master.zip&#34;&gt;download&lt;/a&gt; the project first.)&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Resources/installation@2x.png&#34; alt=&#34;Installation Screen Shot&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your target’s &lt;strong&gt;General&lt;/strong&gt; tab, click the &lt;strong&gt;+&lt;/strong&gt; button under &lt;strong&gt;Linked Frameworks and Libraries&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the appropriate &lt;strong&gt;SQLite.framework&lt;/strong&gt; for your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Some additional steps are required to install the application on an actual device:&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;strong&gt;General&lt;/strong&gt; tab, click the &lt;strong&gt;+&lt;/strong&gt; button under &lt;strong&gt;Embedded Binaries&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the appropriate &lt;strong&gt;SQLite.framework&lt;/strong&gt; for your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Communication&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/Documentation/Planning.md&#34;&gt;See the planning document&lt;/a&gt; for a roadmap and existing feature requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/CONTRIBUTING.md#contributing&#34;&gt;Read the contributing guidelines&lt;/a&gt;. The &lt;em&gt;TL;DR&lt;/em&gt; (but please; &lt;em&gt;R&lt;/em&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Need &lt;strong&gt;help&lt;/strong&gt; or have a &lt;strong&gt;general question&lt;/strong&gt;? &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sqlite.swift&#34;&gt;Ask on Stack Overflow&lt;/a&gt; (tag &lt;code&gt;sqlite.swift&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Found a &lt;strong&gt;bug&lt;/strong&gt; or have a &lt;strong&gt;feature request&lt;/strong&gt;? &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/issues/new&#34;&gt;Open an issue&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Want to &lt;strong&gt;contribute&lt;/strong&gt;? &lt;a href=&#34;https://github.com/stephencelis/SQLite.swift/fork&#34;&gt;Submit a pull request&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:stephen@stephencelis.com&#34;&gt;Stephen Celis&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;@stephencelis&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SQLite.swift is available under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/stephencelis/SQLite.swift/master/LICENSE.txt&#34;&gt;the LICENSE file&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;p&gt;These projects enhance or use SQLite.swift:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/garriguv/SQLiteMigrationManager.swift&#34;&gt;SQLiteMigrationManager.swift&lt;/a&gt; (inspired by &lt;a href=&#34;https://github.com/layerhq/FMDBMigrationManager&#34;&gt;FMDBMigrationManager&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/delta-math-helper/id1436506800&#34;&gt;Delta: Math helper&lt;/a&gt; (see &lt;a href=&#34;https://github.com/GroupeMINASTE/Delta-iOS/raw/master/Delta/Utils/Database.swift&#34;&gt;Delta/Utils/Database.swift&lt;/a&gt; for production implementation example)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;Looking for something else? Try another Swift wrapper (or &lt;a href=&#34;https://github.com/ccgus/fmdb&#34;&gt;FMDB&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remirobert/Camembert&#34;&gt;Camembert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/groue/GRDB.swift&#34;&gt;GRDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FahimF/SQLiteDB&#34;&gt;SQLiteDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nerdyc/Squeal&#34;&gt;Squeal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryanfowler/SwiftData&#34;&gt;SwiftData&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>