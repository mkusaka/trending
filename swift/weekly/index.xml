<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-04T02:09:49Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ashleymills/Reachability.swift</title>
    <updated>2023-06-04T02:09:49Z</updated>
    <id>tag:github.com,2023-06-04:/ashleymills/Reachability.swift</id>
    <link href="https://github.com/ashleymills/Reachability.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Replacement for Apple&#39;s Reachability re-written in Swift with closures&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reachability.swift&lt;/h1&gt; &#xA;&lt;p&gt;Reachability.swift is a replacement for Apple&#39;s Reachability sample, re-written in Swift with closures.&lt;/p&gt; &#xA;&lt;p&gt;It is compatible with &lt;strong&gt;iOS&lt;/strong&gt; (8.0 - 12.0), &lt;strong&gt;OSX&lt;/strong&gt; (10.9 - 10.14) and &lt;strong&gt;tvOS&lt;/strong&gt; (9.0 - 12.0)&lt;/p&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/tonymillion/Reachability&#34;&gt;https://github.com/tonymillion/Reachability&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supporting &lt;strong&gt;Reachability.swift&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Keeping &lt;strong&gt;Reachability.swift&lt;/strong&gt; up-to-date is a time consuming task. Making updates, reviewing pull requests, responding to issues and answering emails all take time.&lt;/p&gt; &#xA;&lt;p&gt;Please consider sponsoring me &lt;a href=&#34;https://github.com/sponsors/ashleymills&#34;&gt;https://github.com/sponsors/ashleymills&lt;/a&gt;, it&#39;s a great way to say thanks!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re an iOS developer who&#39;s looking for a quick and easy way to create App Store screenshots, please try out my app &lt;a href=&#34;https://itunes.apple.com/app/apple-store/id1252374855?pt=215893&amp;amp;ct=reachability&amp;amp;mt=8&#34;&gt;Screenshot Producer&lt;/a&gt;…&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Devices&amp;nbsp;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Layout&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Copy&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Localize&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Export &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;http://is2.mzstatic.com/image/thumb/Purple118/v4/64/af/55/64af55bc-2ef0-691c-f5f3-4963685f7f63/source/552x414bb.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;http://is4.mzstatic.com/image/thumb/Purple128/v4/fb/4c/bd/fb4cbd2f-dd04-22ba-4fdf-5ac652693fb8/source/552x414bb.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;http://is1.mzstatic.com/image/thumb/Purple118/v4/5a/4f/cf/5a4fcfdf-ca04-0307-9f2e-83178e8ad90d/source/552x414bb.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;http://is4.mzstatic.com/image/thumb/Purple128/v4/17/ea/56/17ea562e-e045-96e7-fcac-cfaaf4f499fd/source/552x414bb.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;http://is4.mzstatic.com/image/thumb/Purple118/v4/59/9e/dd/599edd50-f05c-f413-8e88-e614731fd828/source/552x414bb.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And don&#39;t forget to &lt;strong&gt;★&lt;/strong&gt; the repo. This increases its visibility and encourages others to contribute.&lt;/p&gt; &#xA;&lt;p&gt;Thanks Ash&lt;/p&gt; &#xA;&lt;h2&gt;Got a problem?&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/ashleymills/Reachability.swift/raw/master/CONTRIBUTING.md&#34;&gt;https://github.com/ashleymills/Reachability.swift/blob/master/CONTRIBUTING.md&lt;/a&gt; before raising an issue.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Just drop the &lt;strong&gt;Reachability.swift&lt;/strong&gt; file into your project. That&#39;s it!&lt;/p&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects. To install Reachability.swift with CocoaPods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure CocoaPods is &lt;a href=&#34;https://guides.cocoapods.org/using/getting-started.html#getting-started&#34;&gt;installed&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your Podfile to include the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;use_frameworks!&#xA;pod &#39;ReachabilitySwift&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;In your code import Reachability like so: &lt;code&gt;import Reachability&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To install Reachability.swift with Carthage:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Carthage via &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update&#xA;$ brew install carthage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;github &#34;ashleymills/Reachability.swift&#34;&lt;/code&gt; to your Cartfile.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag &lt;code&gt;Reachability.framework&lt;/code&gt; from the &lt;code&gt;Carthage/Build/iOS/&lt;/code&gt; directory to the &lt;code&gt;Linked Frameworks and Libraries&lt;/code&gt; section of your Xcode project’s &lt;code&gt;General&lt;/code&gt; settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/Reachability.framework&lt;/code&gt; to &lt;code&gt;Input Files&lt;/code&gt; of Run Script Phase for Carthage.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your code import Reachability like so: &lt;code&gt;import Reachability&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager (SPM)&lt;/h3&gt; &#xA;&lt;p&gt;The Swift Package Manager is a tool for automating the distribution of Swift code and is integrated into the swift compiler. To integrate using Apple&#39;s Swift package manager from xcode :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;File -&amp;gt; Swift Packages -&amp;gt; Add Package Dependency...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter package URL : &lt;a href=&#34;https://github.com/ashleymills/Reachability.swift&#34;&gt;https://github.com/ashleymills/Reachability.swift&lt;/a&gt;, choose the latest release&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example - closures&lt;/h2&gt; &#xA;&lt;p&gt;NOTE: All closures are run on the &lt;strong&gt;main queue&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//declare this property where it won&#39;t go out of scope relative to your listener&#xA;let reachability = try! Reachability()&#xA;&#xA;reachability.whenReachable = { reachability in&#xA;    if reachability.connection == .wifi {&#xA;        print(&#34;Reachable via WiFi&#34;)&#xA;    } else {&#xA;        print(&#34;Reachable via Cellular&#34;)&#xA;    }&#xA;}&#xA;reachability.whenUnreachable = { _ in&#xA;    print(&#34;Not reachable&#34;)&#xA;}&#xA;&#xA;do {&#xA;    try reachability.startNotifier()&#xA;} catch {&#xA;    print(&#34;Unable to start notifier&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and for stopping notifications&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;reachability.stopNotifier()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example - notifications&lt;/h2&gt; &#xA;&lt;p&gt;NOTE: All notifications are delivered on the &lt;strong&gt;main queue&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//declare this property where it won&#39;t go out of scope relative to your listener&#xA;let reachability = try! Reachability()&#xA;&#xA;//declare this inside of viewWillAppear&#xA;&#xA;     NotificationCenter.default.addObserver(self, selector: #selector(reachabilityChanged(note:)), name: .reachabilityChanged, object: reachability)&#xA;    do{&#xA;      try reachability.startNotifier()&#xA;    }catch{&#xA;      print(&#34;could not start reachability notifier&#34;)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@objc func reachabilityChanged(note: Notification) {&#xA;&#xA;  let reachability = note.object as! Reachability&#xA;&#xA;  switch reachability.connection {&#xA;  case .wifi:&#xA;      print(&#34;Reachable via WiFi&#34;)&#xA;  case .cellular:&#xA;      print(&#34;Reachable via Cellular&#34;)&#xA;  case .unavailable:&#xA;    print(&#34;Network not reachable&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and for stopping notifications&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;reachability.stopNotifier()&#xA;NotificationCenter.default.removeObserver(self, name: .reachabilityChanged, object: reachability)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Want to help?&lt;/h2&gt; &#xA;&lt;p&gt;Got a bug fix, or a new feature? Create a pull request and go for it!&lt;/p&gt; &#xA;&lt;h2&gt;Let me know!&lt;/h2&gt; &#xA;&lt;p&gt;If you use &lt;strong&gt;Reachability.swift&lt;/strong&gt;, please let me know about your app and I&#39;ll put a link &lt;a href=&#34;https://github.com/ashleymills/Reachability.swift/wiki/Apps-using-Reachability.swift&#34;&gt;here…&lt;/a&gt; and tell your friends!&lt;/p&gt; &#xA;&lt;p&gt;Cheers, Ash&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LeoMobileDeveloper/ios-developer-tools</title>
    <updated>2023-06-04T02:09:49Z</updated>
    <id>tag:github.com,2023-06-04:/LeoMobileDeveloper/ios-developer-tools</id>
    <link href="https://github.com/LeoMobileDeveloper/ios-developer-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools that every iOS developer should know.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#website&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#ide&#34;&gt;IDE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#dependency-manager&#34;&gt;Dependency Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#platform&#34;&gt;Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#command-line-tool&#34;&gt;Command Line Tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#debug&#34;&gt;DEBUG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#project-analyze&#34;&gt;Project Analyze&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#network&#34;&gt;Network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#data&#34;&gt;Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#compiler&#34;&gt;Compiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#localization&#34;&gt;Localization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#reverse-engineering&#34;&gt;Reverse engineering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#app-guard&#34;&gt;App Guard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#chrome&#34;&gt;Chrome Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LeoMobileDeveloper/ios-developer-tools/master/#other&#34;&gt;Other&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/&#34;&gt;stackoverflow&lt;/a&gt; Stack Overflow is a question and answer site for professional and enthusiast programmers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/devforums/&#34;&gt;Apple Developer Forums&lt;/a&gt; The Apple Developer Forums are a great place to post questions and share comments with fellow developers and Apple engineers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.objc.io/&#34;&gt;objc.io&lt;/a&gt; objc.io publishes books, videos, and articles on advanced techniques for iOS and macOS development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nshipster.com/&#34;&gt;nshipster&lt;/a&gt; NSHipster is a journal of the overlooked bits in Objective-C, Swift, and Cocoa. Updated weekly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/ios/&#34;&gt;raywenderlich&lt;/a&gt; Learn iOS development in Swift.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/ios-os-x-development&#34;&gt;medium&lt;/a&gt; Stories and technical tips about building apps for iOS, Apple Watch, and iPad/iPhone&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sdmg15/Best-websites-a-programmer-should-visit&#34;&gt;Best-websites-a-programmer-should-visit&lt;/a&gt; 🔗 Some useful websites for programmers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://app.quicktype.io/&#34;&gt;quicktype&lt;/a&gt; Parse JSON in swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Apple&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/wwdc/&#34;&gt;WWDC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensource.apple.com/tarballs&#34;&gt;Apple Open Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com//contact/app-store/promote/&#34;&gt;App Store Promote&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/contact/app-store/&#34;&gt;Expedited App Review&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/design/resources/&#34;&gt;Apple Design Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/app-store/search/&#34;&gt;Optimizing for App Store Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/system-status/&#34;&gt;Apple System Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/app-store/review/guidelines/&#34;&gt;App Store Review Guidelines&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/cn/app-store/review/guidelines/&#34;&gt;Simplified Chinese&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/app-store/subscriptions/&#34;&gt;Auto-renewable Subscriptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.apple.com/app-store-connect&#34;&gt;App Store Connect Help&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;IDE&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;Xcode&lt;/a&gt; you will spend most of your time with it &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/theswiftdev/awesome-xcode-extensions&#34;&gt;awesome-xcode-extensions&lt;/a&gt; Awesome native Xcode extensions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Jintin/Swimat&#34;&gt;Swimat&lt;/a&gt; Swimat is an Xcode plug-in to format your Swift code.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/iGhibli/iOS-DeviceSupport/tree/master/DeviceSupport&#34;&gt;iOS-DeviceSupport&lt;/a&gt; This repository holds the device support files for the iOS, and I will update it regularly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; + &lt;a href=&#34;https://nuclide.io/&#34;&gt;Nuclide&lt;/a&gt; If you need to write react-native Code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://macdown.uranusjr.com/&#34;&gt;MacDown&lt;/a&gt; open source Markdown editor for macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; Visual Studio Code is a source code editor. It includes support for debugging, embedded Git control, syntax highlighting, intelligent code completion, snippets, and code refactoring.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://staruml.io/&#34;&gt;starUML&lt;/a&gt; A sophisticated software modeler for agile and concise modeling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependency Manager&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; dependency manager for Swift and Objective-C Cocoa projects &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/segiddins/cocoapods-dependencies&#34;&gt;cocoapods-dependencies&lt;/a&gt; Shows a project&#39;s CocoaPods dependency graph&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Ruenzuo/cocoapods-amimono&#34;&gt;cocoapods-amimono&lt;/a&gt; Move all dynamic frameworks symbols into the main executable.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/CocoaPods/cocoapods-packager&#34;&gt;cocoapods-packager&lt;/a&gt; CocoaPods plugin which allows you to generate a static library from a podspec.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/leavez/cocoapods-static-swift-framework&#34;&gt;cocoapods-static-swift-framework&lt;/a&gt; A cocoapods plugin enables static framework for all pods&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; A simple, decentralized dependency manager for Cocoa&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;Accio&lt;/a&gt; A dependency manager driven by SwiftPM that works for iOS/tvOS/watchOS/macOS projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Platform&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt; Firebase is a BaaS  (Backend-as-a-Service) that can be your server, datastore, and API at the same time. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://firebase.google.com/docs/crashlytics/&#34;&gt;Crashlytics&lt;/a&gt; Spend less time troubleshooting &amp;amp; more time building great apps.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://parseplatform.org/&#34;&gt;Parse&lt;/a&gt; Build applications faster with object and file storage, user authentication, push notifications, dashboard and more out of the box.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Command Line Tool&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html&#34;&gt;xcodebuild&lt;/a&gt; and - &lt;a href=&#34;https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcrun.1.html&#34;&gt;xcrun&lt;/a&gt; command line tool to build and archive app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/xctool&#34;&gt;xctool&lt;/a&gt; An extension for Apple&#39;s xcodebuild that makes it easier to test iOS and macOS apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/idb&#34;&gt;idb&lt;/a&gt; idb is a flexible command line interface for automating iOS simulators and devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/xcbuild&#34;&gt;xcbuild&lt;/a&gt; xcbuild is an Xcode-compatible build tool with the goal of providing faster builds, better documentation of the build process and running on multiple platforms (macOS, Linux, and Windows)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/venmo/synx&#34;&gt;synx&lt;/a&gt; A command-line tool that reorganizes your Xcode project folder to match your Xcode groups&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Karumi/Kin&#34;&gt;Kin&lt;/a&gt; Simple PBXProj Verifier (If you has problem to git merge the project.pbxproj file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;tmux&lt;/a&gt; tmux is a &#34;terminal multiplexer&#34;, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; iTerm2 is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.10 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/&#34;&gt;oh-my-zsh&lt;/a&gt; A delightful community-driven (with 1,300+ contributors) framework for managing your zsh configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supermarin/xcpretty&#34;&gt;xcpretty&lt;/a&gt; Flexible and fast xcodebuild formatter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;Jazzy&lt;/a&gt; Soulful docs for Swift &amp;amp; Objective-C&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lyft/xiblint&#34;&gt;xiblint&lt;/a&gt; A tool for linting storyboard and xib files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/brew&#34;&gt;brew&lt;/a&gt; 🍺 The missing package manager for macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AlDanial/cloc&#34;&gt;cloc&lt;/a&gt; cloc counts blank lines, comment lines, and physical lines of source code in many programming languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xced/xcproj&#34;&gt;xcproj&lt;/a&gt; Command line tool for manipulating Xcode project files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wting/autojump&#34;&gt;autojump&lt;/a&gt; A cd command that learns - easily navigate directories from the command line&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;SwiftFormat&lt;/a&gt; A code library and command-line formatting tool for reformatting Swift code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/inamiy/SwiftRewriter&#34;&gt;SwiftRewriter&lt;/a&gt; 📝 Swift code formatter using SwiftSyntax.&lt;/li&gt; &#xA; &lt;li&gt;objdump llvm object file dumper&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yonaskolb/XcodeGen&#34;&gt;XcodeGen&lt;/a&gt; A Swift command line tool for generating your Xcode project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.theiphonewiki.com/wiki/Plutil&#34;&gt;plutil&lt;/a&gt; plutil is a program that can convert .plist files between a binary version and an XML version. Currently, there are two versions of this utility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://llvm.org/docs/CommandGuide/dsymutil.html&#34;&gt;dsymutil&lt;/a&gt; dsymutil links the DWARF debug information found in the object files for an executable executable by using debug symbols information contained in its symbol table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/technotes/tn2151/_index.html&#34;&gt;symboliccrash&lt;/a&gt; Symbolicating crash reports&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-argument-parser&#34;&gt;swift-argument-parser&lt;/a&gt; Open-source library that makes it straightforward to parse command-line arguments in Swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;DEBUG&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/index.html&#34;&gt;Instruments&lt;/a&gt; Instruments is a powerful and flexible performance-analysis and testing tool that’s part of the Xcode tool set. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/google/gtm_load_timer&#34;&gt;gtm_load_timer&lt;/a&gt; A framework and instrument for timing Objective C +load messages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jlfwong/speedscope&#34;&gt;speedscope&lt;/a&gt; Flame graphs of Time Profiler&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dbukowski/DBDebugToolkit&#34;&gt;DBDebugToolkit&lt;/a&gt; Set of easy to use debugging tools for iOS developers &amp;amp; QA engineers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fbsonar.com/&#34;&gt;Flipper&lt;/a&gt; Flipper is a platform for debugging mobile apps on iOS and Android. Visualize, inspect, and control your apps from a simple desktop interface. Use Flipper as is or extend it using the plugin API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/chisel&#34;&gt;chisel&lt;/a&gt; Chisel is a collection of LLDB commands to assist debugging iOS apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CocoaLumberjack/CocoaLumberjack&#34;&gt;CocoaLumberjack&lt;/a&gt; A fast &amp;amp; simple, yet powerful &amp;amp; flexible logging framework for Mac and iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/square/PonyDebugger&#34;&gt;PonyDebugger&lt;/a&gt;Remote network and data debugging for your native iOS app using Chrome Developer Tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/answer-huang/dSYMTools&#34;&gt;dSYMTools&lt;/a&gt; Analyze crash log with DSYM file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/Hexspeak&#34;&gt;Hexspeak&lt;/a&gt; Table about exception code in crash log&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Flipboard/FLEX&#34;&gt;FLEX&lt;/a&gt; An in-app debugging and exploration tool for iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/meitu/MTHawkeye&#34;&gt;MTHawkeye&lt;/a&gt; Profiling / Debugging assist tools for iOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zixun/GodEye&#34;&gt;GodEye&lt;/a&gt; Automaticly display Log,Crash,Network,ANR,Leak,CPU,RAM,FPS,NetFlow,Folder and etc with one line of code based on Swift. Just like God opened his eyes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johnno1962/injectionforxcode&#34;&gt;injectionforxcode&lt;/a&gt; Injection for Xcode is an Xcode plugin (available via Alcatraz) or AppCode that dynamically inserts new Swift / Objective-C code into a running app in order to speed up your build process&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Naituw/WBWebViewConsole&#34;&gt;WBWebViewConsole&lt;/a&gt; In-App debug console for your UIWebView &amp;amp; WKWebView&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/ios-webkit-debug-proxy&#34;&gt;ios-webkit-debug-proxy&lt;/a&gt; A DevTools proxy (Chrome Remote Debugging Protocol) for iOS devices (Safari Remote Web Inspector).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wuchangming/spy-debugger&#34;&gt;spy-debugger&lt;/a&gt; WebView,WeChat WebView,Safari Debugger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/everettjf/AppleTrace&#34;&gt;AppleTrace&lt;/a&gt; Objective C message tracing tool for iOS/macOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lemonjar.com/iosconsole/&#34;&gt;iOS Console&lt;/a&gt; iOS Console allows you to view iOS console logs directly from your Mac&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wigl/iSimulator&#34;&gt;iSimulator&lt;/a&gt; iSimulator is a GUI utility to control the Simulator, and manage the app installed on the simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/didi/DoraemonKit&#34;&gt;DoraemonKit&lt;/a&gt; A full-featured App (iOS &amp;amp; Android) development assistant.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/noodlewerk/NWPusher&#34;&gt;NWPusher&lt;/a&gt; OS X and iOS application and framework to play with the Apple Push Notification service (APNs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KnuffApp/Knuff&#34;&gt;Knuff&lt;/a&gt; The debug application for Apple Push Notification Service (APNs).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/matrix&#34;&gt;matrix&lt;/a&gt; Matrix is a plugin style, non-invasive APM system developed by WeChat.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.m.wikipedia.org/wiki/Hexspeak&#34;&gt;Hexspeak&lt;/a&gt; termination code detail in crash log&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.plcrashreporter.org/&#34;&gt;PLCrashReporter&lt;/a&gt; Reliable, open-source crash reporting for iOS and Mac OS X.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kstenerud/KSCrash&#34;&gt;KSCrash&lt;/a&gt; The Ultimate iOS Crash Reporter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indragiek/InAppViewDebugger&#34;&gt;InAppViewDebugger&lt;/a&gt; A UIView debugger (like Reveal or Xcode) that can be embedded in an app for on-device view debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/willowtreeapps/Hyperion-iOS&#34;&gt;Hyperion&lt;/a&gt; In-app design review tool to inspect measurements, attributes, and animations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/QMUI/LookinServer&#34;&gt;LookinServer&lt;/a&gt; Free macOS app for iOS view debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/isavynskyi/LayoutInspector&#34;&gt;LayoutInspector&lt;/a&gt; Tool to debug layouts directly on iOS devices: inspect layers in 3D and debug each visible view attributes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spotify/XCLogParser&#34;&gt;XCLogParser&lt;/a&gt; Tool to parse the SLF serialization format used by Xcode and xcodebuild to store its Build and Test logs (xcactivitylog).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.scootersoftware.com/download.php&#34;&gt;beyond compare&lt;/a&gt; Compare files and folders using simple, powerful commands that focus on the differences you&#39;re interested in and ignore those you&#39;re not. Merge changes, synchronize files, and generate reports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tobefuturer/restore-symbol&#34;&gt;restore-symbol&lt;/a&gt; A reverse engineering tool to restore stripped symbol table for iOS app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Memory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/FBRetainCycleDetector&#34;&gt;FBRetainCycleDetector&lt;/a&gt; iOS library to help detecting retain cycles in runtime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/FBMemoryProfiler&#34;&gt;FBMemoryProfiler&lt;/a&gt; iOS tool that helps with profiling iOS Memory usage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/FBAllocationTracker&#34;&gt;FBAllocationTracker&lt;/a&gt; iOS library that helps tracking all allocated Objective-C objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/OOMDetector&#34;&gt;OOMDetector&lt;/a&gt; OOMDetector is a memory monitoring component for iOS which provides you with OOM monitoring, memory allocation monitoring, memory leak detection and other functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/LifetimeTracker&#34;&gt;LifetimeTracker&lt;/a&gt; Find retain cycles / memory leaks sooner&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Analyze&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://oclint.org/&#34;&gt;oclint&lt;/a&gt; Static code analysis tool for improving quality and reducing defects by inspecting C, C++ and Objective-C code and looking for potential problems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;swiftlint&lt;/a&gt; A tool to enforce Swift style and conventions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PaulTaykalo/objc-dependency-visualizer&#34;&gt;objc-dependency-visualizer&lt;/a&gt; Objective-C and Swift dependency visualizer. It&#39;s tool that helps to visualize current state of your project. It&#39;s really easy to see how tight your classes are coupled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tinymind&#34;&gt;LSUnusedResources&lt;/a&gt; A Mac App to find unused images and resources in XCode project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/netyouli/WHC_ScanUnreferenceImageTool&#34;&gt;WHC_ScanUnreferenceImageTool&lt;/a&gt; Scanning project does not use images in tool, delete without reference images to reduce the packaging volume&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onevcat/FengNiao&#34;&gt;FengNiao&lt;/a&gt; A command line tool for cleaning unused resources in Xcode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fastred/IBAnalyzer&#34;&gt;IBAnalyzer&lt;/a&gt; Find common xib and storyboard-related problems without running your app or writing unit tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.harukizaemon.com/simian/index.html&#34;&gt;Simian&lt;/a&gt; Similarity Analyser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/steventroughtonsmith/cartool&#34;&gt;cartool&lt;/a&gt; Export images from OS X / iOS .car CoreUI archives&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kangwang1988/XcodeZombieCode&#34;&gt;XcodeZombieCode&lt;/a&gt; A source-code level/Clang Approach&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://fauxpasapp.com/&#34;&gt;Faux Pas&lt;/a&gt; Find errors in your iOS or Mac project(Not free)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuist/xcodeproj&#34;&gt;xcodeproj&lt;/a&gt; 📝 Read, update and write your Xcode projects &lt;a href=&#34;https://tuist.github.io/xcodeproj/&#34;&gt;https://tuist.github.io/xcodeproj/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nst/objc_dep&#34;&gt;objc_dep&lt;/a&gt; Graph the import dependencies in an Objective-C project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/insidegui/AssetCatalogTinkerer&#34;&gt;AssetCatalogTinkerer&lt;/a&gt; An app that lets you open .car files and browse/extract their images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peripheryapp/periphery&#34;&gt;periphery&lt;/a&gt; Eliminate Unused Swift Code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dblock/fui&#34;&gt;fui&lt;/a&gt; Find unused Objective-C imports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nst/objc_cover&#34;&gt;objc_cover&lt;/a&gt; Quick Python script over otool to help spotting potentially unused methods in Objective-C Mach-O executable files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/woshiccm/Pecker.git&#34;&gt;Pecker&lt;/a&gt; A tool to detect unused Swift code based on &lt;a href=&#34;https://github.com/apple/indexstore-db.git&#34;&gt;IndexStoreDB&lt;/a&gt; and &lt;a href=&#34;https://github.com/apple/swift-syntax.git&#34;&gt;SwiftSyntax&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Network&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.charlesproxy.com/&#34;&gt;Charles&lt;/a&gt; Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://proxyman.io&#34;&gt;Proxyman&lt;/a&gt; Proxyman 👨‍🚀 is a high-performance macOS app, which enables developers to view HTTP/HTTPS requests from apps and domains. Support iOS Simulator and iOS devices. Easy to use and user friendly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt; Faster, easier API development&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/esnet/iperf&#34;&gt;iperf&lt;/a&gt; iperf3: A TCP, UDP, and SCTP network bandwidth measurement tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getlantern/lantern&#34;&gt;Lantern&lt;/a&gt; Lantern delivers fast access to the open Internet&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shadowsocks.org/en/index.html&#34;&gt;shadowsocks&lt;/a&gt; A secure socks5 proxy,designed to protect your Internet traffic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;wireshark&lt;/a&gt; Wireshark is the world’s foremost and widely-used network protocol analyzer. It lets you see what’s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kasketis/netfox&#34;&gt;netfox&lt;/a&gt; A lightweight, one line setup, iOS / OSX network debugging library! 🦊&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swisspol/GCDWebServer&#34;&gt;GCDWebServer&lt;/a&gt; GCDWebServer is a modern and lightweight GCD based HTTP 1.1 server designed to be embedded in iOS, macOS &amp;amp; tvOS apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jsonlint.com/&#34;&gt;JSONLint&lt;/a&gt; JSONLint is a validator and reformatter for JSON, a lightweight data-interchange format&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmusolino/Wormholy&#34;&gt;Wormholy&lt;/a&gt; iOS network debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yagiz/Bagel&#34;&gt;Bagel&lt;/a&gt; a little native network debugging tool for iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://debookee.com/&#34;&gt;Debookee&lt;/a&gt; Debookee is a simple and powerful network traffic analyzer for macOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sqlitebrowser.org/&#34;&gt;sqlitebrowser&lt;/a&gt; DB Browser for SQLite&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tableplus.com/&#34;&gt;TablePlus&lt;/a&gt; Modern, native GUI client for SQLite&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://simpholders.com/&#34;&gt;SimPholders&lt;/a&gt; Access all applications from your menu bar,and quick open Sandbox of Simulator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dsmelov/simsim&#34;&gt;SimSim&lt;/a&gt; Fast, stable, free alternative to SimPholders&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sqlcipher/sqlcipher&#34;&gt;SQLCipher&lt;/a&gt; SQLCipher is an SQLite extension that provides 256 bit AES encryption of database files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiler&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazel&#34;&gt;bazel&lt;/a&gt; A fast, scalable, multi-language and extensible build system &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/pinterest/PodToBUILD&#34;&gt;PodToBUILD&lt;/a&gt; An easy way to build CocoaPods with Bazel by Pinterest&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spotify/XCMetrics&#34;&gt;XCMetrics&lt;/a&gt; XCMetrics is the easiest way to collect Xcode builds metrics and improve your developer productivity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ccache.samba.org/&#34;&gt;ccache&lt;/a&gt; ccache is a compiler cache. It speeds up recompilation by caching previous compilations and detecting when the same compilation is being done again&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agens-no/swiff&#34;&gt;swiff&lt;/a&gt; Human readable time diffs on lines of output when running e.g. build commands like fastlane&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/macmade/ClangKit&#34;&gt;ClangKit&lt;/a&gt; ClangKit provides an Objective-C frontend to LibClang. Source tokenization, diagnostics and fix-its are actually implemented.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fastred/Optimizing-Swift-Build-Times&#34;&gt;Optimizing-Swift-Build-Times&lt;/a&gt; Collection of advice on optimizing compile times of Swift projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ninja-build.org/&#34;&gt;Ninja&lt;/a&gt; Ninja is a small build system with a focus on speed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kripken/emscripten&#34;&gt;emscripten&lt;/a&gt; An LLVM-to-JavaScript Compiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antlr/antlr4&#34;&gt;antlr4&lt;/a&gt; ANTLR (ANother Tool for Language Recognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. &lt;a href=&#34;http://antlr.org&#34;&gt;http://antlr.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode&#34;&gt;BuildTimeAnalyzer-for-Xcode&lt;/a&gt; Build Time Analyzer for Swift&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpsim/SourceKitten&#34;&gt;SourceKitten&lt;/a&gt; An adorable little framework and command line tool for interacting with SourceKit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michaeleisel/zld&#34;&gt;zld&lt;/a&gt; A faster version of Apple&#39;s linker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xcconfigs/xcconfigs&#34;&gt;xcconfigs&lt;/a&gt; Common Xcode configuration files/settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/testflight/&#34;&gt;TestFlight&lt;/a&gt; TestFlight makes it easy to invite users to test your apps and collect valuable feedback before releasing your apps on the App Store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://appium.io/&#34;&gt;appium&lt;/a&gt; Appium is an open source test automation framework for use with native, hybrid and mobile web apps. It drives iOS, Android, and Windows apps using the WebDriver protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookarchive/ios-snapshot-test-case&#34;&gt;FBSnapshotTestCase&lt;/a&gt; Snapshot view unit tests for iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kiwi-bdd/Kiwi&#34;&gt;Kiwi&lt;/a&gt; Simple BDD for iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Quick/Quick&#34;&gt;Quick&lt;/a&gt; The Swift (and Objective-C) testing framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/erikdoe/ocmock&#34;&gt;OCMock&lt;/a&gt; Mock objects for Objective-C&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kif-framework/KIF&#34;&gt;KIF&lt;/a&gt; Keep It Functional - An iOS Functional Testing Framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/specta/specta&#34;&gt;Specta&lt;/a&gt; A light-weight TDD / BDD framework for Objective-C.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/EarlGrey&#34;&gt;EarlGrey&lt;/a&gt; 🍵 iOS UI Automation Test Framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zalando/SwiftMonkey&#34;&gt;SwiftMonkey&lt;/a&gt; A framework for doing randomised UI testing of iOS apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-snapshot-testing&#34;&gt;swift-snapshot-testing&lt;/a&gt; 📸 Delightful Swift snapshot testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonreid/XcodeCoverage&#34;&gt;XcodeCoverage&lt;/a&gt; Code coverage for Xcode projects (Objective-C only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ios-control/ios-deploy&#34;&gt;ios-deploy&lt;/a&gt; Install and debug iPhone apps from the command line, without using Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libimobiledevice/libimobiledevice&#34;&gt;libimobiledevice&lt;/a&gt; A cross-platform protocol library to communicate with iOS devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/libimobiledevice/usbmuxd&#34;&gt;usbmuxd&lt;/a&gt; A socket daemon to multiplex connections from and to iOS devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case&#34;&gt;ios-snapshot-test-case&lt;/a&gt; Snapshot view unit tests for iOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://localazy.com&#34;&gt;Localazy&lt;/a&gt; - Developer-friendly localization tool for iOS and macOS apps supporting .strings, .stringsdict, .plist and XLIFF files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cunningo.com/locastudio/index.html&#34;&gt;Loca Studio&lt;/a&gt; Analyze, review, and edit your app translations. Can directly open the Xcode Localization Catalog (xcloc) and XLIFF 1.2 file formats.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reverse engineering&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ipsw.me/&#34;&gt;IPSW&lt;/a&gt; Download current and previous versions of Apple&#39;s iOS Firmware and receive notifications when new firmwares are released.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://canijailbreak.com/&#34;&gt;canijailbreak&lt;/a&gt; jailbreak tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DanTheMan827/ios-app-signer&#34;&gt;ios-app-signer&lt;/a&gt; This is an app for OS X that can (re)sign apps and bundle them into ipa files that are ready to be installed on an iOS device.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AloneMonkey/MonkeyDev&#34;&gt;MonkeyDev&lt;/a&gt; CaptainHook Tweak、Logos Tweak and Command-line Tool、Patch iOS Apps, Without Jailbreak.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stevenygard.com/projects/class-dump/&#34;&gt;class dump&lt;/a&gt; a command-line utility for examining the Objective-C runtime information stored in Mach-O files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ptoomey3/Keychain-Dumper&#34;&gt;Keychain-Dumper&lt;/a&gt;A tool to check which keychain items are available to an attacker once an iOS device has been jailbroken&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://revealapp.com/&#34;&gt;reveal&lt;/a&gt; Reveal brings powerful runtime view debugging to iOS developers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/theos/theos&#34;&gt;theos&lt;/a&gt; Unified cross-platform Makefile system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://iphonedevwiki.net/index.php/Main_Page&#34;&gt;iPhoneDevWiki&lt;/a&gt; Wiki about jailbroken iOS development&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hopperapp.com/&#34;&gt;Hopper Disassembler&lt;/a&gt; Reverse engineering tool that lets you disassemble, decompile and debug your applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gdbinit/MachOView&#34;&gt;MachOView&lt;/a&gt; View the raw data of mach-o(iOS executable file format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Homebrew/ruby-macho&#34;&gt;ruby-macho&lt;/a&gt; 🔩 A pure-Ruby library for parsing Mach-O files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.frida.re/&#34;&gt;frida&lt;/a&gt; Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cycript.org/&#34;&gt;cycript&lt;/a&gt; Cycript allows developers to explore and modify running applications on either iOS or Mac OS X using a hybrid of Objective-C++ and JavaScript syntax through an interactive console that features syntax highlighting and tab completion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stefanesser/dumpdecrypted&#34;&gt;dumpdecrypted&lt;/a&gt; Dumps decrypted mach-o files from encrypted iPhone applications from memory to disk. This tool is necessary for security researchers to be able to look under the hood of encryption.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chaitin/passionfruit&#34;&gt;passionfruit&lt;/a&gt; Simple iOS app blackbox assessment tool. Powered by frida.re and vuejs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sensepost/objection&#34;&gt;objection&lt;/a&gt; Assess mobile applications and their security posture without the need for a jailbroken or rooted mobile device.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HikariObfuscator/Hikari&#34;&gt;Hikari&lt;/a&gt; LLVM Obfuscator &lt;a href=&#34;https://keybase.io/team/hikari&#34;&gt;https://keybase.io/team/hikari&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KJCracks/Clutch&#34;&gt;Clutch&lt;/a&gt; Fast iOS executable dumper&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unix.com/man-page/osx/1/otool/&#34;&gt;otool&lt;/a&gt; The otool command displays specified parts of object files or libraries. It can also disassemble:&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ss64.com/osx/xxd.html&#34;&gt;xxd&lt;/a&gt; xxd creates a hex dump of a given file or standard input. It can also convert a hex dump back to its original binary form&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://unixhelp.ed.ac.uk/CGI/man-cgi?nm&#34;&gt;nm&lt;/a&gt; nm is a utility that displays the symbol table of a given binary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.newosxbook.com/tools/jtool.html&#34;&gt;jtool&lt;/a&gt; The jtool command is meant to meet and exceed the functionality to XCode&#39;s otool(1), picking up along the way additional Mach-O commands such as atos(1), dyldinfo(1), nm(1), segedit(1), pagestuff(1), strings(1) , and even codesign(1) and the informal ldid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aquynh/capstone&#34;&gt;capstone&lt;/a&gt; Capstone disassembly/disassembler framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Maximus-/class-dump-swift&#34;&gt;class-dump-swift&lt;/a&gt; Swift Class Dumper&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bbs.iosre.com/&#34;&gt;iosre&lt;/a&gt; Chinese reverse engineering bbs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cyanzhong/Retriever&#34;&gt;Retriever&lt;/a&gt; Retrieving InfoPlist without Jailbreaking on iOS Devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nst/iOS-Runtime-Headers&#34;&gt;iOS-Runtime-Headers&lt;/a&gt; iOS Objective-C headers as derived from runtime introspection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://developer.limneos.net&#34;&gt;http://developer.limneos.net&lt;/a&gt; Website to browse iOS runtime headers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maciekish/iReSign&#34;&gt;iReSign&lt;/a&gt; iReSign allows iDevice app bundles (.ipa) files to be signed or resigned with a digital certificate from Apple for distribution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DeVaukz/MachO-Kit&#34;&gt;MachO-Kit&lt;/a&gt; A C/Objective-C library for parsing Mach-O files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tyilo/insert_dylib&#34;&gt;insert_dylib&lt;/a&gt; Command line utility for inserting a dylib load command into a Mach-O binary&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KJCracks/yololib&#34;&gt;yololib&lt;/a&gt; dylib injector for mach-o binaries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antons/dyld-shared-cache-big-sur&#34;&gt;dyld-shared-cache-big-sur&lt;/a&gt; Modifications to Apple&#39;s dyld project to fix Objective-C information when extracting dyld_shared_cache from macOS Big Sur to help Hopper generate readable pseudocode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/macmade/dyld_cache_extract&#34;&gt;dyld_cache_extract&lt;/a&gt; A macOS utility to extract dynamic libraries from the dyld_shared_cache of macOS and iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tobefuturer/app2dylib&#34;&gt;app2dylib&lt;/a&gt; A reverse engineering tool to convert iOS app to dylib&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/cn/app/apple-configurator-2/id1037126344?l=en&amp;amp;mt=12&#34;&gt;apple configuration2&lt;/a&gt; Download ipa file from App Store&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.iphonecake.com&#34;&gt;iphonecake.com&lt;/a&gt; Cracked iOS &amp;amp; Mac App Store&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexzielenski/optool&#34;&gt;optool&lt;/a&gt; optool is a tool which interfaces with MachO binaries in order to insert/remove load commands, strip code signatures, resign, and remove aslr. Below is its help.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://macholib.readthedocs.io/en/latest/&#34;&gt;Macholib&lt;/a&gt; macholib can be used to analyze and edit Mach-O headers, the executable format used by Mac OS X.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/fishhook&#34;&gt;fishhook&lt;/a&gt; A library that enables dynamically rebinding symbols in Mach-O binaries running on iOS. You can use fishhook to hook C function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Zuikyo/iOS-System-Symbols&#34;&gt;iOS-System-Symbols&lt;/a&gt; Share iOS system framework&#39;s symbol files. Useful for symbolicating iOS crash report.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.synalysis.net/&#34;&gt;Synalyze It&lt;/a&gt; Synalyze It! allows you to create a “grammar“ for your binary files interactively. Unlike in regular hex editors or viewers the files are interpreted automatically for you! Analysis of binary files has never been easier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;App Guard&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Polidea/ios-class-guard&#34;&gt;ios-class-guard&lt;/a&gt; Simple Objective-C obfuscator for Mach-O executables&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/obfuscator-llvm/obfuscator&#34;&gt;obfuscator&lt;/a&gt; obfuscator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pjebs/Obfuscator-iOS&#34;&gt;Obfuscator-iOS&lt;/a&gt; Secure your app by obfuscating all the hard-coded security-sensitive strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rockbruno/swiftshield&#34;&gt;swiftshield&lt;/a&gt; Swift Obfuscator that protects iOS apps against reverse engineering attacks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kam800/MachObfuscator&#34;&gt;MachObfuscator&lt;/a&gt; MachObfuscator is a programming-language-agnostic Mach-O apps obfuscator for Apple platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Image&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.google.com/speed/webp/docs/cwebp&#34;&gt;cwebp&lt;/a&gt; Compress an image file to a WebP file&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://imageoptim.com/mac&#34;&gt;ImageOptim&lt;/a&gt; ImageOptim makes images load faster&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tinypng.com/&#34;&gt;TinyPng.com&lt;/a&gt; Smart PNG and JPEG compression&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brightdigit/Speculid&#34;&gt;Speculid&lt;/a&gt; Easily Manage Graphics in Xcode Projects &lt;a href=&#34;https://speculid.com&#34;&gt;https://speculid.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Chrome&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg&#34;&gt;The Great Suspender&lt;/a&gt; Make your computer run smoothly by suspending the tabs you aren&#39;t using&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graphviz.org/&#34;&gt;Graphviz&lt;/a&gt; Gaphviz is open source graph visualization software. Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/utmapp/UTM&#34;&gt;UTM&lt;/a&gt; Virtual machines for iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; Alfred is an award-winning app for macOS which boosts your efficiency with hotkeys, keywords, text expansion and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bear.app/&#34;&gt;Bear&lt;/a&gt; Bear is a beautiful, flexible writing app for crafting notes and prose.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jenkins.io/index.html&#34;&gt;Jenkins&lt;/a&gt; Continuous integration (CI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/features/gitlab-ci-cd/&#34;&gt;GitLabCI&lt;/a&gt; CI in gitlab&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danger/danger&#34;&gt;danger&lt;/a&gt; Formalize your Pull Request etiquette.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fastlane/fastlane&#34;&gt;fastlane&lt;/a&gt; Automate building and releasing your iOS and Android apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gentlebytes.com/appledoc/&#34;&gt;appledoc&lt;/a&gt; Objective-C API documentation generator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sourcetreeapp.com/&#34;&gt;Source Tree&lt;/a&gt; Harness the power of Git and Hg in a beautifully simple application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gitkraken.com/&#34;&gt;gitkraken&lt;/a&gt; The legendary Git GUI client for Windows, Mac and Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paintcodeapp.com/&#34;&gt;PaintCode&lt;/a&gt; Turn drawings into code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.airsquirrels.com/reflector/&#34;&gt;reflector&lt;/a&gt; wireless mirroring and streaming receiver&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sketchapp.com/&#34;&gt;Sketch&lt;/a&gt; Sketch gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use package. Finally you can focus on what you do best: Design.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haiku.ai/&#34;&gt;Haiku&lt;/a&gt; Design components that snap into any codebase&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sketchapp.com/&#34;&gt;Sketch&lt;/a&gt; Sketch gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use package. Finally you can focus on what you do best: Design.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dribbble.com/&#34;&gt;Dribbble&lt;/a&gt; Dribbble is the leading destination to find &amp;amp; showcase creative work and home to the world&#39;s best design professionals&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gifbrewery.com/&#34;&gt;gif brewery&lt;/a&gt; Easy to create GIF&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/realm/jazzy&#34;&gt;jazzy&lt;/a&gt; Soulful docs for Swift &amp;amp; Objective-C&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airbnb/lottie-ios&#34;&gt;lottie-ios&lt;/a&gt; An iOS library to natively render After Effects vector animations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/toddmotto/public-apis&#34;&gt;public-apis&lt;/a&gt; A collective list of public JSON APIs。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://smartmockups.com/&#34;&gt;Smartmockups&lt;/a&gt; Free product mockup generator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.flaticon.com/&#34;&gt;flaticon&lt;/a&gt; 1,695,000 vector icons grouped in 35,450 packs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://semaphoreci.com/product/ios&#34;&gt;Semaphore CI for iOS&lt;/a&gt; Semaphore is the fastest way to test and deploy iOS apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/5887248/ios-app-maximum-memory-budget/15200855#15200855&#34;&gt;ios app maximum memory budget&lt;/a&gt; ios app maximum memory budget&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://draw.io&#34;&gt;draw.io&lt;/a&gt; draw.io is free online diagram software for making flowcharts, process diagrams, org charts, UML, ER and network diagrams.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pushmate.app&#34;&gt;PushMate&lt;/a&gt; PushMate is a MacOS app that solves common push notification problems by ensuring your push payloads are correct.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emojipedia.org&#34;&gt;emojipedia&lt;/a&gt; Wiki of emoji&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/waylybaye/XcodeCleaner&#34;&gt;XcodeCleaner&lt;/a&gt; Cleaner for Xcode.app built with react-native-macos&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robertherdzik/SkrybaMD&#34;&gt;SkrybaMD&lt;/a&gt; - Markdown Documentation generator. If your team need easy way to maintain and create documentation, this generator is for you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftify.com/#/converter/code/&#34;&gt;Swiftify&lt;/a&gt; - Objective-C to Swift Converter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swiftify.com/#/converter/storyboard2swiftui/&#34;&gt;Storyboard -&amp;gt; SwiftUI Converter&lt;/a&gt; - Storyboard / Xib to SwiftUI converter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DKalachniuk/XcodeProjects&#34;&gt;Xcode Projects&lt;/a&gt; - Open quickly your Xcode projects and very handy for cocoapods. Do pod install and pod update in 2 clicks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/xcorganizer/id1507556912&#34;&gt;XCOrganizer&lt;/a&gt; - Fast and easy Xcode projects search. Supports Xcode Projects, Workspaces, Playgrounds, Swift Packages&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>xmartlabs/Eureka</title>
    <updated>2023-06-04T02:09:49Z</updated>
    <id>tag:github.com,2023-06-04:/xmartlabs/Eureka</id>
    <link href="https://github.com/xmartlabs/Eureka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elegant iOS form builder in Swift&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Eureka.png&#34; alt=&#34;Eureka: Elegant form builder in Swift&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://travis-ci.org/xmartlabs/Eureka&#34;&gt;&lt;img src=&#34;https://travis-ci.org/xmartlabs/Eureka.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-iOS-blue.svg?style=flat&#34; alt=&#34;Platform iOS&#34;&gt; &lt;a href=&#34;https://developer.apple.com/swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift5-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Swift 5 compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Eureka&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Eureka.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-blue.svg?style=flat&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-xmartlabs-eureka&#34;&gt;&lt;img alt=&#34;codebeat badge&#34; src=&#34;https://codebeat.co/badges/16f29afb-f072-4633-9497-333c6eb71263&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Made with ❤️ by &lt;a href=&#34;http://xmartlabs.com&#34;&gt;XMARTLABS&lt;/a&gt;. This is the re-creation of &lt;a href=&#34;https://github.com/xmartlabs/XLForm&#34;&gt;XLForm&lt;/a&gt; in Swift.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Documentation/README_CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaExample1.gif&#34; width=&#34;220&#34;&gt; &lt;/th&gt; &#xA;   &lt;th&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaExample2.gif&#34; width=&#34;220&#34;&gt; &lt;/th&gt; &#xA;   &lt;th&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaExample3.gif&#34; width=&#34;220&#34;&gt; &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#how-to-create-a-form&#34;&gt;How to create a Form&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#getting-row-values&#34;&gt;Getting row values&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#using-the-callbacks&#34;&gt;Using the callbacks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#section-header-and-footer&#34;&gt;Section Header and Footer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#hide-show-rows&#34;&gt;Dynamically hide and show rows (or sections)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#list-sections&#34;&gt;List sections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#multivalued-sections&#34;&gt;Multivalued sections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#validations&#34;&gt;Validations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#swipe-actions&#34;&gt;Swipe Actions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#custom-rows&#34;&gt;Custom rows&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#basic-custom-rows&#34;&gt;Basic custom rows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#custom-inline-rows&#34;&gt;Custom inline rows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#custom-presenter-rows&#34;&gt;Custom presenter rows&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#row-catalog&#34;&gt;Row catalog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;For more information look at &lt;a href=&#34;http://blog.xmartlabs.com/2015/09/29/Introducing-Eureka-iOS-form-library-written-in-pure-Swift/&#34;&gt;our blog post&lt;/a&gt; that introduces &lt;em&gt;Eureka&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements (for latest release)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 11+&lt;/li&gt; &#xA; &lt;li&gt;Swift 5.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example project&lt;/h3&gt; &#xA;&lt;p&gt;You can clone and run the Example project to see examples of most of Eureka&#39;s features.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaNavigation.gif&#34; width=&#34;200&#34;&gt; &lt;/th&gt; &#xA;   &lt;th&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaRows.gif&#34; width=&#34;200&#34;&gt; &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;How to create a form&lt;/h3&gt; &#xA;&lt;p&gt;By extending &lt;code&gt;FormViewController&lt;/code&gt; you can then simply add sections and rows to the &lt;code&gt;form&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Eureka&#xA;&#xA;class MyFormViewController: FormViewController {&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        form +++ Section(&#34;Section1&#34;)&#xA;            &amp;lt;&amp;lt;&amp;lt; TextRow(){ row in&#xA;                row.title = &#34;Text Row&#34;&#xA;                row.placeholder = &#34;Enter text here&#34;&#xA;            }&#xA;            &amp;lt;&amp;lt;&amp;lt; PhoneRow(){&#xA;                $0.title = &#34;Phone Row&#34;&#xA;                $0.placeholder = &#34;And numbers here&#34;&#xA;            }&#xA;        +++ Section(&#34;Section2&#34;)&#xA;            &amp;lt;&amp;lt;&amp;lt; DateRow(){&#xA;                $0.title = &#34;Date Row&#34;&#xA;                $0.value = Date(timeIntervalSinceReferenceDate: 0)&#xA;            }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example we create two sections with standard rows, the result is this:&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaHowTo.gif&#34; width=&#34;200&#34; alt=&#34;Screenshot of Custom Cells&#34;&gt; &#xA;&lt;/center&gt; &#xA;&lt;p&gt;You could create a form by just setting up the &lt;code&gt;form&lt;/code&gt; property by yourself without extending from &lt;code&gt;FormViewController&lt;/code&gt; but this method is typically more convenient.&lt;/p&gt; &#xA;&lt;h4&gt;Configuring the keyboard navigation accesory&lt;/h4&gt; &#xA;&lt;p&gt;To change the behaviour of this you should set the navigation options of your controller. The &lt;code&gt;FormViewController&lt;/code&gt; has a &lt;code&gt;navigationOptions&lt;/code&gt; variable which is an enum and can have one or more of the following values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;disabled&lt;/strong&gt;: no view at all&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;enabled&lt;/strong&gt;: enable view at the bottom&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;stopDisabledRow&lt;/strong&gt;: if the navigation should stop when the next row is disabled&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;skipCanNotBecomeFirstResponderRow&lt;/strong&gt;: if the navigation should skip the rows that return false to &lt;code&gt;canBecomeFirstResponder()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default value is &lt;code&gt;enabled &amp;amp; skipCanNotBecomeFirstResponderRow&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To enable smooth scrolling to off-screen rows, enable it via the &lt;code&gt;animateScroll&lt;/code&gt; property. By default, the &lt;code&gt;FormViewController&lt;/code&gt; jumps immediately between rows when the user hits the next or previous buttons in the keyboard navigation accesory, including when the next row is off screen.&lt;/p&gt; &#xA;&lt;p&gt;To set the amount of space between the keyboard and the highlighted row following a navigation event, set the &lt;code&gt;rowKeyboardSpacing&lt;/code&gt; property. By default, when the form scrolls to an offscreen view no space will be left between the top of the keyboard and the bottom of the row.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyFormViewController: FormViewController {&#xA;&#xA;    override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        form = ...&#xA;&#xA;&#x9;// Enables the navigation accessory and stops navigation when a disabled row is encountered&#xA;&#x9;navigationOptions = RowNavigationOptions.Enabled.union(.StopDisabledRow)&#xA;&#x9;// Enables smooth scrolling on navigation to off-screen rows&#xA;&#x9;animateScroll = true&#xA;&#x9;// Leaves 20pt of space between the keyboard and the highlighted row after scrolling to an off screen row&#xA;&#x9;rowKeyboardSpacing = 20&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change the whole navigation accessory view, you will have to override the &lt;code&gt;navigationAccessoryView&lt;/code&gt; variable in your subclass of &lt;code&gt;FormViewController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting row values&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Row&lt;/code&gt; object holds a &lt;em&gt;&lt;strong&gt;value&lt;/strong&gt;&lt;/em&gt; of a specific type. For example, a &lt;code&gt;SwitchRow&lt;/code&gt; holds a &lt;code&gt;Bool&lt;/code&gt; value, while a &lt;code&gt;TextRow&lt;/code&gt; holds a &lt;code&gt;String&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Get the value of a single row&#xA;let row: TextRow? = form.rowBy(tag: &#34;MyRowTag&#34;)&#xA;let value = row.value&#xA;&#xA;// Get the value of all rows which have a Tag assigned&#xA;// The dictionary contains the &#39;rowTag&#39;:value pairs.&#xA;let valuesDictionary = form.values()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Operators&lt;/h3&gt; &#xA;&lt;p&gt;Eureka includes custom operators to make form creation easy:&lt;/p&gt; &#xA;&lt;h4&gt;+++ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Add a section&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;form +++ Section()&#xA;&#xA;// Chain it to add multiple Sections&#xA;form +++ Section(&#34;First Section&#34;) +++ Section(&#34;Another Section&#34;)&#xA;&#xA;// Or use it with rows and get a blank section for free&#xA;form +++ TextRow()&#xA;     +++ TextRow()  // Each row will be on a separate section&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&amp;lt;&amp;lt;&amp;lt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Insert a row&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;form +++ Section()&#xA;        &amp;lt;&amp;lt;&amp;lt; TextRow()&#xA;        &amp;lt;&amp;lt;&amp;lt; DateRow()&#xA;&#xA;// Or implicitly create the Section&#xA;form +++ TextRow()&#xA;        &amp;lt;&amp;lt;&amp;lt; DateRow()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;+= &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Append an array&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Append Sections into a Form&#xA;form += [Section(&#34;A&#34;), Section(&#34;B&#34;), Section(&#34;C&#34;)]&#xA;&#xA;// Append Rows into a Section&#xA;section += [TextRow(), DateRow()]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Result builders&lt;/h3&gt; &#xA;&lt;p&gt;Eureka includes result builders to make form creation easy:&lt;/p&gt; &#xA;&lt;h4&gt;@SectionBuilder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Section + Section&#xA;form = (Section(&#34;A&#34;) +++ {&#xA;    URLRow(&#34;UrlRow_f1&#34;) { $0.title = &#34;Url&#34; }&#xA;    if something {&#xA;        TwitterRow(&#34;TwitterRow_f2&#34;) { $0.title = &#34;Twitter&#34; }&#xA;    } else {&#xA;        TwitterRow(&#34;TwitterRow_f1&#34;) { $0.title = &#34;Twitter&#34; }&#xA;    }&#xA;    AccountRow(&#34;AccountRow_f1&#34;) { $0.title = &#34;Account&#34; }&#xA;})&#xA;&#xA;// Form + Section&#xA;form +++ {&#xA;    if something {&#xA;        PhoneRow(&#34;PhoneRow_f1&#34;) { $0.title = &#34;Phone&#34; }&#xA;    } else {&#xA;        PhoneRow(&#34;PhoneRow_f2&#34;) { $0.title = &#34;Phone&#34; }&#xA;    }&#xA;    PasswordRow(&#34;PasswordRow_f1&#34;) { $0.title = &#34;Password&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using the callbacks&lt;/h3&gt; &#xA;&lt;p&gt;Eureka includes callbacks to change the appearance and behavior of a row.&lt;/p&gt; &#xA;&lt;h4&gt;Understanding Row and Cell&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;code&gt;Row&lt;/code&gt; is an abstraction Eureka uses which holds a &lt;strong&gt;value&lt;/strong&gt; and contains the view &lt;code&gt;Cell&lt;/code&gt;. The &lt;code&gt;Cell&lt;/code&gt; manages the view and subclasses &lt;code&gt;UITableViewCell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row  = SwitchRow(&#34;SwitchRow&#34;) { row in      // initializer&#xA;                        row.title = &#34;The title&#34;&#xA;                    }.onChange { row in&#xA;                        row.title = (row.value ?? false) ? &#34;The title expands when on&#34; : &#34;The title&#34;&#xA;                        row.updateCell()&#xA;                    }.cellSetup { cell, row in&#xA;                        cell.backgroundColor = .lightGray&#xA;                    }.cellUpdate { cell, row in&#xA;                        cell.textLabel?.font = .italicSystemFont(ofSize: 18.0)&#xA;                }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaOnChange.gif&#34; width=&#34;300&#34; alt=&#34;Screenshot of Disabled Row&#34;&gt; &#xA;&lt;h4&gt;Callbacks list&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;onChange()&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Called when the value of a row changes. You might be interested in adjusting some parameters here or even make some other rows appear or disappear.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;onCellSelection()&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Called each time the user taps on the row and it gets selected. Note that this will also get called for disabled rows so you should start your code inside this callback with something like &lt;code&gt;guard !row.isDisabled else { return }&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;cellSetup()&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Called only once when the cell is first configured. Set permanent settings here.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;cellUpdate()&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Called each time the cell appears on screen. You can change the appearance here using variables that may not be present on cellSetup().&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;onCellHighlightChanged()&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Called whenever the cell or any subview become or resign the first responder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;onRowValidationChanged()&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Called whenever the the validation errors associated with a row changes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;onExpandInlineRow()&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Called before expanding the inline row. Applies to rows conforming &lt;code&gt;InlineRowType&lt;/code&gt; protocol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;onCollapseInlineRow()&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Called before collapsing the inline row. Applies to rows conforming &lt;code&gt;InlineRowType&lt;/code&gt; protocol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;onPresent()&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Called by a row just before presenting another view controller. Applies to rows conforming &lt;code&gt;PresenterRowType&lt;/code&gt; protocol. Use it to set up the presented controller.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Section Header and Footer&lt;/h3&gt; &#xA;&lt;p&gt;You can set a title &lt;code&gt;String&lt;/code&gt; or a custom &lt;code&gt;View&lt;/code&gt; as the header or footer of a &lt;code&gt;Section&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;String title&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Section(&#34;Title&#34;)&#xA;&#xA;Section(header: &#34;Title&#34;, footer: &#34;Footer Title&#34;)&#xA;&#xA;Section(footer: &#34;Footer Title&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom view&lt;/h4&gt; &#xA;&lt;p&gt;You can use a Custom View from a &lt;code&gt;.xib&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Section() { section in&#xA;    var header = HeaderFooterView&amp;lt;MyHeaderNibFile&amp;gt;(.nibFile(name: &#34;MyHeaderNibFile&#34;, bundle: nil))&#xA;&#xA;    // Will be called every time the header appears on screen&#xA;    header.onSetupView = { view, _ in&#xA;        // Commonly used to setup texts inside the view&#xA;        // Don&#39;t change the view hierarchy or size here!&#xA;    }&#xA;    section.header = header&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a custom &lt;code&gt;UIView&lt;/code&gt; created programmatically&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Section(){ section in&#xA;    var header = HeaderFooterView&amp;lt;MyCustomUIView&amp;gt;(.class)&#xA;    header.height = {100}&#xA;    header.onSetupView = { view, _ in&#xA;        view.backgroundColor = .red&#xA;    }&#xA;    section.header = header&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or just build the view with a Callback&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Section(){ section in&#xA;    section.header = {&#xA;          var header = HeaderFooterView&amp;lt;UIView&amp;gt;(.callback({&#xA;              let view = UIView(frame: CGRect(x: 0, y: 0, width: 100, height: 100))&#xA;              view.backgroundColor = .red&#xA;              return view&#xA;          }))&#xA;          header.height = { 100 }&#xA;          return header&#xA;        }()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamically hide and show rows (or sections) &lt;a name=&#34;hide-show-rows&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaSwitchSections.gif&#34; width=&#34;300&#34; alt=&#34;Screenshot of Hidden Rows&#34;&gt; &#xA;&lt;p&gt;In this case we are hiding and showing whole sections.&lt;/p&gt; &#xA;&lt;p&gt;To accomplish this each row has a &lt;code&gt;hidden&lt;/code&gt; variable of optional type &lt;code&gt;Condition&lt;/code&gt; which can be set using a function or &lt;code&gt;NSPredicate&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Hiding using a function condition&lt;/h4&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;function&lt;/code&gt; case of &lt;code&gt;Condition&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Condition.function([String], (Form)-&amp;gt;Bool)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The array of &lt;code&gt;String&lt;/code&gt; to pass should contain the tags of the rows this row depends on. Each time the value of any of those rows changes the function is reevaluated. The function then takes the &lt;code&gt;Form&lt;/code&gt; and returns a &lt;code&gt;Bool&lt;/code&gt; indicating whether the row should be hidden or not. This the most powerful way of setting up the &lt;code&gt;hidden&lt;/code&gt; property as it has no explicit limitations of what can be done.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;form +++ Section()&#xA;            &amp;lt;&amp;lt;&amp;lt; SwitchRow(&#34;switchRowTag&#34;){&#xA;                $0.title = &#34;Show message&#34;&#xA;            }&#xA;            &amp;lt;&amp;lt;&amp;lt; LabelRow(){&#xA;&#xA;                $0.hidden = Condition.function([&#34;switchRowTag&#34;], { form in&#xA;                    return !((form.rowBy(tag: &#34;switchRowTag&#34;) as? SwitchRow)?.value ?? false)&#xA;                })&#xA;                $0.title = &#34;Switch is on!&#34;&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaHidden.gif&#34; width=&#34;300&#34; alt=&#34;Screenshot of Hidden Rows&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum Condition {&#xA;    case function([String], (Form)-&amp;gt;Bool)&#xA;    case predicate(NSPredicate)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hiding using an NSPredicate&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;hidden&lt;/code&gt; variable can also be set with a NSPredicate. In the predicate string you can reference values of other rows by their tags to determine if a row should be hidden or visible. This will only work if the values of the rows the predicate has to check are NSObjects (String and Int will work as they are bridged to their ObjC counterparts, but enums won&#39;t work). Why could it then be useful to use predicates when they are more limited? Well, they can be much simpler, shorter and readable than functions. Look at this example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;$0.hidden = Condition.predicate(NSPredicate(format: &#34;$switchTag == false&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And we can write it even shorter since &lt;code&gt;Condition&lt;/code&gt; conforms to &lt;code&gt;ExpressibleByStringLiteral&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;$0.hidden = &#34;$switchTag == false&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: we will substitute the value of the row whose tag is &#39;switchTag&#39; instead of &#39;$switchTag&#39;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For all of this to work, &lt;strong&gt;all of the implicated rows must have a tag&lt;/strong&gt; as the tag will identify them.&lt;/p&gt; &#xA;&lt;p&gt;We can also hide a row by doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;$0.hidden = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as &lt;code&gt;Condition&lt;/code&gt; conforms to &lt;code&gt;ExpressibleByBooleanLiteral&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Not setting the &lt;code&gt;hidden&lt;/code&gt; variable will leave the row always visible.&lt;/p&gt; &#xA;&lt;p&gt;If you manually set the hidden (or disabled) condition after the form has been displayed you may have to call &lt;code&gt;row.evaluateHidden()&lt;/code&gt; to force Eureka to reevaluate the new condition. See &lt;a href=&#34;https://github.com/xmartlabs/Eureka#row-does-not-update-after-changing-hidden-or-disabled-condition&#34;&gt;this FAQ section&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h5&gt;Sections&lt;/h5&gt; &#xA;&lt;p&gt;For sections this works just the same. That means we can set up section &lt;code&gt;hidden&lt;/code&gt; property to show/hide it dynamically.&lt;/p&gt; &#xA;&lt;h5&gt;Disabling rows&lt;/h5&gt; &#xA;&lt;p&gt;To disable rows, each row has an &lt;code&gt;disabled&lt;/code&gt; variable which is also an optional &lt;code&gt;Condition&lt;/code&gt; type property. This variable also works the same as the &lt;code&gt;hidden&lt;/code&gt; variable so that it requires the rows to have a tag.&lt;/p&gt; &#xA;&lt;p&gt;Note that if you want to disable a row permanently you can also set &lt;code&gt;disabled&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;List Sections&lt;/h3&gt; &#xA;&lt;p&gt;To display a list of options, Eureka includes a special section called &lt;code&gt;SelectableSection&lt;/code&gt;. When creating one you need to pass the type of row to use in the options and the &lt;code&gt;selectionType&lt;/code&gt;. The &lt;code&gt;selectionType&lt;/code&gt; is an enum which can be either &lt;code&gt;multipleSelection&lt;/code&gt; or &lt;code&gt;singleSelection(enableDeselection: Bool)&lt;/code&gt; where the &lt;code&gt;enableDeselection&lt;/code&gt; parameter determines if the selected rows can be deselected or not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;form +++ SelectableSection&amp;lt;ListCheckRow&amp;lt;String&amp;gt;&amp;gt;(&#34;Where do you live&#34;, selectionType: .singleSelection(enableDeselection: true))&#xA;&#xA;let continents = [&#34;Africa&#34;, &#34;Antarctica&#34;, &#34;Asia&#34;, &#34;Australia&#34;, &#34;Europe&#34;, &#34;North America&#34;, &#34;South America&#34;]&#xA;for option in continents {&#xA;    form.last! &amp;lt;&amp;lt;&amp;lt; ListCheckRow&amp;lt;String&amp;gt;(option){ listRow in&#xA;        listRow.title = option&#xA;        listRow.selectableValue = option&#xA;        listRow.value = nil&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;What kind of rows can be used?&lt;/h5&gt; &#xA;&lt;p&gt;To create such a section you have to create a row that conforms the &lt;code&gt;SelectableRowType&lt;/code&gt; protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol SelectableRowType : RowType {&#xA;    var selectableValue : Value? { get set }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &lt;code&gt;selectableValue&lt;/code&gt; is where the value of the row will be permanently stored. The &lt;code&gt;value&lt;/code&gt; variable will be used to determine if the row is selected or not, being &#39;selectableValue&#39; if selected or nil otherwise. Eureka includes the &lt;code&gt;ListCheckRow&lt;/code&gt; which is used for example. In the custom rows of the Examples project you can also find the &lt;code&gt;ImageCheckRow&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Getting the selected rows&lt;/h5&gt; &#xA;&lt;p&gt;To easily get the selected row/s of a &lt;code&gt;SelectableSection&lt;/code&gt; there are two methods: &lt;code&gt;selectedRow()&lt;/code&gt; and &lt;code&gt;selectedRows()&lt;/code&gt; which can be called to get the selected row in case it is a &lt;code&gt;SingleSelection&lt;/code&gt; section or all the selected rows if it is a &lt;code&gt;MultipleSelection&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;h5&gt;Grouping options in sections&lt;/h5&gt; &#xA;&lt;p&gt;Additionally you can setup list of options to be grouped by sections using following properties of &lt;code&gt;SelectorViewController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sectionKeyForValue&lt;/code&gt; - a closure that should return key for particular row value. This key is later used to break options by sections.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sectionHeaderTitleForKey&lt;/code&gt; - a closure that returns header title for a section for particular key. By default returns the key itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sectionFooterTitleForKey&lt;/code&gt; - a closure that returns footer title for a section for particular key.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Multivalued Sections&lt;/h3&gt; &#xA;&lt;p&gt;Eureka supports multiple values for a certain field (such as telephone numbers in a contact) by using Multivalued sections. It allows us to easily create insertable, deletable and reorderable sections.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaMultivalued.gif&#34; width=&#34;300&#34; alt=&#34;Screenshot of Multivalued Section&#34;&gt; &#xA;&lt;h4&gt;How to create a multivalued section&lt;/h4&gt; &#xA;&lt;p&gt;In order to create a multivalued section we have to use &lt;code&gt;MultivaluedSection&lt;/code&gt; type instead of the regular &lt;code&gt;Section&lt;/code&gt; type. &lt;code&gt;MultivaluedSection&lt;/code&gt; extends &lt;code&gt;Section&lt;/code&gt; and has some additional properties to configure multivalued section behavior.&lt;/p&gt; &#xA;&lt;p&gt;let&#39;s dive into a code example...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;form +++&#xA;    MultivaluedSection(multivaluedOptions: [.Reorder, .Insert, .Delete],&#xA;                       header: &#34;Multivalued TextField&#34;,&#xA;                       footer: &#34;.Insert adds a &#39;Add Item&#39; (Add New Tag) button row as last cell.&#34;) {&#xA;        $0.addButtonProvider = { section in&#xA;            return ButtonRow(){&#xA;                $0.title = &#34;Add New Tag&#34;&#xA;            }&#xA;        }&#xA;        $0.multivaluedRowToInsertAt = { index in&#xA;            return NameRow() {&#xA;                $0.placeholder = &#34;Tag Name&#34;&#xA;            }&#xA;        }&#xA;        $0 &amp;lt;&amp;lt;&amp;lt; NameRow() {&#xA;            $0.placeholder = &#34;Tag Name&#34;&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Previous code snippet shows how to create a multivalued section. In this case we want to insert, delete and reorder rows as multivaluedOptions argument indicates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;addButtonProvider&lt;/code&gt; allows us to customize the button row which inserts a new row when tapped and &lt;code&gt;multivaluedOptions&lt;/code&gt; contains &lt;code&gt;.Insert&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;multivaluedRowToInsertAt&lt;/code&gt; closure property is called by Eureka each time a new row needs to be inserted. In order to provide the row to add into multivalued section we should set this property. Eureka passes the index as closure parameter. Notice that we can return any kind of row, even custom rows, even though in most cases multivalued section rows are of the same type.&lt;/p&gt; &#xA;&lt;p&gt;Eureka automatically adds a button row when we create a insertable multivalued section. We can customize how the this button row looks like as we explained before. &lt;code&gt;showInsertIconInAddButton&lt;/code&gt; property indicates if plus button (insert style) should appear in the left of the button, true by default.&lt;/p&gt; &#xA;&lt;p&gt;There are some considerations we need to have in mind when creating insertable sections. Any row added to the insertable multivalued section should be placed above the row that Eureka automatically adds to insert new rows. This can be easily achieved by adding these additional rows to the section from inside the section&#39;s initializer closure (last parameter of section initializer) so then Eureka adds the adds insert button at the end of the section.&lt;/p&gt; &#xA;&lt;h4&gt;Editing mode&lt;/h4&gt; &#xA;&lt;p&gt;By default Eureka will set the tableView&#39;s &lt;code&gt;isEditing&lt;/code&gt; to true only if there is a MultivaluedSection in the form. This will be done in &lt;code&gt;viewWillAppear&lt;/code&gt; the first time a form is presented.&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to use multivalued sections please take a look at Eureka example project which contains several usage examples.&lt;/p&gt; &#xA;&lt;h4&gt;Custom add button&lt;/h4&gt; &#xA;&lt;p&gt;If you want to use an add button which is not a &lt;code&gt;ButtonRow&lt;/code&gt; then you can use &lt;code&gt;GenericMultivaluedSection&amp;lt;AddButtonType&amp;gt;&lt;/code&gt;, where &lt;code&gt;AddButtonType&lt;/code&gt; is the type of the row you want to use as add button. This is useful if you want to use a custom row to change the UI of the button.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;GenericMultivaluedSection&amp;lt;LabelRow&amp;gt;(multivaluedOptions: [.Reorder, .Insert, .Delete], {&#xA;    $0.addButtonProvider = { section in&#xA;        return LabelRow(){&#xA;            $0.title = &#34;A Label row as add button&#34;&#xA;        }&#xA;    }&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Validations&lt;/h3&gt; &#xA;&lt;p&gt;Eureka 2.0.0 introduces the much requested built-in validations feature.&lt;/p&gt; &#xA;&lt;p&gt;A row has a collection of &lt;code&gt;Rules&lt;/code&gt; and a specific configuration that determines when validation rules should be evaluated.&lt;/p&gt; &#xA;&lt;p&gt;There are some rules provided by default, but you can also create new ones on your own.&lt;/p&gt; &#xA;&lt;p&gt;The provided rules are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RuleRequired&lt;/li&gt; &#xA; &lt;li&gt;RuleEmail&lt;/li&gt; &#xA; &lt;li&gt;RuleURL&lt;/li&gt; &#xA; &lt;li&gt;RuleGreaterThan, RuleGreaterOrEqualThan, RuleSmallerThan, RuleSmallerOrEqualThan&lt;/li&gt; &#xA; &lt;li&gt;RuleMinLength, RuleMaxLength&lt;/li&gt; &#xA; &lt;li&gt;RuleClosure&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s see how to set up the validation rules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;override func viewDidLoad() {&#xA;        super.viewDidLoad()&#xA;        form&#xA;          +++ Section(header: &#34;Required Rule&#34;, footer: &#34;Options: Validates on change&#34;)&#xA;&#xA;            &amp;lt;&amp;lt;&amp;lt; TextRow() {&#xA;                $0.title = &#34;Required Rule&#34;&#xA;                $0.add(rule: RuleRequired())&#xA;&#xA;&#x9;&#x9;// This could also have been achieved using a closure that returns nil if valid, or a ValidationError otherwise.&#xA;&#x9;&#x9;/*&#xA;&#x9;&#x9;let ruleRequiredViaClosure = RuleClosure&amp;lt;String&amp;gt; { rowValue in&#xA;&#x9;&#x9;return (rowValue == nil || rowValue!.isEmpty) ? ValidationError(msg: &#34;Field required!&#34;) : nil&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;$0.add(rule: ruleRequiredViaClosure)&#xA;&#x9;&#x9;*/&#xA;&#xA;                $0.validationOptions = .validatesOnChange&#xA;            }&#xA;            .cellUpdate { cell, row in&#xA;                if !row.isValid {&#xA;                    cell.titleLabel?.textColor = .systemRed&#xA;                }&#xA;            }&#xA;&#xA;          +++ Section(header: &#34;Email Rule, Required Rule&#34;, footer: &#34;Options: Validates on change after blurred&#34;)&#xA;&#xA;            &amp;lt;&amp;lt;&amp;lt; TextRow() {&#xA;                $0.title = &#34;Email Rule&#34;&#xA;                $0.add(rule: RuleRequired())&#xA;                $0.add(rule: RuleEmail())&#xA;                $0.validationOptions = .validatesOnChangeAfterBlurred&#xA;            }&#xA;            .cellUpdate { cell, row in&#xA;                if !row.isValid {&#xA;                    cell.titleLabel?.textColor = .systemRed&#xA;                }&#xA;            }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see in the previous code snippet we can set up as many rules as we want in a row by invoking row&#39;s &lt;code&gt;add(rule:)&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Row also provides &lt;code&gt;func remove(ruleWithIdentifier identifier: String)&lt;/code&gt; to remove a rule. In order to use it we must assign an id to the rule after creating it.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes the collection of rules we want to use on a row is the same we want to use on many other rows. In this case we can set up all validation rules using a &lt;code&gt;RuleSet&lt;/code&gt; which is a collection of validation rules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var rules = RuleSet&amp;lt;String&amp;gt;()&#xA;rules.add(rule: RuleRequired())&#xA;rules.add(rule: RuleEmail())&#xA;&#xA;let row = TextRow() {&#xA;            $0.title = &#34;Email Rule&#34;&#xA;            $0.add(ruleSet: rules)&#xA;            $0.validationOptions = .validatesOnChangeAfterBlurred&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Eureka allows us to specify when validation rules should be evaluated. We can do it by setting up &lt;code&gt;validationOptions&lt;/code&gt; row&#39;s property, which can have the following values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.validatesOnChange&lt;/code&gt; - Validates whenever a row value changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.validatesOnBlur&lt;/code&gt; - (Default value) validates right after the cell resigns first responder. Not applicable for all rows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.validatesOnChangeAfterBlurred&lt;/code&gt; - Validates whenever the row value changes after it resigns first responder for the first time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.validatesOnDemand&lt;/code&gt; - We should manually validate the row or form by invoking &lt;code&gt;validate()&lt;/code&gt; method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to validate the entire form (all the rows) you can manually invoke Form &lt;code&gt;validate()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;h4&gt;How to get validation errors&lt;/h4&gt; &#xA;&lt;p&gt;Each row has the &lt;code&gt;validationErrors&lt;/code&gt; property that can be used to retrieve all validation errors. This property just holds the validation error list of the latest row validation execution, which means it doesn&#39;t evaluate the validation rules of the row.&lt;/p&gt; &#xA;&lt;h4&gt;Note on types&lt;/h4&gt; &#xA;&lt;p&gt;As expected, the Rules must use the same types as the Row object. Be extra careful to check the row type used. You might see a compiler error (&#34;Incorrect arugment label in call (have &#39;rule:&#39; expected &#39;ruleSet:&#39;)&#34; that is not pointing to the problem when mixing types.&lt;/p&gt; &#xA;&lt;h3&gt;Swipe Actions&lt;/h3&gt; &#xA;&lt;p&gt;By using swipe actions we can define multiple &lt;code&gt;leadingSwipe&lt;/code&gt; and &lt;code&gt;trailingSwipe&lt;/code&gt; actions per row. As swipe actions depend on iOS system features, &lt;code&gt;leadingSwipe&lt;/code&gt; is available on iOS 11.0+ only.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s see how to define swipe actions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = TextRow() {&#xA;            let deleteAction = SwipeAction(&#xA;                style: .destructive,&#xA;                title: &#34;Delete&#34;,&#xA;                handler: { (action, row, completionHandler) in&#xA;                    //add your code here.&#xA;                    //make sure you call the completionHandler once done.&#xA;                    completionHandler?(true)&#xA;                })&#xA;            deleteAction.image = UIImage(named: &#34;icon-trash&#34;)&#xA;&#xA;            $0.trailingSwipe.actions = [deleteAction]&#xA;            $0.trailingSwipe.performsFirstActionWithFullSwipe = true&#xA;&#xA;            //please be aware: `leadingSwipe` is only available on iOS 11+ only&#xA;            let infoAction = SwipeAction(&#xA;                style: .normal,&#xA;                title: &#34;Info&#34;,&#xA;                handler: { (action, row, completionHandler) in&#xA;                    //add your code here.&#xA;                    //make sure you call the completionHandler once done.&#xA;                    completionHandler?(true)&#xA;                })&#xA;            infoAction.actionBackgroundColor = .blue&#xA;            infoAction.image = UIImage(named: &#34;icon-info&#34;)&#xA;&#xA;            $0.leadingSwipe.actions = [infoAction]&#xA;            $0.leadingSwipe.performsFirstActionWithFullSwipe = true&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Swipe Actions need &lt;code&gt;tableView.isEditing&lt;/code&gt; be set to &lt;code&gt;false&lt;/code&gt;. Eureka will set this to &lt;code&gt;true&lt;/code&gt; if there is a MultivaluedSection in the form (in the &lt;code&gt;viewWillAppear&lt;/code&gt;). If you have both MultivaluedSections and swipe actions in the same form you should set &lt;code&gt;isEditing&lt;/code&gt; according to your needs.&lt;/p&gt; &#xA;&lt;h2&gt;Custom rows&lt;/h2&gt; &#xA;&lt;p&gt;It is very common that you need a row that is different from those included in Eureka. If this is the case you will have to create your own row but this should not be difficult. You can read &lt;a href=&#34;https://blog.xmartlabs.com/2016/09/06/Eureka-custom-row-tutorial/&#34;&gt;this tutorial on how to create custom rows&lt;/a&gt; to get started. You might also want to have a look at &lt;a href=&#34;https://github.com/EurekaCommunity&#34;&gt;EurekaCommunity&lt;/a&gt; which includes some extra rows ready to be added to Eureka.&lt;/p&gt; &#xA;&lt;h3&gt;Basic custom rows&lt;/h3&gt; &#xA;&lt;p&gt;To create a row with custom behaviour and appearance you&#39;ll probably want to create subclasses of &lt;code&gt;Row&lt;/code&gt; and &lt;code&gt;Cell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Remember that &lt;code&gt;Row&lt;/code&gt; is the abstraction Eureka uses, while the &lt;code&gt;Cell&lt;/code&gt; is the actual &lt;code&gt;UITableViewCell&lt;/code&gt; in charge of the view. As the &lt;code&gt;Row&lt;/code&gt; contains the &lt;code&gt;Cell&lt;/code&gt;, both &lt;code&gt;Row&lt;/code&gt; and &lt;code&gt;Cell&lt;/code&gt; must be defined for the same &lt;strong&gt;value&lt;/strong&gt; type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Custom Cell with value type: Bool&#xA;// The cell is defined using a .xib, so we can set outlets :)&#xA;public class CustomCell: Cell&amp;lt;Bool&amp;gt;, CellType {&#xA;    @IBOutlet weak var switchControl: UISwitch!&#xA;    @IBOutlet weak var label: UILabel!&#xA;&#xA;    public override func setup() {&#xA;        super.setup()&#xA;        switchControl.addTarget(self, action: #selector(CustomCell.switchValueChanged), for: .valueChanged)&#xA;    }&#xA;&#xA;    func switchValueChanged(){&#xA;        row.value = switchControl.on&#xA;        row.updateCell() // Re-draws the cell which calls &#39;update&#39; bellow&#xA;    }&#xA;&#xA;    public override func update() {&#xA;        super.update()&#xA;        backgroundColor = (row.value ?? false) ? .white : .black&#xA;    }&#xA;}&#xA;&#xA;// The custom Row also has the cell: CustomCell and its correspond value&#xA;public final class CustomRow: Row&amp;lt;CustomCell&amp;gt;, RowType {&#xA;    required public init(tag: String?) {&#xA;        super.init(tag: tag)&#xA;        // We set the cellProvider to load the .xib corresponding to our cell&#xA;        cellProvider = CellProvider&amp;lt;CustomCell&amp;gt;(nibName: &#34;CustomCell&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result: &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaCustomRow.gif&#34; alt=&#34;Screenshot of Disabled Row&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; Custom rows need to subclass `Row&#xA;&lt;celltype&gt;&#xA; ` and conform to `RowType` protocol. Custom cells need to subclass `Cell&#xA; &lt;valuetype&gt;&#xA;  ` and conform to `CellType` protocol. &#xA;  &lt;p&gt;Just like the callbacks cellSetup and CellUpdate, the &lt;code&gt;Cell&lt;/code&gt; has the setup and update methods where you can customize it.&lt;/p&gt; &#xA;  &lt;h3&gt;Custom inline rows&lt;/h3&gt; &#xA;  &lt;p&gt;An inline row is a specific type of row that shows dynamically a row below it, normally an inline row changes between an expanded and collapsed mode whenever the row is tapped.&lt;/p&gt; &#xA;  &lt;p&gt;So to create an inline row we need 2 rows, the row that is &#34;always&#34; visible and the row that will expand/collapse.&lt;/p&gt; &#xA;  &lt;p&gt;Another requirement is that the value type of these 2 rows must be the same. This means if one row holds a &lt;code&gt;String&lt;/code&gt; value then the other must have a &lt;code&gt;String&lt;/code&gt; value too.&lt;/p&gt; &#xA;  &lt;p&gt;Once we have these 2 rows, we should make the top row type conform to &lt;code&gt;InlineRowType&lt;/code&gt;. This protocol requires you to define an &lt;code&gt;InlineRow&lt;/code&gt; typealias and a &lt;code&gt;setupInlineRow&lt;/code&gt; function. The &lt;code&gt;InlineRow&lt;/code&gt; type will be the type of the row that will expand/collapse. Take this as an example:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PickerInlineRow&amp;lt;T&amp;gt; : Row&amp;lt;PickerInlineCell&amp;lt;T&amp;gt;&amp;gt; where T: Equatable {&#xA;&#xA;    public typealias InlineRow = PickerRow&amp;lt;T&amp;gt;&#xA;    open var options = [T]()&#xA;&#xA;    required public init(tag: String?) {&#xA;        super.init(tag: tag)&#xA;    }&#xA;&#xA;    public func setupInlineRow(_ inlineRow: InlineRow) {&#xA;        inlineRow.options = self.options&#xA;        inlineRow.displayValueFor = self.displayValueFor&#xA;        inlineRow.cell.height = { UITableViewAutomaticDimension }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;The &lt;code&gt;InlineRowType&lt;/code&gt; will also add some methods to your inline row:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func expandInlineRow()&#xA;func collapseInlineRow()&#xA;func toggleInlineRow()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;These methods should work fine but should you want to override them keep in mind that it is &lt;code&gt;toggleInlineRow&lt;/code&gt; that has to call &lt;code&gt;expandInlineRow&lt;/code&gt; and &lt;code&gt;collapseInlineRow&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;Finally you must invoke &lt;code&gt;toggleInlineRow()&lt;/code&gt; when the row is selected, for example overriding &lt;code&gt;customDidSelect&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public override func customDidSelect() {&#xA;    super.customDidSelect()&#xA;    if !isDisabled {&#xA;        toggleInlineRow()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;Custom Presenter rows&lt;/h3&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;A Presenter row is a row that presents a new UIViewController.&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;p&gt;To create a custom Presenter row you must create a class that conforms the &lt;code&gt;PresenterRowType&lt;/code&gt; protocol. It is highly recommended to subclass &lt;code&gt;SelectorRow&lt;/code&gt; as it does conform to that protocol and adds other useful functionality.&lt;/p&gt; &#xA;  &lt;p&gt;The PresenterRowType protocol is defined as follows:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol PresenterRowType: TypedRowType {&#xA;&#xA;     associatedtype PresentedControllerType : UIViewController, TypedRowControllerType&#xA;&#xA;     /// Defines how the view controller will be presented, pushed, etc.&#xA;     var presentationMode: PresentationMode&amp;lt;PresentedControllerType&amp;gt;? { get set }&#xA;&#xA;     /// Will be called before the presentation occurs.&#xA;     var onPresentCallback: ((FormViewController, PresentedControllerType) -&amp;gt; Void)? { get set }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;The onPresentCallback will be called when the row is about to present another view controller. This is done in the &lt;code&gt;SelectorRow&lt;/code&gt; so if you do not subclass it you will have to call it yourself.&lt;/p&gt; &#xA;  &lt;p&gt;The &lt;code&gt;presentationMode&lt;/code&gt; is what defines how the controller is presented and which controller is presented. This presentation can be using a Segue identifier, a segue class, presenting a controller modally or pushing to a specific view controller. For example a CustomPushRow can be defined like this:&lt;/p&gt; &#xA;  &lt;p&gt;Let&#39;s see an example..&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;/// Generic row type where a user must select a value among several options.&#xA;open class SelectorRow&amp;lt;Cell: CellType&amp;gt;: OptionsRow&amp;lt;Cell&amp;gt;, PresenterRowType where Cell: BaseCell {&#xA;&#xA;&#xA;    /// Defines how the view controller will be presented, pushed, etc.&#xA;    open var presentationMode: PresentationMode&amp;lt;SelectorViewController&amp;lt;SelectorRow&amp;lt;Cell&amp;gt;&amp;gt;&amp;gt;?&#xA;&#xA;    /// Will be called before the presentation occurs.&#xA;    open var onPresentCallback: ((FormViewController, SelectorViewController&amp;lt;SelectorRow&amp;lt;Cell&amp;gt;&amp;gt;) -&amp;gt; Void)?&#xA;&#xA;    required public init(tag: String?) {&#xA;        super.init(tag: tag)&#xA;    }&#xA;&#xA;    /**&#xA;     Extends `didSelect` method&#xA;     */&#xA;    open override func customDidSelect() {&#xA;        super.customDidSelect()&#xA;        guard let presentationMode = presentationMode, !isDisabled else { return }&#xA;        if let controller = presentationMode.makeController() {&#xA;            controller.row = self&#xA;            controller.title = selectorTitle ?? controller.title&#xA;            onPresentCallback?(cell.formViewController()!, controller)&#xA;            presentationMode.present(controller, row: self, presentingController: self.cell.formViewController()!)&#xA;        } else {&#xA;            presentationMode.present(nil, row: self, presentingController: self.cell.formViewController()!)&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     Prepares the pushed row setting its title and completion callback.&#xA;     */&#xA;    open override func prepare(for segue: UIStoryboardSegue) {&#xA;        super.prepare(for: segue)&#xA;        guard let rowVC = segue.destination as Any as? SelectorViewController&amp;lt;SelectorRow&amp;lt;Cell&amp;gt;&amp;gt; else { return }&#xA;        rowVC.title = selectorTitle ?? rowVC.title&#xA;        rowVC.onDismissCallback = presentationMode?.onDismissCallback ?? rowVC.onDismissCallback&#xA;        onPresentCallback?(cell.formViewController()!, rowVC)&#xA;        rowVC.row = self&#xA;    }&#xA;}&#xA;&#xA;&#xA;// SelectorRow conforms to PresenterRowType&#xA;public final class CustomPushRow&amp;lt;T: Equatable&amp;gt;: SelectorRow&amp;lt;PushSelectorCell&amp;lt;T&amp;gt;&amp;gt;, RowType {&#xA;&#xA;    public required init(tag: String?) {&#xA;        super.init(tag: tag)&#xA;        presentationMode = .show(controllerProvider: ControllerProvider.callback {&#xA;            return SelectorViewController&amp;lt;T&amp;gt;(){ _ in }&#xA;            }, onDismiss: { vc in&#xA;                _ = vc.navigationController?.popViewController(animated: true)&#xA;        })&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h3&gt;Subclassing cells using the same row&lt;/h3&gt; &#xA;  &lt;p&gt;Sometimes we want to change the UI look of one of our rows but without changing the row type and all the logic associated to one row. There is currently one way to do this &lt;strong&gt;if you are using cells that are instantiated from nib files&lt;/strong&gt;. Currently, none of Eureka&#39;s core rows are instantiated from nib files but some of the custom rows in &lt;a href=&#34;https://github.com/EurekaCommunity&#34;&gt;EurekaCommunity&lt;/a&gt; are, in particular the &lt;a href=&#34;https://github.com/EurekaCommunity/PostalAddressRow&#34;&gt;PostalAddressRow&lt;/a&gt; which was moved there.&lt;/p&gt; &#xA;  &lt;p&gt;What you have to do is:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create a nib file containing the cell you want to create.&lt;/li&gt; &#xA;   &lt;li&gt;Then set the class of the cell to be the existing cell you want to modify (if you want to change something more apart from pure UI then you should subclass that cell). Make sure the module of that class is correctly set&lt;/li&gt; &#xA;   &lt;li&gt;Connect the outlets to your class&lt;/li&gt; &#xA;   &lt;li&gt;Tell your row to use the new nib file. This is done by setting the &lt;code&gt;cellProvider&lt;/code&gt; variable to use this nib. You should do this in the initialiser, either in each concrete instantiation or using the &lt;code&gt;defaultRowInitializer&lt;/code&gt;. For example:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&amp;lt;&amp;lt;&amp;lt; PostalAddressRow() {&#xA;     $0.cellProvider = CellProvider&amp;lt;PostalAddressCell&amp;gt;(nibName: &#34;CustomNib&#34;, bundle: Bundle.main)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;You could also create a new row for this. In that case try to inherit from the same superclass as the row you want to change to inherit its logic.&lt;/p&gt; &#xA;  &lt;p&gt;There are some things to consider when you do this:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you want to see an example have a look at the &lt;a href=&#34;https://github.com/EurekaCommunity/PostalAddressRow&#34;&gt;PostalAddressRow&lt;/a&gt; or the &lt;a href=&#34;https://github.com/EurekaCommunity/CreditCardRow&#34;&gt;CreditCardRow&lt;/a&gt; which have use a custom nib file in their examples.&lt;/li&gt; &#xA;   &lt;li&gt;If you get an error saying &lt;code&gt;Unknown class &amp;lt;YOUR_CLASS_NAME&amp;gt; in Interface Builder file&lt;/code&gt;, it might be that you have to instantiate that new type somewhere in your code to load it in the runtime. Calling &lt;code&gt;let t = YourClass.self&lt;/code&gt; helped in my case.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h2&gt;Row catalog&lt;/h2&gt; &#xA;  &lt;h3&gt;Controls Rows&lt;/h3&gt; &#xA;  &lt;table&gt; &#xA;   &lt;tbody&gt;&#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Label Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/LabelRow.png&#34;&gt; &#xA;      &lt;/center&gt;&lt;br&gt;&lt;br&gt; &lt;/td&gt; &#xA;     &lt;td&gt;&#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Button Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/ButtonRow.png&#34;&gt; &#xA;      &lt;/center&gt;&lt;br&gt;&lt;br&gt; &lt;/td&gt; &#xA;     &lt;td&gt;&#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Check Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/CheckRow.png&#34;&gt; &#xA;      &lt;/center&gt;&lt;br&gt;&lt;br&gt; &lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Switch Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/SwitchRow.png&#34;&gt; &#xA;      &lt;/center&gt;&lt;br&gt;&lt;br&gt; &lt;/td&gt; &#xA;     &lt;td&gt;&#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Slider Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/SliderRow.png&#34;&gt; &#xA;      &lt;/center&gt;&lt;br&gt;&lt;br&gt; &lt;/td&gt; &#xA;     &lt;td&gt;&#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Stepper Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/StepperRow.png&#34;&gt; &#xA;      &lt;/center&gt;&lt;br&gt;&lt;br&gt; &lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Text Area Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/TextAreaRow.png&#34;&gt; &#xA;      &lt;/center&gt;&lt;br&gt;&lt;br&gt; &lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt;&#xA;  &lt;/table&gt; &#xA;  &lt;h3&gt;Field Rows&lt;/h3&gt; &#xA;  &lt;p&gt;These rows have a textfield on the right side of the cell. The difference between each one of them consists in a different capitalization, autocorrection and keyboard type configuration.&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;tbody&gt;&#xA;    &lt;tr&gt; &#xA;     &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/CatalogFieldRows.jpg&#34; width=&#34;300&#34;&gt; &lt;/td&gt; &#xA;     &lt;td&gt; TextRow&lt;br&gt;&lt;br&gt; NameRow&lt;br&gt;&lt;br&gt; URLRow&lt;br&gt;&lt;br&gt; IntRow&lt;br&gt;&lt;br&gt; PhoneRow&lt;br&gt;&lt;br&gt; PasswordRow&lt;br&gt;&lt;br&gt; EmailRow&lt;br&gt;&lt;br&gt; DecimalRow&lt;br&gt;&lt;br&gt; TwitterRow&lt;br&gt;&lt;br&gt; AccountRow&lt;br&gt;&lt;br&gt; ZipCodeRow &lt;/td&gt; &#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt; &#xA;    &lt;/tr&gt;&#xA;   &lt;/tbody&gt;&#xA;  &lt;/table&gt; &#xA;  &lt;p&gt;All of the &lt;code&gt;FieldRow&lt;/code&gt; subtypes above have a &lt;code&gt;formatter&lt;/code&gt; property of type &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/&#34;&gt;&lt;code&gt;NSFormatter&lt;/code&gt;&lt;/a&gt; which can be set to determine how that row&#39;s value should be displayed. A custom formatter for numbers with two digits after the decimal mark is included with Eureka (&lt;code&gt;DecimalFormatter&lt;/code&gt;). The Example project also contains a &lt;code&gt;CurrencyFormatter&lt;/code&gt; which displays a number as currency according to the user&#39;s locale.&lt;/p&gt; &#xA;  &lt;p&gt;By default, setting a row&#39;s &lt;code&gt;formatter&lt;/code&gt; only affects how a value is displayed when it is not being edited. To also format the value while the row is being edited, set &lt;code&gt;useFormatterDuringInput&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; when initializing the row. Formatting the value as it is being edited may require updating the cursor position and Eureka provides the following protocol that your formatter should conform to in order to handle cursor position:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol FormatterProtocol {&#xA;    func getNewPosition(forPosition forPosition: UITextPosition, inTextInput textInput: UITextInput, oldValue: String?, newValue: String?) -&amp;gt; UITextPosition&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Additionally, &lt;code&gt;FieldRow&lt;/code&gt; subtypes have a &lt;code&gt;useFormatterOnDidBeginEditing&lt;/code&gt; property. When using a &lt;code&gt;DecimalRow&lt;/code&gt; with a formatter that allows decimal values and conforms to the user&#39;s locale (e.g. &lt;code&gt;DecimalFormatter&lt;/code&gt;), if &lt;code&gt;useFormatterDuringInput&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;useFormatterOnDidBeginEditing&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt; so that the decimal mark in the value being edited matches the decimal mark on the keyboard.&lt;/p&gt; &#xA;  &lt;h3&gt;Date Rows&lt;/h3&gt; &#xA;  &lt;p&gt;Date Rows hold a Date and allow us to set up a new value through UIDatePicker control. The mode of the UIDatePicker and the way how the date picker view is shown is what changes between them.&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;tbody&gt;&#xA;    &lt;tr&gt; &#xA;     &lt;td&gt; &#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Date Row&lt;/b&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowGifs/EurekaDateRow.gif&#34; height=&#34;220&#34; width=&#34;230&#34;&gt; &#xA;       &lt;br&gt; Picker shown in the keyboard. &#xA;      &lt;/center&gt; &lt;/td&gt; &#xA;     &lt;td&gt; &#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Date Row (Inline)&lt;/b&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowGifs/EurekaDateInlineRow.gif&#34; height=&#34;220&#34; width=&#34;210&#34;&gt; &#xA;       &lt;br&gt; The row expands. &#xA;      &lt;/center&gt; &lt;/td&gt; &#xA;     &lt;td&gt; &#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Date Row (Picker)&lt;/b&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowGifs/EurekaDatePickerRow.gif&#34; height=&#34;220&#34; width=&#34;210&#34;&gt; &#xA;       &lt;br&gt; The picker is always visible. &#xA;      &lt;/center&gt; &lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt;&#xA;  &lt;/table&gt; &#xA;  &lt;p&gt;With those 3 styles (Normal, Inline &amp;amp; Picker), Eureka includes:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;DateRow&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;TimeRow&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;DateTimeRow&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;CountDownRow&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h3&gt;Option Rows&lt;/h3&gt; &#xA;  &lt;p&gt;These are rows with a list of options associated from which the user must choose.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&amp;lt;&amp;lt;&amp;lt; ActionSheetRow&amp;lt;String&amp;gt;() {&#xA;                $0.title = &#34;ActionSheetRow&#34;&#xA;                $0.selectorTitle = &#34;Pick a number&#34;&#xA;                $0.options = [&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;]&#xA;                $0.value = &#34;Two&#34;    // initially selected&#xA;            }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;table&gt; &#xA;   &lt;tbody&gt;&#xA;    &lt;tr&gt; &#xA;     &lt;td width=&#34;25%&#34;&gt; &#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Alert Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/AlertRow.jpeg&#34;&gt; &#xA;       &lt;br&gt; Will show an alert with the options to choose from. &#xA;      &lt;/center&gt; &lt;/td&gt; &#xA;     &lt;td width=&#34;25%&#34;&gt; &#xA;      &lt;center&gt;&#xA;       &lt;b&gt;ActionSheet Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/ActionSheetRow.jpeg&#34;&gt; &#xA;       &lt;br&gt; Will show an action sheet with the options to choose from. &#xA;      &lt;/center&gt; &lt;/td&gt; &#xA;     &lt;td width=&#34;25%&#34;&gt; &#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Push Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/PushRow.jpeg&#34;&gt; &#xA;       &lt;br&gt; Will push to a new controller from where to choose options listed using Check rows. &#xA;      &lt;/center&gt; &lt;/td&gt; &#xA;     &lt;td width=&#34;25%&#34;&gt; &#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Multiple Selector Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/MultipleSelectorRow.jpeg&#34;&gt; &#xA;       &lt;br&gt; Like PushRow but allows the selection of multiple options. &#xA;      &lt;/center&gt; &lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt;&#xA;  &lt;/table&gt; &#xA;  &lt;table&gt; &#xA;   &lt;tbody&gt;&#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Segmented Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/SegmentedRow.png&#34;&gt; &#xA;      &lt;/center&gt; &lt;/td&gt; &#xA;     &lt;td&gt;&#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Segmented Row (w/Title)&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/SegmentedRowWithTitle.png&#34;&gt; &#xA;      &lt;/center&gt; &lt;/td&gt; &#xA;     &lt;td&gt;&#xA;      &lt;center&gt;&#xA;       &lt;b&gt;Picker Row&lt;/b&gt;&#xA;       &lt;br&gt; &#xA;       &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/RowStatics/PickerRow.png&#34;&gt; &#xA;       &lt;br&gt;Presents options of a generic type through a picker view &#xA;       &lt;br&gt;&#xA;       &lt;b&gt;(There is also Picker Inline Row)&lt;/b&gt; &#xA;      &lt;/center&gt; &lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt;&#xA;  &lt;/table&gt; &#xA;  &lt;h3&gt;Built your own custom row?&lt;/h3&gt; &#xA;  &lt;p&gt;Let us know about it, we would be glad to mention it here. :)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;LocationRow&lt;/strong&gt; (Included as custom row in the example project)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/Example/Media/EurekaLocationRow.gif&#34; width=&#34;300&#34; alt=&#34;Screenshot of Location Row&#34;&gt; &#xA;  &lt;h2&gt;Installation&lt;/h2&gt; &#xA;  &lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;  &lt;p&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is a dependency manager for Cocoa projects.&lt;/p&gt; &#xA;  &lt;p&gt;Specify Eureka into your project&#39;s &lt;code&gt;Podfile&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;source &#39;https://github.com/CocoaPods/Specs.git&#39;&#xA;platform :ios, &#39;9.0&#39;&#xA;use_frameworks!&#xA;&#xA;pod &#39;Eureka&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Then run the following command:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;  &lt;p&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code.&lt;/p&gt; &#xA;  &lt;p&gt;After you set up your &lt;code&gt;Package.swift&lt;/code&gt; manifest file, you can add Eureka as a dependency by adding it to the dependencies value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;dependencies: [ .package(url: &#34;https://github.com/xmartlabs/Eureka.git&#34;, from: &#34;5.4.0&#34;) ]&lt;/p&gt; &#xA;  &lt;h4&gt;Carthage&lt;/h4&gt; &#xA;  &lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; is a simple, decentralized dependency manager for Cocoa.&lt;/p&gt; &#xA;  &lt;p&gt;Specify Eureka into your project&#39;s &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;github &#34;xmartlabs/Eureka&#34; ~&amp;gt; 5.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h4&gt;Manually as Embedded Framework&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clone Eureka as a git &lt;a href=&#34;http://git-scm.com/docs/git-submodule&#34;&gt;submodule&lt;/a&gt; by running the following command from your project root git folder.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add https://github.com/xmartlabs/Eureka.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Open Eureka folder that was created by the previous git submodule command and drag the Eureka.xcodeproj into the Project Navigator of your application&#39;s Xcode project.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Select the Eureka.xcodeproj in the Project Navigator and verify the deployment target matches with your application deployment target.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Select your project in the Xcode Navigation and then select your application target from the sidebar. Next select the &#34;General&#34; tab and click on the + button under the &#34;Embedded Binaries&#34; section.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Select &lt;code&gt;Eureka.framework&lt;/code&gt; and we are done!&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h2&gt;Getting involved&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you &lt;strong&gt;want to contribute&lt;/strong&gt; please feel free to &lt;strong&gt;submit pull requests&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you &lt;strong&gt;have a feature request&lt;/strong&gt; please &lt;strong&gt;open an issue&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you &lt;strong&gt;found a bug&lt;/strong&gt; check older issues before submitting an issue.&lt;/li&gt; &#xA;   &lt;li&gt;If you &lt;strong&gt;need help&lt;/strong&gt; or would like to &lt;strong&gt;ask general question&lt;/strong&gt;, use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/eureka-forms&#34;&gt;StackOverflow&lt;/a&gt;. (Tag &lt;code&gt;eureka-forms&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Before contribute check the &lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file for more info.&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;p&gt;If you use &lt;strong&gt;Eureka&lt;/strong&gt; in your app We would love to hear about it! Drop us a line on &lt;a href=&#34;https://twitter.com/xmartlabs&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;h2&gt;Authors&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mtnBarreto&#34;&gt;Martin Barreto&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/mtnBarreto&#34;&gt;@mtnBarreto&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mats-claassen&#34;&gt;Mathias Claassen&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/mClaassen26&#34;&gt;@mClaassen26&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;h2&gt;FAQ&lt;/h2&gt; &#xA;  &lt;h4&gt;How to change the text representation of the row value shown in the cell.&lt;/h4&gt; &#xA;  &lt;p&gt;Every row has the following property:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Block variable used to get the String that should be displayed for the value of this row.&#xA;public var displayValueFor: ((T?) -&amp;gt; String?)? = {&#xA;    return $0.map { String(describing: $0) }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;You can set &lt;code&gt;displayValueFor&lt;/code&gt; according the string value you want to display.&lt;/p&gt; &#xA;  &lt;h4&gt;How to get a Row using its tag value&lt;/h4&gt; &#xA;  &lt;p&gt;We can get a particular row by invoking any of the following functions exposed by the &lt;code&gt;Form&lt;/code&gt; class:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public func rowBy&amp;lt;T: Equatable&amp;gt;(tag: String) -&amp;gt; RowOf&amp;lt;T&amp;gt;?&#xA;public func rowBy&amp;lt;Row: RowType&amp;gt;(tag: String) -&amp;gt; Row?&#xA;public func rowBy(tag: String) -&amp;gt; BaseRow?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For instance:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let dateRow : DateRow? = form.rowBy(tag: &#34;dateRowTag&#34;)&#xA;let labelRow: LabelRow? = form.rowBy(tag: &#34;labelRowTag&#34;)&#xA;&#xA;let dateRow2: Row&amp;lt;DateCell&amp;gt;? = form.rowBy(tag: &#34;dateRowTag&#34;)&#xA;&#xA;let labelRow2: BaseRow? = form.rowBy(tag: &#34;labelRowTag&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h4&gt;How to get a Section using its tag value&lt;/h4&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let section: Section?  = form.sectionBy(tag: &#34;sectionTag&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h4&gt;How to set the form values using a dictionary&lt;/h4&gt; &#xA;  &lt;p&gt;Invoking &lt;code&gt;setValues(values: [String: Any?])&lt;/code&gt; which is exposed by &lt;code&gt;Form&lt;/code&gt; class.&lt;/p&gt; &#xA;  &lt;p&gt;For example:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;form.setValues([&#34;IntRowTag&#34;: 8, &#34;TextRowTag&#34;: &#34;Hello world!&#34;, &#34;PushRowTag&#34;: Company(name:&#34;Xmartlabs&#34;)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Where &lt;code&gt;&#34;IntRowTag&#34;&lt;/code&gt;, &lt;code&gt;&#34;TextRowTag&#34;&lt;/code&gt;, &lt;code&gt;&#34;PushRowTag&#34;&lt;/code&gt; are row tags (each one uniquely identifies a row) and &lt;code&gt;8&lt;/code&gt;, &lt;code&gt;&#34;Hello world!&#34;&lt;/code&gt;, &lt;code&gt;Company(name:&#34;Xmartlabs&#34;)&lt;/code&gt; are the corresponding row value to assign.&lt;/p&gt; &#xA;  &lt;p&gt;The value type of a row must match with the value type of the corresponding dictionary value otherwise nil will be assigned.&lt;/p&gt; &#xA;  &lt;p&gt;If the form was already displayed we have to reload the visible rows either by reloading the table view &lt;code&gt;tableView.reloadData()&lt;/code&gt; or invoking &lt;code&gt;updateCell()&lt;/code&gt; to each visible row.&lt;/p&gt; &#xA;  &lt;h4&gt;Row does not update after changing hidden or disabled condition&lt;/h4&gt; &#xA;  &lt;p&gt;After setting a condition, this condition is not automatically evaluated. If you want it to do so immediately you can call &lt;code&gt;.evaluateHidden()&lt;/code&gt; or &lt;code&gt;.evaluateDisabled()&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;This functions are just called when a row is added to the form and when a row it depends on changes. If the condition is changed when the row is being displayed then it must be reevaluated manually.&lt;/p&gt; &#xA;  &lt;h4&gt;onCellUnHighlight doesn&#39;t get called unless onCellHighlight is also defined&lt;/h4&gt; &#xA;  &lt;p&gt;Look at this &lt;a href=&#34;https://github.com/xmartlabs/Eureka/issues/96&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;h4&gt;How to update a Section header/footer&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set up a new header/footer data ....&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;section.header = HeaderFooterView(title: &#34;Header title \(variable)&#34;) // use String interpolation&#xA;//or&#xA;var header = HeaderFooterView&amp;lt;UIView&amp;gt;(.class) // most flexible way to set up a header using any view type&#xA;header.height = { 60 }  // height can be calculated&#xA;header.onSetupView = { view, section in  // each time the view is about to be displayed onSetupView is invoked.&#xA;    view.backgroundColor = .orange&#xA;}&#xA;section.header = header&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reload the Section to perform the changes&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;section.reload()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h4&gt;How to customize Selector and MultipleSelector option cells&lt;/h4&gt; &#xA;  &lt;p&gt;&lt;code&gt;selectableRowSetup&lt;/code&gt;, &lt;code&gt;selectableRowCellUpdate&lt;/code&gt; and &lt;code&gt;selectableRowCellSetup&lt;/code&gt; properties are provided to be able to customize SelectorViewController and MultipleSelectorViewController selectable cells.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let row = PushRow&amp;lt;Emoji&amp;gt;() {&#xA;              $0.title = &#34;PushRow&#34;&#xA;              $0.options = [💁🏻, 🍐, 👦🏼, 🐗, 🐼, 🐻]&#xA;              $0.value = 👦🏼&#xA;              $0.selectorTitle = &#34;Choose an Emoji!&#34;&#xA;          }.onPresent { from, to in&#xA;              to.dismissOnSelection = false&#xA;              to.dismissOnChange = false&#xA;              to.selectableRowSetup = { row in&#xA;                  row.cellProvider = CellProvider&amp;lt;ListCheckCell&amp;lt;Emoji&amp;gt;&amp;gt;(nibName: &#34;EmojiCell&#34;, bundle: Bundle.main)&#xA;              }&#xA;              to.selectableRowCellUpdate = { cell, row in&#xA;                  cell.textLabel?.text = &#34;Text &#34; + row.selectableValue!  // customization&#xA;                  cell.detailTextLabel?.text = &#34;Detail &#34; +  row.selectableValue!&#xA;              }&#xA;          }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;h4&gt;Don&#39;t want to use Eureka custom operators?&lt;/h4&gt; &#xA;  &lt;p&gt;As we&#39;ve said &lt;code&gt;Form&lt;/code&gt; and &lt;code&gt;Section&lt;/code&gt; types conform to &lt;code&gt;MutableCollection&lt;/code&gt; and &lt;code&gt;RangeReplaceableCollection&lt;/code&gt;. A Form is a collection of Sections and a Section is a collection of Rows.&lt;/p&gt; &#xA;  &lt;p&gt;&lt;code&gt;RangeReplaceableCollection&lt;/code&gt; protocol extension provides many useful methods to modify collection.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension RangeReplaceableCollection {&#xA;    public mutating func append(_ newElement: Self.Element)&#xA;    public mutating func append&amp;lt;S&amp;gt;(contentsOf newElements: S) where S : Sequence, Self.Element == S.Element&#xA;    public mutating func insert(_ newElement: Self.Element, at i: Self.Index)&#xA;    public mutating func insert&amp;lt;S&amp;gt;(contentsOf newElements: S, at i: Self.Index) where S : Collection, Self.Element == S.Element&#xA;    public mutating func remove(at i: Self.Index) -&amp;gt; Self.Element&#xA;    public mutating func removeSubrange(_ bounds: Range&amp;lt;Self.Index&amp;gt;)&#xA;    public mutating func removeFirst(_ n: Int)&#xA;    public mutating func removeFirst() -&amp;gt; Self.Element&#xA;    public mutating func removeAll(keepingCapacity keepCapacity: Bool)&#xA;    public mutating func reserveCapacity(_ n: Self.IndexDistance)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;These methods are used internally to implement the custom operators as shown bellow:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public func +++(left: Form, right: Section) -&amp;gt; Form {&#xA;    left.append(right)&#xA;    return left&#xA;}&#xA;&#xA;public func +=&amp;lt;C : Collection&amp;gt;(inout lhs: Form, rhs: C) where C.Element == Section {&#xA;    lhs.append(contentsOf: rhs)&#xA;}&#xA;&#xA;public func &amp;lt;&amp;lt;&amp;lt;(left: Section, right: BaseRow) -&amp;gt; Section {&#xA;    left.append(right)&#xA;    return left&#xA;}&#xA;&#xA;public func +=&amp;lt;C : Collection&amp;gt;(inout lhs: Section, rhs: C) where C.Element == BaseRow {&#xA;    lhs.append(contentsOf: rhs)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;You can see how the rest of custom operators are implemented &lt;a href=&#34;https://github.com/xmartlabs/Eureka/raw/master/Source/Core/Operators.swift&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;It&#39;s up to you to decide if you want to use Eureka custom operators or not.&lt;/p&gt; &#xA;  &lt;h4&gt;How to set up your form from a storyboard&lt;/h4&gt; &#xA;  &lt;p&gt;The form is always displayed in a &lt;code&gt;UITableView&lt;/code&gt;. You can set up your view controller in a storyboard and add a UITableView where you want it to be and then connect the outlet to FormViewController&#39;s &lt;code&gt;tableView&lt;/code&gt; variable. This allows you to define a custom frame (possibly with constraints) for your form.&lt;/p&gt; &#xA;  &lt;p&gt;All of this can also be done by programmatically changing frame, margins, etc. of the &lt;code&gt;tableView&lt;/code&gt; of your FormViewController.&lt;/p&gt; &#xA;  &lt;!-- In file --&gt; &#xA;  &lt;!-- In Project --&gt; &#xA;  &lt;!-- External --&gt; &#xA;  &lt;h1&gt;Donate to Eureka&lt;/h1&gt; &#xA;  &lt;p&gt;So we can make Eureka even better!&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=HRMAH7WZ4QQ8E&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/donate.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;h1&gt;Change Log&lt;/h1&gt; &#xA;  &lt;p&gt;This can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/xmartlabs/Eureka/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; file.&lt;/p&gt; &#xA; &lt;/valuetype&gt;&#xA;&lt;/celltype&gt;</summary>
  </entry>
</feed>