<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-21T03:36:37Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FilledStacks/expression-ui</title>
    <updated>2024-04-21T03:36:37Z</updated>
    <id>tag:github.com,2024-04-21:/FilledStacks/expression-ui</id>
    <link href="https://github.com/FilledStacks/expression-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework that allows you to build UI&#39;s using animation software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;expression ui&lt;/h1&gt; &#xA;&lt;p&gt;A alternative way to build mobile app UI on EVERY major framework (Flutter, React-Native, SwiftUI, iOS Native, and Kotlin).&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://appsplusplus.carrd.co/&#34;&gt;Get tutorials and updates in your inbox&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;What is this about?&lt;/h2&gt; &#xA;&lt;p&gt;Currently the app building process works as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create or get a figma design&lt;/li&gt; &#xA; &lt;li&gt;Spend hours writing the code to render that Figma design 2a. &lt;em&gt;Every developer does it different&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the app and tweak the UI as you are building it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This process is accepted, and when I spoke about it, I was told to &lt;a href=&#34;https://www.reddit.com/r/FlutterDev/comments/1bieuy5/im_tired_of_building_flutter_uis/&#34;&gt;&#34;copy paste my old code&#34; to move faster and I should stop complaining&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;But I don&#39;t like step 2 in the process above.&lt;/p&gt; &#xA;&lt;p&gt;What if we could go from design directly to pixels.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s what I&#39;m exploring with this framework.&lt;/p&gt; &#xA;&lt;p&gt;The idea is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Design your UI on a canvas tool&lt;/li&gt; &#xA; &lt;li&gt;We render it pixel-perfect using an open-source rendering runtime&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Technical research&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in helping I would appreciate that.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m currently doing the Flutter parts, I would love for react-native, iOS native, Android native and all of those to be developed / researched at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Please reach out on &lt;a href=&#34;https://twitter.com/danemackier&#34;&gt;Twitter&lt;/a&gt; and I&#39;ll add you to our Discord if you&#39;d like to help explore this idea.&lt;/p&gt; &#xA;&lt;h2&gt;Repo Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;examples: is where the examples will go for each of the frameworks named examples-[framework]&lt;/li&gt; &#xA; &lt;li&gt;packages: is where the packages will go for each of the frameworks names expression-ui-[framework]&lt;/li&gt; &#xA; &lt;li&gt;resources: readme images and gifs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UI Research&lt;/h3&gt; &#xA;&lt;p&gt;These tasks are all related to the visuals and exploring how we can actually make the user interface work as expected.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Creating checkable boxes (up to 5) and update state in code&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Bottom sheets (shoud be the same as normal UI)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Creating a long scrollable list view&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Dynamically update text&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Sync state with animation UI&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Building multiple views and navigating between them&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Building responsive UI&#39;s - &lt;a href=&#34;https://github.com/FilledStacks/expression-ui/pull/1&#34;&gt;PR&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Building a design system and composing&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Performing interactive gestures (Swipes)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Managing text input - &lt;em&gt;Done in platform code for now&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;del&gt;Works with a screen reader&lt;/del&gt; - &lt;em&gt;Attempted but rive&#39;s single widget is making this difficult. Work in &lt;code&gt;feat/screen-reader&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development Experience Research&lt;/h3&gt; &#xA;&lt;p&gt;These tasks are all related to improving the dev experience, majority of them will probably be code generation using dart cli (not the build_runner package).&lt;/p&gt; &#xA;&lt;p&gt;The goal would be to read the rive file and use the data in there to improve the developers experience.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Automatic binding of click events and callbacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Type safe referencing of all states, animations, events and artboards&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>TelegramMessenger/Telegram-iOS</title>
    <updated>2024-04-21T03:36:37Z</updated>
    <id>tag:github.com,2024-04-21:/TelegramMessenger/Telegram-iOS</id>
    <link href="https://github.com/TelegramMessenger/Telegram-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram-iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Telegram iOS Source Code Compilation Guide&lt;/h1&gt; &#xA;&lt;p&gt;We welcome all developers to use our API and source code to create applications on our platform. There are several things we require from &lt;strong&gt;all developers&lt;/strong&gt; for the moment.&lt;/p&gt; &#xA;&lt;h1&gt;Creating your Telegram Application&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://core.telegram.org/api/obtaining_api_id&#34;&gt;&lt;strong&gt;Obtain your own api_id&lt;/strong&gt;&lt;/a&gt; for your application.&lt;/li&gt; &#xA; &lt;li&gt;Please &lt;strong&gt;do not&lt;/strong&gt; use the name Telegram for your app â€” or make sure your users understand that it is unofficial.&lt;/li&gt; &#xA; &lt;li&gt;Kindly &lt;strong&gt;do not&lt;/strong&gt; use our standard logo (white paper plane in a blue circle) as your app&#39;s logo.&lt;/li&gt; &#xA; &lt;li&gt;Please study our &lt;a href=&#34;https://core.telegram.org/mtproto/security_guidelines&#34;&gt;&lt;strong&gt;security guidelines&lt;/strong&gt;&lt;/a&gt; and take good care of your users&#39; data and privacy.&lt;/li&gt; &#xA; &lt;li&gt;Please remember to publish &lt;strong&gt;your&lt;/strong&gt; code too in order to comply with the licences.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Quick Compilation Guide&lt;/h1&gt; &#xA;&lt;h2&gt;Get the Code&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive -j8 https://github.com/TelegramMessenger/Telegram-iOS.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup Xcode&lt;/h2&gt; &#xA;&lt;p&gt;Install Xcode (directly from &lt;a href=&#34;https://developer.apple.com/download/applications&#34;&gt;https://developer.apple.com/download/applications&lt;/a&gt; or using the App Store).&lt;/p&gt; &#xA;&lt;h2&gt;Adjust Configuration&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generate a random identifier:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl rand -hex 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create a new Xcode project. Use &lt;code&gt;Telegram&lt;/code&gt; as the Product Name. Use &lt;code&gt;org.{identifier from step 1}&lt;/code&gt; as the Organization Identifier.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Keychain Access&lt;/code&gt; and navigate to &lt;code&gt;Certificates&lt;/code&gt;. Locate &lt;code&gt;Apple Development: your@email.address (XXXXXXXXXX)&lt;/code&gt; and double tap the certificate. Under &lt;code&gt;Details&lt;/code&gt;, locate &lt;code&gt;Organizational Unit&lt;/code&gt;. This is the Team ID.&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;build-system/template_minimal_development_configuration.json&lt;/code&gt;. Use data from the previous steps.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Generate an Xcode project&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=build-system/template_minimal_development_configuration.json \&#xA;    --xcodeManagedCodesigning&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Advanced Compilation Guide&lt;/h1&gt; &#xA;&lt;h2&gt;Xcode&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy and edit &lt;code&gt;build-system/appstore-configuration.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;build-system/fake-codesigning&lt;/code&gt;. Create and download provisioning profiles, using the &lt;code&gt;profiles&lt;/code&gt; folder as a reference for the entitlements.&lt;/li&gt; &#xA; &lt;li&gt;Generate an Xcode project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=configuration_from_step_1.json \&#xA;    --codesigningInformationPath=directory_from_step_2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;IPA&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Repeat the steps from the previous section. Use distribution provisioning profiles.&lt;/li&gt; &#xA; &lt;li&gt;Run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    build \&#xA;    --configurationPath=...see previous section... \&#xA;    --codesigningInformationPath=...see previous section... \&#xA;    --buildNumber=100001 \&#xA;    --configuration=release_arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;Xcode is stuck at &#34;build-request.json not updated yet&#34;&lt;/h2&gt; &#xA;&lt;p&gt;Occasionally, you might observe the following message in your build log:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;/Users/xxx/Library/Developer/Xcode/DerivedData/Telegram-xxx/Build/Intermediates.noindex/XCBuildData/xxx.xcbuilddata/build-request.json&#34; not updated yet, waiting...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should this occur, simply cancel the ongoing build and initiate a new one.&lt;/p&gt; &#xA;&lt;h2&gt;Telegram_xcodeproj: no such package&lt;/h2&gt; &#xA;&lt;p&gt;Following a system restart, the auto-generated Xcode project might encounter a build failure accompanied by this error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ERROR: Skipping &#39;@rules_xcodeproj_generated//generator/Telegram/Telegram_xcodeproj:Telegram_xcodeproj&#39;: no such package &#39;@rules_xcodeproj_generated//generator/Telegram/Telegram_xcodeproj&#39;: BUILD file not found in directory &#39;generator/Telegram/Telegram_xcodeproj&#39; of external repository @rules_xcodeproj_generated. Add a BUILD file to a directory to mark it as a package.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter this issue, re-run the project generation steps in the README.&lt;/p&gt; &#xA;&lt;h1&gt;Tips&lt;/h1&gt; &#xA;&lt;h2&gt;Codesigning is not required for simulator-only builds&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;--disableProvisioningProfiles&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=path-to-configuration.json \&#xA;    --codesigningInformationPath=path-to-provisioning-data \&#xA;    --disableProvisioningProfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;Each release is built using a specific Xcode version (see &lt;code&gt;versions.json&lt;/code&gt;). The helper script checks the versions of the installed software and reports an error if they don&#39;t match the ones specified in &lt;code&gt;versions.json&lt;/code&gt;. It is possible to bypass these checks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py --overrideXcodeVersion build ... # Don&#39;t check the version of Xcode&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>