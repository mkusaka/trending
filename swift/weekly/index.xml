<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-06T01:50:42Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>powenn/ModMyIPA</title>
    <updated>2022-11-06T01:50:42Z</updated>
    <id>tag:github.com,2022-11-06:/powenn/ModMyIPA</id>
    <link href="https://github.com/powenn/ModMyIPA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An app to modify ipa files so you can multiple install the same app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ModMyIPA&lt;/h1&gt; &#xA;&lt;h2&gt;An app to modify ipa files so you can multiple install the same app&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/powenn/ModMyIPA/raw/main/Screenshots/01.png&#34; alt=&#34;screenshot&#34;&gt; &lt;img src=&#34;https://github.com/powenn/ModMyIPA/raw/main/Screenshots/02.png&#34; alt=&#34;screenshot&#34;&gt; &lt;img src=&#34;https://github.com/powenn/ModMyIPA/raw/main/Screenshots/03.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lwouis/alt-tab-macos</title>
    <updated>2022-11-06T01:50:42Z</updated>
    <id>tag:github.com,2022-11-06:/lwouis/alt-tab-macos</id>
    <link href="https://github.com/lwouis/alt-tab-macos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Windows alt-tab on macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AltTab&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwouis/alt-tab-macos/master/docs/public/demo/frontpage.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lwouis/alt-tab-macos/master/docs/public/demo/frontpage.jpg&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;AltTab&lt;/strong&gt; brings the power of Windows alt-tab to macOS&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://alt-tab-macos.netlify.app/&#34;&gt;Find out more on the official website&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>malcommac/SwiftDate</title>
    <updated>2022-11-06T01:50:42Z</updated>
    <id>tag:github.com,2022-11-06:/malcommac/SwiftDate</id>
    <link href="https://github.com/malcommac/SwiftDate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üêî Toolkit to parse, validate, manipulate, compare and display dates, time &amp; timezones in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/banner.png&#34; width=&#34;300px&#34; alt=&#34;SwiftDate&#34; title=&#34;SwiftDate&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;Toolkit to parse, validate, manipulate, compare and display dates, time &amp;amp; timezones in Swift.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s This?&lt;/h2&gt; &#xA;&lt;p&gt;SwiftDate is the &lt;strong&gt;definitive toolchain to manipulate and display dates and time zones&lt;/strong&gt; on all Apple platform and even on Linux and Swift Server Side frameworks like Vapor or Kitura.&lt;br&gt; &lt;strong&gt;Over 3 million of downloads on &lt;a href=&#34;https://cocoapods.org/pods/SwiftDate&#34;&gt;CocoaPods&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;From simple date manipulation to complex business logic SwiftDate maybe the right choice for your next project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Easy Date Parsing&lt;/strong&gt; (custom formats, iso8601, rss &amp;amp; many more)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Easy Date Formatting&lt;/strong&gt; even with colloquial formatter and 140+ supported languages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Easy math operations with time units&lt;/strong&gt; (&lt;code&gt;2.hours + 5.minutes&lt;/code&gt;...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Intuitive components extraction&lt;/strong&gt; (&lt;code&gt;day, hour, nearestHour, weekdayNameShort&lt;/code&gt; etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Derivated dates generation&lt;/strong&gt; (&lt;code&gt;nextWeek, nextMonth, nextWeekday, tomorrow&lt;/code&gt;...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Over &lt;strong&gt;20+ fine grained date comparison&lt;/strong&gt; functions (&lt;code&gt;isToday, isTomorrow, isSameWeek, isNextYear&lt;/code&gt;...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Swift 4&#39;s &lt;strong&gt;Codable Support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Random dates&lt;/strong&gt; generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Fine grained date enumeration&lt;/strong&gt; functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Time period&lt;/strong&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Convert TimeIntervals&lt;/strong&gt; to other units (&lt;code&gt;2.hours.toUnits(.minutes)&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and of course...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;IT&#39;S TESTED!&lt;/strong&gt;. As 5.x the project has 90% of code coverage (want help us? write some unit tests and make a PR)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IT&#39;S FULLY DOCUMENTED!&lt;/strong&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Documentation/Index.md&#34;&gt;both with a complete guide&lt;/a&gt; and with Jazzy!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WE LOVE PLAYGROUND!&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Playgrounds/SwiftDate.playground&#34;&gt;Check out&lt;/a&gt; our interactive playground!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Start with SwiftDate&lt;/h2&gt; &#xA;&lt;p&gt;The entire library is fully documented both via XCode method inspector and a complete markdown documentation you can found below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚Üí &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Documentation/Index.md&#34;&gt;Full Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚Üí &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Documentation/0.Informations.md&#34;&gt;Requirements, Install, License &amp;amp; More&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚Üí &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Documentation/10.Upgrading_SwiftDate4.md&#34;&gt;Upgrading from SwiftDate 4&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Explore SwiftDate&lt;/h3&gt; &#xA;&lt;p&gt;From simple date manipulation to complex business logic SwiftDate maybe the right choice for your next project.&lt;/p&gt; &#xA;&lt;p&gt;Let me show to you the main features of the library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#1&#34;&gt;Date Parsing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#2&#34;&gt;Date Manipulation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#3&#34;&gt;Date Comparsion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#4&#34;&gt;Date Creation with Region (Timezone, Calendar &amp;amp; Locale)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#5&#34;&gt;Derivated Dates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#6&#34;&gt;Components Extraction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#7&#34;&gt;Switch between timezones/locale and calendars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#8&#34;&gt;Date Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#9&#34;&gt;Relative Date Formatting (fully customizable!)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#10&#34;&gt;Codable Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/#11&#34;&gt;Time Periods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a name=&#34;1&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;1. Date Parsing&lt;/h3&gt; &#xA;&lt;p&gt;SwiftDate can recognize all the major datetime formats automatically (ISO8601, RSS, Alt RSS, .NET, SQL, HTTP...) and you can also provide your own formats. Creating a new date has never been so easy!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// All default datetime formats (15+) are recognized automatically&#xA;let _ = &#34;2010-05-20 15:30:00&#34;.toDate()&#xA;// You can also provide your own format!&#xA;let _ = &#34;2010-05-20 15:30&#34;.toDate(&#34;yyyy-MM-dd HH:mm&#34;)&#xA;// All ISO8601 variants are supported too with timezone parsing!&#xA;let _ = &#34;2017-09-17T11:59:29+02:00&#34;.toISODate()&#xA;// RSS, Extended, HTTP, SQL, .NET and all the major variants are supported!&#xA;let _ = &#34;19 Nov 2015 22:20:40 +0100&#34;.toRSS(alt: true)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;2&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;2. Date Manipulation&lt;/h3&gt; &#xA;&lt;p&gt;Date can be manipulated by adding or removing time components using a natural language; time unit extraction is also easy and includes the support for timezone, calendar and locales!&lt;/p&gt; &#xA;&lt;p&gt;Manipulation can be done with standard math operators and between dates, time intervals, date components and relevant time units!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Math operations support time units&#xA;let _ = (&#34;2010-05-20 15:30:00&#34;.toDate() + 3.months - 2.days)&#xA;let _ = Date() + 3.hours&#xA;let _ = date1 + [.year:1, .month:2, .hour:5]&#xA;let _ = date1 + date2&#xA;// extract single time unit components from date manipulation&#xA;let over1Year = (date3 - date2).year &amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;3&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;3. Date Comparison&lt;/h3&gt; &#xA;&lt;p&gt;SwiftDate include an extensive set of comparison functions; you can compare two dates by granularity, check if a date is an particular day, range and practically any other comparison you ever need.&lt;/p&gt; &#xA;&lt;p&gt;Comparison is also available via standard math operators like (&lt;code&gt;&amp;gt;, &amp;gt;=, &amp;lt;, &amp;lt;=&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Standard math comparison is allowed&#xA;let _ = dateA &amp;gt;= dateB || dateC &amp;lt; dateB&#xA;&#xA;// Complex comparisons includes granularity support&#xA;let _ = dateA.compare(toDate: dateB, granularity: .hour) == .orderedSame&#xA;let _ = dateA.isAfterDate(dateB, orEqual: true, granularity: .month) // &amp;gt; until month granularity&#xA;let _ = dateC.isInRange(date: dateA, and: dateB, orEqual: true, granularity: .day) // &amp;gt; until day granularity&#xA;let _ = dateA.earlierDate(dateB) // earlier date&#xA;let _ = dateA.laterDate(dateB) // later date&#xA;&#xA;// Check if date is close to another with a given precision&#xA;let _ = dateA.compareCloseTo(dateB, precision: 1.hours.timeInterval&#xA;&#xA;// Compare for relevant events:&#xA;// .isToday, .isYesterday, .isTomorrow, .isWeekend, isNextWeek&#xA;// .isSameDay, .isMorning, .isWeekday ...&#xA;let _ = date.compare(.isToday)&#xA;let _ = date.compare(.isNight)&#xA;let _ = date.compare(.isNextWeek)&#xA;let _ = date.compare(.isThisMonth)&#xA;let _ = date.compare(.startOfWeek)&#xA;let _ = date.compare(.isNextYear)&#xA;// ...and MORE THAN 30 OTHER COMPARISONS BUILT IN&#xA;&#xA;// Operation in arrays (oldestIn, newestIn, sortedByNewest, sortedByOldest...)&#xA;let _ = DateInRegion.oldestIn(list: datesArray)&#xA;let _ = DateInRegion.sortedByNewest(list: datesArray)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;4&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;4. Date Creation with Region (Timezone, Calendar &amp;amp; Locale)&lt;/h3&gt; &#xA;&lt;p&gt;You can create new dates from a string, time intervals or using date components. SwiftDate offers a wide set of functions to create and derivate your dates even with random generation!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// All dates includes timezone, calendar and locales!&#xA;// Create from string&#xA;let rome = Region(calendar: Calendars.gregorian, zone: Zones.europeRome, locale: Locales.italian)&#xA;let date1 = DateInRegion(&#34;2010-01-01 00:00:00&#34;, region: rome)!&#xA;&#xA;// Create date from intervals&#xA;let _ = DateInRegion(seconds: 39940, region: rome)&#xA;let _ = DateInRegion(milliseconds: 5000, region: rome)&#xA;&#xA;// Date from components&#xA;let _ = DateInRegion(components: {&#xA;&#x9;$0.year = 2001&#xA;&#x9;$0.month = 9&#xA;&#x9;$0.day = 11&#xA;&#x9;$0.hour = 12&#xA;&#x9;$0.minute = 0&#xA;}, region: rome)&#xA;let _ = DateInRegion(year: 2001, month: 1, day: 5, hour: 23, minute: 30, second: 0, region: rome)&#xA;&#xA;// Random date generation with/without bounds&#xA;let _ = DateInRegion.randomDate(region: rome)&#xA;let _ = DateInRegion.randomDate(withinDaysBeforeToday: 5)&#xA;let _ = DateInRegion.randomDates(count: 50, between: lowerLimitDate, and: upperLimitDate, region: rome)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;5&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;5. Derivated Dates&lt;/h3&gt; &#xA;&lt;p&gt;Date can be also generated starting from other dates; SwiftDate includes an extensive set of functions to generate. Over 20 different derivated dates can be created easily using &lt;code&gt;dateAt()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let _ = DateInRegion().dateAt(.endOfDay) // today at the end of the day&#xA;// Over 20 different relevant dates including .startOfDay,&#xA;// .endOfDay, .startOfWeek, .tomorrow, .nextWeekday, .nextMonth, .prevYear, .nearestMinute and many others!&#xA;let _ = dateA.nextWeekday(.friday) // the next friday after dateA&#xA;let _ = (date.dateAt(.startOfMonth) - 3.days)&#xA;let _ = dateA.compare(.endOfWeek)&#xA;&#xA;// Enumerate dates in range by providing your own custom&#xA;// increment expressed in date components&#xA;let from = DateInRegion(&#34;2015-01-01 10:00:00&#34;, region: rome)!&#xA;let to = DateInRegion(&#34;2015-01-02 03:00:00&#34;, region: rome)!&#xA;let increment2 = DateComponents.create {&#xA;&#x9;$0.hour = 1&#xA;&#x9;$0.minute = 30&#xA;&#x9;$0.second = 10&#xA;}&#xA;// generate dates in range by incrementing +1h,30m,10s each new date&#xA;let dates = DateInRegion.enumerateDates(from: fromDate2, to: toDate2, increment: increment2)&#xA;&#xA;// Get all mondays in Jan 2019&#xA;let mondaysInJan2019 = Date.datesForWeekday(.monday, inMonth: 1, ofYear: 2019)&#xA;&#xA;// Altering time components&#xA;let _ = dateA.dateBySet(hour: 10, min: 0, secs: 0)&#xA;&#xA;// Truncating a date&#xA;let _ = dateA.dateTruncated(at: [.year,.month,.day]) // reset all time components keeping only date&#xA;&#xA;// Rounding a date&#xA;let _ = dateA.dateRoundedAt(.toMins(10))&#xA;let _ = dateA.dateRoundedAt(.toFloor30Mins)&#xA;&#xA;// Adding components&#xA;let _ = dateA.dateByAdding(5,.year)&#xA;&#xA;// Date at the start/end of any time component&#xA;let _ = dateA.dateAtEndOf(.year) // 31 of Dec at 23:59:59&#xA;let _ = dateA.dateAtStartOf(.day) // at 00:00:00 of the same day&#xA;let _ = dateA.dateAtStartOf(.month) // at 00:00:00 of the first day of the month&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;6&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;6. Components Extraction&lt;/h3&gt; &#xA;&lt;p&gt;You can extract components directly from dates and it includes the right value expressed in date&#39;s region (the right timezone and set locale!).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a date in a region, London but with the lcoale set to IT&#xA;let london = Region(calendar: .gregorian, zone: .europeLondon, locale: .italian)&#xA;let date = DateInRegion(&#34;2018-02-05 23:14:45&#34;, format: dateFormat, region: london)!&#xA;&#xA;// You can extract any of the all available time units.&#xA;// VALUES ARE EXPRESSED IN THE REGION OF THE DATE (THE RIGHT TIMEZONE).&#xA;// (you can still get the UTC/absolute value by getting the inner&#39;s absoluteDate).&#xA;&#xA;let _ = date.year // 2018&#xA;let _ = date.month // 2&#xA;let _ = date.monthNameDefault // &#39;Febbraio&#39; as the locale is the to IT!&#xA;let _ = date.firstDayOfWeek // 5&#xA;let _ = date.weekdayNameShort // &#39;Lun&#39; as locale is the to IT&#xA;// ... all components are supported: .year, .month, .day, .hour, .minute, .second,&#xA;// .monthName, .weekday, .nearestHour, .firstDayOfWeek. .quarter and so on...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;7&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;7. Switch between timezones/locale and calendars&lt;/h3&gt; &#xA;&lt;p&gt;You can easily convert any date to another region (aka another calendar, locale or timezone) easily! New date contains all values expressed into the destination reason&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Conversion between timezones is easy using convertTo(region:) function&#xA;let rNY = Region(calendar: Calendars.gregorian, zone: Zones.americaNewYork, locale: Locales.english)&#xA;let rRome = Region(calendar: Calendars.gregorian, zone: Zones.europeRome, locale: Locales.italian)&#xA;let dateInNY = &#34;2017-01-01 00:00:00&#34;.toDate(region: rNY)&#xA;let dateInRome = dateInNY?.convertTo(region: rRome)!&#xA;print(dateInRome.toString()) // &#34;dom gen 01 06:00:00 +0100 2017\n&#34;&#xA;&#xA;// You can also convert single region&#39;s attributes&#xA;let dateInIndia = dateInNY?.convertTo(timezone: Zones.indianChristmas, locale: Locales.nepaliIndia)&#xA;print(&#34;\(dateInIndia!.toString())&#34;) // &#34;‡§Ü‡§á‡§§ ‡§ú‡§®‡§µ‡§∞‡•Ä ‡•¶‡•ß ‡•ß‡•®:‡•¶‡•¶:‡•¶‡•¶ +0700 ‡•®‡•¶‡•ß‡•≠\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;8&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;8. Date Formatting&lt;/h3&gt; &#xA;&lt;p&gt;Date formatting is easy, you can specify your own format, locale or use any of the provided ones.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Date Formatting&#xA;let london = Region(calendar: .gregorian, zone: .europeLondon, locale: .english)&#xA;let date = ... // 2017-07-22T18:27:02+02:00 in london region&#xA;let _ = date.toDotNET() // /Date(1500740822000+0200)/&#xA;let _ = date.toISODate() // 2017-07-22T18:27:02+02:00&#xA;let _ = date.toFormat(&#34;dd MMM yyyy &#39;at&#39; HH:mm&#34;) // &#34;22 July 2017 at 18:27&#34;&#xA;&#xA;// You can also easily change locale when formatting a region&#xA;let _ = date.toFormat(&#34;dd MMM&#34;, locale: .italian) // &#34;22 Luglio&#34;&#xA;&#xA;// Time Interval Formatting as Countdown&#xA;let interval: TimeInterval = (2.hours.timeInterval) + (34.minutes.timeInterval) + (5.seconds.timeInterval)&#xA;let _ = interval.toClock() // &#34;2:34:05&#34;&#xA;&#xA;// Time Interval Formatting by Components&#xA;let _ = interval.toString {&#xA;&#x9;$0.maximumUnitCount = 4&#xA;&#x9;$0.allowedUnits = [.day, .hour, .minute]&#xA;&#x9;$0.collapsesLargestUnit = true&#xA;&#x9;$0.unitsStyle = .abbreviated&#xA;} // &#34;2h 34m&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;9&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;9. Relative Date Formatting (fully customizable!)&lt;/h3&gt; &#xA;&lt;p&gt;Relative formatting is all new in SwiftDate; it supports 120+ languages with two different styles (&lt;code&gt;.default, .twitter&lt;/code&gt;), 9 flavours (&lt;code&gt;.long, .longTime, .longConvenient, .short, .shortTime, .shortConvenient, .narrow, .tiny, .quantify&lt;/code&gt;) and all of them are customizable as you need. The extensible format allows you to provide your own translations and rules to override the default behaviour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Twitter Style&#xA;let _ = (Date() - 3.minutes).toRelative(style: RelativeFormatter.twitterStyle(), locale: Locales.english) // &#34;3m&#34;&#xA;let _ = (Date() - 6.minutes).toRelative(style: RelativeFormatter.twitterStyle(), locale: Locales.italian) // &#34;6 min fa&#34;&#xA;&#xA;// Default Style&#xA;let _ = (now2 - 5.hours).toRelative(style: RelativeFormatter.defaultStyle(), locale: Locales.english) // &#34;5 hours ago&#34;&#xA;let y = (now2 - 40.minutes).toRelative(style: RelativeFormatter.defaultStyle(), locale: Locales.italian) // &#34;45 minuti fa&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;10&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;10. Codable Support&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;code&gt;DateInRegion&lt;/code&gt; and &lt;code&gt;Region&lt;/code&gt; fully support the new Swift&#39;s &lt;code&gt;Codable&lt;/code&gt; protocol. This mean you can safely encode/decode them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Encoding/Decoding a Region&#xA;let region = Region(calendar: Calendars.gregorian, zone: Zones.europeOslo, locale: Locales.english)&#xA;let encodedJSON = try JSONEncoder().encode(region)&#xA;let decodedRegion = try JSONDecoder().decode(Region.self, from: encodedJSON)&#xA;&#xA;// Encoding/Decoding a DateInRegion&#xA;let date = DateInRegion(&#34;2015-09-24T13:20:55&#34;, region: region)&#xA;let encodedDate = try JSONEncoder().encode(date)&#xA;let decodedDate = try JSONDecoder().decode(DateInRegion.self, from: encodedDate)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;a name=&#34;11&#34;&gt;&lt;/a&gt; &#xA;&lt;h3&gt;11. Time Periods&lt;/h3&gt; &#xA;&lt;p&gt;SwiftDate integrates the great Matthew York&#39;s &lt;a href=&#34;https://github.com/MatthewYork/DateTools&#34;&gt;DateTools&lt;/a&gt; module in order to support Time Periods.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/malcommac/SwiftDate/master/Documentation/12.Timer_Periods.md&#34;&gt;Time Periods&lt;/a&gt; section of the documentation.&lt;/p&gt;</summary>
  </entry>
</feed>