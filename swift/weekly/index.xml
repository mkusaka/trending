<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T02:24:20Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vincentneo/LosslessSwitcher</title>
    <updated>2022-07-03T02:24:20Z</updated>
    <id>tag:github.com,2022-07-03:/vincentneo/LosslessSwitcher</id>
    <link href="https://github.com/vincentneo/LosslessSwitcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automated Apple Music Lossless Sample Rate Switching for Audio Devices on Macs.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;550&#34; alt=&#34;header image with app icon&#34; src=&#34;https://user-images.githubusercontent.com/23420208/164895903-1c95fe89-6198-433a-9100-8d9af32ca24f.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;LosslessSwitcher switches your current audio device&#39;s sample rate to match the currently playing lossless song on your Apple Music app, automatically.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say if the next song that you are playing, is a Hi-Res Lossless track with a sample rate of 192kHz, LosslessSwitcher will switch your device to that sample rate as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;The opposite happens, when the next track happens to have a lower sample rate.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Simply go to the Releases page of this repository. &lt;a href=&#34;https://github.com/vincentneo/LosslessSwitcher/releases/latest&#34;&gt;(Link to latest release)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Alternatively, try the beta! &lt;a href=&#34;https://github.com/vincentneo/LosslessSwitcher/releases/&#34;&gt;(link)&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Drag the app to your Applications folder. If you wish to have it running when logging in, you should be able to add LosslessSwitcher in System Preferences:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; User &amp;amp; Groups &amp;gt; Login Items &amp;gt; Add LosslessSwitcher app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;App details&lt;/h2&gt; &#xA;&lt;p&gt;There isn&#39;t much going on, when it comes to the UI of the app, as most of the logic is to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Read Apple Music&#39;s logs to know the song&#39;s sample rate.&lt;/li&gt; &#xA; &lt;li&gt;Set the sample rate to the device that you are currently playing to.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As such, the app lives on your menu bar. The screenshot above shows it&#39;s only UI component that it offers, which is to show the sample rate that it has parsed from Apple Music&#39;s logs.&lt;/p&gt; &#xA;&lt;img width=&#34;252&#34; alt=&#34;app screenshot, with music note icon shown as UI button&#34; src=&#34;https://user-images.githubusercontent.com/23420208/164895657-35a6d8a3-7e85-4c7c-bcba-9d03bfd88b4d.png&#34;&gt; &#xA;&lt;p&gt;If you wish, the sample rate can also be directly visible as the menu bar item.&lt;/p&gt; &#xA;&lt;img width=&#34;252&#34; alt=&#34;app screenshot with sample rate shown as UI button&#34; src=&#34;https://user-images.githubusercontent.com/23420208/164896404-c6d27328-47e5-4eb3-bd8b-71e3c9013c46.png&#34;&gt; &#xA;&lt;p&gt;Do also note that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There may be short interuptions to your audio playback, during the time where the app attempts to switch the sample rates.&lt;/li&gt; &#xA; &lt;li&gt;Prolonged use on MacBooks may accelerate battery usages, due to the frequent querying of the latest sample rate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why make this?&lt;/h3&gt; &#xA;&lt;p&gt;Ever since Apple Music Lossless launched along with macOS 11.4, the app would never switch the sample rates according to the song that was playing. A trip down to the Audio MIDI Setup app was required. This still happens today, with macOS 12.3.1, despite iOS&#39;s Music app having such an ability.&lt;/p&gt; &#xA;&lt;p&gt;I think this improvement might be well appreciated by many, hence this project is here, free and open source.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Due to how the app works, this app is not, and cannot be sandboxed. It also has the following requirement, due to the use of &lt;code&gt;OSLog&lt;/code&gt; API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The user running LosslessSwitcher must be an admin. This is not tested and assumed due to this &lt;a href=&#34;https://developer.apple.com/forums/thread/677068&#34;&gt;Apple Developer Forums thread&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Apple Music app must have Lossless mode on. (well, of course)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other than that, it should run on any Mac running macOS 11.4 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;By using LosslessSwitcher, you agree that under no circumstances will the developer or any contributors be held responsible or liable in any way for any claims, damages, losses, expenses, costs or liabilities whatsoever or any other consequences suffered by you or incurred by you directly or indirectly in connection with any form of usages of LosslessSwitcher.&lt;/p&gt; &#xA;&lt;h2&gt;Devices tested&lt;/h2&gt; &#xA;&lt;p&gt;I did not test on any Macs running macOS 11, &lt;del&gt;or any Apple Silicon based Macs (I don&#39;t have one 😢)&lt;/del&gt; Use at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;UPDATE: A &lt;a href=&#34;https://www.reddit.com/r/audiophile/comments/t6l3pb/comment/i69v5fe/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;reddit user&lt;/a&gt; has updated to me that LosslessSwitcher is working on Apple Silicon Macs! Thanks!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CPU&lt;/th&gt; &#xA;   &lt;th&gt;Mac Model&lt;/th&gt; &#xA;   &lt;th&gt;macOS Version&lt;/th&gt; &#xA;   &lt;th&gt;Beta?&lt;/th&gt; &#xA;   &lt;th&gt;Audio Device&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel&lt;/td&gt; &#xA;   &lt;td&gt;Mac Mini (2018)&lt;/td&gt; &#xA;   &lt;td&gt;12.2 / 12.4&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Denon PMA-50&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel&lt;/td&gt; &#xA;   &lt;td&gt;MacBook Pro 13 inch (2018)&lt;/td&gt; &#xA;   &lt;td&gt;12.3.1&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Denon PMA-50&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel&lt;/td&gt; &#xA;   &lt;td&gt;MacBook Pro 13 inch, four Thunderbolt 3 ports (2016)&lt;/td&gt; &#xA;   &lt;td&gt;12.3.1&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Topping DX7 Pro&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apple Silicon&lt;/td&gt; &#xA;   &lt;td&gt;MacBook Pro 13 inch (M1, 2020)&lt;/td&gt; &#xA;   &lt;td&gt;12.3.1&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;FX Audio DAC-X6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel&lt;/td&gt; &#xA;   &lt;td&gt;MacBook Pro 15 inch (2016)&lt;/td&gt; &#xA;   &lt;td&gt;12.4&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Topping D30Pro&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel&lt;/td&gt; &#xA;   &lt;td&gt;Hackintosh (XPS 9570, i7-8750H)&lt;/td&gt; &#xA;   &lt;td&gt;12.4&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Universal Audio Apollo X4 &amp;amp; FiiO Q3 &amp;amp; FiiO M5 (DAC mode)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apple Silicon&lt;/td&gt; &#xA;   &lt;td&gt;Mac mini (M1, 2020)&lt;/td&gt; &#xA;   &lt;td&gt;13.0&lt;/td&gt; &#xA;   &lt;td&gt;Developer Beta 2 (22A5286j)&lt;/td&gt; &#xA;   &lt;td&gt;Topping D50s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can add to this list by modifying this README and opening a new pull request!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;LosslessSwitcher is licensed under GPL-3.0.&lt;/p&gt; &#xA;&lt;h2&gt;Love the idea of this?&lt;/h2&gt; &#xA;&lt;p&gt;If you appreciate the development of this application, feel free to spread the word around so more people get to know about LosslessSwitcher. You can also show your support by &lt;a href=&#34;https://github.com/sponsors/vincentneo&#34;&gt;sponsoring&lt;/a&gt; this project!&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JohnSundell/Sweep&#34;&gt;Sweep&lt;/a&gt;, by @JohnSundell, a easy to use Swift &lt;code&gt;String&lt;/code&gt; scanner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rnine/SimplyCoreAudio&#34;&gt;SimplyCoreAudio&lt;/a&gt;, by @rnine, a framework that makes &lt;code&gt;CoreAudio&lt;/code&gt; so much easier to use.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>p0deje/Maccy</title>
    <updated>2022-07-03T02:24:20Z</updated>
    <id>tag:github.com,2022-07-03:/p0deje/Maccy</id>
    <link href="https://github.com/p0deje/Maccy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight clipboard manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;128px&#34; src=&#34;https://maccy.app/img/maccy/Logo.png&#34; alt=&#34;Logo&#34; align=&#34;left&#34;&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://maccy.app&#34;&gt;Maccy&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/p0deje/Maccy/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/p0deje/Maccy/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.bitrise.io/app/716921b669780314&#34;&gt;&lt;img src=&#34;https://img.shields.io/bitrise/716921b669780314/master?token=3pMiCb5dpFzlO-7jTYtO3Q&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/p0deje&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/buy%20me%20a%20coffee-donate-yellow.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maccy is a lightweight clipboard manager for macOS. It keeps the history of what you copy and lets you quickly navigate, search, and use previous clipboard contents.&lt;/p&gt; &#xA;&lt;p&gt;Maccy works on macOS Mojave 10.14 or higher.&lt;/p&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#advanced&#34;&gt;Advanced&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#ignore-copied-items&#34;&gt;Ignore Copied Items&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#ignore-custom-copy-types&#34;&gt;Ignore Custom Copy Types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lightweight and fast&lt;/li&gt; &#xA; &lt;li&gt;Keyboard-first&lt;/li&gt; &#xA; &lt;li&gt;Secure and private&lt;/li&gt; &#xA; &lt;li&gt;Native UI&lt;/li&gt; &#xA; &lt;li&gt;Open source and free&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest version from the &lt;a href=&#34;https://github.com/p0deje/Maccy/releases/latest&#34;&gt;releases&lt;/a&gt; page, or use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install --cask maccy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; to popup Maccy or click on its icon in the menu bar.&lt;/li&gt; &#xA; &lt;li&gt;Type what you want to find.&lt;/li&gt; &#xA; &lt;li&gt;To select the history item you wish to copy, press &lt;kbd&gt;ENTER&lt;/kbd&gt;, or click the item, or use &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; &#xA; &lt;li&gt;To choose the history item and paste, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;ENTER&lt;/kbd&gt;, or &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;CLICK&lt;/kbd&gt; the item, or use &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; &#xA; &lt;li&gt;To choose the history item and paste without formatting, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;ENTER&lt;/kbd&gt;, or &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;CLICK&lt;/kbd&gt; the item, or use &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;code&gt;n&lt;/code&gt; shortcut.&lt;/li&gt; &#xA; &lt;li&gt;To delete the history item, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To see the full text of the history item, wait a couple of seconds for tooltip.&lt;/li&gt; &#xA; &lt;li&gt;To pin the history item so that it remains on top of the list, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt;. The item will be moved to the top with a random but permanent keyboard shortcut. To unpin it, press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt; again.&lt;/li&gt; &#xA; &lt;li&gt;To clear all unpinned items, select &lt;em&gt;Clear&lt;/em&gt; in the menu, or press &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;. To clear all items including pinned, select &lt;em&gt;Clear&lt;/em&gt; in the menu with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; pressed, or press &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; + &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;DELETE (⌫)&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To disable Maccy and ignore new copies, click on the menu icon with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; pressed.&lt;/li&gt; &#xA; &lt;li&gt;To ignore only the next copy, click on the menu icon with &lt;kbd&gt;OPTION (⌥)&lt;/kbd&gt; + &lt;kbd&gt;SHIFT (⇧)&lt;/kbd&gt; pressed.&lt;/li&gt; &#xA; &lt;li&gt;To customize the behavior, check &#34;Preferences...&#34; window, or press &lt;kbd&gt;COMMAND (⌘)&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h4&gt;Ignore Copied Items&lt;/h4&gt; &#xA;&lt;p&gt;You can tell Maccy to ignore all copied items:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;defaults write org.p0deje.Maccy ignoreEvents true # default is false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful if you have some workflow for copying sensitive data. You can set &lt;code&gt;ignoreEvents&lt;/code&gt; to true, copy the data and set &lt;code&gt;ignoreEvents&lt;/code&gt; back to false.&lt;/p&gt; &#xA;&lt;h4&gt;Ignore Custom Copy Types&lt;/h4&gt; &#xA;&lt;p&gt;By default Maccy will ignore certain copy types that are considered to be confidential or temporary. The default list always include the following types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;org.nspasteboard.TransientType&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.nspasteboard.ConcealedType&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;org.nspasteboard.AutoGeneratedType&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, default configuration includes the following types but they can be removed or overwritten:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;com.agilebits.onepassword&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;com.typeit4me.clipping&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;de.petermaurer.TransientPasteboardType&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pasteboard generator type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;net.antelle.keeweb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can add additional custom types using preferences or &lt;code&gt;defaults&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;defaults write org.p0deje.Maccy ignoredPasteboardTypes -array-add &#34;com.myapp.CustomType&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to find what custom types are used by an application, you can use free application &lt;a href=&#34;https://github.com/sindresorhus/Pasteboard-Viewer&#34;&gt;Pasteboard-Viewer&lt;/a&gt;. Simply download the application, open it, copy something from the application you want to ignore and look for any custom types in the left sidebar. &lt;a href=&#34;https://github.com/p0deje/Maccy/issues/125&#34;&gt;Here is an example of using this approach to ignore Adobe InDesign&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you accidentally removed default types, you can restore the original configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;defaults write org.p0deje.Maccy ignoredPasteboardTypes -array &#34;de.petermaurer.TransientPasteboardType&#34; &#34;com.typeit4me.clipping&#34; &#34;Pasteboard generator type&#34; &#34;com.agilebits.onepassword&#34; &#34;net.antelle.keeweb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;There are dozens of similar applications out there, so why build another? Over the past years since I moved from Linux to macOS, I struggled to find a clipboard manager that is as free and simple as &lt;a href=&#34;http://parcellite.sourceforge.net&#34;&gt;Parcellite&lt;/a&gt;, but I couldn&#39;t. So I&#39;ve decided to build one.&lt;/p&gt; &#xA;&lt;p&gt;Also, I wanted to learn Swift and get acquainted with macOS application development.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/p0deje/Maccy/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mergesort/Boutique</title>
    <updated>2022-07-03T02:24:20Z</updated>
    <id>tag:github.com,2022-07-03:/mergesort/Boutique</id>
    <link href="https://github.com/mergesort/Boutique" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple but surprisingly fancy cache&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mergesort/Boutique/main/Images/logo.jpg&#34; alt=&#34;Boutique Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;A simple but surprisingly fancy data store&lt;/h3&gt; &#xA;&lt;p&gt;If you find Boutique valuable I would really appreciate it if you would consider helping &lt;a href=&#34;https://github.com/sponsors/mergesort&#34;&gt;sponsor my open source work&lt;/a&gt;, so I can continue to work on projects like Boutique to help developers like yourself.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Boutique is a simple but powerful persistence library, and more. With its dual-layered memory + disk caching architecture Boutique provides a way to build apps that update in real time with full offline storage in only a few lines of code using an incredibly simple API. Boutique is built atop &lt;a href=&#34;https://github.com/mergesort/Bodega&#34;&gt;Bodega&lt;/a&gt;, and you can find a reference implementation of an app built atop the Model View Controller Store architecture in this &lt;a href=&#34;https://github.com/mergesort/MVCS&#34;&gt;repo&lt;/a&gt; which shows you how to make an offline-ready SwiftUI app in only a few lines of code. You can read more about the thinking behind the architecture in this blog post exploring the &lt;a href=&#34;https://build.ms/2022/06/22/model-view-controller-store&#34;&gt;MVCS architecture&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mergesort/Boutique/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mergesort/Boutique/main/#store&#34;&gt;Store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mergesort/Boutique/main/#the-magic-of-stored&#34;&gt;The Magic Of @Stored&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mergesort/Boutique/main/#further-exploration&#34;&gt;Further Exploration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Boutique only has one concept to understand, the &lt;code&gt;Store&lt;/code&gt;. You may be familiar with the &lt;code&gt;Store&lt;/code&gt; from &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt; or &lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture&#34;&gt;The Composable Architecture&lt;/a&gt;, but unlike those frameworks you won&#39;t need to worry about interacting with &lt;code&gt;Action&lt;/code&gt;s or &lt;code&gt;Reducer&lt;/code&gt;s. With this &lt;code&gt;Store&lt;/code&gt; implementation all your data is cached on disk for you automatically, no additional code required. This allows you to build realtime updating apps with full offline support in an incredibly simple and straightforward manner.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Store&lt;/h3&gt; &#xA;&lt;p&gt;The entire surface area of the API for achieving full offline support and realtime model updates across your entire app is three methods, &lt;code&gt;.add()&lt;/code&gt;, &lt;code&gt;.remove()&lt;/code&gt;, and &lt;code&gt;.removeAll()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a Store ¹&#xA;let store = Store&amp;lt;Item&amp;gt;(&#xA;    storagePath: Store.documentsDirectory(appendingPathComponent: &#34;Items&#34;),&#xA;    cacheIdentifier: \.id&#xA;)&#xA;&#xA;// Add an item to the Store ²&#xA;let coat = Item(name: &#34;coat&#34;)&#xA;try await store.add(coat)&#xA;&#xA;// Remove an item from the Store&#xA;try await store.remove(coat)&#xA;&#xA;// Add two more items to the Store&#xA;let purse = Item(name: &#34;purse&#34;)&#xA;let belt = Item(name: &#34;belt&#34;)&#xA;try await store.add([purse, belt])&#xA;&#xA;// You can read items directly&#xA;print(store.items) // Prints [coat, belt]&#xA;&#xA;// Clear your store by removing all the items at once.&#xA;store.removeAll()&#xA;&#xA;print(self.items) // Prints []&#xA;&#xA;// Add an item to the store, removing all of the current items &#xA;// from the in-memory and disk cache before saving the new object. ³&#xA;try await store.add([purse, belt], invalidationStrategy: .removeNone)&#xA;try await store.add(coat, invalidationStrategy: .removeAll)&#xA;&#xA;print(store.items) // Prints [coat]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you&#39;re building a SwiftUI app you don&#39;t have to change a thing, Boutique was made for and with SwiftUI in mind.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Since items is an @Published property &#xA;// you can subscribe to any changes in realtime.&#xA;store.$items.sink({ items in&#xA;    print(&#34;Items was updated&#34;, items)&#xA;})&#xA;&#xA;// Works great with SwiftUI out the box for more complex pipelines.&#xA;.onReceive(store.$items, perform: {&#xA;    self.allItems = $0.filter({ $0.id &amp;gt; 100 })&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;¹ You can have as many or as few Stores as you&#39;d like. It may be a good strategy to have one Store for all of the images you download in your app, but you may also want to have one Store per model-type you&#39;d like to cache. You can even create separate stores for tests, Boutique isn&#39;t prescriptive and the choice for how you&#39;d like to model your data is yours.&lt;/p&gt; &#xA;&lt;p&gt;² Under the hood the Store is doing the work of saving all changes to disk when you add or remove objects.&lt;/p&gt; &#xA;&lt;p&gt;³ There are multiple cache invalidation strategies. &lt;code&gt;removeAll&lt;/code&gt; would be useful when you are downloading completely new data from the server and want to avoid a stale cache.&lt;/p&gt; &#xA;&lt;p&gt;⁴ In SwiftUI you can even power your &lt;code&gt;View&lt;/code&gt;s with &lt;code&gt;$items&lt;/code&gt; and use &lt;code&gt;.onReceive()&lt;/code&gt; to update and manipulate data published by the Store&#39;s &lt;code&gt;$items&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Storing images or other binary data in Boutique is technically supported but not recommended. The reason is that storing images in Boutique&#39;s can balloon up the in-memory store, and your app&#39;s memory as a result. For similar reasons as it&#39;s not recommended to store images or binary blobs in a database, it&#39;s not recommended to store images or binary blobs in Boutique.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;The Magic of @Stored&lt;/h3&gt; &#xA;&lt;p&gt;That was easy, but I want to show you something that makes Boutique feel downright magical. The &lt;code&gt;Store&lt;/code&gt; is a simple way to gain the benefits of offline storage and realtime updates, but by using the &lt;code&gt;@Stored&lt;/code&gt; property wrapper we can cache any property in-memory and on disk with just one line of code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class ImagesController: ObservableObject {&#xA;&#xA;    /// Creates an @Stored property to handle an in-memory and on-disk cache of images. ⁵&#xA;    @Stored(in: Store.imagesStore) var images&#xA;&#xA;    /// Fetches `RemoteImage` from the API, providing the user with a red panda if the request succeeds.&#xA;    func fetchImage() async throws -&amp;gt; RemoteImage {&#xA;        // Hit the API that provides you a random image&#39;s metadata&#xA;        let imageURL = URL(string: &#34;https://image.redpanda.club/random/json&#34;)!&#xA;        let randomImageRequest = URLRequest(url: imageURL)&#xA;        let (imageResponse, _) = try await URLSession.shared.data(for: randomImageRequest)&#xA;&#xA;        return RemoteImage(createdAt: .now, url: imageResponse.url, width: imageResponse.width, height: imageResponse.height, imageData: imageResponse.imageData)&#xA;    }&#xA;  &#xA;    /// Saves an image to the `Store` in memory and on disk.&#xA;    func saveImage(image: RemoteImage) async throws {&#xA;        try await self.$images.add(image)&#xA;    }&#xA;  &#xA;    /// Removes one image from the `Store` in memory and on disk.&#xA;    func removeImage(image: RemoteImage) async throws {&#xA;        try await self.$images.remove(image)&#xA;    }&#xA;  &#xA;    /// Removes all of the images from the `Store` in memory and on disk.&#xA;    func clearAllImages() async throws {&#xA;        try await self.$images.removeAll()&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it, that&#39;s really it. It&#39;s hard to believe that now your app can update its state in real time with full offline storage thanks to only one line of code. &lt;code&gt;@Stored(in: Store.imagesStore) var images&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;⁵ (If you&#39;d prefer to decouple the store from your view model, controller, or manager object, you can inject stores into the object like this.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class ImagesController: ObservableObject {&#xA;&#xA;    @Stored var images: [RemoteImage]&#xA;&#xA;    init(store: Store&amp;lt;RemoteImage&amp;gt;) {&#xA;        self._images = Stored(in: store)&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Further Exploration&lt;/h3&gt; &#xA;&lt;p&gt;Boutique is very useful on its own for building realtime offline-ready apps with just a few lines of code, but it&#39;s made even more powerful by the Model View Controller Store architecture I&#39;ve developed, demonstrated in the &lt;code&gt;ImagesController&lt;/code&gt; above. MVCS brings together the familiarity and simplicity of the &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html&#34;&gt;MVC architecture&lt;/a&gt; you know and love with the power of a &lt;code&gt;Store&lt;/code&gt;, to give your app a simple but well-defined state management and data architecture.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to learn more about how it works you can read about the philosophy in a &lt;a href=&#34;https://build.ms/2022/06/22/model-view-controller-store&#34;&gt;blog post&lt;/a&gt; where I explore MVCS for SwiftUI, and you can find a reference implementation of an offline-ready realtime MVCS app powered by Boutique in this &lt;a href=&#34;https://github.com/mergesort/MVCS&#34;&gt;repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 13.0+&lt;/li&gt; &#xA; &lt;li&gt;macOS 11.0+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 13.2+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.swift.org/package-manager&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for automating the distribution of Swift code and is integrated into the Swift build system.&lt;/p&gt; &#xA;&lt;p&gt;Once you have your Swift package set up, adding Boutique as a dependency is as easy as adding it to the dependencies value of your &lt;code&gt;Package.swift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/mergesort/Boutique.git&#34;, .upToNextMajor(from: &#34;1.0.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manually&lt;/h4&gt; &#xA;&lt;p&gt;If you prefer not to use SPM, you can integrate Boutique into your project manually by copying the files in.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;About me&lt;/h2&gt; &#xA;&lt;p&gt;Hi, I&#39;m &lt;a href=&#34;http://fabisevi.ch&#34;&gt;Joe&lt;/a&gt; everywhere on the web, but especially on &lt;a href=&#34;https://twitter.com/mergesort&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mergesort/Boutique/main/LICENSE&#34;&gt;license&lt;/a&gt; for more information about how you can use Boutique.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;Boutique is a labor of love to help developers build better apps, making it easier for you to unlock your creativity and make something amazing for your yourself and your users. If you find Boutique valuable I would really appreciate it if you&#39;d consider helping &lt;a href=&#34;https://github.com/sponsors/mergesort&#34;&gt;sponsor my open source work&lt;/a&gt;, so I can continue to work on projects like Boutique to help developers like yourself.&lt;/p&gt;</summary>
  </entry>
</feed>