<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:51:26Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iina/iina</title>
    <updated>2022-08-28T01:51:26Z</updated>
    <id>tag:github.com,2022-08-28:/iina/iina</id>
    <link href="https://github.com/iina/iina" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The modern video player for macOS.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;256&#34; src=&#34;https://github.com/iina/iina/raw/master/iina/Assets.xcassets/AppIcon.appiconset/iina-icon-256.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;IINA&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;IINA is the &lt;b&gt;modern&lt;/b&gt; video player for macOS.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://iina.io&#34;&gt;Website&lt;/a&gt; · &lt;a href=&#34;https://github.com/iina/iina/releases&#34;&gt;Releases&lt;/a&gt; · &lt;a href=&#34;https://t.me/IINAUsers&#34;&gt;Telegram Group&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Based on &lt;a href=&#34;https://github.com/mpv-player/mpv&#34;&gt;mpv&lt;/a&gt;, which provides the best decoding capacity on macOS&lt;/li&gt; &#xA; &lt;li&gt;Designed with modern versions of macOS (10.11+) in mind&lt;/li&gt; &#xA; &lt;li&gt;All the features you need for video and music: subtitles, playlists, chapters…and much, much more!&lt;/li&gt; &#xA; &lt;li&gt;Force Touch, picture-in-picture and advanced Touch Bar support&lt;/li&gt; &#xA; &lt;li&gt;Customizable user interface including multiple color schemes and on screen controller (OSC) layout positioning&lt;/li&gt; &#xA; &lt;li&gt;Standalone Music Mode designed for audio files&lt;/li&gt; &#xA; &lt;li&gt;Video thumbnails&lt;/li&gt; &#xA; &lt;li&gt;Online subtitle searching and intelligent local subtitle matching&lt;/li&gt; &#xA; &lt;li&gt;Unlimited playback history&lt;/li&gt; &#xA; &lt;li&gt;Convenient and interactive settings for video/audio filters&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable keyboard, mouse, trackpad, and gesture controls&lt;/li&gt; &#xA; &lt;li&gt;mpv configuration files and script system for advanced users&lt;/li&gt; &#xA; &lt;li&gt;Command line tool and browser extensions provided&lt;/li&gt; &#xA; &lt;li&gt;In active development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;IINA uses mpv for media playback. To build IINA, you can either fetch copies of these libraries we have already built (using the instructions below) or build them yourself by skipping to &lt;a href=&#34;https://raw.githubusercontent.com/iina/iina/develop/#building-mpv-manually&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using the pre-compiled libraries&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download pre-compiled libraries by running&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./other/download_libs.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tips: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change URL in the shell script if you want to download arch-specific binaries. By default, it will download the universal ones. You can download other binaries from &lt;code&gt;https://iina.io/dylibs/${ARCH}/fileList.txt&lt;/code&gt; where &lt;code&gt;ARCH&lt;/code&gt; can be &lt;code&gt;universal&lt;/code&gt;, &lt;code&gt;arm64&lt;/code&gt; and &lt;code&gt;x86_64&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you want to build an older IINA version, make sure to download the correponding dylibs. For example, &lt;code&gt;https://iina.io/dylibs/1.2.0/universal/fileList.txt&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Open iina.xcodeproj in the &lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835&#34;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building mpv manually&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build your own copy of mpv. If you&#39;re using a package manager to manage dependencies, the steps below outline the process.&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;p&gt;Use our tap as it passes in the correct flags to mpv&#39;s configure script:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew tap iina/homebrew-mpv-iina&#xA;$ brew install mpv-iina&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;p&gt;Pass in these flags when installing:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# port install mpv +uchardet -bundle -rubberband configure.args=&#34;--enable-libmpv-shared --enable-lua --enable-libarchive --enable-libbluray --disable-swift --disable-rubberband&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the correponding mpv and FFmpeg header files into &lt;code&gt;deps/include/&lt;/code&gt;, replacing the current ones. You can find them on GitHub &lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;(e.g. mpv)&lt;/a&gt;, but it&#39;s recommended to copy them from the Homebrew or MacPorts installation. Always make sure the header files have the same version of the dylibs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/parse_doc.rb&lt;/code&gt;. This script will fetch the latest mpv documentation and generate &lt;code&gt;MPVOption.swift&lt;/code&gt;, &lt;code&gt;MPVCommand.swift&lt;/code&gt; and &lt;code&gt;MPVProperty.swift&lt;/code&gt;. Copy them from &lt;code&gt;other/&lt;/code&gt; to &lt;code&gt;iina/&lt;/code&gt;, replacing the current files. This is only needed when updating libmpv. Note that if the API changes, the player source code may also need to be changed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;other/change_lib_dependencies.rb&lt;/code&gt;. This script will deploy the dependent libraries into &lt;code&gt;deps/lib&lt;/code&gt;. If you&#39;re using a package manager to manage dependencies, invoke it like so:&lt;/p&gt; &lt;h4&gt;With Homebrew&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ other/change_lib_dependencies.rb &#34;$(brew --prefix)&#34; &#34;$(brew --prefix mpv-iina)/lib/libmpv.dylib&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;With MacPorts&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ port contents mpv | grep &#39;\.dylib$&#39; | xargs other/change_lib_dependencies.rb /opt/local&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open iina.xcodeproj in the &lt;a href=&#34;https://itunes.apple.com/us/app/xcode/id497799835&#34;&gt;latest public version of Xcode&lt;/a&gt;. &lt;em&gt;IINA may not build if you use any other version.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove all of references to .dylib files from the Frameworks group in the sidebar and add all the .dylib files in &lt;code&gt;deps/lib&lt;/code&gt; to that group by clicking &#34;Add Files to iina...&#34; in the context menu.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add all the imported .dylib files into the &#34;Copy Dylibs&#34; phase under &#34;Build Phases&#34; tab of the iina target.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the necessary .dylib files present in the &#34;Link Binary With Libraries&#34; phase under &#34;Build Phases&#34;. Xcode should already added all dylibs under this section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;IINA is always looking for contributions, whether it&#39;s through bug reports, code, or new translations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you find a bug in IINA, or would like to suggest a new feature or enhancement, it&#39;d be nice if you could &lt;a href=&#34;https://github.com/iina/iina/issues&#34;&gt;search your problem first&lt;/a&gt;; while we don&#39;t mind duplicates, keeping issues unique helps us save time and consolidates effort. If you can&#39;t find your issue, feel free to &lt;a href=&#34;https://github.com/iina/iina/issues/new&#34;&gt;file a new one&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re looking to contribute code, please read &lt;a href=&#34;https://raw.githubusercontent.com/iina/iina/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;–it has information on IINA&#39;s process for handling contributions, and tips on how the code is structured to make your work easier.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;d like to translate IINA to your language, please visit &lt;a href=&#34;https://translate.iina.io&#34;&gt;IINA&#39;s instance of Crowdin&lt;/a&gt;. You can create an account for free and start translating and/or approving. Please do not send pull request to this repo directly, Crowdin will automatically sync new translations with our repo. If you want to translate IINA into a new language that is currently not in the list, feel free to open an issue.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>airbnb/lottie-ios</title>
    <updated>2022-08-28T01:51:26Z</updated>
    <id>tag:github.com,2022-08-28:/airbnb/lottie-ios</id>
    <link href="https://github.com/airbnb/lottie-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An iOS library to natively render After Effects vector animations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lottie for iOS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/lottie-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/lottie-ios.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat&#34; alt=&#34;SwiftPM&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/lottie-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/lottie-ios.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/airbnb/lottie-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/airbnb/lottie-ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;Swift Versions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;View documentation, FAQ, help, examples, and more at &lt;a href=&#34;http://airbnb.io/lottie/&#34;&gt;airbnb.io/lottie&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lottie is a cross-platform library for iOS, macOS, tvOS, &lt;a href=&#34;https://github.com/airbnb/lottie&#34;&gt;Android&lt;/a&gt;, and &lt;a href=&#34;https://github.com/airbnb/lottie-web&#34;&gt;Web&lt;/a&gt; that natively renders vector-based animations and art in realtime with minimal code.&lt;/p&gt; &#xA;&lt;p&gt;Lottie loads and renders animations and vectors exported in the bodymovin JSON format. Bodymovin JSON can be created and exported from After Effects with &lt;a href=&#34;https://github.com/bodymovin/bodymovin&#34;&gt;bodymovin&lt;/a&gt;, Sketch with &lt;a href=&#34;https://github.com/buba447/Lottie-Sketch-Export&#34;&gt;Lottie Sketch Export&lt;/a&gt;, and from &lt;a href=&#34;https://www.haiku.ai&#34;&gt;Haiku&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Designers can create &lt;strong&gt;and ship&lt;/strong&gt; beautiful animations without an engineer painstakingly recreating it by hand. Since the animation is backed by JSON they are extremely small in size but can be large in complexity! Animations can be played, resized, looped, sped up, slowed down, reversed, and even interactively scrubbed. Lottie can play or loop just a portion of the animation as well, the possibilities are endless! Animations can even be &lt;em&gt;&lt;strong&gt;changed at runtime&lt;/strong&gt;&lt;/em&gt; in various ways! Change the color, position, or any keyframable value!&lt;/p&gt; &#xA;&lt;p&gt;Here is just a small sampling of the power of Lottie&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples1.gif&#34; alt=&#34;Example1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples2.gif&#34; alt=&#34;Example2&#34;&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;_Gifs/Community 2_3.gif&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples3.gif&#34; alt=&#34;Example3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-ios/master/_Gifs/Examples4.gif&#34; alt=&#34;Abcs&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing Lottie&lt;/h2&gt; &#xA;&lt;p&gt;Lottie supports &lt;a href=&#34;https://www.swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;, and &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; (Both dynamic and static).&lt;/p&gt; &#xA;&lt;h3&gt;Github Repo&lt;/h3&gt; &#xA;&lt;p&gt;You can pull the &lt;a href=&#34;https://github.com/airbnb/lottie-ios/&#34;&gt;Lottie Github Repo&lt;/a&gt; and include the &lt;code&gt;Lottie.xcodeproj&lt;/code&gt; to build a dynamic or static library.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;To install Lottie using &lt;a href=&#34;https://github.com/apple/swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt; you can follow the &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;tutorial published by Apple&lt;/a&gt; using the URL for the Lottie repo with the current version:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In Xcode, select “File” → “Swift Packages” → “Add Package Dependency”&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;a href=&#34;https://github.com/airbnb/lottie-ios.git&#34;&gt;https://github.com/airbnb/lottie-ios.git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add the pod to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;lottie-ios&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing the cocoapod into your project import Lottie with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Lottie&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add Lottie to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;airbnb/lottie-ios&#34; &#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;carthage update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your application targets “General” tab under the “Linked Frameworks and Libraries” section, drag and drop lottie-ios.framework from the Carthage/Build/iOS directory that &lt;code&gt;carthage update&lt;/code&gt; produced.&lt;/p&gt; &#xA;&lt;h3&gt;Data collection&lt;/h3&gt; &#xA;&lt;p&gt;The Lottie SDK does not collect any data. We provide this notice to help you fill out &lt;a href=&#34;https://developer.apple.com/app-store/app-privacy-details/&#34;&gt;App Privacy Details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We always appreciate contributions from the community. To make changes to the project, you can clone the repo and open &lt;code&gt;Lottie.xcworkspace&lt;/code&gt;. This workspace includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the Lottie framework (for iOS, macOS, and tvOS)&lt;/li&gt; &#xA; &lt;li&gt;unit tests and snapshot tests (for iOS, must be run on an iPhone 8 simulator)&lt;/li&gt; &#xA; &lt;li&gt;an Example iOS app that lets you browse and test over 100 sample animations included in the repo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All pull requests with new features or bug fixes that affect how animations render should include snapshot test cases that validate the included changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To add a new sample animation to the snapshot testing suite, you can add the &lt;code&gt;.json&lt;/code&gt; file to &lt;code&gt;Tests/Samples&lt;/code&gt;. Re-run the snapshot tests to generate the new snapshot image files.&lt;/li&gt; &#xA; &lt;li&gt;To update existing snapshots after making changes, you can set &lt;code&gt;isRecording = true&lt;/code&gt; in &lt;code&gt;SnapshotTests.swift&lt;/code&gt; and then re-run the snapshot tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The project also includes several helpful commands defined in our &lt;a href=&#34;https://github.com/airbnb/lottie-ios/raw/master/Rakefile&#34;&gt;Rakefile&lt;/a&gt;. To use these, you need to install &lt;a href=&#34;https://bundler.io/&#34;&gt;Bundler&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo gem install bundle&#xA;$ bundle install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, all Swift code should be formatted according to the &lt;a href=&#34;https://github.com/airbnb/swift&#34;&gt;Airbnb Swift Style Guide&lt;/a&gt;. After making changes, you can reformat the code automatically using &lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;SwiftFormat&lt;/a&gt; and &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt; by running &lt;code&gt;bundle exec rake format:swift&lt;/code&gt;. Other helpful commands include:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle exec rake build:all # builds all targets for all platforms&#xA;$ bundle exec rake build&lt;span&gt;📦&lt;/span&gt;iOS # builds the Lottie package for iOS&#xA;$ bundle exec rake test:package # tests the Lottie package&#xA;$ bundle exec rake format:swift # reformat Swift code based on the Airbnb Swift Style Guide&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>siteline/SwiftUI-Introspect</title>
    <updated>2022-08-28T01:51:26Z</updated>
    <id>tag:github.com,2022-08-28:/siteline/SwiftUI-Introspect</id>
    <link href="https://github.com/siteline/SwiftUI-Introspect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Introspect underlying UIKit components from SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introspect for SwiftUI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/siteline/SwiftUI-Introspect&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/siteline/SwiftUI-Introspect.svg?style=svg&amp;amp;circle-token=6f995f204d4d417d31f79e7257f6e1ecf430ae07&#34; alt=&#34;CircleCI_Status&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://github.com/siteline/SwiftUI-Introspect/actions/workflows/build-and-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/siteline/swiftui-introspect/actions/workflows/build-and-test.yml/badge.svg?branch=master&#34; alt=&#34;GithubCI_Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://siteline.com&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Built%20by/Siteline/blue?icon=https://uploads-ssl.webflow.com/5f4513afbbfc64c4777fcccf/5f525b122370d681879e170e_siteline-icon.svg?sanitize=true&#34; alt=&#34;Siteline_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quintschaf.com&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/Maintained%20by/Quintschaf/cyan?icon=https://quintschaf.com/assets/logo.svg?sanitize=true&#34; alt=&#34;Quintschaf_Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Introspect allows you to get the underlying UIKit or AppKit element of a SwiftUI view.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For instance, with Introspect you can access &lt;code&gt;UITableView&lt;/code&gt; to modify separators, or &lt;code&gt;UINavigationController&lt;/code&gt; to customize the tab bar.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Introspect works by adding a custom &lt;code&gt;IntrospectionView&lt;/code&gt; to the view hierarchy, then looking into the UIKit hierarchy to find the relevant view.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siteline/SwiftUI-Introspect/master/docs/diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For instance, when introspecting a &lt;code&gt;TextField&lt;/code&gt;, it will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;IntrospectionView&lt;/code&gt; as an overlay of &lt;code&gt;TextField&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get the view host of the introspection view (which is alongside the view host of the &lt;code&gt;UITextField&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Get the previous sibling containing &lt;code&gt;UITextField&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note that this introspection method might break in future SwiftUI releases.&lt;/strong&gt; Future implementations might not use the same hierarchy, or might not use UIKit elements that are being looked for. Though the library is unlikely to crash, the &lt;code&gt;.introspect()&lt;/code&gt; method will not be called in those cases.&lt;/p&gt; &#xA;&lt;h3&gt;Usage in production&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Introspect&lt;/code&gt; is meant to be used in production. It does not use any private API. It only inspects the view hierarchy using publicly available methods. The library takes a defensive approach to inspecting the view hierarchy: there is no hard assumption that elements are laid out a certain way, there is no force-cast to UIKit classes, and the &lt;code&gt;introspect()&lt;/code&gt; methods are simply ignored if UIKit views cannot be found.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;SwiftPM&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/siteline/SwiftUI-Introspect.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;pod &#39;Introspect&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introspection&lt;/h2&gt; &#xA;&lt;h3&gt;Implemented&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI&lt;/th&gt; &#xA;   &lt;th&gt;UIKit&lt;/th&gt; &#xA;   &lt;th&gt;AppKit&lt;/th&gt; &#xA;   &lt;th&gt;Introspect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NavigationView (StackNavigationViewStyle)&lt;/td&gt; &#xA;   &lt;td&gt;UINavigationController&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectNavigationController()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NavigationView (DoubleColumnNavigationViewStyle)&lt;/td&gt; &#xA;   &lt;td&gt;UISplitViewController&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectSplitViewController()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Any embedded view&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;UIViewController&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectViewController()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScrollView&lt;/td&gt; &#xA;   &lt;td&gt;UIScrollView&lt;/td&gt; &#xA;   &lt;td&gt;NSScrollView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectScrollView()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;UITableView&lt;/td&gt; &#xA;   &lt;td&gt;NSTableView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectTableView()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;View in List&lt;/td&gt; &#xA;   &lt;td&gt;UITableViewCell&lt;/td&gt; &#xA;   &lt;td&gt;NSTableCellView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;introspectTableViewCell()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TabView&lt;/td&gt; &#xA;   &lt;td&gt;UITabBarController&lt;/td&gt; &#xA;   &lt;td&gt;NSTabView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectTabBarController()&lt;/code&gt; (iOS) &lt;br&gt; &lt;code&gt;.introspectTabView()&lt;/code&gt; (macOS)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TextField&lt;/td&gt; &#xA;   &lt;td&gt;UITextField&lt;/td&gt; &#xA;   &lt;td&gt;NSTextField&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectTextField()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Toggle&lt;/td&gt; &#xA;   &lt;td&gt;UISwitch&lt;/td&gt; &#xA;   &lt;td&gt;NSButton&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectSwitch()&lt;/code&gt; (iOS) &lt;br&gt; &lt;code&gt;.introspectButton()&lt;/code&gt; (macOS)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slider&lt;/td&gt; &#xA;   &lt;td&gt;UISlider&lt;/td&gt; &#xA;   &lt;td&gt;NSSlider&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectSlider()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stepper&lt;/td&gt; &#xA;   &lt;td&gt;UIStepper&lt;/td&gt; &#xA;   &lt;td&gt;NSStepper&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectStepper()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DatePicker&lt;/td&gt; &#xA;   &lt;td&gt;UIDatePicker&lt;/td&gt; &#xA;   &lt;td&gt;NSDatePicker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectDatePicker()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Picker (SegmentedPickerStyle)&lt;/td&gt; &#xA;   &lt;td&gt;UISegmentedControl&lt;/td&gt; &#xA;   &lt;td&gt;NSSegmentedControl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectSegmentedControl()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NSButton&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectButton()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ColorPicker&lt;/td&gt; &#xA;   &lt;td&gt;UIColorWell&lt;/td&gt; &#xA;   &lt;td&gt;NSColorWell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectColorWell()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TextEditor&lt;/td&gt; &#xA;   &lt;td&gt;UITextView&lt;/td&gt; &#xA;   &lt;td&gt;NSTextView&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.introspectTextView()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&#34;https://github.com/timbersoftware/SwiftUI-Introspect/issues&#34;&gt;create an issue&lt;/a&gt;. As a temporary solution, you can &lt;a href=&#34;https://raw.githubusercontent.com/siteline/SwiftUI-Introspect/master/#implement-your-own-selector&#34;&gt;implement your own selector&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cannot implement&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SwiftUI&lt;/th&gt; &#xA;   &lt;th&gt;Affected Frameworks&lt;/th&gt; &#xA;   &lt;th&gt;Why&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text&lt;/td&gt; &#xA;   &lt;td&gt;UIKit, AppKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UILabel / NSLabel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;UIKit, AppKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UIImageView / NSImageView&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Button&lt;/td&gt; &#xA;   &lt;td&gt;UIKit&lt;/td&gt; &#xA;   &lt;td&gt;Not a UIButton&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;List&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;List {&#xA;    Text(&#34;Item 1&#34;)&#xA;    Text(&#34;Item 2&#34;)&#xA;}&#xA;.introspectTableView { tableView in&#xA;    tableView.separatorStyle = .none&#xA;}&#xA;.introspectTableViewCell { cell in&#xA;    let backgroundView = UIView()&#xA;    backgroundView.backgroundColor = .clear&#xA;    cell.selectedBackgroundView = backgroundView&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ScrollView&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;ScrollView {&#xA;    Text(&#34;Item 2&#34;)&#xA;}&#xA;.introspectScrollView { scrollView in&#xA;    scrollView.refreshControl = UIRefreshControl()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NavigationView&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;NavigationView {&#xA;    Text(&#34;Item 2&#34;)&#xA;    .introspectNavigationController { navigationController in&#xA;        navigationController.navigationBar.backgroundColor = .red&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TextField&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;TextField(&#34;Text Field&#34;, text: $textFieldValue)&#xA;.introspectTextField { textField in&#xA;    textField.layer.backgroundColor = UIColor.red.cgColor&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implement your own selector&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing an element?&lt;/strong&gt; Please &lt;a href=&#34;https://github.com/timbersoftware/SwiftUI-Introspect/issues&#34;&gt;create an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In case Introspect doesn&#39;t support the SwiftUI element that you&#39;re looking for, you can implement your own selector. For example, to look for a &lt;code&gt;UITextField&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension View {&#xA;    public func introspectTextField(customize: @escaping (UITextField) -&amp;gt; ()) -&amp;gt; some View {&#xA;        return inject(UIKitIntrospectionView(&#xA;            selector: { introspectionView in&#xA;                guard let viewHost = Introspect.findViewHost(from: introspectionView) else {&#xA;                    return nil&#xA;                }&#xA;                return Introspect.previousSibling(containing: UITextField.self, from: viewHost)&#xA;            },&#xA;            customize: customize&#xA;        ))&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use any of the following &lt;a href=&#34;https://github.com/timbersoftware/SwiftUI-Introspect/raw/master/Introspect/Introspect.swift#L3-L71&#34;&gt;methods&lt;/a&gt; to inspect the hierarchy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.findChild(ofType:in:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.findChildUsingFrame(ofType:in:from:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.previousSibling(containing:from:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.nextSibling(containing:from:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.findAncestor(ofType:from:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.findHostingView(from:)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Introspect.findViewHost(from:)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Releasing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increment version number:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec fastlane run increment_version_number bump_type:minor # major|minor|patch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update changelog with new version&lt;/li&gt; &#xA; &lt;li&gt;Bump version in &lt;code&gt;Introspect.podspec&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commit and push changes&lt;/li&gt; &#xA; &lt;li&gt;Tag new version:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git tag -a &amp;lt;VERSION&amp;gt; -m &#34;&amp;lt;MESSAGE&amp;gt;&#34;&#xA;$ git push origin --tags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Push to cocoapods trunk:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bundle exec pod trunk push .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- References --&gt;</summary>
  </entry>
</feed>