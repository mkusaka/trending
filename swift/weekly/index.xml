<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-09T02:03:06Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RobotsAndPencils/xcodes</title>
    <updated>2023-04-09T02:03:06Z</updated>
    <id>tag:github.com,2023-04-09:/RobotsAndPencils/xcodes</id>
    <link href="https://github.com/RobotsAndPencils/xcodes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The best command-line tool to install and switch between multiple versions of Xcode.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xcodes&lt;/h1&gt; &#xA;&lt;p&gt;The best command-line tool to install and switch between multiple versions of Xcode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you&#39;re looking for an app version of &lt;code&gt;xcodes&lt;/code&gt;, try &lt;a href=&#34;https://github.com/RobotsAndPencils/XcodesApp&#34;&gt;Xcodes.app&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/RobotsAndPencils/xcodes/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/Header.png&#34; alt=&#34;Header Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew (Preferred)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install robotsandpencils/made/xcodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Download a release&lt;/summary&gt; &#xA; &lt;p&gt;Download the latest release from the &lt;a href=&#34;https://github.com/RobotsAndPencils/xcodes/releases&#34;&gt;Releases&lt;/a&gt; page. These are Developer ID-signed release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using &lt;a href=&#34;https://github.com/yonaskolb/Mint&#34;&gt;Mint&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mint install RobotsAndPencils/xcodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Build from source&lt;/summary&gt; &#xA; &lt;p&gt;Building from source requires Xcode 12.0 or later, so it&#39;s not an option for setting up a computer from scratch.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/RobotsAndPencils/xcodes&#xA;cd xcodes&#xA;make install&#xA;# or, if /usr/local/ isn&#39;t in your PATH&#xA;PREFIX=/your/install/directory make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;While installing, you may get the following output:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift build&#xA;error: terminated(72): xcrun --sdk macosx --find xctest output:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If that occurs, it means you need to select a version of Xcode. You can do this with &lt;code&gt;xcode-select&lt;/code&gt; or by choosing a Command Line Tools option in Xcode&#39;s preferences Locations tab.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install a specific version of Xcode using a command like one of these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xcodes install 10.2.1&#xA;xcodes install 11 Beta 7&#xA;xcodes install 11.2 GM seed&#xA;xcodes install 9.0 --path ~/Archive/Xcode_9.xip&#xA;xcodes install --latest-prerelease&#xA;xcodes install --latest --directory &#34;/Volumes/Bag Of Holding/&#34;&#xA;xcodes install --latest --experimental-unxip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll then be prompted to enter your Apple ID username and password. You can also provide these with the &lt;code&gt;XCODES_USERNAME&lt;/code&gt; and &lt;code&gt;XCODES_PASSWORD&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;After successfully authenticating, xcodes will save your Apple ID password into the keychain and will remember your Apple ID for future use. If you need to use a different Apple ID than the one that&#39;s remembered, set the &lt;code&gt;XCODES_USERNAME&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;xcodes will download and install the version you asked for so that it&#39;s ready to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;(1/6) Downloading Xcode 11.2.0: 100%&#xA;(2/6) Unarchiving Xcode (This can take a while)&#xA;(3/6) Moving Xcode to /Applications/Xcode-11.2.0.app&#xA;(4/6) Moving Xcode archive Xcode-11.2.0.xip to the Trash&#xA;(5/6) Checking security assessment and code signing&#xA;(6/6) Finishing installation&#xA;xcodes requires superuser privileges in order to finish installation.&#xA;macOS User Password:&#xA;&#xA;Xcode 11.2.0 has been installed to /Applications/Xcode-11.2.0.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://aria2.github.io&#34;&gt;aria2&lt;/a&gt; installed (it&#39;s available in Homebrew, &lt;code&gt;brew install aria2&lt;/code&gt;), then xcodes will default to use it for downloads. It uses up to 16 connections to download Xcode 3-5x faster than URLSession.&lt;/p&gt; &#xA;&lt;p&gt;Xcode will be installed to /Applications by default, but you can provide the path to a different directory with the &lt;code&gt;--directory&lt;/code&gt; option or the &lt;code&gt;XCODES_DIRECTORY&lt;/code&gt; environment variable. All of the xcodes commands support this option, like &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;uninstall&lt;/code&gt;, so you can manage Xcode versions that aren&#39;t in /Applications. xcodes supports having all of your Xcode versions installed in &lt;em&gt;one&lt;/em&gt; directory, wherever that may be.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;.xcode-version&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;We recommend the creation of a &lt;code&gt;.xcode-version&lt;/code&gt; file to explicitly declare and store the Xcode version to be used by your CI environment as well as your team.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;13.4.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/XCODE_VERSION.md&#34;&gt;the proposal&lt;/a&gt; of &lt;code&gt;.xcode-version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;download &amp;lt;version&amp;gt;&lt;/code&gt;: Download a specific version of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;install &amp;lt;version&amp;gt;&lt;/code&gt;: Download and install a specific version of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;installed&lt;/code&gt;: List the versions of Xcode that are installed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt;: List all versions of Xcode that are available to install&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;select&lt;/code&gt;: Change the selected Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uninstall&lt;/code&gt;: Uninstall a specific version of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;update&lt;/code&gt;: Update the list of available versions of Xcode&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: Print the version number of xcodes itself&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;signout&lt;/code&gt;: Clears the stored username and password&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Experimental Unxip - for faster unxipping&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to the amazing work by &lt;a href=&#34;https://github.com/saagarjha/unxip&#34;&gt;saagarjhi&lt;/a&gt; - Xcodes now includes the ability to unxip up to 70% faster on some systems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xcodes install --latest --experimental-unxip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell Completion Scripts&lt;/h3&gt; &#xA;&lt;p&gt;xcodes can generate completion scripts which allow you to press the tab key on your keyboard to autocomplete commands and arguments when typing an xcodes command. The steps to install a completion script depend on the shell that you use. More information about installation instructions for different shells and the underlying implementation is available in the &lt;a href=&#34;https://github.com/apple/swift-argument-parser/raw/main/Sources/ArgumentParser/Documentation.docc/Articles/InstallingCompletionScripts.md&#34;&gt;swift-argument-parser repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Zsh, with oh-my-zsh:&lt;/summary&gt; &#xA; &lt;p&gt;Run the following commands:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir ~/.oh-my-zsh/completions&#xA;xcodes --generate-completion-script &amp;gt; ~/.oh-my-zsh/completions/_xcodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need Xcode 13 in order to build and run xcodes.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Xcode&lt;/summary&gt; Even though xcodes is a command-line app, all of the normal functionality works in Xcode, like building, running, and running tests. You can even type text into Xcode&#39;s console when it prompts you for input like your Apple ID or 2FA code. &#xA; &lt;p&gt;When running xcodes from Xcode, if you want to run a particular command or pass some arguments, you can hold the option key to present a sheet with more options. This means you&#39;d use &lt;kbd&gt;Option&lt;/kbd&gt; + &lt;kbd&gt;Command&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt; or hold &lt;kbd&gt;Option&lt;/kbd&gt; while clicking the Run button. Here you can add, remove, and toggle arguments that will be passed to xcodes when it&#39;s launched.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/XcodeRunSheet.png&#34; alt=&#34;Xcode Edit Scheme Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Swift command line tools&lt;/summary&gt; You can also use the Swift command line tools once you have Xcode installed: &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Build: &lt;code&gt;swift build&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Run: &lt;code&gt;swift run&lt;/code&gt;, or commands like &lt;code&gt;swift run xcodes list&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Run tests: &lt;code&gt;swift test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;There&#39;s a Makefile to help build xcodes for distribution. We already do this for you in order to provide Developer ID-signed and notarized release builds via Homebrew (see &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/#installation&#34;&gt;Installation&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Releasing a new version of xcodes&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Bump the version number in Version.swift, commit the change, and tag it&#xA;vim Sources/XcodesKit/Version.swift&#xA;git add Sources/XcodesKit/Version.swift&#xA;git commit -m &#34;Bump version to $VERSION&#34;&#xA;git tag -asm &#34;$VERSION&#34; &#34;$VERSION&#34;&#xA;&#xA;# Clean first&#xA;make clean&#xA;&#xA;# Make a release build of xcodes, sign it, and zip it&#xA;make zip&#xA;# Create a Homebrew bottle&#xA;make bottle VERSION=&#34;$VERSION&#34;&#xA;&#xA;# Notarize the release build&#xA;# This can take a while&#xA;make notarize \&#xA;    TEAMID=&#34;ABC123&#34;&#xA;&#xA;# Push the new version bump commit and tag&#xA;git push --follow-tags&#xA;&#xA;# Edit the draft release created by Release Drafter to point at the new tag&#xA;# Set the release title to the new version&#xA;# Add the xcodes.zip and xcodes-$VERSION.mojave.tar.gz files to the release&#xA;# Publish the release&#xA;&#xA;# Update the Homebrew Bottle: https://github.com/RobotsAndPencils/homebrew-made/blob/master/Formula/xcodes.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Notable design decisions are recorded in &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/DECISIONS.md&#34;&gt;DECISIONS.md&lt;/a&gt;. The Apple authentication flow is described in &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/Apple.paw&#34;&gt;Apple.paw&lt;/a&gt;, which will allow you to play with the API endpoints that are involved using the &lt;a href=&#34;https://paw.cloud&#34;&gt;Paw&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xcpretty/xcode-install&#34;&gt;&lt;code&gt;xcode-install&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/spaceship&#34;&gt;fastlane/spaceship&lt;/a&gt; both deserve credit for figuring out the hard parts of what makes this possible.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.robotsandpencils.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/xcodes/main/R&amp;amp;PLogo.png&#34; width=&#34;153&#34; height=&#34;74&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Made with ❤️ by &lt;a href=&#34;http://www.robotsandpencils.com&#34;&gt;Robots &amp;amp; Pencils&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/robotsNpencils&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://github.com/robotsandpencils&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twostraws/whats-new-in-swift-5-8</title>
    <updated>2023-04-09T02:03:06Z</updated>
    <id>tag:github.com,2023-04-09:/twostraws/whats-new-in-swift-5-8</id>
    <link href="https://github.com/twostraws/whats-new-in-swift-5-8" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What’s new in Swift 5.8?&lt;/h1&gt; &#xA;&lt;p&gt;This is an Xcode playground that demonstrates the new features introduced in Swift 5.8:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lift all limitations on variables in result builders&lt;/li&gt; &#xA; &lt;li&gt;Function back deployment&lt;/li&gt; &#xA; &lt;li&gt;Allow implicit self for weak self captures, after self is unwrapped&lt;/li&gt; &#xA; &lt;li&gt;Concise magic file names&lt;/li&gt; &#xA; &lt;li&gt;Opening existential arguments to optional parameters&lt;/li&gt; &#xA; &lt;li&gt;Collection downcasts in cast patterns are now supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is designed to complement my existing article &lt;a href=&#34;https://www.hackingwithswift.com/articles/256/whats-new-in-swift-5-8&#34;&gt;What’s New in Swift 5.8&lt;/a&gt;. You might also want to read previous articles about the evolution of Swift 5:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/249/whats-new-in-swift-5-7&#34;&gt;What’s New in Swift 5.7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/247/whats-new-in-swift-5-6&#34;&gt;What’s New in Swift 5.6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/233/whats-new-in-swift-5-5&#34;&gt;What’s New in Swift 5.5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/228/whats-new-in-swift-5-4&#34;&gt;What’s New in Swift 5.4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/218/whats-new-in-swift-5-3&#34;&gt;What’s New in Swift 5.3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/212/whats-new-in-swift-5-2&#34;&gt;What’s New in Swift 5.2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/182/whats-new-in-swift-5-1&#34;&gt;What’s New in Swift 5.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackingwithswift.com/articles/126/whats-new-in-swift-5-0&#34;&gt;What’s New in Swift 5.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, here you can find a complete breakdown of all Swift changes from 1.0 through 5.8, including downloadable playgrounds: &lt;a href=&#34;https://www.hackingwithswift.com/swift&#34;&gt;what&#39;s new in Swift&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you hit problems or have questions, you&#39;re welcome to tweet me &lt;a href=&#34;https://twitter.com/twostraws&#34;&gt;@twostraws&lt;/a&gt; or email &lt;a href=&#34;mailto:paul@hackingwithswift.com&#34;&gt;paul@hackingwithswift.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/twostraws/whats-new-in-swift-5-8/main/playground-screenshot.png&#34; alt=&#34;Screenshot of Xcode 14.3 running this playground.&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apollographql/apollo-ios</title>
    <updated>2023-04-09T02:03:06Z</updated>
    <id>tag:github.com,2023-04-09:/apollographql/apollo-ios</id>
    <link href="https://github.com/apollographql/apollo-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📱  A strongly-typed, caching GraphQL client for iOS, written in Swift.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/146856/124335690-fc7ecd80-db4f-11eb-93fa-dcf4469bb07b.png&#34; alt=&#34;Apollo GraphQL&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://circleci.com/gh/apollographql/apollo-ios/tree/main&#34;&gt; &lt;img src=&#34;https://circleci.com/gh/apollographql/apollo-ios/tree/main.svg?style=shield&#34; alt=&#34;CircleCI build status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/apollographql/apollo-ios/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-lightgrey.svg?maxAge=2592000&#34; alt=&#34;MIT license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/apollographql/apollo-ios/main/Platforms&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-333333.svg?sanitize=true&#34; alt=&#34;Supported Platforms: iOS, macOS, tvOS, watchOS&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/apple/swift&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-5.7-orange.svg?sanitize=true&#34; alt=&#34;Swift 5.7 supported&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift_Package_Manager-compatible-orange?style=flat-square&#34; alt=&#34;Swift Package Manager compatible&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Apollo&#34;&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/Apollo.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Apollo iOS is a strongly-typed, caching GraphQL client, written in Swift&lt;/h3&gt; &#xA;&lt;p&gt;It allows you to execute queries and mutations against a GraphQL server, and returns results as query-specific Swift types. This means you don’t have to deal with parsing JSON, or passing around dictionaries and making clients cast values to the right type manually. You also don&#39;t have to write model types yourself, because these are generated from the GraphQL definitions your UI uses.&lt;/p&gt; &#xA;&lt;p&gt;As the generated types are query-specific, you&#39;re only able to access data you actually specify as part of a query. If you don&#39;t ask for a field, you won&#39;t be able to access the corresponding property. In effect, this means you can now rely on the Swift type checker to make sure errors in data access show up at compile time. With our Xcode integration, you can conveniently work with your UI code and corresponding GraphQL definitions side by side, and it will even validate your query documents, and show errors inline.&lt;/p&gt; &#xA;&lt;p&gt;Apollo iOS does more than simply run your queries against a GraphQL server: It normalizes query results to construct a client-side cache of your data, which is kept up to date as further queries and mutations are run. This means your UI is always internally consistent, and can be kept fully up-to-date with the state on the server with the minimum number of queries required.&lt;/p&gt; &#xA;&lt;p&gt;This combination of models with value semantics, one way data flow, and automatic consistency management, leads to a very powerful and elegant programming model that allows you to eliminate common glue code and greatly simplifies app development.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;If you are new to Apollo iOS we recommend our &lt;a href=&#34;https://www.apollographql.com/docs/ios/get-started&#34;&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;There is also &lt;a href=&#34;https://www.apollographql.com/docs/ios/&#34;&gt;comprehensive documentation&lt;/a&gt; including an &lt;a href=&#34;https://www.apollographql.com/docs/ios/docc/documentation/index&#34;&gt;API reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases and changelog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apollographql/apollo-ios/releases&#34;&gt;All releases&lt;/a&gt; are catalogued and we maintain a &lt;a href=&#34;https://github.com/apollographql/apollo-ios/raw/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt; which details all changes to the library.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/apollographql/apollo-ios/raw/main/ROADMAP.md&#34;&gt;roadmap&lt;/a&gt; is a high-level document that describes the next major steps or milestones for this project. We are always open to feature requests, and contributions from the community.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is being developed using Xcode 14 and Swift 5.7.&lt;/p&gt; &#xA;&lt;p&gt;If you open &lt;code&gt;Apollo.xcodeproj&lt;/code&gt;, you should be able to run the tests of the &lt;code&gt;Apollo&lt;/code&gt;, &lt;code&gt;ApolloSQLite&lt;/code&gt;, and &lt;code&gt;ApolloWebSocket&lt;/code&gt; frameworks on your Mac or an iOS Simulator. &lt;code&gt;ApolloCodegenLib&lt;/code&gt; tests can only be run on macOS.&lt;/p&gt; &#xA;&lt;p&gt;Some of the tests run against &lt;a href=&#34;https://github.com/apollographql/starwars-server&#34;&gt;a simple GraphQL server serving the Star Wars example schema&lt;/a&gt; (see installation instructions there).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute, please refer to the &lt;a href=&#34;https://github.com/apollographql/apollo-ios/raw/main/CONTRIBUTING.md&#34;&gt;Apollo Contributor Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AnthonyMDev&#34;&gt;@AnthonyMDev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/calvincestari&#34;&gt;@calvincestari&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bignimbus&#34;&gt;@bignimbus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who is Apollo?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apollographql.com/&#34;&gt;Apollo&lt;/a&gt; builds open-source software and a graph platform to unify GraphQL across your apps and services. We help you ship faster with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/studio/develop/&#34;&gt;Apollo Studio&lt;/a&gt; – A free, end-to-end platform for managing your GraphQL lifecycle. Track your GraphQL schemas in a hosted registry to create a source of truth for everything in your graph. Studio provides an IDE (Apollo Explorer) so you can explore data, collaborate on queries, observe usage, and safely make schema changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/apollo-federation&#34;&gt;Apollo Federation&lt;/a&gt; – The industry-standard open architecture for building a distributed graph. Use Apollo’s gateway to compose a unified graph from multiple subgraphs, determine a query plan, and route requests across your services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/apollo-client/&#34;&gt;Apollo Client&lt;/a&gt; – The most popular GraphQL client for the web. Apollo also builds and maintains &lt;a href=&#34;https://github.com/apollographql/apollo-ios&#34;&gt;Apollo iOS&lt;/a&gt; and &lt;a href=&#34;https://github.com/apollographql/apollo-kotlin&#34;&gt;Apollo Kotlin&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/docs/apollo-server/&#34;&gt;Apollo Server&lt;/a&gt; – A production-ready JavaScript GraphQL server that connects to any microservice, API, or database. Compatible with all popular JavaScript frameworks and deployable in serverless environments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn how to build with Apollo&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://odyssey.apollographql.com/&#34;&gt;Odyssey&lt;/a&gt; learning platform, the perfect place to start your GraphQL journey with videos and interactive code challenges. Join the &lt;a href=&#34;https://community.apollographql.com/&#34;&gt;Apollo Community&lt;/a&gt; to interact with and get technical help from the GraphQL community.&lt;/p&gt;</summary>
  </entry>
</feed>