<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T02:06:59Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KeyboardKit/KeyboardKit</title>
    <updated>2023-07-30T02:06:59Z</updated>
    <id>tag:github.com,2023-07-30:/KeyboardKit/KeyboardKit</id>
    <link href="https://github.com/KeyboardKit/KeyboardKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;KeyboardKit helps you create custom keyboards for iOS and iPadOS.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KeyboardKit/KeyboardKit/master/Resources/Logo_GitHub.png&#34; alt=&#34;KeyboardKit Logo&#34; title=&#34;KeyboardKit&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/KeyboardKit/KeyboardKit?color=%2300550&amp;amp;sort=semver&#34; alt=&#34;Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/swift-5.6-orange.svg?sanitize=true&#34; alt=&#34;Swift 5.6&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/KeyboardKit/KeyboardKit&#34; alt=&#34;MIT License&#34;&gt; &lt;a href=&#34;https://twitter.com/getkeyboardkit&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/url?label=Twitter&amp;amp;style=social&amp;amp;url=https%3A%2F%2Ftwitter.com%2Fgetkeyboardkit&#34; alt=&#34;Twitter: @@getkeyboardkit&#34; title=&#34;Twitter: @getkeyboardkit&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://techhub.social/@keyboardkit&#34;&gt; &lt;img src=&#34;https://img.shields.io/mastodon/follow/109340839247880048?domain=https%3A%2F%2Ftechhub.social&amp;amp;style=social&#34; alt=&#34;Mastodon: @keyboardkit@techhub.social&#34; title=&#34;Mastodon: @keyboardkit@mastodon.social&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About KeyboardKit&lt;/h2&gt; &#xA;&lt;p&gt;KeyboardKit helps you create custom keyboards for iOS and iPadOS, using technologies like Swift and SwiftUI. It extends Apple&#39;s native keyboard APIs and provides you with more functionality than what is otherwise available.&lt;/p&gt; &#xA;&lt;p&gt;KeyboardKit lets you create keyboards that mimic the native iOS keyboards in a few lines of code. These keyboards can be customized to great extent to change input keys, layout, design, behavior etc.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KeyboardKit/KeyboardKit/master/Resources/Demo.gif&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;KeyboardKit also lets you use completely custom views together with the features that the library provides. Most of the library can be used on all major Apple platforms.&lt;/p&gt; &#xA;&lt;p&gt;KeyboardKit supports &lt;code&gt;iOS 14&lt;/code&gt;, &lt;code&gt;macOS 11&lt;/code&gt;, &lt;code&gt;tvOS 14&lt;/code&gt; and &lt;code&gt;watchOS 7&lt;/code&gt;, although some features are unavailable on some platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;KeyboardKit can be installed with the Swift Package Manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/KeyboardKit/KeyboardKit.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add the library to the main app, the keyboard extension and any other targets that need it. If you prefer to not have external dependencies, you can also just copy the source code into your app.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Locales&lt;/h2&gt; &#xA;&lt;p&gt;KeyboardKit is localized in &lt;strong&gt;60+&lt;/strong&gt; keyboard-specific locales (&lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/localization&#34;&gt;read more&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;🇦🇱 🇦🇪 🇦🇲 🇧🇾 🇧🇬 🇦🇩 🏳️ 🇭🇷 🇨🇿 🇩🇰 &lt;br&gt; 🇳🇱 🇧🇪 🇺🇸 🇬🇧 🇺🇸 🇪🇪 🇫🇴 🇵🇭 🇫🇮 🇫🇷 &lt;br&gt; 🇧🇪 🇨🇭 🇬🇪 🇩🇪 🇦🇹 🇨🇭 🇬🇷 🇺🇸 🇮🇱 🇭🇺 &lt;br&gt; 🇮🇸 🇮🇩 🇮🇪 🇮🇹 🇰🇿 🇹🇯 🇹🇯 🇹🇯 🇱🇻 🇱🇹 &lt;br&gt; 🇲🇰 🇲🇾 🇲🇹 🇲🇳 🇳🇴 🇮🇷 🇵🇱 🇵🇹 🇧🇷 🇷🇴 &lt;br&gt; 🇷🇺 🇷🇸 🇷🇸 🇸🇰 🇸🇮 🇪🇸 🇰🇪 🇸🇪 🇹🇷 🇺🇦 &lt;br&gt; 🇺🇿 &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;KeyboardKit comes packed features to help you build amazing and powerful keyboards:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💥 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/actions&#34;&gt;Actions&lt;/a&gt; - KeyboardKit has keyboard actions like characters, emojis, actions, custom ones etc. and ways to handle them.&lt;/li&gt; &#xA; &lt;li&gt;🎨 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/appearance&#34;&gt;Appearance&lt;/a&gt; - KeyboardKit has an appearance engine that lets you style your keyboards to great extent.&lt;/li&gt; &#xA; &lt;li&gt;💡 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/autocomplete&#34;&gt;Autocomplete&lt;/a&gt; - KeyboardKit can perform autocomplete and present suggestions as the user types.&lt;/li&gt; &#xA; &lt;li&gt;🗯 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/callouts&#34;&gt;Callouts&lt;/a&gt; - KeyboardKit can show input callouts as the user types, as well as callouts with secondary actions.&lt;/li&gt; &#xA; &lt;li&gt;🎤 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/dictation&#34;&gt;Dictation&lt;/a&gt; - (BETA) KeyboardKit can perform dictation from the keyboard extension.&lt;/li&gt; &#xA; &lt;li&gt;😊 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/emojis&#34;&gt;Emojis&lt;/a&gt; - KeyboardKit defines emojis and emoji categories, as well as emoji keyboards.&lt;/li&gt; &#xA; &lt;li&gt;⌨️ &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/external-keyboards&#34;&gt;External Keyboards&lt;/a&gt; - KeyboardKit lets you detect whether or not an external keyboard is connected.&lt;/li&gt; &#xA; &lt;li&gt;👋 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/feedback&#34;&gt;Feedback&lt;/a&gt; - KeyboardKit keyboards can give and haptic feedback feedback as the user types.&lt;/li&gt; &#xA; &lt;li&gt;👆 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/gestures&#34;&gt;Gestures&lt;/a&gt; - KeyboardKit has keyboard-specific gestures that you can use in your own keyboards.&lt;/li&gt; &#xA; &lt;li&gt;🔤 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/input&#34;&gt;Input&lt;/a&gt; - KeyboardKit supports &lt;code&gt;alphabetic&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;symbolic&lt;/code&gt; and completely custom input sets.&lt;/li&gt; &#xA; &lt;li&gt;⌨️ &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/keyboard&#34;&gt;Keyboard&lt;/a&gt; - KeyboardKit supports different keyboard types, provides observable keyboard state, etc.&lt;/li&gt; &#xA; &lt;li&gt;🔣 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/layout&#34;&gt;Layout&lt;/a&gt; - KeyboardKit supports creating keyboard layouts for various devices, locales etc.&lt;/li&gt; &#xA; &lt;li&gt;🌐 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/localization&#34;&gt;Localization&lt;/a&gt;- KeyboardKit defines keyboard-specific locales with localized content and assets.&lt;/li&gt; &#xA; &lt;li&gt;👁 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/previews&#34;&gt;Previews&lt;/a&gt; - KeyboardKit has utilites that help previewing keyboard views and components in SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;➡️ &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/proxy-extensions&#34;&gt;Proxy&lt;/a&gt; - KeyboardKit extends &lt;code&gt;UITextDocumentProxy&lt;/code&gt; and makes it do a lot more.&lt;/li&gt; &#xA; &lt;li&gt;🚏 &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/routing&#34;&gt;Routing&lt;/a&gt; - KeyboardKit lets you route text to other destinations than the main app.&lt;/li&gt; &#xA; &lt;li&gt;⬅️ &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/rtl&#34;&gt;RTL&lt;/a&gt; - KeyboardKit supports RTL (right-to-left) locales, such as Arabic, Persian, Kurdish Sorani etc.&lt;/li&gt; &#xA; &lt;li&gt;⚙️ &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/settings&#34;&gt;Settings&lt;/a&gt; - KeyboardKit has tools for accessing and linking to an app&#39;s keyboard settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The online documentation has a &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/getting-started&#34;&gt;getting-started guide&lt;/a&gt; that will help you get started with the library.&lt;/p&gt; &#xA;&lt;p&gt;After installing KeyboardKit, just &lt;code&gt;import KeyboardKit&lt;/code&gt; and make your &lt;code&gt;KeyboardViewController&lt;/code&gt; inherit &lt;code&gt;KeyboardInputViewController&lt;/code&gt; instead of &lt;code&gt;UIInputViewController&lt;/code&gt; to give your controller access to additional functionality, such as new lifecycle functions, observable properties, keyboard services and much more.&lt;/p&gt; &#xA;&lt;p&gt;The default &lt;code&gt;KeyboardInputViewController&lt;/code&gt; behavior is to setup an English &lt;code&gt;SystemKeyboard&lt;/code&gt; keyboard. This is all the code that is required to achieve that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import KeyboardKit&#xA;&#xA;class KeyboardController: KeyboardInputViewController {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The controller will then call &lt;code&gt;viewWillSetupKeyboard()&lt;/code&gt; when the keyboard view should be created or updated. You can override this function and call &lt;code&gt;setup(with:)&lt;/code&gt; to customize the default view or use a custom view.&lt;/p&gt; &#xA;&lt;p&gt;For instance, here we replace the standard autocomplete toolbar with a custom toolbar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class KeyboardViewController: KeyboardInputViewController&amp;nbsp;{&#xA;&#xA;    func viewWillSetupKeyboard() {&#xA;        super.viewWillSetupKeyboard()&#xA;        setup { controller in&#xA;            VStack(spacing: 0) {&#xA;                MyCustomToolbar()&#xA;                SystemKeyboard(&#xA;                    controller: controller,&#xA;                    autocompleteToolbar: .none&#xA;                )&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and here we use a completely custom view that requires the app-specific controller type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class KeyboardViewController: KeyboardInputViewController&amp;nbsp;{&#xA;&#xA;    func viewWillSetupKeyboard() {&#xA;        super.viewWillSetupKeyboard()&#xA;        setup { [unowned self] in&#xA;            MyCustomKeyboard(&#xA;                controller: self&#xA;            )&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;struct MyCustomKeyboard: View {&#xA;&#xA;    @unowned &#xA;    var controller: KeyboardViewController &#xA;&#xA;    var body: some View {&#xA;        ... &#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; When you use a custom view, it&#39;s &lt;em&gt;very important&lt;/em&gt; to use &lt;code&gt;[unowned self] in&lt;/code&gt; in the view builder and that any &lt;code&gt;controller&lt;/code&gt; reference in the custom view is &lt;code&gt;unowned&lt;/code&gt;, otherwise the strong &lt;code&gt;self&lt;/code&gt; reference will cause a memory leak.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see the &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/&#34;&gt;online documentation&lt;/a&gt; and &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/getting-started&#34;&gt;getting-started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://keyboardkit.github.io/KeyboardKit/documentation/keyboardkit/&#34;&gt;online documentation&lt;/a&gt; has articles, code examples etc. that let you overview the various parts of the library and understand how they all connect to each other.&lt;/p&gt; &#xA;&lt;p&gt;The online documentation is currently iOS-specific. To generate documentation for the other platforms, open the package in Xcode, select a simulator then run &lt;code&gt;Product/Build Documentation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;KeyboardKit Pro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/KeyboardKit/KeyboardKitPro&#34;&gt;KeyboardKit Pro&lt;/a&gt; extends KeyboardKit with pro features, such as localized keyboards and services, autocomplete, dictation, emoji skintones, additional views etc. It lets you create fully localized keyboards with a single line of code.&lt;/p&gt; &#xA;&lt;h2&gt;App Store Application&lt;/h2&gt; &#xA;&lt;p&gt;If you want to try out KeyboardKit without having to write any code, there is a [KeyboardKit app][app-store] in the App Store, that lets you try out KeyboardKit and many of its features.&lt;/p&gt; &#xA;&lt;p&gt;The App Store app uses &lt;a href=&#34;https://github.com/KeyboardKit/KeyboardKitPro&#34;&gt;KeyboardKit Pro&lt;/a&gt; to provide support for 60+ locales, autocomplete, dictation, emoji skintones etc.&lt;/p&gt; &#xA;&lt;h2&gt;Demo Application&lt;/h2&gt; &#xA;&lt;p&gt;This project has a demo app that lets you try out KeyboardKit and KeyboardKit Pro.&lt;/p&gt; &#xA;&lt;p&gt;The main app shows you how to display the state of a keyboard extension, link to system settings etc. and has a text field to let you try out the keyboard.&lt;/p&gt; &#xA;&lt;p&gt;The demo app has 5 keyboard extensions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;English&lt;/code&gt; uses KeyboardKit and a &lt;code&gt;SystemKeyboard&lt;/code&gt; with a standard, English locale.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Unicode&lt;/code&gt; uses KeyboardKit and a &lt;code&gt;SystemKeyboard&lt;/code&gt; with unicode-based input keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Custom&lt;/code&gt; uses KeyboardKit and a &lt;code&gt;SystemKeyboard&lt;/code&gt; with custom keys, layout and appearance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pro&lt;/code&gt; uses KeyboardKit Pro and a &lt;code&gt;SystemKeyboard&lt;/code&gt; with all LRT locales, autocomplete etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Just open and run the demo app in the &lt;code&gt;Demo&lt;/code&gt; folder, then enable the keyboards you want to try under System Settings. Note that you need to enable full access to try some features, like audio and haptic feedback.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;KeyboardKit is trusted and proudly sponsored by the following companies:&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.oribi.se/en&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KeyboardKit/KeyboardKit/master/Resources/sponsors/oribi.png&#34; alt=&#34;Oribi Icon&#34; title=&#34;Oribi&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://www.phonetoroam.com&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KeyboardKit/KeyboardKit/master/Resources/sponsors/phonetoroam.png&#34; alt=&#34;phonetoroam Icon&#34; title=&#34;phonetoroam&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://vitalisapps.com&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KeyboardKit/KeyboardKit/master/Resources/sponsors/vitalis.png&#34; alt=&#34;Vitalis Icon&#34; title=&#34;Vitalis&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://letterkey.eu&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KeyboardKit/KeyboardKit/master/Resources/sponsors/letterkey.png&#34; alt=&#34;LetterKey Icon&#34; title=&#34;LetterKey&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;http://anomaly.net.au&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KeyboardKit/KeyboardKit/master/Resources/sponsors/anomaly.png&#34; alt=&#34;Anomaly Software Icon&#34; title=&#34;Anomaly Software&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://www.milocreative.com&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KeyboardKit/KeyboardKit/master/Resources/sponsors/milo.png&#34; alt=&#34;Milo Creative Icon&#34; title=&#34;Milo Creative&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;KeyboardKit is open-source and completely free, but you can sponsor this project on &lt;a href=&#34;https://github.com/sponsors/danielsaidi&#34;&gt;GitHub Sponsors&lt;/a&gt;, upgrade to &lt;a href=&#34;https://github.com/KeyboardKit/KeyboardKitPro&#34;&gt;KeyboardKit Pro&lt;/a&gt; or &lt;a href=&#34;mailto:info@getkeyboardkit.com&#34;&gt;get in touch&lt;/a&gt; for freelance work, paid support etc.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to reach out if you have questions or if you want to contribute in any way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://keyboardkit.com&#34;&gt;keyboardkit.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mastodon: &lt;a href=&#34;https://techhub.social/@keyboardkit&#34;&gt;@keyboardkit@techhub.social&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;http://twitter.com/getkeyboardkit&#34;&gt;@getkeyboardkit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;E-mail: &lt;a href=&#34;mailto:info@getkeyboardkit.com&#34;&gt;info@getkeyboardkit.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KeyboardKit is available under the MIT license. See the &lt;a href=&#34;https://github.com/KeyboardKit/KeyboardKit/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Finb/Bark</title>
    <updated>2023-07-30T02:06:59Z</updated>
    <id>tag:github.com,2023-07-30:/Finb/Bark</id>
    <link href="https://github.com/Finb/Bark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bark is an iOS App which allows you to push custom notifications to your iPhone&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;使用文档&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bark.day.app&#34;&gt;https://bark.day.app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;问题反馈 Telegram 群&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/joinchat/OsCbLzovUAE0YjY1&#34;&gt;Bark反馈群&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;发送推送&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;打开APP，复制测试URL&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://wx4.sinaimg.cn/mw2000/003rYfqply1grd1meqrvcj60bi08zt9i02.jpg&#34; width=&#34;365&#34;&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;修改内容，请求这个URL&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;可以发 get 或者 post 请求 ，请求成功会立即收到推送 &#xA;&#xA;URL 组成: 第一个部分是 key , 之后有三个匹配 &#xA;/:key/:body &#xA;/:key/:title/:body &#xA;/:key/:category/:title/:body &#xA;&#xA;title 推送标题 比 body 字号粗一点 &#xA;body 推送内容 换行请使用换行符 &#39;\n&#39;&#xA;category 另外的功能占用的字段，还没开放 忽略就行 &#xA;post 请求 参数名也是上面这些&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;复制推送内容&lt;/h2&gt; &#xA;&lt;p&gt;收到推送时下拉推送（或在通知中心左滑查看推送）有一个&lt;code&gt;复制&lt;/code&gt;按钮，点击即可复制推送内容。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;img src=&#34;http://wx4.sinaimg.cn/mw690/0060lm7Tly1g0btjhgimij30ku0a60v1.jpg&#34; width=&#34;375&#34;&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//将复制“验证码是9527”&#xA;https://api.day.app/yourkey/验证码是9527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;携带参数 automaticallyCopy=1， 收到推送时，推送内容会自动复制到粘贴板（如发现不能自动复制，可尝试重启一下手机）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//自动复制 “验证码是9527” 到粘贴板&#xA;https://api.day.app/yourkey/验证码是9527?automaticallyCopy=1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;携带copy参数， 则上面两种复制操作，将只复制copy参数的值&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;//自动复制 “9527” 到粘贴板&#xA;https://api.day.app/yourkey/验证码是9527?automaticallyCopy=1&amp;amp;copy=9527&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;其他参数&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;url&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 点击推送将跳转到url的地址（发送时，URL参数需要编码）&#xA;https://api.day.app/yourkey/百度网址?url=https://www.baidu.com &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;isArchive&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 指定是否需要保存推送信息到历史记录，1 为保存，其他值为不保存。&#xA;// 如果不指定这个参数，推送信息将按照APP内设置来决定是否保存。&#xA;https://api.day.app/yourkey/需要保存的推送?isArchive=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;group&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 指定推送消息分组，可在历史记录中按分组查看推送。&#xA;https://api.day.app/yourkey/需要分组的推送?group=groupName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;icon (仅 iOS15 或以上支持）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 指定推送消息图标&#xA;https://api.day.app/yourkey/需要自定义图标的推送?icon=http://day.app/assets/images/avatar.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;时效性通知&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 设置时效性通知&#xA;https://api.day.app/yourkey/时效性通知?level=timeSensitive&#xA;&#xA;// 可选参数值&#xA;// active：不设置时的默认值，系统会立即亮屏显示通知。&#xA;// timeSensitive：时效性通知，可在专注状态下显示通知。&#xA;// passive：仅将通知添加到通知列表，不会亮屏提醒&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;后端代码&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Finb/bark-server&#34;&gt;bark-server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;将后端代码部署在你自己的服务器上。支持Docker&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Chrome 插件&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xlvecle/Bark-Chrome-Extension&#34;&gt;Bark-Chrome-Extension&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这是一款chrome插件能帮你方便地把网页上的文本或者网址推送到Bark手机端。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;效果展示&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://wx4.sinaimg.cn/mw690/0060lm7Tly1fyaqyhzdnxg30660dcu0h.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;在线定时发送&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://api.ihint.me/bark.html&#34;&gt;https://api.ihint.me/bark.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Windows推送客户端&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HsuDan/BarkHelper&#34;&gt;https://github.com/HsuDan/BarkHelper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;跨平台的命令行应用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JasonkayZK/bark-cli&#34;&gt;https://github.com/JasonkayZK/bark-cli&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quicker 动作&lt;/h2&gt; &#xA;&lt;p&gt;使用 Quicker 软件在 Windows 上将选中文字一键推送到iPhone，支持打开URL和自动复制推送内容 &lt;a href=&#34;https://getquicker.net/Sharedaction?code=e927d844-d212-4428-758d-08d69de12a3b&#34;&gt;https://getquicker.net/Sharedaction?code=e927d844-d212-4428-758d-08d69de12a3b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bark for Wox&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Zeroto521/Wox.Plugin.Bark&#34;&gt;https://github.com/Zeroto521/Wox.Plugin.Bark&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>val-lang/val</title>
    <updated>2023-07-30T02:06:59Z</updated>
    <id>tag:github.com,2023-07-30:/val-lang/val</id>
    <link href="https://github.com/val-lang/val" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The val compiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Val&lt;/h1&gt; &#xA;&lt;p&gt;Val is a programming language that leverages &lt;a href=&#34;https://www.jot.fm/issues/issue_2022_02/article2.pdf&#34;&gt;mutable value semantics&lt;/a&gt; and &lt;a href=&#34;https://fm2gp.com&#34;&gt;generic programming&lt;/a&gt; for high-level systems programming.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the sources of the reference implementation of Val. Please visit our &lt;a href=&#34;https://val-lang.dev&#34;&gt;website&lt;/a&gt; to get more information about the language itself.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This project is written in &lt;a href=&#34;https://swift.org&#34;&gt;Swift&lt;/a&gt; and distributed in the form of a package, built with &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt;. You will need Swift 5.7 or higher to build the compiler from sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note to Windows users: although this project is &lt;strong&gt;not&lt;/strong&gt; Unix-specific, Windows support is not guaranteed due to the instability of continuous integration (see &lt;a href=&#34;https://github.com/val-lang/val/issues/252&#34;&gt;https://github.com/val-lang/val/issues/252&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;You can skip directly to step 3 if you&#39;re doing development exclusively in a &lt;a href=&#34;https://raw.githubusercontent.com/val-lang/val/main/#building-val-devcontainer-with-vscode&#34;&gt;devcontainer&lt;/a&gt;. Otherwise:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install LLVM 15 or later on your system (e.g. &lt;code&gt;brew install llvm&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Have the above installation&#39;s &lt;code&gt;llvm-config&lt;/code&gt; in your &lt;code&gt;PATH&lt;/code&gt; (homebrew doesn&#39;t do that automatically; you&#39;d need &lt;code&gt;export PATH=&#34;$HOMEBREW_PREFIX/opt/llvm/bin:$PATH&#34;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;In this project&#39;s root directory. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;swift package resolve&lt;/code&gt; to get the &lt;code&gt;make-pkgconfig&lt;/code&gt; tool.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.build/checkouts/Swifty-LLVM/Tools/make-pkgconfig.sh llvm.pc&lt;/code&gt; to generate LLVM&#39;s library description&lt;/li&gt; &#xA;   &lt;li&gt;Either &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;code&gt;sudo mkdir -p /usr/local/lib/pkgconfig &amp;amp;&amp;amp; sudo mv llvm.pc /usr/local/lib/pkgconfig/&lt;/code&gt; (if you want to use Xcode)&lt;/li&gt; &#xA;     &lt;li&gt;or, &lt;code&gt;export PKG_CONFIG_PATH=$PWD&lt;/code&gt; in any shell where you want to work on this project&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Building the compiler&lt;/h3&gt; &#xA;&lt;p&gt;You may compile Val&#39;s compiler with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift build -c release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That command will create an executable named &lt;code&gt;valc&lt;/code&gt; in &lt;code&gt;.build/release&lt;/code&gt;. That&#39;s Val compiler!&lt;/p&gt; &#xA;&lt;h3&gt;Running the tests&lt;/h3&gt; &#xA;&lt;p&gt;To test your compiler,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swift test -c release --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building Val Devcontainer with VSCode&lt;/h3&gt; &#xA;&lt;p&gt;While Val supports Linux natively, it also provides a &lt;a href=&#34;https://containers.dev/&#34;&gt;Devcontainer&lt;/a&gt; specification to develop for Linux on other platforms through a Docker container. Our &lt;a href=&#34;https://raw.githubusercontent.com/val-lang/val/main/.github/workflows/build-and-test.yml&#34;&gt;Linux CI&lt;/a&gt; uses this specification; this makes it possible to run Linux CI locally on other operating systems like macOS. While this specification should work for any IDE that supports devcontainers, keep in mind this team only uses VSCode.&lt;/p&gt; &#xA;&lt;p&gt;When opening the Val project in VSCode for the first time, you should be prompted to install the extension &lt;code&gt;recommendations&lt;/code&gt; in &lt;code&gt;.vscode/extensions.json&lt;/code&gt;. If you are not prompted, manually install the extensions by searching for the extension identifiers in the Extensions Marketplace.&lt;/p&gt; &#xA;&lt;p&gt;Then, build the Devcontainer with the VSCode command: &lt;code&gt;&amp;gt; Dev Containers: Rebuild and Reopen in Container&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, open a new integrated terminal in VSCode and confirm that the shell user is &lt;code&gt;vscode&lt;/code&gt;. You can run &lt;code&gt;whoami&lt;/code&gt; to check this.&lt;/p&gt; &#xA;&lt;p&gt;That integrated terminal is connected to the Devcontainer, as if by ssh. Use the &lt;code&gt;make-pkgconfig&lt;/code&gt; tool to configure LLVM&#39;s library description (see steps 3 in &lt;a href=&#34;https://raw.githubusercontent.com/val-lang/val/main/#prerequisites&#34;&gt;prerequisites&lt;/a&gt;). You can now run &lt;code&gt;swift test -c release&lt;/code&gt; to build and test for Linux.&lt;/p&gt; &#xA;&lt;p&gt;The Val repository files are mounted into the container, so any changes made locally (in VSCode or in other editors) will be automatically propagated into the Devcontainer. However, if you need to modifiy any of the files in the &lt;code&gt;.devcontainer&lt;/code&gt; directory, you will need to rebuild the container with &lt;code&gt;&amp;gt; Dev Containers: Rebuild and Reopen in Container&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Implementation status&lt;/h2&gt; &#xA;&lt;p&gt;This project is under active development; expect things to break and APIs to change.&lt;/p&gt; &#xA;&lt;p&gt;The compiler pipeline is organized as below. Incidentally, early stages of this pipeline are more stable than later ones. &lt;em&gt;(Note: completion percentages are very rough estimations.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Parsing (100%)&lt;/li&gt; &#xA; &lt;li&gt;Type checking (50%)&lt;/li&gt; &#xA; &lt;li&gt;IR lowering (30%)&lt;/li&gt; &#xA; &lt;li&gt;IR analysis and transformations (30%)&lt;/li&gt; &#xA; &lt;li&gt;Machine code generation (20%)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can select how deep the compiler should go through the pipeline with the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit raw-ast&lt;/code&gt;: Only parse the input files and output an untyped AST as a JSON file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--typecheck&lt;/code&gt;: Run the type checker on the input.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit raw-ir&lt;/code&gt;: Lower the typed AST into Val IR and output the result in a file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit ir&lt;/code&gt;: Run mandatory IR passes and output the result in a file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit llvm&lt;/code&gt;: Transpile the program to LLVM and output LLVM IR.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--emit binary&lt;/code&gt; (default): Produce an executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;valc --emit raw-ast -o main.json main.val&lt;/code&gt; will parse &lt;code&gt;main.val&lt;/code&gt;, write the untyped AST in &lt;code&gt;main.json&lt;/code&gt;, and exit the pipeline.&lt;/p&gt; &#xA;&lt;p&gt;A more detailed description of the current implementation status is available on our &lt;a href=&#34;https://www.val-lang.dev/pages/implementation-status.html&#34;&gt;roadmap page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related video and audio&lt;/h2&gt; &#xA;&lt;h3&gt;Conference Talks&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Conference&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Year&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Speaker&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Title&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C++Now&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2022-05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dave Abrahams&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4Ri8bly-dJs&#34;&gt;Keynote: A Future of Value Semantics and Generic Programming Part 1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C++Now&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2022-05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dave Abrahams &amp;amp; Dimi Racordon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GsxYnEAZoNI&#34;&gt;Keynote: A Future of Value Semantics and Generic Programming Part 2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CppNorth&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2022-07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dave Abrahams&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KGL02mSaplE&#34;&gt;Lightning Talk: An Object Model for Safety and Efficiency by Definition&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CppCon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2022-09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dave Abrahams&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QthAU-t3PQ4&#34;&gt;Value Semantics: Safety, Independence, Projection, &amp;amp; Future of Programming&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CppCon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2022-09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dimi Racordon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ws-Z8xKbP4w&#34;&gt;Val: A Safe Language to Interoperate with C++&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Podcasts&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Podcast&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Episode&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Date&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Guest&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Title&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CppCast&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;352&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2023-01-20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dimi Racordon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://cppcast.com/val-and-mutable-value-semantics&#34;&gt;Val and Mutable Value Semantics&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADSP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;137&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2023-07-07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Sean Parent&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://adspthepodcast.com/2023/07/07/Episode-137.html&#34;&gt;Sean Parent on Val (vs Rust)!&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ADSP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;138&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2023-07-14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Sean Parent&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://adspthepodcast.com/2023/07/14/Episode-138.html&#34;&gt;Sean Parent on Val! (Part 2)&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Val. Please read through &lt;a href=&#34;https://raw.githubusercontent.com/val-lang/val/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on how to get started.&lt;/p&gt; &#xA;&lt;p&gt;You can also get in touch with the community by joining our &lt;a href=&#34;https://join.slack.com/t/val-qs97696/shared_invite/zt-1z3dsblrq-y4qXfEE6wr6uMEJSN9uFyg&#34;&gt;Slack&lt;/a&gt; or one of our &lt;a href=&#34;https://teams.microsoft.com/l/meetup-join/19%3ameeting_YjZmOTJiMjUtNDZhNy00MTcxLWJjY2YtMTQ0ZGEzY2RkY2E4%40thread.v2/0?context=%7b%22Tid%22%3a%22fa7b1b5a-7b34-4387-94ae-d2c178decee1%22%2c%22Oid%22%3a%22a102b458-98db-4c5e-acad-cfa08a096ae3%22%7d&#34;&gt;Teams Meetings&lt;/a&gt; (ID: 298 158 296 273, Passcode: D2beKF) on Tuesdays and Thursdays, 12:30-1:00 PST.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Val is distributed under the terms of the Apache-2.0 license. See &lt;a href=&#34;https://raw.githubusercontent.com/val-lang/val/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>