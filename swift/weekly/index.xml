<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:59:24Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>elai950/AlertToast</title>
    <updated>2023-11-26T01:59:24Z</updated>
    <id>tag:github.com,2023-11-26:/elai950/AlertToast</id>
    <link href="https://github.com/elai950/AlertToast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create Apple-like alerts &amp; toasts using SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AlertToast-SwiftUI &lt;a href=&#34;https://twitter.com/intent/tweet?text=Get%20over%20170%20free%20design%20blocks%20based%20on%20Bootstrap%204&amp;amp;url=https://froala.com/design-blocks&amp;amp;via=froala&amp;amp;hashtags=bootstrap,design,templates,blocks,developers&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h3&gt;Present Apple-like alert &amp;amp; toast in SwiftUI&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/elai950/AlertToast/raw/master/Assets/GithubCoverNew.png&#34; width=&#34;480&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;🌄 Example&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/elai950/AlertToast/raw/master/Assets/onboarding.png&#34; style=&#34;display: block; margin: auto;&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/elai950/AlertToast/raw/master/Assets/ToastExample.gif&#34; style=&#34;display: block; margin: auto;&#34; width=&#34;180&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;🔭 Overview&lt;/h2&gt; &#xA;&lt;p&gt;Currently in SwiftUI, the only way to inform the user about some process that finished for example, is by using &lt;code&gt;Alert&lt;/code&gt;. Sometimes, you just want to pop a message that tells the user that something completed, or his message was sent. Apple doesn&#39;t provide any other method rather than using &lt;code&gt;Alert&lt;/code&gt; even though Apple using all kinds of different pop-ups. The results are poor UX where the user would need to tap &#34;OK/Dismiss&#34; for every little information that he should be notified about.&lt;/p&gt; &#xA;&lt;p&gt;Alert Toast is an open-source library in Github to use with SwiftUI. It allows you to present popups that don&#39;t need any user action to dismiss or to validate. Some great usage examples: &lt;code&gt;Message Sent&lt;/code&gt;, &lt;code&gt;Poor Network Connection&lt;/code&gt;, &lt;code&gt;Profile Updated&lt;/code&gt;, &lt;code&gt;Logged In/Out&lt;/code&gt;, &lt;code&gt;Favorited&lt;/code&gt;, &lt;code&gt;Loading&lt;/code&gt; and so on...&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/BUILD-1.3.9-green?style=for-the-badge&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/badge/PLATFORM-IOS%20|%20MACOS-lightgray?style=for-the-badge&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/badge/LICENSE-MIT-lightgray?style=for-the-badge&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://img.shields.io/badge/MADE WITH-SWIFTUI-orange?style=for-the-badge&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built with pure SwiftUI.&lt;/li&gt; &#xA; &lt;li&gt;3 Display modes: &lt;code&gt;Alert&lt;/code&gt; (pop at the center), &lt;code&gt;HUD&lt;/code&gt; (drop from the top) and &lt;code&gt;Banner&lt;/code&gt; (pop/slide from the bottom).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Complete&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt; &lt;code&gt;SystemImage&lt;/code&gt;, &lt;code&gt;Image&lt;/code&gt;, &lt;code&gt;Loading&lt;/code&gt;, and &lt;code&gt;Regular&lt;/code&gt; (Only Text).&lt;/li&gt; &#xA; &lt;li&gt;Supports Light &amp;amp; Dark Mode.&lt;/li&gt; &#xA; &lt;li&gt;Works with &lt;strong&gt;any&lt;/strong&gt; kind of view builder.&lt;/li&gt; &#xA; &lt;li&gt;Localization support.&lt;/li&gt; &#xA; &lt;li&gt;Font &amp;amp; Background customization.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;If you like the project, don&#39;t forget to &lt;code&gt;put star 🌟&lt;/code&gt;.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:elai950@gmail.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/EMAIL-ELAI-informational?style=for-the-badge&amp;amp;logo=minutemailer&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.linkedin.com/in/elai-zuberman-8120a073/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LINKEDIN-informational?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=5JN5PT55NAHKU&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-informational?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;₿ Bitcoin donation address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0xec48bfa813a773fa2394aec23f97da5cb4d5ff02&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Send only BTC to this deposit address.&lt;/li&gt; &#xA; &lt;li&gt;Ensure the network is BNB Smart Chain (BEP20).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Navigation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#-installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#cocoapods&#34;&gt;CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#swift-package-manager&#34;&gt;Swift Package Manager&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#manually&#34;&gt;Manually&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#-usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#usage-example-with-regular-alert&#34;&gt;Usage example with regular alert&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#complete-modifier-example&#34;&gt;Complete Modifier Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#alert-toast-parameters&#34;&gt;Alert Toast Parameters&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#-article&#34;&gt;Article&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#-contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#-author&#34;&gt;Author&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#-license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;💻 Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/AlertToast&#34;&gt;AlertToast Cocapods Website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CocoaPods is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate &lt;code&gt;AlertToast&lt;/code&gt; into your Xcode project using CocoaPods, specify it in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;AlertToast&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;Swift Package Manager&lt;/a&gt; is a tool for managing the distribution of Swift code. It’s integrated with the Swift build system to automate the process of downloading, compiling, and linking dependencies.&lt;/p&gt; &#xA;&lt;p&gt;To integrate &lt;code&gt;AlertToast&lt;/code&gt; into your Xcode project using Xcode 12, specify it in &lt;code&gt;File &amp;gt; Swift Packages &amp;gt; Add Package Dependency...&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ogdl&#34;&gt;https://github.com/elai950/AlertToast.git, :branch=&#34;master&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Xcode 13, please refer &lt;a href=&#34;https://iiroalhonen.medium.com/adding-a-swift-package-dependency-in-xcode-13-937b2caaf218&#34;&gt;this article&lt;/a&gt; to install &lt;code&gt;AlertToast&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer not to use any of dependency managers, you can integrate &lt;code&gt;AlertToast&lt;/code&gt; into your project manually. Put &lt;code&gt;Sources/AlertToast&lt;/code&gt; folder in your Xcode project. Make sure to enable &lt;code&gt;Copy items if needed&lt;/code&gt; and &lt;code&gt;Create groups&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🧳 Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS 13.0+ | macOS 11+&lt;/li&gt; &#xA; &lt;li&gt;Xcode 12.0+ | Swift 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🛠 Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, add &lt;code&gt;import AlertToast&lt;/code&gt; on every &lt;code&gt;swift&lt;/code&gt; file you would like to use &lt;code&gt;AlertToast&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, use the &lt;code&gt;.toast&lt;/code&gt; view modifier:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;isPresenting&lt;/code&gt;: (MUST) assign a &lt;code&gt;Binding&amp;lt;Bool&amp;gt;&lt;/code&gt; to show or dismiss alert.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;duration&lt;/code&gt;: default is 2, set 0 to disable auto dismiss.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tapToDismiss&lt;/code&gt;: default is &lt;code&gt;true&lt;/code&gt;, set &lt;code&gt;false&lt;/code&gt; to disable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;alert&lt;/code&gt;: (MUST) expects &lt;code&gt;AlertToast&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Usage example with regular alert&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import AlertToast&#xA;import SwiftUI&#xA;&#xA;struct ContentView: View{&#xA;&#xA;    @State private var showToast = false&#xA;&#xA;    var body: some View{&#xA;        VStack{&#xA;&#xA;            Button(&#34;Show Toast&#34;){&#xA;                 showToast.toggle()&#xA;            }&#xA;        }&#xA;        .toast(isPresenting: $showToast){&#xA;&#xA;            // `.alert` is the default displayMode&#xA;            AlertToast(type: .regular, title: &#34;Message Sent!&#34;)&#xA;            &#xA;            //Choose .hud to toast alert from the top of the screen&#xA;            //AlertToast(displayMode: .hud, type: .regular, title: &#34;Message Sent!&#34;)&#xA;            &#xA;            //Choose .banner to slide/pop alert from the bottom of the screen&#xA;            //AlertToast(displayMode: .banner(.slide), type: .regular, title: &#34;Message Sent!&#34;)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Complete Modifier Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.toast(isPresenting: $showAlert, duration: 2, tapToDismiss: true, alert: {&#xA;   //AlertToast goes here&#xA;}, onTap: {&#xA;   //onTap would call either if `tapToDismis` is true/false&#xA;   //If tapToDismiss is true, onTap would call and then dismis the alert&#xA;}, completion: {&#xA;   //Completion block after dismiss&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Alert Toast Parameters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AlertToast(displayMode: DisplayMode,&#xA;           type: AlertType,&#xA;           title: Optional(String),&#xA;           subTitle: Optional(String),&#xA;           style: Optional(AlertStyle))&#xA;           &#xA;//This is the available customizations parameters:&#xA;AlertStyle(backgroundColor: Color?,&#xA;            titleColor: Color?,&#xA;            subTitleColor: Color?,&#xA;            titleFont: Font?,&#xA;            subTitleFont: Font?)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available Alert Types:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Regular:&lt;/strong&gt; text only (Title and Subtitle).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete:&lt;/strong&gt; animated checkmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error:&lt;/strong&gt; animated xmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;System Image:&lt;/strong&gt; name image from &lt;code&gt;SFSymbols&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image:&lt;/strong&gt; name image from Assets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Loading:&lt;/strong&gt; Activity Indicator (Spinner).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Alert dialog view modifier (with default settings):&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.toast(isPresenting: Binding&amp;lt;Bool&amp;gt;, duration: Double = 2, tapToDismiss: true, alert: () -&amp;gt; AlertToast , onTap: () -&amp;gt; (), completion: () -&amp;gt; () )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Simple Text Alert:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AlertToast(type: .regular, title: Optional(String), subTitle: Optional(String))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Complete/Error Alert:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AlertToast(type: .complete(Color)/.error(Color), title: Optional(String), subTitle: Optional(String))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;System Image Alert:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AlertToast(type: .systemImage(String, Color), title: Optional(String), subTitle: Optional(String))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Image Alert:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;AlertToast(type: .image(String), title: Optional(String), subTitle: Optional(String))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Loading Alert:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;//When using loading, duration won&#39;t auto dismiss and tapToDismiss is set to false&#xA;AlertToast(type: .loading, title: Optional(String), subTitle: Optional(String))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add many &lt;code&gt;.toast&lt;/code&gt; on a single view.&lt;/p&gt; &#xA;&lt;h2&gt;📖 Article&lt;/h2&gt; &#xA;&lt;p&gt;I wrote an article that contains more usage examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elaizuberman.medium.com/presenting-apples-music-alerts-in-swiftui-7f5c32cebed6&#34;&gt;Medium - How to toast an alert in SwiftUI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;👨‍💻 Contributors&lt;/h2&gt; &#xA;&lt;p&gt;All issue reports, feature requests, pull requests and GitHub stars are welcomed and much appreciated.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/barnard-b&#34;&gt;@barnard-b&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;✍️ Author&lt;/h2&gt; &#xA;&lt;p&gt;Elai Zuberman&lt;/p&gt; &#xA;&lt;h2&gt;📃 License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;AlertToast&lt;/code&gt; is available under the MIT license. See the &lt;a href=&#34;https://github.com/elai950/AlertToast/raw/master/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elai950/AlertToast/master/#-overview&#34;&gt;Jump Up&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>krzysztofzablocki/LifetimeTracker</title>
    <updated>2023-11-26T01:59:24Z</updated>
    <id>tag:github.com,2023-11-26:/krzysztofzablocki/LifetimeTracker</id>
    <link href="https://github.com/krzysztofzablocki/LifetimeTracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find retain cycles / memory leaks sooner.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LifetimeTracker&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/LifetimeTracker/master/Resources/demo-bar.gif&#34; alt=&#34;Demo (bar)&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/LifetimeTracker/master/Resources/demo-circular.gif&#34; alt=&#34;Demo (circular)&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Bar style&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Circular style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;LifetimeTracker can surface retain cycle / memory issues right as you develop your application, and it will surface them to you immediately, so you can find them with more ease.&lt;/p&gt; &#xA;&lt;p&gt;Instruments and Memory Graph Debugger are great, but too many times, developers forget to check for issues as they close the feature implementation.&lt;/p&gt; &#xA;&lt;p&gt;If you use those tools sporadically many of the issues they surface will require you to investigate the cause and cost you a lot of time in the process.&lt;/p&gt; &#xA;&lt;p&gt;Other tools like &lt;a href=&#34;https://github.com/facebook/FBRetainCycleDetector&#34;&gt;FBRetainCycleDetector&lt;/a&gt; rely on objc runtime magic to find the problems, but that means they can&#39;t really be used for pure Swift classes. This small tool simply focuses on tracking lifetime of objects which means that it can be used in both Objective-C and Swift codebases, and it doesn&#39;t rely on any complex or automatic magic behaviour.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;pod &#39;LifetimeTracker&#39;&lt;/code&gt; to your Podfile.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;github &#34;krzysztofzablocki/LifetimeTracker&#34;&lt;/code&gt; to your Cartfile.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;LifetimeTracker&#34;&lt;/code&gt; to the dependencies value of your Package.swift.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/krzysztofzablocki/LifetimeTracker.git&#34;, .upToNextMajor(from: &#34;1.8.0&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integration&lt;/h2&gt; &#xA;&lt;p&gt;To Integrate visual notifications simply add following line at the start of &lt;code&gt;AppDelegate(didFinishLaunchingWithOptions:)&lt;/code&gt; or if you are using iOS 13+ SceneDelegates in &lt;code&gt;scene(willConnectTo:options:)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if DEBUG&#xA;&#x9;LifetimeTracker.setup(&#xA;        onUpdate: LifetimeTrackerDashboardIntegration(&#xA;            visibility: .alwaysVisible,&#xA;            style: .bar,&#xA;            textColorForNoIssues: .systemGreen,&#xA;            textColorForLeakDetected: .systemRed&#xA;        ).refreshUI&#xA;    )&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Objective-C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;LifetimeTrackerDashboardIntegration *dashboardIntegration = [LifetimeTrackerDashboardIntegration new];&#xA;[dashboardIntegration setVisibleWhenIssueDetected];&#xA;[dashboardIntegration useBarStyle];&#xA;[LifetimeTracker setupOnUpdate:^(NSDictionary&amp;lt;NSString *,EntriesGroup *&amp;gt; * groups) {&#xA;    [dashboardIntegration refreshUIWithTrackedGroups: groups];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can control when the dashboard is visible: &lt;code&gt;alwaysVisible&lt;/code&gt;, &lt;code&gt;alwaysHidden&lt;/code&gt;, or &lt;code&gt;visibleWithIssuesDetected&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are two styles available. A overlay bar view which shows the detailed list of issues directly on the screen or a circular view which displays only the amount of issues and opens the detailed list as modal view controller.&lt;/p&gt; &#xA;&lt;h2&gt;Tracking key actors&lt;/h2&gt; &#xA;&lt;p&gt;Usually, you want to use LifetimeTracker to track only key actors in your app, like ViewModels / Controllers etc. When you have more than &lt;code&gt;maxCount&lt;/code&gt; items alive, the tracker will let you know.&lt;/p&gt; &#xA;&lt;h3&gt;Swift&lt;/h3&gt; &#xA;&lt;p&gt;You conform to &lt;code&gt;LifetimeTrackable&lt;/code&gt; and call &lt;code&gt;trackLifetime()&lt;/code&gt; at the end of your init functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class SectionFrontViewController: UIViewController, LifetimeTrackable {&#xA;    class var lifetimeConfiguration: LifetimeConfiguration {&#xA;        return LifetimeConfiguration(maxCount: 1, groupName: &#34;VC&#34;)&#xA;    }&#xA;    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {&#xA;        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)&#xA;        /// ...&#xA;        trackLifetime()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Objective-C&lt;/h3&gt; &#xA;&lt;p&gt;You conform to &lt;code&gt;LifetimeTrackable&lt;/code&gt; and call &lt;code&gt;[self trackLifetime]&lt;/code&gt; at the end of your init functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;@import LifetimeTracker;&#xA;&#xA;@interface SectionFrontViewController() &amp;lt;LifetimeTrackable&amp;gt;&#xA;&#xA;@implementation SectionFrontViewController&#xA;&#xA;+(LifetimeConfiguration *)lifetimeConfiguration&#xA;{&#xA;    return [[LifetimeConfiguration alloc] initWithMaxCount:1 groupName:@&#34;VC&#34;];&#xA;}&#xA;&#xA;- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil&#xA;{&#xA;    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];&#xA;    if (self) {&#xA;    &#x9;/// …&#xA;        [self trackLifetime];&#xA;    }&#xA;    return self;&#xA;}&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integrating with &lt;a href=&#34;https://danger.systems&#34;&gt;Danger&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you are using Danger, you can use it to add both checkboxes to each PR to ensure people have verified no retain cycles were created but also to inform you when someone forgets to call &lt;code&gt;trackLifetime()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#&#xA;# ** FILE CHECKS **&#xA;# Checks for certain rules and warns if needed.&#xA;# Some rules can be disabled by using // danger:disable rule_name&#xA;#&#xA;# Rules:&#xA;# - Check if the modified file is a View and doesn&#39;t implement LifetimeTrackable (lifetime_tracking)&#xA;&#xA;# Sometimes an added file is also counted as modified. We want the files to be checked only once.&#xA;files_to_check = (git.modified_files + git.added_files).uniq&#xA;(files_to_check - %w(Dangerfile)).each do |file|&#xA;&#x9;next unless File.file?(file)&#xA;&#x9;# Only check inside swift files&#xA;  next unless File.extname(file).include?(&#34;.swift&#34;)&#xA;&#xA;  # Will be used to check if we&#39;re inside a comment block.&#xA;&#x9;is_comment_block = false&#xA;&#xA;&#x9;# Collects all disabled rules for this file.&#xA;&#x9;disabled_rules = []&#xA;&#xA;&#x9;filelines = File.readlines(file)&#xA;&#x9;filelines.each_with_index do |line, index|&#xA;&#x9;&#x9;if is_comment_block&#xA;&#x9;&#x9;&#x9;if line.include?(&#34;*/&#34;)&#xA;&#x9;&#x9;&#x9;&#x9;is_comment_block = false&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;elsif line.include?(&#34;/*&#34;)&#xA;&#x9;&#x9;&#x9;is_comment_block = true&#xA;&#x9;&#x9;elsif line.include?(&#34;danger:disable&#34;)&#xA;&#x9;&#x9;&#x9;rule_to_disable = line.split.last&#xA;&#x9;&#x9;&#x9;disabled_rules.push(rule_to_disable)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;# Start our custom line checks&#xA;&#x9;&#x9;&#x9;# e.g. you could do something like check for methods that only call the super class&#39; method&#xA;&#x9;&#x9;&#x9;#if line.include?(&#34;override&#34;) and line.include?(&#34;func&#34;) and filelines[index+1].include?(&#34;super&#34;) and filelines[index+2].include?(&#34;}&#34;)&#xA;&#x9;&#x9;&#x9;#&#x9;warn(&#34;Override methods which only call super can be removed&#34;, file: file, line: index+3)&#xA;&#x9;&#x9;&#x9;#end&#xA;    end&#xA;&#x9;end&#xA;&#xA;&#x9;# Only continue checks for Lifetime Trackable types&#xA;&#x9;next unless (File.basename(file).include?(&#34;ViewModel&#34;) or File.basename(file).include?(&#34;ViewController&#34;) or File.basename(file).include?(&#34;View.swift&#34;)) and !File.basename(file).include?(&#34;Node&#34;) and !File.basename(file).include?(&#34;Tests&#34;) and !File.basename(file).include?(&#34;FlowCoordinator&#34;)&#xA;&#xA;&#x9;if disabled_rules.include?(&#34;lifetime_tracking&#34;) == false&#xA;&#x9;&#x9;if File.readlines(file).grep(/LifetimeTrackable/).any?&#xA;&#x9;&#x9;&#x9;fail(&#34;You forgot to call trackLifetime() from your initializers in &#34; + File.basename(file, &#34;.*&#34;) + &#34; (lifetime_tracking)&#34;) unless File.readlines(file).grep(/trackLifetime()/).any?&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;warn(&#34;Please add support for LifetimeTrackable to &#34; + File.basename(file, &#34;.*&#34;) + &#34; . (lifetime_tracking)&#34;)&#xA;&#x9;&#x9;end&#xA;&#x9;&#x9;markdown(&#34;- [ ] I&#39;ve verified that showing and hiding &#34; + File.basename(file, &#34;.*&#34;) + &#34; doesn&#39;t surface any [LifetimeTracker](https://github.com/krzysztofzablocki/LifetimeTracker) issues&#34;)&#xA;&#x9;end&#xA;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Surface last notification from the stack&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes it is useful to get information about last retain cycle in order to log it to external sources such as analytics/trackers. In order to do that we can update initial configuration with &lt;code&gt;onLeakDetected&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;[LifetimeTracker setupOnLeakDetected:^(Entry * entry, EntriesGroup * group) {&#xA;    NSLog(@&#34;POSSIBLE LEAK ALERT: %@ - current count %li, max count %li&#34;, entry.name, (long)entry.count, (long)entry.maxCount);&#xA;} onUpdate:^(NSDictionary&amp;lt;NSString *,EntriesGroup *&amp;gt; * groups) {&#xA;    [dashboardIntegration refreshUIWithTrackedGroups: groups];&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;LifetimeTracker.setup(onLeakDetected: { entity, _ in&#xA;&#x9;log.warning(&#34;POSSIBLE LEAK ALERT: \(entity.name) - current count: \(entity.count), max count: \(entity.maxCount)&#34;)&#xA;}, onUpdate: LifetimeTrackerDashboardIntegration(visibility: .alwaysVisible, style: .bar).refreshUI)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Group tracked objects&lt;/h2&gt; &#xA;&lt;p&gt;You can group tracked objects together. &lt;code&gt;maxCount&lt;/code&gt; of a group will be calculated by &lt;code&gt;maxCount&lt;/code&gt; of all members per default. However, you can override it and provide a separate value to the group with &lt;code&gt;groupMaxCount&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may want to do this when you have a set of subclasses which can appear x times each, but in total only less than the sum of all subclasses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// DetailPage: UIViewController&#xA;&#xA;// VideoDetailPage: DetailItem&#xA;LifetimeConfiguration(maxCount: 3, groupName: &#34;Detail Page&#34;)&#xA;&#xA;// ImageDetailPage: DetailItem&#xA;LifetimeConfiguration(maxCount: 3, groupName: &#34;Detail Page&#34;)&#xA;&#xA;=&amp;gt; Group warning if 7 DetailPage objects are alive&#xA;&#xA;// VideoDetailPage: DetailItem&#xA;LifetimeConfiguration(maxCount: 3, groupName: &#34;Detail Page&#34;, groupMaxCount: 3)&#xA;&#xA;// ImageDetailPage: DetailItem&#xA;LifetimeConfiguration(maxCount: 3, groupName: &#34;Detail Page&#34;, groupMaxCount: 3)&#xA;&#xA;=&amp;gt; Group warning if 4 DetailPage object are alive&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Writing integration tests for memory leaks&lt;/h2&gt; &#xA;&lt;p&gt;You can access the summary label using accessibility identifier &lt;code&gt;LifetimeTracker.summaryLabel&lt;/code&gt;, which allows you to write integration tests that end up with looking up whether any issues were found.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;LifetimeTracker is available under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/krzysztofzablocki/LifetimeTracker/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve used &lt;a href=&#34;https://github.com/JohnSundell/SwiftPlate&#34;&gt;SwiftPlate&lt;/a&gt; to generate xcodeproj compatible with CocoaPods and Carthage.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>slackhq/PanModal</title>
    <updated>2023-11-26T01:59:24Z</updated>
    <id>tag:github.com,2023-11-26:/slackhq/PanModal</id>
    <link href="https://github.com/slackhq/PanModal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An elegant and highly customizable presentation API for constructing bottom sheet modals on iOS.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;PanModal is an elegant and highly customizable presentation API for constructing bottom sheet modals on iOS.&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/slackhq/PanModal/raw/master/Screenshots/panModal.gif&#34; width=&#34;30%&#34; height=&#34;30%&#34; alt=&#34;Screenshot Preview&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-iOS_10+-green.svg?sanitize=true&#34; alt=&#34;Platform: iOS 10.0+&#34;&gt; &lt;a href=&#34;https://developer.apple.com/swift&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Swift_5-blueviolet.svg?sanitize=true&#34; alt=&#34;Language: Swift 5&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/PanModal&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CocoaPods-v1.0-red.svg?sanitize=true&#34; alt=&#34;CocoaPods compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-blue.svg?sanitize=true&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/slackhq/PanModal/master/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/slackhq/PanModal/master/#compatibility&#34;&gt;Compatibility&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/slackhq/PanModal/master/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/slackhq/PanModal/master/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/slackhq/PanModal/master/#documentation&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/slackhq/PanModal/master/#contributing&#34;&gt;Contributing&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/slackhq/PanModal/master/#authors&#34;&gt;Authors&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/slackhq/PanModal/master/#license&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Read our &lt;a href=&#34;https://slack.engineering/panmodal-better-support-for-thumb-accessibility-on-slack-mobile-52b2a7596031&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt; on how Slack is getting more &lt;span&gt;👍&lt;/span&gt; with PanModal &lt;/p&gt;&#xA;&lt;p&gt;Swift 4.2 support can be found on the &lt;code&gt;Swift4.2&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports any type of &lt;code&gt;UIViewController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Seamless transition between modal and content&lt;/li&gt; &#xA; &lt;li&gt;Maintains 60 fps performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;PanModal requires &lt;strong&gt;iOS 10+&lt;/strong&gt; and is compatible with &lt;strong&gt;Swift 4.2&lt;/strong&gt; projects.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://guides.cocoapods.org/using/using-cocoapods.html&#34; target=&#34;_blank&#34;&gt;CocoaPods&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;PanModal&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34; target=&#34;_blank&#34;&gt;Carthage&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;github &#34;slackhq/PanModal&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swift.org/package-manager/&#34; target=&#34;_blank&#34;&gt;Swift Package Manager&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(url: &#34;https://github.com/slackhq/PanModal.git&#34;, .exact(&#34;1.2.6&#34;)),&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;PanModal was designed to be used effortlessly. Simply call &lt;code&gt;presentPanModal&lt;/code&gt; in the same way you would expect to present a &lt;code&gt;UIViewController&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.presentPanModal(yourViewController)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The presented view controller must conform to &lt;code&gt;PanModalPresentable&lt;/code&gt; to take advantage of the customizable options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension YourViewController: PanModalPresentable {&#xA;&#xA;    var panScrollable: UIScrollView? {&#xA;        return nil&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PanScrollable&lt;/h3&gt; &#xA;&lt;p&gt;If the presented view controller has an embedded &lt;code&gt;UIScrollView&lt;/code&gt; e.g. as is the case with &lt;code&gt;UITableViewController&lt;/code&gt;, panModal will seamlessly transition pan gestures between the modal and the scroll view&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class TableViewController: UITableViewController, PanModalPresentable {&#xA;&#xA;    var panScrollable: UIScrollView? {&#xA;        return tableView&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adjusting Heights&lt;/h3&gt; &#xA;&lt;p&gt;Height values of the panModal can be adjusted by overriding &lt;code&gt;shortFormHeight&lt;/code&gt; or &lt;code&gt;longFormHeight&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var shortFormHeight: PanModalHeight {&#xA;    return .contentHeight(300)&#xA;}&#xA;&#xA;var longFormHeight: PanModalHeight {&#xA;    return .maxHeightWithTopInset(40)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Updates at Runtime&lt;/h3&gt; &#xA;&lt;p&gt;Values are stored during presentation, so when adjusting at runtime you should call &lt;code&gt;panModalSetNeedsLayoutUpdate()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func viewDidLoad() {&#xA;    hasLoaded = true&#xA;&#xA;    panModalSetNeedsLayoutUpdate()&#xA;    panModalTransition(to: .shortForm)&#xA;}&#xA;&#xA;var shortFormHeight: PanModalHeight {&#xA;    if hasLoaded {&#xA;        return .contentHeight(200)&#xA;    }&#xA;    return .maxHeight&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sample App&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/slackhq/PanModal/tree/master/Sample&#34;&gt;Sample App&lt;/a&gt; for more complex configurations of &lt;code&gt;PanModalPresentable&lt;/code&gt;, including navigation controllers and stacked modals.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Option + click on any of PanModal&#39;s methods or notes for detailed documentation.&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://github.com/slackhq/PanModal/raw/master/Screenshots/documentation.png&#34; width=&#34;50%&#34; height=&#34;50%&#34; alt=&#34;Screenshot Preview&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re glad to be open sourcing this library. We use it in numerous places within the slack app and expect it to be easy to use as well as modify; we&#39;ve added extensive documentation within the code to support that.&lt;/p&gt; &#xA;&lt;p&gt;We will only be fixing critical bugs, thus, for any non-critical issues or feature requests we hope to be able to rely on the community using the library to add what they need. For more information, please read the &lt;a href=&#34;https://github.com/slackhq/PanModal/raw/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ste57&#34;&gt;Stephen Sowole&lt;/a&gt; • &lt;a href=&#34;https://github.com/tosinaf&#34;&gt;Tosin Afolabi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;b&gt;PanModal&lt;/b&gt; is released under a MIT License. See LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
</feed>