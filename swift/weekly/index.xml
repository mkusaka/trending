<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-18T01:44:04Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KasemJaffer/receive_sharing_intent</title>
    <updated>2025-05-18T01:44:04Z</updated>
    <id>tag:github.com,2025-05-18:/KasemJaffer/receive_sharing_intent</id>
    <link href="https://github.com/KasemJaffer/receive_sharing_intent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter plugin that enables flutter apps to receive sharing photos, text and url from other apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;receive_sharing_intent&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/receive_sharing_intent&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/receive_sharing_intent.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Flutter plugin that enables flutter apps to receive sharing photos, videos, text, urls or any other file types from another app.&lt;/p&gt; &#xA;&lt;p&gt;Also, supports iOS Share extension and launching the host app automatically. Check the provided &lt;a href=&#34;https://raw.githubusercontent.com/KasemJaffer/receive_sharing_intent/master/example/lib/main.dart&#34;&gt;example&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Support&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SDK 19+ (Kotlin 1.9.22)&lt;/td&gt; &#xA;   &lt;td&gt;12.0+ (Swift 5.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasemJaffer/receive_sharing_intent/master/example/demo.gif&#34; alt=&#34;Alt Text&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;To use this plugin, add &lt;code&gt;receive_sharing_intent&lt;/code&gt; as a &lt;a href=&#34;https://flutter.io/platform-plugins/&#34;&gt;dependency in your pubspec.yaml file&lt;/a&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  receive_sharing_intent: ^latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;p&gt;Add the following filters to your &lt;a href=&#34;https://raw.githubusercontent.com/KasemJaffer/receive_sharing_intent/master/example/android/app/src/main/AndroidManifest.xml&#34;&gt;android/app/src/main/AndroidManifest.xml&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;.....&#xA; &amp;lt;uses-permission android:name=&#34;android.permission.READ_EXTERNAL_STORAGE&#34;/&amp;gt;&#xA;&#xA;  &amp;lt;application&#xA;        android:name=&#34;io.flutter.app.FlutterApplication&#34;&#xA;        ...&#xA;        &amp;gt;&#xA;&amp;lt;!--Set activity launchMode to singleTask, if you want to prevent creating new activity instance everytime there is a new intent.--&amp;gt;&#xA;    &amp;lt;activity&#xA;            android:name=&#34;.MainActivity&#34;&#xA;            android:launchMode=&#34;singleTask&#34;&#xA;            android:theme=&#34;@style/LaunchTheme&#34;&#xA;            android:configChanges=&#34;orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode&#34;&#xA;            android:hardwareAccelerated=&#34;true&#34;&#xA;            android:windowSoftInputMode=&#34;adjustResize&#34;&amp;gt;&#xA;&#xA;            &amp;lt;!--TODO:  Add this filter, if you want support opening urls into your app--&amp;gt;&#xA;            &amp;lt;intent-filter&amp;gt;&#xA;               &amp;lt;action android:name=&#34;android.intent.action.VIEW&#34; /&amp;gt;&#xA;               &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;               &amp;lt;category android:name=&#34;android.intent.category.BROWSABLE&#34; /&amp;gt;&#xA;               &amp;lt;data&#xA;                   android:scheme=&#34;https&#34;&#xA;                   android:host=&#34;example.com&#34;&#xA;                   android:pathPrefix=&#34;/invite&#34;/&amp;gt;&#xA;            &amp;lt;/intent-filter&amp;gt;&#xA;&#xA;            &amp;lt;!--TODO:  Add this filter, if you want support opening files into your app--&amp;gt;&#xA;            &amp;lt;intent-filter&amp;gt;&#xA;              &amp;lt;action android:name=&#34;android.intent.action.VIEW&#34; /&amp;gt;&#xA;              &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;              &amp;lt;data&#xA;                   android:mimeType=&#34;*/*&#34;&#xA;                   android:scheme=&#34;content&#34; /&amp;gt;&#xA;            &amp;lt;/intent-filter&amp;gt;&#xA;&#xA;             &amp;lt;!--TODO: Add this filter, if you want to support sharing text into your app--&amp;gt;&#xA;            &amp;lt;intent-filter&amp;gt;&#xA;               &amp;lt;action android:name=&#34;android.intent.action.SEND&#34; /&amp;gt;&#xA;               &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;               &amp;lt;data android:mimeType=&#34;text/*&#34; /&amp;gt;&#xA;            &amp;lt;/intent-filter&amp;gt;&#xA;&#xA;            &amp;lt;!--TODO: Add this filter, if you want to support sharing images into your app--&amp;gt;&#xA;            &amp;lt;intent-filter&amp;gt;&#xA;                &amp;lt;action android:name=&#34;android.intent.action.SEND&#34; /&amp;gt;&#xA;                &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;                &amp;lt;data android:mimeType=&#34;image/*&#34; /&amp;gt;&#xA;            &amp;lt;/intent-filter&amp;gt;&#xA;&#xA;            &amp;lt;intent-filter&amp;gt;&#xA;                &amp;lt;action android:name=&#34;android.intent.action.SEND_MULTIPLE&#34; /&amp;gt;&#xA;                &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;                &amp;lt;data android:mimeType=&#34;image/*&#34; /&amp;gt;&#xA;            &amp;lt;/intent-filter&amp;gt;&#xA;&#xA;             &amp;lt;!--TODO: Add this filter, if you want to support sharing videos into your app--&amp;gt;&#xA;            &amp;lt;intent-filter&amp;gt;&#xA;                &amp;lt;action android:name=&#34;android.intent.action.SEND&#34; /&amp;gt;&#xA;                &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;                &amp;lt;data android:mimeType=&#34;video/*&#34; /&amp;gt;&#xA;            &amp;lt;/intent-filter&amp;gt;&#xA;            &amp;lt;intent-filter&amp;gt;&#xA;                &amp;lt;action android:name=&#34;android.intent.action.SEND_MULTIPLE&#34; /&amp;gt;&#xA;                &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;                &amp;lt;data android:mimeType=&#34;video/*&#34; /&amp;gt;&#xA;            &amp;lt;/intent-filter&amp;gt;&#xA;&#xA;            &amp;lt;!--TODO: Add this filter, if you want to support sharing any type of files--&amp;gt;&#xA;            &amp;lt;intent-filter&amp;gt;&#xA;                &amp;lt;action android:name=&#34;android.intent.action.SEND&#34; /&amp;gt;&#xA;                &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;                &amp;lt;data android:mimeType=&#34;*/*&#34; /&amp;gt;&#xA;            &amp;lt;/intent-filter&amp;gt;&#xA;            &amp;lt;intent-filter&amp;gt;&#xA;                &amp;lt;action android:name=&#34;android.intent.action.SEND_MULTIPLE&#34; /&amp;gt;&#xA;                &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;                &amp;lt;data android:mimeType=&#34;*/*&#34; /&amp;gt;&#xA;            &amp;lt;/intent-filter&amp;gt;&#xA;      &amp;lt;/activity&amp;gt;&#xA;&#xA;  &amp;lt;/application&amp;gt;&#xA;&amp;lt;/manifest&amp;gt;&#xA;....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;iOS&lt;/h2&gt; &#xA;&lt;h4&gt;1. Create Share Extension&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using Xcode, go to File/New/Target and Choose &#34;Share Extension&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Give it a name, i.e., &#34;Share Extension&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure the deployment target for Runner.app and the share extension is the same.&lt;/p&gt; &#xA;&lt;h4&gt;2. Replace your &lt;a href=&#34;https://raw.githubusercontent.com/KasemJaffer/receive_sharing_intent/master/example/ios/Share%20Extension/Info.plist&#34;&gt;ios/Share Extension/Info.plist&lt;/a&gt; with the following:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;AppGroupId&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;$(CUSTOM_GROUP_ID)&amp;lt;/string&amp;gt;&#xA;&#x9;&amp;lt;key&amp;gt;CFBundleVersion&amp;lt;/key&amp;gt;&#xA;&#x9;&amp;lt;string&amp;gt;$(FLUTTER_BUILD_NUMBER)&amp;lt;/string&amp;gt;&#xA;&#x9;&amp;lt;key&amp;gt;NSExtension&amp;lt;/key&amp;gt;&#xA;&#x9;&amp;lt;dict&amp;gt;&#xA;&#x9;&#x9;&amp;lt;key&amp;gt;NSExtensionAttributes&amp;lt;/key&amp;gt;&#xA;        &amp;lt;dict&amp;gt;&#xA;            &amp;lt;key&amp;gt;PHSupportedMediaTypes&amp;lt;/key&amp;gt;&#xA;               &amp;lt;array&amp;gt;&#xA;                    &amp;lt;!--TODO: Add this flag, if you want to support sharing video into your app--&amp;gt;&#xA;                   &amp;lt;string&amp;gt;Video&amp;lt;/string&amp;gt;&#xA;                   &amp;lt;!--TODO: Add this flag, if you want to support sharing images into your app--&amp;gt;&#xA;                   &amp;lt;string&amp;gt;Image&amp;lt;/string&amp;gt;&#xA;               &amp;lt;/array&amp;gt;&#xA;            &amp;lt;key&amp;gt;NSExtensionActivationRule&amp;lt;/key&amp;gt;&#xA;            &amp;lt;dict&amp;gt;&#xA;                &amp;lt;!--TODO: Add this flag, if you want to support sharing text into your app--&amp;gt;&#xA;                &amp;lt;key&amp;gt;NSExtensionActivationSupportsText&amp;lt;/key&amp;gt;&#xA;                &amp;lt;true/&amp;gt;&#xA;                &amp;lt;!--TODO: Add this tag, if you want to support sharing urls into your app--&amp;gt;&#xA;            &#x9;&amp;lt;key&amp;gt;NSExtensionActivationSupportsWebURLWithMaxCount&amp;lt;/key&amp;gt;&#xA;            &#x9;&amp;lt;integer&amp;gt;1&amp;lt;/integer&amp;gt;&#xA;            &#x9;&amp;lt;!--TODO: Add this flag, if you want to support sharing images into your app--&amp;gt;&#xA;                &amp;lt;key&amp;gt;NSExtensionActivationSupportsImageWithMaxCount&amp;lt;/key&amp;gt;&#xA;                &amp;lt;integer&amp;gt;100&amp;lt;/integer&amp;gt;&#xA;                &amp;lt;!--TODO: Add this flag, if you want to support sharing video into your app--&amp;gt;&#xA;                &amp;lt;key&amp;gt;NSExtensionActivationSupportsMovieWithMaxCount&amp;lt;/key&amp;gt;&#xA;                &amp;lt;integer&amp;gt;100&amp;lt;/integer&amp;gt;&#xA;                &amp;lt;!--TODO: Add this flag, if you want to support sharing other files into your app--&amp;gt;&#xA;                &amp;lt;!--Change the integer to however many files you want to be able to share at a time--&amp;gt;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;lt;key&amp;gt;NSExtensionActivationSupportsFileWithMaxCount&amp;lt;/key&amp;gt;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;lt;integer&amp;gt;1&amp;lt;/integer&amp;gt;&#xA;            &amp;lt;/dict&amp;gt;&#xA;        &amp;lt;/dict&amp;gt;&#xA;&#x9;&#x9;&amp;lt;key&amp;gt;NSExtensionMainStoryboard&amp;lt;/key&amp;gt;&#xA;&#x9;&#x9;&amp;lt;string&amp;gt;MainInterface&amp;lt;/string&amp;gt;&#xA;&#x9;&#x9;&amp;lt;key&amp;gt;NSExtensionPointIdentifier&amp;lt;/key&amp;gt;&#xA;&#x9;&#x9;&amp;lt;string&amp;gt;com.apple.share-services&amp;lt;/string&amp;gt;&#xA;&#x9;&amp;lt;/dict&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Add the following to your &lt;a href=&#34;https://raw.githubusercontent.com/KasemJaffer/receive_sharing_intent/master/example/ios/Runner/Info.plist&#34;&gt;ios/Runner/Info.plist&lt;/a&gt;:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...&#xA;&amp;lt;key&amp;gt;AppGroupId&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;$(CUSTOM_GROUP_ID)&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;&#xA;&#x9;&amp;lt;array&amp;gt;&#xA;&#x9;&#x9;&amp;lt;dict&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;string&amp;gt;Editor&amp;lt;/string&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;array&amp;gt;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;lt;string&amp;gt;ShareMedia-$(PRODUCT_BUNDLE_IDENTIFIER)&amp;lt;/string&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;/array&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/dict&amp;gt;&#xA;&#x9;&amp;lt;/array&amp;gt;&#xA;&#xA;&amp;lt;key&amp;gt;NSPhotoLibraryUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;To upload photos, please allow permission to access your photo library.&amp;lt;/string&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Add the following to your &lt;a href=&#34;https://raw.githubusercontent.com/KasemJaffer/receive_sharing_intent/master/example/ios/Runner/Runner.entitlements&#34;&gt;ios/Runner/Runner.entitlements&lt;/a&gt;:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;....&#xA;    &amp;lt;!--TODO:  Add this tag, if you want support opening urls into your app--&amp;gt;&#xA;    &amp;lt;key&amp;gt;com.apple.developer.associated-domains&amp;lt;/key&amp;gt;&#xA;    &amp;lt;array&amp;gt;&#xA;        &amp;lt;string&amp;gt;applinks:example.com&amp;lt;/string&amp;gt;&#xA;    &amp;lt;/array&amp;gt;&#xA;....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Add the following to your &lt;a href=&#34;https://raw.githubusercontent.com/KasemJaffer/receive_sharing_intent/master/example/ios/Podfile&#34;&gt;ios/Podfile&lt;/a&gt;:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;...&#xA;target &#39;Runner&#39; do&#xA;  use_frameworks!&#xA;  use_modular_headers!&#xA;&#xA;  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))&#xA;&#xA;  # Share Extension is name of Extension which you created which is in this case &#39;Share Extension&#39;&#xA;  target &#39;Share Extension&#39; do&#xA;    inherit! :search_paths&#xA;  end&#xA;end&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. Add Runner and Share Extension in the same group&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt; tab and add App Groups capability in &lt;strong&gt;BOTH&lt;/strong&gt; Targets: &lt;code&gt;Runner&lt;/code&gt; and &lt;code&gt;Share Extension&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add a new container with the name of your choice. For example &lt;code&gt;group.MyContainer&lt;/code&gt; in the example project its &lt;code&gt;group.com.kasem.ShareExtention&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add User-defined(&lt;code&gt;Build Settings -&amp;gt; +&lt;/code&gt;) string &lt;code&gt;CUSTOM_GROUP_ID&lt;/code&gt; in &lt;strong&gt;BOTH&lt;/strong&gt; Targets: &lt;code&gt;Runner&lt;/code&gt; and &lt;code&gt;Share Extension&lt;/code&gt; and set value to group id created above. You can use different group ids depends on your flavor schemes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;7. Go to Build Phases of your Runner target and move &lt;code&gt;Embed Foundation Extension&lt;/code&gt; to the top of &lt;code&gt;Thin Binary&lt;/code&gt;.&lt;/h4&gt; &#xA;&lt;h4&gt;8. Make your &lt;code&gt;ShareViewController&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/KasemJaffer/receive_sharing_intent/master/example/ios/Share%20Extension/ShareViewController.swift&#34;&gt;ios/Share Extension/ShareViewController.swift&lt;/a&gt; inherit from &lt;code&gt;RSIShareViewController&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// If you get no such module &#39;receive_sharing_intent&#39; error. &#xA;// Go to Build Phases of your Runner target and&#xA;// move `Embed Foundation Extension` to the top of `Thin Binary`. &#xA;import receive_sharing_intent&#xA;&#xA;class ShareViewController: RSIShareViewController {&#xA;      &#xA;    // Use this method to return false if you don&#39;t want to redirect to host app automatically.&#xA;    // Default is true&#xA;    override func shouldAutoRedirect() -&amp;gt; Bool {&#xA;        return false&#xA;    }&#xA;    &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compiling issues and their fixes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Error: No such module &#39;receive_sharing_intent&#39;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix: Go to Build Phases of your Runner target and move &lt;code&gt;Embed Foundation Extension&lt;/code&gt; to the top of &lt;code&gt;Thin Binary&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Error: App does not build after adding Share Extension?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix: Check Build Settings of your share extension and remove everything that tries to import Cocoapods from your main project. i.e. remove everything under &lt;code&gt;Linking/Other Linker Flags&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You might need to disable bitcode for the extension target&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Error: Invalid Bundle. The bundle at &#39;Runner.app/Plugins/Sharing Extension.appex&#39; contains disallowed file &#39;Frameworks&#39;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fix: &lt;a href=&#34;https://stackoverflow.com/a/25789145/2061365&#34;&gt;https://stackoverflow.com/a/25789145/2061365&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Full Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/KasemJaffer/receive_sharing_intent/master/example/lib/main.dart&#34;&gt;main.dart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;dart:async&#39;;&#xA;&#xA;import &#39;package:receive_sharing_intent/receive_sharing_intent.dart&#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatefulWidget {&#xA;  @override&#xA;  _MyAppState createState() =&amp;gt; _MyAppState();&#xA;}&#xA;&#xA;class _MyAppState extends State&amp;lt;MyApp&amp;gt; {&#xA;  late StreamSubscription _intentSub;&#xA;  final _sharedFiles = &amp;lt;SharedMediaFile&amp;gt;[];&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;&#xA;    // Listen to media sharing coming from outside the app while the app is in the memory.&#xA;    _intentSub = ReceiveSharingIntent.instance.getMediaStream().listen((value) {&#xA;      setState(() {&#xA;        _sharedFiles.clear();&#xA;        _sharedFiles.addAll(value);&#xA;&#xA;        print(_sharedFiles.map((f) =&amp;gt; f.toMap()));&#xA;      });&#xA;    }, onError: (err) {&#xA;      print(&#34;getIntentDataStream error: $err&#34;);&#xA;    });&#xA;&#xA;    // Get the media sharing coming from outside the app while the app is closed.&#xA;    ReceiveSharingIntent.instance.getInitialMedia().then((value) {&#xA;      setState(() {&#xA;        _sharedFiles.clear();&#xA;        _sharedFiles.addAll(value);&#xA;        print(_sharedFiles.map((f) =&amp;gt; f.toMap()));&#xA;&#xA;        // Tell the library that we are done processing the intent.&#xA;        ReceiveSharingIntent.instance.reset();&#xA;      });&#xA;    });&#xA;  }&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    _intentSub.cancel();&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    const textStyleBold = const TextStyle(fontWeight: FontWeight.bold);&#xA;    return MaterialApp(&#xA;      home: Scaffold(&#xA;        appBar: AppBar(&#xA;          title: const Text(&#39;Plugin example app&#39;),&#xA;        ),&#xA;        body: Center(&#xA;          child: Column(&#xA;            children: &amp;lt;Widget&amp;gt;[&#xA;              Text(&#34;Shared files:&#34;, style: textStyleBold),&#xA;              Text(_sharedFiles&#xA;                      .map((f) =&amp;gt; f.toMap())&#xA;                      .join(&#34;,\n****************\n&#34;)),&#xA;            ],&#xA;          ),&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Carthage/Carthage</title>
    <updated>2025-05-18T01:44:04Z</updated>
    <id>tag:github.com,2025-05-18:/Carthage/Carthage</id>
    <link href="https://github.com/Carthage/Carthage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, decentralized dependency manager for Cocoa&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Logo/PNG/header.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Carthage &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-lightgrey.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/carthage/carthage.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://houndci.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg?sanitize=true&#34; alt=&#34;Reviewed by Hound&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Carthage is intended to be the simplest way to add frameworks to your Cocoa application.&lt;/p&gt; &#xA;&lt;p&gt;Carthage builds your dependencies and provides you with binary frameworks, but you retain full control over your project structure and setup. Carthage does not automatically modify your project files or your build settings.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#installing-carthage&#34;&gt;Installing Carthage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#adding-frameworks-to-an-application&#34;&gt;Adding frameworks to an application&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#building-platform-independent-xcframeworks-xcode-12-and-above&#34;&gt;Building platform-independent XCFrameworks&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#migrating-a-project-from-framework-bundles-to-xcframeworks&#34;&gt;Migrating a project from framework bundles to XCFrameworks&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#building-platform-specific-framework-bundles-default-for-xcode-11-and-below&#34;&gt;Building platform-specific framework bundles&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#if-youre-building-for-macos&#34;&gt;If you&#39;re building for macOS&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#if-youre-building-for-ios-tvos-or-watchos&#34;&gt;If you&#39;re building for iOS, tvOS, or watchOS&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#for-all-platforms&#34;&gt;For all platforms&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#optionally-add-build-phase-to-warn-about-outdated-dependencies&#34;&gt;(Optionally) Add build phase to warn about outdated dependencies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#swift-binary-framework-download-compatibility&#34;&gt;Swift binary framework download compatibility&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#running-a-project-that-uses-carthage&#34;&gt;Running a project that uses Carthage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#adding-frameworks-to-unit-tests-or-a-framework&#34;&gt;Adding frameworks to unit tests or a framework&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#upgrading-frameworks&#34;&gt;Upgrading frameworks&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#experimental-resolver&#34;&gt;Experimental Resolver&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#nested-dependencies&#34;&gt;Nested dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#using-submodules-for-dependencies&#34;&gt;Using submodules for dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#automatically-rebuilding-dependencies&#34;&gt;Automatically rebuilding dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#caching-builds&#34;&gt;Caching builds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#bashzshfish-completion&#34;&gt;Bash/Zsh/Fish completion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#supporting-carthage-for-your-framework&#34;&gt;Supporting Carthage for your framework&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#share-your-xcode-schemes&#34;&gt;Share your Xcode schemes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#resolve-build-failures&#34;&gt;Resolve build failures&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#tag-stable-releases&#34;&gt;Tag stable releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#archive-prebuilt-frameworks-into-zip-files&#34;&gt;Archive prebuilt frameworks into zip files&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#use-travis-ci-to-upload-your-tagged-prebuilt-frameworks&#34;&gt;Use travis-ci to upload your tagged prebuilt frameworks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#build-static-frameworks-to-speed-up-your-apps-launch-times&#34;&gt;Build static frameworks to speed up your app’s launch times&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#declare-your-compatibility&#34;&gt;Declare your compatibility&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#known-issues&#34;&gt;Known issues&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#dwarfs-symbol-problem&#34;&gt;DWARFs symbol problem&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#carthagekit&#34;&gt;CarthageKit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#differences-between-carthage-and-cocoapods&#34;&gt;Differences between Carthage and CocoaPods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Get Carthage by running &lt;code&gt;brew install carthage&lt;/code&gt; or choose &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#installing-carthage&#34;&gt;another installation method&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt; in the same directory where your &lt;code&gt;.xcodeproj&lt;/code&gt; or &lt;code&gt;.xcworkspace&lt;/code&gt; is&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;List the desired dependencies in the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt;, for example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;github &#34;Alamofire/Alamofire&#34; ~&amp;gt; 5.5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;Cartfile.resolved&lt;/code&gt; file and a &lt;code&gt;Carthage&lt;/code&gt; directory will appear in the same directory where your &lt;code&gt;.xcodeproj&lt;/code&gt; or &lt;code&gt;.xcworkspace&lt;/code&gt; is&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag the built &lt;code&gt;.xcframework&lt;/code&gt; bundles from &lt;code&gt;Carthage/Build&lt;/code&gt; into the &#34;Frameworks and Libraries&#34; section of your application’s Xcode project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using Carthage for an application, select &#34;Embed &amp;amp; Sign&#34;, otherwise &#34;Do Not Embed&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For an in depth guide, read on from &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#adding-frameworks-to-an-application&#34;&gt;Adding frameworks to an application&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing Carthage&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple options for installing Carthage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Installer:&lt;/strong&gt; Download and run the &lt;code&gt;Carthage.pkg&lt;/code&gt; file for the latest &lt;a href=&#34;https://github.com/Carthage/Carthage/releases&#34;&gt;release&lt;/a&gt;, then follow the on-screen instructions. If you are installing the pkg via CLI, you might need to run &lt;code&gt;sudo chown -R $(whoami) /usr/local&lt;/code&gt; first.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Homebrew:&lt;/strong&gt; You can use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; and install the &lt;code&gt;carthage&lt;/code&gt; tool on your system simply by running &lt;code&gt;brew update&lt;/code&gt; and &lt;code&gt;brew install carthage&lt;/code&gt;. (note: if you previously installed the binary version of Carthage, you should delete &lt;code&gt;/Library/Frameworks/CarthageKit.framework&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MacPorts:&lt;/strong&gt; You can use &lt;a href=&#34;https://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt; and install the &lt;code&gt;carthage&lt;/code&gt; tool on your system simply by running &lt;code&gt;sudo port selfupdate&lt;/code&gt; and &lt;code&gt;sudo port install carthage&lt;/code&gt;. (note: if you previously installed the binary version of Carthage, you should delete &lt;code&gt;/Library/Frameworks/CarthageKit.framework&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;From source:&lt;/strong&gt; If you’d like to run the latest development version (which may be highly unstable or incompatible), simply clone the &lt;code&gt;master&lt;/code&gt; branch of the repository, then run &lt;code&gt;make install&lt;/code&gt;. Requires Xcode 10.0 (Swift 4.2).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding frameworks to an application&lt;/h2&gt; &#xA;&lt;p&gt;Once you have Carthage &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#installing-carthage&#34;&gt;installed&lt;/a&gt;, you can begin adding frameworks to your project. Note that Carthage only supports dynamic frameworks, which are &lt;strong&gt;only available on iOS 8 or later&lt;/strong&gt; (or any version of OS X).&lt;/p&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;h4&gt;Building platform-independent XCFrameworks (Xcode 12 and above)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt; that lists the frameworks you’d like to use in your project.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;carthage update --use-xcframeworks&lt;/code&gt;. This will fetch dependencies into a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagecheckouts&#34;&gt;Carthage/Checkouts&lt;/a&gt; folder and build each one or download a pre-compiled XCFramework.&lt;/li&gt; &#xA; &lt;li&gt;On your application targets’ &lt;em&gt;General&lt;/em&gt; settings tab, in the &lt;em&gt;Frameworks, Libraries, and Embedded Content&lt;/em&gt; section, drag and drop each XCFramework you want to use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;Migrating a project from framework bundles to XCFrameworks&lt;/h5&gt; &#xA;&lt;p&gt;We encourage using XCFrameworks as of version 0.37.0 (January 2021), and require XCFrameworks when building on an Apple Silicon Mac. Switching from discrete framework bundles to XCFrameworks requires a few changes to your project:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Migration steps&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Delete your &lt;code&gt;Carthage/Build&lt;/code&gt; folder to remove any existing framework bundles.&lt;/li&gt; &#xA;  &lt;li&gt;Build new XCFrameworks by running &lt;code&gt;carthage build --use-xcframeworks&lt;/code&gt;. Any other arguments you build with can be provided like normal.&lt;/li&gt; &#xA;  &lt;li&gt;Remove references to the old frameworks in each of your targets: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Delete references to Carthage frameworks from the target&#39;s &lt;em&gt;Frameworks, Libraries, and Embedded Content&lt;/em&gt; section and/or its &lt;em&gt;Link Binary with Libraries&lt;/em&gt; build phase.&lt;/li&gt; &#xA;    &lt;li&gt;Delete references to Carthage frameworks from any &lt;em&gt;Copy Files&lt;/em&gt; build phases.&lt;/li&gt; &#xA;    &lt;li&gt;Delete the target&#39;s &lt;code&gt;carthage copy-frameworks&lt;/code&gt; build phase, if present.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Add references to XCFrameworks in each of your targets: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;For an application target: In the &lt;em&gt;General&lt;/em&gt; settings tab, in the &lt;em&gt;Frameworks, Libraries, and Embedded Content&lt;/em&gt; section, drag and drop each XCFramework you use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/li&gt; &#xA;    &lt;li&gt;For a framework target: In the &lt;em&gt;Build Phases&lt;/em&gt; tab, in a &lt;em&gt;Link Binary with Libraries&lt;/em&gt; phase, drag and drop each XCFramework you use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Building platform-specific framework bundles (default for Xcode 11 and below)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Xcode 12+ incompatibility&lt;/strong&gt;: Multi-architecture platforms are not supported when building framework bundles in Xcode 12 and above. Prefer &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#building-platform-independent-xcframeworks-xcode-12-and-above&#34;&gt;building with XCFrameworks&lt;/a&gt;. If you need to build discrete framework bundles, &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Xcode12Workaround.md&#34;&gt;use a workaround xcconfig file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;If you&#39;re building for macOS&lt;/h5&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;macOS-specific instructions&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt; that lists the frameworks you’d like to use in your project.&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;carthage update --platform macOS&lt;/code&gt;. This will fetch dependencies into a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagecheckouts&#34;&gt;Carthage/Checkouts&lt;/a&gt; folder and build each one or download a pre-compiled framework.&lt;/li&gt; &#xA;  &lt;li&gt;On your application targets’ &lt;em&gt;General&lt;/em&gt; settings tab, in the &lt;em&gt;Embedded Binaries&lt;/em&gt; section, drag and drop each framework you want to use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;Additionally, you&#39;ll need to copy debug symbols for debugging and crash reporting on OS X.&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;On your application target’s &lt;em&gt;Build Phases&lt;/em&gt; settings tab, click the &lt;em&gt;+&lt;/em&gt; icon and choose &lt;em&gt;New Copy Files Phase&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Click the &lt;em&gt;Destination&lt;/em&gt; drop-down menu and select &lt;em&gt;Products Directory&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;For each framework you’re using, drag and drop its corresponding dSYM file.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h5&gt;If you&#39;re building for iOS, tvOS, or watchOS&lt;/h5&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Platform-specific instructions&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt; that lists the frameworks you’d like to use in your project.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;. This will fetch dependencies into a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagecheckouts&#34;&gt;Carthage/Checkouts&lt;/a&gt; folder, then build each one or download a pre-compiled framework.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Open your application targets’ &lt;em&gt;General&lt;/em&gt; settings tab. For Xcode 11.0 and higher, in the &#34;Frameworks, Libraries, and Embedded Content&#34; section, drag and drop each framework you want to use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk. Then, in the &#34;Embed&#34; section, select &#34;Do Not Embed&#34; from the pulldown menu for each item added. For Xcode 10.x and lower, in the &#34;Linked Frameworks and Libraries&#34; section, drag and drop each framework you want to use from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder on disk.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;On your application targets’ &lt;em&gt;Build Phases&lt;/em&gt; settings tab, click the &lt;em&gt;+&lt;/em&gt; icon and choose &lt;em&gt;New Run Script Phase&lt;/em&gt;. Create a Run Script in which you specify your shell (ex: &lt;code&gt;/bin/sh&lt;/code&gt;), add the following contents to the script area below the shell:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/usr/local/bin/carthage copy-frameworks&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Create a file named &lt;code&gt;input.xcfilelist&lt;/code&gt; and a file named &lt;code&gt;output.xcfilelist&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add the paths to the frameworks you want to use to your &lt;code&gt;input.xcfilelist&lt;/code&gt;. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/Result.framework&#xA;$(SRCROOT)/Carthage/Build/iOS/ReactiveSwift.framework&#xA;$(SRCROOT)/Carthage/Build/iOS/ReactiveCocoa.framework&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add the paths to the copied frameworks to the &lt;code&gt;output.xcfilelist&lt;/code&gt;. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/Result.framework&#xA;$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/ReactiveSwift.framework&#xA;$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/ReactiveCocoa.framework&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With output files specified alongside the input files, Xcode only needs to run the script when the input files have changed or the output files are missing. This means dirty builds will be faster when you haven&#39;t rebuilt frameworks with Carthage.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;input.xcfilelist&lt;/code&gt; to the &#34;Input File Lists&#34; section of the Carthage run script phase&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;output.xcfilelist&lt;/code&gt; to the &#34;Output File Lists&#34; section of the Carthage run script phase&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;This script works around an &lt;a href=&#34;http://www.openradar.me/radar?id=6409498411401216&#34;&gt;App Store submission bug&lt;/a&gt; triggered by universal binaries and ensures that necessary bitcode-related files and dSYMs are copied when archiving.&lt;/p&gt; &#xA; &lt;p&gt;With the debug information copied into the built products directory, Xcode will be able to symbolicate the stack trace whenever you stop at a breakpoint. This will also enable you to step through third-party code in the debugger.&lt;/p&gt; &#xA; &lt;p&gt;When archiving your application for submission to the App Store or TestFlight, Xcode will also copy these files into the dSYMs subdirectory of your application’s &lt;code&gt;.xcarchive&lt;/code&gt; bundle.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;For all platforms&lt;/h4&gt; &#xA;&lt;p&gt;Along the way, Carthage will have created some &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md&#34;&gt;build artifacts&lt;/a&gt;. The most important of these is the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfileresolved&#34;&gt;Cartfile.resolved&lt;/a&gt; file, which lists the versions that were actually built for each framework. &lt;strong&gt;Make sure to commit your &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfileresolved&#34;&gt;Cartfile.resolved&lt;/a&gt;&lt;/strong&gt;, because anyone else using the project will need that file to build the same framework versions.&lt;/p&gt; &#xA;&lt;h4&gt;(Optionally) Add build phase to warn about outdated dependencies&lt;/h4&gt; &#xA;&lt;p&gt;You can add a Run Script phase to automatically warn you when one of your dependencies is out of date.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;On your application targets’ &lt;code&gt;Build Phases&lt;/code&gt; settings tab, click the &lt;code&gt;+&lt;/code&gt; icon and choose &lt;code&gt;New Run Script Phase&lt;/code&gt;. Create a Run Script in which you specify your shell (ex: &lt;code&gt;/bin/sh&lt;/code&gt;), add the following contents to the script area below the shell:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/usr/local/bin/carthage outdated --xcode-warnings 2&amp;gt;/dev/null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift binary framework download compatibility&lt;/h4&gt; &#xA;&lt;p&gt;Carthage will check to make sure that downloaded Swift (and mixed Objective-C/Swift) frameworks were built with the same version of Swift that is in use locally. If there is a version mismatch, Carthage will proceed to build the framework from source. If the framework cannot be built from source, Carthage will fail.&lt;/p&gt; &#xA;&lt;p&gt;Because Carthage uses the output of &lt;code&gt;xcrun swift --version&lt;/code&gt; to determine the local Swift version, make sure to run Carthage commands with the Swift toolchain that you intend to use. For many use cases, nothing additional is needed. However, for example, if you are building a Swift 2.3 project using Xcode 8.x, one approach to specifying your default &lt;code&gt;swift&lt;/code&gt; for &lt;code&gt;carthage bootstrap&lt;/code&gt; is to use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TOOLCHAINS=com.apple.dt.toolchain.Swift_2_3 carthage bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a project that uses Carthage&lt;/h3&gt; &#xA;&lt;p&gt;After you’ve finished the above steps and pushed your changes, other users of the project only need to fetch the repository and run &lt;code&gt;carthage bootstrap&lt;/code&gt; to get started with the frameworks you’ve added.&lt;/p&gt; &#xA;&lt;h3&gt;Adding frameworks to unit tests or a framework&lt;/h3&gt; &#xA;&lt;p&gt;Using Carthage for the dependencies of any arbitrary target is fairly similar to &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#adding-frameworks-to-an-application&#34;&gt;using Carthage for an application&lt;/a&gt;. The main difference lies in how the frameworks are actually set up and linked in Xcode.&lt;/p&gt; &#xA;&lt;p&gt;Because unit test targets are missing the &lt;em&gt;Linked Frameworks and Libraries&lt;/em&gt; section in their &lt;em&gt;General&lt;/em&gt; settings tab, you must instead drag the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;built frameworks&lt;/a&gt; to the &lt;em&gt;Link Binaries With Libraries&lt;/em&gt; build phase.&lt;/p&gt; &#xA;&lt;p&gt;In the Test target under the &lt;em&gt;Build Settings&lt;/em&gt; tab, add &lt;code&gt;@loader_path/Frameworks&lt;/code&gt; to the &lt;em&gt;Runpath Search Paths&lt;/em&gt; if it isn&#39;t already present.&lt;/p&gt; &#xA;&lt;p&gt;In rare cases, you may want to also copy each dependency into the build product (e.g., to embed dependencies within the outer framework, or make sure dependencies are present in a test bundle). To do this, create a new &lt;em&gt;Copy Files&lt;/em&gt; build phase with the &lt;em&gt;Frameworks&lt;/em&gt; destination, then add the framework reference there as well. You shouldn&#39;t use the &lt;code&gt;carthage copy-frameworks&lt;/code&gt; command since test bundles don&#39;t need frameworks stripped, and running concurrent instances of &lt;code&gt;copy-frameworks&lt;/code&gt; (with parallel builds turn on) is not supported.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading frameworks&lt;/h3&gt; &#xA;&lt;p&gt;If you’ve modified your &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt;, or you want to update to the newest versions of each framework (subject to the requirements you’ve specified), simply run the &lt;code&gt;carthage update&lt;/code&gt; command again.&lt;/p&gt; &#xA;&lt;p&gt;If you only want to update one, or specific, dependencies, pass them as a space-separated list to the &lt;code&gt;update&lt;/code&gt; command. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;carthage update Box&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;carthage update Box Result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Experimental Resolver&lt;/h5&gt; &#xA;&lt;p&gt;A rewrite of the logic for upgrading frameworks was done with the aim of increasing speed and reducing memory usage. It is currently an opt-in feature. It can be used by passing &lt;code&gt;--new-resolver&lt;/code&gt; to the update command, e.g.,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;carthage update --new-resolver Box&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are experiencing performance problems during updates, please give the new resolver a try&lt;/p&gt; &#xA;&lt;h3&gt;Nested dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If the framework you want to add to your project has dependencies explicitly listed in a &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#cartfile&#34;&gt;Cartfile&lt;/a&gt;, Carthage will automatically retrieve them for you. You will then have to &lt;strong&gt;drag them yourself into your project&lt;/strong&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If the embedded framework in your project has dependencies to other frameworks you must &lt;strong&gt;link them to application target&lt;/strong&gt; (even if application target does not have dependency to that frameworks and never uses them).&lt;/p&gt; &#xA;&lt;h3&gt;Using submodules for dependencies&lt;/h3&gt; &#xA;&lt;p&gt;By default, Carthage will directly &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagecheckouts&#34;&gt;check out&lt;/a&gt; dependencies’ source files into your project folder, leaving you to commit or ignore them as you choose. If you’d like to have dependencies available as Git submodules instead (perhaps so you can commit and push changes within them), you can run &lt;code&gt;carthage update&lt;/code&gt; or &lt;code&gt;carthage checkout&lt;/code&gt; with the &lt;code&gt;--use-submodules&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;When run this way, Carthage will write to your repository’s &lt;code&gt;.gitmodules&lt;/code&gt; and &lt;code&gt;.git/config&lt;/code&gt; files, and automatically update the submodules when the dependencies’ versions change.&lt;/p&gt; &#xA;&lt;h3&gt;Automatically rebuilding dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If you want to work on your dependencies during development, and want them to be automatically rebuilt when you build your parent project, you can add a Run Script build phase that invokes Carthage like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/usr/local/bin/carthage build --platform &#34;$PLATFORM_NAME&#34; --project-directory &#34;$SRCROOT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you should be &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/#using-submodules-for-dependencies&#34;&gt;using submodules&lt;/a&gt; before doing this, because plain checkouts &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagecheckouts&#34;&gt;should not be modified&lt;/a&gt; directly.&lt;/p&gt; &#xA;&lt;h3&gt;Caching builds&lt;/h3&gt; &#xA;&lt;p&gt;By default Carthage will rebuild a dependency regardless of whether it&#39;s the same resolved version as before. Passing the &lt;code&gt;--cache-builds&lt;/code&gt; will cause carthage to avoid rebuilding a dependency if it can. See information on &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/VersionFile.md&#34;&gt;version files&lt;/a&gt; for details on how Carthage performs this caching.&lt;/p&gt; &#xA;&lt;p&gt;Note: At this time &lt;code&gt;--cache-builds&lt;/code&gt; is incompatible with &lt;code&gt;--use-submodules&lt;/code&gt;. Using both will result in working copy and committed changes to your submodule dependency not being correctly rebuilt. See &lt;a href=&#34;https://github.com/Carthage/Carthage/issues/1785&#34;&gt;#1785&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Bash/Zsh/Fish completion&lt;/h3&gt; &#xA;&lt;p&gt;Auto completion of Carthage commands and options are available as documented in &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/BashZshFishCompletion.md&#34;&gt;Bash/Zsh/Fish Completion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Carthage for your framework&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Carthage only officially supports dynamic frameworks&lt;/strong&gt;. Dynamic frameworks can be used on any version of OS X, but only on &lt;strong&gt;iOS 8 or later&lt;/strong&gt;. Additionally, since version 0.30.0 Carthage supports &lt;strong&gt;static&lt;/strong&gt; frameworks.&lt;/p&gt; &#xA;&lt;p&gt;Because Carthage has no centralized package list, and no project specification format, &lt;strong&gt;most frameworks should build automatically&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The specific requirements of any framework project are listed below.&lt;/p&gt; &#xA;&lt;h3&gt;Share your Xcode schemes&lt;/h3&gt; &#xA;&lt;p&gt;Carthage will only build Xcode schemes that are shared from your &lt;code&gt;.xcodeproj&lt;/code&gt;. You can see if all of your intended schemes build successfully by running &lt;code&gt;carthage build --no-skip-current&lt;/code&gt;, then checking the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/Artifacts.md#carthagebuild&#34;&gt;Carthage/Build&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If an important scheme is not built when you run that command, open Xcode and make sure that the &lt;a href=&#34;https://developer.apple.com/library/content/documentation/IDEs/Conceptual/xcode_guide-continuous_integration/ConfigureBots.html#//apple_ref/doc/uid/TP40013292-CH9-SW3&#34;&gt;scheme is marked as &lt;em&gt;Shared&lt;/em&gt;&lt;/a&gt;, so Carthage can discover it.&lt;/p&gt; &#xA;&lt;h3&gt;Resolve build failures&lt;/h3&gt; &#xA;&lt;p&gt;If you encounter build failures in &lt;code&gt;carthage build --no-skip-current&lt;/code&gt;, try running &lt;code&gt;xcodebuild -scheme SCHEME -workspace WORKSPACE build&lt;/code&gt; or &lt;code&gt;xcodebuild -scheme SCHEME -project PROJECT build&lt;/code&gt; (with the actual values) and see if the same failure occurs there. This should hopefully yield enough information to resolve the problem.&lt;/p&gt; &#xA;&lt;p&gt;If you have multiple versions of the Apple developer tools installed (an Xcode beta, for example), use &lt;code&gt;xcode-select&lt;/code&gt; to change which version Carthage uses.&lt;/p&gt; &#xA;&lt;p&gt;If you’re still not able to build your framework with Carthage, please &lt;a href=&#34;https://github.com/Carthage/Carthage/issues/new&#34;&gt;open an issue&lt;/a&gt; and we’d be happy to help!&lt;/p&gt; &#xA;&lt;h3&gt;Tag stable releases&lt;/h3&gt; &#xA;&lt;p&gt;Carthage determines which versions of your framework are available by searching through the tags published on the repository, and trying to interpret each tag name as a &lt;a href=&#34;https://semver.org/&#34;&gt;semantic version&lt;/a&gt;. For example, in the tag &lt;code&gt;v1.2&lt;/code&gt;, the semantic version is 1.2.0.&lt;/p&gt; &#xA;&lt;p&gt;Tags without any version number, or with any characters following the version number (e.g., &lt;code&gt;1.2-alpha-1&lt;/code&gt;) are currently unsupported, and will be ignored.&lt;/p&gt; &#xA;&lt;h3&gt;Archive prebuilt frameworks into zip files&lt;/h3&gt; &#xA;&lt;p&gt;Carthage can automatically use prebuilt frameworks, instead of building from scratch, if they are attached to a &lt;a href=&#34;https://help.github.com/articles/about-releases/&#34;&gt;GitHub Release&lt;/a&gt; on your project’s repository or via a binary project definition file.&lt;/p&gt; &#xA;&lt;p&gt;To offer prebuilt frameworks for a specific tag, the binaries for &lt;em&gt;all&lt;/em&gt; supported platforms should be zipped up together into &lt;em&gt;one&lt;/em&gt; archive, and that archive should be attached to a published Release corresponding to that tag. The attachment should include &lt;code&gt;.framework&lt;/code&gt; in its name (e.g., &lt;code&gt;ReactiveCocoa.framework.zip&lt;/code&gt;), to indicate to Carthage that it contains binaries. The directory structure of the archive is free form but, &lt;strong&gt;frameworks should only appear once in the archive&lt;/strong&gt; as they will be copied to &lt;code&gt;Carthage/Build/&amp;lt;platform&amp;gt;&lt;/code&gt; based on their name (e.g. &lt;code&gt;ReactiveCocoa.framework&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To offer prebuilt XCFrameworks, build with &lt;code&gt;--use-xcframeworks&lt;/code&gt; and follow the same process to zip up all XCFrameworks into one archive. Include &lt;code&gt;.xcframework&lt;/code&gt; in the attachment name. Starting in version 0.38.0, Carthage prefers downloading &lt;code&gt;.xcframework&lt;/code&gt; attachments when &lt;code&gt;--use-xcframeworks&lt;/code&gt; is passed.&lt;/p&gt; &#xA;&lt;p&gt;You can perform the archiving operation with carthage itself using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;-carthage build --no-skip-current&#xA;-carthage archive YourFrameworkName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or alternatively&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;carthage build --archive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Draft Releases will be automatically ignored, even if they correspond to the desired tag.&lt;/p&gt; &#xA;&lt;h4&gt;Use travis-ci to upload your tagged prebuilt frameworks&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to use travis-ci in order to build and upload your tagged releases.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/travis-ci/travis.rb#installation&#34;&gt;Install travis CLI&lt;/a&gt; with &lt;code&gt;gem install travis&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.travis-ci.com/user/getting-started/&#34;&gt;Setup&lt;/a&gt; travis-ci for your repository (Steps 1 and 2)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create &lt;code&gt;.travis.yml&lt;/code&gt; file at the root of your repository based on that template. Set &lt;code&gt;FRAMEWORK_NAME&lt;/code&gt; to the correct value.&lt;/p&gt; &lt;p&gt;Replace PROJECT_PLACEHOLDER and SCHEME_PLACEHOLDER&lt;/p&gt; &lt;p&gt;If you are using a &lt;em&gt;workspace&lt;/em&gt; instead of a &lt;em&gt;project&lt;/em&gt; remove the xcode_project line and uncomment the xcode_workspace line.&lt;/p&gt; &lt;p&gt;The project should be in the format: MyProject.xcodeproj&lt;/p&gt; &lt;p&gt;The workspace should be in the format: MyWorkspace.xcworkspace&lt;/p&gt; &lt;p&gt;Feel free to update the &lt;code&gt;xcode_sdk&lt;/code&gt; value to another SDK, note that testing on iphoneos SDK would require you to upload a code signing identity&lt;/p&gt; &lt;p&gt;For more informations you can visit &lt;a href=&#34;https://docs.travis-ci.com/user/languages/objective-c&#34;&gt;travis docs for objective-c projects&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;language: objective-c&#xA;osx_image: xcode7.3&#xA;xcode_project: &amp;lt;PROJECT_PLACEHOLDER&amp;gt;&#xA;# xcode_workspace: &amp;lt;WORKSPACE_PLACEHOLDER&amp;gt;&#xA;xcode_scheme: &amp;lt;SCHEME_PLACEHOLDER&amp;gt;&#xA;xcode_sdk: iphonesimulator9.3&#xA;env:&#xA;  global:&#xA;    - FRAMEWORK_NAME=&amp;lt;THIS_IS_A_PLACEHOLDER_REPLACE_ME&amp;gt;&#xA;before_install:&#xA;  - brew update&#xA;  - brew outdated carthage || brew upgrade carthage&#xA;before_script:&#xA;  # bootstrap the dependencies for the project&#xA;  # you can remove if you don&#39;t have dependencies&#xA;  - carthage bootstrap&#xA;before_deploy:&#xA;  - carthage build --no-skip-current&#xA;  - carthage archive $FRAMEWORK_NAME&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;travis setup releases&lt;/code&gt;, follow documentation &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/releases/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This command will encode your GitHub credentials into the &lt;code&gt;.travis.yml&lt;/code&gt; file in order to let travis upload the release to GitHub.com When prompted for the file to upload, enter &lt;code&gt;$FRAMEWORK_NAME.framework.zip&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the deploy section to run on tags:&lt;/p&gt; &lt;p&gt;In &lt;code&gt;.travis.yml&lt;/code&gt; locate:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;on:&#xA;  repo: repo/repo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And add &lt;code&gt;tags: true&lt;/code&gt; and &lt;code&gt;skip_cleanup: true&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;skip_cleanup: true&#xA;on:&#xA;  repo: repo/repo&#xA;  tags: true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;That will let travis know to create a deployment when a new tag is pushed and prevent travis to cleanup the generated zip file&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build static frameworks to speed up your app’s launch times&lt;/h3&gt; &#xA;&lt;p&gt;If you embed many dynamic frameworks into your app, its pre-main launch times may be quite slow. Carthage is able to help mitigate this by building your dynamic frameworks as static frameworks instead. Static frameworks can be linked directly into your application or merged together into a larger dynamic framework with a few simple modifications to your workflow, which can result in dramatic reductions in pre-main launch times.&lt;/p&gt; &#xA;&lt;h4&gt;Carthage 0.30.0 or higher&lt;/h4&gt; &#xA;&lt;p&gt;Since version 0.30.0 Carthage project rolls out support for statically linked frameworks written in Swift or Objective-C, support for which has been introduced in Xcode 9.4. Please note however that it specifically says &lt;em&gt;frameworks&lt;/em&gt;, hence Darwin bundles with &lt;strong&gt;.framework&lt;/strong&gt; extension and statically linked object archives inside. Carthage does not currently support static &lt;em&gt;library&lt;/em&gt; schemes, nor are there any plans to introduce their support in the future.&lt;/p&gt; &#xA;&lt;p&gt;The workflow differs barely:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You still need to tick your Carthage-compliant project&#39;s schemes as &lt;em&gt;shared&lt;/em&gt; in &lt;em&gt;Product &amp;gt; Scheme &amp;gt; Manage Schemes...&lt;/em&gt;, just as with dynamic binaries&lt;/li&gt; &#xA; &lt;li&gt;You still need to link against static &lt;strong&gt;.frameworks&lt;/strong&gt; in your project&#39;s &lt;em&gt;Build Phases&lt;/em&gt; just as with dynamic binaries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In your Carthage-compliant project&#39;s Cocoa Framework target&#39;s &lt;em&gt;Build Settings&lt;/em&gt;, &lt;em&gt;Linking&lt;/em&gt; section, set &lt;strong&gt;Mach-O Type&lt;/strong&gt; to &lt;strong&gt;Static Library&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Your statically linked frameworks will be built at &lt;em&gt;./Carthage/Build/$(PLATFORM_NAME)/Static&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;You should not add any of static frameworks as input/output files in &lt;strong&gt;carthage copy-frameworks&lt;/strong&gt; &lt;em&gt;Build Phase&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Carthage 0.29.0 or lower&lt;/h4&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Documentation/StaticFrameworks.md&#34;&gt;StaticFrameworks&lt;/a&gt; doc for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that a few caveats apply to this approach:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swift static frameworks are not officially supported by Apple&lt;/li&gt; &#xA; &lt;li&gt;This is an advanced workflow that is not built into Carthage, YMMV&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Declare your compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Want to advertise that your project can be used with Carthage? You can add a compatibility badge:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;… to your &lt;code&gt;README&lt;/code&gt;, by simply inserting the following Markdown:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;h5&gt;DWARFs symbol problem&lt;/h5&gt; &#xA;&lt;p&gt;Pre-built framework cannot be debugged using step execution on other machine than on which the framework was built. Simply &lt;code&gt;carthage bootstrap/build/update --no-use-binaries&lt;/code&gt; should fix this, but for more automated workaround, see &lt;a href=&#34;https://github.com/Carthage/Carthage/issues/924&#34;&gt;#924&lt;/a&gt;. Dupe &lt;a href=&#34;http://www.openradar.me/23551273&#34;&gt;rdar://23551273&lt;/a&gt; if you want Apple to fix the root cause of this problem.&lt;/p&gt; &#xA;&lt;h2&gt;CarthageKit&lt;/h2&gt; &#xA;&lt;p&gt;Most of the functionality of the &lt;code&gt;carthage&lt;/code&gt; command line tool is actually encapsulated in a framework named CarthageKit.&lt;/p&gt; &#xA;&lt;p&gt;If you’re interested in using Carthage as part of another tool, or perhaps extending the functionality of Carthage, take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/Source/CarthageKit&#34;&gt;CarthageKit&lt;/a&gt; source code to see if the API fits your needs.&lt;/p&gt; &#xA;&lt;h2&gt;Differences between Carthage and CocoaPods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; is a long-standing dependency manager for Cocoa. So why was Carthage created?&lt;/p&gt; &#xA;&lt;p&gt;Firstly, CocoaPods (by default) automatically creates and updates an Xcode workspace for your application and all dependencies. Carthage builds framework binaries using &lt;code&gt;xcodebuild&lt;/code&gt;, but leaves the responsibility of integrating them up to the user. CocoaPods’ approach is easier to use, while Carthage’s is flexible and unintrusive.&lt;/p&gt; &#xA;&lt;p&gt;The goal of CocoaPods is listed in its &lt;a href=&#34;https://github.com/CocoaPods/CocoaPods/raw/1703a3464674baecf54bd7e766f4b37ed8fc43f7/README.md&#34;&gt;README&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;… to improve discoverability of, and engagement in, third party open-source libraries, by creating a more centralized ecosystem.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By contrast, Carthage has been created as a &lt;em&gt;decentralized&lt;/em&gt; dependency manager. There is no central list of projects, which reduces maintenance work and avoids any central point of failure. However, project discovery is more difficult—users must resort to GitHub’s &lt;a href=&#34;https://github.com/trending?l=swift&#34;&gt;Trending&lt;/a&gt; pages or similar.&lt;/p&gt; &#xA;&lt;p&gt;CocoaPods projects must also have what’s known as a &lt;a href=&#34;https://guides.cocoapods.org/syntax/podspec.html&#34;&gt;podspec&lt;/a&gt; file, which includes metadata about the project and specifies how it should be built. Carthage uses &lt;code&gt;xcodebuild&lt;/code&gt; to build dependencies, instead of integrating them into a single workspace, it doesn’t have a similar specification file but your dependencies must include their own Xcode project that describes how to build their products.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, we created Carthage because we wanted the simplest tool possible—a dependency manager that gets the job done without taking over the responsibility of Xcode, and without creating extra work for framework authors. CocoaPods offers many amazing features that Carthage will never have, at the expense of additional complexity.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Carthage is released under the &lt;a href=&#34;https://raw.githubusercontent.com/Carthage/Carthage/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Header backdrop photo is released under the &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/2.0/&#34;&gt;CC BY-NC-SA 2.0&lt;/a&gt; license. Original photo by &lt;a href=&#34;https://www.flickr.com/photos/prof_richard/&#34;&gt;Richard Mortel&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>