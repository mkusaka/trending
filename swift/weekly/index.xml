<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-10T01:47:55Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>swiftlang/swift-format</title>
    <updated>2024-11-10T01:47:55Z</updated>
    <id>tag:github.com,2024-11-10:/swiftlang/swift-format</id>
    <link href="https://github.com/swiftlang/swift-format" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Formatting technology for Swift source code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swift-format&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;swift-format&lt;/code&gt; provides the formatting technology for &lt;a href=&#34;https://github.com/swiftlang/sourcekit-lsp&#34;&gt;SourceKit-LSP&lt;/a&gt; and the building blocks for doing code formatting transformations.&lt;/p&gt; &#xA;&lt;p&gt;This package can be used as a &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-format/main/#command-line-usage&#34;&gt;command line tool&lt;/a&gt; or linked into other applications as a Swift Package Manager dependency and invoked via an &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-format/main/#api-usage&#34;&gt;API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: No default Swift code style guidelines have yet been proposed. The style that is currently applied by &lt;code&gt;swift-format&lt;/code&gt; is just one possibility, and the code is provided so that it can be tested on real-world code and experiments can be made by modifying it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Matching swift-format to Your Swift Version&lt;/h2&gt; &#xA;&lt;h3&gt;Swift 5.8 and later&lt;/h3&gt; &#xA;&lt;p&gt;As of Swift 5.8, swift-format depends on the version of &lt;a href=&#34;https://github.com/swiftlang/swift-syntax&#34;&gt;SwiftSyntax&lt;/a&gt; whose parser has been rewritten in Swift and no longer has dependencies on libraries in the Swift toolchain.&lt;/p&gt; &#xA;&lt;p&gt;This change allows &lt;code&gt;swift-format&lt;/code&gt; to be built, developed, and run using any version of Swift that can compile it, decoupling it from the version that supported a particular syntax. However, earlier versions of swift-format will still not be able to recognize new syntax added in later versions of the language and parser.&lt;/p&gt; &#xA;&lt;p&gt;Note also that the version numbering scheme has changed to match SwiftSyntax; the 5.8 release of swift-format is &lt;code&gt;508.0.0&lt;/code&gt;, not &lt;code&gt;0.50800.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift 5.7 and earlier&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;swift-format&lt;/code&gt; versions 0.50700.0 and earlier depend on versions of &lt;a href=&#34;https://github.com/swiftlang/swift-syntax&#34;&gt;SwiftSyntax&lt;/a&gt; that used a standalone parsing library distributed as part of the Swift toolchain. When using these versions, you should check out and build &lt;code&gt;swift-format&lt;/code&gt; from the release tag or branch that is compatible with the version of Swift you are using.&lt;/p&gt; &#xA;&lt;p&gt;The major and minor version components of &lt;code&gt;swift-format&lt;/code&gt; and SwiftSyntax must be the same—this is expressed in the &lt;code&gt;SwiftSyntax&lt;/code&gt; dependency in &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-format/main/Package.swift&#34;&gt;Package.swift&lt;/a&gt;—and those version components must match the Swift toolchain that is installed and used to build and run the formatter:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Xcode Release&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Swift Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;code&gt;swift-format&lt;/code&gt; Branch / Tags&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;–&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift at &lt;code&gt;main&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 14.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;release/5.7&lt;/code&gt; / &lt;code&gt;0.50700.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 13.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;release/5.6&lt;/code&gt; / &lt;code&gt;0.50600.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 13.0–13.2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;swift-5.5-branch&lt;/code&gt; / &lt;code&gt;0.50500.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 12.5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;swift-5.4-branch&lt;/code&gt; / &lt;code&gt;0.50400.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 12.0–12.4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;swift-5.3-branch&lt;/code&gt; / &lt;code&gt;0.50300.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 11.4–11.7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;swift-5.2-branch&lt;/code&gt; / &lt;code&gt;0.50200.x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Xcode 11.0–11.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;swift-5.1-branch&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For example, if you are using Xcode 13.3 (Swift 5.6), you will need &lt;code&gt;swift-format&lt;/code&gt; 0.50600.0.&lt;/p&gt; &#xA;&lt;h2&gt;Getting swift-format&lt;/h2&gt; &#xA;&lt;p&gt;If you are mainly interested in using swift-format (rather than developing it), then you can get it in three different ways:&lt;/p&gt; &#xA;&lt;h3&gt;Included in the Swift Toolchain&lt;/h3&gt; &#xA;&lt;p&gt;Swift 6 (included with Xcode 16) and above include swift-format in the toolchain. You can run &lt;code&gt;swift-format&lt;/code&gt; from anywhere on the system using &lt;code&gt;swift format&lt;/code&gt; (notice the space instead of dash). To find the path at which &lt;code&gt;swift-format&lt;/code&gt; is installed in Xcode, run &lt;code&gt;xcrun --find swift-format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing via Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;brew install swift-format&lt;/code&gt; to install the latest version.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;code&gt;swift-format&lt;/code&gt; using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;VERSION=510.1.0  # replace this with the version you need&#xA;git clone https://github.com/swiftlang/swift-format.git&#xA;cd swift-format&#xA;git checkout &#34;tags/$VERSION&#34;&#xA;swift build -c release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;git checkout&lt;/code&gt; command above will leave the repository in a &#34;detached HEAD&#34; state. This is fine if building and running the tool is all you want to do.&lt;/p&gt; &#xA;&lt;p&gt;Once the build has finished, the &lt;code&gt;swift-format&lt;/code&gt; executable will be located at &lt;code&gt;.build/release/swift-format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To test that the formatter was built successfully and is compatible with your Swift toolchain, you can also run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift test --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend using the &lt;code&gt;--parallel&lt;/code&gt; flag to speed up the test run since there are a large number of tests.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Usage&lt;/h2&gt; &#xA;&lt;p&gt;The general invocation syntax for &lt;code&gt;swift-format&lt;/code&gt; is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift-format [SUBCOMMAND] [OPTIONS...] [FILES...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tool supports a number of subcommands, each of which has its own options and are described below. Descriptions of the subcommands that are available can also be obtained by running &lt;code&gt;swift-format --help&lt;/code&gt;, and the description of a specific subcommand can be obtained by using the &lt;code&gt;--help&lt;/code&gt; flag after the subcommand name; for example, &lt;code&gt;swift-format lint --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Formatting&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift-format [format] [OPTIONS...] [FILES...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;format&lt;/code&gt; subcommand formats one or more Swift source files (or source code from standard input if no file paths are given on the command line). Writing out the &lt;code&gt;format&lt;/code&gt; subcommand is optional; it is the default behavior if no other subcommand is given.&lt;/p&gt; &#xA;&lt;p&gt;This subcommand supports all of the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-format/main/#options-supported-by-formatting-and-linting&#34;&gt;common lint and format options&lt;/a&gt;, as well as the formatting-only options below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-i/--in-place&lt;/code&gt;: Overwrites the input files when formatting instead of printing the results to standard output. &lt;em&gt;No backup of the original file is made before it is overwritten.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift-format lint [OPTIONS...] [FILES...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;lint&lt;/code&gt; subcommand checks one or more Swift source files (or source code from standard input if no file paths are given on the command line) for style violations and prints diagnostics to standard error for any violations that are detected.&lt;/p&gt; &#xA;&lt;p&gt;This subcommand supports all of the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-format/main/#options-supported-by-formatting-and-linting&#34;&gt;common lint and format options&lt;/a&gt;, as well as the linting-only options below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-s/--strict&lt;/code&gt;: If this option is specified, lint warnings will cause the tool to exit with a non-zero exit code (failure). By default, lint warnings do not prevent a successful exit; only fatal errors (for example, trying to lint a file that does not exist) cause the tool to exit unsuccessfully.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Options Supported by Formatting and Linting&lt;/h3&gt; &#xA;&lt;p&gt;The following options are supported by both the &lt;code&gt;format&lt;/code&gt; and &lt;code&gt;lint&lt;/code&gt; subcommands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--assume-filename &amp;lt;path&amp;gt;&lt;/code&gt;: The file path that should be used in diagnostics when linting or formatting from standard input. If this option is not provided, then &lt;code&gt;&amp;lt;stdin&amp;gt;&lt;/code&gt; will be used as the filename printed in diagnostics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--color-diagnostics/--no-color-diagnostics&lt;/code&gt;: By default, &lt;code&gt;swift-format&lt;/code&gt; will print diagnostics in color if standard error is connected to a terminal and without color otherwise (for example, if standard error is being redirected to a file). These flags can be used to force colors on or off respectively, regardless of whether the output is going to a terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--configuration &amp;lt;file&amp;gt;&lt;/code&gt;: The path to a JSON file that contains &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-format/main/#configuring-the-command-line-tool&#34;&gt;configurable settings&lt;/a&gt; for &lt;code&gt;swift-format&lt;/code&gt;. If omitted, a default configuration is use (which can be seen by running &lt;code&gt;swift-format dump-configuration&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--ignore-unparsable-files&lt;/code&gt;: If this option is specified and a source file contains syntax errors or can otherwise not be parsed successfully by the Swift syntax parser, it will be ignored (no diagnostics will be emitted and it will not be formatted). Without this option, an error will be emitted for any unparsable files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-p/--parallel&lt;/code&gt;: Process files in parallel, simultaneously across multiple cores.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-r/--recursive&lt;/code&gt;: If specified, then the tool will process &lt;code&gt;.swift&lt;/code&gt; source files in any directories listed on the command line and their descendants. Without this flag, it is an error to list a directory on the command line.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Viewing the Default Configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swift-format dump-configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;dump-configuration&lt;/code&gt; subcommand dumps the default configuration in JSON format to standard output. This can be used to simplify generating a custom configuration, by redirecting it to a file and editing it.&lt;/p&gt; &#xA;&lt;h3&gt;Configuring the Command Line Tool&lt;/h3&gt; &#xA;&lt;p&gt;For any source file being checked or formatted, &lt;code&gt;swift-format&lt;/code&gt; looks for a JSON-formatted file named &lt;code&gt;.swift-format&lt;/code&gt; in the same directory. If one is found, then that file is loaded to determine the tool&#39;s configuration. If the file is not found, then it looks in the parent directory, and so on.&lt;/p&gt; &#xA;&lt;p&gt;If no configuration file is found, a default configuration is used. The settings in the default configuration can be viewed by running &lt;code&gt;swift-format dump-configuration&lt;/code&gt;, which will dump it to standard output.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;--configuration &amp;lt;file&amp;gt;&lt;/code&gt; option is passed to &lt;code&gt;swift-format&lt;/code&gt;, then that configuration will be used unconditionally and the file system will not be searched.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-format/main/Documentation/Configuration.md&#34;&gt;Documentation/Configuration.md&lt;/a&gt; for a description of the configuration file format and the settings that are available.&lt;/p&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;Running &lt;code&gt;swift-format -v&lt;/code&gt; or &lt;code&gt;swift-format --version&lt;/code&gt; will print version information about &lt;code&gt;swift-format&lt;/code&gt; version and then exit.&lt;/p&gt; &#xA;&lt;h2&gt;API Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;swift-format&lt;/code&gt; can be easily integrated into other tools written in Swift. Instead of invoking the formatter by spawning a subprocess, users can depend on &lt;code&gt;swift-format&lt;/code&gt; as a Swift Package Manager dependency and import the &lt;code&gt;SwiftFormat&lt;/code&gt; module, which contains the entry points into the formatter&#39;s diagnostic and correction behavior.&lt;/p&gt; &#xA;&lt;p&gt;Formatting behavior is provided by the &lt;code&gt;SwiftFormatter&lt;/code&gt; class and linting behavior is provided by the &lt;code&gt;SwiftLinter&lt;/code&gt; class. These APIs can be passed either a Swift source file &lt;code&gt;URL&lt;/code&gt; or a &lt;code&gt;Syntax&lt;/code&gt; node representing a SwiftSyntax syntax tree. The latter capability is particularly useful for writing code generators, since it significantly reduces the amount of trivia that the generator needs to be concerned about adding to the syntax nodes it creates. Instead, it can pass the in-memory syntax tree to the &lt;code&gt;SwiftFormat&lt;/code&gt; API and receive perfectly formatted code as output.&lt;/p&gt; &#xA;&lt;p&gt;Please see the documentation in the &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-format/main/Sources/SwiftFormat/API/SwiftFormatter.swift&#34;&gt;&lt;code&gt;SwiftFormatter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-format/main/Sources/SwiftFormat/API/SwiftLinter.swift&#34;&gt;&lt;code&gt;SwiftLinter&lt;/code&gt;&lt;/a&gt; classes for more information about their usage.&lt;/p&gt; &#xA;&lt;h3&gt;Checking Out the Source Code for Development&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; branch is used for development. Pull requests should be created to merge into the &lt;code&gt;main&lt;/code&gt; branch; changes that are low-risk and compatible with the latest release branch may be cherry-picked into that branch after they have been merged into &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in developing &lt;code&gt;swift-format&lt;/code&gt;, there is additional documentation about that &lt;a href=&#34;https://raw.githubusercontent.com/swiftlang/swift-format/main/Documentation/Development.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Swift are welcomed and encouraged! Please see the &lt;a href=&#34;https://swift.org/contributing/&#34;&gt;Contributing to Swift guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before submitting the pull request, please make sure you have &lt;a href=&#34;https://github.com/apple/swift/raw/main/docs/ContinuousIntegration.md&#34;&gt;tested your changes&lt;/a&gt; and that they follow the Swift project &lt;a href=&#34;https://swift.org/contributing/#contributing-code&#34;&gt;guidelines for contributing code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To be a truly great community, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift.org&lt;/a&gt; needs to welcome developers from all walks of life, with different backgrounds, and with a wide range of experience. A diverse and friendly community will have more great ideas, more unique perspectives, and produce more great code. We will work diligently to make the Swift community welcoming to everyone.&lt;/p&gt; &#xA;&lt;p&gt;To give clarity of what is expected of our members, Swift has adopted the code of conduct defined by the Contributor Covenant. This document is used across many open source communities, and we think it articulates our values well. For more, see the &lt;a href=&#34;https://swift.org/code-of-conduct/&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>