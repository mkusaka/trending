<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:47:23Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mac-cain13/R.swift</title>
    <updated>2022-12-11T01:47:23Z</updated>
    <id>tag:github.com,2022-12-11:/mac-cain13/R.swift</id>
    <link href="https://github.com/mac-cain13/R.swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Strong typed, autocompleted resources like images, fonts and segues in Swift projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;R.swift &lt;a href=&#34;https://cocoapods.org/pods/R.swift&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/R.swift.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/blob/master/License&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/R.swift.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/R.swift.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Get strong typed, autocompleted resources like images, fonts and segues in Swift projects&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why use this?&lt;/h2&gt; &#xA;&lt;p&gt;It makes your code that uses resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fully typed&lt;/strong&gt;, less casting and guessing what a method will return&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compile time checked&lt;/strong&gt;, no more incorrect strings that make your app crash at runtime&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Autocompleted&lt;/strong&gt;, never have to guess that image name again&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently you type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let icon = UIImage(named: &#34;settings-icon&#34;)&#xA;let font = UIFont(name: &#34;San Francisco&#34;, size: 42)&#xA;let color = UIColor(named: &#34;indicator highlight&#34;)&#xA;let viewController = CustomViewController(nibName: &#34;CustomView&#34;, bundle: nil)&#xA;let string = String(format: NSLocalizedString(&#34;welcome.withName&#34;, comment: &#34;&#34;), locale: NSLocale.current, &#34;Arthur Dent&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With R.swift it becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let icon = R.image.settingsIcon()&#xA;let font = R.font.sanFrancisco(size: 42)&#xA;let color = R.color.indicatorHighlight()&#xA;let viewController = CustomViewController(nib: R.nib.customView)&#xA;let string = R.string.localizable.welcomeWithName(&#34;Arthur Dent&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md&#34;&gt;more examples&lt;/a&gt; or hear about &lt;a href=&#34;https://academy.realm.io/posts/slug-javi-soto-building-fabric-in-swift/#rswift-2956&#34;&gt;how Fabric.app uses R.swift&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Autocompleted images:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/DemoUseImage.gif&#34; alt=&#34;Autocompleted images&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiletime checked images:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/DemoRenameImage.gif&#34; alt=&#34;Compiletime checked images&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is only the beginning, check out &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md&#34;&gt;more examples&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;CocoaHeadsNL presentation&lt;/h2&gt; &#xA;&lt;p&gt;Mathijs Kadijk presented R.swift at the September 2016 CocoaHeadsNL meetup. Talking about the ideas behind R.swift and demonstrating how to move from plain stringly-typed iOS code to statically typed code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/embed/C8kRUTV9TOA&#34;&gt;&lt;img src=&#34;https://i.ytimg.com/vi/C8kRUTV9TOA/maxresdefault.jpg&#34; width=&#34;560&#34; alt=&#34;R.swift presentation at CocoaHeadsNL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;After installing R.swift into your project you can use the &lt;code&gt;R&lt;/code&gt;-struct to access resources. If the struct is outdated just build and R.swift will correct any missing/changed/added resources.&lt;/p&gt; &#xA;&lt;p&gt;R.swift currently supports these types of resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#custom-fonts&#34;&gt;Fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#resource-files&#34;&gt;Resource files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#colors&#34;&gt;Colors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#localized-strings&#34;&gt;Localized strings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#storyboards&#34;&gt;Storyboards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#segues&#34;&gt;Segues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#nibs&#34;&gt;Nibs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#reusable-table-view-cells&#34;&gt;Reusable cells&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Runtime validation with &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Examples.md#runtime-validation&#34;&gt;&lt;code&gt;R.validate()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If all images used in storyboards and nibs are available&lt;/li&gt; &#xA; &lt;li&gt;If all named colors used in storyboards and nibs are available&lt;/li&gt; &#xA; &lt;li&gt;If all view controllers with storyboard identifiers can be loaded&lt;/li&gt; &#xA; &lt;li&gt;If all custom fonts can be loaded&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#why-was-rswift-created&#34;&gt;Why was R.swift created?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#why-should-i-choose-rswift-over-alternative-x-or-y&#34;&gt;Why should I choose R.swift over alternative X or Y?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#what-are-the-requirements-to-run-rswift&#34;&gt;What are the requirements to run R.swift?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-use-methods-with-a-void-argument&#34;&gt;How to use methods with a &lt;code&gt;Void&lt;/code&gt; argument?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-fix-missing-imports-in-the-generated-file&#34;&gt;How to fix missing imports in the generated file?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-to-use-classes-with-the-same-name-as-their-module&#34;&gt;How to use classes with the same name as their module?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Ignoring.md&#34;&gt;Can I ignore resources?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#can-i-use-rswift-in-a-library&#34;&gt;Can I use R.swift in a library?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/QandA.md#how-does-rswift-work&#34;&gt;How does R.swift work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Migration.md&#34;&gt;How to upgrade to a new major version?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift/raw/master/Documentation/Ignoring.md#only-run-specific-generators-exclude-rsomething&#34;&gt;How can I only run specific generators?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;As of Rswift 7, Swift Package Manager is the recommended method of installation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/icihJ_hin3I?t=66&#34;&gt;Demo video: Updating from R.swift 6 to Rswift 7&lt;/a&gt; (Starting at 1:06, this describes the installation of Rswift 7).&lt;/p&gt; &#xA;&lt;h3&gt;Xcode project - SPM&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In Project Settings, on the tab &#34;Package Dependencies&#34;, click &#34;+&#34; and add &lt;code&gt;github.com/mac-cain13/R.swift&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select your target, on the tab &#34;General&#34;, in the section &#34;Frameworks, Libraries, and Embeded Content&#34;, click &#34;+&#34; and add &lt;code&gt;RswiftLibrary&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select your target, on the tab &#34;Build Phases&#34;, in the section &#34;Run Build Tool Plug-ins&#34;, click &#34;+&#34; and add &lt;code&gt;RswiftGenerateInternalResources&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Right-click on your project, click &lt;code&gt;RswiftModifyXcodePackages&lt;/code&gt;, click &lt;code&gt;Run&lt;/code&gt;, click &lt;code&gt;Allow Command to Change Files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build your project, now the &lt;code&gt;R&lt;/code&gt; struct should be available in your code, use auto-complete to explore all static references&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/RunBuildToolPluginsRswift.png&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Package.swift based SPM project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add a dependency in Package.swift: &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/mac-cain13/R.swift.git&#34;, from: &#34;7.0.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;For each relevant target, add a dependency and a plugin &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(&#xA;    name: &#34;Example&#34;,&#xA;    dependencies: [.product(name: &#34;RswiftLibrary&#34;, package: &#34;R.swift&#34;)],&#xA;    plugins: [.plugin(name: &#34;RswiftGeneratePublicResources&#34;, package: &#34;R.swift&#34;)]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build your project, now the &lt;code&gt;R&lt;/code&gt; struct should be available in your code, use auto-complete to explore all static references&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;CocoaPods&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;pod &#39;R.swift&#39;&lt;/code&gt; to your &lt;a href=&#34;http://cocoapods.org/#get_started&#34;&gt;Podfile&lt;/a&gt; and run &lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA;  &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase and &lt;strong&gt;below&lt;/strong&gt; &lt;code&gt;Check Pods Manifest.lock&lt;/code&gt;, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;$PODS_ROOT/R.swift/rswift&#34; generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA;  &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA;  &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/BuildPhaseExample.png&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Mint&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;ol start=&#34;0&#34;&gt; &#xA;  &lt;li&gt;Add the &lt;a href=&#34;https://github.com/mac-cain13/R.swift&#34;&gt;R.swift&lt;/a&gt; library to your project&lt;/li&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;mac-cain13/R.swift&lt;/code&gt; to your &lt;a href=&#34;https://github.com/yonaskolb/Mint#mintfile&#34;&gt;Mintfile&lt;/a&gt; and run &lt;code&gt;mint bootstrap&lt;/code&gt; to install this package without linking it globally (recommended)&lt;/li&gt; &#xA;  &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA;  &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if mint list | grep -q &#39;R.swift&#39;; then&#xA;  mint run R.swift@v7.0.1 rswift generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;else&#xA;  echo &#34;error: R.swift not installed; run &#39;mint bootstrap&#39; to install&#34;&#xA;  return -1&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA;  &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA;  &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Homebrew&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;p&gt;R.swift is also available through &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;. This makes it possible to install R.swift globally on your system. Install R.swift by running: &lt;code&gt;brew install rswift&lt;/code&gt;. The Homebrew formula is maintained by &lt;a href=&#34;https://github.com/tomasharkema&#34;&gt;@tomasharkema&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Manually&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;ol start=&#34;0&#34;&gt; &#xA;  &lt;li&gt;Add the &lt;a href=&#34;https://github.com/mac-cain13/R.swift&#34;&gt;R.swift&lt;/a&gt; library to your project&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift/releases&#34;&gt;Download&lt;/a&gt; a R.swift release, unzip it and put it into your source root directory&lt;/li&gt; &#xA;  &lt;li&gt;In Xcode: Click on your project in the file list, choose your target under &lt;code&gt;TARGETS&lt;/code&gt;, click the &lt;code&gt;Build Phases&lt;/code&gt; tab and add a &lt;code&gt;New Run Script Phase&lt;/code&gt; by clicking the little plus icon in the top left&lt;/li&gt; &#xA;  &lt;li&gt;Drag the new &lt;code&gt;Run Script&lt;/code&gt; phase &lt;strong&gt;above&lt;/strong&gt; the &lt;code&gt;Compile Sources&lt;/code&gt; phase, expand it and paste the following script: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;$SRCROOT/rswift&#34; generate &#34;$SRCROOT/R.generated.swift&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;$SRCROOT/R.generated.swift&lt;/code&gt; to the &#34;Output Files&#34; of the Build Phase&lt;/li&gt; &#xA;  &lt;li&gt;Uncheck &#34;Based on dependency analysis&#34; so that R.swift is run on each build&lt;/li&gt; &#xA;  &lt;li&gt;Build your project, in Finder you will now see a &lt;code&gt;R.generated.swift&lt;/code&gt; in the &lt;code&gt;$SRCROOT&lt;/code&gt;-folder, drag the &lt;code&gt;R.generated.swift&lt;/code&gt; files into your project and &lt;strong&gt;uncheck&lt;/strong&gt; &lt;code&gt;Copy items if needed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;em&gt;Screenshot of the Build Phase can be found &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Images/ManualBuildPhaseExample.png&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; Add the &lt;code&gt;*.generated.swift&lt;/code&gt; pattern to your &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unnecessary conflicts.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ll love contributions, read the &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/Documentation/Contribute.md&#34;&gt;contribute docs&lt;/a&gt; for info on how to report issues, submit ideas and submit pull requests!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mac-cain13/R.swift&#34;&gt;R.swift&lt;/a&gt; and &lt;a href=&#34;https://github.com/mac-cain13/R.swift.Library&#34;&gt;R.swift.Library&lt;/a&gt; are created by &lt;a href=&#34;https://github.com/mac-cain13&#34;&gt;Mathijs Kadijk&lt;/a&gt; and released under a &lt;a href=&#34;https://raw.githubusercontent.com/mac-cain13/R.swift/master/License&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/tomlokhorst&#34;&gt;Tom Lokhorst&lt;/a&gt; for his major contributions and help maintaining this project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mrousavy/react-native-vision-camera</title>
    <updated>2022-12-11T01:47:23Z</updated>
    <id>tag:github.com,2022-12-11:/mrousavy/react-native-vision-camera</id>
    <link href="https://github.com/mrousavy/react-native-vision-camera" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📸 The Camera library that sees the vision.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://margelo.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/banner.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Vision Camera&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/11.png&#34; width=&#34;50%&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;blockquote&gt;&#xA;  &lt;b&gt;📸 The Camera library that sees the vision.&lt;/b&gt;&#xA; &lt;/blockquote&gt; &#xA; &lt;pre align=&#34;center&#34;&gt;npm i &lt;a href=&#34;https://www.npmjs.com/package/react-native-vision-camera&#34;&gt;react-native-vision-camera&lt;/a&gt;&lt;br&gt;npx pod-install                 &lt;/pre&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://ko-fi.com/F1F8CLXG&#34; target=&#34;_blank&#34;&gt; &lt;img height=&#34;36&#34; style=&#34;border:0px;height:36px;&#34; src=&#34;https://az743702.vo.msecnd.net/cdn/kofi2.png?v=0&#34; border=&#34;0&#34; alt=&#34;Buy Me a Coffee at ko-fi.com&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://github.com/mrousavy?tab=followers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/followers/mrousavy?label=Follow%20%40mrousavy&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a align=&#34;center&#34; href=&#34;https://twitter.com/mrousavy&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/mrousavy?label=Follow%20%40mrousavy&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;div&gt; &#xA; &lt;img align=&#34;right&#34; width=&#34;35%&#34; src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/docs/static/img/example.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;‼️‼️‼️‼️‼️ ✨ VisionCamera V3 ‼️‼️‼️‼️‼️&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;See &lt;a href=&#34;https://github.com/mrousavy/react-native-vision-camera/issues/1376&#34;&gt;this discussion&lt;/a&gt; for the latest upcoming version of VisionCamera&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/guides&#34;&gt;Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/example/&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Photo, Video and Snapshot capture&lt;/li&gt; &#xA; &lt;li&gt;Customizable devices and multi-cameras (smoothly zoom out to &#34;fish-eye&#34; camera)&lt;/li&gt; &#xA; &lt;li&gt;Customizable FPS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/guides/frame-processors&#34;&gt;Frame Processors&lt;/a&gt; (JS worklets to run QR-Code scanning, facial recognition, AI object detection, realtime video chats, ...)&lt;/li&gt; &#xA; &lt;li&gt;Smooth zooming (Reanimated)&lt;/li&gt; &#xA; &lt;li&gt;Fast pause and resume&lt;/li&gt; &#xA; &lt;li&gt;HDR &amp;amp; Night modes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/example/&#34;&gt;example&lt;/a&gt; app&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;function App() {&#xA;  const devices = useCameraDevices(&#39;wide-angle-camera&#39;)&#xA;  const device = devices.back&#xA;&#xA;  if (device == null) return &amp;lt;LoadingView /&amp;gt;&#xA;  return (&#xA;    &amp;lt;Camera&#xA;      style={StyleSheet.absoluteFill}&#xA;      device={device}&#xA;      isActive={true}&#xA;    /&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adopting at scale&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/sponsors/mrousavy&#34;&gt; &lt;img align=&#34;right&#34; width=&#34;160&#34; alt=&#34;This library helped you? Consider sponsoring!&#34; src=&#34;https://raw.githubusercontent.com/mrousavy/react-native-vision-camera/main/.github/funding-octocat.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;VisionCamera is provided &lt;em&gt;as is&lt;/em&gt;, I work on it in my free time.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re integrating VisionCamera in a production app, consider &lt;a href=&#34;https://github.com/sponsors/mrousavy&#34;&gt;funding this project&lt;/a&gt; and &lt;a href=&#34;mailto:me@mrousavy.com?subject=Adopting VisionCamera at scale&#34;&gt;contact me&lt;/a&gt; to receive premium enterprise support, help with issues, prioritize bugfixes, request features, help at integrating VisionCamera and/or Frame Processors, and more.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;🚀 Get started by &lt;a href=&#34;https://mrousavy.github.io/react-native-vision-camera/docs/guides/&#34;&gt;setting up permissions&lt;/a&gt;!&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-argument-parser</title>
    <updated>2022-12-11T01:47:23Z</updated>
    <id>tag:github.com,2022-12-11:/apple/swift-argument-parser</id>
    <link href="https://github.com/apple/swift-argument-parser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Straightforward, type-safe argument parsing for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Argument Parser&lt;/h1&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Begin by declaring a type that defines the information that you need to collect from the command line. Decorate each stored property with one of &lt;code&gt;ArgumentParser&lt;/code&gt;&#39;s property wrappers, and then declare conformance to &lt;code&gt;ParsableCommand&lt;/code&gt; and add the &lt;code&gt;@main&lt;/code&gt; attribute. Finally, implement your command&#39;s logic in the &lt;code&gt;run()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import ArgumentParser&#xA;&#xA;@main&#xA;struct Repeat: ParsableCommand {&#xA;    @Flag(help: &#34;Include a counter with each repetition.&#34;)&#xA;    var includeCounter = false&#xA;&#xA;    @Option(name: .shortAndLong, help: &#34;The number of times to repeat &#39;phrase&#39;.&#34;)&#xA;    var count: Int? = nil&#xA;&#xA;    @Argument(help: &#34;The phrase to repeat.&#34;)&#xA;    var phrase: String&#xA;&#xA;    mutating func run() throws {&#xA;        let repeatCount = count ?? 2&#xA;&#xA;        for i in 1...repeatCount {&#xA;            if includeCounter {&#xA;                print(&#34;\(i): \(phrase)&#34;)&#xA;            } else {&#xA;                print(phrase)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ArgumentParser&lt;/code&gt; library parses the command-line arguments, instantiates your command type, and then either executes your &lt;code&gt;run()&lt;/code&gt; method or exits with a useful message.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ArgumentParser&lt;/code&gt; uses your properties&#39; names and type information, along with the details you provide using property wrappers, to supply useful error messages and detailed help:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ repeat hello --count 3&#xA;hello&#xA;hello&#xA;hello&#xA;$ repeat --count 3&#xA;Error: Missing expected argument &#39;phrase&#39;.&#xA;Help:  &amp;lt;phrase&amp;gt;  The phrase to repeat.&#xA;Usage: repeat [--count &amp;lt;count&amp;gt;] [--include-counter] &amp;lt;phrase&amp;gt;&#xA;  See &#39;repeat --help&#39; for more information.&#xA;$ repeat --help&#xA;USAGE: repeat [--count &amp;lt;count&amp;gt;] [--include-counter] &amp;lt;phrase&amp;gt;&#xA;&#xA;ARGUMENTS:&#xA;  &amp;lt;phrase&amp;gt;                The phrase to repeat.&#xA;&#xA;OPTIONS:&#xA;  --include-counter       Include a counter with each repetition.&#xA;  -c, --count &amp;lt;count&amp;gt;     The number of times to repeat &#39;phrase&#39;.&#xA;  -h, --help              Show help for this command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For guides, articles, and API documentation see the &lt;a href=&#34;https://apple.github.io/swift-argument-parser/documentation/argumentparser/&#34;&gt;library&#39;s documentation on the Web&lt;/a&gt; or in Xcode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-argument-parser/documentation/argumentparser/&#34;&gt;ArgumentParser documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-argument-parser/documentation/argumentparser/gettingstarted&#34;&gt;Getting Started with ArgumentParser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apple.github.io/swift-argument-parser/documentation/argumentparser/parsablecommand&#34;&gt;&lt;code&gt;ParsableCommand&lt;/code&gt; documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;This repository includes a few examples of using the library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-argument-parser/main/Examples/repeat/Repeat.swift&#34;&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/a&gt; is the example shown above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-argument-parser/main/Examples/roll/main.swift&#34;&gt;&lt;code&gt;roll&lt;/code&gt;&lt;/a&gt; is a simple utility implemented as a straight-line script.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-argument-parser/main/Examples/math/Math.swift&#34;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt; is an annotated example of using nested commands and subcommands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-argument-parser/main/Examples/count-lines/CountLines.swift&#34;&gt;&lt;code&gt;count-lines&lt;/code&gt;&lt;/a&gt; uses &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; code in its implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also see examples of &lt;code&gt;ArgumentParser&lt;/code&gt; adoption among Swift project tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-format/&#34;&gt;&lt;code&gt;swift-format&lt;/code&gt;&lt;/a&gt; uses some advanced features, like custom option values and hidden flags.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-package-manager/&#34;&gt;&lt;code&gt;swift-package-manager&lt;/code&gt;&lt;/a&gt; includes a deep command hierarchy and extensive use of option groups.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Argument Parser package is source-stable; version numbers follow semantic versioning. Source-breaking changes to public API can only land in a new major version.&lt;/p&gt; &#xA;&lt;p&gt;The public API of version 1.0.0 of the &lt;code&gt;swift-argument-parser&lt;/code&gt; package consists of non-underscored declarations that are marked public in the &lt;code&gt;ArgumentParser&lt;/code&gt; module. Interfaces that aren&#39;t part of the public API may continue to change in any release, including the exact wording and formatting of the autogenerated help and error messages, as well as the package’s examples, tests, utilities, and documentation.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may introduce changes to these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We want this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. Requiring a new Swift release will only require a minor version bump.&lt;/p&gt; &#xA;&lt;h2&gt;Adding &lt;code&gt;ArgumentParser&lt;/code&gt; as a Dependency&lt;/h2&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;ArgumentParser&lt;/code&gt; library in a SwiftPM project, add it to the dependencies for your package and your command-line executable target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let package = Package(&#xA;    // name, platforms, products, etc.&#xA;    dependencies: [&#xA;        // other dependencies&#xA;        .package(url: &#34;https://github.com/apple/swift-argument-parser&#34;, from: &#34;1.2.0&#34;),&#xA;    ],&#xA;    targets: [&#xA;        .executableTarget(name: &#34;&amp;lt;command-line-tool&amp;gt;&#34;, dependencies: [&#xA;            // other dependencies&#xA;            .product(name: &#34;ArgumentParser&#34;, package: &#34;swift-argument-parser&#34;),&#xA;        ]),&#xA;        // other targets&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported Versions&lt;/h3&gt; &#xA;&lt;p&gt;The most recent versions of swift-argument-parser support Swift 5.5 and newer. The minimum Swift version supported by swift-argument-parser releases are detailed below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;swift-argument-parser&lt;/th&gt; &#xA;   &lt;th&gt;Minimum Swift Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0.1 ..&amp;lt; 0.2.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;5.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.2.0 ..&amp;lt; 1.1.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;5.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1.1.0 ...&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;5.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>