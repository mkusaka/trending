<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T02:07:59Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Quick/Quick</title>
    <updated>2023-04-30T02:07:59Z</updated>
    <id>tag:github.com,2023-04-30:/Quick/Quick</id>
    <link href="https://github.com/Quick/Quick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Swift (and Objective-C) testing framework.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;http://f.cl.ly/items/0r1E192C1R0b2g2Q3h2w/QuickLogo_Color.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Quick/Quick/actions/workflows/ci-xcode.yml&#34;&gt;&lt;img src=&#34;https://github.com/Quick/Quick/actions/workflows/ci-xcode.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Quick&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Quick.svg?sanitize=true&#34; alt=&#34;CocoaPods&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cocoapods.org/pods/Quick&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/p/Quick.svg?sanitize=true&#34; alt=&#34;Platforms&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quick is a behavior-driven development framework for Swift and Objective-C. Inspired by &lt;a href=&#34;https://github.com/rspec/rspec&#34;&gt;RSpec&lt;/a&gt;, &lt;a href=&#34;https://github.com/specta/specta&#34;&gt;Specta&lt;/a&gt;, and &lt;a href=&#34;https://github.com/onsi/ginkgo&#34;&gt;Ginkgo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Quick/Assets/master/Screenshots/QuickSpec%20screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Swift&#xA;&#xA;import Quick&#xA;import Nimble&#xA;&#xA;class TableOfContentsSpec: QuickSpec {&#xA;  override func spec() {&#xA;    describe(&#34;the &#39;Documentation&#39; directory&#34;) {&#xA;      it(&#34;has everything you need to get started&#34;) {&#xA;        let sections = Directory(&#34;Documentation&#34;).sections&#xA;        expect(sections).to(contain(&#34;Organized Tests with Quick Examples and Example Groups&#34;))&#xA;        expect(sections).to(contain(&#34;Installing Quick&#34;))&#xA;      }&#xA;&#xA;      context(&#34;if it doesn&#39;t have what you&#39;re looking for&#34;) {&#xA;        it(&#34;needs to be updated&#34;) {&#xA;          let you = You(awesome: true)&#xA;          expect{you.submittedAnIssue}.toEventually(beTruthy())&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nimble&lt;/h4&gt; &#xA;&lt;p&gt;Quick comes together with &lt;a href=&#34;https://github.com/Quick/Nimble&#34;&gt;Nimble&lt;/a&gt; ‚Äî a matcher framework for your tests. You can learn why &lt;code&gt;XCTAssert()&lt;/code&gt; statements make your expectations unclear and how to fix that using Nimble assertions &lt;a href=&#34;https://raw.githubusercontent.com/Quick/Quick/main/Documentation/en-us/NimbleAssertions.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Version&lt;/h2&gt; &#xA;&lt;p&gt;Certain versions of Quick and Nimble only support certain versions of Swift. Depending on which version of Swift your project uses, you should use specific versions of Quick and Nimble. Use the table below to determine which versions of Quick and Nimble are compatible with your project.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Swift version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Quick version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Nimble version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 5.2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v3.0.0 or later&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v9.0.0 or later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 4.2 / Swift 5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v1.3.2 or later&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v7.3.2 or later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 3 / Swift 4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v1.0.0 or later&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v5.0.0 or later&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Swift 2.2 / Swift 2.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v0.9.3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;v4.1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;All documentation can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/Quick/Quick/main/Documentation&#34;&gt;Documentation folder&lt;/a&gt;, including &lt;a href=&#34;https://raw.githubusercontent.com/Quick/Quick/main/Documentation/en-us/InstallingQuick.md&#34;&gt;detailed installation instructions&lt;/a&gt; for CocoaPods, Carthage, Git submodules, and more. For example, you can install Quick and &lt;a href=&#34;https://github.com/Quick/Nimble&#34;&gt;Nimble&lt;/a&gt; using CocoaPods by adding the following to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;# Podfile&#xA;&#xA;use_frameworks!&#xA;&#xA;target &#34;MyApp&#34; do&#xA;  # Normal libraries&#xA;&#xA;  abstract_target &#39;Tests&#39; do&#xA;    inherit! :search_paths&#xA;    target &#34;MyAppTests&#34;&#xA;    target &#34;MyAppUITests&#34;&#xA;&#xA;    pod &#39;Quick&#39;&#xA;    pod &#39;Nimble&#39;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Projects using Quick&lt;/h2&gt; &#xA;&lt;p&gt;Over ten-thousand apps use either Quick and Nimble however, as they are not included in the app binary, neither appear in ‚ÄúTop Used Libraries‚Äù blog posts. Therefore, it would be greatly appreciated to remind contributors that their efforts are valued by compiling a list of organizations and projects that use them.&lt;/p&gt; &#xA;&lt;p&gt;Does your organization or project use Quick and Nimble? If yes, &lt;a href=&#34;https://github.com/Quick/Quick/wiki/Projects-using-Quick&#34;&gt;please add your project to the list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who uses Quick&lt;/h2&gt; &#xA;&lt;p&gt;Similar to projects using Quick, it would be nice to hear why people use Quick and Nimble. Are there features you love? Are there features that are just okay? Are there some features we have that no one uses?&lt;/p&gt; &#xA;&lt;p&gt;Have something positive to say about Quick (or Nimble)? If yes, &lt;a href=&#34;https://github.com/Quick/Quick/wiki/Who-uses-Quick&#34;&gt;provide a testimonial here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Quick/Quick/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenEmu/OpenEmu</title>
    <updated>2023-04-30T02:07:59Z</updated>
    <id>tag:github.com,2023-04-30:/OpenEmu/OpenEmu</id>
    <link href="https://github.com/OpenEmu/OpenEmu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üïπ Retro video game emulation for macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenEmu&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://openemu.org/img/intro-md.png&#34; alt=&#34;alt text&#34; title=&#34;OpenEmu Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenEmu is an open-source project whose purpose is to bring macOS game emulation into the realm of first-class citizenship. The project leverages modern macOS technologies, such as Cocoa, Metal, Core Animation, and other third-party libraries. One third-party library example is Sparkle, which is used for auto-updating. OpenEmu uses a modular architecture, allowing for game-engine plugins, allowing OpenEmu to support a host of different emulation engines and back ends while retaining the familiar macOS native front end.&lt;/p&gt; &#xA;&lt;p&gt;Currently, OpenEmu can load the following game engines as plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Atari 2600 (&lt;a href=&#34;https://stella-emu.github.io&#34;&gt;Stella&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Atari 5200 (&lt;a href=&#34;https://atari800.github.io&#34;&gt;Atari800&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Atari 7800 (&lt;a href=&#34;https://gitlab.com/jgemu/prosystem&#34;&gt;ProSystem&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Atari Lynx (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ColecoVision (&lt;a href=&#34;http://crabemu.sourceforge.net&#34;&gt;CrabEmu&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Famicom Disk System (&lt;a href=&#34;https://gitlab.com/jgemu/nestopia&#34;&gt;Nestopia&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Game Boy / Game Boy Color (&lt;a href=&#34;https://github.com/sinamas/gambatte&#34;&gt;Gambatte&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Game Boy Advance (&lt;a href=&#34;https://mgba.io&#34;&gt;mGBA&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Game Gear (&lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Intellivision (&lt;a href=&#34;https://github.com/jeremiah-sypult/BlissEmu&#34;&gt;Bliss&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;NeoGeo Pocket (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo (NES) / Famicom (&lt;a href=&#34;https://github.com/TASEmulators/fceux&#34;&gt;FCEUX&lt;/a&gt;, &lt;a href=&#34;https://gitlab.com/jgemu/nestopia&#34;&gt;Nestopia&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo 64 (&lt;a href=&#34;http://www.mupen64plus.org&#34;&gt;Mupen64Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo DS (&lt;a href=&#34;http://desmume.org&#34;&gt;DeSmuME&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo GameCube (&lt;a href=&#34;https://dolphin-emu.org&#34;&gt;Dolphin&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Odyssey¬≤ / Videopac+ (&lt;a href=&#34;https://sourceforge.net/projects/o2em/&#34;&gt;O2EM&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PC-FX (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;SG-1000 (&lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sega 32X (&lt;a href=&#34;https://github.com/notaz/picodrive&#34;&gt;picodrive&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sega CD / Mega CD (&lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sega Genesis / Mega Drive (&lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sega Master System (&lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sega Saturn (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sony PSP (&lt;a href=&#34;https://github.com/hrydgard/ppsspp&#34;&gt;PPSSPP&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Sony PlayStation (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Super Nintendo (SNES) (&lt;a href=&#34;https://github.com/bsnes-emu/bsnes&#34;&gt;BSNES&lt;/a&gt;, &lt;a href=&#34;https://github.com/snes9xgit/snes9x&#34;&gt;Snes9x&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TurboGrafx-16 / PC Engine (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;TurboGrafx-CD / PCE-CD (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Vectrex (&lt;a href=&#34;https://github.com/james7780/VecXGL&#34;&gt;VecXGL&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Virtual Boy (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;WonderSwan (&lt;a href=&#34;https://mednafen.github.io&#34;&gt;Mednafen&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Minimum Requirements&lt;/h2&gt; &#xA;&lt;p&gt;macOS Mojave 10.14.4&lt;/p&gt; &#xA;&lt;p&gt;Building the default branch requires Xcode 14.1 and macOS Monterey 12.5.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>StanfordBDHG/HealthGPT</title>
    <updated>2023-04-30T02:07:59Z</updated>
    <id>tag:github.com,2023-04-30:/StanfordBDHG/HealthGPT</id>
    <link href="https://github.com/StanfordBDHG/HealthGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Query your Apple Health data with natural language üí¨ ü©∫&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HealthGPT&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/StanfordBDHG/HealthGPT/main/Figures/Example.png&#34; alt=&#34;Example Conversation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;HealthGPT is an experimental iOS app that allows users to interact with their health data stored in the Apple Health app using natural language.&lt;/p&gt; &#xA;&lt;p&gt;Developed on top of &lt;a href=&#34;https://github.com/StanfordBDHG/CardinalKit&#34;&gt;CardinalKit&lt;/a&gt;, the &lt;a href=&#34;https://github.com/StanfordBDHG/CardinalKitTemplateApplication/&#34;&gt;CardinalKitTemplateApplication&lt;/a&gt;, and OpenAI. HealthGPT offers an easy-to-extend solution for those looking to make large language model powered apps within the Apple Health ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;Built by &lt;a href=&#34;https://varunshenoy.com&#34;&gt;Varun Shenoy&lt;/a&gt; over the course of a caffeine-fueled weekend. Reach out with any questions :)&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat-style interface for user-friendly health data interaction&lt;/li&gt; &#xA; &lt;li&gt;Integration with the Apple Health app to ensure seamless first-party data usage&lt;/li&gt; &#xA; &lt;li&gt;Extensible architecture built on &lt;a href=&#34;https://github.com/StanfordBDHG/CardinalKit&#34;&gt;CardinalKit&lt;/a&gt; for easy customization&lt;/li&gt; &#xA; &lt;li&gt;GPT-3.5 + GPT-4 access through the &lt;a href=&#34;https://github.com/MacPaw/OpenAI&#34;&gt;OpenAI&lt;/a&gt; Swift module&lt;/li&gt; &#xA; &lt;li&gt;Out of the box support for querying sleep, step count, active energy, exercise minutes, heart rate, and body mass.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;HealthGPT is provided for general informational purposes only and is not intended as a substitute for professional medical advice, diagnosis, or treatment. Large language models, such as those provided by OpenAI, are known to hallucinate and at times return false information. The use of HealthGPT is at your own risk. Always consult a qualified healthcare provider for personalized advice regarding your health and well-being. Aggregated HealthKit data for the past 14 days will be uploaded to OpenAI. Please refer to the &lt;a href=&#34;https://openai.com/policies/privacy-policy&#34;&gt;OpenAI privacy policy&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Set Up&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;HealthGPT.xcodeproj&lt;/code&gt; in Xcode. Wait for all dependencies to install and indexing to finish.&lt;/li&gt; &#xA; &lt;li&gt;Replace the OpenAI API key placeholder in &lt;code&gt;Supporting Files/OpenAI-Info.plist&lt;/code&gt; with your own from OpenAI&#39;s dashboard. You can also paste your key into the app during onboarding.&lt;/li&gt; &#xA; &lt;li&gt;Run the app (on device or in the simulator) and play with HealthGPT on your own data üöÄ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: if you&#39;re using the simulator, you will need to manually add data in the Health app. Otherwise, all of your results will read zero.&lt;/p&gt; &#xA;&lt;p&gt;You can add queries for additional &lt;a href=&#34;https://developer.apple.com/documentation/healthkit&#34;&gt;HealthKit&lt;/a&gt; quantities and categories as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;HealthGPT/HealthGPT/HealthDataFetcher.swift&lt;/code&gt; to create an appropriate query for your data type.&lt;/li&gt; &#xA; &lt;li&gt;Update the prompt in &lt;code&gt;HealthGPT/HealthGPT/MessageInputView.swift&lt;/code&gt; to pass the newly acquired data to the OpenAI API.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For any other quick changes (such as adding an onboarding flow), refer to the &lt;a href=&#34;https://github.com/StanfordBDHG/CardinalKitTemplateApplication/&#34;&gt;CardinalKitTemplateApplication&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to this project are welcome. Please make sure to read the &lt;a href=&#34;https://github.com/StanfordBDHG/.github/raw/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; and the &lt;a href=&#34;https://github.com/StanfordBDHG/.github/raw/main/CODE_OF_CONDUCT.md&#34;&gt;contributor covenant code of conduct&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/StanfordBDHG/.github/main/assets/biodesign-footer-light.png#gh-light-mode-only&#34; alt=&#34;Stanford Byers Center for Biodesign Logo&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/StanfordBDHG/.github/main/assets/biodesign-footer-dark.png#gh-dark-mode-only&#34; alt=&#34;Stanford Byers Center for Biodesign Logo&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>