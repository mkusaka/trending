<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-07T01:58:11Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jasonjmcghee/rem</title>
    <updated>2024-01-07T01:58:11Z</updated>
    <id>tag:github.com,2024-01-07:/jasonjmcghee/rem</id>
    <link href="https://github.com/jasonjmcghee/rem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source approach to locally record and enable searching everything you view on your Apple Silicon.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/jasonjmcghee/rem/assets/1522149/bc7368dc-90b5-42a3-abba-9d365b368ddb&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;rem&lt;/h1&gt; &#xA;&lt;p&gt;🧠 Remember everything. (very alpha - &lt;a href=&#34;https://github.com/jasonjmcghee/rem/releases&#34;&gt;download anyway&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Original Demo&lt;/h3&gt; &#xA;&lt;a href=&#34;https://www.loom.com/share/091a48b318f04f22bdada62716298948&#34;&gt; &lt;img style=&#34;max-width:300px;&#34; src=&#34;https://cdn.loom.com/sessions/thumbnails/091a48b318f04f22bdada62716298948-with-play.gif&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;An open source approach to locally record everything you view on your Apple Silicon computer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Only tested on Apple Silicon, and the release is Apple Silicon.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;This is crazy alpha version (rem could use &lt;em&gt;your&lt;/em&gt; help!)&lt;/h3&gt; &#xA;&lt;p&gt;Please log any bugs / issues you find!&lt;/p&gt; &#xA;&lt;p&gt;Looking at this code and grimacing? Want to help turn this project into something awesome? Please contribute. I haven&#39;t written Swift since 2017. I&#39;m sure you&#39;ll write better code than me.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;I think the idea of recording everything you see has the potential to change how we interact with our computers, and believe it should be open source.&lt;/p&gt; &#xA;&lt;p&gt;Also, from a privacy / security perspective, this is like... pretty scary stuff, and I want the code open so we know for certain that nothing is leaving your laptop. Even telemetry has the potential to leak private info.&lt;/p&gt; &#xA;&lt;p&gt;This is 100% local. Please, read the code yourself.&lt;/p&gt; &#xA;&lt;p&gt;Also, that means there is no tracking / analytics of any kind, which means I don&#39;t know you&#39;re running into bugs when you do. So please report any / all you find!&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jasonjmcghee/rem/releases&#34;&gt;Download the latest release&lt;/a&gt;, or build it yourself!&lt;/li&gt; &#xA; &lt;li&gt;Launch the app&lt;/li&gt; &#xA; &lt;li&gt;Click the brain&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Start Remembering&#34;&lt;/li&gt; &#xA; &lt;li&gt;Grant it access to &#34;Screen Recording&#34; i.e. take screenshots every 2 seconds&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Open timeline&#34; or &#34;Cmd + Scroll Up&#34; to open the timeline view &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Scroll left or right to move in time&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Search&#34; to open the search view &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Search your history and click on a thumbnail to go there in the timeline&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;In timeline, give Live Text a second and then you can select text&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Copy Recent Context&#34; to grab a prompt for interacting with an LLM with what you&#39;ve seen recently as context&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Show Me My Data&#34; to open a finder window where &lt;code&gt;rem&lt;/code&gt; stores SQLite db + video recordings&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Purge All Data&#34; to delete everything (useful if something breaks)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(that should be all that&#39;s needed)&lt;/p&gt; &#xA;&lt;h2&gt;Build it yourself&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repo &lt;code&gt;git clone --recursive -j8 https://github.com/jasonjmcghee/rem.git&lt;/code&gt; or run &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; after cloning&lt;/li&gt; &#xA; &lt;li&gt;Open project in Xcode&lt;/li&gt; &#xA; &lt;li&gt;Change default SQLite.Swift sdk architecture to macOS &lt;img width=&#34;1512&#34; alt=&#34;Screenshot 2023-12-28 at 5 38 19 PM&#34; src=&#34;https://github.com/ruslanjabari/rem/assets/59275080/63c08975-0bd2-4fe8-91ca-0b9406d44704&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Product &amp;gt; Archive&lt;/li&gt; &#xA; &lt;li&gt;Distribute App&lt;/li&gt; &#xA; &lt;li&gt;Custom&lt;/li&gt; &#xA; &lt;li&gt;Copy App&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Currently supports:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Going back in time (full-screen scrubber of everything you&#39;ve viewed)&lt;/li&gt; &#xA; &lt;li&gt;Copy text from back in time&lt;/li&gt; &#xA; &lt;li&gt;Search everything you&#39;ve viewed&lt;/li&gt; &#xA; &lt;li&gt;Easily grab recent context for use with LLMs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Things I&#39;d love to add:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Natural language search / agent interaction via updating local vector embedding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jasonjmcghee/portable-hnsw&#34;&gt;I&#39;ve also been exploring novel approaches to vector dbs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Novel search experiences like spatial / similar images&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Search filters (by app, time, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fine-grained purging / trimming / selecting recording&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Multi-monitor support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Where is my data? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Click &#34;Show Me My Data&#34; in the tray / status icon menu&lt;/li&gt; &#xA;   &lt;li&gt;Currently it is stored in: &lt;code&gt;~/Library/Containers/today.jason.rem/Data/Library/Application Support/today.jason.rem&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;It was originally: &lt;code&gt;~/Library/Application\ Support/today.jason.rem/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;(Never)AQ&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wow that logo is so great, you&#39;re an artist. Can I see your figma? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;So nice of you to say, sure &lt;a href=&#34;https://www.figma.com/file/Rr2vUXjsRb9SJMssQbEllA/rem-icons?type=design&amp;amp;node-id=0%3A1&amp;amp;mode=design&amp;amp;t=QhtJ7L1z4rIXTG4M-1&#34;&gt;here it is&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;XCode + copy / paste from history:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jasonjmcghee/rem/assets/1522149/97acacb9-b8c6-4b9c-b452-5423fb4e4372&#34;&gt;https://github.com/jasonjmcghee/rem/assets/1522149/97acacb9-b8c6-4b9c-b452-5423fb4e4372&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nikitabobko/AeroSpace</title>
    <updated>2024-01-07T01:58:11Z</updated>
    <id>tag:github.com,2024-01-07:/nikitabobko/AeroSpace</id>
    <link href="https://github.com/nikitabobko/AeroSpace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AeroSpace is an i3-like tiling window manager for macOS&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/src/Assets.xcassets/AppIcon.appiconset/icon.png&#34; width=&#34;40%&#34; height=&#34;40%&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;AeroSpace Beta &lt;a href=&#34;https://github.com/nikitabobko/AeroSpace/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/nikitabobko/AeroSpace/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;AeroSpace is an i3-like tiling window manager for macOS&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UOl7ErqWbrk&#34;&gt;YouTube Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide.html&#34;&gt;AeroSpace Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/commands.html&#34;&gt;AeroSpace Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/config-examples.html&#34;&gt;AeroSpace Config Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/goodness.html&#34;&gt;AeroSpace Goodness&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;Public Beta. Feedback is very much welcome&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I encourage you to try AeroSpace and file GitHub issues if something doesn&#39;t work for you. In particular, I&#39;m interested in issues that block you from using AeroSpace on daily basis.&lt;/li&gt; &#xA; &lt;li&gt;I already use AeroSpace on daily basis and I&#39;m happy with it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide.html&#34;&gt;The documentation&lt;/a&gt; covers all major things you need to know&lt;/li&gt; &#xA; &lt;li&gt;Expect minor breaking changes in the config format. Once the project reaches 1.0 the config is guaranteed to preserve backwards compatibility&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Manual&lt;/strong&gt; tiling window manager based on a &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide.html#tree&#34;&gt;tree paradigm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://i3wm.org/&#34;&gt;i3&lt;/a&gt; inspired&lt;/li&gt; &#xA; &lt;li&gt;AeroSpace employs its &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide.html#emulation-of-virtual-workspaces&#34;&gt;own emulation of virtual workspaces&lt;/a&gt; instead of relying on native macOS Spaces due to &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide.html#emulation-of-virtual-workspaces&#34;&gt;their considerable limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Plain text configuration (dotfiles friendly). See: &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/config-examples.html#default-config&#34;&gt;default-config.toml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;CLI scriptable&lt;/del&gt; &lt;a href=&#34;https://github.com/nikitabobko/AeroSpace/issues/3&#34;&gt;[PLANNED]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t require disabling SIP (System Integrity Protection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide.html#multiple-monitors&#34;&gt;Proper multi-monitor support&lt;/a&gt; (i3-like paradigm)&lt;/li&gt; &#xA; &lt;li&gt;Status menu icon displays current workspace name&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; to get autoupdates (Preferred)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install --no-quarantine --cask nikitabobko/tap/aerospace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/manual-installation.md&#34;&gt;Manual installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development notes&lt;/h2&gt; &#xA;&lt;p&gt;A notes on how to setup the project, build it, how to run the tests, etc. can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/docs/development.md&#34;&gt;docs/development.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Values of the project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AeroSpace is targeted at advanced users and developers&lt;/li&gt; &#xA; &lt;li&gt;Keyboard centric&lt;/li&gt; &#xA; &lt;li&gt;Never break configuration files (Guaranteed once AeroSpace reaches 1.0 version)&lt;/li&gt; &#xA; &lt;li&gt;AeroSpace doesn&#39;t use GUI, unless necessarily &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AeroSpace will never provide a GUI for configuration. For advanced users, it&#39;s easier to edit a configuration file in text editor rather than navigating through checkboxes in GUI.&lt;/li&gt; &#xA;   &lt;li&gt;Status menu icon is ok, because visual feedback is needed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Provide &lt;em&gt;practical&lt;/em&gt; features. Fancy appearance features are not &lt;em&gt;practical&lt;/em&gt; (e.g. window borders, transparency, etc)&lt;/li&gt; &#xA; &lt;li&gt;If &#34;dark magic&#34; (aka &#34;private APIs&#34;, &#34;code injections&#34;, etc) can be avoided, it must be avoided &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Right now, AeroSpace uses only a &lt;a href=&#34;https://raw.githubusercontent.com/nikitabobko/AeroSpace/main/src/Bridged-Header.h&#34;&gt;single private API to get window ID of accessibility object&lt;/a&gt;. Everything else is &lt;a href=&#34;https://developer.apple.com/documentation/applicationservices/axuielement_h&#34;&gt;macOS public accessibility API&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;AeroSpace will never require you to disable SIP (System Integrity Protection). For example, yabai &lt;a href=&#34;https://github.com/koekeishiya/yabai/issues/1863&#34;&gt;requires you to disable SIP&lt;/a&gt; to use some of its features. AeroSpace will either find another way ( e.g. &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide.html#emulation-of-virtual-workspaces&#34;&gt;emulation of workspaces&lt;/a&gt;) or will not implement this feature at all (window transparency and window shadowing are not &lt;em&gt;practical&lt;/em&gt; features)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Non Values&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Play nicely with existing macOS features. If limitations are imposed then AeroSpace won&#39;t play nicely with existing macOS features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;E.g. AeroSpace doesn&#39;t acknowledge the existence of macOS Spaces, and it uses &lt;a href=&#34;https://nikitabobko.github.io/AeroSpace/guide.html#emulation-of-virtual-workspaces&#34;&gt;emulation of its own workspaces&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tip of the day&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write -g NSWindowShouldDragOnGesture YES&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can move windows by holding &lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;cmd&lt;/code&gt; and dragging any part of the window (not necessarily the window title)&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://www.reddit.com/r/MacOS/comments/k6hiwk/keyboard_modifier_to_simplify_click_drag_of/&#34;&gt;reddit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ianyh/Amethyst&#34;&gt;Amethyst&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koekeishiya/yabai&#34;&gt;yabai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>markiv/SwiftUI-Shimmer</title>
    <updated>2024-01-07T01:58:11Z</updated>
    <id>tag:github.com,2024-01-07:/markiv/SwiftUI-Shimmer</id>
    <link href="https://github.com/markiv/SwiftUI-Shimmer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shimmer is a super-light modifier that adds a shimmering effect to any SwiftUI View, for example, to show that an operation is in progress. It works well on light and dark modes, and across iOS, macOS, tvOS, watchOS and visionOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SwiftUI-Shimmer ✨&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Shimmer&lt;/code&gt; is a super-light modifier that adds a &#34;shimmering&#34; effect to any SwiftUI &lt;code&gt;View&lt;/code&gt;, for example, to show that an operation is in progress. It works well on light and dark modes, left-to-right and right-to-left layout directions, and across all Apple platforms: iOS, macOS, tvOS, watchOS and even visionOS! 📱💻🖥️📺⌚️🥽✨&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/Shimmer-visionOS.gif&#34; alt=&#34;visionOS&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/Shimmer-watchOS.gif&#34; alt=&#34;watchOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SwiftUI&#xA;import Shimmer&#xA;⋮&#xA;⋮&#xA;Text(&#34;SwiftUI Shimmer&#34;).modifier(Shimmer())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or more conveniently&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;SwiftUI Shimmer&#34;).shimmering()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/light.gif&#34; alt=&#34;Light Mode&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/dark.gif&#34; alt=&#34;Dark Mode&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Optional Parameters ⚙️&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;active&lt;/code&gt;: Convenience parameter to conditionally enable the effect. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;animation&lt;/code&gt;: A custom animation. Defaults to &lt;code&gt;Shimmer.defaultAnimation&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gradient&lt;/code&gt;: A custom gradient. Defaults to &lt;code&gt;Shimmer.defaultGradient&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bandSize&lt;/code&gt;: The size of the animated mask&#39;s &#34;band&#34;. Defaults to 0.2 unit points, which corresponds to 20% of the extent of the gradient.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Backward Compatible Parameters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;active&lt;/code&gt;: Convenience parameter to conditionally enable the effect. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;duration&lt;/code&gt;: The duration of a shimmer cycle in seconds. Default: &lt;code&gt;1.5&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bounce&lt;/code&gt;: Whether to bounce (reverse) the animation back and forth. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delay&lt;/code&gt;: A delay in seconds. Defaults to &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/bounce3.gif&#34; alt=&#34;Bounce 3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Custom Animations&lt;/h2&gt; &#xA;&lt;p&gt;You can supply any custom animation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Loading...&#34;)&#xA;    .shimmering(&#xA;        active: isAnimating,&#xA;        animation: .easeInOut(duration: 2).repeatCount(5, autoreverses: false).delay(1)&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Animated Skeletons ☠️&lt;/h2&gt; &#xA;&lt;p&gt;Of course, you can combine &lt;code&gt;.shimmering(...)&lt;/code&gt; with the &lt;code&gt;.redacted(...)&lt;/code&gt; modifier to create interesting animated skeleton views.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/markiv/SwiftUI-Shimmer/main/docs/loading.gif&#34; alt=&#34;Loading&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(&#34;Some text&#34;)&#xA;    .redacted(reason: .placeholder)&#xA;    .shimmering()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Right-To-Left (RTL) Support&lt;/h2&gt; &#xA;&lt;p&gt;The mask and animation now adjusts automatically to the environment&#39;s &lt;code&gt;layoutDirection&lt;/code&gt; in order to better support different languages and locales.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;Use the package URL or search for the SwiftUI-Shimmer package: &lt;a href=&#34;https://github.com/markiv/SwiftUI-Shimmer&#34;&gt;https://github.com/markiv/SwiftUI-Shimmer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For how-to integrate package dependencies refer to &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app&#34;&gt;Adding Package Dependencies to Your App documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cocoapods&lt;/h3&gt; &#xA;&lt;p&gt;Add this to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftUI-Shimmer&#39;, :git =&amp;gt; &#39;https://github.com/markiv/SwiftUI-Shimmer.git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What About UIKit?&lt;/h2&gt; &#xA;&lt;p&gt;For an older, UIKit-based shimmer effect, see &lt;a href=&#34;https://github.com/markiv/UIView-Shimmer&#34;&gt;UIView-Shimmer&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>