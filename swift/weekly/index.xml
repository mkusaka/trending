<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T02:05:24Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apple/swift-testing</title>
    <updated>2023-10-01T02:05:24Z</updated>
    <id>tag:github.com,2023-10-01:/apple/swift-testing</id>
    <link href="https://github.com/apple/swift-testing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;swift-testing&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;!--&#xA;This source file is part of the Swift.org open source project&#xA;&#xA;Copyright (c) 2023 Apple Inc. and the Swift project authors&#xA;Licensed under Apache License v2.0 with Runtime Library Exception&#xA;&#xA;See https://swift.org/LICENSE.txt for license information&#xA;See https://swift.org/CONTRIBUTORS.txt for Swift project authors&#xA;--&gt; &#xA;&lt;p&gt;&lt;code&gt;swift-testing&lt;/code&gt; is a modern, open-source testing library for Swift with powerful and expressive capabilities. It gives developers more confidence with less code.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] This package is under active, ongoing development. Its contents, including all interfaces and implementation details, are experimental and are subject to change or removal without notice.&lt;/p&gt; &#xA; &lt;p&gt;We welcome feedback and ideas from the Swift community. Please join us in the &lt;a href=&#34;https://forums.swift.org/c/related-projects/swift-testing&#34;&gt;Swift forums&lt;/a&gt; and let us know what you think!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Feature overview&lt;/h2&gt; &#xA;&lt;h3&gt;Flexible test organization&lt;/h3&gt; &#xA;&lt;p&gt;Define test functions almost anywhere with a single attribute and group related tests into hierarchies using Swift&#39;s type system.&lt;/p&gt; &#xA;&lt;h3&gt;Customizable metadata&lt;/h3&gt; &#xA;&lt;p&gt;Dynamically enable or disable tests depending on runtime conditions, categorize tests using tags, and associate bugs directly with the tests that verify their fixes or reproduce their problems.&lt;/p&gt; &#xA;&lt;h3&gt;Scalable execution&lt;/h3&gt; &#xA;&lt;p&gt;Automatically parallelize tests in-process, integrate seamlessly with Swift concurrency, and parameterize test functions across wide ranges of inputs.&lt;/p&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;p&gt;The table below describes the current level of support that &lt;code&gt;swift-testing&lt;/code&gt; has for various platforms:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Platform&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Status&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;iOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;watchOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;tvOS&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ubuntu 22.04&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pending support for macros&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The detailed documentation for &lt;code&gt;swift-testing&lt;/code&gt; can be found on the &lt;a href=&#34;https://swiftpackageindex.com/apple/swift-testing/main/documentation/testing&#34;&gt;Swift Package Index&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here, you can delve into comprehensive guides, tutorials, and API references to make the most out of &lt;code&gt;swift-testing&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;swift-testing&lt;/code&gt; is under active development. We are working to integrate it with the rest of the Swift ecosystem, but you can try it out today by following the steps in our &lt;a href=&#34;https://swiftpackageindex.com/apple/swift-testing/main/documentation/testing/temporarygettingstarted&#34;&gt;Getting Started&lt;/a&gt; article.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tombonez/noTunes</title>
    <updated>2023-10-01T02:05:24Z</updated>
    <id>tag:github.com,2023-10-01:/tombonez/noTunes</id>
    <link href="https://github.com/tombonez/noTunes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple macOS application that will prevent iTunes or Apple Music from launching.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tombonez/noTunes/master/screenshots/app-icon.png&#34; alt=&#34;noTunes Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/tombonez/notunes&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/tombonez/notunes/total&#34; alt=&#34;GitHub all releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/tombonez/notunes&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Notice&lt;/h1&gt; &#xA;&lt;p&gt;The certificate used in noTunes prior to version 3.2 is set to expire on the 14th January 2022.&lt;/p&gt; &#xA;&lt;p&gt;To continue using noTunes please update to version 3.2 or greater.&lt;/p&gt; &#xA;&lt;h1&gt;noTunes&lt;/h1&gt; &#xA;&lt;p&gt;noTunes is a macOS application that will prevent iTunes &lt;em&gt;or&lt;/em&gt; Apple Music from launching.&lt;/p&gt; &#xA;&lt;p&gt;Simply launch the noTunes app and iTunes/Music will no longer be able to launch. For example, when bluetooth headphones reconnect.&lt;/p&gt; &#xA;&lt;p&gt;You can toggle the apps functionality via the menu bar icon with a simple left click.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install --cask notunes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Direct Download&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tombonez/noTunes/releases/download/v3.4/noTunes-3.4.zip&#34;&gt;noTunes-3.4.zip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Set noTunes to launch at startup&lt;/h3&gt; &#xA;&lt;h4&gt;Before Ventura:&lt;/h4&gt; &#xA;&lt;p&gt;Navigate to System Preferences -&amp;gt; Users &amp;amp; Groups. Under your user, select &#34;Login Items&#34;, click the lock on the bottom left and enter your login password to make changes. Click the plus sign (+) in the main panel and search for noTunes. Select it and click &#34;Add&#34;.&lt;/p&gt; &#xA;&lt;h4&gt;Ventura and later:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to System Settings&lt;/li&gt; &#xA; &lt;li&gt;Select General&lt;/li&gt; &#xA; &lt;li&gt;Select Login Items&lt;/li&gt; &#xA; &lt;li&gt;Click the + under Open at Login and select noTunes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Toggle noTunes Functionality&lt;/h3&gt; &#xA;&lt;p&gt;Left click the menu bar icon to toggle between its active states.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enabled (prevents iTunes/Music from opening)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tombonez/noTunes/master/screenshots/menubar-enabled.png&#34; alt=&#34;noTunes Enabled&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disabled (allows iTunes/Music to open)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tombonez/noTunes/master/screenshots/menubar-disabled.png&#34; alt=&#34;noTunes Disabled&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Hide Menu Bar Icon&lt;/h3&gt; &#xA;&lt;p&gt;Right click the menu bar icon and click &lt;code&gt;Hide Icon&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Restore Menu Bar Icon&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tombonez/noTunes/master/#quit-notunes&#34;&gt;Quit noTunes&lt;/a&gt;, run the following command in Terminal and re-open the app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults delete digital.twisted.noTunes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quit noTunes&lt;/h3&gt; &#xA;&lt;p&gt;To quit the app either:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;With menu bar icon visible&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Right click the menu bar icon and click quit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;With menu bar icon hidden&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quit the app via Activity Monitor or run the following command in Terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;osascript -e &#39;quit app &#34;noTunes&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set replacement for iTunes / Apple Music&lt;/h3&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;YOUR_MUSIC_APP&lt;/code&gt; with the name of your music app in the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults write digital.twisted.noTunes replacement /Applications/YOUR_MUSIC_APP.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;/Applications/YOUR_MUSIC_APP.app&lt;/code&gt; will launch when iTunes/Music attempts to launch.&lt;/p&gt; &#xA;&lt;p&gt;The following command will disable the replacement.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;defaults delete digital.twisted.noTunes replacement&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code is available under the &lt;a href=&#34;https://github.com/tombonez/notunes/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nalexn/ViewInspector</title>
    <updated>2023-10-01T02:05:24Z</updated>
    <id>tag:github.com,2023-10-01:/nalexn/ViewInspector</id>
    <link href="https://github.com/nalexn/ViewInspector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Runtime introspection and unit testing of SwiftUI views&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;ViewInspector 🕵️‍♂️ for SwiftUI&lt;/h1&gt; &#xA;&lt;span align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-lightgrey&#34; alt=&#34;Platform&#34;&gt; &lt;a href=&#34;https://travis-ci.com/nalexn/ViewInspector&#34;&gt;&lt;img src=&#34;https://travis-ci.com/nalexn/ViewInspector.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/nalexn/ViewInspector&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/nalexn/ViewInspector/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/span&gt; &#xA;&lt;p&gt;&lt;strong&gt;ViewInspector&lt;/strong&gt; is a library for unit testing SwiftUI views. It allows for traversing a view hierarchy at runtime providing direct access to the underlying &lt;code&gt;View&lt;/code&gt; structs.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;SwiftUI view is a function of state. We could provide it with the input, but were unable to verify the output... Until now!&lt;/p&gt; &#xA;&lt;h2&gt;Helpful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/0.9.9/guide.md&#34;&gt;Inspection guide&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/0.9.9/readiness.md&#34;&gt;SwiftUI API coverage&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;h3&gt;1. Search the view of a specific type or condition&lt;/h3&gt; &#xA;&lt;p&gt;Use one of the &lt;code&gt;find&lt;/code&gt; functions to quickly locate a specific view or assert there are none of such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try sut.inspect().find(button: &#34;Back&#34;)&#xA;&#xA;try sut.inspect().findAll(ViewType.Text.self,&#xA;                          where: { try $0.attributes().isBold() })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/0.9.9/guide.md#dynamic-query-with-find&#34;&gt;this section&lt;/a&gt; in the guide for the reference.&lt;/p&gt; &#xA;&lt;h3&gt;2. Read the inner state of the standard views&lt;/h3&gt; &#xA;&lt;p&gt;Standard SwiftUI views are no longer a black box:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sut = Text(&#34;Completed by \(72.51, specifier: &#34;%.1f&#34;)%&#34;).font(.caption)&#xA;&#xA;let string = try sut.inspect().text().string(locale: Locale(identifier: &#34;es&#34;))&#xA;XCTAssertEqual(string, &#34;Completado por 72,5%&#34;)&#xA;&#xA;XCTAssertEqual(try sut.inspect().text().attributes().font(), .caption)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each view has its own set of inspectable parameters, you can refer to the &lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/0.9.9/readiness.md&#34;&gt;API coverage&lt;/a&gt; document to see what&#39;s available for a particular SwiftUI view.&lt;/p&gt; &#xA;&lt;h3&gt;3. Verify your custom view&#39;s state&lt;/h3&gt; &#xA;&lt;p&gt;Obtain a copy of your custom view with actual state and references from the hierarchy of any depth:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sut = try view.inspect().find(CustomView.self).actualView()&#xA;XCTAssertTrue(sut.viewModel.isUserLoggedIn)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The library can operate with various types of the view&#39;s state, such as &lt;code&gt;@Binding&lt;/code&gt;, &lt;code&gt;@State&lt;/code&gt;, &lt;code&gt;@ObservedObject&lt;/code&gt; and &lt;code&gt;@EnvironmentObject&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;4. Trigger side effects&lt;/h3&gt; &#xA;&lt;p&gt;You can simulate user interaction by programmatically triggering system-controls callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;try sut.inspect().find(button: &#34;Close&#34;).tap()&#xA;&#xA;let list = try view.inspect().list()&#xA;try list[5].view(RowItemView.self).callOnAppear()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The library provides helpers for writing asynchronous tests for views with callbacks.&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h3&gt;Which views and modifiers are supported?&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/0.9.9/readiness.md&#34;&gt;API coverage&lt;/a&gt;. There is currently almost full support for SwiftUI v1 API, the v2 and v3 support is under active development.&lt;/p&gt; &#xA;&lt;h3&gt;Is it using private APIs?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ViewInspector&lt;/strong&gt; is using official Swift reflection API to dissect the view structures. So it&#39;ll be production-friendly even if you could somehow ship the test target to the production.&lt;/p&gt; &#xA;&lt;h3&gt;How do I add it to my Xcode project?&lt;/h3&gt; &#xA;&lt;p&gt;Assure you&#39;re adding the framework to your unit-test target. &lt;strong&gt;Do NOT&lt;/strong&gt; add it to the main build target.&lt;/p&gt; &#xA;&lt;h4&gt;Swift Package Manager&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;https://github.com/nalexn/ViewInspector&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Carthage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;github &#34;nalexn/ViewInspector&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;CocoaPods&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;pod &#39;ViewInspector&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How do I use it in my project?&lt;/h3&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/nalexn/ViewInspector/0.9.9/guide.md&#34;&gt;Inspection guide&lt;/a&gt;. You can also check out my other &lt;a href=&#34;https://github.com/nalexn/clean-architecture-swiftui&#34;&gt;project&lt;/a&gt; that harnesses the &lt;strong&gt;ViewInspector&lt;/strong&gt; for testing the entire UI.&lt;/p&gt; &#xA;&lt;h3&gt;Other questions, concerns or suggestions?&lt;/h3&gt; &#xA;&lt;p&gt;Ping me on &lt;a href=&#34;https://twitter.com/nallexn&#34;&gt;Twitter&lt;/a&gt; or just submit an issue or a pull request on Github.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nalexn.github.io/?utm_source=nalexn_github&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/blog-github-blue&#34; alt=&#34;blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://venmo.com/nallexn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%8D%BA-Venmo-brightgreen&#34; alt=&#34;venmo&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>