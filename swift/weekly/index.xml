<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-30T01:51:33Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Automattic/pocket-casts-ios</title>
    <updated>2022-10-30T01:51:33Z</updated>
    <id>tag:github.com,2022-10-30:/Automattic/pocket-casts-ios</id>
    <link href="https://github.com/Automattic/pocket-casts-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pocket Casts iOS app 🎧&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/308331/194037473-41ad7eba-8602-4be5-be73-49e3c0c48c12.svg#gh-light-mode-only&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/308331/194041226-4c6d8181-cafa-4ea8-8735-1d8106f5e5f6.svg#gh-dark-mode-only&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://buildkite.com/automattic/pocket-casts-ios&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/6c995de3d1584006341cc4dfda1312619f375385f5c0319dfe.svg?branch=trunk&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Automattic/pocket-casts-ios/raw/trunk/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MPL-black&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-ios%20%7C%20watchos-lightgrey&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Xcode-v14.0%2B-informational&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Pocket Casts is the world&#39;s most powerful podcast platform, an app by listeners, for listeners. &lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t already have it, you need to install Bundler:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gem install bundler&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next you&#39;ll need to install all the dependencies needed for CocoaPods and FastLane using this script:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make install_dependencies&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;External contributors&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re an external contributor run &lt;code&gt;make external_contributor&lt;/code&gt;. After that you should be able to build and run the project.&lt;/p&gt; &#xA;&lt;h2&gt;Swift Formatting&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt; to ensure code is spaced and formatted the same way and follows the same &lt;a href=&#34;https://github.com/Automattic/swiftlint-config&#34;&gt;general conventions&lt;/a&gt;. We have a script that will run it over the whole project.&lt;/p&gt; &#xA;&lt;p&gt;Once the required dependencies are installed via &lt;code&gt;bundle exec pod install&lt;/code&gt;, you can run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make format&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You should do this before making a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Open the .xcworkspace file, select the Pocket Casts project and the Simulator Device you want to run on, and hit the play button.&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;You can learn more about localization at &lt;a href=&#34;https://raw.githubusercontent.com/Automattic/pocket-casts-ios/trunk/docs/localization.md&#34;&gt;docs/Localization.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Protocol Buffers&lt;/h2&gt; &#xA;&lt;p&gt;The app uses &lt;a href=&#34;https://developers.google.com/protocol-buffers&#34;&gt;Google Protocol Buffers&lt;/a&gt; to define our server objects.&lt;/p&gt; &#xA;&lt;p&gt;To update server objects you&#39;ll need to install the protobuf command line tool as well as the &lt;a href=&#34;https://github.com/apple/swift-protobuf&#34;&gt;Swift Protobuf&lt;/a&gt; translators. This can be done via Homebrew with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install protobuf&#xA;brew install swift-protobuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update the protobuf files you can then run:&lt;/p&gt; &#xA;&lt;p&gt;Replace the &lt;code&gt;{API_PATH}&lt;/code&gt; with the full path to the &lt;code&gt;pocketcasts-api/api/modules/protobuf/src/main/proto&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make update_proto API_PATH={API_PATH}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mozilla-mobile/firefox-ios</title>
    <updated>2022-10-30T01:51:33Z</updated>
    <id>tag:github.com,2022-10-30:/mozilla-mobile/firefox-ios</id>
    <link href="https://github.com/mozilla-mobile/firefox-ios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Firefox for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Firefox for iOS &lt;a href=&#34;https://codebeat.co/projects/github-com-mozilla-firefox-ios&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/67e58b6d-bc89-4f22-ba8f-7668a9c15c5a&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/mozilla-mobile/firefox-ios/branch/main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/mozilla-mobile/firefox-ios/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Download on the &lt;a href=&#34;https://apps.apple.com/app/firefox-web-browser/id989804926&#34;&gt;App Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;This branch (main)&lt;/h2&gt; &#xA;&lt;p&gt;This branch works only with &lt;a href=&#34;https://developer.apple.com/download/all/?q=xcode&#34;&gt;Xcode 13.4.1&lt;/a&gt;, Swift 5.5.2 and supports iOS 13 and above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note:&lt;/em&gt; Both Intel and M1 macs are supported 🎉 and we use swift package manager.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure you aim your pull requests in the right direction.&lt;/p&gt; &#xA;&lt;p&gt;For bug fixes and features for a specific release, use the version branch.&lt;/p&gt; &#xA;&lt;h2&gt;Getting involved&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute but don&#39;t know where to start? Here is a list of &lt;a href=&#34;https://github.com/mozilla-mobile/firefox-ios/labels/Contributor%20OK&#34;&gt;issues that are contributor friendly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building the code&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the latest &lt;a href=&#34;https://developer.apple.com/xcode/downloads/&#34;&gt;Xcode developer tools&lt;/a&gt; from Apple.&lt;/li&gt; &#xA; &lt;li&gt;Install, &lt;a href=&#34;https://brew.sh&#34;&gt;Brew&lt;/a&gt;, Node, and a Python3 virtualenv for localization scripts: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew update&#xA;brew install node&#xA;pip3 install virtualenv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone the repository: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/mozilla-mobile/firefox-ios&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install Node.js dependencies, build user scripts and update content blocker: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd firefox-ios&#xA;sh ./bootstrap.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Client.xcodeproj&lt;/code&gt; in Xcode.&lt;/li&gt; &#xA; &lt;li&gt;Build the &lt;code&gt;Fennec&lt;/code&gt; scheme in Xcode.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: In case you have dependencies issues with SPM, you can try:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode -&amp;gt; File -&amp;gt; Packages -&amp;gt; Reset Package Caches&lt;/li&gt; &#xA; &lt;li&gt;Xcode -&amp;gt; File -&amp;gt; Packages -&amp;gt; Resolve Package Versions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building User Scripts&lt;/h2&gt; &#xA;&lt;p&gt;User Scripts (JavaScript injected into the &lt;code&gt;WKWebView&lt;/code&gt;) are compiled, concatenated, and minified using &lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;. User Scripts to be aggregated are placed in the following directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;/Client&#xA;|-- /Frontend&#xA;    |-- /UserContent&#xA;        |-- /UserScripts&#xA;            |-- /AllFrames&#xA;            |   |-- /AtDocumentEnd&#xA;            |   |-- /AtDocumentStart&#xA;            |-- /MainFrame&#xA;                |-- /AtDocumentEnd&#xA;                |-- /AtDocumentStart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This reduces the total possible number of User Scripts down to four. The compiled output from concatenating and minifying the User Scripts placed in these folders resides in &lt;code&gt;/Client/Assets&lt;/code&gt; and are named accordingly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AllFramesAtDocumentEnd.js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AllFramesAtDocumentStart.js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MainFrameAtDocumentEnd.js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MainFrameAtDocumentStart.js&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To simplify the build process, these compiled files are checked-in to this repository. When adding or editing User Scripts, these files can be re-compiled with &lt;code&gt;webpack&lt;/code&gt; manually. This requires Node.js to be installed, and all required &lt;code&gt;npm&lt;/code&gt; packages can be installed by running &lt;code&gt;npm install&lt;/code&gt; in the project&#39;s root directory. User Scripts can be compiled by running the following &lt;code&gt;npm&lt;/code&gt; command in the root directory of the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute to this repository? Check out &lt;a href=&#34;https://github.com/mozilla-mobile/firefox-ios/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;This Source Code Form is subject to the terms of the Mozilla Public&#xA;License, v. 2.0. If a copy of the MPL was not distributed with this&#xA;file, You can obtain one at https://mozilla.org/MPL/2.0/&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>insidegui/VirtualBuddy</title>
    <updated>2022-10-30T01:51:33Z</updated>
    <id>tag:github.com,2022-10-30:/insidegui/VirtualBuddy</id>
    <link href="https://github.com/insidegui/VirtualBuddy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtualize macOS 12 and later on Apple Silicon&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VirtualBuddy&lt;/h1&gt; &#xA;&lt;p&gt;VirtualBuddy can virtualize macOS 12 and later on Apple Silicon, with the goal of offering features that are useful to developers who need to test their apps on multiple versions of macOS, especially betas.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requires macOS 12.3 and an Apple Silicon Mac&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;⚠️ WARNING: This project is experimental. Things might break or not work as expected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/insidegui/VirtualBuddy/releases&#34;&gt;Download from GitHub Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insidegui/VirtualBuddy/main/Screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Feature Checklist&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ability to boot any version of macOS 12 or macOS 13, including betas&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built-in installation wizard &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Select from a collection of restore images available on Apple&#39;s servers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Install the latest stable version of macOS&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Local restore image IPSW file&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom restore image URL&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Boot into recovery mode (in order to disable SIP, for example)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Networking and file sharing support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Clipboard sharing (without the need to be running macOS Ventura) (experimental ¹)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customize virtual machine hardware configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Edit NVRAM variables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;¹ To enable clipboard sharing, build the &lt;code&gt;VirtualBuddyGuest&lt;/code&gt; scheme, then copy the &lt;code&gt;VirtualBuddyGuest&lt;/code&gt; app to the virtual machine (through file sharing, for example) and run it. This will keep the clipboard in sync between the guest and host machines. The feature is experimental, so it might be buggy and it&#39;s definitely not secure.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tips and Tricks&lt;/h3&gt; &#xA;&lt;h4&gt;Taking Advantage of APFS&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes when trying things out in the OS installed in one of the virtual machines, things might break, requiring a full install of the guest operating system again, which is a pain.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to APFS cloning though, you can just duplicate a virtual machine within your library folder (using Command + D in Finder), and the copy will take almost no additional disk space. This way you can have a &#34;clean&#34; copy of your VM, do whatever you want with a duplicate of it, and then throw the copy away and re-duplicate the clean version if things break.&lt;/p&gt; &#xA;&lt;h4&gt;Screen Resolution&lt;/h4&gt; &#xA;&lt;p&gt;VirtualBuddy sets up its virtual machines to have the same screen resolution as the host&#39;s main screen. This is great if you want to use the VM in full screen and take advantage of the entire resolution of your Mac&#39;s display.&lt;/p&gt; &#xA;&lt;p&gt;The default mode the VM OS selects for the display uses the native resolution that&#39;s available to it though, which can make things look really small. In order to address this, go into System Preferences &amp;gt; Displays within the guest operating system and choose a scaled resolution.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Xcode 14 beta&lt;/strong&gt; is required (the Xcode 14 RC uses the macOS 12 SDK, so you must use Xcode 14 beta 6 or earlier).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;VirtualBuddy/Config/Signing.xcconfig&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;VB_BUNDLE_ID_PREFIX&lt;/code&gt; variable to something unique like &lt;code&gt;com.yourname.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select the VirtualBuddy project in the Xcode sidebar&lt;/li&gt; &#xA; &lt;li&gt;Under &#34;Targets&#34;, select &#34;VirtualBuddy&#34;&lt;/li&gt; &#xA; &lt;li&gt;Go to the Signing &amp;amp; Capabilities tab and select your development team under Signing &amp;gt; Team&lt;/li&gt; &#xA; &lt;li&gt;Repeat the same process for the &#34;VirtualBuddyGuest&#34; target&lt;/li&gt; &#xA; &lt;li&gt;Build the &lt;code&gt;VirtualBuddy&lt;/code&gt; scheme (the one that &lt;strong&gt;doesn&#39;t&lt;/strong&gt; have &lt;code&gt;(Managed)&lt;/code&gt; in its name)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>