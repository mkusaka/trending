<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-12T01:47:15Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>home-assistant/iOS</title>
    <updated>2025-01-12T01:47:15Z</updated>
    <id>tag:github.com,2025-01-12:/home-assistant/iOS</id>
    <link href="https://github.com/home-assistant/iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üì± Home Assistant for Apple platforms&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Home Assistant for Apple Platforms&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.home-assistant.io/ios/beta/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TestFlight-Beta-blue.svg?sanitize=true&#34; alt=&#34;TestFlight Beta invite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://itunes.apple.com/app/home-assistant-open-source-home-automation/id1099568401&#34;&gt;&lt;img src=&#34;https://img.shields.io/itunes/v/1099568401.svg?sanitize=true&#34; alt=&#34;Download on the App Store&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/home-assistant/iOS/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/home-assistant/iOS.svg?style=flat&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/home-assistant/iOS/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-green.svg?style=flat&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Home Assistant uses Bundler, Homebrew and Cocoapods to manage build dependencies. You&#39;ll need Xcode 15.3 (or later) which you can download from the &lt;a href=&#34;https://developer.apple.com/download/&#34;&gt;App Store&lt;/a&gt;. You can get the app running using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/home-assistant/iOS.git&#xA;cd iOS&#xA;&#xA;# you must do one of the following, but you do not need to do all of them:&#xA;&#xA;## install cocoapods via homebrew, use that&#xA;brew install cocoapods&#xA;$(brew --prefix)/opt/ruby/bin/gem install cocoapods-acknowledgements&#xA;pod install --repo-update&#xA;&#xA;## install ruby via homebrew, use that&#xA;brew install ruby@3.1&#xA;$(brew --prefix)/opt/ruby@3.1/bin/bundle install&#xA;$(brew --prefix)/opt/ruby@3.1/bin/bundle exec pod install --repo-update&#xA;&#xA;## install ruby via rbenv, use that&#xA;brew install rbenv ruby-build&#xA;rbenv install&#xA;bundle install&#xA;bundle exec pod install --repo-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once this completes, you can launch &lt;code&gt;HomeAssistant.xcworkspace&lt;/code&gt; and run the &lt;code&gt;App-Debug&lt;/code&gt; scheme onto your simulator or iOS device.&lt;/p&gt; &#xA;&lt;h2&gt;Testing just the frontend&lt;/h2&gt; &#xA;&lt;p&gt;To just test the &lt;a href=&#34;https://github.com/home-assistant/frontend&#34;&gt;frontend&lt;/a&gt;, you can use a simulator version built by our GitHub actions.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Xcode from the &lt;a href=&#34;https://developer.apple.com/download/&#34;&gt;App Store&lt;/a&gt; making sure it&#39;s at least the version noted above. You do not need to install or run anything else.&lt;/li&gt; &#xA; &lt;li&gt;Launch the simulator at &lt;code&gt;/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app&lt;/code&gt; or in Xcode under the Xcode menu &amp;gt; Open Developer Tool.&lt;/li&gt; &#xA; &lt;li&gt;Open a simulator under File &amp;gt; Open Simulator. You can install older versions of iOS in Xcode&#39;s Components preferences.&lt;/li&gt; &#xA; &lt;li&gt;Download a simulator build from the &lt;a href=&#34;https://github.com/home-assistant/iOS/actions/workflows/ci.yml?query=branch%3Amaster&#34;&gt;the GitHub action&lt;/a&gt; under &#34;Artifacts.&#34;&lt;/li&gt; &#xA; &lt;li&gt;Drag the result &lt;code&gt;.app&lt;/code&gt; on drop it on top of the simulator.&lt;/li&gt; &#xA; &lt;li&gt;Locate the app on the home screen and click it to launch.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The simulator behaves different than you might expect:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th&gt;Effect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click&lt;/td&gt; &#xA;   &lt;td&gt;Tap&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click &amp;amp; drag&lt;/td&gt; &#xA;   &lt;td&gt;Scroll&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hold ‚å•&lt;/td&gt; &#xA;   &lt;td&gt;Add a second touch point&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hold ‚áß‚å•&lt;/td&gt; &#xA;   &lt;td&gt;Move both touch points&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚åò‚Üê, ‚åò‚Üí&lt;/td&gt; &#xA;   &lt;td&gt;Rotate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚åòS&lt;/td&gt; &#xA;   &lt;td&gt;Take screenshot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚åòR&lt;/td&gt; &#xA;   &lt;td&gt;Record video&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚åòK&lt;/td&gt; &#xA;   &lt;td&gt;Toggle software keyboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can now debug the WebView in this simulator build using Safari&#39;s Web Inspector:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure &#34;Show Develop menu in menu bar&#34; is enabled in Safari&#39;s Advanced preferences.&lt;/li&gt; &#xA; &lt;li&gt;Under the Develop menu, expand the &#34;Simulator&#34; menu for the simulator you&#39;ve opened.&lt;/li&gt; &#xA; &lt;li&gt;Choose the WebView you want to inspect. A new window will open.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Code Signing&lt;/h2&gt; &#xA;&lt;p&gt;Although the app is set up to use Automatic provisioning for Debug builds, you&#39;ll need to customize a few of the options. This is because the app makes heavy use of entitlements that require code signing, even for simulator builds.&lt;/p&gt; &#xA;&lt;p&gt;Edit the file &lt;code&gt;Configuration/HomeAssistant.overrides.xcconfig&lt;/code&gt; (which will not exist by default and is ignored by git) and add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DEVELOPMENT_TEAM = YourTeamID&#xA;BUNDLE_ID_PREFIX = some.bundle.prefix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Xcode should generate provisioning profiles in your Team ID and our configuration will disable features your team doesn&#39;t have like Critical Alerts. You can find your Team ID on Apple&#39;s &lt;a href=&#34;https://developer.apple.com/account&#34;&gt;developer portal&lt;/a&gt;; it looks something like &lt;code&gt;ABCDEFG123&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code style&lt;/h2&gt; &#xA;&lt;p&gt;Linters run as part of Pull Request checks. Additionally, some linting requirements can be autocorrected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# checks for linting problems, doesn&#39;t fix&#xA;bundle exec fastlane lint&#xA;# checks for linting problems and fixes them&#xA;bundle exec fastlane autocorrect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the Xcode project, the autocorrectable linters will not modify your source code but will provide warnings. This project uses several linters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;SwiftFormat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/realm/swiftlint&#34;&gt;SwiftLint&lt;/a&gt; (for things SwiftFormat doesn&#39;t automate)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rubocop.org&#34;&gt;Rubocop&lt;/a&gt; (largely for Fastlane)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yamllint.readthedocs.io/en/stable/index.html&#34;&gt;YamlLint&lt;/a&gt; (largely for GitHub Actions)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/home-assistant/iOS/actions&#34;&gt;Github Actions&lt;/a&gt; alongside &lt;a href=&#34;https://fastlane.tools/&#34;&gt;Fastlane&lt;/a&gt; to perform continuous integration both by unit testing and deploying to &lt;a href=&#34;https://appstoreconnect.apple.com&#34;&gt;App Store Connect&lt;/a&gt;. Mac Developer ID builds are available as an artifact on every build of master.&lt;/p&gt; &#xA;&lt;h3&gt;Environment variables&lt;/h3&gt; &#xA;&lt;p&gt;Fastlane scripts read from the environment or &lt;code&gt;.env&lt;/code&gt; file for configuration like team IDs. See &lt;a href=&#34;https://github.com/home-assistant/iOS/raw/master/.env.sample&#34;&gt;&lt;code&gt;.env.sample&lt;/code&gt;&lt;/a&gt; for available values.&lt;/p&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;Although all the deployment is done through Github Actions, you can do it manually through &lt;a href=&#34;https://github.com/home-assistant/iOS/raw/master/fastlane/README.md&#34;&gt;Fastlane&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;Deployment to App Store Connect&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# creates the builds and uploads to the app store&#xA;# each save their artifacts to build/&#xA;bundle exec fastlane mac build&#xA;bundle exec fastlane ios build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/home-assistant/iOS/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Apache-2.0&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The format and some content of this README.md comes from the &lt;a href=&#34;https://github.com/ivanbruel/SwipeIt&#34;&gt;SwipeIt&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openhomefoundation.org/&#34;&gt;&lt;img src=&#34;https://www.openhomefoundation.org/badges/home-assistant.png&#34; alt=&#34;Home Assistant - A project from the Open Home Foundation&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>khanhduytran0/SparseBox</title>
    <updated>2025-01-12T01:47:15Z</updated>
    <id>tag:github.com,2025-01-12:/khanhduytran0/SparseBox</id>
    <link href="https://github.com/khanhduytran0/SparseBox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;On-device toolbox?&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SparseBox&lt;/h1&gt; &#xA;&lt;p&gt;On-device backup restoration?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; rewrote SparseRestore to swift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;SideStore is recommended as you will also be getting the pairing file and setting up VPN.&lt;/p&gt; &#xA;&lt;p&gt;Download ipa from Actions tab or &lt;a href=&#34;https://nightly.link/khanhduytran0/SparseBox/workflows/build/main/artifact.zip&#34;&gt;nightly.link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before opening SparseBox, you have to close SideStore from app switcher. This is because only one app can use VPN proxy at a time. Maybe changing port could solve this issue.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks to&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@SideStore: em_proxy and minimuxer&lt;/li&gt; &#xA; &lt;li&gt;@JJTech0130: SparseRestore and backup exploit&lt;/li&gt; &#xA; &lt;li&gt;@PoomSmart: MobileGestalt dump&lt;/li&gt; &#xA; &lt;li&gt;@Lakr233: BBackupp&lt;/li&gt; &#xA; &lt;li&gt;@libimobiledevice&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/f1shy-dev/23b4a78dc283edd30ae2b2e6429129b5#file-best_sae_trick-md&#34;&gt;the sneakyf1shy apple intelligence tutorial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>