<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:52:07Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pointfreeco/swift-composable-architecture</title>
    <updated>2022-09-18T01:52:07Z</updated>
    <id>tag:github.com,2022-09-18:/pointfreeco/swift-composable-architecture</id>
    <link href="https://github.com/pointfreeco/swift-composable-architecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Composable Architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/pointfreeco/swift-composable-architecture/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-composable-architecture&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Composable Architecture (TCA, for short) is a library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind. It can be used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#what-is-the-composable-architecture&#34;&gt;What is the Composable Architecture?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#learn-more&#34;&gt;Learn more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#basic-usage&#34;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#supplementary-libraries&#34;&gt;Supplemental libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#help&#34;&gt;Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#credits-and-thanks&#34;&gt;Credits and thanks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/#other-libraries&#34;&gt;Other libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is the Composable Architecture?&lt;/h2&gt; &#xA;&lt;p&gt;This library provides a few core tools that can be used to build applications of varying purpose and complexity. It provides compelling stories that you can follow to solve many problems you encounter day-to-day when building applications, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;State management&lt;/strong&gt; &lt;br&gt; How to manage the state of your application using simple value types, and share state across many screens so that mutations in one screen can be immediately observed in another screen.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Composition&lt;/strong&gt; &lt;br&gt; How to break down large features into smaller components that can be extracted to their own, isolated modules and be easily glued back together to form the feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Side effects&lt;/strong&gt; &lt;br&gt; How to let certain parts of the application talk to the outside world in the most testable and understandable way possible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt; &lt;br&gt; How to not only test a feature built in the architecture, but also write integration tests for features that have been composed of many parts, and write end-to-end tests to understand how side effects influence your application. This allows you to make strong guarantees that your business logic is running in the way you expect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ergonomics&lt;/strong&gt; &lt;br&gt; How to accomplish all of the above in a simple API with as few concepts and moving parts as possible.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;The Composable Architecture was designed over the course of many episodes on &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt;, a video series exploring functional programming and the Swift language, hosted by &lt;a href=&#34;https://twitter.com/mbrandonw&#34;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can watch all of the episodes &lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture&#34;&gt;here&lt;/a&gt;, as well as a dedicated, multipart tour of the architecture from scratch: &lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture/a-tour-of-the-composable-architecture/ep100-a-tour-of-the-composable-architecture-part-1&#34;&gt;part 1&lt;/a&gt;, &lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture/a-tour-of-the-composable-architecture/ep101-a-tour-of-the-composable-architecture-part-2&#34;&gt;part 2&lt;/a&gt;, &lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture/a-tour-of-the-composable-architecture/ep102-a-tour-of-the-composable-architecture-part-3&#34;&gt;part 3&lt;/a&gt; and &lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture/a-tour-of-the-composable-architecture/ep103-a-tour-of-the-composable-architecture-part-4&#34;&gt;part 4&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.pointfree.co/collections/composable-architecture&#34;&gt; &lt;img alt=&#34;video poster image&#34; src=&#34;https://d3rccdn33rt8ze.cloudfront.net/episodes/0069.jpeg&#34; width=&#34;600&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&#34;&gt;&lt;img src=&#34;https://d3rccdn33rt8ze.cloudfront.net/composable-architecture/demos.png&#34; alt=&#34;Screen shots of example applications&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo comes with &lt;em&gt;lots&lt;/em&gt; of examples to demonstrate how to solve common and complex problems with the Composable Architecture. Check out &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&#34;&gt;this&lt;/a&gt; directory to see them all, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/CaseStudies&#34;&gt;Case Studies&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Getting started&lt;/li&gt; &#xA;   &lt;li&gt;Effects&lt;/li&gt; &#xA;   &lt;li&gt;Navigation&lt;/li&gt; &#xA;   &lt;li&gt;Higher-order reducers&lt;/li&gt; &#xA;   &lt;li&gt;Reusable components&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pointfreeco/composable-core-location/tree/main/Examples/LocationManager&#34;&gt;Location manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pointfreeco/composable-core-motion/tree/main/Examples/MotionManager&#34;&gt;Motion manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Search&#34;&gt;Search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/SpeechRecognition&#34;&gt;Speech Recognition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&#34;&gt;Tic-Tac-Toe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/Todos&#34;&gt;Todos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/VoiceMemos&#34;&gt;Voice memos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Looking for something more substantial? Check out the source code for &lt;a href=&#34;https://github.com/pointfreeco/isowords&#34;&gt;isowords&lt;/a&gt;, an iOS word search game built in SwiftUI and the Composable Architecture.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;To build a feature using the Composable Architecture you define some types and values that model your domain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: A type that describes the data your feature needs to perform its logic and render its UI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: A type that represents all of the actions that can happen in your feature, such as user actions, notifications, event sources, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment&lt;/strong&gt;: A type that holds any dependencies the feature needs, such as API clients, analytics clients, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reducer&lt;/strong&gt;: A function that describes how to evolve the current state of the app to the next state given an action. The reducer is also responsible for returning any effects that should be run, such as API requests, which can be done by returning an &lt;code&gt;Effect&lt;/code&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: The runtime that actually drives your feature. You send all user actions to the store so that the store can run the reducer and effects, and you can observe state changes in the store so that you can update UI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The benefits of doing this are that you will instantly unlock testability of your feature, and you will be able to break large, complex features into smaller domains that can be glued together.&lt;/p&gt; &#xA;&lt;p&gt;As a basic example, consider a UI that shows a number along with &#34;+&#34; and &#34;−&#34; buttons that increment and decrement the number. To make things interesting, suppose there is also a button that when tapped makes an API request to fetch a random fact about that number and then displays the fact in an alert.&lt;/p&gt; &#xA;&lt;p&gt;The state of this feature would consist of an integer for the current count, as well as an optional string that represents the title of the alert we want to show (optional because &lt;code&gt;nil&lt;/code&gt; represents not showing an alert):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AppState: Equatable {&#xA;  var count = 0&#xA;  var numberFactAlert: String?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we have the actions in the feature. There are the obvious actions, such as tapping the decrement button, increment button, or fact button. But there are also some slightly non-obvious ones, such as the action of the user dismissing the alert, and the action that occurs when we receive a response from the fact API request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum AppAction: Equatable {&#xA;  case factAlertDismissed&#xA;  case decrementButtonTapped&#xA;  case incrementButtonTapped&#xA;  case numberFactButtonTapped&#xA;  case numberFactResponse(TaskResult&amp;lt;String&amp;gt;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we model the environment of dependencies this feature needs to do its job. In particular, to fetch a number fact we can model an async throwing function from &lt;code&gt;Int&lt;/code&gt; to &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AppEnvironment {&#xA;  var numberFact: (Int) async throws -&amp;gt; String&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we implement a reducer that implements the logic for this domain. It describes how to change the current state to the next state, and describes what effects need to be executed. Some actions don&#39;t need to execute effects, and they can return &lt;code&gt;.none&lt;/code&gt; to represent that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let appReducer = Reducer&amp;lt;AppState, AppAction, AppEnvironment&amp;gt; { state, action, environment in&#xA;  switch action {&#xA;  case .factAlertDismissed:&#xA;    state.numberFactAlert = nil&#xA;    return .none&#xA;&#xA;  case .decrementButtonTapped:&#xA;    state.count -= 1&#xA;    return .none&#xA;&#xA;  case .incrementButtonTapped:&#xA;    state.count += 1&#xA;    return .none&#xA;&#xA;  case .numberFactButtonTapped:&#xA;    return .task {&#xA;      await .numberFactResponse(TaskResult { try await environment.numberFact(state.count) })&#xA;    }&#xA;&#xA;  case let .numberFactResponse(.success(fact)):&#xA;    state.numberFactAlert = fact&#xA;    return .none&#xA;&#xA;  case .numberFactResponse(.failure):&#xA;    state.numberFactAlert = &#34;Could not load a number fact :(&#34;&#xA;    return .none&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then finally we define the view that displays the feature. It holds onto a &lt;code&gt;Store&amp;lt;AppState, AppAction&amp;gt;&lt;/code&gt; so that it can observe all changes to the state and re-render, and we can send all user actions to the store so that state changes. We must also introduce a struct wrapper around the fact alert to make it &lt;code&gt;Identifiable&lt;/code&gt;, which the &lt;code&gt;.alert&lt;/code&gt; view modifier requires:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AppView: View {&#xA;  let store: Store&amp;lt;AppState, AppAction&amp;gt;&#xA;&#xA;  var body: some View {&#xA;    WithViewStore(self.store, observe: { $0 }) { viewStore in&#xA;      VStack {&#xA;        HStack {&#xA;          Button(&#34;−&#34;) { viewStore.send(.decrementButtonTapped) }&#xA;          Text(&#34;\(viewStore.count)&#34;)&#xA;          Button(&#34;+&#34;) { viewStore.send(.incrementButtonTapped) }&#xA;        }&#xA;&#xA;        Button(&#34;Number fact&#34;) { viewStore.send(.numberFactButtonTapped) }&#xA;      }&#xA;      .alert(&#xA;        item: viewStore.binding(&#xA;          get: { $0.numberFactAlert.map(FactAlert.init(title:)) },&#xA;          send: .factAlertDismissed&#xA;        ),&#xA;        content: { Alert(title: Text($0.title)) }&#xA;      )&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;struct FactAlert: Identifiable {&#xA;  var title: String&#xA;  var id: String { self.title }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s important to note that we were able to implement this entire feature without having a real, live effect at hand. This is important because it means features can be built in isolation without building their dependencies, which can help compile times.&lt;/p&gt; &#xA;&lt;p&gt;It is also straightforward to have a UIKit controller driven off of this store. You subscribe to the store in &lt;code&gt;viewDidLoad&lt;/code&gt; in order to update the UI and show alerts. The code is a bit longer than the SwiftUI version, so we have collapsed it here:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand!&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class AppViewController: UIViewController {&#xA;  let viewStore: ViewStore&amp;lt;AppState, AppAction&amp;gt;&#xA;  var cancellables: Set&amp;lt;AnyCancellable&amp;gt; = []&#xA;&#xA;  init(store: Store&amp;lt;AppState, AppAction&amp;gt;) {&#xA;    self.viewStore = ViewStore(store)&#xA;    super.init(nibName: nil, bundle: nil)&#xA;  }&#xA;&#xA;  required init?(coder: NSCoder) {&#xA;    fatalError(&#34;init(coder:) has not been implemented&#34;)&#xA;  }&#xA;&#xA;  override func viewDidLoad() {&#xA;    super.viewDidLoad()&#xA;&#xA;    let countLabel = UILabel()&#xA;    let incrementButton = UIButton()&#xA;    let decrementButton = UIButton()&#xA;    let factButton = UIButton()&#xA;&#xA;    // Omitted: Add subviews and set up constraints...&#xA;&#xA;    self.viewStore.publisher&#xA;      .map { &#34;\($0.count)&#34; }&#xA;      .assign(to: \.text, on: countLabel)&#xA;      .store(in: &amp;amp;self.cancellables)&#xA;&#xA;    self.viewStore.publisher.numberFactAlert&#xA;      .sink { [weak self] numberFactAlert in&#xA;        let alertController = UIAlertController(&#xA;          title: numberFactAlert, message: nil, preferredStyle: .alert&#xA;        )&#xA;        alertController.addAction(&#xA;          UIAlertAction(&#xA;            title: &#34;Ok&#34;,&#xA;            style: .default,&#xA;            handler: { _ in self?.viewStore.send(.factAlertDismissed) }&#xA;          )&#xA;        )&#xA;        self?.present(alertController, animated: true, completion: nil)&#xA;      }&#xA;      .store(in: &amp;amp;self.cancellables)&#xA;  }&#xA;&#xA;  @objc private func incrementButtonTapped() {&#xA;    self.viewStore.send(.incrementButtonTapped)&#xA;  }&#xA;  @objc private func decrementButtonTapped() {&#xA;    self.viewStore.send(.decrementButtonTapped)&#xA;  }&#xA;  @objc private func factButtonTapped() {&#xA;    self.viewStore.send(.numberFactButtonTapped)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Once we are ready to display this view, for example in the app&#39;s entry point, we can construct a store. This is the moment where we need to supply the dependencies, including the &lt;code&gt;numberFact&lt;/code&gt; endpoint that actually reaches out into the real world to fetch the fact:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@main&#xA;struct CaseStudiesApp: App {&#xA;  var body: some Scene {&#xA;    AppView(&#xA;      store: Store(&#xA;        initialState: AppState(),&#xA;        reducer: appReducer,&#xA;        environment: AppEnvironment(&#xA;          numberFact: { number in &#xA;            let (data, _) = try await URLSession.shared&#xA;              .data(from: .init(string: &#34;http://numbersapi.com/\(number)&#34;)!)&#xA;            return String(decoding: data, using: UTF8.self)&#xA;          }&#xA;        )&#xA;      )&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that is enough to get something on the screen to play around with. It&#39;s definitely a few more steps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives us a consistent manner to apply state mutations, instead of scattering logic in some observable objects and in various action closures of UI components. It also gives us a concise way of expressing side effects. And we can immediately test this logic, including the effects, without doing much additional work.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;To test, you first create a &lt;code&gt;TestStore&lt;/code&gt; with the same information that you would to create a regular &lt;code&gt;Store&lt;/code&gt;, except this time we can supply test-friendly dependencies. In particular, we can now use a &lt;code&gt;numberFact&lt;/code&gt; implementation that immediately returns a value we control rather than reaching out into the real world:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@MainActor&#xA;func testFeature() async {&#xA;  let store = TestStore(&#xA;    initialState: AppState(),&#xA;    reducer: appReducer,&#xA;    environment: AppEnvironment(&#xA;      numberFact: { &#34;\($0) is a good number Brent&#34; }&#xA;    )&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the test store is created we can use it to make an assertion of an entire user flow of steps. Each step of the way we need to prove that state changed how we expect. Further, if a step causes an effect to be executed, which feeds data back into the store, we must assert that those actions were received properly.&lt;/p&gt; &#xA;&lt;p&gt;The test below has the user increment and decrement the count, then they ask for a number fact, and the response of that effect triggers an alert to be shown, and then dismissing the alert causes the alert to go away.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Test that tapping on the increment/decrement buttons changes the count&#xA;await store.send(.incrementButtonTapped) {&#xA;  $0.count = 1&#xA;}&#xA;await store.send(.decrementButtonTapped) {&#xA;  $0.count = 0&#xA;}&#xA;&#xA;// Test that tapping the fact button causes us to receive a response from the effect. Note&#xA;// that we have to await the receive because the effect is asynchronous and so takes a small&#xA;// amount of time to emit.&#xA;await store.send(.numberFactButtonTapped)&#xA;&#xA;await store.receive(.numberFactResponse(.success(&#34;0 is a good number Brent&#34;))) {&#xA;  $0.numberFactAlert = &#34;0 is a good number Brent&#34;&#xA;}&#xA;&#xA;// And finally dismiss the alert&#xA;await store.send(.factAlertDismissed) {&#xA;  $0.numberFactAlert = nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is the basics of building and testing a feature in the Composable Architecture. There are &lt;em&gt;a lot&lt;/em&gt; more things to be explored, such as composition, modularity, adaptability, and complex effects. The &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples&#34;&gt;Examples&lt;/a&gt; directory has a bunch of projects to explore to see more advanced usages.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;The Composable Architecture comes with a number of tools to aid in debugging.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reducer.debug()&lt;/code&gt; enhances a reducer with debug-printing that describes every action the reducer receives and every mutation it makes to state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;received action:&#xA;  AppAction.todoCheckboxTapped(id: UUID(5834811A-83B4-4E5E-BCD3-8A38F6BDCA90))&#xA;  AppState(&#xA;    todos: [&#xA;      Todo(&#xA;-       isComplete: false,&#xA;+       isComplete: true,&#xA;        description: &#34;Milk&#34;,&#xA;        id: 5834811A-83B4-4E5E-BCD3-8A38F6BDCA90&#xA;      ),&#xA;      … (2 unchanged)&#xA;    ]&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reducer.signpost()&lt;/code&gt; instruments a reducer with signposts so that you can gain insight into how long actions take to execute, and when effects are running.&lt;/p&gt; &lt;img src=&#34;https://s3.amazonaws.com/pointfreeco-production/point-free-pointers/0044-signposts-cover.jpg&#34; width=&#34;600&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supplementary libraries&lt;/h2&gt; &#xA;&lt;p&gt;One of the most important principles of the Composable Architecture is that side effects are never performed directly, but instead are wrapped in the &lt;code&gt;Effect&lt;/code&gt; type, returned from reducers, and then the &lt;code&gt;Store&lt;/code&gt; later performs the effect. This is crucial for simplifying how data flows through an application, and for gaining testability on the full end-to-end cycle of user action to effect execution.&lt;/p&gt; &#xA;&lt;p&gt;However, this also means that many libraries and SDKs you interact with on a daily basis need to be retrofitted to be a little more friendly to the Composable Architecture style. That&#39;s why we&#39;d like to ease the pain of using some of Apple&#39;s most popular frameworks by providing wrapper libraries that expose their functionality in a way that plays nicely with our library. So far we support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pointfreeco/composable-core-location&#34;&gt;&lt;code&gt;ComposableCoreLocation&lt;/code&gt;&lt;/a&gt;: A wrapper around &lt;code&gt;CLLocationManager&lt;/code&gt; that makes it easy to use from a reducer, and easy to write tests for how your logic interacts with &lt;code&gt;CLLocationManager&lt;/code&gt;&#39;s functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pointfreeco/composable-core-motion&#34;&gt;&lt;code&gt;ComposableCoreMotion&lt;/code&gt;&lt;/a&gt;: A wrapper around &lt;code&gt;CMMotionManager&lt;/code&gt; that makes it easy to use from a reducer, and easy to write tests for how your logic interacts with &lt;code&gt;CMMotionManager&lt;/code&gt;&#39;s functionality.&lt;/li&gt; &#xA; &lt;li&gt;More to come soon. Keep an eye out 😉&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are interested in contributing a wrapper library for a framework that we have not yet covered, feel free to open an issue expressing your interest so that we can discuss a path forward.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;How does the Composable Architecture compare to Elm, Redux, and others?&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Expand to see answer&lt;/summary&gt; The Composable Architecture (TCA) is built on a foundation of ideas popularized by the Elm Architecture (TEA) and Redux, but made to feel at home in the Swift language and on Apple&#39;s platforms. &#xA;   &lt;p&gt;In some ways TCA is a little more opinionated than the other libraries. For example, Redux is not prescriptive with how one executes side effects, but TCA requires all side effects to be modeled in the &lt;code&gt;Effect&lt;/code&gt; type and returned from the reducer.&lt;/p&gt; &#xA;   &lt;p&gt;In other ways TCA is a little more lax than the other libraries. For example, Elm controls what kinds of effects can be created via the &lt;code&gt;Cmd&lt;/code&gt; type, but TCA allows an escape hatch to any kind of effect since &lt;code&gt;Effect&lt;/code&gt; conforms to the Combine &lt;code&gt;Publisher&lt;/code&gt; protocol.&lt;/p&gt; &#xA;   &lt;p&gt;And then there are certain things that TCA prioritizes highly that are not points of focus for Redux, Elm, or most other libraries. For example, composition is very important aspect of TCA, which is the process of breaking down large features into smaller units that can be glued together. This is accomplished with the &lt;code&gt;pullback&lt;/code&gt; and &lt;code&gt;combine&lt;/code&gt; operators on reducers, and it aids in handling complex features as well as modularization for a better-isolated code base and improved compile times.&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The Composable Architecture depends on the Combine framework, so it requires minimum deployment targets of iOS 13, macOS 10.15, Mac Catalyst 13, tvOS 13, and watchOS 6. If your application must support older OSes, there are forks for &lt;a href=&#34;https://github.com/trading-point/reactiveswift-composable-architecture&#34;&gt;ReactiveSwift&lt;/a&gt; and &lt;a href=&#34;https://github.com/dannyhertz/rxswift-composable-architecture&#34;&gt;RxSwift&lt;/a&gt; that you can adopt!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can add ComposableArchitecture to an Xcode project by adding it as a package dependency.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, select &lt;strong&gt;Add Packages...&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter &#34;&lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture&#34;&gt;https://github.com/pointfreeco/swift-composable-architecture&lt;/a&gt;&#34; into the package repository URL text field&lt;/li&gt; &#xA; &lt;li&gt;Depending on how your project is structured: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you have a single application target that needs access to the library, then add &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; directly to your application.&lt;/li&gt; &#xA;   &lt;li&gt;If you want to use this library from multiple Xcode targets, or mixing Xcode targets and SPM targets, you must create a shared framework that depends on &lt;strong&gt;ComposableArchitecture&lt;/strong&gt; and then depend on that framework in all of your targets. For an example of this, check out the &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe&#34;&gt;Tic-Tac-Toe&lt;/a&gt; demo application, which splits lots of features into modules and consumes the static library in this fashion using the &lt;strong&gt;tic-tac-toe&lt;/strong&gt; Swift package.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation for releases and &lt;code&gt;main&lt;/code&gt; are available here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture&#34;&gt;&lt;code&gt;main&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.40.0/documentation/composablearchitecture/&#34;&gt;0.40.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Other versions &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.39.0/documentation/composablearchitecture/&#34;&gt;0.39.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.38.0/documentation/composablearchitecture/&#34;&gt;0.38.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.37.0/documentation/composablearchitecture&#34;&gt;0.37.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.36.0/documentation/composablearchitecture&#34;&gt;0.36.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.35.0/documentation/composablearchitecture&#34;&gt;0.35.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.34.0/documentation/composablearchitecture&#34;&gt;0.34.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.33.1/documentation/composablearchitecture&#34;&gt;0.33.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.33.0/documentation/composablearchitecture&#34;&gt;0.33.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.32.0/documentation/composablearchitecture&#34;&gt;0.32.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.31.0/documentation/composablearchitecture&#34;&gt;0.31.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.30.0/documentation/composablearchitecture&#34;&gt;0.30.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.29.0/documentation/composablearchitecture&#34;&gt;0.29.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.28.1/documentation/composablearchitecture&#34;&gt;0.28.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.28.0/documentation/composablearchitecture&#34;&gt;0.28.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.27.1/documentation/composablearchitecture&#34;&gt;0.27.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.27.0/documentation/composablearchitecture&#34;&gt;0.27.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.26.0/documentation/composablearchitecture&#34;&gt;0.26.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.25.1/documentation/composablearchitecture&#34;&gt;0.25.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.25.0/documentation/composablearchitecture&#34;&gt;0.25.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.24.0/documentation/composablearchitecture&#34;&gt;0.24.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.23.0/documentation/composablearchitecture&#34;&gt;0.23.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.22.0/documentation/composablearchitecture&#34;&gt;0.22.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.21.0/documentation/composablearchitecture&#34;&gt;0.21.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.20.0/documentation/composablearchitecture&#34;&gt;0.20.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.19.0/documentation/composablearchitecture&#34;&gt;0.19.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.18.0/documentation/composablearchitecture&#34;&gt;0.18.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.17.0/documentation/composablearchitecture&#34;&gt;0.17.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.16.0/documentation/composablearchitecture&#34;&gt;0.16.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.15.0/documentation/composablearchitecture&#34;&gt;0.15.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.14.0/documentation/composablearchitecture&#34;&gt;0.14.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.13.0/documentation/composablearchitecture&#34;&gt;0.13.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.12.0/documentation/composablearchitecture&#34;&gt;0.12.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.11.0/documentation/composablearchitecture&#34;&gt;0.11.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.10.0/documentation/composablearchitecture&#34;&gt;0.10.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.9.0/documentation/composablearchitecture&#34;&gt;0.9.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.8.0/documentation/composablearchitecture&#34;&gt;0.8.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.7.0/documentation/composablearchitecture&#34;&gt;0.7.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.6.0/documentation/composablearchitecture&#34;&gt;0.6.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.5.0/documentation/composablearchitecture&#34;&gt;0.5.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.4.0/documentation/composablearchitecture&#34;&gt;0.4.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.3.0/documentation/composablearchitecture&#34;&gt;0.3.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.2.0/documentation/composablearchitecture&#34;&gt;0.2.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.5/documentation/composablearchitecture&#34;&gt;0.1.5&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.4/documentation/composablearchitecture&#34;&gt;0.1.4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.3/documentation/composablearchitecture&#34;&gt;0.1.3&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.2/documentation/composablearchitecture&#34;&gt;0.1.2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.1/documentation/composablearchitecture&#34;&gt;0.1.1&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://pointfreeco.github.io/swift-composable-architecture/0.1.0/documentation/composablearchitecture&#34;&gt;0.1.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you want to discuss the Composable Architecture or have a question about how to use it to solve a particular problem, you can start a topic in the &lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture/discussions&#34;&gt;discussions&lt;/a&gt; tab of this repo, or ask around on &lt;a href=&#34;https://forums.swift.org/c/related-projects/swift-composable-architecture&#34;&gt;its Swift forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;The following translations of this README have been contributed by members of the community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/NorhanBoghdadi/1b98d55c02b683ddef7e05c2ebcccd47&#34;&gt;Arabic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/nikitamounier/0e93eb832cf389db12f9a69da030a2dc&#34;&gt;French&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/wendyliga/792ea9ac5cc887f59de70a9e39cc7343&#34;&gt;Indonesian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/Bellaposa/5114e6d4d55fdb1388e8186886d48958&#34;&gt;Italian&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/kalupas226/bdf577e4a7066377ea0a8aaeebcad428&#34;&gt;Japanese&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/pilgwon/ea05e2207ab68bdd1f49dff97b293b17&#34;&gt;Korean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/SevioCorrea/2bbf337cd084a58c89f2f7f370626dc8&#34;&gt;Portuguese&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/sh3l6orrr/10c8f7c634a892a9c37214f3211242ad&#34;&gt;Simplified Chinese&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/pitt500/f5e32fccb575ce112ffea2827c7bf942&#34;&gt;Spanish&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute a translation, please &lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md&#34;&gt;open a PR&lt;/a&gt; with a link to a &lt;a href=&#34;https://gist.github.com&#34;&gt;Gist&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Credits and thanks&lt;/h2&gt; &#xA;&lt;p&gt;The following people gave feedback on the library at its early stages and helped make the library what it is today:&lt;/p&gt; &#xA;&lt;p&gt;Paul Colton, Kaan Dedeoglu, Matt Diephouse, Josef Doležal, Eimantas, Matthew Johnson, George Kaimakas, Nikita Leonov, Christopher Liscio, Jeffrey Macko, Alejandro Martinez, Shai Mishali, Willis Plummer, Simon-Pierre Roy, Justin Price, Sven A. Schmidt, Kyle Sherman, Petr Šíma, Jasdev Singh, Maxim Smirnov, Ryan Stone, Daniel Hollis Tavares, and all of the &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt; subscribers 😁.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://twitter.com/liscio&#34;&gt;Chris Liscio&lt;/a&gt; who helped us work through many strange SwiftUI quirks and helped refine the final API.&lt;/p&gt; &#xA;&lt;p&gt;And thanks to &lt;a href=&#34;https://github.com/freak4pc&#34;&gt;Shai Mishali&lt;/a&gt; and the &lt;a href=&#34;https://github.com/CombineCommunity/CombineExt/&#34;&gt;CombineCommunity&lt;/a&gt; project, from which we took their implementation of &lt;code&gt;Publishers.Create&lt;/code&gt;, which we use in &lt;code&gt;Effect&lt;/code&gt; to help bridge delegate and callback-based APIs, making it much easier to interface with 3rd party frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Other libraries&lt;/h2&gt; &#xA;&lt;p&gt;The Composable Architecture was built on a foundation of ideas started by other libraries, in particular &lt;a href=&#34;https://elm-lang.org&#34;&gt;Elm&lt;/a&gt; and &lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are also many architecture libraries in the Swift and iOS community. Each one of these has their own set of priorities and trade-offs that differ from the Composable Architecture.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/uber/RIBs&#34;&gt;RIBs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ReactiveCocoa/Loop&#34;&gt;Loop&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ReSwift/ReSwift&#34;&gt;ReSwift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/square/workflow&#34;&gt;Workflow&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ReactorKit/ReactorKit&#34;&gt;ReactorKit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/NoTests/RxFeedback.swift&#34;&gt;RxFeedback&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/spotify/mobius.swift&#34;&gt;Mobius.swift&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;And more&lt;/summary&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/FluxorOrg/Fluxor&#34;&gt;Fluxor&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://github.com/RPallas92/PromisedArchitectureKit&#34;&gt;PromisedArchitectureKit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RobotsAndPencils/XcodesApp</title>
    <updated>2022-09-18T01:52:07Z</updated>
    <id>tag:github.com,2022-09-18:/RobotsAndPencils/XcodesApp</id>
    <link href="https://github.com/RobotsAndPencils/XcodesApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The easiest way to install and switch between multiple versions of Xcode - with a mouse click.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/icon.png&#34; align=&#34;center&#34; width=&#34;50&#34; height=&#34;50&#34;&gt; Xcodes.app&lt;/h1&gt; &#xA;&lt;p&gt;The easiest way to install and switch between multiple versions of Xcode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you&#39;re looking for a command-line version of Xcodes.app, try &lt;a href=&#34;https://github.com/RobotsAndPencils/xcodes&#34;&gt;&lt;code&gt;xcodes&lt;/code&gt;&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/RobotsAndPencils/Xcodes.app/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/screenshot_light.png#gh-light-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/screenshot_dark.png#gh-dark-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List all available Xcode versions from &lt;a href=&#34;https://xcodereleases.com&#34;&gt;Xcode Releases&#39;&lt;/a&gt; data or the Apple Developer website.&lt;/li&gt; &#xA; &lt;li&gt;Install any Xcode version, &lt;strong&gt;fully automated&lt;/strong&gt; from start to finish. Xcodes uses &lt;a href=&#34;https://aria2.github.io&#34;&gt;&lt;code&gt;aria2&lt;/code&gt;&lt;/a&gt;, which uses up to 16 connections to download 3-5x faster than URLSession.&lt;/li&gt; &#xA; &lt;li&gt;Automatically resumes installs if network errors.&lt;/li&gt; &#xA; &lt;li&gt;Apple ID required to download Xcode versions.&lt;/li&gt; &#xA; &lt;li&gt;Just click a button to make a version active with &lt;code&gt;xcode-select&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;View release notes, OS compatibility, included SDKs and compilers from &lt;a href=&#34;https://xcodereleases.com&#34;&gt;Xcode Releases&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dark/Light Mode supported&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Experiments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to the wonderful work of &lt;a href=&#34;https://github.com/saagarjha/unxip&#34;&gt;https://github.com/saagarjha/unxip&lt;/a&gt;, turn on the experiment to increase your unxipping time by up to 70%! More can be found on his repo, but bugs, high memory may occur if used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/experiment_light.jpg#gh-light-mode-only&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/experiment_dark.jpg#gh-dark-mode-only&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;Xcodes supports localization in several languages.&lt;/p&gt; &#xA;&lt;p&gt;The following languages are supported because of the following community users!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French 🇫🇷&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dompepin&#34;&gt;@dompepin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Italian 🇮🇹&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gualtierofrigerio&#34;&gt;gualtierofrigerio&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish 🇪🇸🇲&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cesartru88&#34;&gt;@cesartru88&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Korean 🇰🇷&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ryan-son&#34;&gt;@ryan-son&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian 🇷🇺&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alexmazlov&#34;&gt;@alexmazlov&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Turkish 🇹🇷&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/egrimo&#34;&gt;@egrimo&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hindi 🇮🇳&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/KGurpreet&#34;&gt;@KGurpreet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chinese-Simplified 🇨🇳&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/megabitsenmzq&#34;&gt;@megabitsenmzq&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Finnish 🇫🇮&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/marcusziade&#34;&gt;@marcusziade&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chinese-Traditional 🇹🇼&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/itszero&#34;&gt;@itszero&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ukranian 🇺🇦&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gelosi&#34;&gt;@gelosi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Japanese 🇯🇵&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tatsuz0u&#34;&gt;@tatsuz0u&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;German 🇩🇪&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/drct&#34;&gt;@drct&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Want to add more languages? Simply create a PR with the updated strings file.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Xcodes.app runs on macOS Big Sur 11.0 or later.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew Cask&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install --cask xcodes&#xA;&#xA;# These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download a release&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version &lt;a href=&#34;https://github.com/RobotsAndPencils/XcodesApp/releases/latest&#34;&gt;here&lt;/a&gt; using the &lt;strong&gt;Xcodes.zip&lt;/strong&gt; asset. These are Developer ID-signed and notarized release builds and don&#39;t require Xcode to already be installed in order to use.&lt;/li&gt; &#xA; &lt;li&gt;Move the unzipped &lt;code&gt;Xcodes.app&lt;/code&gt; to your &lt;code&gt;/Applications&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need macOS 12 Big Sur and Xcode 13 in order to build and run Xcodes.app.&lt;/p&gt; &#xA;&lt;p&gt;If you aren&#39;t a Robots and Pencils employee you&#39;ll need to change the CODE_SIGNING_SUBJECT_ORGANIZATIONAL_UNIT build setting to your Apple Developer team ID in order for code signing validation to succeed between the main app and the privileged helper.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Unxip&lt;/code&gt; and &lt;code&gt;aria2&lt;/code&gt; must be compiled as a universal binary&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# compile for Intel&#xA; swiftc -parse-as-library -O -target x86_64-apple-macos11 unxip.swift&#xA;# compile for M1&#xA; swiftc -parse-as-library -O -target arm64-apple-macos11 unxip.swift&#xA;&#xA;# combine for universal binary&#xA; lipo -create -output unxip unxip_intel unxip_m1  &#xA;# check it&#xA; lipo -archs unxip &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notable design decisions are recorded in &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/DECISIONS.md&#34;&gt;DECISIONS.md&lt;/a&gt;. The Apple authentication flow is described in &lt;a href=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/Apple.paw&#34;&gt;Apple.paw&lt;/a&gt;, which will allow you to play with the API endpoints that are involved using the &lt;a href=&#34;https://paw.cloud&#34;&gt;Paw&lt;/a&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xcpretty/xcode-install&#34;&gt;&lt;code&gt;xcode-install&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/fastlane/fastlane/tree/master/spaceship&#34;&gt;fastlane/spaceship&lt;/a&gt; both deserve credit for figuring out the hard parts of what makes this possible.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Releasing a new version&lt;/summary&gt; &#xA; &lt;p&gt;Follow the steps below to build and release a new version of Xcodes.app. For any of the git steps, you can use your preferred tool, but please sign the tag.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Update the version number in Xcode and commit the change, if necessary&#xA;&#xA;# Question: Did anything in XPCHelper change?&#xA;# - com.robotsandpencils.XcodesApp.Helper folder and HelperXPCShared&#xA;# - if so, bump the version number in com.robotsandpencils.XcodesApp.Helper target.&#xA;# Note: you do not have to bump the version number if nothing has changed.&#xA;# Note2: If you do bump the version, the end user, must re-install the XPCHelper and give permission again.&#xA;&#xA;# Increment the build number&#xA;scripts/increment_build_number.sh&#xA;&#xA;# Commit the change&#xA;git add Xcodes/Resources/Info.plist&#xA;git commit -asm &#34;Increment build number&#34;&#xA;&#xA;# Tag the latest commit&#xA;# Replace $VERSION and $BUILD below with the latest real values&#xA;git tag -asm &#34;v$VERSIONb$BUILD&#34; &#34;v$VERSIONb$BUILD&#34;&#xA;&#xA;# Push to origin&#xA;git push --follow-tags&#xA;&#xA;# Build the app&#xA;# Make sure you have the Xcode Selected you want to build with&#xA;scripts/package_release.sh&#xA;&#xA;# Notarize the app&#xA;# Do this from the Product directory so the app is zipped without being nested inside Product&#xA;# Create a app specific password on appleid.apple.com if you haven&#39;t already&#xA;# xcrun notarytool store-credentials &#34;AC_PASSWORD&#34; \&#xA;#              --apple-id &#34;test@example.com&#34; \&#xA;#              --team-id &#34;teamid&#34; \&#xA;#               --password &#34;app specific password&#34;&#xA;&#xA;pushd Product&#xA;../scripts/notarize.sh Xcodes.zip &amp;lt;MYORG&amp;gt;&#xA;&#xA;# Sign the .zip for Sparkle, note the signature in the output for later&#xA;# If you&#39;re warned about the signing key not being found, see the Xcodes 1Password vault for the key and installation instructions.&#xA;../scripts/sign_update Xcodes.zip&#xA;popd&#xA;&#xA;# Go to https://github.com/RobotsAndPencils/XcodesApp/releases&#xA;# If there are uncategorized PRs, add the appropriate label and run the Release Drafter action manually&#xA;# Edit the latest draft release&#xA;# Set its tag to the tag you just pushed&#xA;# Set its title to a string with the format &#34;$VERSION ($BUILD)&#34;&#xA;# Polish the draft release notes, if necessary&#xA;# Add the signature to the bottom of the release notes in a comment, like:&#xA;&amp;lt;!-- sparkle:edSignature=$SIGNATURE --&amp;gt;&#xA;# Attach the zip that was created in the Product directory to the release&#xA;# Publish the release&#xA;&#xA;# Update the [Homebrew Cask](https://github.com/RobotsAndPencils/homebrew-cask/blob/master/Casks/xcodes.rb).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mattkiazyk&#34;&gt;Matt Kiazyk&lt;/a&gt; - &lt;a href=&#34;https://www.twitter.com/mattkiazyk&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.robotsandpencils.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RobotsAndPencils/XcodesApp/main/R&amp;amp;PLogo.png&#34; width=&#34;153&#34; height=&#34;74&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Made with ❤️ by &lt;a href=&#34;http://www.robotsandpencils.com&#34;&gt;Robots &amp;amp; Pencils&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/xcodesApp&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://github.com/robotsandpencils&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>utmapp/UTM</title>
    <updated>2022-09-18T01:52:07Z</updated>
    <id>tag:github.com,2022-09-18:/utmapp/UTM</id>
    <link href="https://github.com/utmapp/UTM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Virtual machines for iOS and macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UTM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/utmapp/UTM/actions?query=event%3Arelease+workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/utmapp/UTM/workflows/Build/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is possible to invent a single machine which can be used to compute any computable sequence.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;-- &lt;cite&gt;Alan Turing, 1936&lt;/cite&gt;&lt;/p&gt; &#xA;&lt;p&gt;UTM is a full featured system emulator and virtual machine host for iOS and macOS. It is based off of QEMU. In short, it allows you to run Windows, Linux, and more on your Mac, iPhone, and iPad. More information at &lt;a href=&#34;https://getutm.app/&#34;&gt;https://getutm.app/&lt;/a&gt; and &lt;a href=&#34;https://mac.getutm.app/&#34;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;450px&#34; alt=&#34;UTM running on an iPhone&#34; src=&#34;https://raw.githubusercontent.com/utmapp/UTM/main/screen.png&#34;&gt; &lt;br&gt; &lt;img width=&#34;450px&#34; alt=&#34;UTM running on a MacBook&#34; src=&#34;https://raw.githubusercontent.com/utmapp/UTM/main/screenmac.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full system emulation (MMU, devices, etc) using QEMU&lt;/li&gt; &#xA; &lt;li&gt;30+ processors supported including x86_64, ARM64, and RISC-V&lt;/li&gt; &#xA; &lt;li&gt;VGA graphics mode using SPICE and QXL&lt;/li&gt; &#xA; &lt;li&gt;Text terminal mode&lt;/li&gt; &#xA; &lt;li&gt;USB devices&lt;/li&gt; &#xA; &lt;li&gt;JIT based acceleration using QEMU TCG&lt;/li&gt; &#xA; &lt;li&gt;Frontend designed from scratch for macOS 11 and iOS 11+ using the latest and greatest APIs&lt;/li&gt; &#xA; &lt;li&gt;Create, manage, run VMs directly from your device&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional macOS Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hardware accelerated virtualization using Hypervisor.framework and QEMU&lt;/li&gt; &#xA; &lt;li&gt;Boot macOS guests with Virtualization.framework on macOS 12+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;UTM SE&lt;/h2&gt; &#xA;&lt;p&gt;UTM/QEMU requires dynamic code generation (JIT) for maximum performance. JIT on iOS devices require either a jailbroken device, or one of the various workarounds found for specific versions of iOS (see &#34;Install&#34; for more details).&lt;/p&gt; &#xA;&lt;p&gt;UTM SE (&#34;slow edition&#34;) uses a &lt;a href=&#34;https://github.com/ktemkin/qemu/raw/with_tcti/tcg/aarch64-tcti/README.md&#34;&gt;threaded interpreter&lt;/a&gt; which performs better than a traditional interpreter but still slower than JIT. This technique is similar to what &lt;a href=&#34;https://github.com/ish-app/ish&#34;&gt;iSH&lt;/a&gt; does for dynamic execution. As a result, UTM SE does not require jailbreaking or any JIT workarounds and can be sideloaded as a regular app.&lt;/p&gt; &#xA;&lt;p&gt;To optimize for size and build times, only the following architectures are included in UTM SE: ARM, PPC, RISC-V, and x86 (all with both 32-bit and 64-bit variants).&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;UTM (SE) for iOS: &lt;a href=&#34;https://getutm.app/install/&#34;&gt;https://getutm.app/install/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;UTM is also available for macOS: &lt;a href=&#34;https://mac.getutm.app/&#34;&gt;https://mac.getutm.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/utmapp/UTM/main/Documentation/MacDevelopment.md&#34;&gt;macOS Development&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/utmapp/UTM/main/Documentation/iOSDevelopment.md&#34;&gt;iOS Development&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ish-app/ish&#34;&gt;iSH&lt;/a&gt;: emulates a usermode Linux terminal interface for running x86 Linux applications on iOS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/holzschu/a-shell&#34;&gt;a-shell&lt;/a&gt;: packages common Unix commands and utilities built natively for iOS and accessible through a terminal interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;UTM is distributed under the permissive Apache 2.0 license. However, it uses several (L)GPL components. Most are dynamically linked but the gstreamer plugins are statically linked and parts of the code are taken from qemu. Please be aware of this if you intend on redistributing this application.&lt;/p&gt; &#xA;&lt;p&gt;Some icons made by &lt;a href=&#34;https://www.freepik.com&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com/&#34;&gt;www.flaticon.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, UTM frontend depends on the following MIT License components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hackiftekhar/IQKeyboardManager&#34;&gt;IQKeyboardManager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/migueldeicaza/SwiftTerm&#34;&gt;SwiftTerm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/weichsel/ZIPFoundation&#34;&gt;ZIP Foundation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Continuous integration hosting is provided by &lt;a href=&#34;https://www.macstadium.com/opensource&#34;&gt;MacStadium&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.macstadium.com&#34;&gt;&lt;img src=&#34;https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png&#34; alt=&#34;MacStadium logo&#34; width=&#34;250&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>