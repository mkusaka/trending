<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-02T01:47:44Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pointfreeco/swift-snapshot-testing</title>
    <updated>2022-10-02T01:47:44Z</updated>
    <id>tag:github.com,2022-10-02:/pointfreeco/swift-snapshot-testing</id>
    <link href="https://github.com/pointfreeco/swift-snapshot-testing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üì∏ Delightful Swift snapshot testing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üì∏ SnapshotTesting&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://actions-badge.atrox.dev/pointfreeco/swift-snapshot-testing/goto&#34;&gt;&lt;img src=&#34;https://github.com/pointfreeco/swift-snapshot-testing/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-snapshot-testing&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-snapshot-testing%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/pointfreeco/swift-snapshot-testing&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-snapshot-testing%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Delightful Swift snapshot testing.&lt;/p&gt; &#xA;&lt;!--&#xA;![An example of a snapshot failure in Xcode.](.github/snapshot-test-1.png)&#xA;--&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/#installation&#34;&gt;installed&lt;/a&gt;, &lt;em&gt;no additional configuration is required&lt;/em&gt;. You can import the &lt;code&gt;SnapshotTesting&lt;/code&gt; module and call the &lt;code&gt;assertSnapshot&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import SnapshotTesting&#xA;import XCTest&#xA;&#xA;class MyViewControllerTests: XCTestCase {&#xA;  func testMyViewController() {&#xA;    let vc = MyViewController()&#xA;&#xA;    assertSnapshot(matching: vc, as: .image)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When an assertion first runs, a snapshot is automatically recorded to disk and the test will fail, printing out the file path of any newly-recorded reference.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üõë failed - No reference was found on disk. Automatically recorded snapshot: ‚Ä¶&lt;/p&gt; &#xA; &lt;p&gt;open &#34;‚Ä¶/MyAppTests/__Snapshots__/MyViewControllerTests/testMyViewController.png&#34;&lt;/p&gt; &#xA; &lt;p&gt;Re-run &#34;testMyViewController&#34; to test against the newly-recorded snapshot.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Repeat test runs will load this reference and compare it with the runtime value. If they don&#39;t match, the test will fail and describe the difference. Failures can be inspected from Xcode&#39;s Report Navigator or by inspecting the file URLs of the failure.&lt;/p&gt; &#xA;&lt;p&gt;You can record a new reference by setting the &lt;code&gt;record&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; on the assertion or setting &lt;code&gt;isRecording&lt;/code&gt; globally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: vc, as: .image, record: true)&#xA;&#xA;// or globally&#xA;&#xA;isRecording = true&#xA;assertSnapshot(matching: vc, as: .image)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Snapshot Anything&lt;/h2&gt; &#xA;&lt;p&gt;While most snapshot testing libraries in the Swift community are limited to &lt;code&gt;UIImage&lt;/code&gt;s of &lt;code&gt;UIView&lt;/code&gt;s, SnapshotTesting can work with &lt;em&gt;any&lt;/em&gt; format of &lt;em&gt;any&lt;/em&gt; value on &lt;em&gt;any&lt;/em&gt; Swift platform!&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;assertSnapshot&lt;/code&gt; function accepts a value and any snapshot strategy that value supports. This means that a &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#uiview&#34;&gt;view&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#uiviewcontroller&#34;&gt;view controller&lt;/a&gt; can be tested against an image representation &lt;em&gt;and&lt;/em&gt; against a textual representation of its properties and subview hierarchy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: vc, as: .image)&#xA;assertSnapshot(matching: vc, as: .recursiveDescription)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View testing is &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#uiviewcontroller&#34;&gt;highly configurable&lt;/a&gt;. You can override trait collections (for specific size classes and content size categories) and generate device-agnostic snapshots, all from a single simulator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: vc, as: .image(on: .iPhoneSe))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPhoneSe))&#xA;&#xA;assertSnapshot(matching: vc, as: .image(on: .iPhoneSe(.landscape)))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPhoneSe(.landscape)))&#xA;&#xA;assertSnapshot(matching: vc, as: .image(on: .iPhoneX))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPhoneX))&#xA;&#xA;assertSnapshot(matching: vc, as: .image(on: .iPadMini(.portrait)))&#xA;assertSnapshot(matching: vc, as: .recursiveDescription(on: .iPadMini(.portrait)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è Warning: Snapshots must be compared using the exact same simulator that originally took the reference to avoid discrepancies between images.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Better yet, SnapshotTesting isn&#39;t limited to views and view controllers! There are &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md&#34;&gt;a number of available snapshot strategies&lt;/a&gt; to choose from.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can snapshot test URL requests (&lt;em&gt;e.g.&lt;/em&gt;, those that your API client prepares).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: urlRequest, as: .raw)&#xA;// POST http://localhost:8080/account&#xA;// Cookie: pf_session={&#34;userId&#34;:&#34;1&#34;}&#xA;//&#xA;// email=blob%40pointfree.co&amp;amp;name=Blob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can snapshot test &lt;code&gt;Encodable&lt;/code&gt; values against their JSON &lt;em&gt;and&lt;/em&gt; property list representations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: user, as: .json)&#xA;// {&#xA;//   &#34;bio&#34; : &#34;Blobbed around the world.&#34;,&#xA;//   &#34;id&#34; : 1,&#xA;//   &#34;name&#34; : &#34;Blobby&#34;&#xA;// }&#xA;&#xA;assertSnapshot(matching: user, as: .plist)&#xA;// &amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;// &amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;// &amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;// &amp;lt;dict&amp;gt;&#xA;//   &amp;lt;key&amp;gt;bio&amp;lt;/key&amp;gt;&#xA;//   &amp;lt;string&amp;gt;Blobbed around the world.&amp;lt;/string&amp;gt;&#xA;//   &amp;lt;key&amp;gt;id&amp;lt;/key&amp;gt;&#xA;//   &amp;lt;integer&amp;gt;1&amp;lt;/integer&amp;gt;&#xA;//   &amp;lt;key&amp;gt;name&amp;lt;/key&amp;gt;&#xA;//   &amp;lt;string&amp;gt;Blobby&amp;lt;/string&amp;gt;&#xA;// &amp;lt;/dict&amp;gt;&#xA;// &amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In fact, &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#any&#34;&gt;any&lt;/a&gt;&lt;/em&gt; value can be snapshot-tested by default using its &lt;a href=&#34;https://developer.apple.com/documentation/swift/mirror&#34;&gt;mirror&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;assertSnapshot(matching: user, as: .dump)&#xA;// ‚ñø User&#xA;//   - bio: &#34;Blobbed around the world.&#34;&#xA;//   - id: 1&#xA;//   - name: &#34;Blobby&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your data can be represented as an image, text, or data, you can write a snapshot test for it! Check out &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md&#34;&gt;all of the snapshot strategies&lt;/a&gt; that ship with SnapshotTesting and &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Defining-Custom-Snapshot-Strategies.md&#34;&gt;learn how to define your own custom strategies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Xcode&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è Warning: By default, Xcode will try to add the SnapshotTesting package to your project&#39;s main application/framework target. Please ensure that SnapshotTesting is added to a &lt;em&gt;test&lt;/em&gt; target instead, as documented in the last step, below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the &lt;strong&gt;File&lt;/strong&gt; menu, navigate through &lt;strong&gt;Swift Packages&lt;/strong&gt; and select &lt;strong&gt;Add Package Dependency‚Ä¶&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enter package repository URL: &lt;code&gt;https://github.com/pointfreeco/swift-snapshot-testing&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Confirm the version and let Xcode resolve the package&lt;/li&gt; &#xA; &lt;li&gt;On the final dialog, update SnapshotTesting&#39;s &lt;strong&gt;Add to Target&lt;/strong&gt; column to a test target that will contain snapshot tests (if you have more than one test target, you can later add SnapshotTesting to them by manually linking the library in its build phase)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use SnapshotTesting in any other project that uses &lt;a href=&#34;https://swift.org/package-manager/&#34;&gt;SwiftPM&lt;/a&gt;, add the package as a dependency in &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  .package(&#xA;    url: &#34;https://github.com/pointfreeco/swift-snapshot-testing&#34;,&#xA;    from: &#34;1.10.0&#34;&#xA;  ),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add &lt;code&gt;SnapshotTesting&lt;/code&gt; as a dependency of your test target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;targets: [&#xA;  .target(name: &#34;MyApp&#34;),&#xA;  .testTarget(&#xA;    name: &#34;MyAppTests&#34;,&#xA;    dependencies: [&#xA;      &#34;MyApp&#34;,&#xA;      .product(name: &#34;SnapshotTesting&#34;, package: &#34;swift-snapshot-testing&#34;),&#xA;    ]&#xA;  )&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md&#34;&gt;&lt;strong&gt;Dozens of snapshot strategies&lt;/strong&gt;&lt;/a&gt;. Snapshot testing isn&#39;t just for &lt;code&gt;UIView&lt;/code&gt;s and &lt;code&gt;CALayer&lt;/code&gt;s. Write snapshots against &lt;em&gt;any&lt;/em&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Defining-Custom-Snapshot-Strategies.md&#34;&gt;&lt;strong&gt;Write your own snapshot strategies&lt;/strong&gt;&lt;/a&gt;. If you can convert it to an image, string, data, or your own diffable format, you can snapshot test it! Build your own snapshot strategies from scratch or transform existing ones.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No configuration required.&lt;/strong&gt; Don&#39;t fuss with scheme settings and environment variables. Snapshots are automatically saved alongside your tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;More hands-off.&lt;/strong&gt; New snapshots are recorded whether &lt;code&gt;isRecording&lt;/code&gt; mode is &lt;code&gt;true&lt;/code&gt; or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Subclass-free.&lt;/strong&gt; Assert from any XCTest case or Quick spec.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Device-agnostic snapshots.&lt;/strong&gt; Render views and view controllers for specific devices and trait collections from a single simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;First-class Xcode support.&lt;/strong&gt; Image differences are captured as XCTest attachments. Text differences are rendered in inline error messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supports any platform that supports Swift.&lt;/strong&gt; Write snapshot tests for iOS, Linux, macOS, and tvOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SceneKit, SpriteKit, and WebKit support.&lt;/strong&gt; Most snapshot testing libraries don&#39;t support these view subclasses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Codable&lt;/code&gt; support&lt;/strong&gt;. Snapshot encodable data structures into their &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#json&#34;&gt;JSON&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/Documentation/Available-Snapshot-Strategies.md#plist&#34;&gt;property list&lt;/a&gt; representations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom diff tool integration&lt;/strong&gt;. Configure failure messages to print diff commands for &lt;a href=&#34;https://kaleidoscope.app&#34;&gt;Kaleidoscope&lt;/a&gt; (or your diff tool of choice). &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;SnapshotTesting.diffTool = &#34;ksdiff&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plug-ins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Killectro/swift-snapshot-testing-nimble&#34;&gt;swift-snapshot-testing-nimble&lt;/a&gt; adds &lt;a href=&#34;https://github.com/Quick/Nimble&#34;&gt;Nimble&lt;/a&gt; matchers for SnapshotTesting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/pointfreeco/swift-html&#34;&gt;swift-html&lt;/a&gt; is a Swift DSL for type-safe, extensible, and transformable HTML documents and includes an &lt;code&gt;HtmlSnapshotTesting&lt;/code&gt; module to snapshot test its HTML documents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/SebastianOsinski/GRDBSnapshotTesting&#34;&gt;GRDBSnapshotTesting&lt;/a&gt; adds snapshot strategy for testing SQLite database migrations made with &lt;a href=&#34;https://github.com/groue/GRDB.swift&#34;&gt;GRDB&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cashapp/AccessibilitySnapshot&#34;&gt;AccessibilitySnapshot&lt;/a&gt; adds easy regression testing for iOS accessibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Sherlouk/AccessibilitySnapshotColorBlindness&#34;&gt;AccessibilitySnapshotColorBlindness&lt;/a&gt; adds snapshot strategies for color blindness simulation on iOS views, view controllers and images.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Sherlouk/swift-snapshot-testing-stitch/&#34;&gt;swift-snapshot-testing-stitch&lt;/a&gt; adds the ability to stitch multiple UIView&#39;s or UIViewController&#39;s together in a single test.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/alexey1312/SnapshotTestingHEIC&#34;&gt;SnapshotTestingHEIC&lt;/a&gt; adds image support using the HEIC storage format which reduces file sizes in comparison to PNG.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have you written your own SnapshotTesting plug-in? &lt;a href=&#34;https://github.com/pointfreeco/swift-snapshot-testing/edit/master/README.md&#34;&gt;Add it here&lt;/a&gt; and submit a pull request!&lt;/p&gt; &#xA;&lt;h2&gt;Related Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/uber/ios-snapshot-test-case/&#34;&gt;&lt;code&gt;iOSSnapshotTestCase&lt;/code&gt;&lt;/a&gt; helped introduce screen shot testing to a broad audience in the iOS community. Experience with it inspired the creation of this library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://jestjs.io&#34;&gt;Jest&lt;/a&gt; brought generalized snapshot testing to the JavaScript community with a polished user experience. Several features of this library (diffing, automatically capturing new snapshots) were directly influenced.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;SnapshotTesting was designed with &lt;a href=&#34;https://www.pointfree.co/episodes/ep39-witness-oriented-library-design&#34;&gt;witness-oriented programming&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This concept (and more) are explored thoroughly in a series of episodes on &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt;, a video series exploring functional programming and Swift hosted by &lt;a href=&#34;https://twitter.com/mbrandonw&#34;&gt;Brandon Williams&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/stephencelis&#34;&gt;Stephen Celis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Witness-oriented programming and the design of this library was explored in the following &lt;a href=&#34;https://www.pointfree.co&#34;&gt;Point-Free&lt;/a&gt; episodes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep33-protocol-witnesses-part-1&#34;&gt;Episode 33&lt;/a&gt;: Protocol Witnesses: Part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep34-protocol-witnesses-part-1&#34;&gt;Episode 34&lt;/a&gt;: Protocol Witnesses: Part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep35-advanced-protocol-witnesses-part-1&#34;&gt;Episode 35&lt;/a&gt;: Advanced Protocol Witnesses: Part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep36-advanced-protocol-witnesses-part-2&#34;&gt;Episode 36&lt;/a&gt;: Advanced Protocol Witnesses: Part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep37-protocol-oriented-library-design-part-1&#34;&gt;Episode 37&lt;/a&gt;: Protocol-Oriented Library Design: Part 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep38-protocol-oriented-library-design-part-2&#34;&gt;Episode 38&lt;/a&gt;: Protocol-Oriented Library Design: Part 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep39-witness-oriented-library-design&#34;&gt;Episode 39&lt;/a&gt;: Witness-Oriented Library Design&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep40-async-functional-refactoring&#34;&gt;Episode 40&lt;/a&gt;: Async Functional Refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing&#34;&gt;Episode 41&lt;/a&gt;: A Tour of Snapshot Testing üÜì&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing&#34;&gt; &lt;img alt=&#34;video poster image&#34; src=&#34;https://d3rccdn33rt8ze.cloudfront.net/episodes/0041.jpeg&#34; width=&#34;480&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is released under the MIT license. See &lt;a href=&#34;https://raw.githubusercontent.com/pointfreeco/swift-snapshot-testing/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>s8ngyu/Mugunghwa</title>
    <updated>2022-10-02T01:47:44Z</updated>
    <id>tag:github.com,2022-10-02:/s8ngyu/Mugunghwa</id>
    <link href="https://github.com/s8ngyu/Mugunghwa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mugunghwa&lt;/h1&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Badge colour changing&lt;/li&gt; &#xA; &lt;li&gt;Home Gesture&lt;/li&gt; &#xA; &lt;li&gt;Passcode theming&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Upcoming:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carrier Changer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and more to come :)&lt;/p&gt; &#xA;&lt;p&gt;Credits: Develop: @soongyu_kwon Icon: @DaanDH13 TSUtil: @opa334dev And for those who sent me analytics.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shadowsocks/ShadowsocksX-NG</title>
    <updated>2022-10-02T01:47:44Z</updated>
    <id>tag:github.com,2022-10-02:/shadowsocks/ShadowsocksX-NG</id>
    <link href="https://github.com/shadowsocks/ShadowsocksX-NG" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Next Generation of ShadowsocksX&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ShadowsocksX-NG&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shadowsocks/ShadowsocksX-NG/releases/latest&#34;&gt;Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shadowsocks/ShadowsocksX-NG/actions&#34;&gt;&lt;img src=&#34;https://github.com/shadowsocks/ShadowsocksX-NG/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next Generation of &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-iOS&#34;&gt;ShadowsocksX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why a new implementation?&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s hard to maintain the original implementation as there is too much unused code in it. It also embeds the &lt;code&gt;ss-local&lt;/code&gt; source code. It&#39;s crazy to maintain dependencies of &lt;code&gt;ss-local&lt;/code&gt;. So it&#39;s hard to update the &lt;code&gt;ss-local&lt;/code&gt; version.&lt;/p&gt; &#xA;&lt;p&gt;Now I just copied the &lt;code&gt;ss-local&lt;/code&gt; from Homebrew. Run &lt;code&gt;ss-local&lt;/code&gt; executable as a Launch Agent in the background. So there is only some source code related to GUI left. Then I have rewrited the GUI code in Swift.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;macOS 10.12+&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12.5.1+&lt;/li&gt; &#xA; &lt;li&gt;CocoaPods 1.10.1+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://github.com/shadowsocks/ShadowsocksX-NG/releases/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ss-local&lt;/code&gt; from shadowsocks-libev 3.2.5.&lt;/li&gt; &#xA; &lt;li&gt;Support SIP003 plugins. Embed &lt;code&gt;kcptun&lt;/code&gt;, &lt;code&gt;simple-obfs&lt;/code&gt; and &lt;code&gt;v2ray-plugin&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Could update PAC by download GFW List from GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Share your server profiles by qrcode or url.&lt;/li&gt; &#xA; &lt;li&gt;Import server profile urls from pasteboard.&lt;/li&gt; &#xA; &lt;li&gt;Import server profile by scan QRCode on screen.&lt;/li&gt; &#xA; &lt;li&gt;Custom rules for PAC.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://shadowsocks.org/en/spec/AEAD-Ciphers.html&#34;&gt;AEAD Ciphers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTP Proxy by &lt;a href=&#34;http://www.privoxy.org/&#34;&gt;privoxy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Difference from original ShadowsocksX&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ss-local&lt;/code&gt; is run as a background service through launchd, not as an in-app process. So after you quit the app, the &lt;code&gt;ss-local&lt;/code&gt; might be still running.&lt;/p&gt; &#xA;&lt;p&gt;Added a manual mode which won&#39;t configure the system proxy settings, so that you could configure your apps to use the SOCKS5 proxy manually.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions must be available on a separately named branch based on the latest version of the main branch &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ref: &lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;GitFlow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is released under the terms of the GPLv3.&lt;/p&gt;</summary>
  </entry>
</feed>