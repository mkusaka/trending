<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-04T01:48:18Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kean/Pulse</title>
    <updated>2022-09-04T01:48:18Z</updated>
    <id>tag:github.com,2022-09-04:/kean/Pulse</id>
    <link href="https://github.com/kean/Pulse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Logger and network inspector for Apple platforms&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;01&#34; src=&#34;https://user-images.githubusercontent.com/1567433/184552586-dd8cce3a-7ae1-494d-bbe9-41cfb1617c50.png&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pulse&lt;/strong&gt; is a powerful logging system for Apple Platforms. Native. Built with SwiftUI.&lt;/p&gt; &#xA;&lt;p&gt;Record and inspect logs and &lt;code&gt;URLSession&lt;/code&gt; network requests right from your iOS app using Pulse Console. Share and view logs in Pulse macOS app. Logs are recorded locally and never leave your device.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/kean/Get&#34;&gt;Get&lt;/a&gt;, web API client built using async/await, has first-class Pulse integration.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Sponsors ðŸ’–&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/kean&#34;&gt;Support&lt;/a&gt; Pulse on GitHub Sponsors.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;02&#34; src=&#34;https://user-images.githubusercontent.com/1567433/184552587-60547a4e-eba9-4975-acb5-7ba53512a428.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;03&#34; src=&#34;https://user-images.githubusercontent.com/1567433/184552588-2456b0de-7ac5-46cf-93e8-a74167993a94.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;04&#34; src=&#34;https://user-images.githubusercontent.com/1567433/184552589-97bda910-e24e-4d16-8758-d44f9ccf7f4d.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;05&#34; src=&#34;https://user-images.githubusercontent.com/1567433/184552590-a5b26199-3dcb-401f-b587-4d5688f9435e.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;06&#34; src=&#34;https://user-images.githubusercontent.com/1567433/184552592-b7dedd25-18db-4017-9ced-9b311e9dc836.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img width=&#34;2100&#34; alt=&#34;07&#34; src=&#34;https://user-images.githubusercontent.com/1567433/184552593-aac8fa5a-7000-4ca8-80d8-f92c3d695002.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Pulse&lt;/code&gt; is not a tool, it&#39;s a framework. It records events from &lt;code&gt;URLSession&lt;/code&gt; or from frameworks that use it, such as &lt;code&gt;Alamofire&lt;/code&gt;, and displays them using &lt;code&gt;PulseUI&lt;/code&gt; views that you integrate directly into your app. This way Pulse console is available for everyone who has your test builds. You or your QA team can view the logs on the device and easily share them to attach to bug reports.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What Pulse is Not&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pulse &lt;strong&gt;is not&lt;/strong&gt; a network debugging proxy tool like Proxyman, Charles, or Wireshark. It &lt;em&gt;won&#39;t&lt;/em&gt; automatically intercept all network traffic coming from your app or device. And to view logs in realtime, you need to use &lt;code&gt;PulseUI.framework&lt;/code&gt; that you integrate into your app. The dedicated Pulse iOS and macOS also use &lt;code&gt;PulseUI.framework&lt;/code&gt; and are there to view logs manually shared from other devices.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Pulse is easy to learn and use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kean-docs.github.io/pulse/documentation/pulse/&#34;&gt;Pulse Docs&lt;/a&gt; describe how to integrate the main framework and enable logging&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kean-docs.github.io/pulseui/documentation/pulseui/&#34;&gt;PulseUI Docs&lt;/a&gt; contains information about adding the debug menu and console into your app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kean-docs.github.io/pulseloghandler/documentation/pulseloghandler/&#34;&gt;PulseLogHandler Docs&lt;/a&gt; describe how to use Pulse as &lt;a href=&#34;https://github.com/apple/swift-log&#34;&gt;SwiftLog&lt;/a&gt; backend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://kean.blog/pulse/home&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/1567433/184552639-cf6765df-b5af-416b-95d3-0204e32df9d6.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Pulse Pro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kean.blog/pulse/pro&#34;&gt;&lt;strong&gt;Pulse Pro&lt;/strong&gt;&lt;/a&gt; is a professional open-source macOS app that allows you to view logs in real-time. The app is designed to be flexible, expansive, and precise while using all the familiar macOS patterns. It makes it easy to navigate large log files with table and text modes, filters, scroller markers, an all-new network inspector, JSON filters, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Pulse&lt;/th&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Xcode&lt;/th&gt; &#xA;   &lt;th&gt;Platforms&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pulse 2.0&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.6&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 13.3&lt;/td&gt; &#xA;   &lt;td&gt;iOS 13.0, watchOS 7.0, tvOS 13.0, macOS 11.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pulse 1.0&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 11.0, watchOS 6.0, tvOS 11.0, macOS 11.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Pulse is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HeroTransitions/Hero</title>
    <updated>2022-09-04T01:48:18Z</updated>
    <id>tag:github.com,2022-09-04:/HeroTransitions/Hero</id>
    <link href="https://github.com/HeroTransitions/Hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elegant transition library for iOS &amp; tvOS&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/427d5f2/Resources/Hero.svg?sanitize=true&#34; width=&#34;388&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hero&lt;/strong&gt; is a library for building iOS view controller transitions. It provides a declarative layer on top of the UIKit&#39;s cumbersome transition APIsâ€”making custom transitions an easy task for developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-Compatible-brightgreen.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamitLabs/Accio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Accio-supported-0A7CF5.svg?style=flat&#34; alt=&#34;Accio supported&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/HeroTransitions/Hero&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/HeroTransitions/Hero/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cocoapods.org/pods/Hero&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/Hero.svg?style=flat&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lkzhao/Hero/raw/master/LICENSE?raw=true&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/l/Hero.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Xcode-9.0%2B-blue.svg?sanitize=true&#34; alt=&#34;Xcode 9.0+&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/iOS-8.0%2B-blue.svg?sanitize=true&#34; alt=&#34;iOS 8.0+&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Swift-4.0%2B-orange.svg?sanitize=true&#34; alt=&#34;Swift 4.0+&#34;&gt; &lt;a href=&#34;https://github.com/lkzhao/Hero/raw/master/README.zh-cn.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E4%B8%AD%E6%96%87-README-blue.svg?style=flat&#34; alt=&#34;ä¸­æ–‡ README&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=NT5F7Y2MPV7RE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-blue.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/features.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/features2.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hero is similar to Keynote&#39;s &lt;strong&gt;Magic Move&lt;/strong&gt;. It checks the &lt;code&gt;heroID&lt;/code&gt; property on all source and destination views. Every matched view pair is then automatically transitioned from its old state to its new state.&lt;/p&gt; &#xA;&lt;p&gt;Hero can also construct animations for unmatched views. It is easy to define these animations via the &lt;code&gt;heroModifiers&lt;/code&gt; property. Hero will run these animations alongside the &lt;strong&gt;Magic Move&lt;/strong&gt; animations. All of these animations can be &lt;strong&gt;interactively controlled&lt;/strong&gt; by user gestures.&lt;/p&gt; &#xA;&lt;p&gt;At view controller level, Hero provides several template transitions that you can set through &lt;code&gt;heroModalAnimationType&lt;/code&gt;, &lt;code&gt;heroNavigationAnimationType&lt;/code&gt;, and &lt;code&gt;heroTabBarAnimationType&lt;/code&gt;. These can be used as the foundation of your custom transitions. Combine with &lt;code&gt;heroID&lt;/code&gt; &amp;amp; &lt;code&gt;heroModifiers&lt;/code&gt; to make your own unique transitions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/defaultAnimations.svg?sanitize=true&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/defaultAnimations2.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, Hero provides &lt;strong&gt;dynamic duration&lt;/strong&gt; based on the &lt;a href=&#34;https://material.io/design/motion/speed.html#easing&#34;&gt;Material Design Motion Guide&lt;/a&gt;. Duration is automatically determined by changes to distance and sizeâ€”saving you the hassle, while providing consistent and delightful animations.&lt;/p&gt; &#xA;&lt;p&gt;Hero doesn&#39;t make any assumptions about how the view is built or structured. It won&#39;t modify any of your views&#39; states other than hiding them during the animation. This makes it work with &lt;strong&gt;Auto Layout&lt;/strong&gt;, &lt;strong&gt;programmatic layout&lt;/strong&gt;, &lt;strong&gt;UICollectionView&lt;/strong&gt; (without modifying its layout object), &lt;strong&gt;UITableView&lt;/strong&gt;, &lt;strong&gt;UINavigationController&lt;/strong&gt;, &lt;strong&gt;UITabBarController&lt;/strong&gt;, etc...&lt;/p&gt; &#xA;&lt;h2&gt;Usage Example 1&lt;/h2&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/simple.svg?sanitize=true&#34;&gt; &#xA;&lt;h3&gt;View Controller 1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;redView.hero.id = &#34;ironMan&#34;&#xA;blackView.hero.id = &#34;batMan&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View Controller 2&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.hero.isEnabled = true&#xA;redView.hero.id = &#34;ironMan&#34;&#xA;blackView.hero.id = &#34;batMan&#34;&#xA;whiteView.hero.modifiers = [.translate(y:100)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage Example 2&lt;/h2&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/ebb3f2c/Resources/advanced.svg?sanitize=true&#34;&gt; &#xA;&lt;h3&gt;View Controller 1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;greyView.hero.id = &#34;skyWalker&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View Controller 2&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;self.hero.isEnabled = true&#xA;greyView.hero.id = &#34;skyWalker&#34;&#xA;&#xA;// collectionView is the parent view of all red cells&#xA;collectionView.hero.modifiers = [.cascade]&#xA;for cell in redCells {&#xA;    cell.hero.modifiers = [.fade, .scale(0.5)]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can do these in the &lt;strong&gt;storyboard&lt;/strong&gt; too!&lt;/p&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/master/Resources/storyboardView.png&#34; width=&#34;267px&#34;&gt; &#xA;&lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/master/Resources/storyboardViewController.png&#34; width=&#34;267px&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;Add the following entry to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;pod &#39;Hero&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to &lt;code&gt;import Hero&lt;/code&gt; in every file you&#39;d like to use Hero.&lt;/p&gt; &#xA;&lt;h3&gt;Carthage&lt;/h3&gt; &#xA;&lt;p&gt;Add the following entry to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;github &#34;HeroTransitions/Hero&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;carthage update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If this is your first time using Carthage in the project, you&#39;ll need to go through some additional steps as explained &lt;a href=&#34;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&#34;&gt;over at Carthage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Accio&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/HeroTransitions/Hero.git&#34;, .upToNextMajor(from: &#34;1.4.0&#34;)),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add &lt;code&gt;Hero&lt;/code&gt; to your App targets dependencies like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(&#xA;    name: &#34;App&#34;,&#xA;    dependencies: [&#xA;        &#34;Hero&#34;,&#xA;    ]&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;accio update&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Swift Package Manager&lt;/h3&gt; &#xA;&lt;p&gt;To integrate using Apple&#39;s Swift package manager, add the following as a dependency to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/HeroTransitions/Hero.git&#34;, .upToNextMajor(from: &#34;1.3.0&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then specify &lt;code&gt;&#34;Hero&#34;&lt;/code&gt; as a dependency of the Target in which you wish to use Hero. Here&#39;s an example &lt;code&gt;PackageDescription&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// swift-tools-version:4.0&#xA;import PackageDescription&#xA;&#xA;let package = Package(&#xA;    name: &#34;MyPackage&#34;,&#xA;    products: [&#xA;        .library(&#xA;            name: &#34;MyPackage&#34;,&#xA;            targets: [&#34;MyPackage&#34;]),&#xA;    ],&#xA;    dependencies: [&#xA;        .package(url: &#34;https://github.com/HeroTransitions/Hero.git&#34;, .upToNextMajor(from: &#34;1.6.2&#34;))&#xA;    ],&#xA;    targets: [&#xA;        .target(&#xA;            name: &#34;MyPackage&#34;,&#xA;            dependencies: [&#34;Hero&#34;])&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag the &lt;strong&gt;Sources&lt;/strong&gt; folder anywhere in your project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentations&lt;/h2&gt; &#xA;&lt;p&gt;Checkout the &lt;strong&gt;&lt;a href=&#34;https://github.com/lkzhao/Hero/wiki/Usage-Guide&#34;&gt;WIKI PAGES (Usage Guide)&lt;/a&gt;&lt;/strong&gt; for documentations.&lt;/p&gt; &#xA;&lt;p&gt;For more up-to-date ones, please see the header-doc. (use &lt;strong&gt;alt+click&lt;/strong&gt; in Xcode) &lt;img src=&#34;https://cdn.rawgit.com/lkzhao/Hero/master/Resources/headerDoc.png&#34; width=&#34;521px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interactive Transition Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lkzhao.gitbooks.io/hero/content/docs/InteractiveTransition.html&#34;&gt;Interactive transitions with Hero (Part 1)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Not able to use Hero transition even when &lt;code&gt;self.hero.isEnabled&lt;/code&gt; is set to true&lt;/h3&gt; &#xA;&lt;p&gt;Make sure that you have also enabled &lt;code&gt;self.hero.isEnabled&lt;/code&gt; on the navigation controller if you are doing a push/pop inside the navigation controller.&lt;/p&gt; &#xA;&lt;h3&gt;Views being covered by another matched view during the transition&lt;/h3&gt; &#xA;&lt;p&gt;Matched views use global coordinate space while unmatched views use local coordinate space by default. Local coordinate spaced views might be covered by other global coordinate spaced views. To solve this, use the &lt;code&gt;useGlobalCoordinateSpace&lt;/code&gt; modifier on the views being covered. Checkout &lt;a href=&#34;https://github.com/lkzhao/Hero/wiki/Coordinate-Space&#34;&gt;Coordinate Space Wiki page&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Push animation is shown along side my custom animation&lt;/h3&gt; &#xA;&lt;p&gt;This is the default animation for navigation controller provided by Hero. To disable the push animation, set &lt;code&gt;self.hero.navigationAnimationType&lt;/code&gt; to &lt;code&gt;.fade&lt;/code&gt; or &lt;code&gt;.none&lt;/code&gt; on the navigation controller.&lt;/p&gt; &#xA;&lt;h3&gt;How do I use a different default animation when dismissing&lt;/h3&gt; &#xA;&lt;p&gt;You can use the animation type &lt;code&gt;.selectBy(presenting:dismissing)&lt;/code&gt; to specify a different default animation for dismiss.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    self.hero.modalAnimationType = .selectBy(presenting:.zoom, dismissing:.zoomOut)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We welcome any contributions. Please read the &lt;a href=&#34;https://github.com/lkzhao/Hero/wiki/Contribution-Guide&#34;&gt;Contribution Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-protobuf</title>
    <updated>2022-09-04T01:48:18Z</updated>
    <id>tag:github.com,2022-09-04:/apple/swift-protobuf</id>
    <link href="https://github.com/apple/swift-protobuf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Plugin and runtime library for using protobuf with Swift&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://swift.org/assets/images/swift.svg?sanitize=true&#34; alt=&#34;Swift logo&#34; height=&#34;70&#34;&gt; &#xA;&lt;h1&gt;Swift Protobuf&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Welcome to Swift Protobuf!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/&#34;&gt;Apple&#39;s Swift programming language&lt;/a&gt; is a perfect complement to &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Google&#39;s Protocol Buffer&lt;/a&gt; (&#34;protobuf&#34;) serialization technology. They both emphasize high performance and programmer safety.&lt;/p&gt; &#xA;&lt;p&gt;This project provides both the command-line program that adds Swift code generation to Google&#39;s &lt;code&gt;protoc&lt;/code&gt; and the runtime library that is necessary for using the generated code. After using the protoc plugin to generate Swift code from your .proto files, you will need to add this library to your project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Build+and+Test%22&#34;&gt;&lt;img src=&#34;https://github.com/apple/swift-protobuf/workflows/Build%20and%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build and Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Check+Upstream+Proto+Files%22&#34;&gt;&lt;img src=&#34;https://github.com/apple/swift-protobuf/workflows/Check%20Upstream%20Proto%20Files/badge.svg?sanitize=true&#34; alt=&#34;Check Upstream Protos&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Run+Conformance+Tests%22&#34;&gt;&lt;img src=&#34;https://github.com/apple/swift-protobuf/workflows/Run%20Conformance%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Run Conformance Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features of SwiftProtobuf&lt;/h1&gt; &#xA;&lt;p&gt;SwiftProtobuf offers many advantages over alternative serialization systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Safety: The protobuf code-generation system avoids the errors that are common with hand-built serialization code.&lt;/li&gt; &#xA; &lt;li&gt;Correctness: SwiftProtobuf passes both its own extensive test suite and Google&#39;s full conformance test for protobuf correctness.&lt;/li&gt; &#xA; &lt;li&gt;Schema-driven: Defining your data structures in a separate &lt;code&gt;.proto&lt;/code&gt; schema file clearly documents your communications conventions.&lt;/li&gt; &#xA; &lt;li&gt;Idiomatic: SwiftProtobuf takes full advantage of the Swift language. In particular, all generated types provide full Swift copy-on-write value semantics.&lt;/li&gt; &#xA; &lt;li&gt;Efficient binary serialization: The &lt;code&gt;.serializedData()&lt;/code&gt; method returns a &lt;code&gt;Data&lt;/code&gt; with a compact binary form of your data. You can deserialize the data using the &lt;code&gt;init(serializedData:)&lt;/code&gt; initializer.&lt;/li&gt; &#xA; &lt;li&gt;Standard JSON serialization: The &lt;code&gt;.jsonUTF8Data()&lt;/code&gt; method returns a JSON form of your data that can be parsed with the &lt;code&gt;init(jsonUTF8Data:)&lt;/code&gt; initializer.&lt;/li&gt; &#xA; &lt;li&gt;Hashable, Equatable: The generated struct can be put into a &lt;code&gt;Set&amp;lt;&amp;gt;&lt;/code&gt; or &lt;code&gt;Dictionary&amp;lt;&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Performant: The binary and JSON serializers have been extensively optimized.&lt;/li&gt; &#xA; &lt;li&gt;Extensible: You can add your own Swift extensions to any of the generated types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Best of all, you can take the same &lt;code&gt;.proto&lt;/code&gt; file and generate Java, C++, Python, or Objective-C for use on other platforms. The generated code for those languages will use the exact same serialization and deserialization conventions as SwiftProtobuf, making it easy to exchange serialized data in binary or JSON forms, with no additional effort on your part.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;More information is available in the associated documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Google&#39;s protobuf documentation&lt;/a&gt; provides general information about protocol buffers, the protoc compiler, and how to use protocol buffers with C++, Java, and other languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/PLUGIN.md&#34;&gt;PLUGIN.md&lt;/a&gt; documents the &lt;code&gt;protoc-gen-swift&lt;/code&gt; plugin that adds Swift support to the &lt;code&gt;protoc&lt;/code&gt; program&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/API.md&#34;&gt;API.md&lt;/a&gt; documents how to use the generated code. This is recommended reading for anyone using SwiftProtobuf in their project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/INTERNALS.md&#34;&gt;INTERNALS.md&lt;/a&gt; documents the internal structure of the generated code and the library. This should only be needed by folks interested in working on SwiftProtobuf itself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/STYLE_GUIDELINES.md&#34;&gt;STYLE_GUIDELINES.md&lt;/a&gt; documents the style guidelines we have adopted in our codebase if you are interested in contributing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;ve worked with Protocol Buffers before, adding Swift support is very simple: you just need to build the &lt;code&gt;protoc-gen-swift&lt;/code&gt; program and copy it into your PATH. The &lt;code&gt;protoc&lt;/code&gt; program will find and use it automatically, allowing you to build Swift sources for your proto files. You will also, of course, need to add the SwiftProtobuf runtime library to your project as explained below.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To use Swift with Protocol buffers, you&#39;ll need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A Swift 5.0 or later compiler (Xcode 10.2 or later). Support is included for the Swift Package Manager. The Swift protobuf project is being developed and tested against the latest release version of Swift available from &lt;a href=&#34;https://swift.org&#34;&gt;Swift.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Google&#39;s protoc compiler. The Swift protoc plugin is being actively developed and tested against the latest protobuf sources. The SwiftProtobuf tests need a version of protoc which supports the &lt;code&gt;swift_prefix&lt;/code&gt; option (introduced in protoc 3.2.0). It may work with earlier versions of protoc. You can get recent versions from &lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;Google&#39;s github repository&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building and Installing the Code Generator Plugin&lt;/h2&gt; &#xA;&lt;p&gt;To translate &lt;code&gt;.proto&lt;/code&gt; files into Swift, you will need both Google&#39;s protoc compiler and the SwiftProtobuf code generator plugin.&lt;/p&gt; &#xA;&lt;p&gt;Building the plugin should be simple on any supported Swift platform:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/apple/swift-protobuf.git&#xA;$ cd swift-protobuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pick what released version of SwiftProtobuf you are going to use. You can get a list of tags with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git tag -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you pick the version you will use, set your local state to match, and build the protoc plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git checkout tags/[tag_name]&#xA;$ swift build -c release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a binary called &lt;code&gt;protoc-gen-swift&lt;/code&gt; in the &lt;code&gt;.build/release&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To install, just copy this one executable into a directory that is part of your &lt;code&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: The Swift runtime support is now included with macOS. If you are using old Xcode versions or are on older system versions, you might need to use also use &lt;code&gt;--static-swift-stdlib&lt;/code&gt; with &lt;code&gt;swift build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Alternatively install via Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install swift-protobuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install &lt;code&gt;protoc&lt;/code&gt; compiler and Swift code generator plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Converting .proto files into Swift&lt;/h2&gt; &#xA;&lt;p&gt;To generate Swift output for your .proto files, you run the &lt;code&gt;protoc&lt;/code&gt; command as usual, using the &lt;code&gt;--swift_out=&amp;lt;directory&amp;gt;&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ protoc --swift_out=. my.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;protoc&lt;/code&gt; program will automatically look for &lt;code&gt;protoc-gen-swift&lt;/code&gt; in your &lt;code&gt;PATH&lt;/code&gt; and use it.&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;.proto&lt;/code&gt; input file will get translated to a corresponding &lt;code&gt;.pb.swift&lt;/code&gt; file in the output directory.&lt;/p&gt; &#xA;&lt;p&gt;More information about building and using &lt;code&gt;protoc-gen-swift&lt;/code&gt; can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/PLUGIN.md&#34;&gt;detailed Plugin documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Adding the SwiftProtobuf library to your project...&lt;/h2&gt; &#xA;&lt;p&gt;To use the generated code, you need to include the &lt;code&gt;SwiftProtobuf&lt;/code&gt; library module in your project. How you do this will vary depending on how you&#39;re building your project. Note that in all cases, we strongly recommend that you use the version of the SwiftProtobuf library that corresponds to the version of &lt;code&gt;protoc-gen-swift&lt;/code&gt; you used to generate the code.&lt;/p&gt; &#xA;&lt;h3&gt;...using &lt;code&gt;swift build&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;After copying the &lt;code&gt;.pb.swift&lt;/code&gt; files into your project, you will need to add the &lt;a href=&#34;https://github.com/apple/swift-protobuf&#34;&gt;SwiftProtobuf library&lt;/a&gt; to your project to support the generated code. If you are using the Swift Package Manager, add a dependency to your &lt;code&gt;Package.swift&lt;/code&gt; file and import the &lt;code&gt;SwiftProtobuf&lt;/code&gt; library into the desired targets. Adjust the &lt;code&gt;&#34;1.6.0&#34;&lt;/code&gt; here to match the &lt;code&gt;[tag_name]&lt;/code&gt; you used to build the plugin above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/apple/swift-protobuf.git&#34;, from: &#34;1.6.0&#34;),&#xA;],&#xA;targets: [&#xA;    .target(&#xA;      name: &#34;MyTarget&#34;, &#xA;      dependencies: [.product(name: &#34;SwiftProtobuf&#34;, package: &#34;swift-protobuf&#34;)]&#xA;    ),&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;...using Xcode&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Xcode, then you should:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;.pb.swift&lt;/code&gt; source files generated from your protos directly to your project&lt;/li&gt; &#xA; &lt;li&gt;Add this SwiftPM package as dependency of your xcode project: &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app&#34;&gt;Apple Docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;...using CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using CocoaPods, add this to your &lt;code&gt;Podfile&lt;/code&gt; adjusting the &lt;code&gt;:tag&lt;/code&gt; to match the &lt;code&gt;[tag_name]&lt;/code&gt; you used to build the plugin above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SwiftProtobuf&#39;, &#39;~&amp;gt; 1.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: CocoaPods 1.7 or newer is required.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;p&gt;Once you have installed the code generator, used it to generate Swift code from your &lt;code&gt;.proto&lt;/code&gt; file, and added the SwiftProtobuf library to your project, you can just use the generated types as you would any other Swift struct.&lt;/p&gt; &#xA;&lt;p&gt;For example, you might start with the following very simple proto file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;syntax = &#34;proto3&#34;;&#xA;&#xA;message BookInfo {&#xA;   int64 id = 1;&#xA;   string title = 2;&#xA;   string author = 3;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then generate Swift code using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ protoc --swift_out=. DataModel.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated code will expose a Swift property for each of the proto fields as well as a selection of serialization and deserialization capabilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// Create a BookInfo object and populate it:&#xA;var info = BookInfo()&#xA;info.id = 1734&#xA;info.title = &#34;Really Interesting Book&#34;&#xA;info.author = &#34;Jane Smith&#34;&#xA;&#xA;// As above, but generating a read-only value:&#xA;let info2 = BookInfo.with {&#xA;    $0.id = 1735&#xA;    $0.title = &#34;Even More Interesting&#34;&#xA;    $0.author = &#34;Jane Q. Smith&#34;&#xA;  }&#xA;&#xA;// Serialize to binary protobuf format:&#xA;let binaryData: Data = try info.serializedData()&#xA;&#xA;// Deserialize a received Data object from `binaryData`&#xA;let decodedInfo = try BookInfo(serializedData: binaryData)&#xA;&#xA;// Serialize to JSON format as a Data object&#xA;let jsonData: Data = try info.jsonUTF8Data()&#xA;&#xA;// Deserialize from JSON format from `jsonData`&#xA;let receivedFromJSON = try BookInfo(jsonUTF8Data: jsonData)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more information in the detailed &lt;a href=&#34;https://raw.githubusercontent.com/apple/swift-protobuf/main/Documentation/API.md&#34;&gt;API Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Report any issues&lt;/h2&gt; &#xA;&lt;p&gt;If you run into problems, please send us a detailed report. At a minimum, please include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The specific operating system and version (for example, &#34;macOS 10.12.1&#34; or &#34;Ubuntu 16.10&#34;)&lt;/li&gt; &#xA; &lt;li&gt;The version of Swift you have installed (from &lt;code&gt;swift --version&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The version of the protoc compiler you are working with from &lt;code&gt;protoc --version&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The specific version of this source code (you can use &lt;code&gt;git log -1&lt;/code&gt; to get the latest commit ID)&lt;/li&gt; &#xA; &lt;li&gt;Any local changes you may have&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>