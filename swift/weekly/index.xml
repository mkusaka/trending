<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-14T02:25:30Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MikeWang000000/PD-Runner-Revived</title>
    <updated>2022-08-14T02:25:30Z</updated>
    <id>tag:github.com,2022-08-14:/MikeWang000000/PD-Runner-Revived</id>
    <link href="https://github.com/MikeWang000000/PD-Runner-Revived" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PD-Runner (Parallels Desktop) 补档&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;PD Runner (补档)&lt;/h2&gt; &#xA;&lt;p&gt;Sorry. There is nothing in this branch now. 对不起。由于一些原因请手动切换分支。&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/github/dmca/raw/master/2022/01/2022-01-19-parallels.md&#34;&gt;https://github.com/github/dmca/blob/master/2022/01/2022-01-19-parallels.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;i&gt;&lt;code&gt;git clone https://gitee.com/lihaoyun/PD-Runner.git&lt;/code&gt;&lt;/i&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kean/Nuke</title>
    <updated>2022-08-14T02:25:30Z</updated>
    <id>tag:github.com,2022-08-14:/kean/Nuke</id>
    <link href="https://github.com/kean/Nuke" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Image loading system&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/1567433/114792417-57c1d080-9d56-11eb-8035-dc07cfd7557f.png&#34; height=&#34;205&#34;&gt; &#xA;&lt;h1&gt;Image Loading System&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platforms-iOS%2C%20macOS%2C%20watchOS%2C%20tvOS-lightgrey.svg?sanitize=true&#34;&gt; &lt;img src=&#34;https://github.com/kean/Nuke/workflows/Nuke%20CI/badge.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Nuke provides an efficient way to download and display images in your app. It&#39;s easy to learn and use. Its architecture enables many powerful features while offering virtually unlimited possibilities for customization.&lt;/p&gt; &#xA;&lt;p&gt;The framework is lean and compiles in under 2 seconds&lt;a href=&#34;https://raw.githubusercontent.com/kean/Nuke/master/#footnote-1&#34;&gt;¹&lt;/a&gt;. Nuke has an automated test suite 2x the size of the codebase itself, ensuring excellent reliability. Every feature is carefully designed and optimized for &lt;a href=&#34;https://kean.blog/post/nuke-9&#34;&gt;performance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Fast LRU memory and disk cache&lt;/strong&gt; · &lt;strong&gt;SwiftUI&lt;/strong&gt; · &lt;strong&gt;Smart background decompression&lt;/strong&gt; · &lt;strong&gt;Image processing&lt;/strong&gt; · &lt;strong&gt;Resumable downloads&lt;/strong&gt; · &lt;strong&gt;Intelligent deduplication&lt;/strong&gt; · &lt;strong&gt;Request prioritization&lt;/strong&gt; · &lt;strong&gt;Prefetching&lt;/strong&gt; · &lt;strong&gt;Rate limiting&lt;/strong&gt; · &lt;strong&gt;Progressive JPEG, HEIF, WebP, SVG, GIF&lt;/strong&gt; · &lt;strong&gt;Alamofire&lt;/strong&gt; · &lt;strong&gt;Combine&lt;/strong&gt; · &lt;strong&gt;Async/Await&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://getstream.io/chat/sdk/swiftui/?utm_source=Nuke&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Nuke_July2022_SwiftUIChat_klmh22#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1567433/175186173-64eb53cb-b5d6-4ed4-aaca-87dbbb0834ab.png#gh-light-mode-only&#34; width=&#34;300px&#34; alt=&#34;Stream Logo&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://getstream.io/chat/sdk/swiftui/?utm_source=Nuke&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Nuke_July2022_SwiftUIChat_klmh22#gh-dark-mode-only&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1567433/175562043-0ab82adc-e3c7-4c0b-8813-a7940ff41db8.png#gh-dark-mode-only&#34; width=&#34;244px&#34; alt=&#34;Stream Logo&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nuke is proudly sponsored by &lt;a href=&#34;https://getstream.io/chat/sdk/swiftui/?utm_source=Nuke&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Nuke_July2022_SwiftUIChat_klmh22&#34;&gt;Stream&lt;/a&gt;, the leading provider in enterprise grade Feed &amp;amp; Chat APIs.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/kean&#34;&gt;Support&lt;/a&gt; Nuke on GitHub Sponsors.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Nuke is easy to learn and use thanks to documentation generated using DocC: &lt;a href=&#34;https://kean-docs.github.io/nuke/documentation/nuke/getting-started/&#34;&gt;&lt;strong&gt;Nuke&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://kean-docs.github.io/nukeui/documentation/nukeui/&#34;&gt;&lt;strong&gt;NukeUI&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://kean-docs.github.io/nukeextensions/documentation/nukeextensions/&#34;&gt;&lt;strong&gt;NukeExtensions&lt;/strong&gt;&lt;/a&gt;. Make sure to also check out &lt;a href=&#34;https://github.com/kean/NukeDemo&#34;&gt;&lt;strong&gt;Nuke Demo&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Upgrading from the previous version? Use a &lt;a href=&#34;https://github.com/kean/Nuke/tree/master/Documentation/Migrations&#34;&gt;&lt;strong&gt;Migration Guide&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;a href=&#34;https://kean-docs.github.io/nuke/documentation/nuke/getting-started&#34;&gt; &lt;img width=&#34;690&#34; alt=&#34;Nuke Docs&#34; src=&#34;https://user-images.githubusercontent.com/1567433/175793167-b7e0c557-b887-444f-b18a-57d6f5ecf01a.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;Nuke provides an easy way to integrate &lt;a href=&#34;https://github.com/kean/Pulse&#34;&gt;Pulse&lt;/a&gt;, a network logging framework optimized for images.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;The image pipeline is easy to customize and extend. Check out the following first-class extensions and packages built by the community.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/Nuke-Alamofire-Plugin&#34;&gt;&lt;strong&gt;Alamofire Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Replace networking layer with &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/makleso6/NukeWebP&#34;&gt;&lt;strong&gt;NukeWebP&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. &lt;a href=&#34;https://developers.google.com/speed/webp/&#34;&gt;WebP&lt;/a&gt; support, built by &lt;a href=&#34;https://github.com/makleso6&#34;&gt;Maxim Kolesnik&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ryokosuge/Nuke-WebP-Plugin&#34;&gt;&lt;strong&gt;WebP Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. &lt;a href=&#34;https://developers.google.com/speed/webp/&#34;&gt;WebP&lt;/a&gt; support, built by &lt;a href=&#34;https://github.com/ryokosuge&#34;&gt;Ryo Kosuge&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/delneg/Nuke-AVIF-Plugin&#34;&gt;&lt;strong&gt;AVIF Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Community&lt;/strong&gt;. &lt;a href=&#34;https://caniuse.com/avif&#34;&gt;AVIF&lt;/a&gt; support, built by &lt;a href=&#34;https://github.com/delneg&#34;&gt;Denis&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/Nuke-Gifu-Plugin&#34;&gt;&lt;strong&gt;Gifu Plugin&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use &lt;a href=&#34;https://github.com/kaishin/Gifu&#34;&gt;Gifu&lt;/a&gt; to load and display animated GIFs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kean/RxNuke&#34;&gt;&lt;strong&gt;RxNuke&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxSwift&#34;&gt;RxSwift&lt;/a&gt; extensions for Nuke with examples&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Minimum Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nuke&lt;/th&gt; &#xA;   &lt;th&gt;Date&lt;/th&gt; &#xA;   &lt;th&gt;Swift&lt;/th&gt; &#xA;   &lt;th&gt;Xcode&lt;/th&gt; &#xA;   &lt;th&gt;Platforms&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nuke 11.0&lt;/td&gt; &#xA;   &lt;td&gt;Jul 20, 2022&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.6&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 13.3&lt;/td&gt; &#xA;   &lt;td&gt;iOS 13.0, watchOS 6.0, macOS 10.15, tvOS 13.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nuke 10.0&lt;/td&gt; &#xA;   &lt;td&gt;Jun 1, 2021&lt;/td&gt; &#xA;   &lt;td&gt;Swift 5.3&lt;/td&gt; &#xA;   &lt;td&gt;Xcode 12.0&lt;/td&gt; &#xA;   &lt;td&gt;iOS 11.0, watchOS 4.0, macOS 10.13, tvOS 11.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Nuke is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a name=&#34;footnote-1&#34;&gt;¹&lt;/a&gt; Measured on MacBook Pro 14&#34; 2021 (10-core M1 Pro)&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-algorithms</title>
    <updated>2022-08-14T02:25:30Z</updated>
    <id>tag:github.com,2022-08-14:/apple/swift-algorithms</id>
    <link href="https://github.com/apple/swift-algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Commonly used sequence and collection algorithms for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift Algorithms&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swift Algorithms&lt;/strong&gt; is an open-source package of sequence and collection algorithms, along with their related types.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the package, and the intent behind it, in the &lt;a href=&#34;https://swift.org/blog/swift-algorithms/&#34;&gt;announcement on swift.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;h4&gt;Combinations / permutations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Combinations.md&#34;&gt;&lt;code&gt;combinations(ofCount:)&lt;/code&gt;&lt;/a&gt;: Combinations of particular sizes of the elements in a collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Permutations.md&#34;&gt;&lt;code&gt;permutations(ofCount:)&lt;/code&gt;&lt;/a&gt;: Permutations of a particular size of the elements in a collection, or of the full collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Permutations.md&#34;&gt;&lt;code&gt;uniquePermutations(ofCount:)&lt;/code&gt;&lt;/a&gt;: Permutations of a collection&#39;s elements, skipping any duplicate permutations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mutating algorithms&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Rotate.md&#34;&gt;&lt;code&gt;rotate(toStartAt:)&lt;/code&gt;, &lt;code&gt;rotate(subrange:toStartAt:)&lt;/code&gt;&lt;/a&gt;: In-place rotation of elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Partition.md&#34;&gt;&lt;code&gt;stablePartition(by:)&lt;/code&gt;, &lt;code&gt;stablePartition(subrange:by:)&lt;/code&gt;&lt;/a&gt;: A partition that preserves the relative order of the resulting prefix and suffix.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Combining collections&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Chain.md&#34;&gt;&lt;code&gt;chain(_:_:)&lt;/code&gt;&lt;/a&gt;: Concatenates two collections with the same element type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Cycle.md&#34;&gt;&lt;code&gt;cycled()&lt;/code&gt;, &lt;code&gt;cycled(times:)&lt;/code&gt;&lt;/a&gt;: Repeats the elements of a collection forever or a set number of times.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Joined.md&#34;&gt;&lt;code&gt;joined(by:)&lt;/code&gt;&lt;/a&gt;: Concatenate sequences of sequences, using an element or sequence as a separator, or using a closure to generate each separator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Product.md&#34;&gt;&lt;code&gt;product(_:_:)&lt;/code&gt;&lt;/a&gt;: Iterates over all the pairs of two collections; equivalent to nested &lt;code&gt;for&lt;/code&gt;-&lt;code&gt;in&lt;/code&gt; loops.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Subsetting operations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Compacted.md&#34;&gt;&lt;code&gt;compacted()&lt;/code&gt;&lt;/a&gt;: Drops the &lt;code&gt;nil&lt;/code&gt;s from a sequence or collection, unwrapping the remaining elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Partition.md&#34;&gt;&lt;code&gt;partitioned(by:)&lt;/code&gt;&lt;/a&gt;: Returns the elements in a sequence or collection that do and do not match a given predicate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/RandomSampling.md&#34;&gt;&lt;code&gt;randomSample(count:)&lt;/code&gt;, &lt;code&gt;randomSample(count:using:)&lt;/code&gt;&lt;/a&gt;: Randomly selects a specific number of elements from a collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/RandomSampling.md&#34;&gt;&lt;code&gt;randomStableSample(count:)&lt;/code&gt;, &lt;code&gt;randomStableSample(count:using:)&lt;/code&gt;&lt;/a&gt;: Randomly selects a specific number of elements from a collection, preserving their original relative order.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Stride.md&#34;&gt;&lt;code&gt;striding(by:)&lt;/code&gt;&lt;/a&gt;: Returns every nth element of a collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Suffix.md&#34;&gt;&lt;code&gt;suffix(while:)&lt;/code&gt;&lt;/a&gt;: Returns the suffix of a collection where all element pass a given predicate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Trim.md&#34;&gt;&lt;code&gt;trimmingPrefix(while:)&lt;/code&gt;, &lt;code&gt;trimmingSuffix(while)&lt;/code&gt;, &lt;code&gt;trimming(while:)&lt;/code&gt;&lt;/a&gt;: Returns a slice by trimming elements from a collection&#39;s start, end, or both. The mutating &lt;code&gt;trim...&lt;/code&gt; methods trim a collection in place.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Unique.md&#34;&gt;&lt;code&gt;uniqued()&lt;/code&gt;, &lt;code&gt;uniqued(on:)&lt;/code&gt;&lt;/a&gt;: The unique elements of a collection, preserving their order.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/MinMax.md&#34;&gt;&lt;code&gt;minAndMax()&lt;/code&gt;, &lt;code&gt;minAndMax(by:)&lt;/code&gt;&lt;/a&gt;: Returns the smallest and largest elements of a sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Partial sorting&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/MinMax.md&#34;&gt;&lt;code&gt;min(count:)&lt;/code&gt;, &lt;code&gt;max(count:)&lt;/code&gt;, &lt;code&gt;min(count:sortedBy:)&lt;/code&gt;, &lt;code&gt;max(count:sortedBy:)&lt;/code&gt;&lt;/a&gt;: Returns the smallest or largest elements of a collection, sorted by a predicate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other useful operations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/AdjacentPairs.md&#34;&gt;&lt;code&gt;adjacentPairs()&lt;/code&gt;&lt;/a&gt;: Lazily iterates over tuples of adjacent elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Chunked.md&#34;&gt;&lt;code&gt;chunked(by:)&lt;/code&gt;, &lt;code&gt;chunked(on:)&lt;/code&gt;, &lt;code&gt;chunks(ofCount:)&lt;/code&gt;&lt;/a&gt;: Eager and lazy operations that break a collection into chunks based on either a binary predicate or when the result of a projection changes or chunks of a given count.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/FirstNonNil.md&#34;&gt;&lt;code&gt;firstNonNil(_:)&lt;/code&gt;&lt;/a&gt;: Returns the first non-&lt;code&gt;nil&lt;/code&gt; result from transforming a sequence&#39;s elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Indexed.md&#34;&gt;&lt;code&gt;indexed()&lt;/code&gt;&lt;/a&gt;: Iterate over tuples of a collection&#39;s indices and elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Intersperse.md&#34;&gt;&lt;code&gt;interspersed(with:)&lt;/code&gt;&lt;/a&gt;: Place a value between every two elements of a sequence.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Partition.md&#34;&gt;&lt;code&gt;partitioningIndex(where:)&lt;/code&gt;&lt;/a&gt;: Returns the starting index of the partition of a collection that matches a predicate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Reductions.md&#34;&gt;&lt;code&gt;reductions(_:)&lt;/code&gt;, &lt;code&gt;reductions(_:_:)&lt;/code&gt;&lt;/a&gt;: Returns all the intermediate states of reducing the elements of a sequence or collection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Split.md&#34;&gt;&lt;code&gt;split(maxSplits:omittingEmptySubsequences:whereSeparator)&lt;/code&gt;, &lt;code&gt;split(separator:maxSplits:omittingEmptySubsequences)&lt;/code&gt;&lt;/a&gt;: Lazy versions of the Standard Library&#39;s eager operations that split sequences and collections into subsequences separated by the specified separator element.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-algorithms/raw/main/Guides/Windows.md&#34;&gt;&lt;code&gt;windows(ofCount:)&lt;/code&gt;&lt;/a&gt;: Breaks a collection into overlapping subsequences where elements are slices from the original collection.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding Swift Algorithms as a Dependency&lt;/h2&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;Algorithms&lt;/code&gt; library in a SwiftPM project, add the following line to the dependencies in your &lt;code&gt;Package.swift&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.package(url: &#34;https://github.com/apple/swift-algorithms&#34;, from: &#34;1.0.0&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include &lt;code&gt;&#34;Algorithms&#34;&lt;/code&gt; as a dependency for your executable target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.target(name: &#34;&amp;lt;target&amp;gt;&#34;, dependencies: [&#xA;    .product(name: &#34;Algorithms&#34;, package: &#34;swift-algorithms&#34;),&#xA;]),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, add &lt;code&gt;import Algorithms&lt;/code&gt; to your source code.&lt;/p&gt; &#xA;&lt;h2&gt;Source Stability&lt;/h2&gt; &#xA;&lt;p&gt;The Swift Algorithms package is source stable; version numbers follow &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;. Source breaking changes to public API can only land in a new major version.&lt;/p&gt; &#xA;&lt;p&gt;The public API of version 1.0 of the &lt;code&gt;swift-algorithms&lt;/code&gt; package consists of non-underscored declarations that are marked &lt;code&gt;public&lt;/code&gt; in the &lt;code&gt;Algorithms&lt;/code&gt; module. Interfaces that aren&#39;t part of the public API may continue to change in any release, including patch releases.&lt;/p&gt; &#xA;&lt;p&gt;Future minor versions of the package may introduce changes to these rules as needed.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d like this package to quickly embrace Swift language and toolchain improvements that are relevant to its mandate. Accordingly, from time to time, we expect that new versions of this package will require clients to upgrade to a more recent Swift toolchain release. Requiring a new Swift release will only require a minor version bump.&lt;/p&gt;</summary>
  </entry>
</feed>