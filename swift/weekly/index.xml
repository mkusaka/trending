<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-28T01:42:36Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rileytestut/DeltaCore</title>
    <updated>2024-04-28T01:42:36Z</updated>
    <id>tag:github.com,2024-04-28:/rileytestut/DeltaCore</id>
    <link href="https://github.com/rileytestut/DeltaCore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>stelabouras/privacy-manifest</title>
    <updated>2024-04-28T01:42:36Z</updated>
    <id>tag:github.com,2024-04-28:/stelabouras/privacy-manifest</id>
    <link href="https://github.com/stelabouras/privacy-manifest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple tool that parses your Xcode project/workspace or Swift Package, detects required reason APIs and generates a Privacy Manifest if needed.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Privacy Manifest&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/macOS_v13%2B-_?style=flat&amp;amp;logo=apple&amp;amp;label=platform&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Privacy Manifest CLI tool parses an Xcode project/workspace or a Swift Package and attempts to locate calls to Apple&#39;s required reason APIs &lt;a href=&#34;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api&#34;&gt;^1&lt;/a&gt; and detect privacy collected data frameworks [^2].&lt;/p&gt; &#xA;&lt;p&gt;The tool detects and parses the source files of the project as well as the frameworks added in the Xcode project&#39;s Build Phase or in the Swift Package dependencies. It also detects any frameworks / static libraries and checks if they are included in the third-party SDK list that Apple has provided [^3].&lt;/p&gt; &#xA;&lt;p&gt;The tool does not perform any sort of analysis beyond the simple line-by-line check for the existence of the method calls or symbols that Apple has already published.&lt;/p&gt; &#xA;&lt;p&gt;The tool uses a concurrent queue to speed up the parsing process.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can either use the tool by typing: &lt;code&gt;swift run privacy-manifest&lt;/code&gt; in the root directory of the project, or you can install the executable to &lt;code&gt;/usr/local/bin&lt;/code&gt; directory so that you can call it from any folder.&lt;/p&gt; &#xA;&lt;p&gt;Check out the project and run the following command in the project root to install the binary to &lt;code&gt;/usr/local/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After installing the tool to the &lt;code&gt;/usr/local/bin&lt;/code&gt; directory, you can invoke it from any directory using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;privacy-manifest analyze --project path/to/project --reveal-occurrences --output path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;path/to/project&lt;/code&gt; can be a relative or an absolute path to the &lt;code&gt;.xcodeproj&lt;/code&gt; or &lt;code&gt;Package.swift&lt;/code&gt; file of your project.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--reveal-occurrences&lt;/code&gt; is an optional flag that displays extended information regarding the occurrences of the required reason APIs / privacy collected data frameworks in your codebase, highlighting the file and the line where a call has been detected.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--output&lt;/code&gt; flag is optional and if specified, a &lt;code&gt;PrivacyInfo.xcprivacy&lt;/code&gt; property list file will be generated to that directory based on the detected required reason APIs and from the responses of the user.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Below is the console output from the &lt;a href=&#34;https://github.com/videolan/vlc-ios&#34;&gt;VLC iOS OSS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stelabouras/privacy-manifest/main/.github/privacymanifest-vlc.gif&#34; alt=&#34;Privacy Manifest analyze running for VLC iOS project&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Future implementations&lt;/h2&gt; &#xA;&lt;p&gt;The tool can output the occurrences report to HTML for better readability.&lt;/p&gt; &#xA;&lt;p&gt;On top of that, the list of third-party crash frameworks can be updated so that it can inform the user when such framework is detected (there is a related TODO in the code).&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Do not use this tool alone to create your privacy manifest file for your app or SDK. You must always double-check the occurrences that the tool displays as the tool does not know whether a certain occurrence is included in a comment or on an unused piece of code. Furthermore, there might also be cases where something has not been included in the parsing process.&lt;/p&gt; &#xA;&lt;p&gt;This tool gives you a high-level overview of the different required reason APIs and privacy collected data frameworks your project, workspace or package uses, so always do your own research after using this tool, to confirm the findings.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under Apache License 2.0, see &lt;a href=&#34;https://raw.githubusercontent.com/stelabouras/privacy-manifest/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;[^2]: &lt;a href=&#34;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests&#34;&gt;https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests&lt;/a&gt;). [^3]: &lt;a href=&#34;https://developer.apple.com/support/third-party-SDK-requirements/&#34;&gt;https://developer.apple.com/support/third-party-SDK-requirements/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ml-explore/mlx-swift</title>
    <updated>2024-04-28T01:42:36Z</updated>
    <id>tag:github.com,2024-04-28:/ml-explore/mlx-swift</id>
    <link href="https://github.com/ml-explore/mlx-swift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift API for MLX&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MLX Swift&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx-swift/main/#installation&#34;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://swiftpackageindex.com/ml-explore/mlx-swift/main/documentation/mlx&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://swiftpackageindex.com/ml-explore/mlx-swift/main/documentation/mlx/examples&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MLX Swift is a Swift API for &lt;a href=&#34;https://ml-explore.github.io/mlx/build/html/index.html&#34;&gt;MLX&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;MLX is an array framework for machine learning research on Apple silicon. MLX Swift expands MLX to the Swift language, making research and experimentation easier on Apple silicon. MLX is intended for research and not for production deployment of models in apps.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;MLX Swift has a &lt;a href=&#34;https://swiftpackageindex.com/ml-explore/mlx-swift/main/documentation/mlx/examples&#34;&gt;few examples&lt;/a&gt;, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Large-scale text generation with Mistral 7B&lt;/li&gt; &#xA; &lt;li&gt;Training a simple LeNet on MNIST&lt;/li&gt; &#xA; &lt;li&gt;Examples that run on macOS or iOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/ml-explore/mlx-swift-examples&#34;&gt;MLX Swift Examples repo&lt;/a&gt; contains the complete code and documentation for these examples.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;MLX&lt;/code&gt; Swift package can be built and run from Xcode or SwiftPM. A CMake install is also provided.&lt;/p&gt; &#xA;&lt;p&gt;More details are in the &lt;a href=&#34;https://swiftpackageindex.com/ml-explore/mlx-swift/main/documentation/mlx/install&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Xcode&lt;/h3&gt; &#xA;&lt;p&gt;In Xcode you can add &lt;code&gt;https://github.com/ml-explore/mlx-swift&lt;/code&gt; as a package dependency and link &lt;code&gt;MLX&lt;/code&gt;, &lt;code&gt;MLXNN&lt;/code&gt;, &lt;code&gt;MLXOptimizers&lt;/code&gt; and &lt;code&gt;MLXRandom&lt;/code&gt; as needed.&lt;/p&gt; &#xA;&lt;h3&gt;SwiftPM&lt;/h3&gt; &#xA;&lt;p&gt;To use &lt;code&gt;MLX&lt;/code&gt; with SwiftPM you can add this to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/ml-explore/mlx-swift&#34;, from: &#34;0.10.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and add the libraries as dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [.product(name: &#34;MLX&#34;, package: &#34;mlx-swift&#34;),&#xA;               .product(name: &#34;MLXRandom&#34;, package: &#34;mlx-swift&#34;),&#xA;               .product(name: &#34;MLXNN&#34;, package: &#34;mlx-swift&#34;),&#xA;               .product(name: &#34;MLXOptimizers&#34;, package: &#34;mlx-swift&#34;),&#xA;               .product(name: &#34;MLXFFT&#34;, package: &#34;mlx-swift&#34;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] SwiftPM (command line) cannot build the Metal shaders so the ultimate build has to be done via Xcode.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;xcodebuild&lt;/h3&gt; &#xA;&lt;p&gt;Although &lt;code&gt;SwiftPM&lt;/code&gt; (command line) cannot build the Metal shaders, &lt;code&gt;xcodebuild&lt;/code&gt; can and it can be used to do command line builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# build and run tests&#xA;xcodebuild test -scheme mlx-swift-Package -destination &#39;platform=OS X&#39;&#xA;&#xA;# build Tutorial&#xA;xcodebuild build -scheme Tutorial -destination &#39;platform=OS X&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;p&gt;Building with CMake requires both CMake and Ninja to be installed. You can do this with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install cmake&#xA;brew install ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir build&#xA;cd build&#xA;cmake .. -G Ninja&#xA;ninja&#xA;./example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx-swift/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for more information on contributing to MLX. See the &lt;a href=&#34;https://swiftpackageindex.com/ml-explore/mlx-swift/main/documentation/mlx/install&#34;&gt;docs&lt;/a&gt; for more information on building from source, and running tests.&lt;/p&gt; &#xA;&lt;p&gt;We are grateful for all of &lt;a href=&#34;https://raw.githubusercontent.com/ml-explore/mlx-swift/main/ACKNOWLEDGMENTS.md#Individual-Contributors&#34;&gt;our contributors&lt;/a&gt;. If you contribute to MLX Swift and wish to be acknowledged, please add your name to the list in your pull request.&lt;/p&gt; &#xA;&lt;p&gt;MLX Swift was initially developed by David Koski and Ronan Collobert, and is now maintained by David Koski. MLX Swift is built on top of &lt;a href=&#34;https://github.com/ml-explore/mlx&#34;&gt;MLX&lt;/a&gt;, which was initially developed with equal contribution by Awni Hannun, Jagrit Digani, Angelos Katharopoulos, and Ronan Collobert.&lt;/p&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;MLX&lt;/code&gt; array functions should match MLX as of tag &lt;a href=&#34;https://github.com/ml-explore/mlx/releases/tag/v0.3.0&#34;&gt;v0.3.0&lt;/a&gt;. The &lt;code&gt;MLXNN&lt;/code&gt; package should match MLX (&lt;code&gt;mlx.nn&lt;/code&gt;) as of tag &lt;a href=&#34;https://github.com/ml-explore/mlx/releases/tag/v0.0.10&#34;&gt;v0.0.10&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>