<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-16T02:05:19Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zhuowei/DSReality</title>
    <updated>2023-07-16T02:05:19Z</updated>
    <id>tag:github.com,2023-07-16:/zhuowei/DSReality</id>
    <link href="https://github.com/zhuowei/DSReality" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;DS emulation in Augmented Reality&lt;/p&gt; &#xA;&lt;p&gt;Turns a DS game into a holographic 3D image that floats above your controller.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zhuowei/DSReality/assets/704768/1514c7c8-76b1-4e41-9894-a027b6d35cb0&#34; alt=&#34;screenshot of Mario Kart DS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/zhuowei/status/1671532250020683787&#34;&gt;Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DS emulation with &lt;a href=&#34;https://github.com/melonDS-emu/melonDS&#34;&gt;melonDS&lt;/a&gt; and &lt;a href=&#34;https://github.com/rileytestut/Delta&#34;&gt;@rileytestut/Delta&lt;/a&gt;&#39;s MelonDS core&lt;/li&gt; &#xA; &lt;li&gt;live 3D model extraction with &lt;a href=&#34;https://github.com/scurest/MelonRipper&#34;&gt;@scurest/MelonRipper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;3D model rendered in augmented reality using iOS &lt;a href=&#34;https://developer.apple.com/documentation/realitykit/&#34;&gt;RealityKit&lt;/a&gt; (with some help from &lt;a href=&#34;https://mastodon.art/@noah/110574749502309331&#34;&gt;@noah@mastodon.art&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is only a concept/prototype: in particular,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the MelonRipper-&amp;gt;RealityKit converter doesn&#39;t work very well (e.g. doesn&#39;t handle transparency)&lt;/li&gt; &#xA; &lt;li&gt;there&#39;s a terrible memory leak (might be &lt;a href=&#34;https://developer.apple.com/forums/thread/710657&#34;&gt;this&lt;/a&gt;?) that crashes the app after a few minutes&lt;/li&gt; &#xA; &lt;li&gt;only tested with the camera position used by Mario Kart DS. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(for example, Pokemon Black and HeartGold use a different camera angle, and I had to remove the shader that crops the model for anything to show up)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;no way to select rom/touchscreen input/etc. The ROM name is hardcoded to &#34;rom.nds&#34; in the app&#39;s folder in Files/iTunes.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>apple/swift-http-types</title>
    <updated>2023-07-16T02:05:19Z</updated>
    <id>tag:github.com,2023-07-16:/apple/swift-http-types</id>
    <link href="https://github.com/apple/swift-http-types" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Version-independent HTTP currency types for Swift&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Swift HTTP Types&lt;/h1&gt; &#xA;&lt;p&gt;Swift HTTP Types are version-independent HTTP currency types designed for both clients and servers. They provide a common set of representations for HTTP requests and responses, focusing on modern HTTP features.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Add the following dependency clause to your Package.swift:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/apple/swift-http-types.git&#34;, from: &#34;0.1.0&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;HTTPTypes&lt;/code&gt; library exposes the core HTTP currency types, including &lt;code&gt;HTTPRequest&lt;/code&gt;, &lt;code&gt;HTTPResponse&lt;/code&gt;, and &lt;code&gt;HTTPFields&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;HTTPTypesFoundation&lt;/code&gt; library provides conveniences for using new HTTP types with Foundation, including bidirectional convertors between the new types and Foundation URL types, and URLSession convenience methods with the new types.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;NIOHTTPTypes&lt;/code&gt;, &lt;code&gt;NIOHTTPTypesHTTP1&lt;/code&gt;, and &lt;code&gt;NIOHTTPTypesHTTP2&lt;/code&gt; libraries provide channel handlers for translating the version-specific NIO HTTP types with the new HTTP types. They can be found in &lt;a href=&#34;https://github.com/apple/swift-nio-extras&#34;&gt;&lt;code&gt;swift-nio-extras&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Create a request&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let request = HTTPRequest(method: .get, scheme: &#34;https&#34;, authority: &#34;www.example.com&#34;, path: &#34;/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create a request from a Foundation URL&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var request = HTTPRequest(method: .get, url: URL(string: &#34;https://www.example.com/&#34;)!)&#xA;request.method = .post&#xA;request.path = &#34;/upload&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create a response&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let response = HTTPResponse(status: .ok)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Access and modify header fields&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension HTTPField.Name {&#xA;    static let myCustomHeader = Self(&#34;My-Custom-Header&#34;)!&#xA;}&#xA;&#xA;// Set&#xA;request.headerFields[.userAgent] = &#34;MyApp/1.0&#34;&#xA;request.headerFields[.myCustomHeader] = &#34;custom-value&#34;&#xA;request.headerFields[raw: .acceptLanguage] = [&#34;en-US&#34;, &#34;zh-Hans-CN&#34;]&#xA;&#xA;// Get&#xA;request.headerFields[.userAgent] // &#34;MyApp/1.0&#34;&#xA;request.headerFields[.myCustomHeader] // &#34;custom-value&#34;&#xA;request.headerFields[.acceptLanguage] // &#34;en-US, zh-Hans-CN&#34;&#xA;request.headerFields[raw: .acceptLanguage] // [&#34;en-US&#34;, &#34;zh-Hans-CN&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use with URLSession&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var request = HTTPRequest(method: .post, url: URL(string: &#34;https://www.example.com/upload&#34;)!)&#xA;request.headerFields[.userAgent] = &#34;MyApp/1.0&#34;&#xA;let (responseBody, response) = try await URLSession.shared.upload(for: request, from: requestBody)&#xA;guard response.status == .created else {&#xA;    // Handle error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use with SwiftNIO&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;channel.configureHTTP2Pipeline(mode: .server) { channel in&#xA;    channel.pipeline.addHandlers([&#xA;        HTTP2FramePayloadToHTTPServerCodec(),&#xA;        ExampleChannelHandler()&#xA;    ])&#xA;}.map { _ in () }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class ExampleChannelHandler: ChannelDuplexHandler {&#xA;    typealias InboundIn = HTTPTypeServerRequestPart&#xA;    typealias OutboundOut = HTTPTypeServerResponsePart&#xA;&#xA;    func channelRead(context: ChannelHandlerContext, data: NIOAny) {&#xA;        switch unwrapInboundIn(data) {&#xA;        case .head(let request):&#xA;            // Handle request headers&#xA;        case .body(let body):&#xA;            // Handle request body&#xA;        case .end(let trailers):&#xA;            // Handle complete request&#xA;            let response = HTTPResponse(status: .ok)&#xA;            context.write(wrapOutboundOut(.head(response)), promise: nil)&#xA;            context.writeAndFlush(wrapOutboundOut(.end(nil)), promise: nil)&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing HTTP Types&lt;/h2&gt; &#xA;&lt;p&gt;For the most part, HTTP Types development is as straightforward as any other SwiftPM project. With that said, we do have a few processes that are worth understanding before you contribute. For details, please see &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; in this repository.&lt;/p&gt; &#xA;&lt;p&gt;Please note that all work on HTTP Types is covered by the &lt;a href=&#34;https://github.com/apple/swift-http-types/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Swift HTTP Types Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>