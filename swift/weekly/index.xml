<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Swift Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-19T02:06:53Z</updated>
  <subtitle>Weekly Trending of Swift in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>buresdv/Cork</title>
    <updated>2023-03-19T02:06:53Z</updated>
    <id>tag:github.com,2023-03-19:/buresdv/Cork</id>
    <link href="https://github.com/buresdv/Cork" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast GUI for Homebrew written in SwiftUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cork&lt;/h1&gt; &#xA;&lt;p&gt;A fast GUI for Homebrew written in SwiftUI&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elk.zone/mstdn.social/@davidbures&#34;&gt;&lt;img src=&#34;https://img.shields.io/mastodon/follow/108939255808776594?domain=https%3A%2F%2Fmstdn.social&amp;amp;label=Follow%20me%20for%20updates&amp;amp;style=flat&#34; alt=&#34;Mastodon Link&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/kUHg8uGHpG&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1083475351260377119?label=Tak%20to%20me%20on%20Discord&amp;amp;style=flat&#34; alt=&#34;Mastodon Link&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;d like to personally thank &lt;a href=&#34;https://github.com/sebj&#34;&gt;Seb Jachec&lt;/a&gt; for implementing a system for getting real-time outputs of Brew commands.&lt;/p&gt; &#xA;&lt;p&gt;Without his contribution, many of the processes that depend on real-time outputs, such as installation, uninstallation and updating of packages, would be impossible.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Cork&lt;/h2&gt; &#xA;&lt;p&gt;Pre-compiled, always up-to-date versions are available from my Homebrew tap, which you get access to by donating 5€/month. You can donate through &lt;a href=&#34;https://ko-fi.com/buresdv&#34;&gt;Ko-Fi&lt;/a&gt; or &lt;a href=&#34;https://github.com/sponsors/buresdv&#34;&gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, as Cork is open source, you can always compile it from source for free. See below for instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Main Window&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/N8HQtcL.jpg&#34; alt=&#34;Start Page&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Package Info&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jQLTlOc.jpg&#34; alt=&#34;Package Info&#34;&gt; &lt;img src=&#34;https://i.imgur.com/ysoa3Hs.jpg&#34; alt=&#34;Package Info - Full-size Caveats&#34;&gt; &lt;img src=&#34;https://i.imgur.com/vNwRUng.jpg&#34; alt=&#34;Package Info - Minimized Caveats&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tap Info&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Jn5BpuS.jpg&#34; alt=&#34;Tap Info - Casks Only&#34;&gt; &lt;img src=&#34;https://i.imgur.com/9FghOAy.jpg&#34; alt=&#34;Tap Info - Formulae and Casks&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Install Package&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CtqSCUu.jpg&#34; alt=&#34;Install Package&#34;&gt; &lt;img src=&#34;https://i.imgur.com/GuniTJH.jpg&#34; alt=&#34;Install Package - Fetching Dependencies&#34;&gt; &lt;img src=&#34;https://i.imgur.com/EMmaSLA.jpg&#34; alt=&#34;Install Package - Installing Dependencies&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Add Taps&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bywcxaX.jpg&#34; alt=&#34;Tap Taps&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Brew Maintenance&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TNYXFZQ.jpg&#34; alt=&#34;Brew Maintenance&#34;&gt; &lt;img src=&#34;https://i.imgur.com/UDNMz0i.jpg&#34; alt=&#34;Brew Maintenance Results&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compiling Cork&lt;/h2&gt; &#xA;&lt;p&gt;Compiling Cork is simple, as it does not have many dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS Ventura or newer&lt;/li&gt; &#xA; &lt;li&gt;Xcode 14.2 or newer&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instructions:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before you begin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Skip if you already have an Apple Developer account&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Enroll your account in the developer program at &lt;a href=&#34;https://developer.apple.com/&#34;&gt;https://developer.apple.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Xcode&lt;/li&gt; &#xA; &lt;li&gt;Add your Developer account to Xcode. To do so, in the Menu bar, click &lt;code&gt;Xcode → Settings&lt;/code&gt;, and in the window that opens, click &lt;code&gt;Accounts&lt;/code&gt;. You can add your account there&lt;/li&gt; &#xA; &lt;li&gt;After you add your account, it will appear in the list of Apple IDs on the left od the screen. Select your account there&lt;/li&gt; &#xA; &lt;li&gt;At the bottom of the screen, click &lt;code&gt;Manage Certificates...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;On the bottom left, click the &lt;strong&gt;+&lt;/strong&gt; icon and select &lt;code&gt;Apple Development&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;When a new item appears in the list called &lt;code&gt;Apple Development Certificates&lt;/code&gt;, you can press &lt;code&gt;Done&lt;/code&gt; to close the account manager&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compiling Cork&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo using &lt;code&gt;git clone https://github.com/buresdv/Cork.git &amp;amp;&amp;amp; cd Cork &amp;amp;&amp;amp; open .&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Double-click &lt;code&gt;Cork.xcodeproj&lt;/code&gt;. Xcode should open the project&lt;/li&gt; &#xA; &lt;li&gt;Wait until all the dependencies are resolved. It should take a couple minutes at most&lt;/li&gt; &#xA; &lt;li&gt;In the Menu Bar, click &lt;code&gt;Product → Archive&lt;/code&gt; and wait for the building to finish&lt;/li&gt; &#xA; &lt;li&gt;A new window will open. From the list of Cork rows, select the topmost one, and click &lt;code&gt;Distribute App&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Copy App&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the resulting folder. You&#39;ll see an app called Cork. Drag Cork to your &lt;code&gt;/Applications/&lt;/code&gt; folder, and you&#39;re done!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Cork is licensed under &lt;a href=&#34;https://commonsclause.com&#34;&gt;Commons Clause&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This means that Cork open-source and you can do whatever you want with Cork&#39;s source, like modifying it, contributing to it etc., but you can&#39;t sell Cork or modified versions of it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MacPaw/OpenAI</title>
    <updated>2023-03-19T02:06:53Z</updated>
    <id>tag:github.com,2023-03-19:/MacPaw/OpenAI</id>
    <link href="https://github.com/MacPaw/OpenAI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swift package for OpenAI public API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1411778/218319355-f56b6bd4-961a-4d8f-82cd-6dbd43111d7f.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MacPaw/OpenAI/actions/workflows/swift.yml/badge.svg?sanitize=true&#34; alt=&#34;Swift Workflow&#34;&gt; &lt;a href=&#34;https://swiftpackageindex.com/MacPaw/OpenAI&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FMacPaw%2FOpenAI%2Fbadge%3Ftype%3Dswift-versions&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swiftpackageindex.com/MacPaw/OpenAI&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FMacPaw%2FOpenAI%2Fbadge%3Ftype%3Dplatforms&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/MacPaw&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Twitter&amp;amp;message=@MacPaw&amp;amp;color=CA1F67&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repositorty contains Swift implementation over &lt;a href=&#34;https://beta.openai.com/docs/api-reference/&#34;&gt;OpenAI&lt;/a&gt; public API.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#what-is-openai&#34;&gt;What is OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#completions&#34;&gt;Completions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#chats&#34;&gt;Chats&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#embeddings&#34;&gt;Embeddings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#utilities&#34;&gt;Utilities&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#links&#34;&gt;Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MacPaw/OpenAI/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is OpenAI&lt;/h2&gt; &#xA;&lt;p&gt;OpenAI is a non-profit artificial intelligence research organization founded in San Francisco, California in 2015. It was created with the purpose of advancing digital intelligence in ways that benefit humanity as a whole and promote societal progress. The organization strives to develop AI (Artificial Intelligence) programs and systems that can think, act and adapt quickly on their own – autonomously. OpenAI&#39;s mission is to ensure safe and responsible use of AI for civic good, economic growth and other public benefits; this includes cutting-edge research into important topics such as general AI safety, natural language processing, applied reinforcement learning methods, machine vision algorithms etc.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The OpenAI API can be applied to virtually any task that involves understanding or generating natural language or code. We offer a spectrum of models with different levels of power suitable for different tasks, as well as the ability to fine-tune your own custom models. These models can be used for everything from content generation to semantic search and classification.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;OpenAI is available with Swift Package Manager. The Swift Package Manager is a tool for automating the distribution of Swift code and is integrated into the swift compiler. Once you have your Swift package set up, adding OpenAI as a dependency is as easy as adding it to the dependencies value of your Package.swift.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;    .package(url: &#34;https://github.com/MacPaw/OpenAI.git&#34;, .branch(&#34;main&#34;))&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;To initialize API instance you need to &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;obtain&lt;/a&gt; API token from your Open AI organization.&lt;/p&gt; &#xA;&lt;img width=&#34;1081&#34; alt=&#34;company&#34; src=&#34;https://user-images.githubusercontent.com/1411778/213204726-0772373e-14db-4d5d-9a58-bc249bac4c57.png&#34;&gt; &#xA;&lt;p&gt;Once you have a token, you can initialize &lt;code&gt;OpenAI&lt;/code&gt; class, which is an entry point to the API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let openAI = OpenAI(apiToken: &#34;YOUR_TOKEN_HERE&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once token you posses the token, and the instance is initialized you are ready to make requests.&lt;/p&gt; &#xA;&lt;h3&gt;Completions&lt;/h3&gt; &#xA;&lt;p&gt;Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct CompletionsQuery: Codable {&#xA;    /// ID of the model to use.&#xA;    public let model: Model&#xA;    /// The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.&#xA;    public let prompt: String&#xA;    /// What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.&#xA;    public let temperature: Double?&#xA;    /// The maximum number of tokens to generate in the completion.&#xA;    public let max_tokens: Int?&#xA;    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.&#xA;    public let top_p: Double?&#xA;    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.&#xA;    public let frequency_penalty: Double?&#xA;    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.&#xA;    public let presence_penalty: Double?&#xA;    /// Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.&#xA;    public let stop: [String]?&#xA;    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.&#xA;    public let user: String?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct CompletionsResult: Codable {&#xA;    public struct Choice: Codable {&#xA;        public let text: String&#xA;        public let index: Int&#xA;    }&#xA;&#xA;    public let id: String&#xA;    public let object: String&#xA;    public let created: TimeInterval&#xA;    public let model: Model&#xA;    public let choices: [Choice]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let query = OpenAI.CompletionsQuery(model: .textDavinci_003, prompt: &#34;What is 42?&#34;, temperature: 0, max_tokens: 100, top_p: 1, frequency_penalty: 0, presence_penalty: 0, stop: [&#34;\\n&#34;])&#xA;openAI.completions(query: query) { result in&#xA;  //Handle result here&#xA;}&#xA;//or&#xA;let result = try await openAI.completions(query: query)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;(lldb) po result&#xA;▿ CompletionsResult&#xA;  - id : &#34;cmpl-6P9be2p2fQlwB7zTOl0NxCOetGmX3&#34;&#xA;  - object : &#34;text_completion&#34;&#xA;  - created : 1671453146.0&#xA;  - model : OpenAI.Model.textDavinci_003&#xA;  ▿ choices : 1 element&#xA;    ▿ 0 : Choice&#xA;      - text : &#34;\n\n42 is the answer to the ultimate question of life, the universe, and everything, according to the book The Hitchhiker\&#39;s Guide to the Galaxy.&#34;&#xA;      - index : 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Review &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions&#34;&gt;Completions Documentation&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Chats&lt;/h3&gt; &#xA;&lt;p&gt;Using the OpenAI Chat API, you can build your own applications with &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; to do things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Draft an email or other piece of writing&lt;/li&gt; &#xA; &lt;li&gt;Write Python code&lt;/li&gt; &#xA; &lt;li&gt;Answer questions about a set of documents&lt;/li&gt; &#xA; &lt;li&gt;Create conversational agents&lt;/li&gt; &#xA; &lt;li&gt;Give your software a natural language interface&lt;/li&gt; &#xA; &lt;li&gt;Tutor in a range of subjects&lt;/li&gt; &#xA; &lt;li&gt;Translate languages&lt;/li&gt; &#xA; &lt;li&gt;Simulate characters for video games and much more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt; struct ChatQuery: Codable {&#xA;     /// ID of the model to use. Currently, only gpt-3.5-turbo and gpt-3.5-turbo-0301 are supported.&#xA;     public let model: Model&#xA;     /// The messages to generate chat completions for&#xA;     public let messages: [Chat]&#xA;     /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and  We generally recommend altering this or top_p but not both.&#xA;     public let temperature: Double?&#xA;     /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.&#xA;     public let top_p: Double?&#xA;     /// How many chat completion choices to generate for each input message.&#xA;     public let n: Int?&#xA;     /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only `server-sent events` as they become available, with the stream terminated by a data: [DONE] message.&#xA;     public let stream: Bool?&#xA;     /// Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.&#xA;     public let stop: [String]?&#xA;     /// The maximum number of tokens to generate in the completion.&#xA;     public let max_tokens: Int?&#xA;     /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.&#xA;     public let presence_penalty: Double?&#xA;     /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.&#xA;     public let frequency_penalty: Double?&#xA;     ///Modify the likelihood of specified tokens appearing in the completion.&#xA;     public let logit_bias: [String:Int]?&#xA;     /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.&#xA;     public let user: String?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ChatResult: Codable {&#xA;    public struct Choice: Codable {&#xA;        public let index: Int&#xA;        public let message: Chat&#xA;        public let finish_reason: String&#xA;    }&#xA;    &#xA;    public struct Usage: Codable {&#xA;        public let prompt_tokens: Int&#xA;        public let completion_tokens: Int&#xA;        public let total_tokens: Int&#xA;    }&#xA;&#xA;    public let id: String&#xA;    public let object: String&#xA;    public let created: TimeInterval&#xA;    public let model: Model&#xA;    public let choices: [Choice]&#xA;    public let usage: Usage&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let query = OpenAI.ChatQuery(model: .gpt3_5Turbo, messages: [.init(role: &#34;user&#34;, content: &#34;who are you&#34;)])&#xA;let result = try await openAI.chats(query: query)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;(lldb) po result&#xA;▿ ChatResult&#xA;  - id : &#34;chatcmpl-6pwjgxGV2iPP4QGdyOLXnTY0LE3F8&#34;&#xA;  - object : &#34;chat.completion&#34;&#xA;  - created : 1677838528.0&#xA;  - model : &#34;gpt-3.5-turbo-0301&#34;&#xA;  ▿ choices : 1 element&#xA;    ▿ 0 : Choice&#xA;      - index : 0&#xA;      ▿ message : Chat&#xA;        - role : &#34;assistant&#34;&#xA;        - content : &#34;\n\nI\&#39;m an AI language model developed by OpenAI, created to provide assistance and support for various tasks such as answering questions, generating text, and providing recommendations. Nice to meet you!&#34;&#xA;      - finish_reason : &#34;stop&#34;&#xA;  ▿ usage : Usage&#xA;    - prompt_tokens : 10&#xA;    - completion_tokens : 39&#xA;    - total_tokens : 49&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Review &lt;a href=&#34;https://platform.openai.com/docs/guides/chat&#34;&gt;Chat Documentation&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;p&gt;Given a prompt and/or an input image, the model will generate a new image.&lt;/p&gt; &#xA;&lt;p&gt;As Artificial Intelligence continues to develop, so too does the intriguing concept of Dall-E. Developed by OpenAI, a research lab for artificial intelligence purposes, Dall-E has been classified as an AI system that can generate images based on descriptions provided by humans. With its potential applications spanning from animation and illustration to design and engineering - not to mention the endless possibilities in between - it&#39;s easy to see why there is such excitement over this new technology.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ImagesQuery: Codable {&#xA;    /// A text description of the desired image(s). The maximum length is 1000 characters.&#xA;    public let prompt: String&#xA;    /// The number of images to generate. Must be between 1 and 10.&#xA;    public let n: Int?&#xA;    /// The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.&#xA;    public let size: String?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ImagesResult: Codable {&#xA;    public struct URLResult: Codable {&#xA;        public let url: String&#xA;    }&#xA;    public let created: TimeInterval&#xA;    public let data: [URLResult]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let query = OpenAI.ImagesQuery(prompt: &#34;White cat with heterochromia sitting on the kitchen table&#34;, n: 1, size: &#34;1024x1024&#34;)&#xA;openAI.images(query: query) { result in&#xA;  //Handle result here&#xA;}&#xA;//or&#xA;let result = try await openAI.images(query: query)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;(lldb) po result&#xA;▿ ImagesResult&#xA;  - created : 1671453505.0&#xA;  ▿ data : 1 element&#xA;    ▿ 0 : URLResult&#xA;      - url : &#34;https://oaidalleapiprodscus.blob.core.windows.net/private/org-CWjU5cDIzgCcVjq10pp5yX5Q/user-GoBXgChvLBqLHdBiMJBUbPqF/img-WZVUK2dOD4HKbKwW1NeMJHBd.png?st=2022-12-19T11%3A38%3A25Z&amp;amp;se=2022-12-19T13%3A38%3A25Z&amp;amp;sp=r&amp;amp;sv=2021-08-06&amp;amp;sr=b&amp;amp;rscd=inline&amp;amp;rsct=image/png&amp;amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;amp;skt=2022-12-19T09%3A35%3A16Z&amp;amp;ske=2022-12-20T09%3A35%3A16Z&amp;amp;sks=b&amp;amp;skv=2021-08-06&amp;amp;sig=mh52rmtbQ8CXArv5bMaU6lhgZHFBZz/ePr4y%2BJwLKOc%3D&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Generated image&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1411778/213134082-ba988a72-fca0-4213-8805-63e5f8324cab.png&#34; alt=&#34;Generated Image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Review &lt;a href=&#34;https://beta.openai.com/docs/api-reference/images&#34;&gt;Images Documentation&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Embeddings&lt;/h3&gt; &#xA;&lt;p&gt;Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct EmbeddingsQuery: Codable {&#xA;    /// ID of the model to use.&#xA;    public let model: Model&#xA;    /// Input text to get embeddings for&#xA;    public let input: String&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct EmbeddingsResult: Codable {&#xA;&#xA;    public struct Embedding: Codable {&#xA;&#xA;        public let object: String&#xA;        public let embedding: [Double]&#xA;        public let index: Int&#xA;    }&#xA;    public  let data: [Embedding]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let query = OpenAI.EmbeddingsQuery(model: .textSearchBabbadgeDoc, input: &#34;The food was delicious and the waiter...&#34;)&#xA;openAI.embeddings(query: query) { result in&#xA;  //Handle response here&#xA;}&#xA;//or&#xA;let result = try await openAI.embeddings(query: query)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;(lldb) po result&#xA;▿ EmbeddingsResult&#xA;  ▿ data : 1 element&#xA;    ▿ 0 : Embedding&#xA;      - object : &#34;embedding&#34;&#xA;      ▿ embedding : 2048 elements&#xA;        - 0 : 0.0010535449&#xA;        - 1 : 0.024234328&#xA;        - 2 : -0.0084999&#xA;        - 3 : 0.008647452&#xA;    .......&#xA;        - 2044 : 0.017536353&#xA;        - 2045 : -0.005897616&#xA;        - 2046 : -0.026559394&#xA;        - 2047 : -0.016633155&#xA;      - index : 0&#xA;&#xA;(lldb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Review &lt;a href=&#34;https://beta.openai.com/docs/api-reference/embeddings&#34;&gt;Embeddings Documentation&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Utilities&lt;/h3&gt; &#xA;&lt;p&gt;The component comes with several handy utility functions to work with the vectors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public struct Vector {&#xA;&#xA;    /// Returns the similarity between two vectors&#xA;    ///&#xA;    /// - Parameters:&#xA;    ///     - a: The first vector&#xA;    ///     - b: The second vector&#xA;    public static func cosineSimilarity(a: [Double], b: [Double]) -&amp;gt; Double {&#xA;        return dot(a, b) / (mag(a) * mag(b))&#xA;    }&#xA;&#xA;    /// Returns the difference between two vectors. Cosine distance is defined as `1 - cosineSimilarity(a, b)`&#xA;    ///&#xA;    /// - Parameters:&#xA;    ///     - a: The first vector&#xA;    ///     - b: The second vector&#xA;    public func cosineDifference(a: [Double], b: [Double]) -&amp;gt; Double {&#xA;        return 1 - Self.cosineSimilarity(a: a, b: b)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let vector1 = [0.213123, 0.3214124, 0.421412, 0.3214521251, 0.412412, 0.3214124, 0.1414124, 0.3214521251, 0.213123, 0.3214124, 0.1414124, 0.4214214, 0.213123, 0.3214124, 0.1414124, 0.3214521251, 0.213123, 0.3214124, 0.1414124, 0.3214521251]&#xA;let vector2 = [0.213123, 0.3214124, 0.1414124, 0.3214521251, 0.213123, 0.3214124, 0.1414124, 0.3214521251, 0.213123, 0.511515, 0.1414124, 0.3214521251, 0.213123, 0.3214124, 0.1414124, 0.3214521251, 0.213123, 0.3214124, 0.1414124, 0.3213213]&#xA;let similarity = Vector.cosineSimilarity(a: vector1, b: vector2)&#xA;print(similarity) //0.9510201910206734&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In data analysis, cosine similarity is a measure of similarity between two sequences of numbers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img width=&#34;574&#34; alt=&#34;Screenshot 2022-12-19 at 6 00 33 PM&#34; src=&#34;https://user-images.githubusercontent.com/1411778/208467903-000b52d8-6589-40dd-b020-eeed69e8d284.png&#34;&gt; &#xA;&lt;p&gt;Read more about Cosine Similarity &lt;a href=&#34;https://en.wikipedia.org/wiki/Cosine_similarity&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/docs/introduction&#34;&gt;OpenAI Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/playground&#34;&gt;OpenAI Playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/examples&#34;&gt;OpenAI Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://labs.openai.com/&#34;&gt;Dall-E&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cosine_similarity&#34;&gt;Cosine Similarity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (c) 2023 MacPaw Inc.&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>rileytestut/Delta</title>
    <updated>2023-03-19T02:06:53Z</updated>
    <id>tag:github.com,2023-03-19:/rileytestut/Delta</id>
    <link href="https://github.com/rileytestut/Delta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Delta is an all-in-one classic video game emulator for non-jailbroken iOS devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Delta&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Delta is an all-in-one classic video game emulator for non-jailbroken iOS devices.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swift.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/swift-5.0-orange.svg?sanitize=true&#34; alt=&#34;Swift Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: AGPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Delta is an iOS application that allows you to emulate and play video games for several classic video game systems, including Game Boy Advance, Nintendo 64, and Nintendo DS. Delta is the spiritual successor to &lt;a href=&#34;http://www.gba4iosapp.com&#34;&gt;GBA4iOS&lt;/a&gt; — a Game Boy Advance emulator for iOS devices &lt;a href=&#34;https://twitter.com/pau1thor&#34;&gt;Paul Thorsen&lt;/a&gt; and I made while in high school together — rebuilt from the ground up with modern iOS features and support for more systems.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/705880/115471008-203aa480-a1ec-11eb-8aba-237a46799543.png&#34; width=&#34;75%&#34;&gt;&lt;br&gt; &lt;em&gt;Mario and Pokémon are properties of Nintendo Co., Ltd. and are not associated with Delta or AltStore LLC.&lt;/em&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Supported Systems&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nintendo Entertainment System (NES)&lt;/li&gt; &#xA; &lt;li&gt;Super Nintendo Entertainment System (SNES)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo 64 (N64)&lt;/li&gt; &#xA; &lt;li&gt;Game Boy / Game Boy Color (GBC)&lt;/li&gt; &#xA; &lt;li&gt;Game Boy Advance (GBA)&lt;/li&gt; &#xA; &lt;li&gt;Nintendo DS (DS)&lt;/li&gt; &#xA; &lt;li&gt;Sega Genesis / Mega Drive (GEN) &lt;strong&gt;(in beta)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accurate, full speed emulation thanks to mature underlying emulator cores. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NES: &lt;a href=&#34;https://github.com/0ldsk00l/nestopia&#34;&gt;Nestopia&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;SNES: &lt;a href=&#34;https://github.com/snes9xgit/snes9x&#34;&gt;Snes9x&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;N64: &lt;a href=&#34;https://github.com/mupen64plus/mupen64plus-core&#34;&gt;mupen64plus&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GBC: &lt;a href=&#34;https://github.com/sinamas/gambatte&#34;&gt;Gambatte&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GBA: &lt;a href=&#34;https://github.com/visualboyadvance-m/visualboyadvance-m&#34;&gt;visualboyadvance-m&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;DS: &lt;a href=&#34;https://github.com/Arisotura/melonDS&#34;&gt;melonDS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;GEN: &lt;a href=&#34;https://github.com/ekeeke/Genesis-Plus-GX&#34;&gt;Genesis Plus GX&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Beautiful, native UI. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Browse and play your favorite games with a UI designed from the ground up for iOS.&lt;/li&gt; &#xA;   &lt;li&gt;Automatically displays appropriate box art for imported games.&lt;/li&gt; &#xA;   &lt;li&gt;Change a game’s artwork to anything you want, or select from the built-in game artwork database.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Controller Support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports PS4, PS5, Xbox One S, Xbox Series X, and MFi game controllers.&lt;/li&gt; &#xA;   &lt;li&gt;Supports bluetooth (and wired) keyboards, as well as the Apple Smart Keyboard.&lt;/li&gt; &#xA;   &lt;li&gt;Completely customize button mappings on a per-system, per-controller basis.&lt;/li&gt; &#xA;   &lt;li&gt;Map buttons to special “Quick Save”, “Quick Load,” and “Fast Forward” actions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom Controller Skins &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Beautiful built-in controller skins for all systems.&lt;/li&gt; &#xA;   &lt;li&gt;Import controller skins made by others, or even make your own to share with the world!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Save States &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Save and load save states for any game from the pause menu.&lt;/li&gt; &#xA;   &lt;li&gt;Lock save states to prevent them from being accidentally overwritten.&lt;/li&gt; &#xA;   &lt;li&gt;Automatically makes backup save states to ensure you never lose your progress.&lt;/li&gt; &#xA;   &lt;li&gt;Support for “Quick Saves,” save states that can be quickly saved/loaded with a single button press (requires external controller).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fast Forwarding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Speed through slower parts of games by running the game much faster than normal.&lt;/li&gt; &#xA;   &lt;li&gt;Easily enable or disable from the pause menu, or optionally with a mapped button on an external controller.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Delta Sync &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sync your games, game saves, save states, cheats, controller skins, and controller mappings between devices.&lt;/li&gt; &#xA;   &lt;li&gt;View version histories of everything you sync and optionally restore them to earlier versions.&lt;/li&gt; &#xA;   &lt;li&gt;Supports both Google Drive and Dropbox.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Hold Button &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Choose buttons for Delta to hold down on your behalf, freeing up your thumbs to press other buttons instead.&lt;/li&gt; &#xA;   &lt;li&gt;Perfect for games that typically require one button be held down constantly (ex: run button in Mario games, or the A button in Mario Kart).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;3D/Haptic Touch &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use 3D or Haptic Touch to “peek” at games, save states, and cheat codes.&lt;/li&gt; &#xA;   &lt;li&gt;App icon shortcuts allow quick access to your most recently played games, or optionally customize the shortcuts to always include certain games.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cheat Codes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NES &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Game Genie&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;SNES: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Game Genie&lt;/li&gt; &#xA;     &lt;li&gt;Pro Action Replay&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;N64 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;GameShark&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;GBC &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Game Genie&lt;/li&gt; &#xA;     &lt;li&gt;GameShark&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;GBA &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Action Replay&lt;/li&gt; &#xA;     &lt;li&gt;Code Breaker&lt;/li&gt; &#xA;     &lt;li&gt;GameShark&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;DS &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Action Replay&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Gyroscope support &lt;strong&gt;(WarioWare: Twisted! only)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Microphone support &lt;strong&gt;(DS only)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/705880/114452847-c1db4980-9b8d-11eb-8f8f-de7998562222.png&#34; width=&#34;100px&#34; height=&#34;100px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Delta was originally developed under the impression Apple would allow it into the App Store. Unfortunately Apple later changed their minds, leaving me no choice but to find a new way to distribute Delta. Long story short, this led me to create &lt;a href=&#34;https://github.com/rileytestut/AltStore&#34;&gt;AltStore&lt;/a&gt;, which now serves as the official way to install Delta onto your device.&lt;/p&gt; &#xA;&lt;p&gt;To install Delta with AltStore:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download AltServer for Mac or PC from &lt;a href=&#34;https://altstore.io&#34;&gt;https://altstore.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Connect your iOS device to your computer via lightning cable (or USB-C for iPads).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://altstore.io/faq/&#34;&gt;Follow these instructions&lt;/a&gt; to install AltStore onto your device with AltServer.&lt;/li&gt; &#xA; &lt;li&gt;Open AltStore on your device, then navigate to the &#34;Browse&#34; tab.&lt;/li&gt; &#xA; &lt;li&gt;Find Delta, then press the &lt;code&gt;FREE&lt;/code&gt; button to start installing the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once you&#39;ve installed Delta with AltStore, &lt;strong&gt;you&#39;ll need to refresh it at least once every 7 days to prevent it from expiring&lt;/strong&gt; and requiring a re-installation. AltStore will periodically attempt to refresh your apps in the background when on the same WiFi as AltServer, but you can also manually refresh apps by pressing &#34;Refresh All&#34; in AltStore. AltStore will also let you know whenever a new update is released, allowing you to update Delta directly within AltStore.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you are welcome to download the compiled &lt;code&gt;.ipa&lt;/code&gt;&#39;s from &lt;a href=&#34;https://github.com/rileytestut/Delta/releases&#34;&gt;Releases&lt;/a&gt; and sideload them using whatever sideloading method you prefer, but you will not receive automatic updates and will have to manually update Delta by re-sideloading each new version.&lt;/p&gt; &#xA;&lt;h2&gt;Project Overview&lt;/h2&gt; &#xA;&lt;p&gt;Delta was designed from the beginning to be modular, and for that reason each &#34;Delta Core&#34; has its own GitHub repo and is added as a submodule to the main Delta project. Additionally, Delta uses two of my own private frameworks I use to share common functionality between my apps: Roxas and Harmony.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rileytestut/Delta&#34;&gt;&lt;strong&gt;Delta&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; Delta is just a regular, sandboxed iOS application. The Delta app repo (aka this one) contains all the code specific to the Delta app itself, such as storyboards, app-specific view controllers, database logic, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rileytestut/DeltaCore&#34;&gt;&lt;strong&gt;DeltaCore&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; DeltaCore serves as the “middle-man” between the high-level app code and the specific emulation cores. By working with this framework, you have access to all the core Delta features, such as emulation, controller skins, save states, cheat codes, etc. Other potential emulator apps will use this framework extensively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rileytestut/Roxas&#34;&gt;&lt;strong&gt;Roxas&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; Roxas is my own framework used across my projects, developed to simplify a variety of common tasks used in iOS development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rileytestut/Harmony&#34;&gt;&lt;strong&gt;Harmony&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; Harmony is my personal syncing framework designed to sync Core Data databases. Harmony listens for changes to an app&#39;s persistent store, then syncs any changes with a remote file service (such as Google Drive or Dropbox).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Delta Cores&lt;/strong&gt;&lt;br&gt; Each system in Delta is implemented as its own &#34;Delta Core&#34;, which serves as a standard emulation API Delta can understand regardless of the underlying core. For the most part, you don&#39;t interact directly with specific Delta Cores, but rather indirectly through &lt;code&gt;DeltaCore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/NESDeltaCore&#34;&gt;NESDeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/SNESDeltaCore&#34;&gt;SNESDeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/N64DeltaCore&#34;&gt;N64DeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/GBCDeltaCore&#34;&gt;GBCDeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/GBADeltaCore&#34;&gt;GBADeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/MelonDSDeltaCore&#34;&gt;MelonDSDeltaCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rileytestut/GPGXDeltaCore&#34;&gt;GPGXDeltaCore&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xcode 12&lt;/li&gt; &#xA; &lt;li&gt;Swift 5+&lt;/li&gt; &#xA; &lt;li&gt;iOS 12.2 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why iOS 12.2 or later? Doing so allows me to distribute Delta without embedding Swift libraries inside. This helps me afford bandwidth costs by reducing download sizes by roughly 30%, but also noticeably improves how long it takes to install/refresh Delta with AltStore. If you&#39;re compiling Delta yourself, however, you should be able to lower the deployment target to iOS 12.0 without any issues.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation Instructions&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Delta uses Git LFS to manage large files, so first make sure you have &lt;a href=&#34;https://git-lfs.github.com&#34;&gt;installed Git LFS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository by running the following command in Terminal*&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/rileytestut/Delta.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Update Git submodules&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd Delta&#xA;$ git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Systems/Systems.xcworkspace&lt;/code&gt; and select the &#34;Systems&#34; project in the project navigator (a.k.a. the left sidebar).&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Systems&#34; under &lt;code&gt;Targets&lt;/code&gt;, then click the &lt;code&gt;Signing &amp;amp; Capabilities&lt;/code&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Change &lt;code&gt;Team&lt;/code&gt; from &#34;Yvette Testut&#34; to your own account.&lt;/li&gt; &#xA; &lt;li&gt;Close &lt;code&gt;Systems/Systems.xcworkspace&lt;/code&gt;, then open &lt;code&gt;Delta.xcworkspace&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Repeat steps 4 &amp;amp; 5 with the &#34;Delta&#34; target.&lt;/li&gt; &#xA; &lt;li&gt;Change Delta&#39;s &lt;code&gt;Bundle Identifier&lt;/code&gt; to something unique, such as by appending your GitHub username (ex: &lt;code&gt;com.rileytestut.Delta.MyGitHubUsername&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Build + run app! 🎉&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;* This will checkout the &lt;code&gt;main&lt;/code&gt; branch by default, which is kept up-to-date with the latest public version. Ongoing development (including &lt;a href=&#34;https://www.patreon.com/rileytestut&#34;&gt;Patreon betas&lt;/a&gt;) is done on the &lt;code&gt;develop&lt;/code&gt; branch, and is periodically merged into &lt;code&gt;main&lt;/code&gt; whenever a new public version is released. If you&#39;d prefer to compile the &lt;code&gt;develop&lt;/code&gt; version instead, replace the &lt;code&gt;git clone&lt;/code&gt; command in Step #1 with this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone -b develop https://github.com/rileytestut/Delta.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Due to the licensing of emulator cores used by Delta, I have no choice but to distribute Delta under the &lt;strong&gt;AGPLv3 license&lt;/strong&gt;. That being said, I explicitly give permission for anyone to use, modify, and distribute all &lt;em&gt;my&lt;/em&gt; original code for this project in any form, with or without attribution, without fear of legal consequences (dependencies remain under their original licenses, however).&lt;/p&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:riley@rileytestut.com&#34;&gt;riley@rileytestut.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/rileytestut&#34;&gt;@rileytestut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>