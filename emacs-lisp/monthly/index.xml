<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-01T02:01:02Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>renzmann/treesit-auto</title>
    <updated>2023-11-01T02:01:02Z</updated>
    <id>tag:github.com,2023-11-01:/renzmann/treesit-auto</id>
    <link href="https://github.com/renzmann/treesit-auto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatic installation, usage, and fallback for tree-sitter major modes in Emacs 29&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: treesit-auto #+AUTHOR: Robb Enzmann&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://melpa.org/#/treesit-auto&#34;&gt;&lt;img alt=&#34;Melpa&#34; src=&#34;https://melpa.org/packages/treesit-auto-badge.svg?raw=true&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://stable.melpa.org/#/treesit-auto&#34;&gt;&lt;img alt=&#34;Melpa&#34; src=&#34;https://stable.melpa.org/packages/treesit-auto-badge.svg?raw=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Automatically install and use tree-sitter major modes in Emacs 29+. If the tree-sitter version can&#39;t be used, fall back to the original major mode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features Each of these behaviors are configurable and documented under the &#34;Configuration&#34; section. By activating =global-treesit-auto-mode=, Emacs will:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically switch to =&#xA;  &lt;name&gt;&#xA;   -ts-mode= when the grammar for =&#xA;   &lt;name&gt;&#xA;    = is installed&#xA;   &lt;/name&gt;&#xA;  &lt;/name&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stick with =&#xA;  &lt;name&gt;&#xA;   -mode= if the grammar isn&#39;t installed&#xA;  &lt;/name&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Optional) automatically install a grammar before opening a compatible file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is also a convenience function =M-x treesit-auto-install-all=, which will install all of the maintained and compatible grammars. You can add these grammars to your =auto-mode-alist= automatically by invoking the =treesit-auto-add-to-auto-mode-alist= function in your configuration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation &lt;del&gt;treesit-auto&lt;/del&gt; is available from [[https://melpa.org/][MELPA]]. After following [[https://melpa.org/#/getting-started][their setup]], you can use your preferred package manager. If that&#39;s the default =package.el=, simply =M-x package-refresh-contents= and then&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_example M-x package-install RET treesit-auto #+end_example&lt;/p&gt; &#xA;&lt;p&gt;If you want a local clone of the repository, rather than just a copy of the source, you might instead use =package-vc-install=&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src example M-x package-vc-install RET &lt;a href=&#34;https://github.com/renzmann/treesit-auto.git&#34;&gt;https://github.com/renzmann/treesit-auto.git&lt;/a&gt; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then, in your Emacs configuration file (=~/.emacs.d/init.el=),&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package treesit-auto :config (global-treesit-auto-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For most users, this will be enough. There are some nifty things you might want to enable, though, which are covered in the &#34;Configuration&#34; section below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What this package does Emacs 29, while featuring =treesit.el= and a convenient =treesit-install-language-grammar=, [[https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/index.html][will not feature an intelligent way to choose]] between a default mode, such as =python-mode=, and its tree-sitter enhanced version, =python-ts-mode=. This package attempts to remedy that by adjusting the =major-mode-remap-alist= and =treesit-language-source-alist= variables in order to get the following behavior:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;1. If the grammar is installed, then switch to the appropriate tree-sitter mode:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this case, assuming we open a Python buffer, and the [[https://github.com/tree-sitter/tree-sitter-python][Python tree-sitter grammar]] is installed, then Emacs will use =python-ts-mode= instead of =python-mode=.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;2. The grammar is NOT installed and treesit-auto-install is non-nil:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When the grammar is not installed and &lt;del&gt;treesit-auto-install&lt;/del&gt; is t, then upon activating any major mode that has a corresponding tree-sitter mode, the grammar will be downloaded and compiled using &lt;del&gt;treesit-install-language-grammar&lt;/del&gt;. Emacs will then activate the tree-sitter major mode for that buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;prompt&lt;/del&gt; is like t, except a message will be displayed in the echo area asking for a yes/no response before attempting the installation.&lt;/p&gt; &#xA;&lt;p&gt;As an example for both cases: if I visit a Python file and didn&#39;t already have the grammar installed, I wind up with an installed grammar and a buffer using &lt;del&gt;python-ts-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, when &lt;del&gt;treesit-auto-install&lt;/del&gt; is nil, it will try to fall back to another major mode as described in the following two rules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;3. If the grammar is NOT installed, and a fallback is specified&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Most languages will have a fallback mode specified, such as =python-ts-mode= falling back to =python-mode=, if the grammar is not installed. If you ever need to double-check what that fallback will be, you can double check what&#39;s in the recipe for that language like this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example (treesit-auto-recipe-remap (alist-get &#39;python treesit-auto-lang-recipe-alist)) ⇒ python-mode #+end_example&lt;/p&gt; &#xA;&lt;p&gt;See &#34;Configuration/Configuring behavior for a specific language&#34; in case you would like to specify different fallback modes than the default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;4. All other cases...&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the most general case, where the grammar is not installed, &lt;del&gt;treesit-auto-install&lt;/del&gt; is nil, and no fallback mode is specified in the language recipe present on =treesit-auto-recipe-list=. In this case, we still gain the benefit of quickly installing grammars through =treesit-install-language-grammar= without having the build the recipe interactively, but =treesit-auto= will make no attempt to switch away from the tree-sitter mode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration If you have modified =treesit-language-source-alist= through =setq=, then it is recommended to put any configuration of this package AFTER that =setq=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Automatically install grammars if they are missing The =treesit-auto-install= variable controls whether a grammar should be installed automatically when activating a major mode compatible with tree-sitter.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;=nil=, the default, means =treesit-auto= won&#39;t try to install anything, and will rely on the fallback logic outlined above&lt;/li&gt; &#xA; &lt;li&gt;=t= means =treesit-auto= should always try to clone and install a grammar when missing&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;prompt&lt;/del&gt; will cause a yes/no prompt to appear in the minibuffer before attempting installation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq treesit-auto-install &#39;prompt) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then, supposing I don&#39;t have =libtree-sitter-python.so= (or its mac/Windows equivalent) under =~/.emacs.d/tree-sitter= (or anywhere else in =treesit-extra-load-path=), visiting a Python file or calling =M-x python-ts-mode= will generate this prompt:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example Tree-sitter grammar for python is missing. Would you like to install it from &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-python&#34;&gt;https://github.com/tree-sitter/tree-sitter-python&lt;/a&gt;? (y or n) #+end_example&lt;/p&gt; &#xA;&lt;p&gt;Responding with &#34;yes&#34; will use =treesit-install-language-grammar= to go fetch and compile the missing grammar.&lt;/p&gt; &#xA;&lt;p&gt;The other function that respects this variable is =treesit-auto-install-all=. When =treesit-auto-install= is t, using =M-x treesit-auto-install-all= will skip all prompts. Otherwise, it will ask before attempting the installation.&lt;/p&gt; &#xA;&lt;p&gt;** Configuring behavior for a specific language The variable =treesit-auto-recipe-list= keeps track of all the language &#34;recipes.&#34; These control how =treesit-auto= decides which modes to upgrade/downgrade to/from, where the source code of the language grammar is hosted, and which C/C++ compiler to use. Each recipe can take these arguments:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example :lang :ts-mode :remap :url :revision :requires :source-dir :cc :c++ #+end_example&lt;/p&gt; &#xA;&lt;p&gt;To create a recipe, use =make-treesit-auto-recipe=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq my-js-tsauto-config (make-treesit-auto-recipe :lang &#39;javascript :ts-mode &#39;js-ts-mode :remap &#39;(js2-mode js-mode javascript-mode) :url &#34;&lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-javascript&#34;&gt;https://github.com/tree-sitter/tree-sitter-javascript&lt;/a&gt;&#34; :revision &#34;master&#34; :source-dir &#34;src&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;treesit-auto-recipe-list my-js-tsauto-config) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Here, we&#39;ve specified that the tree-sitter compiler will be creating a file named =libtree-sitter-javascript.so= (or =.dylib= or =.dll=), based on the =:lang= field. The corresponding tree-sitter mode in Emacs is called =js-ts-mode=, and all of =js2-mode=, =js-mode=, and =javascript-mode= should attempt switching to the =js-ts-mode=, if possible.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, since =js-2-mode= is first under the =:remap= section, that is the &#34;primary fallback.&#34; Meaning that if the tree-sitter grammar is not available, it will be the first mode tried. If that doesn&#39;t work, it will try =js-mode=, and =javascript-mode=, in that order, until one /does/ work. If only one fallback needs to be specified, a single quoted symbol is also acceptable. For instance, =python-ts-mode= just uses =:remap &#39;python= in this argument position.&lt;/p&gt; &#xA;&lt;p&gt;If a grammar mandates any other grammars be installed as a dependency, the =:requires= keyword can specify a language symbol or list of symbols that should be installed. One example of this is found in the TypeScript recipe, which specifies =:requires &#39;tsx=, since activating =typescript-ts-mode= on some Emacs builds will attempt to load the TSX grammar.&lt;/p&gt; &#xA;&lt;p&gt;The =:url=, =:revision=, =:source-dir=, =:cc=, and =:c++= arguments are all documented under =treesit-language-source-alist=, which is part of base Emacs, not this package.&lt;/p&gt; &#xA;&lt;p&gt;** Keep track of your hooks This package does not modify any of your major mode hooks. That is, if you have functions in =python-mode-hook=, but not in =python-ts-mode-hook=, then your hook from =python-mode= will not be applied, assuming =python-ts-mode= is what gets loaded. For major modes in which this is a concern, the current recommendation is to address this as part of your configuration.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq rust-ts-mode-hook rust-mode-hook) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Some modes have a shared base, such as =python-ts-mode= and =python-mode= both deriving from =python-base-mode=. For these languages, you can opt to hook into =python-base-mode-hook= instead of explicitly setting the tree-sitter mode&#39;s hook.&lt;/p&gt; &#xA;&lt;p&gt;** Automatically register extensions for =auto-mode-alist= This is an optional feature so that this package avoids mutating your =auto-mode-alist= without your permission.&lt;/p&gt; &#xA;&lt;p&gt;After your desired grammars are installed, you can register them to =auto-mode-alist= by calling =treesit-auto-add-to-auto-mode-alist=. This function will only add grammars that are considered ready (i.e. detected as installed).&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (treesit-auto-add-to-auto-mode-alist) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This registers your tree-sitter modes according to the common file extension for that language. For example, the =auto-mode-alist= entry for TypeScript looks like =&#39;(&#34;\*.ts\&#39;&#34; . typescript-ts-mode)=.&lt;/p&gt; &#xA;&lt;p&gt;** Full example This is how I configure =treesit-auto= for my own personal use.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package treesit-auto :demand t :config (setq treesit-auto-install &#39;prompt) (global-treesit-auto-mode)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Caveats This package is, admittedly, a hack. =treesit.el= provides an excellent foundation to incremental source code parsing for Emacs 29, and over time that foundation /will/ expand into an improved core editing experience. With that in mind, I fully expect this package to eventually be obsolesced by the default options in Emacs 30 and beyond. That does not preclude us from adding a few quality of life improvements to Emacs 29, though, and so it still seems prudent to have this plugin available in the meantime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contributing Bug reports, feature requests, and contributions are most welcome. Even though this is a small project, there is always room for improvement. I also appreciate &#34;nitpicky&#34; contributions, such as formatting, conventions, variable naming, code simplification, and improvements to language in documentation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Issues are tracked on [[https://github.com/renzmann/treesit-auto/issues][GitHub]], which is also where patches and pull requests should be submitted.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to submit a new language recipe to be distributed as part of this package, see [[CONTRIBUTING.md][CONTRIBUTING.md]] for a quick guide on how to write and submit the new recipe.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-lsp/lsp-pyright</title>
    <updated>2023-11-01T02:01:02Z</updated>
    <id>tag:github.com,2023-11-01:/emacs-lsp/lsp-pyright</id>
    <link href="https://github.com/emacs-lsp/lsp-pyright" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lsp-mode ❤️ pyright&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lsp-pyright&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-pyright/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacs-lsp/lsp-pyright/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-pyright/master/License&#34;&gt;&lt;img src=&#34;http://img.shields.io/:License-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/lsp-pyright&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/lsp-pyright-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/emacs-lsp/lsp-mode?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/emacs-lsp/lsp-mode.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/emacs-lsp/lsp-mode&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-pyright/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-pyright/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-pyright/master/#usage-notes&#34;&gt;Usage notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;p&gt;lsp-mode client leveraging &lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;Pyright language server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package lsp-pyright&#xA;  :ensure t&#xA;  :hook (python-mode . (lambda ()&#xA;                          (require &#39;lsp-pyright)&#xA;                          (lsp))))  ; or lsp-deferred&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lsp-pyright&lt;/code&gt; supports the following configuration. Each configuration is described in detail in &lt;a href=&#34;https://github.com/microsoft/pyright/raw/master/docs/settings.md&#34;&gt;Pyright Settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pyright.disableLanguageServices&lt;/code&gt; via &lt;code&gt;lsp-pyright-disable-language-services&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pyright.disableOrganizeImports&lt;/code&gt; via &lt;code&gt;lsp-pyright-disable-organize-imports&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.autoImportCompletions&lt;/code&gt; via &lt;code&gt;lsp-pyright-auto-import-completions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.useLibraryCodeForTypes&lt;/code&gt; via &lt;code&gt;lsp-pyright-use-library-code-for-types&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.typeshedPaths&lt;/code&gt; via &lt;code&gt;lsp-pyright-typeshed-paths&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.diagnosticMode&lt;/code&gt; via &lt;code&gt;lsp-pyright-diagnostic-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.typeCheckingMode&lt;/code&gt; via &lt;code&gt;lsp-pyright-typechecking-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.logLevel&lt;/code&gt; via &lt;code&gt;lsp-pyright-log-level&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.autoSearchPaths&lt;/code&gt; via &lt;code&gt;lsp-pyright-auto-search-paths&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.analysis.extraPaths&lt;/code&gt; via &lt;code&gt;lsp-pyright-extra-paths&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python.venvPath&lt;/code&gt; via &lt;code&gt;lsp-pyright-venv-path&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Projects can be further configured using &lt;code&gt;pyrightconfig.json&lt;/code&gt; file. For further details please see &lt;a href=&#34;https://github.com/microsoft/pyright/raw/master/docs/configuration.md&#34;&gt;Pyright Configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage notes&lt;/h2&gt; &#xA;&lt;p&gt;Pyright includes a recent copy of the Python stdlib type stubs. To add type stubs for additional libraries, customize &lt;code&gt;lsp-pyright-stub-path&lt;/code&gt;, or place the appropriate type stubs in &lt;code&gt;typings&lt;/code&gt; subdirectory of your project (this is the default stub path). Note that without stubs but with &lt;code&gt;lsp-pyright-use-library-code-for-types&lt;/code&gt; non-nil, you may see type checking errors, particularly for complex libraries such as Pandas.&lt;/p&gt; &#xA;&lt;p&gt;Example setup to get typechecking working properly for Pandas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/microsoft/python-type-stubs $HOME/src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;  (setq lsp-pyright-use-library-code-for-types t) ;; set this to nil if getting too many false positive type errors&#xA;  (setq lsp-pyright-stub-path (concat (getenv &#34;HOME&#34;) &#34;/src/python-type-stubs&#34;)) ;; example&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>clojure-emacs/cider</title>
    <updated>2023-11-01T02:01:02Z</updated>
    <id>tag:github.com,2023-11-01:/clojure-emacs/cider</id>
    <link href="https://github.com/clojure-emacs/cider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Clojure Interactive Development Environment that Rocks for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.github.com/clojure-emacs/cider/master/logo/cider-logo-w640.png&#34; alt=&#34;CIDER Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/clojure-emacs/cider&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/clojure-emacs/cider.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/clojure-emacs/cider/actions/workflows/spell_checking.yml&#34;&gt;&lt;img src=&#34;https://github.com/clojure-emacs/cider/actions/workflows/spell_checking.yml/badge.svg?sanitize=true&#34; alt=&#34;Spell-check Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/nFPpynQPME&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://clojurians.net&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%23cider-green.svg?style=flat&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CIDER is the &lt;strong&gt;C&lt;/strong&gt;lojure(Script) &lt;strong&gt;I&lt;/strong&gt;nteractive &lt;strong&gt;D&lt;/strong&gt;evelopment &lt;strong&gt;E&lt;/strong&gt;nvironment that &lt;strong&gt;R&lt;/strong&gt;ocks!&lt;/p&gt; &#xA;&lt;p&gt;CIDER extends Emacs with support for &lt;a href=&#34;https://docs.cider.mx/cider/usage/interactive_programming.html&#34;&gt;interactive programming&lt;/a&gt; in Clojure. The features are centered around &lt;code&gt;cider-mode&lt;/code&gt;, an Emacs minor-mode that complements &lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode&#34;&gt;clojure-mode&lt;/a&gt;. While &lt;code&gt;clojure-mode&lt;/code&gt; supports editing Clojure source files, &lt;code&gt;cider-mode&lt;/code&gt; adds support for interacting with a running Clojure process for compilation, code completion, debugging, definition and documentation lookup, running tests and so on.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/cider/master/#open-collective-backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backers/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/cider/master/#open-collective-sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsors/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-donate-orange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=GRQKNBM6P8VRQ&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;Paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bozhidar (a.k.a. Bug, CIDER&#39;s primary author/maintainer) has spent countless hours working on CIDER and the &lt;a href=&#34;https://metaredux.com/posts/2018/11/09/ciders-orchard-the-heart.html&#34;&gt;numerous related projects&lt;/a&gt;. That&#39;s a lot of work and not all of it is fun!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please consider &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/cider/master/#funding&#34;&gt;supporting financially CIDER&#39;s ongoing development&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The instructions that follow are meant to get you from zero to a running CIDER REPL in under 5 minutes. See the &lt;a href=&#34;https://docs.cider.mx&#34;&gt;online documentation&lt;/a&gt; for (way) more details.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/cider&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/cider-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/cider&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/cider-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/cider.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/cider.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The recommended way to install CIDER is via &lt;code&gt;package.el&lt;/code&gt; - the built-in package manager in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;CIDER is available on all major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href=&#34;https://elpa.nongnu.org&#34;&gt;NonGNU ELPA&lt;/a&gt;, &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Provided you&#39;ve enabled one of them in your Emacs setup, you can install CIDER with the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt; &lt;code&gt;cider&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Launch an nREPL server and client from Emacs&lt;/h3&gt; &#xA;&lt;p&gt;Simply open in Emacs a file belonging to your &lt;code&gt;lein&lt;/code&gt;, &lt;code&gt;tools.deps&lt;/code&gt; or &lt;code&gt;boot&lt;/code&gt; project (like &lt;code&gt;foo.clj&lt;/code&gt;) and type &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;cider-jack-in&lt;/code&gt;. This will start an nREPL server with all the project dependencies loaded in and CIDER will automatically connect to it.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can use &lt;kbd&gt;C-u M-x&lt;/kbd&gt; &lt;code&gt;cider-jack-in&lt;/code&gt; to specify the path to a Clojure project, without having to visit any file in it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; In Clojure(Script) buffers the command &lt;code&gt;cider-jack-in&lt;/code&gt; is bound to &lt;kbd&gt;C-c C-x (C-)j&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Connect to a running nREPL server&lt;/h3&gt; &#xA;&lt;p&gt;You can go to your project&#39;s directory in a terminal and type there (assuming you&#39;re using Leiningen that is):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ lein repl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with Boot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ boot repl -s wait&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can start nREPL either manually or by the facilities provided by your project&#39;s build tool (&lt;code&gt;tools.deps&lt;/code&gt;, Gradle, Maven, etc).&lt;/p&gt; &#xA;&lt;p&gt;After you get your nREPL server running go back to Emacs. Typing there &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;cider-connect&lt;/code&gt; will allow you to connect to the running nREPL server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; In Clojure(Script) buffers the command &lt;code&gt;cider-connect&lt;/code&gt; is bound to &lt;kbd&gt;C-c C-x (C-)c (C-)j&lt;/kbd&gt; and the command &lt;code&gt;cider-connect-cljs&lt;/code&gt; is bound to &lt;kbd&gt;C-c C-x (C-)c (C-)s&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Diving Deeper&lt;/h2&gt; &#xA;&lt;p&gt;CIDER packs a ton of functionality and you really want to be familiar with it, so you can fully empower your workflow. The best way to get acquainted with all available features is to go over the entire &lt;a href=&#34;https://docs.cider.mx/&#34;&gt;CIDER manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re into video lessons, you might also check out this &lt;a href=&#34;https://www.youtube.com/watch?v=aYA4AAjLfT0&#34;&gt;intro to CIDER demo&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Reference Card&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll find all of CIDER&#39;s essential commands and their keybindings in its one-page printable &lt;a href=&#34;https://github.com/clojure-emacs/cider/raw/master/refcard/cider-refcard.pdf&#34;&gt;quick reference card&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;New CIDER users might benefit from keeping a copy close to their keyboard.&lt;/p&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;p&gt;Start with CIDER&#39;s &lt;a href=&#34;https://github.com/clojure-emacs/cider/discussions&#34;&gt;discussions board&lt;/a&gt;. If it doesn&#39;t get the job done consider some of the other available &lt;a href=&#34;https://docs.cider.mx/cider/about/support.html&#34;&gt;support channels&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;An extensive changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/cider/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;h3&gt;The Core Team&lt;/h3&gt; &#xA;&lt;p&gt;The direction of the project is being stewarded by the CIDER core team. This group of long-term contributors manage releases, evaluate pull-requests, and does a lot of the groundwork on major new features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov&#34;&gt;Bozhidar Batsov&lt;/a&gt; (author &amp;amp; head maintainer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vspinu&#34;&gt;Vitalie Spinu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cichli&#34;&gt;Michael Griffiths&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/expez&#34;&gt;Lars Andersen&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CIDER Alumni&lt;/h3&gt; &#xA;&lt;p&gt;In addition, we&#39;d like to extend a special thanks the following retired CIDER core team members. Lovingly known as The Alumni:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kingtim&#34;&gt;Tim King&lt;/a&gt; (original author)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/technomancy&#34;&gt;Phil Hagelberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hugoduncan&#34;&gt;Hugo Duncan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purcell&#34;&gt;Steve Purcell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/malabarba&#34;&gt;Artur Malabarba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeffvalk&#34;&gt;Jeff Valk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Release policy&lt;/h2&gt; &#xA;&lt;p&gt;We’re following &lt;a href=&#34;http://semver.org/&#34;&gt;SemVer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can read more on the subject &lt;a href=&#34;https://docs.cider.mx/cider/about/release_policy.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Logo&lt;/h2&gt; &#xA;&lt;p&gt;CIDER&#39;s logo was created by &lt;a href=&#34;https://github.com/tapeinosyne&#34;&gt;@tapeinosyne&lt;/a&gt;. You can find the logo in various formats &lt;a href=&#34;https://github.com/clojure-emacs/cider/tree/master/logo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The logo is licensed under a &lt;a href=&#34;http://creativecommons.org/licenses/by-nc/4.0/deed.en_GB&#34;&gt;Creative Commons Attribution-NonCommercial 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Homepage&lt;/h2&gt; &#xA;&lt;p&gt;CIDER&#39;s homepage &lt;a href=&#34;https://cider.mx&#34;&gt;https://cider.mx&lt;/a&gt; is in the &lt;code&gt;gh-pages&lt;/code&gt; branch of this repository and is deployed automatically when changes are made to it.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s just a single &lt;code&gt;index.html&lt;/code&gt; file and a bit of Bootstrap 4. Contributions to it are very welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;While CIDER is free software and will always be, the project would benefit immensely from some funding. Raising a monthly budget of a couple of thousand dollars would make it possible to pay people to work on certain complex features, fund other development related stuff (e.g. hardware, conference trips) and so on. Raising a monthly budget of over $5000 would open the possibility of someone working full-time on the project which would speed up the pace of development significantly.&lt;/p&gt; &#xA;&lt;p&gt;We welcome both individual and corporate sponsors! We also offer a wide array of funding channels to account for your preferences (although currently &lt;a href=&#34;https://opencollective.com/cider&#34;&gt;Open Collective&lt;/a&gt; is our preferred funding platform).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re working in a company that&#39;s making significant use of CIDER we&#39;d appreciate it if you suggest to your company to become a CIDER sponsor.&lt;/p&gt; &#xA;&lt;p&gt;You can support the development of CIDER, &lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode&#34;&gt;clojure-mode&lt;/a&gt; and &lt;a href=&#34;https://github.com/clojure-emacs/inf-clojure&#34;&gt;inf-clojure&lt;/a&gt; via &lt;a href=&#34;https://opencollective.com/cider&#34;&gt;Open Collective&lt;/a&gt;, &lt;a href=&#34;https://github.com/sponsors/bbatsov&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://www.patreon.com/bbatsov&#34;&gt;Patreon&lt;/a&gt; and &lt;a href=&#34;https://www.paypal.me/bbatsov&#34;&gt;PayPal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Open Collective Backers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/cider/backer/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/backer/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/backer/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open Collective Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Become a sponsor and get your logo on our README on Github with a link to your site. [&lt;a href=&#34;https://opencollective.com/cider#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/cider/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cider/sponsor/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cider/sponsor/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;CIDER is distributed under the GNU General Public License, version 3.&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2012-2023 Bozhidar Batsov, Artur Malabarba, Tim King, Phil Hagelberg and &lt;a href=&#34;https://github.com/clojure-emacs/cider/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>