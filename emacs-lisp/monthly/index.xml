<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-01T02:01:02Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>copilot-emacs/copilot.el</title>
    <updated>2024-02-01T02:01:02Z</updated>
    <id>tag:github.com,2024-02-01:/copilot-emacs/copilot.el</id>
    <link href="https://github.com/copilot-emacs/copilot.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial Copilot plugin for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot.el&lt;/h1&gt; &#xA;&lt;p&gt;Copilot.el is an Emacs plugin for GitHub Copilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This plugin is unofficial and based on binaries provided by &lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;copilot.vim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need access to &lt;a href=&#34;https://github.com/features/copilot&#34;&gt;GitHub Copilot&lt;/a&gt; to use this plugin.&lt;/p&gt; &#xA;&lt;p&gt;Current maintainer: &lt;a href=&#34;https://github.com/emil-vdw&#34;&gt;@emil-vdw&lt;/a&gt;, &lt;a href=&#34;https://github.com/rakotomandimby&#34;&gt;@rakotomandimby&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Retired maintainer: &lt;a href=&#34;https://github.com/zerolfx&#34;&gt;@zerolfx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure your Emacs version is at least 27, the dependency package &lt;code&gt;editorconfig&lt;/code&gt; (&lt;a href=&#34;https://melpa.org/#/editorconfig&#34;&gt;melpa&lt;/a&gt;) and &lt;code&gt;jsonrpc&lt;/code&gt; (&lt;a href=&#34;https://elpa.gnu.org/packages/jsonrpc.html&#34;&gt;elpa&lt;/a&gt;, &amp;gt;= 1.0.24) are both installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; v18+. (You can specify the path to &lt;code&gt;node&lt;/code&gt; executable by setting &lt;code&gt;copilot-node-executable&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup &lt;code&gt;copilot.el&lt;/code&gt; as described in the next section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Copilot by &lt;code&gt;M-x copilot-login&lt;/code&gt;. You can also check the status by &lt;code&gt;M-x copilot-diagnose&lt;/code&gt; (&lt;code&gt;NotAuthorized&lt;/code&gt; means you don&#39;t have a valid subscription).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Example for Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Add package definition to &lt;code&gt;~/.doom.d/packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package! copilot&#xA;  :recipe (:host github :repo &#34;copilot-emacs/copilot.el&#34; :files (&#34;*.el&#34; &#34;dist&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Configure copilot in &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; accept completion from copilot and fallback to company&#xA;(use-package! copilot&#xA;  :hook (prog-mode . copilot-mode)&#xA;  :bind (:map copilot-completion-map&#xA;              (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion)&#xA;              (&#34;TAB&#34; . &#39;copilot-accept-completion)&#xA;              (&#34;C-TAB&#34; . &#39;copilot-accept-completion-by-word)&#xA;              (&#34;C-&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion-by-word)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Strongly recommend to enable &lt;code&gt;childframe&lt;/code&gt; option in &lt;code&gt;company&lt;/code&gt; module (&lt;code&gt;(company +childframe)&lt;/code&gt;) to prevent overlay conflict.&lt;/p&gt; &#xA; &lt;p&gt;If pressing tab to complete sometimes doesn&#39;t work you might want to bind completion to another key or try:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(after! (evil copilot)&#xA;  ;; Define the custom function that either accepts the completion or does the default behavior&#xA;  (defun my/copilot-tab-or-default ()&#xA;    (interactive)&#xA;    (if (and (bound-and-true-p copilot-mode)&#xA;             ;; Add any other conditions to check for active copilot suggestions if necessary&#xA;             )&#xA;        (copilot-accept-completion)&#xA;      (evil-insert 1))) ; Default action to insert a tab. Adjust as needed.&#xA;&#xA;  ;; Bind the custom function to &amp;lt;tab&amp;gt; in Evil&#39;s insert state&#xA;  (evil-define-key &#39;insert &#39;global (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my/copilot-tab-or-default))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example for Spacemacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Edit your &lt;code&gt;~/.spacemacs&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; ===================&#xA;;; dotspacemacs/layers&#xA;;; ===================&#xA;&#xA;;; add or uncomment the auto-completion layer&#xA;dotspacemacs-configuration-layers&#xA;&#39;(&#xA;  ...&#xA;  auto-completion&#xA;  ...&#xA; )&#xA;&#xA;;; add copilot.el to additional packages&#xA;dotspacemacs-additional-packages&#xA; &#39;((copilot :location (recipe&#xA;                       :fetcher github&#xA;                       :repo &#34;copilot-emacs/copilot.el&#34;&#xA;                       :files (&#34;*.el&#34; &#34;dist&#34;))))&#xA;&#xA;;; ========================&#xA;;; dotspacemacs/user-config&#xA;;; ========================&#xA;&#xA;;; accept completion from copilot and fallback to company&#xA;&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends))&#xA;  &#xA;(with-eval-after-load &#39;copilot&#xA;  (define-key copilot-completion-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion)&#xA;  (define-key copilot-completion-map (kbd &#34;TAB&#34;) &#39;copilot-accept-completion)&#xA;  (define-key copilot-completion-map (kbd &#34;C-TAB&#34;) &#39;copilot-accept-completion-by-word)&#xA;  (define-key copilot-completion-map (kbd &#34;C-&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion-by-word))&#xA;&#xA;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;General Configurations&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;h4&gt;1. Load &lt;code&gt;copilot.el&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Load via &lt;code&gt;straight.el&lt;/code&gt; or &lt;code&gt;quelpa&lt;/code&gt; (recommended)&lt;/h5&gt; &#xA; &lt;h6&gt;&lt;code&gt;straight.el&lt;/code&gt;:&lt;/h6&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :straight (:host github :repo &#34;copilot-emacs/copilot.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;))&#xA;  :ensure t)&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h6&gt;&lt;code&gt;quelpa&lt;/code&gt; + &lt;code&gt;quelpa-use-package&lt;/code&gt;:&lt;/h6&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :quelpa (copilot :fetcher github&#xA;                   :repo &#34;copilot-emacs/copilot.el&#34;&#xA;                   :branch &#34;main&#34;&#xA;                   :files (&#34;dist&#34; &#34;*.el&#34;)))&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;Option 2: Load manually&lt;/h5&gt; &#xA; &lt;p&gt;Please make sure you have these dependencies installed (available in ELPA/MELPA):&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;editorconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;After installing those, clone this repository then insert the below snippet into your config file.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path &#34;/path/to/copilot.el&#34;)&#xA;(require &#39;copilot)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;2. Configure completion&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Use &lt;code&gt;copilot-mode&lt;/code&gt; to automatically provide completions&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To customize the behavior of &lt;code&gt;copilot-mode&lt;/code&gt;, please check &lt;code&gt;copilot-enable-predicates&lt;/code&gt; and &lt;code&gt;copilot-disable-predicates&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;Option 2: Manually provide completions&lt;/h5&gt; &#xA; &lt;p&gt;You need to bind &lt;code&gt;copilot-complete&lt;/code&gt; to some key and call &lt;code&gt;copilot-clear-overlay&lt;/code&gt; inside &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h4&gt;3. Configure completion acceptation&lt;/h4&gt; &#xA; &lt;p&gt;Use tab to accept completions (you may also want to bind &lt;code&gt;copilot-accept-completion-by-word&lt;/code&gt; to some key):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key copilot-completion-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion)&#xA;(define-key copilot-completion-map (kbd &#34;TAB&#34;) &#39;copilot-accept-completion)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Programming language detection&lt;/h3&gt; &#xA;&lt;p&gt;Copilot.el detects the programming language of a buffer based on the major-mode name, stripping the &lt;code&gt;-mode&lt;/code&gt; part. Resulting languageId should match table &lt;a href=&#34;https://code.visualstudio.com/docs/languages/identifiers#_known-language-identifiers&#34;&gt;here&lt;/a&gt;. You can add unusual major-mode mappings to &lt;code&gt;copilot-major-mode-alist&lt;/code&gt;. Without the proper language set suggestions may be of poorer quality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;copilot-major-mode-alist &#39;(&#34;enh-ruby&#34; . &#34;ruby&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-diagnose&lt;/h4&gt; &#xA;&lt;p&gt;Check the current status of the plugin. Also you can check logs in the &lt;code&gt;*copilot events*&lt;/code&gt; buffer and stderr output in the &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-login&lt;/h4&gt; &#xA;&lt;p&gt;Login to GitHub, required for using the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-mode&lt;/h4&gt; &#xA;&lt;p&gt;Enable/disable copilot mode.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-complete&lt;/h4&gt; &#xA;&lt;p&gt;Try to complete at the current point.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion&lt;/h4&gt; &#xA;&lt;p&gt;Accept the current completion.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay&lt;/h4&gt; &#xA;&lt;p&gt;Clear copilot overlay in the current buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion-by-line / copilot-accept-completion-by-word&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;copilot-accept-completion&lt;/code&gt;, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-next-completion / copilot-previous-completion&lt;/h4&gt; &#xA;&lt;p&gt;Cycle through the completion list.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-logout&lt;/h4&gt; &#xA;&lt;p&gt;Logout from GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-node-executable&lt;/h4&gt; &#xA;&lt;p&gt;The executable path of Node.js.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-idle-delay&lt;/h4&gt; &#xA;&lt;p&gt;Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-predicates / copilot-disable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable/disable triggering Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-display-predicates / copilot-disable-display-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable/disable showing Copilot&#39;s completions in &lt;code&gt;copilot-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay-ignore-commands&lt;/h4&gt; &#xA;&lt;p&gt;A list of commands that won&#39;t cause the overlay to be cleared.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-network-proxy&lt;/h4&gt; &#xA;&lt;p&gt;Format: &lt;code&gt;&#39;(:host &#34;127.0.0.1&#34; :port 7890 :username: &#34;user&#34; :password: &#34;password&#34;)&lt;/code&gt;, where &lt;code&gt;:username&lt;/code&gt; and &lt;code&gt;:password&lt;/code&gt; are optional.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq copilot-network-proxy &#39;(:host &#34;127.0.0.1&#34; :port 7890))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Wrong Position of Other Completion Popups&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/company-overlay.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an example of using together with default frontend of &lt;code&gt;company-mode&lt;/code&gt;. Because both &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;copilot.el&lt;/code&gt; use overlay to show completion, so the conflict is inevitable. To solve the problem, I recommend you to use &lt;code&gt;company-box&lt;/code&gt; (only available on GUI), which is based on child frame rather than overlay.&lt;/p&gt; &#xA;&lt;p&gt;After using &lt;code&gt;company-box&lt;/code&gt;, you have:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/company-box.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In other editors (e.g. &lt;code&gt;VS Code&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;), completions from copilot and other sources can not show at the same time. But I decided to allow them to coexist, allowing you to choose a better one at any time.&lt;/p&gt; &#xA;&lt;h3&gt;Cursor Jump to End of Line When Typing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are using &lt;code&gt;whitespace-mode&lt;/code&gt;, make sure to remove &lt;code&gt;newline-mark&lt;/code&gt; from &lt;code&gt;whitespace-style&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have restarted your Emacs (and rebuild the plugin if necessary) after updating the plugin.&lt;/li&gt; &#xA; &lt;li&gt;Please enable event logging by customize &lt;code&gt;copilot-log-max&lt;/code&gt; (to e.g. 1000), then paste related logs in the &lt;code&gt;*copilot events*&lt;/code&gt; and &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/li&gt; &#xA; &lt;li&gt;If an exception is thrown, please also paste the stack trace (use &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; to enable stack trace).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setup Copilot without Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cycle through suggestions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Copilot minor-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;Add package to MELPA&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;These projects helped me a lot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TommyX12/company-tabnine/&#34;&gt;https://github.com/TommyX12/company-tabnine/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cryptobadger/flight-attendant.el&#34;&gt;https://github.com/cryptobadger/flight-attendant.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;https://github.com/github/copilot.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dsevilla/masquerade-mode-el</title>
    <updated>2024-02-01T02:01:02Z</updated>
    <id>tag:github.com,2024-02-01:/dsevilla/masquerade-mode-el</id>
    <link href="https://github.com/dsevilla/masquerade-mode-el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minor mode to add templating capabilities to any mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;masquerade-mode-el&lt;/h1&gt; &#xA;&lt;p&gt;Minor mode to add templating capabilities to any mode&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vspinu/sesman</title>
    <updated>2024-02-01T02:01:02Z</updated>
    <id>tag:github.com,2024-02-01:/vspinu/sesman</id>
    <link href="https://github.com/vspinu/sesman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Session manager for Emacs based IDEs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/sesman&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/sesman-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/sesman&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/sesman-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/vspinu/sesman&#34;&gt;&lt;img src=&#34;https://travis-ci.org/vspinu/sesman.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Generic Session Manager for Emacs&lt;/h2&gt; &#xA;&lt;p&gt;Sesman provides facilities for session management and interactive session association with the current contexts (e.g. project, directory, buffers). While sesman can be used to manage arbitrary &#34;sessions&#34;, it primary targets the Emacs based IDEs (&lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt;, &lt;a href=&#34;https://ess.r-project.org/&#34;&gt;ESS&lt;/a&gt;, &lt;a href=&#34;https://github.com/jaor/geiser&#34;&gt;Geiser&lt;/a&gt;, &lt;a href=&#34;https://github.com/dgutov/robe&#34;&gt;Robe&lt;/a&gt;, &lt;a href=&#34;https://common-lisp.net/project/slime/&#34;&gt;SLIME&lt;/a&gt; etc.)&lt;/p&gt; &#xA;&lt;p&gt;For Emacs based IDEs, session are commonly composed of one or more physical processes (sub-processes, sockets, websockets etc). For example in the current implementation of &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt; a session would be composed of one or more sesman connections (Clojure or ClojureScript). Each &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt; connection consists of user REPL buffer and two sub-processes, one for user eval communication and another for tooling (completion, inspector etc).&lt;/p&gt; &#xA;&lt;h3&gt;Concepts:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;session&#34; is a list of the form &lt;code&gt;(session-name ..other-stuff..)&lt;/code&gt; where &lt;code&gt;..other-stuff..&lt;/code&gt; is system dependent.&lt;/li&gt; &#xA; &lt;li&gt;&#34;system&#34; is generic name used for a tool which uses sesman (e.g. &lt;code&gt;CIDER&lt;/code&gt;, &lt;code&gt;ESS&lt;/code&gt; etc)&lt;/li&gt; &#xA; &lt;li&gt;&#34;contexts&#34; are Emacs objects which describe current context. For example &lt;code&gt;current-buffer&lt;/code&gt;, &lt;code&gt;default-directory&lt;/code&gt; and &lt;code&gt;project-current&lt;/code&gt; are such contexts. Context objects are used to create associations (links) between the current context and sessions. At any given time the user can link (unlink) sessions to (from) contexts. By default there are three types of contexts - buffer, directory and project, but systems can define their own specialized context types..&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sesman is composed of two parts, user interface, available as a sesman map and menu, and system interface consisting of a few generics and API functions.&lt;/p&gt; &#xA;&lt;h3&gt;User Interface&lt;/h3&gt; &#xA;&lt;p&gt;Consists of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lifecycle management commands (&lt;code&gt;sesman-start&lt;/code&gt;, &lt;code&gt;sesman-quit&lt;/code&gt; and &lt;code&gt;sesman-restart&lt;/code&gt;), and&lt;/li&gt; &#xA; &lt;li&gt;association management commands (&lt;code&gt;sesman-link-with-buffer&lt;/code&gt;, &lt;code&gt;sesman-link-with-directory&lt;/code&gt;, &lt;code&gt;sesman-link-with-project&lt;/code&gt; and &lt;code&gt;sesman-unlink&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From the user&#39;s prospective the work-flow is as follow. Start a session, either with &lt;code&gt;sesman-start&lt;/code&gt; (&lt;code&gt;C-c C-s C-s&lt;/code&gt;) or some of the system specific commands (&lt;code&gt;run-xyz&lt;/code&gt;, &lt;code&gt;xyz-jack-in&lt;/code&gt; etc). On startup each session is automatically associated with the least specific context (commonly a project). In the most common case the user has only one session open per project. In such case, no ambiguity arises when a system retrieves the current session. If multiple sessions are associated with the current context the ambiguity is automatically resolved through the system specific relevance mechanism. Usually it is the most recently used session.&lt;/p&gt; &#xA;&lt;p&gt;By default links with projects and directories are many-to-many in the sense that any session can be linked to multiple context and each context can be associated with multiple sessions. Buffers instead are 1-to-many. One buffer can be associated with only one session and a session can be associated with multiple buffers. This behavior is controlled by a custom &lt;code&gt;sesman-single-link-context-types&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;System Interface&lt;/h3&gt; &#xA;&lt;p&gt;Consists of several generics, of which only first three are strictly required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-start-session&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-quit-session&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-restart-session&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-session-info&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-context-types&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sesman-more-relevant-p&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sesman also provides [a range of utility functions][system api] functions to manipulate sessions, links and session components. Systems can register entire sessions with &lt;code&gt;sesman-register&lt;/code&gt; or add/remove objects one by one with &lt;code&gt;sesman-add-object&lt;/code&gt;/&lt;code&gt;sesman-remove-object&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Systems should link sesman map into their key-maps (ideally on &lt;code&gt;C-c C-s&lt;/code&gt;) and install sesman menu with &lt;code&gt;sesman-install-menu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Implementations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cider.mx/cider/usage/managing_connections.html&#34;&gt;CIDER implementation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- , which is a good mnemonic and is already used in CIDER and ESS. --&gt;</summary>
  </entry>
</feed>