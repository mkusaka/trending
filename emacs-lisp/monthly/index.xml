<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-01T02:00:11Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>minad/cape</title>
    <updated>2022-12-01T02:00:11Z</updated>
    <id>tag:github.com,2022-12-01:/minad/cape</id>
    <link href="https://github.com/minad/cape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü¶∏cape.el - Completion At Point Extensions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: cape.el - Let your completions fly! #+author: Daniel Mendler #+language: en #+export_file_name: cape.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Cape: (cape). #+texinfo_dir_desc: Completion At Point Extensions&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/packages/cape.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/cape.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/devel/cape.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/cape.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/cape&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/cape-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/cape&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/cape-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cape provides Completion At Point Extensions which can be used in combination with the [[https://github.com/minad/corfu][Corfu]] completion UI or the default completion UI. The completion backends used by &lt;del&gt;completion-at-point&lt;/del&gt; are so called &lt;del&gt;completion-at-point-functions&lt;/del&gt; (Capfs). In principle, the Capfs provided by Cape can also be used by [[https://github.com/company-mode/company-mode][Company]].&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/minad/cape/raw/logo/cape.png?raw=true&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can register the &lt;del&gt;cape-*&lt;/del&gt; functions in the &lt;del&gt;completion-at-point-functions&lt;/del&gt; list. This makes the backends available for completion, which is usually invoked by pressing &lt;del&gt;TAB&lt;/del&gt; or &lt;del&gt;M-TAB&lt;/del&gt;. The functions can also be invoked interactively to trigger the respective completion at point. You can bind them directly to a key in your user configuration. Notable commands/Capfs are &lt;del&gt;cape-line&lt;/del&gt; for completion of a line from the current buffer and &lt;del&gt;cape-file&lt;/del&gt; for completion of a file name. The command &lt;del&gt;cape-symbol&lt;/del&gt; is particularly useful for documentation of Elisp packages or configurations, since it completes Elisp symbols anywhere.&lt;/p&gt; &#xA;&lt;p&gt;Cape has the super power to transform Company backends into Capfs and merge multiple Capfs into a Super-Capf! These transformers allow you to still take advantage of Company backends even if you are not using Company as frontend.&lt;/p&gt; &#xA;&lt;p&gt;#+toc: headlines 8&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available Capfs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-dabbrev&lt;/del&gt;: Complete word from current buffers (see also &lt;del&gt;dabbrev-capf&lt;/del&gt; on Emacs 29)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-file&lt;/del&gt;: Complete file name&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-history&lt;/del&gt;: Complete from Eshell, Comint or minibuffer history&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-keyword&lt;/del&gt;: Complete programming language keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-symbol&lt;/del&gt;: Complete Elisp symbol&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-abbrev&lt;/del&gt;: Complete abbreviation (&lt;del&gt;add-global-abbrev&lt;/del&gt;, &lt;del&gt;add-mode-abbrev&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-ispell&lt;/del&gt;: Complete word from Ispell dictionary&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-dict&lt;/del&gt;: Complete word from dictionary file&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-line&lt;/del&gt;: Complete entire line from current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-tex&lt;/del&gt;: Complete unicode char from TeX command, e.g. &lt;del&gt;\hbar&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-sgml&lt;/del&gt;: Complete unicode char from Sgml entity, e.g., &lt;del&gt;&amp;amp;alpha&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-rfc1345&lt;/del&gt;: Complete unicode char using RFC 1345 mnemonics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cape is available on GNU ELPA and MELPA. You can install the package with &lt;del&gt;package-install&lt;/del&gt;. In the long term some of the Capfs provided by this package could be upstreamed into Emacs itself.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable Corfu completion UI ;; See the Corfu README for more configuration tips. (use-package corfu :init (global-corfu-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; Add extensions (use-package cape ;; Bind dedicated completion commands ;; Alternative prefix keys: C-c p, M-p, M-+, ... :bind ((&#34;C-c p p&#34; . completion-at-point) ;; capf (&#34;C-c p t&#34; . complete-tag) ;; etags (&#34;C-c p d&#34; . cape-dabbrev) ;; or dabbrev-completion (&#34;C-c p h&#34; . cape-history) (&#34;C-c p f&#34; . cape-file) (&#34;C-c p k&#34; . cape-keyword) (&#34;C-c p s&#34; . cape-symbol) (&#34;C-c p a&#34; . cape-abbrev) (&#34;C-c p i&#34; . cape-ispell) (&#34;C-c p l&#34; . cape-line) (&#34;C-c p w&#34; . cape-dict) (&#34;C-c p \&#34; . cape-tex) (&#34;C-c p _&#34; . cape-tex) (&#34;C-c p ^&#34; . cape-tex) (&#34;C-c p &amp;amp;&#34; . cape-sgml) (&#34;C-c p r&#34; . cape-rfc1345)) :init ;; Add &lt;code&gt;completion-at-point-functions&#39;, used by &lt;/code&gt;completion-at-point&#39;. (add-to-list &#39;completion-at-point-functions #&#39;cape-dabbrev) (add-to-list &#39;completion-at-point-functions #&#39;cape-file) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-history) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-keyword) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-tex) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-sgml) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-rfc1345) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-abbrev) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-ispell) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-dict) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-symbol) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-line) ) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Experimental features ** Company adapter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;/Wrap your Company backend in a Cape and turn it into a Capf!/&lt;/p&gt; &#xA;&lt;p&gt;Cape provides the adapter &lt;del&gt;cape-company-to-capf&lt;/del&gt; for Company backends. The adapter transforms Company backends to Capfs which are understood by the built-in Emacs completion mechanism. The function is approximately the inverse of the &lt;del&gt;company-capf&lt;/del&gt; backend from Company. The adapter can be used as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use Company backends as Capfs. (setq-local completion-at-point-functions (mapcar #&#39;cape-company-to-capf (list #&#39;company-files #&#39;company-ispell #&#39;company-dabbrev))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that the adapter does not require Company to be installed or enabled. Backends implementing the Company specification do not necessarily have to depend on Company, however in practice most backends do. The following shows a small example completion backend, which can be used with both &lt;del&gt;completion-at-point&lt;/del&gt; (Corfu, default completion) and Company.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar emojis &#39;((&#34;:-D&#34; . &#34;üòÄ&#34;) (&#34;;-)&#34; . &#34;üòâ&#34;) (&#34;:-/&#34; . &#34;üòï&#34;) (&#34;:-(&#34; . &#34;üôÅ&#34;) (&#34;:-*&#34; . &#34;üòô&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;(defun emoji-backend (action &amp;amp;optional arg &amp;amp;rest _) (pcase action (&#39;prefix (and (memq (char-before) &#39;(?: ?;)) (cons (string (char-before)) t))) (&#39;candidates (all-completions arg emojis)) (&#39;annotation (concat &#34; &#34; (cdr (assoc arg emojis)))) (&#39;post-completion (let ((str (buffer-substring (- (point) 3) (point)))) (delete-region (- (point) 3) (point)) (insert (cdr (assoc str emojis)))))))&lt;/p&gt; &#xA;&lt;p&gt;;; Register emoji backend with `completion-at-point&#39; (setq completion-at-point-functions (list (cape-company-to-capf #&#39;emoji-backend)))&lt;/p&gt; &#xA;&lt;p&gt;;; Register emoji backend with Company. (setq company-backends &#39;(emoji-backend)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;It is possible to merge/group multiple Company backends and use them as a single Capf using the &lt;del&gt;company--multi-backend-adapter&lt;/del&gt; function from Company. The adapter transforms multiple Company backends into a single Company backend, which can then be used as a Capf via &lt;del&gt;cape-company-to-capf&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;company) ;; Use the company-dabbrev and company-elisp backends together. (setq completion-at-point-functions (list (cape-company-to-capf (apply-partially #&#39;company--multi-backend-adapter &#39;(company-dabbrev company-elisp))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Super-Capf - Merging multiple Capfs&lt;/p&gt; &#xA;&lt;p&gt;/Throw multiple Capfs under the Cape and get a Super-Capf!/&lt;/p&gt; &#xA;&lt;p&gt;Cape supports merging multiple Capfs using the function &lt;del&gt;cape-super-capf&lt;/del&gt;. This feature is experimental and should only be used in special scenarios. &lt;em&gt;Don&#39;t use cape-super-capf if you are not 100% sure that you need it!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;del&gt;cape-super-capf&lt;/del&gt; is not needed if you want to use multiple Capfs which are tried one by one, e.g., it is perfectly possible to use &lt;del&gt;cape-file&lt;/del&gt; together with the Lsp-mode Capf or other programming mode Capfs by adding &lt;del&gt;cape-file&lt;/del&gt; to the &lt;del&gt;completion-at-point-functions&lt;/del&gt; list. The file completion will be available in comments and string literals. &lt;del&gt;cape-super-capf&lt;/del&gt; is only needed if you want to combine multiple Capfs, such that the candidates from multiple sources appear /together/ in the completion list at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Completion table merging works only for tables which are sufficiently well-behaved and tables which do not define completion boundaries. &lt;del&gt;cape-super-capf&lt;/del&gt; has the same restrictions as &lt;del&gt;completion-table-merge&lt;/del&gt; and &lt;del&gt;completion-table-in-turn&lt;/del&gt;. As a simple rule of thumb, &lt;del&gt;cape-super-capf&lt;/del&gt; works only well for static completion functions like &lt;del&gt;cape-dabbrev&lt;/del&gt;, &lt;del&gt;cape-keyword&lt;/del&gt;, &lt;del&gt;cape-ispell&lt;/del&gt;, etc., but not for complex multi-step completions like &lt;del&gt;cape-file&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Merge the dabbrev, dict and keyword capfs, display candidates together. (setq-local completion-at-point-functions (list (cape-super-capf #&#39;cape-dabbrev #&#39;cape-dict #&#39;cape-keyword)))&lt;/p&gt; &#xA;&lt;p&gt;;; Alternative: Define named Capf instead of using the anonymous Capf directly (defalias &#39;cape-dabbrev+dict+keyword (cape-super-capf #&#39;cape-dabbrev #&#39;cape-dict #&#39;cape-keyword)) (setq-local completion-at-point-functions (list #&#39;cape-dabbrev+dict+keyword)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See also the aforementioned &lt;del&gt;company--multi-backend-adapter&lt;/del&gt; from Company, which allows you to merge multiple Company backends.&lt;/p&gt; &#xA;&lt;p&gt;** Capf-Buster - Cache busting&lt;/p&gt; &#xA;&lt;p&gt;/The Capf-Buster ensures that you always get a fresh set of candidates!/&lt;/p&gt; &#xA;&lt;p&gt;If a Capf caches the candidates for too long we can use a cache busting Capf-transformer. For example the Capf merging function &lt;del&gt;cape-super-capf&lt;/del&gt; creates a Capf, which caches the candidates for the whole lifetime of the Capf. Therefore you may want to combine a merged Capf with a cache buster under some circumstances. It is noteworthy that the &lt;del&gt;company-capf&lt;/del&gt; backend from Company refreshes the completion table frequently. With the &lt;del&gt;cape-capf-buster&lt;/del&gt; we can achieve a similarly refreshing strategy.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq-local completion-at-point-functions (list (cape-capf-buster #&#39;some-caching-capf))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Other Capf transformers&lt;/p&gt; &#xA;&lt;p&gt;Cape provides a set of additional Capf transformation functions, which are mostly meant to used by experts to fine tune the Capf behavior and Capf interaction. These can either be used as advices (=cape-wrap-&lt;em&gt;)= or to create a new Capf from an existing Capf (=cape-capf-&lt;/em&gt;=). You can bind the Capfs created by the Capf transformers with =defalias= to a function symbol.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-interactive-capf&lt;/del&gt;: Create a Capf which can be called interactively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-accept-all&lt;/del&gt;, &lt;del&gt;cape-capf-accept-all&lt;/del&gt;: Create a Capf which accepts every input as valid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-silent&lt;/del&gt;, &lt;del&gt;cape-capf-silent&lt;/del&gt;: Wrap a chatty Capf and silence it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-purify&lt;/del&gt;, &lt;del&gt;cape-capf-purify&lt;/del&gt;: Purify a broken Capf and ensure that it does not modify the buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-noninterruptible&lt;/del&gt;, &lt;del&gt;cape-capf-noninterruptible:&lt;/del&gt; Protect a Capf which does not like to be interrupted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-case-fold&lt;/del&gt;, &lt;del&gt;cape-capf-case-fold&lt;/del&gt;: Create a Capf which is case insensitive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-properties&lt;/del&gt;, &lt;del&gt;cape-capf-properties&lt;/del&gt;: Add completion properties to a Capf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-predicate&lt;/del&gt;, &lt;del&gt;cape-capf-predicate&lt;/del&gt;: Add candidate predicate to a Capf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-prefix-length&lt;/del&gt;, &lt;del&gt;cape-capf-prefix-length&lt;/del&gt;: Enforce a minimal prefix length.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the following we show a few example configurations, which have come up on the [[https://github.com/minad/cape/issues][Cape]] or [[https://github.com/minad/corfu/issues][Corfu issue tracker]] or the [[https://github.com/minad/corfu/wiki][Corfu wiki.]] I use some of these tweaks in my personal configuration.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Example 1: Sanitize the `pcomplete-completions-at-point&#39; Capf. ;; The Capf has undesired side effects on Emacs 28 and earlier. (advice-add &#39;pcomplete-completions-at-point :around #&#39;cape-wrap-silent) (advice-add &#39;pcomplete-completions-at-point :around #&#39;cape-wrap-purify)&lt;/p&gt; &#xA;&lt;p&gt;;; Example 2: Configure a Capf with a specific auto completion prefix length (setq-local completion-at-point-functions (list (cape-capf-prefix-length #&#39;cape-dabbrev 2)))&lt;/p&gt; &#xA;&lt;p&gt;;; Example 3: Named Capf (defalias &#39;cape-dabbrev-min-2 (cape-capf-prefix-length #&#39;cape-dabbrev 2)) (setq-local completion-at-point-functions (list #&#39;cape-dabbrev-min-2))&lt;/p&gt; &#xA;&lt;p&gt;;; Example 4: Define a defensive Dabbrev Capf, which accepts all inputs. ;; If you use Corfu and &lt;code&gt;corfu-auto=t&#39;, the first candidate won&#39;t be auto ;; selected even if &lt;/code&gt;corfu-preselect-first=t&#39;! You can use this instead of ;; `cape-dabbrev&#39;. (defun my-cape-dabbrev-accept-all () (cape-wrap-accept-all #&#39;cape-dabbrev)) (add-to-list &#39;completion-at-point-functions #&#39;my-cape-dabbrev-accept-all)&lt;/p&gt; &#xA;&lt;p&gt;;; Example 5: Define interactive Capf which can be bound to a key. ;; Here we wrap the `elisp-completion-at-point&#39; such that we can ;; complete Elisp code explicitly in arbitrary buffers. (global-set-key (kbd &#34;C-c p e&#34;) (cape-interactive-capf #&#39;elisp-completion-at-point))&lt;/p&gt; &#xA;&lt;p&gt;;; Example 6: Ignore :keywords in Elisp completion. (defun ignore-elisp-keywords (sym) (not (keywordp sym))) (setq-local completion-at-point-functions (list (cape-capf-predicate #&#39;elisp-completion-at-point #&#39;ignore-elisp-keywords))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[https://elpa.gnu.org/packages/cape.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-mirror/emacs</title>
    <updated>2022-12-01T02:00:11Z</updated>
    <id>tag:github.com,2022-12-01:/emacs-mirror/emacs</id>
    <link href="https://github.com/emacs-mirror/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2022 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; &#xA;&lt;p&gt;This directory tree holds version 30.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; &#xA;&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; &#xA;&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; &#xA;&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&#34;mailto:bug-gnu-emacs@gnu.org&#34;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; &#xA;&lt;p&gt;See the &#34;Bugs&#34; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&#34;https://savannah.gnu.org/mail/?group=emacs&#34;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&#34;https://lists.gnu.org/&#34;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; &#xA;&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; &#xA;&lt;p&gt;There are several subdirectories:&lt;/p&gt; &#xA;&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script.&lt;/p&gt; &#xA;&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; &#xA;&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; &#xA;&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; &#xA;&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ananthakumaran/tide</title>
    <updated>2022-12-01T02:00:11Z</updated>
    <id>tag:github.com,2022-12-01:/ananthakumaran/tide</id>
    <link href="https://github.com/ananthakumaran/tide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tide - TypeScript Interactive Development Environment for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tide&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ananthakumaran/tide/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TypeScript Interactive Development Environment for Emacs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/jEwgPsd.gif&#34;&gt;screencast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tide requires Emacs 25 or later. We recommend Emacs 27 or later with native json support.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt; v0.12.0 or greater.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;http://www.typescriptlang.org/docs/handbook/tsconfig-json.html&#34;&gt;tsconfig.json&lt;/a&gt; or &lt;a href=&#34;https://code.visualstudio.com/docs/languages/jsconfig&#34;&gt;jsconfig.json&lt;/a&gt; is present in the root folder of the project.&lt;/li&gt; &#xA; &lt;li&gt;Tide is available in &lt;a href=&#34;http://melpa.org/#/tide&#34;&gt;melpa&lt;/a&gt;. You can install tide via package-install &lt;kbd&gt;M-x package-install [ret] tide&lt;/kbd&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;TypeScript&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun setup-tide-mode ()&#xA;  (interactive)&#xA;  (tide-setup)&#xA;  (flycheck-mode +1)&#xA;  (setq flycheck-check-syntax-automatically &#39;(save mode-enabled))&#xA;  (eldoc-mode +1)&#xA;  (tide-hl-identifier-mode +1)&#xA;  ;; company is an optional dependency. You have to&#xA;  ;; install it separately via package-install&#xA;  ;; `M-x package-install [ret] company`&#xA;  (company-mode +1))&#xA;&#xA;;; aligns annotation to the right hand side&#xA;(setq company-tooltip-align-annotations t)&#xA;&#xA;;; formats the buffer before saving&#xA;(add-hook &#39;before-save-hook &#39;tide-format-before-save)&#xA;&#xA;(add-hook &#39;typescript-mode-hook #&#39;setup-tide-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Format options&lt;/h4&gt; &#xA;&lt;p&gt;Format options can be specified in multiple ways.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;via elisp&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq tide-format-options &#39;(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;via tsfmt.json (should be present in the root folder along with tsconfig.json)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;indentSize&#34;: 4,&#xA;  &#34;tabSize&#34;: 4,&#xA;  &#34;insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces&#34;: false,&#xA;  &#34;placeOpenBraceOnNewLineForFunctions&#34;: false,&#xA;  &#34;placeOpenBraceOnNewLineForControlBlocks&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/Microsoft/TypeScript/raw/v3.3.1/src/server/protocol.ts#L2858-L2890&#34;&gt;here&lt;/a&gt; for the full list of supported format options.&lt;/p&gt; &#xA;&lt;h4&gt;TSX&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;web-mode)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.tsx\\&#39;&#34; . web-mode))&#xA;(add-hook &#39;web-mode-hook&#xA;          (lambda ()&#xA;            (when (string-equal &#34;tsx&#34; (file-name-extension buffer-file-name))&#xA;              (setup-tide-mode))))&#xA;;; enable typescript-tslint checker&#xA;(flycheck-add-mode &#39;typescript-tslint &#39;web-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tide also provides support for editing js &amp;amp; jsx files. Tide checkers &lt;code&gt;javascript-tide&lt;/code&gt; and &lt;code&gt;jsx-tide&lt;/code&gt; are not enabled by default for js &amp;amp; jsx files. It can be enabled by setting &lt;a href=&#34;http://www.flycheck.org/en/latest/user/syntax-checkers.html#variable-flycheck-checker&#34;&gt;&lt;code&gt;flycheck-checker&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;JavaScript&lt;/h4&gt; &#xA;&lt;p&gt;Create &lt;code&gt;jsconfig.json&lt;/code&gt; in the root folder of your project. &lt;code&gt;jsconfig.json&lt;/code&gt; is &lt;code&gt;tsconfig.json&lt;/code&gt; with &lt;code&gt;allowJs&lt;/code&gt; attribute set to true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;compilerOptions&#34;: {&#xA;    &#34;target&#34;: &#34;es2017&#34;,&#xA;    &#34;allowSyntheticDefaultImports&#34;: true,&#xA;    &#34;noEmit&#34;: true,&#xA;    &#34;checkJs&#34;: true,&#xA;    &#34;jsx&#34;: &#34;react&#34;,&#xA;    &#34;lib&#34;: [ &#34;dom&#34;, &#34;es2017&#34; ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;js2-mode-hook #&#39;setup-tide-mode)&#xA;;; configure javascript-tide checker to run after your default javascript checker&#xA;(flycheck-add-next-checker &#39;javascript-eslint &#39;javascript-tide &#39;append)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSX&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;web-mode)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.jsx\\&#39;&#34; . web-mode))&#xA;(add-hook &#39;web-mode-hook&#xA;          (lambda ()&#xA;            (when (string-equal &#34;jsx&#34; (file-name-extension buffer-file-name))&#xA;              (setup-tide-mode))))&#xA;;; configure jsx-tide checker to run after your default jsx checker&#xA;(flycheck-add-mode &#39;javascript-eslint &#39;web-mode)&#xA;(flycheck-add-next-checker &#39;javascript-eslint &#39;jsx-tide &#39;append)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use Package&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package tide&#xA;  :ensure t&#xA;  :after (typescript-mode company flycheck)&#xA;  :hook ((typescript-mode . tide-setup)&#xA;         (typescript-mode . tide-hl-identifier-mode)&#xA;         (before-save . tide-format-before-save)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keyboard shortcuts&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;M-.&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the definition of the symbol at point. With a prefix arg, Jump to the type definition.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;M-,&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Return to your pre-jump position.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-restart-server&lt;/kbd&gt; Restart tsserver. This would come in handy after you edit tsconfig.json or checkout a different branch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-documentation-at-point&lt;/kbd&gt; Load the documentation for the symbol at point to buffer &lt;code&gt;*tide-documentation*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-references&lt;/kbd&gt; List all references to the symbol at point in a buffer. References can be navigated using &lt;kbd&gt;n&lt;/kbd&gt; and &lt;kbd&gt;p&lt;/kbd&gt;. Press &lt;kbd&gt;enter&lt;/kbd&gt; to open the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-project-errors&lt;/kbd&gt; List all errors in the project. Errors can be navigated using &lt;kbd&gt;n&lt;/kbd&gt; and &lt;kbd&gt;p&lt;/kbd&gt;. Press &lt;kbd&gt;enter&lt;/kbd&gt; to open the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-error-at-point&lt;/kbd&gt; Load the details of the error at point to buffer &lt;code&gt;*tide-error*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-rename-symbol&lt;/kbd&gt; Rename all occurrences of the symbol at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-rename-file&lt;/kbd&gt; Rename current file and all it&#39;s references in other files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-format&lt;/kbd&gt; Format the current region or buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-fix&lt;/kbd&gt; Apply code fix for the error at point. When invoked with a prefix arg, apply code fix for all the errors in the file that are similar to the error at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-add-tslint-disable-next-line&lt;/kbd&gt; If the point is on one or more tslint errors, add a &lt;code&gt;tslint:disable-next-line&lt;/code&gt; flag on the previous line to silence the errors. Or, if a flag already exists on the previous line, modify the flag to silence the errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-refactor&lt;/kbd&gt; Refactor code at point or current region.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-jsdoc-template&lt;/kbd&gt; Insert JSDoc comment template at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-verify-setup&lt;/kbd&gt; Show the version of tsserver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-organize-imports&lt;/kbd&gt; Organize imports in the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x tide-list-servers&lt;/kbd&gt; List the &lt;code&gt;tsserver&lt;/code&gt; processes launched by tide.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xref&lt;/li&gt; &#xA; &lt;li&gt;ElDoc&lt;/li&gt; &#xA; &lt;li&gt;Auto complete&lt;/li&gt; &#xA; &lt;li&gt;Flycheck&lt;/li&gt; &#xA; &lt;li&gt;Jump to definition, Jump to type definition&lt;/li&gt; &#xA; &lt;li&gt;Find occurrences&lt;/li&gt; &#xA; &lt;li&gt;Rename symbol&lt;/li&gt; &#xA; &lt;li&gt;Imenu&lt;/li&gt; &#xA; &lt;li&gt;Compile On Save&lt;/li&gt; &#xA; &lt;li&gt;Highlight Identifiers&lt;/li&gt; &#xA; &lt;li&gt;Code Fixes&lt;/li&gt; &#xA; &lt;li&gt;Code Refactor&lt;/li&gt; &#xA; &lt;li&gt;Organize Imports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ananthakumaran/tide/raw/master/doc/architecture.mmd.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tide uses &lt;a href=&#34;https://github.com/Microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29&#34;&gt;tsserver&lt;/a&gt; as the backend for most of the features. It writes out a comprehensive log file which can be captured by setting &lt;code&gt;tide-tsserver-process-environment&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq tide-tsserver-process-environment &#39;(&#34;TSS_LOG=-level verbose -file /tmp/tss.log&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do I configure tide to use a specific version of TypeScript compiler?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For TypeScript 2.0 and above, you can customize the &lt;code&gt;tide-tsserver-executable&lt;/code&gt; variable. For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq tide-tsserver-executable &#34;node_modules/typescript/bin/tsserver&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sadly, this won&#39;t work for TypeScript &amp;lt; 2.0. You can clone the repo locally and checkout the old version though.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How do I copy the type information shown in the minibuffer?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tide has the command &lt;code&gt;tide-documentation-at-point&lt;/code&gt; to load the documentation for the symbol at point to buffer &lt;code&gt;*tide-documentation*&lt;/code&gt; from where it can be copied. By default, tide will not open this buffer if only type information is available. This behavior can be overridden by setting &lt;code&gt;(setq tide-always-show-documentation t)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Variables&lt;/h3&gt; &#xA;&lt;h5&gt;tide-sync-request-timeout &lt;code&gt;2&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The number of seconds to wait for a sync response.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-flags &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;List of additional flags to provide when starting tsserver.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-process-environment &lt;code&gt;&#39;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;List of extra environment variables to use when starting tsserver.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-executable &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of tsserver executable to run instead of the bundled tsserver.&lt;/p&gt; &#xA;&lt;p&gt;This may either be an absolute path or a relative path. Relative paths are resolved against the project root directory.&lt;/p&gt; &#xA;&lt;p&gt;Note that this option only works with TypeScript version 2.0 and above.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tscompiler-executable &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of tsc executable.&lt;/p&gt; &#xA;&lt;p&gt;This may either be an absolute path or a relative path. Relative paths are resolved against the project root directory.&lt;/p&gt; &#xA;&lt;h5&gt;tide-node-executable &lt;code&gt;&#34;node&#34;&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name or path of the node executable binary file.&lt;/p&gt; &#xA;&lt;h5&gt;tide-node-flags &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;List of flags to provide to node when starting tsserver.&lt;/p&gt; &#xA;&lt;p&gt;Useful for large TypeScript codebases which need to set max-old-space-size to a higher value.&lt;/p&gt; &#xA;&lt;h5&gt;tide-post-code-edit-hook &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Hook run after code edits are applied in a buffer.&lt;/p&gt; &#xA;&lt;h5&gt;tide-sort-completions-by-kind &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether completions should be sorted by kind.&lt;/p&gt; &#xA;&lt;h5&gt;tide-format-options &lt;code&gt;&#39;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Format options plist.&lt;/p&gt; &#xA;&lt;h5&gt;tide-user-preferences &lt;code&gt;&#39;(:includeCompletionsForModuleExports t :includeCompletionsWithInsertText t :allowTextChangesInNewFiles t :generateReturnInDocTemplate t)&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;User preference plist used on the configure request.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://github.com/Microsoft/TypeScript/raw/17eaf50b/src/server/protocol.ts#L2684&#34;&gt;https://github.com/Microsoft/TypeScript/blob/17eaf50b/src/server/protocol.ts#L2684&lt;/a&gt; for the full list of available options.&lt;/p&gt; &#xA;&lt;h5&gt;tide-disable-suggestions &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Disable suggestions.&lt;/p&gt; &#xA;&lt;p&gt;If set to non-nil, suggestions will not be shown in flycheck errors and tide-project-errors buffer.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-setup-company-backend &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Add &lt;code&gt;company-tide&lt;/code&gt; to &lt;code&gt;company-backends&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-ignore-case &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;CASE will be ignored in completion if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-show-source &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Completion dropdown will contain completion source if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-fuzzy &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Allow fuzzy completion.&lt;/p&gt; &#xA;&lt;p&gt;By default only candidates with exact prefix match are shown. If set to non-nil, candidates with match anywhere inside the name are shown.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-detailed &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Completion dropdown will contain detailed method information if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-completion-enable-autoimport-suggestions &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether to include external module exports in completions.&lt;/p&gt; &#xA;&lt;h5&gt;tide-enable-xref &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Whether to enable xref integration.&lt;/p&gt; &#xA;&lt;h5&gt;tide-navto-item-filter &lt;code&gt;#&#39;tide-navto-item-filter-default&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The filter for items returned by tide-nav. Defaults to class, interface, type, enum&lt;/p&gt; &#xA;&lt;h5&gt;tide-jump-to-definition-reuse-window &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Reuse existing window when jumping to definition.&lt;/p&gt; &#xA;&lt;h5&gt;tide-imenu-flatten &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Imenu index will be flattened if set to non-nil.&lt;/p&gt; &#xA;&lt;h5&gt;tide-allow-popup-select &lt;code&gt;&#39;(code-fix refactor)&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The list of commands where popup selection is allowed.&lt;/p&gt; &#xA;&lt;h5&gt;tide-always-show-documentation &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Show the documentation window even if only type information is available.&lt;/p&gt; &#xA;&lt;h5&gt;tide-server-max-response-length &lt;code&gt;102400&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Maximum allowed response length from tsserver. Any response greater than this would be ignored.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-locator-function &lt;code&gt;#&#39;tide-tsserver-locater-npmlocal-projectile-npmglobal&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Function used by tide to locate tsserver.&lt;/p&gt; &#xA;&lt;h5&gt;tide-project-cleanup-delay &lt;code&gt;60&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The number of idle seconds to wait before cleaning up unused tsservers. Use &lt;code&gt;nil&lt;/code&gt; to disable automatic cleanups. See also &lt;code&gt;tide-do-cleanups&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;tide-tsserver-start-method &lt;code&gt;&#39;immediate&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The method by which tide starts tsserver. &lt;code&gt;immediate&lt;/code&gt; causes tide to start a tsserver instance as soon as &lt;code&gt;tide-mode&lt;/code&gt; is turned on. &lt;code&gt;manual&lt;/code&gt; means that tide will start a tsserver only when the user manually starts one.&lt;/p&gt; &#xA;&lt;h5&gt;tide-default-mode &lt;code&gt;&#34;TS&#34;&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The default mode to open buffers not backed by files (e.g. Org source blocks) in.&lt;/p&gt; &#xA;&lt;h5&gt;tide-recenter-after-jump &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Recenter buffer after jumping to definition&lt;/p&gt; &#xA;&lt;h5&gt;tide-jump-to-fallback &lt;code&gt;#&#39;tide-jump-to-fallback-not-given&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The fallback jump function to use when implementations aren&#39;t available.&lt;/p&gt; &#xA;&lt;h5&gt;tide-filter-out-warning-completions &lt;code&gt;nil&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Completions whose &lt;code&gt;:kind&lt;/code&gt; property is &#34;warning&#34; will be filtered out if set to non-nil. This option is useful for Javascript code completion, because tsserver often returns a lot of irrelevant completions whose &lt;code&gt;:kind&lt;/code&gt; property is &#34;warning&#34; for Javascript code. You can fix this behavior by setting this variable to non-nil value for Javascript buffers using &lt;code&gt;setq-local&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;h5&gt;tide-native-json-parsing `(and&lt;/h5&gt; &#xA;&lt;p&gt;(&amp;gt;= emacs-major-version 27) (functionp &#39;json-serialize) (functionp &#39;json-parse-buffer) (functionp &#39;json-parse-string))`&lt;/p&gt; &#xA;&lt;p&gt;Use native JSON parsing (only emacs &amp;gt;= 27).&lt;/p&gt; &#xA;&lt;h5&gt;tide-save-buffer-after-code-edit &lt;code&gt;t&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Save the buffer after applying code edits.&lt;/p&gt; &#xA;&lt;h5&gt;tide-hl-identifier-idle-time &lt;code&gt;0.5&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;How long to wait after user input before highlighting the current identifier.&lt;/p&gt;</summary>
  </entry>
</feed>