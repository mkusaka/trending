<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-01T01:53:05Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Alexander-Miller/treemacs</title>
    <updated>2025-08-01T01:53:05Z</updated>
    <id>tag:github.com,2025-08-01:/Alexander-Miller/treemacs</id>
    <link href="https://github.com/Alexander-Miller/treemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;-&lt;em&gt;- fill-column: 120 org-list-indent-offset: 1 toc-org-max-depth: 2 org-hide-emphasis-markers: nil -&lt;/em&gt;-&lt;/h1&gt; &#xA;&lt;p&gt;#+STARTUP: noinlineimages&lt;/p&gt; &#xA;&lt;p&gt;[[https://gitter.im/treemacs/community][file:https://badges.gitter.im/Alexander-Miller/treemacs.png]] [[https://melpa.org/#/treemacs][file:https://melpa.org/packages/treemacs-badge.svg]] [[https://stable.melpa.org/#/treemacs][file:https://stable.melpa.org/packages/treemacs-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Treemacs - a tree layout file explorer for Emacs :noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:screenshots/screenshot.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Content :TOC:noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#state-of-development][State of Development]]&lt;/li&gt; &#xA; &lt;li&gt;[[#quick-feature-overview][Quick Feature Overview]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#fancy-gifs][Fancy Gifs!]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#quick-start][Quick Start]]&lt;/li&gt; &#xA; &lt;li&gt;[[#detailed-feature-list][Detailed Feature List]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#projects-and-workspaces][Projects and Workspaces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#conveniently-editing-your-projects-and-workspaces][Conveniently Editing Your Projects and Workspaces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#navigation-without-projects-and-workspaces][Navigation without Projects and Workspaces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#frame-locality][Frame Locality]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#mouse-interface][Mouse Interface]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#follow-mode][Follow-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tag-follow-mode][Tag-follow-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#fringe-indicator-mode][Fringe-indicator-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#git-mode][Git-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#filewatch-mode][Filewatch-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#file-management][File Management]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#indent-guide-mode][Indent-guide-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#git-commit-diff-mode][Git-commit-diff-mode]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#session-persistence][Session Persistence]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#terminal-compatibility][Terminal Compatibility]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tag-view][Tag View]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#current-directory-awareness][Current-Directory Awareness]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tramp-support][Tramp Support]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#org-support][Org Support]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#theme-support][Theme Support]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#peeking][Peeking]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#additional-packages][Additional Packages]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#treemacs-as-a-framework][Treemacs as a Framework]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#configuration][Configuration]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#variables][Variables]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#faces][Faces]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#evil-compatibility][Evil compatibility]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#customizing-themes-and-icons][Customizing Themes and Icons]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#keymap][Keymap]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#unbound-functions][Unbound functions]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#default-keymaps][Default keymaps]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#compatibility][Compatibility]]&lt;/li&gt; &#xA; &lt;li&gt;[[#faq][FAQ]]&lt;/li&gt; &#xA; &lt;li&gt;[[#contributing][Contributing]]&lt;/li&gt; &#xA; &lt;li&gt;[[#working-with-the-code-base][Working With The Code Base]]&lt;/li&gt; &#xA; &lt;li&gt;[[#dependencies][Dependencies]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;State of Development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Treemacs is currently in an active - but low intensity - state of development. New features are worked on, PRs will be looked at and issues answered - eventually. My time budget is limited, so looking for new work just means looking at whatever is currently at the top of my inbox. If you feel like the ticket you&#39;ve opened has gone unanswered for a while feel free to give it a bump - you are explicitly encouraged to do so.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Quick Feature Overview Treemacs is a file and project explorer similar to NeoTree or vim&#39;s NerdTree, but largely inspired by the Project Explorer in Eclipse. It shows the file system outlines of your projects in a simple tree layout allowing quick navigation and exploration, while also possessing &lt;em&gt;basic&lt;/em&gt; file management utilities. Specifically a quick feature overview looks as follows:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Project management :: Treemacs lets you view multiple file trees - projects - at once and quickly add or remove them, and groups projects in workspaces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy navigation :: quickly move between projects or use shortcuts to jump to parent or neighbouring nodes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Versatile file access :: decide exactly how and where a file will be opened, including using &lt;del&gt;ace-window&lt;/del&gt; to choose a window or launching an external application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Understanding of frames :: every frame will receive its own treemacs buffer that will live and die with that frame.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finding of files and tags :: Treemacs can follow along and keep in focus the currently selected file or even the tag at point, either manually or automatically using either &lt;del&gt;treemacs-follow-mode&lt;/del&gt; or &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Git Integration :: Treemacs can use different faces for files and directories based on their git status. The git process is run asynchronously, minimizing its performance impact.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/deb0ch/emacs-winum][Winum]] &amp;amp; [[https://github.com/abo-abo/ace-window][ace-window]] compatibility :: The presence of treemacs will not interfere with winum&#39;s and ace-window&#39;s usual layouts.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/bbatsov/projectile][Projectile/project.el]] integration :: the &lt;del&gt;treemacs-projectile&lt;/del&gt; package lets you quickly add your projectile projects to the treemacs workspace. &lt;del&gt;project.el&lt;/del&gt; compatibility is built-in.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Simple mouse interface :: Left clicks will work the same as you&#39;re used to from with graphical applications&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Session persistence :: Treemacs automatically saves and restores your workspaces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dashing good looks :: Treemacs uses (optionally resizable) png images in HD 22x22 resolution for its icons. When run in a terminal a simple fallback is used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tag view :: Treemacs can display files&#39; tags. All file types that Emacs can generate a (semantic) imenu index for are supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visual feedback :: When it would otherwise be difficult to see the message in the minibuffer success/failure is indicated with pulse.el.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Theming support :: Treemacs supports using multiple icon themes that can be changed at will.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ease of use :: Treemacs offers many configuration options, but comes with a set of (what hopefully should be) sane defaults. Installation aside there are two obligatory pieces of setup: 1) Choosing convenient keybindings to run treemacs and 2) If you use evil: requiring &lt;del&gt;treemacs-evil&lt;/del&gt; to integrate treemacs with evil and enable j/k navigation. More on both below. You can also summon helpful hydras with &lt;del&gt;?&lt;/del&gt; and &lt;del&gt;C-?&lt;/del&gt; that will remind you of treemacs&#39; many keybindings and features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bookmark integration :: Running &lt;del&gt;bookmark-set&lt;/del&gt; on a Treemacs item will store a bookmark to Treemacs buffer for that item.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Fancy Gifs!&lt;/p&gt; &#xA;&lt;p&gt;(The font used in the gifs is Fantasque Sans Mono)&lt;/p&gt; &#xA;&lt;p&gt;Various ways to open files: [[file:screenshots/open-files.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Workspace administration with org-mode: [[file:screenshots/workspace-edit.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Automatic reaction to changes in the file system: [[file:screenshots/filewatch.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Automatic reaction to changes in git: [[file:screenshots/git.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Full-featured mouse interface: [[file:screenshots/mouse-interface.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Including moving and opening files via mouse drag: [[file:screenshots/mouse-drag.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Resizable icons: [[file:screenshots/icon-resize.gif]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Quick Start If you don&#39;t care about reading the full readme here&#39;s a list of some bare bones basics to get you started:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;First of all: press &lt;del&gt;?&lt;/del&gt; to summon the helpful hydra: [[file:screenshots/hydra.png]]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use evil don&#39;t forget to also install &lt;del&gt;treemacs-evil&lt;/del&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use projectile you can install &lt;del&gt;treemacs-projectile&lt;/del&gt; to allow quickly add your projectile projects to treemacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Treemacs doesn&#39;t bind any global keys, you need to use whatever fits you best. A full install setup can be found [[#installation][below]]. Otherwise just add a keybind for &lt;del&gt;treemacs&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For navigation use n/p (j/k when evil), M-n/M-p to move to same-height neighbour, u to go to parent, and C-j/C-k to move between projects.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s half a dozen different ways to open nodes, all bound under o as prefix. Pick your favourite.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TAB and RET are particularly configurable. See &lt;del&gt;treemacs-TAB/RET-actions-config&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Projects administration is bound under the &lt;del&gt;C-c C-p&lt;/del&gt; prefix.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Detailed Feature List ** Projects and Workspaces If you&#39;ve previously used a different explorer like NeoTree or NerdTree - or an earlier version of treemacs for that matter - you are probably used to a display system wherein you see exactly a single file tree whose exact root you can arbitrarily change. This system makes it difficult to work on and switch between multiple projects. Treemacs used to (and still does) remedy that limitation by making every treemacs buffer unique to its frame, but it has now been redesigned to be able to display multiple file trees - projects - at once.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In treemacs a workspace is simply a (named) collection of projects, while a project mostly consists of 2 things: its location in the file system and its name. This is the info that you need to provide when you want to add a new project to your workspace. Just like projects you can add, remove, rename and switch between workspaces at any time.&lt;/p&gt; &#xA;&lt;p&gt;This design approach has various advantages and disadvantages. It is now no longer possible to &#34;free roam&#34; in the file system with treemacs, i.e. you can no longer arbitrarily switch the single file tree&#39;s root to the directory at point or the current root&#39;s parent. Another restriction is that the same part of the file system may not appear more than once as part of the workspace. For example, it is not possible to have both /Documents and /Documents/ProjectX as projects in the same workspace, since internally treemacs heavily relies on every node having a unique natural key in its absolute path. Nonetheless the pros certainly outweigh the cons, as a multiroot setup allows to work on multiple projects with any combination concern/buffer separating frameworks, be it persp/perspective, eyebrowse, tab-bar-mode, or project.el/projectile. It also opens the potential for concurrent display not only of the file system, but e.g. the currently open buffers.&lt;/p&gt; &#xA;&lt;p&gt;*** Workspace Selection When a workspace is first needed, treemacs will select a workspace in the following manner:&lt;/p&gt; &#xA;&lt;p&gt;If the current buffer is editing a file then treemacs will try to find the first workspace with a project containing that file. If that fails treemacs will resort to using the /fallback workspace/ which is defined as simply the /first/ element in the list of all workspace.&lt;/p&gt; &#xA;&lt;p&gt;The order of workspaces is the same that you see when calling &lt;del&gt;treemacs-edit-workspaces&lt;/del&gt; (see next chapter). You can interactively set the fallback workspace by calling &lt;del&gt;treemacs-set-fallback-workspace&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This selection will happen when treemacs is first started (with a command like &lt;del&gt;treemacs-select-window&lt;/del&gt;) or when a function that requires the current workspace to be known is used (like adding or removing a project). *** Disabling workspaces &amp;amp; projects It is possible to disable a workspace or project so it won&#39;t appear in treemacs, but still remains a part of your loadout, keeping it visible when you go edit your workspaces. To do so simply start the name of the workspace or project with &#34;COMMENT&#34;:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/disable-project.png]]&lt;/p&gt; &#xA;&lt;p&gt;** Conveniently Editing Your Projects and Workspaces There are two ways to edit your projects and workspaces: call up single add/remove/rename/switch commands under either the &lt;del&gt;C-c C-p&lt;/del&gt; or &lt;del&gt;C-c C-w&lt;/del&gt; prefix, or call &lt;del&gt;treemacs-edit-workspaces&lt;/del&gt; and edit your entire layout in the form of a single org-mode buffer.&lt;/p&gt; &#xA;&lt;p&gt;The used org-format is quite simple: level 1 headlines are names of workspaces, level 2 headlines are names of projects in a workspace, and every project&#39;s path is given as a description list, starting with a &lt;del&gt;-&lt;/del&gt; (and an optional leading space). Empty lines and lines starting with &lt;del&gt;#&lt;/del&gt; are ignored, and everything else leads to an error.&lt;/p&gt; &#xA;&lt;p&gt;You needn&#39;t worry about making mistakes either. If there&#39;s something wrong when you call &lt;del&gt;treemacs-finish-edit&lt;/del&gt; (C-c C-c) then treemacs will point you at the incorrect line and tell you what&#39;s missing:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/workspace-edit.png]]&lt;/p&gt; &#xA;&lt;p&gt;(Note that the list with the path property allows an indentation of 0 or 1 spaces only. The much greater visible indentation is caused by &lt;del&gt;org-indent-mode&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;** Navigation without Projects and Workspaces&lt;/p&gt; &#xA;&lt;p&gt;If a strict workspace and project structure, as described above, is too stringent for your use-case there are multiple other ways to use treemacs in a more &#34;free-form&#34; style:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use &lt;del&gt;treemacs-display-current-project-exclusively&lt;/del&gt; to display only the current project (removing all other projects from the workspace).&lt;/li&gt; &#xA; &lt;li&gt;You can enable &lt;del&gt;treemacs-project-follow-mode&lt;/del&gt; to make treemacs automatically switch to the project for the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;As long as there is exactly /a single project/ in your workspace you can also use &lt;del&gt;M-H&lt;/del&gt; and &lt;del&gt;M-L&lt;/del&gt; (or &lt;del&gt;treemacs-root-up&lt;/del&gt; and &lt;del&gt;treemacs-root-down&lt;/del&gt;) to arbitrarily change the project&#39;s root and freely navigate through your your file system, similar to dired. &lt;del&gt;M-H&lt;/del&gt; will navigate one level upward in the file system, &lt;del&gt;M-L&lt;/del&gt; will move into the directory at point.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Frame Locality Treemacs buffers have a limited scope they are visible in: the frames they are created in. A treemacs buffer, once created, lives alongside and inside its frame, and is also destroyed with that frame. Calling &lt;del&gt;treemacs&lt;/del&gt; while inside a new frame will create a new buffer for it, regardless how many other treemacs buffers already exist. While there can be multiple unique treemacs buffer they will all still show the same workspace and the same projects.&lt;/p&gt; &#xA;&lt;p&gt;A treemacs buffer that does not belong to a frame may still be made visible by manually selecting in the buffer list. This would break various assumptions in treemacs&#39; code base and effectively falls under undefined behaviour - a bad idea all around.&lt;/p&gt; &#xA;&lt;p&gt;** Mouse Interface Treemacs handles left clicks in much the same way as modern graphical applications do: a single click sets the focus, a double click expands or collapses a directory or tag section node and visits a file/moves to a tag for a file/tag node.&lt;/p&gt; &#xA;&lt;p&gt;Additionally tag sections can be expanded or collapsed by a single click on the file/tag section icon.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to expand/collapse nodes with a single mouse click you can also use &lt;del&gt;treemacs-single-click-expand-action&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (with-eval-after-load &#39;treemacs (define-key treemacs-mode-map [mouse-1] #&#39;treemacs-single-click-expand-action)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;A right click popup-menu is also available:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/right-click.png]]&lt;/p&gt; &#xA;&lt;p&gt;You can move and open files by dragging them with the mouse.&lt;/p&gt; &#xA;&lt;p&gt;** Follow-mode &lt;del&gt;treemacs-follow-mode&lt;/del&gt; is a global minor mode which allows the treemacs view to always move its focus to the currently selected file. This mode runs on an idle timer - the exact duration of inactivity (in seconds) before a move is called is determined by &lt;del&gt;treemacs-tag-follow-delay&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Tag-follow-mode &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; is a global minor mode which extends and effectively replaces &lt;del&gt;treemacs-follow-mode&lt;/del&gt;. When activated it follows not just the current file, but also the current tag. This works alongside treemacs&#39; integration with imenu, so all file types providing an imenu implementation are compatible.&lt;/p&gt; &#xA;&lt;p&gt;This mode, like follow-mode, runs on an idle timer - the exact duration of inactivity (in seconds) before a move is called is determined by &lt;del&gt;treemacs-tag-follow-delay&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that in order to move to a tag in treemacs the treemacs buffer&#39;s window needs to be temporarily selected, which will reset &lt;del&gt;blink-cursor-mode&lt;/del&gt;&#39;s timer if it is enabled. This will result in the cursor blinking seemingly pausing for a short time and giving the appearance of the tag follow action lasting much longer than it really does.&lt;/p&gt; &#xA;&lt;p&gt;** Fringe-indicator-mode &lt;del&gt;treemacs-fringe-indicator-mode&lt;/del&gt; is a global minor mode that displays a little icon in the fringe that moves with the cursor. It can make the selected line more visible if &lt;del&gt;hl-line-mode&lt;/del&gt; doesn&#39;t stand out with your theme.&lt;/p&gt; &#xA;&lt;p&gt;The indicator can either be permanently visible, or be only shown when the treemacs window is selected by calling it either with the &lt;del&gt;always&lt;/del&gt; or &lt;del&gt;only-when-focused&lt;/del&gt; argument. ** Git-mode &lt;del&gt;treemacs-git-mode&lt;/del&gt; is a global minor mode which enables treemacs to check for files&#39; and directories&#39; git status information and highlight them accordingly (see also the &lt;del&gt;treemacs-git-...&lt;/del&gt; faces). The mode is available in 3 variants: &lt;del&gt;simple&lt;/del&gt;, &lt;del&gt;extended&lt;/del&gt; and &lt;del&gt;deferred&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The simple variant starts a git status process and parses its output in elisp. The parsing is kept quick and simple, so some info is missed: this version includes git status information only for files, but not directories.&lt;/li&gt; &#xA; &lt;li&gt;The extended variant highlights both files and directories. This greatly increases the complexity and length of the parsing process, and is therefore done in an asynchronous python process for the sake of performance. The extended variant requires python3 to work.&lt;/li&gt; &#xA; &lt;li&gt;The deferred variant is the same as extended, except the tasks of rendering nodes and highlighting them are separated. The former happens immediately, the latter after &lt;del&gt;treemacs-deferred-git-apply-delay&lt;/del&gt; seconds of idle time. This may be faster (if not in truth then at least in appereance) as the git process is given a much greater amount of time to finish. The downside is that the effect of nodes changing their colors may be somewhat jarring, though this effect is largely mitigated due to the use of a caching layer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When called interactively &lt;del&gt;treemacs-git-mode&lt;/del&gt; will ask for the variant to use. In lisp code an appropriate symbol can be directly passed to the minor mode function:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-git-mode &#39;deferred) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;All versions use an asynchronous git process and are optimized to not do more work than necessary, so their performance cost should, for the most part, be the constant amount of time it takes to fork a subprocess. For repositories where this is not the case &lt;del&gt;treemacs-max-git-entries&lt;/del&gt; (default value 5000) will limit the number of git status entries treemacs will process before ignoring the rest.&lt;/p&gt; &#xA;&lt;p&gt;** Filewatch-mode &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt; is a global minor mode which enables treemacs to watch the files it is displaying for changes and automatically refresh itself when it detects a change in the file system that it decides is relevant.&lt;/p&gt; &#xA;&lt;p&gt;A change event is relevant for treemacs if a new file has been created or deleted or a file has been changed and &lt;del&gt;treemacs-git-mode&lt;/del&gt; is enabled. Events caused by files that are ignored as per &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt; are likewise counted as not relevant.&lt;/p&gt; &#xA;&lt;p&gt;The refresh is not called immediately after an event was received, treemacs instead waits &lt;del&gt;treemacs-file-event-delay&lt;/del&gt; ms to see if any more files have changed to avoid having to refresh multiple times over a short period of time. Treemacs will not refresh the entire view to make the detected changes visible, but will instead only make updates to the directories where the change(s) happened. Using this mode is therefore by far not as expensive as a full refresh on every change and save.&lt;/p&gt; &#xA;&lt;p&gt;The mode only applies to directories opened &lt;em&gt;after&lt;/em&gt; this mode has been activated. This means that to enable file watching in an already existing treemacs buffer it needs to be killed and rebuilt. Turning off this mode is, on the other hand, instantaneous - it will immediately turn off all existing file watch processes and outstanding refresh actions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Known limitations&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Staging and committing changes does not produce any file change events of its own, if you use &lt;del&gt;treemacs-git-mode&lt;/del&gt; you still need to do a manual refresh to see your files&#39; faces go from &#39;changed&#39; and &#39;untracked&#39; to &#39;unchanged&#39; after a commit. The &lt;del&gt;treemacs-magit&lt;/del&gt; package provides the necessary hooks to fill this gap.&lt;/li&gt; &#xA; &lt;li&gt;Filewatch-mode may not be able to track file modifications on MacOS, making git-mode miss potential changes, see also [[https://github.com/Alexander-Miller/treemacs/issues/152#issuecomment-941093929][this comment]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** File Management Treemacs is no dired, but it supports the basic file management facilities of creating, deleting, moving, copying and renaming files.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to mark multiple files to act on them. &lt;del&gt;M-m&lt;/del&gt; will summon a hydra for bulk file actions. &lt;em&gt;NOTE:&lt;/em&gt; The bulk action implementation is using treemacs&#39; (yet to be documented) annotation api, which is set up to provide /permanent/ annotations like colouring based on flycheck&#39;s error/warning/info output. This means that marking files will likewise be permanent, even if you collapse the directories containing those files and they are no longer visible. ** Indent-guide-mode&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;treemacs-indent-guide-mode&lt;/del&gt; is a simple visual helper based on the options provided by the &lt;del&gt;treemacs-indentation&lt;/del&gt; and &lt;del&gt;treemacs-indentation-string&lt;/del&gt; settings. Its appearance is dictated by &lt;del&gt;treemacs-indent-guide-style&lt;/del&gt;, the options are either &lt;del&gt;line&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/indent-guide-line.png]]&lt;/p&gt; &#xA;&lt;p&gt;or &lt;del&gt;block&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/indent-guide-block.png]] ** Git-commit-diff-mode &lt;del&gt;treemacs-git-commit-diff-mode&lt;/del&gt; will annotate git-tracked project to show how many commits the local repo is ahead or behind its remote counterpart:&lt;/p&gt; &#xA;&lt;p&gt;[[file:screenshots/git-commit-diff.png]] ** Session Persistence Treemacs&#39; sessions - your workspace and the projects it contains - are saved when Emacs shuts down and restored when treemacs is first loaded. This persistence process is fully automatic and independent, and should therefore be fully compatible with &lt;del&gt;desktop-save-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The persisted state is saved under &lt;del&gt;user-emacs-directory/.cache/treemacs-persist&lt;/del&gt; by default. The exact file location is saved in the variable &lt;del&gt;treemacs-persist-file&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If something goes wrong when loading the file the erroneous state will be saved in &lt;del&gt;treemacs-last-error-persist-file&lt;/del&gt; for debugging.&lt;/p&gt; &#xA;&lt;p&gt;** Terminal Compatibility When run in a terminal treemacs will fall back to a much simpler rendering system, foregoing its usual png icons and using simple &lt;del&gt;+&lt;/del&gt; and &lt;del&gt;-&lt;/del&gt; characters instead. The exact characters used are [[#custom-icons][highly customizable]].&lt;/p&gt; &#xA;&lt;p&gt;** Tag View Treemacs is able to display not only the file system, but also tags found in individual files. The tags list is sourced using emacs&#39; builtin imenu functionality, so all file types that emacs can generate an imenu index for are supported.&lt;/p&gt; &#xA;&lt;p&gt;Imenu caches its result, so to avoid stale tag lists setting &lt;del&gt;imenu-auto-rescan&lt;/del&gt; to t is recommended. Tags generated with the help of &lt;del&gt;semantic-mode&lt;/del&gt; are likewise supported.&lt;/p&gt; &#xA;&lt;p&gt;*** ggtags&lt;/p&gt; &#xA;&lt;p&gt;Treemacs can show the tags produced by ggtags if you switch a buffer&#39;s imenu index function to use ggtags:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq-local imenu-create-index-function #&#39;ggtags-build-imenu-index) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Current-Directory Awareness Treemacs always sets the &lt;del&gt;default-directory&lt;/del&gt; variable based on the (nearest) path at the current node, falling back to your home directory when there is no node or path at point. That means that various commands like &lt;del&gt;find-file&lt;/del&gt;, &lt;del&gt;ediff&lt;/del&gt; &lt;del&gt;magit-status&lt;/del&gt; or &lt;del&gt;helm-projectile-ag&lt;/del&gt; will correctly act based on the current directory or project context. ** Tramp Support Treemacs supports projects on remote directories, e.g. &lt;del&gt;/scp:remote-server:path/to/directory&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However tramp support has some restrictions: &lt;del&gt;treemacs-use-collapsed-directories&lt;/del&gt; has no effect on remote directories. ** Org Support Treemacs supports storing links to its file nodes by means of &lt;del&gt;org-store-link&lt;/del&gt;. ** Theme Support Using a different treemacs theme works the same way as using a different Emacs theme: just call &lt;del&gt;treemacs-load-theme&lt;/del&gt;, either programmatically or interactively. In the former case you need to supply the name of the theme as a string, like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-load-theme &#34;Default&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Do keep in mind that by default treemacs&#39; theme support is all theory: the standard installation includes only the default theme; this feature is meant to easily allow &lt;em&gt;others&lt;/em&gt; to extend, create and distribute themes for treemacs.&lt;/p&gt; &#xA;&lt;p&gt;A detailed explanation on modifying themes and icons can be found in the [[#customizing-themes-and-icons][Configuration]] section. ** Peeking If you want to look at files from within treemacs, without opening them with &lt;del&gt;RET&lt;/del&gt; and switching to another window, you can do so with &lt;del&gt;P&lt;/del&gt; which activates &lt;del&gt;treemacs-peek-mode&lt;/del&gt;. When peek-mode is active treemacs will automatically preview the file at point.&lt;/p&gt; &#xA;&lt;p&gt;To quit peek-mode either press &lt;del&gt;P&lt;/del&gt; again to disable it or open a file with &lt;del&gt;RET&lt;/del&gt;. Either way upon exiting peek-mode all files that have been opened due to peeking will be closed again (with the exception of the one that you opened with &lt;del&gt;RET&lt;/del&gt;, of course).&lt;/p&gt; &#xA;&lt;p&gt;You can scroll the window being peeked (and in general &lt;del&gt;other-window&lt;/del&gt; when you are in treemacs) with &lt;del&gt;M-N/P&lt;/del&gt; or &lt;del&gt;M-J/K&lt;/del&gt; if you use &lt;del&gt;treemacs-evil&lt;/del&gt;. ** Additional Packages Next to treemacs itself you can optionally install:&lt;/p&gt; &#xA;&lt;p&gt;*** treemacs-evil Must be installed and loaded if you use evil. The keybindings and the cursor will not be setup properly otherwise. It&#39;ll also enable navigation with j/k instead of n/p. *** treemacs-projectile Allows to quickly add your projectile projects to the treemacs workspace. *** treemacs-magit A small utility package to fill the small gaps left by using filewatch-mode and git-mode in conjunction with magit: it will inform treemacs about (un)staging of files and commits happening in magit. *** treemacs-icons-dired Allows you to use treemacs icons in dired buffers with &lt;del&gt;treemacs-icons-dired-mode&lt;/del&gt;: [[file:screenshots/dired-icons.png]] *** treemacs-persp/treemacs-perspective Integration with persp-mode or perspective.el that allows treemacs buffers to be unique inside the active perspective instead of the default frame-based buffer scope. *** treemacs-tab-bar Integration with tab-bar-mode that allows treemacs buffers to be unique inside the active tab instead of the default frame-based buffer scope. *** treemacs-all-the-icons Provides a theme using [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]. ** Treemacs as a Framework Treemacs can be extended to display arbitrary nodes as well as be used as a general rendering backend for any tree-like structures. [[file:Extensions.org][See here]] for an extended tutorial and demonstration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation Treemacs is included in Spacemacs (for now only on the dev branch). If you are using the development version of Spacemacs you can simply add treemacs to &lt;del&gt;dotspacemacs-configuration-layers&lt;/del&gt; to replace the default NeoTree. Check &lt;del&gt;SPC h SPC treemacs&lt;/del&gt; for details. Otherwise you will need to add treemacs to &lt;del&gt;dotspacemacs-additional-packages&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Treemacs is also available on MELPA. If you just want to quickly start using it grab the &lt;del&gt;use-package&lt;/del&gt; example below, and customize it as needed (remove &lt;del&gt;treemacs-evil&lt;/del&gt; if you don&#39;t use it, customize the keybindings to you taste, etc).&lt;/p&gt; &#xA;&lt;p&gt;Either way keep in mind that treemacs has /no default keybindings/ for its globally callable initialization functions. Each user is supposed to select keybindings for functions like &lt;del&gt;treemacs-find-file&lt;/del&gt; based on whatever they find convenient.&lt;/p&gt; &#xA;&lt;p&gt;You can find an exhaustive overview of all functions, their keybindings and functions you need to bind yourself [[#keymap][below]].&lt;/p&gt; &#xA;&lt;p&gt;The following &lt;del&gt;use-package&lt;/del&gt; snippet includes a list of /all/ of treemacs&#39; configuration options in their default setting. Setting them, or activating the minor modes yourself is not necessary, they are only listed here to encourage discoverability.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package treemacs :ensure t :defer t :init (with-eval-after-load &#39;winum (define-key winum-keymap (kbd &#34;M-0&#34;) #&#39;treemacs-select-window)) :config (progn (setq treemacs-buffer-name-function #&#39;treemacs-default-buffer-name treemacs-buffer-name-prefix &#34; *Treemacs-Buffer-&#34; treemacs-collapse-dirs (if treemacs-python-executable 3 0) treemacs-deferred-git-apply-delay 0.5 treemacs-directory-name-transformer #&#39;identity treemacs-display-in-side-window t treemacs-eldoc-display &#39;simple treemacs-file-event-delay 2000 treemacs-file-extension-regex treemacs-last-period-regex-value treemacs-file-follow-delay 0.2 treemacs-file-name-transformer #&#39;identity treemacs-follow-after-init t treemacs-expand-after-init t treemacs-find-workspace-method &#39;find-for-file-or-pick-first treemacs-git-command-pipe &#34;&#34; treemacs-goto-tag-strategy &#39;refetch-index treemacs-header-scroll-indicators &#39;(nil . &#34;^^^^^^&#34;) treemacs-hide-dot-git-directory t treemacs-indentation 2 treemacs-indentation-string &#34; &#34; treemacs-is-never-other-window nil treemacs-max-git-entries 5000 treemacs-missing-project-action &#39;ask treemacs-move-files-by-mouse-dragging t treemacs-move-forward-on-expand nil treemacs-no-png-images nil treemacs-no-delete-other-windows t treemacs-project-follow-cleanup nil treemacs-persist-file (expand-file-name &#34;.cache/treemacs-persist&#34; user-emacs-directory) treemacs-position &#39;left treemacs-read-string-input &#39;from-child-frame treemacs-recenter-distance 0.1 treemacs-recenter-after-file-follow nil treemacs-recenter-after-tag-follow nil treemacs-recenter-after-project-jump &#39;always treemacs-recenter-after-project-expand &#39;on-distance treemacs-litter-directories &#39;(&#34;/node_modules&#34; &#34;/.venv&#34; &#34;/.cask&#34;) treemacs-project-follow-into-home nil treemacs-show-cursor nil treemacs-show-hidden-files t treemacs-silent-filewatch nil treemacs-silent-refresh nil treemacs-sorting &#39;alphabetic-asc treemacs-select-when-already-in-treemacs &#39;move-back treemacs-space-between-root-nodes t treemacs-tag-follow-cleanup t treemacs-tag-follow-delay 1.5 treemacs-text-scale nil treemacs-user-mode-line-format nil treemacs-user-header-line-format nil treemacs-wide-toggle-width 70 treemacs-width 35 treemacs-width-increment 1 treemacs-width-is-initially-locked t treemacs-workspace-switch-cleanup nil)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ;; The default width and height of the icons is 22 pixels. If you are&#xA;  ;; using a Hi-DPI display, uncomment this to double the icon size.&#xA;  ;;(treemacs-resize-icons 44)&#xA;&#xA;  (treemacs-follow-mode t)&#xA;  (treemacs-filewatch-mode t)&#xA;  (treemacs-fringe-indicator-mode &#39;always)&#xA;  (when treemacs-python-executable&#xA;    (treemacs-git-commit-diff-mode t))&#xA;&#xA;  (pcase (cons (not (null (executable-find &#34;git&#34;)))&#xA;               (not (null treemacs-python-executable)))&#xA;    (`(t . t)&#xA;     (treemacs-git-mode &#39;deferred))&#xA;    (`(t . _)&#xA;     (treemacs-git-mode &#39;simple)))&#xA;&#xA;  (treemacs-hide-gitignored-files-mode nil))&#xA;:bind&#xA;(:map global-map&#xA;      (&#34;M-0&#34;       . treemacs-select-window)&#xA;      (&#34;C-x t 1&#34;   . treemacs-delete-other-windows)&#xA;      (&#34;C-x t t&#34;   . treemacs)&#xA;      (&#34;C-x t d&#34;   . treemacs-select-directory)&#xA;      (&#34;C-x t B&#34;   . treemacs-bookmark)&#xA;      (&#34;C-x t C-t&#34; . treemacs-find-file)&#xA;      (&#34;C-x t M-t&#34; . treemacs-find-tag)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(use-package treemacs-evil :after (treemacs evil) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-projectile :after (treemacs projectile) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-icons-dired :hook (dired-mode . treemacs-icons-dired-enable-once) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-magit :after (treemacs magit) :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode :after (treemacs persp-mode) ;;or perspective vs. persp-mode :ensure t :config (treemacs-set-scope-type &#39;Perspectives))&lt;/p&gt; &#xA;&lt;p&gt;(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode :after (treemacs) :ensure t :config (treemacs-set-scope-type &#39;Tabs))&lt;/p&gt; &#xA;&lt;p&gt;(treemacs-start-on-boot) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration ** Variables Treemacs offers the following configuration options (&lt;del&gt;describe-variable&lt;/del&gt; will usually offers more details):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;| Variable | Default | Description | |------------------------------------------+--------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | treemacs-indentation | 2 | The number of times each level is indented in the file tree. If specified as &#39;(INTEGER px), indentation will be a single INTEGER pixels wide space. | | treemacs-indentation-string | &#34; &#34; | The string that is used to create indentation when &lt;del&gt;treemacs-indentation&lt;/del&gt; is not specified as pixels. | | treemacs-width | 35 | Width of the treemacs window. | | treemacs-wide-toggle-width | 70 | Width of the treemacs window when using &lt;del&gt;treemacs-extra-wide-toggle&lt;/del&gt;. | | treemacs-width-increment | 1 | When resizing, this value is added or substracted from the window width. | | treemacs-show-hidden-files | t | Dotfiles will be shown if this is set to t and be hidden otherwise. | | treemacs-follow-after-init | t | When non-nil follow the currently selected file after initializing the treemacs buffer, regardless of &lt;del&gt;treemacs-follow-mode&lt;/del&gt; setting. | | treemacs-expand-after-init | t | When non-nil expand the first project after treemacs is first initialsed. | | treemacs-sorting | alphabetic-asc | Indicates how treemacs will sort its files and directories. (Files will always be shown after directories.) | | treemacs-ignored-file-predicates | (treemacs--std-ignore-file-predicate) | List of predicates to test for files and directories ignored by Emacs. Ignored files will &lt;em&gt;never&lt;/em&gt; be shown in the treemacs buffer. | | treemacs-pre-file-insert-predicates | nil | List of predicates to test for files and directories not to be rendered. Unlike &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt; these predicates apply when files&#39; git status information is available. | | treemacs-file-event-delay | 2000 | How long (in milliseconds) to collect file events before refreshing. See also &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;. | | treemacs-goto-tag-strategy | refetch-index | Indicates how to move to a tag when its buffer is dead. | | treemacs-default-visit-action | treemacs-visit-node-no-split | Default action for opening a node (e.g. file, directory, tag). &lt;del&gt;treemacs-visit-file-default&lt;/del&gt; action in &lt;del&gt;treemacs-*-actions-config&lt;/del&gt; calls this function. | | treemacs-RET-actions-config | Prefers visiting nodes over closing/opening | Alist defining the behaviour of &lt;del&gt;treemacs-RET-action&lt;/del&gt;. | | treemacs-TAB-actions-config | Prefers closing/opening nodes over visiting | Alist defining the behaviour of &lt;del&gt;treemacs-TAB-action&lt;/del&gt;. | | treemacs-doubleclick-actions-config | Closes/opens tags and visits files | Alist defining the behaviour of &lt;del&gt;treemacs-doubleclick-action&lt;/del&gt;. | | treemacs-collapse-dirs | 0 | Collapse this many directories into one, when possible. A directory is collapsible when its content consists of nothing but another directory. | | treemacs-silent-refresh | nil | When non-nil a completed refresh will not be announced with a log message. This applies both to manual refreshing as well as automatic (due to &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;). | | treemacs-silent-filewatch | nil | When non-nil a refresh due to &lt;del&gt;filewatch-mode&lt;/del&gt; will cause no log message. | | treemacs-is-never-other-window | nil | Prevents treemacs from being selected with &lt;del&gt;other-window&lt;/del&gt;. | | treemacs-position | left | Position of treemacs buffer. Valid values are &lt;del&gt;left&lt;/del&gt;, &lt;del&gt;right&lt;/del&gt;. | | treemacs-tag-follow-delay | 1.5 | Delay in seconds of inactivity for &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; to trigger. | | treemacs-tag-follow-cleanup | t | When non-nil &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; will keep only the current file&#39;s tags visible. | | treemacs-project-follow-cleanup | nil | When non-nil &lt;del&gt;treemacs-follow-mode&lt;/del&gt; will keep only the current project expanded and all others closed. | | treemacs-no-png-images | nil | When non-nil treemacs will use TUI string icons even when running in a GUI. | | treemacs-python-executable | (treemacs--find-python3) | Python 3 binary used by treemacs. | | treemacs-git-executable | &#34;git&#34; | The git binary used by treemacs. | | treemacs-recenter-after-file-follow | nil | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when &lt;del&gt;treemacs-follow-mode&lt;/del&gt; moves to a new file. | | treemacs-recenter-after-tag-follow | nil | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when &lt;del&gt;treemacs-tag-follow-mode&lt;/del&gt; moves to a new tag. | | treemacs-recenter-after-project-jump | &#39;always | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when navigating between projects. | | treemacs-recenter-after-project-expand | &#39;on-distance | Decides if and when to call &lt;del&gt;recenter&lt;/del&gt; when expanding a project node. | | treemacs-recenter-distance | 0.1 | Minimum distance from window top/bottom (0.1 = 10%) before treemacs calls &lt;del&gt;recenter&lt;/del&gt; in tag/file-follow-mode. | | treemacs-pulse-on-success | t | When non-nil treemacs will pulse the current line as a success indicator, e.g. when creating a file. | | treemacs-pulse-on-failure | t | When non-nil treemacs will pulse the current line as a failure indicator, e.g. when failing to find a file&#39;s tags. | | treemacs-elisp-imenu-expression | [too large to list] | The imenu expression treemacs uses in elisp buffers. | | treemacs-persist-file | ~/.emacs.d/.cache/treemacs-persist | Path to the file treemacs uses to persist its state. | | treemacs-last-error-persist-file | ~/.emacs.d/.cache/treemacs-persist-at-last-error | Path to the file treemacs uses to persist its state. | | treemacs-space-between-root-nodes | t | When non-nil treemacs will separate root nodes with an empty line. | | treemacs-wrap-around | t | When non-nil treemacs will wrap around at the buffer edges when moving between lines. | | treemacs--fringe-indicator-bitmap | [vertical bar] | The fringe bitmap used by the fringe-indicator minor mode. | | treemacs-deferred-git-apply-delay | 0.5 | Seconds of idle time for git highlighting to apply when using the deferred &lt;del&gt;treemacs-git-mode&lt;/del&gt;. | | treemacs-file-follow-delay | 0.2 | Delay in seconds of idle time for treemacs to follow the selected window. | | treemacs-display-in-side-window | t | When non-nil treemacs will use a dedicated [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Side-Windows.html][side-window]]. | | treemacs-max-git-entries | 5000 | Maximum number of git status entries treemacs will process. Anything above that number will be ignored. | | treemacs-missing-project-action | ask | When a persisted project is missing from filesystem, &lt;del&gt;ask&lt;/del&gt; will prompt for action, &lt;del&gt;keep&lt;/del&gt; will keep the project in the project list, and &lt;del&gt;remove&lt;/del&gt; will remove it from it without prompt. | | treemacs-show-cursor | nil | When non-nil the cursor will stay visible in the treemacs buffer. | | treemacs-git-command-pipe | &#34;&#34; | Text to be appended to treemacs&#39; git command. Useful for filtering with something like grep. | | treemacs-no-delete-other-windows | t | Prevents the treemacs window from being deleted by commands like &lt;del&gt;delete-other-windows&lt;/del&gt; and &lt;del&gt;magit-status&lt;/del&gt;. | | treemacs-eldoc-display | &#39;simple | Enables eldoc display of the file path at point. Requires &lt;del&gt;eldoc-mode&lt;/del&gt;. | | treemacs-bookmark-title-template | &#34;Treemacs - ${project}: ${label}&#34; | When using &lt;del&gt;bookmark-set&lt;/del&gt; in Treemacs, the default template for a bookmark label. The following patterns are available: &#34;${project}&#34;, &#34;${label}&#34;, &#34;${label:N}&#34;, ${label-path}&#34;, &#34;${label-path:N}&#34;, &#34;${file-path}&#34;, &#34;${file-path:N}&#34;. | | treemacs-file-extension-regex | Text after last period | Determines how treemacs detects a file extension. Can be set to use text after first or last period. | | treemacs-directory-name-transformer | identity | Transformer function that is applied to directory names before rendering for any sort of cosmetic effect. | | treemacs-file-name-transformer | identity | Transformer function that is applied to file names before rendering for any sort of cosmetic effect. | | treemacs-user-mode-line-format | nil | When non-nil treemacs will use it as a mode line format (otherwise format provided by &lt;del&gt;spaceline&lt;/del&gt;, &lt;del&gt;moody-mode-line&lt;/del&gt; and &lt;del&gt;doom-modeline&lt;/del&gt; will be used or, finally, &#34;Treemacs&#34; text will be displayed) | | treemacs-user-header-line-format | nil | When non-nil treemacs will use it as a header line format | | treemacs-move-forward-on-expand | nil | When non-nil treemacs will move to the first child of an expanded node. | | treemacs-workspace-switch-cleanup | nil | Indicates which, if any, buffers should be deleted on a workspace switch. Valid values are &lt;del&gt;nil&lt;/del&gt;, &lt;del&gt;files&lt;/del&gt;, &lt;del&gt;all&lt;/del&gt;. | | treemacs-read-string-input | &#39;from-child-frame | Indicates whether simple string input like project names should be read from a child frame or the minibuffer. | | treemacs-expand-added-projects | t | Indicates whether newly added projects should be expanded. | | treemacs-imenu-scope | &#39;everything | Determines which items treemacs&#39; imenu function will collect. | | treemacs-litter-directories | (&#34;/node_modules&#34; &#34;/.venv&#34; &#34;/.cask&#34;) | List of directories affected by &lt;del&gt;treemacs-cleanup-litter&lt;/del&gt;. | | treemacs-width-is-initially-locked | t | Indicates whether the treemacs windows starts with a locked width or not. | | treemacs-select-when-already-in-treemacs | &#39;move-back | Indicates how &lt;del&gt;treemacs-select-window&lt;/del&gt; behaves when treemacs is already selected. | | treemacs-text-scale | nil | Scaling for text in treemacs, used via &lt;del&gt;text-scale-increase&lt;/del&gt;. | | treemacs-indent-guide-style | line | Appearance option for &lt;del&gt;treemacs-indent-guide&lt;/del&gt;, either a thin line or a thick block. | | treemacs-find-workspace-method | &#39;find-for-file-or-pick-first | Determines how treemacs selects the workspace when it first starts. | | treemacs-header-scroll-indicators | &#39;(nil . &#34;^^^^^^&#34;) | Indicators used for &lt;del&gt;treemacs-indicate-top-scroll-mode&lt;/del&gt;. | | treemacs-hide-dot-git-directory | t | Indicates whether &lt;del&gt;.git&lt;/del&gt; directories should always be hidden. | | treemacs-project-follow-into-home | nil | Indicates whether &lt;del&gt;treemacs-project-follow-mode&lt;/del&gt; can follow into the $HOME directory. | | treemacs-move-files-by-mouse-dragging | t | When non-nil treemacs will move files by dragging with your mouse inside treemacs. | | treemacs-buffer-name-function | #&#39;treemacs-default-buffer-name | Determines the names of treemacs buffers. | | treemacs-file-follow-ignore-functions | nil | Functions to determine which files shold not be followed. | | treemacs-buffer-name-prefix | &#34; *Treemacs-Buffer-&#34; | Static prefix for all treemacs buffer names. |&lt;/p&gt; &#xA;&lt;p&gt;** Faces Treemacs defines and uses the following faces: | Face | Based on | Description | |----------------------------------------+--------------------------------------------------+------------------------------------------------------------------------------| | treemacs-directory-face | font-lock-function-name-face | Face used for directories. | | treemacs-directory-collapsed-face | treemacs-directory-face | Face used for collapsed part of directories. | | treemacs-file-face | default | Face used for files. | | treemacs-root-face | font-lock-constant-face | Face used for project roots. | | treemacs-root-unreadable-face | treemacs-root-face | Face used for local unreadable project roots. | | treemacs-root-remote-face | font-lock-function-name-face, treemacs-root-face | Face used for readable remote (Tramp) project roots. | | treemacs-root-remote-unreadable-face | treemacs-root-unreadable-face | Face used for unreadable remote (Tramp) project roots. | | treemacs-root-remote-disconnected-face | warning, treemacs-root-face | Face used for disconnected remote (Tramp) project roots. | | treemacs-tags-face | font-lock-builtin-face | Face used for tags. | | treemacs-help-title-face | font-lock-constant-face | Face used for the title of the helpful hydra. | | treemacs-help-column-face | font-lock-keyword-face | Face used for the column headers of the helpful hydra. | | treemacs-git-*-face | various font lock faces | Faces used by treemacs for various git states. | | treemacs-term-node-face | font-lock-string-face | Face for directory node symbols used by treemacs when it runs in a terminal. | | treemacs-on-success-pulse-face | :fg #111111 :bg #669966 | Pulse face used when pulsing on a successful action. | | treemacs-on-failure-puse-face | :fg #111111 :bg #ab3737 | Pulse face used when pulsing on a failed action. | | treemacs-marked-file-face | :fg #f0c674 :bg #ab3737 | Face for files marked for bulk file management. | | treemacs-fringe-indicator-face | cursor | Face for the fringe indicator. | | treemacs-header-button-face | font-lock-keyword-face | Face for header buttons. | | treemacs-git-commit-diff-face | font-lock-comment-face | Face used for &lt;del&gt;treemacs-indicate-top-scroll-mode&lt;/del&gt; annotations. | | treemacs-window-background-face | default | Face used for the background of the treemacs window. | | treemacs-hl-line-face | hl-line | Face used for hl-line overlay inside the treemacs buffer. |&lt;/p&gt; &#xA;&lt;p&gt;** Evil compatibility To make treemacs get along with evil-mode you need to install and load &lt;del&gt;treemacs-evil&lt;/del&gt;. It does not define any functions or offer any configuration options, making sure it is loaded is sufficient.&lt;/p&gt; &#xA;&lt;p&gt;** Customizing Themes and Icons *** Creating and Modifying Themes Creating and modifying themes and icons is all done in a single step using dedicated macros.&lt;/p&gt; &#xA;&lt;p&gt;To create a theme use &lt;del&gt;treemacs-create-theme&lt;/del&gt;. It requires the name of the theme and accepts 3 optional keyword arguments: the directory the theme&#39;s icons are stored in (if it&#39;s using png icons), the name of the theme it&#39;s extending and the config, a final form that&#39;s responsible for creating all the theme&#39;s icons. A config will typically consist of nothing but calls to &lt;del&gt;treemacs-create-icon&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-create-theme &#34;Default&#34; :icon-directory (treemacs-join-path treemacs-dir &#34;icons/default&#34;) :config (progn (treemacs-create-icon :file &#34;root-open.png&#34; :fallback &#34;&#34; :extensions (root-open)) (treemacs-create-icon :file &#34;root-closed.png&#34; :fallback &#34;&#34; :extensions (root-closed)) (treemacs-create-icon :file &#34;emacs.png&#34; :fallback &#34;🗏 &#34; :extensions (&#34;el&#34; &#34;elc&#34;)) (treemacs-create-icon :file &#34;readme.png&#34; :fallback &#34;🗏 &#34; :extensions (&#34;readme.md&#34;)) (treemacs-create-icon :file &#34;src-closed.png&#34; :fallback &#34;📁 &#34; :extensions (&#34;src-closed&#34;)) (treemacs-create-icon :file &#34;src-open.png&#34; :fallback &#34;📂 &#34; :extensions (&#34;src-open&#34;)) (treemacs-create-icon :icon (all-the-icons-icon-for-file &#34;yaml&#34;) :extensions (&#34;yml&#34; &#34;yaml&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;:file&lt;/del&gt; argument is relative to the icon directory of the theme being created. When not using image icons the &lt;del&gt;:icon-directory&lt;/del&gt; argument can be omitted and the &lt;del&gt;:file&lt;/del&gt; argument can be switched for &lt;del&gt;:icon&lt;/del&gt; to supply the icon string directly. The TUI fallback is also optional, &#34; &#34; is used by default. Finally the list of extensions determines which file extensions the icon should be used for.&lt;/p&gt; &#xA;&lt;p&gt;For treemacs an extension is either the entire file name or the text after the last period (unless &lt;del&gt;treemacs-file-extension-regex&lt;/del&gt; is customized). This means it can match normal file names like &#34;init.el&#34;, extensionless file names like &#34;Makefile&#34;. Because the full name is checked first it is possible to give special files their own icon, for example &#34;Readme.md&#34; can use a different icon than normal markdown files.&lt;/p&gt; &#xA;&lt;p&gt;Directories can likewise have their own icons. In that case you just need to give the directory&#39;s name and the suffix &#34;-open&#34; or &#34;-closed&#34;, like the &#34;src&#34; directory in the example above.&lt;/p&gt; &#xA;&lt;p&gt;Instead of a string extension a symbol can also be used. In this case treemacs will also create a variable for that icon named &lt;del&gt;treemacs-icon-$symbol&lt;/del&gt;. Treemacs uses several such icon variables and any new theme should define their own versions (it&#39;s not extending the default theme). The following icons are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;root-open&lt;/li&gt; &#xA; &lt;li&gt;root-closed&lt;/li&gt; &#xA; &lt;li&gt;dir-closed&lt;/li&gt; &#xA; &lt;li&gt;dir-open&lt;/li&gt; &#xA; &lt;li&gt;fallback&lt;/li&gt; &#xA; &lt;li&gt;tag-open&lt;/li&gt; &#xA; &lt;li&gt;tag-closed&lt;/li&gt; &#xA; &lt;li&gt;tag-leaf&lt;/li&gt; &#xA; &lt;li&gt;error&lt;/li&gt; &#xA; &lt;li&gt;info&lt;/li&gt; &#xA; &lt;li&gt;warning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Analogous to creating a new theme &lt;del&gt;treemacs-modify-theme&lt;/del&gt; can be used to change, or add to, an existing theme:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-modify-theme &#34;Default&#34; :icon-directory &#34;/other/icons/dir&#34; :config (progn (treemacs-create-icon :icon &#34;+&#34; :extensions (dir-closed)) (treemacs-create-icon :icon &#34;-&#34; :extensions (dir-open)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Finally keep in mind that treemacs&#39; icons are all buffer-local values, and will most likely not be defined when trying to access their values directly. When you need to programmatically access some of treemacs&#39; icons you should use &lt;del&gt;treemacs-get-icon-value&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-get-icon-value &#39;root-closed nil &#34;Default&#34;) (treemacs-get-icon-value &#34;org&#34; t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Custom Icons&lt;/p&gt; &#xA;&lt;p&gt;Treemacs also offers a quick and straighforward way to add a (gui) icon to the currently active theme, without caring for its name or declaring icon directories:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defvar treemacs-custom-html-icon (all-the-icons-icon-for-file &#34;name.html&#34;)) (treemacs-define-custom-icon treemacs-custom-html-icon &#34;html&#34; &#34;htm&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Important&lt;/em&gt;: There is a restriction that all icons must must be exactly 2 characters long. That&#39;s including the space that will separate an icon from the filename.&lt;/p&gt; &#xA;&lt;p&gt;If you want to create an icon based on an image you can use &lt;del&gt;treemacs-define-custom-image-icon&lt;/del&gt; instead:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-define-custom-image-icon &#34;/path/to/icon.png&#34; &#34;htm&#34; &#34;html&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;For icons of directories two icon variants are needed: one for an open and one for a closed directory state. These can be indicated with a simple &lt;del&gt;&#34;-open&#34;&lt;/del&gt; and &lt;del&gt;&#34;-closed&#34;&lt;/del&gt; suffix. For example the following lines will add special icons for directories named &#34;scripts&#34;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-define-custom-icon &#34;X &#34; &#34;scripts-closed&#34;) (treemacs-define-custom-icon &#34;Y &#34; &#34;scripts-open&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;**** Icons according to &lt;del&gt;auto-mode-alist&lt;/del&gt; For some file extensions, like &#34;.cc&#34; or &#34;.hh&#34;, it is not immediately obvious which major mode will open these files, and thus which icon they should be assigned. Treemacs offers the option that automate this decision based on &lt;del&gt;auto-mode-alist&lt;/del&gt;. You can use the function &lt;del&gt;treemacs-map-icons-with-auto-mode-alist&lt;/del&gt; to change the assigned icons for a list of file extensions based on the major mode the icons are mapped to in &lt;del&gt;auto-mode-alist&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;treemacs-map-icons-with-auto-mode-alist&lt;/del&gt; takes 2 arguments: first a list of file extensions, then an alist that decides which icon should be used for which mapped major mode. For example, the code to decide the icons for &#34;.hh&#34; and &#34;.cc&#34; files with &lt;del&gt;auto-mode-alist&lt;/del&gt; would look like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (treemacs-map-icons-with-auto-mode-alist &#39;(&#34;.cc&#34; &#34;.hh&#34;) `((c-mode . ,(treemacs-get-icon-value &#34;c&#34;)) (c++-mode . ,(treemacs-get-icon-value &#34;cpp&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;**** GUI vs TUI It is possible to force treemacs to use the simple TUI icons in GUI mode by setting &lt;del&gt;treemacs-no-png-images&lt;/del&gt; to t.&lt;/p&gt; &#xA;&lt;p&gt;**** Resizing Icons If your emacs has been compiled with Imagemagick support, or you&#39;re using Emacs &amp;gt;= 27.1, you can arbitrarily change the size of treemacs&#39; icons by (interactively or programmatically) calling &lt;del&gt;treemacs-resize-icons&lt;/del&gt;. *** all-the-icons indent issues Depending on your font you may experience the problem of treemacs&#39; icons seemingly jumping around left and right when they are expanded and collapsed when using the all-the-icons theme. The straighforward solution is to use a different font. You may also try a workaround of using a different font that applies only to the TAB characters used to align treemacs&#39; all-the-icons-based icons. To do that do not load &lt;del&gt;treemacs-all-the-icons&lt;/del&gt; with &lt;del&gt;require&lt;/del&gt;. Instead use the following alternative provided by treemacs itself:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (treemacs-load-all-the-icons-with-workaround-font &#34;Hermit&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The Hermit font used here is just an example - you will need to pick a font that is available on your system and does not suffer from the tab width issue.&lt;/p&gt; &#xA;&lt;p&gt;This line will load &lt;del&gt;treemacs-all-the-icons&lt;/del&gt; (&lt;em&gt;it must not have been loaded previously&lt;/em&gt;) and enable the all-the-icons theme. The given font argument will be used as the font for the alignment tabs used for the icons, hopefully alleviating the indentation problem. In addition &lt;del&gt;treemacs-indentation&lt;/del&gt; and &lt;del&gt;treemacs-indentation-string&lt;/del&gt; will be set to 1 and a (font-changed) TAB character respectively, so customizing them is (probably) not possible.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keymap ** Unbound functions These functions are not bound to any keys by default. It&#39;s left up to users to find the most convenient key binds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;| Action | Description | |------------------------------------------------------+----------------------------------------------------------------------------| | treemacs | Show/Hide/Initialize treemacs. | | treemacs-bookmark | Find a bookmark in treemacs. | | treemacs-find-file | Find and focus the current file in treemacs. | | treemacs-find-tag | Find and focus the current tag in treemacs. | | treemacs-select-window | Select the treemacs window if it is visible. Call &lt;del&gt;treemacs&lt;/del&gt; if it is not. | | treemacs-select-directory | Select a single directory | | treemacs-delete-other-windows | Same as &lt;del&gt;delete-other-windows&lt;/del&gt;, but will not delete the treemacs window. | | treemacs-show-changelog | Opens a buffer showing the changelog. | | treemacs-load-theme | Load a different icon theme. | | treemacs-icon-catalogue | Showcases all themes and their icons. | | treemacs-narrow-to-current-file | Close everything except the view on the current file. | | treemacs-create-workspace-from-project | Create a new workspace containing only the current project. | |------------------------------------------------------+----------------------------------------------------------------------------| | treemacs-projectile | Add a project from projectile to treemacs. | | treemacs-add-and-display-current-project | Add current project to treemacs and open it. | | treemacs-add-and-display-current-project-exclusively | Add current project to treemacs and open it, deleting all others. | | treemacs-select-scope-type | Select the scope of treemacs buffers in which they are unique |&lt;/p&gt; &#xA;&lt;p&gt;** Default keymaps&lt;/p&gt; &#xA;&lt;p&gt;Treemacs&#39; keybindings are distributed to several keymaps, based on common keybindings:&lt;/p&gt; &#xA;&lt;p&gt;*** Project Keybinds (Prefix &lt;del&gt;C-c C-p&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-------------------+----------------------------------------+--------------------------------------------------------| | C-c C-p a | treemacs-add-project-to-workspace | Select a new project to add to the treemacs workspace. | | C-c C-p p | treemacs-projectile | Select a projectile project to add to the workspace. | | C-c C-p d | treemacs-remove-project-from-workspace | Remove project at point from the workspace. | | C-c C-p r | treemacs-rename-project | Rename project at point. | | C-c C-p c c | treemacs-collapse-project | Collapse project at point. | | C-c C-p c o/S-TAB | treemacs-collapse-all-projects | Collapse all projects. | | C-c C-p c o | treemacs-collapse-all-projects | Collapse all projects except the project at point. |&lt;/p&gt; &#xA;&lt;p&gt;*** Workspaces Keybinds (Prefix &lt;del&gt;C-c C-w&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-----------+---------------------------------+----------------------------------------| | C-c C-w r | treemacs-rename-workspace | Rename a workspace. | | C-c C-w a | treemacs-create-workspace | Create a new workspace. | | C-c C-w d | treemacs-remove-workspace | Delete a workspace. | | C-c C-w s | treemacs-switch-workspace | Switch the current workspace. | | C-c C-w e | treemacs-edit-workspaces | Edit workspace layout via org-mode. | | C-c C-w n | treemacs-next-workspace | Switch to the next workspace. | | C-c C-w f | treemacs-set-fallback-workspace | Select the default fallback workspace. |&lt;/p&gt; &#xA;&lt;p&gt;*** Node Visit Keybinds (Prefix &lt;del&gt;o&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |--------+--------------------------------------------------+----------------------------------------------------------------------------------------------------------------| | ov | treemacs-visit-node-vertical-split | Open current file or tag by vertically splitting &lt;del&gt;next-window&lt;/del&gt;. | | oh | treemacs-visit-node-horizontal-split | Open current file or tag by horizontally splitting &lt;del&gt;next-window&lt;/del&gt;. | | oo/RET | treemacs-visit-node-no-split | Open current file or tag, performing no split and using &lt;del&gt;next-window&lt;/del&gt; directly. | | oc | treemacs-visit-node-close-treemacs | Open current file or tag, performing no split and using &lt;del&gt;next-window&lt;/del&gt; directly, and close treemacs. | | oaa | treemacs-visit-node-ace | Open current file or tag, using ace-window to decide which window to open the file in. | | oah | treemacs-visit-node-ace-horizontal-split | Open current file or tag by horizontally splitting a window selected by ace-window. | | oav | treemacs-visit-node-ace-vertical-split | Open current file or tag by vertically splitting a window selected by ace-window. | | or | treemacs-visit-node-in-most-recently-used-window | Open current file or tag in the most recently used window. | | ox | treemacs-visit-node-in-external-application | Open current file according to its mime type in an external application. Linux, Windows and Mac are supported. |&lt;/p&gt; &#xA;&lt;p&gt;*** Toggle Keybinds (Prefix &lt;del&gt;t&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-----+-------------------------------------+----------------------------------------------------------------------------------------| | th | treemacs-toggle-show-dotfiles | Toggle the hiding and displaying of dotfiles. | | ti | treemacs-hide-gitignored-files-mode | Toggle the hiding and displaying of gitignored files. | | tw | treemacs-toggle-fixed-width | Toggle whether the treemacs window should have a fixed width. See also treemacs-width. | | tf | treemacs-follow-mode | Toggle &lt;del&gt;treemacs-follow-mode&lt;/del&gt;. | | ta | treemacs-filewatch-mode | Toggle &lt;del&gt;treemacs-filewatch-mode&lt;/del&gt;. | | tv | treemacs-fringe-indicator-mode | Toggle &lt;del&gt;treemacs-fringe-indicator-mode&lt;/del&gt;. | | td | treemacs-git-commit-diff-mode | Toggle &lt;del&gt;treemacs-git-commit-diff-mode&lt;/del&gt;. |&lt;/p&gt; &#xA;&lt;p&gt;*** Copy Keybinds (Prefix &lt;del&gt;y&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |-----+--------------------------------------+-------------------------------------------------------------------| | ya | treemacs-copy-absolute-path-at-point | Copy the absolute path of the node at point. | | yr | treemacs-copy-relative-path-at-point | Copy the path of the node at point relative to the project root. | | yp | treemacs-copy-project-path-at-point | Copy the absolute path of the project root for the node at point. | | yn | treemacs-copy-filename-at-point | Copy the filename for the node at point. | | yf | treemacs-copy-file | Copy the file at point. |&lt;/p&gt; &#xA;&lt;p&gt;*** General Keybinds&lt;/p&gt; &#xA;&lt;p&gt;| Key | Action | Description | |----------+---------------------------------------------+--------------------------------------------------------------------------------------------------------| | ? | treemacs-common-helpful-hydra | Summon a helpful hydra to show you treemacs&#39; most commonly used keybinds. | | C-? | treemacs-advanced-helpful-hydra | Summon a helpful hydra to show you treemacs&#39; rarely used, advanced keybinds. | | j/n | treemacs-next-line | Go to the next line. | | k/p | treemacs-previous-line | Go to the previous line. | | M-J/N | treemacs-next-line-other-window | Go to the next line in &lt;del&gt;next-window&lt;/del&gt;. | | M-K/P | treemacs-previous-line-other-window | Go to the previous line in &lt;del&gt;next-window&lt;/del&gt;.. | | &#xA; &lt;pgup&gt;&#xA;   | treemacs-next-page-other-window | Go to the next page in &#xA;  &lt;del&gt;next-window&lt;/del&gt;. | | &#xA;  &lt;pgdn&gt;&#xA;    | treemacs-previous-page-other-window | Go to the previous page in &#xA;   &lt;del&gt;next-window&lt;/del&gt;.. | | M-j/M-n | treemacs-next-neighbour | Go to the next same-level neighbour of the current node. | | M-k/M-p | treemacs-previous-neighbour | Go to the previous same-level neighbour of the current node. | | u | treemacs-goto-parent-node | Go to parent of node at point, if possible. | | &#xA;   &lt;m-up&gt;&#xA;     | treemacs-move-project-up | Switch positions of project at point and the one above it. | | &#xA;    &lt;m-down&gt;&#xA;      | treemacs-move-project-down | Switch positions of project at point and the one below it. | | w | treemacs-set-width | Set a new value for the width of the treemacs window. | | &amp;lt; | treemacs-decrement-width | Decrease the width of the treemacs window. | | &amp;gt; | treemacs-increment-width | Increase the width of the treemacs window. | | RET | treemacs-RET-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-RET-actions-config&lt;/del&gt; for the current node. | | TAB | treemacs-TAB-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-TAB-actions-config&lt;/del&gt; for the current node. | | g/r/gr | treemacs-refresh | Refresh the project at point. | | d | treemacs-delete-file | Delete node at point. | | R | treemacs-rename-file | Rename node at point. | | cf | treemacs-create-file | Create a file. | | cd | treemacs-create-dir | Create a directory. | | q | treemacs-quit | Hide the treemacs window. | | Q | treemacs-kill-buffer | Delete the treemacs buffer. | | P | treemacs-peek-mode | Peek at the files at point without fully opening them. | | ya | treemacs-copy-absolute-path-at-point | Copy the absolute path of the node at point. | | yr | treemacs-copy-relative-path-at-point | Copy the path of the node at point relative to the project root. | | yp | treemacs-copy-project-path-at-point | Copy the absolute path of the project root for the node at point. | | yf | treemacs-copy-file | Copy the file at point. | | m | treemacs-move-file | Move the file at point. | | s | treemacs-resort | Set a new value for &#xA;     &lt;del&gt;treemacs-sorting&lt;/del&gt;. | | b | treemacs-add-bookmark | Bookmark the currently selected files&#39;s, dir&#39;s or tag&#39;s location. | | h/M-h | treemacs-COLLAPSE-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-COLLAPSE-actions-config&lt;/del&gt; for the current node. | | l/M-l | treemacs-RET-action | Run the action defined in &#xA;     &lt;del&gt;treemacs-RET-actions-config&lt;/del&gt; for the current node. | | M-H | treemacs-root-up | Move treemacs&#39; root one level upward. Only works with a single project in the workspace. | | M-L | treemacs-root-down | Move treemacs&#39; root into the directory at point. Only works with a single project in the workspace. | | H | treemacs-collapse-parent-node | Collapse the parent of the node at point. | | ! | treemacs-run-shell-command-for-current-node | Run an asynchronous shell command on the current node, replacing &#34;$path&#34; with its path. | | M-! | treemacs-run-shell-command-in-project-root | Run an asynchronous shell command in the root of the current project, replacing &#34;$path&#34; with its path. | | C | treemacs-cleanup-litter | Close all directories matching any of &#xA;     &lt;del&gt;treemacs-litter-directories&lt;/del&gt;. | | = | treemacs-fit-window-width | Adjust the width of the treemacs window to that of the longsest line. | | W | treemacs-extra-wide-toggle | Toggle between normal and extra wide display for the treemacs window. |&#xA;    &lt;/m-down&gt;&#xA;   &lt;/m-up&gt;&#xA;  &lt;/pgdn&gt;&#xA; &lt;/pgup&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatibility The correctness of treemacs&#39; display behaviour is, to a large degree, ensured through window properties and reacting to changes in the window configuration. The packages most likely to cause trouble for treemacs are therefore those that interfere with Emacs&#39; buffer spawning and window splitting behaviour. Treemacs is included in Spacemacs and I am a Spacemacs user, therefore treemacs guarantees first-class support &amp;amp; compatibility for window-managing packages used in Spacemacs, namely [[https://github.com/Bad-ptr/persp-mode.el][persp]]/[[https://github.com/nex3/perspective-el][perspective]], [[https://github.com/wasamasa/eyebrowse][eyebrowse]], [[https://github.com/m2ym/popwin-el][popwin]] and [[https://github.com/bmag/emacs-purpose][window-purpose]], as well as [[https://github.com/wasamasa/shackle][shackle]]. For everything else there may be issues and, depending on the complexity of the problem, I may decide it is not worth fixing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Aside from this there are the following known incompatibilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Any package invoking &lt;del&gt;font-lock-ensure&lt;/del&gt; in the treemacs buffer. This will reset the faces of treemacs&#39; buttons (once) and is a known [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=28599][emacs bug]].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A possible cause of this issue using an old version of swiper.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rainbow mode activated in treemacs will likewise produce this behaviour. Make sure not to include rainbow-mode as part of &lt;del&gt;special-mode-hook&lt;/del&gt;, since this is the mode &lt;del&gt;treemacs-mode&lt;/del&gt; is derived from.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FAQ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;I don&#39;t need multiple projects, can treemacs just always show me the current project I&#39;m in?&lt;/p&gt; &lt;p&gt;Yes, see the section about [[#navigation-without-projects-and-workspaces][Navigation without Projects and Workspace]].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I hide files I don&#39;t want to see?&lt;/p&gt; &lt;p&gt;You need to define a predicate function and add it to &lt;del&gt;treemacs-ignored-file-predicates&lt;/del&gt;. This function accepts two arguments, a file&#39;s name and its absolute path, and must return non-nil when treemacs should hide that file.&lt;/p&gt; &lt;p&gt;For example, the code to ignore files either called &#34;foo&#34; or located in &#34;/x/y/z/&#34; would look like this:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (with-eval-after-load &#39;treemacs&lt;/p&gt; &lt;pre&gt;&lt;code&gt; (defun treemacs-ignore-example (filename absolute-path)&#xA;   (or (string-equal filename &#34;foo&#34;)&#xA;       (string-prefix-p &#34;/x/y/z/&#34; absolute-path)))&#xA;&#xA; (add-to-list &#39;treemacs-ignored-file-predicates #&#39;treemacs-ignore-example))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;#+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I keep treemacs from showing files that are ignored by git?&lt;/p&gt; &lt;p&gt;You can use &lt;del&gt;treemacs-hide-gitignored-files-mode&lt;/del&gt; (bound to &lt;del&gt;ti&lt;/del&gt;) to switch between hiding and displaying of gitignored files. Git-mode /must/ be enabled for this feature to work.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why am I seeing no file icons and only +/- for directories?&lt;/p&gt; &lt;p&gt;Treemacs will permanently fall back on its simple TUI icons if it detects that the emacs instance it is run in cannot create images. You can test this by evaluating &lt;del&gt;(create-image &#34;&#34; &#39;png)&lt;/del&gt;. If this code returns an error like &#34;Invalid image type ´png´&#34; your emacs does not support images.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I get treemacs to stop telling me when it&#39;s been refreshed, especially with filewatch-mode?&lt;/p&gt; &lt;p&gt;See &lt;del&gt;treemacs-silent-refresh&lt;/del&gt; and &lt;del&gt;treemacs-silent-filewatch&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ENOSPC / No space left on device / no file descriptor left&lt;/p&gt; &lt;p&gt;You may run into this error when you use filewatch-mode. The solution is to increase the number of allowed user watches, as described [[https://stackoverflow.com/questions/16748737/grunt-watch-error-waiting-fatal-error-watch-enospc][here for Linux]] and [[https://wilsonmar.github.io/maximum-limits/][here for Mac]].&lt;/p&gt; &lt;p&gt;You will also want to see what&#39;s responsible for setting all those file watches in the first place, since treemacs only watches the expanded directories it is displaying and so won&#39;t produce more than a couple dozen watches at best.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why is treemacs warning me about not being able to find some background colors and falling back to something else?&lt;/p&gt; &lt;p&gt;Treemacs needs those colors to make sure that background colors of its icons correctly align with hl-line-mode. Png images&#39; backgrounds are not highlighted by hl-line-mode by default, treemacs is manually correcting this every time hl-line&#39;s overlay is moved. To make that correction work it needs to know two colors: the current theme&#39;s &lt;del&gt;default&lt;/del&gt; background, and its &lt;del&gt;hl-line&lt;/del&gt; background color. If treemacs cannot find hl-lines&#39;s background color it falls back to the default background color. If it cannot even find the default background it will fall back to #2d2d31. The warnings serve to inform you of that fallback.&lt;/p&gt; &lt;p&gt;If your theme does not define a required color you can set it yourself before treemacs loads like this:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (set-face-attribute &#39;hl-line nil :background &#34;#333333&#34;) #+END_SRC&lt;/p&gt; &lt;p&gt;If you just want to disable the warnings you can do so by defining the variable &lt;del&gt;treemacs-no-load-time-warnings&lt;/del&gt;. Its exact value is irrelevant, all that matters is that it exists at all. Since the warnings are issues when treemacs is first being loaded the variable must be defined &lt;em&gt;before&lt;/em&gt; treemacs is initialized. This is best achieved by adding the line &lt;del&gt;(defvar treemacs-no-load-time-warnings t)&lt;/del&gt; to treemacs&#39; use-package &lt;del&gt;:init&lt;/del&gt; block.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Can I expand &lt;em&gt;everything&lt;/em&gt; under a node?&lt;/p&gt; &lt;p&gt;Yes, you just need to expand it with a [[https://www.emacswiki.org/emacs/PrefixArgument][prefix argument]]. Closing nodes with a prefix argument works as well. In this case treemacs will forget about the nodes opened below the one that was closed and not reopen them automatically.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Broken display of CJK characters&lt;/p&gt; &lt;p&gt;If you are seeing raw bytes like &lt;del&gt;\316&lt;/del&gt; instead of proper CJK characters like [[https://github.com/Alexander-Miller/treemacs/issues/863][in this issue]] you have to set the proper language environment, e.g.:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (set-language-environment &#39;Chinese-GB18030) #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributing Contributions are very much welcome, but should fit the general scope and style of treemacs. The following is a list of guidelines that should be met (exceptions confirm the rule):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There should be one commit per feature.&lt;/li&gt; &#xA; &lt;li&gt;Commit messages should start with a note in brackets that roughly describes the area the commit relates to, for example &lt;del&gt;[Icons]&lt;/del&gt; if you add an icon.&lt;/li&gt; &#xA; &lt;li&gt;Code must be in the right place (what with the codebase being split in many small files). If there is no right place it probably goes into treemacs-core-utils.el which is where all the general implementation details go.&lt;/li&gt; &#xA; &lt;li&gt;New features must be documented in the readme (for example mentioning new config options in the [[#variables][Config Table]]).&lt;/li&gt; &#xA; &lt;li&gt;There must not be any compiler warnings.&lt;/li&gt; &#xA; &lt;li&gt;The test suite must pass.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Treemacs uses cask to setup a local testing environment and a Makefile that simplifies compiling and testing the codebase. First run &lt;del&gt;cask install&lt;/del&gt; to locally pull treemacs&#39; dependencies. Then you can use the following Makefile targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make prepare :: Downloads and updates Cask&#39;s dependencies. Is a dependency of the &lt;del&gt;test&lt;/del&gt; and &lt;del&gt;compile&lt;/del&gt; targets.&lt;/li&gt; &#xA; &lt;li&gt;make compile :: Compiles the code base (and treats compiler warnings as errors).&lt;/li&gt; &#xA; &lt;li&gt;make clean :: Removes the generated .elc files.&lt;/li&gt; &#xA; &lt;li&gt;make lint :: Runs first &lt;del&gt;compile&lt;/del&gt; then &lt;del&gt;clean&lt;/del&gt;, even if the former fails.&lt;/li&gt; &#xA; &lt;li&gt;make test :: Runs the testsuite, once in a graphical environment and once in the terminal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally if you want to just add an icon you can take [[https://github.com/Alexander-Miller/treemacs/commit/94df3e36af865dab2c76b549b1a61f418e3bf5be][this commit]] as an example (though the icons have since been moved into their own module in &lt;del&gt;treemacs-icons.el&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Working With The Code Base&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to delve into the treemacs&#39; code base, check out [[https://github.com/Alexander-Miller/treemacs/wiki][the wiki]] for some general pointers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;emacs &amp;gt;= 26.1 (&amp;gt;= 27.1 for tab-bar)&lt;/li&gt; &#xA; &lt;li&gt;s&lt;/li&gt; &#xA; &lt;li&gt;dash&lt;/li&gt; &#xA; &lt;li&gt;cl-lib&lt;/li&gt; &#xA; &lt;li&gt;ace-window&lt;/li&gt; &#xA; &lt;li&gt;pfuture&lt;/li&gt; &#xA; &lt;li&gt;ht&lt;/li&gt; &#xA; &lt;li&gt;cfrs&lt;/li&gt; &#xA; &lt;li&gt;hydra&lt;/li&gt; &#xA; &lt;li&gt;(optionally) evil&lt;/li&gt; &#xA; &lt;li&gt;(optionally) projectile&lt;/li&gt; &#xA; &lt;li&gt;(optionally) winum&lt;/li&gt; &#xA; &lt;li&gt;(optionally) magit&lt;/li&gt; &#xA; &lt;li&gt;(optionally) perspective/persp&lt;/li&gt; &#xA; &lt;li&gt;(optionally) all-the-icons&lt;/li&gt; &#xA; &lt;li&gt;(optionally) python(3)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>akermu/emacs-libvterm</title>
    <updated>2025-08-01T01:53:05Z</updated>
    <id>tag:github.com,2025-08-01:/akermu/emacs-libvterm</id>
    <link href="https://github.com/akermu/emacs-libvterm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs libvterm integration&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/vterm&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/vterm-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Emacs-libvterm (&lt;em&gt;vterm&lt;/em&gt;) is fully-fledged terminal emulator inside GNU Emacs based on &lt;a href=&#34;https://github.com/neovim/libvterm&#34;&gt;libvterm&lt;/a&gt;, a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;p&gt;This package is in active development and, while being stable enough to be used as a daily-driver, it is currently in &lt;strong&gt;alpha&lt;/strong&gt; stage. This means that occasionally the public interface will change (for example names of options or functions). A list of recent breaking changes is in &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#breaking-changes&#34;&gt;appendix&lt;/a&gt;. Moreover, emacs-libvterm deals directly with some low-level operations, hence, bugs can lead to segmentation faults and crashes. If that happens, please &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/new&#34;&gt;report the problem&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Given that eshell, shell, and (ansi-)term are Emacs built-in, why should I use vterm?&lt;/h2&gt; &#xA;&lt;p&gt;The short answer is: unparalleled performance and compatibility with standard command-line tools.&lt;/p&gt; &#xA;&lt;p&gt;For the long answer, let us discuss the differences between &lt;code&gt;eshell&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, &lt;code&gt;term&lt;/code&gt; and &lt;code&gt;vterm&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;eshell&lt;/code&gt;: it is a shell completely implemented in Emacs Lisp. It is well-integrated in Emacs and it runs on Windows. It does not support command line tools that require terminal manipulation capabilities (e.g., &lt;code&gt;ncdu&lt;/code&gt;, &lt;code&gt;nmtui&lt;/code&gt;, ...).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shell&lt;/code&gt;: it interfaces with a standard shell (e.g., &lt;code&gt;bash&lt;/code&gt;). It reads an input from Emacs, sends it to the shell, and reports back the output from the shell. As such, like &lt;code&gt;eshell&lt;/code&gt;, it does not support interactive commands, especially those that directly handle how the output should be displayed (e.g., &lt;code&gt;htop&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;term&lt;/code&gt;: it is a terminal emulator written in elisp. &lt;code&gt;term&lt;/code&gt; runs a shell (similarly to other terminal emulators like Gnome Terminal) and programs can directly manipulate the output using escape codes. Hence, many interactive applications (like the one aforementioned) work with &lt;code&gt;term&lt;/code&gt;. However, &lt;code&gt;term&lt;/code&gt; and &lt;code&gt;ansi-term&lt;/code&gt; do not implement all the escapes codes needed, so some programs do not work properly. Moreover, &lt;code&gt;term&lt;/code&gt; has inferior performance compared to standalone terminals, especially with large bursts of output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm&lt;/code&gt;: like &lt;code&gt;term&lt;/code&gt; it is a terminal emulator. Unlike &lt;code&gt;term&lt;/code&gt;, the core of &lt;code&gt;vterm&lt;/code&gt; is an external library written in C, &lt;code&gt;libvterm&lt;/code&gt;. For this reason, &lt;code&gt;vterm&lt;/code&gt; outperforms &lt;code&gt;term&lt;/code&gt; and has a nearly universal compatibility with terminal applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Vterm is not for you &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/12&#34;&gt;if you are using Windows&lt;/a&gt;, or if you cannot set up Emacs with support for modules. Otherwise, you should try vterm, as it provides a superior terminal experience in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; is like using Gnome Terminal inside Emacs: Vterm is fully-featured and fast, but is not as well integrated in Emacs as &lt;code&gt;eshell&lt;/code&gt; (yet), so some of the editing keybinding you are used to using may not work. For example, &lt;code&gt;evil-mode&lt;/code&gt; is currently not supported (though, users can enable VI emulation in their shells). This is because keys are sent directly to the shell. We are constantly working to improve this.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Before installing emacs-libvterm, you need to make sure you have installed&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;GNU Emacs (&amp;gt;= 25.1) with &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Dynamic-Modules.html&#34;&gt;module support&lt;/a&gt;. You can check that, by verifying that &lt;code&gt;module-file-suffix&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;cmake (&amp;gt;= 3.11)&lt;/li&gt; &#xA; &lt;li&gt;libtool-bin (related issues: &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/66&#34;&gt;#66&lt;/a&gt; &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/85#issuecomment-491845136&#34;&gt;#85&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;OPTIONAL: &lt;a href=&#34;https://github.com/Sbozzolo/libvterm-mirror.git&#34;&gt;libvterm&lt;/a&gt; (&amp;gt;= 0.2). This library can be found in the official repositories of most distributions (e.g., Arch, Debian, Fedora, Gentoo, openSUSE, Ubuntu). Typical names are &lt;code&gt;libvterm&lt;/code&gt; (Arch, Fedora, Gentoo, openSUSE), or &lt;code&gt;libvterm-dev&lt;/code&gt; (Debian, Ubuntu). If not available, &lt;code&gt;libvterm&lt;/code&gt; will be downloaded during the compilation process. Some distributions (e.g. Ubuntu &amp;lt; 20.04, Debian &amp;lt; 11) have versions of &lt;code&gt;libvterm&lt;/code&gt; that are too old. If you find compilation errors related to &lt;code&gt;VTERM_COLOR&lt;/code&gt;, you should not use your system libvterm. See &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#frequently-asked-questions-and-problems&#34;&gt;FAQ&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;From MELPA&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; is available on &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;, and it can be installed as a normal package. If the requirements are satisfied (mainly, Emacs was built with support for modules), &lt;code&gt;vterm&lt;/code&gt; will compile the module the first time it is run. This is the recommended way to install &lt;code&gt;vterm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; can be install from MELPA with &lt;code&gt;use-package&lt;/code&gt; by adding the following lines to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package vterm&#xA;    :ensure t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To take full advantage of the capabilities of &lt;code&gt;vterm&lt;/code&gt;, you should configure your shell too. Read about this in the section &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#shell-side-configuration&#34;&gt;shell-side configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manual installation&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/akermu/emacs-libvterm.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, vterm will try to find if libvterm is installed. If it is not found, emacs-libvterm will download the latest version available of libvterm (from &lt;a href=&#34;https://github.com/neovim/libvterm&#34;&gt;here&lt;/a&gt;), compile it, and use it. If you always want to use the vendored version as opposed to the one on you system, set &lt;code&gt;USE_SYSTEM_LIBVTERM&lt;/code&gt; to &lt;code&gt;no&lt;/code&gt;. To do this, change &lt;code&gt;cmake ..&lt;/code&gt; with &lt;code&gt;cmake -DUSE_SYSTEM_LIBVTERM=no ..&lt;/code&gt; in the following instructions.&lt;/p&gt; &#xA;&lt;p&gt;Build the module with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd emacs-libvterm&#xA;mkdir -p build&#xA;cd build&#xA;cmake ..&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add this to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;path/to/emacs-libvterm&#34;)&#xA;(require &#39;vterm)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, with &lt;code&gt;use-package&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package vterm&#xA;  :load-path  &#34;path/to/emacs-libvterm/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;vterm and Ubuntu&lt;/h2&gt; &#xA;&lt;h3&gt;20.04&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; on Ubuntu requires additional steps. The latest LTS version (20.04) ships without CMake installed and Emacs27 is not yet available from Ubuntu&#39;s package repository.&lt;/p&gt; &#xA;&lt;p&gt;The basic steps for getting vterm to work on Ubuntu 20.04 are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure Emacs27 is installed&lt;/li&gt; &#xA; &lt;li&gt;Install cmake, libtool, and libtool-bin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a few options for installing Emacs27 on Ubuntu 20.04:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile Emacs27 from source&lt;/li&gt; &#xA; &lt;li&gt;Install Emacs27 from Snap&lt;/li&gt; &#xA; &lt;li&gt;Install Emacs27 from Kevin Kelley&#39;s PPA&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In any case, if you have an older Emacs version you will need to purge it before proceeding:&lt;/p&gt; &#xA;&lt;h4&gt;Purge Emacs&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt --purge remove emacs&#xA;sudo apt autoremove&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing Emacs27 from Kevin Kelley PPA&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo add-apt-repository ppa:kelleyk/emacs&#xA;sudo apt install emacs27&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;If you get an error about emacs27_common during the install process:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Errors were encountered while processing:&#xA; /tmp/apt-dpkg-install-RVK8CA/064-emacs27-common_27.1~1.git86d8d76aa3-kk2+20.04_all.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt --purge remove emacs-common&#xA;sudo apt --fix-broken install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing Emacs27 from Snap&lt;/h4&gt; &#xA;&lt;p&gt;I hesitate to include SNAP here, because I ran into a number of GTK Theme parsing errors, and Fontconfig errors when I tested it, and reverted to installing from Kevin Kelley&#39;s PPA. YMMV&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo snap install emacs --classic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install CMake and Libtool&lt;/h4&gt; &#xA;&lt;p&gt;In Ubuntu 20.04 CMake (v3.16.3-1ubuntu1) and Libtool can be installed with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install cmake&#xA;sudo apt install libtool&#xA;sudo apt install libtool-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;18.04&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;vterm&lt;/code&gt; on Ubuntu 18.04 requires additional steps. 18.04 ships with a version of CMake that is too old for &lt;code&gt;vterm&lt;/code&gt; and GNU Emacs is not compiled with support for dynamical module loading.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to install GNU Emacs with module support from Kevin Kelley&#39;s PPA. The binary in Ubuntu Emacs Lisp PPA is currently broken and leads to segmentation faults (see &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/185#issuecomment-562237077&#34;&gt;#185&lt;/a&gt;). In case Emacs is already on the system, you need to purge it before proceeding with the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo add-apt-repository ppa:kelleyk/emacs&#xA;sudo apt update&#xA;sudo apt-get install emacs26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A way to install a recent version of CMake (&amp;gt;= 3.11) is with linuxbrew.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In some cases, &lt;code&gt;/bin/sh&lt;/code&gt; needs to be relinked to &lt;code&gt;/bin/bash&lt;/code&gt; for the compilation to work (see, &lt;a href=&#34;https://github.com/akermu/emacs-libvterm/issues/216#issuecomment-575934593&#34;&gt;#216&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Pull requests to improve support for Ubuntu are welcome (e.g., simplifying the installation).&lt;/p&gt; &#xA;&lt;p&gt;Some releases of Ubuntu (e.g., 18.04) ship with a old version of libvterm that can lead to compilation errors. If you have this problem, see the &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#frequently-asked-questions-and-problems&#34;&gt;FAQ&lt;/a&gt; for a solution.&lt;/p&gt; &#xA;&lt;h2&gt;GNU Guix&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; and its dependencies are available in GNU Guix as &lt;a href=&#34;https://guix.gnu.org/packages/emacs-vterm-0-1.7d7381f/&#34;&gt;emacs-vterm&lt;/a&gt;. The package can be installed with &lt;code&gt;guix package -i emacs-vterm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shell-side configuration&lt;/h2&gt; &#xA;&lt;p&gt;Some of the most useful features in &lt;code&gt;vterm&lt;/code&gt; (e.g., &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#directory-tracking-and-prompt-tracking&#34;&gt;directory-tracking and prompt-tracking&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#message-passing&#34;&gt;message passing&lt;/a&gt;) require shell-side configurations. The main goal of these additional functions is to enable the shell to send information to &lt;code&gt;vterm&lt;/code&gt; via properly escaped sequences. A function that helps in this task, &lt;code&gt;vterm_printf&lt;/code&gt;, is defined below. This function is widely used throughout this readme.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;, put this in your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vterm_printf() {&#xA;    if [ -n &#34;$TMUX&#34; ] \&#xA;        &amp;amp;&amp;amp; { [ &#34;${TERM%%-*}&#34; = &#34;tmux&#34; ] \&#xA;            || [ &#34;${TERM%%-*}&#34; = &#34;screen&#34; ]; }; then&#xA;        # Tell tmux to pass the escape sequences through&#xA;        printf &#34;\ePtmux;\e\e]%s\007\e\\&#34; &#34;$1&#34;&#xA;    elif [ &#34;${TERM%%-*}&#34; = &#34;screen&#34; ]; then&#xA;        # GNU screen (screen, screen-256color, screen-256color-bce)&#xA;        printf &#34;\eP\e]%s\007\e\\&#34; &#34;$1&#34;&#xA;    else&#xA;        printf &#34;\e]%s\e\\&#34; &#34;$1&#34;&#xA;    fi&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This works also for &lt;code&gt;dash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt; put this in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function vterm_printf;&#xA;    if begin; [  -n &#34;$TMUX&#34; ]  ; and  string match -q -r &#34;screen|tmux&#34; &#34;$TERM&#34;; end&#xA;        # tell tmux to pass the escape sequences through&#xA;        printf &#34;\ePtmux;\e\e]%s\007\e\\&#34; &#34;$argv&#34;&#xA;    else if string match -q -- &#34;screen*&#34; &#34;$TERM&#34;&#xA;        # GNU screen (screen, screen-256color, screen-256color-bce)&#xA;        printf &#34;\eP\e]%s\007\e\\&#34; &#34;$argv&#34;&#xA;    else&#xA;        printf &#34;\e]%s\e\\&#34; &#34;$argv&#34;&#xA;    end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Debugging and testing&lt;/h1&gt; &#xA;&lt;p&gt;If you have successfully built the module, you can test it by executing the following command in the &lt;code&gt;build&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Open a terminal in the current window.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-other-window&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Open a terminal in another window.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-copy-mode&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When you enable &lt;code&gt;vterm-copy-mode&lt;/code&gt;, the terminal buffer behaves like a normal &lt;code&gt;read-only&lt;/code&gt; text buffer: you can search, copy text, etc. The default keybinding to toggle &lt;code&gt;vterm-copy-mode&lt;/code&gt; is &lt;code&gt;C-c C-t&lt;/code&gt;. When a region is selected, it is possible to copy the text and leave &lt;code&gt;vterm-copy-mode&lt;/code&gt; with the enter key.&lt;/p&gt; &#xA;&lt;p&gt;If no region is selected when the enter key is pressed it will copy the current line from start to end. If &lt;code&gt;vterm-copy-exclude-prompt&lt;/code&gt; is true it will skip the prompt and not include it in the copy.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt; does exactly what the name suggests: it clears the current buffer from the data that it is not currently visible. &lt;code&gt;vterm-clear-scrollback&lt;/code&gt; is bound to &lt;code&gt;C-c C-l&lt;/code&gt;. This function is typically used with the &lt;code&gt;clear&lt;/code&gt; function provided by the shell to clear both screen and scrollback. In order to achieve this behavior, you need to add a new shell alias.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;, put this in your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;if [[ &#34;$INSIDE_EMACS&#34; = &#39;vterm&#39; ]]; then&#xA;    alias clear=&#39;vterm_printf &#34;51;Evterm-clear-scrollback&#34;;tput clear&#39;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, put this in your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ &#34;$INSIDE_EMACS&#34; = &#39;vterm&#39; ]; then&#xA;    clear() {&#xA;        vterm_printf &#34;51;Evterm-clear-scrollback&#34;;&#xA;        tput clear;&#xA;    }&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;if [ &#34;$INSIDE_EMACS&#34; = &#39;vterm&#39; ]&#xA;    function clear&#xA;        vterm_printf &#34;51;Evterm-clear-scrollback&#34;;&#xA;        tput clear;&#xA;    end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These aliases take advantage of the fact that &lt;code&gt;vterm&lt;/code&gt; can execute &lt;code&gt;elisp&lt;/code&gt; commands, as explained below.&lt;/p&gt; &#xA;&lt;p&gt;If it possible to automatically clear the scrollback when the screen is cleared by setting the variable &lt;code&gt;vterm-clear-scrollback-when-clearing&lt;/code&gt;: When &lt;code&gt;vterm-clear-scrollback-when-clearing&lt;/code&gt; is non nil, &lt;code&gt;C-l&lt;/code&gt; clears both the screen and the scrollback. When is nil, &lt;code&gt;C-l&lt;/code&gt; only clears the screen. The opposite behavior can be achieved by using the universal prefix (i.e., calling &lt;code&gt;C-u C-l&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-shell&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Shell to run in a new vterm. It defaults to &lt;code&gt;$SHELL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-environment&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;to add more environment variables there is the custom vterm-environment which has a similar format than the internal Emacs variable process-environment. You can check the documentation with C-h v process-environment for more details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-term-environment-variable&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Value for the &lt;code&gt;TERM&lt;/code&gt; environment variable. It defaults to &lt;code&gt;xterm-256color&lt;/code&gt;. If &lt;a href=&#34;https://github.com/dieggsy/eterm-256color&#34;&gt;eterm-256color&lt;/a&gt; is installed, setting &lt;code&gt;vterm-term-environment-variable&lt;/code&gt; to &lt;code&gt;eterm-color&lt;/code&gt; improves the rendering of colors in some systems.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If set to &lt;code&gt;t&lt;/code&gt;, buffers are killed when the associated process is terminated (for example, by logging out the shell). Keeping buffers around it is useful if you need to copy or manipulate the content.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-module-cmake-args&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Compilation flags and arguments to be given to CMake when compiling the module. This string is directly passed to CMake, so it uses the same syntax. At the moment, it main use is for compiling vterm using the system libvterm instead of the one downloaded from GitHub. You can find all the arguments and flags available with &lt;code&gt;cmake -LA&lt;/code&gt; in the build directory.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-copy-exclude-prompt&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Controls whether or not to exclude the prompt when copying a line in &lt;code&gt;vterm-copy-mode&lt;/code&gt;. Using the universal prefix before calling &lt;code&gt;vterm-copy-mode-done&lt;/code&gt; will invert the value for that call, allowing you to temporarily override the setting. When a prompt is not found, the whole line is copied.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The variable &lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt; determines whether to use the vterm prompt tracking, if false it use the regexp in &lt;code&gt;vterm-copy-prompt-regexp&lt;/code&gt; to search for the prompt.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-enable-manipulate-selection-data-by-osc52&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Vterm support copy text to Emacs kill ring and system clipboard by using OSC 52. See &lt;a href=&#34;https://invisible-island.net/xterm/ctlseqs/ctlseqs.html&#34;&gt;https://invisible-island.net/xterm/ctlseqs/ctlseqs.html&lt;/a&gt; for more info about OSC 52. For example: send &#39;blabla&#39; to kill ring: printf &#34;\033]52;c;$(printf &#34;%s&#34; &#34;blabla&#34; | base64)\a&#34;&lt;/p&gt; &#xA;&lt;p&gt;tmux can share its copy buffer to terminals by supporting osc52(like iterm2 xterm), you can enable this feature for tmux by : set -g set-clipboard on #osc 52 copy paste share with iterm set -ga terminal-overrides &#39;,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007&#39; set -ga terminal-overrides &#39;,screen*:XT:Ms=\E]52;%p1%s;%p2%s\007&#39;&lt;/p&gt; &#xA;&lt;p&gt;The clipboard querying/clearing functionality offered by OSC 52 is not implemented here, And for security reason, this feature is disabled by default.&#34;&lt;/p&gt; &#xA;&lt;p&gt;This feature need the new way of handling strings with a struct &lt;code&gt;VTermStringFragment&lt;/code&gt; in libvterm. You&#39;d better compile emacs-libvterm with &lt;code&gt;cmake -DUSE_SYSTEM_LIBVTERM=no ..&lt;/code&gt;. If you don&#39;t do that, when the content you want to copied is too long, it would be truncated by bug of libvterm.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-buffer-name-string&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;vterm-buffer-name-string&lt;/code&gt; is not nil, vterm renames automatically its own buffers with &lt;code&gt;vterm-buffer-name-string&lt;/code&gt;. This string can contain the character &lt;code&gt;%s&lt;/code&gt;, which is substituted with the &lt;em&gt;title&lt;/em&gt; (as defined by the shell, see below). A possible value for &lt;code&gt;vterm-buffer-name-string&lt;/code&gt; is &lt;code&gt;vterm %s&lt;/code&gt;, according to which all the vterm buffers will be named &#34;vterm TITLE&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This requires some shell-side configuration to print the title. For example to set the name &#34;HOSTNAME:PWD&#34;, use can you the following:&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;autoload -U add-zsh-hook&#xA;add-zsh-hook -Uz chpwd (){ print -Pn &#34;\e]2;%m:%2~\a&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PROMPT_COMMAND=&#34;${PROMPT_COMMAND:+$PROMPT_COMMAND; }&#34;&#39;echo -ne &#34;\033]0;${HOSTNAME}:${PWD}\007&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function fish_title&#xA;    hostname&#xA;    echo &#34;:&#34;&#xA;    prompt_pwd&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://tldp.org/HOWTO/Xterm-Title-4.html&#34;&gt;zsh and bash&lt;/a&gt; and &lt;a href=&#34;https://fishshell.com/docs/current/#programmable-title&#34;&gt;fish documentations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-always-compile-module&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Vterm needs &lt;code&gt;vterm-module&lt;/code&gt; to work. This can be compiled externally, or &lt;code&gt;vterm&lt;/code&gt; will ask the user whether to build the module when &lt;code&gt;vterm&lt;/code&gt; is first called. To avoid this question and always compile the module, set &lt;code&gt;vterm-always-compile-module&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-copy-mode-remove-fake-newlines&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When not-nil fake newlines are removed on entering copy mode. vterm inserts fake-newlines purely for rendering. When using &lt;code&gt;vterm-copy-mode&lt;/code&gt; these are in conflict with many emacs functions like isearch-forward. if this varialbe is not-nil the fake-newlines are removed on entering copy-mode and re-inserted on leaving copy mode. Also truncate-lines is set to t on entering copy-mode and set to nil on leaving.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;vterm-tramp-shells&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The shell that gets run in the vterm for tramp.&lt;/p&gt; &#xA;&lt;p&gt;This has to be a list of pairs of the format: &lt;code&gt;(TRAMP-METHOD SHELL)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;TRAMP-METHOD&lt;/code&gt; is a method string as used by tramp (e.g., &lt;code&gt;&#34;ssh&#34;&lt;/code&gt;). Use t as &lt;code&gt;TRAMP-METHOD&lt;/code&gt; to specify a default shell for all methods. Specific methods always take precedence over &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Set SHELL to &lt;code&gt;&#39;login-shell&lt;/code&gt; to use the user&#39;s login shell on the remote host. The login-shell detection currently works for POSIX-compliant remote hosts that have the &lt;code&gt;getent&lt;/code&gt; command (regular GNU/Linux distros, *BSDs, but not MacOS X unfortunately). You can specify an additional second &lt;code&gt;SHELL&lt;/code&gt; command as a fallback that is used when the login-shell detection fails, e.g., &lt;code&gt;&#39;((&#34;ssh&#34; login-shell &#34;/bin/bash&#34;) ...)&lt;/code&gt; If no second &lt;code&gt;SHELL&lt;/code&gt; command is specified with &lt;code&gt;&#39;login-shell&lt;/code&gt;, vterm will fall back to tramp&#39;s shell.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usee the default login shell for all methods, except for docker. &lt;code&gt;&#39;((t login-shell) (&#34;docker&#34; &#34;/bin/sh&#34;))&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the default login shell for ssh and scp, fall back to &#34;/bin/bash&#34;. Use tramp&#39;s default shell for all other methods. &lt;code&gt;&#39;((&#34;ssh&#34; login-shell &#34;/bin/bash&#34;) (&#34;scp&#34; login-shell &#34;/bin/bash&#34;))&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;If you want a key to be sent to the terminal, bind it to &lt;code&gt;vterm--self-insert&lt;/code&gt;, or remove it from &lt;code&gt;vterm-mode-map&lt;/code&gt;. By default, &lt;code&gt;vterm.el&lt;/code&gt; binds most of the &lt;code&gt;C-&amp;lt;char&amp;gt;&lt;/code&gt; and &lt;code&gt;M-&amp;lt;char&amp;gt;&lt;/code&gt; keys, &lt;code&gt;&amp;lt;f1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;f12&amp;gt;&lt;/code&gt; and some special keys like &lt;code&gt;&amp;lt;backspace&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt;. Sending a keyboard interrupt is bound to &lt;code&gt;C-c C-c&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to send a keypress that is already recognized by Emacs, such as &lt;code&gt;C-g&lt;/code&gt;, use the interactive function &lt;code&gt;vterm-send-next-key&lt;/code&gt;. This can be bound to a key in the &lt;code&gt;vterm-mode-map&lt;/code&gt; like &lt;code&gt;C-q&lt;/code&gt;, in which case pressing &lt;code&gt;C-q C-g&lt;/code&gt; will send a &lt;code&gt;C-g&lt;/code&gt; key to the terminal, and so on for other modified keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key vterm-mode-map (kbd &#34;C-q&#34;) #&#39;vterm-send-next-key)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be useful for controlling an application running in the terminal, such as Emacs or Nano.&lt;/p&gt; &#xA;&lt;h2&gt;Fonts&lt;/h2&gt; &#xA;&lt;p&gt;You can change the font (the &lt;em&gt;face&lt;/em&gt;) used in a vterm with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;vterm-mode-hook&#xA;          (lambda ()&#xA;            (set (make-local-variable &#39;buffer-face-mode-face) &#39;fixed-pitch)&#xA;                 (buffer-face-mode t)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where instead of &lt;code&gt;&#39;fixed-pitch&lt;/code&gt; you specify the face you want to use. The example reported here can be used to force vterm to use a mono-spaced font (the &lt;code&gt;fixed-pitch&lt;/code&gt; face). This is useful when your default font in Emacs is a proportional font.&lt;/p&gt; &#xA;&lt;p&gt;In addition to that, you can disable some text properties (bold, underline, reverse video) setting the relative option to &lt;code&gt;t&lt;/code&gt; (&lt;code&gt;vterm-disable-bold&lt;/code&gt;, &lt;code&gt;vterm-disable-underline&lt;/code&gt;, or &lt;code&gt;vterm-disable-inverse-video&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can use another font for vterm buffer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;vterm-mode-hook&#xA;          (lambda ()&#xA;               (set (make-local-variable &#39;buffer-face-mode-face) &#39;(:family &#34;IosevkaTerm Nerd Font&#34;))&#xA;               (buffer-face-mode t))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Blink cursor&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;vterm-ignore-blink-cursor&lt;/code&gt; is &lt;code&gt;t&lt;/code&gt;, vterm will ignore request from application to turn on or off cursor blink.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;nil&lt;/code&gt;, cursor in any window may begin to blink or not blink because &lt;code&gt;blink-cursor-mode&lt;/code&gt; is a global minor mode in Emacs, you can use &lt;code&gt;M-x blink-cursor-mode&lt;/code&gt; to toggle.&lt;/p&gt; &#xA;&lt;h2&gt;Colors&lt;/h2&gt; &#xA;&lt;p&gt;Customize the following faces to your liking. It is possible to specify different colors for foreground and background via the &lt;code&gt;:foreground&lt;/code&gt; and &lt;code&gt;:background&lt;/code&gt; attributes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vterm-color-black&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-red&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-green&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-yellow&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-blue&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-magenta&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-cyan&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-white&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-black&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-red&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-green&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-yellow&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-blue&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-magenta&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-cyan&lt;/li&gt; &#xA; &lt;li&gt;vterm-color-bright-white&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directory tracking and Prompt tracking&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; supports &lt;em&gt;directory tracking&lt;/em&gt;. If this feature is enabled, the default directory in Emacs and the current working directory in &lt;code&gt;vterm&lt;/code&gt; are synced. As a result, interactive functions that ask for a path or a file (e.g., &lt;code&gt;dired&lt;/code&gt; or &lt;code&gt;find-file&lt;/code&gt;) will do so starting from the current location.&lt;/p&gt; &#xA;&lt;p&gt;And &lt;code&gt;vterm&lt;/code&gt; supports &lt;em&gt;prompt tracking&lt;/em&gt;. If this feature is enabled, Emacs knows where the prompt ends, you needn&#39;t customize &lt;code&gt;term-prompt-regexp&lt;/code&gt; any more. Then you can use &lt;code&gt;vterm-next-prompt&lt;/code&gt; and &lt;code&gt;vterm-previous-prompt&lt;/code&gt; moving to end of next/previous prompt. The default keybinding is &lt;code&gt;C-c C-n&lt;/code&gt; and &lt;code&gt;C-c C-p&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And &lt;code&gt;vterm-beginning-of-line&lt;/code&gt; would move the point to the first character after the shell prompt on this line. If the point is already there, move to the beginning of the line. The default keybinding is &lt;code&gt;C-a&lt;/code&gt; in &lt;code&gt;vterm-copy-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And &lt;code&gt;vterm--at-prompt-p&lt;/code&gt; would check whether the cursor is at the point just after the shell prompt.&lt;/p&gt; &#xA;&lt;p&gt;Directory tracking and Prompt tracking requires some configuration, as the shell has to be instructed to share the relevant information with Emacs. The following pieces of code assume that you have the function &lt;code&gt;vterm_printf&lt;/code&gt; as defined in section &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/#shell-side-configuration&#34;&gt;shell-side configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;zsh&lt;/code&gt;, put this at the end of your &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;vterm_prompt_end() {&#xA;    vterm_printf &#34;51;A$(whoami)@$(hostname):$(pwd)&#34;&#xA;}&#xA;setopt PROMPT_SUBST&#xA;PROMPT=$PROMPT&#39;%{$(vterm_prompt_end)%}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, put this at the end of your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vterm_prompt_end(){&#xA;    vterm_printf &#34;51;A$(whoami)@$(hostname):$(pwd)&#34;&#xA;}&#xA;PS1=$PS1&#39;\[$(vterm_prompt_end)\]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;, put this in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function vterm_prompt_end;&#xA;    vterm_printf &#39;51;A&#39;(whoami)&#39;@&#39;(hostname)&#39;:&#39;(pwd)&#xA;end&#xA;functions --copy fish_prompt vterm_old_fish_prompt&#xA;function fish_prompt --description &#39;Write out the prompt; do not replace this. Instead, put this at end of your file.&#39;&#xA;    # Remove the trailing newline from the original prompt. This is done&#xA;    # using the string builtin from fish, but to make sure any escape codes&#xA;    # are correctly interpreted, use %b for printf.&#xA;    printf &#34;%b&#34; (string join &#34;\n&#34; (vterm_old_fish_prompt))&#xA;    vterm_prompt_end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we are using the function &lt;code&gt;vterm_printf&lt;/code&gt; that we have discussed above, so make sure that this function is defined in your configuration file.&lt;/p&gt; &#xA;&lt;p&gt;Directory tracking works on remote servers too. In case the hostname of your remote machine does not match the actual hostname needed to connect to that server, change &lt;code&gt;$(hostname)&lt;/code&gt; with the correct one. For example, if the correct hostname is &lt;code&gt;foo&lt;/code&gt; and the username is &lt;code&gt;bar&lt;/code&gt;, you should have something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;HOSTNAME=foo&#xA;USER=baz&#xA;vterm_printf &#34;51;A$USER@$HOSTNAME:$(pwd)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Message passing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;vterm&lt;/code&gt; can read and execute commands. At the moment, a command is passed by providing a specific escape sequence. For example, to evaluate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(message &#34;Hello!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;printf &#34;\e]51;Emessage \&#34;Hello\!\&#34;\e\\&#34;&#xA;# or&#xA;vterm_printf &#34;51;Emessage \&#34;Hello\!\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The commands that are understood are defined in the setting &lt;code&gt;vterm-eval-cmds&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As &lt;code&gt;split-string-and-unquote&lt;/code&gt; is used the parse the passed string, double quotes and backslashes need to be escaped via backslash. A convenient shell function to automate the substitution is&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;zsh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vterm_cmd() {&#xA;    local vterm_elisp&#xA;    vterm_elisp=&#34;&#34;&#xA;    while [ $# -gt 0 ]; do&#xA;        vterm_elisp=&#34;$vterm_elisp&#34;&#34;$(printf &#39;&#34;%s&#34; &#39; &#34;$(printf &#34;%s&#34; &#34;$1&#34; | sed -e &#39;s|\\|\\\\|g&#39; -e &#39;s|&#34;|\\&#34;|g&#39;)&#34;)&#34;&#xA;        shift&#xA;    done&#xA;    vterm_printf &#34;51;E$vterm_elisp&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function vterm_cmd --description &#39;Run an Emacs command among the ones been defined in vterm-eval-cmds.&#39;&#xA;    set -l vterm_elisp ()&#xA;    for arg in $argv&#xA;        set -a vterm_elisp (printf &#39;&#34;%s&#34; &#39; (string replace -a -r &#39;([\\\\&#34;])&#39; &#39;\\\\\\\\$1&#39; $arg))&#xA;    end&#xA;    vterm_printf &#39;51;E&#39;(string join &#39;&#39; $vterm_elisp)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can write shell functions to call the ones defined in &lt;code&gt;vterm-eval-cmds&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;find_file() {&#xA;    vterm_cmd find-file &#34;$(realpath &#34;${@:-.}&#34;)&#34;&#xA;}&#xA;&#xA;say() {&#xA;    vterm_cmd message &#34;%s&#34; &#34;$*&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for &lt;code&gt;fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function find_file&#xA;    set -q argv[1]; or set argv[1] &#34;.&#34;&#xA;    vterm_cmd find-file (realpath &#34;$argv&#34;)&#xA;end&#xA;&#xA;function say&#xA;    vterm_cmd message &#34;%s&#34; &#34;$argv&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This newly defined &lt;code&gt;find_file&lt;/code&gt; function can now be used inside &lt;code&gt;vterm&lt;/code&gt; as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;find_file name_of_file_in_local_directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you call &lt;code&gt;find_file&lt;/code&gt; without specifying any file (you just execute &lt;code&gt;find_file&lt;/code&gt; in your shell), &lt;code&gt;dired&lt;/code&gt; will open with the current directory.&lt;/p&gt; &#xA;&lt;p&gt;As an example, say you like having files opened below the current window. You could add the command to do it on the lisp side like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(push (list &#34;find-file-below&#34;&#xA;            (lambda (path)&#xA;              (if-let* ((buf (find-file-noselect path))&#xA;                        (window (display-buffer-below-selected buf nil)))&#xA;                  (select-window window)&#xA;                (message &#34;Failed to open file: %s&#34; path))))&#xA;      vterm-eval-cmds)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the command in your &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;open_file_below() {&#xA;    vterm_cmd find-file-below &#34;$(realpath &#34;${@:-.}&#34;)&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can open any file from inside your shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;open_file_below ~/Documents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shell-side configuration files&lt;/h2&gt; &#xA;&lt;p&gt;The configurations described in earlier sections are combined in &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/etc/&#34;&gt;&lt;code&gt;etc/&lt;/code&gt;&lt;/a&gt;. These can be appended to or loaded into your user configuration file. Alternatively, they can be installed system-wide, for example in &lt;code&gt;/etc/bash/bashrc.d/&lt;/code&gt;, &lt;code&gt;/etc/profile.d/&lt;/code&gt; (for &lt;code&gt;zsh&lt;/code&gt;), or &lt;code&gt;/etc/fish/conf.d/&lt;/code&gt; for &lt;code&gt;fish&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using vterm Emacs sets the environment variable INSIDE_EMACS in the subshell to ‘vterm’. Usually the programs check this variable to determine whether they are running inside Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Vterm also sets an extra variable EMACS_VTERM_PATH to the place where the vterm library is installed. This is very useful because when vterm is installed from melpa the Shell-side configuration files are in the EMACS_VTERM_PATH inside the /etc sub-directory. After a package update, the directory name changes, so, a code like this in your bashrc could be enough to load always the latest version of the file from the right location without coping any file manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;if [[ &#34;$INSIDE_EMACS&#34; = &#39;vterm&#39; ]] \&#xA;    &amp;amp;&amp;amp; [[ -n ${EMACS_VTERM_PATH} ]] \&#xA;    &amp;amp;&amp;amp; [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then&#xA;&#x9;source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frequently Asked Questions and Problems&lt;/h2&gt; &#xA;&lt;h3&gt;How can I increase the size of the scrollback?&lt;/h3&gt; &#xA;&lt;p&gt;By default, the scrollback can contain up to 1000 lines per each vterm buffer. You can increase this up to 100000 by changing the variable &lt;code&gt;vterm-max-scrollback&lt;/code&gt;. If you want to increase it further, you have to edit the file &lt;code&gt;vterm-module.h&lt;/code&gt;, change the variable &lt;code&gt;SB_MAX&lt;/code&gt;, and set the new value for &lt;code&gt;vterm-max-scrollback&lt;/code&gt;. The potential maximum memory consumption of vterm buffers increases with &lt;code&gt;vterm-max-scrollback&lt;/code&gt;, so setting &lt;code&gt;SB_MAX&lt;/code&gt; to extreme values may lead to system instabilities and crashes.&lt;/p&gt; &#xA;&lt;h3&gt;How can I automatically close vterm buffers when the process is terminated?&lt;/h3&gt; &#xA;&lt;p&gt;There is an option for that: set &lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The package does not compile, I have errors related to &lt;code&gt;VTERM_COLOR&lt;/code&gt;.&lt;/h3&gt; &#xA;&lt;p&gt;The version of &lt;code&gt;libvterm&lt;/code&gt; installed on your system is too old. You should let &lt;code&gt;emacs-libvterm&lt;/code&gt; download &lt;code&gt;libvterm&lt;/code&gt; for you. You can either uninstall your libvterm, or instruct Emacs to ignore the system libvterm. If you are compiling from Emacs, you can do this by setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq vterm-module-cmake-args &#34;-DUSE_SYSTEM_LIBVTERM=no&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and compile again. If you are compiling with CMake, use the flag &lt;code&gt;-DUSE_SYSTEM_LIBVTERM=no&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;&amp;lt;C-backspace&amp;gt;&lt;/code&gt; doesn&#39;t kill previous word.&lt;/h3&gt; &#xA;&lt;p&gt;This can be fixed by rebinding the key to what &lt;code&gt;C-w&lt;/code&gt; does:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key vterm-mode-map (kbd &#34;&amp;lt;C-backspace&amp;gt;&#34;)&#xA;    (lambda () (interactive) (vterm-send-key (kbd &#34;C-w&#34;))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;counsel-yank-pop&lt;/code&gt; doesn&#39;t work.&lt;/h3&gt; &#xA;&lt;p&gt;Add this piece of code to your configuration file to make &lt;code&gt;counsel&lt;/code&gt; use the correct function to yank in vterm buffers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun vterm-counsel-yank-pop-action (orig-fun &amp;amp;rest args)&#xA;  (if (equal major-mode &#39;vterm-mode)&#xA;      (let ((inhibit-read-only t)&#xA;            (yank-undo-function (lambda (_start _end) (vterm-undo))))&#xA;        (cl-letf (((symbol-function &#39;insert-for-yank)&#xA;               (lambda (str) (vterm-send-string str t))))&#xA;            (apply orig-fun args)))&#xA;    (apply orig-fun args)))&#xA;&#xA;(advice-add &#39;counsel-yank-pop-action :around #&#39;vterm-counsel-yank-pop-action)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How can I get the local directory without shell-side configuration?&lt;/h3&gt; &#xA;&lt;p&gt;We recommend that you set up shell-side configuration for reliable directory tracking. If you cannot do it, a possible workaround is the following.&lt;/p&gt; &#xA;&lt;p&gt;On most GNU/Linux systems, you can read current directory from &lt;code&gt;/proc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun vterm-directory-sync ()&#xA;  &#34;Synchronize current working directory.&#34;&#xA;  (interactive)&#xA;  (when vterm--process&#xA;    (let* ((pid (process-id vterm--process))&#xA;           (dir (file-truename (format &#34;/proc/%d/cwd/&#34; pid))))&#xA;      (setq default-directory dir))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A possible application of this function is in combination with &lt;code&gt;find-file&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(advice-add #&#39;find-file :before #&#39;vterm-directory-sync)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method does not work on remote machines.&lt;/p&gt; &#xA;&lt;h3&gt;How can I get the directory tracking in a more understandable way?&lt;/h3&gt; &#xA;&lt;p&gt;If you looked at the recommended way to set-up directory tracking, you will have noticed that it requires printing obscure code like &lt;code&gt;\e]2;%m:%2~\a&lt;/code&gt; (unless you are using &lt;code&gt;fish&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;There is another way to achieve this behavior. Define a shell function, on a local host you can simply use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vterm_set_directory() {&#xA;    vterm_cmd update-pwd &#34;$PWD/&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On a remote one, use instead&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vterm_set_directory() {&#xA;    vterm_cmd update-pwd &#34;/-:&#34;&#34;$USER&#34;&#34;@&#34;&#34;$HOSTNAME&#34;&#34;:&#34;&#34;$PWD/&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, for &lt;code&gt;zsh&lt;/code&gt;, add this function to the &lt;code&gt;chpwd&lt;/code&gt; hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;autoload -U add-zsh-hook&#xA;add-zsh-hook -Uz chpwd (){ vterm_set_directory }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt;, append it to the prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PROMPT_COMMAND=&#34;${PROMPT_COMMAND:+$PROMPT_COMMAND; }vterm_set_directory&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, add &lt;code&gt;update-pwd&lt;/code&gt; to the list of commands that Emacs is allowed to execute from vterm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;vterm-eval-cmds &#39;(&#34;update-pwd&#34; (lambda (path) (setq default-directory path))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When evil-mode is enabled, the cursor moves back in normal state, and this messes directory tracking&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;evil-collection&lt;/code&gt; provides a solution for this problem. If you do not want to use &lt;code&gt;evil-collection&lt;/code&gt;, you can add the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun evil-collection-vterm-escape-stay ()&#xA;&#34;Go back to normal state but don&#39;t move&#xA;cursor backwards. Moving cursor backwards is the default vim behavior but it is&#xA;not appropriate in some cases like terminals.&#34;&#xA;(setq-local evil-move-cursor-back nil))&#xA;&#xA;(add-hook &#39;vterm-mode-hook #&#39;evil-collection-vterm-escape-stay)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jixiuf/vterm-toggle&#34;&gt;vterm-toggle&lt;/a&gt;: Toggles between a vterm and the current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/suonlight/multi-libvterm&#34;&gt;multi-libvterm&lt;/a&gt;: Multiterm for emacs-libvterm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;Breaking changes&lt;/h3&gt; &#xA;&lt;p&gt;Obsolete variables will be removed in version 0.1.&lt;/p&gt; &#xA;&lt;h4&gt;August 2022&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-send-C-[a-z]&lt;/code&gt; &lt;code&gt;vterm-send-M-[a-z]&lt;/code&gt; &lt;code&gt;vterm-define-key&lt;/code&gt; &lt;code&gt;vterm-send-{up/down/left/right/prior/next/meta-dot/meta-comma/ctrl-slash}&lt;/code&gt; were obsolete, please use &lt;code&gt;vterm-send&lt;/code&gt; or &lt;code&gt;vterm-send-key&lt;/code&gt; or &lt;code&gt;vterm--self-insert&lt;/code&gt; instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;October 2020&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-disable-bold-font&lt;/code&gt; was renamed to &lt;code&gt;vterm-disable-bold&lt;/code&gt; to uniform it with the other similar options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;July 2020&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-use-vterm-prompt&lt;/code&gt; was renamed to &lt;code&gt;vterm-use-vterm-prompt-detection-method&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-kill-buffer-on-exit&lt;/code&gt; is set to &lt;code&gt;t&lt;/code&gt; by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;April 2020&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-clear-scrollback&lt;/code&gt; was renamed to &lt;code&gt;vterm-clear-scrollback-when-clearning&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vterm-set-title-functions&lt;/code&gt; was removed. In its place, there is a new custom option &lt;code&gt;vterm-buffer-name-string&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/akermu/emacs-libvterm/master/vterm-buffer-name-string&#34;&gt;vterm-buffer-name-string&lt;/a&gt; for documentation.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Fuco1/smartparens</title>
    <updated>2025-08-01T01:53:05Z</updated>
    <id>tag:github.com,2025-08-01:/Fuco1/smartparens</id>
    <link href="https://github.com/Fuco1/smartparens" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minor mode for Emacs that deals with parens pairs and tries to be smart about it.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Smartparens&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/smartparens/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/smartparens/Lobby.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/smartparens/Lobby&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/smartparens&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/smartparens-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://smartparens.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/smartparens/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/smartparens&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/smartparens-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://smartparens.readthedocs.io/en/latest/?badge=stable&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/smartparens/badge/?version=stable&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Fuco1/smartparens/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/Fuco1/smartparens/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/Fuco1/smartparens&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/Fuco1/smartparens/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=A5PMGVKCQBT88&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&#34; alt=&#34;Paypal logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/user?u=3282358&amp;amp;ty=h&#34;&gt;&lt;img src=&#34;https://c5.patreon.com/external/logo/logomarkOrange.svg?sanitize=true&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-generate-toc again --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#smartparens&#34;&gt;Smartparens&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#language-support&#34;&gt;Language Support&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#supporting-smartparens&#34;&gt;Supporting Smartparens&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/#related-projects&#34;&gt;Related Projects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;p&gt;Smartparens is a minor mode for dealing with pairs in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It can automatically insert pairs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/images/smartparens-insert.gif&#34; alt=&#34;smartparens insert&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;wrap, unwrap and rewrap pairs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/images/smartparens-wrap.gif&#34; alt=&#34;smartparens wrapping&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;expand and contract pairs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/images/smartparens-slurp.gif&#34; alt=&#34;smartparens slurping&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;navigate pairs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fuco1/smartparens/master/images/smartparens-navigate.gif&#34; alt=&#34;smartparens navigating&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;and much more!&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We generally target GNU Emacs version 25 and newer, however, everything should work mostly fine on anything newer than version 24.&lt;/p&gt; &#xA;&lt;p&gt;You can install smartparens from &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt;. Once installed, enable the &lt;a href=&#34;https://github.com/Fuco1/smartparens/wiki/Default-configuration&#34;&gt;default configuration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;smartparens-config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now use smartparens with &lt;code&gt;M-x smartparens-mode&lt;/code&gt;. To automatically enable smartparens in a programming mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Always start smartparens mode in js-mode.&#xA;(add-hook &#39;js-mode-hook #&#39;smartparens-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may want to try &lt;code&gt;smartparens-strict-mode&lt;/code&gt;. This enforces that pairs are always balanced, so commands like &lt;code&gt;kill-line&lt;/code&gt; keep your code well-formed.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;use-package&lt;/code&gt; to install and setup &lt;code&gt;smartparens&lt;/code&gt;. An example config is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package smartparens&#xA;  :ensure smartparens  ;; install the package&#xA;  :hook (prog-mode text-mode markdown-mode) ;; add `smartparens-mode` to these hooks&#xA;  :config&#xA;  ;; load default config&#xA;  (require &#39;smartparens-config))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Inside Emacs, &lt;code&gt;M-x sp-cheat-sheet&lt;/code&gt; will show you all the commands available, with examples.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a &lt;a href=&#34;https://ebzzry.com/en/emacs-pairs/&#34;&gt;great article demonstrating movement and editing in smartparens&lt;/a&gt; and &lt;a href=&#34;https://github.com/Fuco1/smartparens/wiki&#34;&gt;extensive documentation in the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We love pull requests. Please include tests. Smartparens uses &lt;a href=&#34;https://github.com/rejeep/ert-runner.el&#34;&gt;ert-runner&lt;/a&gt; for testing. To run all the tests, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cask exec ert-runner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can open the individual files in Emacs, then &lt;code&gt;M-x eval-buffer&lt;/code&gt; &lt;code&gt;M-x ert&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can learn more about how we test on the &lt;a href=&#34;https://github.com/Fuco1/smartparens/wiki/Testing&#34;&gt;testing&lt;/a&gt; wiki page.&lt;/p&gt; &#xA;&lt;h3&gt;Language Support&lt;/h3&gt; &#xA;&lt;p&gt;Smartparens has a default configuration that works well for most languages. For language-specific behaviour, smartparens has a separate &lt;code&gt;smartparens-FOO.el&lt;/code&gt; file for every language and &lt;code&gt;smartparens-config.el&lt;/code&gt; loads these automatically.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Smartparens&lt;/h2&gt; &#xA;&lt;p&gt;If you want to support this project, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Contribute code. If you have an idea that is not yet implemented and will benefit this project, feel free to implement it and submit a pull request. If you have any concerns whether your contribution will be accepted, ask beforehand. You can email the author or &lt;a href=&#34;https://github.com/Fuco1/smartparens/issues/new&#34;&gt;start an issue&lt;/a&gt; on the tracker.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contribute ideas. Even if you can&#39;t code Emacs Lisp, you can still contribute valuable ideas for other programmers to implement. Simply &lt;a href=&#34;https://github.com/Fuco1/smartparens/issues/new&#34;&gt;start new issue&lt;/a&gt; on the tracker and submit your suggestion.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can make a financial donation through &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=A5PMGVKCQBT88&#34;&gt;PayPal&lt;/a&gt; or &lt;a href=&#34;https://www.patreon.com/user?u=3282358&amp;amp;ty=h&#34;&gt;Patreon&lt;/a&gt;. If you like smartparens and can spare a modest amount on a donation, feel free to do so. These donations are expressions of your gratitude and are used for my personal &#34;rewards&#34; (books, games, music etc.). You can also gift me a game on &lt;a href=&#34;http://steamcommunity.com/profiles/76561198265034071/wishlist&#34;&gt;Steam&lt;/a&gt; or buy something on &lt;a href=&#34;http://www.amazon.com/gp/registry/wishlist/2I8DOQH8OZEUR&#34;&gt;Amazon&lt;/a&gt;. Regardless of the donations, smartparens will always be free both as in beer and as in speech.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;Other Emacs projects that deal with pairs include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/capitaomorte/autopair&#34;&gt;autopair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rejeep/wrap-region&#34;&gt;wrap-region&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.emacswiki.org/emacs/ElectricPair&#34;&gt;electric-pair-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://emacswiki.org/emacs/ParEdit&#34;&gt;paredit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Smartparens aims to provide a superset of these features, in all programming languages.&lt;/p&gt;</summary>
  </entry>
</feed>