<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-01T01:54:23Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>purcell/package-lint</title>
    <updated>2025-03-01T01:54:23Z</updated>
    <id>tag:github.com,2025-03-01:/purcell/package-lint</id>
    <link href="https://github.com/purcell/package-lint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A linting library for elisp package metadata&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/package-lint&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/package-lint-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/package-lint&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/package-lint-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/package-lint/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/purcell/package-lint/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;package-lint&lt;/h1&gt; &#xA;&lt;p&gt;This library provides a linter for the metadata in Emacs Lisp files which are intended to be packages. You can integrate it into your build process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;package-lint&lt;/code&gt; detects various issues that may make your package uninstallable or unusable for some users, and it warns about significant deviations from the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html&#34;&gt;Elisp coding conventions&lt;/a&gt;, such as non-compliant symbol naming, and use of reserved keybindings. Among other community uses, &lt;code&gt;package-lint&lt;/code&gt; is a prerequisite for submission of packages to MELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;package-lint&lt;/code&gt; can be used standalone, but see also the &lt;a href=&#34;https://github.com/purcell/flycheck-package&#34;&gt;flycheck-package&lt;/a&gt; and &lt;code&gt;package-lint-flymake&lt;/code&gt; packages, which both use &lt;code&gt;package-lint&lt;/code&gt; to conveniently display packaging errors directly in the buffer while writing elisp packages.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to get &lt;code&gt;package-lint&lt;/code&gt; is as a package from the &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repository. The version of &lt;code&gt;package-lint&lt;/code&gt; there will always be up-to-date. There are also packages in &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt;, which track the &lt;a href=&#34;https://github.com/purcell/flycheck-package/tags&#34;&gt;latest numbered tag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use the command &lt;code&gt;package-lint-current-buffer&lt;/code&gt; interactively, or use &lt;code&gt;package-lint-buffer&lt;/code&gt; if linting programmatically.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a package author, you can include &lt;code&gt;package-lint&lt;/code&gt; in your build process by ensuring that the package is installed, and then using the function &lt;code&gt;package-lint-batch-and-exit&lt;/code&gt; to lint your files -- see &lt;code&gt;run-tests.sh&lt;/code&gt; in this repo for an example.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Additional checks for future versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WARN: header line formatting / capitalisation&lt;/li&gt; &#xA; &lt;li&gt;trailing line presence / formatting&lt;/li&gt; &#xA; &lt;li&gt;WARN: library is called *-mode but doesn&#39;t provide a major mode&lt;/li&gt; &#xA; &lt;li&gt;checkdoc failures for interactive functions / defcustoms&lt;/li&gt; &#xA; &lt;li&gt;trailing whitespace?&lt;/li&gt; &#xA; &lt;li&gt;themes which aren&#39;t in a matching *-theme.el file&lt;/li&gt; &#xA; &lt;li&gt;use of unsafe local variables&lt;/li&gt; &#xA; &lt;li&gt;local variable set in header line&lt;/li&gt; &#xA; &lt;li&gt;using commentary to talk about load[- ]path and installation&lt;/li&gt; &#xA; &lt;li&gt;lack of autoloads&lt;/li&gt; &#xA; &lt;li&gt;references to README files which won&#39;t be bundled in a package&lt;/li&gt; &#xA; &lt;li&gt;use of CamelCase identifiers&lt;/li&gt; &#xA; &lt;li&gt;Defining a &lt;code&gt;-mode&lt;/code&gt; function directly instead of using &lt;code&gt;define-derived-mode&lt;/code&gt; or &lt;code&gt;define-minor-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Referring to &lt;code&gt;display-graphic-p&lt;/code&gt; or &lt;code&gt;window-system&lt;/code&gt; in &lt;code&gt;-theme.el&lt;/code&gt; files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the file &lt;code&gt;LICENSE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;package-lint&lt;/code&gt; was written by &lt;a href=&#34;https://github.com/purcell&#34;&gt;Steve Purcell&lt;/a&gt; with significant contributions from &lt;a href=&#34;https://github.com/Fanael&#34;&gt;Fanael Linithien&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Author links:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;üíù Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;üíº LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;‚úç sanityinc.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chep/copilot-chat.el</title>
    <updated>2025-03-01T01:54:23Z</updated>
    <id>tag:github.com,2025-03-01:/chep/copilot-chat.el</id>
    <link href="https://github.com/chep/copilot-chat.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chat with Github copilot in Emacs !&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Copilot Chat for Emacs #+AUTHOR: C√©dric Ch√©pied&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Description This plugin allows you to chat with GitHub copilot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:chat.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Feel free to contribute, report issues or discuss new features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;News&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;v2.0.0 is +here+ in development.&lt;/p&gt; &#xA;&lt;p&gt;The master branch is now v2 development branch. To get a stable release, use the v1.3.0 tag. A branch for bug fix may be created if needed.&lt;/p&gt; &#xA;&lt;p&gt;In v2, only one buffer is used for chat, thanks to polymode. For the moment, org mode is more stable but markdown will follow. Anyway, you should use org since it is so powerful.&lt;/p&gt; &#xA;&lt;p&gt;Shell-maker is back&amp;nbsp;!&lt;/p&gt; &#xA;&lt;p&gt;Bug reports and new ideas are very welcome.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tips&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Many of you won&#39;t read this readme. And many of those who start to read won&#39;t read more than a few lines. So I&#39;ll write some tips here, at the beginning.&lt;/p&gt; &#xA;&lt;p&gt;** Yank When using the org frontend, you can yank code blocks provided by Copilot just as you would use the kill ring. Here&#39;s a simple configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package copilot-chat ‚Ä¶ :bind (:map global-map (&#34;C-c C-y&#34; . copilot-chat-yank) (&#34;C-c M-y&#34; . copilot-chat-yank-pop) (&#34;C-c C-M-y&#34; . (lambda () (interactive) (copilot-chat-yank-pop -1)))) ‚Ä¶) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Find input section In copilot-chat buffer, you can use (or bind to a key) the interactive &lt;del&gt;copilot-chat-goto-input&lt;/del&gt; function to place point at the beginning of the prompt area.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation ** Melpa Copilot-chat is available on melpa&amp;nbsp;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_example M-x package-install RET copilot-chat RET #+end_example&lt;/p&gt; &#xA;&lt;p&gt;With =use-package= : #+begin_src emacs-lisp (use-package copilot-chat)&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Straight #+begin_src emacs-lisp (use-package copilot-chat :straight (:host github :repo &#34;chep/copilot-chat.el&#34; :files (&#34;*.el&#34;)) :after (request org markdown-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Manual Clone repository and eval files in emacs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration ** GitHub You will need a GitHub account with access to copilot API. When sending the first prompt, you will need to authenticate to GitHub. Follow instructions and everything will be fine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Backend &lt;del&gt;copilot-chat-backend&lt;/del&gt; can be set to &lt;del&gt;&#39;curl&lt;/del&gt; (default) or &lt;del&gt;&#39;request&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With curl, answers will be written token by token. Curl path can be set with &lt;code&gt;copilot-chat-curl-program&lt;/code&gt; variable.&lt;br&gt; With request library, the text is written when all data is read and this can be long.&lt;/p&gt; &#xA;&lt;p&gt;** Frontend Several frontends are available. You can select your favorite one by setting the &lt;del&gt;copilot-chat-frontend&lt;/del&gt; variable to &lt;del&gt;&#39;org&lt;/del&gt; (default), &lt;del&gt;&#39;markdown&lt;/del&gt; or &lt;del&gt;&#39;shell-maker&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Try them and choose wisely.&lt;/p&gt; &#xA;&lt;p&gt;** Magit commits You can use copilot to generate your commit messages&amp;nbsp;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;git-commit-setup-hook &#39;copilot-chat-insert-commit-message) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or call manually &lt;del&gt;(copilot-chat-insert-commit-message)&lt;/del&gt; when in the commit message buffer.&lt;/p&gt; &#xA;&lt;p&gt;** Proxy The proxy can be configured with the curl backend. For the emacs-request backend, please refer to the emacs-request documentation if you need to configure a proxy.&lt;/p&gt; &#xA;&lt;p&gt;Use the variables &lt;del&gt;copilot-chat-curl-proxy&lt;/del&gt;, &lt;del&gt;copilot-chat-curl-proxy-user-pass&lt;/del&gt;, and &lt;del&gt;copilot-chat-curl-proxy-insecure&lt;/del&gt; to set up a proxy. Refer to the documentation for each variable to learn how to use them.&lt;/p&gt; &#xA;&lt;p&gt;Proxies have not been thoroughly tested yet, so there may be bugs. Many options are missing for HTTPS proxies. Please open an issue if you need additional features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage ** Basic Start chatting with &lt;del&gt;(copilot-chat-display)&lt;/del&gt;. Type your question in prompt, then press &lt;del&gt;C-c C-c&lt;/del&gt; or &lt;del&gt;C-c RET&lt;/del&gt;.&lt;br&gt; You may need to authenticate to GitHub. Follow instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can select buffers that will be added as context in your prompt. Use &lt;del&gt;copilot-chat-add-current-buffer&lt;/del&gt; and &lt;del&gt;copilot-chat-del-current-buffer&lt;/del&gt;. You can also manage buffers by using &lt;del&gt;(copilot-chat-list)&lt;/del&gt;. In the list, selected buffer will be highlighted using &lt;del&gt;copilot-chat-list-selected-buffer-face&lt;/del&gt; which inherit from &lt;del&gt;font-lock-keyword-face&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Selected buffers will be sent with each prompt until you remove them.&lt;/p&gt; &#xA;&lt;p&gt;** Transient You can call &lt;del&gt;(copilot-chat-transient)&lt;/del&gt; to open transient menu. Almost all functions are accessible.&lt;/p&gt; &#xA;&lt;p&gt;** Functions *** Basic functions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-reset)&lt;/del&gt; reset everything including history, buffers and frontend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-display)&lt;/del&gt; display copilot chat buffers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-switch-to-buffer)&lt;/del&gt; switch to Copilot Chat buffer, side by side with the current code editing buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-set-model)&lt;/del&gt; Select AI model to use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Prompt&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-goto-input&lt;/del&gt; place point at the beginning of the prompt area.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-custom-mini-buffer)&lt;/del&gt; ask for a prompt in minibuffer and send it to copilot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-custom-prompt-selection)&lt;/del&gt; ask for a prompt in minibuffer and pastes selection after it before sending it to copilot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-prompt-history-previous)&lt;/del&gt; insert previous prompt from history in prompt buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-prompt-history-next)&lt;/del&gt; insert next prompt from history in prompt buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-ask-and-insert)&lt;/del&gt; ask for a custom prompt and write answer in current buffer at point.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Answer manipulation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-yank)&lt;/del&gt; yank the last code block at point (org frontend only).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-yank-pop)&lt;/del&gt; Replace last yank with previous block, or use argument to choose the block. Acts like &lt;del&gt;(yank-pop)&lt;/del&gt; (org frontend only).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-send-to-buffer)&lt;/del&gt; send a code block to a chosen buffer. Replace selection if any (org and markdown frontends only).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Buffers&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-add-current-buffer)&lt;/del&gt; add current buffer to copilot chat. Its content will be sent with every request.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-del-current-buffer)&lt;/del&gt; remove current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-list)&lt;/del&gt; open buffer list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-add-buffers-in-current-window)&lt;/del&gt; add all buffers in current Emacs window to copilot chat.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-add-files-under-dir)&lt;/del&gt; Add all files with same suffix as current file under current directory. If there are more than 40 files, refuse to add and show warning message.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Code helper functions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-explain-symbol-at-line)&lt;/del&gt; ask Copilot to explain symbol under point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-explain)&lt;/del&gt; ask copilot to explain selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-review)&lt;/del&gt; ask copilot to review selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-doc)&lt;/del&gt; ask copilot to document selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-fix)&lt;/del&gt; ask copilot to fix selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-optimize)&lt;/del&gt; ask copilot to optimize selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-test)&lt;/del&gt; ask copilot to write tests for selected code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-explain-defun)&lt;/del&gt; ask copilot to explain current function under point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-custom-prompt-function)&lt;/del&gt; ask copilot to apply a custom prompt to the function body under point. Eg. instruct on how to refactor the function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-review-whole-buffer)&lt;/del&gt; ask copilot to review the current whole buffer. It can be used to review the full class, or, review the magit diff for my change, or other people&#39;s change.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Magit&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-insert-commit-message)&lt;/del&gt; Insert in the current buffer a copilot generated commit message.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Transient&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-transient)&lt;/del&gt; display main transient menu to access all functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-transient-buffers)&lt;/del&gt; display transient menu for buffer management.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-transient-code)&lt;/del&gt; display transient menu for code helper functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-transient-magit)&lt;/del&gt; display transient menu for magit functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Troubleshooting&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;(copilot-chat-clear-auth-cache)&lt;/del&gt; clears the auth cache for Copilot Chat. You will have to login again.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Customizable variables All variables can be customized using &lt;del&gt;M-x customize-group RET copilot-chat RET&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Backend&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-backend&lt;/del&gt; - Backend to use for API calls. Can be &lt;del&gt;&#39;curl&lt;/del&gt; (default) or &lt;del&gt;&#39;request&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-curl-program&lt;/del&gt; - Path to curl executable when using curl backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-curl-proxy&lt;/del&gt; - Proxy configuration for curl backend. Supports HTTP/HTTPS/SOCKS protocols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-curl-proxy-insecure&lt;/del&gt; - Skip SSL verification for proxy connections in curl backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-curl-proxy-user-pass&lt;/del&gt; - Proxy authentication credentials for curl backend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Frontend&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-frontend&lt;/del&gt; - Frontend interface to use. Can be &lt;del&gt;&#39;org&lt;/del&gt; (default) or &lt;del&gt;&#39;markdown&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Display&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-list-added-buffers-only&lt;/del&gt; - By default, buffer list displays all buffers and uses faces to highlight added buffer. If set to &lt;del&gt;t&lt;/del&gt;, only added buffer are displayed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-follow&lt;/del&gt; - If &lt;del&gt;t&lt;/del&gt; (default is &lt;del&gt;nil&lt;/del&gt;), point follows answer in chat buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Storage and cache&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-github-token-file&lt;/del&gt; - File path to store GitHub authentication token.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-token-cache&lt;/del&gt; - File path to store session token cache.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Model settings&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-model&lt;/del&gt; - AI model to use. Available options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GPT-4o (default).&lt;/li&gt; &#xA;   &lt;li&gt;Claude 3.5 Sonnet.&lt;/li&gt; &#xA;   &lt;li&gt;GPT-4o1-(preview).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Prompts Default prompts used by various commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-org-prompt&lt;/del&gt; - Base org system prompt configuring Copilot&#39;s behavior.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-markdown-prompt&lt;/del&gt; - Base markdown system prompt configuring Copilot&#39;s behavior.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-prompt-explain&lt;/del&gt; - Prompt for explain command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-prompt-review&lt;/del&gt; - Prompt for code review command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-prompt-doc&lt;/del&gt; - Prompt for documentation command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-prompt-fix&lt;/del&gt; - Prompt for fix command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-prompt-optimize&lt;/del&gt; - Prompt for optimization command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-prompt-test&lt;/del&gt; - Prompt for test generation command.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-commit-prompt&lt;/del&gt; - Prompt for generating commit messages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Faces You can customize the appearance of the buffer list by modifying these faces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-list-default-face&lt;/del&gt; - Face used for unselected buffers in the buffer list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;copilot-chat-list-selected-buffer-face&lt;/del&gt; - Face used for selected buffers in the buffer list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Key bindings *** Prompt buffer&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;C-c C-c&lt;/del&gt; send prompt. Answer will be written in chat buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;C-c RET&lt;/del&gt; send prompt. Answer will be written in chat buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;M-p&lt;/del&gt; previous prompt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;M-n&lt;/del&gt; next prompt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;C-c C-l&lt;/del&gt; open buffer list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;C-c C-q&lt;/del&gt; bury buffer and delete window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;C-c C-t&lt;/del&gt; open transient menu.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Buffer list buffer&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;RET&lt;/del&gt; select or deselect buffer on point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;space&lt;/del&gt; select or deselect buffer on point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;C-c C-c&lt;/del&gt; clear buffer list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;g&lt;/del&gt; refresh list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;q&lt;/del&gt; bury buffer and delete window.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notes This plugin is unofficial and based on Copilot Chat for neovim repository: &lt;a href=&#34;https://github.com/CopilotC-Nvim/CopilotChat.nvim&#34;&gt;https://github.com/CopilotC-Nvim/CopilotChat.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The prompt for git commit messages comes from [[https://github.com/ywkim/gpt-commit][gpt-commit]].&lt;/p&gt; &#xA;&lt;p&gt;For GitHub copilot code completion in emacs, checkout [[https://github.com/copilot-emacs/copilot.el][copilot.el]]&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>seagle0128/doom-modeline</title>
    <updated>2025-03-01T01:54:23Z</updated>
    <id>tag:github.com,2025-03-01:/seagle0128/doom-modeline</id>
    <link href="https://github.com/seagle0128/doom-modeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fancy and fast mode-line inspired by minimalism design.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;doom-modeline&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/seagle0128/doom-modeline/actions&#34;&gt;&lt;img src=&#34;https://github.com/seagle0128/doom-modeline/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/release&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/seagle0128/doom-modeline.svg?label=Release&#34; alt=&#34;Release Tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/License&#34;&gt;&lt;img src=&#34;http://img.shields.io/:License-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/doom-modeline&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/doom-modeline-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/doom-modeline&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/doom-modeline-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#feature&#34;&gt;Feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#use-package&#34;&gt;Use-package&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#customize&#34;&gt;Customize&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seagle0128/doom-modeline/master/#donate&#34;&gt;Donate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;p&gt;A fancy and fast mode-line inspired by minimalism design.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s integrated into &lt;a href=&#34;https://github.com/seagle0128/.emacs.d&#34;&gt;Centaur Emacs&lt;/a&gt;, &lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34;&gt;Doom Emacs&lt;/a&gt; and &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;Spacemacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;doom-modeline&lt;/code&gt; was designed for minimalism, and offers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A match count panel (for &lt;code&gt;anzu&lt;/code&gt;, &lt;code&gt;visual-replace&lt;/code&gt;, &lt;code&gt;iedit&lt;/code&gt;, &lt;code&gt;multiple-cursors&lt;/code&gt;, &lt;code&gt;symbol-overlay&lt;/code&gt;, and &lt;code&gt;evil-search&lt;/code&gt;, etc.)&lt;/li&gt; &#xA; &lt;li&gt;An indicator for recording a macro&lt;/li&gt; &#xA; &lt;li&gt;Current environment version (e.g. &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;ruby&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, etc.) in the major-mode&lt;/li&gt; &#xA; &lt;li&gt;A customizable mode-line height (see &lt;code&gt;doom-modeline-height&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A minor modes segment which is compatible with &lt;code&gt;minions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An error/warning count segment for &lt;code&gt;flymake&lt;/code&gt;/&lt;code&gt;flycheck&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A workspace number/name segment for &lt;code&gt;eyebrowse&lt;/code&gt; or &lt;code&gt;tab-bar-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A perspective name segment for &lt;code&gt;persp-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A window number segment for &lt;code&gt;ace-window&lt;/code&gt;, &lt;code&gt;winum&lt;/code&gt; and &lt;code&gt;window-numbering&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for modal editing state, including &lt;code&gt;evil&lt;/code&gt;, &lt;code&gt;overwrite&lt;/code&gt;, &lt;code&gt;god&lt;/code&gt;, &lt;code&gt;ryo&lt;/code&gt; and &lt;code&gt;xah-fly-keys&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;An indicator for &lt;code&gt;battery&lt;/code&gt; status&lt;/li&gt; &#xA; &lt;li&gt;An indicator for current input method&lt;/li&gt; &#xA; &lt;li&gt;An indicator for debug state&lt;/li&gt; &#xA; &lt;li&gt;An indicator for remote host&lt;/li&gt; &#xA; &lt;li&gt;An indicator for Kubernetes state with &lt;a href=&#34;https://github.com/jinnovation/kele.el&#34;&gt;&lt;code&gt;kele.el&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for LSP state with &lt;code&gt;lsp-mode&lt;/code&gt; or &lt;code&gt;eglot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for GitHub notifications&lt;/li&gt; &#xA; &lt;li&gt;An indicator for unread emails with &lt;code&gt;mu4e-alert&lt;/code&gt; and &lt;code&gt;gnus&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for IRC notifications with &lt;code&gt;circe&lt;/code&gt;, &lt;code&gt;rcirc&lt;/code&gt; or &lt;code&gt;erc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for buffer position which is compatible with &lt;code&gt;nyan-mode&lt;/code&gt; or &lt;code&gt;poke-line&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for party &lt;code&gt;parrot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for PDF page number with &lt;code&gt;pdf-tools&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An indicator for markdown/org preview with &lt;code&gt;grip&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Truncated file name, file icon, buffer state and project name in buffer information segment, which is compatible with &lt;code&gt;project&lt;/code&gt;, &lt;code&gt;projectile&lt;/code&gt; and &lt;code&gt;find-file-in-project&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;New mode-line for &lt;code&gt;Info-mode&lt;/code&gt; buffers&lt;/li&gt; &#xA; &lt;li&gt;New package mode-line for &lt;code&gt;paradox&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;New mode-line for &lt;code&gt;helm&lt;/code&gt; buffers&lt;/li&gt; &#xA; &lt;li&gt;New mode-line for &lt;code&gt;git-timemachine&lt;/code&gt; buffers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694177-10dcd280-fbc0-11e8-8d21-971ede6afdb5.png&#34; alt=&#34;modeline&#34; title=&#34;Mode-line&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694189-6913d480-fbc0-11e8-93ae-9578455dcd2c.png&#34; alt=&#34;search_replace&#34; title=&#34;Search and Replace&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/162925065-0ffe40fd-1efd-469b-bf09-c62fe2d22fd2.png&#34; alt=&#34;evil_search&#34; title=&#34;Evil Search&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694199-cc056b80-fbc0-11e8-9bb1-533b1e64da66.png&#34; alt=&#34;macro&#34; title=&#34;Macro&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/51301117-0805d900-1a69-11e9-957d-b4c7a70a1cf8.png&#34; alt=&#34;no_icons&#34; title=&#34;No Icons&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50414928-3c63ec00-0853-11e9-9b26-6a1df278d332.png&#34; alt=&#34;color_icon_cpp&#34; title=&#34;Color C++ icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50415081-1428bd00-0854-11e9-9ae5-91805290c524.png&#34; alt=&#34;color_icon_java&#34; title=&#34;Color Java icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50415381-9f568280-0855-11e9-9478-34a6dd614d96.png&#34; alt=&#34;color_icon_elisp&#34; title=&#34;Color Elisp icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/68990534-332aa600-088f-11ea-920f-20c9527a6466.png&#34; alt=&#34;evil_normal_state_icon&#34; title=&#34;Evil Normal State icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/68990540-4dfd1a80-088f-11ea-8e53-ab77af4c58c2.png&#34; alt=&#34;evil_insert_state_icon&#34; title=&#34;Evil Insert State icon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694476-b8103880-fbc5-11e8-9c18-91f5e9258333.png&#34; alt=&#34;evil_normal_state&#34; title=&#34;Evil Normal State&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694461-8b5c2100-fbc5-11e8-993e-d97baa9f01af.png&#34; alt=&#34;evil_insert_state&#34; title=&#34;Evil Insert State&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/53592864-c751c180-3bc9-11e9-9914-493007c013d5.png&#34; alt=&#34;lsp_version&#34; title=&#34;Perspective, LSP, Version, VCS and Flycheck&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/49694481-e0983280-fbc5-11e8-8cb2-c8d2e782bcdb.png&#34; alt=&#34;perspective&#34; title=&#34;Perspective, LSP, Version and VCS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/53592683-64602a80-3bc9-11e9-8054-91f79aa930b9.png&#34; alt=&#34;notifications&#34; title=&#34;Notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50301291-de857c00-04c1-11e9-84c5-bfbc8de8295f.png&#34; alt=&#34;minions&#34; title=&#34;Minions and minor modes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/50302008-c57dca80-04c3-11e9-8578-50154ef4f9f0.png&#34; alt=&#34;debug&#34; title=&#34;Debug state&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/51301061-da209480-1a68-11e9-9f64-905d889df9d6.png&#34; alt=&#34;nyan_parrot&#34; title=&#34;Nyan and Parrot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/69004814-20c67000-0954-11ea-8489-f5a527a80574.png&#34; alt=&#34;irc&#34; title=&#34;IRC Notifications&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/53593622-ba35d200-3bcb-11e9-85b3-38d64d05c127.png&#34; alt=&#34;battery&#34; title=&#34;Battery&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/57503916-e769d380-7324-11e9-906d-44c79f7408a3.png&#34; alt=&#34;package&#34; title=&#34;Package&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/57506248-d96c8080-732d-11e9-8167-644c8fc4e0db.png&#34; alt=&#34;info&#34; title=&#34;Info&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/57506112-6531dd00-732d-11e9-8a5e-22166f42dd4c.png&#34; alt=&#34;helm&#34; title=&#34;Helm&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;From melpa, &lt;code&gt;M-x package-install RET doom-modeline RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;init.el&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;doom-modeline)&#xA;(doom-modeline-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;after-init-hook #&#39;doom-modeline-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use-package&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package doom-modeline&#xA;  :ensure t&#xA;  :init (doom-modeline-mode 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package doom-modeline&#xA;  :ensure t&#xA;  :hook (after-init . doom-modeline-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This package is able to display icons if &lt;code&gt;nerd-icons&lt;/code&gt; package and required fonts are installed. Run &lt;code&gt;M-x nerd-icons-install-fonts&lt;/code&gt; to install the necessary fonts. Please refer to the &lt;a href=&#34;https://github.com/rainstormstudio/nerd-icons.el#installing-fonts&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Strongly recommend to use &lt;a href=&#34;https://github.com/hlissner/emacs-doom-themes&#34;&gt;doom-themes&lt;/a&gt; at the same time.&lt;/p&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;M-x customize-group RET doom-modeline RET&lt;/code&gt; or set the variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; If non-nil, cause imenu to see `doom-modeline&#39; declarations.&#xA;;; This is done by adjusting `lisp-imenu-generic-expression&#39; to&#xA;;; include support for finding `doom-modeline-def-*&#39; forms.&#xA;;; Must be set before loading doom-modeline.&#xA;(setq doom-modeline-support-imenu t)&#xA;&#xA;;; How tall the mode-line should be. It&#39;s only respected in GUI.&#xA;;; If the actual char height is larger, it respects the actual height.&#xA;(setq doom-modeline-height 25)&#xA;&#xA;;; How wide the mode-line bar should be. It&#39;s only respected in GUI.&#xA;(setq doom-modeline-bar-width 4)&#xA;&#xA;;; Whether to use hud instead of default bar. It&#39;s only respected in GUI.&#xA;(setq doom-modeline-hud nil)&#xA;&#xA;;; The limit of the window width.&#xA;;; If `window-width&#39; is smaller than the limit, some information won&#39;t be&#xA;;; displayed. It can be an integer or a float number. `nil&#39; means no limit.&#34;&#xA;(setq doom-modeline-window-width-limit 85)&#xA;&#xA;;; Override attributes of the face used for padding.&#xA;;; If the space character is very thin in the modeline, for example if a&#xA;;; variable pitch font is used there, then segments may appear unusually close.&#xA;;; To use the space character from the `fixed-pitch&#39; font family instead, set&#xA;;; this variable to `(list :family (face-attribute &#39;fixed-pitch :family))&#39;.&#xA;(setq doom-modeline-spc-face-overrides nil)&#xA;&#xA;;; How to detect the project root.&#xA;;; nil means to use `default-directory&#39;.&#xA;;; The project management packages have some issues on detecting project root.&#xA;;; e.g. `projectile&#39; doesn&#39;t handle symlink folders well, while `project&#39; is unable&#xA;;; to hanle sub-projects.&#xA;;; You can specify one if you encounter the issue.&#xA;(setq doom-modeline-project-detection &#39;auto)&#xA;&#xA;;; Determines the style used by `doom-modeline-buffer-file-name&#39;.&#xA;;;&#xA;;; Given ~/Projects/FOSS/emacs/lisp/comint.el&#xA;;;   auto =&amp;gt; emacs/l/comint.el (in a project) or comint.el&#xA;;;   truncate-upto-project =&amp;gt; ~/P/F/emacs/lisp/comint.el&#xA;;;   truncate-from-project =&amp;gt; ~/Projects/FOSS/emacs/l/comint.el&#xA;;;   truncate-with-project =&amp;gt; emacs/l/comint.el&#xA;;;   truncate-except-project =&amp;gt; ~/P/F/emacs/l/comint.el&#xA;;;   truncate-upto-root =&amp;gt; ~/P/F/e/lisp/comint.el&#xA;;;   truncate-all =&amp;gt; ~/P/F/e/l/comint.el&#xA;;;   truncate-nil =&amp;gt; ~/Projects/FOSS/emacs/lisp/comint.el&#xA;;;   relative-from-project =&amp;gt; emacs/lisp/comint.el&#xA;;;   relative-to-project =&amp;gt; lisp/comint.el&#xA;;;   file-name =&amp;gt; comint.el&#xA;;;   file-name-with-project =&amp;gt; FOSS|comint.el&#xA;;;   buffer-name =&amp;gt; comint.el&amp;lt;2&amp;gt; (uniquify buffer name)&#xA;;;&#xA;;; If you are experiencing the laggy issue, especially while editing remote files&#xA;;; with tramp, please try `file-name&#39; style.&#xA;;; Please refer to https://github.com/bbatsov/projectile/issues/657.&#xA;(setq doom-modeline-buffer-file-name-style &#39;auto)&#xA;&#xA;;; Whether display icons in the mode-line.&#xA;;; While using the server mode in GUI, should set the value explicitly.&#xA;(setq doom-modeline-icon t)&#xA;&#xA;;; Whether display the icon for `major-mode&#39;. It respects option `doom-modeline-icon&#39;.&#xA;(setq doom-modeline-major-mode-icon t)&#xA;&#xA;;; Whether display the colorful icon for `major-mode&#39;.&#xA;;; It respects `nerd-icons-color-icons&#39;.&#xA;(setq doom-modeline-major-mode-color-icon t)&#xA;&#xA;;; Whether display the icon for the buffer state. It respects option `doom-modeline-icon&#39;.&#xA;(setq doom-modeline-buffer-state-icon t)&#xA;&#xA;;; Whether display the modification icon for the buffer.&#xA;;; It respects option `doom-modeline-icon&#39; and option `doom-modeline-buffer-state-icon&#39;.&#xA;(setq doom-modeline-buffer-modification-icon t)&#xA;&#xA;;; Whether display the lsp icon. It respects option `doom-modeline-icon&#39;.&#xA;(setq doom-modeline-lsp-icon t)&#xA;&#xA;;; Whether display the time icon. It respects option `doom-modeline-icon&#39;.&#xA;(setq doom-modeline-time-icon t)&#xA;&#xA;;; Whether display the live icons of time.&#xA;;; It respects option `doom-modeline-icon&#39; and option `doom-modeline-time-icon&#39;.&#xA;(setq doom-modeline-time-live-icon t)&#xA;&#xA;;; Whether to use an analogue clock svg as the live time icon.&#xA;;; It respects options `doom-modeline-icon&#39;, `doom-modeline-time-icon&#39;, and `doom-modeline-time-live-icon&#39;.&#xA;(setq doom-modeline-time-analogue-clock t)&#xA;&#xA;;; The scaling factor used when drawing the analogue clock.&#xA;(setq doom-modeline-time-clock-size 0.7)&#xA;&#xA;;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.&#xA;(setq doom-modeline-unicode-fallback nil)&#xA;&#xA;;; Whether display the buffer name.&#xA;(setq doom-modeline-buffer-name t)&#xA;&#xA;;; Whether highlight the modified buffer name.&#xA;(setq doom-modeline-highlight-modified-buffer-name t)&#xA;&#xA;;; When non-nil, mode line displays column numbers zero-based.&#xA;;; See `column-number-indicator-zero-based&#39;.&#xA;(setq doom-modeline-column-zero-based t)&#xA;&#xA;;; Specification of \&#34;percentage offset\&#34; of window through buffer.&#xA;;; See `mode-line-percent-position&#39;.&#xA;(setq doom-modeline-percent-position &#39;(-3 &#34;%p&#34;))&#xA;&#xA;;; Format used to display line numbers in the mode line.&#xA;;; See `mode-line-position-line-format&#39;.&#xA;(setq doom-modeline-position-line-format &#39;(&#34;L%l&#34;))&#xA;&#xA;;; Format used to display column numbers in the mode line.&#xA;;; See `mode-line-position-column-format&#39;.&#xA;(setq doom-modeline-position-column-format &#39;(&#34;C%c&#34;))&#xA;&#xA;;; Format used to display combined line/column numbers in the mode line. See `mode-line-position-column-line-format&#39;.&#xA;(setq doom-modeline-position-column-line-format &#39;(&#34;%l:%c&#34;))&#xA;&#xA;;; Whether display the minor modes in the mode-line.&#xA;(setq doom-modeline-minor-modes nil)&#xA;&#xA;;; If non-nil, a word count will be added to the selection-info modeline segment.&#xA;(setq doom-modeline-enable-word-count nil)&#xA;&#xA;;; Major modes in which to display word count continuously.&#xA;;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count&#39;.&#xA;;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count&#39; or&#xA;;; remove the modes from `doom-modeline-continuous-word-count-modes&#39;.&#xA;(setq doom-modeline-continuous-word-count-modes &#39;(markdown-mode gfm-mode org-mode))&#xA;&#xA;;; Whether display the buffer encoding.&#xA;(setq doom-modeline-buffer-encoding t)&#xA;&#xA;;; Whether display the indentation information.&#xA;(setq doom-modeline-indent-info nil)&#xA;&#xA;;; Whether display the total line number„ÄÇ&#xA;(setq doom-modeline-total-line-number nil)&#xA;&#xA;;; Whether display the icon of vcs segment. It respects option `doom-modeline-icon&#39;.&#34;&#xA;(setq doom-modeline-vcs-icon t)&#xA;&#xA;;; The maximum displayed length of the branch name of version control.&#xA;(setq doom-modeline-vcs-max-length 15)&#xA;&#xA;;; The function to display the branch name.&#xA;(setq doom-modeline-vcs-display-function #&#39;doom-modeline-vcs-name)&#xA;&#xA;;; Whether display the icon of check segment. It respects option `doom-modeline-icon&#39;.&#xA;(setq doom-modeline-check-icon t)&#xA;&#xA;;; If non-nil, only display one number for check information if applicable.&#xA;(setq doom-modeline-check-simple-format nil)&#xA;&#xA;;; The maximum number displayed for notifications.&#xA;(setq doom-modeline-number-limit 99)&#xA;&#xA;;; Whether display the project name. Non-nil to display in the mode-line.&#xA;(setq doom-modeline-project-name t)&#xA;&#xA;;; Whether display the workspace name. Non-nil to display in the mode-line.&#xA;(setq doom-modeline-workspace-name t)&#xA;&#xA;;; Whether display the perspective name. Non-nil to display in the mode-line.&#xA;(setq doom-modeline-persp-name t)&#xA;&#xA;;; If non nil the default perspective name is displayed in the mode-line.&#xA;(setq doom-modeline-display-default-persp-name nil)&#xA;&#xA;;; If non nil the perspective name is displayed alongside a folder icon.&#xA;(setq doom-modeline-persp-icon t)&#xA;&#xA;;; Whether display the `lsp&#39; state. Non-nil to display in the mode-line.&#xA;(setq doom-modeline-lsp t)&#xA;&#xA;;; Whether display the GitHub notifications. It requires `ghub&#39; package.&#xA;(setq doom-modeline-github nil)&#xA;&#xA;;; The interval of checking GitHub.&#xA;(setq doom-modeline-github-interval (* 30 60))&#xA;&#xA;;; Whether display the modal state.&#xA;;; Including `evil&#39;, `overwrite&#39;, `god&#39;, `ryo&#39; and `xah-fly-keys&#39;, etc.&#xA;(setq doom-modeline-modal t)&#xA;&#xA;;; Whether display the modal state icon.&#xA;;; Including `evil&#39;, `overwrite&#39;, `god&#39;, `ryo&#39; and `xah-fly-keys&#39;, etc.&#xA;(setq doom-modeline-modal-icon t)&#xA;&#xA;;; Whether display the modern icons for modals.&#xA;(setq doom-modeline-modal-modern-icon t)&#xA;&#xA;;; When non-nil, always show the register name when recording an evil macro.&#xA;(setq doom-modeline-always-show-macro-register nil)&#xA;&#xA;;; Whether display the mu4e notifications. It requires `mu4e-alert&#39; package.&#xA;(setq doom-modeline-mu4e nil)&#xA;;; also enable the start of mu4e-alert&#xA;(mu4e-alert-enable-mode-line-display)&#xA;&#xA;;; Whether display the gnus notifications.&#xA;(setq doom-modeline-gnus t)&#xA;&#xA;;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)&#xA;(setq doom-modeline-gnus-timer 2)&#xA;&#xA;;; Wheter groups should be excludede when gnus automatically being updated.&#xA;(setq doom-modeline-gnus-excluded-groups &#39;(&#34;dummy.group&#34;))&#xA;&#xA;;; Whether display the IRC notifications. It requires `circe&#39; or `erc&#39; package.&#xA;(setq doom-modeline-irc t)&#xA;&#xA;;; Function to stylize the irc buffer names.&#xA;(setq doom-modeline-irc-stylize &#39;identity)&#xA;&#xA;;; Whether display the battery status. It respects `display-battery-mode&#39;.&#xA;(setq doom-modeline-battery t)&#xA;&#xA;;; Whether display the time. It respects `display-time-mode&#39;.&#xA;(setq doom-modeline-time t)&#xA;&#xA;;; Whether display the misc segment on all mode lines.&#xA;;; If nil, display only if the mode line is active.&#xA;(setq doom-modeline-display-misc-in-all-mode-lines t)&#xA;&#xA;;; The function to handle `buffer-file-name&#39;.&#xA;(setq doom-modeline-buffer-file-name-function #&#39;identity)&#xA;&#xA;;; The function to handle `buffer-file-truename&#39;.&#xA;(setq doom-modeline-buffer-file-truename-function #&#39;identity)&#xA;&#xA;;; Whether display the environment version.&#xA;(setq doom-modeline-env-version t)&#xA;;; Or for individual languages&#xA;(setq doom-modeline-env-enable-python t)&#xA;(setq doom-modeline-env-enable-ruby t)&#xA;(setq doom-modeline-env-enable-perl t)&#xA;(setq doom-modeline-env-enable-go t)&#xA;(setq doom-modeline-env-enable-elixir t)&#xA;(setq doom-modeline-env-enable-rust t)&#xA;&#xA;;; Change the executables to use for the language version string&#xA;(setq doom-modeline-env-python-executable &#34;python&#34;) ; or `python-shell-interpreter&#39;&#xA;(setq doom-modeline-env-ruby-executable &#34;ruby&#34;)&#xA;(setq doom-modeline-env-perl-executable &#34;perl&#34;)&#xA;(setq doom-modeline-env-go-executable &#34;go&#34;)&#xA;(setq doom-modeline-env-elixir-executable &#34;iex&#34;)&#xA;(setq doom-modeline-env-rust-executable &#34;rustc&#34;)&#xA;&#xA;;; What to display as the version while a new one is being loaded&#xA;(setq doom-modeline-env-load-string &#34;...&#34;)&#xA;&#xA;;; By default, almost all segments are displayed only in the active window. To&#xA;;; display such segments in all windows, specify e.g.&#xA;(setq doom-modeline-always-visible-segments &#39;(mu4e irc))&#xA;&#xA;;; Hooks that run before/after the modeline version string is updated&#xA;(setq doom-modeline-before-update-env-hook nil)&#xA;(setq doom-modeline-after-update-env-hook nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;How to display icons correctly?&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rainstormstudio/nerd-icons.el&#34;&gt;nerd-icons&lt;/a&gt; are necessary. Then run &lt;code&gt;M-x nerd-icons-install-fonts&lt;/code&gt; to install the resource fonts. On Windows, the fonts should be installed manually. &lt;code&gt;nerd-icons&lt;/code&gt; supports both GUI and TUI.&lt;/p&gt; &lt;p&gt;If you don&#39;t like color icons, &lt;code&gt;(setq nerd-icons-color-icons nil)&lt;/code&gt; to disable it. Please refer to &lt;a href=&#34;https://github.com/rainstormstudio/nerd-icons.el&#34;&gt;nerd-icons.el&lt;/a&gt; for details.&lt;/p&gt; &lt;p&gt;If you prefer &lt;a href=&#34;https://github.com/domtronn/all-the-icons.el&#34;&gt;all-the-icons&lt;/a&gt;, please use release &lt;code&gt;3.4.0&lt;/code&gt;. It hasn&#39;t been supported since &lt;code&gt;4.0.0&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I am experiencing the laggy issue, how to resolve it?&lt;/p&gt; &lt;p&gt;Add this configuration into your init file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Don‚Äôt compact font caches during GC.&#xA;(setq inhibit-compacting-font-caches t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A ridiculous path is displayed on the mode-line while visiting a symbolink.&lt;/p&gt; &lt;p&gt;It&#39;s the default behaviors of Vanilla Emacs. If you want to display the real names, please put this into your init file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq find-file-visit-truename t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the file is controlled by vc, refer to the documentation of &lt;code&gt;vc-follow-symlinks&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why doesn&#39;t change of branch reflect in modeline?&lt;/p&gt; &lt;p&gt;Actually it&#39;s related to &lt;code&gt;magit&lt;/code&gt; and &lt;code&gt;vc-mode&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Workaround: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Revert the buffers manually.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;(setq auto-revert-check-vc-info t)&lt;/code&gt; brings the performance issue.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Refer to: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://magit.vc/manual/magit/The-mode_002dline-information-isn_0027t-always-up_002dto_002ddate.html&#34;&gt;The mode-line information isn‚Äôt always up-to-date&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/magit/magit/issues/2687&#34;&gt;Maybe provide an alternative to VC&#39;s mode-line information&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Can I add my mode-line segments myself? How to do that? How can I define my own mode-line?&lt;/p&gt; &lt;p&gt;There are two methods.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;If the information is simple, just add to &lt;code&gt;mode-line-misc-info&lt;/code&gt; or &lt;code&gt;global-mode-string&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use &lt;code&gt;doom-modeline-def-modeline&lt;/code&gt; to define your own mode-line and set it as default.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Define your custom doom-modeline&#xA;(doom-modeline-def-modeline &#39;my-simple-line&#xA;  &#39;(bar matches buffer-info remote-host buffer-position parrot selection-info)&#xA;  &#39;(misc-info minor-modes input-method buffer-encoding major-mode process vcs check))&#xA;&#xA;;; Set default mode-line&#xA;(add-hook &#39;doom-modeline-mode-hook&#xA;          (lambda ()&#xA;            (doom-modeline-set-modeline &#39;my-simple-line &#39;default)))&#xA;&#xA;;; Configure other mode-lines based on major modes&#xA;(add-to-list &#39;doom-modeline-mode-alist &#39;(my-mode . my-simple-line))&#xA;&#xA;;; Or disable other mode-lines&#xA;(setq &#39;doom-modeline-mode-alist nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to specify font family and size in modeline?&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq doom-modeline-height 1) ; optional&#xA;(if (facep &#39;mode-line-active)&#xA;    (set-face-attribute &#39;mode-line-active nil :family &#34;Noto Sans&#34; :height 100) ; For 29+&#xA;  (set-face-attribute &#39;mode-line nil :family &#34;Noto Sans&#34; :height 100))&#xA;(set-face-attribute &#39;mode-line-inactive nil :family &#34;Noto Sans&#34; :height 100)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq doom-modeline-height 1) ; optional&#xA;(custom-set-faces&#xA;  &#39;(mode-line ((t (:family &#34;Noto Sans&#34; :height 0.9))))&#xA;  &#39;(mode-line-active ((t (:family &#34;Noto Sans&#34; :height 0.9)))) ; For 29+&#xA;  &#39;(mode-line-inactive ((t (:family &#34;Noto Sans&#34; :height 0.9)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/189&#34;&gt;#189&lt;/a&gt; and &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/301&#34;&gt;#301&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The right side of the modeline is cut off. How to fix it?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tweak &lt;code&gt;nerd-icons-scale-factor&lt;/code&gt;. e.g. &lt;code&gt;(setq nerd-icons-scale-factor 1.1)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Use another font family or size. See above.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to disable symbolic links expanding in mode-line?&lt;/p&gt; &lt;p&gt;If you encounter the issue like this&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9449246/62822565-c3f93380-bb74-11e9-95f6-f9c24a6cbd14.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &lt;p&gt;please try this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; built-in `project&#39; on 26+&#xA;(setq doom-modeline-project-detection &#39;project)&#xA;;; or `find-in-project&#39; if it&#39;s installed&#xA;(setq doom-modeline-project-detection &#39;ffip)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more details, refer to &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/209&#34;&gt;#209&lt;/a&gt; and &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/224&#34;&gt;#224&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Is &lt;code&gt;doom-modeline&lt;/code&gt; able to show match count while search with &lt;code&gt;evil-search&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Yes. For better experience, should enable &lt;code&gt;anzu-mode&lt;/code&gt; and load &lt;code&gt;evil-anzu&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to show that the R is running in inferior ess R mode?&lt;/p&gt; &lt;p&gt;The ess R mode modifies &lt;code&gt;mode-line-buffer-identification&lt;/code&gt; directly to display the status. To display the status in &lt;code&gt;doom-modeline&lt;/code&gt;, you can add the status to &lt;code&gt;mode-line-process&lt;/code&gt; or &lt;code&gt;global-mode-string&lt;/code&gt; as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;inferior-ess-mode-hook&#xA;      (lambda ()&#xA;        (add-to-list &#39;mode-line-process &#39;(:eval (nth ess--busy-count ess-busy-strings)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to display company mode-line information?&lt;/p&gt; &lt;p&gt;Enable &lt;code&gt;doom-modeline-minor-modes&lt;/code&gt; or &lt;code&gt;(add-to-list &#39;global-mode-string company-lighter)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to display LaTeX compilation information in the mode line?&lt;/p&gt; &lt;p&gt;Use &lt;a href=&#34;https://github.com/haji-ali/procress&#34;&gt;process&lt;/a&gt; package. Please refer to &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/387&#34;&gt;#387&lt;/a&gt; for more details.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;procress)&#xA;(procress-load-default-svg-images)&#xA;(add-hook &#39;LaTeX-mode-hook #&#39;procress-auctex-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to prevent mode-line aligning with fill column in &lt;code&gt;visual-fill-column-mode&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;(setq mode-line-right-align-edge &#39;right-fringe)&lt;/code&gt;. Please refer to &lt;a href=&#34;https://github.com/seagle0128/doom-modeline/issues/672&#34;&gt;#672&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to display match counts in &lt;code&gt;visual-replace&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;It respects &lt;code&gt;visual-replace-display-total&lt;/code&gt;, so you should use &lt;code&gt;(setq visual-replace-display-total t)&lt;/code&gt; to display.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If you think it&#39;s helpful for you, please consider paying a cup of coffee for me. Thank you! &lt;span&gt;üòÑ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/140797/65818854-44204900-e248-11e9-9cc5-3e6339587cd8.png&#34; alt=&#34;Alipay&#34; width=&#34;120&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://user-images.githubusercontent.com/140797/65818844-366ac380-e248-11e9-931c-4bd872d0566b.png&#34; alt=&#34;Wechat Pay&#34; width=&#34;120&#34;&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://paypal.me/seagle0128&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://www.paypalobjects.com/digitalassets/c/website/marketing/apac/C2/logos-buttons/optimize/44_Grey_PayPal_Pill_Button.png&#34; alt=&#34;PayPal&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;&lt;a href=&#34;https://www.buymeacoffee.com/s9giES1&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; width=&#34;160&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>