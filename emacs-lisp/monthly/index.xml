<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-01T02:12:12Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rainstormstudio/nerd-icons.el</title>
    <updated>2023-07-01T02:12:12Z</updated>
    <id>tag:github.com,2023-07-01:/rainstormstudio/nerd-icons.el</id>
    <link href="https://github.com/rainstormstudio/nerd-icons.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: nerd-icons.el - A Library for Nerd Font icons #+AUTHOR: Hongyu Ding #+LANGUAGE: en&lt;/p&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/nerd-icons][file:https://melpa.org/packages/nerd-icons-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;Nerd-icons.el is a library for easily using [[https://github.com/ryanoasis/nerd-fonts][Nerd Font]] icons inside Emacs, an alternative to [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].&lt;/p&gt; &#xA;&lt;p&gt;It works on both GUI and terminal! You only need a [[https://www.nerdfonts.com/#home][Nerd Font]] installed on your system.&lt;/p&gt; &#xA;&lt;p&gt;It is inspired by [[https://github.com/domtronn/all-the-icons.el][all-the-icons]], [[https://github.com/seagle0128/icons-in-terminal.el][icons-in-terminal]], [[https://github.com/ryanoasis/vim-devicons][vim-devicons]], and [[https://github.com/nvim-tree/nvim-web-devicons][nvim-web-devicons]].&lt;/p&gt; &#xA;&lt;p&gt;in GUI: [[file:screenshots/demo.png]]&lt;/p&gt; &#xA;&lt;p&gt;in terminal: [[file:screenshots/demo-terminal.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installing Fonts Please go to [[https://www.nerdfonts.com/][Nerd Fonts website]] and get a Nerd font. After installing the font on your machine, you need to set &lt;del&gt;nerd-icons-font-family&lt;/del&gt; to match its font name so that the font can be properly used under GUI. If you want Nerd Fonts to work under a terminal, please change your terminal&#39;s font to a Nerd font.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the Nerd Font you installed does not display correctly (e.g. appear cut off), it is recommended to use =Symbols Nerd Fonts Mono= (Symbols Nerd Font). You can use &lt;del&gt;M-x nerd-icons-install-fonts&lt;/del&gt; to install &lt;del&gt;Symbols Nerd Fonts Mono&lt;/del&gt; for you. Note that for &lt;em&gt;Windows&lt;/em&gt; you&#39;ll need to manually install the font after you used this function.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage &lt;del&gt;nerd-icons&lt;/del&gt; is on [[https://melpa.org/#/nerd-icons-completion][Melpa]]. You can install it with built-in &lt;del&gt;M-x package-install&lt;/del&gt; #+begin_src emacs-lisp (require &#39;nerd-icons) #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or using &lt;del&gt;use-package&lt;/del&gt; #+BEGIN_SRC emacs-lisp (use-package nerd-icons ;; :custom ;; The Nerd Font you want to use in GUI ;; &#34;Symbols Nerd Font Mono&#34; is the default and is recommended ;; but you can use any other Nerd Font if you want ;; (nerd-icons-font-family &#34;Symbols Nerd Font Mono&#34;) ) #+END_SRC ** insert icons&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;use icon based on category&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-dir&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-file&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-extension&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-mode&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-url&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-icon-for-buffer&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;example: #+BEGIN_SRC emacs-lisp (insert (nerd-icons-icon-for-file &#34;init.el&#34;)) ;; Inserts an icon for Emacs Lisp #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;use icon directly&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-ipsicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-octicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-pomicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-powerline&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-faicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-wicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-sucicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-devicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-codicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-flicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-mdicon&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;example: #+BEGIN_SRC emacs-lisp (insert (nerd-icons-faicon &#34;nf-fa-gitlab&#34;)) ;; Inserts a Gitlab icon #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;insert icon interactively (&lt;del&gt;M-x&lt;/del&gt; functions)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-ipsicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-octicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-pomicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-powerline&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-faicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-wicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-sucicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-devicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-codicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-flicon&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;nerd-icons-insert-mdicon&lt;/del&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Glyph Sets | Glyph Set | prefix | Point Range | insert function | |-------------------------+----------------------+--------------------------------------+----------------------| | Seti-UI + Custom | &lt;del&gt;nf-seti-&lt;/del&gt;, &lt;del&gt;nf-custom-&lt;/del&gt; | &lt;del&gt;e5fa&lt;/del&gt; - &lt;del&gt;e631&lt;/del&gt; | &lt;del&gt;nerd-icons-sucicon&lt;/del&gt; | | Devicons | &lt;del&gt;nf-dev-&lt;/del&gt; | &lt;del&gt;e700&lt;/del&gt; - &lt;del&gt;e7c5&lt;/del&gt; | &lt;del&gt;nerd-icons-devicon&lt;/del&gt; | | Font Awesome | &lt;del&gt;nf-fa-&lt;/del&gt; | &lt;del&gt;f000&lt;/del&gt; - &lt;del&gt;f2e0&lt;/del&gt; | &lt;del&gt;nerd-icons-faicon&lt;/del&gt; | | Font Awesome Extension | &lt;del&gt;nf-fae-&lt;/del&gt; | &lt;del&gt;e200&lt;/del&gt; - &lt;del&gt;e2a9&lt;/del&gt; | &lt;del&gt;nerd-icons-faicon&lt;/del&gt; | | Material Design Icons | &lt;del&gt;nf-md-&lt;/del&gt; | &lt;del&gt;f500&lt;/del&gt; - &lt;del&gt;fd46&lt;/del&gt; | &lt;del&gt;nerd-icons-mdicon&lt;/del&gt; | | Weather | &lt;del&gt;nf-weather-&lt;/del&gt; | &lt;del&gt;e300&lt;/del&gt; - &lt;del&gt;e3eb&lt;/del&gt; | &lt;del&gt;nerd-icons-wicon&lt;/del&gt; | | Octicons | &lt;del&gt;nf-oct-&lt;/del&gt; | &lt;del&gt;f400&lt;/del&gt; - &lt;del&gt;f4a9&lt;/del&gt;, &lt;del&gt;2665&lt;/del&gt;, &lt;del&gt;26A1&lt;/del&gt; | &lt;del&gt;nerd-icons-octicon&lt;/del&gt; | | Powerline Symbols | &lt;del&gt;nf-pl-&lt;/del&gt; | &lt;del&gt;e0a0&lt;/del&gt; - &lt;del&gt;e0a2&lt;/del&gt;, &lt;del&gt;e0b0&lt;/del&gt; - &lt;del&gt;e0b3&lt;/del&gt; | &lt;del&gt;nerd-icons-powerline&lt;/del&gt; | | Powerline Extra Symbols | &lt;del&gt;nf-ple-&lt;/del&gt; | &lt;del&gt;e0a3&lt;/del&gt;, &lt;del&gt;e0b4&lt;/del&gt; - &lt;del&gt;e0c8&lt;/del&gt;, &lt;del&gt;e0ca&lt;/del&gt;, &lt;del&gt;e0cc&lt;/del&gt; - &lt;del&gt;e0d4&lt;/del&gt; | &lt;del&gt;nerd-icons-powerline&lt;/del&gt; | | IEC Power Symbols | &lt;del&gt;nf-iec-&lt;/del&gt; | &lt;del&gt;23fb&lt;/del&gt; - &lt;del&gt;23fe&lt;/del&gt;, &lt;del&gt;2b58&lt;/del&gt; | &lt;del&gt;nerd-icons-ipsicon&lt;/del&gt; | | Font Logos | &lt;del&gt;nf-linux-&lt;/del&gt; | &lt;del&gt;f300&lt;/del&gt; - &lt;del&gt;f32d&lt;/del&gt; | &lt;del&gt;nerd-icons-flicon&lt;/del&gt; | | Pomicons | &lt;del&gt;nf-pom-&lt;/del&gt; | &lt;del&gt;e000&lt;/del&gt; - &lt;del&gt;e00a&lt;/del&gt; | &lt;del&gt;nerd-icons-pomicon&lt;/del&gt; | | Codicons | &lt;del&gt;nf-cod-&lt;/del&gt; | &lt;del&gt;ea60&lt;/del&gt; - &lt;del&gt;ebeb&lt;/del&gt; | &lt;del&gt;nerd-icons-codicon&lt;/del&gt; |&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please check [[https://github.com/ryanoasis/nerd-fonts/wiki/Glyph-Sets-and-Code-Points][Nerd Fonts Glyph Sets and Code Points]] for more information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Related Packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rainstormstudio/treemacs-nerd-icons][treemacs-nerd-icons]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/seagle0128/nerd-icons-ivy-rich][nerd-icons-ivy-rich]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/seagle0128/nerd-icons-ibuffer][nerd-icons-ibuffer]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rainstormstudio/nerd-icons-completion][nerd-icons-completion]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use nerd-icons with Corfu If you use [[https://github.com/minad/corfu][corfu]] and [[https://github.com/jdtsmith/kind-icon][kind-icon]], you can use the following setting for icon mapping: #+BEGIN_SRC emacs-lisp (setq kind-icon-use-icons nil) (setq kind-icon-mapping `( (array ,(nerd-icons-codicon &#34;nf-cod-symbol_array&#34;) :face font-lock-type-face) (boolean ,(nerd-icons-codicon &#34;nf-cod-symbol_boolean&#34;) :face font-lock-builtin-face) (class ,(nerd-icons-codicon &#34;nf-cod-symbol_class&#34;) :face font-lock-type-face) (color ,(nerd-icons-codicon &#34;nf-cod-symbol_color&#34;) :face success) (command ,(nerd-icons-codicon &#34;nf-cod-terminal&#34;) :face default) (constant ,(nerd-icons-codicon &#34;nf-cod-symbol_constant&#34;) :face font-lock-constant-face) (constructor ,(nerd-icons-codicon &#34;nf-cod-triangle_right&#34;) :face font-lock-function-name-face) (enummember ,(nerd-icons-codicon &#34;nf-cod-symbol_enum_member&#34;) :face font-lock-builtin-face) (enum-member ,(nerd-icons-codicon &#34;nf-cod-symbol_enum_member&#34;) :face font-lock-builtin-face) (enum ,(nerd-icons-codicon &#34;nf-cod-symbol_enum&#34;) :face font-lock-builtin-face) (event ,(nerd-icons-codicon &#34;nf-cod-symbol_event&#34;) :face font-lock-warning-face) (field ,(nerd-icons-codicon &#34;nf-cod-symbol_field&#34;) :face font-lock-variable-name-face) (file ,(nerd-icons-codicon &#34;nf-cod-symbol_file&#34;) :face font-lock-string-face) (folder ,(nerd-icons-codicon &#34;nf-cod-folder&#34;) :face font-lock-doc-face) (interface ,(nerd-icons-codicon &#34;nf-cod-symbol_interface&#34;) :face font-lock-type-face) (keyword ,(nerd-icons-codicon &#34;nf-cod-symbol_keyword&#34;) :face font-lock-keyword-face) (macro ,(nerd-icons-codicon &#34;nf-cod-symbol_misc&#34;) :face font-lock-keyword-face) (magic ,(nerd-icons-codicon &#34;nf-cod-wand&#34;) :face font-lock-builtin-face) (method ,(nerd-icons-codicon &#34;nf-cod-symbol_method&#34;) :face font-lock-function-name-face) (function ,(nerd-icons-codicon &#34;nf-cod-symbol_method&#34;) :face font-lock-function-name-face) (module ,(nerd-icons-codicon &#34;nf-cod-file_submodule&#34;) :face font-lock-preprocessor-face) (numeric ,(nerd-icons-codicon &#34;nf-cod-symbol_numeric&#34;) :face font-lock-builtin-face) (operator ,(nerd-icons-codicon &#34;nf-cod-symbol_operator&#34;) :face font-lock-comment-delimiter-face) (param ,(nerd-icons-codicon &#34;nf-cod-symbol_parameter&#34;) :face default) (property ,(nerd-icons-codicon &#34;nf-cod-symbol_property&#34;) :face font-lock-variable-name-face) (reference ,(nerd-icons-codicon &#34;nf-cod-references&#34;) :face font-lock-variable-name-face) (snippet ,(nerd-icons-codicon &#34;nf-cod-symbol_snippet&#34;) :face font-lock-string-face) (string ,(nerd-icons-codicon &#34;nf-cod-symbol_string&#34;) :face font-lock-string-face) (struct ,(nerd-icons-codicon &#34;nf-cod-symbol_structure&#34;) :face font-lock-variable-name-face) (text ,(nerd-icons-codicon &#34;nf-cod-text_size&#34;) :face font-lock-doc-face) (typeparameter ,(nerd-icons-codicon &#34;nf-cod-list_unordered&#34;) :face font-lock-type-face) (type-parameter ,(nerd-icons-codicon &#34;nf-cod-list_unordered&#34;) :face font-lock-type-face) (unit ,(nerd-icons-codicon &#34;nf-cod-symbol_ruler&#34;) :face font-lock-constant-face) (value ,(nerd-icons-codicon &#34;nf-cod-symbol_field&#34;) :face font-lock-builtin-face) (variable ,(nerd-icons-codicon &#34;nf-cod-symbol_variable&#34;) :face font-lock-variable-name-face) (t ,(nerd-icons-codicon &#34;nf-cod-code&#34;) :face font-lock-warning-face))) #+END_SRC&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emacs-lsp/lsp-mode</title>
    <updated>2023-07-01T02:12:12Z</updated>
    <id>tag:github.com,2023-07-01:/emacs-lsp/lsp-mode</id>
    <link href="https://github.com/emacs-lsp/lsp-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs client/library for the Language Server Protocol&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: LSP Mode - Language Server Protocol support for Emacs description: Language Server Protocol support with multiples languages support for Emacs root_file: README.md&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/lsp-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/lsp-mode-badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/lsp-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/lsp-mode-badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/swuxy5AAgT&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/emacs-lsp/lsp-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/logo.png&#34; width=&#34;240&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;Language Server Protocol Support for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/head.png&#34; alt=&#34;LSP mode&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode&#34;&gt;&lt;strong&gt;homepage&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/installation&#34;&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/languages&#34;&gt;&lt;strong&gt;languages&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/settings/mode/&#34;&gt;&lt;strong&gt;settings&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/&#34;&gt;&lt;strong&gt;tutorials&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/troubleshooting&#34;&gt;&lt;strong&gt;troubleshooting&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/gallery&#34;&gt;&lt;strong&gt;screenshots&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/faq&#34;&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;❤️&lt;/span&gt; &lt;strong&gt;Community Driven&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;💎&lt;/span&gt; &lt;strong&gt;Fully featured&lt;/strong&gt; - supports &lt;strong&gt;all&lt;/strong&gt; features in Language Server Protocol v3.14.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🚀&lt;/span&gt; &lt;strong&gt;Fast&lt;/strong&gt; - see &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/performance&#34;&gt;performance section&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🌟&lt;/span&gt; &lt;strong&gt;Flexible&lt;/strong&gt; - choose between full-blown IDE with flashy UI or minimal distraction free.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;⚙&lt;/span&gt; &lt;strong&gt;Easy to configure&lt;/strong&gt; - works out of the box and automatically upgrades if additional packages are present.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Client for &lt;a href=&#34;https://github.com/Microsoft/language-server-protocol/&#34;&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt; &#xA; &lt;li&gt;Real-time Diagnostics/linting via &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; (recommended) or &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26 (requires flymake&amp;gt;=1.0.5)&lt;/li&gt; &#xA; &lt;li&gt;Code completion - &lt;code&gt;company-capf&lt;/code&gt; / &lt;code&gt;completion-at-point&lt;/code&gt; (note that &lt;a href=&#34;https://github.com/tigersoldier/company-lsp&#34;&gt;company-lsp&lt;/a&gt; is no longer supported).&lt;/li&gt; &#xA; &lt;li&gt;Hovers - using &lt;a href=&#34;https://emacs-lsp.github.io/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code actions - via &lt;code&gt;lsp-execute-code-action&lt;/code&gt;, &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#code-actions-on-modeline&#34;&gt;modeline&lt;/a&gt; (recommended) or &lt;a href=&#34;https://emacs-lsp.github.io/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; sideline.&lt;/li&gt; &#xA; &lt;li&gt;Code outline - using builtin &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&#34;&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code navigation - using builtin &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&#34;&gt;xref&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-treemacs&#34;&gt;lsp-treemacs&lt;/a&gt; tree views or &lt;a href=&#34;https://emacs-lsp.github.io/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; peek functions.&lt;/li&gt; &#xA; &lt;li&gt;Code lens&lt;/li&gt; &#xA; &lt;li&gt;Symbol highlights&lt;/li&gt; &#xA; &lt;li&gt;Formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#project-errors-on-modeline&#34;&gt;Project errors&lt;/a&gt; on modeline&lt;/li&gt; &#xA; &lt;li&gt;Debugger - &lt;a href=&#34;https://emacs-lsp.github.io/dap-mode/&#34;&gt;dap-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#breadcrumb-on-headerline&#34;&gt;Breadcrumb on headerline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helm integration - &lt;a href=&#34;https://github.com/emacs-lsp/helm-lsp/&#34;&gt;helm-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ivy integration - &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ivy/&#34;&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Consult integration - &lt;a href=&#34;https://github.com/gagbo/consult-lsp&#34;&gt;consult-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Treemacs integration - &lt;a href=&#34;https://github.com/emacs-lsp/lsp-treemacs&#34;&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Semantic tokens as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justbur/emacs-which-key/&#34;&gt;which-key&lt;/a&gt; integration for better discovery&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#iedit&#34;&gt;iedit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#dired&#34;&gt;dired&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#integrations&#34;&gt;ido&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Presentations/demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/SystemCrafters&#34;&gt;System Crafters&lt;/a&gt; channel &lt;a href=&#34;https://www.youtube.com/playlist?list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN&#34;&gt;Emacs IDE Videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skybert&#34;&gt;skybert&lt;/a&gt;&#39;s emacsconf &lt;a href=&#34;https://media.emacsconf.org/2019/19.html&#34;&gt;presentation&lt;/a&gt; (Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thatwist&#34;&gt;thatwist&lt;/a&gt;&#39;s ScalaUA Conference &lt;a href=&#34;https://www.youtube.com/watch?v=x7ey0ifcqAg&amp;amp;feature=youtu.be&#34;&gt;presentation&lt;/a&gt; (Scala)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-docker/&#34;&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sebastiencs/company-box/&#34;&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/dap-mode&#34;&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; - An alternative minimal LSP implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justbur/emacs-which-key/&#34;&gt;which-key&lt;/a&gt; - Emacs package that displays available keybindings in popup&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov/projectile/&#34;&gt;projectile&lt;/a&gt; - Project Interaction Library for Emacs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ubolonton/emacs-tree-sitter&#34;&gt;emacs-tree-sitter&lt;/a&gt; - Faster, fine-grained code highlighting via &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;tree-sitter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://akrl.sdf.org/gccemacs.html&#34;&gt;gccemacs&lt;/a&gt; - modified Emacs capable of compiling and running Emacs Lisp as native code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very much welcome!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Documentation for clients is generated from doc comments in the clients themselves (see &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-doc.el&#34;&gt;lsp-doc.el&lt;/a&gt;) and some metadata (see &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-clients.json&#34;&gt;lsp-clients.json&lt;/a&gt;) so please submit corrections accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Support the project&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;emacs-lsp&lt;/code&gt; organization has more than &lt;strong&gt;20,000 lines of code&lt;/strong&gt;, to keep all of this working, we need to implement new features and help the community on a lot of issues.&lt;/p&gt; &#xA;&lt;p&gt;You can help us keep going and improving it by &lt;strong&gt;&lt;a href=&#34;https://github.com/sponsors/emacs-lsp&#34;&gt;supporting the project&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/emacs-lsp&#34;&gt;&lt;img src=&#34;https://opencollective.com/emacs-lsp/tiers/backer.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Members&lt;/h3&gt; &#xA;&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt; &#xA;&lt;table id=&#34;emacs-lsp-members&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/totbwf&#34;&gt; &lt;img src=&#34;https://github.com/totbwf.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;totbwf&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;totbwf&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; F# &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/brotzeit&#34;&gt; &lt;img src=&#34;https://github.com/brotzeit.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;brotzeit&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;brotzeit&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Rust &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/dsyzling&#34;&gt; &lt;img src=&#34;https://github.com/dsyzling.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;dsyzling&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;dsyzling&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Scala &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/kurnevsky&#34;&gt; &lt;img src=&#34;https://github.com/kurnevsky.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;kurnevsky&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kurnevsky&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Scala | Rust &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/seagle0128&#34;&gt; &lt;img src=&#34;https://github.com/seagle0128.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;seagle0128&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;seagle0128&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Go | Python MS &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/sebastiansturm&#34;&gt; &lt;img src=&#34;https://github.com/sebastiansturm.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;sebastiansturm&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;sebastiansturm&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core | C++ &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/vibhavp&#34;&gt; &lt;img src=&#34;https://github.com/vibhavp.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;vibhavp&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;vibhavp&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/yyoncho&#34;&gt; &lt;img src=&#34;https://github.com/yyoncho.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;yyoncho&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;yyoncho&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core | Java &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/ericdallo&#34;&gt; &lt;img src=&#34;https://github.com/ericdallo.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;ericdallo&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;ericdallo&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Dart/Flutter | Clojure &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/danielmartin&#34;&gt; &lt;img src=&#34;https://github.com/danielmartin.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;danielmartin&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;danielmartin&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; C++ | Swift &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/kiennq&#34;&gt; &lt;img src=&#34;https://github.com/kiennq.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;kiennq&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kiennq&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; completions | pwsh &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/nbfalcon&#34;&gt; &lt;img src=&#34;https://github.com/nbfalcon.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;nbfalcon&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;nbfalcon&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core | iedit &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/psibi&#34;&gt; &lt;img src=&#34;https://github.com/psibi.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;psibi&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;psibi&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Terraform | Nix &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/razzmatazz&#34;&gt; &lt;img src=&#34;https://github.com/razzmatazz.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;psibi&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;razzmatazz&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; C# | F# &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>emacs-evil/evil</title>
    <updated>2023-07-01T02:12:12Z</updated>
    <id>tag:github.com,2023-07-01:/emacs-evil/evil</id>
    <link href="https://github.com/emacs-evil/evil" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The extensible vi layer for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-evil/evil/master/doc/logo.png&#34; alt=&#34;An extensible vi layer for Emacs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emacs-evil/evil/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-evil/evil/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/evil&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/evil-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/evil&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/evil-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://elpa.nongnu.org/nongnu/evil.html&#34;&gt;&lt;img src=&#34;http://elpa.nongnu.org/nongnu/evil.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://evil.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/evil/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Evil is an &lt;strong&gt;e&lt;/strong&gt;xtensible &lt;strong&gt;vi&lt;/strong&gt; &lt;strong&gt;l&lt;/strong&gt;ayer for &lt;a href=&#34;http://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;. It emulates the main features of &lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt;, and provides facilities for writing custom extensions. Also see our page on &lt;a href=&#34;http://emacswiki.org/emacs/Evil&#34;&gt;EmacsWiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://evil.readthedocs.io/en/latest/overview.html#installation-via-package-el&#34;&gt;official documentation&lt;/a&gt; for installation instructions. We recommend using &lt;em&gt;package.el&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As a quickstart, you can add the following code to your Emacs init file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Set up package.el to work with MELPA&#xA;(require &#39;package)&#xA;(add-to-list &#39;package-archives&#xA;             &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;))&#xA;(package-initialize)&#xA;(package-refresh-contents)&#xA;&#xA;;; Download Evil&#xA;(unless (package-installed-p &#39;evil)&#xA;  (package-install &#39;evil))&#xA;&#xA;;; Enable Evil&#xA;(require &#39;evil)&#xA;(evil-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Evil requires Emacs 24.1 or later.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Evil requires any of the following for &lt;code&gt;C-r&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;undo-redo&lt;/code&gt; from Emacs 28&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://gitlab.com/tsc25/undo-tree&#34;&gt;undo-tree&lt;/a&gt; package (available via GNU ELPA)&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://gitlab.com/ideasman42/emacs-undo-fu&#34;&gt;undo-fu&lt;/a&gt; package (available via MELPA)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For the motions &lt;code&gt;g;&lt;/code&gt; &lt;code&gt;g,&lt;/code&gt; and for the last-change-register &lt;code&gt;.&lt;/code&gt;, Evil requires the &lt;a href=&#34;https://github.com/emacs-evil/goto-chg&#34;&gt;goto-chg.el&lt;/a&gt; package (available via MELPA and NonGNU ELPA), which provides the functions &lt;code&gt;goto-last-change&lt;/code&gt; and &lt;code&gt;goto-last-change-reverse&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Emacs 24.1 and 24.2 Evil also requires &lt;a href=&#34;https://elpa.gnu.org/packages/cl-lib.html&#34;&gt;cl-lib&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The latest version of the documentation is readable online &lt;a href=&#34;https://evil.readthedocs.io/en/latest/index.html&#34;&gt;here&lt;/a&gt;. It is also available as &lt;a href=&#34;https://readthedocs.org/projects/evil/downloads/pdf/latest/&#34;&gt;PDF&lt;/a&gt; and as &lt;a href=&#34;https://readthedocs.org/projects/evil/downloads/epub/latest/&#34;&gt;EPUB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Mailing list&lt;/h1&gt; &#xA;&lt;p&gt;Evil is discussed at the &lt;a href=&#34;http://lists.ourproject.org/cgi-bin/mailman/listinfo/implementations-list&#34;&gt;gmane.emacs.vim-emulation&lt;/a&gt; mailing list.&lt;/p&gt; &#xA;&lt;h1&gt;IRC&lt;/h1&gt; &#xA;&lt;p&gt;Visit us on &lt;code&gt;irc.libera.chat #evil-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/emacs-evil/evil/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for guidelines for issues and pull requests.&lt;/p&gt;</summary>
  </entry>
</feed>