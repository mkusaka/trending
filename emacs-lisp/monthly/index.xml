<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T02:38:55Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zerolfx/copilot.el</title>
    <updated>2022-07-01T02:38:55Z</updated>
    <id>tag:github.com,2022-07-01:/zerolfx/copilot.el</id>
    <link href="https://github.com/zerolfx/copilot.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial Copilot plugin for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot.el&lt;/h1&gt; &#xA;&lt;p&gt;Copilot.el is an Emacs plugin for GitHub Copilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This plugin is unofficial and based on binaries provided by &lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;copilot.vim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need access to &lt;a href=&#34;https://github.com/features/copilot&#34;&gt;GitHub Copilot&lt;/a&gt; to use this plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; (only support 12.x to 17.x, limited by upstream). Workaround for node.js v18+ users: install an old version of node.js via &lt;a href=&#34;https://github.com/nvm-sh/nvm#installing-and-updating&#34;&gt;nvm&lt;/a&gt; and set &lt;code&gt;copilot-node-executable&lt;/code&gt; to it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup &lt;code&gt;copilot.el&lt;/code&gt; as described in the next section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Copilot by &lt;code&gt;M-x copilot-login&lt;/code&gt;. You can also check the status by &lt;code&gt;M-x copilot-diagnose&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Example for Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Add package definition to &lt;code&gt;~/.doom.d/packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package! copilot&#xA;  :recipe (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;*.el&#34; &#34;dist&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Configure copilot in &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; accept completion from copilot and fallback to company&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;(use-package! copilot&#xA;  :hook (prog-mode . copilot-mode)&#xA;  :bind ((&#34;C-TAB&#34; . &#39;copilot-accept-completion-by-word)&#xA;         (&#34;C-&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion-by-word)&#xA;         :map company-active-map&#xA;         (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;my-tab)&#xA;         (&#34;TAB&#34; . &#39;my-tab)&#xA;         :map company-mode-map&#xA;         (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;my-tab)&#xA;         (&#34;TAB&#34; . &#39;my-tab)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Strongly recommend to enable &lt;code&gt;childframe&lt;/code&gt; option in &lt;code&gt;company&lt;/code&gt; module (&lt;code&gt;(company +childframe)&lt;/code&gt;) to prevent overlay conflict.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example for Spacemacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Edit your &lt;code&gt;~/.spacemacs&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; ===================&#xA;;; dotspacemacs/layers&#xA;;; ===================&#xA;&#xA;;; add copilot.el to additional packages&#xA;dotspacemacs-additional-packages&#xA; &#39;((copilot :location (recipe&#xA;                       :fetcher github&#xA;                       :repo &#34;zerolfx/copilot.el&#34;&#xA;                       :files (&#34;*.el&#34; &#34;dist&#34;))))&#xA;&#xA;;; ========================&#xA;;; dotspacemacs/user-config&#xA;;; ========================&#xA;&#xA;;; accept completion from copilot and fallback to company&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends)&#xA;  ;; enable tab completion&#xA;  (define-key company-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-mode-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;TAB&#34;) &#39;my-tab))&#xA;&#xA;&#xA;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&#xA;(define-key evil-insert-state-map (kbd &#34;C-&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion-by-word)&#xA;(define-key evil-insert-state-map (kbd &#34;C-TAB&#34;) &#39;copilot-accept-completion-by-word)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;General Configurations&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;h4&gt;1. Load &lt;code&gt;copilot.el&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Load via &lt;code&gt;straight.el&lt;/code&gt; (recommended)&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :straight (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;))&#xA;  :ensure t)&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;Option 2: Load manually&lt;/h5&gt; &#xA; &lt;p&gt;Please make sure you have these dependencies installed, and use &lt;code&gt;load-file&lt;/code&gt; or &lt;code&gt;load-path&lt;/code&gt; + &lt;code&gt;require&lt;/code&gt; to load it.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;editorconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;2. Configure completion&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Use &lt;code&gt;copilot-mode&lt;/code&gt; to automatically provide completions&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To customize the behavior of &lt;code&gt;copilot-mode&lt;/code&gt;, please check &lt;code&gt;copilot-enable-predicates&lt;/code&gt; and &lt;code&gt;copilot-disable-predicates&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;Option 2: Manually provide completions&lt;/h5&gt; &#xA; &lt;p&gt;You need to bind &lt;code&gt;copilot-complete&lt;/code&gt; to some key and call &lt;code&gt;copilot-clear-overlay&lt;/code&gt; inside &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h4&gt;3. Configure completion acceptation&lt;/h4&gt; &#xA; &lt;p&gt;In general, you need to bind &lt;code&gt;copilot-accept-completion&lt;/code&gt; to some key in order to accept the completion. Also, you may find &lt;code&gt;copilot-accept-completion-by-word&lt;/code&gt; is useful.&lt;/p&gt; &#xA; &lt;h4&gt;Example of using tab with &lt;code&gt;company-mode&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;; complete by copilot first, then company-mode&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (company-indent-or-complete-common nil)))&#xA;&#xA;; modify company-mode behaviors&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends)&#xA;&#xA;  (define-key company-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-mode-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab)&#xA;  (define-key company-active-map (kbd &#34;TAB&#34;) &#39;my-tab))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Example of using tab with &lt;code&gt;auto-complete&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;; complete by copilot first, then auto-complete&#xA;(defun my-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (ac-expand nil)))&#xA;&#xA;(with-eval-after-load &#39;auto-complete&#xA;  ; disable inline preview&#xA;  (setq ac-disable-inline t)&#xA;  ; show menu if have only one candidate&#xA;  (setq ac-candidate-menu-min 0)&#xA;&#xA;  (define-key ac-completing-map (kbd &#34;TAB&#34;) &#39;my-tab)&#xA;  (define-key ac-completing-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my-tab))&#xA;&#xA;(define-key global-map [remap indent-for-tab-command] &#39;(lambda ()&#xA;                                                         (interactive)&#xA;                                                         (or (copilot-accept-completion)&#xA;                                                             (indent-for-tab-command))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Example of defining tab in copilot-mode&lt;/h4&gt; &#xA; &lt;p&gt;This is useful if you don&#39;t want to depend on a particular completion framework.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun my/copilot-tab ()&#xA;  (interactive)&#xA;  (or (copilot-accept-completion)&#xA;      (indent-for-tab-command)))&#xA;&#xA;(with-eval-after-load &#39;copilot&#xA;  (define-key copilot-mode-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) #&#39;my/copilot-tab))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or with evil-mode:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(with-eval-after-load &#39;copilot&#xA;  (evil-define-key &#39;insert copilot-mode-map&#xA;    (kbd &#34;&amp;lt;tab&amp;gt;&#34;) #&#39;my/copilot-tab))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-diagnose&lt;/h4&gt; &#xA;&lt;p&gt;Check the current status of the plugin. Also you can check logs in the &lt;code&gt;*copilot events*&lt;/code&gt; buffer and stderr output in the &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-login&lt;/h4&gt; &#xA;&lt;p&gt;Login to GitHub, required for using the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-mode&lt;/h4&gt; &#xA;&lt;p&gt;Enable/disable copilot mode.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-complete&lt;/h4&gt; &#xA;&lt;p&gt;Try to complete at the current point.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion&lt;/h4&gt; &#xA;&lt;p&gt;Accept the current completion.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay&lt;/h4&gt; &#xA;&lt;p&gt;Clear copilot overlay in the current buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion-by-line / copilot-accept-completion-by-word&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;copilot-accept-completion&lt;/code&gt;, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-next-completion / copilot-previous-completion&lt;/h4&gt; &#xA;&lt;p&gt;Cycle through the completion list.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-logout&lt;/h4&gt; &#xA;&lt;p&gt;Logout from GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-node-executable&lt;/h4&gt; &#xA;&lt;p&gt;The executable path of Node.js.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-idle-delay&lt;/h4&gt; &#xA;&lt;p&gt;Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;. Copilot will be enabled only if all predicates return &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-disable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to disable Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;. Copilot will be disabled if any predicate returns &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Wrong Position of Other Completion Popups&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/company-overlay.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an example of using together with default frontend of &lt;code&gt;company-mode&lt;/code&gt;. Because both &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;copilot.el&lt;/code&gt; use overlay to show completion, so the conflict is inevitable. To solve the problem, I recommend you to use &lt;code&gt;company-box&lt;/code&gt; (only available on GUI), which is based on child frame rather than overlay.&lt;/p&gt; &#xA;&lt;p&gt;After using &lt;code&gt;company-box&lt;/code&gt;, you have:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zerolfx/copilot.el/main/assets/company-box.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In other editors (e.g. &lt;code&gt;VS Code&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;), completions from copilot and other sources can not show at the same time. But I decided to allow them to coexist, allowing you to choose a better one at any time.&lt;/p&gt; &#xA;&lt;h3&gt;Cursor Jump to End of Line When Typing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are using &lt;code&gt;whitespace-mode&lt;/code&gt;, make sure to remove &lt;code&gt;newline-mark&lt;/code&gt; from &lt;code&gt;whitespace-style&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have restarted your Emacs (and rebuild the plugin if necessary) after updating the plugin.&lt;/li&gt; &#xA; &lt;li&gt;Please paste related logs in the &lt;code&gt;*copilot events*&lt;/code&gt; and &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/li&gt; &#xA; &lt;li&gt;If an exception is thrown, please also paste the stack trace (use &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; to enable stack trace).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setup Copilot without Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cycle through suggestions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Copilot minor-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;Add package to MELPA&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;These projects helped me a lot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TommyX12/company-tabnine/&#34;&gt;https://github.com/TommyX12/company-tabnine/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cryptobadger/flight-attendant.el&#34;&gt;https://github.com/cryptobadger/flight-attendant.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;https://github.com/github/copilot.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>manateelazycat/lsp-bridge</title>
    <updated>2022-07-01T02:38:55Z</updated>
    <id>tag:github.com,2022-07-01:/manateelazycat/lsp-bridge</id>
    <link href="https://github.com/manateelazycat/lsp-bridge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fastest LSP client for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;lsp-bridge&lt;/h1&gt; &#xA;&lt;p&gt;Lsp-bridge&#39;s goal is to become the fastest LSP client in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Lsp-bridge uses python&#39;s threading technology to build caches that bridge Emacs and LSP server. Lsp-bridge will provide smooth completion experience without compromise to slow down emacs&#39; performance.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/screenshot.png&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Python dependencies: &lt;a href=&#34;https://github.com/tkf/python-epc&#34;&gt;python-epc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Elisp dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tumashu/posframe&#34;&gt;posframe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jrblevin/markdown-mode&#34;&gt;markdown-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/yasnippet&#34;&gt;yasnippet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Clone or download this repository (path of the folder is the &lt;code&gt;&amp;lt;path-to-lsp-bridge&amp;gt;&lt;/code&gt; used below).&lt;/li&gt; &#xA; &lt;li&gt;Add following code in your ~/.emacs:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;&amp;lt;path-to-lsp-bridge&amp;gt;&#34;)&#xA;&#xA;(require &#39;yasnippet)&#xA;(yas-global-mode 1)&#xA;&#xA;(require &#39;lsp-bridge)&#xA;(global-lsp-bridge-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;lsp-bridge is design for out the box. After &lt;strong&gt;installing the LSP server command&lt;/strong&gt; corresponding to the open file, you can write the code directly without additional settings.&lt;/p&gt; &#xA;&lt;p&gt;There are two modes in lsp-bridge:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When detecting the .git directory (to judge by command &lt;code&gt;git rev-parse-is-inside-work-tree&lt;/code&gt;), lsp-bridge scan the entire directory files to provide completion&lt;/li&gt; &#xA; &lt;li&gt;When the .git directory was not detected, lsp-bridge only provided a single file complementary to the open file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you expect lsp-bridge to automatically scan the files of the entire project, please execute the &lt;code&gt;git init&lt;/code&gt; command in the project root directory.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-def&lt;/code&gt;: jump to the definition&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-def-other-window&lt;/code&gt;: jump to the definition in other-window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-impl&lt;/code&gt;: jump to the implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-impl-other-window&lt;/code&gt;: jump to the implementation in other-window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-return-from-def&lt;/code&gt;: return to the location before calling &lt;code&gt;lsp-bridge-find-def&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-find-references&lt;/code&gt;: traverse across code references (forked from color-rg.el)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lookup-documentation&lt;/code&gt;: lookup documentation of symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-popup-documentation-scroll-up&lt;/code&gt;: scroll up popup document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-popup-documentation-scroll-down&lt;/code&gt;: scroll down popup document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-rename&lt;/code&gt;: rename symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-jump-to-next-diagnostic&lt;/code&gt;: Jump to the next diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-jump-to-prev-diagnostic&lt;/code&gt;: Jump to the previous diagnostic position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-list-diagnostics&lt;/code&gt;: List all diagnostic information&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-ignore-current-diagnostic&lt;/code&gt;: Insert comment to ignore the current diagnosis&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-signature-help-fetch&lt;/code&gt;: show signature help in minibuffer manually (move cursor to parameters area will show signature help automatically)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-insert-common-prefix&lt;/code&gt;: insert common prefix of candidates&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-restart-process&lt;/code&gt;: restart lsp-bridge process (only used for development)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;acm-doc-scroll-up&lt;/code&gt;: API document window scroll up&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;acm-doc-scroll-down&lt;/code&gt;: API document window scroll down&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-popup-predicates&lt;/code&gt;: the predicate function for completion menu, completion menu popup after all the functions pass&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-stop-commands&lt;/code&gt;: completion menu will not popup if these commands are executed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-completion-hide-characters&lt;/code&gt;: completion menu will not popup when cursor after those characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-diagnostics-fetch-idle&lt;/code&gt;: diagnostic delay, start pulling diagnostic information 1 second after stopping typing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-diagnostics&lt;/code&gt;: code diagnostic, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-candidate-doc-preview&lt;/code&gt;: preview of the candidate document, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-signature-help&lt;/code&gt;: show function parameter in minibufer, disable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-org-babel-lang-list&lt;/code&gt;: list of language to support org-mode code block completion&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-disable-backup&lt;/code&gt;: forbidden version manage of emacs, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-log&lt;/code&gt;: enable the LSP message log, disable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-enable-debug&lt;/code&gt;: enable program debugging, disable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-python-command&lt;/code&gt;: The path of the python command, if you use &lt;code&gt;conda&lt;/code&gt;, you may customize this option&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-signature-function&lt;/code&gt;: The function used for displaying signature info&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;acm-backend-lsp-enable-auto-import&lt;/code&gt;: automatic insert import code, enable by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;acm-candidate-match-function&lt;/code&gt;: The complete menu matching algorithm, the algorithm prefix of orderless-* needs to be installed additional &lt;a href=&#34;https://github.com/oantolin/orderless&#34;&gt;orderless&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;acm-enable-doc&lt;/code&gt;: Whether the complete menu display the help document&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;acm-enable-icon&lt;/code&gt;: Whether the complete menu shows the icon&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;acm-snippet-insert-index&lt;/code&gt;: The display position of snippet candidate in the complementary menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize language server configuration&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration of for each language server is stored at &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/tree/master/langserver&#34;&gt;lsp-bridge/langserver&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Anyway you can customize server configuration with the following priority:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-get-lang-server-by-project&lt;/code&gt;: write your own function to get server configuration based on project-path and file-path, this function is nil by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-extension-list&lt;/code&gt;: load server configuration based on file extension, such as, we launch &lt;code&gt;volar&lt;/code&gt; server instead &lt;code&gt;javascript&lt;/code&gt; server when open *.vue file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp-bridge-lang-server-mode-list&lt;/code&gt;: load server configuration based on major-mode&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Add support for new language?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create configuration file under lsp-bridge/langserver, such as &lt;code&gt;pyright.json&lt;/code&gt; for pyright (windows user please uses &lt;code&gt;pyright_windows.json&lt;/code&gt;, macOS user please uses &lt;code&gt;pyright_darwin.json&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;(mode . server_name)&lt;/code&gt; to &lt;code&gt;lsp-bridge-lang-server-mode-list&lt;/code&gt; in &lt;code&gt;lsp-bridge.el&lt;/code&gt;, such as &lt;code&gt;(python-mode . &#34;pyright&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add new mode-hook to &lt;code&gt;lsp-bridge-default-mode-hooks&lt;/code&gt; in &lt;code&gt;lsp-bridge.el&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Welcome to send PR to help us improve support for LSP servers, thanks for your contribution!&lt;/p&gt; &#xA;&lt;h2&gt;Supported language servers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Index&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;LSP Server&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clangd/clangd&#34;&gt;clangd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;c, c++&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/microsoft/pyright&#34;&gt;pyright&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;pip install pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/castwide/solargraph&#34;&gt;solargraph&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/rust-lang/rust-analyzer&#34;&gt;rust-analyzer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rust&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;elixirLS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elixir&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that the &lt;code&gt;elixir-ls&lt;/code&gt; release directory is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/golang/tools/tree/master/gopls&#34;&gt;gopls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;make sure gopls in PATH, please do &lt;code&gt;ln -s ~/go/bin/gopls ~/.local/bin&lt;/code&gt;, and do &lt;code&gt;go mod init&lt;/code&gt; first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;hls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/dart-lang/sdk/tree/master/pkg/analysis_server&#34;&gt;dart-analysis-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;dart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;metals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scala&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/typescript&#34;&gt;typescript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;typescript, javascript&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/ocaml/ocaml-lsp&#34;&gt;ocamllsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ocaml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/erlang-ls/erlang_ls&#34;&gt;erlang-ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;erlang&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/latex-lsp/texlab&#34;&gt;texlab&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;latex&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://projects.eclipse.org/projects/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;java&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure that &lt;code&gt;org.eclipse.jdt.ls.product/target/repository/bin&lt;/code&gt; is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/clojure-lsp/clojure-lsp&#34;&gt;clojure-lsp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;clojure&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/bash-lsp/bash-language-server&#34;&gt;bash-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/johnsoncodehk/volar&#34;&gt;volar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;vue&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/sumneko/lua-language-server&#34;&gt;sumneko&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;please ensure &lt;code&gt;bin&lt;/code&gt; under sumneko installation is in your system PATH at first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/chemzqm/wxml-languageserver&#34;&gt;wxml-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;wxml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-html-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;html&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;vscode-css-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;css&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/elm-tooling/elm-language-server&#34;&gt;elm-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;elm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/bmewburn/vscode-intelephense&#34;&gt;intelephense&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;php&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/redhat-developer/yaml-language-server&#34;&gt;yaml-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yaml&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;npm install -g yaml-language-server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/zigtools/zls&#34;&gt;zls&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;zig&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;execute &lt;code&gt;zls config&lt;/code&gt; to generate configuration for zls. see &lt;a href=&#34;https://github.com/zigtools/zls#configuration-options&#34;&gt;Configuration Options&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;26&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/GroovyLanguageServer/groovy-language-server&#34;&gt;groovy-language-server&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;groovy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Create a script &#34;groovy-language-server&#34; in PATH, with &lt;code&gt;$JAVA_HOME/bin/java -jar &amp;lt;path&amp;gt;/groovy-language-server-all.jar&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;TODO:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Code action&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features that won&#39;t be supported&lt;/h3&gt; &#xA;&lt;p&gt;The goal of lsp-bridge is to become the fastest LSP client in Emacs, not a complete implementation of LSP protocol.&lt;/p&gt; &#xA;&lt;p&gt;Emacs can do better for the following tasks, we will not reinvent the wheel in lsp-bridge:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Syntax highlighting: &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;Tree-sitter&lt;/a&gt; is a wonderful incremental parsing library for syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;Xref: Xref&#39;s mechanism is synchronous, but lsp-bridge is completely asynchronous. I recommended binding your xref key to a wrapper function that combines xref and lsp-bridge together.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Join development&lt;/h2&gt; &#xA;&lt;p&gt;The following is the framework of lsp-bridge:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/lsp-bridge/master/framework.png&#34;&gt; &#xA;&lt;p&gt;The following is the directory structure of the lsp-bridge project:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Elisp main logic part that provides custom options and elisp functions for python sub-process calls like code jumping, renaming, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-epc.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Communicating with lsp-bridge python sub-process, which mainly implements elisp IPC to connect to python EPC for data serialization, sending, receiving, and deserialization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-ref.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Framework of code referencing, providing references viewing, batch renames, regex filtering of reference results, etc. The core code is forked from color-rg.el&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge-jdtls.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Provide java language third-party library jumping function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lsp-bridge.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python main logic part that provides event loop, message scheduling and status management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;acm/acm.el&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Asynchronous completion menu, specially designed for lsp-bridge backend, supports LSP, elisp, words and other backend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/fileaction.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tracking the status of each file, processing LSP response messages, calling Emacs elisp function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/lspserver.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LSP message processing module, mainly to analyze, send and receive LSP messages, and ensure that the sequence of LSP requests conforms with the LSP protocol specification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/utils.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Utility functions of convenience for each module call&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/mergedeep.py&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON information merger is mainly used to send custom options to LSP server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;core/hanlder/&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The implementation of sending and receiving LSP message, where &lt;strong&gt;init&lt;/strong&gt;.py is a base class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;langserver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The configurations of the LSP servers, each server corresponding to a JSON file that defines the name of the server, language ID, starting command, options, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/&#34;&gt;LSP Specification&lt;/a&gt; and &lt;a href=&#34;https://manateelazycat.github.io/emacs/2022/05/12/lsp-bridge.html&#34;&gt;The Design of lsp-bridge&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;Then turn on option &lt;code&gt;lsp-bridge-enable-log&lt;/code&gt; and happy hacking! ;)&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Why lsp-bridge can&#39;t complete the code of other files in the project directory?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;lsp-bridge relies on &lt;code&gt;git&lt;/code&gt; to find the project path. lsp-bridge will enter a &lt;code&gt;single file mode&lt;/code&gt; if it cannot find git information. You need to find the project path and execute &lt;code&gt;git init&lt;/code&gt; command to solve this problem.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When you open the *.json file, why is it always prompting &lt;code&gt;[LSP-BRIDGE] error: cann’t find command for *.json, disable lsp-bride-mode.&lt;/code&gt; ?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Because Emacs defaults to set the mode of json file to js-mode, you need to install &lt;a href=&#34;https://github.com/joshwnj/json-mode&#34;&gt;json-mode&lt;/a&gt; to solve this problem.&lt;/p&gt; &#xA;&lt;h2&gt;Report bug&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;emacs -q&lt;/code&gt; and load a minimal setup with only lsp-bridge to verify that the bug is reproducible. If &lt;code&gt;emacs -q&lt;/code&gt; works fine, probably something is wrong with your Emacs config.&lt;/p&gt; &#xA;&lt;p&gt;If the problem still exists, please report it &lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/issues/new&#34;&gt;here&lt;/a&gt; with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content, it contains many clues that can help us locate the problem faster.&lt;/p&gt; &#xA;&lt;p&gt;If you get a segfault error, please use the following way to collect crash information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install gdb and turn on option &lt;code&gt;lsp-bridge-enable-debug&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the command &lt;code&gt;lsp-bridge-stop-process&lt;/code&gt; to stop the current process&lt;/li&gt; &#xA; &lt;li&gt;Restart lsp-bridge, send issue with &lt;code&gt;*lsp-bridge*&lt;/code&gt; buffer content when next crash&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributor&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/manateelazycat/lsp-bridge/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=manateelazycat/lsp-bridge&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>melpa/melpa</title>
    <updated>2022-07-01T02:38:55Z</updated>
    <id>tag:github.com,2022-07-01:/melpa/melpa</id>
    <link href="https://github.com/melpa/melpa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recipes and build machinery for the biggest Emacs package repo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MELPA&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/melpa/melpa/actions&#34;&gt;&lt;img src=&#34;https://github.com/melpa/melpa/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MELPA is a growing collection of &lt;code&gt;package.el&lt;/code&gt;-compatible Emacs Lisp packages built automatically on our server from the upstream source code using simple recipes. (Think of it as a server-side version of &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, or even &lt;a href=&#34;https://github.com/Homebrew/homebrew&#34;&gt;Homebrew&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Packages are updated at intervals throughout the day.&lt;/p&gt; &#xA;&lt;p&gt;To browse available packages, check out the &lt;a href=&#34;https://melpa.org/&#34;&gt;archive index page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adding packages is as simple as submitting a new recipe as a pull request; read on for details.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&#34;&gt;Recipe Format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#build-scripts&#34;&gt;Build Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#mirrors&#34;&gt;Mirrors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the MELPA repository, you&#39;ll need an Emacs with &lt;code&gt;package.el&lt;/code&gt;, ie. Emacs 24.1 or greater. To test TLS support you can visit a HTTPS URL, for example with &lt;code&gt;M-x eww RET https://wikipedia.org RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enable installation of packages from MELPA by adding an entry to &lt;code&gt;package-archives&lt;/code&gt; after &lt;code&gt;(require &#39;package)&lt;/code&gt; and before the call to &lt;code&gt;package-initialize&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`&#xA;;; and `package-pinned-packages`. Most users will not need or want to do this.&#xA;;;(add-to-list &#39;package-archives &#39;(&#34;melpa-stable&#34; . &#34;https://stable.melpa.org/packages/&#34;) t)&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just use &lt;code&gt;M-x package-list-packages&lt;/code&gt; to browse and install packages from MELPA and elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Note that you&#39;ll need to run &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; or &lt;code&gt;M-x package-list-packages&lt;/code&gt; to ensure that Emacs has fetched the MELPA package list before you can install packages with &lt;code&gt;M-x package-install&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;h3&gt;MELPA Stable&lt;/h3&gt; &#xA;&lt;p&gt;Packages in MELPA are built directly from the latest package source code in the upstream repositories, but we also build and publish packages corresponding to the latest tagged code in those repositories, where version tags exist. These packages are published in a separate package archive called &lt;a href=&#34;https://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt;. Most users should prefer MELPA over MELPA Stable.&lt;/p&gt; &#xA;&lt;p&gt;Some notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you leave the original MELPA server in your &lt;code&gt;package-archives&lt;/code&gt; then by default you will get the &lt;em&gt;development&lt;/em&gt; versions of packages and not the stable ones, because the development versions are higher.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your Emacs has the variables &lt;code&gt;package-pinned-packages&lt;/code&gt; (available in 24.4 and later) and/or &lt;code&gt;package-archive-priorities&lt;/code&gt;, you can customize or modify those variables as needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use the &lt;a href=&#34;https://github.com/milkypostman/package-filter&#34;&gt;package-filter.el&lt;/a&gt; package which we provide.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You will probably want to remove all packages and then reinstall them. Any packages you already have installed from MELPA will never get &#34;updated&#34; to the stable version because of the way version numbering is handled.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the MELPA maintainers do not use MELPA Stable themselves, and do not particularly recommend its use.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/CONTRIBUTING.org&#34;&gt;CONTRIBUTING.org&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Recipe Format&lt;/h2&gt; &#xA;&lt;p&gt;Packages are specified by files in the &lt;code&gt;recipes&lt;/code&gt; directory. You can contribute a new package by adding a new file under &lt;code&gt;recipes&lt;/code&gt; using the following form (&lt;code&gt;[...]&lt;/code&gt; denotes optional or conditional values),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(&amp;lt;package-name&amp;gt;&#xA; :fetcher [git|github|gitlab|hg]&#xA; [:url &#34;&amp;lt;repo url&amp;gt;&#34;]&#xA; [:repo &#34;github-or-gitlab-user/repo-name&#34;]&#xA; [:commit &#34;commit&#34;]&#xA; [:branch &#34;branch&#34;]&#xA; [:version-regexp &#34;&amp;lt;regexp&amp;gt;&#34;]&#xA; [:files (&#34;&amp;lt;file1&amp;gt;&#34; ...)]&#xA; [:old-names (&amp;lt;old-name&amp;gt; ...)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-name&lt;/code&gt; a lisp symbol that has the same name as the package being specified.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:fetcher&lt;/code&gt; specifies the type of repository that &lt;code&gt;:url&lt;/code&gt; or &lt;code&gt;:repo&lt;/code&gt; points to. MELPA supports &lt;a href=&#34;http://git-scm.com/&#34;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/&#34;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://gitlab.com/&#34;&gt;&lt;code&gt;gitlab&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://www.mercurial-scm.org/&#34;&gt;&lt;code&gt;hg&lt;/code&gt;&lt;/a&gt; (Mercurial).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:url&lt;/code&gt; specifies the URL of the version control repository. &lt;em&gt;required for the &lt;code&gt;git&lt;/code&gt;, and &lt;code&gt;hg&lt;/code&gt; fetchers.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:repo&lt;/code&gt; specifies the github or gitlab repository and is of the form &lt;code&gt;user/repo-name&lt;/code&gt;. &lt;em&gt;required for the &lt;code&gt;github&lt;/code&gt; and &lt;code&gt;gitlab&lt;/code&gt; fetchers&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:commit&lt;/code&gt; specifies the commit of the git repo to checkout. The value will be passed to &lt;code&gt;git reset&lt;/code&gt; in a repo where &lt;code&gt;upstream&lt;/code&gt; is the original repository. Can therefore be either a SHA, if pointing at a specific commit, or a full ref prefixed with &#34;origin/&#34;. Only used by the &lt;code&gt;git&lt;/code&gt;-based fetchers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:branch&lt;/code&gt; specifies the branch of the git repo to use. This is like &lt;code&gt;:commit&lt;/code&gt;, but it adds the &#34;origin/&#34; prefix automatically. This must be specified when using a branch other than the default branch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:version-regexp&lt;/code&gt; is a regular expression for extracting a version-string from the repository tags. The default matches typical version tags such as &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;R16&lt;/code&gt; or &lt;code&gt;v4.3.5&lt;/code&gt;, so you should not override it unless necessary. For an unusual tag like &#34;OTP-18.1.5&#34;, we might add &lt;code&gt;:version-regexp &#34;[^0-9]*\\(.*\\)&#34;&lt;/code&gt; to strip the &#34;OTP-&#34; prefix. The captured portion of the regexp must be parseable by Emacs&#39; &lt;code&gt;version-to-list&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:files&lt;/code&gt; optional property specifying the elisp and info files used to build the package. Please do not override this if the default value (below) is adequate, which it should usually be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;&#39;(&#34;*.el&#34; &#34;lisp/*.el&#34;&#xA;  &#34;dir&#34; &#34;*.info&#34; &#34;*.texi&#34; &#34;*.texinfo&#34;&#xA;  &#34;doc/dir&#34; &#34;doc/*.info&#34; &#34;doc/*.texi&#34; &#34;doc/*.texinfo&#34;&#xA;  &#34;docs/dir&#34; &#34;docs/*.info&#34; &#34;docs/*.texi&#34; &#34;docs/*.texinfo&#34;&#xA;  (:exclude&#xA;   &#34;.dir-locals.el&#34; &#34;lisp/.dir-locals.el&#34;&#xA;   &#34;test.el&#34; &#34;tests.el&#34; &#34;*-test.el&#34; &#34;*-tests.el&#34;&#xA;   &#34;lisp/test.el&#34; &#34;lisp/tests.el&#34; &#34;lisp/*-test.el&#34; &#34;lisp/*-tests.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that elisp in subdirectories is never included by default, so you might find it convenient to keep your package&#39;s elisp in the root of your repository, and separate auxiliary files such as tests into subdirectories to keep packaging simple.&lt;/p&gt; &lt;p&gt;The elements of the &lt;code&gt;:files&lt;/code&gt; list are glob-expanded and processed from left to right to make a list of paths that will be copied into the root of the new package, as if by using &lt;code&gt;cp -R [SRCPATHS] DEST&lt;/code&gt;. This means a directory like &#34;foo/bar&#34; would become &#34;bar&#34; in the new package. To specify a destination subdirectory, use a list element of the form &lt;code&gt;(SUBDIR SRCPATH ...)&lt;/code&gt;. Likewise, to filter out paths expanded earlier in the list, use &lt;code&gt;(:exclude SRCPATH ...)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If your package requires some additional files, but is otherwise fine with the defaults, it&#39;s recommended to use the special element &lt;code&gt;:defaults&lt;/code&gt; as the very first element of the &lt;code&gt;:files&lt;/code&gt; list, which causes the default value shown above to be prepended to the specified file list. For example &lt;code&gt;:files (:defaults &#34;snippets&#34;)&lt;/code&gt; would cause the &#34;snippets&#34; subdir to be copied in addition to the defaults.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:old-names&lt;/code&gt; specifies former names of the package, if any. The value is a list of symbols.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example: Single File Repository&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nonsequitur/smex&#34;&gt;smex&lt;/a&gt; is a repository that contains two files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;README.markdown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smex.el&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since there is only one &lt;code&gt;.el&lt;/code&gt; file, this package only needs the &lt;code&gt;:repo&lt;/code&gt; and &lt;code&gt;:fetcher&lt;/code&gt; specified,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(smex :repo &#34;nonsequitur/smex&#34; :fetcher github)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Multiple Packages in one Repository&lt;/h3&gt; &#xA;&lt;p&gt;Assume we have a repository containing three libraries &lt;code&gt;mypackage.el&lt;/code&gt;, &lt;code&gt;helm-mypackage.el&lt;/code&gt;, and &lt;code&gt;persp-mypackage.el&lt;/code&gt;. The latter two libraries are optional and users who don&#39;t want to use the packages &lt;code&gt;helm&lt;/code&gt; and/or &lt;code&gt;perspective&lt;/code&gt; should not be forced to install them just so they can install &lt;code&gt;mypackage&lt;/code&gt;. These libraries should therefore be distributed as separate packages.&lt;/p&gt; &#xA;&lt;p&gt;The three packages have to be declared in three separate files &lt;code&gt;recipes/mypackage&lt;/code&gt;, &lt;code&gt;recipes/helm-mypackage&lt;/code&gt;, and &lt;code&gt;recipes/persp-mypackage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(mypackage :repo &#34;someuser/mypackage&#34;&#xA;           :fetcher github&#xA;           :files (&#34;mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(helm-mypackage :repo &#34;someuser/mypackage&#34;&#xA;                :fetcher github&#xA;                :files (&#34;helm-mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(persp-mypackage :repo &#34;someuser/mypackage&#34;&#xA;                 :fetcher github&#xA;                 :files (&#34;persp-mypackage.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Multiple Files in Multiple Directories&lt;/h3&gt; &#xA;&lt;p&gt;There are special cases where creation of the package comes from many different sub-directories in the repository and the destination sub-directories need to be explicitly set.&lt;/p&gt; &#xA;&lt;p&gt;Consider the &lt;code&gt;flymake-perlcritic&lt;/code&gt; recipe,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(flymake-perlcritic :repo &#34;illusori/emacs-flymake-perlcritic&#34;&#xA;                    :fetcher github&#xA;                    :files (&#34;*.el&#34; (&#34;bin&#34; &#34;bin/flymake_perlcritic&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will result in a package structure of,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flymake-perlcritic-YYYMMDD&#xA;|-- bin&#xA;|   `-- flymake_perlcritic&#xA;|-- flymake-perlcritic-pkg.el&#xA;`-- flymake-perlcritic.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that specifying an entry in &lt;code&gt;:files&lt;/code&gt; that is a list takes the first element to be the destination directory. These can be embedded further, such as the following---hypothetical---entry for &lt;code&gt;:files&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(&#34;*.el&#34; (&#34;snippets&#34;&#xA;         (&#34;html-mode&#34; &#34;snippets/html-mode/*&#34;)&#xA;         (&#34;python-mode&#34; &#34;snippets/python-mode/*&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which would result in a package with &lt;code&gt;*.el&lt;/code&gt; in something like,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;package-YYYYMMDD&#xA;|-- snippets&#xA;|   |-- html-mode&#xA;|   |   |-- div&#xA;|   |   `-- html&#xA;|   `-- python-mode&#xA;|       |-- for&#xA;|       `-- main&#xA;`-- package.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But a better solution, given that we probably want to copy the &lt;em&gt;entire&lt;/em&gt; &lt;code&gt;snippets&lt;/code&gt; directory to the root of the package, we could just specify that directory. Consider the &lt;code&gt;pony-mode&lt;/code&gt; recipe,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(pony-mode&#xA; :repo &#34;davidmiller/pony-mode&#34;&#xA; :fetcher github&#xA; :files (&#34;src/*.el&#34; &#34;snippets&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which generates the package,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pony-mode-YYYYMMDD&#xA;|-- pony-mode-pkg.el&#xA;|-- pony-mode.el&#xA;|-- pony-tpl.el&#xA;`-- snippets&#xA;    |-- html-mode&#xA;    |   |-- bl&#xA;    |   |-- ex&#xA;    |   |-- for&#xA;    |   |-- if&#xA;    |   |-- loa&#xA;    |   |-- sup&#xA;    |   |-- testc&#xA;    |   `-- {{&#xA;    `-- python-mode&#xA;        |-- auth-view&#xA;        |-- bn&#xA;        |-- model&#xA;        |-- modelform&#xA;        |-- render-to&#xA;        |-- testc&#xA;        `-- view&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Scripts&lt;/h2&gt; &#xA;&lt;p&gt;Building MELPA is all based around using the &lt;code&gt;Makefile&lt;/code&gt; included in the root repository directory. Described below are the actions that accepted by the &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;all&lt;/code&gt; -- Builds all packages under the &lt;code&gt;recipes/&lt;/code&gt; directory and compiles the &lt;code&gt;index.html&lt;/code&gt; file for the &lt;a href=&#34;https://melpa.org&#34;&gt;melpa&lt;/a&gt; website.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes/&amp;lt;NAME&amp;gt;&lt;/code&gt; -- Build individual recipe &lt;code&gt;&amp;lt;NAME&amp;gt;&lt;/code&gt;. Built packages are put in the &lt;code&gt;packages/&lt;/code&gt; folder with version corresponding to the date of the latest commit that modified at least one of the files specified by the recipe; given according to the &lt;code&gt;%Y%m%d&lt;/code&gt; format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;json&lt;/code&gt; -- build all JSON files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;archive.json&lt;/code&gt; -- construct the &lt;code&gt;archive.json&lt;/code&gt; file that will contain a JSON object of all compiled packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;recipes.json&lt;/code&gt; -- construct the &lt;code&gt;recipes.json&lt;/code&gt; file containing a JSON object of all packages available for building.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean&lt;/code&gt; -- clean everything.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;html&lt;/code&gt; -- build &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-working&lt;/code&gt; -- remove all repositories that have been checked out to the &lt;code&gt;working/&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-packages&lt;/code&gt; -- remove all compiled packages from the &lt;code&gt;packages&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;clean-json&lt;/code&gt; -- remove all JSON files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that these scripts require an Emacs with &lt;code&gt;package.el&lt;/code&gt; installed, such as Emacs 24. If you have an older version of Emacs, you can get a suitable &lt;code&gt;package.el&lt;/code&gt; &lt;a href=&#34;https://git.savannah.gnu.org/gitweb/?p=emacs.git;a=blob_plain;hb=ba08b24186711eaeb3748f3d1f23e2c2d9ed0d09;f=lisp/emacs-lisp/package.el&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;All repository code is contained in the file &lt;code&gt;package-build/package-build.el&lt;/code&gt;. That code is maintained in a &lt;a href=&#34;https://github.com/melpa/package-build&#34;&gt;separate repository&lt;/a&gt;: the version in the MELPA repository is imported using &lt;code&gt;git subtree&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-all)&lt;/code&gt; : build packages for all recipes in the directory specified by &lt;code&gt;package-build-recipes-dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(package-build-archive NAME)&lt;/code&gt; : interactive elisp function to build a single archive. NAME is a symbol for the package to be built. Packages are staged in the directory specified by &lt;code&gt;package-build-working-dir&lt;/code&gt; and built packages are placed in the directory specified by &lt;code&gt;package-build-archive-dir&lt;/code&gt;. Packages are versioned based on the most recent commit date to package files based on commits to upstream package repository. For multi-file packages, the file &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt; is automatically generated and contains &lt;em&gt;description&lt;/em&gt;, &lt;em&gt;version&lt;/em&gt;, and &lt;em&gt;requires&lt;/em&gt; information determined by searching &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el&lt;/code&gt;, &lt;code&gt;&amp;lt;NAME&amp;gt;.el&lt;/code&gt;, and &lt;code&gt;&amp;lt;NAME&amp;gt;-pkg.el.in&lt;/code&gt;, if they exist in the repository.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-working-dir&lt;/code&gt; : Staging area containing package repositories and package directories being built.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-archive-dir&lt;/code&gt; : Location to store &lt;code&gt;archive-contents&lt;/code&gt; and any built packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;package-build-recipes-dir&lt;/code&gt; : Directory containing MELPA compatible recipes. See &lt;a href=&#34;https://raw.githubusercontent.com/melpa/melpa/master/#recipe-format&#34;&gt;Recipe Format&lt;/a&gt; section for more details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Packages end up in the &lt;code&gt;packages/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-archive-dir&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;Repositories are checked out to the &lt;code&gt;working/&lt;/code&gt; directory by default. This can be configured using the &lt;code&gt;package-build-working-dir&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;h2&gt;Mirrors&lt;/h2&gt; &#xA;&lt;p&gt;Official mirrors are available (with many thanks to mirrorservice.org) so that if melpa.org is down, packages can still be installed. The following are the HTTP/HTTPS URLs to use in &lt;code&gt;package-archives&lt;/code&gt; for MELPA and MELPA Stable respectively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mirrorservice.org/sites/melpa.org/packages/&#34;&gt;http://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mirrorservice.org/sites/melpa.org/packages/&#34;&gt;https://www.mirrorservice.org/sites/melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&#34;&gt;http://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&#34;&gt;https://www.mirrorservice.org/sites/stable.melpa.org/packages/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only the packages are mirrored, not the web site front-end itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;We are NOT responsible for the contents of any UNOFFICIAL mirror of our packages.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;MELPA&lt;/em&gt; is &lt;em&gt;Milkypostman&#39;s ELPA&lt;/em&gt; or &lt;em&gt;Milkypostman&#39;s Experimental Lisp Package Archive&lt;/em&gt; if you&#39;re not into the whole brevity thing.&lt;/p&gt;</summary>
  </entry>
</feed>