<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-01T02:11:43Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joshcho/ChatGPT.el</title>
    <updated>2023-04-01T02:11:43Z</updated>
    <id>tag:github.com,2023-04-01:/joshcho/ChatGPT.el</id>
    <link href="https://github.com/joshcho/ChatGPT.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT in Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: ChatGPT.el&lt;/p&gt; &#xA;&lt;p&gt;[[https://chat.openai.com/chat][ChatGPT]] in Emacs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=4oUrm4CnIjo][Basic Demo]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.youtube.com/watch?v=1LMlt5Cv4fY][Queue Demo]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** News&lt;/p&gt; &#xA;&lt;p&gt;OpenAI just released its [[https://openai.com/blog/introducing-chatgpt-and-whisper-apis][ChatGPT API]]. ChatGPT.el will incorporate this API soon, stay tuned.&lt;/p&gt; &#xA;&lt;p&gt;** Installation *** Dependency #+begin_src shell pip install sexpdata==0.0.3 pip install epc pip install git+&lt;a href=&#34;https://github.com/mmabrouk/chatgpt-wrapper&#34;&gt;https://github.com/mmabrouk/chatgpt-wrapper&lt;/a&gt; chatgpt install #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This will prompt you to log in with your browser.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: If you encounter any problems, please submit an issue or see [[https://github.com/mmabrouk/chatgpt-wrapper][chatgpt-wrapper]].&lt;/p&gt; &#xA;&lt;p&gt;*** [[https://github.com/radian-software/straight.el][Straight]] #+begin_src emacs-lisp (use-package chatgpt :straight (:host github :repo &#34;joshcho/ChatGPT.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;)) :init (require &#39;python) (setq chatgpt-repo-path &#34;~/.emacs.d/straight/repos/ChatGPT.el/&#34;) :bind (&#34;C-c q&#34; . chatgpt-query)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** [[https://github.com/quelpa/quelpa][Quelpa]] #+begin_src emacs-lisp (require &#39;quelpa-use-package) (use-package chatgpt :quelpa ((chatgpt :fetcher git :url &#34;&lt;a href=&#34;https://github.com/joshcho/ChatGPT.el.git&#34;&gt;https://github.com/joshcho/ChatGPT.el.git&lt;/a&gt;&#34;) :upgrade t) :init (require &#39;python) (setq chatgpt-repo-path (expand-file-name &#34;chatgpt/&#34; quelpa-build-dir)) :bind (&#34;C-c q&#34; . chatgpt-query)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** [[https://www.spacemacs.org/][Spacemacs]]&lt;/p&gt; &#xA;&lt;p&gt;In &lt;del&gt;dotspacemacs/user-config&lt;/del&gt; function, #+begin_src emacs-lisp (require &#39;python) (setq chatgpt-repo-path (expand-file-name &#34;chatgpt/&#34; quelpa-build-dir)) (global-set-key (kbd &#34;C-c q&#34;) #&#39;chatgpt-query) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In &lt;del&gt;dotspacemacs/layers&lt;/del&gt; function for &lt;del&gt;setq-default&lt;/del&gt;, #+begin_src emacs-lisp dotspacemacs-additional-packages &#39;( (chatgpt :location (recipe :fetcher github :repo &#34;joshcho/ChatGPT.el&#34;)) ;; other additional packages... ) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Assumes Quelpa installation.&lt;/p&gt; &#xA;&lt;p&gt;*** [[https://github.com/doomemacs/doomemacs][Doom Emacs]]&lt;/p&gt; &#xA;&lt;p&gt;In &lt;del&gt;packages.el&lt;/del&gt; , #+begin_src emacs-lisp (package! chatgpt :recipe (:host github :repo &#34;joshcho/ChatGPT.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In &lt;del&gt;config.el&lt;/del&gt; , #+begin_src emacs-lisp (use-package! chatgpt :defer t :config (unless (boundp &#39;python-interpreter) (defvaralias &#39;python-interpreter &#39;python-shell-interpreter)) (setq chatgpt-repo-path (expand-file-name &#34;straight/repos/ChatGPT.el/&#34; doom-local-dir)) (set-popup-rule! (regexp-quote &#34;&lt;em&gt;ChatGPT&lt;/em&gt;&#34;) :side &#39;bottom :size .5 :ttl nil :quit t :modeline nil) :bind (&#34;C-c q&#34; . chatgpt-query)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press &lt;del&gt;C-c q&lt;/del&gt; to query ChatGPT.&lt;/li&gt; &#xA; &lt;li&gt;Select region, then &lt;del&gt;C-c q&lt;/del&gt; will prompt you to select a type: doc, bug, understand, or improve. Select a type to query ChatGPT with that prompt.&lt;/li&gt; &#xA; &lt;li&gt;Try making queries in quick succession.&lt;/li&gt; &#xA; &lt;li&gt;If your login is expired, try #+begin_src sh pkill ms-playwright/firefox &amp;amp;&amp;amp; chatgpt install #+end_src in the shell.&lt;/li&gt; &#xA; &lt;li&gt;To reset your conversation, try M-x chatgpt-reset.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Troubleshooting&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For most scenarios, the reliable method is &lt;del&gt;pkill ms-playwright/firefox &amp;amp;&amp;amp; chatgpt install&lt;/del&gt; to reauthenticate yourself.&lt;/li&gt; &#xA; &lt;li&gt;Also try M-x chatgpt-reset.&lt;/li&gt; &#xA; &lt;li&gt;If for some reason the ellipses keep blinking, try M-x chatgpt-stop.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have python installed, and &lt;del&gt;python-interpreter&lt;/del&gt; is set (most likely set it to &#34;python&#34; or &#34;python3&#34;).&lt;/li&gt; &#xA; &lt;li&gt;If none of these methods work, please submit an [[https://github.com/joshcho/ChatGPT.el/issues/new][issue]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Customization Customize &lt;del&gt;chatgpt-query-format-string-map&lt;/del&gt; for your own types.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq chatgpt-query-format-string-map &#39;( ;; ChatGPT.el defaults (&#34;doc&#34; . &#34;Please write the documentation for the following function.\n\n%s&#34;) (&#34;bug&#34; . &#34;There is a bug in the following function, please help me fix it.\n\n%s&#34;) (&#34;understand&#34; . &#34;What does the following function do?\n\n%s&#34;) (&#34;improve&#34; . &#34;Please improve the following code.\n\n%s&#34;) ;; your new prompt (&#34;my-custom-type&#34; . &#34;My custom prompt.\n\n%s&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Misc.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t use &#34;custom&#34; as a type. It&#39;s reserved for custom prepend string through minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;See [[https://github.com/suonlight/ob-chatgpt][ob-chatgpt]] which builds on top of ChatGPT.el.&lt;/li&gt; &#xA; &lt;li&gt;Check out [[https://github.com/semiosis/pen.el][Pen.el]]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>minad/org-modern</title>
    <updated>2023-04-01T02:11:43Z</updated>
    <id>tag:github.com,2023-04-01:/minad/org-modern</id>
    <link href="https://github.com/minad/org-modern" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ¦„ Modern Org Style&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Modern Org Style #+author: Daniel Mendler #+language: en #+export_file_name: org-modern.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Org-Modern: (org-modern). #+texinfo_dir_desc: Modern Org Style&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/packages/org-modern.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/org-modern.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/devel/org-modern.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/org-modern.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/org-modern&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/org-modern-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/org-modern&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/org-modern-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package implements a &#34;modern&#34; style for your Org buffers using font locking and text properties. The package styles headlines, keywords, tables and source blocks. The styling is configurable, you can enable, disable or modify the style of each syntax element individually via the =org-modern= customization group.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/org-modern/blob/screenshots/example.gif?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;The screenshots shows [[file:example.org][example.org]] with =org-modern-mode= turned on and off. The elegant theme featured in the screenshot is [[https://protesilaos.com/emacs/modus-themes][modus-operandi]].&lt;/p&gt; &#xA;&lt;p&gt;Since this package adjusts text styling, it depends on your font settings. You should ensure that your =variable-pitch= and =fixed-pitch= fonts combine harmonically and have approximately the same height. =org-modern-mode= tries to adjust the tag label display based on the value of =line-spacing=. This looks best if =line-spacing= has a value between 0.1 and 0.4 in the Org buffer. Note that =org-indent-mode= interferes with some of the style elements applied by =org-modern-mode=, e.g., the block brackets in the fringe.&lt;/p&gt; &#xA;&lt;p&gt;Bug reports, improvement or style proposals are welcome! Maybe some more Org elements deserve styling or alternative styles should be offered?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The package is available on GNU ELPA and MELPA. You can install the package with =package-install=. Then =org-modern= can be enabled manually in an Org buffer by invoking =M-x org-modern-mode=. In order to enable =org-modern= for all your Org buffers, add =org-modern-mode= to the Org mode hooks.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Option 1: Per buffer (add-hook &#39;org-mode-hook #&#39;org-modern-mode) (add-hook &#39;org-agenda-finalize-hook #&#39;org-modern-agenda)&lt;/p&gt; &#xA;&lt;p&gt;;; Option 2: Globally (global-org-modern-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Try the following more extensive setup in =emacs -Q= to reproduce the looks of the screenshot above.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Minimal UI (package-initialize) (menu-bar-mode -1) (tool-bar-mode -1) (scroll-bar-mode -1) (modus-themes-load-operandi)&lt;/p&gt; &#xA;&lt;p&gt;;; Choose some fonts ;; (set-face-attribute &#39;default nil :family &#34;Iosevka&#34;) ;; (set-face-attribute &#39;variable-pitch nil :family &#34;Iosevka Aile&#34;) ;; (set-face-attribute &#39;org-modern-symbol nil :family &#34;Iosevka&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; Add frame borders and window dividers (modify-all-frames-parameters &#39;((right-divider-width . 40) (internal-border-width . 40))) (dolist (face &#39;(window-divider window-divider-first-pixel window-divider-last-pixel)) (face-spec-reset-face face) (set-face-foreground face (face-attribute &#39;default :background))) (set-face-background &#39;fringe (face-attribute &#39;default :background))&lt;/p&gt; &#xA;&lt;p&gt;(setq ;; Edit settings org-auto-align-tags nil org-tags-column 0 org-catch-invisible-edits &#39;show-and-error org-special-ctrl-a/e t org-insert-heading-respect-content t&lt;/p&gt; &#xA;&lt;p&gt;;; Org styling, hide markup etc. org-hide-emphasis-markers t org-pretty-entities t org-ellipsis &#34;â€¦&#34;&lt;/p&gt; &#xA;&lt;p&gt;;; Agenda styling org-agenda-tags-column 0 org-agenda-block-separator ?â”€ org-agenda-time-grid &#39;((daily today require-timed) (800 1000 1200 1400 1600 1800 2000) &#34; â”„â”„â”„â”„â”„ &#34; &#34;â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„â”„&#34;) org-agenda-current-time-string &#34;â­  now â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(global-org-modern-mode) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The tag style of =org-modern= is inspired by Nicholas Rougier&#39;s beautiful [[https://github.com/rougier/svg-tag-mode][svg-tag-mode]]. In contrast to =svg-tag-mode=, this package avoids images and uses cheap and fast Emacs box text properties. By only styling the text via text properties, the styled text, e.g., dates or tags stay editable and are easy to interact with.&lt;/p&gt; &#xA;&lt;p&gt;On the downside, this restricts our flexibility and may lead to font-dependent issues. We do our best, but for example there is no way we can get round corners. Combining =org-modern-mode= with =svg-tag-mode= is possible. You can use SVG tags and use the table and block styling from =org-modern=. If you are interested in further tweaks, Emacs comes with the builtin =prettify-symbols-mode= which can be used for individual styling of custom keywords.&lt;/p&gt; &#xA;&lt;p&gt;Popular alternatives are the older =org-superstar= and =org-bullets= packages, which have are more limited and mainly adjust headlines and lists. =org-superstar= relies on character composition, while =org-modern= uses text properties, which are considered more future-proof.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[https://elpa.gnu.org/packages/org-modern.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>skeeto/elfeed</title>
    <updated>2023-04-01T02:11:43Z</updated>
    <id>tag:github.com,2023-04-01:/skeeto/elfeed</id>
    <link href="https://github.com/skeeto/elfeed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs web feeds client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elfeed Emacs Web Feed Reader&lt;/h1&gt; &#xA;&lt;p&gt;Elfeed is an extensible web feed reader for Emacs, supporting both Atom and RSS. It requires Emacs 24.3 and is available for download from &lt;a href=&#34;http://melpa.milkbox.net/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;. Elfeed was inspired by &lt;a href=&#34;http://notmuchmail.org/&#34;&gt;notmuch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a longer overview,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nullprogram.com/blog/2013/09/04/&#34;&gt;Introducing Elfeed, an Emacs Web Feed Reader&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nullprogram.com/blog/2013/11/26/&#34;&gt;Tips and Tricks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/&#34;&gt;Read your RSS feeds in Emacs with Elfeed &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://kitchingroup.cheme.cmu.edu/blog/2017/01/05/Scoring-elfeed-articles/&#34;&gt;Scoring Elfeed articles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pOFqzK1Ymr4&#34;&gt;Using Emacs 29&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=tjnK1rkO7RU&#34;&gt;30&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=5zuSUbAHH8c&#34;&gt;31&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://babbagefiles.blogspot.com/2017/03/take-elfeed-everywhere-mobile-rss.html&#34;&gt;Take Elfeed everywhere: Mobile rss reading Emacs-style (for free/cheap)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://noonker.github.io/posts/2020-04-22-elfeed/&#34;&gt;Elfeed Rules!&lt;/a&gt; (&lt;a href=&#34;https://old.reddit.com/r/emacs/comments/g6oowz/elfeed_rules/&#34;&gt;reddit&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codingquark.com/emacs/2020/04/19/elfeed-protocol-ttrss.html&#34;&gt;Elfeed with Tiny Tiny RSS&lt;/a&gt; (&lt;a href=&#34;https://news.ycombinator.com/item?id=22915200&#34;&gt;hn&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://xenodium.com/open-emacs-elfeed-links-in-background/&#34;&gt;Open Emacs elfeed links in the background&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cestlaz.github.io/post/using-emacs-72-customizing-elfeed/&#34;&gt;Using Emacs 72&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://karthinks.com/blog/lazy-elfeed/&#34;&gt;Lazy Elfeed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://joshrollinswrites.com/help-desk-head-desk/20200611/&#34;&gt;Using Elfeed to View Videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://protesilaos.com/codelog/2020-09-11-emacs-elfeed-bongo/&#34;&gt;Manage podcasts in Emacs with Elfeed and Bongo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nullprogram.com/tags/elfeed/&#34;&gt;... more ...&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pragmaticemacs.com/category/elfeed/&#34;&gt;... and more ...&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/kxgF5AH.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/kxgF5AH.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The database format is stable and is never expected to change.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;It is &lt;em&gt;strongly&lt;/em&gt; recommended you have cURL installed&lt;/strong&gt;, either in your PATH or configured via &lt;code&gt;elfeed-curl-program-name&lt;/code&gt;. Elfeed will prefer it to Emacs&#39; own URL-fetching mechanism, &lt;code&gt;url-retrieve&lt;/code&gt;. It&#39;s also essential for running Elfeed on Windows, where &lt;code&gt;url-retrieve&lt;/code&gt; is broken. Updates using cURL are significantly faster than the built-in method, both for you and the feed hosts.&lt;/p&gt; &#xA;&lt;p&gt;If this is giving you problems, fetching with cURL can be disabled by setting &lt;code&gt;elfeed-use-curl&lt;/code&gt; to nil.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;These projects extend Elfeed with additional features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remyhonig/elfeed-org&#34;&gt;elfeed-org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/algernon/elfeed-goodies&#34;&gt;elfeed-goodies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fasheng/elfeed-protocol&#34;&gt;elfeed-protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sp1ff/elfeed-score&#34;&gt;elfeed-score&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/areina/elfeed-cljsrn&#34;&gt;Elfeed Android interface&lt;/a&gt; (&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.elfeedcljsrn&#34;&gt;Google Play&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Manoj321/elfeed-dashboard&#34;&gt;elfeed-dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Elfeed is broken into a multiple source files, so if you manually install it you will need to add the Elfeed package directory to your &lt;code&gt;load-path&lt;/code&gt;. If installed via package.el or el-get, this will be done automatically.&lt;/p&gt; &#xA;&lt;p&gt;It is recommended that you make a global binding for &lt;code&gt;elfeed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(global-set-key (kbd &#34;C-x w&#34;) &#39;elfeed)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running the interactive function &lt;code&gt;elfeed&lt;/code&gt; will pop up the &lt;code&gt;*elfeed-search*&lt;/code&gt; buffer, which will display feed items.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;g&lt;/kbd&gt;: refresh view of the feed listing&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;G&lt;/kbd&gt;: fetch feed updates from the servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;s&lt;/kbd&gt;: update the search filter (see tags)&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;c&lt;/kbd&gt;: clear the search filter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This buffer will be empty until you add your feeds to the &lt;code&gt;elfeed-feeds&lt;/code&gt; list and initiate an update with &lt;code&gt;M-x elfeed-update&lt;/code&gt; (or &lt;kbd&gt;G&lt;/kbd&gt; in the Elfeed buffer). This will populate the Elfeed database with entries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;;; Somewhere in your .emacs file&#xA;(setq elfeed-feeds&#xA;      &#39;(&#34;http://nullprogram.com/feed/&#34;&#xA;        &#34;https://planet.emacslife.com/atom.xml&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option for providing a feed list is with an OPML file. Running &lt;code&gt;M-x elfeed-load-opml&lt;/code&gt; will fill &lt;code&gt;elfeed-feeds&lt;/code&gt; with feeds listed in an OPML file. When &lt;code&gt;elfeed-load-opml&lt;/code&gt; is called interactively, it will automatically save the feedlist to your customization file, so you will only need to do this once.&lt;/p&gt; &#xA;&lt;p&gt;If there are a lot of feeds, the initial update will take noticeably longer than normal operation because of the large amount of information being written the database. Future updates will only need to write new or changed data. If updating feeds slows down Emacs too much for you, reduce the number of concurrent fetches via &lt;code&gt;elfeed-set-max-connections&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re getting many &#34;Queue timeout exceeded&#34; errors, increase the fetch timeout via &lt;code&gt;elfeed-set-timeout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(setf url-queue-timeout 30)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the search buffer there are a number of ways to interact with entries. Entries are selected by placing the point over an entry. Multiple entries are selected at once by using an active region.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;RET&lt;/kbd&gt;: view selected entry in a buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;b&lt;/kbd&gt;: open selected entries in your browser (&lt;code&gt;browse-url&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;y&lt;/kbd&gt;: copy selected entries URL to the clipboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;r&lt;/kbd&gt;: mark selected entries as read&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;u&lt;/kbd&gt;: mark selected entries as unread&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;+&lt;/kbd&gt;: add a specific tag to selected entries&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;-&lt;/kbd&gt;: remove a specific tag from selected entries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tags&lt;/h2&gt; &#xA;&lt;p&gt;Elfeed maintains a list of arbitrary tags -- symbols attached to an entry. The tag &lt;code&gt;unread&lt;/code&gt; is treated specially by default, with unread entries appearing in bold.&lt;/p&gt; &#xA;&lt;h3&gt;Autotagging&lt;/h3&gt; &#xA;&lt;p&gt;Tags can automatically be applied to entries discovered in specific feeds through extra syntax in &lt;code&gt;elfeed-feeds&lt;/code&gt;. Normally this is a list of strings, but an item can also be a list, providing set of &#34;autotags&#34; for a feed&#39;s entries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(setq elfeed-feeds&#xA;      &#39;((&#34;http://nullprogram.com/feed/&#34; blog emacs)&#xA;        &#34;http://www.50ply.com/atom.xml&#34;  ; no autotagging&#xA;        (&#34;http://nedroid.com/feed/&#34; webcomic)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filter Syntax&lt;/h3&gt; &#xA;&lt;p&gt;To make tags useful, the Elfeed entry listing buffer can be filtered by tags. Use &lt;code&gt;elfeed-search-set-filter&lt;/code&gt; (or &lt;kbd&gt;s&lt;/kbd&gt;) to update the filter. Use &lt;code&gt;elfeed-search-clear-filter&lt;/code&gt; to restore the default.&lt;/p&gt; &#xA;&lt;p&gt;Any component of the search string beginning with a &lt;code&gt;+&lt;/code&gt; or a &lt;code&gt;-&lt;/code&gt; is treated like a tag. &lt;code&gt;+&lt;/code&gt; means the tag is required, &lt;code&gt;-&lt;/code&gt; means the tag must not be present.&lt;/p&gt; &#xA;&lt;p&gt;A component beginning with a &lt;code&gt;@&lt;/code&gt; indicates an age or a date range. An age is a relative time expression or an absolute date expression. Entries older than this age are filtered out. The age description accepts plain English, but cannot have spaces, so use dashes. For example, &lt;code&gt;&#34;@2-years-old&#34;&lt;/code&gt;, &lt;code&gt;&#34;@3-days-ago&#34;&lt;/code&gt; or &lt;code&gt;&#34;@2019-06-24&#34;&lt;/code&gt;. A date range are two ages seperated by a &lt;code&gt;--&lt;/code&gt;, e.g. &lt;code&gt;&#34;@2019-06-20--2019-06-24&#34;&lt;/code&gt; or &lt;code&gt;&#34;@5-days-ago--1-day-ago&#34;&lt;/code&gt;. The entry must be newer than the first expression but older than the second. The database is date-oriented, so &lt;strong&gt;filters that include an age restriction are significantly more efficient.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A component beginning with a &lt;code&gt;!&lt;/code&gt; is treated as an &#34;inverse&#34; regular expression. This means that any entry matching this regular expression will be filtered out. The regular expression begins &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;!&lt;/code&gt; character. You can read this as &#34;entry not matching &lt;code&gt;foo&lt;/code&gt;&#34;.&lt;/p&gt; &#xA;&lt;p&gt;A component beginning with a &lt;code&gt;#&lt;/code&gt; limits the total number of entries displayed to the number immediately following the symbol. For example, to limit the display to 20 entries: &lt;code&gt;#20&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A component beginning with a &lt;code&gt;=&lt;/code&gt; is a regular expression matching the entry&#39;s feed (title or URL). Only entries belonging to a feed that matches at least one of the &lt;code&gt;=&lt;/code&gt; expressions will be shown.&lt;/p&gt; &#xA;&lt;p&gt;A component beginning with a &lt;code&gt;~&lt;/code&gt; is a regular expression matching the entry&#39;s feed (title or URL). Only entries belonging to a feed that matches none of the &lt;code&gt;~&lt;/code&gt; expressions will be shown.&lt;/p&gt; &#xA;&lt;p&gt;All other components are treated as a regular expression, and only entries matching it (title or URL) will be shown.&lt;/p&gt; &#xA;&lt;p&gt;Here are some example filters.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@6-months-ago +unread&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only show unread entries of the last six months. This is the default filter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;linu[xs] @1-year-old&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only show entries about Linux or Linus from the last year.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-unread +youtube #10&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only show the most recent 10 previously-read entries tagged as &lt;code&gt;youtube&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;+unread !x?emacs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only show unread entries not having &lt;code&gt;emacs&lt;/code&gt; or &lt;code&gt;xemacs&lt;/code&gt; in the title or link.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;+emacs =http://example.org/feed/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only show entries tagged as &lt;code&gt;emacs&lt;/code&gt; from a specific feed.&lt;/p&gt; &#xA;&lt;h4&gt;Default Search Filter&lt;/h4&gt; &#xA;&lt;p&gt;You can set your default search filter by changing the default value of &lt;code&gt;elfeed-search-filter&lt;/code&gt;. It only changes buffer-locally when you&#39;re adjusting the filter within Elfeed. For example, some users prefer to have a space on the end for easier quick searching.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq-default elfeed-search-filter &#34;@1-week-ago +unread &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tag Hooks&lt;/h3&gt; &#xA;&lt;p&gt;The last example assumes you&#39;ve tagged posts with &lt;code&gt;youtube&lt;/code&gt;. You probably want to do this sort of thing automatically, either through the &#34;autotags&#34; feature mentioned above, or with the &lt;code&gt;elfeed-new-entry-hook&lt;/code&gt;. Functions in this hook are called with new entries, allowing them to be manipulated, such as adding tags.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;;; Mark all YouTube entries&#xA;(add-hook &#39;elfeed-new-entry-hook&#xA;          (elfeed-make-tagger :feed-url &#34;youtube\\.com&#34;&#xA;                              :add &#39;(video youtube)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Avoiding tagging old entries as &lt;code&gt;unread&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;;; Entries older than 2 weeks are marked as read&#xA;(add-hook &#39;elfeed-new-entry-hook&#xA;          (elfeed-make-tagger :before &#34;2 weeks ago&#34;&#xA;                              :remove &#39;unread))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or building your own subset feeds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-hook &#39;elfeed-new-entry-hook&#xA;          (elfeed-make-tagger :feed-url &#34;example\\.com&#34;&#xA;                              :entry-title &#39;(not &#34;something interesting&#34;)&#xA;                              :add &#39;junk&#xA;                              :remove &#39;unread))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;M-x elfeed-apply-hooks-now&lt;/code&gt; to apply &lt;code&gt;elfeed-new-entry-hook&lt;/code&gt; to all existing entries. Otherwise hooks will only apply to new entries on discovery.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Tag Faces&lt;/h3&gt; &#xA;&lt;p&gt;By default, entries marked &lt;code&gt;unread&lt;/code&gt; will have bolded titles in the &lt;code&gt;*elfeed-search*&lt;/code&gt; listing. You can customize how tags affect an entry&#39;s appearance by customizing &lt;code&gt;elfeed-search-face-alist&lt;/code&gt;. For example, this configuration makes entries tagged &lt;code&gt;important&lt;/code&gt; stand out in red.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(defface important-elfeed-entry&#xA;  &#39;((t :foreground &#34;#f77&#34;))&#xA;  &#34;Marks an important Elfeed entry.&#34;)&#xA;&#xA;(push &#39;(important important-elfeed-entry)&#xA;      elfeed-search-face-alist)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All faces from all tags will be applied to the entry title. The faces will be ordered as they appear in &lt;code&gt;elfeed-search-face-alist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bookmarks&lt;/h2&gt; &#xA;&lt;p&gt;Filters can be saved and restored using Emacs&#39; built-in &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html&#34;&gt;bookmarks feature&lt;/a&gt;. While in the search buffer, use &lt;code&gt;M-x bookmark-set&lt;/code&gt; to save the current filter, and &lt;code&gt;M-x bookmark-jump&lt;/code&gt; to restore a saved filter. Emacs automatically persists bookmarks across sessions.&lt;/p&gt; &#xA;&lt;h2&gt;Metadata Plist&lt;/h2&gt; &#xA;&lt;p&gt;All feed and entry objects have plist where you can store your own arbitrary, &lt;a href=&#34;http://nullprogram.com/blog/2013/12/30/&#34;&gt;readable values&lt;/a&gt;. These values are automatically persisted in the database. This metadata is accessed using the polymorphic &lt;code&gt;elfeed-meta&lt;/code&gt; function. It&#39;s setf-able.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(setf (elfeed-meta entry :rating) 4)&#xA;(elfeed-meta entry :rating)&#xA;;; =&amp;gt; 4&#xA;&#xA;(setf (elfeed-meta feed :title) &#34;My Better Title&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Elfeed itself adds some entries to this plist, some for your use, some for its own use. Here are the properties that Elfeed uses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:authors&lt;/code&gt; : A list of author plists (&lt;code&gt;:name&lt;/code&gt;, &lt;code&gt;:uri&lt;/code&gt;, &lt;code&gt;:email&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:canonical-url&lt;/code&gt; : The final URL for the feed after all redirects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:categories&lt;/code&gt; : The feed-supplied categories for this entry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:etag&lt;/code&gt; : HTTP Etag header, for conditional GETs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:failures&lt;/code&gt; : Number of times this feed has failed to update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:last-modified&lt;/code&gt; : HTTP Last-Modified header, for conditional GETs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:title&lt;/code&gt; : Overrides the feed-supplied title for display purposes, both for feeds and entries. See also &lt;code&gt;elfeed-search-set-feed-title&lt;/code&gt; and &lt;code&gt;elfeed-search-set-entry-title&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This list will grow in time, so you might consider namespacing your own properties to avoid collisions (e.g. &lt;code&gt;:xyz/rating&lt;/code&gt;), or simply not using keywords as keys. Elfeed will always use keywords without a slash.&lt;/p&gt; &#xA;&lt;h2&gt;Hooks&lt;/h2&gt; &#xA;&lt;p&gt;A number of hooks are available to customize the behavior of Elfeed at key points without resorting to advice.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;elfeed-new-entry-hook&lt;/code&gt; : Called each time a new entry it added to the database, allowing for automating tagging and such.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elfeed-new-entry-parse-hook&lt;/code&gt; : Called with each new entry and the full XML structure from which it was parsed, allowing for additional information to be drawn from the original feed XML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elfeed-http-error-hooks&lt;/code&gt; : Allows for special behavior when HTTP errors occur, beyond simply logging the error to &lt;code&gt;*elfeed-log*&lt;/code&gt; .&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elfeed-parse-error-hooks&lt;/code&gt; : Allows for special behavior when feed parsing fails, beyond logging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elfeed-db-update-hook&lt;/code&gt; : Called any time the database has had a major modification.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Viewing Entries&lt;/h2&gt; &#xA;&lt;p&gt;Entries are viewed locally in Emacs by typing &lt;code&gt;RET&lt;/code&gt; while over an entry in the search listing. The content will be displayed in a separate buffer using &lt;code&gt;elfeed-show-mode&lt;/code&gt;, rendered using Emacs&#39; built-in shr package. This requires an Emacs compiled with &lt;code&gt;libxml2&lt;/code&gt; bindings, which provides the necessary HTML parser.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes displaying images can slow down or even crash Emacs. Set &lt;code&gt;shr-inhibit-images&lt;/code&gt; to disable images if this is a problem.&lt;/p&gt; &#xA;&lt;h2&gt;Web Interface&lt;/h2&gt; &#xA;&lt;p&gt;Elfeed includes a demonstration/toy web interface for remote network access. It&#39;s a single-page web application that follows the database live as new entries arrive. It&#39;s packaged separately as &lt;code&gt;elfeed-web&lt;/code&gt;. To fire it up, run &lt;code&gt;M-x elfeed-web-start&lt;/code&gt; and visit &lt;a href=&#34;http://localhost:8080/elfeed/&#34;&gt;http://localhost:8080/elfeed/&lt;/a&gt; (check your &lt;code&gt;httpd-port&lt;/code&gt;) with a browser. See the &lt;code&gt;elfeed-web.el&lt;/code&gt; header for endpoint documentation if you&#39;d like to access the Elfeed database through the web API.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s rough and unfinished -- no keyboard shortcuts, read-only, no authentication, and a narrow entry viewer. This is basically Elfeed&#39;s &#34;mobile&#34; interface. Patches welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Support&lt;/h2&gt; &#xA;&lt;p&gt;Summary: Install cURL and most problems disappear for all platforms.&lt;/p&gt; &#xA;&lt;p&gt;I personally only use Elfeed on Linux, but it&#39;s occasionally tested on Windows. Unfortunately the Windows port of Emacs is a bit too unstable for parallel feed downloads with &lt;code&gt;url-retrieve&lt;/code&gt;, not to mention the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/kdfaxaay%28vs.71%29.aspx&#34;&gt;tiny, hard-coded, 512 open descriptor limitation&lt;/a&gt;, so it limits itself to one feed at a time on this platform.&lt;/p&gt; &#xA;&lt;p&gt;If you fetch HTTPS feeds without cURL on &lt;em&gt;any&lt;/em&gt; platform, it&#39;s essential that Emacs is built with the &lt;code&gt;--with-gnutls&lt;/code&gt; option. Otherwise Emacs runs gnutls in an inferior process, which rarely works well.&lt;/p&gt; &#xA;&lt;h2&gt;Database Management&lt;/h2&gt; &#xA;&lt;p&gt;The database should keep itself under control without any manual intervention, but steps can be taken to minimize the database size if desired. The simplest option is to run the &lt;code&gt;elfeed-db-compact&lt;/code&gt; command, which will pack the loose-file content database into a single compressed file. This function works well in &lt;code&gt;kill-emacs-hook&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Going further, a function could be added to &lt;code&gt;elfeed-new-entry-hook&lt;/code&gt; to strip unwanted/unneeded content from select entries before being stored in the database. For example, for YouTube videos only the entry link is of interest and the regularly-changing entry content could be tossed to save time and storage.&lt;/p&gt; &#xA;&lt;h2&gt;Status and Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Elfeed is to the point where it can serve 100% of my own web feed needs. My personal selection of about 150 feeds has been acting as my test case as I optimize and add features.&lt;/p&gt; &#xA;&lt;p&gt;Some things I still might want to add:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Database synchronization between computers&lt;/li&gt; &#xA; &lt;li&gt;Parallel feed fetching via separate Emacs subprocesses&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;As far as I know, outside of Elfeed there does not exist an extensible, text-file configured, power-user web feed client that can handle a reasonable number of feeds. The existing clients I&#39;ve tried are missing some important capability that limits its usefulness to me.&lt;/p&gt;</summary>
  </entry>
</feed>