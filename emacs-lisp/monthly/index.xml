<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:50:08Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>purcell/emacs.d</title>
    <updated>2022-09-01T01:50:08Z</updated>
    <id>tag:github.com,2022-09-01:/purcell/emacs.d</id>
    <link href="https://github.com/purcell/emacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs configuration bundle with batteries included&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/purcell/emacs.d/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/emacs.d/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;A reasonable Emacs config&lt;/h1&gt; &#xA;&lt;p&gt;This is my emacs configuration tree, continually used and tweaked since 2000, and it may be a good starting point for other Emacs users, especially web developers. These days it&#39;s somewhat geared towards OS X, but it is known to also work on Linux and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Emacs itself comes with support for many programming languages. This config adds improved defaults and extended support for the following, listed in the approximate order of how much I use them, from most to least:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Haskell / Purescript / Elm / OCaml&lt;/li&gt; &#xA; &lt;li&gt;Ruby / Ruby on Rails&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;CSS / LESS / SASS / SCSS&lt;/li&gt; &#xA; &lt;li&gt;Javascript / Typescript / Coffeescript&lt;/li&gt; &#xA; &lt;li&gt;HTML / HAML / Markdown / Textile / ERB&lt;/li&gt; &#xA; &lt;li&gt;Common Lisp (with Slime)&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Clojure (with Cider and nRepl)&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Erlang&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In particular, there&#39;s a nice config for &lt;em&gt;autocompletion&lt;/em&gt; with &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;, and &lt;code&gt;flymake&lt;/code&gt; (re-using backends from &lt;a href=&#34;http://www.flycheck.org&#34;&gt;flycheck&lt;/a&gt;) is used to immediately highlight syntax errors in Ruby, Python, Javascript, Haskell and a number of other languages.&lt;/p&gt; &#xA;&lt;p&gt;LSP support is provided using &lt;code&gt;eglot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Emacs versions&lt;/h2&gt; &#xA;&lt;p&gt;Use the latest released Emacs version available to you. The author typically uses the latest stable version.&lt;/p&gt; &#xA;&lt;p&gt;The config should run on Emacs 26.1 or greater and is designed to degrade smoothly - see the CI build - but even basic enhancements like completion may be unavailable if your Emacs is too old.&lt;/p&gt; &#xA;&lt;p&gt;Some Windows users might need to follow &lt;a href=&#34;http://xn--9dbdkw.se/diary/how_to_enable_GnuTLS_for_Emacs_24_on_Windows/index.en.html&#34;&gt;these instructions&lt;/a&gt; to get TLS (ie. SSL) support included in their Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Other requirements&lt;/h2&gt; &#xA;&lt;p&gt;To make the most of the programming language-specific support in this config, further programs will likely be required, particularly those that &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; uses to provide on-the-fly syntax checking.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install, clone this repo to &lt;code&gt;~/.emacs.d&lt;/code&gt;, i.e. ensure that the &lt;code&gt;init.el&lt;/code&gt; contained in this repo ends up at &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/purcell/emacs.d.git ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon starting up Emacs for the first time, further third-party packages will be automatically downloaded and installed. If you encounter any errors at that stage, try restarting Emacs, and possibly running &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; before doing so.&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;Update the config with &lt;code&gt;git pull&lt;/code&gt;. You&#39;ll probably also want/need to update the third-party packages regularly too, because that&#39;s what I do, and the config assumes it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-list-packages&lt;/kbd&gt;, then &lt;kbd&gt;U&lt;/kbd&gt; followed by &lt;kbd&gt;x&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should usually restart Emacs after pulling changes or updating packages so that they can take effect. Emacs should usually restore your working buffers when you restart due to this configuration&#39;s use of the &lt;code&gt;desktop&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt; packages.&lt;/p&gt; &#xA;&lt;h2&gt;Changing themes and adding your own customization&lt;/h2&gt; &#xA;&lt;p&gt;To add your own customization, use &lt;kbd&gt;M-x customize&lt;/kbd&gt;, &lt;kbd&gt;M-x customize-themes&lt;/kbd&gt; etc. and/or create a file &lt;code&gt;~/.emacs.d/lisp/init-local.el&lt;/code&gt; which looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;... your code here ...&#xA;&#xA;(provide &#39;init-local)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need initialisation code which executes earlier in the startup process, you can also create an &lt;code&gt;~/.emacs.d/lisp/init-preload-local.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to customize things more extensively, you should probably just fork the repo and hack away at the config to make it your own! Remember to regularly merge in changes from this repo, so that your config remains compatible with the latest package and Emacs versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that I cannot provide support for customised versions of this configuration.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support / issues&lt;/h2&gt; &#xA;&lt;p&gt;If you hit any problems, please first ensure that you are using the latest version of this code, and that you have updated your packages to the most recent available versions (see &#34;Updates&#34; above). If you still experience problems, go ahead and &lt;a href=&#34;https://github.com/purcell/emacs.d&#34;&gt;file an issue on the github project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;-Steve Purcell&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;üíù Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;üíº LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;‚úç sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;üê¶ @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pashky/restclient.el</title>
    <updated>2022-09-01T01:50:08Z</updated>
    <id>tag:github.com,2022-09-01:/pashky/restclient.el</id>
    <link href="https://github.com/pashky/restclient.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP REST client tool for emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;restclient.el&lt;/h1&gt; &#xA;&lt;p&gt;This is a tool to manually explore and test HTTP REST webservices. Runs queries from a plain-text query sheet, displays results as a pretty-printed XML, JSON and even images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/QtCID.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;You can easily install &lt;code&gt;restclient&lt;/code&gt; using &lt;code&gt;package.el&lt;/code&gt; from &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, deploy &lt;code&gt;restclient.el&lt;/code&gt; into your site-lisp as usual, then add &lt;code&gt;(require &#39;restclient)&lt;/code&gt; to your Emacs start-up file.&lt;/p&gt; &#xA;&lt;p&gt;Once installed, you can prepare a text file with queries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;restclient-mode&lt;/code&gt; is a major mode which does a bit of highlighting and supports a few additional keypresses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-c&lt;/code&gt;: runs the query under the cursor, tries to pretty-print the response (if possible)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-r&lt;/code&gt;: same, but doesn&#39;t do anything with the response, just shows the buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-v&lt;/code&gt;: same as &lt;code&gt;C-c C-c&lt;/code&gt;, but doesn&#39;t switch focus to other window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: jump to the previous query&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-n&lt;/code&gt;: jump to the next query&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-.&lt;/code&gt;: mark the query under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-u&lt;/code&gt;: copy query under the cursor as a curl command&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-g&lt;/code&gt;: start a &lt;a href=&#34;https://emacs-helm.github.io/helm/&#34;&gt;helm&lt;/a&gt; session with sources for variables and requests (if helm is available, of course)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c n n&lt;/code&gt;: narrow to region of current request (including headers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TAB&lt;/code&gt;: hide/show current request body, only if&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-a&lt;/code&gt;: show all collapsed regions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-i&lt;/code&gt;: show information on resclient variables at point&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The last two functions are implemented as &lt;code&gt;restclient-outline-mode&lt;/code&gt; minor mode, which is activated by default via hook for major mode. Remove this hook using &lt;code&gt;(remove-hook &#39;restclient-mode-hook &#39;restclient-outline-mode)&lt;/code&gt; if you don&#39;t wish to have this behaviour, or it clashes with any other binding for &lt;code&gt;TAB&lt;/code&gt; like autocomplete.&lt;/p&gt; &#xA;&lt;p&gt;Query file example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# -*- restclient -*-&#xA;#&#xA;# Gets  all Github APIs, formats JSON, shows response status and headers underneath.&#xA;# Also sends a User-Agent header, because the Github API requires this.&#xA;#&#xA;GET https://api.github.com&#xA;User-Agent: Emacs Restclient&#xA;&#xA;#&#xA;# XML is supported - highlight, pretty-print&#xA;#&#xA;GET http://www.redmine.org/issues.xml?limit=10&#xA;&#xA;#&#xA;# It can even show an image!&#xA;#&#xA;GET http://upload.wikimedia.org/wikipedia/commons/6/63/Wikipedia-logo.png&#xA;#&#xA;# A bit of json GET, you can pass headers too&#xA;#&#xA;GET http://jira.atlassian.com/rest/api/latest/issue/JRA-9&#xA;User-Agent: Emacs24&#xA;Accept-Encoding: compress, gzip&#xA;&#xA;#&#xA;# Post works too, entity just goes after an empty line. Same is for PUT.&#xA;#&#xA;POST https://jira.atlassian.com/rest/api/2/search&#xA;Content-Type: application/json&#xA;&#xA;{&#xA;        &#34;jql&#34;: &#34;project = HCPUB&#34;,&#xA;        &#34;startAt&#34;: 0,&#xA;        &#34;maxResults&#34;: 15,&#xA;        &#34;fields&#34;: [&#xA;                &#34;summary&#34;,&#xA;                &#34;status&#34;,&#xA;                &#34;assignee&#34;&#xA;        ]&#xA;}&#xA;#&#xA;# And delete, will return not-found error...&#xA;#&#xA;DELETE https://jira.atlassian.com/rest/api/2/version/20&#xA;&#xA;# Set a variable to the value of your ip address using a jq expression&#xA;GET http://httpbin.org/ip&#xA;-&amp;gt; jq-set-var :my-ip .origin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lines starting with &lt;code&gt;#&lt;/code&gt; are considered comments AND also act as separators.&lt;/p&gt; &#xA;&lt;p&gt;HTTPS and image display requires additional dll&#39;s on windows (libtls, libpng, libjpeg etc), which are not in the emacs distribution.&lt;/p&gt; &#xA;&lt;p&gt;More examples can be found in the &lt;code&gt;examples&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h1&gt;In-buffer variables&lt;/h1&gt; &#xA;&lt;p&gt;You declare a variable like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar = the value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar := (some (artbitrary &#39;elisp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In second form, the value of variable is evaluated as Emacs Lisp form immediately. Evaluation of variables is done from top to bottom. Only one one-line form for each variable is allowed, so use &lt;code&gt;(progn ...)&lt;/code&gt; and some virtual line wrap mode if you need more. There&#39;s no way to reference earlier declared &lt;em&gt;restclient&lt;/em&gt; variables, but you can always use &lt;code&gt;setq&lt;/code&gt; to save state.&lt;/p&gt; &#xA;&lt;p&gt;Variables can be multiline too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar = &amp;lt;&amp;lt;&#xA;Authorization: :my-auth&#xA;Content-Type: application/json&#xA;User-Agent: SomeApp/1.0&#xA;#&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:myvar := &amp;lt;&amp;lt;&#xA;(some-long-elisp&#xA;    (code spanning many lines)&#xA;#&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; is used to mark a start of multiline value, the actual value is starting on the next line then. The end of such variable value is the same comment marker &lt;code&gt;#&lt;/code&gt; and last end of line doesn&#39;t count, same is for request bodies.&lt;/p&gt; &#xA;&lt;p&gt;After the var is declared, you can use it in the URL, the header values and the body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Some generic vars&#xA;&#xA;:my-auth = 319854857345898457457&#xA;:my-headers = &amp;lt;&amp;lt;&#xA;Authorization: :my-auth&#xA;Content-Type: application/json&#xA;User-Agent: SomeApp/1.0&#xA;#&#xA;&#xA;# Update a user&#39;s name&#xA;&#xA;:user-id = 7&#xA;:the-name := (format &#34;%s %s %d&#34; &#39;Neo (md5 &#34;The Chosen&#34;) (+ 100 1))&#xA;&#xA;PUT http://localhost:4000/users/:user-id/&#xA;:my-headers&#xA;&#xA;{ &#34;name&#34;: &#34;:the-name&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Varaibles can also be set based on the body of a response using the per-request hooks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# set a variable :my-ip to the value of your ip address using elisp evaluated in the result buffer&#xA;GET http://httpbin.org/ip&#xA;-&amp;gt; run-hook (restclient-set-var &#34;:my-ip&#34; (cdr (assq &#39;origin (json-read))))&#xA;&#xA;# same thing with jq if it&#39;s installed&#xA;GET http://httpbin.org/ip &#xA;-&amp;gt; jq-set-var :my-ip .origin&#xA;&#xA;# set a variable :my-var using a more complex jq expression (requires jq-mode)&#xA;GET https://httpbin.org/json&#xA;-&amp;gt; jq-set-var :my-var .slideshow.slides[0].title&#xA;&#xA;# hooks come before the body on POST&#xA;POST http://httpbin.org/post&#xA;-&amp;gt; jq-set-var :test .json.test&#xA;&#xA;{&#34;test&#34;: &#34;foo&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;File uploads&lt;/h1&gt; &#xA;&lt;p&gt;Restclient now allows to specify file path to use as a body, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST http://httpbin.org/post&#xA;Content-type: text/plain&#xA;&#xA;&amp;lt; /etc/passwd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caveats:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiline variables can be used in headers or body. In URL too, but it doesn&#39;t make sense unless it was long elisp expression evaluating to simple value.&lt;/li&gt; &#xA; &lt;li&gt;Yet same variable cannot contain both headers and body, it must be split into two and separated by empty line as usual.&lt;/li&gt; &#xA; &lt;li&gt;Variables now can reference each other, substitution happens in several passes and stops when there&#39;s no more variables. Please avoid circular references. There&#39;s customizable safeguard of maximum 10 passes to prevent hanging in this case, but it will slow things down.&lt;/li&gt; &#xA; &lt;li&gt;Variable declaration only considered above request line.&lt;/li&gt; &#xA; &lt;li&gt;Be careful of what you put in that elisp. No security checks are done, so it can format your hardrive. If there&#39;s a parsing or evaluation error, it will tell you in the minibuffer.&lt;/li&gt; &#xA; &lt;li&gt;Elisp variables can evaluate to values containing other variable references, this will be substituted too. But you cannot substitute parts of elisp expressions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;There are several variables available to customize &lt;code&gt;restclient&lt;/code&gt; to your liking. Also, all font lock faces are now customizable in &lt;code&gt;resclient-faces&lt;/code&gt; group too.&lt;/p&gt; &#xA;&lt;h3&gt;restclient-log-request&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: t&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Determines whether restclient logs to the *Messages* buffer.&lt;/p&gt; &#xA;&lt;p&gt;If non-nil, restclient requests will be logged. If nil, they will not be.&lt;/p&gt; &#xA;&lt;h3&gt;restclient-same-buffer-response&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: t&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Re-use same buffer for responses or create a new one each time.&lt;/p&gt; &#xA;&lt;p&gt;If non-nil, re-use the buffer named by &lt;code&gt;rest-client-buffer-response-name&lt;/code&gt; for all requests.&lt;/p&gt; &#xA;&lt;p&gt;If nil, generate a buffer name based on the request type and url, and increment it for subsequent requests.&lt;/p&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;GET http://example.org&lt;/code&gt; would produce the following buffer names on 3 subsequent calls:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;*HTTP GET http://example.org*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*HTTP GET http://example.org*&amp;lt;2&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*HTTP GET http://example.org*&amp;lt;3&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;restclient-same-buffer-response-name&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: *HTTP Response*&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Name for response buffer to be used when &lt;code&gt;restclient-same-buffer-response&lt;/code&gt; is true.&lt;/p&gt; &#xA;&lt;h3&gt;restclient-inhibit-cookies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default: nil&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inhibit restclient from sending cookies implicitly.&lt;/p&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comment lines &lt;code&gt;#&lt;/code&gt; act as end of entity. Yes, that means you can&#39;t post shell script or anything with hashes as PUT/POST entity. I&#39;m fine with this right now, but may use more unique separator in future.&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m not sure if it handles different encodings, I suspect it won&#39;t play well with anything non-ascii. I&#39;m yet to figure it out.&lt;/li&gt; &#xA; &lt;li&gt;Variable usages are not highlighted&lt;/li&gt; &#xA; &lt;li&gt;If your Emacs is older than 26.1, some GET requests to &lt;code&gt;localhost&lt;/code&gt; might fail because of that &lt;a href=&#34;http://debbugs.gnu.org/cgi/bugreport.cgi?bug=17976&#34;&gt;bug&lt;/a&gt; in Emacs/url.el. As a workaround you can use &lt;code&gt;127.0.0.1&lt;/code&gt; instead of &lt;code&gt;localhost&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;History&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;01/Aug/2016&lt;/em&gt; Added ability to narrow to region&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;06/Apr/2016&lt;/em&gt; Helm sources for variables and requests added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;06/Apr/2016&lt;/em&gt; File uploads! See upstairs for syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;06/Apr/2016&lt;/em&gt; Added customizable faces for all syntax highlighting, so it can be used in themes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;05/Apr/2016&lt;/em&gt; Added ability to declare multi-line variables (e.g. set of headers repeated for each request) and substitute variable values recursively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;25/Mar/2015&lt;/em&gt; Chop last newline from request body. If you really need to send one, just add one more, otherwise url-encoded POSTs will fail.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;15/Jun/2013&lt;/em&gt; Added support for variables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Related 3rd party packages&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iquiw/company-restclient&#34;&gt;company-restclient&lt;/a&gt;: It provides auto-completion for HTTP methods and headers in restclient-mode. Completion source is given by know-your-http-well.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alf/ob-restclient.el&#34;&gt;ob-restclient&lt;/a&gt;: An extension to restclient.el for emacs that provides org-babel support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bounceme/restclient.vim&#34;&gt;restclient.vim&lt;/a&gt;: Brings the restclient to vim! Responses display in vim&#39;s internal pager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Public domain, do whatever you want.&lt;/p&gt; &#xA;&lt;h1&gt;Author&lt;/h1&gt; &#xA;&lt;p&gt;Pavel Kurnosov &lt;a href=&#34;mailto:pashky@gmail.com&#34;&gt;pashky@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doomemacs/doomemacs</title>
    <updated>2022-09-01T01:50:08Z</updated>
    <id>tag:github.com,2022-09-01:/doomemacs/doomemacs</id>
    <link href="https://github.com/doomemacs/doomemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Emacs framework for the stubborn martian hacker&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Doom Emacs&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Documentation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&#34;&gt;FAQ&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots&#34;&gt;Screenshots&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&amp;amp;label=release&amp;amp;color=58839b&#34; alt=&#34;Made with Doom Emacs&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Supports-Emacs_27.1--28.1-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34; alt=&#34;Supports Emacs 27.1 - 28.1&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/doomemacs/doomemacs/master?style=flat-square&#34; alt=&#34;Latest commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square&#34; alt=&#34;Build status: master&#34;&gt; &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/406534637242810369?color=738adb&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discourse.doomemacs.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&amp;amp;logo=discourse&amp;amp;label=Discourse&amp;amp;style=flat-square&amp;amp;color=9cf&#34; alt=&#34;Discourse server&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png&#34; alt=&#34;Doom Emacs Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#getting-help&#34;&gt;Getting help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;a href=&#34;http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is a story as old as time. A stubborn, shell-dwelling, and melodramatic vimmer‚Äîenvious of the features of modern text editors‚Äîspirals into despair before he succumbs to the &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;dark side&lt;/a&gt;. This is his config.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Doom is a configuration framework for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.&lt;/p&gt; &#xA;&lt;p&gt;Its design is guided by these mantras:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gotta go fast.&lt;/strong&gt; Startup and run-time performance are priorities. Doom goes beyond by modifying packages to be snappier and load lazier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Close to metal.&lt;/strong&gt; There&#39;s less between you and vanilla Emacs by design. That&#39;s less to grok and less to work around when you tinker. Internals ought to be written as if reading them were part of Doom&#39;s UX, and it is!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Opinionated, but not stubborn.&lt;/strong&gt; Doom is about reasonable defaults and curated opinions, but use as little or as much of it as you like.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Your system, your rules.&lt;/strong&gt; You know better. At least, Doom hopes so! It won&#39;t &lt;em&gt;automatically&lt;/em&gt; install system dependencies (and will force plugins not to either). Rely on &lt;code&gt;doom doctor&lt;/code&gt; to tell you what&#39;s missing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nix/Guix is a great idea!&lt;/strong&gt; The Emacs ecosystem is temperamental. Things break and they break often. Disaster recovery should be a priority! Doom&#39;s package management should be declarative and your private config reproducible, and comes with a means to roll back releases and updates (still a WIP).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&#34;&gt;the FAQ&lt;/a&gt; for answers to common questions about the project.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimalistic good looks inspired by modern editors.&lt;/li&gt; &#xA; &lt;li&gt;Curated and sane defaults for many packages, (major) OSes, and Emacs itself.&lt;/li&gt; &#xA; &lt;li&gt;A modular organizational structure for separating concerns in your config.&lt;/li&gt; &#xA; &lt;li&gt;A standard library designed to simplify your elisp bike shedding.&lt;/li&gt; &#xA; &lt;li&gt;A declarative &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;package management system&lt;/a&gt; (powered by &lt;a href=&#34;https://github.com/radian-software/straight.el&#34;&gt;straight.el&lt;/a&gt;) with a command line interface. Install packages from anywhere, not just (M)ELPA, and pin them to any commit.&lt;/li&gt; &#xA; &lt;li&gt;Optional vim emulation powered by &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil-mode&lt;/a&gt;, including ports of popular vim plugins like &lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;, &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;vim-easymotion&lt;/a&gt;, &lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;vim-unimpaired&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/editor/evil/README.org#ported-vim-plugins&#34;&gt;more&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Opt-in LSP integration for many languages, using &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; programming languages. Includes syntax highlighting, linters/checker integration, inline code evaluation, code completion (where possible), REPLs, documentation lookups, snippets, and more!&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;em&gt;many&lt;/em&gt; tools, like docker, pass, ansible, terraform, and more.&lt;/li&gt; &#xA; &lt;li&gt;A Spacemacs-esque &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/config/default/+evil-bindings.el&#34;&gt;keybinding scheme&lt;/a&gt;, centered around leader and localleader prefix keys (&lt;kbd&gt;SPC&lt;/kbd&gt; and &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;m&lt;/kbd&gt; for evil users, &lt;kbd&gt;C-c&lt;/kbd&gt; and &lt;kbd&gt;C-c l&lt;/kbd&gt; for vanilla users).&lt;/li&gt; &#xA; &lt;li&gt;A rule-based &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/modules/ui/popup/README.org&#34;&gt;popup manager&lt;/a&gt; to control how temporary buffers are displayed (and disposed of).&lt;/li&gt; &#xA; &lt;li&gt;Per-file indentation style detection and &lt;a href=&#34;http://editorconfig.org/&#34;&gt;editorconfig&lt;/a&gt; integration. Let someone else argue about tabs vs &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Project-management tools and framework-specific minor modes with their own snippets libraries.&lt;/li&gt; &#xA; &lt;li&gt;Project search (and replace) utilities, powered by &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; and &lt;a href=&#34;https://github.com/abo-abo/swiper&#34;&gt;ivy&lt;/a&gt; or &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Isolated and persistent workspaces (also substitutes for vim tabs).&lt;/li&gt; &#xA; &lt;li&gt;Support for Chinese and Japanese input systems.&lt;/li&gt; &#xA; &lt;li&gt;Save a snapshot of your shell environment to a file for Emacs to load at startup. No more struggling to get Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Git 2.23+&lt;/li&gt; &#xA; &lt;li&gt;Emacs 27.1+ (&lt;em&gt;28.1 is recommended&lt;/em&gt;, or &lt;a href=&#34;https://www.emacswiki.org/emacs/GccEmacs&#34;&gt;native-comp&lt;/a&gt;. &lt;strong&gt;29+ is not supported&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; 11.0+&lt;/li&gt; &#xA; &lt;li&gt;GNU &lt;code&gt;find&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; 7.3.0+ (improves file indexing performance for some commands)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Doom is comprised of &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;~150 optional modules&lt;/a&gt;, some of which may have additional dependencies. &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/modules.org&#34;&gt;Visit their documentation&lt;/a&gt; or run &lt;code&gt;bin/doom doctor&lt;/code&gt; to check for any that you may have missed.&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d&#xA;~/.emacs.d/bin/doom install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org&#34;&gt;read our Getting Started guide&lt;/a&gt; to be walked through installing, configuring and maintaining Doom Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to add &lt;code&gt;~/.emacs.d/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;! Other &lt;code&gt;bin/doom&lt;/code&gt; commands you should know about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;doom sync&lt;/code&gt; to synchronize your private config with Doom by installing missing packages, removing orphaned packages, and regenerating caches. Run this whenever you modify your private &lt;code&gt;init.el&lt;/code&gt; or &lt;code&gt;packages.el&lt;/code&gt;, or install/remove an Emacs package through your OS package manager (e.g. mu4e or agda).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom upgrade&lt;/code&gt; to update Doom to the latest release &amp;amp; all installed packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom doctor&lt;/code&gt; to diagnose common issues with your system and config.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom env&lt;/code&gt; to dump a snapshot of your shell environment to a file that Doom will load at startup. This allows Emacs to inherit your &lt;code&gt;PATH&lt;/code&gt;, among other things.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doom build&lt;/code&gt; to recompile all installed packages (use this if you up/downgrade Emacs).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Doom is an active and ongoing project. To make that development more transparent, its roadmap (and other concerns) are published across three github project boards and a newsletter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.doomemacs.org/t/development-roadmap/42&#34;&gt;Development Roadmap&lt;/a&gt;: roughly outlines our goals between release milestones and their progress.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/5&#34;&gt;Plugins under review&lt;/a&gt;: lists plugins we are watching and considering for inclusion, and what their status for inclusion is. Please consult this list before requesting new packages/features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/doomemacs/projects/7&#34;&gt;Upstream bugs&lt;/a&gt;: lists issues that originate from elsewhere, and whether or not we have local workarounds or temporary fixes for them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Doom&#39;s newsletter&lt;/del&gt; (not finished) will contain changelogs in between releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting help&lt;/h1&gt; &#xA;&lt;p&gt;Emacs is no journey of a mere thousand miles. You &lt;em&gt;will&lt;/em&gt; run into problems and mysterious errors. When you do, here are some places you can look for help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/index.org&#34;&gt;Our documentation&lt;/a&gt; covers many use cases. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#configuring-doom&#34;&gt;The Configuration section&lt;/a&gt; covers how to configure Doom and its packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#package-management&#34;&gt;The Package Management section&lt;/a&gt; covers how to install and disable packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#the-bindoom-utility&#34;&gt;This section&lt;/a&gt; explains the &lt;code&gt;bin/doom&lt;/code&gt; script&#39;s most important commands.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/getting_started.org#common-mistakes-when-configuring-doom-emacs&#34;&gt;This section&lt;/a&gt; lists some common configuration mistakes new users make, when migrating a config from another distro or their own.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-theme&#34;&gt;This answer&lt;/a&gt; shows you how to add your own themes to your private config.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/faq.org#how-do-i-change-the-fonts&#34;&gt;This answer&lt;/a&gt; shows you how to change the default font.&lt;/li&gt; &#xA;   &lt;li&gt;Your issue may be documented in the &lt;a href=&#34;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&#34;&gt;FAQ&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;With Emacs built-in help system documentation is a keystroke away: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For functions: &lt;kbd&gt;SPC h f&lt;/kbd&gt; or &lt;kbd&gt;C-h f&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For variables: &lt;kbd&gt;SPC h v&lt;/kbd&gt; or &lt;kbd&gt;C-h v&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For a keybind: &lt;kbd&gt;SPC h k&lt;/kbd&gt; or &lt;kbd&gt;C-h k&lt;/kbd&gt;&lt;/li&gt; &#xA;   &lt;li&gt;To search available keybinds: &lt;kbd&gt;SPC h b b&lt;/kbd&gt; or &lt;kbd&gt;C-h b b&lt;/kbd&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/doom doctor&lt;/code&gt; to detect common issues with your development environment and private config.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://github.com/hlissner/doom-emacs/raw/master/docs/faq.org&#34;&gt;FAQ&lt;/a&gt; or &lt;a href=&#34;https://discourse.doomemacs.org/tag/faq&#34;&gt;Discourse FAQs&lt;/a&gt;, in case your question has already been answered.&lt;/li&gt; &#xA; &lt;li&gt;Search &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues&#34;&gt;Doom&#39;s issue tracker&lt;/a&gt; in case your issue was already reported.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt;; it&#39;s active and friendly! Keep an eye on the #announcements channel, where I announce breaking updates and releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bbatsov/emacs-lisp-style-guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square&#34; alt=&#34;Elisp styleguide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&amp;amp;logo=liberapay&amp;amp;color=blue&#34; alt=&#34;Donate on liberapay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-1?style=flat-square&amp;amp;logo=paypal&amp;amp;color=blue&#34; alt=&#34;Donate on paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Doom is a labor of love and incurable madness, but I&#39;m only one guy. Doom wouldn&#39;t be where it is today without your help. I welcome contributions of any kind!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I &lt;span&gt;‚ù§Ô∏è&lt;/span&gt; pull requests and bug reports (see the &lt;a href=&#34;https://raw.githubusercontent.com/doomemacs/doomemacs/master/docs/contributing.org&#34;&gt;Contributing Guidelines&lt;/a&gt;)!&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t hesitate to &lt;a href=&#34;https://github.com/doomemacs/doomemacs/issues/new&#34;&gt;tell me my Elisp-fu sucks&lt;/a&gt;, but please tell me why.&lt;/li&gt; &#xA; &lt;li&gt;Hop on &lt;a href=&#34;https://discord.gg/qvGgnVx&#34;&gt;our Discord server&lt;/a&gt; and say hi! Help others, hang out or talk to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming -- anything you like. Nourish this lonely soul.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&#34;https://liberapay.com/hlissner/donate&#34;&gt;liberapay&lt;/a&gt; or &lt;a href=&#34;https://paypal.me/henriklissner/10&#34;&gt;paypal&lt;/a&gt;. My work contends with studies, adventures in indie gamedev and freelance work. Donations help me allocate more time to my Emacs and OSS capers.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>