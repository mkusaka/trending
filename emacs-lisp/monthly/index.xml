<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-01T02:14:39Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fxbois/web-mode</title>
    <updated>2023-05-01T02:14:39Z</updated>
    <id>tag:github.com,2023-05-01:/fxbois/web-mode</id>
    <link href="https://github.com/fxbois/web-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;web template editing mode for emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;web-mode.el&lt;/h1&gt; &#xA;&lt;p&gt;web-mode.el is an emacs major mode for editing &lt;strong&gt;web templates&lt;/strong&gt; aka HTML files embedding parts (CSS/JavaScript) and blocks (pre rendered by client/server side engines).&lt;/p&gt; &#xA;&lt;p&gt;web-mode.el is compatible with many template engines: PHP, JSP, ASP, Django, Twig, Jinja, Mustache, ERB, FreeMarker, Velocity, Cheetah, Smarty, CTemplate, Mustache, Blade, ErlyDTL, Go Template, Dust.js, Google Closure (soy), React/JSX, Angularjs, ejs, Nunjucks, etc.&lt;/p&gt; &#xA;&lt;p&gt;More infos on &lt;a href=&#34;https://web-mode.org/&#34;&gt;https://web-mode.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://web-mode.org/web-mode.png?v=5&#34; alt=&#34;ScreenShot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.me/fxbois&#34;&gt;&lt;img src=&#34;https://web-mode.org/images/PayPal.svg?sanitize=true&#34; alt=&#34;paypal.me&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/web-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/web-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://stable.melpa.org/#/web-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/web-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alezost/bui.el</title>
    <updated>2023-05-01T02:14:39Z</updated>
    <id>tag:github.com,2023-05-01:/alezost/bui.el</id>
    <link href="https://github.com/alezost/bui.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Buffer interface library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[http://www.gnu.org/licenses/gpl-3.0.txt][file:https://img.shields.io/badge/license-GPL_3-orange.svg]] [[http://melpa.org/#/bui][file:http://melpa.org/packages/bui-badge.svg]] [[http://stable.melpa.org/#/bui][file:http://stable.melpa.org/packages/bui-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;About&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=BUI= (=Buffer User Interface=) is an Emacs library that can be used to make user interfaces to display some kind of entries (like packages, buffers, functions, etc.).&lt;/p&gt; &#xA;&lt;p&gt;The intention of BUI is to be a high-level library which is convenient to be used both by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;package makers&lt;/em&gt;, as there is no need to bother about implementing routine details and usual features (like buffer history, filtering displayed entries, etc.);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;users&lt;/em&gt;, as it provides familiar and intuitive interfaces with usual keys (for moving by lines, marking, sorting, switching between buttons); and what is also important, the defined interfaces are highly configurable through various generated variables. A summary of available key bindings can be displayed by pressing =h=.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BUI provides means to display entries in 2 types of buffers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=list=: it is based on =tabulated-list-mode=, thus it looks similar to a list of Emacs packages (=M-x list-packages=);&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=info=: it can be used to display more verbose info, like various buttons, text and other stuff related to the displayed entry (or entries).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In short, you define how a =list= / =info= interface looks like (using =bui-define-interface= macro), and then you can make some user commands that will display entries (using =bui-get-display-entries= and similar functions).&lt;/p&gt; &#xA;&lt;p&gt;For example, you can make a =list= interface to display buffers (similar to what =M-x list-buffers= do), like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (require &#39;bui)&lt;/p&gt; &#xA;&lt;p&gt;(defun buffers-buffer-&amp;gt;entry (buffer) (with-current-buffer buffer `((id . ,buffer) (name . ,(buffer-name)) (mode . ,major-mode) (size . ,(buffer-size)) (file-name . ,buffer-file-name))))&lt;/p&gt; &#xA;&lt;p&gt;(defun buffers-get-entries () (mapcar &#39;buffers-buffer-&amp;gt;entry (buffer-list)))&lt;/p&gt; &#xA;&lt;p&gt;(bui-define-interface buffers list :buffer-name &#34;&lt;em&gt;Buffers&lt;/em&gt;&#34; :get-entries-function &#39;buffers-get-entries :format &#39;((name nil 30 t) (mode nil 25 t) (size nil 8 bui-list-sort-numerically-2 :right-align t) (file-name bui-list-get-file-name 30 t)) :sort-key &#39;(name))&lt;/p&gt; &#xA;&lt;p&gt;(defun buffers () &#34;Display a list of buffers.&#34; (interactive) (bui-get-display-entries &#39;buffers &#39;list)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This is a simplified example just to demonstrate how =bui.el= can be used. For full example see [[file:examples/buffers.el]]. You can see how it looks like on the following screenshot. =M-x buffers= displays a list of buffers, then 2 buffers are marked (with =m= key) and &#34;described&#34; in =info= buffer (with =i= key).&lt;/p&gt; &#xA;&lt;p&gt;[[http://i.imgur.com/3dlBu2Y.png]]&lt;/p&gt; &#xA;&lt;p&gt;=bui-define-interface= macro takes the following arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ENTRY-TYPE: an arbitrary symbol to denote the entry type.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;BUFFER-TYPE: =list= or =info= symbol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keyword arguments: used to define various interface parameters and to set default values of user variables (like titles, buffer name, etc.). The main keywords that should be specified are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;=:get-entries-function=: this function should return a list of entries to display. Each entry is a usual association list with one required =id= key (it is used to fill =tabulated-list-entries= variable).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;=:format=: it specifies how the data is displayed; see docstrings of the generated =ENTRY-TYPE-BUFFER-TYPE-format= variables for details (in the current example: =buffers-list-format= and =buffers-info-format=).&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For real-world examples you may look at [[https://github.com/alezost/aurel][aurel]] or [[https://github.com/alezost/guix.el][guix]] packages.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xenodium/chatgpt-shell</title>
    <updated>2023-05-01T02:14:39Z</updated>
    <id>tag:github.com,2023-05-01:/xenodium/chatgpt-shell</id>
    <link href="https://github.com/xenodium/chatgpt-shell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT and DALL-E Emacs shells + Org babel ðŸ¦„ + a shell maker for other providers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;ðŸ‘‰ [[https://github.com/sponsors/xenodium][Support this work via GitHub Sponsors]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;chatgpt-shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ChatGPT and DALL-E Emacs shells + [[https://orgmode.org/worg/org-contrib/babel/intro.html][Org Babel]].&lt;/p&gt; &#xA;&lt;p&gt;Includes =shell-maker=, a way to create shells for any service (local or cloud).&lt;/p&gt; &#xA;&lt;p&gt;** Support this effort&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re finding =chatgpt-shell= useful, consider âœ¨[[https://github.com/sponsors/xenodium][sponsoring]]âœ¨.&lt;/p&gt; &#xA;&lt;p&gt;=chatgpt-shell= is in development. Please report issues or send [[https://github.com/xenodium/chatgpt-shell/pulls][pull requests]] for improvements.&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/chatgpt-shell-demo.gif&#34; width=&#34;80%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/blocks.gif&#34; width=&#34;80%&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Load =(require &#39;chatgpt-shell)=&lt;/li&gt; &#xA; &lt;li&gt;Load =(require &#39;dall-e-shell)=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** MELPA&lt;/p&gt; &#xA;&lt;p&gt;As of now, only =chatgpt-shell= is available on MELPA.&lt;/p&gt; &#xA;&lt;p&gt;If using [[https://github.com/jwiegley/use-package][use-package]], you can install with =:ensure t=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :lexical no (use-package chatgpt-shell :ensure t :custom (chatgpt-shell-openai-key (lambda () (auth-source-pass-get &#39;secret &#34;openai-key&#34;)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Read on for setting your OpenAI key in other ways.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set OpenAI key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;ll first need to get a [[https://platform.openai.com/account/api-keys][key from OpenAI]].&lt;/p&gt; &#xA;&lt;p&gt;** ChatGPT key *** As function #+begin_src emacs-lisp ;; if you are using the &#34;pass&#34; password manager (setq chatgpt-shell-openai-key (lambda () ;; (auth-source-pass-get &#39;secret &#34;openai-key&#34;) ; alternative using pass support in auth-sources (nth 0 (process-lines &#34;pass&#34; &#34;show&#34; &#34;openai-key&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;;; or if using auth-sources, e.g., so the file ~/.authinfo has this line: ;; machine api.openai.com password OPENAI_KEY (setq chatgpt-shell-openai-key (auth-source-pick-first-password :host &#34;api.openai.com&#34;))&lt;/p&gt; &#xA;&lt;p&gt;;; or same as previous but lazy loaded (prevents unexpected passphrase prompt) (setq chatgpt-shell-openai-key (lambda () (auth-source-pick-first-password :host &#34;api.openai.com&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Manually =M-x set-variable chatgpt-shell-openai-key=&lt;/p&gt; &#xA;&lt;p&gt;*** As variable #+begin_src emacs-lisp (setq chatgpt-shell-openai-key &#34;my key&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** DALL-E key&lt;/p&gt; &#xA;&lt;p&gt;Same as ChatGPT, but use =dall-e-shell-openai-key= variable.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Launch with =M-x chatgpt-shell= or =dall-e-shell=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clear buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Type =clear= as a prompt.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh ChatGPT&amp;gt; clear #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, use either =M-x chatgpt-shell-clear-buffer= or =M-x comint-clear-buffer=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Saving and restoring (experimental)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Save with =M-x shell-maker-save-session-transcript= and restore with =M-x chatgpt-shell-restore-session-from-transcript=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Streaming&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=chatgpt-shell= can either wait until the entire response is received before displaying, or it can progressively display as chunks arrive (streaming).&lt;/p&gt; &#xA;&lt;p&gt;Streaming is enabled by default. =(setq chatgpt-shell-chatgpt-streaming nil)= to disable it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;chatgpt-shell customizations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp :results table :colnames &#39;(&#34;Custom variable&#34; &#34;Description&#34;) :exports results (let ((rows)) (mapatoms (lambda (symbol) (when (and (string-match &#34;^chatgpt-shell&#34; (symbol-name symbol)) (custom-variable-p symbol)) (push `(,symbol ,(car (split-string (or (get (indirect-variable symbol) &#39;variable-documentation) (get symbol &#39;variable-documentation) &#34;&#34;) &#34;\n&#34;))) rows)))) rows) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;#+RESULTS: | Custom variable | Description | |------------------------------------------+--------------------------------------------------------------------------------| | chatgpt-shell-display-function | Function to display shell. Can be set to &lt;code&gt;display-buffer&#39; or custom function. | | chatgpt-shell-curl-additional-options | Additional options for &lt;/code&gt;curl&#39; command. | | chatgpt-shell-system-prompt | The system message helps set the behavior of the assistant. | | chatgpt-shell-default-prompts | List of default prompts to choose from. | | chatgpt-shell-read-string-function | Function to read strings from user. | | chatgpt-shell-model-temperature | What sampling temperature to use, between 0 and 2, or nil. | | chatgpt-shell-transmitted-context-length | Controls the amount of context provided to chatGPT. | | chatgpt-shell-streaming | Whether or not to stream ChatGPT responses (experimental). | | chatgpt-shell-model-version | The used ChatGPT OpenAI model. | | chatgpt-shell-source-block-actions | Block actions for known languages. | | chatgpt-shell-additional-curl-options | Additional options for `curl&#39; command. | | chatgpt-shell-openai-key | OpenAI key as a string or a function that loads and returns it. | | chatgpt-shell-after-command-functions | Abnormal hook (i.e. with parameters) invoked after each command. | | chatgpt-shell-babel-headers | Additional headers to make babel blocks work. | | chatgpt-shell-language-mapping | Maps external language names to Emacs names. | | chatgpt-shell-request-timeout | How long to wait for a request to time out. |&lt;/p&gt; &#xA;&lt;p&gt;There are more. Browse via =M-x set-variable=&lt;/p&gt; &#xA;&lt;p&gt;** =chatgpt-shell-display-function= (with custom function)&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d prefer your own custom display function,&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :lexical no (setq chatgpt-shell-display-function #&#39;my/chatgpt-shell-frame)&lt;/p&gt; &#xA;&lt;p&gt;(defun my/chatgpt-shell-frame (bname) (let ((cur-f (selected-frame)) (f (my/find-or-make-frame &#34;chatgpt&#34;))) (select-frame-by-name &#34;chatgpt&#34;) (pop-to-buffer-same-window bname) (set-frame-position f (/ (display-pixel-width) 2) 0) (set-frame-height f (frame-height cur-f)) (set-frame-width f (frame-width cur-f) 1)))&lt;/p&gt; &#xA;&lt;p&gt;(defun my/find-or-make-frame (fname) (condition-case nil (select-frame-by-name fname) (error (make-frame `((name . ,fname)))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Thanks to [[https://github.com/tuhdo][tuhdo]] for the custom display function.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;chatgpt-shell commands #+BEGIN_SRC emacs-lisp :results table :colnames &#39;(&#34;Binding&#34; &#34;Command&#34; &#34;Description&#34;) :exports results (let ((rows)) (mapatoms (lambda (symbol) (when (and (string-match &#34;^chatgpt-shell&#34; (symbol-name symbol)) (commandp symbol)) (push `(,(mapconcat #&#39;help--key-description-fontified (where-is-internal symbol shell-maker-mode-map nil nil (command-remapping symbol)) &#34;, &#34;) ,symbol ,(car (split-string (or (documentation symbol t) &#34;&#34;) &#34;\n&#34;))) rows)))) rows) #+END_SRC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+RESULTS: | Binding | Command | Description | |---------+-----------------------------------------------------+------------------------------------------------------------| | | chatgpt-shell | Start a ChatGPT shell. | | | chatgpt-shell-rename-block-at-point | Rename block at point (perhaps a different language). | | C-M-h | chatgpt-shell-mark-at-point-dwim | Mark source block if at point. Mark all output otherwise. | | | chatgpt-shell-execute-primary-block-action-at-point | Execute primary action for known block. | | | chatgpt-shell-execute-babel-block-action-at-point | Execute block as org babel. | | | chatgpt-shell-eshell-whats-wrong-with-last-command | Ask ChatGPT what&#39;s wrong with the last eshell command. | | C-c C-p | chatgpt-shell-previous-item | Go to previous item. | | | chatgpt-shell-explain-code | Describe code from region using ChatGPT. | | | chatgpt-shell-prompt | Make a ChatGPT request from the minibuffer. | | | chatgpt-shell-remove-block-overlays | Remove block overlays. Handy for renaming blocks. | | | chatgpt-shell-proofread-region | Proofread English from region using ChatGPT. | | | chatgpt-shell-send-and-review-region | Send region to ChatGPT, review before submitting. | | | chatgpt-shell-eshell-summarize-last-command-output | Ask ChatGPT to summarize the last command output. | | | chatgpt-shell-describe-code | Describe code from region using ChatGPT. | | | chatgpt-shell-mode | Major mode for editing text written for humans to read. | | | chatgpt-shell-previous-source-block | Move point to previous source block. | | | chatgpt-shell-refactor-code | Refactor code from region using ChatGPT. | | | chatgpt-shell-swap-system-prompt | | | | chatgpt-shell-save-session-transcript | Save shell transcript to file. | | | chatgpt-shell-clear-buffer | Clear the comint buffer. | | C-c C-n | chatgpt-shell-next-item | Go to next item. | | | chatgpt-shell-view-at-point | View prompt and putput at point in a separate buffer. | | | chatgpt-shell-send-region | Send region to ChatGPT. | | | chatgpt-shell-restore-session-from-transcript | Restore session from transcript. | | | chatgpt-shell-generate-unit-test | Generate unit-test for the code from region using ChatGPT. | | | chatgpt-shell-next-source-block | Move point to previous source block. | | C-c C-c | chatgpt-shell-ctrl-c-ctrl-c | Ctrl-C Ctrl-C DWIM binding. |&lt;/p&gt; &#xA;&lt;p&gt;Browse all available via =M-x=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dall-e-shell customizations #+BEGIN_SRC emacs-lisp :results table :colnames &#39;(&#34;Custom variable&#34; &#34;Description&#34;) :exports results (let ((rows)) (mapatoms (lambda (symbol) (when (and (string-match &#34;^dall-e-shell&#34; (symbol-name symbol)) (custom-variable-p symbol)) (push `(,symbol ,(car (split-string (or (get (indirect-variable symbol) &#39;variable-documentation) (get symbol &#39;variable-documentation) &#34;&#34;) &#34;\n&#34;))) rows)))) rows) #+END_SRC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+RESULTS: | Custom variable | Description | |-------------------------------------+--------------------------------------------------------------------------------| | dall-e-shell-openai-key | OpenAI key as a string or a function that loads and returns it. | | dall-e-shell-image-size | The default size of the requested image as a string. | | dall-e-shell-read-string-function | Function to read strings from user. | | dall-e-shell-request-timeout | How long to wait for a request to time out. | | dall-e-shell-model-version | The used DALL-E OpenAI model. | | dall-e-shell-display-function | Function to display shell. Can be set to `display-buffer&#39; or custom function. | | dall-e-shell-image-output-directory | Output directory for the generated image. |&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dall-e-shell commands #+BEGIN_SRC emacs-lisp :results table :colnames &#39;(&#34;Command&#34; &#34;Description&#34;) :exports results (let ((rows)) (mapatoms (lambda (symbol) (when (and (string-match &#34;^dall-e-shell&#34; (symbol-name symbol)) (commandp symbol)) (push `(,symbol ,(car (split-string (or (documentation symbol t) &#34;&#34;) &#34;\n&#34;))) rows)))) rows) #+END_SRC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+RESULTS: | Command | Description | |-------------------+---------------------------------------------------------| | dall-e-shell | Start a DALL-E shell. | | dall-e-shell-mode | Major mode for editing text written for humans to read. |&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ChatGPT org babel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Load =(require &#39;ob-chatgpt-shell)= and invoke =(ob-chatgpt-shell-setup)=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src org ,#+begin_src chatgpt-shell Hello ,#+end_src&lt;/p&gt; &#xA;&lt;p&gt;,#+RESULTS: : Hi there! How can I assist you today? #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DALL-E org babel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Load =(require &#39;ob-dall-e-shell)= and invoke =(ob-dall-e-shell-setup)=.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src org ,#+begin_src dall-e-shell Pretty clouds ,#+end_src&lt;/p&gt; &#xA;&lt;p&gt;,#+RESULTS: [[file:/var/folders/m7/ky091cp56d5g68nyhl4y7frc0000gn/T/1680644778.png]] #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;shell-maker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are currently two shell implementations (ChatGPT and DALL-E). Other services (local or cloud) can be brought to Emacs as shells. =shell-maker= can help with that.&lt;/p&gt; &#xA;&lt;p&gt;=shell-maker= is a convenience wrapper around [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html][comint mode]].&lt;/p&gt; &#xA;&lt;p&gt;Both =chatgpt-shell= and =dall-e-shell= use =shell-maker=, but a basic implementation of a new shell looks as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :lexical no (require &#39;shell-maker)&lt;/p&gt; &#xA;&lt;p&gt;(defvar greeter-shell--config (make-shell-maker-config :name &#34;Greeter&#34; :execute-command (lambda (command _history callback error-callback) (funcall callback (format &#34;Hello &#34;%s&#34;&#34; command) nil))))&lt;/p&gt; &#xA;&lt;p&gt;(defun greeter-shell () &#34;Start a Greeter shell.&#34; (interactive) (shell-maker-start greeter-shell--config)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/xenodium/chatgpt-shell/main/demos/greeter.gif&#34; width=&#34;50%&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Other packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ðŸ‘‰ [[https://github.com/sponsors/xenodium][Support this work via GitHub Sponsors]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://xenodium.com/][Blog (xenodium.com)]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/xenodium/dwim-shell-command][dwim-shell-command]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/xenodium/company-org-block][company-org-block]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/xenodium/org-block-capf][org-block-capf]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/xenodium/ob-swiftui][ob-swiftui]]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>