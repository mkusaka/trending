<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-01T01:48:27Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>karthink/popper</title>
    <updated>2024-07-01T01:48:27Z</updated>
    <id>tag:github.com,2024-07-01:/karthink/popper</id>
    <link href="https://github.com/karthink/popper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs minor-mode to summon and dismiss buffers easily.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Popper: Popup Buffers for Emacs&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://elpa.gnu.org/packages/popper.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/popper.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/devel/popper.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/popper.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/popper&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/popper-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/popper&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/popper-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Popper is a minor-mode to tame the flood of ephemeral windows Emacs produces, while still keeping them within arm&#39;s reach.&lt;/p&gt; &#xA;&lt;p&gt;Designate any buffer to &#34;popup&#34; status, and it will stay out of your way. Disimss or summon it easily with one key. Cycle through all your &#34;popups&#34; or just the ones relevant to your current buffer. Group popups automatically so you&#39;re presented with the most relevant ones. Useful for many things, including toggling display of REPLs, documentation, compilation or shell output: any buffer you need instant access to but want kept out of your way!&lt;/p&gt; &#xA;&lt;p&gt;There is a [[https://www.youtube.com/watch?v=E-xUNlZi3rI][detailed demo of Popper here]]. [Note (10/2021): This demo is quite out of date at this point but covers the basics.]&lt;/p&gt; &#xA;&lt;p&gt;You can pre-designate any buffer (by name or major-mode) as a popup, and the status will be automatically applied when Emacs creates it.&lt;/p&gt; &#xA;&lt;p&gt;By default, your popups are displayed in a non-obtrusive way, but Popper respects window rules for buffers that you might have in =display-buffer-alist= or created using a window management package like =shackle.el=. Popper summons windows defined by the user as &#34;popups&#34; by simply calling =display-buffer=.&lt;/p&gt; &#xA;&lt;p&gt;*** Toggle a popup:&lt;/p&gt; &#xA;&lt;h1&gt;#+ATTR_ORG: :width 500&lt;/h1&gt; &#xA;&lt;h1&gt;#+ATTR_HTML: :width 500px&lt;/h1&gt; &#xA;&lt;h1&gt;[[file:images/popper-toggle-latest.gif]]&lt;/h1&gt; &#xA;&lt;p&gt;Here I toggle a REPL for quick access.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/135746327-c400aaf9-4aa1-4b6e-8b0a-0dd58c2690bb.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/135746327-c400aaf9-4aa1-4b6e-8b0a-0dd58c2690bb.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** Cycle through all your popups:&lt;/p&gt; &#xA;&lt;h1&gt;#+ATTR_ORG: :width 500&lt;/h1&gt; &#xA;&lt;h1&gt;#+ATTR_HTML: :width 500px&lt;/h1&gt; &#xA;&lt;h1&gt;[[file:images/popper-cycle.gif]]&lt;/h1&gt; &#xA;&lt;p&gt;Here I cycle through all &#34;popup buffers&#34; in quick succession. My popup buffers are the usual suspects: help buffers, REPLs, grep and occur buffers, shell and compilation output, log buffers etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/135746363-aa3c3a25-cc9d-4907-a85f-07ea0d764238.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/135746363-aa3c3a25-cc9d-4907-a85f-07ea0d764238.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that popup buffers are indicated here by the marker &#34;POP&#34; in their modelines. *** Or jump to them instantly with hinting You can see your popups in the echo area and jump to them with a key.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/135746395-dfe3b3e8-9d5a-4309-b521-9555a34bb73d.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/135746395-dfe3b3e8-9d5a-4309-b521-9555a34bb73d.mp4&lt;/a&gt; *** Group your popups according to context With grouping turned on, I&#39;m only shown the popups relevant to the current context (in this case the Popper project).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/135746404-d8673390-d220-46fe-9b57-9dc81458cecd.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/135746404-d8673390-d220-46fe-9b57-9dc81458cecd.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The context can be anything, see below. Projectile, Perspective and Project.el are supported out of the box. *** Turn a regular window into a popup:&lt;/p&gt; &#xA;&lt;h1&gt;#+ATTR_ORG: :width 500&lt;/h1&gt; &#xA;&lt;h1&gt;#+ATTR_HTML: :width 500px&lt;/h1&gt; &#xA;&lt;h1&gt;[[file:images/popper-demote.gif]]&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/135746418-21d32c74-e1f1-48f3-ba19-792c7cb2a51a.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/135746418-21d32c74-e1f1-48f3-ba19-792c7cb2a51a.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or promote a popup to regular window status. *** Popper respects your display buffer settings&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/135746477-93f8fc3d-4806-4901-beae-904059584e72.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/135746477-93f8fc3d-4806-4901-beae-904059584e72.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And windows open the way you have specified them to: in reused windows, side windows, new or child frames, etc. All display-buffer actions are supported except for displaying in popups in new frames and in atomic windows. *** ... you can toggle all your popups at once: #+ATTR_ORG: :width 500 #+ATTR_HTML: :width 500px [[file:images/popper-toggle-all.png]]&lt;/p&gt; &#xA;&lt;h1&gt;[[file:images/popper-toggle-all.gif]]&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Turn on =popper-mode=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Turn any buffer into a popup (or vice-versa) with =popper-toggle-type=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two commands for displaying popups, you can bind them as convenient:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=popper-toggle=: Show/hide the latest popup. Does more with prefix args.&lt;/li&gt; &#xA; &lt;li&gt;=popper-cycle=: Cycle through your popups in sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To automatically designate buffers as popups, see the customization section. Additionally, you can kill an open popup buffer with =popper-kill-latest-popup=.&lt;/p&gt; &#xA;&lt;p&gt;If you want the echo-area hints, turn on =popper-echo-mode=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setup =popper= is available on GNU ELPA, so you can install it with =M-x package-install RET popper RET=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** With =use-package= #+BEGIN_SRC emacs-lisp (use-package popper :ensure t ; or :straight t :bind ((&#34;C-&lt;code&gt;&#34; . popper-toggle) (&#34;M-&lt;/code&gt;&#34; . popper-cycle) (&#34;C-M-`&#34; . popper-toggle-type)) :init (setq popper-reference-buffers &#39;(&#34;\&lt;em&gt;Messages\&lt;/em&gt;&#34; &#34;Output\*$&#34; &#34;\&lt;em&gt;Async Shell Command\&lt;/em&gt;&#34; help-mode compilation-mode)) (popper-mode +1) (popper-echo-mode +1)) ; For echo area hints #+END_SRC See the Customization section for details on specifying buffer types as popups.&lt;/p&gt; &#xA;&lt;p&gt;** Without =use-package= #+BEGIN_SRC emacs-lisp (require &#39;popper) (setq popper-reference-buffers &#39;(&#34;\&lt;em&gt;Messages\&lt;/em&gt;&#34; &#34;Output\*$&#34; &#34;\&lt;em&gt;Async Shell Command\&lt;/em&gt;&#34; help-mode compilation-mode)) (global-set-key (kbd &#34;C-&lt;code&gt;&#34;) &#39;popper-toggle) (global-set-key (kbd &#34;M-&lt;/code&gt;&#34;) &#39;popper-cycle) (global-set-key (kbd &#34;C-M-`&#34;) &#39;popper-toggle-type) (popper-mode +1)&lt;/p&gt; &#xA;&lt;p&gt;;; For echo-area hints (require &#39;popper-echo) (popper-echo-mode +1) #+END_SRC See the Customization section for details on specifying buffer types as popups.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customization :PROPERTIES: :ID: ce27af55-91a5-4549-97ac-d7f2c0aa9019 :END: To get started, customize this variable:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=popper-reference-buffers=: List of buffers to treat as popups. Each entry in the list can be a regexp (string) to match buffer names against or a major-mode (symbol) to match buffer major-modes against.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (setq popper-reference-buffers &#39;(&#34;\&lt;em&gt;Messages\&lt;/em&gt;&#34; &#34;Output\*$&#34; help-mode compilation-mode)) #+END_SRC&lt;/p&gt; &lt;p&gt;Will treat the following as popups: The Messages buffer, any buffer ending in &#34;Output*&#34;, and all help and compilation buffers.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note: Because of how some shell buffers are initialized in Emacs, you may need to supply both the name and major mode to match them consistently&lt;/em&gt;. Take your pick:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp ;; Match eshell, shell, term and/or vterm buffers (setq popper-reference-buffers (append popper-reference-buffers &#39;(&#34;^\&lt;em&gt;eshell.&lt;/em&gt;\&lt;em&gt;$&#34; eshell-mode ;eshell as a popup &#34;^\&lt;em&gt;shell.&lt;/em&gt;\&lt;/em&gt;$&#34; shell-mode ;shell as a popup &#34;^\&lt;em&gt;term.&lt;/em&gt;\&lt;em&gt;$&#34; term-mode ;term as a popup &#34;^\&lt;em&gt;vterm.&lt;/em&gt;\&lt;/em&gt;$&#34; vterm-mode ;vterm as a popup ))) #+END_SRC&lt;/p&gt; &lt;p&gt;As of v0.40, Popper also supports classifying a buffer as a popup based on any user supplied predicate. This predicate (function) is called with the buffer as argument and returns =t= if it should be considered a popup. Here is an example with a predicate:&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC emacs-lisp (setq popper-reference-buffers &#39;(&#34;\&lt;em&gt;Messages\&lt;/em&gt;&#34; help-mode (lambda (buf) (with-current-buffer buf (and (derived-mode-p &#39;fundamental-mode) (&amp;lt; (count-lines (point-min) (point-max)) 10))))))) #+END_SRC&lt;/p&gt; &lt;p&gt;This list includes the the Messages and =help-mode= buffers from before, along with a predicate: any buffer derived from the major mode =fundamental-mode= that has fewer than 10 lines will be considered a popup.&lt;/p&gt; &lt;p&gt;Note that for performance reasons, predicates that classify a buffer as a popup are /only run when the buffer is created/. Thus dynamically changing a buffer&#39;s popup status based on its changing state is not possible (yet).&lt;/p&gt; &lt;p&gt;There are other customization options, check the =popper= group.&lt;/p&gt; &lt;p&gt;Here is an example of how I use Popper:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/8607532/135748097-268f5aae-ad42-44fa-9435-b63b960d45cf.mp4&#34;&gt;https://user-images.githubusercontent.com/8607532/135748097-268f5aae-ad42-44fa-9435-b63b960d45cf.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Popup buffers have no modelines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;My popups are grouped by project, so I only see popups relevant to the current one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I use the echo-area hints to select popups with the number keys.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;These hints have their buffer names truncated so they&#39;re easier to read.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;My popups show up in different ways on screen depending on my display-buffer settings: Help windows on the right, REPLs and command output at the bottom, grep buffers at the top etc.&lt;/p&gt; &lt;p&gt;This section details these (and other) customization options.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Grouping popups by context Popper can group popups by &#34;context&#34;, so that the popups available for display are limited to those that are relevant to the context in which =popper-toggle= or =popper-cycle= is called. For example, when cycling popups from a project buffer, you may only want to see the popups (REPLs, help buffers and compilation output, say) that were spawned from buffers in that project. This is intended to approximate DWIM behavior, so that the most relevant popup in any context is never more than one command away.&lt;/p&gt; &#xA;&lt;p&gt;Built in contexts include projects as defined in Emacs&#39; built in =project.el= and =projectile=, using =perspective= names (from =persp.el=), as well as the default directory of a buffer. To set this, customize =popper-group-function= or use one of&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq popper-group-function #&#39;popper-group-by-project) ; project.el projects&lt;/p&gt; &#xA;&lt;p&gt;(setq popper-group-function #&#39;popper-group-by-projectile) ; projectile projects&lt;/p&gt; &#xA;&lt;p&gt;(setq popper-group-function #&#39;popper-group-by-directory) ; group by project.el ; project root, with ; fall back to ; default-directory (setq popper-group-function #&#39;popper-group-by-perspective) ; group by perspective #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;You can also provide a custom function that takes no arguments, is executed in the context of a popup buffer and returns a string or symbol that represents the group/context it belongs to. This function will group all popups under the symbol =my-popup-group=:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defun popper-group-by-my-rule () &#34;This function should return a string or symbol that is the name of the group this buffer belongs to. It is called with each popup buffer as current, so you can use buffer-local variables.&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;my-popup-group)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(setq popper-group-function #&#39;popper-group-by-my-rule) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Managing popup placement In keeping with the principle of least surprise, all popups are shown in the same location: At the bottom of the frame. You can customize =popper-display-function= to change how popups are displayed.&lt;/p&gt; &#xA;&lt;p&gt;However this means you can&#39;t have more than one popup open at a time. You may also want more control over where individual popups appear. For example, you may want an IDE-like set-up, with all help windows open on the right, REPLs on top and compilation windows at the bottom. This is best done by customizing Emacs&#39; =display-buffer-alist=. Since this is a [[https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Zen-of-Buffer-Display.html#The-Zen-of-Buffer-Display][singularly confusing task]], I recommend using =popper= with a package that locks window placements, /e.g./ [[https://depp.brause.cc/shackle/][Shackle]].&lt;/p&gt; &#xA;&lt;p&gt;*** Default popup placement: #+begin_src emacs-lisp (setq popper-display-control t) ;This is the DEFAULT behavior #+end_src You can customize =popper-display-function= to show popups any way you&#39;d like. Any =display-buffer= [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Display-Action-Functions.html][action function]] can work, or you can write your own. For example, setting it as #+BEGIN_SRC emacs-lisp (setq popper-display-function #&#39;display-buffer-in-child-frame) #+END_SRC will cause popups to be displayed in a child frame.&lt;/p&gt; &#xA;&lt;p&gt;*** Popup placement controlled using =display-buffer-alist= or =shackle.el=: If you already have rules in place for how various buffers should be displayed, such as by customizing =display-buffer-alist= or with =shackle.el=, popper will respect them once you set =popper-display-control= to nil:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package shackle ;; -- shackle rules here -- )&lt;/p&gt; &#xA;&lt;p&gt;(use-package popper ;; -- popper customizations here--&lt;/p&gt; &#xA;&lt;p&gt;:config (setq popper-display-control nil)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Suppressing popups Popper can suppress popups when they are first created. The buffer will be registered in the list of popups but will not show up on your screen. Instead, a message (&#34;Popup suppressed: $buffer-name&#34;) will be printed to the echo area. You can then raise it using =popper-toggle= or =popper-cycle= at your convenience. It behaves as a regular popup from that point on:&lt;/p&gt; &#xA;&lt;p&gt;[[https://user-images.githubusercontent.com/8607532/132929265-37eee976-131f-4631-9bad-73090bf17231.mp4]]&lt;/p&gt; &#xA;&lt;h1&gt;[[file:images/popper-hide-popup.gif]]&lt;/h1&gt; &#xA;&lt;p&gt;This is generally useful to keep buffers that are created as a side effect from interrupting your work.&lt;/p&gt; &#xA;&lt;p&gt;To specify popups to auto-hide, use a cons cell with the =hide= symbol when specifying =popup-reference-buffers=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq popper-reference-buffers &#39;((&#34;Output\*$&#34; . hide) (completion-list-mode . hide) occur-mode &#34;\&lt;em&gt;Messages\&lt;/em&gt;&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This assignment will suppress all buffers ending in =Output*= and the Completions buffer. The other entries are treated as normal popups.&lt;/p&gt; &#xA;&lt;p&gt;You can combine the hiding feature with predicates for classifying buffers as popups:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defun popper-shell-output-empty-p (buf) (and (string-match-p &#34;\&lt;em&gt;Async Shell Command\&lt;/em&gt;&#34; (buffer-name buf)) (= (buffer-size buf) 0)))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;popper-reference-buffers &#39;(popper-shell-output-empty-p . hide)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This assignment will suppress display of the async shell command output buffer, but only when there is no output (stdout). Once it is hidden it will be treated as a popup on par with other entries in =popper-reference-buffers=.&lt;/p&gt; &#xA;&lt;p&gt;** Mode line and Echo area customization&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To change the modeline string used by Popper (the default is &#34;POP&#34;), customize =popper-mode-line=. You can disable the modeline entirely by setting it to nil.&lt;/li&gt; &#xA; &lt;li&gt;You can change the keys used to access popups when using =popper-echo-mode= by customizing the =popper-echo-dispatch-keys= variable. To retain the display while removing the keymap, set this variable to =nil=.&lt;/li&gt; &#xA; &lt;li&gt;You can change the number of minibuffer lines used for display by =popper-echo-mode= by customizing =popper-echo-lines=.&lt;/li&gt; &#xA; &lt;li&gt;If you want to change the buffer names displayed in the echo area in some way (such as to color them by mode or truncate long names), you can customize the variable =popper-echo-transform-function=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives Packages like [[https://github.com/amno1/emacs-term-toggle][Term Toggle]] and [[https://github.com/4DA/eshell-toggle][eshell toggle]] give you an easy way to access a &#34;dropdown&#34; terminal. Popper can be used for this almost trivially, but it&#39;s a much more general solution for buffer management and access.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Packages like [[https://depp.brause.cc/shackle/][Shackle]] help with specifying how certain buffers should be displayed, but don&#39;t give you an easy way to access them beyond calling display-buffer. Popper is mainly concerned with the latter and is thus more or less orthogonal to Shackle. Moreover, most window management packages for Emacs are opinionated in how windows should be displayed, or provide an additional API to customize this (e.g. [[https://github.com/emacsorphanage/popwin][Popwin]]). While Popper defaults to displaying popups a certain way, it tries to stay out of the business of display rules and focuses on providing one-key access to the buffers you&#39;re most likely to need next.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Technical notes =popper= uses a buffer local variable (=popper-popup-status=) to identify if a given buffer should be treated as a popup. Matching is always by buffer and not window, so having two windows of a buffer, one treated as a popup and one as a regular window, isn&#39;t possible (although you can do this with indirect clones). In addition, it maintains an alist of popup windows/buffers for cycling through.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, it installs a single rule in =display-buffer-alist= to handle displaying popups. If =popper-display-control= is set to =nil=, this rule is ignored. You can change how the popups are shown by customizing =popper-display-function=, the function used by =display-buffer= to display popups, although you are better off customizing =display-buffer-alist= directly or using Shackle.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Exafunction/codeium.el</title>
    <updated>2024-07-01T01:48:27Z</updated>
    <id>tag:github.com,2024-07-01:/Exafunction/codeium.el</id>
    <link href="https://github.com/Exafunction/codeium.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free, ultrafast Copilot alternative for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; alt=&#34;Codeium&#34; src=&#34;https://raw.githubusercontent.com/Exafunction/codeium.el/main/codeium.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/3XFf78nAx5&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1027685395649015980?label=community&amp;amp;color=5865F2&amp;amp;logo=discord&amp;amp;logoColor=FFFFFF&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=codeiumdev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style--blue?style=social&amp;amp;logo=twitter&amp;amp;label=Follow%20%40codeiumdev&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/Exafunction/codeium.vim&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://codeium.com?repo_name=exafunction%2Fcodeium.el&#34;&gt;&lt;img src=&#34;https://codeium.com/badges/main&#34; alt=&#34;built with Codeium&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Codeium.codeium&#34;&gt;&lt;img src=&#34;https://img.shields.io/visual-studio-marketplace/i/Codeium.codeium?label=Visual%20Studio&amp;amp;logo=visualstudio&#34; alt=&#34;Visual Studio&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/20540-codeium/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/d/20540?label=JetBrains&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open-vsx.org/extension/Codeium/codeium&#34;&gt;&lt;img src=&#34;https://img.shields.io/open-vsx/dt/Codeium/codeium?label=Open%20VSX&#34; alt=&#34;Open VSX&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/codeium/hobjkcpmjhlegmobgonaagepfckjkceh&#34;&gt;&lt;img src=&#34;https://img.shields.io/chrome-web-store/users/hobjkcpmjhlegmobgonaagepfckjkceh?label=Google%20Chrome&amp;amp;logo=googlechrome&amp;amp;logoColor=FFFFFF&#34; alt=&#34;Google Chrome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;codeium.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Free, ultrafast, extensible AI code completion tool for Emacs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Codeium autocompletes your code with AI in all major IDEs. We &lt;a href=&#34;https://www.codeium.com/blog/codeium-copilot-alternative-in-emacs&#34;&gt;launched&lt;/a&gt; this implementation of the Codeium plugin for Emacs to bring this modern coding superpower to more developers. Check out our &lt;a href=&#34;https://www.codeium.com/playground&#34;&gt;playground&lt;/a&gt; if you want to quickly try out Codeium online.&lt;/p&gt; &#xA;&lt;p&gt;codeium.el provides a &lt;code&gt;completion-at-point-functions&lt;/code&gt; backend. It is designed to be use with a front-end, such as &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company-mode&lt;/a&gt;, &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;, or the built-in &lt;code&gt;completion-at-point&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;codeium.el is an open source client and (mostly) written by &lt;a href=&#34;https://github.com/Alan-Chen99&#34;&gt;Alan Chen&lt;/a&gt;. It uses a proprietary language server binary, currently downloaded (automatically, with confirmation) from &lt;a href=&#34;https://github.com/Exafunction/codeium/releases/&#34;&gt;here&lt;/a&gt;. Use &lt;code&gt;M-x codeium-diagnose&lt;/code&gt; to see apis/fields that would be sent to the local language server, and the command used to run the local language server. Customize &lt;code&gt;codeium-api-enabled&lt;/code&gt;, &lt;code&gt;codeium-fields-regexps&lt;/code&gt; and &lt;code&gt;codeium-command&lt;/code&gt; to change them.&lt;/p&gt; &#xA;&lt;p&gt;Contributions are welcome! Feel free to submit pull requests and issues related to the package.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7545794/219270660-f14ddb8c-7087-4d97-9a15-b043467a2c00.gif&#34; alt=&#34;Emacs Demo - Final&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;🚀 Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install a text-completion frontend of your choice. (We recommend &lt;a href=&#34;https://company-mode.github.io/&#34;&gt;company-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/minad/corfu&#34;&gt;corfu&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;Exafunction/codeium.el&lt;/code&gt; using your emacs package manager of choice, or manually. See &lt;a href=&#34;https://raw.githubusercontent.com/Exafunction/codeium.el/main/#-installation-options&#34;&gt;Installation Options&lt;/a&gt; below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;M-x codeium-install&lt;/code&gt; to set up the package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;codeium-completion-at-point&lt;/code&gt; to your &lt;code&gt;completion-at-point-functions&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start seeing suggestions!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🛠️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can see all customization options via &lt;code&gt;M-x customize&lt;/code&gt;. (better documentation coming soon!)&lt;/p&gt; &#xA;&lt;p&gt;Here is an example configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; we recommend using use-package to organize your init.el&#xA;(use-package codeium&#xA;    ;; if you use straight&#xA;    ;; :straight &#39;(:type git :host github :repo &#34;Exafunction/codeium.el&#34;)&#xA;    ;; otherwise, make sure that the codeium.el file is on load-path&#xA;&#xA;    :init&#xA;    ;; use globally&#xA;    (add-to-list &#39;completion-at-point-functions #&#39;codeium-completion-at-point)&#xA;    ;; or on a hook&#xA;    ;; (add-hook &#39;python-mode-hook&#xA;    ;;     (lambda ()&#xA;    ;;         (setq-local completion-at-point-functions &#39;(codeium-completion-at-point))))&#xA;&#xA;    ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):&#xA;    ;; (add-hook &#39;python-mode-hook&#xA;    ;;     (lambda ()&#xA;    ;;         (setq-local completion-at-point-functions&#xA;    ;;             (list (cape-super-capf #&#39;codeium-completion-at-point #&#39;lsp-completion-at-point)))))&#xA;    ;; an async company-backend is coming soon!&#xA;&#xA;    ;; codeium-completion-at-point is autoloaded, but you can&#xA;    ;; optionally set a timer, which might speed up things as the&#xA;    ;; codeium local language server takes ~0.2s to start up&#xA;    ;; (add-hook &#39;emacs-startup-hook&#xA;    ;;  (lambda () (run-with-timer 0.1 nil #&#39;codeium-init)))&#xA;&#xA;    ;; :defer t ;; lazy loading, if you want&#xA;    :config&#xA;    (setq use-dialog-box nil) ;; do not use popup boxes&#xA;&#xA;    ;; if you don&#39;t want to use customize to save the api-key&#xA;    ;; (setq codeium/metadata/api_key &#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#34;)&#xA;&#xA;    ;; get codeium status in the modeline&#xA;    (setq codeium-mode-line-enable&#xA;        (lambda (api) (not (memq api &#39;(CancelRequest Heartbeat AcceptCompletion)))))&#xA;    (add-to-list &#39;mode-line-format &#39;(:eval (car-safe codeium-mode-line)) t)&#xA;    ;; alternatively for a more extensive mode-line&#xA;    ;; (add-to-list &#39;mode-line-format &#39;(-50 &#34;&#34; codeium-mode-line) t)&#xA;&#xA;    ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server&#xA;    (setq codeium-api-enabled&#xA;        (lambda (api)&#xA;            (memq api &#39;(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))&#xA;    ;; you can also set a config for a single buffer like this:&#xA;    ;; (add-hook &#39;python-mode-hook&#xA;    ;;     (lambda ()&#xA;    ;;         (setq-local codeium/editor_options/tab_size 4)))&#xA;&#xA;    ;; You can overwrite all the codeium configs!&#xA;    ;; for example, we recommend limiting the string sent to codeium for better performance&#xA;    (defun my-codeium/document/text ()&#xA;        (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))&#xA;    ;; if you change the text, you should also change the cursor_offset&#xA;    ;; warning: this is measured by UTF-8 encoded bytes&#xA;    (defun my-codeium/document/cursor_offset ()&#xA;        (codeium-utf8-byte-length&#xA;            (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))&#xA;    (setq codeium/document/text &#39;my-codeium/document/text)&#xA;    (setq codeium/document/cursor_offset &#39;my-codeium/document/cursor_offset))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example configuration for company-mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package company&#xA;    :defer 0.1&#xA;    :config&#xA;    (global-company-mode t)&#xA;    (setq-default&#xA;        company-idle-delay 0.05&#xA;        company-require-match nil&#xA;        company-minimum-prefix-length 0&#xA;&#xA;        ;; get only preview&#xA;        company-frontends &#39;(company-preview-frontend)&#xA;        ;; also get a drop down&#xA;        ;; company-frontends &#39;(company-pseudo-tooltip-frontend company-preview-frontend)&#xA;        ))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also access codeium.el from elisp; here is a snippet that returns the full response of a &lt;code&gt;GetCompletions&lt;/code&gt; request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(cl-letf*&#xA;    (&#xA;        ;; making a new codeium-state (thus a new local language server process)&#xA;        ;; takes ~0.2 seconds; avoid when possible&#xA;        (state (codeium-state-make :name &#34;example&#34;))&#xA;        ((codeium-config &#39;codeium/document/text state) &#34;def fibi(n):&#34;)&#xA;        ((codeium-config &#39;codeium/document/cursor_offset state) 12)&#xA;        ((codeium-config &#39;codeium-api-enabled state) (lambda (api) (eq api &#39;GetCompletions))))&#xA;    (unwind-protect&#xA;        (progn&#xA;            (codeium-init state)&#xA;            ;; make async requests using codeium-request&#xA;            (cdr (codeium-request-synchronously &#39;GetCompletions state nil)))&#xA;        ;; cleans up temp files, kill process. Scheduled async requests on this state will be dropped.&#xA;        (codeium-reset state)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, among other things, you get probabilities for each token! We would love to see a PR or your own package that uses those!&lt;/p&gt; &#xA;&lt;h2&gt;💾 Installation Options&lt;/h2&gt; &#xA;&lt;h3&gt;➡️ straight.el&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(straight-use-package &#39;(codeium :type git :host github :repo &#34;Exafunction/codeium.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💀 Doom Emacs&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;packages.el&lt;/code&gt; add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package! codeium :recipe (:host github :repo &#34;Exafunction/codeium.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the example configuration to your &lt;code&gt;config.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;💪 Manual&lt;/h3&gt; &#xA;&lt;p&gt;Run the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 https://github.com/Exafunction/codeium.el ~/.emacs.d/codeium.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;~/.emacs.d/codeium.el&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Do you have a working installation for another Emacs environment (Spacemacs)? Submit a PR so we can share it with others!&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alexluigit/dirvish</title>
    <updated>2024-07-01T01:48:27Z</updated>
    <id>tag:github.com,2024-07-01:/alexluigit/dirvish</id>
    <link href="https://github.com/alexluigit/dirvish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A polished Dired with batteries included.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;#+AUTHOR: Alex Lu #+EMAIL: &lt;a href=&#34;mailto:alexluigit@gmail.com&#34;&gt;alexluigit@gmail.com&lt;/a&gt; #+startup: content #+html: &lt;img src=&#34;https://user-images.githubusercontent.com/16313743/159204052-c8caf89d-c44f-42c7-a177-4cd2491eaab6.svg?sanitize=true&#34; align=&#34;center&#34; width=&#34;100%&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;#+html: &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;A &lt;i&gt;polished&lt;/i&gt; &lt;b&gt;Dired&lt;/b&gt; with batteries included&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_quote The experience of dirvish is surreal and even bizarre after all these years of trying to use dired. Like how professionals make their craft look easy, dirvish does something similar with how it builds on dired. Dirvish is paradoxical in that it provides a completely different experience while still fundamentally being dired at its core.&lt;/p&gt; &#xA;&lt;p&gt;-- @noctuid ([[https://github.com/alexluigit/dirvish/issues/34][source]]) #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;Dirvish is an improved version of the Emacs inbuilt package [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]]. It not only gives Dired an appealing and highly customizable user interface, but also comes together with almost all possible parts required for full usability as a modern file manager.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://user-images.githubusercontent.com/16313743/189978788-900b3de7-b3e5-42a6-9f28-426e1e80c314.png][https://user-images.githubusercontent.com/16313743/189978788-900b3de7-b3e5-42a6-9f28-426e1e80c314.png]]&lt;/p&gt; &#xA;&lt;p&gt;[[https://user-images.githubusercontent.com/16313743/189978802-f6fb09ea-13a2-4dc9-828b-992523d51dd5.png][https://user-images.githubusercontent.com/16313743/189978802-f6fb09ea-13a2-4dc9-828b-992523d51dd5.png]]&lt;/p&gt; &#xA;&lt;p&gt;[[https://user-images.githubusercontent.com/16313743/190370038-1d64a7aa-ac1c-4436-a2a3-05cd801de0a4.png][https://user-images.githubusercontent.com/16313743/190370038-1d64a7aa-ac1c-4436-a2a3-05cd801de0a4.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prerequisites&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package requires =GNU ls= (&lt;del&gt;gls&lt;/del&gt; on macOS), and /optionally/:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=fd= as a faster alternative to =find=&lt;/li&gt; &#xA; &lt;li&gt;=imagemagick= for image preview&lt;/li&gt; &#xA; &lt;li&gt;=poppler= | =pdf-tools= for pdf preview&lt;/li&gt; &#xA; &lt;li&gt;=ffmpegthumbnailer= for video preview&lt;/li&gt; &#xA; &lt;li&gt;=mediainfo= for audio/video metadata generation&lt;/li&gt; &#xA; &lt;li&gt;=tar= and =unzip= for archive files preview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;@@html:&lt;/p&gt;&#xA;&lt;details&gt;&#xA; @@ @@html:&#xA; &lt;summary&gt;@@ @@html:&lt;b&gt;@@Toggle install instructions@@html:&lt;/b&gt;@@ @@html:&lt;/summary&gt;@@&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;@@html:&lt;/p&gt;&#xA; &lt;h2&gt;@@macOS@@html:&lt;/h2&gt;@@ #+begin_src bash brew install coreutils fd poppler ffmpegthumbnailer mediainfo imagemagick #+end_src&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;@@html:&lt;/p&gt;&#xA; &lt;h2&gt;@@Debian-based@@html:&lt;/h2&gt;@@ #+begin_src bash apt install fd-find poppler-utils ffmpegthumbnailer mediainfo imagemagick tar unzip #+end_src&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;@@html:&lt;/p&gt;&#xA; &lt;h2&gt;@@Arch-based@@html:&lt;/h2&gt;@@ #+begin_src bash pacman -S fd poppler ffmpegthumbnailer mediainfo imagemagick tar unzip #+end_src&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;@@html:&lt;/p&gt;&#xA; &lt;h2&gt;@@FreeBSD@@html:&lt;/h2&gt;@@ #+begin_src bash pkg install gnuls fd-find poppler ffmpegthumbnailer ImageMagick7 gtar #+end_src&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;@@html:&lt;/p&gt;&#xA; &lt;h2&gt;@@Windows (untested)@@html:&lt;/h2&gt;@@ #+begin_src bash&#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;h1&gt;install via Scoop: &lt;a href=&#34;https://scoop.sh/&#34;&gt;https://scoop.sh/&lt;/a&gt;&lt;/h1&gt; &#xA; &lt;p&gt;scoop install coreutils fd poppler imagemagick unzip #+end_src&lt;/p&gt; &#xA; &lt;p&gt;@@html:&lt;/p&gt;&#xA;&lt;/details&gt;@@&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dirvish is available on [[https://melpa.org/#/dirvish][Melpa]]. Just type =M-x package-install RET dirvish RET= into Emacs 27.1+. =el-get= users can get the recipe from [[https://github.com/alexluigit/dirvish/issues/90][here]].&lt;/p&gt; &#xA;&lt;p&gt;For straight.el users, it is simply: #+begin_src emacs-lisp (straight-use-package &#39;dirvish) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quickstart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After installation, let Dirvish take over Dired globally: #+begin_src emacs-lisp (dirvish-override-dired-mode) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=M-x dirvish RET=&lt;/p&gt; &lt;p&gt;Welcome to Dirvish! Press =?= for help.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=M-x dired= | =dired-jump= | ... =RET=&lt;/p&gt; &lt;p&gt;Dirvish takes care all of your Dired entries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=M-x dirvish-dwim RET=&lt;/p&gt; &lt;p&gt;If the selected window is the only window, open Dirvish, otherwise open Dired.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[file:docs/CUSTOMIZING.org][Customizing]]&lt;/li&gt; &#xA; &lt;li&gt;[[file:docs/EXTENSIONS.org][Extensions]]&lt;/li&gt; &#xA; &lt;li&gt;[[file:docs/COMPARISON.org][Related projects]]&lt;/li&gt; &#xA; &lt;li&gt;[[file:docs/CHANGELOG.org][Changelog]]&lt;/li&gt; &#xA; &lt;li&gt;[[file:docs/EMACS-NEWCOMERS.org][Absolute beginner&#39;s guide]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/alexluigit/dirvish/discussions][Discussions]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package took inspiration from the terminal file manager [[https://github.com/ranger/ranger][ranger]] and [[https://github.com/Alexander-Miller/treemacs][treemacs]] from Alexander Miller. Some of the extensions was initially a rewrite of packages provided by [[https://github.com/Fuco1/dired-hacks][dired-hacks]]. These extensions have been greatly enhanced in comparison to the original versions.&lt;/p&gt; &#xA;&lt;p&gt;Thanks Fox Kiester (@noctuid) for the awesome [[https://github.com/alexluigit/dirvish/issues/34][summary]] of Dirvish.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Code contributions&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;p&gt;@@html:&lt;a href=&#34;https://github.com/alexluigit/dirvish/graphs/contributors&#34;&gt;@@ @@html:&lt;img src=&#34;https://contrib.rocks/image?repo=alexluigit/dirvish&#34;&gt;@@ @@html:&lt;/a&gt;@@&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Useful advice and discussions&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/noctuid][Fox Kiester]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jdtsmith][JD Smith]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/karthink][karthink]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/gcv][gcv]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/aikrahguzar][aikrahguzar]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad][Daniel Mendler]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The name &lt;em&gt;dirvish&lt;/em&gt; is a tribute to [[https://github.com/justinmk/vim-dirvish][vim-dirvish]].&lt;/h2&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/dirvish][file:https://melpa.org/packages/dirvish-badge.svg]] [[https://stable.melpa.org/#/dirvish][file:https://stable.melpa.org/packages/dirvish-badge.svg]] [[https://github.com/alexluigit/dirvish/actions/workflows/melpazoid.yml][file:https://github.com/alexluigit/dirvish/actions/workflows/melpazoid.yml/badge.svg]]&lt;/p&gt;</summary>
  </entry>
</feed>