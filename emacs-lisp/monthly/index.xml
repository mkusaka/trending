<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-01T02:39:17Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>protesilaos/denote</title>
    <updated>2022-08-01T02:39:17Z</updated>
    <id>tag:github.com,2022-08-01:/protesilaos/denote</id>
    <link href="https://github.com/protesilaos/denote" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple notes for Emacs with an efficient file-naming scheme&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;denote: Simple notes with an efficient file-naming scheme&lt;/h1&gt; &#xA;&lt;p&gt;Denote is a simple note-taking tool for Emacs. It is based on the idea that notes should follow a predictable and descriptive file-naming scheme. The file name must offer a clear indication of what the note is about, without reference to any other metadata. Denote basically streamlines the creation of such files while providing facilities to link between them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://protesilaos.com/codelog/2022-06-18-denote-demo/&#34;&gt;Watch the video demo that was produced before version 0.1.0 of the package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Package name (GNU ELPA): &lt;code&gt;denote&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Official manual: &lt;a href=&#34;https://protesilaos.com/emacs/denote&#34;&gt;https://protesilaos.com/emacs/denote&lt;/a&gt; (the manual is installed with the package---evaluate &lt;code&gt;(info &#34;(denote) Top&#34;)&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Change log: &lt;a href=&#34;https://protesilaos.com/emacs/denote-changelog&#34;&gt;https://protesilaos.com/emacs/denote-changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git repo on SourceHut: &lt;a href=&#34;https://git.sr.ht/~protesilaos/denote&#34;&gt;https://git.sr.ht/~protesilaos/denote&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mirrors: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/protesilaos/denote&#34;&gt;https://github.com/protesilaos/denote&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;GitLab: &lt;a href=&#34;https://gitlab.com/protesilaos/denote&#34;&gt;https://gitlab.com/protesilaos/denote&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;https://lists.sr.ht/~protesilaos/denote&#34;&gt;https://lists.sr.ht/~protesilaos/denote&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>plexus/chemacs2</title>
    <updated>2022-08-01T02:39:17Z</updated>
    <id>tag:github.com,2022-08-01:/plexus/chemacs2</id>
    <link href="https://github.com/plexus/chemacs2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs version switcher, improved&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+BEGIN_SRC ___ ___ ___ ___ ___ ___ ___ / /\ /&lt;strong&gt;/\ / /\ /&lt;/strong&gt;/\ / /\ / /\ / /&lt;br&gt; / /:/ \ :\ / /:/_ | |::\ / /::\ / /:/ / /:/_ / /:/ _&lt;em&gt;:\ / /:/ /\ | |:|:\ / /:/:\ / /:/ / /:/ /&lt;br&gt; / /:/ ___ ___ / /::\ / /:/ /:/&lt;/em&gt; &lt;strong&gt;|&lt;/strong&gt;|:|:\ / /:/&lt;del&gt;/::\ / /:/ ___ / /:/ /::&lt;br&gt; /&lt;strong&gt;/:/ / /\ /&lt;/strong&gt;/\ /:/:\ /&lt;strong&gt;/:/ /:/ /\ /&lt;/strong&gt;/::::| :\ /&lt;strong&gt;/:/ /:/:\ /&lt;/strong&gt;/:/ / /\ /&lt;strong&gt;/:/ /:/:&lt;br&gt; \ :\ / /:/ \ :/:/&lt;/strong&gt;/ \ :/:/ /:/ \ :~&lt;/del&gt;_&lt;em&gt;/ \ :/:/__/ \ :\ / /:/ \ :/:/~/:/ \ :\ /:/ \ ::/ \ ::/ /:/ \ :\ \ ::/ \ :\ /:/ \ \2.0 /:/ \ :/:/ \ :\ \ :/:/ \ :\ \ :\ \ :/:/ _&lt;/em&gt;/ /:/ \ ::/ \ :\ \ ::/ \ :\ \ :\ \ ::/ /__/:/ _&lt;em&gt;/ _&lt;/em&gt;/ _&lt;em&gt;/ _&lt;/em&gt;/ _&lt;em&gt;/ _&lt;/em&gt;/ __/&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                      222222222222222&#xA;                                     2:::::::::::::::22&#xA;                                     2::::::222222:::::2&#xA;                                     2222222     2:::::2&#xA;                                                 2:::::2&#xA;                                                 2:::::2&#xA;                                              2222::::2&#xA;                                         22222::::::22&#xA;                                       22::::::::222&#xA;                                      2:::::22222&#xA;                                     2:::::2&#xA;                                     2:::::2&#xA;                                     2:::::2       222222&#xA;                                     2::::::2222222:::::2&#xA;                                     2::::::::::::::::::2&#xA;                                     22222222222222222222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chemacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Chemacs 2 is an Emacs profile switcher, it makes it easy to run multiple Emacs configurations side by side.&lt;/p&gt; &#xA;&lt;p&gt;Think of it as a bootloader for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;** Differences from Chemacs 1&lt;/p&gt; &#xA;&lt;p&gt;Emacs intialization used to have a single entry point, either =&lt;del&gt;/.emacs= or =&lt;/del&gt;/.emacs.d/init.el=. More recent Emacsen have introduced a second startup script, =~/.emacs.d/early-init.el=, which runs earlier in the boot process, and can be used for things that should happen very early on, like tweaking the GC, or disabling UI elements.&lt;/p&gt; &#xA;&lt;p&gt;Chemacs 2 supports =early-init.el=, Chemacs 1 does not. This does also imply that Chemacs 2 needs to be installed as =&lt;del&gt;/.emacs.d= (a directory), rather than simply linking it to =&lt;/del&gt;/.emacs= (a single file).&lt;/p&gt; &#xA;&lt;p&gt;** Rationale&lt;/p&gt; &#xA;&lt;p&gt;Emacs configuration is either kept in a =&lt;del&gt;/.emacs= file or, more commonly, in a =&lt;/del&gt;/.emacs.d= directory. These paths are hard-coded. If you want to try out someone else&#39;s configuration, or run different distributions like Prelude or Spacemacs, then you either need to swap out =~/.emacs.d=, or run Emacs with a different =$HOME= directory set.&lt;/p&gt; &#xA;&lt;p&gt;This last approach is quite common, but has some real drawbacks, since now packages will no longer know where your actual home directory is.&lt;/p&gt; &#xA;&lt;p&gt;All of these makes trying out different Emacs configurations and distributions needlessly cumbersome.&lt;/p&gt; &#xA;&lt;p&gt;Various approaches to solving this have been floated over the years. There&#39;s an Emacs patch around that adds an extra command line option, and various examples of how to add a command line option in userspace from Emacs Lisp.&lt;/p&gt; &#xA;&lt;p&gt;Chemacs tries to implement this idea in a user-friendly way, taking care of the various edge cases and use cases that come up.&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;Clone the Chemacs 2 repository as =$HOME/.emacs.d=. Note that if you already have an Emacs setup in =&lt;del&gt;/.emacs.d= you need to move it out of the way first. If you have an =&lt;/del&gt;/.emacs= startup script then move that out of the way as well.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell [ -f ~/.emacs ] &amp;amp;&amp;amp; mv ~/.emacs ~/.emacs.bak [ -d ~/.emacs.d ] &amp;amp;&amp;amp; mv ~/.emacs.d ~/.emacs.default git clone &lt;a href=&#34;https://github.com/plexus/chemacs2.git&#34;&gt;https://github.com/plexus/chemacs2.git&lt;/a&gt; ~/.emacs.d #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Note that this is different from Chemacs 1. Before Chemacs installed itself as =&lt;del&gt;/.emacs= and you could have your own default setup in =&lt;/del&gt;/.emacs.d=. This approach no longer works because of =&lt;del&gt;/.emacs.d/early-init.el=, so Chemacs 2 needs to be installed as =&lt;/del&gt;/.emacs.d=.&lt;/p&gt; &#xA;&lt;p&gt;Next you will need to create a =~/.emacs-profiles.el= file, for details see below.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ((&#34;default&#34; . ((user-emacs-directory . &#34;~/.emacs.default&#34;)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;Chemacs adds an extra command line option to Emacs, =--with-profile=. Profiles are configured in =~/.emacs-profiles.el=.&lt;/p&gt; &#xA;&lt;p&gt;If no profile is given at the command line then the environment variable CHEMACS_PROFILE is used. If this environment variables isn&#39;t set then the =default= profile is used.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell $ emacs --with-profile my-profile #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;There is an option for using profile that is not preconfigured in =~/.emacs-profiles.el=. To accomplish that you can directly provide the profile via the command line, like so #+BEGIN_SRC shell $ emacs --with-profile &#39;((user-emacs-directory . &#34;/path/to/config&#34;))&#39; #+END_SRC This method supports all the profile options given below.&lt;/p&gt; &#xA;&lt;p&gt;** .emacs-profiles.el&lt;/p&gt; &#xA;&lt;p&gt;This file contains an association list, with the keys/cars being the profile names, and the values/cdrs their configuration.&lt;/p&gt; &#xA;&lt;p&gt;The main thing to configure is the =user-emacs-directory=&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ((&#34;default&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/.emacs.default&#34;))) (&#34;spacemacs&#34; . ((user-emacs-directory . &#34;&lt;/del&gt;/spacemacs&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Chemacs will set this to be the =user-emacs-directory= in use, and load =init.el= from that directory.&lt;/p&gt; &#xA;&lt;p&gt;Other things you can configure&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=custom-file= : The file where Customize stores its customizations. If this isn&#39;t configured, and the =custom-file= variable is still unset after loading the profile&#39;s =init.el=, then this will get set to the profile&#39;s =init.el=&lt;/li&gt; &#xA; &lt;li&gt;=server-name= : Sets the =server-name= variable, so you can distinguish multiple instances with =emacsclient -s &#xA;  &lt;server-name&gt;&#xA;   =.&#xA;  &lt;/server-name&gt;&lt;/li&gt; &#xA; &lt;li&gt;=env= An association list of environment variables. These will get set before loading the profile, so they can influence the initialization, and they are visible to any subprocesses spawned from Emacs.&lt;/li&gt; &#xA; &lt;li&gt;=straight-p= Enable the [[https://github.com/raxod502/straight.el][Straight]] functional package manager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Store =.emacs-profiles.el= together with your dotfiles. If you&#39;re not yet keeping a version controlled directory of dotfiles, then check out [[https://github.com/plexus/dotfiles/blob/master/connect-the-dots][connect-the-dots]] for a helpful script to do that.&lt;/p&gt; &#xA;&lt;p&gt;** Changing the default profile (e.g. for GUI editors)&lt;/p&gt; &#xA;&lt;p&gt;Where it is not possible to use the =--with-profile= flag or the CHEMACS_PROFILE environment variable, the default profile can be set using a =~/.emacs-profile= file.&lt;/p&gt; &#xA;&lt;p&gt;If your =~/.emacs-profiles.el= file contains the following:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ((&#34;default&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/.emacs.default&#34;))) (&#34;spacemacs&#34; . ((user-emacs-directory . &#34;&lt;/del&gt;/spacemacs&#34;))) (&#34;prelude&#34; . ((user-emacs-directory . &#34;~/prelude&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;you can create a file called =~/.emacs-profile=, containing the name of the profile you&#39;d like to be used when none is given on the command line:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell $ echo &#39;spacemacs&#39; &amp;gt; ~/.emacs-profile #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This will set the default profile to be the &#34;spacemacs&#34; profile, instead of &#34;default&#34;. You can change the default by simply changing the contents of this file:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell $ echo &#39;prelude&#39; &amp;gt; ~/.emacs-profile #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;If this file doesn&#39;t exist, then &#34;default&#34; will be used, as before.&lt;/p&gt; &#xA;&lt;p&gt;** Spacemacs&lt;/p&gt; &#xA;&lt;p&gt;Spacemacs is typically installed by cloning the Spacemacs repo to =&lt;del&gt;/.emacs.d=, and doing extra customization from =&lt;/del&gt;/.spacemacs= or =~/.spacemacs.d/init.el=. This makes it tedious to switch between version of Spacemacs, or between different Spacemacs configurations.&lt;/p&gt; &#xA;&lt;p&gt;With Chemacs you can point your =user-emacs-directory= to wherever you have Spacemacs installed, and use the =SPACEMACSDIR= environment variable to point at a directory with customizations that are applied on top of the base install.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ((&#34;spacemacs&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/spacemacs&#34;) (env . ((&#34;SPACEMACSDIR&#34; . &#34;&lt;/del&gt;/.spacemacs.d&#34;)))))&lt;/p&gt; &#xA;&lt;p&gt;(&#34;spacemacs-develop&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/spacemacs/develop&#34;) (env . ((&#34;SPACEMACSDIR&#34; . &#34;&lt;/del&gt;/.spacemacs.d&#34;)))))&lt;/p&gt; &#xA;&lt;p&gt;(&#34;new-config&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/spacemacs/develop&#34;) (env . ((&#34;SPACEMACSDIR&#34; . &#34;&lt;/del&gt;/my-spacemacs-config&#34;)))))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** DOOM emacs&lt;/p&gt; &#xA;&lt;p&gt;You can add an entry similar to the following to your =.emacs-profiles.el=&lt;/p&gt; &#xA;&lt;p&gt;In the following snippet =~/doom-emacs= is where you have cloned doom emacs.&lt;/p&gt; &#xA;&lt;p&gt;(Depending on when you read this) =DOOMDIR= support is only in =develop= branch of doom emacs. Check commit history of =master= branch of doom emacs&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (&#34;doom&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/doom-emacs&#34;) (env . ((&#34;DOOMDIR&#34; . &#34;&lt;/del&gt;/doom-config&#34;))))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Please refer to [[https://github.com/plexus/chemacs/issues/5][this]] discussion for details.&lt;/p&gt; &#xA;&lt;p&gt;** FreeDesktop Directories&lt;/p&gt; &#xA;&lt;p&gt;Both =&lt;del&gt;/.emacs-profiles.el= and =&lt;/del&gt;/.emacs-profile= can also be stored under =$XDG_CONFIG_HOME/chemacs= (typically =~/.config/chemacs=) as =$XGD_CONFIG_HOME/chemacs/profiles.el= and =$XDG_CONFIG_HOME/chemacs/profile= respectively.&lt;/p&gt; &#xA;&lt;p&gt;Further, as indicated by the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS?h=emacs-27][Emacs 27.1 changelog]], Emacs is now compatible with XDG Standards, looking for its configuration files in =${XDG_CONFIG_HOME}/emacs= directory too (provided the traditional =&lt;del&gt;/.emacs.d= and =&lt;/del&gt;/.emacs= does not exist). Therefore, it is perfectly viable to install Chemacs 2 in =${XDG_CONFIG_HOME}/emacs= (usually =&lt;del&gt;/.config/emacs=) directory - with the aforementioned caveat: _the directory =&lt;/del&gt;/.emacs.d&#34;= and the file =&#34;~/.emacs&#34;= does not exist_.&lt;/p&gt; &#xA;&lt;p&gt;** Example: emacs as daemon&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Profiles You can add an entry similar to the following to your =.emacs-profiles.el= #+BEGIN_SRC emacs-lisp ;; your custom or vanilla emacs profile ((&#34;default&#34; . ((user-emacs-directory . &#34;~/.gnu-emacs&#34;) (server-name . &#34;gnu&#34;) ))&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;;; emacs distribution: DOOM-emacs (&#34;doom&#34; . ((user-emacs-directory . &#34;&lt;del&gt;/.doom-emacs&#34;) (server-name . &#34;doom&#34;) (env . ((&#34;DOOMDIR&#34; . &#34;&lt;/del&gt;/.doom.d&#34;))) )) ) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;daemon Set emacs daemon to always run in background #+begin_src bash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;vanilla&lt;/h1&gt; &#xA;&lt;p&gt;emacs --daemon &amp;amp;&lt;/p&gt; &#xA;&lt;h1&gt;Doom emacs&lt;/h1&gt; &#xA;&lt;p&gt;emacs --with-profile doom --daemon &amp;amp; #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;emacsclient create a new frame, connect to the socket and use vanilla emacs as fallback #+begin_src bash emacsclient -c -s gnu -a emacs emacsclient -c -s doom -a emacs #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Troubleshooting&lt;/p&gt; &#xA;&lt;p&gt;*** Emacs cannot find packages installed by straight Some users have [[https://github.com/plexus/chemacs2/issues/31][reported issues]] where packages installed by &lt;code&gt;straight.el&lt;/code&gt; can no longer be found after switching to using &lt;code&gt;chemacs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, make sure you haven&#39;t hardcoded filepaths to &#34;emacs.d&#34; in your configuration. You should reference files inside a profile-specific emacs folder like this:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq some-var (expand-file-name &#34;path/to/file&#34; user-emacs-directory)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Second, if the issue persists you should delete the &lt;code&gt;build&lt;/code&gt; folder in your &lt;code&gt;straight&lt;/code&gt; directory and rebuild your dependencies.&lt;/p&gt; &#xA;&lt;p&gt;If the issue persists please [[https://github.com/plexus/chemacs2/issues/31][comment on the issue]], because we are still trying to figure out the exact source of this problem, but this has solved the problem for some users.&lt;/p&gt; &#xA;&lt;p&gt;** LICENSE&lt;/p&gt; &#xA;&lt;p&gt;Copyright © Arne Brasseur and contributors, 2018-2022&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the terms of the GPL v3.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abo-abo/swiper</title>
    <updated>2022-08-01T02:39:17Z</updated>
    <id>tag:github.com,2022-08-01:/abo-abo/swiper</id>
    <link href="https://github.com/abo-abo/swiper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, man!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/abo-abo/swiper/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/abo-abo/swiper/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;flexible, simple tools for minibuffer completion in Emacs&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ivy&lt;/strong&gt;, a generic completion mechanism for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Counsel&lt;/strong&gt;, a collection of Ivy-enhanced versions of common Emacs commands.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Swiper&lt;/strong&gt;, an Ivy-enhanced alternative to Isearch.&lt;/p&gt; &#xA;&lt;h1&gt;Ivy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/devel/ivy.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/ivy.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/ivy.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/ivy.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/ivy&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/ivy-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/ivy&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/ivy-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ivy is a generic completion mechanism for Emacs. While it operates similarly to other completion schemes such as &lt;code&gt;icomplete-mode&lt;/code&gt;, Ivy aims to be more efficient, smaller, simpler, and smoother to use yet highly customizable.&lt;/p&gt; &#xA;&lt;p&gt;To try Ivy, just call &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;ivy-mode&lt;/code&gt;. This will enable generic Ivy completion, including specific completion for file and buffer names.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;ivy&lt;/code&gt; package from GNU ELPA or MELPA.&lt;/p&gt; &#xA;&lt;p&gt;Users of Debian ≥10 (and derivatives such as Ubuntu ≥18.04) can install Ivy, Counsel, and Swiper with &lt;code&gt;sudo apt install elpa-counsel&lt;/code&gt;. To add Hydra support &lt;code&gt;sudo apt install elpa-ivy-hydra&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;The manual is available as &lt;a href=&#34;https://oremacs.com/swiper/&#34;&gt;HTML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Installing &lt;code&gt;ivy&lt;/code&gt; from GNU ELPA or MELPA also installs the manual under the &lt;code&gt;(ivy)&lt;/code&gt; Info node.&lt;/p&gt; &#xA;&lt;p&gt;The source file for the Info page is &lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/swiper/master/doc/ivy.org&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Wiki&lt;/h3&gt; &#xA;&lt;p&gt;Ivy and Swiper wiki is here: &lt;a href=&#34;https://github.com/abo-abo/swiper/wiki&#34;&gt;the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Small config example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(ivy-mode)&#xA;(setq ivy-use-virtual-buffers t)&#xA;(setq enable-recursive-minibuffers t)&#xA;;; enable this if you want `swiper&#39; to use it&#xA;;; (setq search-default-mode #&#39;char-fold-to-regexp)&#xA;(global-set-key &#34;\C-s&#34; &#39;swiper)&#xA;(global-set-key (kbd &#34;C-c C-r&#34;) &#39;ivy-resume)&#xA;(global-set-key (kbd &#34;&amp;lt;f6&amp;gt;&#34;) &#39;ivy-resume)&#xA;(global-set-key (kbd &#34;M-x&#34;) &#39;counsel-M-x)&#xA;(global-set-key (kbd &#34;C-x C-f&#34;) &#39;counsel-find-file)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; f&#34;) &#39;counsel-describe-function)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; v&#34;) &#39;counsel-describe-variable)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; o&#34;) &#39;counsel-describe-symbol)&#xA;(global-set-key (kbd &#34;&amp;lt;f1&amp;gt; l&#34;) &#39;counsel-find-library)&#xA;(global-set-key (kbd &#34;&amp;lt;f2&amp;gt; i&#34;) &#39;counsel-info-lookup-symbol)&#xA;(global-set-key (kbd &#34;&amp;lt;f2&amp;gt; u&#34;) &#39;counsel-unicode-char)&#xA;(global-set-key (kbd &#34;C-c g&#34;) &#39;counsel-git)&#xA;(global-set-key (kbd &#34;C-c j&#34;) &#39;counsel-git-grep)&#xA;(global-set-key (kbd &#34;C-c k&#34;) &#39;counsel-ag)&#xA;(global-set-key (kbd &#34;C-x l&#34;) &#39;counsel-locate)&#xA;(global-set-key (kbd &#34;C-S-o&#34;) &#39;counsel-rhythmbox)&#xA;(define-key minibuffer-local-map (kbd &#34;C-r&#34;) &#39;counsel-minibuffer-history)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: parts of this config can be replaced by using &lt;code&gt;counsel-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Counsel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/devel/counsel.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/counsel.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/counsel.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/counsel.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/counsel&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/counsel-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/counsel&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/counsel-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ivy-mode&lt;/code&gt; ensures that any Emacs command using &lt;code&gt;completing-read-function&lt;/code&gt; uses ivy for completion.&lt;/p&gt; &#xA;&lt;p&gt;Counsel takes this further, providing versions of common Emacs commands that are customised to make the best use of Ivy. For example, &lt;code&gt;counsel-find-file&lt;/code&gt; has some additional keybindings. Pressing &lt;kbd&gt;DEL&lt;/kbd&gt; will move you to the parent directory.&lt;/p&gt; &#xA;&lt;p&gt;Enabling &lt;code&gt;counsel-mode&lt;/code&gt; remaps built-in Emacs functions that have counsel replacements:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Emacs command&lt;/th&gt; &#xA;   &lt;th&gt;Counsel equivalent&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;execute-extended-command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-M-x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-bindings&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-descbinds&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-describe-function&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-variable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-describe-variable&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;apropos-command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-apropos&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;describe-face&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-describe-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list-faces-display&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-faces&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;find-file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-find-file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;find-library&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-find-library&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;imenu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-imenu&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;load-library&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-load-library&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;load-theme&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-load-theme&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yank-pop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-yank-pop&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;info-lookup-symbol&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-info-lookup-symbol&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pop-to-mark-command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-mark-ring&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bookmark-jump&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;counsel-bookmark&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Swiper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/devel/swiper.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/swiper.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/swiper.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/swiper.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/swiper&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/swiper-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/swiper&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/swiper-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swiper is an alternative to isearch that uses Ivy to show an overview of all matches.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oremacs.com/download/swiper.png&#34; alt=&#34;swiper.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Helm version of Swiper is also available: &lt;a href=&#34;https://github.com/abo-abo/swiper-helm&#34;&gt;swiper-helm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://oremacs.com/download/ivy-swiper-1.png&#34; alt=&#34;ivy-swiper-1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a ten minute &lt;a href=&#34;https://www.youtube.com/watch?v=VvnJQpTFVDc&#34;&gt;video demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Frequently asked questions&lt;/h1&gt; &#xA;&lt;p&gt;Q: How do I enter an input that matches one of the candidates instead of this candidate? Example: create a file &lt;code&gt;bar&lt;/code&gt; when a file &lt;code&gt;barricade&lt;/code&gt; exists in the current directory.&lt;/p&gt; &#xA;&lt;p&gt;A: Press &lt;kbd&gt;C-M-j&lt;/kbd&gt;. Alternatively, you can make the prompt line selectable with &lt;code&gt;(setq ivy-use-selectable-prompt t)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/swiper/master/CONTRIBUTING.org&#34;&gt;guidelines&lt;/a&gt; for reporting issues and opening pull requests.&lt;/p&gt;</summary>
  </entry>
</feed>