<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:45:27Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stonebk/dotemacs</title>
    <updated>2024-05-01T01:45:27Z</updated>
    <id>tag:github.com,2024-05-01:/stonebk/dotemacs</id>
    <link href="https://github.com/stonebk/dotemacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Version my emacs config&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>novoid/dot-emacs</title>
    <updated>2024-05-01T01:45:27Z</updated>
    <id>tag:github.com,2024-05-01:/novoid/dot-emacs</id>
    <link href="https://github.com/novoid/dot-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My GNU/Emacs configuration&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;My GNU Emacs Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** What To Expect&lt;/p&gt; &#xA;&lt;p&gt;I am using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Org mode (my main Emacs focus)&lt;/li&gt; &#xA; &lt;li&gt;Python (as a hobby programmer, not a professional)&lt;/li&gt; &#xA; &lt;li&gt;Cygwin/[[http://babun.github.io/][Babun]] on Windows&lt;/li&gt; &#xA; &lt;li&gt;Spell checking&lt;/li&gt; &#xA; &lt;li&gt;Flychecking&lt;/li&gt; &#xA; &lt;li&gt;Templating: Yasnippet/yankpad&lt;/li&gt; &#xA; &lt;li&gt;File Management: dired&lt;/li&gt; &#xA; &lt;li&gt;Typesetting: LaTeX (not active any more)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As of 2020-10-15, I am using following hosts with Emacs:&lt;/p&gt; &#xA;&lt;p&gt;| Operating System | Emacs version | |------------------------------+-------------------| | Debian GNU/Linux 10 (buster) | GNU Emacs 27.0.50 | | Xubuntu GNU/Linux 20.04 LTS | GNU Emacs 26.3 | | Xubuntu GNU/Linux 20.04 LTS | GNU Emacs 28.0.50 |&lt;/p&gt; &#xA;&lt;p&gt;All are running the same configuration. Some settings are only used on specific platforms though.&lt;/p&gt; &#xA;&lt;p&gt;I once was using OS X on my personal computer but this is history. Thankfully. Corresponding OS X specific settings are for archiving purposes.&lt;/p&gt; &#xA;&lt;p&gt;With my current employer, I&#39;m able to use GNU/Linux also for business. Therefore, I don&#39;t have to use Windows at the moment. Thankfully. Corresponding OS X specific settings are for archiving purposes.&lt;/p&gt; &#xA;&lt;p&gt;** Best Navigation Experience&lt;/p&gt; &#xA;&lt;p&gt;For navigating through my =config.org= file, please do open it in Emacs so that you are able to collapse and expand its Org mode headings.&lt;/p&gt; &#xA;&lt;p&gt;** Literate Configuration: My Tangling Approach&lt;/p&gt; &#xA;&lt;p&gt;As of 2017-05, I moved my Emacs configuration format from [[http://orgmode.org/manual/Orgstruct-mode.html][OrgStruct mode]] to Org-mode babel + tangle. Originally, I found this process on &lt;a href=&#34;http://www.holgerschurig.de/en/emacs-init-tangle/&#34;&gt;http://www.holgerschurig.de/en/emacs-init-tangle/&lt;/a&gt; However, I adapted its code and write additional features. I also simplified the file structure, threw away old stuff and added tons of comments for my configuration.&lt;/p&gt; &#xA;&lt;p&gt;Now, my Emacs configuration is in a file named =config.org=. My =init.el= got some nifty Elisp code that converts/tangles (only) the Elisp blocks into the =config.el=. This generated file is interpreted by my GNU/Emacs on startup.&lt;/p&gt; &#xA;&lt;p&gt;Please do read [[http://karl-voit.at/2017/06/03/emacs-org][my blog article on how tangling of this Emacs configuration works]].&lt;/p&gt; &#xA;&lt;p&gt;Despite the size of my configuration, &lt;em&gt;tangling takes only a fraction of a second&lt;/em&gt; and &lt;em&gt;automatically happens on two occasions&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When I manually save the =config.org= file.&lt;/li&gt; &#xA; &lt;li&gt;When Emacs starts and notices that =config.org= is newer than =config.el=.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This way, there is &lt;em&gt;no unnecessary tangling process&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This method is great in terms of speed and effort. However, I can&#39;t follow any advanced literate programming aspect such as re-using a snippet multiple times or changing the order of the snippets.&lt;/p&gt; &#xA;&lt;p&gt;I also added some output functionality to the tangling method. This results in helpful lines in =&lt;em&gt;Messages&lt;/em&gt;= like:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE [...] config • my-frame-is-landscape() my-frame-is-portrait() … The frame is in landscape mode config • Default split direction according to frame aspect ratio … config • no-littering … config • Logging of mode versions … Wrote /home/vk/.emacs.d/var/log/floyd.txt Added to /home/vk/.emacs.d/var/log/floyd.txt config • my-load-local-el() … config • Server mode … config • my-system-is-FOOBAR … config • System-specific paths … config • Cygwin Paths (Windows) … config • my-binary-found(binaryname) … config • my-binary-not-found-list and my-eval-if-binary-or-warn() … config • Test queries … »»» I could not locate the PATH-binary for: chrome config • System-specific browse-url-browser … »»» I could not locate the PATH-binary for: google-chrome config • Styling … config • Themes … [...] #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Update 2022-06-14: If I would follow a more standard way of tangling the el file from the org file, I&#39;d probably take a look at &lt;a href=&#34;https://github.com/yilkalargaw/org-auto-tangle&#34;&gt;https://github.com/yilkalargaw/org-auto-tangle&lt;/a&gt; which is also features on this short video demo: &lt;a href=&#34;https://www.youtube.com/watch?v=D3FzMPZm7vY&#34;&gt;https://www.youtube.com/watch?v=D3FzMPZm7vY&lt;/a&gt; (13min).&lt;/p&gt; &#xA;&lt;p&gt;** In Case You Want to Use My Configuration&lt;/p&gt; &#xA;&lt;p&gt;In short: &lt;em&gt;don&#39;t&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Not because I don&#39;t like you to have my configuration. The reason is furthermore that it is not easy to accomplish the setup process. This is because I left out some parts like the &lt;del&gt;contrib&lt;/del&gt; directory as explained above. Some of my settings are host-specific and/or depend on path variables or external tools.&lt;/p&gt; &#xA;&lt;p&gt;You should only adopt Elisp code you need and understand to avoid [[https://www.emacswiki.org/emacs/DotEmacsBankruptcy][Emacs Bankruptcy]].&lt;/p&gt; &#xA;&lt;p&gt;Therefore: please feel free to look up certain tricks and functions and add it to your configuration. But don&#39;t use my repository as is and expect it to run on your host.&lt;/p&gt; &#xA;&lt;p&gt;** Stuff Which Is Not Contained in the Git Repository&lt;/p&gt; &#xA;&lt;p&gt;Please take a look at my &lt;del&gt;.gitignore&lt;/del&gt; file that contains some things I did &lt;em&gt;not&lt;/em&gt; add to this git repository for a variety of reasons but are necessary for my configuration. Most important here are the directories &lt;del&gt;elpa&lt;/del&gt; and &lt;del&gt;contrib&lt;/del&gt;. The latter one holds a number of external packages:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC sh :results output :wrap example echo &#34;Last update of this list: $(date)&#34; echo &#34;------------------------------------------------------&#34; ls -1 contrib | grep -v 2del | grep -v tar #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;: Last update of this list: Do 15 Okt 2020 13:07:24 CEST : ------------------------------------------------------ : auto-dictionary-mode : browse-kill-ring.el : command-log-mode : cygwin-mount.el : date2name.el : define-word : dired-details.el : dired-hacks : dired-plus : dired-recent.el : dired-show-readme : edit-server.el : elpygen : emacs-emojify : emacs-git-gutter : emacs-which-key : ews-orgmode : explain-pause-mode : eyebrowse : filetags.el : goto-chg.el : helm-org-contacts : hideshow-orgmode : macrostep : message-outlook.el : move-text : no-littering : ob-restclient.el : orgaggregate : org.el : org-fancy-priorities : org-import-calendar.el : org-linker : org-linker-edna : org-mind-map : org-mind-map_OLD : org-mode : org-notmuch.el : org-protocol-capture-html : org-super-agenda : org-wunderlist : orly : outlookedit.el : outshine : ov : ox-clip : ox-pandoc : ox-rst : ox-slack : pdf-mode : pdf-view-restore : plantuml-mode : pylookup : raml-mode : s.el : setup-cygwin.el : slime-volleyball : sphinx-doc.el : sunrise-commander : synonyms : vcard-mode : wc.el&lt;/p&gt; &#xA;&lt;p&gt;Some of those packages were added only for testing purpose. Most of them are added to my configuration permanently.&lt;/p&gt; &#xA;&lt;p&gt;** Comments on ELPA, prelude, org-30000101&lt;/p&gt; &#xA;&lt;p&gt;After migrating most of the package management to =use-package=, there are much less entries in the folder =contrib= and there is a new folder called =elpa=. Of course, I did not include elpa-packages in this git repository.&lt;/p&gt; &#xA;&lt;p&gt;I also tested [[https://github.com/bbatsov/prelude][Emacs prelude]] for a couple of days. However, I was not very happy about it due to performance issues, unwanted behavior, and the feeling of losing control.&lt;/p&gt; &#xA;&lt;p&gt;Please note that &lt;del&gt;org-30000101&lt;/del&gt; is a [[http://article.gmane.org/gmane.emacs.orgmode/104548/][manually created and installed pseudo-package]] to prevent the installation of Org-mode via package manager. I am using the Org Maint version from git directly (within my &lt;del&gt;contrib&lt;/del&gt; directory).&lt;/p&gt; &#xA;&lt;p&gt;** Useful References&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.emacswiki.org/emacs/CategoryDotEmacs&#34;&gt;http://www.emacswiki.org/emacs/CategoryDotEmacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.emacswiki.org/emacs/LoadPath&#34;&gt;http://www.emacswiki.org/emacs/LoadPath&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;$HOME/.emacs.d/lisp/&lt;/del&gt; seems to be quite common as directory path for installing external packages&lt;/li&gt; &#xA;   &lt;li&gt;However, I do prefer &#34;contrib&#34; instead of &#34;lisp&#34; because: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;my own config (outside of &lt;del&gt;$HOME/.emacs.d/lisp/&lt;/del&gt;) is LISP as well&lt;/li&gt; &#xA;     &lt;li&gt;&#34;lisp&#34; does not contain the notion of &#34;contributed from other people/projects&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** License&lt;/p&gt; &#xA;&lt;p&gt;The code provided here is licensed under a GPL v3 license: see =license.txt= for details. Some smaller parts from other authors but included in my configuration might have a different license. Please check the source - it&#39;s included in the comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mmontone/emacs-inspector</title>
    <updated>2024-05-01T01:45:27Z</updated>
    <id>tag:github.com,2024-05-01:/mmontone/emacs-inspector</id>
    <link href="https://github.com/mmontone/emacs-inspector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Inspection tool for Emacs Lisp objects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EMACS-INSPECTOR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/inspector.svg?sanitize=true&#34; alt=&#34;elpa-badge&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Inspector tool for Emacs Lisp objects.&lt;/p&gt; &#xA;&lt;p&gt;Similar to inspectors available for Smalltalk and Common Lisp, but for Emacs Lisp.&lt;/p&gt; &#xA;&lt;p&gt;Also see: &lt;a href=&#34;https://github.com/mmontone/emacs-tree-inspector&#34; title=&#34;Emacs Tree Inspector&#34;&gt;Emacs Tree Inspector&lt;/a&gt; tool.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mmontone/emacs-inspector/master/emacs-inspector.png&#34; alt=&#34;emacs-inspector.png&#34; title=&#34;Emacs Inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This package is available from ELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install RET inspector RET&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Invocation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspector-inspect-expression&lt;/code&gt; to evaluate an elisp expression and inspect the result.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspector-inspect-last-sexp&lt;/code&gt; to evaluate last sexp in current buffer and inspect the result.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inside the inspector&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspector-pop&lt;/code&gt; bound to letter &lt;code&gt;l&lt;/code&gt;, to navigate to previous object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x inspector-quit&lt;/code&gt; bound to letter &lt;code&gt;q&lt;/code&gt;, to exit the inspector.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, &lt;code&gt;M-x forward-button&lt;/code&gt; and &lt;code&gt;M-x backward-button&lt;/code&gt; are conveniently bound to &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt;. They can be used for fast navigation across the buttons that the inspector displays.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can use &lt;code&gt;M-x eval-expression&lt;/code&gt; bound to letter &lt;code&gt;e&lt;/code&gt;, to evaluate an elisp expression using the object currently being inspected (it is bound to &lt;code&gt;*&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;From the Emacs debugger&lt;/h3&gt; &#xA;&lt;p&gt;When on an Emacs debugging backtrace, press letter &lt;code&gt;i&lt;/code&gt; to inspect the pointed frame and its local variables.&lt;/p&gt; &#xA;&lt;p&gt;When on edebug-mode, use &lt;code&gt;C-c C-i&lt;/code&gt; for inspecting expressions in the debugger.&lt;/p&gt; &#xA;&lt;h3&gt;Setup evaluation commands using prefix arguments&lt;/h3&gt; &#xA;&lt;p&gt;Instead of bothering setting up different key bindings for elisp evaluation and inspection, it can be handy to have both in the same command, and use prefix arguments to differenciate, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun eval-or-inspect-expression (arg)&#xA;  &#34;Like `eval-expression&#39;, but also inspect when called with prefix ARG.&#34;&#xA;  (interactive &#34;P&#34;)&#xA;  (pcase arg&#xA;    (&#39;(4) (let ((current-prefix-arg nil))&#xA;&#x9;    (call-interactively #&#39;inspector-inspect-expression)))&#xA;    (_ (call-interactively #&#39;eval-expression))))&#xA;&#x9;&#xA;(defun eval-or-inspect-last-sexp (arg)&#xA;  &#34;Like `eval-last-sexp&#39;, but also inspect when called with prefix ARG.&#34;&#xA;  (interactive &#34;P&#34;)&#xA;  (pcase arg&#xA;    (&#39;(4) (inspector-inspect-last-sexp))&#xA;    (_ (call-interactively #&#39;eval-last-sexp))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setup key bindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(define-key global-map [remap eval-last-sexp] #&#39;eval-or-inspect-last-sexp)&#xA;(define-key global-map [remap eval-expression] #&#39;eval-or-inspect-expression)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then use &lt;code&gt;C-u C-x C-e&lt;/code&gt; and &lt;code&gt;C-u M-:&lt;/code&gt; as alternatives to &lt;code&gt;eval-last-sexp&lt;/code&gt; and &lt;code&gt;eval-expression&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;For &lt;code&gt;evil/vim&lt;/code&gt; user&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add this to your config file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Add evil keybindings to inspector-mode&#xA;(defun inspector--set-evil-key-binding ()&#xA;&#34;Set evil keybindings for inspector-mode if in Evil mode.&#34;&#xA;        (when (bound-and-true-p evil-mode)&#xA;        (evil-define-key &#39;normal inspector-mode-map&#xA;        &#34;q&#34; #&#39;inspector-quit&#xA;        &#34;l&#34; #&#39;inspector-pop&#xA;        &#34;e&#34; #&#39;eval-expression&#xA;        &#34;n&#34; #&#39;forward-button&#xA;        &#34;p&#34; #&#39;backward-button&#xA;        &#34;P&#34; #&#39;inspector-pprint-inspected-object)))&#xA;)&#xA;(add-hook &#39;inspector-mode-hook #&#39;inspector--set-evil-key-binding)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>