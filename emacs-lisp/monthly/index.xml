<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-01T01:45:42Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-dashboard/emacs-dashboard</title>
    <updated>2025-05-01T01:45:42Z</updated>
    <id>tag:github.com,2025-05-01:/emacs-dashboard/emacs-dashboard</id>
    <link href="https://github.com/emacs-dashboard/emacs-dashboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extensible emacs dashboard&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://www.gnu.org/licenses/gpl-3.0][https://img.shields.io/badge/License-GPL%20v3-blue.svg]] [[https://jcs-emacs.github.io/jcs-elpa/#/dashboard][https://raw.githubusercontent.com/jcs-emacs/badges/master/elpa/v/dashboard.svg]] [[https://melpa.org/#/dashboard][https://melpa.org/packages/dashboard-badge.svg]] [[https://stable.melpa.org/#/dashboard][https://stable.melpa.org/packages/dashboard-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs Dashboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/emacs-dashboard/emacs-dashboard/actions/workflows/test.yml][https://github.com/emacs-dashboard/emacs-dashboard/workflows/CI/badge.svg]] [[https://github.com/emacs-dashboard/emacs-dashboard/actions/workflows/activate.yml][https://github.com/emacs-dashboard/emacs-dashboard/workflows/Activate/badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;An extensible emacs startup screen showing you what&#39;s most important.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Displays an awesome Emacs banner!&lt;/li&gt; &#xA; &lt;li&gt;Recent files&lt;/li&gt; &#xA; &lt;li&gt;Bookmarks list&lt;/li&gt; &#xA; &lt;li&gt;Recent projects list (Depends on &lt;code&gt;projectile&lt;/code&gt; or &lt;code&gt;project.el&lt;/code&gt; package)&lt;/li&gt; &#xA; &lt;li&gt;Org mode agenda&lt;/li&gt; &#xA; &lt;li&gt;Register list&lt;/li&gt; &#xA; &lt;li&gt;Supports both [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] and [[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]]&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[./etc/screenshot.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dependencies You will need the following packages which are all available on MELPA:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://github.com/purcell/page-break-lines][page-break-lines]] (optional)&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bbatsov/projectile][projectile]] (optional)&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] (optional)&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]] (optional)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell M-x package-install RET dashboard #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Open the Dashboard You can set up the dashboard to open automatically at startup using =dashboard-setup-startup-hook=: #+BEGIN_SRC elisp (require &#39;dashboard) (dashboard-setup-startup-hook) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Or with use-package: #+BEGIN_SRC elisp ;; use-package with package.el: (use-package dashboard :ensure t :config (dashboard-setup-startup-hook)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp ;; use-package with Elpaca: (use-package dashboard :elpaca t :config (add-hook &#39;elpaca-after-init-hook #&#39;dashboard-insert-startupify-lists) (add-hook &#39;elpaca-after-init-hook #&#39;dashboard-initialize) (dashboard-setup-startup-hook)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you don&#39;t want the dashboard to open by default, you can use the interactive function =dashboard-open= to open it when you do want it.&lt;/p&gt; &#xA;&lt;p&gt;By default, the dashboard will show three lists, recent files and bookmarks and org-agenda items.&lt;/p&gt; &#xA;&lt;p&gt;The widget “projects”, which shows a list of recent projects, is not enabled by default since it depends on packages that might not be available. To activate the widget, set the variable =dashboard-projects-backend= to either =&#39;projectile= (projectile, available from melpa) or =&#39;project-el= (project.el, available from GNU elpa), then add an entry like =(projects . 5)= to the variable =dashboard-items=.&lt;/p&gt; &#xA;&lt;p&gt;The function =dashboard-refresh-buffer= (an alias for =dashboard-open=) can be used to visit and refresh the dashboard.&lt;/p&gt; &#xA;&lt;p&gt;** Emacs Daemon&lt;/p&gt; &#xA;&lt;p&gt;In addition to the above, configure =initial-buffer-choice= to show Dashboard in frames created with =emacsclient -c= as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To update the banner or banner title&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp ;; Set the title (setq dashboard-banner-logo-title &#34;Welcome to Emacs Dashboard&#34;) ;; Set the banner (setq dashboard-startup-banner [VALUE]) ;; Value can be: ;; - &#39;official which displays the official emacs logo. ;; - &#39;logo which displays an alternative emacs logo. ;; - an integer which displays one of the text banners ;; (see dashboard-banners-directory files). ;; - a string that specifies a path for a custom banner ;; currently supported types are gif/image/text/xbm. ;; - a cons of 2 strings which specifies the path of an image to use ;; and other path of a text file to use if image isn&#39;t supported. ;; (cons &#34;path/to/image/file/image.png&#34; &#34;path/to/text/file/text.txt&#34;). ;; - a list that can display an random banner, ;; supported values are: string (filepath), &#39;official, &#39;logo and integers.&lt;/p&gt; &#xA;&lt;p&gt;;; Content is not centered by default. To center, set (setq dashboard-center-content t) ;; vertically center content (setq dashboard-vertically-center-content t)&lt;/p&gt; &#xA;&lt;p&gt;;; To disable shortcut &#34;jump&#34; indicators for each section, set (setq dashboard-show-shortcuts nil) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To customize which items are displayed, you can use the following snippet #+BEGIN_SRC elisp (setq dashboard-items &#39;((recents . 5) (bookmarks . 5) (projects . 5) (agenda . 5) (registers . 5))) #+END_SRC This will add the recent files, bookmarks, projects, org-agenda and registers widgets to your dashboard each displaying 5 items.&lt;/p&gt; &#xA;&lt;p&gt;To customize which widgets to display in order (example: Banner, footer message ...): #+begin_src emacs-lisp (setq dashboard-startupify-list &#39;(dashboard-insert-banner dashboard-insert-newline dashboard-insert-banner-title dashboard-insert-newline dashboard-insert-navigator dashboard-insert-newline dashboard-insert-init-info dashboard-insert-items dashboard-insert-newline dashboard-insert-footer)) #+end_src See dashboard-startupify-list for all the widgets avalaibles.&lt;/p&gt; &#xA;&lt;p&gt;To enable cycle navigation between each section: #+begin_src emacs-lisp (setq dashboard-navigation-cycle t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To customize string format in shortcuts: #+begin_src emacs-lisp (setq dashboard-heading-shorcut-format &#34; [%s]&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To customize item shortcuts: #+BEGIN_SRC elisp (setq dashboard-item-shortcuts &#39;((recents . &#34;r&#34;) (bookmarks . &#34;m&#34;) (projects . &#34;p&#34;) (agenda . &#34;a&#34;) (registers . &#34;e&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To modify the widget heading name: #+BEGIN_SRC elisp (setq dashboard-item-names &#39;((&#34;Recent Files:&#34; . &#34;Recently opened files:&#34;) (&#34;Agenda for today:&#34; . &#34;Today&#39;s agenda:&#34;) (&#34;Agenda for the coming week:&#34; . &#34;Agenda:&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;del&gt;all-the-icons&lt;/del&gt; package: #+BEGIN_SRC emacs-lisp (setq dashboard-icon-type &#39;all-the-icons) ; use `all-the-icons&#39; package #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;del&gt;nerd-icons&lt;/del&gt; package: #+BEGIN_SRC emacs-lisp (setq dashboard-display-icons-p t) ; display icons on both GUI and terminal (setq dashboard-icon-type &#39;nerd-icons) ; use `nerd-icons&#39; package #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To add icons to the widget headings and their items: #+BEGIN_SRC elisp (setq dashboard-set-heading-icons t) (setq dashboard-set-file-icons t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To modify heading icons with another icon from all-the-icons octicons: #+BEGIN_SRC elisp (dashboard-modify-heading-icons &#39;((recents . &#34;file-text&#34;) (bookmarks . &#34;book&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To modify heading icons with another icon from nerd-icons octicons: #+BEGIN_SRC emacs-lisp (dashboard-modify-heading-icons &#39;((recents . &#34;nf-oct-file_text&#34;) (bookmarks . &#34;nf-oct-book&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To modify the icon height or vertical adjust: #+BEGIN_SRC emacs-lisp (setq dashboard-icon-file-height 1.75) (setq dashboard-icon-file-v-adjust -0.125) (setq dashboard-heading-icon-height 1.75) (setq dashboard-heading-icon-v-adjust -0.125) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To customize the buttons of the navigator like this: #+BEGIN_SRC emacs-lisp ;; Format: &#34;(icon title help action face prefix suffix)&#34; (setq dashboard-navigator-buttons `(;; line1 ((,(all-the-icons-octicon &#34;mark-github&#34; :height 1.1 :v-adjust 0.0) &#34;Homepage&#34; &#34;Browse homepage&#34; (lambda (&amp;amp;rest _) (browse-url &#34;homepage&#34;))) (&#34;★&#34; &#34;Star&#34; &#34;Show stars&#34; (lambda (&amp;amp;rest _) (show-stars)) warning) (&#34;?&#34; &#34;&#34; &#34;?/h&#34; #&#39;show-help nil &#34;&amp;lt;&#34; &#34;&amp;gt;&#34;)) ;; line 2 ((,(all-the-icons-faicon &#34;linkedin&#34; :height 1.1 :v-adjust 0.0) &#34;Linkedin&#34; &#34;&#34; (lambda (&amp;amp;rest _) (browse-url &#34;homepage&#34;))) (&#34;⚑&#34; nil &#34;Show flags&#34; (lambda (&amp;amp;rest _) (message &#34;flag&#34;)) error)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To use it with [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] or [[https://github.com/bbatsov/persp-projectile][persp-projectile]]&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq dashboard-projects-switch-function &#39;counsel-projectile-switch-project-by-name) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq dashboard-projects-switch-function &#39;projectile-persp-switch-project) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Please check the [[./docs/variables-and-functions.org][complete list of variables and functions]]. ** Org mode’s agenda&lt;/p&gt; &#xA;&lt;p&gt;To display today’s agenda items on the dashboard, add &lt;del&gt;agenda&lt;/del&gt; to &lt;del&gt;dashboard-items&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (add-to-list &#39;dashboard-items &#39;(agenda) t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To show agenda for the upcoming seven days set the variable &lt;del&gt;dashboard-week-agenda&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;. #+BEGIN_SRC elisp (setq dashboard-week-agenda t) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;By default org-agenda entries are filter by time, only showing those task with &lt;del&gt;DEADLINE&lt;/del&gt;, &lt;del&gt;SCHEDULE-TIME&lt;/del&gt; or &lt;del&gt;TIMESTAMP&lt;/del&gt; . To show all agenda entries (except &lt;del&gt;DONE&lt;/del&gt;)&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq dashboard-filter-agenda-entry &#39;dashboard-no-filter-agenda) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To have an extra filter, &lt;del&gt;MATCH&lt;/del&gt; parameter is exposed as &lt;del&gt;dashboard-match-agenda-entry&lt;/del&gt; variable, by default is &lt;del&gt;nil&lt;/del&gt; #+begin_quote ‘MATCH’ is a tags/property/TODO match. Org iterates only matched headlines. Org iterates over all headlines when MATCH is nil or t. #+end_quote&lt;/p&gt; &#xA;&lt;p&gt;See [[https://orgmode.org/manual/Using-the-Mapping-API.html][Org Manual]] for more information.&lt;/p&gt; &#xA;&lt;p&gt;Once the agenda appears in the dashboard, &lt;del&gt;org-agenda-files&lt;/del&gt; stay open. With &lt;del&gt;(setq dashboard-agenda-release-buffers t)&lt;/del&gt; the org files are close. Note that this could slow down the dashboard buffer refreshment.&lt;/p&gt; &#xA;&lt;p&gt;*** Agenda sort&lt;/p&gt; &#xA;&lt;p&gt;Agenda is now sorted with &lt;del&gt;dashboard-agenda-sort-strategy&lt;/del&gt; following the idea of [[https://orgmode.org/worg/doc.html#org-agenda-sorting-strategy][org-agenda-sorting-strategy]]. Suported strategies are &lt;del&gt;priority-up&lt;/del&gt;, &lt;del&gt;priority-down&lt;/del&gt;, &lt;del&gt;time-up&lt;/del&gt;, &lt;del&gt;time-down&lt;/del&gt;, &lt;del&gt;todo-state-up&lt;/del&gt; and &lt;del&gt;todo-state-down&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;*** Agenda format&lt;/p&gt; &#xA;&lt;p&gt;To personalize the aspect of each entry, there is &lt;del&gt;dashboard-agenda-prefix-format&lt;/del&gt; which initial value is &lt;del&gt;&#34; %i %-12:c %-10s &#34;&lt;/del&gt; where &lt;del&gt;%i&lt;/del&gt; is the icon category of the item (see [[https://orgmode.org/worg/doc.html#org-agenda-category-icon-alist][org-agenda-category-icon-alist]]), &lt;del&gt;%-12:c&lt;/del&gt; gives the category a 12 chars wide field and append a colon to the category. A similar padding but for a 10 wide field is &lt;del&gt;%-10s&lt;/del&gt; that is for the scheduling or deadline information. For more information see [[https://orgmode.org/worg/doc.html#org-agenda-prefix-format][org-agenda-prefix-format]].&lt;/p&gt; &#xA;&lt;p&gt;Deadline or Scheduling time will be formatted using &lt;del&gt;dashboard-agenda-time-string-format&lt;/del&gt; and the keywords (TODO, DONE) respect [[https://orgmode.org/worg/doc.html#org-agenda-todo-keyword-format][org-agenda-todo-keyword-format]].&lt;/p&gt; &#xA;&lt;p&gt;*** Agenda tags&lt;/p&gt; &#xA;&lt;p&gt;To customize the tags format there is a variable &lt;del&gt;dashboard-agenda-tags-format&lt;/del&gt;. This variable could be any function that receives the tags directly from &lt;del&gt;org-get-tags&lt;/del&gt;. By default &lt;del&gt;dashboard-agenda-tags-format&lt;/del&gt; is set to &lt;del&gt;identity&lt;/del&gt;. To hide the tags set the variable to &lt;del&gt;ignore&lt;/del&gt;: &lt;del&gt;(setq dashboard-agenda-tags-format &#39;ignore)&lt;/del&gt; or to &lt;del&gt;nil&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** FAQ&lt;/p&gt; &#xA;&lt;p&gt;Check out our [[./docs/FAQ.org][Frequently Asked Questions]].&lt;/p&gt; &#xA;&lt;p&gt;** Faces&lt;/p&gt; &#xA;&lt;p&gt;It is possible to customize Dashboard&#39;s appearance using the following faces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-banner-logo-title&lt;/del&gt; :: Highlights the banner title.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-text-banner&lt;/del&gt; :: Highlights text banners.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-heading&lt;/del&gt; :: Highlights widget headings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;dashboard-items-face&lt;/del&gt; :: Highlights widget items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shortcuts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use any of the following shortcuts inside Dashboard&lt;/p&gt; &#xA;&lt;p&gt;|----------------------------+------------------| | Shortcut | Function | |----------------------------+------------------| | Tab Or C-i | Next Item | | Shift-Tab | Previous Item | | Return / Mouse Click / C-m | Open | | r | Recent files | | m | Bookmarks | | p | Projects | | a | Org-Mode Agenda | | e | Registers | | g | Refresh contents | | { | Previous section | | } | Next section | |----------------------------+------------------|&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wish List&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Center content&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More banner options&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customizing the list of widgets to display&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrate Org-mode&#39;s agenda&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Listing Perspectives&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To contribute your changes to this package, please do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repo&lt;/li&gt; &#xA; &lt;li&gt;Clone a local copy&lt;/li&gt; &#xA; &lt;li&gt;Make your changes&lt;/li&gt; &#xA; &lt;li&gt;Push and create your PR&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When working on this package, it&#39;s typical to uninstall dashboard, develop your changes and then install this as &#34;development version&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This is accomplished with the following steps:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell&lt;/p&gt; &#xA;&lt;h1&gt;In emacs:&lt;/h1&gt; &#xA;&lt;p&gt;M-x package-delete dashboard-&#xA; &lt;version&gt;&#xA;   RET #+END_SRC&#xA; &lt;/version&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell make package make install #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Or, you can use [[https://github.com/emacs-eask/cli][Eask]] to set up the development environment, so there&#39;s no need to delete your local &lt;del&gt;dashboard&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install all dependencies and development dependencies:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell eask install-deps --dev #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To test the package&#39;s installation:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell eask package eask install #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To test compilation:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell eask compile #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;🪧 The following steps are optional, but we recommend you follow these lint results!&lt;/p&gt; &#xA;&lt;p&gt;The built-in &lt;del&gt;checkdoc&lt;/del&gt; linter:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell eask lint checkdoc #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The standard &lt;del&gt;package&lt;/del&gt; linter:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC shell eask lint package #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;/📝 P.S. For more information, find the Eask manual at &lt;a href=&#34;https://emacs-eask.github.io/&#34;&gt;https://emacs-eask.github.io/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magit/forge</title>
    <updated>2025-05-01T01:45:42Z</updated>
    <id>tag:github.com,2025-05-01:/magit/forge</id>
    <link href="https://github.com/magit/forge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Work with Git forges from the comfort of Magit&lt;/p&gt;&lt;hr&gt;&lt;p&gt;** Work with Git forges from the comfort of Magit&lt;/p&gt; &#xA;&lt;p&gt;Work with Git forges, such as Github and Gitlab, from the comfort of Magit and the rest of Emacs.&lt;/p&gt; &#xA;&lt;p&gt;[[http://readme.emacsair.me/forge-status.png]]&lt;/p&gt; &#xA;&lt;p&gt;[[http://readme.emacsair.me/forge-topic.png]]&lt;/p&gt; &#xA;&lt;p&gt;Please see the [[https://magit.vc/manual/forge][manual]] and the [[https://emacsair.me/2018/12/19/forge-0.1][announcement]] for more information.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;br&gt;&lt;br&gt; #+html: &lt;a href=&#34;https://github.com/magit/forge/actions/workflows/compile.yml&#34;&gt;&lt;img alt=&#34;Compile&#34; src=&#34;https://github.com/magit/forge/actions/workflows/compile.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://github.com/magit/forge/actions/workflows/manual.yml&#34;&gt;&lt;img alt=&#34;Manual&#34; src=&#34;https://github.com/magit/forge/actions/workflows/manual.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/forge&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/forge-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/forge&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/forge-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zkry/yaml.el</title>
    <updated>2025-05-01T01:45:42Z</updated>
    <id>tag:github.com,2025-05-01:/zkry/yaml.el</id>
    <link href="https://github.com/zkry/yaml.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YAML parser in Elisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;yaml.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/yaml&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/yaml-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;yaml.el is a YAML parser written in Emacs List without any external dependencies. It provides an interface similar to the Emacs JSON parsing utility. The functions provided are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(yaml-parse-string string &amp;amp;rest args)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following keyword args are accepted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:object-type&lt;/code&gt; specifies the Lisp data structure to store parsed objects data in. It takes the following symbols: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;hash-table&lt;/code&gt; (default)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;alist&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;plist&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:object-key-type&lt;/code&gt; specifies how map keys should be handled. It takes the following symbols: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;symbol&lt;/code&gt; (default) Use symbols as keys. If &lt;code&gt;:object-type&lt;/code&gt; is &lt;code&gt;plist&lt;/code&gt;, this becomes the same as &lt;code&gt;keyword&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;keyword&lt;/code&gt; Always use keywords as keys.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:sequence-type&lt;/code&gt; specifies the Lisp data structure to store the parsed sequences in. It takes the following symbols: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;array&lt;/code&gt; (default)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;list&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:null-object&lt;/code&gt; specifies the lisp object to use for nulls. Defaults to the symbol &lt;code&gt;:null&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:false-object&lt;/code&gt; specifies the lisp object to use for false. Defaults to the symbol &lt;code&gt;:false&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(yaml-encode object)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function &lt;code&gt;yaml-encode&lt;/code&gt; will encode a Lisp object to a YAML string.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Until this is published to MELPA you will need to use the code from this repo directly. You can put yaml.el in you load path directly or use a tool like use-package or straight.el.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;yaml)&#xA;&#xA;(yaml-parse-string &#34;&#xA;recipe:&#xA;  ingredients:&#xA;  - milk&#xA;  - eggs&#xA;  - oil&#xA;  - flour&#xA;  duration: 10&#xA;  steps: null&#34; :object-type &#39;alist&#xA;               :sequence-type &#39;array&#xA;               :null-object :empty)&#xA;&#xA;;; =&amp;gt; ((&#34;recipe&#34; (&#34;ingredients&#34; . [&#34;milk&#34; &#34;eggs&#34; &#34;oil&#34; &#34;flour&#34;]) (&#34;duration&#34; . 10) (&#34;steps&#34; . :empty)))&#xA;&#xA;(yaml-parse-string &#34;&#xA;translations:&#xA;  one: бір&#xA;  two: екі&#xA;  three: үш&#34;)&#xA;&#xA;;; =&amp;gt; #s(hash-table ... data (&#34;translations&#34; #s(hash-table ...)))&#xA;&#xA;&#xA;(yaml-encode &#39;(&#34;omitted&#34; ((count . 3) (value . 10) (items (&#34;ruby&#34; &#34;diamond&#34;))) &#34;omitted&#34;))&#xA;&#xA;;; =&amp;gt; &#34;&#xA;- omitted&#xA;- count: 3&#xA;  value: 10&#xA;  items:&#xA;    ruby: [diamond]&#xA;- omitted&#34;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Since this is implemented in Emacs Lisp performance is probably not the best. An alternative implementation using libyaml exists and can be found &lt;a href=&#34;https://github.com/syohex/emacs-libyaml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a very deeply nested YAML file and your &lt;code&gt;max-lisp-eval-depth&lt;/code&gt; variable is set too low, these is a chance that you might hit the maximum Lisp eval depth limit. In the future I may work on changing the parsing algorithm to avoid this problem but in the meantime you can bump up the &lt;code&gt;max-lisp-eval-depth&lt;/code&gt; variable in your config.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;You can run the tests by executing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ~/path/to/git-repo/yaml.el&#xA;$ emacs -batch -l ert -l yaml.el -l yaml-tests.el -f ert-run-tests-batch-and-exit&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>