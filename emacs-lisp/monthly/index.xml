<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-01T01:55:02Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-typescript/typescript.el</title>
    <updated>2025-02-01T01:55:02Z</updated>
    <id>tag:github.com,2025-02-01:/emacs-typescript/typescript.el</id>
    <link href="https://github.com/emacs-typescript/typescript.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TypeScript-support for Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;typescript.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/emacs-typescript/typescript.el/workflows/Build%20&amp;amp;%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; Test&#34;&gt; &lt;a href=&#34;https://melpa.org/#/typescript-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/typescript-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/typescript-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/typescript-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript.el&lt;/code&gt; is a major-mode for editing &lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;Typescript&lt;/a&gt;-files in &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript.el&lt;/code&gt; is a self-contained, lightweight and minimalist major-mode focused on providing basic font-lock/syntax-highlighting and indentation for Typescript syntax, without any external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Output from &lt;code&gt;tsc&lt;/code&gt; and &lt;code&gt;tslint&lt;/code&gt; is also handled seamlessly through &lt;code&gt;compilation-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;A short note on development HALT&lt;/h2&gt; &#xA;&lt;p&gt;As the both the JavaScript and TypeScript languages have evolved to become ever more complex, so has the Elisp codebase for &lt;code&gt;typescript-mode&lt;/code&gt; trying to correctly handle them.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve been at the point for quite some time where it has become increasingly obvious that the current code-base simply cannot continue growing. It will be slow. It will be complex. It will be buggy. It will be head-ache inducing to wrap our heads around it, and ... I guess we&#39;re already there.&lt;/p&gt; &#xA;&lt;p&gt;Apart from occasional PRs getting merged, the current &lt;code&gt;typescript-mode&lt;/code&gt; code isn&#39;t being developed because almost nobody wants to work code of this complexity.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Essentially all major development of &lt;code&gt;typescript-mode&lt;/code&gt; has come to a halt.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Good news though!&lt;/h2&gt; &#xA;&lt;p&gt;Emacs 29 will ship with support for a parser-library called tree-sitter, and will actually have in-tree support for TypeScript! So now you can just use the provided &lt;code&gt;typescript-ts-mode&lt;/code&gt; and get better support for TypeScript than &lt;code&gt;typescript.el&lt;/code&gt; ever provided. This new mode also supports TSX.&lt;/p&gt; &#xA;&lt;p&gt;Development of TypeScript-support will from now on continue in Emacs core, rather than this repo. We hope you&#39;ll like the new experience.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;typescript.el&lt;/code&gt; can be installed from source directly using your favourite approach or framework, or from MELPA and MELPA Stable as a package.&lt;/p&gt; &#xA;&lt;p&gt;To install typescript.el simply type &lt;code&gt;M-x package-install&amp;lt;RET&amp;gt;typescript-mode&amp;lt;RET&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Customization&lt;/h1&gt; &#xA;&lt;p&gt;To customize &lt;code&gt;typescript.el&lt;/code&gt; just type the following: &lt;code&gt;M-x customize-group&amp;lt;RET&amp;gt;typescript&amp;lt;RET&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can add any other customization you like to &lt;code&gt;typescript-mode-hook&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; file. &lt;code&gt;typescript.el&lt;/code&gt; also handles &lt;code&gt;prog-mode-hook&lt;/code&gt; on versions of Emacs which supports it.&lt;/p&gt; &#xA;&lt;h1&gt;Support for Compilation Mode&lt;/h1&gt; &#xA;&lt;p&gt;This mode automatically adds support for &lt;code&gt;compilation-mode&lt;/code&gt; so that if you run &lt;code&gt;M-x compile&amp;lt;ret&amp;gt;tsc&amp;lt;ret&amp;gt;&lt;/code&gt; the error messages are correctly parsed.&lt;/p&gt; &#xA;&lt;p&gt;However, the error messages produced by &lt;code&gt;tsc&lt;/code&gt; when its &lt;code&gt;pretty&lt;/code&gt; flag is turned on include ANSI color escapes, which by default &lt;code&gt;compilation-mode&lt;/code&gt; does not interpret. In order to get the escapes parsed, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;ansi-color)&#xA;(defun colorize-compilation-buffer ()&#xA;  (ansi-color-apply-on-region compilation-filter-start (point-max)))&#xA;(add-hook &#39;compilation-filter-hook &#39;colorize-compilation-buffer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you prefer, you can configure &lt;code&gt;tsc&lt;/code&gt; with the &lt;code&gt;pretty&lt;/code&gt; flag set to &lt;code&gt;false&lt;/code&gt;: &lt;code&gt;tsc --pretty false&lt;/code&gt;. However, doing this does more than just turning off the colors. It also causes &lt;code&gt;tsc&lt;/code&gt; to produce less elaborate error messages.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;To run the tests you can run &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer, you may run the tests via the provided &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t typescript-mode .&#xA;docker run --rm -v $(pwd):/typescript-mode typescript-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Other Typescript-packages of interest&lt;/h1&gt; &#xA;&lt;p&gt;While &lt;code&gt;typescript.el&lt;/code&gt; may &lt;em&gt;not&lt;/em&gt; provide a full kitchen-sink, the good news is that there&#39;s other packages which do!&lt;/p&gt; &#xA;&lt;p&gt;More advanced features can be provided by using these additional packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; - A standards-based code-completion and refactoring backend, based on the &lt;a href=&#34;https://langserver.org/&#34;&gt;Language Server Protocol (LSP)&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ananthakumaran/tide/&#34;&gt;tide&lt;/a&gt; - TypeScript Interactive Development Environment for Emacs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/josteink/ts-comint&#34;&gt;ts-comint&lt;/a&gt; - a Typescript REPL in Emacs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Initializing these with &lt;code&gt;typescript.el&lt;/code&gt; will then become a matter of creating your own &lt;code&gt;typescript-mode-hook&lt;/code&gt; in your &lt;code&gt;init.el&lt;/code&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tninja/aider.el</title>
    <updated>2025-02-01T01:55:02Z</updated>
    <id>tag:github.com,2025-02-01:/tninja/aider.el</id>
    <link href="https://github.com/tninja/aider.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;aider emacs plugin for https://github.com/paul-gauthier/aider&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: aider.el : aider (AI Pair Programming) Inside Emacs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Do you enjoy the AI features of the [[https://www.cursor.com/][Cursor AI Code Editor]] but prefer working within Emacs?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/paul-gauthier/aider][Aider]] is a well-known and highly effective AI pair programming tool for the terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;aider.el&lt;/code&gt; package offers an interactive interface to communicate with Aider in Emacs.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Most of the Elisp code in this repository was generated by Aider or &lt;code&gt;aider.el&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why Use &lt;code&gt;aider.el&lt;/code&gt; in Emacs?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pop-up Menu: No need to remember commands. (aider-transient-menu)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:./transient_menu.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The following commands are integrated into the aider menu:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Aider session management:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-run-aider&lt;/code&gt;): Creates a comint-based, &lt;em&gt;git repo-specific Aider session&lt;/em&gt; for interactive conversation. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Git repository identification is based on the current file&#39;s path&lt;/li&gt; &#xA;   &lt;li&gt;Multiple Aider sessions can run simultaneously for different Git repositories When being called with the universal argument (&lt;code&gt;C-u&lt;/code&gt;), a prompt will offer the user to change the content of &lt;code&gt;aider-args&lt;/code&gt; for this session.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-switch-to-buffer&lt;/code&gt;): Switch to the Aider buffer. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;use &#34;^&#34; in the menu to toggle open aider session in other window inside current frame, or open a dedicate frame for aider session&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Model Selection:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-change-model&lt;/code&gt;): Interactively select and change AI model in current aider session&lt;/li&gt; &#xA; &lt;li&gt;Customize &lt;code&gt;aider-popular-models&lt;/code&gt; to define your preferred models list. Default models are (as date of 2025-01-26): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;anthropic/claude-3-5-sonnet-20241022 (really good in practical)&lt;/li&gt; &#xA;   &lt;li&gt;gpt-4o-mini&lt;/li&gt; &#xA;   &lt;li&gt;gemini/gemini-exp-1206 (free)&lt;/li&gt; &#xA;   &lt;li&gt;r1 (performance matches o1, price &amp;lt;&amp;lt; claude sonnet. weakness: small context)&lt;/li&gt; &#xA;   &lt;li&gt;deepseek/deepseek-chat (chatgpt-4o level performance, price is 1/100. weakness: small context)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** More ways to add files to the Aider buffer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use &#34;@&#34; in the menu to toggle add file between read-write mode and read-only mode&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-add-current-file&lt;/code&gt;): Add the current buffer file.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-add-files-in-current-window&lt;/code&gt;): Add all buffers in the current window.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-add-same-type-files-under-dir&lt;/code&gt;): Add all files with the same suffix as the current file under the current directory to Aider.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-batch-add-dired-marked-files&lt;/code&gt;): Add multiple Dired marked files to the Aider buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Write code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-function-or-region-refactor&lt;/code&gt;): If a region is selected, ask Aider to refactor the selected region. Otherwise, ask Aider to change / refactor the function under the cursor.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-implement-todo&lt;/code&gt;): Implement TODO comments in current context. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If cursor is on a comment line, implement that specific comment.&lt;/li&gt; &#xA;   &lt;li&gt;If cursor is inside a function, implement TODOs for that function.&lt;/li&gt; &#xA;   &lt;li&gt;Otherwise implement TODOs for the entire current file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Explain code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-ask-question&lt;/code&gt;): Ask Aider a question about the code in the current context. If a region is selected, use the region as context.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-function-or-region-explain&lt;/code&gt;): If a region is selected, ask Aider to explain the selected region. Otherwise, ask Aider to explain the function under the cursor.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-explain-symbol-under-point&lt;/code&gt;): Ask Aider to explain the symbol under cursor, given the line as context.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Support for Test Driven Development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-write-unit-test&lt;/code&gt;): Generate comprehensive unit tests for the current function or file. The generated tests will include normal cases, edge cases, and error handling scenarios.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;code&gt;aider-fix-failing-test-under-cursor&lt;/code&gt;): Place cursor on a failing test function and ask Aider to analyze and fix the code to make tests pass.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** And More: You can add your own Elisp functions to support your specific use cases. Feel free to ask Aider/&lt;code&gt;aider.el&lt;/code&gt; to help you create them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs need to be &amp;gt;= 26.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Vanilla Emacs Installation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://aider.chat/docs/install.html][Install aider]]&lt;/li&gt; &#xA; &lt;li&gt;Install the dependency [[https://github.com/magit/transient][Transient]] using your package manager.&lt;/li&gt; &#xA; &lt;li&gt;Install the dependency [[https://github.com/magit/magit][Magit]] using your package manager.&lt;/li&gt; &#xA; &lt;li&gt;Install aider.el with the following code:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** With [[https://github.com/radian-software/straight.el?tab=readme-ov-file][Straight]] If you have Straight installed #+BEGIN_SRC emacs-lisp (use-package aider :straight (:host github :repo &#34;tninja/aider.el&#34; :files (&#34;aider.el&#34;)) :config ;; Use claude-3-5-sonnet cause it is best in aider benchmark (setq aider-args &#39;(&#34;--model&#34; &#34;anthropic/claude-3-5-sonnet-20241022&#34;)) (setenv &#34;ANTHROPIC_API_KEY&#34; anthropic-api-key) ;; Or use chatgpt model since it is most well known ;; (setq aider-args &#39;(&#34;--model&#34; &#34;gpt-4o-mini&#34;)) ;; (setenv &#34;OPENAI_API_KEY&#34; &#xA; &lt;your-openai-api-key&gt;&#xA;  ) ;; Or use gemini v2 model since it is very good and free ;; (setq aider-args &#39;(&#34;--model&#34; &#34;gemini/gemini-exp-1206&#34;)) ;; (setenv &#34;GEMINI_API_KEY&#34; &#xA;  &lt;your-gemini-api-key&gt;&#xA;   ) ;; Or use your personal config file ;; (setq aider-args &#xA;   &lt;code&gt;(&#34;--config&#34; ,(expand-file-name &#34;~/.aider.conf.yml&#34;))) ;; ;; ;; Optional: Set a key binding for the transient menu (global-set-key (kbd &#34;C-c a&#34;) &#39;aider-transient-menu)) #+END_SRC *** With [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fetching-Package-Sources.html#:~:text=One%20way%20to%20do%20this,just%20like%20any%20other%20package.][package-vc-install]] Install Aider.el by running the following code within Emacs #+BEGIN_SRC emacs-lisp (package-vc-install &#39;(aider :url &#34;https://github.com/tninja/aider.el&#34;)) #+END_SRC Add the config #+BEGIN_SRC emacs-lisp (use-package aider :config ;; Use claude-3-5-sonnet cause it is best in aider benchmark (setq aider-args &#39;(&#34;--model&#34; &#34;anthropic/claude-3-5-sonnet-20241022&#34;)) (setenv &#34;ANTHROPIC_API_KEY&#34; anthropic-api-key) ;; Or use chatgpt model since it is most well known ;; (setq aider-args &#39;(&#34;--model&#34; &#34;gpt-4o-mini&#34;)) ;; (setenv &#34;OPENAI_API_KEY&#34; &amp;lt;your-openai-api-key&amp;gt;) ;; Or use gemini v2 model since it is very good and free ;; (setq aider-args &#39;(&#34;--model&#34; &#34;gemini/gemini-exp-1206&#34;)) ;; (setenv &#34;GEMINI_API_KEY&#34; &amp;lt;your-gemini-api-key&amp;gt;) ;; Or use your personal config file ;; (setq aider-args &lt;/code&gt;(&#34;--config&#34; ,(expand-file-name &#34;~/.aider.conf.yml&#34;))) ;; ;; ;; Optional: Set a key binding for the transient menu (global-set-key (kbd &#34;C-c a&#34;) &#39;aider-transient-menu)) #+END_SRC&#xA;  &lt;/your-gemini-api-key&gt;&#xA; &lt;/your-openai-api-key&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Doom Installation and Configuration&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the following code to your doom/packages.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (package! aider :recipe (:host github :repo &#34;tninja/aider.el&#34; :files (&#34;aider.el&#34; &#34;aider-doom.el&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adjust and add the following code to your doom/config.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package aider :config (setq aider-args &#39;(&#34;--model&#34; &#34;gpt-4o-mini&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;The aider prefix is &#34;A&#34;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start and open the aider buffer: =[SPC] A o=&lt;/li&gt; &#xA; &lt;li&gt;Add the current file with =[SPC] A a c=&lt;/li&gt; &#xA; &lt;li&gt;Reset the aider session with =[SPC] A r= [[file:./doom-menus.png]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Optional&lt;/p&gt; &#xA;&lt;p&gt;*** Helm Support&lt;/p&gt; &#xA;&lt;p&gt;Helm enables fuzzy searching functionality for command history prompts&lt;/p&gt; &#xA;&lt;p&gt;You can enable Helm-based completion with the following code:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package aider :straight (:host github :repo &#34;tninja/aider.el&#34; :files (&#34;aider.el&#34; &#34;aider-helm.el&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Aider script interactive mode: aider-minor-mode&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you prefer writing Aider commands in a separate file and sending them to an Aider session (similar to working with Python or R scripts and sending code blocks to a REPL), you might want to try aider-minor-mode. It provides the following key bindings: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;C-c C-n: If region is active, send selected region line by line; otherwise, send current line&lt;/li&gt; &#xA;   &lt;li&gt;C-c C-c: Send current region line by line to aider session&lt;/li&gt; &#xA;   &lt;li&gt;C-c C-r: Send current region as a single block to aider session&lt;/li&gt; &#xA;   &lt;li&gt;Enable aider-minor-mode for your editing buffer&lt;/li&gt; &#xA;   &lt;li&gt;To automatically enable aider-minor-mode for any file with &#34;aider&#34; in its filename:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-hook &#39;find-file-hook (lambda () (when (and (buffer-file-name) (string-match-p &#34;aider&#34; (buffer-file-name))) (aider-minor-mode 1)))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[file:./screenshot.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The screenshot above shows Aider being asked to generate an aider-help function and add its corresponding entry to the menu (top right window).&lt;/li&gt; &#xA; &lt;li&gt;Aider successfully received the command and generated the appropriate commit (bottom left).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[./examples][Example Application Written with aider.el]]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other Emacs AI coding tool&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspired by, and Thanks to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[https://github.com/shouya/ancilla.el][ancilla.el]]: AI Coding Assistant support code generation / code rewrite / discussion&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]]: ChatGPT and DALL-E Emacs shells + Org Babel&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/copilot-emacs/copilot.el][copilot.el]]: Emacs plugin for GitHub Copilot&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/chep/copilot-chat.el][copilot-chat.el]]: Chat with GitHub Copilot in Emacs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yoshiki/yaml-mode</title>
    <updated>2025-02-01T01:55:02Z</updated>
    <id>tag:github.com,2025-02-01:/yoshiki/yaml-mode</id>
    <link href="https://github.com/yoshiki/yaml-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The emacs major mode for editing files in the YAML data serialization format.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;RECRUITMENTS I have not used emacs and this library for a long time, so I recruit maintainers or collaborators for all yaml-mode users. If you are interested in maintaining or collaborating with this library, please contact me.&lt;/p&gt; &#xA;&lt;p&gt;NAME yaml-mode - Simple major mode to edit YAML file for emacs&lt;/p&gt; &#xA;&lt;p&gt;REQUIREMENTS Emacs 24.1&lt;/p&gt; &#xA;&lt;p&gt;SYNOPSIS To install, just drop this file into a directory in your `load-path&#39; and (optionally) byte-compile it. To automatically handle files ending in &#39;.yml&#39;, add something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;yaml-mode)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.yml\\&#39;&#34; . yaml-mode))&#xA;&#xA;to your .emacs file.&#xA;&#xA;Unlike python-mode, this mode follows the Emacs convention of not&#xA;binding the ENTER key to `newline-and-indent&#39;.  To get this&#xA;behavior, add the key definition to `yaml-mode-hook&#39;:&#xA;&#xA;(add-hook &#39;yaml-mode-hook&#xA;  &#39;(lambda ()&#xA;    (define-key yaml-mode-map &#34;\C-m&#34; &#39;newline-and-indent)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DESCRIPTION yaml-mode is major mode for emacs.&lt;/p&gt; &#xA;&lt;p&gt;INSTALL You can install yaml-mode typing below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    % make&#xA;    % make install&#xA;&#xA;    or&#xA;&#xA;    % make PREFIX=/your/home/dir&#xA;    % make install PREFIX=/your/home/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SETTING see SYNOPSIS.&lt;/p&gt; &#xA;&lt;p&gt;AUTHOR Yoshiki Kurihara &lt;a href=&#34;mailto:kurihara@cpan.org&#34;&gt;kurihara@cpan.org&lt;/a&gt; Copyright (C) 2010 by Free Software Foundation, Inc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This file is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This file is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with GNU Emacs.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>