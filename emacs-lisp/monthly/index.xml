<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-01T01:46:34Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>progfolio/elpaca</title>
    <updated>2024-11-01T01:46:34Z</updated>
    <id>tag:github.com,2024-11-01:/progfolio/elpaca</id>
    <link href="https://github.com/progfolio/elpaca" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An elisp package manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elpaca: An Elisp Package Manager&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/images/elpaca.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&#34;Chews data, spits packages.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Elpaca is an elisp package manager. It allows users to find, install, update, and remove third-party packages for Emacs. It is a replacement for the built-in Emacs package manager, package.el.&lt;/p&gt; &#xA;&lt;p&gt;Elpaca:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs packages asynchronously, in parallel for fast, non-blocking installations.&lt;/li&gt; &#xA; &lt;li&gt;Includes a flexible UI for finding and operating on packages.&lt;/li&gt; &#xA; &lt;li&gt;Downloads packages from their sources for convenient elisp development.&lt;/li&gt; &#xA; &lt;li&gt;Supports thousands of elisp packages out of the box (MELPA, NonGNU/GNU ELPA, Org/org-contrib).&lt;/li&gt; &#xA; &lt;li&gt;Makes it easy for users to create their own ELPAs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/doc/manual.md&#34;&gt;manual&lt;/a&gt; and &lt;a href=&#34;https://github.com/progfolio/elpaca/wiki&#34;&gt;wiki&lt;/a&gt; for in-depth information on Elpaca usage, customization, and development. Users who wish to experiment with Elpaca may find the example &lt;a href=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/doc/init.el&#34;&gt;init.el&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/doc/early-init.el&#34;&gt;early-init.el&lt;/a&gt; files useful.&lt;/p&gt; &#xA;&lt;h1&gt;Video Tour&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5Ud-TE3iIQY&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/images/elpaca-manager-install.gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Elpaca requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs &amp;gt;= 27.1&lt;/li&gt; &#xA; &lt;li&gt;git (minimum version TBD)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;installer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installer&lt;/h3&gt; &#xA;&lt;p&gt;To install Elpaca, add the following elisp to your init.el. It must come before any calls to other Elpaca functions/macros. This will clone Elpaca into your &lt;code&gt;user-emacs-directory&lt;/code&gt; under the &lt;code&gt;elpaca&lt;/code&gt; subdirectory. It then builds and activates Elpaca.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defvar elpaca-installer-version 0.8)&#xA;(defvar elpaca-directory (expand-file-name &#34;elpaca/&#34; user-emacs-directory))&#xA;(defvar elpaca-builds-directory (expand-file-name &#34;builds/&#34; elpaca-directory))&#xA;(defvar elpaca-repos-directory (expand-file-name &#34;repos/&#34; elpaca-directory))&#xA;(defvar elpaca-order &#39;(elpaca :repo &#34;https://github.com/progfolio/elpaca.git&#34;&#xA;                              :ref nil :depth 1&#xA;                              :files (:defaults &#34;elpaca-test.el&#34; (:exclude &#34;extensions&#34;))&#xA;                              :build (:not elpaca--activate-package)))&#xA;(let* ((repo  (expand-file-name &#34;elpaca/&#34; elpaca-repos-directory))&#xA;       (build (expand-file-name &#34;elpaca/&#34; elpaca-builds-directory))&#xA;       (order (cdr elpaca-order))&#xA;       (default-directory repo))&#xA;  (add-to-list &#39;load-path (if (file-exists-p build) build repo))&#xA;  (unless (file-exists-p repo)&#xA;    (make-directory repo t)&#xA;    (when (&amp;lt; emacs-major-version 28) (require &#39;subr-x))&#xA;    (condition-case-unless-debug err&#xA;        (if-let* ((buffer (pop-to-buffer-same-window &#34;*elpaca-bootstrap*&#34;))&#xA;                  ((zerop (apply #&#39;call-process `(&#34;git&#34; nil ,buffer t &#34;clone&#34;&#xA;                                                  ,@(when-let* ((depth (plist-get order :depth)))&#xA;                                                      (list (format &#34;--depth=%d&#34; depth) &#34;--no-single-branch&#34;))&#xA;                                                  ,(plist-get order :repo) ,repo))))&#xA;                  ((zerop (call-process &#34;git&#34; nil buffer t &#34;checkout&#34;&#xA;                                        (or (plist-get order :ref) &#34;--&#34;))))&#xA;                  (emacs (concat invocation-directory invocation-name))&#xA;                  ((zerop (call-process emacs nil buffer nil &#34;-Q&#34; &#34;-L&#34; &#34;.&#34; &#34;--batch&#34;&#xA;                                        &#34;--eval&#34; &#34;(byte-recompile-directory \&#34;.\&#34; 0 &#39;force)&#34;)))&#xA;                  ((require &#39;elpaca))&#xA;                  ((elpaca-generate-autoloads &#34;elpaca&#34; repo)))&#xA;            (progn (message &#34;%s&#34; (buffer-string)) (kill-buffer buffer))&#xA;          (error &#34;%s&#34; (with-current-buffer buffer (buffer-string))))&#xA;      ((error) (warn &#34;%s&#34; err) (delete-directory repo &#39;recursive))))&#xA;  (unless (require &#39;elpaca-autoloads nil t)&#xA;    (require &#39;elpaca)&#xA;    (elpaca-generate-autoloads &#34;elpaca&#34; repo)&#xA;    (load &#34;./elpaca-autoloads&#34;)))&#xA;(add-hook &#39;after-init-hook #&#39;elpaca-process-queues)&#xA;(elpaca `(,@elpaca-order))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows users must be able to create symlinks&lt;sup&gt;&lt;a id=&#34;fnr.-0-1&#34; class=&#34;footref&#34; href=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/#fn.-0-1&#34; role=&#34;doc-backlink&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, or enable &lt;code&gt;elpaca-no-symlink-mode&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Uncomment for systems which cannot create symlinks:&#xA;;; (elpaca-no-symlink-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll also want to disable package.el in your early-init file&lt;sup&gt;&lt;a id=&#34;fnr.-0-2&#34; class=&#34;footref&#34; href=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/#fn.-0-2&#34; role=&#34;doc-backlink&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq package-enable-at-startup nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And remove anything related to package.el in your init file. e.g. calls to &lt;code&gt;(package-activate-all)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operation&lt;/th&gt; &#xA;   &lt;th&gt;UI (keys apply in elpaca-ui-mode)&lt;/th&gt; &#xA;   &lt;th&gt;completing-read interface commands&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Finding Packages&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g&lt;/code&gt; &lt;code&gt;m&lt;/code&gt; (or &lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;elpaca-manager&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elpaca-info&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trying Packages (for current session)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;i&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elpaca-try&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fetching Package Updates&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;f&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elpaca-fetch&lt;/code&gt; or &lt;code&gt;elpaca-fetch-all&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Merging Updates&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;m&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elpaca-merge&lt;/code&gt; or &lt;code&gt;elpaca-merge-all&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Updating Packages&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;p&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elpaca-update&lt;/code&gt; or &lt;code&gt;elpaca-update-all&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rebuilding Packages&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;r&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elpaca-rebuild&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deleting Packages&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;d&lt;/code&gt; &lt;code&gt;x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elpaca-delete&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;View Package Logs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g&lt;/code&gt; &lt;code&gt;l&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elpaca-log&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visit Package Repository Directory&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elpaca-visit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visit Package Build Directory&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-u&lt;/code&gt; &lt;code&gt;v&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;C-u M-x&lt;/code&gt; &lt;code&gt;elpaca-visit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Browse Package Website&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;b&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elpaca-browse&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;​* Update is an alias for &#34;pull&#34;. It&#39;s encouraged to fetch, review, and &lt;strong&gt;then&lt;/strong&gt; merge package updates rather than pulling.&lt;/p&gt; &#xA;&lt;p&gt;Packages installed via the above commands are not loaded on subsequent Emacs sessions (after restarting). To install and load packages persistently (across Emacs restarts), use the &lt;code&gt;elpaca&lt;/code&gt; macro in your init file after the installer. (&lt;a href=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/#installer&#34;&gt;installer&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; Install a package via the elpaca macro&#xA;;; See the &#34;recipes&#34; section of the manual for more details.&#xA;&#xA;;; (elpaca example-package)&#xA;&#xA;;; Install use-package support&#xA;(elpaca elpaca-use-package&#xA;  ;; Enable use-package :ensure support for Elpaca.&#xA;  (elpaca-use-package-mode))&#xA;&#xA;;;When installing a package used in the init file itself,&#xA;;;e.g. a package which adds a use-package key word,&#xA;;;use the :wait recipe keyword to block until that package is installed/configured.&#xA;;;For example:&#xA;;;(use-package general :ensure (:wait t) :demand t)&#xA;&#xA;;; Expands to: (elpaca evil (use-package evil :demand t))&#xA;(use-package evil :ensure t :demand t)&#xA;&#xA;;;Turns off elpaca-use-package-mode current declaration&#xA;;;Note this will cause evaluate the declaration immediately. It is not deferred.&#xA;;;Useful for configuring built-in emacs features.&#xA;(use-package emacs :ensure nil :config (setq ring-bell-function #&#39;ignore))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Elpaca installs and activates packages asynchronously. Elpaca processes its package queues &lt;em&gt;after&lt;/em&gt; Emacs reads the init file.&lt;sup&gt;&lt;a id=&#34;fnr.-0-3&#34; class=&#34;footref&#34; href=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/#fn.-0-3&#34; role=&#34;doc-backlink&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; Consider the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(elpaca package-a (message &#34;First&#34;)) ; Queue First&#xA;(message &#34;Second&#34;) ; Second messaged&#xA;(elpaca package-b (message &#34;Third&#34;)) ; Queue Third&#xA;(elpaca-process-queues) ; Process queue: First messaged, Third messaged.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&#34;Second&#34; will be message &lt;em&gt;before&lt;/em&gt; &#34;First&#34; and &#34;Third&#34;. If a form should be evaluated after a package is installed/activated, put it in that package declaration&#39;s &lt;em&gt;BODY&lt;/em&gt;. Declaration &lt;em&gt;BODY&lt;/em&gt; forms are evaluated synchronously in declared order. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(elpaca package-a (message &#34;First&#34;) (message &#34;Second&#34;))  ; Queue First, Second&#xA;(elpaca package-b (message &#34;Third&#34;))  ; Queue Third&#xA;(elpaca-process-queues) ; Process queue: First, Second, then Third messaged.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add configuration which relies on &lt;code&gt;after-init-hook&lt;/code&gt;, &lt;code&gt;emacs-startup-hook&lt;/code&gt;, etc to &lt;code&gt;elpaca-after-init-hook&lt;/code&gt; so it runs after Elpaca has activated all queued packages. This includes loading of saved customizations. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq custom-file (expand-file-name &#34;customs.el&#34; user-emacs-directory))&#xA;(add-hook &#39;elpaca-after-init-hook (lambda () (load custom-file &#39;noerror)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Footnotes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.1&#34; class=&#34;footnum&#34; href=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/#fnr.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;a href=&#34;https://www.howtogeek.com/16226/complete-guide-to-symbolic-links-symlinks-on-windows-or-linux/&#34;&gt;windows symlink guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.2&#34; class=&#34;footnum&#34; href=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/#fnr.2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html&#34;&gt;early-init file&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.3&#34; class=&#34;footnum&#34; href=&#34;https://raw.githubusercontent.com/progfolio/elpaca/master/#fnr.3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; This is so Elpaca can build a proper dependency tree. It ensures packages the user explicitly requests are not preempted by dependencies of other packages.&lt;/p&gt;</summary>
  </entry>
</feed>