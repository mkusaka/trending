<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T02:37:29Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Malabarba/beacon</title>
    <updated>2022-06-03T02:37:29Z</updated>
    <id>tag:github.com,2022-06-03:/Malabarba/beacon</id>
    <link href="https://github.com/Malabarba/beacon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A light that follows your cursor around so you don&#39;t lose it!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Beacon --- Never lose your cursor again&lt;/p&gt; &#xA;&lt;p&gt;This is a global minor-mode. Turn it on everywhere with: #+BEGIN_SRC emacs-lisp (beacon-mode 1) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;[[file:example-beacon.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Whenever the window scrolls a light will shine on top of your cursor so you know where it is.&lt;/p&gt; &#xA;&lt;p&gt;That’s it.&lt;/p&gt; &#xA;&lt;p&gt;** Customizations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The appearance of the beacon is configured by &lt;del&gt;beacon-size&lt;/del&gt; and &lt;del&gt;beacon-color&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The duration is configured by &lt;del&gt;beacon-blink-duration&lt;/del&gt; and &lt;del&gt;beacon-blink-delay&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To customize /when/ the beacon should blink at all, configure &lt;del&gt;beacon-blink-when-window-scrolls&lt;/del&gt;, &lt;del&gt;beacon-blink-when-window-changes&lt;/del&gt;, and &lt;del&gt;beacon-blink-when-point-moves&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To prevent the beacon from blinking only on specific situations configure &lt;del&gt;beacon-dont-blink-major-modes&lt;/del&gt;, &lt;del&gt;beacon-dont-blink-predicates&lt;/del&gt;, or &lt;del&gt;beacon-dont-blink-commands&lt;/del&gt;. You can also disable it only in specific buffers by doing &lt;del&gt;(setq-local beacon-mode nil)&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Beacon can also push the mark for you whenever point moves a long distance. For this, configure &lt;del&gt;beacon-push-mark&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/tsdh][Tassilo Horn]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you’d like to help too, just open a PR.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rmloveland/zoom-to-point</title>
    <updated>2022-06-03T02:37:29Z</updated>
    <id>tag:github.com,2022-06-03:/rmloveland/zoom-to-point</id>
    <link href="https://github.com/rmloveland/zoom-to-point" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs functions that zoom in on the text at point.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Exposes a command, &lt;code&gt;zoom-toggle&#39;, which will increase or decrease the size of the text at point, and a variable, &lt;/code&gt;&lt;em&gt;default-zoom-level&lt;/em&gt;&#39;, which determines the change in size.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Malabarba/aggressive-indent-mode</title>
    <updated>2022-06-03T02:37:29Z</updated>
    <id>tag:github.com,2022-06-03:/Malabarba/aggressive-indent-mode</id>
    <link href="https://github.com/Malabarba/aggressive-indent-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs minor mode that keeps your code always indented. More reliable than electric-indent-mode.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aggressive-indent-mode &lt;a href=&#34;http://melpa.org/#/aggressive-indent&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/aggressive-indent-badge.svg?sanitize=true&#34; alt=&#34;Melpa&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/aggressive-indent&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/aggressive-indent-badge.svg?sanitize=true&#34; alt=&#34;Melpa-Stable&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;electric-indent-mode&lt;/code&gt; is enough to keep your code nicely aligned when all you do is type. However, once you start shifting blocks around, transposing lines, or slurping and barfing sexps, indentation is bound to go wrong.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;aggressive-indent-mode&lt;/code&gt;&lt;/strong&gt; is a minor mode that keeps your code &lt;strong&gt;always&lt;/strong&gt; indented. It reindents after every change, making it more reliable than &lt;code&gt;electric-indent-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Demonstration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;An example of Lisp mode (Emacs Lisp): &lt;img src=&#34;https://raw.githubusercontent.com/Malabarba/aggressive-indent-mode/master/lisp-example.gif&#34; alt=&#34;Lisp Code Example&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An example of non-Lisp mode (C): &lt;img src=&#34;https://raw.githubusercontent.com/Malabarba/aggressive-indent-mode/master/c-example.gif&#34; alt=&#34;C Code Example&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;p&gt;This package is available from Melpa, you may install it by calling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET aggressive-indent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then activate it with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;emacs-lisp-mode-hook #&#39;aggressive-indent-mode)&#xA;(add-hook &#39;css-mode-hook #&#39;aggressive-indent-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use this hook on any mode you want, &lt;code&gt;aggressive-indent&lt;/code&gt; is not exclusive to emacs-lisp code. In fact, if you want to turn it on for every programming mode, you can do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-aggressive-indent-mode 1)&#xA;(add-to-list &#39;aggressive-indent-excluded-modes &#39;html-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manual Installation&lt;/h4&gt; &#xA;&lt;p&gt;If you don&#39;t want to install from Melpa, you can download it manually, place it in your &lt;code&gt;load-path&lt;/code&gt; along with its dependency &lt;code&gt;cl-lib&lt;/code&gt; (which you should already have if your &lt;code&gt;emacs-version&lt;/code&gt; is at least 24.3).&lt;/p&gt; &#xA;&lt;p&gt;Then require it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;aggressive-indent)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;The variable &lt;code&gt;aggressive-indent-dont-indent-if&lt;/code&gt; lets you customize when you &lt;strong&gt;don&#39;t&lt;/strong&gt; want indentation to happen. For instance, if you think it&#39;s annoying that lines jump around in &lt;code&gt;c++-mode&lt;/code&gt; because you haven&#39;t typed the &lt;code&gt;;&lt;/code&gt; yet, you could add the following clause:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list&#xA; &#39;aggressive-indent-dont-indent-if&#xA; &#39;(and (derived-mode-p &#39;c++-mode)&#xA;       (null (string-match &#34;\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)&#34;&#xA;                           (thing-at-point &#39;line)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gratipay.com/Malabarba&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/gratipay/gratipay-badge/2.1.3/dist/gratipay.png&#34; alt=&#34;Gratipay&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lewang/ws-butler</title>
    <updated>2022-06-03T02:37:29Z</updated>
    <id>tag:github.com,2022-06-03:/lewang/ws-butler</id>
    <link href="https://github.com/lewang/ws-butler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unobtrusively trim extraneous white-space *ONLY* in lines edited.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/lewang/ws-butler&#34;&gt;&lt;img src=&#34;https://travis-ci.org/lewang/ws-butler.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ws-butler -- an unobtrusive way to trim spaces from end of line&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Only lines touched get trimmed. If the white space at end of buffer is changed, then blank lines at the end of buffer are truncated respecting &lt;code&gt;require-final-newline&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Trimming only happens when saving.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What does unobtrusive mean?&lt;/h2&gt; &#xA;&lt;p&gt;The user is not made explicitly aware when trimming happens. You keep working and the butler takes care of whitespace for you.&lt;/p&gt; &#xA;&lt;p&gt;This means if point is at a location that was trimmed, point is not moved, but the data on disk has been cleaned up (revert the buffer to confirm).&lt;/p&gt; &#xA;&lt;h3&gt;Not moving point because of space deletion.&lt;/h3&gt; &#xA;&lt;p&gt;By default, ws-butler preserves &#34;virtual spaces&#34; in front of point if necessary. The file on disk is cleaned up however.&lt;/p&gt; &#xA;&lt;p&gt;This can be disabled with &lt;code&gt;ws-butler-keep-whitespace-before-point&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Trimming only specific lines.&lt;/h4&gt; &#xA;&lt;p&gt;There might be lines you don&#39;t want to get trimmed, e.g. spaces in multiline strings. The behavior can be customized through &lt;code&gt;ws-butler-trim-predicate&lt;/code&gt;. This variable should hold a function that expects 2 arguments (region beginning and end) and should return true only for regions that one wants to get trimmed. As an example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq ws-butler-trim-predicate&#xA;      (lambda (beg end)&#xA;        (not (eq &#39;font-lock-string-face&#xA;                 (get-text-property end &#39;face)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Debian 9 or later or Ubuntu 16.10 or later&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;apt-get install elpa-ws-butler&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;To use ws-butler, require it and add ws-butler-mode as a hook on any mode where you would like it to be enabled. For example, to enable for all programming language modes, add this to your .emacs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;ws-butler)&#xA;(add-hook &#39;prog-mode-hook #&#39;ws-butler-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use ws-butler-global-mode to turn it on everywhere.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;I started by trimming all spaces at EOL in source code in a &#34;write-file-hook&#34; when I started programming. It seemed like a great idea.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then I got a job working on a code base where no one else trimmed spaces, so my commits became super noisy. I wanted to stop being the &#34;white space&#34; police, so switched to &lt;a href=&#34;ftp://ftp.lysator.liu.se/pub/emacs/ws-trim.el&#34;&gt;ws-trim&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ws-trim works in a &lt;code&gt;post-command-hook&lt;/code&gt; and trims white space while you edit.&lt;/li&gt; &#xA;   &lt;li&gt;This was too eager for me. For example, I would stop and scroll away to look at some code, and when I get back to continue, my indentation is gone.&lt;/li&gt; &#xA;   &lt;li&gt;It caused some problems with other customizations which also rely on &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I started experimenting with using &lt;code&gt;highlight-changes-mode&lt;/code&gt; to trim only lines I touch on save.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, the dependency on &lt;code&gt;highlight-changes-mode&lt;/code&gt; has been removed and we handle change changing through text properties ourselves.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>emacs-mirror/emacs</title>
    <updated>2022-06-03T02:37:29Z</updated>
    <id>tag:github.com,2022-06-03:/emacs-mirror/emacs</id>
    <link href="https://github.com/emacs-mirror/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Copyright (C) 2001-2022 Free Software Foundation, Inc. See the end of the file for license conditions.&lt;/p&gt; &#xA;&lt;p&gt;This directory tree holds version 29.0.50 of GNU Emacs, the extensible, customizable, self-documenting real-time display editor.&lt;/p&gt; &#xA;&lt;p&gt;The file INSTALL in this directory says how to build and install GNU Emacs on various systems, once you have unpacked or checked out the entire Emacs file tree.&lt;/p&gt; &#xA;&lt;p&gt;See the file etc/NEWS for information on new features and other user-visible changes in recent versions of Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file etc/PROBLEMS contains information on many common problems that occur in building, installing and running Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file CONTRIBUTE contains information on contributing to Emacs as a developer.&lt;/p&gt; &#xA;&lt;p&gt;You may encounter bugs in this release. If you do, please report them; your bug reports are valuable contributions to the FSF, since they allow us to notice and fix problems on machines we don&#39;t have, or in code we don&#39;t use often. Please send bug reports to the mailing list &lt;a href=&#34;mailto:bug-gnu-emacs@gnu.org&#34;&gt;bug-gnu-emacs@gnu.org&lt;/a&gt;. If possible, use M-x report-emacs-bug.&lt;/p&gt; &#xA;&lt;p&gt;See the &#34;Bugs&#34; section of the Emacs manual for more information on how to report bugs. (The file &#39;BUGS&#39; in this directory explains how you can find and read that section using the Info files that come with Emacs.) For a list of mailing lists related to Emacs, see &lt;a href=&#34;https://savannah.gnu.org/mail/?group=emacs&#34;&gt;https://savannah.gnu.org/mail/?group=emacs&lt;/a&gt;. For the complete list of GNU mailing lists, see &lt;a href=&#34;https://lists.gnu.org/&#34;&gt;https://lists.gnu.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;etc&#39; subdirectory contains several other files, named in capital letters, which you might consider looking at when installing GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure&#39; is a shell script to acclimate Emacs to the oddities of your processor and operating system. It creates the file &#39;Makefile&#39; (a script for the &#39;make&#39; program), which automates the process of building and installing Emacs. See INSTALL for more detailed information.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;configure.ac&#39; is the input used by the autoconf program to construct the &#39;configure&#39; script.&lt;/p&gt; &#xA;&lt;p&gt;The shell script &#39;autogen.sh&#39; generates &#39;configure&#39; and other files by running Autoconf (which in turn uses GNU m4), and configures files in the .git subdirectory if you are using Git. If you want to use it, you will need to install recent versions of these build tools. This should be needed only if you edit files like &#39;configure.ac&#39; that specify Emacs&#39;s autobuild procedure.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;Makefile.in&#39; is a template used by &#39;configure&#39; to create &#39;Makefile&#39;.&lt;/p&gt; &#xA;&lt;p&gt;The file &#39;make-dist&#39; is a shell script to build a distribution tar file from the current Emacs tree, containing only those files appropriate for distribution. If you make extensive changes to Emacs, this script will help you distribute your version to others.&lt;/p&gt; &#xA;&lt;p&gt;There are several subdirectories:&lt;/p&gt; &#xA;&lt;p&gt;&#39;src&#39; holds the C code for Emacs (the Emacs Lisp interpreter and its primitives, the redisplay code, and some basic editing functions). &#39;lisp&#39; holds the Emacs Lisp code for Emacs (most everything else). &#39;leim&#39; holds the original source files for the generated files in lisp/leim. These form the library of Emacs input methods, required to type international characters that can&#39;t be directly produced by your keyboard. &#39;lib&#39; holds source code for libraries used by Emacs and its utilities &#39;lib-src&#39; holds the source code for some utility programs for use by or with Emacs, like movemail and etags. &#39;lwlib&#39; holds the sources of the Lucid Widget Library used on X. &#39;oldXMenu&#39; source files from X11R2 XMenu library, used in non-toolkit builds. &#39;etc&#39; holds miscellaneous architecture-independent data files Emacs uses, like the tutorial text and tool bar images. The contents of the &#39;lisp&#39;, &#39;leim&#39;, &#39;info&#39;, and &#39;doc&#39; subdirectories are architecture-independent too. &#39;info&#39; holds the Info documentation tree for Emacs. &#39;doc/emacs&#39; holds the source code for the Emacs Manual. If you modify the manual sources, you will need the &#39;makeinfo&#39; program to produce an updated manual. &#39;makeinfo&#39; is part of the GNU Texinfo package; you need a suitably recent version of Texinfo. &#39;doc/lispref&#39; holds the source code for the Emacs Lisp reference manual. &#39;doc/lispintro&#39; holds the source code for the Introduction to Programming in Emacs Lisp manual. &#39;msdos&#39; holds configuration files for compiling Emacs under MS-DOS. &#39;nextstep&#39; holds instructions and some other files for compiling the Nextstep port of Emacs, for GNUstep and macOS Cocoa. &#39;nt&#39; holds code and documentation for building Emacs on MS-Windows. &#39;test&#39; holds tests for various aspects of Emacs&#39;s functionality. &#39;modules&#39; holds the modhelp.py helper script. &#39;admin&#39; holds files used by Emacs developers, and Unicode data files. &#39;build-aux&#39; holds auxiliary files used during the build. &#39;m4&#39; holds Autoconf macros used for generating the configure script.&lt;/p&gt; &#xA;&lt;p&gt;Building Emacs on non-Posix platforms requires tools that aren&#39;t part of the standard distribution of the OS. The platform-specific README files and installation instructions should list the required tools.&lt;/p&gt; &#xA;&lt;p&gt; NOTE ON COPYRIGHT YEARS&lt;/p&gt; &#xA;&lt;p&gt;In copyright notices where the copyright holder is the Free Software Foundation, then where a range of years appears, this is an inclusive range that applies to every year in the range. For example: 2005-2008 represents the years 2005, 2006, 2007, and 2008.&lt;/p&gt; &#xA;&lt;p&gt; This file is part of GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with GNU Emacs. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>