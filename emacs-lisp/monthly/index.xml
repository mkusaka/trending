<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-01T01:48:11Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joaotavora/yasnippet</title>
    <updated>2024-10-01T01:48:11Z</updated>
    <id>tag:github.com,2024-10-01:/joaotavora/yasnippet</id>
    <link href="https://github.com/joaotavora/yasnippet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A template system for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/joaotavora/yasnippet&#34;&gt;&lt;img src=&#34;https://travis-ci.org/joaotavora/yasnippet.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Intro&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;YASnippet&lt;/strong&gt; is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from &lt;a href=&#34;http://manual.macromates.com/en/snippets&#34;&gt;TextMate&#39;s&lt;/a&gt; syntax, you can even &lt;a href=&#34;https://raw.githubusercontent.com/joaotavora/yasnippet/master/#import&#34;&gt;import&lt;/a&gt; most TextMate templates to YASnippet. Watch &lt;a href=&#34;http://www.youtube.com/watch?v=ZCGmZK4V7Sg&#34;&gt;a demo on YouTube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Manual install from Git&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repository somewhere&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd ~/.emacs.d/plugins&#xA;$ git clone --recursive https://github.com/joaotavora/yasnippet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following in your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path&#xA;              &#34;~/.emacs.d/plugins/yasnippet&#34;)&#xA;(require &#39;yasnippet)&#xA;(yas-global-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add your own snippets to &lt;code&gt;~/.emacs.d/snippets&lt;/code&gt; by placing files there or invoking &lt;code&gt;yas-new-snippet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install with &lt;code&gt;package-install&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;In a recent emacs &lt;code&gt;M-x list-packages&lt;/code&gt; is the recommended way to list and install packages. It&#39;s available from &lt;a href=&#34;http://elpa.gnu.org/packages/yasnippet.html&#34;&gt;GNU ELPA&lt;/a&gt;. If you need a very recent snapshot, you can get it from &lt;a href=&#34;http://elpa.gnu.org/devel/yasnippet.html&#34;&gt;GNU-devel ELPA&lt;/a&gt; as well as &lt;a href=&#34;http://melpa.milkbox.net/&#34;&gt;MELPA&lt;/a&gt; (see &lt;a href=&#34;http://melpa.org/#installing&#34;&gt;http://melpa.org/#installing&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Install with el-get&lt;/h2&gt; &#xA;&lt;p&gt;El-get is another nice way to get the most recent version, too. See &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;https://github.com/dimitri/el-get&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Use &lt;code&gt;yas-minor-mode&lt;/code&gt; on a per-buffer basis&lt;/h2&gt; &#xA;&lt;p&gt;To use YASnippet as a non-global minor mode, don&#39;t call &lt;code&gt;yas-global-mode&lt;/code&gt;; instead call &lt;code&gt;yas-reload-all&lt;/code&gt; to load the snippet tables and then call &lt;code&gt;yas-minor-mode&lt;/code&gt; from the hooks of major-modes where you want YASnippet enabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(yas-reload-all)&#xA;(add-hook &#39;prog-mode-hook #&#39;yas-minor-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Where are the snippets?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a name=&#34;import&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;YASnippet no longer bundles snippets directly, but it&#39;s very easy to get some!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://github.com/AndreaCrotti/yasnippet-snippets&#34;&gt;yasnippet-snippets&lt;/a&gt; - a snippet collection package maintained by &lt;a href=&#34;https://github.com/AndreaCrotti&#34;&gt;AndreaCrotti&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;It can be installed with &lt;code&gt;M-x package-install RET yasnippet-snippets&lt;/code&gt; if you have added MELPA to your package sources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://github.com/joaotavora/yasmate&#34;&gt;yasmate&lt;/a&gt; a tool which is dedicated to converting textmate bundles into yasnippet snippets.&lt;/p&gt; &lt;p&gt;To use these snippets you have to run the tool first, so &lt;a href=&#34;http://github.com/joaotavora/yasmate&#34;&gt;see its doc&lt;/a&gt;), and then point the &lt;code&gt;yas-snippet-dirs&lt;/code&gt; variable to the &lt;code&gt;.../yasmate/snippets&lt;/code&gt; subdir.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mattfidler/textmate-to-yas.el&#34;&gt;textmate-to-yas.el&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This is another textmate bundle converting tool using Elisp instead of Ruby.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Naturally, you can point &lt;code&gt;yas-snippet-dirs&lt;/code&gt; to good snippet collections out there. If you have created snippets for a mode, or multiple modes, consider creating a repository to host them, then tell users that it should be added like this to &lt;code&gt;yas-snippet-dirs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq yas-snippet-dirs&#xA;      &#39;(&#34;~/.emacs.d/snippets&#34;                 ;; personal snippets&#xA;        &#34;/path/to/some/collection/&#34;           ;; foo-mode and bar-mode snippet collection&#xA;        &#34;/path/to/yasnippet/yasmate/snippets&#34; ;; the yasmate collection&#xA;        ))&#xA;&#xA;(yas-global-mode 1) ;; or M-x yas-reload-all if you&#39;ve started YASnippet already.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Manual, issues etc&lt;/h1&gt; &#xA;&lt;p&gt;There&#39;s comprehensive &lt;a href=&#34;http://joaotavora.github.io/yasnippet/&#34;&gt;documentation&lt;/a&gt; on using and customising YASnippet.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a &lt;a href=&#34;https://github.com/joaotavora/yasnippet/issues?q=label%3Asupport&#34;&gt;list of support issues&lt;/a&gt;, with solutions to common problems and practical snippet examples.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/joaotavora/yasnippet/issues&#34;&gt;Github issue tracker&lt;/a&gt; is where most YASnippet-related discussion happens. Nevertheless, since YASnippet is a part of Emacs, you may alternatively report bugs to Emacs via &lt;code&gt;M-x report-emacs-bug&lt;/code&gt; or sending an email to &lt;code&gt;bug-gnu-emacs@gnu.org&lt;/code&gt;, putting &#34;yasnippet&#34; somewhere in the subject.&lt;/p&gt; &#xA;&lt;h2&gt;Important note regarding bug reporting&lt;/h2&gt; &#xA;&lt;p&gt;Your bug reports are very valuable.&lt;/p&gt; &#xA;&lt;p&gt;The most important thing when reporting bugs is making sure that we have a way to reproduce the problem exactly like it happened to you.&lt;/p&gt; &#xA;&lt;p&gt;To do this, we need to rule out interference from external factors like other Emacs extensions or your own customisations.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example report that &#34;sandboxes&#34; an Emacs session just for reproducing a bug.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ emacs --version&#xA;Emacs 24.3&#xA;$ cd /tmp/&#xA;$ git clone https://github.com/joaotavora/yasnippet.git yasnippet-bug&#xA;$ cd yasnippet-bug&#xA;$ git log -1 --oneline&#xA;6053db0 Closes #527: Unbreak case where yas-fallback-behaviour is a list&#xA;$ HOME=$PWD emacs -L . # This &#34;sandboxes&#34; your emacs, melpa configuration, etc&#xA;&#xA;(require &#39;yasnippet)&#xA;(yas-global-mode 1)&#xA;&#xA;When I open a foo-mode file I don&#39;t see foo-mode under the &#34;YASnippet&#34; menu!&#xA;OR&#xA;When loading yasnippet I see &#34;Error: failed to frobnicate&#34;!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;emacs -Q&lt;/code&gt; or temporarily moving your &lt;code&gt;.emacs&lt;/code&gt; init file to the side is another way to achieve good reproducibility.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/joaotavora/yasnippet/issues/318&#34;&gt;another example&lt;/a&gt; of a bug report. It has everything needed for a successful analysis and speedy resolution.&lt;/p&gt; &#xA;&lt;p&gt;Also, don&#39;t forget to state the Emacs version (use &lt;code&gt;M-x emacs-version&lt;/code&gt;) and the yasnippet version you are using (if using the latest from github, do &lt;code&gt;git log -1&lt;/code&gt; in the dir).&lt;/p&gt; &#xA;&lt;p&gt;Any more info is welcome, but don&#39;t just paste a backtrace or an error message string you got, unless we ask for it.&lt;/p&gt; &#xA;&lt;p&gt;Finally, thank you very much for using YASnippet!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>justbur/emacs-which-key</title>
    <updated>2024-10-01T01:48:11Z</updated>
    <id>tag:github.com,2024-10-01:/justbur/emacs-which-key</id>
    <link href="https://github.com/justbur/emacs-which-key" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package that displays available keybindings in popup&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;which-key [[https://elpa.gnu.org/packages/which-key.html][https://elpa.gnu.org/packages/which-key.svg]] [[http://melpa.org/#/which-key][http://melpa.org/packages/which-key-badge.svg]] [[http://stable.melpa.org/#/which-key][file:http://stable.melpa.org/packages/which-key-badge.svg]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** ARCHIVE NOTICE&lt;/p&gt; &#xA;&lt;p&gt;which-key is now included in the master branch of Emacs and will likely be released with Emacs v30. Bug reports and contributions to which-key will now be considered through standard Emacs channels, and this repository is being archived.&lt;/p&gt; &#xA;&lt;p&gt;** Introduction =which-key= is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter =C-x= and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow =C-x= (or as many as space allows given your settings). This includes prefixes like =C-x 8= which are shown in a different face. Screenshots of what the popup will look like are included below. =which-key= started as a rewrite of [[https://github.com/kai2nenobu/guide-key][guide-key-mode]], but the feature sets have diverged to a certain extent.&lt;/p&gt; &#xA;&lt;p&gt;** Table of Contents :TOC_3:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#which-key][which-key]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#archive-notice][ARCHIVE NOTICE]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#introduction][Introduction]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#install][Install]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#melpa][MELPA]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#manually][Manually]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#initial-setup][Initial Setup]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#side-window-bottom-option][Side Window Bottom Option]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#side-window-right-option][Side Window Right Option]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#side-window-right-then-bottom][Side Window Right then Bottom]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#minibuffer-option][Minibuffer Option]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#manual-activation][Manual Activation]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#additional-commands][Additional Commands]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#special-features-and-configuration-options][Special Features and Configuration Options]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#popup-type-options][Popup Type Options]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#custom-string-replacement-options][Custom String Replacement Options]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#sorting-options][Sorting Options]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#paging-options][Paging Options]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#face-customization-options][Face Customization Options]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#other-options][Other Options]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#support-for-third-party-libraries][Support for Third-Party Libraries]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#key-chord][Key-chord]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#evil-operators][Evil operators]]&lt;/li&gt; &#xA;     &lt;li&gt;[[#god-mode][God-mode]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#more-examples][More Examples]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#nice-display-with-split-frame][Nice Display with Split Frame]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#known-issues][Known Issues]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#thanks][Thanks]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Install *** MELPA After setting up [[http://melpa.org][MELPA]] as a repository, use =M-x package-install which-key= or your preferred method. You will need to call =which-key-mode= to enable the minor mode of course.&lt;/p&gt; &#xA;&lt;p&gt;*** Manually Add which-key.el to your =load-path= and require. Something like #+BEGIN_SRC emacs-lisp (add-to-list &#39;load-path &#34;path/to/which-key.el&#34;) (require &#39;which-key) (which-key-mode) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Initial Setup No further setup is required if you are happy with the default setup. To try other options, there are 3 choices of default configs that are preconfigured (then customize to your liking). The main choice is where you want the which-key buffer to display. Screenshots of the default options are shown in the next sections.&lt;/p&gt; &#xA;&lt;p&gt;In each case, we show as many key bindings as we can fit in the buffer within the constraints. The constraints are determined by several factors, including your Emacs settings, the size of the current Emacs frame, and the which-key settings, most of which are described below.&lt;/p&gt; &#xA;&lt;p&gt;There are many substitution abilities included, which are quite flexible (ability to use regexp for example). This makes which-key very customizable.&lt;/p&gt; &#xA;&lt;p&gt;*** Side Window Bottom Option Popup side window on bottom. This is the current default. To restore this setup use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(which-key-setup-side-window-bottom) #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[./img/which-key-bottom.png]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Side Window Right Option Popup side window on right. For defaults use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(which-key-setup-side-window-right) #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Note the defaults are fairly conservative and will tend to not display on&#xA;narrower frames. If you get a message saying which-key can&#39;t display the&#xA;keys, try making your frame wider or adjusting the defaults related to the&#xA;maximum width (see =M-x customize-group which-key=).&#xA;&#xA;[[./img/which-key-right.png]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Side Window Right then Bottom This is a combination of the previous two choices. It will try to use the right side, but if there is no room it will switch to using the bottom, which is usually easier to fit keys into. This setting can be helpful if the size of the Emacs frame changes frequently, which might be the case if you are using a dynamic/tiling window manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp&#xA;(which-key-setup-side-window-right-bottom)&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Minibuffer Option Take over the minibuffer. For the recommended configuration use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp&#xA;(which-key-setup-minibuffer)&#xA;#+END_SRC&#xA;&#xA;[[./img/which-key-minibuffer.png]]&#xA;&#xA;Note the maximum height of the minibuffer is controlled through the built-in&#xA;variable =max-mini-window-height=. Also, the paging commands do not work&#xA;reliably with the minibuffer option. Use the side window on the bottom&#xA;option if you need paging.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Manual Activation #+NAME: #manual-activation If you only want the =which-key= popup when you need it, you can try a setup along the following lines&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ;; Allow C-h to trigger which-key before it is done automatically (setq which-key-show-early-on-C-h t) ;; make sure which-key doesn&#39;t show normally but refreshes quickly after it is ;; triggered. (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05) (which-key-mode) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This will prevent which-key from showing automatically, and allow you to use =C-h= in the middle of a key sequence to show the =which-key= buffer and keep it open for the remainder of the key sequence.&lt;/p&gt; &#xA;&lt;p&gt;** Additional Commands&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=which-key-show-top-level= will show most key bindings without a prefix. It is most and not all, because many are probably not interesting to most users.&lt;/li&gt; &#xA; &lt;li&gt;=which-key-show-major-mode= will show the currently active major-mode bindings. It&#39;s similar to =C-h m= but in a which-key format. It is also aware of evil commands defined using =evil-define-key=.&lt;/li&gt; &#xA; &lt;li&gt;=which-key-show-next-page-cycle= / =which-key-show-previous-page-cycle= will flip pages in a circle.&lt;/li&gt; &#xA; &lt;li&gt;=which-key-show-next-page-no-cycle= / =which-key-show-previous-page-no-cycle= will flip pages and stop at first/last page.&lt;/li&gt; &#xA; &lt;li&gt;=which-key-undo= can be used to undo the last keypress when in the middle of a key sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Special Features and Configuration Options There are more options than the ones described here. All of the configurable variables are available through =M-x customize-group which-key=. *** Popup Type Options There are three different popup types that which-key can use by default to display the available keys. The variable =which-key-popup-type= decides which one is used. **** minibuffer #+BEGIN_SRC emacs-lisp (setq which-key-popup-type &#39;minibuffer) #+END_SRC Show keys in the minibuffer. **** side window #+BEGIN_SRC emacs-lisp (setq which-key-popup-type &#39;side-window) #+END_SRC Show keys in a side window. This popup type has further options: #+BEGIN_SRC emacs-lisp ;; location of which-key window. valid values: top, bottom, left, right, ;; or a list of any of the two. If it&#39;s a list, which-key will always try ;; the first location first. It will go to the second location if there is ;; not enough room to display any keys in the first location (setq which-key-side-window-location &#39;bottom)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ;; max width of which-key window, when displayed at left or right.&#xA; ;; valid values: number of columns (integer), or percentage out of current&#xA; ;; frame&#39;s width (float larger than 0 and smaller than 1)&#xA; (setq which-key-side-window-max-width 0.33)&#xA;&#xA; ;; max height of which-key window, when displayed at top or bottom.&#xA; ;; valid values: number of lines (integer), or percentage out of current&#xA; ;; frame&#39;s height (float larger than 0 and smaller than 1)&#xA; (setq which-key-side-window-max-height 0.25)&#xA; #+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** frame&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp&#xA; (setq which-key-popup-type &#39;frame)&#xA; #+END_SRC&#xA; Show keys in a popup frame. This popup won&#39;t work very well in a terminal,&#xA; where only one frame can be shown at any given moment. This popup type has&#xA; further options:&#xA; #+BEGIN_SRC emacs-lisp&#xA; ;; max width of which-key frame: number of columns (an integer)&#xA; (setq which-key-frame-max-width 60)&#xA;&#xA; ;; max height of which-key frame: number of lines (an integer)&#xA; (setq which-key-frame-max-height 20)&#xA; #+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** custom Write your own display functions! This requires you to write three functions, =which-key-custom-popup-max-dimensions-function=, =which-key-custom-show-popup-function=, and =which-key-custom-hide-popup-function=. Refer to the documentation for those variables for more information, but here is a working example (this is the current implementation of side-window bottom).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp&#xA;   (setq which-key-popup-type &#39;custom)&#xA;   (defun which-key-custom-popup-max-dimensions-function (ignore)&#xA;     (cons&#xA;      (which-key-height-or-percentage-to-height&#xA;       which-key-side-window-max-height)&#xA;      (frame-width)))&#xA;   (defun fit-horizonatally ()&#xA;     (let ((fit-window-to-buffer-horizontally t))&#xA;       (fit-window-to-buffer)))&#xA;   (defun which-key-custom-show-popup-function (act-popup-dim)&#xA;     (let* ((alist &#39;((window-width . fit-horizontally)&#xA;                     (window-height . fit-window-to-buffer))))&#xA;       (if (get-buffer-window which-key--buffer)&#xA;           (display-buffer-reuse-window which-key--buffer alist)&#xA;         (display-buffer-in-major-side-window which-key--buffer&#xA;                                              &#39;bottom 0 alist))))&#xA;   (defun which-key-custom-hide-popup-function ()&#xA;     (when (buffer-live-p which-key--buffer)&#xA;       (quit-windows-on which-key--buffer)))&#xA; #+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Custom String Replacement Options #+NAME: #custom-string-replacement-options You can customize the way the keys show in the buffer using three different replacement methods. The first, keymap-based replacement, is preferred and will take precedence over the others. The remaining methods are still available, because they pre-date the first and are more flexible in what they can accomplish.&lt;/p&gt; &#xA;&lt;p&gt;**** Keymap-based replacement Using this method, which-key can display a custom string for a key definition in some keymap. There are two ways to define a keymap-based replacement. The preferred way is to use =define-key= (or a command that uses =define-key= internally) with a cons cell as the definition. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp&#xA;   (define-key some-map &#34;f&#34; &#39;(&#34;foo&#34; . command-foo))&#xA;   (define-key some-map &#34;b&#34; &#39;(&#34;bar-prefix&#34; . (keymap)))&#xA;   (setq my-map (make-sparse-keymap))&#xA;   (define-key some-map &#34;b&#34; (cons &#34;bar-prefix&#34; my-map))&#xA; #+END_SRC&#xA;&#xA; binds =command-foo= to =f= in =some-map=, but also stores the string &#34;foo&#34;&#xA; which which-key will extract to use to describe this command. The second&#xA; example binds an empty keymap to =b= in =some-map= and uses &#34;bar-prefix&#34; to&#xA; describe it. The last two lines replicate the functionality of the second&#xA; line, while assigning the new keymap to the symbol =my-map= (note the use&#xA; of =cons= to ensure that =my-map= is evaluated for =define-key=). These&#xA; bindings are accepted by =define-key= natively (i.e., with or without&#xA; which-key being loaded). Since many key-binding utilities use =define-key=&#xA; internally, this functionality should be available with your favorite&#xA; method of defining keys as well.&#xA;&#xA; The second method is to use =which-key-add-keymap-based-replacements=. The&#xA; statement&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA;   (define-key some-map &#34;f&#34; &#39;long-command-name-foo)&#xA;   (define-key some-map &#34;b&#34; some-prefix-map)&#xA;   (which-key-add-keymap-based-replacements some-map&#xA;     &#34;f&#34; &#39;(&#34;foo&#34; . long-command-name-foo)&#xA;     &#34;b&#34; &#39;(&#34;bar-prefix&#34; . (keymap)))&#xA; #+END_SRC&#xA;&#xA; uses =define-key= to add two bindings and tells which-key to use the string&#xA; &#34;foo&#34; in place of &#34;command-foo&#34; and the string &#34;bar-prefix&#34; for an empty&#xA; prefix map. =which-key-add-keymap-based-replacements= just uses&#xA; =define-key= to bind (or rebind) the command.&#xA;&#xA; There are other methods of telling which-key to replace command names,&#xA; which are described next. The keymap-based replacements should be the most&#xA; performant since they use built-in functionality of emacs. However, the&#xA; alternatives can be more flexible in telling which-key how and when to&#xA; replace text. They can be used simultaneously, but which-key will give&#xA; precedence to the keymap-based replacement when it exists.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** Key-Based replacement Using this method, the description of a key is replaced using a string that you provide. Here&#39;s an example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; #+BEGIN_SRC emacs-lisp&#xA; (which-key-add-key-based-replacements&#xA;   &#34;C-x C-f&#34; &#34;find files&#34;)&#xA; #+END_SRC&#xA;&#xA; where the first string is the key combination whose description you want to&#xA; replace, in a form suitable for =kbd=. For that key combination, which-key&#xA; overwrites the description with the second string, &#34;find files&#34;. In the&#xA; second type of entry you can restrict the replacements to a major-mode. For&#xA; example,&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA; (which-key-add-major-mode-key-based-replacements &#39;org-mode&#xA;   &#34;C-c C-c&#34; &#34;Org C-c C-c&#34;&#xA;   &#34;C-c C-a&#34; &#34;Org Attach&#34;)&#xA; #+END_SRC&#xA;&#xA; Here the first entry is the major-mode followed by a list of the first type&#xA; of entries. In case the same key combination is listed under a major-mode&#xA; and by itself, the major-mode version takes precedence.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** Key and Description replacement&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; The second and third methods target the text used for the keys and the&#xA; descriptions directly. The relevant variable is&#xA; =which-key-replacement-alist=.  Here&#39;s an example of one of the default key&#xA; replacements&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA; (push &#39;((&#34;&amp;lt;\\([[:alnum:]-]+\\)&amp;gt;&#34; . nil) . (&#34;\\1&#34; . nil))&#xA;       which-key-replacement-alist)&#xA; #+END_SRC&#xA;&#xA; Each element of the outer cons cell is a cons cell of the form =(KEY&#xA; . BINDING)=. The =car= of the outer cons determines how to match key&#xA; bindings while the =cdr= determines how those matches are replaced. See the&#xA; docstring of =which-key-replacement-alist= for more information.&#xA;&#xA; The next example shows how to replace the description.&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA; (push &#39;((nil . &#34;left&#34;) . (nil . &#34;lft&#34;)) which-key-replacement-alist)&#xA; #+END_SRC&#xA;&#xA; Here is an example of using key replacement to include Unicode characters&#xA; in the results. Unfortunately, using Unicode characters may upset the&#xA; alignment of the which-key buffer, because Unicode characters can have&#xA; different widths even in a monospace font and alignment is based on&#xA; character width.&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA; (add-to-list &#39;which-key-replacement-alist &#39;((&#34;TAB&#34; . nil) . (&#34;↹&#34; . nil)))&#xA; (add-to-list &#39;which-key-replacement-alist &#39;((&#34;RET&#34; . nil) . (&#34;⏎&#34; . nil)))&#xA; (add-to-list &#39;which-key-replacement-alist &#39;((&#34;DEL&#34; . nil) . (&#34;⇤&#34; . nil)))&#xA; (add-to-list &#39;which-key-replacement-alist &#39;((&#34;SPC&#34; . nil) . (&#34;␣&#34; . nil)))&#xA; #+END_SRC&#xA;&#xA; The =cdr= may also be a function that receives a =cons= of the form =(KEY&#xA; . BINDING)= and produces a =cons= of the same form. This allows for&#xA; interesting ideas like this one suggested by [[https://github.com/pdcawley][@pdcawley]] in [[https://github.com/justbur/emacs-which-key/pull/147][PR #147]].&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA; (push (cons &#39;(nil . &#34;paredit-mode&#34;)&#xA;             (lambda (kb)&#xA;               (cons (car kb)&#xA;                     (if paredit-mode&#xA;                         &#34;[x] paredit-mode&#34;&#xA;                       &#34;[ ] paredit-mode&#34;))))&#xA;       which-key-replacement-alist)&#xA; #+END_SRC&#xA;&#xA; The box will be checked if =paredit-mode= is currently active.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Sorting Options By default the output is sorted by the key in a custom order. The default order is to sort lexicographically within each &#34;class&#34; of key, where the classes and their order are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;=Special (SPC, TAB, ...) &amp;lt; Single Character (ASCII) (a, ...) &amp;lt; Modifier (C-, M-, ...) &amp;lt; Other=&#xA;&#xA;You can control the order by setting this variable. This also shows the&#xA;other available options.&#xA;&#xA;#+BEGIN_SRC emacs-lisp&#xA;;; default&#xA;(setq which-key-sort-order &#39;which-key-key-order)&#xA;;; same as default, except single characters are sorted alphabetically&#xA;;; (setq which-key-sort-order &#39;which-key-key-order-alpha)&#xA;;; same as default, except all prefix keys are grouped together at the end&#xA;;; (setq which-key-sort-order &#39;which-key-prefix-then-key-order)&#xA;;; same as default, except all keys from local maps shown first&#xA;;; (setq which-key-sort-order &#39;which-key-local-then-key-order)&#xA;;; sort based on the key description ignoring case&#xA;;; (setq which-key-sort-order &#39;which-key-description-order)&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Paging Options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;There are at least several prefixes that have many keys bound to them, like&#xA;=C-x=. which-key displays as many keys as it can given your settings, but&#xA;for these prefixes this may not be enough. The paging feature gives you the&#xA;ability to bind a key to the function =which-key-C-h-dispatch= which will&#xA;allow you to cycle through the pages without changing the key sequence you&#xA;were in the middle of typing. There are two slightly different ways of doing&#xA;this.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**** Method 1 (default): Using C-h (or =help-char=) This is the easiest way, and is turned on by default. Use #+BEGIN_SRC emacs-lisp (setq which-key-use-C-h-commands nil) #+END_SRC to disable the behavior (this will only take effect after toggling which-key-mode if it is already enabled). =C-h= can be used with any prefix to switch pages when there are multiple pages of keys. This changes the default behavior of Emacs which is to show a list of key bindings that apply to a prefix. For example, if you were to type =C-x C-h= you would get a list of commands that follow =C-x=. This uses which-key instead to show those keys, and unlike the Emacs default saves the incomplete prefix that you just entered so that the next keystroke can complete the command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; The commands are:&#xA; - Cycle through the pages forward with =n= (or =C-n=)&#xA; - Cycle backwards with =p= (or =C-p=)&#xA; - Undo the last entered key (!) with =u= (or =C-u=)&#xA; - Call the default command bound to =C-h=, usually&#xA;   =describe-prefix-bindings=, with =h= (or =C-h=)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is especially useful for those who like =helm-descbinds= but also want to use =C-h= as their which-key paging key.&lt;/p&gt; &#xA;&lt;p&gt;Note =C-h= is by default equivalent to =?= in this context.&lt;/p&gt; &#xA;&lt;p&gt;Note also that using =C-h= will not work with the =C-h= prefix, unless you make further adjustments. See Issues [[https://github.com/justbur/emacs-which-key/issues/93][#93]] and [[https://github.com/justbur/emacs-which-key/issues/175][#175]] for example.&lt;/p&gt; &#xA;&lt;p&gt;**** Method 2: Bind your own keys&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Essentially, all you need to do for a prefix like =C-x= is the following&#xA; which will bind =&amp;lt;f5&amp;gt;= to the relevant command.&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(define-key which-key-mode-map (kbd &#34;C-x &#xA; &lt;f5&gt;&#xA;  &#34;) &#39;which-key-C-h-dispatch) #+END_SRC&#xA; &lt;/f5&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; This is completely equivalent to&#xA;&#xA; #+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(setq which-key-paging-prefixes &#39;(&#34;C-x&#34;)) (setq which-key-paging-key &#34;&#xA; &lt;f5&gt;&#xA;  &#34;) #+END_SRC&#xA; &lt;/f5&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; where the latter are provided for convenience if you have a lot of&#xA; prefixes.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Face Customization Options The faces that which-key uses are | Face | Applied To | Default Definition | |----------------------------------------+-------------------------------+-------------------------------------------------------------| | =which-key-key-face= | Every key sequence | =:inherit font-lock-constant-face= | | =which-key-separator-face= | The separator (→) | =:inherit font-lock-comment-face= | | =which-key-note-face= | Hints and notes | =:inherit which-key-separator-face= | | =which-key-special-key-face= | User-defined special keys | =:inherit which-key-key-face :inverse-video t :weight bold= | | =which-key-group-description-face= | Command groups (i.e, keymaps) | =:inherit font-lock-keyword-face= | | =which-key-command-description-face= | Commands not in local-map | =:inherit font-lock-function-name-face= | | =which-key-local-map-description-face= | Commands in local-map | =:inherit which-key-command-description-face= |&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The last two deserve some explanation. A command lives in one of many possible&#xA;keymaps. You can distinguish between local maps, which depend on the buffer you&#xA;are in, which modes are active, etc., and the global map which applies&#xA;everywhere. It might be useful for you to distinguish between the two. One way&#xA;to do this is to remove the default face from&#xA;=which-key-command-description-face= like this&#xA;&#xA;#+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(set-face-attribute &#39;which-key-command-description-face nil :inherit nil) #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;another is to make the local map keys appear in bold&#xA;&#xA;#+BEGIN_SRC emacs-lisp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(set-face-attribute &#39;which-key-local-map-description-face nil :weight &#39;bold) #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can also use =M-x customize-face= to customize any of the above faces to&#xA;your liking.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Other Options #+NAME: #other-options The options below are also available through customize. Their defaults are shown.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp&#xA;  ;; Set the time delay (in seconds) for the which-key popup to appear. A value of&#xA;  ;; zero might cause issues so a non-zero value is recommended.&#xA;  (setq which-key-idle-delay 1.0)&#xA;&#xA;  ;; Set the maximum length (in characters) for key descriptions (commands or&#xA;  ;; prefixes). Descriptions that are longer are truncated and have &#34;..&#34; added.&#xA;  ;; This can also be a float (fraction of available width) or a function.&#xA;  (setq which-key-max-description-length 27)&#xA;&#xA;  ;; Use additional padding between columns of keys. This variable specifies the&#xA;  ;; number of spaces to add to the left of each column.&#xA;  (setq which-key-add-column-padding 0)&#xA;&#xA;  ;; The maximum number of columns to display in the which-key buffer. nil means&#xA;  ;; don&#39;t impose a maximum.&#xA;  (setq which-key-max-display-columns nil)&#xA;&#xA;  ;; Set the separator used between keys and descriptions. Change this setting to&#xA;  ;; an ASCII character if your font does not show the default arrow. The second&#xA;  ;; setting here allows for extra padding for Unicode characters. which-key uses&#xA;  ;; characters as a means of width measurement, so wide Unicode characters can&#xA;  ;; throw off the calculation.&#xA;  (setq which-key-separator &#34; → &#34; )&#xA;  (setq which-key-unicode-correction 3)&#xA;&#xA;  ;; Set the prefix string that will be inserted in front of prefix commands&#xA;  ;; (i.e., commands that represent a sub-map).&#xA;  (setq which-key-prefix-prefix &#34;+&#34; )&#xA;&#xA;  ;; Set the special keys. These are automatically truncated to one character and&#xA;  ;; have which-key-special-key-face applied. Disabled by default. An example&#xA;  ;; setting is&#xA;  ;; (setq which-key-special-keys &#39;(&#34;SPC&#34; &#34;TAB&#34; &#34;RET&#34; &#34;ESC&#34; &#34;DEL&#34;))&#xA;  (setq which-key-special-keys nil)&#xA;&#xA;  ;; Show the key prefix on the left, top, or bottom (nil means hide the prefix).&#xA;  ;; The prefix consists of the keys you have typed so far. which-key also shows&#xA;  ;; the page information along with the prefix.&#xA;  (setq which-key-show-prefix &#39;left)&#xA;&#xA;  ;; Set to t to show the count of keys shown vs. total keys in the mode line.&#xA;  (setq which-key-show-remaining-keys nil)&#xA;#+END_SRC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Support for Third-Party Libraries Some support is provided for third-party libraries which don&#39;t use standard methods of looking up commands. Some of these need to be enabled explicitly. This code includes some hacks, so please report any problems. *** Key-chord Enabled by default. *** Evil operators Evil motions and text objects following an operator like =d= are not all looked up in a standard way. Support is controlled through =which-key-allow-evil-operators= which should be non-nil if evil is loaded before which-key and through =which-key-show-operator-state-maps= which needs to be enabled explicitly because it is more of a hack. The former allows for the inner and outer text object maps to show, while the latter shows motions as well. *** God-mode Call =(which-key-enable-god-mode-support)= after loading god-mode to enable support for god-mode key sequences. This is new and experimental, so please report any issues. ** More Examples *** Nice Display with Split Frame Unlike guide-key, which-key looks good even if the frame is split into several windows. #+CAPTION: which-key in a frame with 3 horizontal splits [[./img/which-key-right-split.png]]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#+CAPTION: which-key in a frame with 2 vertical splits&#xA;[[./img/which-key-bottom-split.png]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Known Issues&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A few users have reported crashes related to which-key popups when quitting a key sequence with =C-g=. A possible fix is discussed in [[https://github.com/justbur/emacs-which-key/issues/130][this issue]]. ** Thanks Special thanks to&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/bmag][@bmag]] for helping with the initial development and finding many bugs.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github/iqbalansari][@iqbalansari]] who among other things adapted the code to make =which-key-show-top-level= possible.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>auto-complete/popup-el</title>
    <updated>2024-10-01T01:48:11Z</updated>
    <id>tag:github.com,2024-10-01:/auto-complete/popup-el</id>
    <link href="https://github.com/auto-complete/popup-el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visual Popup Interface Library for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/popup&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/popup-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/popup&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/popup-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;popup.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/auto-complete/popup-el/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/auto-complete/popup-el/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;popup.el is a visual popup user interface library for Emacs. This provides a basic API and common UI widgets such as popup tooltips and popup menus.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Tooltip&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Popup Menu&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Popup Cascade Menu&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/auto-complete/popup-el/master/etc/images/popup1.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/auto-complete/popup-el/master/etc/images/popup2.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/auto-complete/popup-el/master/etc/images/popup3.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;popup.el&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; with package.el. popwin is tested under GNU Emacs 24 or later.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, users of Debian 9 or later or Ubuntu 16.04 or later may simply &lt;code&gt;apt-get install elpa-popup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Popup Items&lt;/h2&gt; &#xA;&lt;p&gt;Elements of &lt;code&gt;popup-list&lt;/code&gt; have to be popup items. A popup item is substantially a string but it may involve some text-properties. There are two ways to make popup items. One is just using strings. Another is to use the &lt;code&gt;popup-make-item&lt;/code&gt; function, which just returns the string after adding text-properties of its keywords. Effective text-properties are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;value&lt;/code&gt; -- This represents the &lt;strong&gt;real&lt;/strong&gt; value of the item. This will be used when returning the value but not the item (or string) from some synchronous functions such as &lt;code&gt;popup-menu*&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;face&lt;/code&gt; -- The background face of the item. The value of &lt;code&gt;popup-face&lt;/code&gt; will be overridden.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;selection-face&lt;/code&gt; -- The selection face of the item. The value of &lt;code&gt;popup-selection-face&lt;/code&gt; will be overridden.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;document&lt;/code&gt; -- The documentation string or function of the item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;summary&lt;/code&gt; -- The summary string of the item. This will be shown inline with the item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;symbol&lt;/code&gt; -- The symbol character of the item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sublist&lt;/code&gt; -- The sublist of the item. This is effective only with &lt;code&gt;popup-cascade-menu&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of properties can be accessed by &lt;code&gt;popup-item-&amp;lt;property&amp;gt;&lt;/code&gt; utility function.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-item-propertize&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-item-propertize item &amp;amp;rest properties =&amp;gt; item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;propertize&lt;/code&gt; except that this avoids overriding existed value with &lt;code&gt;nil&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-make-item&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-make-item name &amp;amp;key value popup-face selection-face sublist&#xA;document symbol summary =&amp;gt; item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The utility function of &lt;code&gt;popup-item-propertize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Popups&lt;/h2&gt; &#xA;&lt;p&gt;This section describes the basic data structures and operations of popups.&lt;/p&gt; &#xA;&lt;h3&gt;Struct: &lt;code&gt;popup&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Any instance of &lt;code&gt;popup&lt;/code&gt; structure has the following fields (some unimportant fields are not listed):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;point&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;row&lt;/code&gt; -- The line number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;column&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;width&lt;/code&gt; -- Max width of &lt;code&gt;popup&lt;/code&gt; instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;height&lt;/code&gt; -- Max height of &lt;code&gt;popup&lt;/code&gt; instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;min-height&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;current-height&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;direction&lt;/code&gt; -- Positive number means forward, negative number means backward.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parent&lt;/code&gt; -- The parent of &lt;code&gt;popup&lt;/code&gt; instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;face&lt;/code&gt; -- The background face.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;selection-face&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;margin-left&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;margin-right&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scroll-bar&lt;/code&gt; -- Non-nil means &lt;code&gt;popup&lt;/code&gt; instance has a scroll bar.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;symbol&lt;/code&gt; -- Non-nil means &lt;code&gt;popup&lt;/code&gt; instance has a space for displaying symbols of item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt; -- The current position of &lt;code&gt;list&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scroll-top&lt;/code&gt; -- The offset of scrolling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt; -- The contents of &lt;code&gt;popup&lt;/code&gt; instance in a list of items (strings).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;original-list&lt;/code&gt; -- Same as &lt;code&gt;list&lt;/code&gt; except that this is not filtered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these fields can be accessed by &lt;code&gt;popup-&amp;lt;field&amp;gt;&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-create&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-create point width height &amp;amp;key min-height max-width around face&#xA;selection-face scroll-bar margin-left margin-right symbol parent&#xA;parent-offset =&amp;gt; popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a popup instance at &lt;code&gt;POINT&lt;/code&gt; with &lt;code&gt;WIDTH&lt;/code&gt; and &lt;code&gt;HEIGHT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MIN-HEIGHT&lt;/code&gt; is the minimal height of the popup. The default value is 0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MAX-WIDTH&lt;/code&gt; is the maximum width of the popup. The default value is nil (no limit). If a floating point, the value refers to the ratio of the window. If an integer, limit is in characters.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;AROUND&lt;/code&gt; is non-nil, the popup will be displayed around the point but not at the point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FACE&lt;/code&gt; is the background face of the popup. The default value is &lt;code&gt;popup-face&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SELECTION-FACE&lt;/code&gt; is the foreground (selection) face of the popup The default value is &lt;code&gt;popup-face&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;SCROLL-BAR&lt;/code&gt; is non-nil, the popup will have a scroll bar at the right.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;MARGIN-LEFT&lt;/code&gt; is non-nil, the popup will have a margin at the left.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;MARGIN-RIGHT&lt;/code&gt; is non-nil, the popup will have a margin at the right.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SYMBOL&lt;/code&gt; is a single character which indicates the kind of the item.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PARENT&lt;/code&gt; is the parent popup instance. If &lt;code&gt;PARENT&lt;/code&gt; is omitted, the popup will be a root instance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PARENT-OFFSET&lt;/code&gt; is a row offset from the parent popup.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq popup (popup-create (point) 10 10))&#xA;(popup-set-list popup &#39;(&#34;Foo&#34; &#34;Bar&#34; &#34;Baz&#34;))&#xA;(popup-draw popup)&#xA;;; do something here&#xA;(popup-delete popup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-delete&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-delete popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delete the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-live-p&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-live-p popup =&amp;gt; boolean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-set-list&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-set-list popup list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the contents of the &lt;code&gt;POPUP&lt;/code&gt;. &lt;code&gt;LIST&lt;/code&gt; has to be popup items.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-draw&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-draw popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Draw the contents of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-hide&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-hide popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hide the &lt;code&gt;POPUP&lt;/code&gt;. To show again, call &lt;code&gt;popup-draw&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-hidden-p&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-hidden-p popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Return non-nil if the &lt;code&gt;POPUP&lt;/code&gt; is hidden.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-select&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;    popup-select popup index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Select the item of &lt;code&gt;INDEX&lt;/code&gt; of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-selected-item&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-selected-item popup =&amp;gt; item&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Return the selected item of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Return non-nil if the &lt;code&gt;POPUP&lt;/code&gt; is still alive.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-next&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-next popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Select the next item of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-previous&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-previous popup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Select the next item of the &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-scroll-down&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-scroll-down popup n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scroll down &lt;code&gt;N&lt;/code&gt; items of the &lt;code&gt;POPUP&lt;/code&gt;. This won&#39;t wrap.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-scroll-up&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-scroll-up popup n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scroll up &lt;code&gt;N&lt;/code&gt; items of the &lt;code&gt;POPUP&lt;/code&gt;. This won&#39;t wrap.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-isearch&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-isearch popup &amp;amp;key cursor-color keymap callback help-delay&#xA;=&amp;gt; boolean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enter incremental search event loop of &lt;code&gt;POPUP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tooltips&lt;/h2&gt; &#xA;&lt;p&gt;A tooltip is an useful visual UI widget for displaying information something about what cursor points to.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-tip&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;popup-tip string &amp;amp;key point around width height min-height max-width&#xA;truncate margin margin-left margin-right scroll-bar parent&#xA;parent-offset nowait nostrip prompt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Show a tooltip with message &lt;code&gt;STRING&lt;/code&gt; at &lt;code&gt;POINT&lt;/code&gt;. This function is synchronized unless &lt;code&gt;NOWAIT&lt;/code&gt; specified. Almost all arguments are same as &lt;code&gt;popup-create&lt;/code&gt; except for &lt;code&gt;TRUNCATE&lt;/code&gt;, &lt;code&gt;NOWAIT&lt;/code&gt;, &lt;code&gt;NOSTRIP&lt;/code&gt; and &lt;code&gt;PROMPT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;TRUNCATE&lt;/code&gt; is non-nil, the tooltip can be truncated.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;NOWAIT&lt;/code&gt; is non-nil, this function immediately returns the tooltip instance without entering event loop.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;NOSTRIP&lt;/code&gt; is non-nil, &lt;code&gt;STRING&lt;/code&gt; properties are not stripped.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PROMPT&lt;/code&gt; is a prompt string used when reading events during the event loop.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(popup-tip &#34;Hello, World!&#34;)&#xA;;; reach here after the tooltip disappeared&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Popup Menus&lt;/h2&gt; &#xA;&lt;p&gt;Popup menu is an useful visual UI widget for prompting users to select an item of a list.&lt;/p&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-menu*&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;popup-menu* list &amp;amp;key point around width height margin margin-left&#xA;margin-right scroll-bar symbol parent parent-offset keymap&#xA;fallback help-delay nowait prompt isearch isearch-filter isearch-cursor-color&#xA;isearch-keymap isearch-callback initial-index =&amp;gt; selected-value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Show a popup menu of &lt;code&gt;LIST&lt;/code&gt; at &lt;code&gt;POINT&lt;/code&gt;. This function returns the value of the selected item. Almost all arguments are same as &lt;code&gt;popup-create&lt;/code&gt; except for &lt;code&gt;KEYMAP&lt;/code&gt;, &lt;code&gt;FALLBACK&lt;/code&gt;, &lt;code&gt;HELP-DELAY&lt;/code&gt;, &lt;code&gt;PROMPT&lt;/code&gt;, &lt;code&gt;ISEARCH&lt;/code&gt;, &lt;code&gt;ISEARCH-FILTER&lt;/code&gt;, &lt;code&gt;ISEARCH-CURSOR-COLOR&lt;/code&gt;, &lt;code&gt;ISEARCH-KEYMAP&lt;/code&gt; and &lt;code&gt;ISEARCH-CALLBACK&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;KEYMAP&lt;/code&gt; is provided, it is a keymap which is used when processing events during event loop.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;FALLBACK&lt;/code&gt; is provided, it is a function taking two arguments; a key and a command. &lt;code&gt;FALLBACK&lt;/code&gt; is called when no special operation is found on the key. The default value is &lt;code&gt;popup-menu-fallback&lt;/code&gt;, which does nothing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HELP-DELAY&lt;/code&gt; is a delay of displaying helps.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;NOWAIT&lt;/code&gt; is non-nil, this function immediately returns the menu instance without entering event loop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PROMPT&lt;/code&gt; is a prompt string when reading events during event loop.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ISEARCH&lt;/code&gt; is non-nil, do isearch as soon as displaying the popup menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ISEARCH-FILTER&lt;/code&gt; is a filtering function taking two arguments: search pattern and list of items. Returns a list of matching items.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ISEARCH-CURSOR-COLOR&lt;/code&gt; is a cursor color during isearch. The default value is `popup-isearch-cursor-color&#39;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ISEARCH-KEYMAP&lt;/code&gt; is a keymap which is used when processing events during event loop. The default value is &lt;code&gt;popup-isearch-keymap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ISEARCH-CALLBACK&lt;/code&gt; is a function taking one argument. &lt;code&gt;popup-menu&lt;/code&gt; calls &lt;code&gt;ISEARCH-CALLBACK&lt;/code&gt;, if specified, after isearch finished or isearch canceled. The arguments is whole filtered list of items.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;INITIAL-INDEX&lt;/code&gt; is non-nil, this is an initial index value for &lt;code&gt;popup-select&lt;/code&gt;. Only positive integer is valid.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(popup-menu* &#39;(&#34;Foo&#34; &#34;Bar&#34; &#34;Baz&#34;))&#xA;;; =&amp;gt; &#34;Baz&#34; if you select Baz&#xA;(popup-menu* (list (popup-make-item &#34;Yes&#34; :value t)&#xA;                   (popup-make-item &#34;No&#34; :value nil)))&#xA;;; =&amp;gt; t if you select Yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Function: &lt;code&gt;popup-cascade-menu&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;popup-menu&lt;/code&gt; except that an element of &lt;code&gt;LIST&lt;/code&gt; can be also a sub-menu if the element is a cons cell formed &lt;code&gt;(ITEM . SUBLIST)&lt;/code&gt; where &lt;code&gt;ITEM&lt;/code&gt; is an usual item and &lt;code&gt;SUBLIST&lt;/code&gt; is a list of the sub menu.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(popup-cascade-menu &#39;((&#34;Top1&#34; &#34;Sub1&#34; &#34;Sub2&#34;) &#34;Top2&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize Variables&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;popup-isearch-regexp-builder-function&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Function used to construct a regexp from a pattern. You may for instance provide a function that replaces spaces by &#39;.+&#39; if you like helm or ivy style of completion. Default value is &lt;code&gt;#&#39;regexp-quote&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Copyright (C) 2011-2015 Tomohiro Matsuyama &amp;lt;&lt;a href=&#34;mailto:m2ym.pub@gmail.com&#34;&gt;m2ym.pub@gmail.com&lt;/a&gt;&amp;gt;&lt;br&gt; Copyright (C) 2020-2022 Jen-Chieh Shen &amp;lt;&lt;a href=&#34;mailto:jcs090218@gmail.com&#34;&gt;jcs090218@gmail.com&lt;/a&gt;&amp;gt;&lt;/p&gt;</summary>
  </entry>
</feed>