<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-01T02:10:33Z</updated>
  <subtitle>Monthly Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nelhage/elisp</title>
    <updated>2023-03-01T02:10:33Z</updated>
    <id>tag:github.com,2023-03-01:/nelhage/elisp</id>
    <link href="https://github.com/nelhage/elisp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nelhage&#39;s emacs configuration&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>myrjola/diminish.el</title>
    <updated>2023-03-01T02:10:33Z</updated>
    <id>tag:github.com,2023-03-01:/myrjola/diminish.el</id>
    <link href="https://github.com/myrjola/diminish.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Diminished modes are minor modes with no modeline display&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://elpa.gnu.org/packages/diminish.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/diminish.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/devel/diminish.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/devel/diminish.svg?sanitize=true&#34; alt=&#34;GNU-devel ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/diminish&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/diminish-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/diminish&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/diminish-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;diminish.el&lt;/h1&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When we diminish a mode, we are saying we want it to continue doing its work for us, but we no longer want to be reminded of it. It becomes a night worker, like a janitor; it becomes an invisible man; it remains a component, perhaps an important one, sometimes an indispensable one, of the mechanism that maintains the day-people&#39;s world, but its place in their thoughts is diminished, usually to nothing. As we grow old we diminish more and more such thoughts, such people, usually to nothing. -- Will Mengarini&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This package implements hiding or abbreviation of the mode line displays (lighters) of minor-modes.&lt;/p&gt; &#xA;&lt;h1&gt;Quick start&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;diminish)&#xA;&#xA;(diminish &#39;rainbow-mode)                                       ; Hide lighter from mode-line&#xA;(diminish &#39;rainbow-mode &#34; Rbow&#34;)                               ; Replace rainbow-mode lighter with &#34; Rbow&#34;&#xA;(diminish &#39;rainbow-mode &#39;rainbow-mode-lighter)                 ; Use raingow-mode-lighter variable value&#xA;(diminish &#39;rainbow-mode &#39;(&#34; &#34; &#34;R-&#34; &#34;bow&#34;))                     ; Replace rainbow-mode lighter with &#34; R-bow&#34;&#xA;(diminish &#39;rainbow-mode &#39;((&#34; &#34; &#34;R&#34;) &#34;/&#34; &#34;bow&#34;))                ; Replace rainbow-mode lighter with &#34; R/bow&#34;&#xA;(diminish &#39;rainbow-mode &#39;(:eval (format &#34; Rbow/%s&#34; (+ 2 3))))  ; Replace rainbow-mode lighter with &#34; Rbow/5&#34;&#xA;(diminish &#39;rainbow-mode                                        ; Replace rainbow-mode lighter with greened &#34; Rbow&#34;&#xA;  &#39;(:propertize &#34; Rbow&#34; face &#39;(:foreground &#34;green&#34;)))&#xA;(diminish &#39;rainbow-mode                                        ; If rainbow-mode-mode-linep is non-nil &#34; Rbow/t&#34;&#xA;  &#39;(rainbow-mode-mode-linep &#34; Rbow/t&#34; &#34; Rbow/nil&#34;))&#xA;(diminish &#39;rainbow-mode &#39;(3 &#34; Rbow&#34; &#34;/&#34; &#34;s&#34;))                  ; Replace rainbow-mode lighter with &#34; Rb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ref: &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Data.html&#34;&gt;Emacs manual - The Data Structure of the Mode Line&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;John Wiegley&#39;s &lt;a href=&#34;https://github.com/jwiegley/use-package#diminishing-and-delighting-minor-modes&#34;&gt;use-package&lt;/a&gt; macro also has support for diminish.el.&lt;/p&gt; &#xA;&lt;h1&gt;Copyright Assignment&lt;/h1&gt; &#xA;&lt;p&gt;Diminish is subject to the same &lt;a href=&#34;https://www.fsf.org/licensing/contributor-faq&#34;&gt;copyright assignment&lt;/a&gt; policy as GNU Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;a href=&#34;https://www.gnu.org/prep/maintain/html_node/Legally-Significant.html#Legally-Significant&#34;&gt;legally significant&lt;/a&gt; contributions can only be merged after the author has completed their paperwork. Please ask for the request form, and we&#39;ll send it to you.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgments&lt;/h1&gt; &#xA;&lt;p&gt;diminish.el was created by Will Mengarini on 19th of February 1998 and is now maintained by &lt;a href=&#34;https://github.com/myrjola&#34;&gt;Martin Yrjölä&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gagbo/consult-lsp</title>
    <updated>2023-03-01T02:10:33Z</updated>
    <id>tag:github.com,2023-03-01:/gagbo/consult-lsp</id>
    <link href="https://github.com/gagbo/consult-lsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LSP-mode and consult.el helping each other&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Consult LSP-mode integration #+AUTHOR: Gerry Agbobada #+LANGUAGE: en&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;a href=&#34;https://melpa.org/#/consult-lsp&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/consult-lsp-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+HTML: &lt;a href=&#34;https://stable.melpa.org/#/consult-lsp&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/consult-lsp-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction Helm and Ivy users have extra commands that leverage lsp-mode extra information, let&#39;s try to mimic a few features of [[https://github.com/emacs-lsp/helm-lsp][helm-lsp]] and [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] in consult workflow (tested with selectrum and dogfed with vertico)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Screenshots&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They tend not to be updated as often as changes happen, sorry if there are slight differences in UI. Those shots are more about giving an idea of what&#39;s happening.&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-lsp-diagnostics [[https://github.com/gagbo/consult-lsp/blob/screenshots/media/consult-lsp-diagnostics.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-lsp-symbols [[https://github.com/gagbo/consult-lsp/blob/screenshots/media/consult-lsp-symbols.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-lsp-file-symbols [[https://github.com/gagbo/consult-lsp/blob/screenshots/media/consult-lsp-file-symbols.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;consult-lsp-diagnostics :: Select diagnostics from current workspace. Pass prefix argument to search all workspaces&lt;/li&gt; &#xA; &lt;li&gt;consult-lsp-symbols :: Select symbols from current workspace. Pass prefix argument to search all workspaces.&lt;/li&gt; &#xA; &lt;li&gt;consult-lsp-file-symbols :: Interactively select a symbol from the current file, in a manner similar to consult-line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is currently no plan to add an interface to list and/or act on code-actions, but contributions are welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration ** Customize Look and Feel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides 2 entry points per command in order to customize the appearance of candidates in the selection/completion interface. This is mostly for advanced users who are somewhat familiar with consult API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=*-transformer-function= :: Adapter function, responsible for transforming lsp data into a valid consult candidate. a valid &#34;consult candidate&#34; is more often than not a propertized string, with specific properties to enable extra features.&lt;/li&gt; &#xA; &lt;li&gt;=*-annotate-builder-function= :: Builder function, which returns a valid lambda for annotation/affixation support. This allows to add extra information to the candidates in the interface. The &lt;em&gt;returned&lt;/em&gt; lambda must take 1 argument and produce either a single string or a list of 3 elements (candidate prefix suffix), just as expected by either annotation-function or affixation-function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are encouraged to take a look at the default values if you wish to customize these, especially the &lt;code&gt;file-symbols&lt;/code&gt; one, which is probably the easiest ones to grok, and use marginalia.&lt;/p&gt; &#xA;&lt;p&gt;** Keys *** Categories for symbols =consult-lsp-symbols= and =consult-lsp-file-symbols= can have the set of &#34;narrow&#34; keys you like by customizing =consult-lsp-symbols-narrow=.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;cdrs&lt;/del&gt; of the alist must match the symbol types returned by LSP servers, AND have an &#34;Other&#34; key for everything that is not included.&lt;/p&gt; &#xA;&lt;p&gt;You can find categories by looking for the [[https://microsoft.github.io/language-server-protocol/specification.html#textDocument_documentSymbol][SymbolKind enum]] in the LSP specification.&lt;/p&gt; &#xA;&lt;p&gt;*** Bindings As you can do with helm-lsp,&lt;/p&gt; &#xA;&lt;p&gt;Use the following line to replace xref-find-apropos in lsp-mode controlled buffers:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key lsp-mode-map [remap xref-find-apropos] #&#39;consult-lsp-symbols) #+end_src&lt;/p&gt;</summary>
  </entry>
</feed>