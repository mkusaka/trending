<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-16T01:41:03Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alphapapa/dogears.el</title>
    <updated>2022-08-16T01:41:03Z</updated>
    <id>tag:github.com,2022-08-16:/alphapapa/dogears.el</id>
    <link href="https://github.com/alphapapa/dogears.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Never lose your place in Emacs again&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: dogears.el&lt;/p&gt; &#xA;&lt;p&gt;#+PROPERTY: LOGGING nil&lt;/p&gt; &#xA;&lt;h1&gt;Note: This readme works with the org-make-toc &lt;a href=&#34;https://github.com/alphapapa/org-make-toc&#34;&gt;https://github.com/alphapapa/org-make-toc&lt;/a&gt; package, which automatically updates the table of contents.&lt;/h1&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/alphapapa/dogears.el/master/images/mascot.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;[[https://melpa.org/#/package-name][file:https://melpa.org/packages/dogears-badge.svg]] [[https://stable.melpa.org/#/package-name][file:https://stable.melpa.org/packages/dogears-badge.svg]]&lt;/h1&gt; &#xA;&lt;p&gt;/Never lose your place in Emacs again!/&lt;/p&gt; &#xA;&lt;p&gt;This library automatically and smartly remembers where you&#39;ve been, in and across buffers, and helps you quickly return to any of those places. It works similarly to a Web browser&#39;s history list and back/forward commands, but with more contextual information and customization. As well, for most modes, it can return to a place even if its buffer no longer exists.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s configurable to suit each user, with regard to how often places are remembered, which ones, and for how long. It uses standard Emacs completion, so it works with Helm, Ivy, Selectrum, Vertico, etc. For Helm users, a &lt;del&gt;helm-dogears-source&lt;/del&gt; is also provided in =helm-dogears.el= that can be used with any Helm command.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This shows the &lt;del&gt;dogears-list&lt;/del&gt; buffer, in which you can browse entries, sort them, etc.&lt;/p&gt; &#xA;&lt;p&gt;[[images/screenshot.png]]&lt;/p&gt; &#xA;&lt;p&gt;This screenshot shows it while using the theme =doom-solarized-dark=, and the =Line= column shows some source code snippets with highlighting by [[https://github.com/alphapapa/prism.el][prism.el]].&lt;/p&gt; &#xA;&lt;p&gt;[[images/screenshot2.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :noexport: :PROPERTIES: :TOC: :include siblings :ID: 8cdd22ed-5ab9-4ec6-962a-c05945a43ecf :END: :CONTENTS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#changelog][Changelog]]&lt;/li&gt; &#xA; &lt;li&gt;[[#development][Development]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#implementation][Implementation]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#alternatives][Alternatives]] :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :TOC: :depth 0 :ID: c3d59323-561a-4839-9e54-e2a8dfa72213 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** MELPA&lt;/p&gt; &#xA;&lt;p&gt;If you installed from MELPA, you&#39;re done. Just run one of the commands below.&lt;/p&gt; &#xA;&lt;p&gt;** Quelpa&lt;/p&gt; &#xA;&lt;p&gt;The recommended way to install is with [[https://github.com/quelpa/quelpa-use-package][quelpa-use-package]], like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp ;; Install and load `quelpa-use-package&#39;. (package-install &#39;quelpa-use-package) (require &#39;quelpa-use-package)&lt;/p&gt; &#xA;&lt;p&gt;(use-package dogears :quelpa (dogears :fetcher github :repo &#34;alphapapa/dogears.el&#34; :files (:defaults (:exclude &#34;helm-dogears.el&#34;)))&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; These bindings are optional, of course:&#xA;:bind (:map global-map&#xA;            (&#34;M-g d&#34; . dogears-go)&#xA;            (&#34;M-g M-b&#34; . dogears-back)&#xA;            (&#34;M-g M-f&#34; . dogears-forward)&#xA;            (&#34;M-g M-d&#34; . dogears-list)&#xA;            (&#34;M-g M-D&#34; . dogears-sidebar)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Manual&lt;/p&gt; &#xA;&lt;p&gt;If you want to install it manually, it&#39;s simple enough, but you should know what you&#39;re doing, and you&#39;re on your own.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :PROPERTIES: :TOC: :depth 0 :ID: 986e8593-3ed1-4716-8423-788e8a178aa3 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It works by automatically remembering (&#34;dogearing&#34;) the place at point when any of three things happens:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;del&gt;dogears&lt;/del&gt; idle timer runs (after 5 seconds idle, by default).&lt;/li&gt; &#xA; &lt;li&gt;One of the &lt;del&gt;dogears-hooks&lt;/del&gt; is run (only including &lt;del&gt;imenu-after-jump-hook&lt;/del&gt; by default).&lt;/li&gt; &#xA; &lt;li&gt;One of the functions listed in &lt;del&gt;dogears-functions&lt;/del&gt; is called (none, by default).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then the user can run a command to view or go to places in the list.&lt;/p&gt; &#xA;&lt;p&gt;| Command | Action | |------------------+------------------------------------------------------------| | =dogears-mode= | Automatically remember places, according to configuration. | | =dogears-remember= | Manually remember the place at point. | | =dogears-go= | Go to a dogeared place, selected with completion. | | =dogears-back= | Go to previous dogeared place. | | =dogears-forward= | Go to next dogeared place. | | =dogears-list= | Show dogeared places in a tabulated list buffer. | | =dogears-sidebar= | Show Dogears list in a side window. |&lt;/p&gt; &#xA;&lt;p&gt;** Tips :PROPERTIES: :ID: 6a5b2fdf-1031-4801-a471-b4dd47b953c7 :END:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can customize settings in the =dogears= group.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changelog :PROPERTIES: :TOC: :depth 0 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1-pre&lt;/p&gt; &#xA;&lt;p&gt;Not yet tagged.&lt;/p&gt; &#xA;&lt;h1&gt;* Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Development :PROPERTIES: :ID: b2791280-8809-44dc-8a20-fb1517499ce1 :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bug reports, feature requests, suggestions — /oh my/!&lt;/p&gt; &#xA;&lt;p&gt;** Implementation :PROPERTIES: :ID: 3d92e106-2964-4097-a8d4-e4607dc240ab :END:&lt;/p&gt; &#xA;&lt;p&gt;Internally, Dogears uses the built-in Emacs &lt;del&gt;bookmark&lt;/del&gt; library to make bookmark-like records, however they are stored in &lt;del&gt;dogears-list&lt;/del&gt; rather than &lt;del&gt;bookmark-alist&lt;/del&gt;, so they are not accessible with &lt;del&gt;bookmark&lt;/del&gt; commands. Nor is the &lt;del&gt;dogears-list&lt;/del&gt; persisted to a file; it is empty when Emacs starts. If the &lt;del&gt;bookmark-make-record-function&lt;/del&gt; does not return a record for a place, Dogears uses a simple fallback that saves a record referring to the buffer by name, which allows it to remember places in, e.g. the =&lt;em&gt;scratch&lt;/em&gt;= buffer. When returning to a place, Dogears uses &lt;del&gt;bookmark-jump&lt;/del&gt;, which for many, if not most, modes returns not only to the buffer or file but to the specific location in it. And by using &lt;del&gt;bookmark&lt;/del&gt; internally, Dogears benefits from packages that extend it, like [[https://github.com/alphapapa/org-bookmark-heading][org-bookmark-heading]].&lt;/p&gt; &#xA;&lt;p&gt;Dogears also uses other built-in Emacs libraries, such as &lt;del&gt;which-function&lt;/del&gt; and &lt;del&gt;imenu&lt;/del&gt;, to provide information about the context surrounding a place, such as a function or variable definition, an outline heading, etc.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives :PROPERTIES: :ID: 96cb74a4-8c0d-48e7-bf5a-ff5f1f7af91a :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some other, similar packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/Overdr0ne/gumshoe][gumshoe]] :: /Gumshoe is a collection of global minor modes that quietly keep tabs on your Point movements so you can retrace your steps if you ever need a reminder of where you’ve been. Each mode keeps a log local to some scope. Gumshoe does not keep track of every move you make, rather, only at increments of some minimum Euclidean distance from the last tracked position, like a leash. It will also automatically log a position if you’ve idled there for a configurable amount of time. This package is very similar to Vim’s jump list, just generalized for Emacs./&lt;/li&gt; &#xA; &lt;li&gt;[[https://www.emacswiki.org/emacs/BookmarkPlus#AutomaticIdle-PeriodBookmarking][Bookmark+ Automatic Idle-Period Bookmarking]] :: /Automatic idle-period bookmarking uses autonamed bookmarks. It lets you navigate among them to visit spots where you spent some time (idly)./&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License :PROPERTIES: :TOC: :ignore (this) :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPLv3&lt;/p&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;eval: (require &#39;org-make-toc)&lt;/h1&gt; &#xA;&lt;h1&gt;before-save-hook: org-make-toc&lt;/h1&gt; &#xA;&lt;h1&gt;org-export-with-properties: ()&lt;/h1&gt; &#xA;&lt;h1&gt;org-export-with-title: t&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>Lambda-Emacs/lambda-emacs</title>
    <updated>2022-08-16T01:41:03Z</updated>
    <id>tag:github.com,2022-08-16:/Lambda-Emacs/lambda-emacs</id>
    <link href="https://github.com/Lambda-Emacs/lambda-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs distribution with sane defaults, pre-configured packages, and useful functions.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://discord.gg/NtYcrRtTxg&#34;&gt;&lt;img alt=&#34;Discord Server&#34; src=&#34;https://img.shields.io/badge/Lambda-Discord-1004037022824013905?style=flat&amp;amp;logo=discord&amp;amp;logoColor=lightgrey&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lambda-Emacs (𝛌-Emacs) is intended to serve as a useful starting point for your own custom configuration. The design of this configuration is aimed at writing and academic work in the humanities (for discussion of my view of the use of text editors in the humanities [[https://www.colinmclear.net/posts/texteditor/][see here]]), rather than opposed to, e.g., a programming language emphasis, though I&#39;ve tried to make it user-friendly for programmers as well. Another goal of 𝛌-Emacs is to provide enough commentary on the configuration such that it might be useful to those new to emacs or even [[https://en.wikipedia.org/wiki/Text_editor][text-editors]] generally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: This repo is still very much a work in progress!! There may be breaking changes so please update with that in mind. I am porting sections from [[https://github.com/mclear-tools/dotemacs][my own config]], though this is a slow process.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_HTML&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Lambda-Emacs/lambda-emacs/main/screenshots/light-splash.png&#34; width=&#34;47.5%/&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Lambda-Emacs/lambda-emacs/main/screenshots/dark-splash.png&#34; width=&#34;47.5%/&#34;&gt; &#xA;&lt;/div&gt; #+END_HTML &#xA;&lt;p&gt;The themes here are from [[https://github.com/Lambda-Emacs/lambda-themes][lambda-themes.]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why use 𝛌-Emacs?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why choose this configuration over any of the other amazing Emacs &#34;distros&#34; out there, such as (if you use vim-bindings) [[http://spacemacs.org][spacemacs]], or [[https://github.com/hlissner/doom-emacs][doom-emacs]], or the more traditional configurations of [[Https://github.com/purcell/emacs.d][Purcell]], [[https://github.com/bbatsov/prelude][Batsov (prelude)]], [[https://github.com/seagle0128/.emacs.d][Zhang (Centaur Emacs)]], the [[https://github.com/gilbertw1/bmacs][bmacs]] configuration of Bryan Gilbert (see also his [[https://github.com/gilbertw1/emacs-literate-starter][literate starter kit]]) and [[https://github.com/novoid/dot-emacs][Karl Voit&#39;s]] config, John Kitchen&#39;s [[https://github.com/jkitchin/scimax][scimax]], Kieran Healy&#39;s [[https://github.com/kjhealy/emacs-starter-kit][social sciences starter kit]], and [[https://github.com/caisah/emacs.dz][many others]]. Further helpful starts include [[https://github.com/hrs/sensible-defaults.el][sensible defaults]] or especially [[https://github.com/SystemCrafters/rational-emacs][Rational Emacs]]. There are also the recent stylings of [[https://github.com/rougier][Nicolas Rougier&#39;s]] [[https://github.com/rougier/elegant-emacs][elegant-emacs]] and [[https://github.com/rougier/nano-emacs][nano-emacs]]. Truly a surfeit of riches. So why another one? Here are three reasons. 𝛌-Emacs is largely an abstraction from my own config, which I wanted to make more easily available to others. I also want a clean but useful config to point my students to. Finally, setting this up is a useful way for me to think about how &#34;best&#34; to configure Emacs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;𝛌-Emacs Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Short start up time -- emacs-init-time &amp;lt; 1 sec (though this may vary somewhat depending on your system)&lt;/li&gt; &#xA; &lt;li&gt;Uses [[https://github.com/raxod502/straight.el][straight.el]] for package management&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive keybindings using [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]]&lt;/li&gt; &#xA; &lt;li&gt;Sensible defaults&lt;/li&gt; &#xA; &lt;li&gt;Dired with sensible colors and settings&lt;/li&gt; &#xA; &lt;li&gt;Completion with [[https://github.com/minad/vertico][Vertico]] and related packages&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Lambda-Emacs/lambda-themes][Lambda-themes]], with toggles for dark/light mode &amp;amp; various other options&lt;/li&gt; &#xA; &lt;li&gt;A custom status-line, [[https://github.com/Lambda-Emacs/lambda-line][Lambda-line]]&lt;/li&gt; &#xA; &lt;li&gt;Extensive MacOS integration&lt;/li&gt; &#xA; &lt;li&gt;Tab-based project workflow leveraging the built-in project.el and tab-bar, with [[https://github.com/mclear-tools/tabspaces][buffer-isolated tab/workspaces]]&lt;/li&gt; &#xA; &lt;li&gt;A configurable splash page&lt;/li&gt; &#xA; &lt;li&gt;A writing-centric configuration with great citation support, markdown, [[https://github.com/jgm/pandoc][pandoc]], [[https://github.com/mclear-tools/consult-notes][dedicated functions for notes]] and notetaking (using [[https://github.com/protesilaos/denote][denote]]), and settings for org-mode&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;𝛌-Emacs Modules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;𝛌-Emacs is a &#34;modular&#34; distribution of Emacs. It consists of a set of &#34;setup&#34; elisp files grouped according to the following areas (&lt;em&gt;NOTE&lt;/em&gt;: these are still works in progress):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Core&lt;/em&gt;: These files load essential libraries, useful functions, macros, and sane settings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;UI&lt;/em&gt;: Primary settings concerning frame, window, and buffer interaction, along with fonts, faces, themeing, and completion all belong to this group.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Navigation &amp;amp; Search&lt;/em&gt;: Useful navigation and search functions, plus setup and extension of the built-in dired file manager.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Writing &amp;amp; Editing&lt;/em&gt;: Settings for spelling, citation (using citar and completion at point), dictionary, notes (using consult-notes), typesetting (LaTeX) and writing-specific modes (markdown and org).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Org&lt;/em&gt;: Writing, Project management, TODOs, Literate programming. What doesn&#39;t org do? Since many people use Emacs almost exclusively for org-mode, it warrants its own group. There are three modules. There is =lem-setup-org-base=, which provides a base configuration. It also loads (optionally) two further modules, =lem-setup-org-settings= and =lem-setup-org-extensions=. The former provides configuration for various built-in aspects of org, including the agenda. The latter provides a variety of useful additional packages, including styling with =org-modern=. Note that no capture templates, etc., are set here. The interested user might want to consult my [[https://github.com/mclear-tools/dotemacs/blob/master/cpm-setup-org.el][dotfiles org]] setup as well as the [[https://systemcrafters.cc/emacs-from-scratch/organize-your-life-with-org-mode/][System Crafters]] tutorial.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Programming &amp;amp; Languages&lt;/em&gt;: Editing and Language specific settings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Shell&lt;/em&gt;: Configuration for shell and command-line related settings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Workspaces&lt;/em&gt;: Version control, tab settings, buffer-isolation, and other configuration for the built-in project.el and tab-bar.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the [[file:DOCUMENTATION.org][documentation]] (WIP) for further details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting Started&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone lambda-emacs as emacs.d: =git clone &lt;a href=&#34;https://github.com/Lambda-Emacs/lambda-emacs.git&#34;&gt;https://github.com/Lambda-Emacs/lambda-emacs.git&lt;/a&gt; ~/.emacs.d=&lt;/li&gt; &#xA; &lt;li&gt;Run Emacs -- it will ask at startup if you want to generate a user configuration file, if you do it will generate that file and start up with some basic packages (this will take a little while to do). Otherwise Emacs will start with all the default packages in Lambda-Emacs (which will take even longer to do).&lt;/li&gt; &#xA; &lt;li&gt;Put whatever settings you prefer in your config file. This should include things like the font you prefer and whatever other variable settings you might like. For some hints see my [[https://github.com/mclear-tools/dotemacs/blob/master/.local/lambda-library/lambda-user/config.el][configuration file]] and the list of variables in the [[id:20220720T151238.406634][docs]].&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/git-gutter-fringe</title>
    <updated>2022-08-16T01:41:03Z</updated>
    <id>tag:github.com,2022-08-16:/emacsorphanage/git-gutter-fringe</id>
    <link href="https://github.com/emacsorphanage/git-gutter-fringe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fringe version of git-gutter.el&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-gutter-fringe.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/git-gutter-fringe&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/git-gutter-fringe-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/git-gutter-fringe&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/git-gutter-fringe-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacsorphanage/git-gutter-fringe/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacsorphanage/git-gutter-fringe/workflows/ci-checks/badge.svg?sanitize=true&#34; alt=&#34;gh actions badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter-fringe.el&lt;/code&gt; is fringe version of of &lt;a href=&#34;https://github.com/syohex/emacs-git-gutter&#34;&gt;git-gutter.el&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-gutter.el&lt;/code&gt; does not work with &lt;code&gt;linum-mode&lt;/code&gt; but &lt;code&gt;git-gutter-fringe.el&lt;/code&gt; can work with &lt;code&gt;linum-mode&lt;/code&gt;. In contrast, &lt;code&gt;git-gutter-fringe.el&lt;/code&gt; does not work in tty frame(&lt;code&gt;emacs -nw&lt;/code&gt;), but &lt;code&gt;git-gutter.el&lt;/code&gt; can work in tty frame.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: You can not use both git-gutter.el and git-gutter-fringe.el&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter-fringe/master/image/git-gutter-fringe.png&#34; alt=&#34;Screenshot of git-gutter-fringe.el&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 24 or higher&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/syohex/emacs-git-gutter&#34;&gt;git-gutter.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.emacswiki.org/emacs/FringeHelper&#34;&gt;fringe-helper&lt;/a&gt; for using &lt;code&gt;git-gutter-fringe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;git-gutter.el&lt;/code&gt; from &lt;a href=&#34;https://github.com/milkypostman/melpa.git&#34;&gt;MELPA&lt;/a&gt; with package.el (&lt;code&gt;M-x package-install git-gutter-fringe&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;And you can also install it with &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Interfaces are same as &lt;code&gt;git-gutter.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git-gutter&lt;/li&gt; &#xA; &lt;li&gt;git-gutter:clear&lt;/li&gt; &#xA; &lt;li&gt;git-gutter:toggle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; You need to install fringe-helper.el&#xA;(require &#39;git-gutter-fringe)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;h3&gt;Look and feel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter-fringe/master/image/git-gutter-fringe-customize.png&#34; alt=&#34;git-gutter-fringe-customize&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can change faces like following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(set-face-foreground &#39;git-gutter-fr:modified &#34;yellow&#34;)&#xA;(set-face-foreground &#39;git-gutter-fr:added    &#34;blue&#34;)&#xA;(set-face-foreground &#39;git-gutter-fr:deleted  &#34;white&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change signs in fringe&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter-fringe/master/image/git-gutter-fringe-change-signs.png&#34; alt=&#34;git-gutter-fringe-change-signs&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;; Please adjust fringe width if your own sign is too big.&#xA;(setq-default left-fringe-width  20)&#xA;(setq-default right-fringe-width 20)&#xA;&#xA;(fringe-helper-define &#39;git-gutter-fr:added nil&#xA;  &#34;.XXXXXX.&#34;&#xA;  &#34;XX....XX&#34;&#xA;  &#34;X......X&#34;&#xA;  &#34;X......X&#34;&#xA;  &#34;XXXXXXXX&#34;&#xA;  &#34;XXXXXXXX&#34;&#xA;  &#34;X......X&#34;&#xA;  &#34;X......X&#34;)&#xA;&#xA;(fringe-helper-define &#39;git-gutter-fr:deleted nil&#xA;  &#34;XXXXXX..&#34;&#xA;  &#34;XX....X.&#34;&#xA;  &#34;XX.....X&#34;&#xA;  &#34;XX.....X&#34;&#xA;  &#34;XX.....X&#34;&#xA;  &#34;XX.....X&#34;&#xA;  &#34;XX....X.&#34;&#xA;  &#34;XXXXXX..&#34;)&#xA;&#xA;(fringe-helper-define &#39;git-gutter-fr:modified nil&#xA;  &#34;XXXXXXXX&#34;&#xA;  &#34;X..XX..X&#34;&#xA;  &#34;X..XX..X&#34;&#xA;  &#34;X..XX..X&#34;&#xA;  &#34;X..XX..X&#34;&#xA;  &#34;X..XX..X&#34;&#xA;  &#34;X..XX..X&#34;&#xA;  &#34;X..XX..X&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Position of fringe&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/git-gutter-fringe/master/image/git-gutter-fringe-right.png&#34; alt=&#34;git-gutter-fringe-right&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can change position of fringe, left or right. Default is left.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq git-gutter-fr:side &#39;right-fringe)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Comparison with diff-hl&lt;/h2&gt; &#xA;&lt;p&gt;I suppose if you enable vc-mode, you should use diff-hl rather than git-gutter-fringe. I always use git-gutter.el(and I love git-gutter.el), however I don&#39;t use git-gutter-fringe and don&#39;t do dog-fooding myself.&lt;/p&gt; &#xA;&lt;h4&gt;diff-hl is based on Emacs VC. git-gutter-fringe does not use vc.&lt;/h4&gt; &#xA;&lt;p&gt;You can use git-gutter-fringe even if you disable vc-mode. While diff-hl benefits from VC. For example, if vc supports new VCS which is greater than git, diff-hl works with such VCS with no code modification. However git-gutter.el does not benefit from vc-mode, I need to add code for supporting such new great VCS.&lt;/p&gt; &#xA;&lt;h4&gt;See also&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgutov/diff-hl&#34;&gt;diff-hl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/syohex/emacs-git-gutter/&#34;&gt;git-gutter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>