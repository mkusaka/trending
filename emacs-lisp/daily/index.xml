<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-24T01:42:22Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>clojure-emacs/parseedn</title>
    <updated>2022-06-24T01:42:22Z</updated>
    <id>tag:github.com,2022-06-24:/clojure-emacs/parseedn</id>
    <link href="https://github.com/clojure-emacs/parseedn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EDN parser for Emacs Lisp&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/clojure-emacs/parseedn&#34;&gt;&lt;img src=&#34;https://travis-ci.org/clojure-emacs/parseedn.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;EDN parser for Emacs Lisp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;parseedn&lt;/code&gt; is an Emacs Lisp library for parsing &lt;a href=&#34;https://github.com/edn-format/edn&#34;&gt;EDN data&lt;/a&gt;. It uses &lt;a href=&#34;https://github.com/clojure-emacs/parseclj&#34;&gt;&lt;code&gt;parseclj&lt;/code&gt;&lt;/a&gt;&#39;s shift-reduce parser internally.&lt;/p&gt; &#xA;&lt;p&gt;EDN and Emacs Lisp have some important differences that make translation from one to the other not transparent (think representing an EDN map into Elisp, or being able to differentiate between &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; in Elisp). Because of this, &lt;code&gt;parseedn&lt;/code&gt; takes certain decisions when parsing and transforming EDN data into Elisp data types. For more information please refer to &lt;a href=&#34;https://github.com/clojure-emacs/parseclj/raw/master/DESIGN.md&#34;&gt;&lt;code&gt;parseclj&lt;/code&gt; DESIGN.md&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, &lt;code&gt;parseedn&lt;/code&gt; is in &lt;strong&gt;alpha&lt;/strong&gt; stage, so its API is subject to change.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Available on the major &lt;code&gt;package.el&lt;/code&gt; community maintained repos - &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repos.&lt;/p&gt; &#xA;&lt;p&gt;MELPA Stable is the recommended repo as it has the latest stable version. MELPA has a development snapshot for users who don&#39;t mind (infrequent) breakage but don&#39;t want to run from a git checkout.&lt;/p&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;parseedn&lt;/code&gt; using the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-install [RET] parseedn [RET]&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;or if you&#39;d rather keep it in your dotfiles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(unless (package-installed-p &#39;parseedn)&#xA;  (package-install &#39;parseedn))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the installation doesn&#39;t work try refreshing the package list:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x package-refresh-contents&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;parseedn-read&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Read content from the current buffer as EDN and transforms it into an Emacs Lisp value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;parseedn-read-str&lt;/code&gt; str&lt;/p&gt; &lt;p&gt;Read STR as EDN and transfroms it into an Emacs Lisp value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;parseedn-print&lt;/code&gt; datum&lt;/p&gt; &lt;p&gt;Inserts DATUM as EDN Into the current buffer. DATUM can be any Emacs Lisp value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;parseedn-print-str&lt;/code&gt; datum&lt;/p&gt; &lt;p&gt;Returns a string containing DATUM as EDN. DATUM can be any Emacs Lisp value.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prior art&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/expez/edn.el&#34;&gt;edn.el&lt;/a&gt; is an EDN-to-elisp parser based on the PEG parser generator library.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Â© 2017-2021 Arne Brasseur&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the terms of the GNU General Public License 3.0 or later. See &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/parseedn/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magit/forge</title>
    <updated>2022-06-24T01:42:22Z</updated>
    <id>tag:github.com,2022-06-24:/magit/forge</id>
    <link href="https://github.com/magit/forge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Work with Git forges from the comfort of Magit&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Work with Git forges from the comfort of Magit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Work with Git forges, such as Github and Gitlab, from the comfort of Magit and the rest of Emacs.&lt;/p&gt; &#xA;&lt;p&gt;[[http://readme.emacsair.me/forge-status.png]]&lt;/p&gt; &#xA;&lt;p&gt;[[http://readme.emacsair.me/forge-topic.png]]&lt;/p&gt; &#xA;&lt;p&gt;Please see the [[https://magit.vc/manual/forge][manual]] and the [[https://emacsair.me/2018/12/19/forge-0.1][announcement]] for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>plexus/a.el</title>
    <updated>2022-06-24T01:42:22Z</updated>
    <id>tag:github.com,2022-06-24:/plexus/a.el</id>
    <link href="https://github.com/plexus/a.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Lisp functions for dealing with association lists and hash tables. Inspired by Clojure.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/a&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/a-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/a&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/a-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;a.el&lt;/h1&gt; &#xA;&lt;p&gt;Emacs Lisp functions for dealing with associative structures in a uniform and functional way.&lt;/p&gt; &#xA;&lt;p&gt;Inspired by Clojure, dash, and seq.el.&lt;/p&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;This library is stable and is not expected to change. We will still consider submitted patches for critical bugs, or to stay compatible with newer versions of GNU Emacs, if necessary, to the extent possible without breaking compatibility with Emacs 25-28.&lt;/p&gt; &#xA;&lt;p&gt;If your code works with &lt;code&gt;a.el&lt;/code&gt; then we&#39;ll try to make sure it continues to work!&lt;/p&gt; &#xA;&lt;h2&gt;Should you use it for new code?&lt;/h2&gt; &#xA;&lt;p&gt;tl;dr&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;your package can&#39;t be included in GNU ELPA if you use a.el&lt;/li&gt; &#xA; &lt;li&gt;a&#39;s value semantics can be costly&lt;/li&gt; &#xA; &lt;li&gt;your code will become easier to work on by people coming from Clojure, but harder for experienced elisp devs&lt;/li&gt; &#xA; &lt;li&gt;it&#39;s an extra dependency you may not need&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;a.el&lt;/code&gt; is not in accordance with &lt;a href=&#34;https://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt;&#39;s naming guidelines, meaning it will never be part of GNU ELPA, and can not be used in packages that ever wish to be included in GNU ELPA. This is the reason &lt;code&gt;a.el&lt;/code&gt; usage was removed from CIDER and parseclj/parseedn. It &lt;em&gt;is&lt;/em&gt; available from &lt;a href=&#34;https://github.com/melpa/melpa&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The unique selling point for &lt;code&gt;a.el&lt;/code&gt; is that it lets you reuse your Clojure experience in Emacs, so Clojure programmers can be productive quickly. If you are not experienced in Clojure, or you want to do things &#34;the Emacs way&#34;, then there are other alternatives. Most functions in &lt;code&gt;a.el&lt;/code&gt; can be straightforwardly replaced with Emacs built-ins, and as such the &lt;code&gt;a.el&lt;/code&gt; code can be a great cheat sheet of how to do things instead.&lt;/p&gt; &#xA;&lt;p&gt;That said not every &lt;code&gt;clojure.core&lt;/code&gt; has a straightforward equivalent, and so if you rely on those then &lt;code&gt;a.el&lt;/code&gt; may still provide you with value. In particular &lt;code&gt;a.el&lt;/code&gt; implements equality semantics similar to Clojure&#39;s, with value semantics across associative and sequential data structures. This is something that is not trivial to replicate with Emacs built-ins. That said this doesn&#39;t come for free, Emacs Lisp&#39;s data structures don&#39;t retain a cached hashCode the way Clojure&#39;s persistent data structures do, and so we have to always recursively walk them. That may be a high cost if you don&#39;t need it.&lt;/p&gt; &#xA;&lt;p&gt;The main alternative to &lt;code&gt;a.el&lt;/code&gt; is the &lt;a href=&#34;https://github.com/emacs-mirror/emacs/raw/master/lisp/emacs-lisp/map.el&#34;&gt;map.el&lt;/a&gt; library that nowadays comes bundled with Emacs. You can also use Common Lisp style functions (i.e. &lt;code&gt;cl-*&lt;/code&gt;) through requiring &lt;code&gt;cl-lib&lt;/code&gt;. This is now even allowed in code that comes bundled with Emacs, which was not the case in the past.&lt;/p&gt; &#xA;&lt;p&gt;Emacs also comes bundled with &lt;a href=&#34;https://github.com/troyp/asoc.el&#34;&gt;asoc.el&lt;/a&gt; but it seems this library is marked as obsolete already, and you will get a warning about that.&lt;/p&gt; &#xA;&lt;p&gt;Other useful third-party libraries include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Wilfred/ht.el&#34;&gt;ht.el&lt;/a&gt; Hash table library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicferrier/emacs-kv&#34;&gt;kv.el&lt;/a&gt; A collection of tools for dealing with key/value data structures such as plists, alists and hash-tables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;All functions can take association lists, hash tables, and in some cases vectors (where the index is considered the key).&lt;/p&gt; &#xA;&lt;p&gt;This library copies the names and semantics of the Clojure standard library. If you know Clojure then just add &lt;code&gt;a-&lt;/code&gt; to the function name. The only exceptions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;a-alist&lt;/code&gt; is an association list contructor, it has no Clojure counterpart.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a-has-key?&lt;/code&gt; is the equivalent of Clojure&#39;s &lt;code&gt;contains?&lt;/code&gt;. This historical naming mistake won&#39;t be fixed in Clojure, but we can fix it here.&lt;/li&gt; &#xA; &lt;li&gt;predicates have both a &lt;code&gt;?&lt;/code&gt; and a &lt;code&gt;-p&lt;/code&gt; version, e.g. &lt;code&gt;a-has-key-p&lt;/code&gt;. Use the latter if you want greater consistency with existing Elisp code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All functions in this library are pure, they do not mutate their arguments.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;a.el relies on features that are part of Emacs 25, so you need Emacs 25 or later. There are no other dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;a.el is available from &lt;a href=&#34;https://github.com/melpa/melpa&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(a-list :foo 5 :bar 6)&#xA;;;=&amp;gt; ((:foo . 5) (:bar . 6))&#xA;&#xA;(setq m (a-list :foo 5 :bar 6))&#xA;(setq h (a-hash-table :abc 123 :def 456))&#xA;&#xA;(a-associative? m)&#xA;;;=&amp;gt; t&#xA;(a-associative? h)&#xA;;;=&amp;gt; t&#xA;&#xA;(a-get m :foo)&#xA;;;=&amp;gt; 5&#xA;(a-get h :abc)&#xA;;;=&amp;gt; 123&#xA;&#xA;(a-assoc m :foo 7 :baq 20)&#xA;;;=&amp;gt; ((:baq . 20) (:foo . 7) (:bar . 6))&#xA;(a-assoc h :foo 7)&#xA;;;=&amp;gt; #s(hash-table ... (:abc 123 :def 456 :foo 7 ...))&#xA;&#xA;(a-keys m)&#xA;;;=&amp;gt; (:foo :bar)&#xA;(a-keys h)&#xA;;;=&amp;gt; (:def :abc)&#xA;&#xA;(a-vals m)&#xA;;;=&amp;gt; (5 6)&#xA;(a-vals h)&#xA;;;=&amp;gt; (456 123)&#xA;&#xA;(a-equal m (a-list :bar 6 :foo 5))&#xA;;;=&amp;gt; t&#xA;&#xA;(a-has-key? m :bar)&#xA;;;=&amp;gt; t&#xA;&#xA;(a-count h)&#xA;;;=&amp;gt; 2&#xA;&#xA;(a-dissoc m :foo)&#xA;;;=&amp;gt; ((:bar . 6))&#xA;&#xA;(a-assoc-in (a-list :name &#34;Arne&#34;)&#xA;            [:stats :score] 100)&#xA;;;=&amp;gt; ((:name . &#34;Arne&#34;) (:stats . ((:score . 100))))&#xA;&#xA;(a-merge m h (a-list :and :more))&#xA;;;=&amp;gt; ((:and . :more) (:abc . 123) (:def . 456) (:foo . 5) (:bar . 6))&#xA;&#xA;(a-merge-with &#39;+ m (a-list :foo 10))&#xA;;;=&amp;gt; ((:foo . 15) (:bar . 6))&#xA;&#xA;(a-update (a-list :name &#34;Arne&#34;) :name &#39;concat &#34; Brasseur&#34;)&#xA;;;=&amp;gt; ((:name . &#34;Arne Brasseur&#34;))&#xA;&#xA;(setq player (a-list :name &#34;Arne&#34; :stats (a-list :score 99)))&#xA;(a-update-in player  [:stats :score] &#39;+ 1)&#xA;;;=&amp;gt; ((:name . &#34;Arne&#34;) (:stats (:score . 100)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Â© Arne Brasseur 2017&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the terms of the GNU General Public License, version 3.0 or later. See LICENSE.&lt;/p&gt;</summary>
  </entry>
</feed>