<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-22T01:39:14Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-straight/org-mode</title>
    <updated>2022-06-22T01:39:14Z</updated>
    <id>tag:github.com,2022-06-22:/emacs-straight/org-mode</id>
    <link href="https://github.com/emacs-straight/org-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of org-mode from orgmode.org, current as of 2022-06-22&lt;/p&gt;&lt;hr&gt;&lt;p&gt;-&lt;em&gt;- mode: org; fill-column:70 -&lt;/em&gt;-&lt;/p&gt; &#xA;&lt;p&gt;This is a distribution of Org, a plain text notes and project planning tool for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Check the Org Mode website at &lt;a href=&#34;https://orgmode.org&#34;&gt;https://orgmode.org&lt;/a&gt; and the installation instructions at &lt;a href=&#34;https://orgmode.org/org.html#Installation&#34;&gt;https://orgmode.org/org.html#Installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents of this distribution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;README :: This file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;COPYING :: The GNU General Public License.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Makefile :: The makefile to compile and install Org. See the installation instructions &lt;a href=&#34;https://orgmode.org/org.html#Installation&#34;&gt;https://orgmode.org/org.html#Installation&lt;/a&gt; or this more detailed procedure on Worg: &lt;a href=&#34;https://orgmode.org/worg/dev/org-build-system.html&#34;&gt;https://orgmode.org/worg/dev/org-build-system.html&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;mk/ :: Files needed for building Org.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;lisp/ :: Directory with all the Emacs Lisp files that make up Org.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;doc/ :: The documentation files. org.texi is the source of the documentation, org.html and org.pdf are formatted versions of it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;etc/ :: Files needed for the ODT exporter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;testing/ :: Testing suite for Org.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;request-assign-future.txt :: The form that contributors have to sign and get processed with the FSF before contributed changes can be integrated into the Org core. All files in this distribution have copyright assigned to the FSF.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the GNU Project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Org is part of GNU Emacs and GNU Emacs is part of the GNU Operating System, developed by the GNU Project.&lt;/p&gt; &#xA;&lt;p&gt;If you are the author of an awesome program and want to join us in writing Free (libre) Software, please consider making it an official GNU program and become a GNU Maintainer. Instructions on how to do this are here &lt;a href=&#34;http://www.gnu.org/help/evaluation&#34;&gt;http://www.gnu.org/help/evaluation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t have a program to contribute? Look at all the other ways to help: &lt;a href=&#34;https://www.gnu.org/help/help.html&#34;&gt;https://www.gnu.org/help/help.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And to learn more about Free (libre) Software in general, please read and share this page: &lt;a href=&#34;https://gnu.org/philosophy/free-sw.html&#34;&gt;https://gnu.org/philosophy/free-sw.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Org-mode is published under the GNU GPLv3 license or any later version, the same as GNU Emacs: &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;https://www.gnu.org/licenses/gpl-3.0.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Org-mode is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;GNU Emacs is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with Org mode. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-evil/evil-surround</title>
    <updated>2022-06-22T01:39:14Z</updated>
    <id>tag:github.com,2022-06-22:/emacs-evil/evil-surround</id>
    <link href="https://github.com/emacs-evil/evil-surround" rel="alternate"></link>
    <summary type="html">&lt;p&gt;you will be surrounded (surround.vim for evil, the extensible vi layer)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://user-images.githubusercontent.com/8352747/33807810-91656488-ddc3-11e7-8029-985f28471a47.png][https://user-images.githubusercontent.com/8352747/33807810-91656488-ddc3-11e7-8029-985f28471a47.png]]&lt;/p&gt; &#xA;&lt;p&gt;[[https://travis-ci.org/emacs-evil/evil-surround.svg?branch=master][https://travis-ci.org/emacs-evil/evil-surround.svg?branch=master]] [[https://melpa.org/#/evil-surround][https://melpa.org/packages/evil-surround-badge.svg]] [[https://stable.melpa.org/#/evil-surround][file:https://stable.melpa.org/packages/evil-surround-badge.svg]] [[https://www.gnu.org/licenses/gpl-3.0.en.html][https://img.shields.io/badge/license-GPLv3-blue.svg]]&lt;/p&gt; &#xA;&lt;p&gt;This package emulates [[https://github.com/tpope/vim-surround][surround.vim]] by [[https://github.com/tpope][Tim Pope]]. The functionality is wrapped into a minor mode.&lt;/p&gt; &#xA;&lt;p&gt;This package uses [[https://github.com/emacs-evil/evil][Evil]] as its vi layer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To enable it through [[https://github.com/jwiegley/use-package][use-package]], add the following lines to =&lt;del&gt;/.emacs= or =&lt;/del&gt;/.emacs.d/init.el=:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (use-package evil-surround :ensure t :config (global-evil-surround-mode 1)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, a user can add the =evil-surround.el= file to your load-path and add =(require &#39;evil-surround)= to your init file.&lt;/p&gt; &#xA;&lt;p&gt;Also, Instead of enabling it globally, you can also enable =surround-mode= along a major mode by adding =turn-on-surround-mode= to the mode hook.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage ** Add surrounding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can surround in visual-state with =S&#xA; &lt;textobject&gt;&#xA;  = or =gS&#xA;  &lt;textobject&gt;&#xA;   =. Or in normal-state with =ys&#xA;   &lt;textobject&gt;&#xA;    = or =yS&#xA;    &lt;textobject&gt;&#xA;     =.&#xA;    &lt;/textobject&gt;&#xA;   &lt;/textobject&gt;&#xA;  &lt;/textobject&gt;&#xA; &lt;/textobject&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Change surrounding&lt;/p&gt; &#xA;&lt;p&gt;You can change a surrounding with =cs&#xA; &lt;old-textobject&gt;&#xA;  &lt;new-textobject&gt;&#xA;   =.&#xA;  &lt;/new-textobject&gt;&#xA; &lt;/old-textobject&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Delete surrounding&lt;/p&gt; &#xA;&lt;p&gt;You can delete a surrounding with =ds&#xA; &lt;textobject&gt;&#xA;  =.&#xA; &lt;/textobject&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Add new surround pairs&lt;/p&gt; &#xA;&lt;p&gt;A surround pair is this (trigger char with textual left and right strings):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (?&amp;gt; . (&#34;&amp;lt;&#34; . &#34;&amp;gt;&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;or this (trigger char and calling a function):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (?&amp;lt; . surround-read-tag) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;You can add new by adding them to =evil-surround-pairs-alist=. For more information do: =C-h v evil-surround-pairs-alist=.&lt;/p&gt; &#xA;&lt;p&gt;=evil-surround-pairs-alist= is a buffer local variable, which means that you can have different surround pairs in different modes. By default =&amp;lt;= is used to insert a tag, in C++ this may not be useful - but inserting angle brackets is, so you can add this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-hook &#39;c++-mode-hook (lambda () (push &#39;(?&amp;lt; . (&#34;&amp;lt; &#34; . &#34; &amp;gt;&#34;)) evil-surround-pairs-alist))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t worry about having two entries for =&amp;lt;= surround will take the first.&lt;/p&gt; &#xA;&lt;p&gt;Or in Emacs Lisp modes using &lt;code&gt;to enter&lt;/code&gt; &#39; is quite useful, but not adding a pair of ` (the default behavior if no entry in =evil-surround-pairs-alist= is present), so you can do this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-hook &#39;emacs-lisp-mode-hook (lambda () (push &#39;(?&lt;code&gt; . (&#34;&lt;/code&gt;&#34; . &#34;&#39;&#34;)) evil-surround-pairs-alist))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;without affecting your Markdown surround pairs, where the default is useful.&lt;/p&gt; &#xA;&lt;p&gt;To change the default =evil-surround-pairs-alist= you have to use =setq-default=, for example to remove all default pairs:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq-default evil-surround-pairs-alist &#39;()) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;or to add a pair that surrounds with two ` if you enter ~:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq-default evil-surround-pairs-alist (push &#39;(?~ . (&#34;&lt;code&gt;&#34; . &#34;&lt;/code&gt;&#34;)) evil-surround-pairs-alist)) #+END_SRC ** Add new surround pairs through creation of evil objects You can create new evil objects that will be respected by evil-surround. Just use the following code: #+BEGIN_SRC emacs-lisp ;; this macro was copied from here: &lt;a href=&#34;https://stackoverflow.com/a/22418983/4921402&#34;&gt;https://stackoverflow.com/a/22418983/4921402&lt;/a&gt; (defmacro define-and-bind-quoted-text-object (name key start-regex end-regex) (let ((inner-name (make-symbol (concat &#34;evil-inner-&#34; name))) (outer-name (make-symbol (concat &#34;evil-a-&#34; name)))) `(progn (evil-define-text-object ,inner-name (count &amp;amp;optional beg end type) (evil-select-paren ,start-regex ,end-regex beg end type count nil)) (evil-define-text-object ,outer-name (count &amp;amp;optional beg end type) (evil-select-paren ,start-regex ,end-regex beg end type count t)) (define-key evil-inner-text-objects-map ,key #&#39;,inner-name) (define-key evil-outer-text-objects-map ,key #&#39;,outer-name))))&lt;/p&gt; &#xA;&lt;p&gt;(define-and-bind-quoted-text-object &#34;pipe&#34; &#34;|&#34; &#34;|&#34; &#34;|&#34;) (define-and-bind-quoted-text-object &#34;slash&#34; &#34;/&#34; &#34;/&#34; &#34;/&#34;) (define-and-bind-quoted-text-object &#34;asterisk&#34; &#34;&lt;em&gt;&#34; &#34;&lt;/em&gt;&#34; &#34;*&#34;) (define-and-bind-quoted-text-object &#34;dollar&#34; &#34;$&#34; &#34;\$&#34; &#34;\$&#34;) ;; sometimes your have to escape the regex #+END_SRC ** Add surround pairs for buffer-local text objects Buffer-local text objects are useful for mode specific text objects that you don&#39;t want polluting the global keymap. To make these objects work with =evil-surround=, do the following (for example to bind pipes to =Q=):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defvar evil-some-local-inner-keymap (make-sparse-keymap) &#34;Inner text object test keymap&#34;) (defvar evil-some-local-outer-keymap (make-sparse-keymap) &#34;Outer text object keymap&#34;) (define-key evil-some-local-inner-keymap &#34;Q&#34; #&#39;evil-inner-pipe) (define-key evil-some-local-outer-keymap &#34;Q&#34; #&#39;evil-a-pipe) (define-key evil-visual-state-local-map &#34;iQ&#34; #&#39;evil-inner-pipe) (define-key evil-operator-state-local-map &#34;iQ&#34; #&#39;evil-inner-pipe) (define-key evil-visual-state-local-map &#34;aQ&#34; #&#39;evil-a-pipe) (define-key evil-operator-state-local-map &#34;aQ&#34; #&#39;evil-a-pipe) (setq evil-surround-local-inner-text-object-map-list (list evil-some-local-inner-keymap)) (setq evil-surround-local-outer-text-object-map-list (list evil-some-local-outer-keymap)) (setq-local evil-surround-pairs-alist (append &#39;((?Q &#34;|&#34; . &#34;|&#34;)) evil-surround-pairs-alist)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;note that the binding to =evil-some-local-(inner|outer)-keymap= is purely for organizational perpouses, you can skip that step and do:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (define-key evil-visual-state-local-map &#34;iQ&#34; #&#39;evil-inner-pipe) (define-key evil-operator-state-local-map &#34;iQ&#34; #&#39;evil-inner-pipe) (define-key evil-visual-state-local-map &#34;aQ&#34; #&#39;evil-a-pipe) (define-key evil-operator-state-local-map &#34;aQ&#34; #&#39;evil-a-pipe) (setq evil-surround-local-inner-text-object-map-list (list (lookup-key evil-operator-state-local-map &#34;i&#34;))) (setq evil-surround-local-outer-text-object-map-list (list (lookup-key evil-operator-state-local-map &#34;a&#34;))) (setq-local evil-surround-pairs-alist (append &#39;((?Q &#34;|&#34; . &#34;|&#34;)) evil-surround-pairs-alist)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Add new supported operators&lt;/p&gt; &#xA;&lt;p&gt;You can add support for new operators by adding them to =evil-surround-operator-alist=. For more information do: =C-h v evil-surround-operator-alist=.&lt;/p&gt; &#xA;&lt;p&gt;By default, surround works with =evil-change= and =evil-delete=. To add support for the evil-paredit package, you need to add =evil-paredit-change= and =evil-paredit-delete= to =evil-surround-operator-alist=, like so:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (add-to-list &#39;evil-surround-operator-alist &#39;(evil-paredit-change . change)) (add-to-list &#39;evil-surround-operator-alist &#39;(evil-paredit-delete . delete)) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Examples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some usage examples (taken from [[https://github.com/tpope/vim-surround][surround.vim]]):&lt;/p&gt; &#xA;&lt;p&gt;Press =cs&#34;&#39;= inside&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE &#34;Hello world!&#34; #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;to change it to&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE &#39;Hello world!&#39; #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Now press =cs&#39;&lt;q&gt;= to change it to&lt;/q&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE &lt;q&gt;Hello world!&lt;/q&gt; #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;To go full circle, press =cst&#34;= to get&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE &#34;Hello world!&#34; #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;To remove the delimiters entirely, press =ds&#34;=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE Hello world! #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Now with the cursor on &#34;Hello&#34;, press =ysiw]= (=iw= is a text object).&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE [Hello] world! #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s make that braces and add some space (use =}= instead of ={= for no space): =cs]{=&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE { Hello } world! #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Now wrap the entire line in parentheses with =yssb= or =yss)=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE ({ Hello } world!) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Revert to the original text: =ds{ds)=&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE Hello world! #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Emphasize hello: =ysiw&lt;em&gt;=&lt;/em&gt;&lt;/p&gt;&#xA;&lt;em&gt; &lt;p&gt;#+BEGIN_SRC html &lt;em&gt;Hello&lt;/em&gt; world! #+END_SRC&lt;/p&gt; &lt;p&gt;Finally, let&#39;s try out visual mode. Press a capital V (for linewise visual mode) followed by =S&lt;/p&gt;&lt;p class=&#34;important&#34;&gt;=.&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC html&lt;/p&gt; &lt;p class=&#34;important&#34;&gt; &lt;em&gt;Hello&lt;/em&gt; world! &lt;/p&gt; #+END_SRC &lt;p&gt;Suppose you want to call a function on your visual selection or a text object. You can simply press =f= instead of the aforementioned keys and are then prompted for a functionname in the minibuffer, like with the tags. So with:&lt;/p&gt; &lt;p&gt;#+BEGIN_EXAMPLE &#34;Hello world!&#34; #+END_EXAMPLE&lt;/p&gt; &lt;p&gt;... after selecting the string, then pressing =Sf=, entering =print= and pressing return you would get&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC c print(&#34;Hello world!&#34;) #+END_SRC&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;FAAQ (frequently actually asked questions) ** Why does =vs= no longer surround?&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;This is due to an upstream change in =vim-surround=. It happened in this [[https://github.com/tpope/vim-surround/commit/6f0984a][commit]]. See the discussion in [[https://github.com/timcharper/evil-surround/pull/48][this]] pull request for more details.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Contributing &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;you are encouraged to test your changes in a standard environment with a clean emacs using just the needed plugins.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &lt;p&gt;** interactively #+BEGIN_SRC sh&lt;/p&gt; &lt;h1&gt;open a shell and go to the evil-surround directory, after cloning it&lt;/h1&gt; &lt;h1&gt;this is a clean emacs with just the absolute minimum dependencies needed to test evil-surround interactivelly.&lt;/h1&gt; &lt;p&gt;make make emacs&lt;/p&gt; &lt;h1&gt;now load evil-surround/test/evil-surround-test.el and M-x ert and run the tests&lt;/h1&gt; &lt;p&gt;#+END_SRC&lt;/p&gt; &lt;p&gt;** command&lt;/p&gt; &lt;p&gt;#+BEGIN_SRC sh&lt;/p&gt; &lt;h1&gt;open a shell and go to the evil-surround directory, after cloning it&lt;/h1&gt; &lt;h1&gt;this commands ensure that the tests are using a clean emacs with just the absolute minimum dependencies needed.&lt;/h1&gt; &lt;p&gt;make make test #+END_SRC&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Credits Credits and many [[https://github.com/emacs-evil/evil/issues/842][thanks]] go to [[http://github.com/timcharper][Tim Harper]], the original mantainer of the package.&lt;/li&gt; &#xA;  &lt;li&gt;LICENSE&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;[[https://www.gnu.org/licenses/gpl-3.0.en.html][GNU General Public License v3]] #+BEGIN_SRC text GNU General Public License v3 Copyright (C) 2010 - 2017 Tim Harper Copyright (c) 2018 - 2020 The evil-surround Contributors #+END_SRC&lt;/li&gt; &#xA; &lt;/ul&gt; &lt;/em&gt;</summary>
  </entry>
  <entry>
    <title>DarthFennec/highlight-indent-guides</title>
    <updated>2022-06-22T01:39:14Z</updated>
    <id>tag:github.com,2022-06-22:/DarthFennec/highlight-indent-guides</id>
    <link href="https://github.com/DarthFennec/highlight-indent-guides" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs minor mode to highlight indentation&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/highlight-indent-guides&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/highlight-indent-guides-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/DarthFennec/highlight-indent-guides&#34;&gt;&lt;img src=&#34;https://travis-ci.org/DarthFennec/highlight-indent-guides.svg?branch=master&#34; alt=&#34;travis&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;highlight-indent-guides.el&lt;/h1&gt; &#xA;&lt;p&gt;This minor mode highlights indentation levels via &lt;code&gt;font-lock&lt;/code&gt;. Indent widths are dynamically discovered, which means this correctly highlights in any mode, regardless of indent width, even in languages with non-uniform indentation such as Haskell. By default, this mode also inspects your theme dynamically, and automatically chooses appropriate colors for highlighting. This mode works properly around hard tabs and mixed indentation, and it behaves well in large buffers.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/hIUIKgs.gif&#34; alt=&#34;responsive gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x customize-variable RET highlight-indent-guides-method RET ...&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;&#39;fill&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;&#39;column&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://i.imgur.com/5ryNTVn.png&#34; alt=&#34;fill method screenshot&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://i.imgur.com/QgMTkkx.png&#34; alt=&#34;column method screenshot&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;&#39;character&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;&#39;bitmap&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://i.imgur.com/33mZPrU.png&#34; alt=&#34;character method screenshot&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://i.imgur.com/WjpqFz2.png&#34; alt=&#34;bitmap method screenshot&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install from &lt;a href=&#34;http://melpa.org/#/getting-started&#34;&gt;Melpa&lt;/a&gt;, use &lt;kbd&gt;M-x package-install RET highlight-indent-guides RET&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install from &lt;a href=&#34;https://guix.gnu.org/&#34;&gt;GNU Guix&lt;/a&gt;, run &lt;code&gt;guix install emacs-highlight-indent-guides&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, download &lt;code&gt;highlight-indent-guides.el&lt;/code&gt; and put it in your load path.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once the mode is installed, do &lt;kbd&gt;M-x highlight-indent-guides-mode&lt;/kbd&gt; to enable it. To enable it automatically in most programming modes, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(add-hook &#39;prog-mode-hook &#39;highlight-indent-guides-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;This mode supports four display methods. To change the display method, customize &lt;code&gt;highlight-indent-guides-method&lt;/code&gt;, and set it to one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fill&lt;/code&gt;: The default method. All whitespace used for indentation is highlighted. The color of each level of indentation alternates between &lt;code&gt;highlight-indent-guides-odd-face&lt;/code&gt; and &lt;code&gt;highlight-indent-guides-even-face&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;column&lt;/code&gt;: Like &lt;code&gt;fill&lt;/code&gt;, but only the first column of each level of indentation is highlighted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;character&lt;/code&gt;: The first column of each level of indentation is drawn using a column of characters. The character to draw with is specified by &lt;code&gt;highlight-indent-guides-character&lt;/code&gt;, and it is drawn using the face &lt;code&gt;highlight-indent-guides-character-face&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bitmap&lt;/code&gt;: Like &lt;code&gt;character&lt;/code&gt;, but an image is used in place of a character. This provides a wider variety of appearance options, and ensures that guides are always flush, not broken if the line height exceeds the character height. The image to use can be set by overloading the &lt;code&gt;highlight-indent-guides-bitmap-function&lt;/code&gt; variable with a custom function.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x customize-variable RET highlight-indent-guides-method RET &#39;character&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;To change the character used for drawing guide lines with the &lt;code&gt;character&lt;/code&gt; display method, customize &lt;code&gt;highlight-indent-guides-character&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x customize-variable RET highlight-indent-guides-character RET ?|&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlight Colors&lt;/h2&gt; &#xA;&lt;p&gt;By default, this mode dynamically chooses colors that look acceptable with the loaded theme. It does this by altering the luminosity of the theme&#39;s background color by a given percentage. These percentages can be tweaked, to make the colors more intense or subtle.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x customize-variable RET highlight-indent-guides-auto-odd-face-perc RET 15&lt;/kbd&gt; &lt;kbd&gt;M-x customize-variable RET highlight-indent-guides-auto-even-face-perc RET 15&lt;/kbd&gt; &lt;kbd&gt;M-x customize-variable RET highlight-indent-guides-auto-character-face-perc RET 20&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;To set the colors manually, disable this feature and customize the faces directly.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x customize-variable RET highlight-indent-guides-auto-enabled RET nil&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(set-face-background &#39;highlight-indent-guides-odd-face &#34;darkgray&#34;)&#xA;(set-face-background &#39;highlight-indent-guides-even-face &#34;dimgray&#34;)&#xA;(set-face-foreground &#39;highlight-indent-guides-character-face &#34;dimgray&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In some configurations, the following error might show up when emacs starts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Error: highlight-indent-guides cannot auto set faces: `default&#39; face is not set properly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is meant as a warning for when the faces can&#39;t be set, but in some situations the error might show up even when the faces are set properly. If this happens regularly, the error can be suppressed by customizing &lt;code&gt;highlight-indent-guides-suppress-auto-error&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x customize-variable RET highlight-indent-guides-suppress-auto-error RET t&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Responsive Guides&lt;/h2&gt; &#xA;&lt;p&gt;Responsive guides allow you to visualize not only the indentation itself, but your place in it. To enable this feature, customize &lt;code&gt;highlight-indent-guides-responsive&lt;/code&gt;, and set it to one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nil&lt;/code&gt;: The default. Responsive guides are disabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;top&lt;/code&gt;: Use a different color to highlight the &#34;current&#34; guide (the indentation block of the line that the cursor is on). This changes as the cursor moves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stack&lt;/code&gt;: Like &lt;code&gt;top&lt;/code&gt;, but also use a third color for all &#34;ancestor&#34; guides of the current guide. Again, this will change as the cursor moves around.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, responsive guides are not updated immediately every time the cursor moves. Instead, guides only update after the cursor stops moving for a certain period of time (one tenth of a second, by default). If you would like to change this behavior, customize &lt;code&gt;highlight-indent-guides-delay&lt;/code&gt;, and set it to the number of seconds to wait. For example, to disable the delay entirely:&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;M-x customize-variable RET highlight-indent-guides-delay RET 0&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enabling this feature provides more highlight faces, as well as more color modifiers for the dynamic colors feature. These are specified in the following table:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Level&lt;/th&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;face&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;odd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-odd-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;face&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;even&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-even-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;face&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;character&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-character-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;face&lt;/td&gt; &#xA;   &lt;td&gt;top&lt;/td&gt; &#xA;   &lt;td&gt;odd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-top-odd-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;face&lt;/td&gt; &#xA;   &lt;td&gt;top&lt;/td&gt; &#xA;   &lt;td&gt;even&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-top-even-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;face&lt;/td&gt; &#xA;   &lt;td&gt;top&lt;/td&gt; &#xA;   &lt;td&gt;character&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-top-character-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;face&lt;/td&gt; &#xA;   &lt;td&gt;stack&lt;/td&gt; &#xA;   &lt;td&gt;odd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-stack-odd-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;face&lt;/td&gt; &#xA;   &lt;td&gt;stack&lt;/td&gt; &#xA;   &lt;td&gt;even&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-stack-even-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;face&lt;/td&gt; &#xA;   &lt;td&gt;stack&lt;/td&gt; &#xA;   &lt;td&gt;character&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-stack-character-face&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;perc&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;odd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-auto-odd-face-perc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;perc&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;even&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-auto-even-face-perc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;perc&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;character&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-auto-character-face-perc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;perc&lt;/td&gt; &#xA;   &lt;td&gt;top&lt;/td&gt; &#xA;   &lt;td&gt;odd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-auto-top-odd-face-perc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;perc&lt;/td&gt; &#xA;   &lt;td&gt;top&lt;/td&gt; &#xA;   &lt;td&gt;even&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-auto-top-even-face-perc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;perc&lt;/td&gt; &#xA;   &lt;td&gt;top&lt;/td&gt; &#xA;   &lt;td&gt;character&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-auto-top-character-face-perc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;perc&lt;/td&gt; &#xA;   &lt;td&gt;stack&lt;/td&gt; &#xA;   &lt;td&gt;odd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-auto-stack-odd-face-perc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;perc&lt;/td&gt; &#xA;   &lt;td&gt;stack&lt;/td&gt; &#xA;   &lt;td&gt;even&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-auto-stack-even-face-perc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;perc&lt;/td&gt; &#xA;   &lt;td&gt;stack&lt;/td&gt; &#xA;   &lt;td&gt;character&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight-indent-guides-auto-stack-character-face-perc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom Highlighter Function&lt;/h2&gt; &#xA;&lt;p&gt;The highlighter function is the function that calculates which faces to use to display each guide character. If the default highlighter function isn&#39;t doing it for you, you can write your own by customizing &lt;code&gt;highlight-indent-guides-highlighter-function&lt;/code&gt;. A custom highlighter takes three parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;level&lt;/code&gt;: The indent level this guide character exists at, starting at &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;responsive&lt;/code&gt;: The responsive class of this guide character. This can be &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, or &lt;code&gt;stack&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;display&lt;/code&gt;: The display method setting. One of &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt;, &lt;code&gt;character&lt;/code&gt;, or &lt;code&gt;bitmap&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A custom highlighter should return the face to use to color the given guide character. Alternatively, it may return &lt;code&gt;nil&lt;/code&gt; to specify that the guide should not be displayed at all.&lt;/p&gt; &#xA;&lt;p&gt;The highlighter function is called once for each indentation character, each time a section of the buffer is re-highlighted. To speed things up a little, the results of the highlighter function are memoized per-character, and are reused when possible. Because of this, a custom highlighter should run quickly, and should not have side-effects (i.e. it should not depend on or change external values that might differ from one call to the next). A custom highlighter can return custom faces, but those faces will not be recognized by the dynamic color feature, and will need to be defined and colored manually.&lt;/p&gt; &#xA;&lt;p&gt;The following example highlighter will highlight normally, except that it will not highlight the first two levels of indentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(defun my-highlighter (level responsive display)&#xA;  (if (&amp;gt; 2 level)&#xA;      nil&#xA;    (highlight-indent-guides--highlighter-default level responsive display)))&#xA;&#xA;(setq highlight-indent-guides-highlighter-function &#39;my-highlighter)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Bitmap Function&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using the &lt;code&gt;&#39;bitmap&lt;/code&gt; display method, you may set a custom bitmap function, which determines what your guides will look like. Customize &lt;code&gt;highlight-indent-guides-bitmap-function&lt;/code&gt;, and set it to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;highlight-indent-guides--bitmap-dots&lt;/code&gt;: A guide is a column of small dots. This is the default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;highlight-indent-guides--bitmap-line&lt;/code&gt;: A guide is a solid vertical line.&lt;/li&gt; &#xA; &lt;li&gt;Or, write your own.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A custom bitmap function takes four parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;width&lt;/code&gt;: The width in pixels of the bitmap.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: The height in pixels of the bitmap.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;crep&lt;/code&gt;: A character that represents a &#34;filled&#34; or &#34;colored&#34; pixel. This is as opposed to an &#34;empty&#34; pixel, which the background color will show through.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zrep&lt;/code&gt;: A character that represents an &#34;empty&#34; pixel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The function should return a list of string lists, representing the pixels themselves. The list must contain &lt;code&gt;height&lt;/code&gt; sublists, and each sublist must contain &lt;code&gt;width&lt;/code&gt; strings, all of which are either &lt;code&gt;crep&lt;/code&gt; for a colored pixel or &lt;code&gt;zrep&lt;/code&gt; for an empty pixel.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;To display the &lt;code&gt;character&lt;/code&gt; method guides, and to highlight tab characters correctly, this mode controls the &lt;code&gt;display&lt;/code&gt; text property of some characters via &lt;code&gt;font-lock&lt;/code&gt;. Therefore, this mode may or may not play well with other modes that use the &lt;code&gt;display&lt;/code&gt; text property. This mode may also interfere with modes that use a display table to modify how whitespace is drawn, e.g., the &lt;code&gt;whitespace&lt;/code&gt; minor mode.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;bitmap&lt;/code&gt; display method can only be used if emacs is compiled with xpm support, and is running in gui mode.&lt;/p&gt; &#xA;&lt;p&gt;Currently, with the way this mode is designed, there is no good way to display indent guides on empty lines.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th&gt;Widths&lt;/th&gt; &#xA;   &lt;th&gt;Hard Tabs&lt;/th&gt; &#xA;   &lt;th&gt;Other Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/antonj/Highlight-Indentation-for-Emacs&#34;&gt;highlight-indentation.el&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fixed&lt;/td&gt; &#xA;   &lt;td&gt;Unsupported&lt;/td&gt; &#xA;   &lt;td&gt;Very popular&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zk-phi/indent-guide&#34;&gt;indent-guide.el&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dynamic&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;   &lt;td&gt;Fairly slow, jittery&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ikirill/hl-indent&#34;&gt;hl-indent.el&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dynamic&lt;/td&gt; &#xA;   &lt;td&gt;Unsupported&lt;/td&gt; &#xA;   &lt;td&gt;Slow for large files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/skeeto/visual-indentation-mode&#34;&gt;visual-indentation-mode.el&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fixed&lt;/td&gt; &#xA;   &lt;td&gt;Unsupported&lt;/td&gt; &#xA;   &lt;td&gt;Fast and slim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>