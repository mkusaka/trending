<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T01:40:20Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alphapapa/org-ql</title>
    <updated>2022-07-01T01:40:20Z</updated>
    <id>tag:github.com,2022-07-01:/alphapapa/org-ql</id>
    <link href="https://github.com/alphapapa/org-ql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Org-mode query language, including search commands and saved views&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: org-ql&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: Using =BEGIN_HTML= for this causes TeX/info export to fail, but this HTML block works.&lt;/h1&gt; &#xA;&lt;h1&gt;#+HTML: &lt;a href=&#34;https://alphapapa.github.io/dont-tread-on-emacs/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alphapapa/org-ql/master/images/dont-tread-on-emacs-150.png&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;#+HTML: &lt;img src=&#34;https://raw.githubusercontent.com/alphapapa/org-ql/master/images/dog.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: To avoid having this in the info manual, we use HTML rather than Org syntax; it still appears with the GitHub renderer.&lt;/h1&gt; &#xA;&lt;p&gt;#+HTML: &lt;a href=&#34;https://melpa.org/#/org-ql&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/org-ql-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/org-ql&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/org-ql-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package provides a query language for Org files. It offers two syntax styles: Lisp-like sexps and search engine-like keywords.&lt;/p&gt; &#xA;&lt;p&gt;It includes three libraries: The =org-ql= library is flexible and may be used as a backend for other tools. The libraries =org-ql-search= and =helm-org-ql= (a separate package) provide interactive search commands and saved views.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :PROPERTIES: :TOC: :include siblings :depth 0 :ignore this :force depth :END: :CONTENTS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#screenshots][Screenshots]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#changelog][Changelog]] :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[images/org-ql-search.gif]]&lt;/p&gt; &#xA;&lt;p&gt;[[images/org-ql-view-dispatch.gif]]&lt;/p&gt; &#xA;&lt;p&gt;[[images/helm-org-ql.gif]]&lt;/p&gt; &#xA;&lt;p&gt;[[images/org-ql-view-sidebar.gif]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :TOC: ignore-children :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The package =org-ql= may be installed directly from [[https://melpa.org/#/org-ql][MELPA]] or with other tools like [[https://framagit.org/steckerhalter/quelpa][Quelpa]].&lt;/p&gt; &#xA;&lt;p&gt;After installation, you can use the commands without additional configuration. To use the functions and macros in your own Elisp code, use libraries =org-ql= and =org-ql-view=.&lt;/p&gt; &#xA;&lt;p&gt;** Quelpa&lt;/p&gt; &#xA;&lt;p&gt;Installing with [[https://framagit.org/steckerhalter/quelpa][Quelpa]] is easy:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install [[https://framagit.org/steckerhalter/quelpa-use-package#installation][quelpa-use-package]] (which can be installed directly from MELPA).&lt;/li&gt; &#xA; &lt;li&gt;Add this form to your init file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (use-package org-ql :quelpa (org-ql :fetcher github :repo &#34;alphapapa/org-ql&#34; :files (:defaults (:exclude &#34;helm-org-ql.el&#34;)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Helm support&lt;/p&gt; &#xA;&lt;p&gt;The command =helm-org-ql= is available in the package =helm-org-ql=. It may be installed from MELPA, or with Quelpa, like so:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (use-package helm-org-ql :quelpa (helm-org-ql :fetcher github :repo &#34;alphapapa/org-ql&#34; :files (&#34;helm-org-ql.el&#34;))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :PROPERTIES: :TOC: :include descendants :depth 1 :END: :CONTENTS:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#commands][Commands]]&lt;/li&gt; &#xA; &lt;li&gt;[[#queries][Queries]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#non-sexp-query-syntax][Non-sexp query syntax]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#general-predicates][General predicates]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#ancestordescendant-predicates][Ancestor/descendant predicates]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#datetime-predicates][Date/time predicates]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#functions--macros][Functions / Macros]]&lt;/li&gt; &#xA; &lt;li&gt;[[#dynamic-block][Dynamic block]]&lt;/li&gt; &#xA; &lt;li&gt;[[#links][Links]]&lt;/li&gt; &#xA; &lt;li&gt;[[#tips][Tips]] :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;These links work on GitHub&#39;s Org renderer but not in Org.&lt;/h1&gt; &#xA;&lt;p&gt;Feedback on these APIs is welcome. Eventually, after being tested and polished, they will be considered stable.&lt;/p&gt; &#xA;&lt;h1&gt;TODO: Find a way to get these examples included in the info manual.&lt;/h1&gt; &#xA;&lt;p&gt;Lisp code examples are in [[examples.org]].&lt;/p&gt; &#xA;&lt;p&gt;** Commands :PROPERTIES: :TOC: ignore-children :END:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Jumping to an entry:&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#org-ql-find][org-ql-find]] and related commands&lt;/li&gt; &#xA;   &lt;li&gt;[[#helm-org-ql][helm-org-ql]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Showing an agenda-like view:&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#org-ql-search][org-ql-search]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#org-ql-view][org-ql-view]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#org-ql-view-sidebar][org-ql-view-sidebar]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#org-ql-view-recent-items][org-ql-view-recent-items]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Showing a tree in a buffer:&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#org-ql-sparse-tree][org-ql-sparse-tree]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** org-ql-find&lt;/p&gt; &#xA;&lt;p&gt;/Note: These commands use [[#non-sexp-query-syntax][non-sexp queries]]./&lt;/p&gt; &#xA;&lt;p&gt;These commands jump to a heading selected using Emacs&#39;s built-in completion facilities with an Org QL query:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;org-ql-find&lt;/del&gt; searches in the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-ql-find-in-agenda&lt;/del&gt; searches in &lt;del&gt;(org-agenda-files)&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-ql-find-in-org-directory&lt;/del&gt; searches in &lt;del&gt;org-directory&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[images/org-ql-find.png]]&lt;/p&gt; &#xA;&lt;p&gt;*** org-ql-search&lt;/p&gt; &#xA;&lt;p&gt;/Note: This command supports both sexp queries and [[#non-sexp-query-syntax][non-sexp queries]]./&lt;/p&gt; &#xA;&lt;p&gt;Read &lt;del&gt;QUERY&lt;/del&gt; and search with &lt;del&gt;org-ql&lt;/del&gt;. Interactively, prompt for these variables:&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;BUFFERS-FILES&lt;/del&gt;: &lt;del&gt;A&lt;/del&gt; list of buffers and/or files to search. Interactively, may also be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;buffer&lt;/del&gt;: search the current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;all&lt;/del&gt;: search all Org buffers&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;agenda&lt;/del&gt;: search buffers returned by the function &lt;del&gt;org-agenda-files&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;A space-separated list of file or buffer names&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;del&gt;GROUPS&lt;/del&gt;: An &lt;del&gt;org-super-agenda&lt;/del&gt; group set. See variable &lt;del&gt;org-super-agenda-groups&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;NARROW&lt;/del&gt;: When non-nil, don&#39;t widen buffers before searching. Interactively, with prefix, leave narrowed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;SORT&lt;/del&gt;: One or a list of &lt;del&gt;org-ql&lt;/del&gt; sorting functions, like &lt;del&gt;date&lt;/del&gt; or &lt;del&gt;priority&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Bindings:&lt;/em&gt; Keys bound in results buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=r=: Refresh results. With prefix, prompt to adjust search parameters.&lt;/li&gt; &#xA; &lt;li&gt;=v=: Show =transient= view dispatcher (like Magit&#39;s popups).&lt;/li&gt; &#xA; &lt;li&gt;=C-x C-s=: Save query to variable &lt;del&gt;org-ql-views&lt;/del&gt; (accessible with command &lt;del&gt;org-ql-view&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The view buffer is currently put in &lt;del&gt;org-agenda-mode&lt;/del&gt;, which means that /some/ Org Agenda commands work, such as jumping to entries and changing item priorities (without necessarily updating the view). This feature is experimental and not guaranteed to work correctly with all commands. (It works to the extent it does because the appropriate text properties are placed on each item, imitating an Agenda buffer.)&lt;/p&gt; &#xA;&lt;p&gt;*** helm-org-ql&lt;/p&gt; &#xA;&lt;p&gt;/Note: This command uses [[#non-sexp-query-syntax][non-sexp queries]]. It is available separately in the package =helm-org-ql=./&lt;/p&gt; &#xA;&lt;p&gt;This command displays matches with Helm.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press =C-x C-s= in the Helm session to save the results to an =org-ql-search= buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** org-ql-view&lt;/p&gt; &#xA;&lt;p&gt;Choose and display a view stored in &lt;del&gt;org-ql-views&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Bindings:&lt;/em&gt; Keys bound in view buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=g=, =r=: Refresh results. With prefix, prompt to adjust search parameters.&lt;/li&gt; &#xA; &lt;li&gt;=v=: Show =transient= view dispatcher (like Magit&#39;s popups).&lt;/li&gt; &#xA; &lt;li&gt;=C-x C-s=: Save query to variable &lt;del&gt;org-ql-views&lt;/del&gt; (accessible with command &lt;del&gt;org-ql-view&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** org-ql-view-sidebar&lt;/p&gt; &#xA;&lt;p&gt;Show a sidebar window listing views stored in =org-ql-views= for easy access. In the sidebar, press =RET= or =mouse-1= to show the view at point, and press =c= to customize the view at point.&lt;/p&gt; &#xA;&lt;p&gt;*** org-ql-view-recent-items&lt;/p&gt; &#xA;&lt;p&gt;Show items in &lt;del&gt;FILES&lt;/del&gt; from last &lt;del&gt;DAYS&lt;/del&gt; days with timestamps of &lt;del&gt;TYPE&lt;/del&gt;. &lt;del&gt;TYPE&lt;/del&gt; may be &lt;del&gt;ts&lt;/del&gt;, &lt;del&gt;ts-active&lt;/del&gt;, &lt;del&gt;ts-inactive&lt;/del&gt;, &lt;del&gt;clocked&lt;/del&gt;, &lt;del&gt;closed&lt;/del&gt;, &lt;del&gt;deadline&lt;/del&gt;, &lt;del&gt;planning&lt;/del&gt;, or &lt;del&gt;scheduled&lt;/del&gt;. =FILES= defaults to those returned by the function =org-agenda-files=.&lt;/p&gt; &#xA;&lt;p&gt;*** org-ql-sparse-tree&lt;/p&gt; &#xA;&lt;p&gt;Arguments: &lt;del&gt;(query &amp;amp;key keep-previous (buffer (current-buffer)))&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Show a sparse tree for &lt;del&gt;QUERY&lt;/del&gt; in &lt;del&gt;BUFFER&lt;/del&gt; and return number of results. The tree will show the lines where the query matches, and any other context defined in &lt;del&gt;org-show-context-detail&lt;/del&gt;, which see.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;QUERY&lt;/del&gt; is an &lt;del&gt;org-ql&lt;/del&gt; query sexp (quoted, since this is a function). &lt;del&gt;BUFFER&lt;/del&gt; defaults to the current buffer. When &lt;del&gt;KEEP-PREVIOUS&lt;/del&gt; is non-nil (interactively, with prefix), the outline is not reset to the overview state before finding matches, which allows stacking calls to this command. Runs &lt;del&gt;org-occur-hook&lt;/del&gt; after making the sparse tree.&lt;/p&gt; &#xA;&lt;p&gt;** Queries :PROPERTIES: :TOC: :include descendants :depth 1 :END: :CONTENTS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#non-sexp-query-syntax][Non-sexp query syntax]]&lt;/li&gt; &#xA; &lt;li&gt;[[#general-predicates][General predicates]]&lt;/li&gt; &#xA; &lt;li&gt;[[#ancestordescendant-predicates][Ancestor/descendant predicates]]&lt;/li&gt; &#xA; &lt;li&gt;[[#datetime-predicates][Date/time predicates]] :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An =org-ql= query is a Lisp expression which may contain arbitrary expressions, as well as calling certain built-in predicates. It is byte-compiled into a predicate function which is tested with point on each heading in an Org buffer; when it returns non-nil, the heading matches the query. When possible, certain built-in predicates are optimized away to whole-buffer regular expression searches, which are much faster to search for than testing the predicate on each heading.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Notes:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bare strings like &lt;del&gt;&#34;string&#34;&lt;/del&gt; are automatically converted to &lt;del&gt;(regexp &#34;string&#34;)&lt;/del&gt; predicates.&lt;/li&gt; &#xA; &lt;li&gt;Standard numeric comparator function symbols (&lt;del&gt;&amp;lt;&lt;/del&gt;, &lt;del&gt;&amp;lt;=&lt;/del&gt;, &lt;del&gt;&amp;gt;&lt;/del&gt;, &lt;del&gt;&amp;gt;=&lt;/del&gt;, &lt;del&gt;=&lt;/del&gt; ) need not be quoted when passed as an argument to predicates which accept them. The resemblance to infix notation is coincidental.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Non-sexp query syntax&lt;/p&gt; &#xA;&lt;p&gt;The command =org-ql-search= also accepts, and the command =helm-org-ql= only accepts, an alternative, non-sexp query syntax. The syntax is simple, and a few examples of queries in both syntaxes should suffice. By default, when multiple predicates are used, they are combined with boolean =and=.&lt;/p&gt; &#xA;&lt;p&gt;| Sexp syntax | Non-sexp syntax | |-------------------------------------------------+----------------------------------------------| | &lt;del&gt;(todo)&lt;/del&gt; | &lt;del&gt;todo:&lt;/del&gt; | | &lt;del&gt;(todo &#34;SOMEDAY&#34;)&lt;/del&gt; | &lt;del&gt;todo:SOMEDAY&lt;/del&gt; | | &lt;del&gt;(todo &#34;SOMEDAY&#34; &#34;WAITING&#34;)&lt;/del&gt; | &lt;del&gt;todo:SOMEDAY,WAITING&lt;/del&gt; | | &lt;del&gt;(ts :on today)&lt;/del&gt; | &lt;del&gt;ts:on=today&lt;/del&gt; | | &lt;del&gt;(ts-active :from &#34;2017-01-01&#34; :to &#34;2018-01-01&#34;)&lt;/del&gt; | &lt;del&gt;ts-active:from=2017-01-01,to=2018-01-01&lt;/del&gt; | | &lt;del&gt;(clocked :on -1)&lt;/del&gt; | &lt;del&gt;clocked:on=-1&lt;/del&gt; | | &lt;del&gt;(heading &#34;quoted phrase&#34; &#34;word&#34;)&lt;/del&gt; | &lt;del&gt;heading:&#34;quoted phrase&#34;,word&lt;/del&gt; | | &lt;del&gt;(and (tags &#34;book&#34; &#34;books&#34;) (priority &#34;A&#34;))&lt;/del&gt; | &lt;del&gt;tags:book,books priority:A&lt;/del&gt; | | &lt;del&gt;(src :lang &#34;elisp&#34; :regexps (&#34;defun&#34;))&lt;/del&gt; | &lt;del&gt;src:defun,lang=elisp&lt;/del&gt; or &lt;del&gt;src:lang=elisp,defun&lt;/del&gt; | | &lt;del&gt;(and (tags &#34;space&#34;) (not (regexp &#34;moon&#34;)))&lt;/del&gt; | &lt;del&gt;tags:space !moon&lt;/del&gt; | | &lt;del&gt;(priority &amp;gt;= B)&lt;/del&gt; | &lt;del&gt;priority:A,B&lt;/del&gt; |&lt;/p&gt; &#xA;&lt;p&gt;Note that the =effort=, =level=, and =priority= predicates do not support comparators in the non-sexp syntax, so multiple arguments should be passed instead, as seen in the last example.&lt;/p&gt; &#xA;&lt;p&gt;*** General predicates&lt;/p&gt; &#xA;&lt;p&gt;Arguments are listed next to predicate names, where applicable.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=category (&amp;amp;optional categories)= :: Return non-nil if current heading is in one or more of &lt;del&gt;CATEGORIES&lt;/del&gt; (a list of strings).&lt;/li&gt; &#xA; &lt;li&gt;=done= :: Return non-nil if entry&#39;s &lt;del&gt;TODO&lt;/del&gt; keyword is in &lt;del&gt;org-done-keywords&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=effort (&amp;amp;optional effort-or-comparator effort)= :: Return non-nil if current heading&#39;s effort property matches arguments. The following forms are accepted: &lt;del&gt;(effort DURATION)&lt;/del&gt;: Matches if effort is &lt;del&gt;DURATION&lt;/del&gt;. &lt;del&gt;(effort DURATION DURATION)&lt;/del&gt;: Matches if effort is between DURATIONs, inclusive. &lt;del&gt;(effort COMPARATOR DURATION)&lt;/del&gt;: Matches if effort compares to &lt;del&gt;DURATION&lt;/del&gt; with &lt;del&gt;COMPARATOR&lt;/del&gt;. &lt;del&gt;COMPARATOR&lt;/del&gt; may be &lt;del&gt;&amp;lt;&lt;/del&gt;, &lt;del&gt;&amp;lt;=&lt;/del&gt;, &lt;del&gt;&amp;gt;&lt;/del&gt;, or &lt;del&gt;&amp;gt;=&lt;/del&gt;. &lt;del&gt;DURATION&lt;/del&gt; should be an Org effort string, like =5= or =0:05=.&lt;/li&gt; &#xA; &lt;li&gt;=habit= :: Return non-nil if entry is a habit.&lt;/li&gt; &#xA; &lt;li&gt;=heading (&amp;amp;rest strings)= :: Return non-nil if current entry&#39;s heading matches all &lt;del&gt;STRINGS&lt;/del&gt;. Matching is done case-insensitively. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aliases: =h=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;heading-regexp (&amp;amp;rest regexps)&lt;/del&gt; :: Return non-nil if current entry&#39;s heading matches all &lt;del&gt;REGEXPS&lt;/del&gt; (regexp strings). Matching is done case-insensitively. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aliases: &lt;del&gt;h*&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=level (level-or-comparator &amp;amp;optional level)= :: Return non-nil if current heading&#39;s outline level matches arguments. The following forms are accepted: &lt;del&gt;(level NUMBER)&lt;/del&gt;: Matches if heading level is &lt;del&gt;NUMBER&lt;/del&gt;. &lt;del&gt;(level NUMBER NUMBER)&lt;/del&gt;: Matches if heading level is equal to or between NUMBERs. &lt;del&gt;(level COMPARATOR NUMBER)&lt;/del&gt;: Matches if heading level compares to &lt;del&gt;NUMBER&lt;/del&gt; with &lt;del&gt;COMPARATOR&lt;/del&gt;. &lt;del&gt;COMPARATOR&lt;/del&gt; may be &lt;del&gt;&amp;lt;&lt;/del&gt;, &lt;del&gt;&amp;lt;=&lt;/del&gt;, &lt;del&gt;&amp;gt;&lt;/del&gt;, or &lt;del&gt;&amp;gt;=&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=link (&amp;amp;optional description-or-target &amp;amp;key description target regexp-p)= :: Return non-nil if current heading contains a link matching arguments. &lt;del&gt;DESCRIPTION-OR-TARGET&lt;/del&gt; is matched against the link&#39;s description and target. Alternatively, one or both of &lt;del&gt;DESCRIPTION&lt;/del&gt; and &lt;del&gt;TARGET&lt;/del&gt; may be matched separately. Without arguments, return non-nil if any link is found.&lt;/li&gt; &#xA; &lt;li&gt;=outline-path (&amp;amp;rest strings)= :: Return non-nil if current node&#39;s outline path matches all of &lt;del&gt;STRINGS&lt;/del&gt;. Each string may appear as a substring in any part of the node&#39;s outline path. For example, the path =Food/Fruits/Grapes= would match &lt;del&gt;(olp &#34;Fruit&#34; &#34;Grape&#34;)&lt;/del&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aliases: &lt;del&gt;olp&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=outline-path-segment (&amp;amp;rest strings)= :: Return non-nil if current node&#39;s outline path matches &lt;del&gt;STRINGS&lt;/del&gt;. Matches &lt;del&gt;STRINGS&lt;/del&gt; as a contiguous segment of the outline path. Each string is compared as a substring. For example the path &lt;del&gt;Food/Fruits/Grapes&lt;/del&gt; would match &lt;del&gt;(olps &#34;Fruit&#34; &#34;Grape&#34;)&lt;/del&gt; but not &lt;del&gt;(olps &#34;Food&#34; &#34;Grape&#34;)&lt;/del&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aliases: &lt;del&gt;olps&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=path (&amp;amp;rest regexps)= :: Return non-nil if current heading&#39;s buffer&#39;s filename path matches any of &lt;del&gt;REGEXPS&lt;/del&gt; (regexp strings). Without arguments, return non-nil if buffer is file-backed.&lt;/li&gt; &#xA; &lt;li&gt;=priority (&amp;amp;rest args)= :: Return non-nil if current heading has a certain priority. &lt;del&gt;ARGS&lt;/del&gt; may be either a list of one or more priority letters as strings, or a comparator function symbol followed by a priority letter string. For example: &lt;del&gt;(priority &#34;A&#34;) (priority &#34;A&#34; &#34;B&#34;) (priority &#39;&amp;gt;= &#34;B&#34;)&lt;/del&gt; Note that items without a priority cookie never match this predicate (while Org itself considers items without a cookie to have the default priority, which, by default, is equal to priority &lt;del&gt;B&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;=property (property &amp;amp;optional value)= :: Return non-nil if current entry has &lt;del&gt;PROPERTY&lt;/del&gt; (a string), and optionally &lt;del&gt;VALUE&lt;/del&gt; (a string). Note that property inheritance is currently /not/ enabled for this predicate. If you need to test with inheritance, you could use a custom predicate form, like &lt;del&gt;(org-entry-get (point) &#34;PROPERTY&#34; &#39;inherit)&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=regexp (&amp;amp;rest regexps)= :: Return non-nil if current entry matches all of &lt;del&gt;REGEXPS&lt;/del&gt; (regexp strings). Matches against entire entry, from beginning of its heading to the next heading. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aliases: =r=.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=rifle (&amp;amp;rest strings)= :: Return non-nil if each string is found in either the entry or its outline path. Works like =org-rifle=. This is probably the most useful, intuitive, general-purpose predicate. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aliases: &lt;del&gt;smart&lt;/del&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; By default, this is the default predicate used for plain-string query tokens (i.e. given without a specified predicate). This can be customized with the option &lt;del&gt;org-ql-default-predicate&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;src (&amp;amp;key lang regexps)&lt;/del&gt; :: Return non-nil if current entry contains an Org Babel source block. If &lt;del&gt;LANG&lt;/del&gt; is non-nil, match blocks of that language. If &lt;del&gt;REGEXPS&lt;/del&gt; is non-nil, require that block&#39;s contents match all regexps.&lt;/li&gt; &#xA; &lt;li&gt;=tags (&amp;amp;optional tags)= :: Return non-nil if current heading has one or more of &lt;del&gt;TAGS&lt;/del&gt; (a list of strings). Tests both inherited and local tags.&lt;/li&gt; &#xA; &lt;li&gt;=tags-inherited (&amp;amp;optional tags)= :: Return non-nil if current heading&#39;s inherited tags include one or more of &lt;del&gt;TAGS&lt;/del&gt; (a list of strings). If &lt;del&gt;TAGS&lt;/del&gt; is nil, return non-nil if heading has any inherited tags. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aliases: &lt;del&gt;inherited-tags&lt;/del&gt;, &lt;del&gt;tags-i&lt;/del&gt;, &lt;del&gt;itags&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=tags-local (&amp;amp;optional tags)= :: Return non-nil if current heading&#39;s local tags include one or more of &lt;del&gt;TAGS&lt;/del&gt; (a list of strings). If &lt;del&gt;TAGS&lt;/del&gt; is nil, return non-nil if heading has any local tags. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aliases: &lt;del&gt;local-tags&lt;/del&gt;, &lt;del&gt;tags-l&lt;/del&gt;, &lt;del&gt;ltags&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=tags-all (tags)= :: Return non-nil if current heading includes all of &lt;del&gt;TAGS&lt;/del&gt;. Tests both inherited and local tags. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aliases: &lt;del&gt;tags&amp;amp;&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=tags-regexp (&amp;amp;rest regexps)= :: Return non-nil if current heading has tags matching one or more of &lt;del&gt;REGEXPS&lt;/del&gt;. Tests both inherited and local tags. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aliases: &lt;del&gt;tags*&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;=todo (&amp;amp;optional keywords)= :: Return non-nil if current heading is a &lt;del&gt;TODO&lt;/del&gt; item. With &lt;del&gt;KEYWORDS&lt;/del&gt;, return non-nil if its keyword is one of &lt;del&gt;KEYWORDS&lt;/del&gt; (a list of strings). When called without arguments, only matches non-done tasks (i.e. does not match keywords in &lt;del&gt;org-done-keywords&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Ancestor/descendant predicates&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=ancestors (&amp;amp;optional query)= :: Return non-nil if current heading has ancestor headings. If &lt;del&gt;QUERY&lt;/del&gt;, return non-nil if an ancestor heading matches it. This selector may be nested.&lt;/li&gt; &#xA; &lt;li&gt;=children (&amp;amp;optional query)= :: Return non-nil if current heading has direct child headings. If &lt;del&gt;QUERY&lt;/del&gt;, return non-nil if a child heading matches it. This selector may be nested, e.g. to match grandchild headings.&lt;/li&gt; &#xA; &lt;li&gt;=descendants (&amp;amp;optional query)= :: Return non-nil if current heading has descendant headings. If &lt;del&gt;QUERY&lt;/del&gt;, return non-nil if a descendant heading matches it. This selector may be nested (if you can grok the nesting!).&lt;/li&gt; &#xA; &lt;li&gt;=parent (&amp;amp;optional query)= :: Return non-nil if current heading has a direct parent heading. If &lt;del&gt;QUERY&lt;/del&gt;, return non-nil if the parent heading matches it. This selector may be nested, e.g. to match grandparent headings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Date/time predicates&lt;/p&gt; &#xA;&lt;p&gt;These predicates take optional keyword arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;:from&lt;/del&gt;: Match entries whose timestamp is on or after timestamp &lt;del&gt;:from&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:to&lt;/del&gt;: Match entries whose timestamp is on or before timestamp &lt;del&gt;:to&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:on&lt;/del&gt;: Match entries whose timestamp is on date &lt;del&gt;:on&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:with-time&lt;/del&gt;: If unspecified, match timestamps with or without times (i.e. HH:MM). If nil, match timestamps without times. If t, match timestamps with times.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Timestamp/date arguments should be either a number of days (positive to look forward, or negative to look backward), a string parseable by &lt;del&gt;parse-time-string&lt;/del&gt; (the string may omit the time value), the symbol &lt;del&gt;today&lt;/del&gt;, or a &lt;del&gt;ts&lt;/del&gt; struct.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Predicates&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=ts= :: Return non-nil if current entry has a timestamp in given period. Without arguments, return non-nil if entry has a timestamp.&lt;/li&gt; &#xA;   &lt;li&gt;=ts-active=, =ts-a= :: Like =ts=, but only matches active timestamps.&lt;/li&gt; &#xA;   &lt;li&gt;=ts-inactive=, =ts-i= :: Like =ts=, but only matches inactive timestamps.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following predicates, in addition to the keyword arguments, can also take a single argument, a number, which looks backward or forward a number of days. The number can be negative to invert the direction.&lt;/p&gt; &#xA;&lt;p&gt;These two predicates interpret a single number argument as if it were passed to the &lt;del&gt;:from&lt;/del&gt; keyword argument, which eases the common case of searching for items clocked or closed in the past few days:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Backward-looking&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=clocked= :: Return non-nil if current entry was clocked in given period. Without arguments, return non-nil if entry was ever clocked. Note: Clock entries are expected to be clocked out. Currently clocked entries (i.e. with unclosed timestamp ranges) are ignored.&lt;/li&gt; &#xA;   &lt;li&gt;=closed= :: Return non-nil if current entry was closed in given period. Without arguments, return non-nil if entry is closed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These predicates interpret a single number argument as if it were passed to the &lt;del&gt;:to&lt;/del&gt; keyword argument, which eases the common case of searching for items planned in the next few days:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Forward-looking&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=deadline= :: Return non-nil if current entry has deadline in given period. If argument is =auto=, return non-nil if entry has deadline within =org-deadline-warning-days=. Without arguments, return non-nil if entry has any deadline.&lt;/li&gt; &#xA;   &lt;li&gt;=planning= :: Return non-nil if current entry has planning timestamp (i.e. its deadline, scheduled, or closed timestamp) in given period. Without arguments, return non-nil if entry has any planning timestamp.&lt;/li&gt; &#xA;   &lt;li&gt;=scheduled= :: Return non-nil if current entry is scheduled in given period. Without arguments, return non-nil if entry is scheduled.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Functions / Macros :PROPERTIES: :TOC: :include descendants :END: :CONTENTS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#agenda-like-views][Agenda-like views]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#function-org-ql-block][Function: org-ql-block]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#listing--acting-on-results][Listing / acting-on results]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#caching][Caching]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#function-org-ql-select][Function: org-ql-select]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#function-org-ql-query][Function: org-ql-query]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#macro-org-ql-deprecated][Macro: org-ql (deprecated)]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#custom-predicates][Custom predicates]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#macro-org-ql-defpred][Macro: org-ql-defpred]] :END:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Agenda-like views&lt;/p&gt; &#xA;&lt;p&gt;**** Function: &lt;del&gt;org-ql-block&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;For use as a custom agenda block type in &lt;del&gt;org-agenda-custom-commands&lt;/del&gt;. For example, you could define a custom series command like this, which would list all priority A items tagged =Emacs= with to-do keyword =SOMEDAY=, followed by the standard agenda view, in a single buffer:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (setq org-agenda-custom-commands &#39;((&#34;ces&#34; &#34;Custom: Agenda and Emacs SOMEDAY [#A] items&#34; ((org-ql-block &#39;(and (todo &#34;SOMEDAY&#34;) (tags &#34;Emacs&#34;) (priority &#34;A&#34;)) ((org-ql-block-header &#34;SOMEDAY :Emacs: High-priority&#34;))) (agenda))))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Which would be equivalent to a &lt;del&gt;tags-todo&lt;/del&gt; search like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (setq org-agenda-custom-commands &#39;((&#34;ces&#34; &#34;Custom: Agenda and Emacs SOMEDAY [#A] items&#34; ((tags-todo &#34;PRIORITY=&#34;A&#34;+Emacs/!SOMEDAY&#34;) (agenda))))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;However, the &lt;del&gt;org-ql-block&lt;/del&gt; version runs in about 1/5th the time.&lt;/p&gt; &#xA;&lt;p&gt;The variable =org-ql-block-header= may be bound to a string to use as the block header, otherwise the header is formed automatically.&lt;/p&gt; &#xA;&lt;p&gt;*** Listing / acting-on results&lt;/p&gt; &#xA;&lt;p&gt;**** Caching&lt;/p&gt; &#xA;&lt;p&gt;Org QL uses a per-buffer cache to speed up subsequent searches. It&#39;s keyed on query expressions and match actions, which means that, for the same query and same match action in the same buffer, if the buffer has not been modified since the last time the query was run, the cached match-action result will be returned, and the query will not be evaluated in that buffer again.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, since neither query expressions nor match actions are guaranteed to be evaluated when the following functions are called, they should be free of side effects. Or, if a side effect is required, the cache should be invalidated (e.g. by incrementing the buffer&#39;s modified tick, or by using a query expression or match action that has yet to be cached). /Note: Future improvements will allow the cache to be more easily disabled or cleared./&lt;/p&gt; &#xA;&lt;p&gt;**** Function: &lt;del&gt;org-ql-select&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;/Arguments:/ &lt;del&gt;(buffers-or-files query &amp;amp;key action narrow sort)&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Return items matching &lt;del&gt;QUERY&lt;/del&gt; in &lt;del&gt;BUFFERS-OR-FILES&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;BUFFERS-OR-FILES&lt;/del&gt; is a one or a list of files and/or buffers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;QUERY&lt;/del&gt; is an &lt;del&gt;org-ql&lt;/del&gt; query sexp (quoted, since this is a function).&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;ACTION&lt;/del&gt; is a function which is called on each matching entry with point at the beginning of its heading. It may be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;element&lt;/del&gt; or nil: Equivalent to &lt;del&gt;org-element-headline-parser&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;element-with-markers&lt;/del&gt;: Equivalent to calling &lt;del&gt;org-element-headline-parser&lt;/del&gt;, with markers added using &lt;del&gt;org-ql--add-markers&lt;/del&gt;. Suitable for formatting with &lt;del&gt;org-ql-agenda--format-element&lt;/del&gt;, allowing insertion into an Org Agenda-like buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A sexp, which will be byte-compiled into a lambda function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A function symbol.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If &lt;del&gt;NARROW&lt;/del&gt; is non-nil, buffers are not widened (the default is to widen and search the entire buffer).&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;SORT&lt;/del&gt; is either nil, in which case items are not sorted; or one or a list of defined &lt;del&gt;org-ql&lt;/del&gt; sorting methods (&lt;del&gt;date&lt;/del&gt;, &lt;del&gt;deadline&lt;/del&gt;, &lt;del&gt;scheduled&lt;/del&gt;, &lt;del&gt;closed&lt;/del&gt;, &lt;del&gt;todo&lt;/del&gt;, &lt;del&gt;priority&lt;/del&gt;, or &lt;del&gt;random&lt;/del&gt;); or a user-defined comparator function that accepts two items as arguments and returns nil or non-nil.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp ;; Return list of to-do headings in inbox file with tags and to-do keywords: (org-ql-select &#34;~/org/inbox.org&#34; &#39;(todo) :action #&#39;org-get-heading) ;; =&amp;gt; (&#34;TODO Practice leaping tall buildings in a single bound :personal:&#34; ...)&lt;/p&gt; &#xA;&lt;p&gt;;; Without tags and to-do keywords: (org-ql-select &#34;~/org/inbox.org&#34; &#39;(todo) :action &#39;(org-get-heading t t)) ;; =&amp;gt; (&#34;Practice leaping tall buildings in a single bound&#34; ...)&lt;/p&gt; &#xA;&lt;p&gt;;; Return WAITING heading elements in agenda files: (org-ql-select (org-agenda-files) &#39;(todo &#34;WAITING&#34;) :action &#39;element) ;; =&amp;gt; ((headline (:raw-value &#34;Visit the moon&#34; ...) ...) ...)&lt;/p&gt; &#xA;&lt;p&gt;;; Since `element&#39; is the default for ACTION, it may be omitted: (org-ql-select (org-agenda-files) &#39;(todo &#34;WAITING&#34;)) ;; =&amp;gt; ((headline (:raw-value &#34;Visit the moon&#34; ...) ...) ...) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;**** Function: &lt;del&gt;org-ql-query&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;/Arguments:/ &lt;del&gt;(&amp;amp;key (select &#39;element-with-markers) from where order-by narrow)&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;del&gt;org-ql-select&lt;/del&gt;, but arguments are named more like a &lt;del&gt;SQL&lt;/del&gt; query.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;SELECT&lt;/del&gt; corresponds to the &lt;del&gt;org-ql-select&lt;/del&gt; argument &lt;del&gt;ACTION&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;FROM&lt;/del&gt; corresponds to the &lt;del&gt;org-ql-select&lt;/del&gt; argument &lt;del&gt;BUFFERS-OR-FILES&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;WHERE&lt;/del&gt; corresponds to the &lt;del&gt;org-ql-select&lt;/del&gt; argument &lt;del&gt;QUERY&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;ORDER-BY&lt;/del&gt; corresponds to the &lt;del&gt;org-ql-select&lt;/del&gt; argument &lt;del&gt;SORT&lt;/del&gt;, which see.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;NARROW&lt;/del&gt; corresponds to the &lt;del&gt;org-ql-select&lt;/del&gt; argument &lt;del&gt;NARROW&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp ;; Return list of to-do headings in inbox file with tags and to-do keywords: (org-ql-query :select #&#39;org-get-heading :from &#34;~/org/inbox.org&#34; :where &#39;(todo)) ;; =&amp;gt; (&#34;TODO Practice leaping tall buildings in a single bound :personal:&#34; ...)&lt;/p&gt; &#xA;&lt;p&gt;;; Without tags and to-do keywords: (org-ql-query :select &#39;(org-get-heading t t) :from &#34;~/org/inbox.org&#34; :where &#39;(todo)) ;; =&amp;gt; (&#34;Practice leaping tall buildings in a single bound&#34; ...)&lt;/p&gt; &#xA;&lt;p&gt;;; Return WAITING heading elements in agenda files: (org-ql-query :select &#39;element :from (org-agenda-files) :where &#39;(todo &#34;WAITING&#34;)) ;; =&amp;gt; ((headline (:raw-value &#34;Visit the moon&#34; ...) ...) ...)&lt;/p&gt; &#xA;&lt;p&gt;;; Since `element&#39; is the default for SELECT, it may be omitted: (org-ql-query :from (org-agenda-files) :where &#39;(todo &#34;WAITING&#34;)) ;; =&amp;gt; ((headline (:raw-value &#34;Visit the moon&#34; ...) ...) ...) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;**** Macro: &lt;del&gt;org-ql&lt;/del&gt; (deprecated)&lt;/p&gt; &#xA;&lt;p&gt;/Arguments:/ &lt;del&gt;(buffers-or-files query &amp;amp;key sort narrow markers action)&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Expands into a call to &lt;del&gt;org-ql-select&lt;/del&gt; with the same arguments. For convenience, arguments should be unquoted.&lt;/p&gt; &#xA;&lt;p&gt;/Note: This macro is deprecated and will be removed in v0.7./&lt;/p&gt; &#xA;&lt;p&gt;*** Custom predicates&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See: [[file:examples/defpred.org][Custom predicate tutorial]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;**** Macro: =org-ql-defpred=&lt;/p&gt; &#xA;&lt;p&gt;/Arguments:/ &lt;del&gt;(name args docstring &amp;amp;key body preambles normalizers)&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define an &lt;del&gt;org-ql&lt;/del&gt; selector predicate named &lt;del&gt;org-ql--predicate-NAME&lt;/del&gt;. &lt;del&gt;NAME&lt;/del&gt; may be a symbol or a list of symbols: if a list, the first is used as &lt;del&gt;NAME&lt;/del&gt; and the rest are aliases. &lt;del&gt;A&lt;/del&gt; function is only created for &lt;del&gt;NAME&lt;/del&gt;, not for aliases, so a normalizer should be used to replace aliases with &lt;del&gt;NAME&lt;/del&gt; in queries (keep reading).&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;ARGS&lt;/del&gt; is a &lt;del&gt;cl-defun&lt;/del&gt;-style argument list. &lt;del&gt;DOCSTRING&lt;/del&gt; is the function&#39;s docstring.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;BODY&lt;/del&gt; is the body of the predicate. It will be evaluated with point on the beginning of an Org heading and should return non-nil if the heading&#39;s entry is a match.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;PREAMBLES&lt;/del&gt; and &lt;del&gt;NORMALIZERS&lt;/del&gt; are lists of &lt;del&gt;pcase&lt;/del&gt; forms matched against Org &lt;del&gt;QL&lt;/del&gt; query sexps. They are spliced into &lt;del&gt;pcase&lt;/del&gt; forms in the definitions of the functions &lt;del&gt;org-ql--query-preamble&lt;/del&gt; and &lt;del&gt;org-ql--normalize-query&lt;/del&gt;, which see. Those functions are redefined when this macro is expanded, unless variable &lt;del&gt;org-ql-defpred-defer&lt;/del&gt; is non-nil, in which case those functions should be redefined manually after defining predicates by calling &lt;del&gt;org-ql--define-query-preamble-fn&lt;/del&gt; and &lt;del&gt;org-ql--define-normalize-query-fn&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;NORMALIZERS&lt;/del&gt; are used to normalize query expressions to standard forms. For example, when the predicate has aliases, the aliases should be replaced with predicate names using a normalizer. Also, predicate arguments may be put into a more optimal form so that the predicate has less work to do at query time. NOTE: Normalizers are applied to a query repeatedly until the query is fully normalized, so normalizers should be carefully written to avoid infinite loops.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;PREAMBLES&lt;/del&gt; refer to regular expressions which may be used to search through a buffer directly to a potential match rather than testing the predicate body on each heading. (Naming things is hard.) In each &lt;del&gt;pcase&lt;/del&gt; form in &lt;del&gt;PREAMBLES&lt;/del&gt;, the &lt;del&gt;pcase&lt;/del&gt; expression (not the pattern) should be a plist with the following keys, each value of which should be an expression which may refer to variables bound in the pattern:&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;:regexp&lt;/del&gt; Regular expression which searches directly to a potential match.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;:case-fold&lt;/del&gt; Bound to &lt;del&gt;case-fold-search&lt;/del&gt; around the regexp search.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;:query&lt;/del&gt; Expression which should replace the query expression, or &lt;del&gt;query&lt;/del&gt; if it should not be changed (e.g. if the regexp is insufficient to determine whether a heading matches, in which case the predicate&#39;s body needs to be tested on the heading). If the regexp guarantees a match, this may be simply &lt;del&gt;t&lt;/del&gt;, leaving the query expression with no work to do, which improves performance.&lt;/p&gt; &#xA;&lt;p&gt;For convenience, within the &lt;del&gt;pcase&lt;/del&gt; patterns, the symbol &lt;del&gt;predicate-names&lt;/del&gt; is a special form which is replaced with a pattern matching any of the predicate&#39;s name and aliases. For example, if &lt;del&gt;NAME&lt;/del&gt; were:&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;(heading h)&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then if &lt;del&gt;NORMALIZERS&lt;/del&gt; were:&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;((&lt;code&gt;(,predicate-names . ,args) &lt;/code&gt;(heading ,@args)))&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;It would be expanded to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;((&lt;code&gt;(,(or &#39;heading &#39;h) . ,args) &lt;/code&gt;(heading ,@args)))&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Dynamic block&lt;/p&gt; &#xA;&lt;p&gt;Org QL provides a dynamic block that lists entries in the current document matching a query. In the header, these parameters are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;:query&lt;/del&gt;: An Org QL query expression in either sexp or non-sexp form.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:columns&lt;/del&gt; A list of columns, including &lt;del&gt;heading&lt;/del&gt;, &lt;del&gt;todo&lt;/del&gt;, &lt;del&gt;property&lt;/del&gt;, &lt;del&gt;priority&lt;/del&gt;, &lt;del&gt;deadline&lt;/del&gt;, &lt;del&gt;scheduled&lt;/del&gt;, &lt;del&gt;closed&lt;/del&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Each column may also be specified as a list with the second element being a header string. For example, to abbreviate the priority column: &lt;del&gt;(priority &#34;P&#34;)&lt;/del&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;For certain columns, like =property=, arguments may be passed by specifying the column type itself as a list. For example, to display a column showing the values of a &lt;del&gt;property&lt;/del&gt; named &lt;del&gt;milestone&lt;/del&gt;, with the header being abbreviated to &lt;del&gt;M&lt;/del&gt;: &lt;del&gt;((property &#34;milestone&#34;) &#34;M&#34;)&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:sort&lt;/del&gt; One or a list of Org QL sorting methods (see &lt;del&gt;org-ql-select&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:take&lt;/del&gt; Optionally take a number of results from the front (a positive number) or the end (a negative number) of the results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:ts-format&lt;/del&gt; Optional format string used to format timestamp-based columns.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The heading column is formatted as a link to the heading (not shown in the following example).&lt;/p&gt; &#xA;&lt;p&gt;For example, this dynamic block shows the first seven headings that are to-do items with priority A or B, sorted by deadline then priority, with certain columns (including the value of the =agenda-group= property with a custom header) and timestamp format:&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: These results are edited manually because the Org links don&#39;t display well in the Info manual.&lt;/h1&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+BEGIN: org-ql :query &#34;todo: priority:A,B&#34; :columns (todo (priority &#34;P&#34;) ((property &#34;agenda-group&#34;) &#34;Group&#34;) deadline heading) :sort (deadline priority) :take 7 :ts-format &#34;%Y-%m-%d %H:%M&#34; | Todo | P | Group | Deadline | Heading | |------+---+-------+------------------+---------------------------------------| | TODO | A | | 2017-07-07 00:00 | Take over the world | | TODO | B | | 2017-07-10 00:00 | Renew membership in supervillain club | | TODO | A | plans | 2017-07-15 00:00 | Take over the universe | | TODO | B | | 2017-07-21 00:00 | Internet | | TODO | A | bills | 2017-08-01 00:00 | Spaceship lease | | TODO | A | | | Skype with president of Antarctica | | TODO | B | | | Take over Mars | ,#+END: #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Links&lt;/p&gt; &#xA;&lt;p&gt;Org QL View searches may be accessed by opening &lt;del&gt;org-ql-search:&lt;/del&gt; links in an Org file.&lt;/p&gt; &#xA;&lt;p&gt;In an Org QL View buffer, the command &lt;del&gt;org-store-link&lt;/del&gt; (i.e. &lt;del&gt;C-c l&lt;/del&gt;) stores a link to the current search, and it may be inserted into an Org buffer with the command &lt;del&gt;org-insert-link&lt;/del&gt; (&lt;del&gt;C-c C-l&lt;/del&gt;). The stored link records all of the view settings, like title, sorting, and grouping.&lt;/p&gt; &#xA;&lt;p&gt;Simple links may also be written manually in either sexp or non-sexp form, like:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org [[org-ql-search:todo:NEXT priority:A]] [[org-ql-search:(and (todo &#34;NEXT&#34;) (priority &#34;A&#34;))]] #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Tips&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Org QL View buffers can be bookmarked with Emacs bookmark commands, e.g. =C-x r m=. This also integrates with [[https://github.com/alphapapa/org-sidebar][org-sidebar]] and [[https://github.com/alphapapa/burly.el][Burly]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changelog :PROPERTIES: :TOC: ignore-children :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;/Note:/ Breaking changes may be made before version 1.0, but in the event of major changes, attempts at backward compatibility will be made with obsolescence declarations, translation of arguments, etc. Users who need stability guarantees before 1.0 may choose to use tagged stable releases.&lt;/p&gt; &#xA;&lt;p&gt;** 0.7-pre&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commands &lt;del&gt;org-ql-find&lt;/del&gt;, &lt;del&gt;org-ql-find-heading&lt;/del&gt;, and &lt;del&gt;org-ql-find-path&lt;/del&gt;, which jump to entries selected using Emacs&#39;s built-in completion facilities and Org QL queries (like &lt;del&gt;helm-org-ql&lt;/del&gt;, but doesn&#39;t require Helm.).&lt;/li&gt; &#xA; &lt;li&gt;Predicate &lt;del&gt;rifle&lt;/del&gt;, which matches an entry if each of the given arguments is found in either the entry&#39;s contents or its outline path. This provides very intuitive results, mimicing the behavior of [[https://github.com/alphapapa/org-rifle][=org-rifle=]]. In fact, the results are so useful that it&#39;s now the default predicate for plain-string query tokens. (It is also aliased to &lt;del&gt;smart&lt;/del&gt;, since it&#39;s so &#34;smart,&#34; and not all users have used =org-rifle=.)&lt;/li&gt; &#xA; &lt;li&gt;Option &lt;del&gt;org-ql-default-predicate&lt;/del&gt;, applied to plain-string query tokens (before, the &lt;del&gt;regexp&lt;/del&gt; predicate was always used, but now it may be customized).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Give more useful error message for invalid queries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Certain query predicates, when called multiple times in an &lt;del&gt;and&lt;/del&gt; sub-expression, are optimized to a single call.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;del&gt;buffer-chars-modified-tick&lt;/del&gt; instead of &lt;del&gt;buffer-modified-tick&lt;/del&gt;. (Thanks to [[https://github.com/yantar92][Ihor Radchenko]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.6.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;link&lt;/del&gt; predicate when used in an &lt;del&gt;or&lt;/del&gt;&#39;ed query. ([[https://github.com/alphapapa/org-ql/issues/279][#279]]. Thanks to [[https://github.com/telenieko][Marc Fargas]] for reporting.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.6.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In dynamic blocks, links to headings with statistics cookies were broken. (Fixes [[https://github.com/alphapapa/org-ql/issues/248][#248]]. Thanks to [[https://github.com/maikol-solis][Maikol Solis]] and [[https://github.com/yantar92][Ihor Radchenko]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Updated&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatibility with new macro names in Transient. ([[https://github.com/alphapapa/org-ql/pull/269][#269]]. Thanks to [[https://github.com/tarsius][Jonas Bernoulli]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.6&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Macro =org-ql-defpred=, used to define search predicates. (See [[file:examples/defpred.org][tutorial]].)&lt;/li&gt; &#xA; &lt;li&gt;Predicate &lt;del&gt;effort&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Predicate &lt;del&gt;heading-regexp&lt;/del&gt;, which matches regular expressions against heading text (alias: &lt;del&gt;h*&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Timestamp-related predicates now accept an optional &lt;del&gt;:with-time&lt;/del&gt; argument, which allows matching timestamps with or without times (i.e. HH:MM).&lt;/li&gt; &#xA; &lt;li&gt;Sorting methods: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;reverse&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;closed&lt;/del&gt; (Thanks to [[https://github.com/yejianye][Ryan Ye]].)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dynamic block column &lt;del&gt;closed&lt;/del&gt;. (Thanks to [[https://github.com/yejianye][Ryan Ye]].)&lt;/li&gt; &#xA; &lt;li&gt;Abbreviate filenames in bookmarks. (Thanks to [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The order in which sorting functions is applied has been reversed. For example, &lt;del&gt;:sort &#39;(todo priority date)&lt;/del&gt; now does what &lt;del&gt;:sort &#39;(date priority todo)&lt;/del&gt; did in earlier versions. (This change is made to enable the new &lt;del&gt;reverse&lt;/del&gt; sorting method.) Users who have customized =org-ql-views= will need to update the stored views&#39; sorting methods to preserve the desired sort order.&lt;/li&gt; &#xA; &lt;li&gt;Helm support (including the command =helm-org-ql=) has been moved to a separate package, =helm-org-ql=.&lt;/li&gt; &#xA; &lt;li&gt;Predicate &lt;del&gt;heading&lt;/del&gt; now matches plain strings instead of regular expressions.&lt;/li&gt; &#xA; &lt;li&gt;Update =dash= dependency, and remove dependency on obsolete =dash-functional=. (Fixes [[https://github.com/alphapapa/org-ql/issues/179][#179]], [[https://github.com/alphapapa/org-ql/issues/209][#209]]. Thanks to [[https://github.com/landakram][Mark Hudnall]], [[https://github.com/akirak][Akira Komamura]], [[https://github.com/natask][Nathanael kinfe]], [[https://github.com/benthamite][Pablo Stafforini]], [[https://github.com/jmay][Jason May]], and [[https://github.com/basil-conto][Basil L. Contovounesios]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Removed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Obsolete macro &lt;del&gt;org-ql&lt;/del&gt; (obsolete since 0.5, replaced by functions &lt;del&gt;org-ql-select&lt;/del&gt; and &lt;del&gt;org-ql-query&lt;/del&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Timestamp-related predicates called with relative-date arguments did not properly invalidate the query cache. (Fixes [[https://github.com/alphapapa/org-ql/issues/223][#223]]. Thanks to [[https://github.com/yantar92][Ihor Radchenko]] for reporting.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Predicates are now defined more cleanly with a macro (=org-ql-defpred=) that consolidates functionality related to each predicate. This will also allow users to more easily define custom predicates.&lt;/li&gt; &#xA; &lt;li&gt;Version 1.0 of library &lt;del&gt;peg&lt;/del&gt; is now required.&lt;/li&gt; &#xA; &lt;li&gt;Improvements to how arguments to timestamp-related predicates are processed.&lt;/li&gt; &#xA; &lt;li&gt;Predicate normalizers are now applied repeatedly until a query is fully normalized. (Normalizers should be written with this in mind to avoid infinite loops.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.5.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Predicate &lt;del&gt;link&lt;/del&gt;&#39;s &lt;del&gt;:target&lt;/del&gt; and &lt;del&gt;:regexp-p&lt;/del&gt; arguments. ([[https://github.com/alphapapa/org-ql/pull/220][#220]]. Thanks to [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.5.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom sorting functions could corrupt the cache, causing items to disappear after refreshing an =org-ql-search= buffer. ([[https://github.com/alphapapa/org-ql/issues/186][#186]], [[https://github.com/alphapapa/org-ql/issues/187][#187]]. Thanks to [[https://github.com/natask][Nathanael kinfe]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.5&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View dispatcher using =transient.el= (like Magit), bound to =v= in search/view buffers.&lt;/li&gt; &#xA; &lt;li&gt;Predicate =link=, which matches descriptions and targets in Org links.&lt;/li&gt; &#xA; &lt;li&gt;Predicate &lt;del&gt;tags-regexp&lt;/del&gt; (alias: &lt;del&gt;tags*&lt;/del&gt;), which matches regexps against entry tags (e.g, helpful when a tag might end in &#34;s&#34;).&lt;/li&gt; &#xA; &lt;li&gt;Emacs bookmark support: Org QL View buffers can be bookmarked with, e.g. =C-x r m= and shown with, e.g. =C-x r b=. (This also enables view restoration with [[https://github.com/alphapapa/burly.el][Burly]].)&lt;/li&gt; &#xA; &lt;li&gt;Dynamic block support.&lt;/li&gt; &#xA; &lt;li&gt;Org link support (storing and opening links to Org QL View searches).&lt;/li&gt; &#xA; &lt;li&gt;Mascot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binding to refresh search/view buffers changed to =r=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When formatting entries for Org QL View buffers, use internal function for retrieving heading tags. This improves speed by using our cache, and it removes the need for a compatibility alias for Org versions before 9.3.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Deprecated&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Macro =org-ql= is marked obsolete. It will be removed in v0.7. Functions =org-ql-select= and =org-ql-query= should be used instead. (The macro serves only to confuse with regard to quoting arguments.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Acknowledgments&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/tpeacock19][tpeacock19]] for extensive help testing new features in this version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4.9&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agenda restriction in =org-ql-block=. (Fixes [[https://github.com/alphapapa/org-ql/issues/84][#84]]. Thanks to [[https://github.com/yantar92][Ihor Radchenko]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4.8&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple sorters not preserved when refreshing views. (Fixes [[https://github.com/alphapapa/org-ql/issues/136][#136]], [[https://github.com/alphapapa/org-ql/pull/137][#137]]. Thanks to [[https://github.com/natrys][Imran Khan]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4.7&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Give a useful error if =org-ql-search-directories-files= is called without a directories argument and =org-directory= doesn&#39;t exist. (Fixes [[https://github.com/alphapapa/org-ql/issues/139][#139]]. Thanks to [[https://github.com/matthuszagh][Matt Huszagh]] for reporting.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4.6&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatibility with newer versions of the =peg= library, which removed a macro used by this package. (Fixes [[https://github.com/alphapapa/org-ql/issues/75][#75]]. Thanks to [[https://github.com/novoid][Karl Voit]] and [[https://github.com/karlicoss][@karlicoss]] for reporting.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4.5&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-case-folding predicates like &lt;del&gt;(todo)&lt;/del&gt; unnecessarily disabled case-folding for other predicates. ([[https://github.com/alphapapa/org-ql/issues/114][Issue #114]]. Thanks to [[https://github.com/bitclick][@bitclick]] for reporting.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4.4&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatibility with Org Agenda remote editing commands (some of which were broken by 0.4.3). (Fixes [[https://github.com/alphapapa/org-ql/issues/102][#102]]. Thanks to [[https://github.com/AloisJanicek][Alois Janíček]] for reporting.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4.3&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When =org-ql-view-refresh= is called, ensure the buffer is an Org QL View buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Items&#39; to-do keywords were not shown in views.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=level= predicate used with arguments in plain queries. (Thanks to [[https://github.com/akirak][Akira Komamura]] for reporting.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.4&lt;/p&gt; &#xA;&lt;p&gt;/Note:/ The next release, 0.5, may include changes which will require minor updates to written queries (e.g. a few predicates may be renamed). Users who wish to avoid those changes happening unexpectedly in their configs should avoid upgrading =org-ql= beyond 0.4 automatically, as they will be pushed to the =master= branch when ready.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Commands&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;helm-org-ql-views&lt;/del&gt;, which shows one of &lt;del&gt;org-ql-views&lt;/del&gt; selected with Helm.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;org-ql-search&lt;/del&gt; can search files in &lt;del&gt;org-directory&lt;/del&gt;; customization options are available in the &lt;del&gt;org-ql-search&lt;/del&gt; group.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;org-ql-view-refresh&lt;/del&gt; can be called with a prefix argument to adjust search parameters.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Queries&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Negation of terms in plain queries using &lt;del&gt;!&lt;/del&gt;. For example, &lt;del&gt;tags:space !moon&lt;/del&gt; to exclude entries which contain &lt;del&gt;moon&lt;/del&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Predicates =outline-path= (alias =olp=) and =outline-path-segment= (alias =olps=).&lt;/li&gt; &#xA;   &lt;li&gt;Predicate &lt;del&gt;src&lt;/del&gt;, which matches Org Babel source blocks.&lt;/li&gt; &#xA;   &lt;li&gt;Predicates =parent= and =ancestors=. (Thanks to [[https://github.com/mm--][Josh Moller-Mara]].)&lt;/li&gt; &#xA;   &lt;li&gt;Alias =h= for =heading= predicate.&lt;/li&gt; &#xA;   &lt;li&gt;Alias =r= for =regexp= predicate. (Thanks to [[https://github.com/tumashu][Feng Shu]].)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Info manual.&lt;/li&gt; &#xA; &lt;li&gt;Function &lt;del&gt;helm-org-ql-source&lt;/del&gt;, which returns a Helm source that searches given buffers/files with &lt;del&gt;helm-org-ql&lt;/del&gt;. It can be used for custom Helm commands that search certain files.&lt;/li&gt; &#xA; &lt;li&gt;Display a message when views are refreshed. (Thanks to [[https://github.com/xeijin][xeijin]].)&lt;/li&gt; &#xA; &lt;li&gt;Respect Org Agenda restriction in =org-ql-block=. (Thanks to [[https://github.com/yantar92][Ihor Radchenko]] for reporting.)&lt;/li&gt; &#xA; &lt;li&gt;Option =org-ql-view-sidebar-sort-views=.&lt;/li&gt; &#xA; &lt;li&gt;Mouseover =help-echo= text for =org-ql-views= default view names.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Dangling tasks&#34; default view in =org-ql-views=. (Users who have modified =org-ql-views= from the default will not see the new view unless they copy it into their config.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some default =org-ql-view= views (users who have modified =org-ql-views= from the default will not see the new views unless they copy them into their config): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rename some views.&lt;/li&gt; &#xA;   &lt;li&gt;&#34;Stuck projects&#34; view (now uses =descendants= instead of =children=, which is more useful.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inherit file tags when =org-tag-inheritance= is enabled. (Fixes [[https://github.com/alphapapa/org-ql/issues/55][#55]]. Thanks to [[https://github.com/mskorzhinskiy][Mikhail Skorzhinskiy]].)&lt;/li&gt; &#xA; &lt;li&gt;Call =helm-make-source= directly instead of using =helm-build-sync-source= macro. (Fixes [[https://github.com/alphapapa/org-ql/issues/60][#60]]. Thanks to [[https://github.com/matthuszagh][Matt Huszagh]] for reporting.)&lt;/li&gt; &#xA; &lt;li&gt;Search/view buffers now always end with a newline, which prevents side-scrolling of the window when calling =end-of-buffer=.&lt;/li&gt; &#xA; &lt;li&gt;Face for done to-do keywords in =org-ql-view= buffers. (Thanks to [[https://github.com/dsdshcym][Yiming Chen]].)&lt;/li&gt; &#xA; &lt;li&gt;Make view buffers read-only. (Fixes [[https://github.com/alphapapa/org-ql/issues/72][#72]]. Thanks to [[https://github.com/xeijin][xeijin]].)&lt;/li&gt; &#xA; &lt;li&gt;Sorting with single sorter specified as an atom. (Thanks to [[https://github.com/legalnonsense][Jeff Filipovits]].)&lt;/li&gt; &#xA; &lt;li&gt;Autoload for =org-ql-block= agenda block. (Fixes [[https://github.com/alphapapa/org-ql/issues/53][#53]]. Thanks to reports from [[https://github.com/gcantieni][Gus Cantieni]], [[https://github.com/novoid][Karl Voit]], [[https://github.com/rieje][rieje]], and [[https://github.com/jakejx][Jake | Junxuan]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added generic node data cache to speed up recursive, tree-based queries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.3.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In =org-ql-search=, accept symbol as &lt;del&gt;:super-groups&lt;/del&gt; argument.&lt;/li&gt; &#xA; &lt;li&gt;In the =This week= and =Next week= default =org-ql-views= views, set timestamps for beginning-of-week to 00:00:00 and end-of-week to 23:59:59.&lt;/li&gt; &#xA; &lt;li&gt;Plain quoted-phrases in non-sexp queries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.3.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compatibility with Org 9.2. Thanks to [[https://github.com/leungbk][Brian Leung]].&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.3&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternative, non-sexp query syntax for commands =org-ql-search= and =helm-org-ql=. See [[#non-sexp-query-syntax][documentation]].&lt;/li&gt; &#xA; &lt;li&gt;Command =helm-org-ql=.&lt;/li&gt; &#xA; &lt;li&gt;Command =org-ql-sparse-tree=, like =org-sparse-tree= for =org-ql= queries. (Thanks to [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; &#xA; &lt;li&gt;Command =org-ql-view-sidebar=.&lt;/li&gt; &#xA; &lt;li&gt;Per-buffer, per-heading tag caching, which increases the speed of tags-related queries by 6-7x.&lt;/li&gt; &#xA; &lt;li&gt;More tags-related predicates and aliases: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For inherited tags: =tags-inherited=, =inherited-tags=, =tags-i=, =itags=.&lt;/li&gt; &#xA;   &lt;li&gt;For heading-local tags: =tags-local=, =local-tags=, =tags-l=, =ltags=.&lt;/li&gt; &#xA;   &lt;li&gt;=tags-all=, =tags&amp;amp;=: Matches all given tags using boolean =AND= (rather than boolean =OR=, which the =tags= predicate uses).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Variable =org-ql-block-header=, which overrides the default header in =org-ql-block= agenda blocks.&lt;/li&gt; &#xA; &lt;li&gt;Predicate =(path)=.&lt;/li&gt; &#xA; &lt;li&gt;Option =org-ql-views= may now be customized in a guided, structured way with the customization UI (e.g. =M-x customize-option RET org-ql-views RET=, or press =c= in the =org-ql-view-sidebar= buffer).&lt;/li&gt; &#xA; &lt;li&gt;Enable more Org Agenda commands in =org-ql-view= buffers (e.g. setting deadlines and scheduling). (Fixes [[https://github.com/alphapapa/org-ql/issues/35][#35]]. Thanks to [[https://github.com/mz-pdm][Milan Zamazal]] and [[https://github.com/mskorzhinskiy][Mikhail Skorzhinskii]].)&lt;/li&gt; &#xA; &lt;li&gt;Function =org-ql-select=&#39;s =buffers-files= argument can be a function which returns a list of buffers and/or files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Predicate =heading= now accepts multiple regexps, which are matched with boolean =AND=.&lt;/li&gt; &#xA; &lt;li&gt;Predicate =regexp= now matches its regexp arguments with boolean =AND=.&lt;/li&gt; &#xA; &lt;li&gt;Package =org-super-agenda= is now a dependency. This removes the need for awkward code to handle the case where it&#39;s not installed, and makes grouping features always available. Of course, the global minor mode =org-super-agenda-mode= is not activated by =org-ql=, so no behavior is changed in Org Agenda or =org-ql=; it only means that commands like =org-ql-search= will always provide grouping when called with the appropriate arguments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Removed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Macro =org-ql-agenda=. Instead, use function =org-ql-search=. See also command =org-ql-view=, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Predicate =heading= now matches only against heading text, i.e. not including tags at the end of the line, to-do keyword, etc.&lt;/li&gt; &#xA; &lt;li&gt;Predicate =todo= now matches case-sensitively, avoiding non-todo-keyword matches (e.g. a heading which begins =Waiting on= will no longer match for a todo keyword =WAITING=).&lt;/li&gt; &#xA; &lt;li&gt;Interactive completion in =org-ql-search=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refactored code from file =org-ql-agenda.el= into files =org-ql-search.el= and =org-ql-view.el=. Function and variable names have been changed accordingly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.2.3&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Priority queries could fail to match headings whose to-do keywords had non-alphabetic characters, like =TO-READ=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.2.2&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=(deadline auto)= selector matched entries whose deadlines had a warning period that had not yet been entered (=org-deadline-warning-days= too soon).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.2.1&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=(descendants)= selector matched against parent heading instead of only descendants.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.2 :PROPERTIES: :ID: 67be09f9-e959-4333-9be2-93ad8f458fbe :END:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Added&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Function &lt;del&gt;org-ql-query&lt;/del&gt;, like &lt;del&gt;org-ql-select&lt;/del&gt; but with arguments named more like a SQL query.&lt;/li&gt; &#xA; &lt;li&gt;Bare strings like &lt;del&gt;&#34;string&#34;&lt;/del&gt; can be used in queries, which are converted to &lt;del&gt;(regexp &#34;string&#34;)&lt;/del&gt; automatically.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;(regexp)&lt;/del&gt; accepts multiple regexps to test.&lt;/li&gt; &#xA; &lt;li&gt;Macro &lt;del&gt;org-ql&lt;/del&gt; and functions &lt;del&gt;org-ql-query&lt;/del&gt; and &lt;del&gt;org-ql-select&lt;/del&gt; now also accept a comparator function in their &lt;del&gt;:sort&lt;/del&gt; argument.&lt;/li&gt; &#xA; &lt;li&gt;Function &lt;del&gt;org-ql-block&lt;/del&gt;, which works as an Org Agenda series/composite/block command, usable in custom agenda commands defined in variable &lt;del&gt;org-agenda-custom-commands&lt;/del&gt;. (Inspired by [[https://github.com/pestctrl/emacs-config/blob/84c557982a860e86d6f67976a82ea776a7bd2c7a/config-org-new.org#my-own-agenda-renderer][Benson Chu&#39;s config]].)&lt;/li&gt; &#xA; &lt;li&gt;Function &lt;del&gt;org-ql-agenda--agenda&lt;/del&gt; optionally takes a list of entries as an argument.&lt;/li&gt; &#xA; &lt;li&gt;Selectors &lt;del&gt;ts-a&lt;/del&gt; and &lt;del&gt;ts-i&lt;/del&gt;, aliases for &lt;del&gt;ts-active&lt;/del&gt; and &lt;del&gt;ts-inactive&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;ts&lt;/del&gt; now accepts a &lt;del&gt;:type&lt;/del&gt; argument.&lt;/li&gt; &#xA; &lt;li&gt;Face =org-ql-agenda-due-date=.&lt;/li&gt; &#xA; &lt;li&gt;Selectors &lt;del&gt;(children)&lt;/del&gt; and &lt;del&gt;(descendants)&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Function &lt;del&gt;org-ql-search&lt;/del&gt; and macro &lt;del&gt;org-ql-agenda&lt;/del&gt; accept a &lt;del&gt;:title&lt;/del&gt; argument, which is displayed in the header.&lt;/li&gt; &#xA; &lt;li&gt;Command &lt;del&gt;org-ql-search&lt;/del&gt; offers global &lt;del&gt;org-super-agenda-groups&lt;/del&gt; in completion.&lt;/li&gt; &#xA; &lt;li&gt;Customization group &lt;del&gt;org-ql&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Command &lt;del&gt;org-ql-view&lt;/del&gt;, which displays views saved to variable &lt;del&gt;org-ql-views&lt;/del&gt;, which can be saved from &lt;del&gt;org-ql-search&lt;/del&gt; buffers with command &lt;del&gt;org-ql-search-save&lt;/del&gt;, which is bound to =C-x C-s= in view buffers.&lt;/li&gt; &#xA; &lt;li&gt;Variable &lt;del&gt;org-ql-view-map&lt;/del&gt;, active in view buffers displayed by &lt;del&gt;org-ql-search&lt;/del&gt;, &lt;del&gt;org-ql-agenda&lt;/del&gt;, and &lt;del&gt;org-ql-view&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;=random= sort method.&lt;/li&gt; &#xA; &lt;li&gt;Save position when refreshing search buffers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Changed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Function &lt;del&gt;org-ql-query&lt;/del&gt; renamed to &lt;del&gt;org-ql-select&lt;/del&gt;. &lt;del&gt;org-ql-query&lt;/del&gt; now refers to a new function.&lt;/li&gt; &#xA; &lt;li&gt;Macro &lt;del&gt;org-ql&lt;/del&gt; no longer accepts a &lt;del&gt;:markers&lt;/del&gt; argument. Instead, use argument &lt;del&gt;:action element-with-markers&lt;/del&gt;. See function &lt;del&gt;org-ql-select&lt;/del&gt;, which &lt;del&gt;org-ql&lt;/del&gt; calls.&lt;/li&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;(todo)&lt;/del&gt; no longer matches &#34;done&#34; keywords when used without arguments (i.e. the ones in variable &lt;del&gt;org-done-keywords&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Overhauled date/time-based predicates. See documentation for new argument signatures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Removed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Selector &lt;del&gt;(date)&lt;/del&gt;, replaced by &lt;del&gt;(ts)&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Fixed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handle date ranges in date-based selectors. (Thanks to [[https://github.com/codygman][Cody Goodman]], [[https://github.com/swflint][Samuel W. Flint]], and [[https://github.com/vikasrawal][Vikas Rawal]].)&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t overwrite bindings in =org-agenda-mode-map=.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t search buffers without headings, and show a message if the user attempts it.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t search hidden/special buffers.&lt;/li&gt; &#xA; &lt;li&gt;Properly accept arbitrary sort functions in =org-ql-select=, etc. (Fixes [[https://github.com/alphapapa/org-ql/issues/37][#37]]. Thanks to [[https://github.com/mz-pdm][Milan Zamazal]].)&lt;/li&gt; &#xA; &lt;li&gt;Planning-line-related predicates searched too far into entries.&lt;/li&gt; &#xA; &lt;li&gt;Add autoloads. (Fixes [[https://github.com/alphapapa/org-ql/pull/36/files#][#36]]. Thanks to [[https://github.com/akirak][Akira Komamura]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Compatibility&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixes for compatibility with Org 9.2. (Thanks to [[https://github.com/ataias][Ataias Pereira Reis]] and [[https://github.com/dakra][Daniel Kraus]].)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Internal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimizations for some query selectors, e.g. =regexp= and =todo=. These can provide a significant improvement for some queries. See benchmarks in [[file:notes.org][notes.org]].&lt;/li&gt; &#xA; &lt;li&gt;Library [[https://github.com/alphapapa/ts.el][ts]] is now used for parsing and comparing timestamps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 0.1&lt;/p&gt; &#xA;&lt;p&gt;First tagged release.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notes :PROPERTIES: :TOC: :ignore this :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Comparison with Org Agenda searches&lt;/p&gt; &#xA;&lt;p&gt;Of course, queries like these can already be written with Org Agenda searches, but the syntax can be complex. For example, this query would be difficult to write in a standard Org Agenda search, because it matches against a to-do keyword /and/ a plain-text search. As described in the [[https://orgmode.org/worg/org-tutorials/advanced-searching.html#combining-metadata-and-full-text-queries][advanced searching tutorial]], it would require using &lt;del&gt;org-search-view&lt;/del&gt; with a query with specific regular expression syntax, like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE +lisp +{^*+\s-+TO-READ\s-} #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;But with =org-ql-search=, you would write a query like =lisp todo:TO-READ=, or in Lisp syntax, &lt;del&gt;(and &#34;lisp&#34; (todo &#34;TO-READ&#34;))&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** org-sidebar&lt;/p&gt; &#xA;&lt;p&gt;This package is used by [[https://github.com/alphapapa/org-sidebar][org-sidebar]], which presents a customizable agenda-like view in a sidebar window.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License :PROPERTIES: :TOC: :ignore this :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;GPLv3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COMMENT Code :noexport: :PROPERTIES: :TOC: :ignore this :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;The COMMENT keyword prevents GitHub&#39;s renderer from showing this entry.&lt;/h1&gt; &#xA;&lt;p&gt;Code used to update this document.&lt;/p&gt; &#xA;&lt;p&gt;** Predicates&lt;/p&gt; &#xA;&lt;p&gt;Generates the predicate subtree.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp :results silent :exports code (defun org-ql--readme-update-predicates () &#34;Update predicate subtree in current document.&#34; (interactive) (org-ql--readme-replace-node &#39;(&#34;Usage&#34; &#34;Queries&#34; &#34;Predicates&#34;) (org-ql--readme-predicate-list)))&lt;/p&gt; &#xA;&lt;p&gt;(defun org-ql--readme-replace-node (outline-path string) &#34;Replace contents of node at OUTLINE-PATH with STRING.&#34; (org-with-wide-buffer (-let* ((subtree-marker (org-find-olp outline-path t)) ((_headline element) (progn (goto-char subtree-marker) (org-element-headline-parser (point-max)))) ((&amp;amp;plist :contents-begin beg :contents-end end) element)) (goto-char beg) (delete-region (point) (1- end)) (insert string &#34;\n&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;(defun org-ql--readme-predicate-list () &#34;Return an Org list string documenting predicates.&#34; (concat (unpackaged/docstring-to-org &#34;Arguments are listed next to predicate names, where applicable.&lt;/p&gt; &#xA;&lt;p&gt;Note that, for convenience, standard numeric comparator function symbols (&lt;code&gt;&amp;lt;&#39;, &lt;/code&gt;=&#39;, etc.) do not need to be quoted when passed as an argument to these predicates. The resemblance to infix notation is coincidental. See examples in documentation.\n\n&#34;) (s-join &#34;\n&#34; (-&amp;gt;&amp;gt; org-ql-predicates (--sort (string&amp;lt; (symbol-name (plist-get it :name)) (symbol-name (plist-get other :name)))) (--map (-let* (((&amp;amp;plist :name name :docstring docstring :fn fn :args args) it) (args (-&amp;gt;&amp;gt; args (--replace-where (listp it) (car it)) (--replace-where (eq &#39;&amp;amp;rest it) &#39;&amp;amp;optional)))) (if docstring (progn (setq docstring (s-replace &#34;\n&#34; &#34; &#34; docstring)) (format &#34;+ &lt;del&gt;%s%s&lt;/del&gt; :: %s&#34; name (if args (format &#34; %s&#34; args) &#34;&#34;) (unpackaged/docstring-to-org docstring))) (when (s-prefix? &#34;org-ql-&#34; (symbol-name name)) (warn &#34;No docstring for: %s&#34; name)) nil))) -non-nil)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** TODO Use async&lt;/p&gt; &#xA;&lt;p&gt;If &lt;del&gt;org-ql&lt;/del&gt; is loaded byte-compiled, the argument lists are not named properly (not sure why, as &lt;del&gt;help-function-arglist&lt;/del&gt; is supposed to handle that). We could run the function in another Emacs process with &lt;del&gt;async&lt;/del&gt; to avoid this.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COMMENT Export setup :noexport: :PROPERTIES: :TOC: :ignore this :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Copied from org-super-agenda&#39;s readme, in which much was borrowed from Org&#39;s =org-manual.org=.&lt;/h1&gt; &#xA;&lt;p&gt;#+OPTIONS: broken-links:t *:t&lt;/p&gt; &#xA;&lt;p&gt;** Info export options&lt;/p&gt; &#xA;&lt;p&gt;#+TEXINFO_DIR_CATEGORY: Emacs #+TEXINFO_DIR_TITLE: Org QL: (org-ql) #+TEXINFO_DIR_DESC: Query language, search commands, and saved views for Org files&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: We could use these, but that causes a pointless error, &#34;org-compile-file: File &#34;..README.info&#34; wasn&#39;t produced...&#34;, so we just rename the files in the after-save-hook instead.&lt;/h1&gt; &#xA;&lt;h1&gt;#+TEXINFO_FILENAME: org-ql.info&lt;/h1&gt; &#xA;&lt;h1&gt;#+EXPORT_FILE_NAME: org-ql.texi&lt;/h1&gt; &#xA;&lt;p&gt;** File-local variables&lt;/p&gt; &#xA;&lt;h1&gt;NOTE: Setting org-comment-string buffer-locally is a nasty hack to work around GitHub&#39;s org-ruby&#39;s HTML rendering, which does not respect noexport tags. The only way to hide this tree from its output is to use the COMMENT keyword, but that prevents Org from processing the export options declared in it. So since these file-local variables don&#39;t affect org-ruby, wet set org-comment-string to an unused keyword, which prevents Org from deleting this tree from the export buffer, which allows it to find the export options in it. And since org-export does respect the noexport tag, the tree is excluded from the info page.&lt;/h1&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;before-save-hook: org-make-toc&lt;/h1&gt; &#xA;&lt;h1&gt;after-save-hook: (lambda nil (when (and (require &#39;ox-texinfo nil t) (org-texinfo-export-to-info)) (delete-file &#34;README.texi&#34;) (rename-file &#34;README.info&#34; &#34;org-ql.info&#34; t)))&lt;/h1&gt; &#xA;&lt;h1&gt;org-export-initial-scope: buffer&lt;/h1&gt; &#xA;&lt;h1&gt;org-comment-string: &#34;NOTCOMMENT&#34;&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>akicho8/string-inflection</title>
    <updated>2022-07-01T01:40:20Z</updated>
    <id>tag:github.com,2022-07-01:/akicho8/string-inflection</id>
    <link href="https://github.com/akicho8/string-inflection" rel="alternate"></link>
    <summary type="html">&lt;p&gt;underscore -&gt; UPCASE -&gt; CamelCase conversion of names&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;underscore -&amp;gt; UPCASE -&amp;gt; CamelCase conversion of names&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://travis-ci.org/akicho8/string-inflection&#34;&gt;&lt;img src=&#34;https://travis-ci.org/akicho8/string-inflection.svg?branch=master&#34;&gt;&lt;/a&gt; #+html: &lt;br&gt; #+html: &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/akicho8/string-inflection/blob/master/HISTORY.org][Change History]]&lt;/p&gt; &#xA;&lt;p&gt;** Configuration Examples&lt;/p&gt; &#xA;&lt;p&gt;*** Example 1&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (require &#39;string-inflection)&lt;/p&gt; &#xA;&lt;p&gt;;; C-q C-u is similar to the keybinding used by Vz Editor. (global-unset-key (kbd &#34;C-q&#34;)) (global-set-key (kbd &#34;C-q C-u&#34;) &#39;my-string-inflection-cycle-auto)&lt;/p&gt; &#xA;&lt;p&gt;(defun my-string-inflection-cycle-auto () &#34;switching by major-mode&#34; (interactive) (cond ;; for emacs-lisp-mode ((eq major-mode &#39;emacs-lisp-mode) (string-inflection-all-cycle)) ;; for python ((eq major-mode &#39;python-mode) (string-inflection-python-style-cycle)) ;; for java ((eq major-mode &#39;java-mode) (string-inflection-java-style-cycle)) (t ;; default (string-inflection-ruby-style-cycle)))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Example 2&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (require &#39;string-inflection)&lt;/p&gt; &#xA;&lt;p&gt;;; default (global-set-key (kbd &#34;C-c C-u&#34;) &#39;string-inflection-all-cycle)&lt;/p&gt; &#xA;&lt;p&gt;;; for ruby (add-hook &#39;ruby-mode-hook &#39;(lambda () (local-set-key (kbd &#34;C-c C-u&#34;) &#39;string-inflection-ruby-style-cycle)))&lt;/p&gt; &#xA;&lt;p&gt;;; for java (add-hook &#39;java-mode-hook &#39;(lambda () (local-set-key (kbd &#34;C-c C-u&#34;) &#39;string-inflection-java-style-cycle)))&lt;/p&gt; &#xA;&lt;p&gt;;; for python (add-hook &#39;python-mode-hook &#39;(lambda () (local-set-key (kbd &#34;C-c C-u&#34;) &#39;string-inflection-python-style-cycle)))&lt;/p&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** How to Use&lt;/p&gt; &#xA;&lt;p&gt;For each of the following, place the cursor at =emacs_lisp= and type =C-q C-u=, the results will be as follows:&lt;/p&gt; &#xA;&lt;p&gt;In the case of =string-inflection-ruby-style-cycle=&lt;/p&gt; &#xA;&lt;p&gt;: emacs_lisp =&amp;gt; EMACS_LISP =&amp;gt; EmacsLisp =&amp;gt; emacs_lisp&lt;/p&gt; &#xA;&lt;p&gt;In the case of =string-inflection-python-style-cycle=&lt;/p&gt; &#xA;&lt;p&gt;: emacs_lisp =&amp;gt; EMACS_LISP =&amp;gt; EmacsLisp =&amp;gt; emacs_lisp&lt;/p&gt; &#xA;&lt;p&gt;In the case of =string-inflection-java-style-cycle=&lt;/p&gt; &#xA;&lt;p&gt;: emacsLisp =&amp;gt; EMACS_LISP =&amp;gt; EmacsLisp =&amp;gt; emacsLisp&lt;/p&gt; &#xA;&lt;p&gt;In the case of =string-inflection-all-cycle=&lt;/p&gt; &#xA;&lt;p&gt;: emacs_lisp =&amp;gt; EMACS_LISP =&amp;gt; EmacsLisp =&amp;gt; emacsLisp =&amp;gt; emacs-lisp =&amp;gt; Emacs_Lisp =&amp;gt; emacs_lisp&lt;/p&gt; &#xA;&lt;p&gt;It is recommended that the major mode functions are used instead of =string-inflection-all-cycle=.&lt;/p&gt; &#xA;&lt;p&gt;** Standalone Functions&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (string-inflection-underscore-function &#34;EmacsLisp&#34;) ; =&amp;gt; &#34;emacs_lisp&#34; (string-inflection-pascal-case-function &#34;emacs_lisp&#34;) ; =&amp;gt; &#34;EmacsLisp&#34; (string-inflection-camelcase-function &#34;emacs_lisp&#34;) ; =&amp;gt; &#34;emacsLisp&#34; (string-inflection-upcase-function &#34;emacs_lisp&#34;) ; =&amp;gt; &#34;EMACS_LISP&#34; (string-inflection-kebab-case-function &#34;emacs_lisp&#34;) ; =&amp;gt; &#34;emacs-lisp&#34; (string-inflection-capital-underscore-function &#34;emacs_lisp&#34;) ; =&amp;gt; &#34;Emacs_Lisp&#34;&lt;/p&gt; &#xA;&lt;p&gt;(string-inflection-pascal-case-p &#34;EmacsLisp&#34;) ; =&amp;gt; t (string-inflection-pascal-case-p &#34;emacs_lisp&#34;) ; =&amp;gt; nil ; etc... #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Region usage&lt;/p&gt; &#xA;&lt;p&gt;You can also use this library to convert a region&#39;s casing.&lt;/p&gt; &#xA;&lt;p&gt;For that, simply select a region and perform =M-x string-inflection-kebab-case= (or any such other function).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-straight/xref</title>
    <updated>2022-07-01T01:40:20Z</updated>
    <id>tag:github.com,2022-07-01:/emacs-straight/xref</id>
    <link href="https://github.com/emacs-straight/xref" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of the xref package from GNU ELPA, current as of 2022-07-01&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>