<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-05T01:31:23Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>copilot-emacs/copilot.el</title>
    <updated>2024-01-05T01:31:23Z</updated>
    <id>tag:github.com,2024-01-05:/copilot-emacs/copilot.el</id>
    <link href="https://github.com/copilot-emacs/copilot.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial Copilot plugin for Emacs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot.el&lt;/h1&gt; &#xA;&lt;p&gt;Copilot.el is an Emacs plugin for GitHub Copilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This plugin is unofficial and based on binaries provided by &lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;copilot.vim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need access to &lt;a href=&#34;https://github.com/features/copilot&#34;&gt;GitHub Copilot&lt;/a&gt; to use this plugin.&lt;/p&gt; &#xA;&lt;p&gt;Current maintainer: &lt;a href=&#34;https://github.com/emil-vdw&#34;&gt;@emil-vdw&lt;/a&gt;, &lt;a href=&#34;https://github.com/rakotomandimby&#34;&gt;@rakotomandimby&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Retired maintainer: &lt;a href=&#34;https://github.com/zerolfx&#34;&gt;@zerolfx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure your Emacs version is at least 27, and the dependency package &lt;code&gt;editorconfig&lt;/code&gt; (&lt;a href=&#34;https://melpa.org/#/editorconfig&#34;&gt;melpa&lt;/a&gt;) is also installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; v16+. (You can specify the path to &lt;code&gt;node&lt;/code&gt; executable by setting &lt;code&gt;copilot-node-executable&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup &lt;code&gt;copilot.el&lt;/code&gt; as described in the next section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login to Copilot by &lt;code&gt;M-x copilot-login&lt;/code&gt;. You can also check the status by &lt;code&gt;M-x copilot-diagnose&lt;/code&gt; (&lt;code&gt;NotAuthorized&lt;/code&gt; means you don&#39;t have a valid subscription).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Example for Doom Emacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Add package definition to &lt;code&gt;~/.doom.d/packages.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package! copilot&#xA;  :recipe (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;*.el&#34; &#34;dist&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Configure copilot in &lt;code&gt;~/.doom.d/config.el&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; accept completion from copilot and fallback to company&#xA;(use-package! copilot&#xA;  :hook (prog-mode . copilot-mode)&#xA;  :bind (:map copilot-completion-map&#xA;              (&#34;&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion)&#xA;              (&#34;TAB&#34; . &#39;copilot-accept-completion)&#xA;              (&#34;C-TAB&#34; . &#39;copilot-accept-completion-by-word)&#xA;              (&#34;C-&amp;lt;tab&amp;gt;&#34; . &#39;copilot-accept-completion-by-word)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Strongly recommend to enable &lt;code&gt;childframe&lt;/code&gt; option in &lt;code&gt;company&lt;/code&gt; module (&lt;code&gt;(company +childframe)&lt;/code&gt;) to prevent overlay conflict.&lt;/p&gt; &#xA; &lt;p&gt;If pressing tab to complete sometimes doesn&#39;t work you might want to bind completion to another key or try:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(after! (evil copilot)&#xA;  ;; Define the custom function that either accepts the completion or does the default behavior&#xA;  (defun my/copilot-tab-or-default ()&#xA;    (interactive)&#xA;    (if (and (bound-and-true-p copilot-mode)&#xA;             ;; Add any other conditions to check for active copilot suggestions if necessary&#xA;             )&#xA;        (copilot-accept-completion)&#xA;      (evil-insert 1))) ; Default action to insert a tab. Adjust as needed.&#xA;&#xA;  ;; Bind the custom function to &amp;lt;tab&amp;gt; in Evil&#39;s insert state&#xA;  (evil-define-key &#39;insert &#39;global (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;my/copilot-tab-or-default))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Example for Spacemacs&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;p&gt;Edit your &lt;code&gt;~/.spacemacs&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; ===================&#xA;;; dotspacemacs/layers&#xA;;; ===================&#xA;&#xA;;; add or uncomment the auto-completion layer&#xA;dotspacemacs-configuration-layers&#xA;&#39;(&#xA;  ...&#xA;  auto-completion&#xA;  ...&#xA; )&#xA;&#xA;;; add copilot.el to additional packages&#xA;dotspacemacs-additional-packages&#xA; &#39;((copilot :location (recipe&#xA;                       :fetcher github&#xA;                       :repo &#34;zerolfx/copilot.el&#34;&#xA;                       :files (&#34;*.el&#34; &#34;dist&#34;))))&#xA;&#xA;;; ========================&#xA;;; dotspacemacs/user-config&#xA;;; ========================&#xA;&#xA;;; accept completion from copilot and fallback to company&#xA;&#xA;(with-eval-after-load &#39;company&#xA;  ;; disable inline previews&#xA;  (delq &#39;company-preview-if-just-one-frontend company-frontends))&#xA;  &#xA;(with-eval-after-load &#39;copilot&#xA;  (define-key copilot-completion-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion)&#xA;  (define-key copilot-completion-map (kbd &#34;TAB&#34;) &#39;copilot-accept-completion)&#xA;  (define-key copilot-completion-map (kbd &#34;C-TAB&#34;) &#39;copilot-accept-completion-by-word)&#xA;  (define-key copilot-completion-map (kbd &#34;C-&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion-by-word))&#xA;&#xA;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;General Configurations&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;h4&gt;1. Load &lt;code&gt;copilot.el&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Load via &lt;code&gt;straight.el&lt;/code&gt; or &lt;code&gt;quelpa&lt;/code&gt; (recommended)&lt;/h5&gt; &#xA; &lt;h6&gt;&lt;code&gt;straight.el&lt;/code&gt;:&lt;/h6&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :straight (:host github :repo &#34;zerolfx/copilot.el&#34; :files (&#34;dist&#34; &#34;*.el&#34;))&#xA;  :ensure t)&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h6&gt;&lt;code&gt;quelpa&lt;/code&gt; + &lt;code&gt;quelpa-use-package&lt;/code&gt;:&lt;/h6&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package copilot&#xA;  :quelpa (copilot :fetcher github&#xA;                   :repo &#34;zerolfx/copilot.el&#34;&#xA;                   :branch &#34;main&#34;&#xA;                   :files (&#34;dist&#34; &#34;*.el&#34;)))&#xA;;; you can utilize :map :hook and :config to customize copilot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;Option 2: Load manually&lt;/h5&gt; &#xA; &lt;p&gt;Please make sure you have these dependencies installed (available in ELPA/MELPA):&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;dash&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;editorconfig&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;After installing those, clone this repository then insert the below snippet into your config file.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path &#34;/path/to/copilot.el&#34;)&#xA;(require &#39;copilot)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;2. Configure completion&lt;/h4&gt; &#xA; &lt;h5&gt;Option 1: Use &lt;code&gt;copilot-mode&lt;/code&gt; to automatically provide completions&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;prog-mode-hook &#39;copilot-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To customize the behavior of &lt;code&gt;copilot-mode&lt;/code&gt;, please check &lt;code&gt;copilot-enable-predicates&lt;/code&gt; and &lt;code&gt;copilot-disable-predicates&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h5&gt;Option 2: Manually provide completions&lt;/h5&gt; &#xA; &lt;p&gt;You need to bind &lt;code&gt;copilot-complete&lt;/code&gt; to some key and call &lt;code&gt;copilot-clear-overlay&lt;/code&gt; inside &lt;code&gt;post-command-hook&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;h4&gt;3. Configure completion acceptation&lt;/h4&gt; &#xA; &lt;p&gt;Use tab to accept completions (you may also want to bind &lt;code&gt;copilot-accept-completion-by-word&lt;/code&gt; to some key):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key copilot-completion-map (kbd &#34;&amp;lt;tab&amp;gt;&#34;) &#39;copilot-accept-completion)&#xA;(define-key copilot-completion-map (kbd &#34;TAB&#34;) &#39;copilot-accept-completion)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Programming language detection&lt;/h3&gt; &#xA;&lt;p&gt;Copilot.el detects the programming language of a buffer based on the major-mode name, stripping the &lt;code&gt;-mode&lt;/code&gt; part. Resulting languageId should match table &lt;a href=&#34;https://code.visualstudio.com/docs/languages/identifiers#_known-language-identifiers&#34;&gt;here&lt;/a&gt;. You can add unusual major-mode mappings to &lt;code&gt;copilot-major-mode-alist&lt;/code&gt;. Without the proper language set suggestions may be of poorer quality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;copilot-major-mode-alist &#39;(&#34;enh-ruby&#34; . &#34;ruby&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-diagnose&lt;/h4&gt; &#xA;&lt;p&gt;Check the current status of the plugin. Also you can check logs in the &lt;code&gt;*copilot events*&lt;/code&gt; buffer and stderr output in the &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-login&lt;/h4&gt; &#xA;&lt;p&gt;Login to GitHub, required for using the plugin.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-mode&lt;/h4&gt; &#xA;&lt;p&gt;Enable/disable copilot mode.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-complete&lt;/h4&gt; &#xA;&lt;p&gt;Try to complete at the current point.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion&lt;/h4&gt; &#xA;&lt;p&gt;Accept the current completion.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay&lt;/h4&gt; &#xA;&lt;p&gt;Clear copilot overlay in the current buffer.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-accept-completion-by-line / copilot-accept-completion-by-word&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;copilot-accept-completion&lt;/code&gt;, but accept the completion by line or word. You can use prefix argument to specify the number of lines or words to accept.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-next-completion / copilot-previous-completion&lt;/h4&gt; &#xA;&lt;p&gt;Cycle through the completion list.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-logout&lt;/h4&gt; &#xA;&lt;p&gt;Logout from GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h4&gt;copilot-node-executable&lt;/h4&gt; &#xA;&lt;p&gt;The executable path of Node.js.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-idle-delay&lt;/h4&gt; &#xA;&lt;p&gt;Time in seconds to wait before starting completion (default to 0). Note Copilot itself has a ~100ms delay because of network communication.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-predicates / copilot-disable-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable/disable triggering Copilot in &lt;code&gt;copilot-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-enable-display-predicates / copilot-disable-display-predicates&lt;/h4&gt; &#xA;&lt;p&gt;A list of predicate functions with no argument to enable/disable showing Copilot&#39;s completions in &lt;code&gt;copilot-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-clear-overlay-ignore-commands&lt;/h4&gt; &#xA;&lt;p&gt;A list of commands that won&#39;t cause the overlay to be cleared.&lt;/p&gt; &#xA;&lt;h4&gt;copilot-network-proxy&lt;/h4&gt; &#xA;&lt;p&gt;Format: &lt;code&gt;&#39;(:host &#34;127.0.0.1&#34; :port 7890 :username: &#34;user&#34; :password: &#34;password&#34;)&lt;/code&gt;, where &lt;code&gt;:username&lt;/code&gt; and &lt;code&gt;:password&lt;/code&gt; are optional.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq copilot-network-proxy &#39;(:host &#34;127.0.0.1&#34; :port 7890))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Wrong Position of Other Completion Popups&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/company-overlay.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an example of using together with default frontend of &lt;code&gt;company-mode&lt;/code&gt;. Because both &lt;code&gt;company-mode&lt;/code&gt; and &lt;code&gt;copilot.el&lt;/code&gt; use overlay to show completion, so the conflict is inevitable. To solve the problem, I recommend you to use &lt;code&gt;company-box&lt;/code&gt; (only available on GUI), which is based on child frame rather than overlay.&lt;/p&gt; &#xA;&lt;p&gt;After using &lt;code&gt;company-box&lt;/code&gt;, you have:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/copilot-emacs/copilot.el/main/assets/company-box.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In other editors (e.g. &lt;code&gt;VS Code&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt;), completions from copilot and other sources can not show at the same time. But I decided to allow them to coexist, allowing you to choose a better one at any time.&lt;/p&gt; &#xA;&lt;h3&gt;Cursor Jump to End of Line When Typing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are using &lt;code&gt;whitespace-mode&lt;/code&gt;, make sure to remove &lt;code&gt;newline-mark&lt;/code&gt; from &lt;code&gt;whitespace-style&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you have restarted your Emacs (and rebuild the plugin if necessary) after updating the plugin.&lt;/li&gt; &#xA; &lt;li&gt;Please enable event logging by customize &lt;code&gt;copilot-log-max&lt;/code&gt; (to e.g. 1000), then paste related logs in the &lt;code&gt;*copilot events*&lt;/code&gt; and &lt;code&gt;*copilot stderr*&lt;/code&gt; buffer.&lt;/li&gt; &#xA; &lt;li&gt;If an exception is thrown, please also paste the stack trace (use &lt;code&gt;M-x toggle-debug-on-error&lt;/code&gt; to enable stack trace).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Setup Copilot without Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cycle through suggestions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add Copilot minor-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;del&gt;Add package to MELPA&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;These projects helped me a lot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TommyX12/company-tabnine/&#34;&gt;https://github.com/TommyX12/company-tabnine/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cryptobadger/flight-attendant.el&#34;&gt;https://github.com/cryptobadger/flight-attendant.el&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/copilot.vim&#34;&gt;https://github.com/github/copilot.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nlamirault/gotest.el</title>
    <updated>2024-01-05T01:31:23Z</updated>
    <id>tag:github.com,2024-01-05:/nlamirault/gotest.el</id>
    <link href="https://github.com/nlamirault/gotest.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs mode to go unit test command line tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gotest.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nlamirault/gotest.el/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_2-green.svg?style=flat&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Master : &lt;a href=&#34;https://stable.melpa.org/#/gotest&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/gotest-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/nlamirault/gotest.el/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/nlamirault/gotest.el/tree/master.svg?style=svg&#34; alt=&#34;Circle CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/nlamirault/gotest.el?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/nlamirault/gotest.el/badge.png?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Develop: &lt;a href=&#34;https://melpa.org/#/gotest&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/gotest-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/nlamirault/gotest.el/tree/develop&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/nlamirault/gotest.el/tree/develop.svg?style=svg&#34; alt=&#34;Circle CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/nlamirault/gotest.el?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/nlamirault/gotest.el/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; tests and programs from Emacs (&amp;gt;= 24.3)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install &lt;code&gt;gotest.el&lt;/code&gt; is via &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install gotest.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or &lt;a href=&#34;http://cask.github.io/&#34;&gt;Cask&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(depends-on &#34;gotest.el&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following interactive commands can be run via &lt;kbd&gt;M-x&lt;/kbd&gt; or bound to a key of your choice.&lt;/p&gt; &#xA;&lt;p&gt;All &lt;code&gt;go-test-*&lt;/code&gt; functions can optionally configure the buffer-local &lt;code&gt;go-test-args&lt;/code&gt; variable to pass additional arguments. Or, by using a prefix command, you will be prompted for arguments. For example: &lt;kbd&gt;C-u M-x go-test-current-test&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using the &lt;code&gt;&#39;_&lt;/code&gt; prefix arg with any of the &lt;code&gt;go-test-*&lt;/code&gt; or &lt;code&gt;go-run&lt;/code&gt; functions, the most recent arguments from history will be used without prompting. For example: &lt;kbd&gt;M-- M-x go-run&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;go-test-current-test&lt;/h3&gt; &#xA;&lt;p&gt;Launch unit tests for the current test.&lt;/p&gt; &#xA;&lt;h3&gt;go-test-current-test-cache&lt;/h3&gt; &#xA;&lt;p&gt;Rerun the current test.&lt;/p&gt; &#xA;&lt;h3&gt;go-test-current-file&lt;/h3&gt; &#xA;&lt;p&gt;Launch unit tests and examples for the current file&lt;/p&gt; &#xA;&lt;h3&gt;go-test-current-project&lt;/h3&gt; &#xA;&lt;p&gt;Launch unit tests and examples for the current project.&lt;/p&gt; &#xA;&lt;h3&gt;go-test-current-coverage&lt;/h3&gt; &#xA;&lt;p&gt;Launch unit tests coverage for the current project.&lt;/p&gt; &#xA;&lt;h3&gt;go-test-current-benchmark&lt;/h3&gt; &#xA;&lt;p&gt;Launch go benchmark on current benchmark&lt;/p&gt; &#xA;&lt;h3&gt;go-test-current-file-benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;Launch go benchmark on current file&lt;/p&gt; &#xA;&lt;h3&gt;go-test-current-project-benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;Launch go benchmark on current project&lt;/p&gt; &#xA;&lt;h3&gt;go-run&lt;/h3&gt; &#xA;&lt;p&gt;Launch program via &lt;code&gt;go run&lt;/code&gt;. Optionally configure the buffer-local &lt;code&gt;go-test-args&lt;/code&gt; variable to pass additional arguments. Or, by using a prefix command, you will be prompted for arguments. For example: &lt;kbd&gt;C-u M-x go-run&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Be sure to make use of minibuffer history (&lt;kbd&gt;C-r&lt;/kbd&gt;) to recall recent arguments to &lt;code&gt;go run&lt;/code&gt;. And remember that the &lt;kbd&gt;M--&lt;/kbd&gt; prefix can be used in combination with your &lt;code&gt;go run&lt;/code&gt; key binding to use the most recent arguments without prompting. The go file is included in history, so you can &lt;code&gt;go-run&lt;/code&gt; from history regardless of which buffer you are currently visiting.&lt;/p&gt; &#xA;&lt;h2&gt;Example key bindings&lt;/h2&gt; &#xA;&lt;p&gt;You can create some key bindings with these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(define-key go-mode-map (kbd &#34;C-x f&#34;) &#39;go-test-current-file)&#xA;(define-key go-mode-map (kbd &#34;C-x t&#34;) &#39;go-test-current-test)&#xA;(define-key go-mode-map (kbd &#34;C-x p&#34;) &#39;go-test-current-project)&#xA;(define-key go-mode-map (kbd &#34;C-x b&#34;) &#39;go-test-current-benchmark)&#xA;(define-key go-mode-map (kbd &#34;C-x x&#34;) &#39;go-run)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Addons&lt;/h2&gt; &#xA;&lt;h3&gt;Gb&lt;/h3&gt; &#xA;&lt;p&gt;If your project use &lt;a href=&#34;http://getgb.io/&#34;&gt;gb&lt;/a&gt;, &lt;em&gt;gotest&lt;/em&gt; will use this tool to launch unit tests.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Cask&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gotest.el&lt;/code&gt; use &lt;a href=&#34;http://cask.github.io/&#34;&gt;Cask&lt;/a&gt; for dependencies management. Install it and retrieve dependencies :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -fsSkL https://raw.github.com/cask/cask/master/go | python&#xA;$ export PATH=&#34;$HOME/.cask/bin:$PATH&#34;&#xA;$ cask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Launch unit tests from shell&lt;/p&gt; &lt;p&gt;$ make clean test&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;a href=&#34;https://github.com/tonini/overseer.el&#34;&gt;overseer&lt;/a&gt; :&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c , t&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;launch unit tests from buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c , b&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;launch unit tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-c , g&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;launch unit tests with tag (find, regexp, ...)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tips:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to launch a single unit test, add a specify tag :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(ert-deftest test-foobar ()&#xA;  :tags &#39;(current)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And launch it using : &lt;kbd&gt;C-c , g&lt;/kbd&gt; and specify tag : &lt;em&gt;current&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support / Contribute&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nlamirault/gotest.el/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;A changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/nlamirault/gotest.el/master/ChangeLog.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nlamirault/gotest.el/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Nicolas Lamirault &lt;a href=&#34;mailto:nicolas.lamirault@gmail.com&#34;&gt;nicolas.lamirault@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>