<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-18T01:33:16Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mclear-tools/consult-notes</title>
    <updated>2023-03-18T01:33:16Z</updated>
    <id>tag:github.com,2023-03-18:/mclear-tools/consult-notes</id>
    <link href="https://github.com/mclear-tools/consult-notes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use consult to search notes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/consult-notes&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/consult-notes-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a package for easily selecting notes via consult. It&#39;s most basic use is to integrate directories of files (notes) and to provide easy narrowing via =consult=. But notes can be in principle added from any source that can be integrated with consult.&lt;/p&gt; &#xA;&lt;p&gt;=consult-notes= can be used with any directory (or directories) of note files. It easily integrates with note systems like [[https://github.com/localauthor/zk][zk]], [[https://github.com/protesilaos/denote][denote]], or [[https://github.com/org-roam/org-roam][org-roam]]. Additionally, it may also search org headings in a set of specified files.&lt;/p&gt; &#xA;&lt;p&gt;Consult-notes also provides annotations on note candidates in the minibuffer (defaults are: directory, file size, last-modified time; denote integration substitutes keyword for directory; org-roam integration includes tags and number of backlinks, and org-heading integration provides the file name). Consult-notes may be configured to act on selected candidates via [[https://github.com/oantolin/embark][embark]] (see below). For other customizations please consult the options via =M-x customize-group consult-notes=.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_HTML: :width 85% [[file:screenshots/notes-screenshot1.png]] #+ATTR_HTML: :width 85% [[file:screenshots/notes-screenshot2.png]] #+ATTR_HTML: :width 85% [[file:screenshots/notes-screenshot3.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation This package is available on MELPA. Or you can install the package from this repo. Installation with use-package and straight is pretty easy:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package consult-notes :straight (:type git :host github :repo &#34;mclear-tools/consult-notes&#34;) :commands (consult-notes consult-notes-search-in-all-notes ;; if using org-roam consult-notes-org-roam-find-node consult-notes-org-roam-find-node-relation) :config (setq consult-notes-file-dir-sources &#39;((&#34;Name&#34; ?key &#34;path/to/dir&#34;))) ;; Set notes dir(s), see below ;; Set org-roam integration, denote integration, or org-heading integration e.g.: (setq consult-notes-org-headings-files &#39;(&#34;&lt;del&gt;/path/to/file1.org&#34; &#34;&lt;/del&gt;/path/to/file2.org&#34;)) (consult-notes-org-headings-mode) (when (locate-library &#34;denote&#34;) (consult-notes-denote-mode))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Set notes directories via =consult-notes-file-dir-sources=. This is a list that consists of three elements: a title heading, a key (for narrowing), and a directory path. For example (note the trailing slashes):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq consult-notes-file-dir-sources &#39;((&#34;Org&#34; ?o &#34;&lt;del&gt;/Dropbox/org-files/&#34;) (&#34;Org Refile&#34; ?r &#34;&lt;/del&gt;/Dropbox/Work/projects/notebook/org-refile/&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;=consult-multi= will take each of these sources and present them together in one integrated consult completion buffer. To narrow to a particular source, use its designated narrowing key.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: If you don&#39;t use any sources beyond that of files in directories, then you don&#39;t need to set anything other than =consult-notes-file-dir-sources=. Org-roam or denote sources are set by using the relevant minor-mode (see below). However, if you /do/ want to integrate other different kinds of sources (e.g. bookmarks or buffers) into =consult-notes= then please see the instructions for adding [[https://github.com/minad/consult#multiple-sources][multiple sources with consult]]. To add an additional non-directory source one should do so by means of =add-to-list= in one&#39;s config, e.g.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (with-eval-after-load &#39;consult-notes (add-to-list &#39;consult-notes-all-sources &#39;my-notes--additional-source &#39;append)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You may customize narrowing keys, separator names and annotations used. Please see =customize-group RET &#39;consult-notes&#39; RET= (or the relevant `.el&#39; files) for details. The faces used by consult-notes are all similarly customizable.&lt;/p&gt; &#xA;&lt;p&gt;Though consult-notes by default searches only for names of files (though see the minor modes for denote and org-roam integration), you may also easily search the (line) contents of all notes in =consult-notes-all-sources= using the function =consult-notes-search-in-all-notes=. This uses =consult-grep= or =consult-ripgrep= as its basis (see the =consult-notes-use-rg= variable). You can set the arguments for the grep or ripgrep search with the variables =consult-notes-grep-args= and =consult-notes-ripgrep-args= respectively.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Denote [[https://github.com/protesilaos/denote][Denote]] may be used in conjunction with consult-notes in one of two ways. You can simply set one or more directories containing your denote notes via the =consult-notes-file-dir-sources= variable as described above, or you can turn on the minor mode =(consult-notes-denote-mode)=, which does three things. First, it adds your =denote-directory= files to =consult-notes-all-sources=. Second, it sets the display of denote files in consult slightly differently, in the format of =ID Title #keywords /directory size date modified=. ID, title, keywords, and directory are all searchable. If you like you can customize variables to hide the ID and directory. Third, the minor mode sets the default function when there is no match to create a denote note. Turning off the minor mode resets the defaults.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Org-Roam&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/org-roam/org-roam][Org-roam]] may be used in conjunction with consult-notes but two things should be kept in mind. First, org-roam works primarily with the concept of a &#39;node&#39;, which can be /either/ a file /or/ a headline within a file. This means we need to add org-roam sources differently from that of standard directory sources. Second, org-roam provides its own completing read interface, which needs to be integrated with consult-notes.&lt;/p&gt; &#xA;&lt;p&gt;So, if you want to integrate consult-notes with org-roam, be sure to call the minor-mode integration via the function =(consult-notes-org-roam-mode)=. This sets up a minor mode providing some useful functions to integrate search of org-roam nodes and of org-roam references with the =consult-notes= search and display functions. It also sets the org-roam display interface to look like that of the consult-notes interface when used apart from consult (e.g. in calling =org-roam-node-find=). It adds all your org-roam nodes (whether files or headlines) to the consult-notes interface (you don&#39;t need to do anything additional for this -- it simply reads off of your org-roam settings), and it adds your org-roam directory to the list of directories on which =consult-notes-search-in-all-notes= runs. More functionality may be added in the future.&lt;/p&gt; &#xA;&lt;p&gt;The annotation of org-roam notes in consult-notes uses a function that displays directory and modified time. You can display the number of backlinks and file size by setting the variables =consult-notes-org-roam-blinks= and =consult-notes-org-roam-show-file-size= to =t=. Please see the function =consult-notes-org-roam-annotate= for further details. If you have an org-roam database that consists of 3000+ nodes, you may see some latency with these additional annotations, so please adjust accordingly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Org Headings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have org files with many headings (say some subset of your agenda files, for example) that you would like to include in a consult-notes search, you can enable =consult-notes-org-headings-mode= and the headings for files you specify in =consult-notes-org-headings-files= will be included in consult-notes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Embark support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use [[https://github.com/oantolin/embark][embark]] you can integrate consult-notes actions with embark like so:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun consult-notes-open-dired (cand) &#34;Open notes directory dired with point on file CAND.&#34; (interactive &#34;fNote: &#34;) ;; dired-jump is in dired-x.el but is moved to dired in Emacs 28 (dired-jump nil cand))&lt;/p&gt; &#xA;&lt;p&gt;(defun consult-notes-marked (cand) &#34;Open a notes file CAND in Marked 2. Marked 2 is a mac app that renders markdown.&#34; (interactive &#34;fNote: &#34;) (call-process-shell-command (format &#34;open -a &#34;Marked 2&#34; &#34;%s&#34;&#34; (expand-file-name cand))))&lt;/p&gt; &#xA;&lt;p&gt;(defun consult-notes-grep (cand) &#34;Run grep in directory of notes file CAND.&#34; (interactive &#34;fNote: &#34;) (consult-grep (file-name-directory cand)))&lt;/p&gt; &#xA;&lt;p&gt;(defvar-keymap consult-notes-map :doc &#34;Keymap for Embark notes actions.&#34; :parent embark-file-map &#34;d&#34; #&#39;consult-notes-dired &#34;g&#34; #&#39;consult-notes-grep &#34;m&#34; #&#39;consult-notes-marked)&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;embark-keymap-alist `(,consult-notes-category . consult-notes-map))&lt;/p&gt; &#xA;&lt;p&gt;;; make embark-export use dired for notes (setf (alist-get consult-notes-category embark-exporters-alist) #&#39;embark-export-dired) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Citar Support If you use [[https://github.com/emacs-citar/citar][citar]] you can integrate support with consult-notes and org-roam as follows:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Search org-roam notes for citations (depends on citar) (defun consult-notes-org-roam-cited (reference) &#34;Return a list of notes that cite the REFERENCE.&#34; (interactive (list (citar-select-ref :rebuild-cache current-prefix-arg :filter (citar-has-note)))) (let* ((ids (org-roam-db-query [:select * :from citations :where (= cite-key $s1)] (car reference))) (anodes (mapcar (lambda (id) (org-roam-node-from-id (car id))) ids)) (template (org-roam-node--process-display-format org-roam-node-display-template)) (bnodes (mapcar (lambda (node) (org-roam-node-read--to-candidate node template)) anodes)) (node (completing-read &#34;Node: &#34; (lambda (string pred action) (if (eq action &#39;metadata) `(metadata ;; get title using annotation function (annotation-function . ,(lambda (title) (funcall org-roam-node-annotation-function (get-text-property 0 &#39;node title)))) (category . org-roam-node)) (complete-with-action action bnodes string pred))))) (fnode (cdr (assoc node bnodes)))) (if ids ;; Open node in other window (org-roam-node-open fnode) (message &#34;No notes cite this reference.&#34;)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Related Packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/jgru/consult-org-roam][Consult-org-roam]] offers consult-completion/narrowing functionality related strictly to org-roam.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/jrblevin/deft][Deft]] provides dedicated buffer notes search/filtering&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/protesilaos/denote][Denote]] provides simple note creation with an efficient file-naming scheme&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/ymherklotz/emacs-zettelkasten][Emacs-zettelkasten]] provides a basis for a zettelkasten type notetaking system&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/localauthor/zk][Zk]] offers a dead-simple, feature-rich Zettelkasten implementation for Emacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acknowledgments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to [[https://github.com/minad][Daniel Mendler]] for consult and advice about the =consult-grep= function, the good work of Howard Melman, whose original [[https://github.com/minad/consult/wiki/hrm-notes][notes function]] provided the initial basis for this package, and both [[https://protesilaos.com][Protesilaos Stavrou]] and [[https://github.com/bdarcus][Bruce D&#39;Arcus]] for helpful discussion and advice.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>davidshepherd7/dotfiles</title>
    <updated>2023-03-18T01:33:16Z</updated>
    <id>tag:github.com,2023-03-18:/davidshepherd7/dotfiles</id>
    <link href="https://github.com/davidshepherd7/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My config files for emacs, zsh, xmonad, urxvt etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Install with &lt;code&gt;install.sh&lt;/code&gt; (using GNU stash).&lt;/p&gt;</summary>
  </entry>
</feed>