<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-25T01:36:13Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>susam/emfy</title>
    <updated>2023-06-25T01:36:13Z</updated>
    <id>tag:github.com,2023-06-25:/susam/emfy</id>
    <link href="https://github.com/susam/emfy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A dark and sleek Emacs setup for general purpose editing and programming&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Emacs for You (Emfy)&lt;/h1&gt; &#xA;&lt;p&gt;This project provides a tiny &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file to set up Emacs quickly. This document provides a detailed description of how to set it up and get started with Emacs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/view-~%2f.emacs-brightgreen&#34; alt=&#34;View Source&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-%233ea639&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/susam&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-%40susam-%231da1f2&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Further this project also provides a tiny convenience command named &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/em&#34;&gt;&lt;code&gt;em&lt;/code&gt;&lt;/a&gt; to start Emacs server and edit files using Emacs server. This helps in using Emacs efficiently. This script and its usage is explained in detail later in the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#emacs-server&#34;&gt;Emacs Server&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#emacs-launcher&#34;&gt;Emacs Launcher&lt;/a&gt; sections. Here is how the Emacs environment is going to look after setting up this project:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0.png&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0.png&#34; alt=&#34;Screenshot of Emacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are already comfortable with Emacs and only want to understand the content of &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/em&#34;&gt;&lt;code&gt;em&lt;/code&gt;&lt;/a&gt;, you can skip ahead directly to the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#line-by-line-explanation&#34;&gt;Line-by-Line Explanation&lt;/a&gt; section that describes every line of these files in detail.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#who-is-this-for&#34;&gt;Who Is This For?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#get-started&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#step-by-step-usage&#34;&gt;Step-by-Step Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#use-emacs&#34;&gt;Use Emacs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#use-paredit&#34;&gt;Use Paredit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#execute-emacs-lisp-code&#34;&gt;Execute Emacs Lisp Code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#use-rainbow-delimiters&#34;&gt;Use Rainbow Delimiters&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#useful-terms&#34;&gt;Useful Terms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#line-by-line-explanation&#34;&gt;Line-by-Line Explanation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#tweak-ui&#34;&gt;Tweak UI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#customize-theme&#34;&gt;Customize Theme&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#minibuffer-completion&#34;&gt;Minibuffer Completion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#show-stray-whitespace&#34;&gt;Show Stray Whitespace&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#require-final-newline&#34;&gt;Require Final Newline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#single-space-for-sentence-spacing&#34;&gt;Single Space for Sentence Spacing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#indentation&#34;&gt;Indentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#keep-working-directory-tidy&#34;&gt;Keep Working Directory Tidy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#highlight-parentheses&#34;&gt;Highlight Parentheses&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#install-packages&#34;&gt;Install Packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#add-hooks&#34;&gt;Add Hooks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#colorful-parentheses&#34;&gt;Colorful Parentheses&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#custom-command-and-key-sequence&#34;&gt;Custom Command and Key Sequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#emacs-server&#34;&gt;Emacs Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#emacs-launcher&#34;&gt;Emacs Launcher&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#opinion-references&#34;&gt;Opinion References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#channels&#34;&gt;Channels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who Is This For?&lt;/h2&gt; &#xA;&lt;p&gt;Are you an absolute beginner to Emacs? Are you so new to Emacs that you do not even have &lt;code&gt;~/.emacs&lt;/code&gt; or &lt;code&gt;~/.emacs.d&lt;/code&gt; on your file system? Have you come across recommendations to use starter kits like Doom Emacs, Spacemacs, etc. but then you wondered if you could use vanilla Emacs and customize it slowly to suit your needs without having to sacrifice your productivity in the initial days of using Emacs? Do you also want your Emacs to look sleek from day zero? If you answered &#34;yes&#34; to most of these questions, then this project is for you.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file in this project provides a quick way to get started with setting up your Emacs environment. This document explains how to do so in a step-by-step manner. This document also explains the content of &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/em&#34;&gt;&lt;code&gt;em&lt;/code&gt;&lt;/a&gt; in a line-by-line manner.&lt;/p&gt; &#xA;&lt;p&gt;Note that many customizations in the Emacs initialization file available in this project are a result of the author&#39;s preferences. They may or may not match others&#39; preferences. They may or may not suit your taste and requirements. Wherever applicable, the pros and cons of each customization and possible alternatives are discussed in this document. You are encouraged to read the line-by-line explanation that comes later in this document, understand each customization, and modify the initialization file to suit your needs.&lt;/p&gt; &#xA;&lt;p&gt;Note: If you want to use Emacs specifically for programming in Common Lisp, please see &lt;a href=&#34;https://github.com/susam/emacs4cl&#34;&gt;Emacs4CL&lt;/a&gt; first to quickly set up a Common Lisp (CL) development environment using Emacs. Once you have set up your CL development environment using Emacs4CL, you can then come back to this project and pick more ideas and Emacs Lisp code to enhance your Emacs setup from being a CL development environment to being a more general purpose editing and programming environment.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;This project provides a file named &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; that offers the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disable some UI elements to provide a clean and minimal look-and-feel.&lt;/li&gt; &#xA; &lt;li&gt;Show current column number in the mode line.&lt;/li&gt; &#xA; &lt;li&gt;Load a dark color theme named Wombat.&lt;/li&gt; &#xA; &lt;li&gt;Customize the color theme to accentuate the cursor, search matches, and comments with different shades of orange.&lt;/li&gt; &#xA; &lt;li&gt;Enable and configure Ido mode to find files and switch buffers efficiently.&lt;/li&gt; &#xA; &lt;li&gt;Enable Fido mode for automatic completion of minibuffer input.&lt;/li&gt; &#xA; &lt;li&gt;Show trailing whitespace at the end of lines clearly.&lt;/li&gt; &#xA; &lt;li&gt;Show trailing newlines at the end of buffer clearly.&lt;/li&gt; &#xA; &lt;li&gt;Show missing newlines at the end of buffer clearly.&lt;/li&gt; &#xA; &lt;li&gt;Always add a newline automatically at the end of a file while saving.&lt;/li&gt; &#xA; &lt;li&gt;Use single spacing convention to end sentences.&lt;/li&gt; &#xA; &lt;li&gt;Use spaces, not tabs, for indentation.&lt;/li&gt; &#xA; &lt;li&gt;Configure indentation settings as per popular coding conventions.&lt;/li&gt; &#xA; &lt;li&gt;Highlight matching parentheses.&lt;/li&gt; &#xA; &lt;li&gt;Move auto-save files and backup files to a separate directory to keep our working directories tidy.&lt;/li&gt; &#xA; &lt;li&gt;Do not move original files while creating backups.&lt;/li&gt; &#xA; &lt;li&gt;Automatically install configured packages when Emacs starts for the first time.&lt;/li&gt; &#xA; &lt;li&gt;Install Markdown mode for convenient editing of Markdown files.&lt;/li&gt; &#xA; &lt;li&gt;Install and configure Paredit for editing S-expressions efficiently.&lt;/li&gt; &#xA; &lt;li&gt;Install and configure Rainbow Delimiters to color parentheses by their nesting depth level.&lt;/li&gt; &#xA; &lt;li&gt;Provide a minimal example of a user-defined custom command and a few custom key sequences.&lt;/li&gt; &#xA; &lt;li&gt;Start Emacs server automatically, so that terminal users can use Emacs client to edit files with an existing instance of Emacs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, this project also provides a convenience command named &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/em&#34;&gt;&lt;code&gt;em&lt;/code&gt;&lt;/a&gt; that is a thin wrapper around the &lt;code&gt;emacs&lt;/code&gt; and &lt;code&gt;emacsclient&lt;/code&gt; commands. It offers the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start a new instance of Emacs when requested.&lt;/li&gt; &#xA; &lt;li&gt;Open files in an existing Emacs server if a server is running already.&lt;/li&gt; &#xA; &lt;li&gt;Automatically start a new Emacs server if a server is not running already.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these features along with every line of code that enables these features are explained in the sections below.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;This section helps you to set up Emfy quickly and see what the end result looks like. Perform the following steps to get started:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Emacs.&lt;/p&gt; &lt;p&gt;On macOS, enter the following command if you have &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install --cask emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On Debian, Ubuntu, or another Debian-based Linux system, enter the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For other environments, visit &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;https://www.gnu.org/software/emacs/&lt;/a&gt; to see how to install Emacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the Emacs initialization file &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; provided here to your home directory. Here is an example &lt;code&gt;curl&lt;/code&gt; command that copies the initialization file to its traditional location:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L https://github.com/susam/emfy/raw/main/.emacs &amp;gt;&amp;gt; ~/.emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here is another alternative that copies the initialization file to a more convenient location:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir ~/.emacs.d&#xA;curl -L https://github.com/susam/emfy/raw/main/.emacs &amp;gt;&amp;gt; ~/.emacs.d/init.el&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Yet another popular alternative is to copy the initialization file to an XDG-compatible location as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p ~/.config/emacs&#xA;curl -L https://github.com/susam/emfy/raw/main/.emacs &amp;gt;&amp;gt; ~/.config/emacs/init.el&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Emacs can automatically load the Emacs initialization file from any of the paths used above. See section &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;The Emacs Initialization File&lt;/a&gt; of the Emacs manual for more details about this. Most users these days prefer one of the last two locations because it allows all Emacs configuration to conveniently remain in one directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the Emacs launcher script &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/em&#34;&gt;&lt;code&gt;em&lt;/code&gt;&lt;/a&gt; provided here to some directory that belongs to your &lt;code&gt;PATH&lt;/code&gt; variable. For example, here are a few commands that download this script and place it in the &lt;code&gt;/usr/local/bin/&lt;/code&gt; directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L https://github.com/susam/emfy/raw/main/em &amp;gt;&amp;gt; /tmp/em&#xA;sudo mv /tmp/em /usr/local/bin/em&#xA;chmod +x /usr/local/bin/em&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The usefulness of this launcher script will be explained in the section &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#emacs-launcher&#34;&gt;Emacs Launcher&lt;/a&gt; later.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On macOS, you may receive the following error message in a dialog box: &#39;“Emacs.app” can’t be opened because Apple cannot check it for malicious software.&#39; To resolve this issue, go to Apple menu &amp;gt; System Preferences &amp;gt; Security &amp;amp; Privacy &amp;gt; General and click &#39;Open Anyway&#39;.&lt;/p&gt; &lt;p&gt;It may take a minute or so for Emacs to start the very first time. When it starts the first time with the new Emacs initialization file obtained in the previous step, it installs the packages specified in it. This is only a one-time activity. The next time you start Emacs, it will start instantly. We will see how &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; takes care of it in the line-by-line guide later.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now that your environment is setup, read the next section to learn how to use this environment in more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Step-by-Step Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Use Emacs&lt;/h3&gt; &#xA;&lt;p&gt;Emacs is a very powerful and extensible editor. It comes with over 10,000 built-in commands. A small section like this can barely scratch the surface of Emacs. Yet, this section makes a modest attempt at getting you started with Emacs and then provides more resources to learn further. Perform the following steps to get started:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Within Emacs, enter the following command to open a file, say, &lt;code&gt;hello.txt&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-f hello.txt RET&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A new buffer to edit &lt;code&gt;hello.txt&lt;/code&gt; is created. If a file with that name already exists on your file system, then it loads the content of the file into the buffer.&lt;/p&gt; &lt;p&gt;Note that in the Emacs world (and elsewhere too), the notation &lt;code&gt;C-&lt;/code&gt; denotes the &lt;kbd&gt;ctrl&lt;/kbd&gt; modifier key. Thus &lt;code&gt;C-x&lt;/code&gt; denotes &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;x&lt;/kbd&gt;.&lt;/p&gt; &lt;p&gt;The notation &lt;code&gt;RET&lt;/code&gt; denotes the &lt;kbd&gt;enter&lt;/kbd&gt; or &lt;kbd&gt;return&lt;/kbd&gt; key.&lt;/p&gt; &lt;p&gt;Typing consecutive &lt;code&gt;C-&lt;/code&gt; key sequences can be optimized by pressing and holding down the &lt;kbd&gt;ctrl&lt;/kbd&gt; key, then typing the other keys, and then releasing the &lt;kbd&gt;ctrl&lt;/kbd&gt; key. For example, to type &lt;code&gt;C-x C-f&lt;/code&gt;, first press and hold down &lt;kbd&gt;ctrl&lt;/kbd&gt;, then type &lt;kbd&gt;x&lt;/kbd&gt;, then type &lt;kbd&gt;f&lt;/kbd&gt;, and then release &lt;kbd&gt;ctrl&lt;/kbd&gt;. In other words, think of &lt;code&gt;C-x C-f&lt;/code&gt; as &lt;code&gt;C-(x f)&lt;/code&gt;. This shortcut works for other modifier keys too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now type some text into the buffer. Type out at least 3-4 words. We will need it for the next two steps.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Move backward by one word with the following key sequence:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-b&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember from the previous section that &lt;code&gt;M-&lt;/code&gt; denotes the meta modifier key. The above command can be typed with &lt;kbd&gt;alt&lt;/kbd&gt; + &lt;kbd&gt;b&lt;/kbd&gt; or &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;b&lt;/kbd&gt; or &lt;kbd&gt;esc&lt;/kbd&gt; &lt;kbd&gt;b&lt;/kbd&gt;.&lt;/p&gt; &lt;p&gt;If you face any issue with the &lt;kbd&gt;alt&lt;/kbd&gt; key or the &lt;kbd&gt;option&lt;/kbd&gt; key, read &lt;a href=&#34;https://www.emacswiki.org/emacs/MetaKeyProblems&#34;&gt;Emacs Wiki: Meta Key Problems&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now move forward by one word with the following key sequence:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;M-f&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;C-g&lt;/code&gt; key sequence cancels the current command. This can be used when you mistype a command and want to start over or if you type a command partially, then change your mind and then you want to cancel the partially typed command. Try out these examples:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-f C-g&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code&gt;C-x C-g&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Save the buffer to a file on the file system with this command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-s&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Quit Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-c&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Now you know how to start Emacs, open a file, save it, and quit. Improve your Emacs knowledge further by taking the Emacs tutorial that comes along with Emacs. In Emacs, type &lt;code&gt;C-h t&lt;/code&gt; to start the tutorial.&lt;/p&gt; &#xA;&lt;p&gt;The key bindings to perform various operations like creating file, saving file, quitting the editor, etc. may look arcane at first, but repeated usage of the key bindings develops muscle memory soon and after having used them for a few days, one does not even have to think about them. The fingers do what the mind wants effortlessly due to muscle memory.&lt;/p&gt; &#xA;&lt;p&gt;While you are getting used to the Emacs key bindings, keep this &lt;a href=&#34;https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf&#34;&gt;GNU Emacs Reference Card&lt;/a&gt; handy. Also, if you are using it in GUI mode, then the menu options can be quite helpful. The Emacs initialization file that comes with this project hides the menu bar by default but you can always invoke the menu bar any time by typing &lt;code&gt;&amp;lt;f10&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Use Paredit&lt;/h3&gt; &#xA;&lt;p&gt;Paredit helps in keeping parentheses balanced and also in performing structured editing of S-expressions in Lisp code. It provides a powerful set of commands to manipulate S-expressions in various ways. Perform the following steps to get started with Paredit:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open an Elisp source file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-f foo.el&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type the following code only:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun square (x&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;At this point, Paredit should have inserted the two closing parentheses automatically. The code should look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun square (x))&#xA;                -&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The cursor should be situated just after the parameter &lt;code&gt;x&lt;/code&gt;. The underbar shows where the cursor should be.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type the closing parentheses now. Yes, type it even if the closing parenthesis is already present. The cursor should now skip over the first closing parenthesis like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun square (x))&#xA;                 -&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Of course, there was no need to type the closing parenthesis because it was already present but typing it out to skip over it is more efficient than moving over it with movement commands. This is, in fact, a very nifty feature of Paredit. We can enter code with the same keystrokes as we would without Paredit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now type &lt;code&gt;enter&lt;/code&gt; to create a new line just before the last parenthesis. A newline is inserted like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun square (x)&#xA;  )&#xA;  -&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now type only this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(* x x&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, Paredit would have inserted the closing parenthesis automatically. The code should look like this now:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun square (x)&#xA;  (* x x))&#xA;        -&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There is a lot more to Paredit than this. To learn more, see &lt;a href=&#34;http://danmidwood.com/content/2014/11/21/animated-paredit.html&#34;&gt;The Animated Guide to Paredit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: While many Lisp programmers find Paredit very convenient and powerful while manipulating S-expressions in Lisp code, there are a few people who do not like Paredit because they find the Paredit behaviour intrusive. See the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#opinion-references&#34;&gt;Opinion References&lt;/a&gt; section for more discussion on this topic.&lt;/p&gt; &#xA;&lt;h3&gt;Execute Emacs Lisp Code&lt;/h3&gt; &#xA;&lt;p&gt;The previous section shows how to write some Elisp code and how Paredit helps in keeping the parentheses balanced. In this section, we will see how to execute some Elisp code.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Emacs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open an Elisp source file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;C-x C-f foo.el&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the following code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun square (x)&#xA;  (* x x))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With the cursor placed right after the last closing parenthesis, type &lt;code&gt;C-x C-e&lt;/code&gt;. The name of the function defined should appear in the echo area at the bottom. This confirms that the function has been defined.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now add the following code to the Elisp source file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(square 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once again, with the cursor placed right after the last closing parenthesis, type &lt;code&gt;C-x C-e&lt;/code&gt;. The result should appear in the echo area at the bottom.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Use Rainbow Delimiters&lt;/h3&gt; &#xA;&lt;p&gt;There is not much to learn about using Rainbow Delimiters. In the previous sections, you must have seen that as you type nested parentheses, each parenthesis is highlighted with a different color. That is done by Rainbow Delimiters. It colors each parenthesis according to its nesting depth level.&lt;/p&gt; &#xA;&lt;p&gt;Note: Not everyone likes Rainbow Delimiters. Some people find parentheses in multiple colors distracting. See the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#opinion-references&#34;&gt;Opinion References&lt;/a&gt; section for more discussion on this topic.&lt;/p&gt; &#xA;&lt;h2&gt;Useful Terms&lt;/h2&gt; &#xA;&lt;p&gt;In this section, we clearly state the various terms that we use later in this document.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Frame&lt;/em&gt;: The Emacs manual uses the term frame to mean a GUI window, or a region of the desktop, or the terminal where Emacs is displayed. We do not call it window in Emacs parlance because the term &#34;window&#34; is reserved for another element discussed further below in this list.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Menu bar&lt;/em&gt;: An Emacs frame displays a menu bar at the very top. It allows access to commands via a series of menus.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Echo area&lt;/em&gt;: An Emacs frame displays an echo area at the very bottom. The echo area displays informative messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Minibuffer&lt;/em&gt;: The echo area is also used to display the minibuffer, a special buffer where we can type and enter arguments to commands, such as the name of a file to be edited after typing the key sequence &lt;code&gt;C-x C-f&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Tool bar&lt;/em&gt;: On a graphical display, a tool bar is displayed directly below the menu bar. The tool bar contains a row of icons that provides quick access to several editing commands.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Window&lt;/em&gt;: The main area of the frame between the menu bar or the tool bar (if it exists) and the echo area contains one or more windows. This is where we view or edit files. Each window displays a &lt;em&gt;buffer&lt;/em&gt;, i.e., the text or graphics we are editing or viewing. By default, only one window is displayed when we start Emacs. We can then split this main area into multiple windows using key sequences like &lt;code&gt;C-x 2&lt;/code&gt;, &lt;code&gt;C-x 3&lt;/code&gt;, etc. and then open different files or buffers in different windows.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Mode line&lt;/em&gt;: The last line of each window is a mode line. It displays information about the buffer. For example, it shows the name of the buffer, the line number at which the cursor is currently present, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Scroll bar&lt;/em&gt;: On a graphicaly display, a scroll bar is displayed on one side which can be used to scroll through the buffer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are many other peculiar terms found in the world of Emacs such as the term &lt;em&gt;point&lt;/em&gt; to refer to the current location of the cursor, the term &lt;em&gt;kill&lt;/em&gt; to cut text, the term &lt;em&gt;yank&lt;/em&gt; to paste text, etc. but we will not discuss them here for the sake of brevity. The meanings of most such terms become obvious from the context when you encounter them. The terms described above should be sufficient to understand the line-by-line explanation presented in the next section.&lt;/p&gt; &#xA;&lt;h2&gt;Line-by-Line Explanation&lt;/h2&gt; &#xA;&lt;p&gt;This section explains the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; file provided here line-by-line.&lt;/p&gt; &#xA;&lt;h3&gt;Tweak UI&lt;/h3&gt; &#xA;&lt;p&gt;The first few lines in our &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt; merely tweak the Emacs user interface. These are of course not essential for using Emacs. However, many new Emacs users often ask how to customize the user interface to add a good color scheme and make it look minimal, so this section indulges a little in customizing the user interface.&lt;/p&gt; &#xA;&lt;p&gt;Here is a line-by-line explanation of the UI tweaks in &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;&lt;code&gt;.emacs&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When Emacs runs in a GUI window, by default, it starts with a menu bar, tool bar, and scroll bar. Many (but not all) users like to hide them in order to make the Emacs frame look clean and minimal. The following lines disable the tool bar and scroll bar. The menu bar is left enabled.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(when (display-graphic-p)&#xA;  (tool-bar-mode 0)&#xA;  (scroll-bar-mode 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;when&lt;/code&gt; expression checks if Emacs is running with graphic display before disabling the tool bar and scroll bar. Without the &lt;code&gt;when&lt;/code&gt; expression, we get the following error on Emacs without graphic display support: &lt;code&gt;Symbol&#39;s function definition is void: tool-bar-mode&lt;/code&gt;. An example of Emacs without graphics support is &lt;code&gt;emacs-nox&lt;/code&gt; on Debian 10. Note that this is only an author&#39;s preference. You may comment out one or more of these lines if you want to retain the tool bar or scroll bar.&lt;/p&gt; &lt;p&gt;Some users like to hide the menu bar as well. To disable the menu bar, include &lt;code&gt;(menu-bar-mode 0)&lt;/code&gt; as top-level-expression (i.e., outside the &lt;code&gt;when&lt;/code&gt; expression) in the initialization file. Even with the menu bar disabled, the menu can be accessed anytime by typing &lt;code&gt;&amp;lt;f10&amp;gt;&lt;/code&gt;. For beginners to Emacs, it is advisable to keep the menu bar enabled because it helps in discovering new features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inhibit the startup screen with the &lt;code&gt;Welcome to GNU Emacs&lt;/code&gt; message from appearing:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq inhibit-startup-screen t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you are a beginner to Emacs, you might find the startup screen helpful. It contains links to tutorial, manuals, common tasks, etc. If you want to retain the startup screen, comment this line out.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Show column number in the mode line:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(column-number-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, Emacs shows only the current line number in the mode line. For example, by default, Emacs may display something like &lt;code&gt;L4&lt;/code&gt; in the mode line to indicate that the cursor is on the fourth line of the buffer. The above Elisp code enables column number display in the mode line. With column number enabled, Emacs may display something like &lt;code&gt;(4,0)&lt;/code&gt; to indicate the cursor is at the beginning of the fourth line.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Customize Theme&lt;/h3&gt; &#xA;&lt;p&gt;In this section, we will choose a dark theme for Emacs. If you do not like dark themes, you might want to stick with the default theme, choose another theme, or skip this section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Load a beautiful dark color theme known as &lt;code&gt;wombat&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(load-theme &#39;wombat)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to check the other built-in themes, type &lt;code&gt;M-x customize-themes RET&lt;/code&gt;. A new window with a buffer named &lt;code&gt;*Custom Themes*&lt;/code&gt; appear. In this buffer, select any theme you want to test. After you are done testing, you can close this new window with &lt;code&gt;C-x 0&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;By default the Wombat theme looks like this:&lt;/p&gt; &#xA;  &lt;!-- wombat-default --&gt; &lt;p&gt;&lt;a href=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-wombat1.png&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-wombat1.png&#34; alt=&#34;Screenshot of Wombat default theme&#34; width=&#34;580&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In this theme, the cursor, search matches, and comments can often be difficult to spot because they are all colored with different shades of gray while the background is also gray. In the next few points, we will customize this theme a little to make these elements easier to spot. We color them differently to add more contrast between the background and foreground colors of these elements. In the end, our customized Wombat theme would look like this:&lt;/p&gt; &#xA;  &lt;!-- wombat-custom --&gt; &lt;p&gt;&lt;a href=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-wombat2.png&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-wombat2.png&#34; alt=&#34;Screenshot of Wombat custom theme&#34; width=&#34;580&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose a darker shade of gray for the background color to improve the contrast of the theme:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(set-face-background &#39;default &#34;#111&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose a pale shade of orange for the cursor, so that it is easy to spot on the dark gray background:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(set-face-background &#39;cursor &#34;#c96&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Highlight the current search match with a certain shade of orange as the background and a very light shade of gray as the foreground:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(set-face-background &#39;isearch &#34;#ff0&#34;)&#xA;(set-face-foreground &#39;isearch &#34;#000&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Highlight search matches other than the current one with a darker shade of orange as the background and a darker shade of gray as the foreground:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(set-face-background &#39;lazy-highlight &#34;#990&#34;)&#xA;(set-face-foreground &#39;lazy-highlight &#34;#000&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use tangerine yellow to color the comments:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(set-face-foreground &#39;font-lock-comment-face &#34;#fc0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Personal note: I see that many recent color themes choose a dim color for comments in code. Such color themes intend to underemphasize the comments. I think comments play an important role in code meant to be read by humans and should be emphasized appropriately. That&#39;s why I have chosen tangerine yellow for comments in the last point above, so that the comments are easily readable.&lt;/p&gt; &#xA;&lt;h3&gt;Minibuffer Completion&lt;/h3&gt; &#xA;&lt;p&gt;Emacs comes with Ido mode and Fido mode that help with opening files, switching between buffers, entering commands, etc. quite efficiently. Ido incrementally searches for file and buffer names as we type out the names, list the matching names, and automatically completes the minibuffer with the best match. Fido mode offers much of the same functionality that Ido mode provides and additionally helps in automatically completing inputs in all types of minibuffer prompts (even those not related to files and buffers).&lt;/p&gt; &#xA;&lt;p&gt;Strictly speaking, it is not necessary to enable Ido mode if we are going to enable Fido mode but both modes have their areas of strengths, so we are going to enable both to get the best of both modes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Ido mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(ido-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the positive argument &lt;code&gt;1&lt;/code&gt; is necessary. Without it, this function call would simply toggle Ido mode on or off everytime it executes. Say, we reload the Emacs initialization file with &lt;code&gt;M-x load-file RET ~/.emacs RET&lt;/code&gt;, without the positive argument, this function call would end up disabling Ido mode if it was previously enabled. The positive argument ensures that Ido mode remains enabled even if we reload the Emacs initialization file.&lt;/p&gt; &lt;p&gt;With Ido mode enabled, automatic completions appear while trying to open files or switch between buffers with &lt;code&gt;C-x C-f&lt;/code&gt; or &lt;code&gt;C-x b&lt;/code&gt;, respectively. For example, merely typing &lt;code&gt;C-x C-f /et/ost&lt;/code&gt; may lead to Ido mode automatically completing the path to &lt;code&gt;/etc/hosts&lt;/code&gt;, i.e., we may type partial substrings of the various components of the path or a substring of the buffer name we want to search and Ido mode would search the matching names and automatically complete the minibuffer input.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Ido mode for all buffer/file reading:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(ido-everywhere)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Without this function call, Ido mode works for &lt;code&gt;C-x C-f&lt;/code&gt; and &lt;code&gt;C-x b&lt;/code&gt; but not for other minibuffers that may involve entering file or buffer names. For example, with this function call removed, if we enter &lt;code&gt;M-x ediff-files RET&lt;/code&gt;, Ido mode does not perform completions in the &lt;code&gt;ediff-files&lt;/code&gt; minibuffer. But with this function call present, Ido mode performs completions in the &lt;code&gt;ediff-files&lt;/code&gt; minibuffer too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable flexible string matching for Ido mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq ido-enable-flex-matching t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This variable setting allows flexible string matching while searching files or buffers. For example, with this setting, if we type &lt;code&gt;C-x C-f /ec/hst&lt;/code&gt;, Ido mode may automatically complete the file path to &lt;code&gt;/etc/hosts&lt;/code&gt;, i.e., Ido mode would automatically complete names even if we omit a few characters while typing out the name. Without this variable setting, the string we type must always be a valid substring (with no characters omitted within the substring) of the name we want to search.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Perform automatic completions for all kinds of minibuffer inputs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(fido-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This mode allows us to perform automatic completions in all kinds of minibuffer inputs, not just while finding files and buffers. For example, type &lt;code&gt;M-x wspmod&lt;/code&gt; and Fido mode should immediately autocomplete the partial command &lt;code&gt;wspmod&lt;/code&gt; to &lt;code&gt;whitespace-mode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As explained at the beginning of this section, Ido mode is not really necessary if we are going to enable Fido mode. But Ido mode has some nice features for file name completion that Fido mode does not have. That is why we enable both Ido mode and Fido mode in this section. For example, Ido mode can search for visited subdirectories for file name matches which can be quite convenient. Fido mode cannot do this.&lt;/p&gt; &#xA;&lt;p&gt;To test how Fido mode completes file names, first create a test directory of files as follows: &lt;code&gt;mkdir -p /tmp/a/b/; touch /tmp/a/b/foo.txt; touch /tmp/a/b/bar.txt&lt;/code&gt;. Then comment out the &lt;code&gt;(ido-mode 1)&lt;/code&gt; and &lt;code&gt;(ido-everywhere)&lt;/code&gt; lines in the Emacs initialization file, save the file, and restart Emacs, so that Ido mode is disabled and only Fido mode is enabled. Now type &lt;code&gt;C-x C-f /tmp/a/b/foo RET&lt;/code&gt;. Then type &lt;code&gt;C-x C-f /tmp/bar&lt;/code&gt;. Fido mode does not automatically complete the partial input &lt;code&gt;/tmp/bar&lt;/code&gt; to &lt;code&gt;/tmp/a/b/bar.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To test how Ido mode can be useful, now uncomment the &lt;code&gt;(ido-mode 1)&lt;/code&gt; line in the Emacs initialization file, save the file, and restart Emacs, so that Ido mode is enabled again. Now type &lt;code&gt;C-x C-f /tmp/a/b/foo.txt RET&lt;/code&gt;. Then type &lt;code&gt;C-x C-f /tmp/bar&lt;/code&gt;. Ido mode automatically completes the partial input &lt;code&gt;/tmp/bar&lt;/code&gt; to &lt;code&gt;/tmp/a/b/bar.txt&lt;/code&gt;. Once you are done experimenting like this, remember to uncomment the &lt;code&gt;(ido-everywhere)&lt;/code&gt; line too in the end.&lt;/p&gt; &#xA;&lt;h3&gt;Show Stray Whitespace&lt;/h3&gt; &#xA;&lt;p&gt;While writing text files, it can often be useful to quickly spot any trailing whitespace at the end of lines or unnecessary trailing new lines at the end of the file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Highlight trailing whitespace at the end of lines:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq-default show-trailing-whitespace t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With this variable set, any stray trailing whitespace at the end of lines is highlighted (usually with a red background) as shown in the screenshot below:&lt;/p&gt; &#xA;  &lt;!-- lorem1 --&gt; &lt;p&gt;&lt;a href=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-lorem1.png&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-lorem1.png&#34; alt=&#34;Screenshot of whitespace highlighted in Emacs&#34; width=&#34;580&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The screenshot above shows one stray trailing space in the second line and two trailing spaces in the third line. These trailing spaces can be removed with the key sequence &lt;code&gt;M-x delete-trailing-whitespace RET&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Show the end of buffer with a special glyph in the left fringe:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq-default indicate-empty-lines t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Showing the end of the buffer conspicuously can be helpful to spot any unnecessary blank lines at the end of a buffer. A blank line is one that does not contain any character except the terminating newline itself. Here is a screenshot that demonstrates this feature:&lt;/p&gt; &#xA;  &lt;!-- lorem2 --&gt; &lt;p&gt;&lt;a href=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-lorem2.png&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-lorem2.png&#34; alt=&#34;Screenshot of non-existent line indicators&#34; width=&#34;580&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The screenshot shows that there are two blank lines just before the end of the buffer. The tiny horizontal dashes on the left fringe mark the end of the buffer. Note: This is similar to how Vim displays the tilde symbol (&lt;code&gt;~&lt;/code&gt;) to show the end of the buffer. The trailing blank lines at the end of a buffer can be removed with the key sequence &lt;code&gt;M-x delete-trailing-whitespace RET&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Show buffer boundaries in the left fringe:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq-default indicate-buffer-boundaries &#39;left)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The buffer boundaries can be useful to check if the last line of the buffer has a terminating newline or not. If the buffer does not contain a terminating newline, then a top-right corner shape (&lt;code&gt;⌝&lt;/code&gt;) appears in the fringe. For example, see this screenshot of a file that does not contain a terminating newline:&lt;/p&gt; &#xA;  &lt;!-- lorem3 --&gt; &lt;p&gt;&lt;a href=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-lorem3.png&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-lorem3.png&#34; alt=&#34;Screenshot of a file without terminating newline&#34; width=&#34;580&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If there is only one line in the buffer and that line is terminated with a newline then a left-bracket (&lt;code&gt;[&lt;/code&gt;) appears in the fringe. If there are multiple lines in the buffer and the last line is terminated with a newline then a bottom-left corner shape (&lt;code&gt;⌞&lt;/code&gt;) appears in the fringe. Here is a screenshot of a file that contains a terminating newline:&lt;/p&gt; &#xA;  &lt;!-- lorem4 --&gt; &lt;p&gt;&lt;a href=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-lorem4.png&#34;&gt;&lt;img src=&#34;https://susam.github.io/blob/img/emfy/emfy-0.3.0-lorem4.png&#34; alt=&#34;Screenshot of a file with terminating newline&#34; width=&#34;580&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;To summarize, these shapes (&lt;code&gt;[&lt;/code&gt;, &lt;code&gt;⌞&lt;/code&gt;, or &lt;code&gt;⌝&lt;/code&gt;) show where the last newline of the buffer exists. The last newline of the buffer exists above the lower horizontal bar of these shapes. No newlines exist below the lower horizontal bar.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Require Final Newline&lt;/h3&gt; &#xA;&lt;p&gt;It is a good practice to terminate text files with a newline. For many types of files, such as files with extensions &lt;code&gt;.c&lt;/code&gt;, &lt;code&gt;.el&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.lisp&lt;/code&gt;, &lt;code&gt;.org&lt;/code&gt;, &lt;code&gt;.py&lt;/code&gt;, &lt;code&gt;.txt&lt;/code&gt;, etc., Emacs inserts a terminating newline automatically when we save the file with &lt;code&gt;C-x C-s&lt;/code&gt;. Emacs achieves this by ensuring that the major modes for these files set the variable &lt;code&gt;require-final-newline&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; by default. However, there are many other types of files, such as files with extensions &lt;code&gt;.ini&lt;/code&gt;, &lt;code&gt;.yaml&lt;/code&gt;, etc. for which Emacs does not insert a terminating newline automatically. We now see how to ensure that Emacs inserts a terminating newline for all types of files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Always add a newline automatically at the end of a file while saving:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq-default require-final-newline t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Many tools on Unix and Linux systems expect text files to be terminated with a newline. For example, in a crontab entry, if the final line is not followed by a terminating newline, it is ignored. Similarly, &lt;code&gt;wc -l&lt;/code&gt; does not count the final line if it is not followed by a terminating newline. That is why, in the above step we configure Emacs to ensure that it always inserts a terminating newline before saving a file.&lt;/p&gt; &#xA;&lt;h3&gt;Single Space for Sentence Spacing&lt;/h3&gt; &#xA;&lt;p&gt;Emacs uses the rather old-fashioned convention of treating a period followed by double spaces as end of sentence. However, it is more common these days to end sentences with a period followed by a single space.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Let a period followed by a single space be treated as end of sentence:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq sentence-end-double-space nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This little setting has significant consequences while editing and moving around text files. We will discuss two such consequences now with two tiny experiments:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Experiment A: Moving By Sentences:&lt;/strong&gt; To check the default behaviour, first comment out the above line of Emacs Lisp code in the Emacs initialization file, save the file, and restart Emacs. Now copy the following text:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit donec. Porttitor id lacus non consequat.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then open a new text buffer in Emacs with &lt;code&gt;C-x C-f foo.txt RET&lt;/code&gt; and paste the copied text with &lt;code&gt;C-y&lt;/code&gt;. Then type &lt;code&gt;C-a&lt;/code&gt; to go to the beginning of the line. Finally, type &lt;code&gt;M-e&lt;/code&gt; to move to the end of the sentence. Without &lt;code&gt;sentence-end-double-space&lt;/code&gt; set to &lt;code&gt;nil&lt;/code&gt;, typing &lt;code&gt;M-e&lt;/code&gt; moves the cursor all the way to the end of the line (i.e., after the second period). It ignores the first period as end of sentence because this period is followed by one space whereas Emacs expects two spaces after a period at the end of a sentence.&lt;/p&gt; &lt;p&gt;Now to verify that the above line of Emacs Lisp code works as expected, uncomment it again to enable it, save the file, restart Emacs, and then perform the above experiment again. With &lt;code&gt;sentence-end-double-space&lt;/code&gt; set to &lt;code&gt;nil&lt;/code&gt;, typing &lt;code&gt;M-e&lt;/code&gt; moves the cursor to the end of the of first sentence (i.e., after the first period). This is what we normally expect these days.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Experiment B: Filling Paragraphs:&lt;/strong&gt; While writing text files, it is customary to limit the length of each line to a certain maximum length. In Emacs, the key sequence &lt;code&gt;M-q&lt;/code&gt; invokes the &lt;code&gt;fill-paragraph&lt;/code&gt; command that works on the current paragraph and reformats it such that each line is as long as possible without exceeding 70 characters in length.&lt;/p&gt; &lt;p&gt;To check the default behaviour, first comment out the above line of Emacs Lisp code in the Emacs initialization file, save the file, and restart Emacs. Then create the same text buffer as the one in the previous experiment. Now place the cursor anywhere on text and type &lt;code&gt;M-q&lt;/code&gt; to reformat it as a paragraph. Without &lt;code&gt;sentence-end-double-space&lt;/code&gt; set to &lt;code&gt;nil&lt;/code&gt;, typing &lt;code&gt;M-q&lt;/code&gt; reformats the paragraph as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit&#xA;donec. Porttitor id lacus non consequat.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now to verify that the above line of Emacs Lisp code works as expected, uncomment it again to enable it, save the file, then restart Emacs, and then perform the above experiment again. With &lt;code&gt;sentence-end-double-space&lt;/code&gt; set to &lt;code&gt;nil&lt;/code&gt;, typing &lt;code&gt;M-q&lt;/code&gt; reformats the paragraphs as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit donec.&#xA;Porttitor id lacus non consequat.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We see that without &lt;code&gt;sentence-end-double-space&lt;/code&gt; set to &lt;code&gt;nil&lt;/code&gt;, Emacs refuses to insert a hard linebreak after the string &lt;code&gt;donec.&lt;/code&gt;, so it moves the entire word to the next line. This is a result of following the old-fashioned convention of recognizing a period followed by double spaces as end of sentence. This convention prevents inadvertently placing a hard linebreak within an abbreviation. Since it is now more common to end a sentence with a single period followed by a single space, we would like the text above to be reformatted as shown in the last example above. Setting &lt;code&gt;sentence-end-double-space&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; achieves this.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Indentation&lt;/h3&gt; &#xA;&lt;p&gt;The following point shows how to configure Emacs to insert spaces, not tabs, for indenting code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use spaces, not tabs, for indentation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq-default indent-tabs-mode nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Emacs uses a mix of tabs and spaces by default for indentation and alignment. To verify the default behaviour, first comment out the above line of Emacs Lisp code, save it, then restart Emacs, then open a new Emacs Lisp source file, say, &lt;code&gt;C-x C-f foo.el RET&lt;/code&gt; and type the following three lines of Emacs Lisp code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun foo ()&#xA;  (concat &#34;foo&#34;&#xA;          &#34;bar&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While typing the above code, do not type &lt;kbd&gt;tab&lt;/kbd&gt; or &lt;kbd&gt;space&lt;/kbd&gt; to indent the second and third lines. When you type &lt;kbd&gt;enter&lt;/kbd&gt; at the end of each line, Emacs automatically inserts the necessary tabs and spaces to indent the code. After entering this code, type &lt;code&gt;M-x whitespace-mode RET&lt;/code&gt; to visualize whitespace characters. This mode displays each space with a middle dot (&lt;code&gt;·&lt;/code&gt;) and each tab with a right pointing guillemet (&lt;code&gt;»&lt;/code&gt;). With whitespace mode enabled, you should find that the second line of code is indented with two spaces but the third line is indented with a single tab followed by two spaces. The buffer should look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun·foo·()$&#xA;··(concat·&#34;foo&#34;$&#xA;»       ··&#34;bar&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Emacs has a &lt;code&gt;tab-width&lt;/code&gt; variable that is set to &lt;code&gt;8&lt;/code&gt; by default. For every &lt;code&gt;tab-width&lt;/code&gt; columns of indentation, Emacs inserts a tab to indent the code. The third line requires 10 leading spaces for alignment, so Emacs inserts one tab character followed by two spaces to make the third line look aligned. However, this code would look misaligned with a different &lt;code&gt;tab-width&lt;/code&gt; setting. That&#39;s why we configure Emacs to use only spaces to indent and align code.&lt;/p&gt; &lt;p&gt;Now to verify that the above line of Emacs Lisp code works as expected, uncomment the function call to set &lt;code&gt;indent-tabs-mode&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, save it, then restart Emacs, and then perform the above experiment involving the three lines of Emacs Lisp code again. This time, you should see that no tabs are used for indentation. Only spaces are used for indentation. Typing &lt;code&gt;M-x whitespace-mode RET&lt;/code&gt; would display this in the buffer:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun·foo·()$&#xA;··(concat·&#34;foo&#34;$&#xA;··········&#34;bar&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In some type of files, we must use literal tabs. For example, in &lt;code&gt;Makefile&lt;/code&gt;, the syntax of target rules require that the commands under a target are indented by literal tab characters. In such files, Emacs is smart enough to always use literal tabs for indentation regardless of the above variable setting.&lt;/p&gt; &lt;p&gt;Mixing tabs and spaces for indenting source code can be problematic, especially, when the author of code or Emacs inadvertently uses tabs for alignment (as opposed to using tabs for indentation only which would be fine) and another programmer views the file with an editor with a different tab width setting. In fact, in the experiment above, Emacs did use a literal tab character to align code which would cause the code to look misaligned on another editor with a different tab width setting. See &lt;a href=&#34;https://www.emacswiki.org/emacs/TabsAreEvil&#34;&gt;Tabs Are Evil&lt;/a&gt; for more details on this topic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Display the distance between two tab stops as whitespace that is as wide as 4 characters:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq-default tab-width 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that this primarily affects how a literal tab character is displayed. Further, along with the previous variable setting where we set &lt;code&gt;indent-tabs-mode&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;, in some types of files, this variable setting decides how many spaces are inserted when we hit the &lt;kbd&gt;tab&lt;/kbd&gt; key. For example, in text buffers, on hitting the &lt;kbd&gt;tab&lt;/kbd&gt; key, as many spaces are inserted as are necessary to move the cursor to the next tab stop where the distance between two tab stops is assumed to be &lt;code&gt;tab-width&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In some type of files, we must use literal tabs. For example, in &lt;code&gt;Makefile&lt;/code&gt;, the syntax of target rules require that the commands under a target are indented by a literal tab character. In such files, Emacs displays the distance between two tab stops as whitespace that is as wide as 8 characters by default. This default setting is often too large for many users. They feel that a tab width of 8 consumes too much horizontal space on the screen. The variable setting above reduces the tab width to 4. Of course, different users may have different preferences for the tab width. Therefore, users are encouraged to modify this variable setting to a value they prefer or omit the above line of Emacs Lisp code from their Emacs initialization file to leave it to the default value of 8.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set indentation levels according to popular coding conventions for various languages:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq c-basic-offset 4)&#xA;(setq js-indent-level 2)&#xA;(setq css-indent-offset 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Emacs uses 2 spaces for indentation in C by default. We change this to 4 spaces.&lt;/p&gt; &lt;p&gt;Emacs uses 4 spaces for indentation in JavaScript and CSS by default. We change this to 2 spaces.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Highlight Parentheses&lt;/h3&gt; &#xA;&lt;p&gt;The following points describe how we enable highlighting of parentheses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The next point shows how to enable highlighting of matching pair of parentheses. By default, there is a small delay between the movement of a cursor and the highlighting of the matching pair of parentheses. The following line of code gets rid of this delay:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq show-paren-delay 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This line of code must come before the one in the next point for it to be effective.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Highlight matching parentheses:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(show-paren-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A pair of parenthesis is highlighted when the cursor is on the opening parenthesis of the pair or just after the closing parenthesis of the pair.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keep Working Directory Tidy&lt;/h3&gt; &#xA;&lt;p&gt;Emacs creates a number of temporary files to ensure that we do not inadvertently lose our work while editing files. However, these files can clutter our working directories. This section shows some ways to keep the current working directory tidy by asking Emacs to manage these files at a different location.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a directory to keep auto-save files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(make-directory &#34;~/.tmp/emacs/auto-save/&#34; t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the next point, we discuss auto-save files in detail and ask Emacs to write auto-save files to a separate directory instead of writing them to our working directory. Before we do that, we need to create the directory we will write the auto-save files to, otherwise Emacs would fail to write the auto-save files and display the following error: &lt;code&gt;Error (auto-save): Auto-saving foo.txt: Opening output file: No such file or directory, /Users/susam/.tmp/emacs/auto-save/#!tmp!foo.txt#&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Note that this issue occurs only for auto-save files, not for backup files discussed in the third point of this list. If the parent directory for backup files is missing, Emacs creates it automatically. However, Emacs does not create the parent directory for auto-save files automatically, so we need the above line of Emacs Lisp code to create it ourselves.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write auto-save files to a separate directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq auto-save-file-name-transforms &#39;((&#34;.*&#34; &#34;~/.tmp/emacs/auto-save/&#34; t)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If we open a new file or edit an existing file, say, &lt;code&gt;foo.txt&lt;/code&gt; and make some changes that have not been saved yet, Emacs automatically creates an auto-save file named &lt;code&gt;#foo.txt#&lt;/code&gt; in the same directory as &lt;code&gt;foo.txt&lt;/code&gt; every 300 keystrokes, or after 30 seconds of inactivity. Emacs does this to ensure that the unsaved changes are not lost inadvertently. For example, if the system crashes suddenly while we are editing a file &lt;code&gt;foo.txt&lt;/code&gt;, the auto-save file would keep a copy of our unsaved worked. The next time we try to edit &lt;code&gt;foo.txt&lt;/code&gt;, Emacs would warn that auto-save data already exists and it would then suggest us to recover the auto-save data using &lt;code&gt;M-x recover-this-file RET&lt;/code&gt;. These auto-save files are removed automatically after we save our edits but until then they clutter our working directories. The above line of Emacs Lisp code ensures that all auto-save files are written to a separate directory, thus leaving our working directories tidy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write backup files to a separate directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq backup-directory-alist &#39;((&#34;.&#34; . &#34;~/.tmp/emacs/backup/&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If we create a new file or edit an existing file, say, &lt;code&gt;foo.txt&lt;/code&gt;, then make some changes to it, and save it, the previous copy of the file is saved as a backup file &lt;code&gt;foo.txt~&lt;/code&gt;. These backup files too clutter our working direcories. The above line of Emacs Lisp code ensures that all backup files are written to a separate directory, thus leaving our working directories tidy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create backup files by copying our files, not moving our files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq backup-by-copying t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Everytime Emacs has to create a backup file, it moves our file to the backup location, then creates a new file at the same location as that of the one we are editing, copies our content to this new file, and then resumes editing our file. This causes any hard link referring to the original file to be now referring to the backup file.&lt;/p&gt; &lt;p&gt;To experience this problem due to the default behaviour, first comment out the above line of Emacs Lisp code in the Emacs initialization file, save the file, and restart Emacs. Then create a new file along with a hard link to it with these commands: &lt;code&gt;echo foo &amp;gt; foo.txt; ln foo.txt bar.txt; ls -li foo.txt bar.txt&lt;/code&gt;. The output should show that &lt;code&gt;foo.txt&lt;/code&gt; and &lt;code&gt;bar.txt&lt;/code&gt; have the same inode number and size because they both refer to the same file. Now run &lt;code&gt;emacs foo.txt&lt;/code&gt; to edit the file, add a line or two to the file, and save the file with &lt;code&gt;C-x C-s&lt;/code&gt;. Now run &lt;code&gt;ls -li foo.txt bar.txt&lt;/code&gt; again. The output should show that &lt;code&gt;foo.txt&lt;/code&gt; now has a new inode number and size while &lt;code&gt;bar.txt&lt;/code&gt; still has the original inode number and size. The file &lt;code&gt;bar.txt&lt;/code&gt; now refers to the backup file instead of referring to the new &lt;code&gt;foo.txt&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;To see the improved behaviour with the above line of Emacs Lisp code, uncomment it to enable it again in the Emacs initialization file, save the file, restart Emacs and perform the same experiment again. After we save the file, we should see that both &lt;code&gt;foo.txt&lt;/code&gt; and &lt;code&gt;bar.txt&lt;/code&gt; have the same inode number and size.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Disable lockfiles:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq create-lockfiles nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As soon as we make an edit to a file, say &lt;code&gt;foo.txt&lt;/code&gt;, Emacs creates a lockfile &lt;code&gt;.#foo.txt&lt;/code&gt;. If we then launch another instance of Emacs and try to edit this file, Emacs would refuse to edit the file, then warn us that the file is locked by another Emacs session, and provide us a few options regarding whether we want to steal the lock, proceed with editing anyway, or quit editing it. These lockfiles are removed automatically as soon as we save our edits but until then they clutter our directories. Unlike auto-save files and backup files, there is no way to tell Emacs to write these files to a different directory. We can however disable lockfile creation with the above line of Emacs Lisp code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; Note that disabling lockfiles could be risky if you are in the habit of launching multiple Emacs instances while editing files. With such a habit, it is easy to make the mistake of opening the same file in two different Emacs instances and inadvertently overwrite changes made via one instance with changes made via another instance. The lockfiles are hidden files anyway, so they should not bother you in directory listings. If they bother you in, say, &lt;code&gt;git status&lt;/code&gt; output, consider ignoring the lockfiles in &lt;code&gt;.gitignore&lt;/code&gt; instead of disabling them. Having said that, it may be okay to disable lockfiles if you are in the habit of launching only a single instance of Emacs for the entire lifetime of their desktop session and edit all files via that single instance. The &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#emacs-server&#34;&gt;Emacs Server&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#emacs-launcher&#34;&gt;Emacs Launcher&lt;/a&gt; sections later discuss techniques about how to make this usage style more convenient. If you are willing to follow this style of using Emacs, then it may be okay to disable lockfiles. To summarize, if you are in doubt, comment out or remove the above line of Emacs Lisp code to keep lockfiles enabled.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install Packages&lt;/h3&gt; &#xA;&lt;p&gt;The following points describe how we automate the installation of Emacs packages we need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The following code disables TLS 1.3 to work around a known bug in GNU Emacs versions 26.1 and 26.2:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(when (and (version&amp;lt; emacs-version &#34;26.3&#34;) (&amp;gt;= libgnutls-version 30603))&#xA;  (setq gnutls-algorithm-priority &#34;NORMAL:-VERS-TLS1.3&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;See &lt;a href=&#34;https://debbugs.gnu.org/34341&#34;&gt;https://debbugs.gnu.org/34341&lt;/a&gt; for more details on the bug. This code is not required while using GNU Emacs version 26.3 or 27.1 or a later version although leaving this code intact should do no harm because this code checks whether the Emacs version is less than 26.3 before applying the workaround.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When we install packages using &lt;code&gt;package-install&lt;/code&gt; (coming up soon in a later point), a few customizations are written automatically into the Emacs initialization file (&lt;code&gt;~/.emacs&lt;/code&gt; in our case). This has the rather undesirable effect of our carefully handcrafted &lt;code&gt;~/.emacs&lt;/code&gt; being meddled by &lt;code&gt;package-install&lt;/code&gt;. To be precise, it is the &lt;code&gt;custom&lt;/code&gt; package invoked by &lt;code&gt;package-install&lt;/code&gt; that intrudes into our Emacs initialization file. To prevent that, we ask &lt;code&gt;custom&lt;/code&gt; to write the customizations to a separate file with the following code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq custom-file (concat user-emacs-directory &#34;custom.el&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that this line of code must occur before the &lt;code&gt;package-install&lt;/code&gt; call.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Emacs does not load the custom-file automatically, so we add the following code to load it:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(load custom-file t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is important to load the custom-file because it may contain customizations we have written to it directly or via the customize interface (say, using &lt;code&gt;M-x customize RET&lt;/code&gt;). If we don&#39;t load this file, then any customizations written to this file will not become available in our Emacs environment.&lt;/p&gt; &lt;p&gt;The boolean argument &lt;code&gt;t&lt;/code&gt; ensures that no error occurs when the custom-file is missing. Without it, when Emacs starts for the first time with our initialization file and there is no custom-file yet, the following error occurs: &lt;code&gt;File is missing: Cannot open load file, No such file or directory, ~/.emacs.d/custom.el&lt;/code&gt;. Setting the second argument to &lt;code&gt;t&lt;/code&gt; prevents this error when Emacs is run with our initialization file for the first time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This is necessary for defining the &lt;code&gt;package-archives&lt;/code&gt; list we will use in the next point.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Milkypostman&#39;s Emacs Lisp Package Archive (MELPA) to the list of archives to fetch packages from:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;) t)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default only GNU Emacs Lisp Package Archive (ELPA) is in the list of archives to fetch from. The above line adds MELPA too to the list. If you are curious to see what the original value of &lt;code&gt;package-archives&lt;/code&gt; was and what it is now due to the above line, type &lt;code&gt;C-h o package-archives RET&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initialize the package system:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While initializing the package system, this call also initializes the &lt;code&gt;package-archive-contents&lt;/code&gt; variable used in the next point.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download package descriptions from package archives only if they have not been downloaded before:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(unless package-archive-contents&#xA;  (package-refresh-contents))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first line checks whether package descriptions from package archives have been fetched. See the &lt;code&gt;~/.emacs.d/elpa/archives&lt;/code&gt; or &lt;code&gt;~/.config/emacs/elpa/archives&lt;/code&gt; directory for archive contents in case you are curious. If the archive contents have not been fetched then the second line fetches them. Thus the second line executes only when the Emacs initialization is loaded for the first time. The first time Emacs starts with the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/.emacs&#34;&gt;.emacs&lt;/a&gt; file of this repository, it takes a while to fetch the package archives. However, once the package archives have been fetched and Emacs is started again later, it starts instantly because the code above takes care not to fetch package archives again when it is already cached locally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install some packages:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(dolist (package &#39;(markdown-mode paredit rainbow-delimiters))&#xA;  (unless (package-installed-p package)&#xA;    (package-install package)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This loops iterates over each package name in a list of packages. For each package, it checks whether the package is installed with the &lt;code&gt;package-installed-p&lt;/code&gt; function. If it is not installed, then it is installed with the &lt;code&gt;package-install&lt;/code&gt; function. You can modify the list of packages in the first line to add other packages that you might need in future or remove packages that you do not want.&lt;/p&gt; &lt;p&gt;The first time Emacs starts with this initialization file, it takes a while to install the packages we need. However, once the packages are installed and Emacs is started again later, it starts instantly because the code above takes care to not attempt installing packages that are already installed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Add Hooks&lt;/h3&gt; &#xA;&lt;p&gt;This section describes how to enable Paredit and Rainbow Delimiters. These are not absolutely essential for using Emacs. However many Emacs Lisp programmers find them useful while some do not.&lt;/p&gt; &#xA;&lt;p&gt;In case you decide not to use either Paredit or Rainbow Delimiters, then you may skip this section. In that case, you might also want to remove these packages from the &lt;code&gt;dolist&lt;/code&gt; variable discussed in the previous section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit while editing Emacs Lisp code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;emacs-lisp-mode-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Paredit helps in keeping parentheses balanced and in performing structured editing of S-expressions. To test that Paredit is enabled for editing Emacs Lisp code, open a new Emacs Lisp file, say, &lt;code&gt;foo.el&lt;/code&gt;. Then type &lt;code&gt;(&lt;/code&gt;. Paredit should automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit in eval-expression minibuffer:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;eval-expression-minibuffer-setup-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, enter &lt;code&gt;M-:&lt;/code&gt; to bring up the eval-expression minbuffer and type &lt;code&gt;(&lt;/code&gt;. Paredit should automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit while interactively evaluating Emacs Lisp expressions in inferior-emacs-lisp-mode (IELM):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;ielm-mode-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, enter &lt;code&gt;M-x ielm RET&lt;/code&gt;. When the &lt;code&gt;*ielm*&lt;/code&gt; buffer appears, type &lt;code&gt;(&lt;/code&gt;. Paredit should automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit in Lisp interaction mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;lisp-interaction-mode-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, first open a non-Lisp file, say, &lt;code&gt;C-x C-f foo.txt RET&lt;/code&gt;. Now type &lt;code&gt;(&lt;/code&gt;. Note that no corresponding &lt;code&gt;)&lt;/code&gt; is inserted because we are not in Lisp interaction mode yet. Delete &lt;code&gt;(&lt;/code&gt;. Then start Lisp interaction mode with the command &lt;code&gt;M-x lisp-interaction-mode RET&lt;/code&gt;. Type &lt;code&gt;(&lt;/code&gt; again. Paredit should now automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Paredit while editing Lisp code other than Emacs Lisp:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;lisp-mode-hook &#39;enable-paredit-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, open a new Common Lisp source file, say, &lt;code&gt;C-x C-f foo.lisp RET&lt;/code&gt;. Then type &lt;code&gt;(&lt;/code&gt;. Paredit should automatically insert the corresponding &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Rainbow Delimiters while editing Emacs Lisp code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;emacs-lisp-mode-hook &#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Rainbow Delimiters color nested parentheses with different colors according to the depth level of each parenthesis. To test this open a new Emacs Lisp file, say, &lt;code&gt;foo.el&lt;/code&gt;. Then type &lt;code&gt;((((&lt;/code&gt;. Rainbow Delimiters should color each parenthesis differently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Rainbow Delimiters while interactively evaluating Emacs Lisp expressions in inferior-emacs-lisp-mode (IELM):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;ielm-mode-hook &#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, enter &lt;code&gt;M-x ielm RET&lt;/code&gt;. When the &lt;code&gt;*ielm*&lt;/code&gt; buffer comes up, type &lt;code&gt;((((&lt;/code&gt;. Rainbow Delimiters should color each parenthesis differently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Rainbow Delimiters in Lisp interaction mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;lisp-interaction-mode-hook &#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, first open a non-Lisp file, say, &lt;code&gt;foo.txt&lt;/code&gt;. Now type &lt;code&gt;((((&lt;/code&gt;. Then start Lisp interaction mode with the command &lt;code&gt;M-x lisp-interaction-mode RET&lt;/code&gt;. Rainbow Delimiters should now color each parenthesis differently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Rainbow Delimiters while editing Lisp code other than Emacs Lisp:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;lisp-mode-hook &#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To test this, open a new Common Lisp source file, say, &lt;code&gt;foo.lisp&lt;/code&gt;. Then type &lt;code&gt;((((&lt;/code&gt;. Rainbow Delimiters should color each parenthesis differently.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may have noticed that we did not enable Rainbow Delimiters for eval-expression. That is because it does not work as expected as of Dec 2021. See &lt;a href=&#34;https://github.com/Fanael/rainbow-delimiters/issues/57&#34;&gt;https://github.com/Fanael/rainbow-delimiters/issues/57&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Colorful Parentheses&lt;/h3&gt; &#xA;&lt;p&gt;The default colors that the Rainbow Delimiters package chooses for the nested parentheses are too subtle to easily recognize the matching pair of parentheses. Some Lisp programmers like to customize the colors to make the parentheses look more colorful. This section shows one way to do this.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This is necessary to use the various Rainbow Delimiters faces that appear in the next point.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;rainbow-delimiters)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set different colors for parentheses at different nesting level.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(set-face-foreground &#39;rainbow-delimiters-depth-1-face &#34;#c66&#34;)  ; red&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-2-face &#34;#6c6&#34;)  ; green&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-3-face &#34;#69f&#34;)  ; blue&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-4-face &#34;#cc6&#34;)  ; yellow&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-5-face &#34;#6cc&#34;)  ; cyan&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-6-face &#34;#c6c&#34;)  ; magenta&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-7-face &#34;#ccc&#34;)  ; light gray&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-8-face &#34;#999&#34;)  ; medium gray&#xA;(set-face-foreground &#39;rainbow-delimiters-depth-9-face &#34;#666&#34;)  ; dark gray&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom Command and Key Sequence&lt;/h3&gt; &#xA;&lt;p&gt;In this section we will see how to make our own custom command.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a very simple custom command to display the current time in the echo area at the bottom of the Emacs frame:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun show-current-time ()&#xA;  &#34;Show current time.&#34;&#xA;  (interactive)&#xA;  (message (current-time-string)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This command can be invoked by typing &lt;code&gt;M-x show-current-time RET&lt;/code&gt;. On running this command, the current time appears in the echo area.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a custom key sequence to invoke the command defined in the previous point:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(global-set-key (kbd &#34;C-c t&#34;) &#39;show-current-time)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now the same command can be invoked by typing &lt;code&gt;C-c t&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create another custom key sequence to delete trailing whitespace using the &lt;code&gt;delete-trailing-whitespace&lt;/code&gt; introduced in the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#show-stray-whitespace&#34;&gt;Show Stray Whitespace&lt;/a&gt; section:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(global-set-key (kbd &#34;C-c d&#34;) &#39;delete-trailing-whitespace)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the custom key sequence in this point and the previous one only serve as examples. You should define key sequences based on your needs that you find more convenient.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Emacs Server&lt;/h3&gt; &#xA;&lt;p&gt;Many users prefer to run a single instance of Emacs and do all their editing activities via this single instance. It is possible to use Emacs alone for all file browsing needs and never use the terminal again. Despite the sophisticated terminal and file browsing capabilities of Emacs, some users still like to use a traditional terminal to move around a file system, find files, and edit them. This practice may become inconvenient quite soon because it would lead to the creation of too many Emacs frames (desktop-level windows) and processes. This section explains how to create a single Emacs server, a single Emacs frame, and edit all your files in this frame via the server even while you are browsing files in the terminal. You don&#39;t need this section and the next one if you use Emacs for all your file browsing needs but if you don&#39;t, this section may be useful. Let us now see how we start the Emacs server in our Emacs initialization file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This is necessary to use the function &lt;code&gt;server-running-p&lt;/code&gt; coming up in the next point:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;server)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If we omit the above line of Emacs Lisp code, we will encounter the following error when we try to use &lt;code&gt;server-running-p&lt;/code&gt; discussed in the next point: &lt;code&gt;Symbol’s function definition is void: server-running-p&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If there is no Emacs server running, start an Emacs server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(unless (server-running-p)&#xA;  (server-start))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;unless&lt;/code&gt; expression ensures that there is no Emacs server running before starting a new Emacs server. If we omit the &lt;code&gt;unless&lt;/code&gt; expression, the following error would occur if an Emacs server is already running: &lt;code&gt;Warning (server): Unable to start the Emacs server. There is an existing Emacs server, named &#34;server&#34;. To start the server in this Emacs process, stop the existing server or call ‘M-x server-force-delete’ to forcibly disconnect it.&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Finally, the &lt;code&gt;server-start&lt;/code&gt; function call starts an Emacs server.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When Emacs starts for the first time with the above lines of Emacs Lisp code in its initialization file, it starts an Emacs server. Now the following commands can be used on a terminal to edit files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;emacs&lt;/code&gt; or &lt;code&gt;emacs foo.txt bar.txt&lt;/code&gt;: Starts another instance of Emacs. It does not start a new server due to the &lt;code&gt;unless&lt;/code&gt; expression discussed above. Typically, we will not use this because we don&#39;t want to launch a second instance of Emacs. But it is good to know that this command still works as expected in case we ever need it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;emacsclient foo.txt bar.txt&lt;/code&gt;: Opens files in the existing Emacs instance via the Emacs server. The command waits for us to finish editing all the files. It blocks the terminal until then. When we are done editing a file, we must type &lt;code&gt;C-x #&lt;/code&gt; to tell Emacs to switch to the next file. Once we are done editing all the files, the &lt;code&gt;emacsclient&lt;/code&gt; command exits and the shell prompt returns on the terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;emacsclient -n foo.txt bar.txt&lt;/code&gt;: Opens files in the existing Emacs instance but does not wait for us to finish editing. The command exits immediately and the shell prompt returns immediately on the terminal.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this setup, the Emacs server quits automatically when we close the first Emacs instance that started the Emacs server. Running the &lt;code&gt;emacs&lt;/code&gt; command or starting Emacs via another method after that would start the Emacs server again.&lt;/p&gt; &#xA;&lt;p&gt;It is worth noting here that there are other ways to start the Emacs server and to use the &lt;code&gt;emacsclient&lt;/code&gt; command. See section &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html&#34;&gt;Using Emacs as a Server&lt;/a&gt; and section &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html&#34;&gt;&lt;code&gt;emacsclient&lt;/code&gt; Options&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Emacs Launcher&lt;/h3&gt; &#xA;&lt;p&gt;In the previous section, we saw how our Emacs initialization file ensures that an Emacs server is started when we run &lt;code&gt;emacs&lt;/code&gt; for the first time. Once Emacs server has started, we can edit new files from the terminal using the &lt;code&gt;emacsclient&lt;/code&gt; command. This section describes a script named &lt;code&gt;em&lt;/code&gt; that can automatically decide whether to run &lt;code&gt;emacs&lt;/code&gt; or &lt;code&gt;emacsclient&lt;/code&gt; depending on the situation.&lt;/p&gt; &#xA;&lt;p&gt;As mentioned in the previous section, you don&#39;t need this section if you use Emacs for all your file browsing needs but if you don&#39;t, this section may be useful. Further, it is worth mentioning that this script solves a very specific problem of using a single command named &lt;code&gt;em&lt;/code&gt; to both launch a new Emacs server as well as to open existing files in an existing Emacs frame via the existing Emacs server. If you have this specific problem, you may find this script helpful. However, if you do not have this problem or if you have a different problem to solve, it would be useful to understand how &lt;code&gt;emacsclient&lt;/code&gt; works and read the related documentation mentioned in the previous section and then modify this script or write your own shell script, shell alias, or shell function that solves your problems.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;em&lt;/code&gt; script should be already present on the system if the steps in the &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/#get-started&#34;&gt;Get Started&lt;/a&gt; section were followed. The third step there installs this script to &lt;code&gt;/usr/local/bin/em&lt;/code&gt;. Now we discuss every line of this script in detail.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When &lt;code&gt;em&lt;/code&gt; is run without any arguments, start a new Emacs process:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh&#xA;if [ &#34;$#&#34; -eq 0 ]&#xA;then&#xA;    echo &#34;Starting new Emacs process ...&#34; &amp;gt;&amp;amp;2&#xA;    nohup emacs &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This Emacs process launches a new Emacs frame. Further, if an Emacs server is not running, it starts a new Emacs server. The &lt;code&gt;nohup&lt;/code&gt; command ensures that this Emacs process is not terminated when we close the terminal or the shell where we ran the &lt;code&gt;em&lt;/code&gt; command.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When &lt;code&gt;em&lt;/code&gt; is run with one or more filenames as arguments and there is an Emacs server already running, edit the files using the existing Emacs server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;elif emacsclient -n &#34;$@&#34; 2&amp;gt; /dev/null&#xA;then&#xA;    echo &#34;Opened $@ in Emacs server&#34; &amp;gt;&amp;amp;2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;However, if there is no Emacs server already running, the above command in the &lt;code&gt;elif&lt;/code&gt; clause fails and the execution moves to the &lt;code&gt;else&lt;/code&gt; clause explained in the next point.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When &lt;code&gt;em&lt;/code&gt; is run with one or more filenames as arguments and there is no Emacs server running, start a new Emacs process to edit the files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;else&#xA;    echo &#34;Opening $@ in a new Emacs process ...&#34; &amp;gt;&amp;amp;2&#xA;    nohup emacs &#34;$@&#34; &amp;amp;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The new Emacs process also starts a new Emacs server.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now that we know what the &lt;code&gt;em&lt;/code&gt; script does, let us see the various ways of using this script as a command:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;em&lt;/code&gt;: Start a new instance of Emacs. If there is no Emacs server running, this ends up starting an Emacs server too. Normally, this command should be run only once after logging into the desktop environment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;em foo.txt bar.txt&lt;/code&gt;: Edit files in an existing instance of Emacs via Emacs server. If no Emacs server is running, this ends up starting an Emacs server automatically. This command is meant to be used multiple times as needed for editing files while browsing the file system in a terminal.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That&#39;s it! Only two things to remember from this section: start Emacs with &lt;code&gt;em&lt;/code&gt; and edit files with &lt;code&gt;em foo.txt&lt;/code&gt;, &lt;code&gt;em foo.txt bar.txt&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Opinion References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/5243421/303363&#34;&gt;Give paredit mode a chance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lobste.rs/s/vgjknq/emacs_begin_learning_common_lisp#c_0y6zpd&#34;&gt;Never warmed up to paredit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lobste.rs/s/vgjknq/emacs_begin_learning_common_lisp#c_1n78vl&#34;&gt;Coloring each paren differently only adds noise&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Channels&lt;/h2&gt; &#xA;&lt;p&gt;The following channels are available for asking questions, seeking help and receiving updates regarding this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub: &lt;a href=&#34;http://github.com/susam/emfy/issues&#34;&gt;emfy/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/susam&#34;&gt;@susam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matrix: &lt;a href=&#34;https://matrix.to/#/#susam:matrix.org&#34;&gt;#susam:matrix.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Libera: &lt;a href=&#34;https://web.libera.chat/#susam&#34;&gt;#susam&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are welcome to follow or subscribe to one or more of these channels to receive updates and ask questions about this project.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This is free and open source software. You can use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of it, under the terms of the MIT License. See &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;This software is provided &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, express or implied. See &lt;a href=&#34;https://raw.githubusercontent.com/susam/emfy/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>