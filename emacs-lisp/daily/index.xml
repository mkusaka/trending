<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-23T01:35:30Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>clojure-emacs/clj-refactor.el</title>
    <updated>2022-08-23T01:35:30Z</updated>
    <id>tag:github.com,2022-08-23:/clojure-emacs/clj-refactor.el</id>
    <link href="https://github.com/clojure-emacs/clj-refactor.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CIDER extension that provides powerful commands for refactoring Clojure code.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/clj-refactor&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/clj-refactor-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/clj-refactor&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/clj-refactor-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/clojure-emacs/clj-refactor.el&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/clojure-emacs/clj-refactor.el.svg?style=svg&#34; alt=&#34;circleci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/nFPpynQPME&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;clj-refactor.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;clj-refactor&lt;/code&gt; provides powerful refactoring functionality for Clojure projects. It complements the refactoring functionality you&#39;d find in &lt;a href=&#34;https://github.com/clojure-emacs/clojure-mode&#34;&gt;clojure-mode&lt;/a&gt; and &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a small teaser, helping you add a missing libspec:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/clojure-emacs/clj-refactor.el/master/examples/add-missing-libspec.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s highly recommended to install &lt;code&gt;clj-refactor&lt;/code&gt; through &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s available on &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt; and &lt;a href=&#34;http://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install clj-refactor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;clj-refactor)&#xA;&#xA;(defun my-clojure-mode-hook ()&#xA;    (clj-refactor-mode 1)&#xA;    (yas-minor-mode 1) ; for adding require/use/import statements&#xA;    ;; This choice of keybinding leaves cider-macroexpand-1 unbound&#xA;    (cljr-add-keybindings-with-prefix &#34;C-c C-m&#34;))&#xA;&#xA;(add-hook &#39;clojure-mode-hook #&#39;my-clojure-mode-hook)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The more advanced refactorings require our nREPL middleware &lt;a href=&#34;https://github.com/clojure-emacs/refactor-nrepl&#34;&gt;refactor-nrepl&lt;/a&gt;. From version &lt;em&gt;2.2.0&lt;/em&gt; onwards if &lt;code&gt;cider-jack-in&lt;/code&gt; is used it is injected automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;profiles.clj&lt;/code&gt; or &lt;code&gt;profile.boot&lt;/code&gt; don&#39;t need to be modified anymore for the above usecase!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On the other hand if a standalone REPL or an embedded nREPL server is used you will need to manually add this dependency (see below).&lt;/p&gt; &#xA;&lt;p&gt;Either in your project&#39;s &lt;code&gt;project.clj&lt;/code&gt; or in the &lt;code&gt;:user&lt;/code&gt; profile found at &lt;code&gt;~/.lein/profiles.clj&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;:plugins [[refactor-nrepl &#34;3.5.5&#34;]&#xA;          [cider/cider-nrepl &#34;0.28.5&#34;]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the much longer &lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el/wiki/installation&#34;&gt;installation&lt;/a&gt; page in the wiki for a less opinionated approach.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;clj-refactor&lt;/code&gt; has quite a few settings you can tweak to change the behavior of various commands. You can read more about that &lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el/wiki#customization&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;clj-refactor&lt;/th&gt; &#xA;   &lt;th&gt;refactor-nrepl&lt;/th&gt; &#xA;   &lt;th&gt;CIDER&lt;/th&gt; &#xA;   &lt;th&gt;Clojure&lt;/th&gt; &#xA;   &lt;th&gt;Java&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.4.0&lt;/td&gt; &#xA;   &lt;td&gt;2.4.0&lt;/td&gt; &#xA;   &lt;td&gt;0.17, 0.18&lt;/td&gt; &#xA;   &lt;td&gt;1.7+&lt;/td&gt; &#xA;   &lt;td&gt;8+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.5.0&lt;/td&gt; &#xA;   &lt;td&gt;2.5.0&lt;/td&gt; &#xA;   &lt;td&gt;0.24&lt;/td&gt; &#xA;   &lt;td&gt;1.8+&lt;/td&gt; &#xA;   &lt;td&gt;8+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.0.0+&lt;/td&gt; &#xA;   &lt;td&gt;3.0.0+&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;   &lt;td&gt;1.8+&lt;/td&gt; &#xA;   &lt;td&gt;8+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Middleware&lt;/h3&gt; &#xA;&lt;p&gt;Most users will not need to worry about this, but if you wish to configure middleware yourself, the name of the middleware is:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;refactor-nrepl.middleware/wrap-refactor&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Unlike &lt;code&gt;cider-nrepl&lt;/code&gt; which defines many middleware with a handful of related ops, &lt;code&gt;refactor-repl&lt;/code&gt; defines a single middleware which houses all of the provided nREPL ops.&lt;/p&gt; &#xA;&lt;h3&gt;In case &lt;code&gt;refactor-nrepl&lt;/code&gt; is used for advanced (AST-based) refactorings&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/clojure/tools.analyzer&#34;&gt;analyzer&lt;/a&gt; &lt;code&gt;refactor-nrepl&lt;/code&gt; uses needs to eval the code too in order to be able to build the AST we can work with. If that causes side effects like writing files, opening connections to servers, modifying databases, etc. performing certain refactoring functions on your code will do that, too.&lt;/p&gt; &#xA;&lt;p&gt;By default the user is warned about this when an AST dependent feature is invoked. If this warning is an annoyance and the project can be evalled without any risks set &lt;code&gt;cljr-warn-on-eval&lt;/code&gt; to nil so &lt;code&gt;cljr-eagerly-build-asts-on-startup&lt;/code&gt; can take effect.&lt;/p&gt; &#xA;&lt;p&gt;We create ASTs for all the namespaces at REPL start up if &lt;code&gt;cljr-warn-on-eval&lt;/code&gt; is set to nil. If that is not desired set &lt;code&gt;cljr-eagerly-build-asts-on-startup&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; in your emacs configuration. AST dependent features at the moment are &lt;code&gt;find usages&lt;/code&gt;, &lt;code&gt;rename symbol&lt;/code&gt;, &lt;code&gt;extract function&lt;/code&gt;, &lt;code&gt;inline symbol&lt;/code&gt;, &lt;code&gt;rename file or dir&lt;/code&gt;, &lt;code&gt;change function signature&lt;/code&gt;, &lt;code&gt;promote function&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;All functions in &lt;code&gt;clj-refactor&lt;/code&gt; have a two-letter mnemonic shortcut. E.g. &lt;code&gt;rs&lt;/code&gt; for &lt;code&gt;cljr-rename-symbol&lt;/code&gt;. Given the prefix choice in the example setup you&#39;d call this function by hitting &lt;code&gt;C-c C-m rs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the wiki for a complete &lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el/wiki&#34;&gt;list of available refactorings&lt;/a&gt;, demonstrations and customization points.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re having trouble remembering the mnemonic shortcuts, check out the &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;hydra&lt;/a&gt; powered popup menus. They are described &lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el/wiki/Hydra&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;An extensive changelog is available &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/clj-refactor.el/master/CHANGELOG.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Yes, please do. There&#39;s a suite of tests, so remember to add tests for your specific feature, or we might break it later.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll find the repo at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/clojure-emacs/clj-refactor.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fetch the test dependencies, install &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;cask&lt;/a&gt; if you haven&#39;t already, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/clj-refactor&#xA;$ cask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before submitting a patch, or a pull request, make sure all tests are passing and that your patch is in line with the &lt;a href=&#34;https://raw.githubusercontent.com/clojure-emacs/clj-refactor.el/master/.github/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/clojure-emacs/clj-refactor.el/graphs/contributors&#34;&gt;everyone&lt;/a&gt; who&#39;s contributed so far!&lt;/p&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;p&gt;Due to clj-refactor&#39;s kinship with CIDER, you can get help for it in most CIDER-related support channels.&lt;/p&gt; &#xA;&lt;h3&gt;Discord&lt;/h3&gt; &#xA;&lt;p&gt;CIDER has its own Discord chat server, created by CIDER&#39;s author Bozhidar. You can join the Discord server &lt;a href=&#34;https://discord.com/invite/nFPpynQPME&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Slack&lt;/h3&gt; &#xA;&lt;p&gt;CIDER has an official &lt;a href=&#34;https://clojurians.slack.com/&#34;&gt;Clojurians Slack&lt;/a&gt; - &lt;code&gt;#cider&lt;/code&gt;. The channel is very active and is a great way to get a handle on some of the maintainers and interact with other CIDER/clj-refactor users. If you need an invite you can go &lt;a href=&#34;http://clojurians.net/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also another channel named &lt;code&gt;#emacs&lt;/code&gt; for generic Emacs discussions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2012-2014 Magnar Sveen Copyright © 2014-2022 Magnar Sveen, Lars Andersen, Benedek Fazekas, Bozhidar Batsov&lt;/p&gt; &#xA;&lt;p&gt;Author: Magnar Sveen &lt;a href=&#34;mailto:magnars@gmail.com&#34;&gt;magnars@gmail.com&lt;/a&gt; Lars Andersen &lt;a href=&#34;mailto:expez@expez.com&#34;&gt;expez@expez.com&lt;/a&gt; Benedek Fazekas Keywords: convenience, clojure, cider&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>paetzke/py-isort.el</title>
    <updated>2022-08-23T01:35:30Z</updated>
    <id>tag:github.com,2022-08-23:/paetzke/py-isort.el</id>
    <link href="https://github.com/paetzke/py-isort.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;py-isort.el integrates isort into Emacs.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;py-isort.el&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://travis-ci.org/paetzke/py-isort.el][https://travis-ci.org/paetzke/py-isort.el.svg?branch=master]] [[http://melpa.org/#/py-isort][http://melpa.org/packages/py-isort-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;Provides commands, which use the external =isort= tool to tidy up the imports in the current buffer.&lt;/p&gt; &#xA;&lt;p&gt;Install =isort= and download =py-isort=&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC bash $ pip install isort $ wget &lt;a href=&#34;https://raw.githubusercontent.com/paetzke/py-isort.el/master/py-isort.el&#34;&gt;https://raw.githubusercontent.com/paetzke/py-isort.el/master/py-isort.el&lt;/a&gt; &lt;br&gt; -O /your/path/py-isort.el #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;You can also install =py-isort= with /MELPA/:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC lisp M-x package-install RET py-isort RET #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Add the =before-save-hook= to your =~/.emacs=&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC lisp (add-to-list &#39;load-path &#34;/your/path/&#34;) (require &#39;py-isort) (add-hook &#39;before-save-hook &#39;py-isort-before-save) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Now every time you save your Python file =isort= will be executed on the current buffer.&lt;/p&gt; &#xA;&lt;p&gt;To customize the behaviour of =isort= you can set the =py-isort-options= e.g.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC lisp (setq py-isort-options &#39;(&#34;--lines=100&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Functions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=M-x py-isort-buffer RET=: Uses the =isort= tool to reformat the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;=M-x py-isort-region RET=: Uses the =isort= tool to reformat the current region.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Bugs and improvements&lt;/p&gt; &#xA;&lt;p&gt;Feel free to open tickets or send pull requests with improvements. These [[https://github.com/paetzke/py-isort.el/graphs/contributors][contributors]] have done so.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsorphanage/anzu</title>
    <updated>2022-08-23T01:35:30Z</updated>
    <id>tag:github.com,2022-08-23:/emacsorphanage/anzu</id>
    <link href="https://github.com/emacsorphanage/anzu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs Port of anzu.vim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;anzu.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/anzu&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/anzu-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/anzu&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/anzu-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacsorphanage/anzu/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacsorphanage/anzu/workflows/ci-checks/badge.svg?sanitize=true&#34; alt=&#34;gh actions badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;anzu.el&lt;/code&gt; is an Emacs port of &lt;a href=&#34;https://github.com/osyo-manga/vim-anzu&#34;&gt;anzu.vim&lt;/a&gt;. &lt;code&gt;anzu.el&lt;/code&gt; provides a minor mode which displays &lt;em&gt;current match&lt;/em&gt; and &lt;em&gt;total matches&lt;/em&gt; information in the mode-line in various search modes.&lt;/p&gt; &#xA;&lt;h2&gt;New Maintainer&lt;/h2&gt; &#xA;&lt;p&gt;This package has a new maintainer as of March 2020, and based on the valuable contribution of insights and fixes from the author, you should see issues from years past are now getting resolved. You may also see instability in the short term. Please bear with us!&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/anzu/master/image/anzu.gif&#34; alt=&#34;Screencast of anzu.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs 24 or higher&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cl-lib&lt;/code&gt; 0.5 or higher (you don&#39;t need to install &lt;code&gt;cl-lib&lt;/code&gt; if you use Emacs 24.3 or higher)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;anzu.el&lt;/code&gt; from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; with &lt;code&gt;package.el&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; M-x package-install anzu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h5&gt;&lt;code&gt;global-anzu-mode&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Enable global anzu mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(global-anzu-mode +1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-mode&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Enable anzu minor mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(anzu-mode +1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-query-replace&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;query-replace&lt;/code&gt; except displays anzu information in the mode-line.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-query-replace-regexp&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Same as &lt;code&gt;query-replace-regexp&lt;/code&gt; except displays anzu information in the mode-line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/anzu/master/image/anzu-replace-demo.gif&#34; alt=&#34;Screencast of anzu-query-replace-regexp&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can replace key bindings for the standard definitions of &lt;code&gt;query-replace&lt;/code&gt; and &lt;code&gt;query-replace-regexp&lt;/code&gt; with their anzu versions by adding this snippet to your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(global-set-key [remap query-replace] &#39;anzu-query-replace)&#xA;(global-set-key [remap query-replace-regexp] &#39;anzu-query-replace-regexp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-query-replace-at-cursor&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Works like &lt;code&gt;anzu-query-replace&lt;/code&gt; except the &lt;em&gt;from-string&lt;/em&gt; is the symbol at the cursor.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-query-replace-at-cursor-thing&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Works like &lt;code&gt;anzu-query-replace-at-cursor&lt;/code&gt; except the replacement is constrained to the region specified by the variable &lt;code&gt;anzu-replace-at-cursor-thing&lt;/code&gt;. See the variable&#39;s description in the customization section for additional details.&lt;/p&gt; &#xA;&lt;p&gt;Be careful not to confuse this variable with the identically named function (see below).&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-replace-at-cursor-thing&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Like &lt;code&gt;anzu-query-replace-at-cursor-thing&lt;/code&gt;, but doesn&#39;t query for confirmation before making the substitution.&lt;/p&gt; &#xA;&lt;p&gt;Be careful not to confuse this function with the identically named customization variable. See the discussion in the &lt;code&gt;anzu-query-replace-at-cursor-thing&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/anzu/master/image/anzu-replace-demo-noquery.gif&#34; alt=&#34;Screencast of anzu-replace-at-cursor-thing&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-isearch-query-replace&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The anzu version of &lt;code&gt;isearch-query-replace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-isearch-query-replace-regexp&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The anzu version of &lt;code&gt;isearch-query-replace-regexp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-mode-line&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Face of mode-line anzu information&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-mode-line-no-match&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Face of mode-line at no matching case&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-replace-highlight&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Face of from-string of replacement&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-replace-to&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Face of to-string of replacement&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-mode-line-update-function&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Function which constructs mode-line string. anzu.el puts its output to mode-line. It is called at searching, inputting replaced word, replacing. This must be non-nil.&lt;/p&gt; &#xA;&lt;p&gt;The function takes 2 integer arguments, current position and total match number. You can get current-state from &lt;code&gt;anzu--state&lt;/code&gt;(&lt;code&gt;&#39;search&lt;/code&gt;, &lt;code&gt;&#39;replace-query&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun my/anzu-update-func (here total)&#xA;  (when anzu--state&#xA;    (let ((status (cl-case anzu--state&#xA;                    (search (format &#34;&amp;lt;%d/%d&amp;gt;&#34; here total))&#xA;                    (replace-query (format &#34;(%d Replaces)&#34; total))&#xA;                    (replace (format &#34;&amp;lt;%d/%d&amp;gt;&#34; here total)))))&#xA;      (propertize status &#39;face &#39;anzu-mode-line))))&#xA;&#xA;(custom-set-variables&#xA; &#39;(anzu-mode-line-update-function #&#39;my/anzu-update-func))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-cons-mode-line-p&lt;/code&gt;(Default is &lt;code&gt;t&lt;/code&gt;)&lt;/h5&gt; &#xA;&lt;p&gt;Set &lt;code&gt;nil&lt;/code&gt; if you want to display anzu information at any position in mode-line. &lt;code&gt;anzu.el&lt;/code&gt; cons search information head of &lt;code&gt;mode-line&lt;/code&gt; as default.&lt;/p&gt; &#xA;&lt;p&gt;For example, show search information tail of &lt;code&gt;minor-mode-alist&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq anzu-cons-mode-line-p nil)&#xA;(setcar (cdr (assq &#39;isearch-mode minor-mode-alist))&#xA;        &#39;(:eval (anzu--update-mode-line)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Screenshot&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/anzu/master/image/anzu-any-position.png&#34; alt=&#34;anzu-any-position&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-mode-lighter&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Mode name in &lt;code&gt;mode-line&lt;/code&gt;. Default is &lt;code&gt; Anzu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-input-idle-delay&lt;/code&gt;(Default is &lt;code&gt;0.05&lt;/code&gt;)&lt;/h5&gt; &#xA;&lt;p&gt;Delay second of updating mode-line information when you input from-string&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-regexp-search-commands&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Commands which have regexp input. If the last command is a member of this list, &lt;code&gt;anzu.el&lt;/code&gt; treats input as regular expression.&lt;/p&gt; &#xA;&lt;p&gt;The default value is &lt;code&gt;&#39;(isearch-forward-regexp isearch-backward-regexp)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-use-migemo&lt;/code&gt;(Default is &lt;code&gt;nil&lt;/code&gt;)&lt;/h5&gt; &#xA;&lt;p&gt;Set to &lt;code&gt;t&lt;/code&gt; if you use &lt;a href=&#34;https://github.com/emacs-jp/migemo&#34;&gt;migemo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-search-threshold&lt;/code&gt;(Default is &lt;code&gt;nil&lt;/code&gt;)&lt;/h5&gt; &#xA;&lt;p&gt;Threshold of searched words. If there are searched word more than this value, &lt;code&gt;anzu.el&lt;/code&gt; stops to search and display total number like &lt;code&gt;1000+&lt;/code&gt;(as default). If this value is &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;anzu.el&lt;/code&gt; counts all words.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsorphanage/anzu/master/image/anzu-threshold.png&#34; alt=&#34;anzu-threshold&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-replace-threshold&lt;/code&gt;(Default is &lt;code&gt;nil&lt;/code&gt;)&lt;/h5&gt; &#xA;&lt;p&gt;Threshold of replacement overlay. If this value is &lt;code&gt;nil&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-minimum-input-length&lt;/code&gt;(Default is 1)&lt;/h5&gt; &#xA;&lt;p&gt;Minimum input length to enable anzu. This parameter is useful for &lt;code&gt;migemo&lt;/code&gt; users. Searching 1 or 2 characters with &lt;code&gt;migemo&lt;/code&gt; is too heavy if buffer is so large. Please set 3 or higher if you frequently edit such file.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-deactivate-region&lt;/code&gt;(Default is &lt;code&gt;nil&lt;/code&gt;)&lt;/h5&gt; &#xA;&lt;p&gt;Deactivate region at anzu replace command if this value is non-nil. It is hard to see with anzu replace command when region is active.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-replace-at-cursor-thing&lt;/code&gt;(Default is &#39;defun)&lt;/h5&gt; &#xA;&lt;p&gt;Describes the type of &lt;em&gt;thing&lt;/em&gt; used by the &lt;code&gt;anzu-*-thing&lt;/code&gt; functions. It can be set to any symbol that is a valid argument for the &lt;code&gt;thing-at-point&lt;/code&gt; function, including e.g. &lt;code&gt;defun&lt;/code&gt;, &lt;code&gt;word&lt;/code&gt;, and &lt;code&gt;page&lt;/code&gt;. See the documentation for &lt;code&gt;thing-at-point&lt;/code&gt; for additional information.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;anzu-replace-to-string-separator&lt;/code&gt;(Default is &#34;&#34;)&lt;/h5&gt; &#xA;&lt;p&gt;Separator of &lt;code&gt;to&lt;/code&gt; string.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;anzu)&#xA;(global-anzu-mode +1)&#xA;&#xA;(set-face-attribute &#39;anzu-mode-line nil&#xA;                    :foreground &#34;yellow&#34; :weight &#39;bold)&#xA;&#xA;(custom-set-variables&#xA; &#39;(anzu-mode-lighter &#34;&#34;)&#xA; &#39;(anzu-deactivate-region t)&#xA; &#39;(anzu-search-threshold 1000)&#xA; &#39;(anzu-replace-threshold 50)&#xA; &#39;(anzu-replace-to-string-separator &#34; =&amp;gt; &#34;))&#xA;&#xA;(define-key isearch-mode-map [remap isearch-query-replace]  #&#39;anzu-isearch-query-replace)&#xA;(define-key isearch-mode-map [remap isearch-query-replace-regexp] #&#39;anzu-isearch-query-replace-regexp)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>