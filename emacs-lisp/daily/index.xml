<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-28T01:39:49Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joshwnj/json-mode</title>
    <updated>2022-06-28T01:39:49Z</updated>
    <id>tag:github.com,2022-06-28:/joshwnj/json-mode</id>
    <link href="https://github.com/joshwnj/json-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Major mode for editing JSON files with emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;json-mode.el&lt;/h1&gt; &#xA;&lt;p&gt;Major mode for editing JSON files.&lt;/p&gt; &#xA;&lt;p&gt;Extends the builtin js-mode to add better syntax highlighting for JSON and some nice editing keybindings.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install json-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to have the &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA repository&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable repository&lt;/a&gt; enabled in emacs for this to work.&lt;/p&gt; &#xA;&lt;h2&gt;Default Keybindings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-f&lt;/code&gt;: format the region/buffer with &lt;code&gt;json-reformat&lt;/code&gt; (&lt;a href=&#34;https://github.com/gongo/json-reformat&#34;&gt;https://github.com/gongo/json-reformat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-p&lt;/code&gt;: display a path to the object at point with &lt;code&gt;json-snatcher&lt;/code&gt; (&lt;a href=&#34;https://github.com/Sterlingg/json-snatcher&#34;&gt;https://github.com/Sterlingg/json-snatcher&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c P&lt;/code&gt;: copy a path to the object at point to the kill ring with &lt;code&gt;json-snatcher&lt;/code&gt; (&lt;a href=&#34;https://github.com/Sterlingg/json-snatcher&#34;&gt;https://github.com/Sterlingg/json-snatcher&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-t&lt;/code&gt;: Toggle between &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-k&lt;/code&gt;: Replace the sexp at point with &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-i&lt;/code&gt;: Increment the number at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-d&lt;/code&gt;: Decrement the number at point&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Indent Width&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/gongo/json-reformat#configuration&#34;&gt;https://github.com/gongo/json-reformat#configuration&lt;/a&gt; for details on setting the indent width.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>noctuid/link-hint.el</title>
    <updated>2022-06-28T01:39:49Z</updated>
    <id>tag:github.com,2022-06-28:/noctuid/link-hint.el</id>
    <link href="https://github.com/noctuid/link-hint.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pentadactyl-like Link Hinting in Emacs with Avy&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[http://melpa.org/#/link-hint][file:http://melpa.org/packages/link-hint-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Demonstration Using this package to install this package: [[http://noctuid.github.io/link-hint.el/assets/paradox_demonstration.gif][http://noctuid.github.io/link-hint.el/assets/paradox_demonstration.gif]]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;About =link-hint.el= is inspired by the link hinting functionality in vim-like browsers and browser plugins such as pentadactyl. It provides commands for using avy to open, copy, or take a user-defined action on &#34;links.&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently the following types of links are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plain text urls (e.g. =&lt;a href=&#34;http://github.com=&#34;&gt;http://github.com=&lt;/a&gt;; includes irc urls and mailto)&lt;/li&gt; &#xA; &lt;li&gt;File paths&lt;/li&gt; &#xA; &lt;li&gt;Shr urls (e.g. elfeed links, links in html mu4e and gnus messages, eww urls, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Org mode urls (includes =mailto:= links)&lt;/li&gt; &#xA; &lt;li&gt;Markdown links (including &#34;wiki links&#34;; see =markdown-enable-wiki-links=)&lt;/li&gt; &#xA; &lt;li&gt;Mu4e links (urls and mailto addresses)&lt;/li&gt; &#xA; &lt;li&gt;Mu4e attachments&lt;/li&gt; &#xA; &lt;li&gt;Gnus html mail rendered with gnus-w3m or emacs-w3m (instead of shr)&lt;/li&gt; &#xA; &lt;li&gt;Help mode links&lt;/li&gt; &#xA; &lt;li&gt;Info mode links&lt;/li&gt; &#xA; &lt;li&gt;Package menu links (describe package, install package, keyword buttons, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Compilation mode links&lt;/li&gt; &#xA; &lt;li&gt;W3m links (urls, email addresses, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Customize links&lt;/li&gt; &#xA; &lt;li&gt;Nov.el links&lt;/li&gt; &#xA; &lt;li&gt;notmuch-hello links&lt;/li&gt; &#xA; &lt;li&gt;Deadgrep matches&lt;/li&gt; &#xA; &lt;li&gt;Other button links (e.g. WoMan/Man/Dictionary links, ag mode, epa-key-list-mode, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Completion List candidates (better put it before /link-hint-file-link/ for &lt;em&gt;project.el&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dired filenames&lt;/li&gt; &#xA; &lt;li&gt;Org Agenda items&lt;/li&gt; &#xA; &lt;li&gt;Xref items&lt;/li&gt; &#xA; &lt;li&gt;Bug reference mode links&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feel free to request support for any useful link type I may have missed. Also, if you think it would be beneficial to have a more specific link type split from a more generic link type, feel free to make an issue. For example, there may be some specific type of button you want to ignore or use in a custom command without affecting other buttons.&lt;/p&gt; &#xA;&lt;p&gt;** Similar *** Ace-link There is also [[https://github.com/abo-abo/ace-link][ace-link]] which I didn&#39;t know about when writing this package. The main functional differences at the time of writing are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;link-hint supports more link types&lt;/li&gt; &#xA; &lt;li&gt;link-hint supports operating on multiple different types of links with the same command in the same buffer; types are optionally tied to major modes, but generic link support is also provided (e.g. buttons and file paths)&lt;/li&gt; &#xA; &lt;li&gt;link-hint supports easily adding more link types and actions&lt;/li&gt; &#xA; &lt;li&gt;link-hint supports operating on multiple links at a time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Embark There is some overlap with embark since both packages provide multiple actions for different types of things. Here is a comparison:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Link-hint is mainly focused on links/buttons rather than types of =completing-reading= candidates&lt;/li&gt; &#xA; &lt;li&gt;Link-hint is more focused on selecting links anywhere visible using avy&lt;/li&gt; &#xA; &lt;li&gt;Both embark and link-hint can take different actions on different types of things at the point in a buffer; link-hint can actually fall back to using =embark-dwim= (see [[#at-point-fallback-commands][At Point Fallback Commands]])&lt;/li&gt; &#xA; &lt;li&gt;If there is interest, link-hint can provide better integration with embark (provide feedback on issue #38 if interested) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add completing-read support (with support for choosing an action with embark or running =embark-collect=)&lt;/li&gt; &#xA;   &lt;li&gt;Add a builtin link-hint action that just calls =embark-act= on the link position&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Basic Setup Basic usage of this package only requires making key bindings for &lt;del&gt;link-hint-open-link&lt;/del&gt; or other commands. Here is an example configuration using [[https://github.com/jwiegley/use-package][use-package]]: #+begin_src emacs-lisp (use-package link-hint :ensure t :bind (&#34;C-c l o&#34; . link-hint-open-link) (&#34;C-c l c&#34; . link-hint-copy-link)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Here is an example configuration for evil: #+begin_src emacs-lisp (use-package link-hint :ensure t :defer t)&lt;/p&gt; &#xA;&lt;p&gt;(define-key evil-normal-state-map (kbd &#34;SPC f&#34;) &#39;link-hint-open-link) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Browser Choice &lt;del&gt;browse-url&lt;/del&gt; is used for opening urls, so in the case that the desired browser is not being used by default, the user can set &lt;del&gt;browse-url-browser-function&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use chromium to open urls (setq browse-url-browser-function &#39;browse-url-chromium)&lt;/p&gt; &#xA;&lt;p&gt;;; Use firefox to open urls (setq browse-url-browser-function &#39;browse-url-firefox)&lt;/p&gt; &#xA;&lt;p&gt;;; Use qutebrowser to open urls (setq browse-url-browser-function &#39;browse-url-generic) (setq browse-url-generic-program &#34;qutebrowser&#34;) ;; Open urls in a new tab instead of window; can also be set in the config file (setq browse-url-generic-args &#39;(&#34;--target&#34; &#34;tab&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Provided Commands This package provides the following commands for operating on links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;link-hint-open-link-at-point&lt;/del&gt; - Open the link at point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;link-hint-copy-link-at-point&lt;/del&gt; - Copy the link at point to the kill ring (and optionally to the clipboard/primary).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;link-hint-open-link&lt;/del&gt; - Use avy to select and open a single visible link. If only one link is currently visible, it will be automatically opened without the need for selection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;link-hint-open-multiple-links&lt;/del&gt; - Use avy to select multiple visible links and open them as soon as a key that does not correspond to a link (a key not in the avy overlay) is pressed (like pentadactyl&#39;s =g;=).&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;link-hint-open-all-links&lt;/del&gt; - Opens all links visible in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;link-hint-copy-link&lt;/del&gt; - Use avy to select and copy a single visible link to the kill ring. &lt;del&gt;select-enable-clipboard&lt;/del&gt; and &lt;del&gt;select-enable-clipboard&lt;/del&gt; can each be set to a non-nil value to also use the clipboard and/or primary.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;del&gt;link-hint-copy-multiple-links&lt;/del&gt; and &lt;del&gt;link-hint-copy-all-links&lt;/del&gt; also exist, but they may not be useful very often.&lt;/p&gt; &#xA;&lt;p&gt;This package does not bind any commands by default.&lt;/p&gt; &#xA;&lt;p&gt;** At Point Fallback Commands :PROPERTIES: :CUSTOM_ID: at-point-fallback-commands :END:&lt;/p&gt; &#xA;&lt;p&gt;While the main purpose of link-hint is remote link selection with avy, it does provide commands to operate on a link at point (since it already has the necessary code to do so). =link-hint-open-link-at-point=, for example, can be used as a sort of global &#34;act on the point&#34; command. If there is not a link at the point, you can make it fall back to another command by setting =link-hint-action-fallback-commands=. Some potentially useful fallback commands would be =embark-dwim= and =action-key= (hyperbole).&lt;/p&gt; &#xA;&lt;p&gt;To still get the &#34;no links found&#34; error message when nothing happens, fallback command should return nil if it also fails to do anything. #+begin_src emacs-lisp (setq link-hint-action-fallback-commands (list :open (lambda () (condition-case _ (progn (embark-dwim) t) (error nil))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Here is a more complex example that will try to jump to the definition in programming modes where possible before falling back to hyperbole. If you want something like this, you will probably need to tweak this rather than use it as-is. #+begin_src emacs-lisp (defun noct-open () &#34;Open the thing at point. Try with lsp or smart jump (if in a prog-mode buffer) then with hyperbole.&#34; (interactive) (or (when (derived-mode-p &#39;prog-mode) (cond ((bound-and-true-p lsp-mode) (not (stringp (lsp-find-definition)))) ((fboundp &#39;smart-jump-go) ;; return nil instead of prompting when there is no definition ;; at point (cl-letf (((symbol-function &#39;xref--prompt-p) #&#39;ignore)) (smart-jump-go))))) (when (fboundp &#39;action-key) (action-key))))&lt;/p&gt; &#xA;&lt;p&gt;(setq link-hint-action-fallback-commands (list :open #&#39;noct-open)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Overriding Avy Settings =link-hint.el= supports overriding avy&#39;s settings. For example, if you want to use a different avy style just for link hinting, you can set &lt;del&gt;link-hint-avy-style&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq link-hint-avy-style &#39;pre) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This will cause the overlays to be displayed before the links (and not cover them). Note that using the =post= style will not put the overlay at the end of links. I don&#39;t think this style makes much sense for links, but feel free to open an issue if you would like this style to be supported.&lt;/p&gt; &#xA;&lt;p&gt;Here is the full list of settings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=link-hint-avy-style=&lt;/li&gt; &#xA; &lt;li&gt;=link-hint-avy-keys=&lt;/li&gt; &#xA; &lt;li&gt;=link-hint-avy-all-windows=&lt;/li&gt; &#xA; &lt;li&gt;=link-hint-avy-all-windows-alt=&lt;/li&gt; &#xA; &lt;li&gt;=link-hint-avy-background=&lt;/li&gt; &#xA; &lt;li&gt;=link-hint-avy-ignored-modes=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, these variables are not bound, and avy&#39;s corresponding settings are used. =avy-styles-alist= and =avy-keys-alist= are also supported for the provided commands (as well as &lt;del&gt;avy-resume&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;** Messaging By default, link-hint will print a message in the echo area when an action is performed. =link-hint-message= can be set to =nil= to disable this behavior. It can also be set to a custom message function such as &lt;del&gt;lv-message&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;=link-hint-action-messages= is a plist that is used for the default description of each action keyword (e.g. =:open &#34;Opened&#34;=).&lt;/p&gt; &#xA;&lt;p&gt;** Point/Window Restoration Link hint will move the point (and sometimes the window; see =avy-all-windows=) when acting on a link. When =link-hint-restore= is a non-nil value, link-hint will automatically restore the point and window when the link action does not intentionally change the point/window. For example, if =link-hint-avy-all-windows= is a non-nil value, and the user copies a link in a different window, the point will stay the same in the buffer containing the link, and the selected window will stay the same. On the other hand, if the user opens a url in &lt;del&gt;eww&lt;/del&gt; in a new window, the &lt;del&gt;eww&lt;/del&gt; window will be selected, but the point in the link buffer will be restored. Similarly, if the user opens an org link to a local (same buffer) heading, the point and window will not be restored.&lt;/p&gt; &#xA;&lt;p&gt;** Defining New Link Types and Actions &lt;del&gt;link-hint-define-type&lt;/del&gt; is the helper function used to define new link types. &lt;del&gt;link-hint-define-type&lt;/del&gt; is just simple helper to alter the symbol plist of =link-hint-&#xA; &lt;type&gt;&#xA;  = (though it is recommended to use it directly in case the implementation changes). For example, here is how =shr-url= could be defined if it did not already exist: #+begin_src emacs-lisp (link-hint-define-type &#39;shr-url :next #&#39;link-hint--next-shr-url :at-point-p #&#39;link-hint--shr-url-at-point-p :open #&#39;browse-url :copy #&#39;kill-new)&#xA; &lt;/type&gt;&lt;/p&gt; &#xA;&lt;p&gt;(push &#39;link-hint-shr-url link-hint-types) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;All link hint types are defined in this way, so see the source code for more examples.&lt;/p&gt; &#xA;&lt;p&gt;*** Mandatory Keywords =:next=&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;should be a function that returns the position of the next link /after/ the point (i.e. if there is a link at the point, it should not return the point)&lt;/li&gt; &#xA; &lt;li&gt;should not move the point (wrap your code in &lt;del&gt;save-excursion&lt;/del&gt; if you move the point)&lt;/li&gt; &#xA; &lt;li&gt;arglist: =(bound)= - one argument for the end bound for searching&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;=:at-point-p=&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;should be a function that returns a non-nil value if there is a link at the point&lt;/li&gt; &#xA; &lt;li&gt;its return value can be used in the action functions&lt;/li&gt; &#xA; &lt;li&gt;arglist: =()= - not passed any arguments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Predicate Keywords These keywords are used to determine when a type is active. If these keywords are specified, link-hint will only check for the link type if the buffer meets the requirements. These are not strictly necessary but can be used, for example, to help performance (this is usually not an issue except for &#34;overlay button&#34; links currently - woman buttons, dictionary mode buttons, etc.).&lt;/p&gt; &#xA;&lt;p&gt;=:predicates= should be a list of functions that should each return true if the link type passes/is valid in the current buffer.&lt;/p&gt; &#xA;&lt;p&gt;=:vars= should be a list of variables and/or major modes. If at least one of them is bound and true or the current major mode, the link type passes.&lt;/p&gt; &#xA;&lt;p&gt;=:not-vars= should be a list of variables and/or major modes. If any of them are bound and true or the current major mode, the link type does not pass.&lt;/p&gt; &#xA;&lt;p&gt;All of these checks must pass for the link type to be considered active. It is also possible to create commands that only operate on specific link types by binding =link-hint-types= (e.g. &lt;del&gt;(let ((link-hint-types ...)))&lt;/del&gt;).&lt;/p&gt; &#xA;&lt;p&gt;*** Action Keywords The main actions supported by default are =:open= and =:copy=. Custom action keywords can have any name not already used by link-hint, but you may want to give your keywords some unique prefix to ensure they do not clash in case link-hint adds new action types (e.g. =:my-&#xA; &lt;action&gt;&#xA;  =).&#xA; &lt;/action&gt;&lt;/p&gt; &#xA;&lt;p&gt;=:&#xA; &lt;action&gt;&#xA;  = (e.g. =:open=)&#xA; &lt;/action&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;should be function that will perform an action on a link (e.g. open it in the case of =:open=)&lt;/li&gt; &#xA; &lt;li&gt;arglist: =(&amp;lt;at-point-p return list item 1&amp;gt; &amp;lt;at-point-p return list item 2&amp;gt; ...)= or =(&#xA;  &lt;at-point-p return value as single argument&gt;&#xA;   )= or =()=; the function is not required to take a specific number of arguments &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;if you want to use information obtained in the =:at-point-p= call, you can give the action implementation function a non-empty arglist &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;if the =:at-point-p= function returns a list, you can use multiple arguments (one for each item in the list)&lt;/li&gt; &#xA;      &lt;li&gt;if your =:at-point-p= function returns a single value, you should use a single argument, e.g. the text-url link type&#39;s =:at-point-p= function returns the url to open as a string, so the =:open= function can just be &lt;del&gt;browse-url&lt;/del&gt; (which takes a url as an argument)&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;if you use an empty arglist, the function should operate at the link at point&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/at-point-p&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Link types are not required to support all action keywords. If a link type does not support a particular action keyword, it will just be ignored for that action.&lt;/p&gt; &#xA;&lt;p&gt;*** Action Modifier Keywords =:parse= should be a function that takes two arguments: the return value of the link type&#39;s =:at-point-p= function and the action keyword. It should return a valid input for the action function. This can be useful, for example, if the =at-point-p= function returns a plist, struct, etc. and each action function only needs part of it (see the definition of =package-link= for a concrete example).&lt;/p&gt; &#xA;&lt;p&gt;=:&#xA; &lt;action&gt;&#xA;  -multiple= should be a boolean value corresponding to whether it makes sense to perform the action on multiple links in a row.&#xA; &lt;/action&gt;&lt;/p&gt; &#xA;&lt;p&gt;=:&#xA; &lt;action&gt;&#xA;  -message= should be a string that will be used instead of the normal message string. For example, =:open-message &#34;Installed&#34;= is specified for the =package-install-link= type.&#xA; &lt;/action&gt;&lt;/p&gt; &#xA;&lt;p&gt;=:describe= should be a function that returns a string representation of the link to be used when messaging. If not set, the return value of the =:at-point-p= function is used directly.&lt;/p&gt; &#xA;&lt;p&gt;** Creating New Commands The user can create new commands to do something other than copy or open a link using the &lt;del&gt;link-hint--one&lt;/del&gt;, &lt;del&gt;link-hint--multiple&lt;/del&gt;, and &lt;del&gt;link-hint--all&lt;/del&gt; helper functions. Each takes a single action keyword as an argument.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of adding a command that downloads a url: #+begin_src emacs-lisp ;; `link-hint-define-type&#39; can be used to add new keywords (link-hint-define-type &#39;text-url :download #&#39;w3m-download)&lt;/p&gt; &#xA;&lt;p&gt;(link-hint-define-type &#39;w3m-link :download #&#39;w3m-download)&lt;/p&gt; &#xA;&lt;p&gt;...&lt;/p&gt; &#xA;&lt;p&gt;(defun link-hint-download-link () &#34;Use avy to select and download a text URL with download-region.el.&#34; (interactive) (avy-with link-hint-download-link (link-hint--one :download))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Using for Links in Terminal with Tmux This may seem like a strange use for this package, but I&#39;ve been doing this due to lack of a better alternative. Unfortunately, most of the methods for generically opening urls in a terminal running tmux (e.g. urlscan, urlview, w3m, terminal keybindings, tmux-urlview, and tmux-open) aren&#39;t very quick or customizable. [[https://github.com/tmux/tmux][tmux-fingers]] looks more promising but currently only supports copying, doesn&#39;t allow for customizable hint keys, and is slow for me.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve started using this keybinding on the rare occasion that I need to open a url from somewhere other than emacs: #+begin_src shell bind-key f capture-pane ; save-buffer /tmp/tmux-buffer ; &lt;br&gt; new-window &#39;emacsclient -t -e &#34;(find-file &#34;/tmp/tmux-buffer&#34;)&#34; -e &#34;(goto-address-mode)&#34; -e &#34;(link-hint-open-link)&#34; -e &#34;(kill-this-buffer)&#34; -e &#34;(delete-frame)&#34;&#39; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;I kill the buffer to ensure that emacs won&#39;t prompt to revert the file on later invocations in the case that auto-revert-mode is off.&lt;/p&gt; &#xA;&lt;p&gt;One downside (shared by most other methods) is that it may be a bit disorienting to have the positions of links moved when opening a new tmux window. In this regard, having link-opening functionality directly in a terminal is nice.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>magnars/expand-region.el</title>
    <updated>2022-06-28T01:39:49Z</updated>
    <id>tag:github.com,2022-06-28:/magnars/expand-region.el</id>
    <link href="https://github.com/magnars/expand-region.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs extension to increase selected region by semantic units.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://travis-ci.org/magnars/expand-region.el&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/magnars/expand-region.el.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/magnars/expand-region.el&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/magnars/expand-region.el/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/expand-region.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/expand-region.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/expand-region&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/expand-region-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/expand-region&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/expand-region-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;expand-region.el&lt;/h1&gt; &#xA;&lt;p&gt;Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.&lt;/p&gt; &#xA;&lt;p&gt;An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq alphabet-start &#34;abc def&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the cursor at the &lt;code&gt;c&lt;/code&gt;, it starts by marking the entire word &lt;code&gt;abc&lt;/code&gt;, then expand to the contents of the quotes &lt;code&gt;abc def&lt;/code&gt;, then to the entire quote &lt;code&gt;&#34;abc def&#34;&lt;/code&gt;, then to the contents of the sexp &lt;code&gt;setq alphabet-start &#34;abc def&#34;&lt;/code&gt; and finally to the entire sexp.&lt;/p&gt; &#xA;&lt;p&gt;You can set it up like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;expand-region)&#xA;(global-set-key (kbd &#34;C-=&#34;) &#39;er/expand-region)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you expand too far, you can contract the region by pressing &lt;code&gt;-&lt;/code&gt; (minus key), or by prefixing the shortcut you defined with a negative argument: &lt;code&gt;C-- C-=&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintenance warning&lt;/h2&gt; &#xA;&lt;p&gt;I use this package every day, and have been doing so for years. It just works. At least, it works for all my use cases. And if it breaks somehow, I fix it.&lt;/p&gt; &#xA;&lt;p&gt;However, it has become painfully clear to me that I don&#39;t have time to fix problems I don&#39;t have. It&#39;s been years since I could keep pace with the issues and pull requests. Whenever I try, I keep getting feedback that my fix isn&#39;t good enough by some standard I don&#39;t particularly care about.&lt;/p&gt; &#xA;&lt;p&gt;So, I have closed the issue tracker and the pull requests. I hope you can happily use this package, just like I do. If it doesn&#39;t work for you, then I&#39;m sorry. Thankfully Emacs is infinitely malleable, you can probably fix it yourself.&lt;/p&gt; &#xA;&lt;p&gt;TLDR: &lt;em&gt;I am still maintaining this package&lt;/em&gt;, but I am no longer crowdsourcing a list of issues.&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;http://emacsrocks.com/e09.html&#34;&gt;watch an intro to expand-region at Emacs Rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;I highly recommend installing expand-region through elpa.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s available on &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install expand-region&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Via &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(use-package expand-region&#xA;  :bind (&#34;C-=&#34; . er/expand-region))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Language support&lt;/h2&gt; &#xA;&lt;p&gt;Expand region works fairly well with most languages, due to the general nature of the basic expansions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;er/mark-word&#xA;er/mark-symbol&#xA;er/mark-symbol-with-prefix&#xA;er/mark-next-accessor&#xA;er/mark-method-call&#xA;er/mark-inside-quotes&#xA;er/mark-outside-quotes&#xA;er/mark-inside-pairs&#xA;er/mark-outside-pairs&#xA;er/mark-comment&#xA;er/mark-url&#xA;er/mark-email&#xA;er/mark-defun&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, most languages also will benefit from some specially crafted expansions. For instance, expand-region comes with these extra expansions for html-mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;er/mark-html-attribute&#xA;er/mark-inner-tag&#xA;er/mark-outer-tag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add your own expansions to the languages of your choice simply by creating a function that looks around point to see if it&#39;s inside or looking at the construct you want to mark, and if so - mark it.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s plenty of examples to look at in these files.&lt;/p&gt; &#xA;&lt;p&gt;After you make your function, add it to a buffer-local version of the &lt;code&gt;er/try-expand-list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say you want expand-region to also mark paragraphs and pages in text-mode. Incidentally Emacs already comes with &lt;code&gt;mark-paragraph&lt;/code&gt; and &lt;code&gt;mark-page&lt;/code&gt;. To add it to the try-list, do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(defun er/add-text-mode-expansions ()&#xA;  (make-variable-buffer-local &#39;er/try-expand-list)&#xA;  (setq er/try-expand-list (append&#xA;                            er/try-expand-list&#xA;                            &#39;(mark-paragraph&#xA;                              mark-page))))&#xA;&#xA;(add-hook &#39;text-mode-hook &#39;er/add-text-mode-expansions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add that to its own file, and add it to the &lt;code&gt;expand-region.el&lt;/code&gt;-file, where it says &#34;Mode-specific expansions&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Badly written expansions might slow down expand-region dramatically. Remember to exit quickly before you start traversing the entire document looking for constructs to mark.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you make some nice expansions for your favorite mode, it would be great if you opened a pull-request. The repo is at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/magnars/expand-region.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All changes must be accompanied by feature tests. They are written in &lt;a href=&#34;http://ecukes.info&#34;&gt;Ecukes&lt;/a&gt;, a Cucumber for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;To fetch the test dependencies, install &lt;a href=&#34;https://github.com/rejeep/cask.el&#34;&gt;cask&lt;/a&gt; if you haven&#39;t already, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/expand-region&#xA;$ cask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./run-tests.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If feature tests are missing for the mode you are changing, please make sure to add a set of basic tests around the functionality you&#39;re changing.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joshwnj&#34;&gt;Josh Johnston&lt;/a&gt; contributed &lt;code&gt;er/contract-region&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewang&#34;&gt;Le Wang&lt;/a&gt; contributed consistent handling of the mark ring, expanding into pairs/quotes just left of the cursor, and general code clean-up.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kidd&#34;&gt;Raimon Grau&lt;/a&gt; added support for when transient-mark-mode is off.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rolandwalker&#34;&gt;Roland Walker&lt;/a&gt; added option to copy the contents of the most recent action to a register, and some fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DamienCassou&#34;&gt;Damien Cassou&lt;/a&gt; added option to continue expanding/contracting with fast keys after initial expand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thisirs&#34;&gt;Sylvain Rousseau&lt;/a&gt; fixed loads of little annoyances.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryantm&#34;&gt;Ryan Mulligan&lt;/a&gt; cleaned up a lot of byte compilation warnings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LefterisJP&#34;&gt;Lefteris Karapetsas&lt;/a&gt; added subword-mode expansions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Language specific contributions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mbriggs&#34;&gt;Matt Briggs&lt;/a&gt;, &lt;a href=&#34;https://github.com/diasjorge&#34;&gt;Jorge Dias&lt;/a&gt; and &lt;a href=&#34;https://github.com/lewang&#34;&gt;Le Wang&lt;/a&gt; contributed Ruby expansions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gvol&#34;&gt;Ivan Andrus&lt;/a&gt;, &lt;a href=&#34;https://github.com/fgeller&#34;&gt;fgeller&lt;/a&gt;, &lt;a href=&#34;https://github.com/edmccard&#34;&gt;edmccard&lt;/a&gt; and &lt;a href=&#34;https://github.com/vmalloc&#34;&gt;Rotem Yaari&lt;/a&gt; contributed Python expansions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ffevotte&#34;&gt;François Févotte&lt;/a&gt; contributed C and C++ expansions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gvol&#34;&gt;Ivan Andrus&lt;/a&gt; contributed text-mode, LaTeX-mode and nxml-mode expansions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gleber&#34;&gt;Gleb Peregud&lt;/a&gt; contributed Erlang expansions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/markhepburn&#34;&gt;Mark Hepburn&lt;/a&gt; contributed Octave expansions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vmalloc&#34;&gt;Rotem Yaari&lt;/a&gt; also contributed an adapter for the region expansion in web-mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gugod&#34;&gt;Kang-min Liu&lt;/a&gt; contributed Perl expansions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/algal&#34;&gt;Alexis Gallagher&lt;/a&gt; contributs Standard ML expansions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/titaniumbones&#34;&gt;Matt Price&lt;/a&gt; improved on org-mode expansions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maksle&#34;&gt;Maksim Grinman&lt;/a&gt; added inner-quotes expansion for nxml-mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndreaOrru&#34;&gt;Andrea Orru&lt;/a&gt; added &lt;code&gt;expand-region-smart-cursor&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;From 0.11 to 0.12 (WIP)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option &lt;code&gt;expand-region-subword-enabled&lt;/code&gt; to enable subword expansions&lt;/li&gt; &#xA; &lt;li&gt;Improve web-mode expansions (Renato F)&lt;/li&gt; &#xA; &lt;li&gt;Fixes for cc-mode expansions (Wilfred Hughes)&lt;/li&gt; &#xA; &lt;li&gt;Fixes for org-mode expansions (Wilfred Hughes)&lt;/li&gt; &#xA; &lt;li&gt;Fix unnecessary unfolding in org-mode&lt;/li&gt; &#xA; &lt;li&gt;Fix bug with transient-mark-mode (Russell Black)&lt;/li&gt; &#xA; &lt;li&gt;Fix problems with auto-loading (Philippe Vaucher, Wilfred Hughes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 0.10 to 0.11&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option &lt;code&gt;expand-region-smart-cursor&lt;/code&gt; to keep cursor at beginning of region if it is there (Andrea Orru)&lt;/li&gt; &#xA; &lt;li&gt;Add subword-mode expansions (Lefteris Karapetsas)&lt;/li&gt; &#xA; &lt;li&gt;Improve enh-ruby-mode expansions (Ryan Davis)&lt;/li&gt; &#xA; &lt;li&gt;Improve nxml-mode expansions (Maksim Grinman)&lt;/li&gt; &#xA; &lt;li&gt;Improve org-mode expansions (Matt Price)&lt;/li&gt; &#xA; &lt;li&gt;Improve js-mode expansions&lt;/li&gt; &#xA; &lt;li&gt;Better performance&lt;/li&gt; &#xA; &lt;li&gt;Lots of bugfixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 0.9 to 0.10&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Smarter expansion of ruby heredoc contents (Steve Purcell)&lt;/li&gt; &#xA; &lt;li&gt;Add enh-ruby-mode expansions (Bradley Wright)&lt;/li&gt; &#xA; &lt;li&gt;Add basic expansion er/mark-defun&lt;/li&gt; &#xA; &lt;li&gt;Big cleanup of byte compilation warnings (Ryan Mulligan)&lt;/li&gt; &#xA; &lt;li&gt;Better performance&lt;/li&gt; &#xA; &lt;li&gt;Lots of bugfixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 0.8 to 0.9&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve org-, clojure-, python-, latex-, cc- and ruby-modes&lt;/li&gt; &#xA; &lt;li&gt;Add basic expansions: email and url&lt;/li&gt; &#xA; &lt;li&gt;Add sml-mode expansions (Alexis Gallagher)&lt;/li&gt; &#xA; &lt;li&gt;Add cperl-mode expansions (Kang-min Liu)&lt;/li&gt; &#xA; &lt;li&gt;Add octave-mode expansions (Mark Hepburn)&lt;/li&gt; &#xA; &lt;li&gt;Add web-mode expansions (Rotem Yaari)&lt;/li&gt; &#xA; &lt;li&gt;Use Carton for dev-dependencies&lt;/li&gt; &#xA; &lt;li&gt;Fix bad behavior in minibuffer (Sylvain Rousseau)&lt;/li&gt; &#xA; &lt;li&gt;More robust comment expansions&lt;/li&gt; &#xA; &lt;li&gt;Improve loading of expansions for all major modes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From 0.7 to 0.8&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve js-, ruby-, python- and latex-modes&lt;/li&gt; &#xA; &lt;li&gt;Support built-in javascript-mode&lt;/li&gt; &#xA; &lt;li&gt;Handle narrowed buffers correctly&lt;/li&gt; &#xA; &lt;li&gt;Include mode-specific expansions when autoloading&lt;/li&gt; &#xA; &lt;li&gt;Provide option to copy the contents of the most recent action to a register&lt;/li&gt; &#xA; &lt;li&gt;Add cc-mode specific expansions&lt;/li&gt; &#xA; &lt;li&gt;Add customization to turn off skipping whitespace when expanding&lt;/li&gt; &#xA; &lt;li&gt;Continue expanding/contracting with one key press (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2011-2019 Magnar Sveen&lt;/p&gt; &#xA;&lt;p&gt;Author: Magnar Sveen &lt;a href=&#34;mailto:magnars@gmail.com&#34;&gt;magnars@gmail.com&lt;/a&gt; Keywords: marking region&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>