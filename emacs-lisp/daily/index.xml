<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-07T01:32:37Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shell909090/emacscfg</title>
    <updated>2023-04-07T01:32:37Z</updated>
    <id>tag:github.com,2023-04-07:/shell909090/emacscfg</id>
    <link href="https://github.com/shell909090/emacscfg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;my emacs config&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;文件说明&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;README.md 本说明文件&lt;/li&gt; &#xA; &lt;li&gt;LICENSE.md 授权说明文件&lt;/li&gt; &#xA; &lt;li&gt;elpa elpa插件安装目录&lt;/li&gt; &#xA; &lt;li&gt;lisp 配置文件目录 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;dired-conf.el dired的相关函数和配置&lt;/li&gt; &#xA;   &lt;li&gt;diredful-conf.el diredful相关的配置信息&lt;/li&gt; &#xA;   &lt;li&gt;emacs.el 主配置文件&lt;/li&gt; &#xA;   &lt;li&gt;install.el 安装文件，用于初始安装elpa&lt;/li&gt; &#xA;   &lt;li&gt;linux.el linux下的配置文件&lt;/li&gt; &#xA;   &lt;li&gt;locals.el 本地配置文件，如果存在则加载&lt;/li&gt; &#xA;   &lt;li&gt;mac.el mac下的配置文件&lt;/li&gt; &#xA;   &lt;li&gt;setup.el 默认配置参数，包括插件载入和配置&lt;/li&gt; &#xA;   &lt;li&gt;users.el 自定义函数&lt;/li&gt; &#xA;   &lt;li&gt;win.el windows下的配置文件&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;plugins 插件安装目录，安装elpa中没有的文件，目前只有三个插件。&lt;/li&gt; &#xA; &lt;li&gt;snippets 缩写数据目录&lt;/li&gt; &#xA; &lt;li&gt;templates 自动建立模板目录&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;INSTALL&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;copy dir to ~/.emacs.d/&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make clean ;清理安装目录&#xA;make install ;安装配置&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;依赖&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dired-x&lt;/li&gt; &#xA; &lt;li&gt;diredful&lt;/li&gt; &#xA; &lt;li&gt;etags-table&lt;/li&gt; &#xA; &lt;li&gt;go-mode&lt;/li&gt; &#xA; &lt;li&gt;markdown-mode&lt;/li&gt; &#xA; &lt;li&gt;multi-term&lt;/li&gt; &#xA; &lt;li&gt;python&lt;/li&gt; &#xA; &lt;li&gt;rst-mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;推荐&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;auto-complete&lt;/li&gt; &#xA; &lt;li&gt;bookmark&lt;/li&gt; &#xA; &lt;li&gt;color-theme&lt;/li&gt; &#xA; &lt;li&gt;dictionary&lt;/li&gt; &#xA; &lt;li&gt;ediff&lt;/li&gt; &#xA; &lt;li&gt;elpy&lt;/li&gt; &#xA; &lt;li&gt;ispell&lt;/li&gt; &#xA; &lt;li&gt;markdown&lt;/li&gt; &#xA; &lt;li&gt;template&lt;/li&gt; &#xA; &lt;li&gt;tramp&lt;/li&gt; &#xA; &lt;li&gt;uniquify&lt;/li&gt; &#xA; &lt;li&gt;yasnippet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Misc&lt;/h1&gt; &#xA;&lt;p&gt;go-autocomplete可能无法自动make，需要手工安装。&lt;/p&gt; &#xA;&lt;p&gt;系统中需要有godef和gocode。两者可以放在~/bin/下面，也可以自行添加$PATH。需要修改exec-path，默认在setup.el中已经配置。&lt;/p&gt; &#xA;&lt;p&gt;go的几个依赖组件安装方法请参考Makefile的install-golang一节。&lt;/p&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;replace template with yatemplate&lt;/li&gt; &#xA; &lt;li&gt;python mode goes wrong&lt;/li&gt; &#xA; &lt;li&gt;golang mode goes wrong&lt;/li&gt; &#xA; &lt;li&gt;split emacs-goodies-el&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jcs-elpa/codemetrics</title>
    <updated>2023-04-07T01:32:37Z</updated>
    <id>tag:github.com,2023-04-07:/jcs-elpa/codemetrics</id>
    <link href="https://github.com/jcs-elpa/codemetrics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Plugin shows complexity information&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jcs-emacs.github.io/jcs-elpa/#/codemetrics&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jcs-emacs/badges/master/elpa/v/codemetrics.svg?sanitize=true&#34; alt=&#34;JCS-ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/etc/logo.png&#34; width=&#34;20%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Code Metrics&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Plugin shows complexity information&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jcs-elpa/codemetrics/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/jcs-elpa/codemetrics/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/etc/demo.gif&#34;&gt; &#xA;&lt;p&gt;This plugin implements live calculation of the &lt;strong&gt;Cognitive Complexity&lt;/strong&gt; metric, which was proposed by G. Ann Campbell in &lt;a href=&#34;https://www.sonarsource.com/docs/CognitiveComplexity.pdf&#34;&gt;Cognitive Complexity - A new way of measuring understandability&lt;/a&gt; (c) SonarSource S.A. 2016-2021, Switzerland.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt; Cyclomatic Complexity was initially formulated as a measurement of the &#34;testability and maintainability&#34; of the control flow of a module. While it excels at measuring the former, its underlying mathematical model is unsatisfactory at producing a value that measures the latter. This white paper describes a new metric that breaks from the use of mathematical models to evaluate code in order to remedy Cyclomatic Complexity’s shortcomings and produce a measurement that more accurately reflects the relative difficulty of understanding, and therefore of maintaining methods, classes, and applications.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%F0%9F%92%BE-installation&#34;&gt;💾 Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%F0%9F%94%8D-method-1-with-straightel-and-use-package&#34;&gt;🔍 Method 1. with &lt;code&gt;straight.el&lt;/code&gt; and &lt;code&gt;use-package&lt;/code&gt;:&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%F0%9F%94%8D-method-2-manual&#34;&gt;🔍 Method 2. Manual&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%F0%9F%96%A5-usage&#34;&gt;🖥 Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%F0%9F%93%9A-use-it-as-a-library&#34;&gt;📚 Use it as a library&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%F0%9F%94%A8-supported-languages&#34;&gt;🔨 Supported languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%F0%9F%93%9D-customization&#34;&gt;📝 Customization&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%E2%9A%AA-analysis-on-new-nodes&#34;&gt;⚪ Analysis on new nodes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%E2%9D%94-example&#34;&gt;❔ Example&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%F0%9F%94%8D-writing-new-analysis-functions&#34;&gt;🔍 Writing new analysis functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%F0%9F%94%97-references&#34;&gt;🔗 References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#contribute&#34;&gt;Contribute&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%E2%9D%93-how-to-add-an-analysis-rules&#34;&gt;❓ How to add an analysis rules?&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jcs-elpa/codemetrics/master/#%F0%9F%94%8D-where-can-i-look-for-tree-sitter-node&#34;&gt;🔍 Where can I look for tree-sitter node?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;💾 Installation&lt;/h2&gt; &#xA;&lt;h3&gt;🔍 Method 1. with &lt;code&gt;straight.el&lt;/code&gt; and &lt;code&gt;use-package&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package codemetrics&#xA;  :straight (codemetrics :type git :host github :repo &#34;jcs-elpa/codemetrics&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔍 Method 2. Manual&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/jcs-elpa/codemetrics /path/to/lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then in Emacs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-to-list &#39;load-path &#34;/path/to/lib&#34;)&#xA;(require &#39;codemetrics)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package codemetrics&#xA;  :load-path &#34;/path/to/lib&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🖥 Usage&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to start using this package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(codemetrics-mode 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;📚 Use it as a library&lt;/h3&gt; &#xA;&lt;p&gt;These are functions you can use to analyze:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Functions&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;codemetrics-analyze&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Analyze a string with &lt;code&gt;major-mode&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;codemetrics-region&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Analyze region&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;codemetrics-buffer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Analyze the whole buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;All these functions return the score data indicating the complexity.&lt;/p&gt; &#xA;&lt;h2&gt;🔨 Supported languages&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Please sort these two lists alphabetically!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;These languages are fairly complete:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bash&lt;/li&gt; &#xA; &lt;li&gt;C / C++ / C#&lt;/li&gt; &#xA; &lt;li&gt;Go&lt;/li&gt; &#xA; &lt;li&gt;Java / JavaScript / JSX / Julia&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;PHP / Python&lt;/li&gt; &#xA; &lt;li&gt;Ruby / Rust&lt;/li&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA; &lt;li&gt;TypeScript / TSX&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These languages are in development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Agda&lt;/li&gt; &#xA; &lt;li&gt;Elm&lt;/li&gt; &#xA; &lt;li&gt;Elixir&lt;/li&gt; &#xA; &lt;li&gt;Emacs Lisp&lt;/li&gt; &#xA; &lt;li&gt;OCaml&lt;/li&gt; &#xA; &lt;li&gt;Scala (upstream, kinda buggy)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📝 Customization&lt;/h2&gt; &#xA;&lt;p&gt;Although codemetrics aims to have good analysis rules out of the box for all supported definitions, people will indubitably have their own preferences or desired functionality. The following section outlines how to add your own analysis definitions and analysis functions to make codemetrics work for you. If there are any improvements you find for existing or new languages, please do raise a PR so that others may benefit from better analysis in the future!&lt;/p&gt; &#xA;&lt;h3&gt;⚪ Analysis on new nodes&lt;/h3&gt; &#xA;&lt;p&gt;Code-Metrics defines all its analysis definitions in the variable &lt;code&gt;codemetrics-rules&lt;/code&gt; which is an alist with the key of the alist being the mode and the value being another alist of analysis definitions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Example of codemetrics-rules&#39; structure&#xA;&#39;((c-mode      . c-analysis-definitions)  ; &amp;lt;language&amp;gt;-analysis-definitions is structured as shown below&#xA;  (csharp-mode . csharp-analysis-definitions)&#xA;  (go-mode     . go-analysis-definitions)&#xA;  (scala-mode  . scala-analysis-definitions)&#xA;  ...)&#xA;&#xA;;; Examle of a analysis definition alist&#xA;(setq csharp-analysis-definitions&#xA;    (if_statement   . (1 t))&#xA;    (&#34;&amp;amp;&amp;amp;&#34;           . codemetrics-rules--logical-operators))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So you can select whatever node that you want to analyze on it.&lt;/p&gt; &#xA;&lt;p&gt;To find what node you&#39;ll want to analyze, refer to the &lt;a href=&#34;https://emacs-tree-sitter.github.io/getting-started/#view-the-syntax-tree&#34;&gt;tree-sitter documentation&lt;/a&gt; about viewing nodes. &lt;code&gt;tree-sitter-debug&lt;/code&gt; and &lt;code&gt;tree-sitter-query-builder&lt;/code&gt; are both very useful for this.&lt;/p&gt; &#xA;&lt;h4&gt;❔ Example&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s look at a quick example of adding a new analysis definition. Let&#39;s say you want to add analysis to &lt;code&gt;go-mode&lt;/code&gt;&#39;s &lt;code&gt;if_statement&lt;/code&gt;. The analysis definition that is needed will be &lt;code&gt;&#39;(if_statement . (1 t))&lt;/code&gt;. To add this to the &lt;code&gt;codemetrics-rules&lt;/code&gt;, you can do something like the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(push &#39;(if_statement . (1 t)) (alist-get &#39;go-mode codemetrics-rules))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now the new analysis definition should be usable by codemetrics!&lt;/p&gt; &#xA;&lt;h3&gt;🔍 Writing new analysis functions&lt;/h3&gt; &#xA;&lt;p&gt;For more complex analysis, you can write your own analysis rules!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;node&lt;/code&gt; - (optional) the targeted tree-sitter node, in this example, &lt;code&gt;if_statement&lt;/code&gt; will be the targeting node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;depth&lt;/code&gt; - (optional) current depth of from the root tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nested&lt;/code&gt; - (optional) current nested level apply from current complexity algorithm.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then the function needs to return an integer represent the score and a boolean represent increment of the nested level in the form &lt;code&gt;(score-to-add . nested?)&lt;/code&gt;. This can be useful if you want to add extra conditional logic onto your analysis.&lt;/p&gt; &#xA;&lt;p&gt;As an example of an analysis function, take a look at the definition of the basic &lt;code&gt;codemetrics-rules--class-declaration&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun codemetrics-rules--class-declaration (_node depth _nested)&#xA;  &#34;...&#34;&#xA;  (codemetrics-with-complexity&#xA;    (if (&amp;lt; 1 depth)  ; if class inside class,&#xA;        &#39;(1 nil)     ; we score 1, but don&#39;t increase nested level&#xA;      &#39;(0 nil))&#xA;    &#39;(1 nil)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔗 References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kisstkondoros/codemetrics&#34;&gt;codemetrics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matkoch/resharper-cognitivecomplexity&#34;&gt;resharper-cognitivecomplexity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uudashr/gocognit&#34;&gt;gocognit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bbatsov/emacs-lisp-style-guide&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/elisp-style%20guide-purple&#34; alt=&#34;Elisp styleguide&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/jcs090218&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-1?logo=paypal&amp;amp;color=blue&#34; alt=&#34;Donate on paypal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/jcs090218&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/patreon-become%20a%20patron-orange.svg?logo=patreon&#34; alt=&#34;Become a patron&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you would like to contribute to this project, you may either clone and make pull requests to this repository. Or you can clone the project and establish your own branch of this tool. Any methods are welcome!&lt;/p&gt; &#xA;&lt;h3&gt;❓ How to add an analysis rules?&lt;/h3&gt; &#xA;&lt;p&gt;When adding a new analysis rules, add the analysis definition function to &lt;code&gt;codemetrics.el&lt;/code&gt; itself near where the other rules functions live and then add the parser to &lt;code&gt;codemetrics-rules.el&lt;/code&gt; file. Finally, if you are adding support for a new language, remember to add it to the &lt;code&gt;codemetrics-rules&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;When creating a new parser, name it &lt;code&gt;codemetrics-rules-&amp;lt;language&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When creating a new analysis function, name it &lt;code&gt;codemetrics-rules-&amp;lt;language&amp;gt;-&amp;lt;feature&amp;gt;&lt;/code&gt; or something similar.&lt;/p&gt; &#xA;&lt;h4&gt;🔍 Where can I look for tree-sitter node?&lt;/h4&gt; &#xA;&lt;p&gt;Here are some techniques for finding your desired nodes in tree-sitter.&lt;/p&gt; &#xA;&lt;p&gt;To look for the correct node you have three options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;look at the &lt;code&gt;tree-sitter-[lang]/grammar.js&lt;/code&gt; implementation. In the above example, &lt;code&gt;if_statement&lt;/code&gt; node is defined in the &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-c-sharp&#34;&gt;tree-sitter-c-sharp&lt;/a&gt;&#39;s &lt;code&gt;grammar.js&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;open a file of your language choice in emacs and &lt;code&gt;M-x tree-sitter-debug-mode&lt;/code&gt;. This will display the whole s-expr representing your file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(message &#34;%S&#34; (tsc-node-to-sexp))&lt;/code&gt; in your function to display what your function is seeing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Warning&lt;/p&gt; &#xA; &lt;p&gt;Make sure you look into the correct repository. Repositories are managed under &lt;a href=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs&#34;&gt;tree-sitter-langs&lt;/a&gt;&#39;s using git submodule. Some tree-sitter module aren&#39;t using the latest version!&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>