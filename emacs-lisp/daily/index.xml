<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-11T01:25:54Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yjwen/org-reveal</title>
    <updated>2023-08-11T01:25:54Z</updated>
    <id>tag:github.com,2023-08-11:/yjwen/org-reveal</id>
    <link href="https://github.com/yjwen/org-reveal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exports Org-mode contents to Reveal.js HTML presentation.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+Title: Introduction to Org-Reveal #+Author: Yujie Wen #+Email: &lt;a href=&#34;mailto:yjwen.ty@gmail.com&#34;&gt;yjwen.ty@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+REVEAL_INIT_OPTIONS: width:1200, height:800, margin: 0.1, minScale:0.2, maxScale:2.5, transition:&#39;cube&#39; #+OPTIONS: toc:nil #+REVEAL_THEME: moon #+REVEAL_HLEVEL: 2 #+REVEAL_HEAD_PREAMBLE: &#xA; &lt;meta name=&#34;description&#34; content=&#34;Org-Reveal Introduction.&#34;&gt; #+REVEAL_POSTAMBLE: &lt;/p&gt;&#xA;&lt;p&gt; Created by yjwen. &lt;/p&gt; #+REVEAL_PLUGINS: (markdown notes) #+REVEAL_EXTRA_CSS: ./local.css&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;[[http://melpa.org/#/ox-reveal][file:http://melpa.org/packages/ox-reveal-badge.svg]] [[http://www.gnu.org/licenses/gpl-3.0.html][file:https://img.shields.io/:license-gpl3-blue.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Table of Contents Title links are for viewing within org-mode buffer only. &lt;em&gt;Github viewers please use the =(gh)= links.&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#table-of-contents%5D%5Bgh%5D%5D&#34;&gt;[Table of Contents][Table of Contents]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#revealjs-and-org-reveal%5D%5Bgh%5D%5D&#34;&gt;[Reveal.js and Org-Reveal][Reveal.js and Org-Reveal]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#requirements-and-installation%5D%5Bgh%5D%5D&#34;&gt;[Requirements and Installation][Requirements and Installation]&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#install-revealjs%5D%5Bgh%5D%5D&#34;&gt;[Install Reveal.js][Install Reveal.js]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#install-org-reveal-from-melpa%5D%5Bgh%5D%5D&#34;&gt;[Install org-reveal from MELPA][Install org-reveal from MELPA]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#install-org-reveal-from-github%5D%5Bgh%5D%5D&#34;&gt;[Install org-reveal from GitHub][Install org-reveal from GitHub]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#configuration%5D%5Bgh%5D%5D&#34;&gt;[Configuration][Configuration]&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#set-the-location-of-revealjs%5D%5Bgh%5D%5D&#34;&gt;[Set the location of Reveal.js][Set the location of Reveal.js]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#url-form-for-file-location%5D%5Bgh%5D%5D&#34;&gt;[Url form for file location][Url form for file location]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#first-try%5D%5Bgh%5D%5D&#34;&gt;[First Try][First Try]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#the-hlevel%5D%5Bgh%5D%5D&#34;&gt;[The HLevel][The HLevel]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#hlevels-effects-on-slides-layout%5D%5Bgh%5D%5D&#34;&gt;[HLevel&#39;s Effects on Slides Layout][HLevel&#39;s Effects on Slides Layout]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#configure-hlevels-value%5D%5Bgh%5D%5D&#34;&gt;[Configure HLevel&#39;s Value][Configure HLevel&#39;s Value]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#force-split%5D%5Bgh%5D%5D&#34;&gt;[Force Split][Force Split]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#select-theme%5D%5Bgh%5D%5D&#34;&gt;[Select Theme][Select Theme]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#set-the-title-slide%5D%5Bgh%5D%5D&#34;&gt;[Set The Title Slide][Set The Title Slide]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#customize-the-title-slide%5D%5Bgh%5D%5D&#34;&gt;[Customize the Title Slide][Customize the Title Slide]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#title-slide-state%5D%5Bgh%5D%5D&#34;&gt;[Title Slide State][Title Slide State]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#set-slide-background%5D%5Bgh%5D%5D&#34;&gt;[Set Slide Background][Set Slide Background]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#single-colored-background%5D%5Bgh%5D%5D&#34;&gt;[Single Colored Background][Single Colored Background]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#single-image-background%5D%5Bgh%5D%5D&#34;&gt;[Single Image Background][Single Image Background]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#repeating-image-background%5D%5Bgh%5D%5D&#34;&gt;[Repeating Image Background][Repeating Image Background]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#title-slide-background-image%5D%5Bgh%5D%5D&#34;&gt;[Title Slide Background Image][Title Slide Background Image]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#table-of-contents-slide-background-image%5D%5Bgh%5D%5D&#34;&gt;[Table of Contents Slide Background Image][Table of Contents Slide Background Image]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#background-for-all-slides%5D%5Bgh%5D%5D&#34;&gt;[Background for all slides][Background for all slides]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#slide-size%5D%5Bgh%5D%5D&#34;&gt;[Slide Size][Slide Size]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#slide-numbering%5D%5Bgh%5D%5D&#34;&gt;[Slide Numbering][Slide Numbering]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#slide-header/footer%5D%5Bgh%5D%5D&#34;&gt;[Slide Header/Footer][Slide Header/Footer]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#fragmented-contents%5D%5Bgh%5D%5D&#34;&gt;[Fragmented Contents][Fragmented Contents]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#fragment-styles%5D%5Bgh%5D%5D&#34;&gt;[Fragment Styles][Fragment Styles]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#fragment-index%5D%5Bgh%5D%5D&#34;&gt;[Fragment Index][Fragment Index]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#list-fragments%5D%5Bgh%5D%5D&#34;&gt;[List Fragments][List Fragments]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#initialization-options%5D%5Bgh%5D%5D&#34;&gt;[Initialization options][Initialization options]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#third-party-plugins%5D%5Bgh%5D%5D&#34;&gt;[Third-Party Plugins][Third-Party Plugins]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#highlight-source-code%5D%5Bgh%5D%5D&#34;&gt;[Highlight Source Code][Highlight Source Code]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#using-highlightjs%5D%5Bgh%5D%5D&#34;&gt;[Using highlight.js][Using highlight.js]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;[[Auto-Animate]] ([[https://github.com/yjwen/org-reveal#auto-animate][gh]])&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#editable-source-code%5D%5Bgh%5D%5D&#34;&gt;[Editable Source Code][Editable Source Code]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#mathjax%5D%5Bgh%5D%5D&#34;&gt;[MathJax][MathJax]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#preamble-and-postamble%5D%5Bgh%5D%5D&#34;&gt;[Preamble and Postamble][Preamble and Postamble]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#generating-pre/postamble-by-emacs-lisp-functions%5D%5Bgh%5D%5D&#34;&gt;[Generating Pre/Postamble by Emacs-Lisp Functions][Generating Pre/Postamble by Emacs-Lisp Functions]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#prologue-and-epilogue%5D%5Bgh%5D%5D&#34;&gt;[Prologue and Epilogue]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#raw-html-in-slides%5D%5Bgh%5D%5D&#34;&gt;[Raw HTML in Slides][Raw HTML in Slides]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#speaker-notes%5D%5Bgh%5D%5D&#34;&gt;[Speaker Notes][Speaker Notes]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#multiplexing%5D%5Bgh%5D%5D&#34;&gt;[Multiplexing][Multiplexing]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#extra-stylesheets-and-script-sources%5D%5Bgh%5D%5D&#34;&gt;[Extra Stylesheets and Script Sources][Extra Stylesheets and Script Sources]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#select-built-in-scripts%5D%5Bgh%5D%5D&#34;&gt;[Select Built-In Scripts][Select Built-In Scripts]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#extra-dependent-script%5D%5Bgh%5D%5D&#34;&gt;[Extra Dependent Script][Extra Dependent Script]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#extra-slide-attribute%5D%5Bgh%5D%5D&#34;&gt;[Extra Slide Attribute][Extra Slide Attribute]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#export-into-single-file%5D%5Bgh%5D%5D&#34;&gt;[Export into Single File][Export into Single File]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#export-current-subtree%5D%5Bgh%5D%5D&#34;&gt;[Export Current Subtree][Export Current Subtree]&lt;/a&gt; #+REVEAL: split:t&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#tips%5D%5Bgh%5D%5D&#34;&gt;[Tips][Tips]&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#managing-table-of-contents%5D%5Bgh%5D%5D&#34;&gt;[Managing Table of Contents][Managing Table of Contents]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#internal-links%5D%5Bgh%5D%5D&#34;&gt;[Internal Links][Internal Links]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#custom-js%5D%5Bgh%5D%5D&#34;&gt;[Custom JS][Custom JS]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#executable-source-blocks%5D%5Bgh%5D%5D&#34;&gt;[Executable Source Blocks][Executable Source Blocks]&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#html-src-block%5D%5Bgh%5D%5D&#34;&gt;[HTML Src Block][HTML Src Block]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#javascript-src-block%5D%5Bgh%5D%5D&#34;&gt;[Javascript Src Block][Javascript Src Block]&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#perl-src-block-(not-klipsified)%5D%5Bgh%5D%5D&#34;&gt;[Perl Src Block (not klipsified)][Perl Src Block (not klipsified)]&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#properties-for-sub-headings%5D%5Bgh%5D%5D&#34;&gt;[Properties for Sub-headings][Properties for Sub-headings]&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#customize-iframe-background-slide%5D%5Bgh%5D%5D&#34;&gt;[Customize iframe background slide][Customize iframe background slide]&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yjwen/org-reveal/master/%5B%5Bhttps://github.com/yjwen/org-reveal#thanks%5D%5Bgh%5D%5D&#34;&gt;[Thanks][Thanks]&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reveal.js and Org-Reveal&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Reveal.js&lt;/em&gt; is a tool for creating good-looking HTML presentations, authored by [[http://hakim.se/][Hakim El Hattab]]. \ For an example of a reveal.js presentation, see [[http://lab.hakim.se/reveal-js/#/][here]].&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Org-Reveal&lt;/em&gt; exports your [[http://orgmode.org/][Org]] documents to reveal.js presentations.\ With Org-reveal, you can create beautiful presentations with 3D effects from simple but powerful Org contents.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Requirements and Installation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reveal.js.&lt;/li&gt; &#xA;   &lt;li&gt;Org-mode.&lt;/li&gt; &#xA;   &lt;li&gt;ox-reveal.el.&lt;/li&gt; &#xA;   &lt;li&gt;htmlize.el (optional, for syntax highlighting).&lt;/li&gt; &#xA;   &lt;li&gt;And, of course, emacs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Install Reveal.js&lt;/p&gt; &#xA;&lt;p&gt;Download Reveal.js packages from [[https://github.com/hakimel/reveal.js/][here]].&lt;/p&gt; &#xA;&lt;p&gt;Extract Reveal.js folders from the downloaded zip file.&lt;/p&gt; &#xA;&lt;p&gt;If you do not wish to download reveal.js yourself and would rather get a copy from a CDN, see the section [[https://github.com/yjwen/org-reveal#set-the-location-of-revealjs][Set the location of Reveal.js]]&lt;/p&gt; &#xA;&lt;p&gt;** Install org-reveal from MELPA&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to install org-reveal is to install package ox-reveal from MELPA.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to [[http://melpa.org/#/getting-started]] for using MELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It is suggested to use the [[http://orgmode.org/elpa.html][Org ELPA]] archive in pair with the ox-reveal packages. Emacs builtin Org-mode package may be out of date for MELPA&#39;s ox-reveal.&lt;/p&gt; &#xA;&lt;p&gt;** Install org-reveal from GitHub&lt;/p&gt; &#xA;&lt;p&gt;You can also install the latest developing version of org-reveal directly from GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Please download the latest Org-reveal package from [[https://github.com/yjwen/org-reveal][the Org-reveal GitHub page]]. Or clone the GitHub repository: #+BEGIN_SRC sh git clone &lt;a href=&#34;https://github.com/yjwen/org-reveal.git&#34;&gt;https://github.com/yjwen/org-reveal.git&lt;/a&gt; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Copy =ox-reveal.el= to one of your Emacs&#39;s &lt;del&gt;load-path&lt;/del&gt;, and add the following statement to your =.emacs= file. #+BEGIN_SRC lisp (require &#39;ox-reveal) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It is suggested to use the Org-mode git repository in pair with the GitHub org-reveal. Please get the Org-mode git repository by: #+BEGIN_SRC sh $ git clone &lt;a href=&#34;https://code.orgmode.org/bzg/org-mode&#34;&gt;https://code.orgmode.org/bzg/org-mode&lt;/a&gt; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Follow the [[http://orgmode.org/worg/dev/org-build-system.html][online instruction]] for building and installing Org-mode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Set the location of Reveal.js&lt;/p&gt; &#xA;&lt;p&gt;Org-reveal must know where Reveal.js is on your computer before exporting Org contents. The location of Reveal.js is the path to the top directory of the Reveal.js packages, the directory which contains file &lt;em&gt;README.md&lt;/em&gt;, but &lt;em&gt;not&lt;/em&gt; the one that contains the file reveal.js.&lt;/p&gt; &#xA;&lt;p&gt;The default location is =./reveal.js=, relative to the Org file.&lt;/p&gt; &#xA;&lt;p&gt;Changing =org-reveal-root= &#39;s value will change the location globally. For example, add the following statement to your .emacs file: #+BEGIN_SRC lisp (setq org-reveal-root &#34;file:///d:/reveal.js&#34;) #+END_SRC &lt;em&gt;IMPORTANT&lt;/em&gt;: the absolute path to Reveal.js should be in URL form, &#34;file:///path_to_reveal.js&#34;, as illustrated above. By setting option =REVEAL_ROOT=, the location is only affected within the Org file.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+REVEAL_ROOT: file:///d:/reveal.js #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Set your =REVEAL_ROOT= to the following URL to download reveal.js from a CDN instead of downloading a local copy.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+REVEAL_ROOT: &lt;a href=&#34;https://cdn.jsdelivr.net/npm/reveal.js&#34;&gt;https://cdn.jsdelivr.net/npm/reveal.js&lt;/a&gt; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Url form for file location&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;For example if you cloned this repository to your home directory,&#xA;this file in Mac OS X would be referred to as&#xA;&#34;file:///Users/username/org-reveal/readme.org&#34;.  This file in&#xA;Ubuntu would be &#34;file:///home/username/org-reveal/readme.org&#34; and&#xA;in Windows this file would be&#xA;&#34;file:///c:/Users/username/org-reveal/readme.org&#34;.  For more&#xA;detail on this standard please refer to&#xA;[[http://en.wikipedia.org/wiki/File_URI_scheme]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** First Try&lt;/p&gt; &#xA;&lt;p&gt;To load Org-reveal, type &#34;M-x load-library&#34;, then type &#34;ox-reveal&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Now you can export this manual into Reveal.js presentation by typing &#34;C-c C-e R R&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Open the generated &#34;Readme.html&#34; in your browser and enjoy the cool slides.&lt;/p&gt; &#xA;&lt;p&gt;** The HLevel&lt;/p&gt; &#xA;&lt;p&gt;Org-reveal maps each heading and its contents to one Reveal.js slide. Since Reveal.js arranges slides into a 2-dimensional matrix, Org-reveal use a &lt;em&gt;HLevel&lt;/em&gt; value to decide whether to map headings to horizontal or vertical slides.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Headings of level less than or equal to &lt;em&gt;HLevel&lt;/em&gt; are mapped to horizontal slides.&lt;/li&gt; &#xA; &lt;li&gt;Headings with a deeper level are mapped to vertical slides.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;HLevel&#39;s default value is 1, means only level 1 headings are arranged horizontally. Deeper headings are mapped to vertical slides below their parent level 1 heading.&lt;/p&gt; &#xA;&lt;p&gt;*** HLevel&#39;s Effects on Slides Layout&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Assume we have a simple Org file as below:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,* H1 ,* H2 ,** H2.1 ,*** H2.1.1 ,* H3 #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If HLevel is 1, the default value, headings H2.1 and H2.1.1 will&#xA;be mapped to vertical slides below the slides of heading H2.&#xA;&#xA;[[./images/hlevel.png]]&#xA;&#xA;If HLevel is changed to 2, slides of heading H2.1 will be changed&#xA;to the main horizontal queue, and slides of heading H2.1.1 will be&#xA;a vertical slide below it.&#xA;&#xA;[[./images/hlevel2.png]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Configure HLevel&#39;s Value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Change variable =org-reveal-hlevel=&#39;s value to set HLevel globally.\\&#xA;  For example, add the following statement to your =.emacs= file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC lisp (setq org-reveal-hlevel 2) #+END_SRC&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Setting Org files local HLevel to option =REVEAL_HLEVEL=.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+REVEAL_HLEVEL: 2 #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Force Split&lt;/p&gt; &#xA;&lt;p&gt;If one heading has too many things to fit into one slide, you can split the contents into multiple vertical slides manually, by inserting&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+REVEAL: split #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;#+REVEAL: split&lt;/p&gt; &#xA;&lt;p&gt;Now a new slide begins after =#+REVEAL= keyword.&lt;/p&gt; &#xA;&lt;p&gt;To repeat the heading title on the split slide, please insert &lt;del&gt;#+REVEAL: split:t&lt;/del&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;** Select Theme&lt;/p&gt; &#xA;&lt;p&gt;Theme is set globally throughout the whole file by setting option =REVEAL_THEME=.&lt;/p&gt; &#xA;&lt;p&gt;Available themes can be found in &lt;del&gt;dist/theme&lt;/del&gt; in the reveal.js directory and can be select by giving the CSS file base name (without .css extension) to =REVEAL_THEME=.&lt;/p&gt; &#xA;&lt;p&gt;A custom theme CSS can be also set by giving its URL to &lt;del&gt;REVEAL_THEME&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Slide transition style is set by initialization option &lt;del&gt;transition&lt;/del&gt; and the transition speed is set by &lt;del&gt;transitionSpeed&lt;/del&gt; . Please refer to section [[Initialization options]] for details.&lt;/p&gt; &#xA;&lt;p&gt;Available transitions are: default|cube|page|concave|zoom|linear|fade|none.&lt;/p&gt; &#xA;&lt;p&gt;For an example of these settings, please check the heading part of this document. ** Set The Title Slide By default, Org-reveal generates a title slide displaying the title, the author, the Email, the date and the time-stamp of the Org document, controlled by Org&#39;s [[http://orgmode.org/org.html#Export-settings][export settings]].&lt;/p&gt; &#xA;&lt;p&gt;To avoid a title slide, please set variable &lt;del&gt;org-reveal-title-slide&lt;/del&gt; to &lt;del&gt;nil&lt;/del&gt;, or add &lt;del&gt;reveal_title_slide:nil&lt;/del&gt; to &lt;del&gt;#+OPTIONS:&lt;/del&gt; line.&lt;/p&gt; &#xA;&lt;p&gt;To restore the default title slide, please set variable &lt;del&gt;org-reveal-title-slide&lt;/del&gt; to &lt;del&gt;&#39;auto&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;*** Customize the Title Slide&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;There are 3 ways to customize the title slide.&#xA;&#xA;1. Set variable ~org-reveal-title-slide~ to a string of HTML markups.&#xA;2. Set ~reveal_title_slide~ in the ~#+OPTIONS:~ line to a string of HTML markups.&#xA;3. Use one or more option lines ~#+REVEAL_TITLE_SLIDE:~ to specify&#xA;   the HTML of the title slide.&#xA;&#xA;The following escaping characters can be used to retrieve document&#xA;information:&#xA;| ~%t~ | Title     |&#xA;| ~%s~ | Subtitle  |&#xA;| ~%a~ | Author    |&#xA;| ~%e~ | Email     |&#xA;| ~%d~ | Date      |&#xA;| ~%%~ | Literal % |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Title Slide State&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Using this option allows to thoroughly change the style of the title slide:&#xA;&#xA;* =REVEAL_TITLE_SLIDE_STATE=: Style applied to the [[https://revealjs.com/markup/#viewport][viewport]] of title slide.&#xA;  See the [[https://revealjs.com/markup/#slide-states][reveal.js documentation]]&#xA;  for details.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Set Slide Background&lt;/p&gt; &#xA;&lt;p&gt;Slide background can be set to a color, an image, a repeating image array or an iframe by setting heading properties.&lt;/p&gt; &#xA;&lt;p&gt;*** Single Colored Background :PROPERTIES: :reveal_background: #543210 :END:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set property =reveal_background= to either an RGB color value, or any&#xA;supported CSS color format.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,*** Single Colored Background :PROPERTIES: :reveal_background: #123456 :END: #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Single Image Background :PROPERTIES: :reveal_background: ./images/whale.jpg :reveal_background_trans: slide :END:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set property =reveal_background= to an URL of background image.&#xA;Set property =reveal_background_trans= to =slide= to make background image&#xA;sliding rather than fading.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,*** Single Image Background :PROPERTIES: :reveal_background: ./images/whale.jpg :reveal_background_trans: slide :END: #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Repeating Image Background :PROPERTIES: :reveal_background: ./images/whale.jpg :reveal_background_size: 200px :reveal_background_repeat: repeat :reveal_background_opacity: 0.2 :END:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Resize background image by setting property&#xA;=reveal_background_size= to a number.&#xA;&#xA;Set property =reveal_background_repeat= to =repeat= to repeat&#xA;image on the background, =reveal_background_opacity= for the&#xA;background opacity, which is a value of 0-1.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,*** Repeating Image Background :PROPERTIES: :reveal_background: ./images/whale.jpg :reveal_background_size: 200px :reveal_background_repeat: repeat :reveal_background_opacity: 0.2 :END: #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Iframe background :PROPERTIES: :reveal_background_iframe: &lt;a href=&#34;https://hakim.se&#34;&gt;https://hakim.se&lt;/a&gt; :reveal_background: rgb(0,0,0) :reveal_background_opacity: 0.8 :END:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;When =iframe= is being used as slide background, the content of the slide will&#xA;be put inside a dedicated division. The other background options can be used to&#xA;configure this new division. The =reveal_background= supports both color and&#xA;image as a normal slide.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org :PROPERTIES: :reveal_background_iframe: &lt;a href=&#34;https://hakim.se&#34;&gt;https://hakim.se&lt;/a&gt; :reveal_background: rgb(0,0,0) :reveal_background_opacity: 0.8 :END: #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;*** Title Slide Background Image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To set the title slide&#39;s background image, please specify the&#xA;following options:&#xA;&#xA;* =REVEAL_TITLE_SLIDE_BACKGROUND=: A URL to the background image.&#xA;* =REVEAL_TITLE_SLIDE_BACKGROUND_SIZE=: HTML size specification, e.g. ~200px~.&#xA;* =REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT=: Set to ~repeat~ to repeat the image.&#xA;* =REVEAL_TITLE_SLIDE_BACKGROUND_OPACITY=: Set the background opacity.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Table of Contents Slide Background Image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To set the (automatically generated) table of contents slide&#39;s background&#xA;image, please specify the following options:&#xA;&#xA;* =REVEAL_TOC_SLIDE_BACKGROUND=: A URL to the background image.&#xA;* =REVEAL_TOC_SLIDE_BACKGROUND_SIZE=: HTML size specification, e.g. ~200px~.&#xA;* =REVEAL_TOC_SLIDE_BACKGROUND_REPEAT=: Set to ~repeat~ to repeat the image.&#xA;* =REVEAL_TOC_SLIDE_BACKGROUND_OPACITY=: Set the background opacity.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Background for all slides&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can also configure the background for all slides in the presentation with:&#xA;&#xA;* =REVEAL_DEFAULT_SLIDE_BACKGROUND=&#xA;* =REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE=&#xA;* =REVEAL_DEFAULT_SLIDE_BACKGROUND_POSITION=&#xA;* =REVEAL_DEFAULT_SLIDE_BACKGROUND_REPEAT=&#xA;* =REVEAL_DEFAULT_SLIDE_BACKGROUND_TRANSITION=&#xA;&#xA;Refer to the [[https://github.com/yjwen/org-reveal#set-slide-background][Set slide background section]] for instructions on how to use each&#xA;parameter.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Slide Size&lt;/p&gt; &#xA;&lt;p&gt;Reveal.js scales slides to best fit the display resolution, but you can also specify the desired size by settings the option tags =reveal_width= and =reveal_height=.&lt;/p&gt; &#xA;&lt;p&gt;The scaling behavior can also be constrained by setting following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=#+REVEAL_MARGIN:= :: a float number, the factor of empty area surrounding slide contents.&lt;/li&gt; &#xA; &lt;li&gt;=#+REVEAL_MIN_SCALE:= :: a float number, the minimum scaling down ratio.&lt;/li&gt; &#xA; &lt;li&gt;=#+REVEAL_MAX_SCALE:= :: a float number, the maximum scaling up ratio.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Slide Numbering&lt;/p&gt; &#xA;&lt;p&gt;To enable slide numbers, please add the following Reveal.js initial option. #+BEGIN_SRC org ,#+REVEAL_INIT_OPTIONS: slideNumber:true #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Other possible choice for slide numbers are: | &#34;h.v&#34; | Horizontal . vertical slide number. The same as &lt;del&gt;true&lt;/del&gt; | | &#34;h/v&#34; | Horizontal / vertical slide number | | &#34;c&#34; | Flatten slide number | | &#34;c/t&#34; | Flatten slide number / total slides |&lt;/p&gt; &#xA;&lt;p&gt;** Slide Header/Footer Specify Slide header/footer globally by =#+REVEAL_SLIDE_HEADER:= and =#+REVEAL_SLIDE_FOOTER:=. The option content will be put into divisions of class =slide-header= and =slide-footer=, so you can control their appearance in custom CSS file(see [[https://github.com/rafadc/org-reveal#extra-stylesheets][Extra Stylesheets]]). By default header/footer content will only display on content slides. To show them also on the title and toc slide you can add &lt;del&gt;reveal_global_header:t&lt;/del&gt; and &lt;del&gt;reveal_global_footer:t&lt;/del&gt; to &lt;del&gt;#+OPTIONS:&lt;/del&gt; line.&lt;/p&gt; &#xA;&lt;p&gt;** Fragmented Contents&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Make contents fragmented (show up one-by-one) by setting option&#xA;=ATTR_REVEAL= with property &#34;:frag frag-style&#34;, as illustrated&#xA;below.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag roll-in Paragraphs can be fragmented.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag roll-in - Lists can - be fragmented.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag roll-in Pictures, tables and many other HTML elements can be fragmented.&lt;/p&gt; &#xA;&lt;p&gt;*** Fragment Styles Available fragment styles are: #+ATTR_REVEAL: :frag t * grow * shrink * roll-in * fade-out * highlight-red * highlight-green * highlight-blue * appear&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Setting ~:frag t~ will use Reveal.js default fragment style, which&#xA;can be overridden by local option ~#+REVEAL_DEFAULT_FRAG_STYLE~ or&#xA;global variable ~org-reveal-default-frag-style~.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Fragment Index Fragment sequence can be changed by assigning adding &lt;del&gt;:frag_idx&lt;/del&gt; property to each fragmented element.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag t :frag_idx 3 And, this paragraph shows at last.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag t :frag_idx 2 This paragraph shows secondly.&lt;/p&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag t :frag_idx 1 This paragraph shows at first.&lt;/p&gt; &#xA;&lt;p&gt;*** List Fragments&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~#+ATTR_REVEAL: :frag frag-style~ above a list defines fragment&#xA;style for the list as a whole.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag grow 1. All items grow. 2. As a whole.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To define fragment styles for every list item, please enumerate&#xA;each item&#39;s style in a lisp list.&#xA;&#xA;~none~ in the style list will disable fragment for the&#xA;corresponding list item.&#xA;&#xA;Custom fragment sequence should also be enumerated for each list&#xA;item.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+REVEAL: split:t An example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+ATTR_REVEAL: :frag (grow shrink roll-in fade-out none) :frag_idx (4 3 2 1 -)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I will grow.&lt;/li&gt; &#xA; &lt;li&gt;I will shrink.&lt;/li&gt; &#xA; &lt;li&gt;I rolled in.&lt;/li&gt; &#xA; &lt;li&gt;I will fade out.&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t fragment. #+END_SRC&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+ATTR_REVEAL: :frag (grow shrink roll-in fade-out none) :frag_idx (4 3 2 1 -)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I will grow.&lt;/li&gt; &#xA; &lt;li&gt;I will shrink.&lt;/li&gt; &#xA; &lt;li&gt;I rolled in.&lt;/li&gt; &#xA; &lt;li&gt;I will fade out.&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t fragment. #+REVEAL: split:t When there is &lt;del&gt;:frag_idx&lt;/del&gt; specified, insufficient fragment style list will be extended by its last element. So a &lt;del&gt;:frag (appear)&lt;/del&gt; assigns each item of a list the &lt;del&gt;appear&lt;/del&gt; fragment style. #+BEGIN_SRC org ,#+ATTR_REVEAL: :frag (appear)&lt;/li&gt; &#xA; &lt;li&gt;I appear.&lt;/li&gt; &#xA; &lt;li&gt;I appear.&lt;/li&gt; &#xA; &lt;li&gt;I appear. #+END_SRC #+ATTR_REVEAL: :frag (appear)&lt;/li&gt; &#xA; &lt;li&gt;I appear.&lt;/li&gt; &#xA; &lt;li&gt;I appear.&lt;/li&gt; &#xA; &lt;li&gt;I appear.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Initialization options Use &lt;del&gt;#+REVEAL_INIT_OPTIONS&lt;/del&gt; to give JS snippet for initialize reveal.js with different options. Check [[https://github.com/hakimel/reveal.js/#configuration][reveal.js document]] for supported options. Check the head part of this document for an example. ** Third-Party Plugins Reveal.js is also extensible through third-party plugins. Org-reveal provides a customizable variable &lt;del&gt;org-reveal-external-plugins&lt;/del&gt; for defining available third-party plugins. This variable is an associative list. The first element of each Assoc cell is a symbol same as the name of the plugin and the second is either a string specifying the location of the plugin script or a list of string in case of multiple scripts. Each script string can have ONE optional &lt;del&gt;%s&lt;/del&gt;, which will be replaced by &lt;code&gt;reveal-root&lt;/code&gt;. Code below is an example. #+begin_src lisp (setq org-reveal-external-plugins &#39;((RevealMenu . &#34;path/to/reveal.js-menu/menu.js&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+REVEAL: split:t&lt;/p&gt; &#xA;&lt;p&gt;Plugins can be specified in buffer by one or more &lt;del&gt;#+REVEAL_EXTERNAL_PLUGINS&lt;/del&gt; options. Each option can have one or more plugin specifications of the same format as in &lt;del&gt;org-reveal-external-plugins&lt;/del&gt;. Below is an example.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src org ,#+REVEAL_EXTERNAL_PLUGINS: (plugin1 . &#34;ex/plugin1.js&#34;) (plugin2 . &#34;ex/plugin2.js&#34;) ,#+REVEAL_EXTERNAL_PLUGINS: (plugin3 &#34;ex/plugin3-1.js&#34; &#34;ex/plugin3-2.js&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;At most one &lt;del&gt;%s&lt;/del&gt; can be inserted into each plugin string, which will be replaced by Reveal.js root path.&lt;/p&gt; &#xA;&lt;p&gt;** Highlight Source Code&lt;/p&gt; &#xA;&lt;p&gt;There are two ways to highlight source code.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use your Emacs theme&lt;/li&gt; &#xA; &lt;li&gt;Use highlight.js&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To Use your Emacs theme, please make sure &lt;del&gt;htmlize.el&lt;/del&gt; is installed. Then no more setup is necessary.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example of highlighted lisp code from org-reveal. #+BEGIN_SRC lisp (defun org-reveal--read-file (file) &#34;Return the content of file&#34; (with-temp-buffer (insert-file-contents-literally file) (buffer-string))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;If you saw odd indentation, please set variable =org-html-indent= to =nil= and export again.&lt;/p&gt; &#xA;&lt;p&gt;*** Using highlight.js&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;You can also use [[https://highlightjs.org][highlight.js]], by adding ~highlight~ to the Reveal.js&#xA;plugin list.&#xA;#+BEGIN_SRC org&#xA;  ,#+REVEAL_PLUGINS: (highlight)&#xA;#+END_SRC&#xA;&#xA;The default highlighting theme is ~zenburn.css~ brought with&#xA;Reveal.js. To use other themes, please specify the CSS file name by&#xA;~#+REVEAL_HIGHLIGHT_CSS~ or the variable ~org-reveal-highlight-css~.&#xA;&#xA;The &#34;%r&#34; in the given CSS file name will be replaced by Reveal.js&#39;&#xA;URL.&#xA;&#xA;Reveal.js supports to enable line numbers and highlighting on&#xA;given line numbers. Please use ~:code_attribs~ to pass [[https://github.com/hakimel/reveal.js#line-numbers--highlights][the proper&#xA;attributes]] to the source code block . Below is an example.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+BEGIN_SRC org ,#+ATTR_REVEAL: :code_attribs data-line-numbers=&#39;1|3&#39; ,#+BEGIN_SRC c++ int main() { cout &amp;lt;&amp;lt; &#34;Hello&#34; &amp;lt;&amp;lt; endl; } ,#+END_SRC #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Auto-Animate To enable [[https://revealjs.com/auto-animate/][auto-animate]], please add &lt;del&gt;data-auto-animate&lt;/del&gt; to heading&#39;s &lt;del&gt;REVEAL_EXTRA_ATTR&lt;/del&gt; property. To force Reveal.js to match source codes across slides, please add the same &lt;del&gt;:data_id foo&lt;/del&gt; to the &lt;del&gt;#+ADDR_REVEAL:&lt;/del&gt; tag of the source code blocks. Example as below. #+begin_src org ,* Heading 1 :PROPERTIES: :REVEAL_EXTRA_ATTR: data-auto-animate :END:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        ,#+ATTR_REVEAL: :data_id foo&#xA;        ,#+begin_src js&#xA;          let index = 1&#xA;        ,#+end_src&#xA;&#xA;&#xA; ,* Heading 2&#xA;   :PROPERTIES:&#xA;   :REVEAL_EXTRA_ATTR: data-auto-animate&#xA;   :END:&#xA;&#xA;&#xA;   ,#+ATTR_REVEAL: :data_id foo&#xA;   ,#+begin_src js&#xA;     let index = 1&#xA;     let value = 2&#xA;   ,#+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Editable Source Code It is now possible to embed code blocks in a codemirror instance in order to edit code during a presentation. At present, this capacity is turned on or off at time export using these defcustoms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;org-reveal-klipsify-src&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-reveal-klipse-css&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;org-reveal-klipse-js&lt;/del&gt; This feature is turned off by default and needs to be switched on with &lt;del&gt;org-reveal-klipsify-src&lt;/del&gt;. At present code editing is supported in javascript, clojure, php, ruby, scheme, and python only.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** MathJax :PROPERTIES: :CUSTOM_ID: my-heading :END:&lt;/p&gt; &#xA;&lt;p&gt;${n! \over k!(n-k)!} = {n \choose k}$&lt;/p&gt; &#xA;&lt;p&gt;LateX equation are rendered in native HTML5 contents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;IMPORTANT&lt;/em&gt;: Displaying equations requires internet connection to [[http://mathjax.org/][mathjax.org]] or local MathJax installation. For local MathJax installation, set option =REVEAL_MATHJAX_URL= to the URL pointing to the local MathJax location.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Option &lt;del&gt;reveal_mathjax&lt;/del&gt; is obsolete now. Org-reveal exports necessary MathJax configurations when there is Latex equation found.&lt;/p&gt; &#xA;&lt;p&gt;** Preamble and Postamble&lt;/p&gt; &#xA;&lt;p&gt;You can define preamble and postamble contents which will not be shown as slides, but will be exported into the body part of the generated HTML file, at just before and after the slide contents.&lt;/p&gt; &#xA;&lt;p&gt;Change preamble and postamble contents globally by setting variable =org-reveal-preamble= and =org-reveal-postamble=.&lt;/p&gt; &#xA;&lt;p&gt;Change preamble and postamble contents locally by setting options =REVEAL_PREAMBLE= and =REVEAL_POSTAMBLE=, as illustrated at the heading part of this document.&lt;/p&gt; &#xA;&lt;p&gt;To add custom contents into HTML == parts, set contents to variable =org-reveal-head-preamble= or option =REVEAL_HEAD_PREAMBLE=.&lt;/p&gt; &#xA;&lt;p&gt;*** Generating Pre/Postamble by Emacs-Lisp Functions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If the contents of pre/postamble is the name of an evaluated&#xA;Emacs-Lisp function, which must accept an argument of Org-mode&#xA;info and return a string, the returned string will be taken&#xA;as pre/postamble contents.&#xA;&#xA;So you can embed the Emacs-Lisp function as an Org-Babel source&#xA;block and mark it to be evaluated when exporting the document.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Prologue and Epilogue&lt;/p&gt; &#xA;&lt;p&gt;Similar to preamble and postamble, arbitrary HTML contents can be inserted between the opening &lt;del&gt;&lt;/del&gt;&lt;/p&gt;&#xA;&lt;div reveal&gt;&#xA;  and &#xA; &lt;del&gt;&#xA;  &lt;div slides&gt;&#xA;    tags, called prologue, and their closing counterparts, called epilogue.&#xA;   &lt;p&gt;&lt;/p&gt; &#xA;   &lt;p&gt;Specify those contents by options &lt;del&gt;REVEAL_PROLOGUE&lt;/del&gt; and &lt;del&gt;REVEAL_EPILOGUE&lt;/del&gt; for one buffer, or by variable &lt;del&gt;org-reveal-prologue&lt;/del&gt; and &lt;del&gt;org-reveal-epilogue&lt;/del&gt; for global setup.&lt;/p&gt; &#xA;   &lt;p&gt;** Raw HTML in Slides&lt;/p&gt; &#xA;   &lt;p&gt;Besides the Org contents, you can embed raw HTML contents into slides by placing a =#+REVEAL_HTML= keyword.&lt;/p&gt; &#xA;   &lt;p&gt;The famous cat jump fail: #+REVEAL_HTML: &amp;lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Awf45u6zrP0&#34; frameborder=&#34;0&#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt; ** Speaker Notes Reveal.js supports speaker notes, which are displayed in a separate browser window. Pressing &#39;s&#39; on slide&#39;s windows will pop up a window displaying the current slide, the next slide and the speaker notes on the current slide.&lt;/p&gt; &#xA;   &lt;p&gt;Org-reveal recognize texts between =#+BEGIN_NOTES= and =#+END_NOTES= as speaker notes. See the example below.&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org ,* Heading 1 Some contents. ,#+BEGIN_NOTES Enter speaker notes here. ,#+END_NOTES #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;To skip exporting speaker notes, please set variable &lt;del&gt;org-reveal-ignore-speaker-notes&lt;/del&gt; to &lt;del&gt;t&lt;/del&gt;.&lt;/p&gt; &#xA;   &lt;p&gt;#+REVEAL: split Speaker notes requires the &lt;del&gt;notes&lt;/del&gt; plug-in. If you changed default plug-in setting by specifying =#+REVEAL_PLUGINS= or by setting variable =org-reveal-plugins=, please make sure &lt;del&gt;notes&lt;/del&gt; is in the plug-in list to enable speaker notes.&lt;/p&gt; &#xA;   &lt;p&gt;#+REVEAL: split&lt;/p&gt; &#xA;   &lt;p&gt;Due to a bug in Reveal.js, sometimes the speaker notes window shows only blank screens. A workaround to this issue is to put the presentation HTML file into the Reveal.js root directory and reopen it in the browser.&lt;/p&gt; &#xA;   &lt;p&gt;** Multiplexing Reveal.js supports a [[https://github.com/reveal/multiplex#multiplex-plugin][multiplexing plugin]], which allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at [[https://reveal-multiplex.glitch.me/]].&lt;/p&gt; &#xA;   &lt;p&gt;To use multiplexing, first prepare a Socket.io server by the instruction [[https://github.com/reveal/multiplex#socketio-server][here]]. Then include the following options in the org file. Contents in &lt;del&gt;[]&lt;/del&gt; are commentary notes, not part of the options. #+BEGIN_SRC org ,#+REVEAL_MULTIPLEX_ID: [Obtained from the socket.io server. ] ,#+REVEAL_MULTIPLEX_SECRET: [Obtained from socket.io server. Gives the master control of the presentation.] ,#+REVEAL_MULTIPLEX_URL: &lt;a href=&#34;https://reveal-multiplex.glitch.me&#34;&gt;https://reveal-multiplex.glitch.me&lt;/a&gt; [Location of socket.io server] #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;If your are using Reveal.js 3.x, an extra option is necessary for Socket.io scripts. #+BEGIN_SRC org ,#+REVEAL_MULTIPLEX_SOCKETIO_URL: &lt;a href=&#34;http://cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.10/socket.io.min.js&#34;&gt;http://cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.10/socket.io.min.js&lt;/a&gt; #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;You must generate unique values for the =REVEAL_MULTIPLEX_ID= and =REVEAL_MULTIPLEX_SECRET= options, obtaining these from the socket.io server you are using.&lt;/p&gt; &#xA;   &lt;p&gt;If you include these options in your .org file, reveal-org will enable your .html file as the master file for multiplexing and will generate a file named in the form =[filename]_client.html= in the same directory as the client .html file. Provide your audience with a link to the client file to allow them to track your presentation on their own device.&lt;/p&gt; &#xA;   &lt;p&gt;** Extra Stylesheets and Script Sources&lt;/p&gt; &#xA;   &lt;p&gt;Set =REVEAL_EXTRA_CSS= to a stylesheet file path to load extra custom styles after loading a theme.&lt;/p&gt; &#xA;   &lt;p&gt;Set =REVEAL_EXTRA_SCRIPT_SRC= to script file path to load extra script sources. In case of multiple script files, specify each of them by one =REVEAL_EXTRA_SCRIPT_SRC= line. The specified scripts is loaded after Reveal.js initialization.&lt;/p&gt; &#xA;   &lt;p&gt;Scripts that must be loaded before Reveal.js initialization can be set by one or more =REVEAL_EXTRA_SCRIPT_BEFORE_SRC= lines.&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org ,#+REVEAL_EXTRA_CSS: url-to-custom-stylesheet.css ,#+REVEAL_EXTRA_SCRIPT_SRC: url-to-custom-script #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;Same setup can be done globally by customize variables &lt;del&gt;org-reveal-extra-css&lt;/del&gt;, &lt;del&gt;org-reveal-extra-script-src&lt;/del&gt; and &lt;del&gt;org-reveal-extra-script-before-src&lt;/del&gt;. In case of multiple script files, organize the script file names as a list.&lt;/p&gt; &#xA;   &lt;p&gt;** Select Built-In Scripts&lt;/p&gt; &#xA;   &lt;p&gt;Set option =REVEAL_PLUGINS= or variable =org-reveal-plugins= to a lisp list to select built-in scripts.&lt;/p&gt; &#xA;   &lt;p&gt;Available built-in scripts are: classList/markdown/highlight/zoom/notes/search/remotes.&lt;/p&gt; &#xA;   &lt;p&gt;Default built-ins are: classList/markdown/highlight/zoom/notes/multiplex.&lt;/p&gt; &#xA;   &lt;p&gt;The following examples select /markdown/ and /highlight/ only. #+BEGIN_SRC org ,#+REVEAL_PLUGINS: (markdown highlight) #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;** Extra Dependent Script&lt;/p&gt; &#xA;   &lt;p&gt;Set =REVEAL_EXTRA_JS= to the url of extra reveal.js dependent script if necessary. #+BEGIN_SRC org ,#+REVEAL_EXTRA_JS: url-to-custom-script.js #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;** Extra Slide Attribute&lt;/p&gt; &#xA;   &lt;p&gt;Set property =reveal_extra_attr= to headings to add any necessary attributes to slides.&lt;/p&gt; &#xA;   &lt;p&gt;** Export into Single File&lt;/p&gt; &#xA;   &lt;p&gt;By setting option =reveal_single_file= to &lt;del&gt;t&lt;/del&gt;, images and necessary Reveal.js scripts will be embedded into the exported HTML file, to make a portable HTML. Please note that remote images will /not/ be included in the single file, so presentations with remote images will still require an Internet connection.&lt;/p&gt; &#xA;   &lt;p&gt;Attention: This needs locally available reveal.js files!&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org ,#+OPTIONS: reveal_single_file:t #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;When exporting into single file, functions provided by Reveal.js libraries will be disabled due to limitation, including PDF export, Markdown support, zooming, speaker notes and remote control.&lt;/p&gt; &#xA;   &lt;p&gt;Code highlight by highlight.js is also disabled. But &lt;em&gt;code highlight by Emacs is not effected.&lt;/em&gt;&lt;/p&gt; &#xA;   &lt;p&gt;** Export Current Subtree&lt;/p&gt; &#xA;   &lt;p&gt;Use menu entry &#34; C-c C-e R S&#34; to export only current subtree, without the title slide and the table of content, for a quick preview of your current edition.&lt;/p&gt; &#xA;   &lt;p&gt;** Skip headings Any heading with tag &lt;del&gt;:noexport:&lt;/del&gt; will be discarded when exporting to all backends. If you want a heading being discard when exporting to Reveal.js only, please use tag &lt;del&gt;:noexport_reveal:&lt;/del&gt;.&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Tips&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;p&gt;** Managing Table of Contents&lt;/p&gt; &#xA;   &lt;p&gt;It is well often the automatic &#34;Table of Contents&#34; is too large to fit into one slide. One workaround is to disable the automatic TOC and generate one manually, which can be split into multiple slides. Org-reveal provides a helper function to insert a TOC to the current org buffer. Type &lt;del&gt;M-x org-reveal-manual-toc&lt;/del&gt; to invoke it.&lt;/p&gt; &#xA;   &lt;p&gt;To disable the automatic TOC, add =toc:nil= to =#+OPTIONS= #+BEGIN_SRC org ,#+OPTIONS: toc:nil #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;** Internal Links&lt;/p&gt; &#xA;   &lt;p&gt;Reveal.js supports only jump between slides, but not between elements on slides. Thus, we can only link to headlines in an Org document.&lt;/p&gt; &#xA;   &lt;p&gt;You can create links pointing to a headline&#39;s text, or its custom-id, as the examples below:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;[[Tips]].&lt;/li&gt; &#xA;    &lt;li&gt;[[#my-heading][Heading]] with a =CUSTOM_ID= property.&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;p&gt;** Custom JS&lt;/p&gt; &#xA;   &lt;p&gt;To pass custom JS code to &lt;del&gt;Reveal.initialize&lt;/del&gt;, state the code by &lt;del&gt;#+REVEAL_EXTRA_INITIAL_JS&lt;/del&gt; (multiple statements are concatenated) or by custom variable &lt;del&gt;org-reveal-extra-initial-js&lt;/del&gt;. The first appearance of &lt;del&gt;%s&lt;/del&gt; in the script will be replaced by Reveal.js root path.&lt;/p&gt; &#xA;   &lt;p&gt;If you want to add extra code outside of the &lt;del&gt;Reveal.initialize&lt;/del&gt; block, then &lt;del&gt;#+REVEAL_EXTRA_SCRIPT&lt;/del&gt; can be used. The code will be inserted after closing the &lt;del&gt;Reveal.initialize&lt;/del&gt; statement, but before the closing &lt;del&gt;&amp;lt;/script&amp;gt;&lt;/del&gt; tag.&lt;/p&gt; &#xA;   &lt;p&gt;** Executable Source Blocks To allow live execution of code in some languages, enable the klipse plugin by setting &lt;del&gt;org-reveal-klipsify-src&lt;/del&gt; to non-nil. Src blocks with the languages &lt;del&gt;js&lt;/del&gt;, &lt;del&gt;clojure&lt;/del&gt;, &lt;del&gt;html&lt;/del&gt;, &lt;del&gt;python&lt;/del&gt;, &lt;del&gt;ruby&lt;/del&gt;, &lt;del&gt;scheme&lt;/del&gt;, &lt;del&gt;php&lt;/del&gt; will be executed with output shown in a console-like environment. See the source code of &lt;del&gt;org-reveal-src-block&lt;/del&gt; for more details.&lt;/p&gt; &#xA;   &lt;p&gt;*** HTML Src Block #+BEGIN_SRC html&lt;/p&gt; &#xA;   &lt;h1 class=&#34;whatever&#34;&gt;hello, what&#39;s your name&lt;/h1&gt; #+END_SRC &#xA;   &lt;p&gt;*** Javascript Src Block #+BEGIN_SRC js console.log(&#34;success&#34;); var x=&#39;string using single quote&#39;; x #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;*** Perl Src Block (not klipsified) #+BEGIN_SRC perl I don&#39;t know perl! #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;** Properties for Sub-headings&lt;/p&gt; &#xA;   &lt;p&gt;If you want to have multiple reveal presentations in a single Org-mode file, you might want to switch from file-based properties like:&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org ,#+REVEAL_HLEVEL: 2 ,#+REVEAL_INIT_OPTIONS: transition: &#39;cube&#39; ,#+REVEAL_THEME: moon #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;to properties of sub-headings like:&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org :PROPERTIES: :EXPORT_REVEAL_HLEVEL: 2 :EXPORT_INIT_OPTIONS: transition: &#39;cube&#39; :EXPORT_REVEAL_THEME: moon :END: #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;This way, each org-reveal presentation can have its own settings. An example heading with corresponding settings would look like:&lt;/p&gt; &#xA;   &lt;p&gt;#+BEGIN_SRC org ,* My org-reveal presentation among many within the same Org-mode file :PROPERTIES: :reveal_overview: t :EXPORT_AUTHOR: Test Author :EXPORT_DATE: 2018-01-01 :EXPORT_TITLE: My Title :EXPORT_EMAIL: &lt;a href=&#34;mailto:Test@example.com&#34;&gt;Test@example.com&lt;/a&gt; :EXPORT_OPTIONS: num:nil toc:nil reveal_keyboard:t reveal_overview:t :EXPORT_REVEAL_HLEVEL: 3 :EXPORT_REVEAL_MARGIN: 200 :END: #+END_SRC&lt;/p&gt; &#xA;   &lt;p&gt;** Customize iframe background slide :PROPERTIES: :reveal_background_iframe: &lt;a href=&#34;https://hakim.se&#34;&gt;https://hakim.se&lt;/a&gt; :reveal_background: rgb(0,0,0) :reveal_background_opacity: 0.8 :reveal_background_position: absolute :reveal_extra_attr: height: 200px; bottom: -700px; border-radius: 10px; padding: 20px :END: #+REVEAL_HTML: &#xA;    &lt;smaller&gt;&#xA;      #+BEGIN_SRC org :reveal_background_position: absolute :reveal_extra_attr: height: 200px; bottom: -700px; border-radius: 10px; padding: 20px #+END_SRC #+REVEAL_HTML: &#xA;    &lt;/smaller&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Thanks&lt;/p&gt; &lt;p&gt;Courtesy to:&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;p&gt;#+ATTR_REVEAL: :frag roll-in The powerful Org-mode, #+ATTR_REVEAL: :frag roll-in the impressive Reveal.js #+ATTR_REVEAL: :frag roll-in and the precise MathJax&lt;/p&gt; &#xA;  &lt;/div&gt;&lt;/del&gt;&#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>atilaneves/cmake-ide</title>
    <updated>2023-08-11T01:25:54Z</updated>
    <id>tag:github.com,2023-08-11:/atilaneves/cmake-ide</id>
    <link href="https://github.com/atilaneves/cmake-ide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use Emacs as a C/C++ IDE&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cmake-ide&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/atilaneves/cmake-ide&#34;&gt;&lt;img src=&#34;https://travis-ci.org/atilaneves/cmake-ide.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/atilaneves/cmake-ide?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/atilaneves/cmake-ide/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/cmake-ide&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/cmake-ide-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CppCon 2015 Lightning talk on cmake-ide:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=5FQwQ0QWBTU&#34; title=&#34;Emacs as a C++ IDE&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/5FQwQ0QWBTU/0.jpg&#34; alt=&#34;CppCon 2015 Lightning talk on cmake-ide&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cmake-ide&lt;/code&gt; is a package to enable IDE-like features on Emacs for &lt;a href=&#34;http://www.cmake.org/&#34;&gt;CMake&lt;/a&gt; projects. It also supports non-CMake projects as long as a &lt;a href=&#34;http://clang.llvm.org/docs/JSONCompilationDatabase.html&#34;&gt;compilation database&lt;/a&gt; is generated out-of-band.This includes autocompletion and on-the-fly syntax checking in Emacs for CMake projects with minimal configuration. It uses other packages to do its heavy lifting, in a combination of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;rtags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianjcj/auto-complete-clang&#34;&gt;auto-complete-clang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/company-mode/company-mode/raw/master/company-clang.el&#34;&gt;company-clang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Sarcasm/irony-mode&#34;&gt;irony&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;cmake-ide&lt;/code&gt; will set variables and call functions for the installed dependent packages.&lt;/p&gt; &#xA;&lt;p&gt;It works by running CMake in Emacs in order to obtain the necessary compiler flags to pass to the other tools. Since all the dependencies are specified in the CMake scripts, there is no need to maintain a parallel dependency tracking system for Emacs. Just ask CMake.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sets variables for &lt;code&gt;auto-complete-clang&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and others for a CMake project automagically. Hardly any configuration necessary.&lt;/li&gt; &#xA; &lt;li&gt;Automatically reruns CMake when a file is saved. Great when using CMake file globs to pick up newly created files, but needs &lt;code&gt;cmake-ide-build-dir&lt;/code&gt; to be set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake-ide-delete-file&lt;/code&gt; allows you to have the same convenience when deleting files. I can&#39;t figure out a better way to do this. Obviously simply deleting the file means having to run CMake again manually for it to register the change in the list of files to be compiled.&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;cmake-ide-build-dir&lt;/code&gt; is set, it is considered to be the build directory to run CMake in. Additionally, this will cause &lt;code&gt;cmake-ide-compile&lt;/code&gt; to compile the project there. It automatically detects Ninja and Make builds and sets the compile command accordingly. The command to use can be customised by setting the &lt;code&gt;cmake-compile-command&lt;/code&gt; variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake-ide&lt;/code&gt; can make usage of &lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;rtags&lt;/a&gt; for finding definitions, also using clang. If &lt;code&gt;(require &#39;rtags)&lt;/code&gt; is called before &lt;code&gt;cmake-ide-setup&lt;/code&gt;, it will automatically start the rtags server (&lt;code&gt;rdm&lt;/code&gt;) and call &lt;code&gt;rc -J&lt;/code&gt; to index the project files for 0-config &#34;jump to definition&#34; and everything else rtags offers. This only works if both &lt;code&gt;rdm&lt;/code&gt; and &lt;code&gt;rc&lt;/code&gt; and in the system path or if &lt;code&gt;cmake-ide-rdm-executable&lt;/code&gt; and &lt;code&gt;cmake-ide-rc-executable&lt;/code&gt; are customized correctly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Pool Directories and Persistent Naming of Automatic Build Directories&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cmake-ide&lt;/code&gt; can automatically create build directories for you -- either in the system&#39;s tmp-directory or under &lt;code&gt;cmake-ide-build-pool-dir&lt;/code&gt; (if set). By default, all automatically created build directories (no matter where created) will have temporary and unique names, that will change with each new session and are thus not reusable. You can, however, by setting &lt;code&gt;cmake-ide-build-pool-use-persistent-naming&lt;/code&gt; use a reproducible naming scheme that is based on the project&#39;s path and will not change as long as the project&#39;s path is the same. This way, you can reuse the build directory.&lt;/p&gt; &#xA;&lt;p&gt;By using both &lt;code&gt;cmake-ide-build-pool-dir&lt;/code&gt; and &lt;code&gt;cmake-ide-build-pool-use-persistent-naming&lt;/code&gt;, you can fully do away with the need to configure a build directory per project with directory local variables (for example).&lt;/p&gt; &#xA;&lt;h2&gt;Non-CMake projects&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;.dir-locals.el&lt;/code&gt; to set the &lt;code&gt;cmake-ide-project-dir&lt;/code&gt; and &lt;code&gt;cmake-ide-build-dir&lt;/code&gt; variables (use absolute paths).&lt;/p&gt; &#xA;&lt;p&gt;.dir-locals.el: ((nil . ((cmake-ide-build-dir . &#34;/path/to/build/dir&#34;) (cmake-ide-project-dir . &#34;/path/to/project/dir&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;If a file called &lt;code&gt;compile_commands.json&lt;/code&gt; exists in &lt;code&gt;cmake-ide-build-dir&lt;/code&gt;, it will work just as well as for CMake projects. Bear (&lt;a href=&#34;https://github.com/rizsotto/Bear&#34;&gt;https://github.com/rizsotto/Bear&lt;/a&gt;) can be used to generate a compile_commands.json from a make command.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install from &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET cmake-ide.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add this to your &lt;code&gt;.emacs&lt;/code&gt; / &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;rtags) ;; optional, must have rtags installed&#xA;(cmake-ide-setup)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;cmake-ide-flags-c&lt;/code&gt; or &lt;code&gt;cmake-ide-flags-c++&lt;/code&gt; are set, they will be added to &lt;code&gt;ac-clang-flags&lt;/code&gt; and &lt;code&gt;company-clang-arguments&lt;/code&gt;. These variables should be set. Particularly, they should contain the system include paths (e.g. &lt;code&gt;&#39;(&#34;-I/usr/include/c++/4.9.1&#34; &#34;...&#34;)&lt;/code&gt;. For a system with gcc, you can get this information by running &lt;code&gt;gcc -v -xc++ /dev/null -fsyntax-only&lt;/code&gt; (it&#39;s the same prerequisite for &lt;code&gt;auto-complete-clang&lt;/code&gt; to work, since that&#39;s how clang itself works).&lt;/p&gt; &#xA;&lt;p&gt;And... that&#39;s it. It works by calling cmake and parsing the resulting JSON file with compiler flags. Set &lt;code&gt;cmake-ide-build-dir&lt;/code&gt; to where your project is being built and you won&#39;t have to call CMake manually again (except for the first time to specify options). Best done with &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html&#34;&gt;directory local variables&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/redguardtoo/cpputils-cmake&#34;&gt;cpputils-cmake&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>libjack/dotfiles</title>
    <updated>2023-08-11T01:25:54Z</updated>
    <id>tag:github.com,2023-08-11:/libjack/dotfiles</id>
    <link href="https://github.com/libjack/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;manage my dotfiles&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dotfiles&lt;/h1&gt; &#xA;&lt;p&gt;manage my dotfiles&lt;/p&gt; &#xA;&lt;h2&gt;vim setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -Sso ~/.vim/bundle/vim-pathogen/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;prepend to vimrc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;execute pathogen#infect()&#xA;runtime bundle/vim-pathogen/autoload/pathogen.vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pathogen lets all other plugins startup from within bundle directory also provides :Helptags to take care of docs&lt;/p&gt; &#xA;&lt;p&gt;other plugins loaded:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git clone &lt;a href=&#34;https://github.com/Lokaltog/vim-powerline.git&#34;&gt;https://github.com/Lokaltog/vim-powerline.git&lt;/a&gt; bundle/vim-powerline OR&lt;/li&gt; &#xA; &lt;li&gt;git clone &lt;a href=&#34;https://github.com/bling/vim-airline&#34;&gt;https://github.com/bling/vim-airline&lt;/a&gt; bundle/vim-airline&lt;/li&gt; &#xA; &lt;li&gt;git clone &lt;a href=&#34;https://github.com/ctrlpvim/ctrlp.vim&#34;&gt;https://github.com/ctrlpvim/ctrlp.vim&lt;/a&gt; bundle/ctrlp.vim&lt;/li&gt; &#xA; &lt;li&gt;git clone &lt;a href=&#34;https://github.com/scrooloose/nerdtree.git&#34;&gt;https://github.com/scrooloose/nerdtree.git&lt;/a&gt; bundle/nerdtree&lt;/li&gt; &#xA; &lt;li&gt;git clone &lt;a href=&#34;https://github.com/scrooloose/nerdcommenter.git&#34;&gt;https://github.com/scrooloose/nerdcommenter.git&lt;/a&gt; bundle/nerdcommenter&lt;/li&gt; &#xA; &lt;li&gt;git clone &lt;a href=&#34;https://github.com/ntpeters/vim-better-whitespace.git&#34;&gt;https://github.com/ntpeters/vim-better-whitespace.git&lt;/a&gt; bundle/vim-better-whitespace&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>