<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-21T01:26:54Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alhassy/repl-driven-development</title>
    <updated>2023-10-21T01:26:54Z</updated>
    <id>tag:github.com,2023-10-21:/alhassy/repl-driven-development</id>
    <link href="https://github.com/alhassy/repl-driven-development" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Press &#34;C-x C-e&#34; to send any piece of code (in any language) to a REPL in the background, within Emacs!&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; Editor Integrated REPLs for all languages &lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://melpa.org/#/repl-driven-development&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://img.shields.io/badge/repl--driven--development-Melpa-green?logo=Gnu-Emacs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?text=This looks super neat (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà::&amp;amp;url=https://github.com/alhassy/repl-driven-development&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url?url=https://github.com/alhassy/repl-driven-development&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alhassy/repl-driven-development/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-green?logo=nil&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://alhassy.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/author-musa_al--hassy-purple?logo=nintendo-3ds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/alhassy&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-buy_me_a%C2%A0coffee-gray?logo=buy-me-a-coffee&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;This library provides the Emacs built-in &lt;kbd style=&#34;&#34;&gt;C‚îÄx C‚îÄe&lt;/kbd&gt; behaviour for arbitrary languages, provided they have a REPL shell command.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;It provides a ‚Äúsend line to REPL process‚Äù command, for your language.&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;http://alhassy.com/images/rdd-workflow.png&#34; width=&#34;400&#34; height=&#34;300&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/rdd.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;&amp;nbsp;&lt;a href=&#34;javascript:window.scrollTo(0,0)&#34; style=&#34;color: black !important; border-bottom: none !important;&#34; class=&#34;tooltip&#34; title=&#34;Go to the top of the page&#34;&gt; Œû &lt;/a&gt;&amp;nbsp;&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#mini-tutorial&#34;&gt;Mini-Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#orgb9da7df&#34;&gt;Installation &amp;amp; Usage Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#videos&#34;&gt;Videos&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#teaching-a-javascript-runtime-incrementally-to-be-a-web-server-&#34;&gt;REPL Driven Development :: Teaching a JavaScript runtime, incrementally, to be a web server üçΩÔ∏è üîÅ ü§ñ&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#Bye&#34;&gt;Bye!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;Whenever reading/refactoring some code, if you can make some of it self-contained, then you can immediately try it out! No need to load your entire program; nor copy-paste into an external REPL. The benefits of Emacs&#39; built-in &lt;kbd style=&#34;&#34;&gt;C‚îÄx C‚îÄe&lt;/kbd&gt; for Lisp, and Lisp&#39;s Repl Driven Development philosophy, are essentially made possible for arbitrary languages (to some approximate degree, but not fully).&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;http://alhassy.com/images/rdd-benefits.png&#34; width=&#34;250&#34; height=&#34;250&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Just as &lt;kbd style=&#34;&#34;&gt;C-u C-x C-e&lt;/kbd&gt; inserts the resulting expression at the current cursour position, so too all &lt;code&gt;repl-driven-development&lt;/code&gt; commands allow for a &lt;kbd style=&#34;&#34;&gt;C‚îÄu&lt;/kbd&gt; prefix which inserts the result. This allows for a nice scripting experience where results are kept for future use.&lt;/p&gt; &#xA;&lt;p&gt;Finally, just as &lt;kbd style=&#34;&#34;&gt;C‚îÄh e&lt;/kbd&gt; shows you the &lt;code&gt;*Messages*&lt;/code&gt; buffer where you can see the evaluations of your Emacs Lisp via &lt;kbd style=&#34;&#34;&gt;C‚îÄx C‚îÄe&lt;/kbd&gt;; likewise, &lt;kbd style=&#34;&#34;&gt;C‚îÄh e&lt;/kbd&gt; shows you the output results of any REPL command created by &lt;code&gt;repl-driven-development&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Mini-Tutorial&lt;/h1&gt; &#xA;&lt;p&gt;Often, while reading a README file, we will (1) copy a shell command, (2) open a terminal, and (3) paste the shell command to run it. We can evaluate arbitrary regions in a shell in one step via &lt;kbd style=&#34;&#34;&gt;C‚îÄx C‚îÄt&lt;/kbd&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   (repl-driven-development [C-x C-t] &#34;bash&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, execute &lt;kbd style=&#34;&#34;&gt;C‚îÄx C‚îÄt&lt;/kbd&gt; anywhere on each line below and see results in an overlay, right by your cursor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  echo &#34;It is $(date) and I am at $PWD, my name is $(whoami) and I have: $(ls)&#34;&#xA;&#xA;  say &#34;My name is $(whoami) and I like Emacs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice as each line is sent to the Bash process, the line is highlighted briefly in yellow. Moreover, you can hover over the text to see a tooltip with the resulting shell output. Finally, if you invoke &lt;kbd style=&#34;&#34;&gt;C-h k C-x C-t&lt;/kbd&gt; you get help about this new &lt;kbd style=&#34;&#34;&gt;C‚îÄx C‚îÄt&lt;/kbd&gt; command, such as inserting results at point via &lt;kbd style=&#34;&#34;&gt;C-u C-x C-t&lt;/kbd&gt; or to reset/refresh the current Bash process with &lt;kbd style=&#34;&#34;&gt;C-u -1 C-x C-t&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This also works for any command-line REPL; for example, for Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   (repl-driven-development [C-x C-p] &#34;python3&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, we can submit the following Python snippets with &lt;kbd style=&#34;&#34;&gt;C‚îÄx C‚îÄp&lt;/kbd&gt; on each line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  sum([1, 2, 3, 4])&#xA;&#xA;  list(map(lambda i: &#39;Fizz&#39;*(not i%3)+&#39;Buzz&#39;*(not i%5) or i, range(1,101)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These work fine, however there are some shortcomings of this REPL. For example, echoing results could be prettier and it doesn&#39;t handle multi-line input very well. You can address these issues using the various hooks / keyword arguments of the &lt;code&gt;repl-driven-development&lt;/code&gt; macro.&lt;/p&gt; &#xA;&lt;p&gt;However, this package comes with preconfigured REPLS for: &lt;code&gt;python, terminal, java, javascript&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Simply use the name of these configurations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;  (repl-driven-development [C-x C-p] python)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can submit the following, with &lt;kbd style=&#34;&#34;&gt;C‚îÄx C‚îÄp&lt;/kbd&gt;, with no issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  def square(x):&#xA;    return x * x&#xA;&#xA;  square(5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since these new REPL commands are just Emacs functions, we can use several at the time, alternating between them. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;  ;; C-x C-e on the next two lines&#xA;  (repl-driven-development [C-x C-t] terminal)&#xA;  (repl-driven-development [C-x C-p] python)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  echo Hello... &amp;gt; /tmp/o       # C-x C-t here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  print(open(&#34;/tmp/o&#34;).read()) # C-x C-p here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  echo ...and bye &amp;gt;&amp;gt; /tmp/o    # C-x C-t again&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  print(open(&#34;/tmp/o&#34;).read()) # C-x C-p again&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s conclude with a GUI example in Java.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;  ;; Set ‚ÄúC-x C-j‚Äù to evaluate Java code in a background REPL.&#xA;  (repl-driven-development [C-x C-j] &#34;jshell&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  // Select this Java snippet, then press ‚ÄúC-x C-j‚Äù to evaluate it&#xA;  import javax.swing.*;&#xA;  JOptionPane.showMessageDialog(new JFrame(){{setAlwaysOnTop(true);}}, &#34;Super nice!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can use a preconfigured Java REPL, to remove the annoying ‚Äújshell&amp;gt;‚Äù prompt from overlay echos, handle multi-line input, and more.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;  (repl-driven-development [C-x C-j] java)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; // REPL result values are shown as overlays:&#xA; // See a list of 23 numbers, which are attached as a tooltip to this text.&#xA; IntStream.range(0, 23).forEach(x -&amp;gt; System.out.println(x))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more documentation, and examples, see &lt;a href=&#34;http://alhassy.com/repl-driven-development&#34;&gt;http://alhassy.com/repl-driven-development&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation &amp;amp; Usage Instructions&lt;/h1&gt; &#xA;&lt;p&gt;This package is on Melpa, &lt;a href=&#34;https://melpa.org/#/repl-driven-development&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://img.shields.io/badge/repl--driven--development-Melpa-green?logo=Gnu-Emacs&#34;&gt;&lt;/a&gt;, so you can install it with &lt;a href=&#34;https://github.com/alhassy/emacs.d#use-package-the-start-of-initel&#34;&gt;use-package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package repl-driven-development&#xA;  :ensure t&#xA;  :config&#xA;  (repl-driven-development [C-x C-j] java)       ;; e‚ÄúX‚Äùecute ‚Äúj‚Äùava&#xA;  (repl-driven-development [C-x C-n] javascript) ;; e‚ÄúX‚Äùecute ‚Äún‚Äùodejs&#xA;  (repl-driven-development [C-x C-p] python)     ;; e‚ÄúX‚Äùecute ‚Äúp‚Äùython&#xA;  (repl-driven-development [C-x C-t] terminal))  ;; e‚ÄúX‚Äùecute ‚Äút‚Äùerminal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above mentions the four pre-configured REPLs that the package comes with: These are like their CLI equivalents, but offer more bells and whistles.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For example, the pre-configured &lt;code&gt;java&lt;/code&gt; REPL is like &lt;code&gt;(repl-driven-development [C-x C-j] &#34;jshell&#34;)&lt;/code&gt; but it supports multi-line input: JShell eagerly inserts semicolons onto expressions, so, say, a multi-line Stream pipeline would be interpreted as multiple distinct statements by JShell, whereas our &lt;code&gt;java&lt;/code&gt; configuration handles this by stripping the newlines (and any intermediary comments).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use any process, for example let&#39;s use the &lt;code&gt;tclsh&lt;/code&gt; command line process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(repl-driven-development [s-t] &#34;tclsh&#34;        ;; Make ‚Äú‚åò-t‚Äù e‚ÄúX‚Äùecute ‚ÄúT‚Äùcl code,&#xA;                         :blink &#39;pulsar-blue  ;; and highlight submitted lines blue&#xA;                         :prompt &#34;%&#34;)         ;; and don&#39;t show me the tclsh prompt, which is ‚Äú%‚Äù.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;repl-driven-development&lt;/code&gt; macro has been tried at least with the following processes.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Please make a Pull Request, or Issue, to increase the following list!&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;javascript&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#javascript&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;JavaScript ---and a minimal server &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;em&gt;ü§î We suggest using the preconfigured &lt;code&gt;javascript&lt;/code&gt; configuration that ships with this package.&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA;  &lt;div class=&#34;org-center&#34;&gt; &#xA;   &lt;p&gt; &lt;a href=&#34;https://alhassy.github.io/JavaScriptCheatSheet/CheatSheet.pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/JavaScript-Colourful%C2%A0PDF%C2%A0CheatSheet-success?logo=javascript&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;p&gt;We can set up a JavaScript REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; C-x C-j now evaluates arbitrary JavaScript code&#xA;   (repl-driven-development [C-x C-j] &#34;node -i&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;That&#39;s it! Press &lt;abbr class=&#34;tooltip&#34; style=&#34;border: none; text-decoration: none;&#34; title=&#34;C-x C-e ‚à∑ eval-last-sexp&lt;br&gt;Evaluate sexp before point; print value in the echo area.&lt;br&gt;Interactively, EVAL-LAST-SEXP-ARG-INTERNAL is the prefix argument.&lt;br&gt;With a non ‚Äò-‚Äô prefix argument, print output into current buffer.&lt;br&gt;&lt;br&gt;This commands handles ‚Äòdefvar‚Äô, ‚Äòdefcustom‚Äô and ‚Äòdefface‚Äô the&lt;br&gt;same way that ‚Äòeval-defun‚Äô does.‚ÄÉSee the doc string of that&lt;br&gt;function for details.&lt;br&gt;&lt;br&gt;Normally, this function truncates long output according to the&lt;br&gt;value of the variables ‚Äòeval-expression-print-length‚Äô and&lt;br&gt;‚Äòeval-expression-print-level‚Äô.‚ÄÉWith a prefix argument of zero,&lt;br&gt;however, there is no such truncation.&lt;br&gt;Integer values are printed in several formats (decimal, octal,&lt;br&gt;and hexadecimal).‚ÄÉWhen the prefix argument is -1 or the value&lt;br&gt;doesn‚Äôt exceed ‚Äòeval-expression-print-maximum-character‚Äô, an&lt;br&gt;integer value is also printed as a character of that codepoint.&lt;br&gt;&lt;br&gt;If ‚Äòeval-expression-debug-on-error‚Äô is non-nil, which is the default,&lt;br&gt;this command arranges for all errors to enter the debugger.&lt;br&gt;&lt;br&gt;This function has :around advice: ‚Äòad-Advice-eval-last-sexp‚Äô.&lt;br&gt;&lt;br&gt;(fn EVAL-LAST-SEXP-ARG-INTERNAL)&#34;&gt;&lt;kbd style=&#34;border-color: red&#34;&gt;C-x C-e&lt;/kbd&gt;&lt;/abbr&gt; on the above line so that &lt;kbd style=&#34;&#34;&gt;C-x&amp;nbsp;C-j&lt;/kbd&gt; will now evaluate a selection, or the entire line, as if it were JavaScript code.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Why &lt;kbd style=&#34;&#34;&gt;C-x&amp;nbsp;C-j&lt;/kbd&gt; &amp;nbsp;?&amp;nbsp; Well, &lt;kbd style=&#34;&#34;&gt;C-x C-‚Äúe&lt;/kbd&gt;‚Äù for Emacs Lisp code, and &lt;kbd style=&#34;&#34;&gt;C-x C-‚Äúj&lt;/kbd&gt;‚Äù for JavaScript code!&lt;/li&gt; &#xA;   &lt;li&gt;For instance, copy-paste the following examples into a JavaScript file ‚Äîor just press &lt;kbd style=&#34;&#34;&gt;C-x&amp;nbsp;C-j&lt;/kbd&gt; &lt;em&gt;in any buffer&lt;/em&gt; to evaluate them!&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;1 + 2                                     // ‚Æï 3&#xA;&#xA;1 + &#39;2&#39;                                   // ‚Æï &#39;12&#39;&#xA;&#xA;let me = {name: &#39;Jasim&#39;}; Object.keys(me) // ‚Æï [&#39;name&#39;]&#xA;&#xA;me.doesNotExist(&#39;whoops&#39;)                 // ‚Æï Uncaught TypeError&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;All of these results are echoed inline in an overlay, by default. Moreover, there is a &lt;strong&gt;REPL&lt;/strong&gt; buffer created for your REPL so you can see everything you&#39;ve sent to it, and the output it sent back. This is particularly useful for lengthy error messages, such as those of Java, which cannot be rendered nicely within an overlay.&lt;/p&gt; &#xA;  &lt;p&gt;How this works is that Emacs spawns a new ‚Äúnode -i‚Äù process, then &lt;abbr class=&#34;tooltip&#34; style=&#34;border: none; text-decoration: none;&#34; title=&#34;C-x C-j ‚à∑ dired-jump&lt;br&gt;Jump to Dired buffer corresponding to current buffer.&lt;br&gt;If in a buffer visiting a file, Dired that file‚Äôs directory and&lt;br&gt;move to that file‚Äôs line in the directory listing.&lt;br&gt;&lt;br&gt;If the current buffer isn‚Äôt visiting a file, Dired ‚Äòdefault-directory‚Äô.&lt;br&gt;&lt;br&gt;If in Dired already, pop up a level and goto old directory‚Äôs line.&lt;br&gt;In case the proper Dired file line cannot be found, refresh the dired&lt;br&gt;buffer and try again.&lt;br&gt;&lt;br&gt;When OTHER-WINDOW is non-nil, jump to Dired buffer in other window.&lt;br&gt;&lt;br&gt;When FILE-NAME is non-nil, jump to its line in Dired.&lt;br&gt;Interactively with prefix argument, read FILE-NAME.&lt;br&gt;&lt;br&gt;(fn &amp;amp;optional OTHER-WINDOW FILE-NAME)&#34;&gt;&lt;kbd style=&#34;border-color: red&#34;&gt;C-x C-j&lt;/kbd&gt;&lt;/abbr&gt; sends text to that process. Whenever the process emits any output ‚Äîon stdout or stderr‚Äî then we emit that to the user via an overlay starting with ‚Äú‚Æï‚Äù.&lt;/p&gt; &#xA;  &lt;p&gt;Finally, ‚ÄúC-h k C-x C-j‚Äù will show you the name of the function that is invoked when you press C-x C-j, along with minimal docs.&lt;/p&gt; &#xA;  &lt;p&gt;A useful example would be a minimal server, and requests for it.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// First get stuff with C-x C-e:&#xA;// (async-shell-command &#34;npm install -g express axios&#34;)&#xA;&#xA;let app = require(&#39;express&#39;)()&#xA;let clicked = 1&#xA;app.get(&#39;/hi&#39;, (req, res) =&amp;gt; res.send(`Hello World √ó ${clicked++}`))&#xA;&#xA;let server = app.listen(3000)&#xA;// Now visit   http://localhost:3000/hi   a bunch of times!&#xA;&#xA;// Better yet, see the output programmatically...&#xA;let axios = require(&#39;axios&#39;)&#xA;// Press C-x C-j a bunch of times on the following expression ‚ô•‚Äø‚ô•&#xA;console.log((await axios.get(&#39;http://localhost:3000/hi&#39;)).data)&#xA;&#xA;// Consider closing the server when you&#39;re done with it.&#xA;server.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Just as ‚ÄúEmacs is a Lisp Machine‚Äù, one can use ‚ÄúVSCodeJS‚Äù to use ‚ÄúVSCode as a JS Machine‚Äù. See &lt;a href=&#34;http://alhassy.com/vscode-is-itself-a-javascript-repl&#34;&gt;http://alhassy.com/vscode-is-itself-a-javascript-repl&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;python&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#python&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: #add8e6&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Python &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;em&gt;ü§î We suggest using the preconfigured &lt;code&gt;python&lt;/code&gt; configuration that ships with this package.&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA;  &lt;div class=&#34;org-center&#34;&gt; &#xA;   &lt;p&gt; &lt;a href=&#34;https://alhassy.github.io/PythonCheatSheet/CheatSheet.pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-Colourful%C2%A0PDF%C2%A0CheatSheet-success?logo=python&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;p&gt;We can set up a Python REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;    ;; C-x C-p now evaluates arbitrary Python code&#xA;    (repl-driven-development [C-x C-p] &#34;python3 -i&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Example use‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1 + 2             # ‚Æï 3&#xA;&#xA;hello = &#39;world!&#39;  # (No output; this is an effectful operation)&#xA;&#xA;print(hello)      # ‚Æï world!&#xA;&#xA;2 + &#39;hi&#39;          # üö´ TypeError: unsupported operand type(s) for +&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Learn more by reading‚Ä¶ &lt;a href=&#34;https://cs.lmu.edu/~ray/notes/pythonnetexamples/&#34;&gt;Python: A Gentle Introduction to Socket Programming&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;java&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#java&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Java &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;&lt;em&gt;ü§î We suggest using the preconfigured &lt;code&gt;java&lt;/code&gt; configuration that ships with this package.&lt;/em&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA;  &lt;div class=&#34;org-center&#34;&gt; &#xA;   &lt;p&gt; &lt;a href=&#34;https://alhassy.com/java-cheat-sheet.pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Java-Colourful%C2%A0PDF%C2%A0CheatSheet-success?logo=coffeescript&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;p&gt;We can set up a Java REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(repl-driven-development [C-x C-j] &#34;jshell --enable-preview&#34; :prompt &#34;jshell&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Now, we can select the following and press &lt;code&gt;C-x C-j&lt;/code&gt; to evaluate the Java code:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Ensure you&#39;re not fullscreen, and you&#39;ll see a dialog window appear.&#xA;import javax.swing.*;&#xA;JOptionPane.showMessageDialog(new JFrame(), &#34;Super nice!&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Or doing algebraic datatypes in Java:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;sealed interface Maybe {&#xA;    record None() implements Maybe {}&#xA;    record Just(int x) implements Maybe {}&#xA;}&#xA;&#xA;var thisPrettyPrintsNicelyInTheREPL = new Maybe.Just(3);&#xA;&#xA;new Maybe.Just(3).equals(new Maybe.Just(3)) // yay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;ruby&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#ruby&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Ruby &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;div class=&#34;org-center&#34;&gt; &#xA;   &lt;p&gt; &lt;a href=&#34;https://alhassy.github.io/RubyCheatSheet/CheatSheet.pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Ruby-Colourful%C2%A0PDF%C2%A0CheatSheet-success?logo=ruby&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;p&gt;We can set up a REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; ‚ÄúC-x e r‚Äù now ‚Äúe‚Äùvaluates arbitrary ‚Äúr‚Äùuby code&#xA;   (repl-driven-development [C-x e r] &#34;irb --inf-ruby-mode&#34; :prompt &#34;irb(main):.*&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For example‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;2 + 2&#xA;&#xA;33 + 4&#xA;&#xA;5.times { print &#34;Odelay!&#34; } # ‚Æï Odelay! Odelay! Odelay! Odelay! Odelay! 5&#xA;&#xA;[&#39;ruby&#39;, &#39;is&#39;, &#39;readable&#39;].map { | food | food.capitalize } # ‚Æï [&#34;Ruby&#34;, &#34;Is&#34;, &#34;Readable&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;clojure&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#clojure&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Clojure &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;div class=&#34;org-center&#34;&gt; &#xA;   &lt;p&gt; &lt;a href=&#34;https://alhassy.github.io/ClojureCheatSheet/CheatSheet.pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Clojure-Colourful%C2%A0PDF%C2%A0CheatSheet-success?logo=awslambda&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;p&gt;We can set up a REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; ‚ÄúC-x C-k‚Äù now evaluates arbitrary Clojure code&#xA;   (repl-driven-development [C-x C-k] &#34;clojure&#34; :prompt &#34;user=&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For example‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(+ 1 2) ;; ‚Æï 3&#xA;&#xA;(defn square [x] (* x x)) ;; ‚Æï #&#39;user/square&#xA;(square 3) ;; ‚Æï 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;typescript&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#typescript&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;TypeScript &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;We can set up a REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; C-x C-j now evaluates arbitrary JavaScript code&#xA;   (repl-driven-development [C-x C-t] &#34;npx ts-node&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Then we can use it as follows:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;22 + 2&#xA;&#xA;&#34;hello&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;However, the output is ugly since it mentions the &lt;code&gt;^M&lt;/code&gt; character.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Look at the &lt;code&gt;python&lt;/code&gt; configuration that ships with this package for a starting point on how to address this issue.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;haskell&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#haskell&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: #add8e6&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Haskell &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;div class=&#34;org-center&#34;&gt; &#xA;   &lt;p&gt; &lt;a href=&#34;https://alhassy.github.io/HaskellCheatSheet/CheatSheet.pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Haskell-Colourful%C2%A0PDF%C2%A0CheatSheet-success?logo=awslambda&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;p&gt;We can set up a REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; C-x C-h now evaluates arbitrary Haskell code&#xA;   (repl-driven-development [C-x C-h] &#34;ghci&#34; :prompt &#34;ghci&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For example‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- Sum of the first 100 squares&#xA;sum [ x ** 2 | x &amp;lt;- [1..100]] -- ‚áí 338350.0&#xA;&#xA;-- The positive evens at-most 12&#xA;[x | x &amp;lt;- [1..12], x `mod` 2 == 0] -- [2,4,6,8,10,12]&#xA;&#xA;-- Define a function...&#xA;myLast = head . reverse&#xA;&#xA;-- Then use it...&#xA;myLast [1, 2, 3] -- ‚áí 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Note that Haskell has ‚Äútyped holes‚Äù with the syntax &lt;code&gt;_A&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;1 + _A  -- ‚áí Found hole: _A::a; it :: forall {a}. Num a = a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Another language with typed holes is Arend‚Ä¶&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;arend&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#arend&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Arend: Quickly making a terse Emacs interface for a language without one &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;The &lt;a href=&#34;https://arend-lang.github.io/download#console-application&#34;&gt;Arend Theorem Prover&lt;/a&gt; has an IntelliJ interface (since it&#39;s a JetBrains proof assistant), but no Emacs counterpart ‚Äîwhich may be annoying for Agda/Coq programmers accustomed to Emacs but want to experiment with Arend.&lt;/p&gt; &#xA;  &lt;p&gt;We can set up an Arend REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;    ;; C-x C-a now evaluates arbitrary Arend code&#xA;    (repl-driven-development [C-x C-a]&#xA;                             (format &#34;java -jar %s -i&#34;&#xA;                                     (f-expand &#34;~/Downloads/Arend.jar&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Then,&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-arend&#34;&gt;1 Nat.+ 1 -- ‚áí 2&#xA;:type 4  -- ‚áí Fin 5&#xA;&#xA;-- Declare a constant&#xA;\\func f =&amp;gt; 1&#xA;:type f -- ‚áí Nat&#xA;f -- ‚áí 1&#xA;&#xA;-- Declare a polymorphic identity function, then use it&#xA;\\func id {A : \\Type} (a : A) =&amp;gt; a&#xA;id 12  -- ‚áí 12&#xA;&#xA;-- Arend has ‚Äútyped holes‚Äù&#xA;1 Nat.+ {?}  -- ‚áí Nat.+{?}: Goal: Expectedtype: Nat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;purescript&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#purescript&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: #add8e6&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;PureScript &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;First &lt;code&gt;brew install spago&lt;/code&gt;, then we can set up a PureScript REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;    ;; C-x C-p now evaluates arbitrary PureScript code&#xA;    (repl-driven-development [C-x C-p] &#34;spago repl&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For example‚Ä¶.&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-purescript&#34;&gt;import Prelude&#xA;&#xA;-- Define a function&#xA;add1 = (\x -&amp;gt; x + 1)&#xA;&#xA;-- Use the function&#xA;add1 2    -- ‚áí 3&#xA;&#xA;-- Experiment with a typed hole&#xA;1 + ?A  -- ‚áí Hole ?A has the inferred type Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;idris&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#idris&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Idris &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;First &lt;code&gt;brew install idris2&lt;/code&gt;, then we can set up an Idris REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;    ;; C-x C-i now evaluates arbitrary Idris code&#xA;    (repl-driven-development [C-x C-i] &#34;idris2&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Here&#39;s some random code‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-purescript&#34;&gt;-- Like Lisp, Idris uses ‚Äúthe‚Äù for type annotations&#xA;the Nat 4  -- ‚áí 4 : Nat&#xA;&#xA;with List sum [1,2,3] -- ‚áí 6&#xA;&#xA;-- defining a new type (REPL specific notation)&#xA;:let data Foo : Type where Bar : Foo&#xA;&#xA;:t Bar -- ‚áí Foo&#xA;&#xA;-- Experiment with a typed hole [Same notation as Haskell]&#xA;1 + ?A -- prim__add_Integer 1 ?A&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;racket&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#racket&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: #add8e6&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Racket &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Racket is a modern programming language in the Lisp/Scheme family.&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA;  &lt;p&gt;First &lt;code&gt;brew install --cask racket&lt;/code&gt;, then we can set up an Racket REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;    ;; C-x C-i now evaluates arbitrary Racket code&#xA;    (repl-driven-development [C-x C-r] &#34;racket -I slideshow&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Here&#39;s some random code‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-racket&#34;&gt;(define (series mk) (hc-append 4 (mk 5) (mk 10) (mk 20)))&#xA;&#xA;;; Shows 3 circles of increasing radius, in an external window&#xA;(show-pict (series circle))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;Meeting Racket for the first time is probably best done with &lt;em&gt;DrRacket&lt;/em&gt;.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;common&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#common&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: lisp&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Common Lisp &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;We can set up a REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; ‚ÄúC-x e p‚Äù now ‚Äúe‚Äùvaluates arbitrary ‚Äúc‚Äùommon-lisp code&#xA;   (repl-driven-development [C-x e c] &#34;sbcl&#34; :prompt &#34;\\*&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For example‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-common-lisp&#34;&gt;(print &#34;hello world&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;perl&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#perl&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Perl &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;We can set up a REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; ‚ÄúC-x e p‚Äù now ‚Äúe‚Äùvaluates arbitrary ‚Äúp‚Äùerl code&#xA;   (repl-driven-development [C-x e p] &#34;perl -de0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For example‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;print(1..5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;julia&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#julia&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Julia &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;We can set up a REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; ‚ÄúC-x e j‚Äù now ‚Äúe‚Äùvaluates arbitrary ‚Äúj‚Äùuila code&#xA;   (repl-driven-development [C-x e j] &#34;julia&#34; :prompt &#34;julia&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For example‚Ä¶ Let&#39;s get a random 2√ó2 matrix‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;rand(2, 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;smalltalk&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#smalltalk&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;GNU Smalltalk &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;We can set up a REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; ‚ÄúC-x e j‚Äù now ‚Äúe‚Äùvaluates arbitrary ‚Äús‚Äùmalltalk code&#xA;   (repl-driven-development [C-x e s] &#34;gst&#34; :prompt &#34;st&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For example‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-smalltalk&#34;&gt;&#39;Hello World!&#39; printNl !&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;tcl&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#tcl&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Tcl &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;We can set up a REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; ‚ÄúC-x e t‚Äù now ‚Äúe‚Äùvaluates arbitrary ‚Äút‚Äùcl code&#xA;   (repl-driven-development [C-x e t] &#34;tclsh&#34; :prompt &#34;%&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For example‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-tcl&#34;&gt;set a 1&#xA;set b 2&#xA;puts $a$b[expr 2 + 3]{bye}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a style=&#34;width: 1%;float: left; padding: 0px&#34; id=&#34;lua&#34; href=&#34;https://raw.githubusercontent.com/alhassy/repl-driven-development/main/#lua&#34;&gt;üîó&lt;/a&gt; &#xA; &lt;details class=&#34;float-child&#34; style=&#34;background-color: nil&#34;&gt;&#xA;  &lt;summary&gt; &lt;strong&gt; &lt;font face=&#34;Courier&#34; size=&#34;3&#34; color=&#34;green&#34;&gt;Lua &lt;/font&gt; &lt;/strong&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;We can set up a REPL in the background as follows‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;   ;; ‚ÄúC-x e l‚Äù now ‚Äúe‚Äùvaluates arbitrary ‚Äúl‚Äùua code&#xA;   (repl-driven-development [C-x e l] &#34;lua&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;For example‚Ä¶&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;print(&#34;Hello, world&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Videos&lt;/h1&gt; &#xA;&lt;h2&gt;REPL Driven Development :: Teaching a JavaScript runtime, incrementally, to be a web server üçΩÔ∏è üîÅ ü§ñ&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;http://alhassy.com/images/rdd-teaching-a-js-runtime-to-be-a-webserver.png&#34; width=&#34;400&#34; height=&#34;300&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=b6Z3NQVn4lY&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/b6Z3NQVn4lY/0.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Bye!&lt;/h1&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/thanks-for_reading-nil?logo=nil&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?text=This looks super neat (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà::&amp;amp;url=https://github.com/alhassy/repl-driven-development&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url?url=https://github.com/alhassy/repl-driven-development&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/alhassy&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-buy_me_a%C2%A0coffee-gray?logo=buy-me-a-coffee&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>