<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-25T01:31:59Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>slano-ls/Doom-Emacs-Config</title>
    <updated>2022-11-25T01:31:59Z</updated>
    <id>tag:github.com,2022-11-25:/slano-ls/Doom-Emacs-Config</id>
    <link href="https://github.com/slano-ls/Doom-Emacs-Config" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My (Illiterate) Literate Doom Emacs Config&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;#+LATEX_CLASS:tuftebook #+title: Emacs Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screen Shots [[ScreenShots/Screen Shot 2022-11-21 at 6.27.14 PM.png]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;[[ScreenShots/Screen Shot 2022-11-21 at 6.27.44 PM.png]]&lt;/h2&gt; &#xA;&lt;h2&gt;[[ScreenShots/Screen Shot 2022-11-21 at 6.28.24 PM.png]]&lt;/h2&gt; &#xA;&lt;h2&gt;[[ScreenShots/Screen Shot 2022-11-21 at 10.11.55 PM.png]]&lt;/h2&gt; &#xA;&lt;h2&gt;[[ScreenShots/Screen Shot 2022-11-21 at 6.28.37 PM.png]]&lt;/h2&gt; &#xA;&lt;h2&gt;[[ScreenShots/Screen Shot 2022-11-21 at 6.28.55 PM.png]]&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction After reading some of the other amazing configurations written by people like [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur]],[[https://github.com/shaunsingh/nyoom.emacs][ Shaun Singh]], and [[https://github.com/sunnyhasija/Academic-Doom-Emacs-Config][Sunny Hasja]]; I decided to upload my own (horrible) &lt;em&gt;Emacs Configuration&lt;/em&gt;. As a High School student, with an avid interest in &lt;em&gt;Computer Science&lt;/em&gt; and my class work. This is a &lt;em&gt;workflow&lt;/em&gt; that I have designed to work well for myself ... but may not be the best for your workflow! There are lots of bits an pieces cobbled together from many different sources, but I have to admit ... I forgot half of them!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I will do my best to give thanks and credit to those who&#39;s code I +stole+ ... I mean used, but apologies in advance!&lt;/p&gt; &#xA;&lt;p&gt;Well ... Let&#39;s get started.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial Configuration As a &lt;em&gt;Vim&lt;/em&gt; user for most of my life, the first main requirement I had for emacs was that there were &lt;em&gt;Vim Keybindings&lt;/em&gt;, after some searching I stumbled upon /Doom Emacs/ and am currently using that as my daily Emacs driver. Even though I fiddled around with Vanilla Emacs (/to boast my superiority over those greenhorn Spacemacs users/), I in the end decided to return back to Doom because of it&#39;s quick runtimes, wonderfully configured EVIL keybindings and also many other things.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is some initial configuration we have to do in Doom ... So let&#39;s look into it. ** Basic Config #+begin_src emacs-lisp :tangle yes (setq user-full-name &#34;Saihaj Law&#34; user-mail-address &#34;&lt;a href=&#34;mailto:laws0817@gmail.com&#34;&gt;laws0817@gmail.com&lt;/a&gt;&#34;)&lt;/p&gt; &#xA;&lt;p&gt;(use-package autothemer :ensure t)&lt;/p&gt; &#xA;&lt;p&gt;(setq doom-theme &#39;catppuccin-mocha) (setq +zen-text-scale 0.8 ) (setq display-line-numbers-type &#39;relative) ;;(set-frame-parameter (selected-frame) &#39;alpha &#39;(95 95)) ;;(add-to-list &#39;default-frame-alist &#39;(alpha 95 95)) (load-theme &#39;catppuccin-mocha t) #+end_src Whoa ... Already we have some messy /lisp/. But just for a short summary ... I am initializing my personal information, my theme configuration (/catppuccin lovers stand up/) as well as zooming out a bit from &lt;em&gt;Zen&#39;s&lt;/em&gt; overzealous centering. Additionally I am just specifiying my &lt;em&gt;line numbering&lt;/em&gt; type and (/in the comment region/) is some code for when I feel like making my Emacs Transparent!&lt;/p&gt; &#xA;&lt;p&gt;** Dashboard I can&#39;t be posting my emacs setup on &lt;em&gt;r/unixporn&lt;/em&gt; when I have a basic doom homepage .... That&#39;s why I added some stuff to remove most of the startup dashboard&#39;s info and instead put an image and the bare minimum amount of text #+begin_src emacs-lisp :tangle yes (remove-hook &#39;+doom-dashboard-functions #&#39;doom-dashboard-widget-shortmenu) (add-hook! &#39;+doom-dashboard-functions :append (setq-hook! &#39;+doom-dashboard-mode-hook evil-normal-state-cursor (list nil)) (setq fancy-splash-image (concat doom-user-dir &#34;vagabond.png&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Initial Visual Configuration Now we are getting into the interesting stuff. Some plugins to set up how our frames, modeline, and just general buffers will look/work&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (setq-default line-spacing 0.24)&lt;/p&gt; &#xA;&lt;p&gt;(setq-default mode-line-format (cons (propertize &#34;\u200b&#34; &#39;display &#39;((raise -0.35) (height 1.4))) mode-line-format))&lt;/p&gt; &#xA;&lt;p&gt;(modify-all-frames-parameters &#39;((right-divider-width . 10) (internal-border-width . 10))) (dolist (face &#39;(window-divider window-divider-first-pixel window-divider-last-pixel)) (face-spec-reset-face face) (set-face-foreground face (face-attribute &#39;default :background))) (set-face-background &#39;fringe (face-attribute &#39;default :background)) (good-scroll-mode 1) #+end_src Additionally I am using the &lt;em&gt;Theme-Magic&lt;/em&gt; plugin to make my &lt;em&gt;Vterm&lt;/em&gt; match the rest of my Emacs Configuration #+begin_src emacs-lisp :tangle yes (use-package! theme-magic :commands theme-magic-from-emacs :config (defadvice! theme-magic--auto-extract-16-doom-colors () :override #&#39;theme-magic--auto-extract-16-colors (list (face-attribute &#39;default :background) (doom-color &#39;error) (doom-color &#39;success) (doom-color &#39;type) (doom-color &#39;keywords) (doom-color &#39;constants) (doom-color &#39;functions) (face-attribute &#39;default :foreground) (face-attribute &#39;shadow :foreground) (doom-blend &#39;base8 &#39;error 0.1) (doom-blend &#39;base8 &#39;success 0.1) (doom-blend &#39;base8 &#39;type 0.1) (doom-blend &#39;base8 &#39;keywords 0.1) (doom-blend &#39;base8 &#39;constants 0.1) (doom-blend &#39;base8 &#39;functions 0.1) (face-attribute &#39;default :foreground)))) #+end_src ** Initial Functional Configuration Here we have some stuff that pertains to how my Emacs &lt;em&gt;works&lt;/em&gt; when I&#39;m on it. #+begin_src emacs-lisp :tangle yes (setq scroll-margin 2 auto-save-default t display-line-numbers-type nil delete-by-moving-to-trash t truncate-string-ellipsis &#34;…&#34; browse-url-browser-function &#39;xwidget-webkit-browse-url) (global-subword-mode 1) #+end_src ** Minor Modes I haven&#39;t really delved deep into the world of &lt;em&gt;Minor Modes&lt;/em&gt; in Emacs yet, but I am currently using some of /Prot&#39;s/ work in my configuration #+begin_src emacs-lisp :tangle yes (define-minor-mode prot/variable-pitch-mode &#34;Toggle &#39;mixed-pitch-modei, except for programming modes&#34; :init-value nil :global nil (if prot/variable-pitch-mode (unless (derived-mode-p &#39;prog-mode) (variable-pitch-mode 1)) (variable-pitch-mode -1)))&lt;/p&gt; &#xA;&lt;p&gt;(define-minor-mode prot/display-line-number-mode &#34;Disable line numbers, except for programming modes.&#34; :init-value nil :global nil (if prot/display-line-number-mode (unless (derived-mode-p &#39;prog-mode) (display-line-numbers-mode -1)) (display-line-numbers-mode 1)))&lt;/p&gt; &#xA;&lt;p&gt;(define-minor-mode prot/scroll-center-cursor-mode &#34;Toggle centred cursor scrolling behavior&#34; :init-value nil :lighter &#34; S=&#34; :global nil (if prot/scroll-center-cursor-mode (setq-local scroll-margin (* (frame-height) 2) scroll-conservatively 0 maximum-scroll-margin 0.5) (dolist (local &#39;(scroll-preserve-screen-position scroll-conservatively maximum-scroll-margin scroll-margin)) (kill-local-variable `,local))) ) #+end_src ** Mu4e Not something I use very often ... but &lt;em&gt;Email in Emacs!&lt;/em&gt; #+begin_src emacs-lisp :tangle yes ;; mu4e email (after! mu4e (setq mu4e-index-cleanup nil mu4e-index-lazy-check t mu4e-update-interval 300) (set-email-account! &#34;laws0817&#34; &#39;((mu4e-sent-folder . &#34;/Sent Mail&#34;) (mu4e-drafts-folder . &#34;/Drafts&#34;) (mu4e-trash-folder . &#34;/Trash&#34;) (mu4e-refile-folder . &#34;/All Mail&#34;) (smtpmail-smtp-user . &#34;&lt;a href=&#34;mailto:laws0817@gmail.com&#34;&gt;laws0817@gmail.com&lt;/a&gt;&#34;)))) ;; sending with smtpmail (after! mu4e (setq sendmail-program &#34;msmtp&#34; send-mail-function #&#39;smtpmail-send-it message-sendmail-f-is-evil t message-sendmail-extra-arguments &#39;(&#34;--read-envelope-from&#34;) message-send-mail-function #&#39;message-send-mail-with-sendmail)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Org Here comes the heavy part of this Emacs configuration ... &lt;em&gt;ORG&lt;/em&gt;. As a student, a person who programs, and just someone who in general likes writing ... &lt;em&gt;ORG&lt;/em&gt; mode is indispensable. I have a lot of stuff coming up in here (but hopefully) I explain it enough that it is understandable to everyone including me. ** Org Initial Configuration #+begin_src emacs-lisp :tangle yes (after! org (setq org-directory &#34;&lt;del&gt;/Org&#34; ; let&#39;s put files here org-list-allow-alphabetical t ; have a. A. a) A) list bullets org-use-property-inheritance t ; it&#39;s convenient to have properties inherited org-fold-catch-invisible-edits &#39;smart ; try not to accidently do weird stuff in invisible regions org-log-done &#39;time ; having the time a item is done sounds convenient org-roam-directory &#34;&lt;/del&gt;/Org/roam/&#34;)) ; same thing, for roam #+end_src ** Org Agenda Who doesn&#39;t want to organize their life, files, and everything else in one place! *** Org Agenda Initial Configuration #+begin_src emacs-lisp :tangle yes ;; org-agenda-config (after! org-agenda (setq org-agenda-files (list &#34;&lt;del&gt;/Org/agenda.org&#34; &#34;&lt;/del&gt;/Org/todo.org&#34;)) (setq org-agenda-window-setup &#39;current-window org-agenda-restore-windows-after-quit t org-agenda-show-all-dates nil org-agenda-time-in-grid t org-agenda-show-current-time-in-grid t org-agenda-start-on-weekday 1 org-agenda-span 7 org-agenda-tags-column 0 org-agenda-block-separator nil org-agenda-category-icon-alist nil org-agenda-sticky t) (setq org-agenda-prefix-format &#39;((agenda . &#34;%i %?-12t%s&#34;) (todo . &#34;%i&#34;) (tags . &#34;%i&#34;) (search . &#34;%i&#34;))) (setq org-agenda-sorting-strategy &#39;((agenda deadline-down scheduled-down todo-state-up time-up habit-down priority-down category-keep) (todo priority-down category-keep) (tags timestamp-up priority-down category-keep) (search category-keep))))&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(after! org (remove-hook &#39;org-agenda-finalize-hook &#39;+org-exclude-agenda-buffers-from-workspace-h) (remove-hook &#39;org-agenda-finalize-hook &#39;+org-defer-mode-in-agenda-buffers-h)) #+end_src *** Org Agenda Visual Configuration #+begin_src emacs-lisp :tangle yes (after! org (setq org-agenda-deadline-faces &#39;((1.0 . error) (1.0 . org-warning) (0.5 . org-upcoming-deadline) (0.0 . org-upcoming-distant-deadline)))) #+end_src ** Org Roam Org Roam is a wonderful plugin that I use all the time as it really helps me in my academic work, with organization and other wonderful features which I can&#39;t find in other Emacs Plugins. #+begin_src emacs-lisp :tangle yes&lt;/p&gt; &#xA;&lt;p&gt;(use-package! org-roam :after org)&lt;/p&gt; &#xA;&lt;p&gt;(setq org-roam-v2-ack t) #+end_src *** Org Roam Visual #+begin_src emacs-lisp :tangle yes (use-package! org-roam :after org :config (setq org-roam-v2-ack t) (setq org-roam-mode-sections (list #&#39;org-roam-backlinks-insert-section #&#39;org-roam-reflinks-insert-section #&#39;org-roam-unlinked-references-insert-section)) (org-roam-db-autosync-enable))&lt;/p&gt; &#xA;&lt;p&gt;(use-package! org-roam-ui :after org-roam :config (setq org-roam-ui-open-on-start nil) (setq org-roam-ui-browser-function #&#39;xwidget-webkit-browse-url))&lt;/p&gt; &#xA;&lt;p&gt;(use-package! websocket :after org-roam)&lt;/p&gt; &#xA;&lt;p&gt;(use-package! org-roam-ui :after org-roam :commands org-roam-ui-open :config (setq org-roam-ui-sync-theme t org-roam-ui-follow t org-roam-ui-update-on-save t org-roam-ui-open-on-start t)) (after! org-roam (setq +org-roam-open-buffer-on-find-file nil)) #+end_src *** Org Roam Capture I love Org Capture. It is probably my favourite part of Emacs ... I also have it configured with &lt;em&gt;Emacs Everywhere&lt;/em&gt; as you will see later in the documentation. I have it configured so that each of my classes have their own specific &lt;em&gt;startup&lt;/em&gt; information which I will later use for other purposes&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (after! org-roam (setq org-roam-capture-templates `((&#34;F&#34; &#34;French&#34; plain &#34;%?&#34; :if-new (file+head &#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}.org&#34; &#34;${title}\n#+filetags:French\n#+LATEX_CLASS:tufte-book\n\n &#34;) :unnarrowed t) (&#34;D&#34; &#34;Data Management&#34; plain &#34;%?&#34; :if-new (file+head &#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}.org&#34; &#34;${title}\n#+filetags:Data_Management \n#+LATEX_CLASS:tufte-book\n\n &#34;) :unnarrowed t) (&#34;C&#34; &#34;Computer Engineering&#34; plain &#34;%?&#34; :if-new (file+head &#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}.org&#34; &#34;${title}\n#+filetags:Computer_Engineering\n#+LATEX_CLASS:tufte-book \n\n &#34;) :unnarrowed t) (&#34;B&#34; &#34;Biology &#34; plain &#34;%?&#34; :if-new (file+head &#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}.org&#34; &#34;${title}\n#+filetags:Biology\n#+LATEX_CLASS:tufte-book\n\n &#34;) :unnarrowed t)))) #+end_src *** Org Capture Pt. 2 I am running an org capture configuration that was created by the wonderful &lt;em&gt;Tecosaur&lt;/em&gt; which uses the packages /doct/ to render the visuals instead. I have just recently begun tinkering with this so this will definitely be updated! #+begin_src emacs-lisp :tangle yes&lt;/p&gt; &#xA;&lt;p&gt;(when (display-graphic-p) (require &#39;all-the-icons))&lt;/p&gt; &#xA;&lt;p&gt;(use-package! doct :defer t :commands (doct))&lt;/p&gt; &#xA;&lt;p&gt;(defun org-capture-select-template-prettier (&amp;amp;optional keys) &#34;Select a capture template, in a prettier way than default Lisp programs can force the template by setting KEYS to a string.&#34; (let ((org-capture-templates (or (org-contextualize-keys (org-capture-upgrade-templates org-capture-templates) org-capture-templates-contexts) &#39;((&#34;t&#34; &#34;Task&#34; entry (file+headline &#34;&#34; &#34;Tasks&#34;) &#34;* TODO %?\n %u\n %a&#34;))))) (if keys (or (assoc keys org-capture-templates) (error &#34;No capture template referred to by &#34;%s&#34; keys&#34; keys)) (org-mks org-capture-templates &#34;Select a capture template\n━━━━━━━━━━━━━━━━━━━━━━━━━&#34; &#34;Template key: &#34; `((&#34;q&#34; ,(concat (all-the-icons-octicon &#34;stop&#34; :face &#39;all-the-icons-red :v-adjust 0.01) &#34;\tAbort&#34;))))))) (advice-add &#39;org-capture-select-template :override #&#39;org-capture-select-template-prettier)&lt;/p&gt; &#xA;&lt;p&gt;(defun org-mks-pretty (table title &amp;amp;optional prompt specials)&lt;/p&gt; &#xA;&lt;p&gt;(save-window-excursion (let ((inhibit-quit t) (buffer (org-switch-to-buffer-other-window &#34;&lt;em&gt;Org Select&lt;/em&gt;&#34;)) (prompt (or prompt &#34;Select: &#34;)) case-fold-search current) (unwind-protect (catch &#39;exit (while t (setq-local evil-normal-state-cursor (list nil)) (erase-buffer) (insert title &#34;\n\n&#34;) (let ((des-keys nil) (allowed-keys &#39;(&#34;\C-g&#34;)) (tab-alternatives &#39;(&#34;\s&#34; &#34;\t&#34; &#34;\r&#34;)) (cursor-type nil)) ;; Populate allowed keys and descriptions keys ;; available with CURRENT selector. (let ((re (format &#34;\&lt;code&gt;%s\\(.\\)\\&#39;&#34; (if current (regexp-quote current) &#34;&#34;))) (prefix (if current (concat current &#34; &#34;) &#34;&#34;))) (dolist (entry table) (pcase entry ;; Description. (&lt;/code&gt;(,(and key (pred (string-match re))) ,desc) (let ((k (match-string 1 key))) (push k des-keys) ;; Keys ending in tab, space or RET are equivalent. (if (member k tab-alternatives) (push &#34;\t&#34; allowed-keys) (push k allowed-keys)) (insert (propertize prefix &#39;face &#39;font-lock-comment-face) (propertize k &#39;face &#39;bold) (propertize &#34;›&#34; &#39;face &#39;font-lock-comment-face) &#34; &#34; desc &#34;…&#34; &#34;\n&#34;))) ;; Usable entry. (&lt;code&gt;(,(and key (pred (string-match re))) ,desc . ,_) (let ((k (match-string 1 key))) (insert (propertize prefix &#39;face &#39;font-lock-comment-face) (propertize k &#39;face &#39;bold) &#34; &#34; desc &#34;\n&#34;) (push k allowed-keys))) (_ nil)))) ;; Insert special entries, if any. (when specials (insert &#34;─────────────────────────\n&#34;) (pcase-dolist (&lt;/code&gt;(,key ,description) specials) (insert (format &#34;%s %s\n&#34; (propertize key &#39;face &#39;(bold all-the-icons-red)) description)) (push key allowed-keys))) ;; Display UI and let user select an entry or ;; a sub-level prefix. (goto-char (point-min)) (unless (pos-visible-in-window-p (point-max)) (org-fit-window-to-buffer)) (let ((pressed (org--mks-read-key allowed-keys prompt nil))) (setq current (concat current pressed)) (cond ((equal pressed &#34;\C-g&#34;) (user-error &#34;Abort&#34;)) ((equal pressed &#34;ESC&#34;) (user-error &#34;Abort&#34;)) ;; Selection is a prefix: open a new menu. ((member pressed des-keys)) ;; Selection matches an association: return it. ((let ((entry (assoc current table))) (and entry (throw &#39;exit entry)))) ;; Selection matches a special entry: return the ;; selection prefix. ((assoc current specials) (throw &#39;exit current)) (t (error &#34;No entry available&#34;))))))) (when buffer (kill-buffer buffer)))))) (advice-add &#39;org-mks :override #&#39;org-mks-pretty)&lt;/p&gt; &#xA;&lt;p&gt;(setf (alist-get &#39;height +org-capture-frame-parameters) 15) ;; (alist-get &#39;name +org-capture-frame-parameters) &#34;❖ Capture&#34;) ;; ATM hardcoded in other places, so changing breaks stuff (setq +org-capture-fn (lambda () (interactive) (set-window-parameter nil &#39;mode-line-format &#39;none) (org-capture)))&lt;/p&gt; &#xA;&lt;p&gt;(defun +doct-icon-declaration-to-icon (declaration) &#34;Convert :icon declaration to icon&#34; (let ((name (pop declaration)) (set (intern (concat &#34;all-the-icons-&#34; (plist-get declaration :set)))) (face (intern (concat &#34;all-the-icons-&#34; (plist-get declaration :color)))) (v-adjust (or (plist-get declaration :v-adjust) 0.01))) (apply set `(,name :face ,face :v-adjust ,v-adjust))))&lt;/p&gt; &#xA;&lt;p&gt;(defun +doct-iconify-capture-templates (groups) &#34;Add declaration&#39;s :icon to each template group in GROUPS.&#34; (let ((templates (doct-flatten-lists-in groups))) (setq doct-templates (mapcar (lambda (template) (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template)) (spec (plist-get (plist-get props :doct) :icon))) (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec) &#34;\t&#34; (nth 1 template)))) template) templates))))&lt;/p&gt; &#xA;&lt;p&gt;(setq doct-after-conversion-functions &#39;(+doct-iconify-capture-templates))&lt;/p&gt; &#xA;&lt;p&gt;(after! org-capture (require &#39;noflet) (setq org-capture-templates (doct &lt;code&gt;((&#34;Todo&#34; :keys &#34;t&#34; :icon (&#34;home&#34; :set &#34;octicon&#34; :color &#34;cyan&#34;) :file &#34;~/org/todo.org&#34; :prepend t :headline &#34;Inbox&#34; :template (&#34;* TODO %?&#34; &#34;%i %a&#34;)) (&#34;Agenda&#34; :keys &#34;a&#34; :icon (&#34;business&#34; :set &#34;material&#34; :color &#34;yellow&#34;) :file &#34;agenda.org&#34; :prepend t :headline &#34;Inbox&#34; :template (&#34;* TODO %?&#34; &#34;SCHEDULED: %^{Schedule:}t&#34; &#34;DEADLINE: %^{Deadline:}t&#34; &#34;%i %a&#34;)) (&#34;Note&#34; :keys &#34;n&#34; :icon (&#34;sticky-note&#34; :set &#34;faicon&#34; :color &#34;yellow&#34;) :file &#34;~/org/notes.org&#34; :template (&#34;* *?&#34; &#34;%i %a&#34;)) (&#34;Journal&#34; :keys &#34;j&#34; :icon (&#34;calendar&#34; :set &#34;faicon&#34; :color &#34;pink&#34;) :type plain :function (lambda () (org-journal-new-entry t) (unless (eq org-journal-file-type &#39;daily) (org-narrow-to-subtree)) (goto-char (point-max))) :template &#34;** %(format-time-string org-journal-time-format)%^{Title}\n%i%?&#34; :jump-to-captured t :immediate-finish t) (&#34;Project&#34; :keys &#34;p&#34; :icon (&#34;repo&#34; :set &#34;octicon&#34; :color &#34;silver&#34;) :prepend t :type entry :headline &#34;Inbox&#34; :template (&#34;* %{keyword} %?&#34; &#34;%i&#34; &#34;%a&#34;) :file &#34;&#34; :custom (:keyword &#34;&#34;) :children ((&#34;Task&#34; :keys &#34;t&#34; :icon (&#34;checklist&#34; :set &#34;octicon&#34; :color &#34;green&#34;) :keyword &#34;TODO&#34; :file +org-capture-project-todo-file) (&#34;Note&#34; :keys &#34;n&#34; :icon (&#34;sticky-note&#34; :set &#34;faicon&#34; :color &#34;yellow&#34;) :keyword &#34;%U&#34; :file +org-capture-project-notes-file))))))) #+end_src *** Org Capture Everywhere Since I am a MacOs user I have a configuration made (using the *Automation* tool) that allows me to call *Org-Capture* from anywhere! Yippie! #+begin_src emacs-lisp :tangle yes (require &#39;noflet) (defun timu-func-make-capture-frame () &#34;Create a new frame and run &lt;/code&gt;org-capture&#39;.&#34; (interactive) (make-frame &#39;((name . &#34;capture&#34;) (top . 300) (left . 700) (width . 80) (height . 25))) (select-frame-by-name &#34;capture&#34;) (delete-other-windows) (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf))) (org-capture))) (defadvice org-capture-finalize (after delete-capture-frame activate) &#34;Advise capture-finalize to close the frame.&#34; (if (equal &#34;capture&#34; (frame-parameter nil &#39;name)) (delete-frame))) (defadvice org-capture-destroy (after delete-capture-frame activate) &#34;Advise capture-destroy to close the frame.&#34; (if (equal &#34;capture&#34; (frame-parameter nil &#39;name)) (delete-frame)))&lt;/p&gt; &#xA;&lt;p&gt;#+end_src ** ORG Visual Configuration *** Org Modern One of the first &lt;em&gt;Org plugins&lt;/em&gt; I have is &lt;em&gt;ORG MODERN&lt;/em&gt; which is a wonderful plugin that helps hide and clean up Org buffers, the configuration is copied straight from the documentation and works wonderfully for me.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes ;; org modern (setq ;; Edit settings org-auto-align-tags nil org-tags-column 0 org-fold-catch-invisible-edits &#39;show-and-error org-special-ctrl-a/e t org-insert-heading-respect-content t&lt;/p&gt; &#xA;&lt;p&gt;;; Org styling, hide markup etc. org-hide-emphasis-markers t org-pretty-entities t org-ellipsis &#34;…&#34;&lt;/p&gt; &#xA;&lt;p&gt;;; Agenda styling org-agenda-tags-column 0 org-agenda-block-separator ?─ org-agenda-time-grid &#39;((daily today require-timed) (800 1000 1200 1400 1600 1800 2000) &#34; ┄┄┄┄┄ &#34; &#34;┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄&#34;) org-agenda-current-time-string &#34;⭠ now ─────────────────────────────────────────────────&#34;) (global-org-modern-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** SVG-Tag Mode This is a wonderful package created by the amazing &lt;em&gt;Rougier&lt;/em&gt; (/check out his stuff if you like aesthetic Emacs/) which gives us beautifully rendered &lt;em&gt;Tags&lt;/em&gt; inside of our org files #+begin_src emacs-lisp :tangle yes (use-package svg-tag-mode :commands svg-tag-mode :config (defconst date-re &#34;[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}&#34;) (defconst time-re &#34;[0-9]\{2\}:[0-9]\{2\}&#34;) (defconst day-re &#34;[A-Za-z]\{3\}&#34;) (defconst day-time-re (format &#34;\(%s\)? ?\(%s\)?&#34; day-re time-re)) (defun svg-progress-percent (value) (svg-image (svg-lib-concat (svg-lib-progress-bar (/ (string-to-number value) 100.0) nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11) (svg-lib-tag (concat value &#34;%&#34;) nil :stroke 0 :margin 0)) :ascent &#39;center))&lt;/p&gt; &#xA;&lt;p&gt;(defun svg-progress-count (value) (let* ((seq (mapcar #&#39;string-to-number (split-string value &#34;/&#34;))) (count (float (car seq))) (total (float (cadr seq)))) (svg-image (svg-lib-concat (svg-lib-progress-bar (/ count total) nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11) (svg-lib-tag value nil :stroke 0 :margin 0)) :ascent &#39;center)))&lt;/p&gt; &#xA;&lt;p&gt;(setq svg-tag-tags `( ;; Org tags (&#34;:\([A-Za-z0-9]+\)&#34; . ((lambda (tag) (svg-tag-make tag)))) (&#34;:\([A-Za-z0-9]+[ -]\)&#34; . ((lambda (tag) tag))) ;; Task priority (&#34;\[#[A-Z]\]&#34; . ( (lambda (tag) (svg-tag-make tag :face &#39;org-priority :beg 2 :end -1 :margin 0))))&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;      ;; Progress&#xA;      (&#34;\\(\\[[0-9]\\{1,3\\}%\\]\\)&#34; . ((lambda (tag)&#xA;                                          (svg-progress-percent (substring tag 1 -2)))))&#xA;      (&#34;\\(\\[[0-9]+/[0-9]+\\]\\)&#34; . ((lambda (tag)&#xA;                                        (svg-progress-count (substring tag 1 -1)))))&#xA;&#xA;      ;; TODO / DONE&#xA;      (&#34;TODO&#34; . ((lambda (tag) (svg-tag-make &#34;TODO&#34; :face &#39;org-todo :inverse t :margin 0))))&#xA;      (&#34;DONE&#34; . ((lambda (tag) (svg-tag-make &#34;DONE&#34; :face &#39;org-done :margin 0))))&#xA;&#xA;&#xA;      ;; Citation of the form [cite:@Knuth:1984]&#xA;      (&#34;\\(\\[cite:@[A-Za-z]+:\\)&#34; . ((lambda (tag)&#xA;                                        (svg-tag-make tag&#xA;                                                      :inverse t&#xA;                                                      :beg 7 :end -1&#xA;                                                      :crop-right t))))&#xA;      (&#34;\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)&#34; . ((lambda (tag)&#xA;                                              (svg-tag-make tag&#xA;                                                            :end -1&#xA;                                                            :crop-left t))))&#xA;&#xA;&#xA;      ;; Active date (with or without day name, with or without time)&#xA;      (,(format &#34;\\(&amp;lt;%s&amp;gt;\\)&#34; date-re) .&#xA;       ((lambda (tag)&#xA;          (svg-tag-make tag :beg 1 :end -1 :margin 0))))&#xA;      (,(format &#34;\\(&amp;lt;%s \\)%s&amp;gt;&#34; date-re day-time-re) .&#xA;       ((lambda (tag)&#xA;          (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))&#xA;      (,(format &#34;&amp;lt;%s \\(%s&amp;gt;\\)&#34; date-re day-time-re) .&#xA;       ((lambda (tag)&#xA;          (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))&#xA;&#xA;      ;; Inactive date  (with or without day name, with or without time)&#xA;       (,(format &#34;\\(\\[%s\\]\\)&#34; date-re) .&#xA;        ((lambda (tag)&#xA;           (svg-tag-make tag :beg 1 :end -1 :margin 0 :face &#39;org-date))))&#xA;       (,(format &#34;\\(\\[%s \\)%s\\]&#34; date-re day-time-re) .&#xA;        ((lambda (tag)&#xA;           (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face &#39;org-date))))&#xA;       (,(format &#34;\\[%s \\(%s\\]\\)&#34; date-re day-time-re) .&#xA;        ((lambda (tag)&#xA;           (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face &#39;org-date)))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Ligatures I have some custom ligatures to simplify how all my /&#34;Org Code&#34;/ looks in my buffers #+begin_src emacs-lisp :tangle yes (after! org (setq org-ellipsis &#34; ▾ &#34;) (appendq! +ligatures-extra-symbols `(:checkbox &#34;☐&#34; :pending &#34;◼&#34; :checkedbox &#34;☑&#34; :list_property &#34;∷&#34; :em_dash &#34;—&#34; :ellipses &#34;…&#34; :arrow_right &#34;→&#34; :arrow_left &#34;←&#34; :title &#34; &#34; :subtitle &#34;𝙩&#34; :author &#34;𝘼&#34; :date &#34;𝘿&#34; :property &#34;&#34; :options &#34;⌥&#34; :startup &#34;⏻&#34; :macro &#34;𝓜&#34; :html_head &#34;🅷&#34; :html &#34;🅗&#34; :latex_class &#34;🄻&#34; :latex_header &#34;🅻&#34; :beamer_header &#34;🅑&#34; :latex &#34;🅛&#34; :attr_latex &#34;🄛&#34; :attr_html &#34;🄗&#34; :attr_org &#34;⒪&#34; :begin_quote &#34;❝&#34; :end_quote &#34;❞&#34; :caption &#34;☰&#34; :header &#34;›&#34; :results &#34;🠶&#34; :begin_export &#34;⏩&#34; :end_export &#34;⏪&#34; :properties &#34;&#34; :end &#34;∎&#34; :priority_a ,(propertize &#34;⚑&#34; &#39;face &#39;all-the-icons-red) :priority_b ,(propertize &#34;⬆&#34; &#39;face &#39;all-the-icons-orange) :priority_c ,(propertize &#34;■&#34; &#39;face &#39;all-the-icons-yellow) :priority_d ,(propertize &#34;⬇&#34; &#39;face &#39;all-the-icons-green) :priority_e ,(propertize &#34;❓&#34; &#39;face &#39;all-the-icons-blue) :roam_tags nil :filetags nil)) (set-ligatures! &#39;org-mode :merge t :checkbox &#34;[ ]&#34; :pending &#34;[-]&#34; :checkedbox &#34;[X]&#34; :list_property &#34;::&#34; :em_dash &#34;---&#34; :ellipsis &#34;...&#34; :arrow_right &#34;-&amp;gt;&#34; :arrow_left &#34;&amp;lt;-&#34; :title &#34;#+title:&#34; :subtitle &#34;#+subtitle:&#34; :author &#34;#+author:&#34; :date &#34;#+date:&#34; :property &#34;#+property:&#34; :options &#34;#+options:&#34; :startup &#34;#+startup:&#34; :macro &#34;#+macro:&#34; :html_head &#34;#+html_head:&#34; :html &#34;#+html:&#34; :latex_class &#34;#+latex_class:&#34; :latex_header &#34;#+latex_header:&#34; :beamer_header &#34;#+beamer_header:&#34; :latex &#34;#+latex:&#34; :attr_latex &#34;#+attr_latex:&#34; :attr_html &#34;#+attr_html:&#34; :attr_org &#34;#+attr_org:&#34; :begin_quote &#34;#+begin_quote&#34; :end_quote &#34;#+end_quote&#34; :caption &#34;#+caption:&#34; :header &#34;#+header:&#34; :begin_export &#34;#+begin_export&#34; :end_export &#34;#+end_export&#34; :results &#34;#+RESULTS:&#34; :property &#34;:PROPERTIES:&#34; :end &#34;:END:&#34; :priority_a &#34;[#A]&#34; :priority_b &#34;[#B]&#34; :priority_c &#34;[#C]&#34; :priority_d &#34;[#D]&#34; :priority_e &#34;[#E]&#34; :roam_tags &#34;#+roam_tags:&#34; :filetags &#34;#+filetags:&#34;) (plist-put +ligatures-extra-symbols :name &#34;⁍&#34;) )&lt;/p&gt; &#xA;&lt;p&gt;#+end_src *** Fonts I have my fonts fairly simply configured ... I am using &lt;em&gt;ETBembo&lt;/em&gt; (wonderful font btw) throughout my configuration and have it change in size based on the heading levels. #+begin_src emacs-lisp :tangle yes (custom-theme-set-faces &#39;user &lt;code&gt;(org-level-4 ((t (:height 0.8)))) &lt;/code&gt;(org-level-3 ((t (:height 0.95)))) &lt;code&gt;(org-level-2 ((t (:height 1.1)))) &lt;/code&gt;(org-level-1 ((t (:height 1.35)))) `(org-document-title ((t (:height 1.6 :underline nil)))))&lt;/p&gt; &#xA;&lt;p&gt;(custom-theme-set-faces &#39;user &#39;(variable-pitch ((t (:family &#34;ETBembo&#34; :height 180 :weight thin)))) &#39;(fixed-pitch ((t ( :family &#34;Fira Code Retina&#34; :height 160)))))&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;org-mode-hook &#39;variable-pitch-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Org Functional Visuals Here I am adding the visuals which are pertinent to how my Org will look when opening it up ... and just the general settings for my ORG files #+begin_src emacs-lisp :tangle yes&lt;/p&gt; &#xA;&lt;p&gt;(after! org (setq org-src-fontify-natively t org-fontify-whole-heading-line t org-pretty-entities t org-ellipsis &#34;  &#34; ;; folding symbol org-hide-emphasis-markers t org-agenda-block-separator &#34;&#34; org-fontify-done-headline t prot/scroll-center-cursor-mode t org-fontify-quote-and-verse-blocks t org-startup-with-inline-images t org-startup-indented t))&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(lambda () (progn&#xA;  (setq left-margin-width 2)&#xA;  (setq right-margin-width 2)&#xA;  (set-window-buffer nil (current-buffer))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(setq header-line-format &#34; &#34;)&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;** LaTeX Configuration I always export the work I am handing in to teachers and printing off into $$\LaTeX$$ (/I know Lamport is happy with that typesetting/) and so I have some basic configuration going on in here&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :tangle yes (with-eval-after-load &#39;ox (require &#39;ox-hugo))&lt;/p&gt; &#xA;&lt;p&gt;;; Tufte Latex Classes&lt;/p&gt; &#xA;&lt;p&gt;(with-eval-after-load &#39;ox-latex (add-to-list &#39;org-latex-classes &#39;(&#34;tuftebook&#34; &#34;\documentclass{tufte-book}\n \usepackage{color} \usepackage{amssymb} \usepackage{gensymb} \usepackage{nicefrac} \usepackage{units}&#34; (&#34;\section{%s}&#34; . &#34;\section*{%s}&#34;) (&#34;\subsection{%s}&#34; . &#34;\subsection*{%s}&#34;) (&#34;\paragraph{%s}&#34; . &#34;\paragraph*{%s}&#34;) (&#34;\subparagraph{%s}&#34; . &#34;\subparagraph*{%s}&#34;)))) ;; tufte-handout class for writing classy handouts and papers (with-eval-after-load &#39;ox-latex (add-to-list &#39;org-latex-classes &#39;(&#34;tuftehandout&#34; &#34;\documentclass{tufte-handout} \usepackage{color} \usepackage{amssymb} \usepackage{amsmath} \usepackage{gensymb} \usepackage{nicefrac} \usepackage{units}&#34; (&#34;\section{%s}&#34; . &#34;\section*{%s}&#34;) (&#34;\subsection{%s}&#34; . &#34;\subsection*{%s}&#34;) (&#34;\paragraph{%s}&#34; . &#34;\paragraph*{%s}&#34;) (&#34;\subparagraph{%s}&#34; . &#34;\subparagraph*{%s}&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;;; Some Visuals&lt;/p&gt; &#xA;&lt;p&gt;(with-eval-after-load &#39;org (plist-put org-format-latex-options :background &#39;default)) #+end_src ** PDF-Configuration I love using &lt;em&gt;Zathura&lt;/em&gt; (/vim bindings/) as my default PDF viewer instead of &lt;em&gt;PDF-Tools&lt;/em&gt; so I am using the package /openwith/ to allow all my pdf files open up in &lt;em&gt;Zathura&lt;/em&gt; by default instead #+begin_src emacs-lisp :tangle yes (require &#39;openwith) (openwith-mode t) (setq openwith-associations &#39;((&#34;\.pdf\&#39;&#34; &#34;zathura&#34; (file)))) #+end_src *** Org-Noter I also often use Org-Noter as well to annotate my PDF&#39;s #+begin_src emacs-lisp :tangle yes (use-package! org-noter :after (:any org pdf-view) :config (setq ;; The WM can handle splits ;;org-noter-notes-window-location &#39;other-frame ;; Please stop opening frames ;;org-noter-always-create-frame nil ;; I want to see the whole file org-noter-hide-other nil ) ) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Emacs-Calc Not really part of the whole &lt;em&gt;ORG&lt;/em&gt; section, but I often use it when I am working with Org-Files .... So here it is. #+begin_src emacs-lisp :tangle yes&lt;/p&gt; &#xA;&lt;p&gt;;; CALC mode (map! :map calc-mode-map :after calc :localleader :desc &#34;Embedded calc (toggle)&#34; &#34;e&#34; #&#39;calc-embedded) (map! :map org-mode-map :after org :localleader :desc &#34;Embedded calc (toggle)&#34; &#34;E&#34; #&#39;calc-embedded) (map! :map latex-mode-map :after latex :localleader :desc &#34;Embedded calc (toggle)&#34; &#34;e&#34; #&#39;calc-embedded) (defvar calc-embedded-trail-window nil) (defvar calc-embedded-calculator-window nil)&lt;/p&gt; &#xA;&lt;p&gt;(defadvice! calc-embedded-with-side-pannel (&amp;amp;rest _) :after #&#39;calc-do-embedded (when calc-embedded-trail-window (ignore-errors (delete-window calc-embedded-trail-window)) (setq calc-embedded-trail-window nil)) (when calc-embedded-calculator-window (ignore-errors (delete-window calc-embedded-calculator-window)) (setq calc-embedded-calculator-window nil)) (when (and calc-embedded-info (&amp;gt; (* (window-width) (window-height)) 1200)) (let ((main-window (selected-window)) (vertical-p (&amp;gt; (window-width) 80))) (select-window (setq calc-embedded-trail-window (if vertical-p (split-window-horizontally (- (max 30 (/ (window-width) 3)))) (split-window-vertically (- (max 8 (/ (window-height) 4))))))) (switch-to-buffer &#34;&lt;em&gt;Calc Trail&lt;/em&gt;&#34;) (select-window (setq calc-embedded-calculator-window (if vertical-p (split-window-vertically -6) (split-window-horizontally (- (/ (window-width) 2)))))) (switch-to-buffer &#34;&lt;em&gt;Calculator&lt;/em&gt;&#34;) (select-window main-window)))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Configuration&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>