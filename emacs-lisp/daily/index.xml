<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-28T01:35:46Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>minad/jinx</title>
    <updated>2023-03-28T01:35:46Z</updated>
    <id>tag:github.com,2023-03-28:/minad/jinx</id>
    <link href="https://github.com/minad/jinx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸª„ Enchanted just-in-time spell-checker&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: jinx.el - Enchanted Just-in-time Spell Checker #+author: Daniel Mendler #+language: en #+export_file_name: jinx.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Jinx: (jinx). #+texinfo_dir_desc: Enchanted just-in-time spell checker&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/packages/jinx.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/jinx.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://elpa.gnu.org/devel/jinx.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/jinx.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/jinx&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/jinx-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/jinx&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/jinx-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Jinx provides just-in-time spell-checking via [[https://abiword.github.io/enchant/][libenchant]]. The package aims to achieve high performance and low resource usage, without impacting your editing experience. Overall Jinx should just work out of the box without much intervention.&lt;/p&gt; &#xA;&lt;p&gt;Jinx highlights misspellings lazily only in the visible part of the text. The window boundaries and text folding are taken into account. Jinx binds directly to the native libenchant API, such that process communication with a backend Aspell process can be avoided. Libenchant is widely used as spell-checking API by text editors and supports [[https://nuspell.github.io/][Nuspell]], [[http://hunspell.github.io/][Hunspell]], [[http://aspell.net/][Aspell]] and a few lesser known backends. Jinx automatically compiles and loads the native module at startup.&lt;/p&gt; &#xA;&lt;p&gt;Jinx supports multiple languages in a buffer at the same time via the =jinx-languages= customization variable. It offers flexible settings to ignore misspellings via faces (=jinx-exclude-faces= and =jinx-include-faces=), regular expressions (=jinx-exclude-regexps=) and programmable predicates. Jinx comes preconfigured for the most important major modes.&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/minad/jinx/raw/screenshots/screenshot.png?raw=true&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The package is available on GNU ELPA and MELPA and can be installed with =package-install=. Libenchant must be installed on your system for compilation. If =pkg-config= is available it will be used to locate libenchant. On Debian or Ubuntu, install the packages =libenchant-2-2=, =libenchant-2-dev= and =pkg-config=.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Jinx offers three auto-loaded entry points , the modes =global-jinx-mode=, =jinx-mode= and the command =jinx-correct=. You can either enable =global-jinx-mode= or add =jinx-mode= to the hooks of the modes.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;emacs-startup-hook #&#39;global-jinx-mode)&lt;/p&gt; &#xA;&lt;p&gt;(dolist (hook &#39;(text-mode-hook prog-mode-hook conf-mode-hook)) (add-hook hook #&#39;jinx-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In order to correct misspellings bind =jinx-correct= to a convenient key in your configuration. Jinx is independent of the Ispell package, so you can reuse the binding =M-$= which is bound to =ispell-word= by default. When pressing =M-$=, Jinx offers correction suggestions for the misspelling next to point. If the prefix key =C-u= is pressed, the entire buffer is spell-checked.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (keymap-global-set &#34;&#xA; &lt;remap&gt; &#xA;  &lt;ispell-word&gt;&#xA;   &#34; #&#39;jinx-correct) #+end_src&#xA;  &lt;/ispell-word&gt;&#xA; &lt;/remap&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enchant backends and personal dictionaries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enchant uses different backends depending on the language. The ordering of the backends is configured by the file =&lt;del&gt;/.config/enchant/enchant.ordering=. For most languages Hunspell is used by default. Depending on the backend the personal dictionary will be taken from different locations, e.g., =&lt;/del&gt;/.aspell.LANG.pws= or =~/.config/enchant/=. It is possible to symlink different personal dictionaries such that they are shared by different spell checkers. See the [[https://abiword.github.io/enchant/src/enchant.html][Enchant manual]] for more details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/astoff/jit-spell][jit-spell]]: Jinx offers a similar UI as Augusto Stoffel&#39;s jit-spell package and borrows ideas from it. Jit-spell uses Ispell process communication instead of a native API. It does not restrict the highlighting to the visible text. In my setup I observed an increase in load and latency as a consequence, in particular in combination with stealth locking and commands which trigger fontification eagerly like =consult-line= from my [[https://github.com/minad/consult][Consult]] package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://codeberg.org/ideasman42/emacs-spell-fu][spell-fu]]: The technique to spell-check only the visible text was inspired by Campbell Barton&#39;s spell-fu package. Spell-fu maintains the dictionary itself via a hash table, which results in high memory usage for languages with compound words or inflected word forms. In Jinx we avoid the complexity of managing the dictionary and access the advanced spell-checker algorithms directly via libenchant (affixation, compound words, etc.).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;flyspell: Flyspell is a builtin package which highlight misspellings while typing and when you move the cursor to a word. Jinx uses a different mode of operation, where the entire visible text of the buffer is checked always.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[https://elpa.gnu.org/packages/jinx.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mad-p/dotfiles</title>
    <updated>2023-03-28T01:35:46Z</updated>
    <id>tag:github.com,2023-03-28:/mad-p/dotfiles</id>
    <link href="https://github.com/mad-p/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My dotfiles&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dotfiles&lt;/h1&gt; &#xA;&lt;p&gt;My dotfiles&lt;/p&gt; &#xA;&lt;p&gt;To apply, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL https://raw.githubusercontent.com/mad-p/dotfiles/master/install.sh | /bin/sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>