<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T01:36:00Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Malabarba/beacon</title>
    <updated>2022-08-21T01:36:00Z</updated>
    <id>tag:github.com,2022-08-21:/Malabarba/beacon</id>
    <link href="https://github.com/Malabarba/beacon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A light that follows your cursor around so you don&#39;t lose it!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Beacon --- Never lose your cursor again&lt;/p&gt; &#xA;&lt;p&gt;This is a global minor-mode. Turn it on everywhere with: #+BEGIN_SRC emacs-lisp (beacon-mode 1) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;[[file:example-beacon.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Whenever the window scrolls a light will shine on top of your cursor so you know where it is.&lt;/p&gt; &#xA;&lt;p&gt;Thatâ€™s it.&lt;/p&gt; &#xA;&lt;p&gt;** Customizations&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The appearance of the beacon is configured by &lt;del&gt;beacon-size&lt;/del&gt; and &lt;del&gt;beacon-color&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The duration is configured by &lt;del&gt;beacon-blink-duration&lt;/del&gt; and &lt;del&gt;beacon-blink-delay&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To customize /when/ the beacon should blink at all, configure &lt;del&gt;beacon-blink-when-window-scrolls&lt;/del&gt;, &lt;del&gt;beacon-blink-when-window-changes&lt;/del&gt;, and &lt;del&gt;beacon-blink-when-point-moves&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To prevent the beacon from blinking only on specific situations configure &lt;del&gt;beacon-dont-blink-major-modes&lt;/del&gt;, &lt;del&gt;beacon-dont-blink-predicates&lt;/del&gt;, or &lt;del&gt;beacon-dont-blink-commands&lt;/del&gt;. You can also disable it only in specific buffers by doing &lt;del&gt;(setq-local beacon-mode nil)&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Beacon can also push the mark for you whenever point moves a long distance. For this, configure &lt;del&gt;beacon-push-mark&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/tsdh][Tassilo Horn]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If youâ€™d like to help too, just open a PR.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chrisbarrett/nursery</title>
    <updated>2022-08-21T01:36:00Z</updated>
    <id>tag:github.com,2022-08-21:/chrisbarrett/nursery</id>
    <link href="https://github.com/chrisbarrett/nursery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Programs and libs that I haven&#39;t gotten around to formally packaging&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: nursery #+author: Chris Barrett #+todo: SPIKE(s) INCUBATING(i) | STABLE(t) PUBLISHED(p)&lt;/p&gt; &#xA;&lt;p&gt;This is a repository for Emacs Lisp packages that I think could be useful for friends and coworkers. It&#39;s an experimental, low-pressure space for me just to hack on Lisp with the garage door open.&lt;/p&gt; &#xA;&lt;p&gt;If something reaches a stable state I may publish it if there&#39;s interest.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Curiosities On Show This repository contains a mix of end-user libraries and supporting libraries. The interesting stuff is listed below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** INCUBATING [[file:lisp/org-roam-review.el][org-roam-review]] /(incubating)/ Implements a system for managing [[https://maggieappleton.com/evergreens][Evergreen Notes]] on top of org-roam. Provides a spaced-repetition system that prompts you to review notes or revisit stubs and help them grow to maturity.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_org: :width 650px [[file:./images/org-roam-review.png]]&lt;/p&gt; &#xA;&lt;p&gt;** INCUBATING [[file:lisp/org-roam-dblocks.el][org-roam-dblocks]] /(incubating)/ Add org dynamic blocks that implement &#34;canned searches&#34; for org-roam. You can search for notes or list backlinks, then do additional filtering based on title or tags.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_org: :width 650px [[file:images/org-roam-dblocks.gif]]&lt;/p&gt; &#xA;&lt;p&gt;** INCUBATING [[file:lisp/org-roam-search.el][org-roam-search]] /(incubating)/ Search your org-roam files for a string and display a buffer of results. Results are shown with collapsible previews, like in the org-roam buffer.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_org: :width 650px [[file:images/org-roam-search.gif]]&lt;/p&gt; &#xA;&lt;p&gt;** INCUBATING [[file:lisp/org-roam-links.el][org-roam-links]] /(incubating)/ Display a tree of backlinks /and/ forward links up to a configurable depth. Useful for looking for unexpected connections without busting open a full-fledged graph UI. Contrasts with the normal org-roam buffer, which only shows backlinks.&lt;/p&gt; &#xA;&lt;p&gt;#+attr_org: :width 650px [[file:images/org-roam-links.png]]&lt;/p&gt; &#xA;&lt;p&gt;** INCUBATING [[file:lisp/org-roam-consult.el][org-roam-consult]] /(incubating)/ A version of =consult-ripgrep= that shows node titles instead of filenames so you don&#39;t have to guess anymore.&lt;/p&gt; &#xA;&lt;p&gt;** SPIKE [[file:lisp/org-roam-gc.el][org-roam-gc]] /(spike)/ Automatically delete empty dailies files so they don&#39;t build up forever.&lt;/p&gt; &#xA;&lt;p&gt;** SPIKE [[file:lisp/org-roam-rewrite.el][org-roam-rewrite]] /(spike)/ Commands for renaming nodes, rewriting links and deleting nodes with redirection so you can refactor notes without leaving broken links.&lt;/p&gt; &#xA;&lt;p&gt;** SPIKE [[file:lisp/timekeep.el][timekeep]] /(spike)/ Provides a structured way to use org-roam for representing multiple clients/employers. It provides a simple clocking interface built on org-clock and provides integrations with org-capture.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation Most packages should be manually installable via =package.el=, assuming you have [[https://melpa.org/#/getting-started][MELPA]] set up. But honestly, you&#39;re better off just cloning this repo and putting its lisp directory in your load path, then installing anything missing. ðŸ¤·&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo: #+begin_src sh $ git clone &lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:chrisbarrett/nursery.git &#xA;   &lt;path&gt;&#xA;     #+end_src&#xA;   &lt;/path&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add to load path: #+begin_src emacs-lisp (add-to-list &#39;load-path &#34;&#xA;   &lt;path&gt;&#xA;    /lisp&#34;) #+end_src&#xA;   &lt;/path&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;load desired features in your =~/.config/emacs/init.el=, e.g.: #+begin_src emacs-lisp (use-package org-roam-review :commands (org-roam-review org-roam-review-list-by-maturity org-roam-review-list-recently-added)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;;; ;; Optional - tag all newly-created notes as seedlings.&#xA;;; :hook (org-roam-capture-new-node . org-roam-review-set-seedling)&#xA;&#xA;;; ;; Optional - keybindings for applying Evergreen note properties.&#xA;;; :general&#xA;;; (:keymaps &#39;org-mode-map&#xA;;; &#34;C-c r r&#34; &#39;(org-roam-review-accept :wk &#34;accept&#34;)&#xA;;; &#34;C-c r u&#34; &#39;(org-roam-review-bury :wk &#34;bury&#34;)&#xA;;; &#34;C-c r x&#34; &#39;(org-roam-review-set-excluded :wk &#34;set excluded&#34;)&#xA;;; &#34;C-c r b&#34; &#39;(org-roam-review-set-budding :wk &#34;set budding&#34;)&#xA;;; &#34;C-c r s&#34; &#39;(org-roam-review-set-seedling :wk &#34;set seedling&#34;)&#xA;;; &#34;C-c r e&#34; &#39;(org-roam-review-set-evergreen :wk &#34;set evergreen&#34;))&#xA;&#xA;;; ;; Optional - bindings for evil-mode compatability.&#xA;;; :general&#xA;;; (:states &#39;(normal) :keymaps &#39;org-roam-review-mode-map&#xA;;; &#34;TAB&#34; &#39;magit-section-cycle&#xA;;; &#34;g r&#34; &#39;org-roam-review-refresh)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(use-package org-roam-search :commands (org-roam-search))&lt;/p&gt; &lt;p&gt;(use-package org-roam-links :commands (org-roam-links))&lt;/p&gt; &lt;p&gt;(use-package org-roam-dblocks :hook (org-mode . org-roam-dblocks-autoupdate-mode))&lt;/p&gt; &lt;p&gt;(use-package org-roam-rewrite :commands (org-roam-rewrite-rename org-roam-rewrite-remove org-roam-rewrite-inline org-roam-rewrite-extract)) #+end_src&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Ptival/files</title>
    <updated>2022-08-21T01:36:00Z</updated>
    <id>tag:github.com,2022-08-21:/Ptival/files</id>
    <link href="https://github.com/Ptival/files" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All sorts of files that I may need again later&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>