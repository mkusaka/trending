<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-03T01:36:40Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tinted-theming/base16-emacs</title>
    <updated>2023-07-03T01:36:40Z</updated>
    <id>tag:github.com,2023-07-03:/tinted-theming/base16-emacs</id>
    <link href="https://github.com/tinted-theming/base16-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Base16 themes for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://stable.melpa.org/#/base16-theme][file:https://stable.melpa.org/packages/base16-theme-badge.svg]] [[http://melpa.org/#/base16-theme][file:http://melpa.org/packages/base16-theme-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Base16 themes for Emacs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/tinted-theming/home][Tinted Theming]] provides carefully chosen syntax highlighting and a default set of sixteen colors suitable for a wide range of applications. Tinted Theming is not a single theme but a set of guidelines with numerous implementations.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the Emacs templates and [[http://melpa.org/#/base16-theme][MELPA]]. It can be built by using one of the builders listed on the main Tinted Theming page.&lt;/p&gt; &#xA;&lt;p&gt;If you notice anything that looks strange or if this repo is missing any scheme updates, please feel free to open an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;*** package.el&lt;/p&gt; &#xA;&lt;p&gt;base16-theme is available in both [[https://stable.melpa.org/#/base16-theme][MELPA stable]] and [[https://melpa.org/#/base16-theme][MELPA]].&lt;/p&gt; &#xA;&lt;p&gt;You can install it with the following command:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src text M-x package-install base16-theme #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To load one of the themes on emacs startup, add this to your init file (replacing base16-default-dark with the name of the theme you want):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (load-theme &#39;base16-default-dark t) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** use-package&lt;/p&gt; &#xA;&lt;p&gt;The use-package block is fairly similar to package.el.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package base16-theme :ensure t :config (load-theme &#39;base16-default-dark t)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that use-package tries to defer packages if at all possible, so you may need to add =:demand= to the use-package block.&lt;/p&gt; &#xA;&lt;p&gt;** Customizing&lt;/p&gt; &#xA;&lt;p&gt;There are a number of options which can be used to customize the themes. Note that they need to be set before load-theme is called.&lt;/p&gt; &#xA;&lt;p&gt;=base16-distinct-fringe-background= - Make the fringe background different from the normal background color. Also affects `linum-mode&#39; background. Defaults to true.&lt;/p&gt; &#xA;&lt;p&gt;=base16-highlight-mode-line= - Make the active mode line stand out more. There are two choices for applying the emphasis: &#34;box&#34; draws a thin border around the active mode line; and &#34;contrast&#34; uses the default face&#39;s foreground which should result in more contrast. Defaults to off (no special emphasis).&#34;&lt;/p&gt; &#xA;&lt;p&gt;** Terminal Colors&lt;/p&gt; &#xA;&lt;p&gt;When running emacs in a 256 color terminal, by default we assume you&#39;re using a base16 compatible terminal theme and use the colors from that. However, if you&#39;re using base16-shell or having trouble getting emacs to display with the correct colors it&#39;s possible to override this using the =base16-theme-256-color-source= variable.&lt;/p&gt; &#xA;&lt;p&gt;There are 3 possible values for this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=terminal=: The default value - use the colors from a base16 compatible terminal theme.&lt;/li&gt; &#xA; &lt;li&gt;=base16-shell=: Use the extended palate from base16-shell. This is useful for users of base16-shell.&lt;/li&gt; &#xA; &lt;li&gt;=colors=: Use emacs to convert from the html color code to the closest color in the 256 color palate. This can sometimes fix issues with the other two modes, but if you&#39;re using your own shell theme for the original 16 colors it can sometimes look strange.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Similar to other config values, make sure this is set before calling =load-theme=.&lt;/p&gt; &#xA;&lt;p&gt;** Previews&lt;/p&gt; &#xA;&lt;p&gt;Theme previews can be found [[https://tinted-theming.github.io/base16-emacs/][here]].&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to generate screenshots by adding the gh-pages branch as a subtree (=git worktree add -B gh-pages gh-pages origin/gh-pages=) then using the normal generation tools (simply run =screenshot.sh= from the screenshots dir).&lt;/p&gt; &#xA;&lt;p&gt;** evil-mode&lt;/p&gt; &#xA;&lt;p&gt;=evil-mode= doesn&#39;t provide a way for themes to set the cursor color, so if you&#39;re interested in matching the base16 spaceline indicator, you can use the following snippet:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Set the cursor color based on the evil state (defvar my/base16-colors base16-default-dark-colors) (setq evil-emacs-state-cursor &lt;code&gt;(,(plist-get my/base16-colors :base0D) box) evil-insert-state-cursor &lt;/code&gt;(,(plist-get my/base16-colors :base0D) bar) evil-motion-state-cursor &lt;code&gt;(,(plist-get my/base16-colors :base0E) box) evil-normal-state-cursor &lt;/code&gt;(,(plist-get my/base16-colors :base0B) box) evil-replace-state-cursor &lt;code&gt;(,(plist-get my/base16-colors :base08) bar) evil-visual-state-cursor &lt;/code&gt;(,(plist-get my/base16-colors :base09) box)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Development&lt;/p&gt; &#xA;&lt;p&gt;Above, there&#39;s a use-package block listed for general use, but if you want to run these themes out of the git repo, there&#39;s a bit more work which needs to be done. I use something similar to the following:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package base16-theme :ensure nil :load-path &#34;site-lisp/base16-theme&#34; :init (add-to-list &#39;custom-theme-load-path &#34;~/.emacs.d/site-lisp/base16-theme/build&#34;) :config (load-theme &#39;base16-default-dark t)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This block assumes the repo is cloned to ~/.emacs.d/site-lisp/base16-theme. That needs to be added to the load path (along with specifying =:ensure nil= if needed so use-package doesn&#39;t try to grab the package from melpa). Additionally, the build directory needs to be added to the =custom-theme-load-path= to ensure load-theme can find the themes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Credits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Current maintainer: [[https://github.com/belak][belak]]&lt;/p&gt; &#xA;&lt;p&gt;Previous maintainers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/mkaito][mkaito]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/neil477][neil477]]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Elilif/org-heatmap</title>
    <updated>2023-07-03T01:36:40Z</updated>
    <id>tag:github.com,2023-07-03:/Elilif/org-heatmap</id>
    <link href="https://github.com/Elilif/org-heatmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Show heatmap in org-mode.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: org-heatmap&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction :PROPERTIES: :TOC: ignore :END: Org-heatmap is an Emacs package for Org-mode users to keep track of their task consistency in a visual manner. It presents an overview heatmap on Org-mode agendas or Calendar, providing visual representation of task completions and task statistics.&lt;/li&gt; &#xA; &lt;li&gt;Contents :PROPERTIES: :TOC: this :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#screenshots][Screenshots]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#functions][Functions]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#variables][Variables]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#examples][Examples]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#todos][TODOs]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Screenshots :PROPERTIES: :TOC: 0 :END: Show habit completion overview in org agenda buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[images/screenshots/org-heatmap-habit-overview.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Display habit heatmap in Calendar&lt;/p&gt; &#xA;&lt;p&gt;[[images/screenshots/org-heatmap-habit-calendar.gif]]&lt;/p&gt; &#xA;&lt;p&gt;Add habit statistics after habits: (current streak, max streak and total done number).&lt;/p&gt; &#xA;&lt;p&gt;[[images/screenshots/habit-statistics.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation :PROPERTIES: :TOC: 0 :END: You must also install these packages:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs &amp;gt;= 28.2&lt;/li&gt; &#xA; &lt;li&gt;=emacsql= &amp;gt;= 3.1.1&lt;/li&gt; &#xA; &lt;li&gt;=org-mode= &amp;gt;= 9.6&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ps. I have not tested in the lower versions of the mentioned packages.&lt;/p&gt; &#xA;&lt;p&gt;Then put org-heatmap.el in your load-path, and eval: #+begin_src emacs-lisp (require &#39;org-heatmap) (org-heatmap-mode) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage :PROPERTIES: :TOC: 1 :END: ** Functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: When you run these functions for the first time, you may experience some lag (the lag time depends on the length of your habits record).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-heatmap-habit-draw-overview=&lt;/p&gt; &lt;p&gt;Draw an overview heatmap for the habit at point. When your cursor is on a habit in =org-agenda-mode=, you can call this function or press =h= to generate a heatmap for the habit. Call this function or press =h= again will erase the heatmap.&lt;/p&gt; &lt;p&gt;You can hover your mouse over a rectangle, and you will see the time you spent on the habit on that day. Clicking the rectangle will redirect you to an agenda view of that day.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This function uses =org-heatmap-rectangle= to draw heatmap, and for different fonts, the display effect may vary. The font used in the screenshots is =Cascadia Mono=. You can choose suitable characters based on the font you are using.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-heatmap-calendar=&lt;/p&gt; &lt;p&gt;Display a three-month Gregorian calendar. Add highlights indicating the activities on the current calendar date.&lt;/p&gt; &lt;p&gt;Whenever you complete a task (when a item is changed to DONE in org-mode.), the activity counter for the day will increase by one and update the database. You can use =org-heatmap-calendar= to generate a heatmap of your everyday activity, and use built-in functions such as =org-calendar-goto-agenda= to see details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-heatmap-habit-calendar=&lt;/p&gt; &lt;p&gt;Like =org-heatmap-calendar=, display a three-month Gregorian calendar for the habit at point.&lt;/p&gt; &lt;p&gt;Add highlights indicating the times spent on the habit on the current calendar date.&lt;/p&gt; &lt;p&gt;Whenever you complete a habit (when a item is changed to DONE in org-mode.), org-heatmap will record the time you spent on this habit today and write it to the database. You can use this command to generate a heatmap of your everyday time spent, and use built-in functions such as =org-calendar-goto-agenda= to see details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-heatmap-calendar-query=&lt;/p&gt; &lt;p&gt;In =Calendar-mode= with org-heatmap highlights, you can use this function (bound to =f= in =calendar-mode=) to get information about the activities on the current calendar date.&lt;/p&gt; &lt;p&gt;When used with =org-heatmap-calendar=, it shows how many items are done on the current calendar date.&lt;/p&gt; &lt;p&gt;When used with =org-heatmap-habit-calendar=, it shows how many times is spent on the habit on the current calendar date.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-heatmap-adjust=&lt;/p&gt; &lt;p&gt;Change the number of done items on the current calendar date, used with =org-heatmap-calendar= (bound to =j= in =calendar-mdoe=).&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; that this function is not applied to =org-heatmap-habit-calendar= for now.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-heatmap-db--drop=&lt;/p&gt; &lt;p&gt;Delete a table from org-heatmap database. ** Variables&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-heatmap-rectangle=&lt;/p&gt; &lt;p&gt;Characters used to draw overview heatmap.&lt;/p&gt; &lt;p&gt;When your overview heatmap is not displayed ideally, you can consider changing to suitable characters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-heatmap-enable-habit-statics=&lt;/p&gt; &lt;p&gt;Whether to shoaw habit statics.&lt;/p&gt; &lt;p&gt;Add three data after the habit entry: (current streak, max streak and total done number).&lt;/p&gt; &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: If you want to chage this variable, please set it before loading org-heatmap or use =setopt=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-heatmap-threshold=&lt;/p&gt; &lt;p&gt;Choose a different face based on the threshold arrived.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-heatmap-db-location=&lt;/p&gt; &lt;p&gt;Default database location. ** Examples Eval the following code: #+begin_src emacs-lisp (setq org-agenda-files &#39;(&#34;/path-to/org-heatmap/examples/examples.org&#34;)) ;; You need specify these two paths. (setq org-heatmap-db-location &#34;/path-to/org-heatmap/examples/org-heatmap.db&#34;) (org-heatmap-mode) (with-eval-after-load &#39;org-habit (setq org-habit-graph-column 1 org-habit-preceding-days 10 org-habit-following-days 1 org-habit-show-habits-only-for-today nil)) #+end_src&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next, you can perform the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open an agenda buffer, you will see three habits.&lt;/li&gt; &#xA; &lt;li&gt;Try above functions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TODOs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Speed up database writes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add project management&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Record more data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for more complex database operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for more data display modes&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>