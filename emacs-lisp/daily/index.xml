<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-15T01:31:55Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bastibe/org-journal</title>
    <updated>2022-12-15T01:31:55Z</updated>
    <id>tag:github.com,2022-12-15:/bastibe/org-journal</id>
    <link href="https://github.com/bastibe/org-journal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple org-mode based journaling mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://travis-ci.org/bastibe/org-journal][file:https://travis-ci.org/bastibe/org-journal.svg?branch=master]] [[https://elpa.nongnu.org/nongnu/org-journal.html][https://elpa.nongnu.org/nongnu/org-journal.svg]] [[http://melpa.org/#/org-journal][file:http://melpa.org/packages/org-journal-badge.svg]] [[http://stable.melpa.org/#/org-journal][file:http://stable.melpa.org/packages/org-journal-badge.svg]] [[contributors][file:https://img.shields.io/github/contributors/bastibe/org-journal.svg]] [[license][file:https://img.shields.io/github/license/bastibe/org-journal.svg]]&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: The org-journal logo [[./org-journal.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;org-journal&lt;/p&gt; &lt;p&gt;Adapted from &lt;a href=&#34;https://www.emacswiki.org/emacs/PersonalDiary&#34;&gt;https://www.emacswiki.org/emacs/PersonalDiary&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Functions to maintain a simple personal diary / journal using in Emacs.&lt;/p&gt; &lt;p&gt;Feel free to use, modify and improve the code! — mtvoid, bastibe&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[open-issues][file:https://img.shields.io/github/issues/bastibe/org-journal.svg]] [[closed-issues][file:https://img.shields.io/github/issues-closed/bastibe/org-journal.svg]] [[open-pull-requests][file:https://img.shields.io/github/issues-pr/bastibe/org-journal.svg]] [[closed-pull-requests][file:https://img.shields.io/github/issues-pr-closed/bastibe/org-journal.svg]]&lt;/p&gt; &#xA;&lt;p&gt;** Synopsis&lt;/p&gt; &#xA;&lt;p&gt;=org-journal= maintains a set of files, depending on the value of =org-journal-file-type=, a file represents a day, week, month or year. When =org-journal-file-type= is set to =&#39;daily=, each file represent a day. In case =org-journal-file-type= is set to =&#39;weekly=, a file represents a week, etc. Convenient bindings allow the creation of journal records in the current daily, weekly, monthly or yearly file and search within all records or specified time intervals. All records can be browsed and searched from the Emacs Calendar for convenience. All entries in a specified TODO state will be carried over to the next day, see =org-journal-carryover-items=. Optionally, the journal entry can be encrypted, so can the file, see =org-journal-enable-encryption= and =org-journal-encrypt-journal=, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Every journal entry must have a &lt;em&gt;CREATED&lt;/em&gt; property when using yearly, monthly and weekly journal files. This property is added by =org-journal-new-entry= automatically.&lt;/p&gt; &#xA;&lt;p&gt;An example of a daily file (it will actually look a lot nicer, depending on your org-mode settings):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE org&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tuesday, 06/04/13 ** 10:28 Company meeting Endless discussions about projects. Not much progress&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 11:33 Work on org-journal For the longest time, I wanted to have a cool diary app on my computer. However, I simply lacked the right tool for that job. After many hours of searching, I finally found PersonalDiary on EmacsWiki. PersonalDiary is a very simple diary system based on the emacs calendar. It works pretty well, but I don&#39;t really like that it only uses unstructured text.&lt;/p&gt; &#xA;&lt;p&gt;Thus, I spent the last two hours making that diary use org-mode and represent every entry as an org-mode headline. Very cool!&lt;/p&gt; &#xA;&lt;p&gt;** 15:33 Work on org-journal Now my journal automatically creates the right headlines (adds the current time stamp if on the current day, does not add a time stamp for any other day). Additionally, it automatically collapses the headlines in the org-file to the right level (shows everything if in view mode, shows only headlines in new-entry-mode). Emacs and elisp are really cool!&lt;/p&gt; &#xA;&lt;p&gt;** 16:40 Work on org-journal I uploaded my journal mode to marmalade and Github! Awesome!&lt;/p&gt; &#xA;&lt;p&gt;** TODO teach org-journal how to brew coffee #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;An example of a weekly/monthly/yearly journal file, see also =org-journal-file-type=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE org&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tuesday, 06/04/13 :PROPERTIES: :CREATED: 20130604 :END: ** 10:28 Company meeting ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 11:33 Work on org-journal ...&lt;/p&gt; &#xA;&lt;p&gt;** 15:33 Work on org-journal ...&lt;/p&gt; &#xA;&lt;p&gt;** 16:40 Work on org-journal ...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wednesday, 06/05/13 :PROPERTIES: :CREATED: 20130605 :END: ** 10:28 A new day ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** 11:33 Work is almost over ...&lt;/p&gt; &#xA;&lt;p&gt;** TODO teach org-journal how to brew coffee #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;=org-journal= is available through [[https://elpa.nongnu.org/][NonGNU ELPA]], [[https://melpa.org/][MELPA]] and [[https://stable.melpa.org/][MELPA Stable]]. So installation should be trivial:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE M-x package-install org-journal #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;Then add =(require &#39;org-journal)= to your =.emacs=.&lt;/p&gt; &#xA;&lt;p&gt;** Quickstart&lt;/p&gt; &#xA;&lt;p&gt;Doing =M-x org-journal-new-entry= will immediately create a journal directory in the default path (customized using the =org-journal-dir= variable), open or create a file in =org-journal-mode=, and insert a template for a new journal entry.&lt;/p&gt; &#xA;&lt;p&gt;The same command with a prefix argument (=C-u M-x org-journal-new-entry=) will do everything mentioned while skipping entry creation, which is useful for looking at the current journal file.&lt;/p&gt; &#xA;&lt;p&gt;** Basic Usage&lt;/p&gt; &#xA;&lt;p&gt;Bindings available in =org-journal-mode=:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=C-c C-f= - go to the next journal file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=C-c C-b= - go to the previous journal file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=C-c C-j= - insert a new entry into the current journal file (creates the file if not present).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=C-c C-s= - search the journal for a string.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All journal entries are registered in the Emacs Calendar. To see available journal entries do =M-x calendar=. Bindings available in the =calendar-mode=:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=j m= - mark entries in calendar&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j r= - view an entry in a new buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j d= - view an entry but do not switch to it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j n= - add a new entry into the day&#39;s file (creates the file if not present).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j s w= - search in all entries of the current week.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j s m= - search in all entries of the current month.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j s y= - search in all entries of the current year.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j s f= - search in all entries of all time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=j s F= - search in all entries in the future.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=[= - go to previous day with journal entries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=]= - go to next day with journal entries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Setup and customization&lt;/p&gt; &#xA;&lt;p&gt;The following variables can be customized through =M-x customize=, or configured programmatically in your =.init.el=.&lt;/p&gt; &#xA;&lt;p&gt;See below for an example.&lt;/p&gt; &#xA;&lt;p&gt;*** Journal Directory and Files&lt;/p&gt; &#xA;&lt;p&gt;Customization options related to journal directory and files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-dir= - the journal path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-file-format= - format string for journal file names (may contain directories relative to =org-journal-dir=).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-find-file= - a function to use when opening a journal file. By default it opens a window using =find-file-other-window=. Set this to =find-file= if you don&#39;t want org-journal to split your window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-extend-today-until= - a number that indicates the hour of /your/ end of the day. If you create a new entry with =org-journal-new-entry= earlier than this time, the journal entry will go into the previous day&#39;s journal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-file-type= - the journal file type either &#39;daily (default), &#39;weekly, &#39;monthly or &#39;yearly. Also see the customizable variables =org-journal-start-on-weekday= for changing the start of the week for weekly journals (defaults to Monday). Keep in mind changing =org-journal-start-on-weekday= won&#39;t work for existing weekly journal files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Journal File Content&lt;/p&gt; &#xA;&lt;p&gt;Customization options related to the journal file contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-date-format= - date format =org-journal= uses when showing a date within a journal and search results page. It can also be a function, which return value will than be inserted.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-date-prefix= - this string will prefix the date at the top of a journal file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-time-format= - a timestamp format that will prefix every entry within a daily journal file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-time-prefix= - a string that will prefix every entry within a daily journal file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-file-header= - a string that will be inserted at the top of every new journal file. If a string, it will be passed to &lt;code&gt;format-time-string&lt;/code&gt; along the time value of the new journal entry. It can also be a function expecting a time value.&lt;/p&gt; &lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp (defun org-journal-file-header-func (time) &#34;Custom function to create journal header.&#34; (concat (pcase org-journal-file-type (&lt;code&gt;daily &#34;#+TITLE: Daily Journal\n#+STARTUP: showeverything&#34;) (&lt;/code&gt;weekly &#34;#+TITLE: Weekly Journal\n#+STARTUP: folded&#34;) (&lt;code&gt;monthly &#34;#+TITLE: Monthly Journal\n#+STARTUP: folded&#34;) (&lt;/code&gt;yearly &#34;#+TITLE: Yearly Journal\n#+STARTUP: folded&#34;))))&lt;/p&gt; &lt;p&gt;(setq org-journal-file-header &#39;org-journal-file-header-func) #+END_EXAMPLE&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-hide-entries-p= - a boolean (defaults to =true=) that will hide previous journal entries if true. Can be set to =nil= to show previous entries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** =org-journal= behavior&lt;/p&gt; &#xA;&lt;p&gt;Customization options related to =org-journal= itself:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=org-journal-mode-hook= - List of functions to run when =org-journal-mode= is loaded. By default this is set to =&#39;(turn-on-visual-line-mode org-journal-default-enable-encryption)=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** An example setup&lt;/p&gt; &#xA;&lt;p&gt;A very basic example of customization.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp (setq org-journal-dir &#34;~/org/journal/&#34;) (setq org-journal-date-format &#34;%A, %d %B %Y&#34;) (require &#39;org-journal) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;For users of =use-package=, this setup could look like the following:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp (use-package org-journal :ensure t :defer t :init ;; Change default prefix key; needs to be set before loading org-journal (setq org-journal-prefix-key &#34;C-c j &#34;) :config (setq org-journal-dir &#34;~/org/journal/&#34; org-journal-date-format &#34;%A, %d %B %Y&#34;)) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;** Advanced Usage *** Searching the Journal&lt;/p&gt; &#xA;&lt;p&gt;=org-journal= has two searching options: the usual =org-mode= agenda search and the built-in plain text search. The former can become slow with bigger journals, so the built-in search is a recommended option.&lt;/p&gt; &#xA;&lt;p&gt;To use the agenda search, you can add all journal entries to your org-agenda by adding =org-journal-dir= to =org-agenda-files= and setting =org-agenda-file-regexp= to include files matching your =org-journal-file-pattern=.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp ;; When =org-journal-file-pattern= has the default value, this would be the regex. (setq org-agenda-file-regexp &#34;\`\([^.].*\.org\|[0-9]\{8\}\(\.gpg\)?\)\&#39;&#34;) (add-to-list &#39;org-agenda-files org-journal-dir) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;However, this can become /very/ slow if you have many journal entries. As a compromize, you can set =org-journal-enable-agenda-integration= to =t=, which automatically adds the current and all future journal entries to the agenda. This is enough to get an overview over current and future tasks.&lt;/p&gt; &#xA;&lt;p&gt;The built-in search is available through the following function: =org-journal-search= (=C-c C-s= in =org-journal-mode=). By default, it will ask for the time interval to search within (accepting the =org-read-date= format such as &#34;-1y&#34; or &#34;-1m&#34;) and the string to search for. Given a prefix argument (=C-u org-journal-search=), it will go through the whole journal.&lt;/p&gt; &#xA;&lt;p&gt;The order of the search results (ascending or descending by date) can be customized using the =org-journal-search-results-order-by= variable.&lt;/p&gt; &#xA;&lt;p&gt;Search is also available through the Emacs Calendar as described in &#34;Basic Usage&#34;.&lt;/p&gt; &#xA;&lt;p&gt;*** Carry Over&lt;/p&gt; &#xA;&lt;p&gt;By default, =org-journal= will try to /carry over/ previous day TODO-marked items whenever a new journal file is created. The older journal entry will be inserted to the current day&#39;s file.&lt;/p&gt; &#xA;&lt;p&gt;This feature is controlled through the =org-journal-carryover-items= variable. To disable this feature set =org-journal-carryover-items= to an empty string =&#34;&#34;=. Any [[http://orgmode.org/manual/Matching-tags-and-properties.html][agenda tags view match string]], tags, properties, and todo states are allowed. By default this is &lt;del&gt;TODO=”TODO”&lt;/del&gt;. Which will match TODO items.&lt;/p&gt; &#xA;&lt;p&gt;The old carryover items in the previous day&#39;s journal are processed by the function assigned to =org-journal-handle-old-carryover= variable. Default is to remove all of them. You can change this behavior by assigning a custom fuction to the variable. Your function has to take one argument, which is a list of old carryover entries. The list is in form of ((START_POINT (END_POINT . &#34;TEXT&#34;)) ... (START_POINT (END_POINT . &#34;TEXT&#34;))); and in ascending order of START_POINT.&lt;/p&gt; &#xA;&lt;p&gt;For example, you can choose putting a tag on the old carryover entries intead of removing them:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (defun my-old-carryover (old_carryover) (save-excursion (let ((matcher (cdr (org-make-tags-matcher org-journal-carryover-items)))) (dolist (entry (reverse old_carryover)) (save-restriction (narrow-to-region (car entry) (cadr entry)) (goto-char (point-min)) (org-scan-tags &#39;(lambda () (org-set-tags &#34;:carried:&#34;)) matcher org--matcher-tags-todo-only))))))&lt;/p&gt; &#xA;&lt;p&gt;(setq org-journal-handle-old-carryover &#39;my-old-carryover) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also skip carry over of [[https://orgmode.org/manual/Drawers.html][Drawers]] through the =org-journal-skip-carryover-drawers= variable. This is specifically useful when you want to skip carry over of previous days clocked entries when it is under the drawer =LOGBOOK=. The variable accepts a list of drawers names which will be skipped on carry over. Sample configuration for skipping =LOGBOOK= drawer:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq org-journal-skip-carryover-drawers (list &#34;LOGBOOK&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Encryption&lt;/p&gt; &#xA;&lt;p&gt;The journal entry can be encrypted using =org-crypt=, to enable it set &lt;del&gt;org-journal-enable-encryption&lt;/del&gt; to =t=.&lt;/p&gt; &#xA;&lt;p&gt;You can also encrypt the journal files itself by setting the variable &lt;del&gt;org-journal-encrypt-journal&lt;/del&gt; to =t=. =org-journal= will always search for journal files with the =.gpg= extension, and highlights them in the calendar, etc., regardless of the value of &lt;del&gt;org-journal-encrypt-journal&lt;/del&gt;. See the info page =(info &#34;(epa)Encrypting/decrypting gpg files&#34;)= for more information about gpg encryption in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;*** Agenda and Scheduling&lt;/p&gt; &#xA;&lt;p&gt;An easy way of keeping track of appointments or future TODOs is to simply create a journal entry in the future. Such entries will automatically get a timestamp and show up in the current day&#39;s journal entry once you reach that day.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if =org-journal-enable-agenda-integration= is =t=, org-journal will automatically add the current and all future journal entries to =org-agenda-files=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a few helper functions to deal with such scheduled entries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-new-scheduled-entry= - prompts for a date, and creates a new journal entry on that date with its timestamp set to the date. By default, this is a TODO entry. Set the prefix to avoid the TODO.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=org-journal-schedule-view= - creates a read-only overview of scheduled entries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;**** iCalendar export&lt;/p&gt; &#xA;&lt;p&gt;You can export your scheduled entries to an iCalendar file, and subscribe to that file in your calendar application. You need to enable the agenda integration for this to work. I also recommend you set the following values before exporting:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq org-journal-enable-agenda-integration t org-icalendar-store-UID t org-icalendar-include-todo &#34;all&#34; org-icalendar-combined-agenda-file &#34;~/path/to/org-journal.ics&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;With this done, you can export your agenda, including your scheduled entries, with =(org-icalendar-combine-agenda-files)=.&lt;/p&gt; &#xA;&lt;p&gt;*** Journal Capture Template&lt;/p&gt; &#xA;&lt;p&gt;You can configure a capture template in order to integrate =org-journal= with =org-capture=, as in the following example for a daily journal:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp (defun org-journal-find-location () ;; Open today&#39;s journal, but specify a non-nil prefix argument in order to ;; inhibit inserting the heading; org-capture will insert the heading. (org-journal-new-entry t) (unless (eq org-journal-file-type &#39;daily) (org-narrow-to-subtree)) (goto-char (point-max)))&lt;/p&gt; &#xA;&lt;p&gt;(setq org-capture-templates &#39;((&#34;j&#34; &#34;Journal entry&#34; plain (function org-journal-find-location) &#34;** %(format-time-string org-journal-time-format)%^{Title}\n%i%?&#34; :jump-to-captured t :immediate-finish t))) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;If you want to do the same to schedule a task for a future date, you can use the following:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_EXAMPLE emacs-lisp (defvar org-journal--date-location-scheduled-time nil)&lt;/p&gt; &#xA;&lt;p&gt;(defun org-journal-date-location (&amp;amp;optional scheduled-time) (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil &#34;Date:&#34;)))) (setq org-journal--date-location-scheduled-time scheduled-time) (org-journal-new-entry t (org-time-string-to-time scheduled-time)) (unless (eq org-journal-file-type &#39;daily) (org-narrow-to-subtree)) (goto-char (point-max))))&lt;/p&gt; &#xA;&lt;p&gt;(setq org-capture-templates &#39;((&#34;j&#34; &#34;Journal entry&#34; plain (function org-journal-date-location) &#34;** TODO %?\n &amp;lt;%(princ org-journal--date-location-scheduled-time)&amp;gt;\n&#34; :jump-to-captured t)) #+END_EXAMPLE&lt;/p&gt; &#xA;&lt;p&gt;*** Caching of journal dates Since version 2.0.0 a cache has been added to speed up calendar operations. This should drastically improve the performance when using encrypted journal files, see =org-journal-encrypt-journal=.&lt;/p&gt; &#xA;&lt;p&gt;The caching functionality can be enabled by settings =org-journal-enable-cache= to =t=. The cache can be reset by calling =org-journal-invalidate-cache=.&lt;/p&gt; &#xA;&lt;p&gt;** FAQ&lt;/p&gt; &#xA;&lt;p&gt;*** Can I use weekly/monthly/yearly journal entries instead of daily ones?&lt;/p&gt; &#xA;&lt;p&gt;Yes, see =org-journal-file-type=.&lt;/p&gt; &#xA;&lt;p&gt;*** Can I have multiple journals?&lt;/p&gt; &#xA;&lt;p&gt;At the moment, this is not possible. But it should be possible to switch the value of =org-journal-directory= using a custom function or directory local variables.&lt;/p&gt; &#xA;&lt;p&gt;*** Can I use org-journal with Spacemacs?&lt;/p&gt; &#xA;&lt;p&gt;Yes you can!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To use =org-journal= with Spacemacs from the =master= branch, you must do this:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;=git clone &lt;a href=&#34;https://github.com/borgnix/spacemacs-journal.git&#34;&gt;https://github.com/borgnix/spacemacs-journal.git&lt;/a&gt; ~/.emacs.d/private/journal=&lt;/li&gt; &#xA;   &lt;li&gt;add it to your =~/.spacemacs=. You will need to add =journal= to the existing =dotspacemacs-configuration-layers= list in this file.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;The manual of the journal layer can be found at &lt;a href=&#34;https://github.com/borgnix/spacemacs-journal&#34;&gt;https://github.com/borgnix/spacemacs-journal&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you use Spacemacs from the =develop= branch you can enable =org-journal= by setting =org-enable-org-journal-support= to =t=, see [[https://github.com/syl20bnr/spacemacs/tree/develop/layers/+emacs/org#org-journal-support][Spacemacs org-journal support]].&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Some key-bindings in org-journal conflict with org-mode key bindings&lt;/p&gt; &#xA;&lt;p&gt;Minor modes are supposed to only use key bindings of the form =C-c C-?=, where =?= can be any letter, and to not overwrite major mode bindings. With org-mode already using most interesting keys, collisions are inevitable. This means that some org-journal key bindings will not work as expected in an org-mode buffer, and also that some org-mode key bindings will not work as expected in an org-journal buffer.&lt;/p&gt; &#xA;&lt;p&gt;When working in an org-mode buffer the following org-journal key bindings are overwritten:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=C-c C-s= (=org-journal-search=) with =org-schedule=&lt;/li&gt; &#xA; &lt;li&gt;=C-c C-f= (=org-journal-open-next-entry=) with =org-forward-heading-same-level=&lt;/li&gt; &#xA; &lt;li&gt;=C-c C-b= (=org-journal-open-previous-entry=) with =org-backward-heading-same-level=&lt;/li&gt; &#xA; &lt;li&gt;=C-c C-j= (=org-journal-new-entry=) with =org-goto=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To workaround this, you can use user bindings of the form =C-c ?=, where =?= can be any letter, to call the org-journal functions. This allows you to have a set of keybindings that work the same in org-mode and org-journal buffers. However, this is Emacs, and if you don&#39;t like a key binding, change it!&lt;/p&gt; &#xA;&lt;p&gt;*** Opening journal entries from the calendar are not editable&lt;/p&gt; &#xA;&lt;p&gt;Old entries are opened in =view-mode=, which has convenient key bindings for browsing files. Most notably, you can quickly close =view-mode= buffers with =q=, scroll them with the =SPC= and =DEL=, or quit =view-mode= with =e=.&lt;/p&gt; &#xA;&lt;p&gt;*** Can I insert some text on a newly created journal file?&lt;/p&gt; &#xA;&lt;p&gt;Yes, you can write a custom function and assign it =org-journal-date-format=.&lt;/p&gt; &#xA;&lt;p&gt;*** Can I do more powerful things on a newly created journal entry?&lt;/p&gt; &#xA;&lt;p&gt;Yes, there are two hooks that are run when a journal entry is created. Each (=org-journal-new-entry=) will call =org-journal-after-entry-create-hook=, and =org-journal-after-header-create-hook= is called each time the date (the parent headline of each entry) is generated.&lt;/p&gt; &#xA;&lt;p&gt;** Convenient =org-journal= Snippet Extensions&lt;/p&gt; &#xA;&lt;p&gt;*** Kill journal buffer after saving buffer (By [[https://github.com/dhruvparamhans][@dhruvparamhans]]) #+BEGIN_SRC emacs-lisp (defun org-journal-save-entry-and-exit() &#34;Simple convenience function. Saves the buffer of the current day&#39;s entry and kills the window Similar to org-capture like behavior&#34; (interactive) (save-buffer) (kill-buffer-and-window)) (define-key org-journal-mode-map (kbd &#34;C-x C-s&#34;) &#39;org-journal-save-entry-and-exit) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Contributors&lt;/p&gt; &#xA;&lt;p&gt;See [[file:CONTRIBUTORS][CONTRIBUTORS]].&lt;/p&gt; &#xA;&lt;p&gt;** Contributing to =org-journal= We format the code using =common-lisp-indent-function= rather than the default =lisp-indent-function=. Please set the variable =lisp-indent-function= to =common-lisp-indent-function=, and format the code before creating a PR.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq lisp-indent-function &#39;common-lisp-indent-function) ;; Markt the whole buffer: C-x h ;; Call indent-region: C-M-&lt;br&gt; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Changelog&lt;/p&gt; &#xA;&lt;p&gt;See [[file:CHANGELOG][CHANGELOG]].&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purcell/envrc</title>
    <updated>2022-12-15T01:31:55Z</updated>
    <id>tag:github.com,2022-12-15:/purcell/envrc</id>
    <link href="https://github.com/purcell/envrc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs support for direnv which operates buffer-locally&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/envrc&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/envrc-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/envrc&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/envrc-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/envrc/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/envrc/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;envrc.el - buffer-local direnv integration for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;A GNU Emacs library which uses the &lt;a href=&#34;https://direnv.net/&#34;&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/a&gt; tool to determine per-directory/project environment variables and then set those environment variables on a per-buffer basis. This means that when you work across multiple projects which have &lt;code&gt;.envrc&lt;/code&gt; files, all processes launched from the buffers &#34;in&#34; those projects will be executed with the environment variables specified in those files. This allows different versions of linters and other tools to be used in each project if desired.&lt;/p&gt; &#xA;&lt;p&gt;This library is like &lt;a href=&#34;https://github.com/wbolster/emacs-direnv&#34;&gt;the &lt;code&gt;direnv.el&lt;/code&gt; package&lt;/a&gt;, but sets all environment variables buffer-locally, while &lt;code&gt;direnv.el&lt;/code&gt; changes the global set of environment variables after each command.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installable packages are available via MELPA: do &lt;code&gt;M-x package-install RET envrc RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;a href=&#34;https://github.com/purcell/envrc/tags&#34;&gt;download&lt;/a&gt; the latest release or clone the repository, and install &lt;code&gt;envrc.el&lt;/code&gt; with &lt;code&gt;M-x package-install-file&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;init.el&lt;/code&gt; (after calling &lt;code&gt;package-initialize&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(envrc-global-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s probably wise to do this &lt;em&gt;late in your startup sequence&lt;/em&gt;: you normally want &lt;code&gt;envrc-mode&lt;/code&gt; to be initialized in each buffer &lt;em&gt;before&lt;/em&gt; other minor modes like &lt;code&gt;flycheck-mode&lt;/code&gt; which might look for executables. Counter-intuitively, this means that &lt;code&gt;envrc-global-mode&lt;/code&gt; should be enabled &lt;em&gt;after&lt;/em&gt; other global minor modes, since each &lt;em&gt;prepends&lt;/em&gt; itself to various hooks.&lt;/p&gt; &#xA;&lt;p&gt;You should only enable the mode if &lt;code&gt;direnv&lt;/code&gt; is installed and available in the default Emacs &lt;code&gt;exec-path&lt;/code&gt;. (There is a local minor mode &lt;code&gt;envrc-mode&lt;/code&gt;, but you should not try to enable this granularly, e.g. for certain modes or projects, because compilation and other buffers might not get set up with the right environment.)&lt;/p&gt; &#xA;&lt;p&gt;Regarding interaction with the mode, see &lt;code&gt;envrc-mode-map&lt;/code&gt;, and the commands &lt;code&gt;envrc-reload&lt;/code&gt;, &lt;code&gt;envrc-allow&lt;/code&gt; and &lt;code&gt;envrc-deny&lt;/code&gt;. (There&#39;s also &lt;code&gt;envrc-reload-all&lt;/code&gt; as a &#34;nuclear&#34; reset, for now!)&lt;/p&gt; &#xA;&lt;p&gt;In particular, you can enable keybindings for the above commands by binding your preferred prefix to &lt;code&gt;envrc-command-map&lt;/code&gt; in &lt;code&gt;envrc-mode-map&lt;/code&gt;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(with-eval-after-load &#39;envrc&#xA;  (define-key envrc-mode-map (kbd &#34;C-c e&#34;) &#39;envrc-command-map))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you find that a particular Emacs command isn&#39;t picking up the environment of your current buffer, and you&#39;re sure that &lt;code&gt;envrc-mode&lt;/code&gt; is active in that buffer, then it&#39;s possible you&#39;ve found code that runs a process in a temp buffer and neglects to propagate your environment to that buffer before doing so.&lt;/p&gt; &#xA;&lt;p&gt;A couple of common Emacs commands that suffer from this defect are also patched directly via advice in &lt;code&gt;envrc.el&lt;/code&gt; — &lt;code&gt;shell-command-to-string&lt;/code&gt; is a prominent example!&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;inheritenv&lt;/code&gt; package was designed to handle this case in general.&lt;/p&gt; &#xA;&lt;h2&gt;Design notes&lt;/h2&gt; &#xA;&lt;p&gt;By default, Emacs has a single global set of environment variables used for all subprocesses, stored in the &lt;code&gt;process-environment&lt;/code&gt; variable. &lt;code&gt;direnv.el&lt;/code&gt; switches that global environment using values from &lt;code&gt;direnv&lt;/code&gt; when the user performs certain actions, such as switching between buffers in different projects.&lt;/p&gt; &#xA;&lt;p&gt;In practice, this is simple and mostly works very well. But there are some quirks, and it feels wrong to me to mutate the global environment in order to support per-directory environments.&lt;/p&gt; &#xA;&lt;p&gt;Now, in Emacs we can also set &lt;code&gt;process-environment&lt;/code&gt; locally in a buffer. If this value could be correctly maintained in all buffers based on their various respective &lt;code&gt;.envrc&lt;/code&gt; files, then buffers across multiple projects could simultaneously be &#34;connected&#34; to the environments of their corresponding project directories. I wrote &lt;code&gt;envrc.el&lt;/code&gt; to explore this approach.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;envrc.el&lt;/code&gt; uses a global minor mode (&lt;code&gt;envrc-global-mode&lt;/code&gt;) to hook into practically every buffer created by Emacs, including hidden and temporary ones. When a buffer is found to be &#34;inside&#34; an &lt;code&gt;.envrc&lt;/code&gt;-managed project, &lt;code&gt;process-environment&lt;/code&gt; is set buffer-locally by running &lt;code&gt;direnv&lt;/code&gt;, the results of which are also cached indefinitely so that this is not too costly overall. Each buffer has a local minor mode (&lt;code&gt;envrc-mode&lt;/code&gt;) with an indicator which displays whether or not a direnv is in effect in that buffer. (Hooking into every buffer is important, rather than just those with certain major modes, since separate temporary, compilation and repl buffers are routinely used for executing processes.)&lt;/p&gt; &#xA;&lt;p&gt;This approach also has some trade-offs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Buffers like &lt;code&gt;*Help*&lt;/code&gt; will have &lt;code&gt;envrc-mode&lt;/code&gt; enabled based on the directory of the buffer which caused them to be created initially, and then those buffers often live for a long time. If you launch programs from such buffers while working on a different project, the results might not be what you expect. I might exclude certain modes to minimise confusion, but users will always have to be aware of the fact that environments are buffer-specific.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There&#39;s a (very small) overhead every time a buffer is created, and that happens quite a lot.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;direnv&lt;/code&gt; updates are not automatic. &lt;code&gt;direnv.el&lt;/code&gt; re-executes &lt;code&gt;direnv&lt;/code&gt; when switching between buffers that visit files in different directories, whereas &lt;code&gt;envrc-mode&lt;/code&gt; caches the environment until the user refreshes it explicitly with &lt;code&gt;envrc-reload&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Overall this approach works well in practice, and feels cleaner than trying to strategically modify the global environment.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also possible that there&#39;s a way to call &lt;code&gt;direnv&lt;/code&gt; more aggressively by allowing it to see values of &lt;code&gt;DIRENV_*&lt;/code&gt; obtained previously such that it becomes a no-op.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;💝 Support this project and my other Open Source work via Patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;💼 LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;✍ sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;🐦 @sanityinc&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JasonFruit/diatheke.el</title>
    <updated>2022-12-15T01:31:55Z</updated>
    <id>tag:github.com,2022-12-15:/JasonFruit/diatheke.el</id>
    <link href="https://github.com/JasonFruit/diatheke.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs interface to the diatheke command-line Bible tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;diatheke.el Emacs interface to the diatheke command-line Bible tool&lt;/h1&gt; &#xA;&lt;h3&gt;Copyright: (C) 2011 Jason R. Fruit&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;This program is free software; you can redistribute it and/or&#xA;modify it under the terms of the GNU General Public License as&#xA;published by the Free Software Foundation; either version 2 of the&#xA;License, or (at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU&#xA;General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with GNU Emacs; if not, write to the Free Software&#xA;Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA&#xA;02110-1301 USA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commentary&lt;/h2&gt; &#xA;&lt;p&gt;To use this minor mode, you must have &lt;a href=&#34;http://www.crosswire.org/wiki/Frontends:Diatheke&#34;&gt;diatheke&lt;/a&gt; properly installed and on your &lt;code&gt;PATH&lt;/code&gt;; you must also have installed at least one bible translation.&lt;/p&gt; &#xA;&lt;p&gt;To install &lt;code&gt;diatheke.el&lt;/code&gt;, save this file somewhere in your Emacs load path and put the following in your .emacs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;diatheke)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To toggle diatheke-mode, which is initially off, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x diatheke-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;Once &lt;code&gt;diatheke-mode&lt;/code&gt; is active, the following default keybindings will be created:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;C-c C-b&lt;/strong&gt;: select a bible translation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C-c C-i&lt;/strong&gt;: insert a passage&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C-c C-p&lt;/strong&gt;: search for a phrase&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C-c C-m&lt;/strong&gt;: search for multiple words&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C-c C-r&lt;/strong&gt;: search by regex&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>