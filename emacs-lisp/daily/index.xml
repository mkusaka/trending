<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-03T01:29:02Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TaylanUB/json-sexp-mode</title>
    <updated>2023-11-03T01:29:02Z</updated>
    <id>tag:github.com,2023-11-03:/TaylanUB/json-sexp-mode</id>
    <link href="https://github.com/TaylanUB/json-sexp-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JSON-sexp mode for Emacs: Edit JSON in s-expression form.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Edit JSON as s-expressions transparently&lt;/h1&gt; &#xA;&lt;p&gt;We use quasi-alists to represent objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{ &#34;k1&#34;: v1, &#34;k2&#34;: v2, ... } -&amp;gt; ((k1 v1) (k2 v2) ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We use Elisp vectors for JSON arrays, Elisp strings and numbers for JSON strings and numbers, and the symbols &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt; to represent the corresponding JSON values.&lt;/p&gt;</summary>
  </entry>
</feed>