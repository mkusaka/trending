<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-24T01:34:09Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ginqi7/websocket-bridge</title>
    <updated>2022-11-24T01:34:09Z</updated>
    <id>tag:github.com,2022-11-24:/ginqi7/websocket-bridge</id>
    <link href="https://github.com/ginqi7/websocket-bridge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;websocket-bridge&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: websocket-bridge&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Background&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project is inspired by [[https://github.com/manateelazycat/deno-bridge][deno-bridge]]. Deno-bridge provides a great idea to create a WebSocket connection between emacs and deno, making emacs communicate with deno.&lt;/p&gt; &#xA;&lt;p&gt;But when I write emacs plugins, I need a python package to provide some ability. So I try to transplant deno-bridge to python.&lt;/p&gt; &#xA;&lt;p&gt;When I try to implement /python-bridge/, I think I could make it more general as /websocket-bridge/.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Theory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Emacs uses emacs-websocket to create a WebSocket server; other language extensions make WebSocket clients connect to the emacs server. So emacs can communicate with other languages&#39; programs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Download websocket-bridge #+begin_src shell git clone --depth=1 -b main &lt;a href=&#34;https://github.com/ginqi7/websocket-bridge&#34;&gt;https://github.com/ginqi7/websocket-bridge&lt;/a&gt; ~/.emacs.d/site-lisp/websocket-bridge/ #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Install Dependences [[https://github.com/ahyatt/emacs-websocket][emacs-websocket]]&lt;/p&gt; &#xA;&lt;p&gt;** Add to &lt;del&gt;/.emacs From here on, you can add the full path to the websocket-bridge installation directory to your Emacs load-path, then add the following to init.el: #+begin_src emacs-lisp (add-to-list &#39;load-path &#34;&lt;/del&gt;/.emacs.d/site-lisp/websocket-bridge/&#34;) (require &#39;websocket-bridge) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I write a demo to show you how simple write app base on websocket-brige:&lt;/p&gt; &#xA;&lt;p&gt;** Elisp (websocket-bridge-demo.el) #+begin_src emacs-lisp (require &#39;websocket-bridge) (setq websocket-bridge-demo-py-path (concat (file-name-directory load-file-name) &#34;websocket-bridge-demo.py&#34;)) (websocket-bridge-start &#34;demo&#34; websocket-bridge-demo-py-path) (websocket-bridge-call &#34;demo&#34; &#34;ping&#34; &#34;Hello from Emacs.&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Start client process: &lt;del&gt;(websocket-bridge-app-start &#34;demo&#34; &#34;python&#34; deno-bridge-demo-py-path)&lt;/del&gt; Call TypeScript function from Emacs: &lt;del&gt;(websocket-bridge-call &#34;demo&#34; &#34;ping&#34; &#34;Hello from Emacs.&#34;)&lt;/del&gt; Clean Deno process: execute command &lt;del&gt;websocket-bridge-app-exit&lt;/del&gt; and select application name&lt;/p&gt; &#xA;&lt;p&gt;** Python (websocket-bridge-demo.py) #+begin_src python import websocket_bridge_python&lt;/p&gt; &#xA;&lt;p&gt;async def on_message(message): info = json.loads(message) [func_name, func_args] = info[1] if (func_name == &#34;ping&#34;): print(&#34;Emacs message: &#34;, func_args) emacsVar = await bridge.get_emacs_var(&#34;websocket-bridge-app-list&#34;) print(&#34;Emacs var &#39;websocket-bridge-app-list&#39;: &#34;, emacs_var) bridge.message_to_emacs(&#34;Hi from Python&#34;) bridge.eval_in_emacs(&#39;(message &#34;Eval from Python&#34;)&#39;)&lt;/p&gt; &#xA;&lt;p&gt;bridge = websocket_bridge_python.bridge_app_regist(on_message) # regist message handle function asyncio.run(bridge.start())) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Other&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dsevilla/xmi-to-json</title>
    <updated>2022-11-24T01:34:09Z</updated>
    <id>tag:github.com,2022-11-24:/dsevilla/xmi-to-json</id>
    <link href="https://github.com/dsevilla/xmi-to-json" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convert EMF XMI models and metamodels to JSON. Also, offer them through a REST interface (read-only for now)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xmi-to-json&lt;/h1&gt; &#xA;&lt;p&gt;Convert EMF XMI models and metamodels to JSON. Also, offer them through a REST interface (read-only for now)&lt;/p&gt;</summary>
  </entry>
</feed>