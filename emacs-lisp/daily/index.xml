<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-17T01:33:30Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tonyaldon/jack</title>
    <updated>2022-11-17T01:33:30Z</updated>
    <id>tag:github.com,2022-11-17:/tonyaldon/jack</id>
    <link href="https://github.com/tonyaldon/jack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;jack is a HTML generator library for Emacs Lisp.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;del&gt;jack&lt;/del&gt; is a HTML generator library for Emacs Lisp.&lt;/p&gt; &#xA;&lt;p&gt;To install it put &lt;del&gt;jack.el&lt;/del&gt; file in your load path and require &lt;del&gt;jack&lt;/del&gt; like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (require &#39;jack) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;jack&lt;/del&gt; provides the function &lt;del&gt;jack-html&lt;/del&gt; that takes a data structure as input representing the HTML tree you want to generate and generates it as a string.&lt;/p&gt; &#xA;&lt;p&gt;For instance:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (jack-html &#39;(:section (:div (:p &#34;foo&#34;)))) ;; &#34;&lt;/p&gt;&#xA;&lt;section&gt;&#xA; &lt;div&gt;&#xA;  &lt;p&gt;foo&lt;/p&gt;&#xA; &lt;/div&gt;&#xA;&lt;/section&gt;&#34; #+END_SRC&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;HTML attributes are specified in a list starting by the &lt;del&gt;@&lt;/del&gt; sign&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (jack-html &#39;(:div (@ :id &#34;id&#34; :class &#34;class&#34; :style &#34;color:red;&#34;) &#34;foo&#34;)) ;; &#34;&amp;lt;div id=&#34;id&#34; class=&#34;class&#34; style=&#34;color:red;&#34;&amp;gt;foo&#34; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;In the keyword defining the HTML tag you can use &lt;del&gt;/&lt;/del&gt; to declare its &lt;del&gt;id&lt;/del&gt; and &lt;del&gt;.&lt;/del&gt; to declare its classes like this:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (jack-html &#39;(:div/id.class-1.class-2 (@ :class &#34;class-3&#34; :style &#34;color:red;&#34;) &#34;foo&#34;)) ;; &#34;&amp;lt;div id=&#34;id&#34; class=&#34;class-1 class-2 class-3&#34; style=&#34;color:red;&#34;&amp;gt;foo&#34; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Note that I would have prefered to use &lt;del&gt;#&lt;/del&gt; for declaring the &lt;del&gt;id&lt;/del&gt; but it has to be escaped in keywords which is ugly.&lt;/p&gt; &#xA;&lt;p&gt;Tag content can be lists of components:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (jack-html &#39;(:ul ((:li &#34;1&#34;) (:li &#34;2&#34;)))) ;; &#34;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;1&lt;/li&gt;&#xA; &lt;li&gt;2&lt;/li&gt;&#xA;&lt;/ul&gt;&#34;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;(jack-html &#39;(:ul (@ :id &#34;id&#34;) ((:li &#34;1&#34;) (:li &#34;2&#34;)))) ;; &#34;&amp;lt;ul id=&#34;id&#34;&amp;gt;&lt;/p&gt;&#xA;&lt;li&gt;1&lt;/li&gt;&#xA;&lt;li&gt;2&lt;/li&gt;&#34; #+END_SRC&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Components can be generated by a forms:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (jack-html `(:p ,(concat &#34;foo-&#34; &#34;bar&#34;))) ;; &#34;&lt;/p&gt;&#xA;&lt;p&gt;foo-bar&lt;/p&gt;&#34;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;(jack-html (mapcar (lambda (n) `(:p ,n)) &#39;(1 2 3))) ;; &#34;&lt;/p&gt;&#xA;&lt;p&gt;1&lt;/p&gt;&#xA;&lt;p&gt;2&lt;/p&gt;&#xA;&lt;p&gt;3&lt;/p&gt;&#34; #+END_SRC&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tag content can be forms:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (jack-html &lt;code&gt;(:ul ,(mapcar (lambda (n) &lt;/code&gt;(:li ,n)) &#39;(1 2)))) ;; &#34;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA; &lt;li&gt;1&lt;/li&gt;&#xA; &lt;li&gt;2&lt;/li&gt;&#xA;&lt;/ul&gt;&#34;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;(jack-html &lt;code&gt;(:ul (@ :id &#34;id&#34;) ,(mapcar (lambda (n) &lt;/code&gt;(:li ,n)) &#39;(1 2)))) ;; &#34;&amp;lt;ul id=&#34;id&#34;&amp;gt;&lt;/p&gt;&#xA;&lt;li&gt;1&lt;/li&gt;&#xA;&lt;li&gt;2&lt;/li&gt;&#34; #+END_SRC&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tag content and attributes can be variables:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (let ((x &#34;foo&#34;) (y &#34;bar&#34;)) (jack-html `(:p (@ :id ,x) ,y))) ;; &#34;&amp;lt;p id=&#34;foo&#34;&amp;gt;bar&lt;/p&gt;&#34;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;(jack-html (let ((x &#34;foo&#34;) (y &#34;bar&#34;)) `(:p (@ :id ,x) ,y))) ;; &#34;&amp;lt;p id=&#34;foo&#34;&amp;gt;bar&lt;/p&gt;&#34; #+END_SRC&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;If the variable &lt;del&gt;jack-html-raise-error-p&lt;/del&gt; is set to &lt;del&gt;nil&lt;/del&gt;, which is the default value, &lt;del&gt;jack-html&lt;/del&gt; processes non component object as the empty string.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s consider the case of the vector like &lt;del&gt;[a b c]&lt;/del&gt; that is not a component for &lt;del&gt;jack-html&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (let ((jack-html-raise-error-p nil)) (jack-html &#34;foo&#34; [a b c] &#34;bar&#34;)) ;; &#34;foobar&#34; #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;and,&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (let ((jack-html-raise-error-p t)) (jack-html &#34;foo&#34; [a b c] &#34;bar&#34;)) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;which raises the error:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC text Object &#39;[a b c]&#39; of type &#39;vector&#39; can&#39;t be a component in &#39;jack-html&#39; #+END_SRC&lt;/p&gt;</summary>
  </entry>
</feed>