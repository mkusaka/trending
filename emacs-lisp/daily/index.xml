<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T01:41:45Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SystemCrafters/crafted-emacs</title>
    <updated>2022-07-31T01:41:45Z</updated>
    <id>tag:github.com,2022-07-31:/SystemCrafters/crafted-emacs</id>
    <link href="https://github.com/SystemCrafters/crafted-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A sensible base Emacs configuration.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Crafted Emacs&lt;/p&gt; &#xA;&lt;p&gt;A sensible starting point for hacking your own Emacs configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note&lt;/em&gt;: =crafted-emacs= is under active development. While the intent of this project is to provide a stable Emacs configuration for use by anyone, it is not yet stable enough for everyday or production use. The rapid pace of changes could cause your configuration to break on your next pull of the repository. If you are not expecting or prepared to encounter such issues, we would recommend you wait for things to stabilize a bit before using.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Transtion from an existing Rational Emacs configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project was originally called &lt;em&gt;Rational Emacs&lt;/em&gt;. However, we chose to rename to &lt;em&gt;Crafted Emacs&lt;/em&gt; to better represent our ideas and fit better with the System Crafters goals and messaging.&lt;/p&gt; &#xA;&lt;p&gt;If you were previously using &lt;em&gt;rational-emacs&lt;/em&gt;, please follow the instructions [[#transitioning-from-rational-emacs-to-crafted-emacs][below]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick Start&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install emacs &amp;gt;= 27.2 from your distribution&#39;s repositories.&lt;/p&gt; &#xA;&lt;p&gt;Clone this repository to =&lt;del&gt;/.emacs.d= or =&lt;/del&gt;/.config/emacs=:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: Command to clone System Crafters Crafted Emacs =git= repository. #+name: li#git_clone #+begin_src sh&lt;/p&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://github.com/SystemCrafters/crafted-emacs&#34;&gt;https://github.com/SystemCrafters/crafted-emacs&lt;/a&gt; ~/.config/emacs&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;This will set up the minimal configuration. If you&#39;d like a more fully-configured experience, see [[#customization][Customization]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Principles&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This configuration and all associated modules intend to follow the below priniciples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Some of these may change over time as we learn from this process.&lt;/p&gt; &#xA;&lt;p&gt;** Minimal, modular configuration&lt;/p&gt; &#xA;&lt;p&gt;The core configuration only sets up Emacs to have a cleaner presentation with sensible defaults. It is up to the user to decide which of the various =crafted-*= modules to load and when to load them.&lt;/p&gt; &#xA;&lt;p&gt;Configuration modules should depend on other modules and the base configuration as little as possible. When a configuration module needs to integrate with other functionality in Emacs, the standard extensibility points of each package should be used (instead of expecting our own configuration module).&lt;/p&gt; &#xA;&lt;p&gt;The implication is that someone should be able to install or copy code from a =crafted-*= module into their own configuration /without/ using Crafted Emacs.&lt;/p&gt; &#xA;&lt;p&gt;** Prioritize built-in Emacs functionality&lt;/p&gt; &#xA;&lt;p&gt;Where possible, we will leverage built-in Emacs functionality instead of external packages, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=project.el= instead of =Projectile=&lt;/li&gt; &#xA; &lt;li&gt;=tab-bar-mode= instead of =Perspective.el=, =persp-mode=, =eyebrowse=, etc&lt;/li&gt; &#xA; &lt;li&gt;=eglot= instead of =lsp-mode= (because =eglot= prioritizes built-in functionality)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Possibly&lt;/em&gt; =vc-mode= by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Sensible folder layout&lt;/p&gt; &#xA;&lt;p&gt;While Emacs tends to keep everything (code, configuration, state files, ...) inside &lt;code&gt;user-emacs-directory&lt;/code&gt; modern computer systems tend to keep those separated.&lt;/p&gt; &#xA;&lt;p&gt;Crafted Emacs tries to maintain some balance between those two paradigms by bringing just the right amount of order to it.&lt;/p&gt; &#xA;&lt;p&gt;See [[file:docs/crafted-emacs.org#folder-structure][Folder structure]] in the documentation for more details.&lt;/p&gt; &#xA;&lt;p&gt;** Works well in the terminal&lt;/p&gt; &#xA;&lt;p&gt;Some people prefer to use Emacs in the terminal instead of as a graphical program. This configuration should work well in this case too! This also enables the use of Emacs in Termux on Android.&lt;/p&gt; &#xA;&lt;p&gt;** Can be integrated with a Guix configuration&lt;/p&gt; &#xA;&lt;p&gt;It should be possible to customize aspects of the Crafted Emacs configuration inside of a Guix Home configuration so that things like font sizes, themes, etc can be system-specific.&lt;/p&gt; &#xA;&lt;p&gt;It can also use packages installed via the Guix package manager instead of =package.el=.&lt;/p&gt; &#xA;&lt;p&gt;** Works well with =Chemacs2=&lt;/p&gt; &#xA;&lt;p&gt;=Chemacs2= is an excellent tool for enabling the use of multiple Emacs configurations simultaneously. This configuration will behave well when used with =Chemacs2= so that users can try and use different Emacs configurations as needed.&lt;/p&gt; &#xA;&lt;p&gt;** Helps you learn Emacs Lisp&lt;/p&gt; &#xA;&lt;p&gt;Instead of providing a higher-level configuration system out of the box like other Emacs configurations, we follow standard Emacs Lisp patterns so that you can learn by reading the configuration.&lt;/p&gt; &#xA;&lt;p&gt;** Reversible&lt;/p&gt; &#xA;&lt;p&gt;Not everyone will agree with our decisions, so each customization should be easily reversible in the users =config.el= file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why use it?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why choose this configuration over /Doom Emacs/, /Spacemacs/, /Prelude/, or others?&lt;/p&gt; &#xA;&lt;p&gt;The goal of this configuration is to make it easier to write your own Emacs configuration while using pre-made configuration parts maintained by the community. Instead of using a monolithic, all-encompassing approach, we strive to ensure that all parts of this configuration are optional or interchangeable.&lt;/p&gt; &#xA;&lt;p&gt;You should even be able to use the configuration modules we provide with your own =init.el= file without using this base configuration repo!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is a list of the built-in modules that you may load. They are located in directory =$CRAFTED_EMACS_HOME/modules=, which are in the directory your =git= clone from listing [[li#git_clone]]. Follow the links to each to get more information about how they can be configured!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[file:modules/crafted-defaults.el][crafted-defaults]] :: Sensible default settings for Emacs&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-use-package.el][crafted-use-package]] :: Configuration for =use-package=&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-updates.el][crafted-updates]] :: Tools to upgrade Crafted Emacs&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-completion.el][crafted-completion]] :: A better selection framework configuration based on =Vertico=&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-ui.el][crafted-ui]] :: Extra UI configuration for a better experience (mode line, etc)&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-windows.el][crafted-windows]] :: Window management configuration&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-editing.el][crafted-editing]] :: Settings for the editing component (whitespace trimming etc.)&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-evil.el][crafted-evil]] :: An =evil-mode= configuration&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-org.el][crafted-org]] :: A few tweaks to Org-mode (org-appear, clickable hyperlinks etc.)&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-project.el][crafted-project]] :: Built in project management alternative to =projectile=&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-speedbar.el][crafted-speedbar]] :: A file-tree&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-screencast.el][crafted-screencast]] :: Tools for doing screencasts&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-compile.el][crafted-compile]] :: Set up automatic compilation for some emacs-lisp files&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/crafted-osx.el][crafted-osx]] :: Set up some conviniences to work in a Mac OS/OSX enviroment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Modules that we will be adding in the future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;crafted-desktop :: A desktop environment centered around =EXWM=&lt;/li&gt; &#xA; &lt;li&gt;crafted-present :: Tools for giving presentations&lt;/li&gt; &#xA; &lt;li&gt;crafted-workspace :: An improved workspace experience based on =tab-bar-mode=&lt;/li&gt; &#xA; &lt;li&gt;crafted-shell :: A starter configuration for =eshell= and =vterm=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customization :PROPERTIES: :CUSTOM_ID: customization :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add your own customization to this configuration, create a configuraton file in one of the following directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=~/.crafted-emacs/=&lt;/li&gt; &#xA; &lt;li&gt;=~/.config/crafted-emacs/=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Crafted Emacs looks out for two configuration files in one of those places:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;=config.el= – General configuration. Here you can set any Emacs configuration variables, face attributes, themes, etc. In short: anything that would normally go into =init.el= goes here.&lt;/li&gt; &#xA; &lt;li&gt;=early-config.el= – Configuration that needs to happen early during Emacs startup (see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][&#34;The Early Init File&#34;]] in the Emacs Manual for details), like customizing the process of initializing the package system etc. In short: anything, that would normally go into =early-init.el= goes here.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you prefer to explicitly control where your =config.el= and =early-config.el= are found for Crafted Emacs, you may provide a value for the =CRAFTED_EMACS_HOME= environment variable, either on the command line or in your shell configuration. This variable should only contain the path to the =config.el= files, for example:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: Set environment variable =CRAFTED_EMACS_HOME= to the path of the configuration directory. #+begin_src shell CRAFTED_EMACS_HOME=~/my-crafted-emacs-config #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** How the crafted config file is found&lt;/p&gt; &#xA;&lt;p&gt;The crafted config files (=config.el= and =early-config.el=) are found in the =crafted-config-path=. That path will match exactly one of the following scenarios, in the order specified:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using =Chemacs2= (See below for more on this) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The environment variable =CRAFTED_EMACS_HOME= is used if provided in the profile definition.&lt;/li&gt; &#xA;   &lt;li&gt;The =crafted-emacs= subdirectory of the profile is used when no environment variable is provided in the profile definition.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use the value found in the =CRAFTED_EMACS_HOME= environment variable.&lt;/li&gt; &#xA; &lt;li&gt;The environment variable =XDG_CONFIG_HOME= is present or the path =$HOME/.config/crafted-emacs= exists. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;These normally resolve to the same file, so build the path from the =XDG_CONFIG_HOME= environment variable or the explicit path =~/.config/crafted-emacs=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use the =HOME= environment variable to make the path, which expands to =$HOME/.crafted-emacs=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the =crafted-config-path= is determined, if it does not exist in the filesystem, it is created. However, just the path is created, the files =config.el= and =early-config.el= must be created by you.&lt;/p&gt; &#xA;&lt;p&gt;** Example Configuration:&lt;/p&gt; &#xA;&lt;p&gt;To make use of the sensible defaults that Crafted Emacs aims to provide, the first thing in your user configuration is to choose, which of the modules you want to use.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say for example, you want to have a look at all the modules, but you don&#39;t want to use =evil-mode= and you have no use for the screencasting module. Also, you need the advanced project management features of projectile, so you don&#39;t want built-in project management either. In that case, your example config might begin like this:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: Example of basic Crafted Emacs =config.el= file. #+begin_src emacs-lisp (require &#39;crafted-defaults) ; Sensible default settings for Emacs (require &#39;crafted-use-package) ; Configuration for &lt;code&gt;use-package&lt;/code&gt; (require &#39;crafted-updates) ; Tools to upgrade Crafted Emacs (require &#39;crafted-completion) ; selection framework based on &lt;code&gt;vertico&lt;/code&gt; (require &#39;crafted-ui) ; Better UI experience (modeline etc.) (require &#39;crafted-windows) ; Window management configuration (require &#39;crafted-editing) ; Whitspace trimming, auto parens etc. ;(require &#39;crafted-evil) ; An &lt;code&gt;evil-mode&lt;/code&gt; configuration (require &#39;crafted-org) ; org-appear, clickable hyperlinks etc. ;(require &#39;crafted-project) ; built-in alternative to projectile (require &#39;crafted-speedbar) ; built-in file-tree ;(require &#39;crafted-screencast) ; show current command and binding in modeline&lt;/p&gt; &#xA;&lt;p&gt;;; Further settings and customizations follow here... ;; ... #+end_src&lt;/p&gt; &#xA;&lt;p&gt;More detailed example config files can be found in the folder =examples=.&lt;/p&gt; &#xA;&lt;p&gt;** The =custom.el= file&lt;/p&gt; &#xA;&lt;p&gt;The =custom.el= file will hold the auto-generated code from the Emacs Customization UI, and other packages that similarly add code to the variables and faces form in the =init.el= file.&lt;/p&gt; &#xA;&lt;p&gt;*** Simplified overview of how Emacs Customization works&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Customizable values are defined with the =defcustom= form, and can be&#xA;customized using the Easy Customization UI. A complete discussion is out of&#xA;scope for this document, instead see the Emacs Manual for more information.&#xA;&#xA;There are several states a value can be in, for our purposes, we will only&#xA;consider two of them: the default state and the changed state. These are not&#xA;the &#34;official&#34; names but easily convey the concepts of the variable. If a&#xA;value is in the default state, looking in the Customization UI, the state&#xA;will be listed as =STANDARD=. Crafted Emacs takes the approach of using the&#xA;=customize-set-variable= to update the values defined with&#xA;=defcustom=. This will show the values as =SET for current session only= in&#xA;the Customization UI. This is normal since the values are set each time&#xA;emacs starts. They are technically &#34;SAVED&#34; since they exist as emacs-lisp&#xA;code, but since they are not in a =custom-set-variables= form the&#xA;Customization UI only sees them as &#34;SET for the current session only&#34;.&#xA;&#xA;A =SAVED and set= value means the Customization code has written the&#xA;configuration to disk to be loaded again the next time Emacs starts. When&#xA;Emacs saves the configuration from the Customization UI, it simply adds a&#xA;couple of forms to the end of your initialization file (typically&#xA;=init.el=), with comments warning about having more than one form with the&#xA;same name:&#xA;&#xA;#+name: custom.el&#xA;#+caption: Example =custom.el= file contents.&#xA;#+begin_src emacs-lisp&#xA;  (custom-set-variables&#xA;   ;; custom-set-variables was added by Custom.&#xA;   ;; If you edit it by hand, you could mess it up, so be careful.&#xA;   ;; Your init file should contain only one such instance.&#xA;   ;; If there is more than one, they won&#39;t work right.&#xA;   &#39;(crafted-ui-default-font &#39;(:font &#34;JetBrains Mono&#34; :weight light :height 185))&#xA;   &#39;(crafted-ui-display-line-numbers t))&#xA;  (custom-set-faces&#xA;   ;; custom-set-faces was added by Custom.&#xA;   ;; If you edit it by hand, you could mess it up, so be careful.&#xA;   ;; Your init file should contain only one such instance.&#xA;   ;; If there is more than one, they won&#39;t work right.&#xA;   )&#xA;#+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Loading the =custom.el= file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;When ~crafted-load-custom-file~ is non-nil (the default), the =custom.el=&#xA;file is loaded /after/ the initialization process, including after the user&#xA;=config.el= is loaded.&#xA;&#xA;The customization variable values (as set in =init.el= with&#xA;=customize-set-variables=) are in the =SET for current session only= state,&#xA;unless altered by a saved customization loaded from =custom.el=. Any values&#xA;set through the Customization UI or other work flows, for example by using&#xA;the =org-agenda-to-front= or =org-remove-file= functions, which write to the&#xA;=custom-set-variables= form, are preserved in the =custom.el= file if they are&#xA;saved for future sessions (as by the Customization UI widget, or by code).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Not loading the =custom.el= file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To not load the =custom file=, change the value for the&#xA;~crafted-load-custom-file~  to =nil= in your =config.el=.&#xA;&#xA;Using =customize-set-variable= in Emacs Lisp has the same effect as using&#xA;the Customization UI, except the customization is not saved to =custom.el=&#xA;as if you had used the Customization UI *and* used the widget to save the&#xA;customizations for future sessions.&#xA;&#xA;If you choose to follow this pattern, customizing variables in your&#xA;=config.el= only (not using the UI) then you may never need to load&#xA;=custom.el=. However, there are some caveats: using certain work flows with&#xA;Org Agenda files or risky variables in =.dir-locals.el= which write to the&#xA;=custom.el= file will never be applied, even though they are saved in the&#xA;custom file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using it with =Chemacs2=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have the =Chemacs2= configuration cloned to =&lt;del&gt;/.emacs.d= or =&lt;/del&gt;/.config/emacs=, you can clone =crafted-emacs= anywhere you like and add an entry to it in your =~/.emacs-profiles.el= file:&lt;/p&gt; &#xA;&lt;p&gt;You can then put your =early-config.el= and =config.el= files in the subfolder =&lt;del&gt;/path/to/crafted-emacs/crafted-emacs=. So, for example if you installed Crafted Emacs to =&lt;/del&gt;/.crafted-emacs=, then your =early-config.el= and =config.el= files would be in the path =~/.crafted-emacs/crafted-emacs=. This is the default path, but you can change the name to something else, see below for examples.&lt;/p&gt; &#xA;&lt;p&gt;#+caption: Example of a =Chemacs2= user profile file in =~/.emacs-profiles.el=. #+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;((&#34;crafted&#34; . ((user-emacs-directory . &#34;~/path/to/crafted-emacs&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to put your Crafted Emacs customizations elsewhere (for example in a folder called &lt;code&gt;config&lt;/code&gt; or maybe &lt;code&gt;personal&lt;/code&gt;), you can specify the =CRAFTED_EMACS_HOME= environment variable, for example like this:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: User =Chemacs2= profile file =~/.emacs-profiles.el= with environment variable. #+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;((&#34;crafted&#34; . ((user-emacs-directory . &#34;~/path/to/crafted-emacs&#34;)&#xA;                (env . ((&#34;CRAFTED_EMACS_HOME&#34; . &#34;~/path/to/crafted-emacs/personal&#34;))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or some place completely different:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: User =Chemacs2= profile file =~/.emacs-profiles.el= with Crafted Emacs config files set to another path. #+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;((&#34;crafted&#34; . ((user-emacs-directory . &#34;~/path/to/crafted-emacs&#34;)&#xA;                (env . ((&#34;CRAFTED_EMACS_HOME&#34; . &#34;~/crafted-config/personal&#34;))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then launch it with =emacs --with-profile crafted=!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Transitioning from Rational Emacs to Crafted Emacs If you previously were using &lt;em&gt;rational-emacs&lt;/em&gt;, these steps will help you transition your configuration for use with &lt;em&gt;crafted-emacs&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: When running the script, if there are any errors, the original code is still in the original location. The =crafted-emacs= folder is a copy of the =rational-emacs= folder, all updates occur on the copy.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Shutdown Emacs, including killing any running server instances.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull the recent changes from this repo: =git pull= (from where you cloned =rational-emacs= originally, most likely you&#39;re =.config/emacs= folder in your home filesystem). This will convert the &lt;em&gt;code&lt;/em&gt; from =rational-emacs= to be =crafted-emacs= instead.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can optionally move the rational code out of the way and clone this repo directly this way:&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;=cd ~/.config/=&lt;/li&gt; &#xA;     &lt;li&gt;=mv emacs emacs_rational=&lt;/li&gt; &#xA;     &lt;li&gt;=git clone &lt;a href=&#34;https://github.com/SystemCrafters/crafted-emacs&#34;&gt;https://github.com/SystemCrafters/crafted-emacs&lt;/a&gt; emacs=&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;N.B. on MS Windows, the path &#34;~/.config&#34; is likely =C:\Users%USERPROFILE%\AppData\Roaming.config=, you can also just clone to the =.emacs.d/= folder, thus from the =C:\Users%USERPROFILE%\AppData\Roaming= folder, your git command would be:&lt;/p&gt; &lt;p&gt;=git clone &lt;a href=&#34;https://github.com/SystemCrafters/crafted-emacs&#34;&gt;https://github.com/SystemCrafters/crafted-emacs&lt;/a&gt; .emacs.d=&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;From the location where you cloned this repo (=~/.config/emacs= for example), run this command to transition your existing =rational-emacs= configuration to =crafted-emacs=:&lt;/p&gt; &lt;p&gt;=emacs -Q --batch -l rational2crafted.el=&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start Emacs. There might still be some errors (hopefully not!) you&#39;ll have to work through (submit an issue if you get really stuck, or reach out on Discord in the SystemCrafters #rational-emacs channel).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Caveats&lt;/p&gt; &#xA;&lt;p&gt;The script provided does not work with /chemacs2/ configurations. There is no way to know the names of the profiles or how you might have configured Emacs when using Rational Emacs in the past. However, the script should be sufficiently useful enough you can either craft your own transition script with the methods provided therein, or read the code and follow the steps manually.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributing [[http://makeapullrequest.com][https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square]] [[https://github.com/bbatsov/emacs-lisp-style-guide][https://img.shields.io/badge/elisp-style%20guide-purple.svg?style=flat-square]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is a community-run modular Emacs configuration, for which we appreciate feedback in the form of issues and pull requests. Feel free to open an issue prior to opening a pull request if you&#39;re not certain your idea is in the spirit of the [[https://github.com/SystemCrafters/crafted-emacs/blob/master/README.org#Principles][Principles]].&lt;/p&gt; &#xA;&lt;p&gt;If you enjoy crafting your computing experience, join the [[https://systemcrafters.net/][SystemCrafters]] community!&lt;/p&gt; &#xA;&lt;p&gt;** Contributing Tips for Elisp&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prefer =customize-set-variable= instead of =setq= for =defcustom= values. This helps make sure constructors or setters attached to the variable are run when the value is set.&lt;/li&gt; &#xA; &lt;li&gt;Provide =defcustom= variables for things we expect the user to modify and make sure it is in the appropriate group.&lt;/li&gt; &#xA; &lt;li&gt;Provide verbose doc-strings for =defvar=, =defcustom=, =defun=, =defmacro=, etc to clearly document what is going on.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to follow doc-string guidelines (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Documentation-Tips.html][Documentation Tips]] or [[info:elisp#Documentation Tips][elisp#Documentation Tips]])&lt;/li&gt; &#xA; &lt;li&gt;Add comments for blocks of code, especially to describe /why/ the code is present, or the intention. These comments serve as documentation when reading the code where a doc-string is not an option.&lt;/li&gt; &#xA; &lt;li&gt;Add or update documentation in the /docs/ folder. Especially for new modules, please provide the info file with your PR. (see [[file:docs/CONTRIBUTING.org][Contributing Documentation]])&lt;/li&gt; &#xA; &lt;li&gt;If your PR addresses an issue, whether it closes or fixes the issue, or is just related to it, please add the issue number in your commit message or the description of your PR so they can be linked together.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributing Tips for Issues&lt;/p&gt; &#xA;&lt;p&gt;We welcome your questions and ideas, please open an issue if you have one!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you feel there is a defect with what we provide, please provide the steps necessary to reproduce the issue. A minimal configuration, a link to your configuration, or a gist/pastebin link or similar is appreciated to help us work toward a solution together.&lt;/li&gt; &#xA; &lt;li&gt;If you feel there is a missing feature, please describe your feature in as much detail as possible so we understand your request.&lt;/li&gt; &#xA; &lt;li&gt;If you have a question, be as specific as possible so we can understand how to help you as best we can.&lt;/li&gt; &#xA; &lt;li&gt;PRs to address any of the issues you might raise are appreciated and encouraged! If you don&#39;t provide one, please be patient with us, it may take longer to fix an issue or provide a missing feature. That being said, please feel free to check on the status of issues from time to time if it has been a while since the last activity.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Troubleshooting&lt;/p&gt; &lt;p&gt;Some tips when things don&#39;t seem to work right.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** A package (suddenly?) fails to work&lt;/p&gt; &#xA;&lt;p&gt;This scenario happened frequently when upgading to Emacs 28. It also may occur in other scenarios as well. Usually, you will see some message indicating some symbol is void or some function or command does not exist. More often than not, the package maintainer is using a feature from another package which has not yet been released. The new feature is available in the development version of the package however.&lt;/p&gt; &#xA;&lt;p&gt;Here are some example issues where things went wrong:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/SystemCrafters/crafted-emacs/issues/126][Wrong number of arguments error]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/SystemCrafters/crafted-emacs/issues/132][Example config doesn&#39;t start]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/SystemCrafters/crafted-emacs/issues/140][there are some bugs in package &#34;helpful&#34;]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some strategies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check the code on the package source control page (ie GitHub, GitLab or whatever), and make sure the missing code is present on the =master= branch.&lt;/li&gt; &#xA; &lt;li&gt;Look at the code associated with the released version (you need to look at the most recent tag for this). If the code is missing there, ask the maintainer for a new release. Often, there are years between releases of Emacs packages, but that depends completely on the package maintainer. Some of them release more frequently, others only on request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have done the steps above, you can choose to take one of these actions in your configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option 1 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use =M-x package-list-packages= to display the list of packages.&lt;/li&gt; &#xA;   &lt;li&gt;Find the package in the list which doesn&#39;t work for you, it will have either the /installed/ or /dependency/ status.&lt;/li&gt; &#xA;   &lt;li&gt;Press the =enter= key to get more details on the package an look near the bottom of the metadata, you should see a line with &#34;Other Versions&#34;. Choose the development version - it will have a version number that looks like a date and the text =(melpa)= next to it. Press =enter= on this version.&lt;/li&gt; &#xA;   &lt;li&gt;Following the step above will take you to the same package but from the MELPA repository, and you&#39;ll see a button at the top labeled =Install=. Click this button.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Optionally&lt;/em&gt; you can go back to the list of packages, find previous installed version, press the letter &#39;D&#39; and then the letter &#39;X&#39; to uninstall that version.&lt;/li&gt; &#xA;   &lt;li&gt;Restart Emacs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Option 2 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Edit your =early-config.el= file.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Near the bottom, add a line similar to this to pin the offending package to MELPA (make sure to replace /package-name/ with the name of the actual package):&lt;/p&gt; &lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;package-pinned-packages (cons &#39;package-name &#34;melpa&#34;)) #+end_src&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use =M-x package-list-packages= to display the list of packages.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Find the package in the list, press the letter &#39;D&#39; and the letter &#39;X&#39; to uninstall that package.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Restart Emacs, the package should be installed from MELPA thus using the development version of the package instead of the released version.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Regardless, always feel free to open an issue here and we can help you out. Please be as complete as possible in your description of the problem. Include any stack traces Emacs provides (ie start Emacs with: =emacs --debug-init=), mention the version number of the package you are installing, and anything you might have tried but which didn&#39;t work for you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This code is licensed under the MIT License. Why? So you can copy the code from this configuration!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;fill-column: 80&lt;/h1&gt; &#xA;&lt;h1&gt;eval: (auto-fill-mode 1)&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>zkry/yaml-pro</title>
    <updated>2022-07-31T01:41:45Z</updated>
    <id>tag:github.com,2022-07-31:/zkry/yaml-pro</id>
    <link href="https://github.com/zkry/yaml-pro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Edit YAML in Emacs like a pro&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;yaml-pro: tools for editing YAML leveraging a parser&lt;/h1&gt; &#xA;&lt;p&gt;yaml-pro is a package that provides conveniences for editing yaml. It utilizes the YAML parser at &lt;a href=&#34;https://github.com/zkry/yaml.el&#34;&gt;https://github.com/zkry/yaml.el&lt;/a&gt; to obtain a parse tree and is then able to do things like move between subtrees, delete entire sections of YAML (even if it&#39;s written in JSON style), and swap subtrees.&lt;/p&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;h3&gt;Editing text in detached buffer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zkry/yaml-pro/master/docs/screenshot1.gif&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Never have to consult &lt;a href=&#34;https://yaml-multiline.info/&#34;&gt;https://yaml-multiline.info/&lt;/a&gt; again! With &lt;code&gt;yaml-pro-edit-scalar&lt;/code&gt;, you can edit a scalar value in a detached buffer and convert between the various styles with ease.&lt;/p&gt; &#xA;&lt;h3&gt;Jump to heading (with consult support)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zkry/yaml-pro/master/docs/yaml-pro-jump.gif&#34; alt=&#34;jumping feature&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Moving subtrees up and down&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zkry/yaml-pro/master/docs/move-subtree.gif&#34; alt=&#34;jumping feature&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Folding subtrees&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zkry/yaml-pro/master/docs/folding.gif&#34; alt=&#34;jumping feature&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Killing subtrees&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zkry/yaml-pro/master/docs/killing-subtree.gif&#34; alt=&#34;jumping feature&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install this package with MELPA under the id &lt;code&gt;yaml-pro&lt;/code&gt;. &lt;strong&gt;IMPORTANT&lt;/strong&gt;: You have to have the latest version of yaml.el installed or else this package won&#39;t work properly. If your noticing any errors try making sure that you have the correct version of yaml.el installed (&lt;a href=&#34;https://melpa.org/#/yaml&#34;&gt;https://melpa.org/#/yaml&lt;/a&gt;). You can see the parser version with the variable &lt;code&gt;yaml-parser-version&lt;/code&gt; and the required version with the variable &lt;code&gt;yaml-pro-required-yaml-parser-version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can have yaml-pro-mode setup on yaml-mode loading with the configuration: &lt;code&gt;(add-hook &#39;yaml-mode-hook #&#39;yaml-pro-mode)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Run the command &lt;code&gt;yaml-pro-mode&lt;/code&gt; to initialize the mode. From there you have the following commands available (with default keybindings).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;yaml-pro-kill-subtree&lt;/strong&gt; (&lt;kbd&gt;C-c&lt;/kbd&gt; &lt;kbd&gt;C-x&lt;/kbd&gt; &lt;kbd&gt;C-w&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yaml-pro-up-level&lt;/strong&gt; (&lt;kbd&gt;C-c&lt;/kbd&gt; &lt;kbd&gt;C-u&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yaml-pro-next-subtree&lt;/strong&gt; (&lt;kbd&gt;C-c&lt;/kbd&gt; &lt;kbd&gt;C-n&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yaml-pro-prev-subtree&lt;/strong&gt; (&lt;kbd&gt;C-c&lt;/kbd&gt; &lt;kbd&gt;C-p&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yaml-pro-fold-at-point&lt;/strong&gt; (&lt;kbd&gt;C-c&lt;/kbd&gt; &lt;kbd&gt;C-c&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yaml-pro-unfold-at-point&lt;/strong&gt; (&lt;kbd&gt;C-c&lt;/kbd&gt; &lt;kbd&gt;C-o&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yaml-pro-move-subtree-up&lt;/strong&gt; (&lt;kbd&gt;s-up&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yaml-pro-move-subtree-down&lt;/strong&gt; (&lt;kbd&gt;s-down&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yaml-pro-edit-scalar&lt;/strong&gt; (&lt;kbd&gt;C-c &#39;&lt;/kbd&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(use prefix argument &lt;kbd&gt;C-u&lt;/kbd&gt; to supply an initialization command to set major mode)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;yaml-pro-jump&lt;/strong&gt; (or &lt;strong&gt;yaml-pro-consult-jump&lt;/strong&gt; if using consult) (&lt;kbd&gt;C-c C-j&lt;/kbd&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;The default bindings are subject to change as this package is in beta&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Yaml.el, being an Emacs lisp parser, struggles with very large files. You can configure the parser to parse a smaller section of the buffer via a heuristic (probably error prone). Set the custom variable &lt;code&gt;yaml-pro-max-parse-size&lt;/code&gt; to be the size of the buffer after which such a heuristic is used.&lt;/p&gt; &#xA;&lt;h1&gt;Recommendations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Yaml-pro&#39;s features compliments LSP and will enhance your YAML editing capabilities even further.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Edit yaml values in separate buffer (like org-edit-special) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; block options for how to store the string.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; save default init command on a path basis&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Easy navigation (yaml-pro-jump)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Partial tree-parsing for large files&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Async parsing: preemptively parse document for faster editing (perhaps via idle timer).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tools to work with various template modes. Go-templated YAML is very common but greatly hinders the effectiveness of tools like LSP. Is there something that could be done (even if it&#39;s kind of hacky) to alleviate this?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement internally path-at-point. (?)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Move functionality to tree-sitter (for better error handling), perhaps when tree-sitter in Emacs reaches some critical mass.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Common YAML mistakes linter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Difficult-to-handle syntax highlighting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Have a suggestion for this package? Feel free to create an issue. I&#39;d love to hear others pain-points when editing YAML.&lt;/p&gt;</summary>
  </entry>
</feed>