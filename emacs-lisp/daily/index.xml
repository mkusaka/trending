<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-09T01:35:51Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rougier/nano-theme</title>
    <updated>2022-09-09T01:35:51Z</updated>
    <id>tag:github.com,2022-09-09:/rougier/nano-theme</id>
    <link href="https://github.com/rougier/nano-theme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GNU Emacs / N Λ N O Theme&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;GNU Emacs / N Λ N O Theme&lt;/h2&gt; &#xA;&lt;p&gt;A consistent theme for GNU Emacs. The light theme is based on &lt;a href=&#34;https://material.io/&#34;&gt;Material colors&lt;/a&gt; and the dark theme is based on &lt;a href=&#34;https://www.nordtheme.com/&#34;&gt;Nord colors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The theme is based on a set of six faces (only):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Critical face&lt;/strong&gt; is for information that requires immediate action.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It should be of high constrast when compared to other faces. This can be realized (for example) by setting an intense background color, typically a shade of red. It must be used scarcely.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Popout face&lt;/strong&gt; is used for information that needs attention.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;To achieve such effect, the hue of the face has to be sufficiently different from other faces such that it attracts attention through the popout effect.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Strong face&lt;/strong&gt; is used for information of a structural nature.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It has to be the same color as the default color and only the weight differs by one level (e.g., light/regular or regular/bold). IT is generally used for titles, keywords, directory, etc.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Salient face&lt;/strong&gt; is used for information that are important.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;To suggest the information is of the same nature but important, the face uses a different hue with approximately the same intensity as the default face. This is typically used for links.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Faded face&lt;/strong&gt; is for information that are less important.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It is made by using the same hue as the default but with a lesser intensity than the default. It can be used for comments, secondary information and also replace italic (which is generally abused anyway&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Subtle face&lt;/strong&gt; is used to suggest a physical area on the screen.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It is important to not disturb too strongly the reading of information and this can be made by setting a very light background color that is barely perceptible.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/raxod502/straight.el&#34;&gt;straight.el&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(straight-use-package &#39;(nano-theme :type git :host github&#xA;                                   :repo &#34;rougier/nano-theme&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or install with &lt;a href=&#34;https://github.com/quelpa/quelpa&#34;&gt;&lt;code&gt;quelpa&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package nano-theme&#xA;  :ensure nil&#xA;  :defer t&#xA;  :quelpa (nano-theme&#xA;           :fetcher github&#xA;           :repo &#34;rougier/nano-theme&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Load theme directly: &lt;code&gt;M-x: (load-theme &#39;nano t)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can type:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x: (nano-light)&lt;/code&gt; for light theme&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-x: (nano-dark)&lt;/code&gt; for dark theme&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want the same aspect as in the screenshots, you can also use &lt;code&gt;M-x: (nano-setup)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Screenshots&lt;/h3&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-theme/master/images/nano-theme-light-1.png&#34; width=&#34;47.5%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-theme/master/images/nano-theme-dark-1.png&#34; width=&#34;47.5%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-theme/master/images/nano-theme-light-2.png&#34; width=&#34;47.5%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-theme/master/images/nano-theme-dark-2.png&#34; width=&#34;47.5%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-theme/master/images/nano-theme-light-3.png&#34; width=&#34;47.5%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rougier/nano-theme/master/images/nano-theme-dark-3.png&#34; width=&#34;47.5%&#34;&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>PythonNut/evil-easymotion</title>
    <updated>2022-09-09T01:35:51Z</updated>
    <id>tag:github.com,2022-09-09:/PythonNut/evil-easymotion</id>
    <link href="https://github.com/PythonNut/evil-easymotion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⏩ A port of vim easymotion to Emacs&#39; evil-mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;evil-easymotion&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/evil-easymotion&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/evil-easymotion-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In which we give &lt;a href=&#34;https://github.com/Lokaltog/vim-easymotion&#34;&gt;Lokaltog/&lt;strong&gt;vim-easymotion&lt;/strong&gt;&lt;/a&gt; a streak of malevolence.&lt;/p&gt; &#xA;&lt;p&gt;Suppose you&#39;re a proud user of &lt;code&gt;evil&lt;/code&gt;, but you have a nasty habit: when you want to move ten lines down, you hit &lt;kbd&gt;j&lt;/kbd&gt; ten times in a row instead of using the ergonomically superior &lt;kbd&gt;10&lt;/kbd&gt;&lt;kbd&gt;j&lt;/kbd&gt;. With &lt;code&gt;evil-easymotion&lt;/code&gt; you can invoke &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;j&lt;/kbd&gt;, and this plugin will put a target character on every possible position. Type the character on the target and &lt;strong&gt;&lt;em&gt;wham&lt;/em&gt;&lt;/strong&gt;! you have teleported there.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Obligatory screencast&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PythonNut/evil-easymotion/master/img/evil-easymotion-demo.gif&#34; alt=&#34;screencast&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently most motions are supported, and it&#39;s easy to define your own easymotions. Easymotions can also be composed with operators e.g. &lt;kbd&gt;d&lt;/kbd&gt;&lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;j&lt;/kbd&gt; to delete a bunch of lines.&lt;/p&gt; &#xA;&lt;h1&gt;Notice&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;evil-easymotion&lt;/code&gt; API has changed to use keyword arguments. The required changes (if any) to your config should be pretty self-explanatory. This should allow me to add more options in the future without breaking your config.&lt;/p&gt; &#xA;&lt;h1&gt;Basic Usage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;evil-easymotion&lt;/code&gt; comes with predefined easymotions for all basic motions that evil defines by default, and provides key bindings for these using the standard evil keys in the built-in keymap &lt;code&gt;evilem-map&lt;/code&gt;. To make these available for use, bind this keymap to a prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs&#34;&gt;(evilem-default-keybindings &#34;SPC&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This binds all motions under the prefix &lt;kbd&gt;SPC&lt;/kbd&gt; in &lt;code&gt;evil-motion-state-map&lt;/code&gt;. Type &lt;kbd&gt;SPC&lt;/kbd&gt;&lt;kbd&gt;j&lt;/kbd&gt; to give it a try.&lt;/p&gt; &#xA;&lt;p&gt;For motions defined manually, you need to bind the keys yourself, for instance using &lt;code&gt;evilem-define&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs&#34;&gt;(evilem-define (kbd &#34;SPC w&#34;) &#39;evil-forward-word-begin)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(This is just an example; this functionality is already available by default.)&lt;/p&gt; &#xA;&lt;p&gt;You can always drop by &lt;a href=&#34;https://github.com/PythonNut/evil-easymotion/wiki&#34;&gt;the wiki&lt;/a&gt; for more tips.&lt;/p&gt; &#xA;&lt;h1&gt;Building Your Own Motions&lt;/h1&gt; &#xA;&lt;h3&gt;Collectors&lt;/h3&gt; &#xA;&lt;p&gt;Where present, &lt;code&gt;collectors&lt;/code&gt; is used as the motion specification for generating jump points. It may be an (optionally sharp) quoted function name, a lambda, or a list of any of the above. If multiple functions are provided, the collected points are merged and presented at once.&lt;/p&gt; &#xA;&lt;h3&gt;Macros&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;evil-easymotion&lt;/code&gt; provides four user-facing macros:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(evilem-make-motion-plain name collectors &amp;amp;key ...)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Produce a function, named &lt;code&gt;name&lt;/code&gt;, from &lt;code&gt;collectors&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(evilem-make-motion name collectors &amp;amp;key ...)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Like &lt;code&gt;evilem-make-motion-plain&lt;/code&gt;, but produce an evil motion produced with &lt;code&gt;evil-define-motion&lt;/code&gt; instead of a plain &lt;code&gt;defun&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(evilem-create-plain collectors &amp;amp;key ...)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Like &lt;code&gt;evil-make-motion-plain&lt;/code&gt;, but with an automatically generated &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(evilem-create collectors &amp;amp;key ...)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;evilem-create&lt;/code&gt; : &lt;code&gt;evil-evilem-make-motion&lt;/code&gt; :: &lt;code&gt;evilem-create-plain&lt;/code&gt; : &lt;code&gt;evilem-make-motion-plain&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(evilem-define key collectors)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Like &lt;code&gt;evilem-create&lt;/code&gt;, but also bind the generated function to &lt;code&gt;key&lt;/code&gt; in the relevant maps (either &lt;code&gt;evil-normal-state&lt;/code&gt; or &lt;code&gt;evil-motion-state&lt;/code&gt;, depending on other flags).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keyword arguments&lt;/h3&gt; &#xA;&lt;p&gt;In addition, various keyword arguments may be used to modify the behavior of the easymotion.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:pre-hook expr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Code to run before the easymotion executes. &lt;code&gt;expr&lt;/code&gt; may either be an (optionally sharp) quoted function name, a lambda, or a bare sexp, which is implictly wrapped in a lambda.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:post-hook expr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Like &lt;code&gt;:pre-hook expr&lt;/code&gt;, but code is run after the motion finishes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:bind forms&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A list of forms to bind around the entire easymotion. &lt;code&gt;forms&lt;/code&gt; may be any bindings accepted by &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/cl/Modify-Macros.html&#34;&gt;&lt;code&gt;cl-letf*&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:scope object&lt;/code&gt;&lt;/p&gt; &lt;p&gt;An object to limit the scope of an easymotion. &lt;code&gt;object&lt;/code&gt; may be any &lt;em&gt;thing&lt;/em&gt; understood by &lt;code&gt;thing-at-point&lt;/code&gt;. In practice, &lt;code&gt;object&lt;/code&gt; will often be &lt;code&gt;&#39;line&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:all-windows expr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;If &lt;code&gt;expr&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the motion will be executed in all visible windows simultaneously. Because evil motions do not make sense across windows, &lt;code&gt;evil-define-command&lt;/code&gt; is used instead of &lt;code&gt;evil-define-motion&lt;/code&gt; and &lt;code&gt;evil-normal-state-map&lt;/code&gt; is used instead of &lt;code&gt;evil-motion-state-map&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:initial-position callable&lt;/code&gt;&lt;/p&gt; &lt;p&gt;When specified, &lt;code&gt;(goto-char (funcall callable))&lt;/code&gt; is run before the motion is executed. For example, use this to jump to the BOL of each line as in easymotion with &lt;code&gt;:initial-position #&#39;point-at-bol&lt;/code&gt;. Unlike in &lt;code&gt;:pre-hook&lt;/code&gt;, &lt;code&gt;callable&lt;/code&gt; is run once per window when &lt;code&gt;:all-windows&lt;/code&gt; is specified.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:push-jump expr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;When &lt;code&gt;expr&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the motion will push to the &lt;code&gt;evil&lt;/code&gt; jump list before jumping. This defaults to &lt;code&gt;t&lt;/code&gt; when the motion is un&lt;code&gt;:scope&lt;/code&gt;ed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:collect-postprocess callable&lt;/code&gt;&lt;/p&gt; &lt;p&gt;When specified, &lt;code&gt;callable&lt;/code&gt; is called on the collected list of points (which is of the form &lt;code&gt;((point window)...)&lt;/code&gt;). Otherwise, the default function, which sorts the points in order of increasing distance from &lt;code&gt;(point)&lt;/code&gt;, is used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:include-invisible expr&lt;/code&gt;&lt;/p&gt; &lt;p&gt;When &lt;code&gt;expr&lt;/code&gt; is non-&lt;code&gt;nil&lt;/code&gt;, the motion will not skip over invisible overlays. This may be required for motions that generate dramatically different sets of points if they are started at different locations. This defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;m deeply indebted to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abo-abo&#34;&gt;abo-abo&lt;/a&gt; for authoring &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;&lt;code&gt;avy&lt;/code&gt;&lt;/a&gt;, on which this package depends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lokaltog&#34;&gt;Lokaltog&lt;/a&gt; for authoring &lt;a href=&#34;https://github.com/Lokaltog/vim-easymotion&#34;&gt;&lt;code&gt;vim-easymotion&lt;/code&gt;&lt;/a&gt; and creating the paradigm which this package emulates.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Dewdrops/evil-exchange</title>
    <updated>2022-09-09T01:35:51Z</updated>
    <id>tag:github.com,2022-09-09:/Dewdrops/evil-exchange</id>
    <link href="https://github.com/Dewdrops/evil-exchange" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Port of vim-exchange&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://elpa.nongnu.org/nongnu/evil-exchange.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/evil-exchange.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/evil-exchange&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/evil-exchange-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/Dewdrops/evil-exchange&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Dewdrops/evil-exchange.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English is not my first language, so feel free to correct any of my mistake.&lt;/p&gt; &#xA;&lt;h1&gt;evil-exchange&lt;/h1&gt; &#xA;&lt;p&gt;Easy text exchange operator for Evil. This is the port of &lt;a href=&#34;https://github.com/tommcdo/vim-exchange&#34;&gt;vim-exchange&lt;/a&gt; by Tom McDonald.&lt;/p&gt; &#xA;&lt;h2&gt;Default bindings&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;gx&lt;/code&gt; (evil-exchange)&lt;/p&gt; &#xA;&lt;p&gt;On the first use, define (and highlight) the first {motion} to exchange. On the second use, define the second {motion} and perform the exchange.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gX&lt;/code&gt; (evil-exchange-cancel)&lt;/p&gt; &#xA;&lt;p&gt;Clear any {motion} pending for exchange.&lt;/p&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gx&lt;/code&gt; (and &lt;code&gt;gX&lt;/code&gt;) can also be used from visual mode, which is sometimes easier than coming up with the right {motion}&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using the same motion again (e.g. exchanging two words using &lt;code&gt;gxiw&lt;/code&gt;), you can use &lt;code&gt;.&lt;/code&gt; (evil-repeat) the second time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gxx&lt;/code&gt; works as you expect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unlike the original vim plugin&#39;s buffer local behaviour, this extension allows you to exchange texts across buffers.&lt;/li&gt; &#xA; &lt;li&gt;Works correctly even when text insertion/deletion occurs between two &lt;code&gt;evil-exchange&lt;/code&gt; invokes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;evil-exchange)&#xA;;; change default key bindings (if you want) HERE&#xA;;; (setq evil-exchange-key (kbd &#34;zx&#34;))&#xA;(evil-exchange-install)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;evil-exchange is also available in &lt;a href=&#34;https://melpa.org/&#34;&gt;melpa&lt;/a&gt; and is shipped with &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;spacemacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;You can change the default bindings by customizing &lt;code&gt;evil-exchange-key&lt;/code&gt; and/or &lt;code&gt;evil-exchange-cancel-key&lt;/code&gt; BEFORE &lt;code&gt;evil-exchange-install&lt;/code&gt; is called.&lt;/p&gt; &#xA;&lt;h2&gt;Vim-compatible key bindings&lt;/h2&gt; &#xA;&lt;p&gt;Due to the way how evil (and emacs) implements key bindings, &lt;code&gt;evil-exchange&lt;/code&gt; can&#39;t be bound to &lt;code&gt;cx&lt;/code&gt; (which is the default bindings of the original vim plugin) by customizing &lt;code&gt;evil-exchange-key&lt;/code&gt; option. If you prefer the key bindings suggested by vim-exchange, you can try the settings below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;evil-exchange)&#xA;(evil-exchange-cx-install)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;evil-exchange-cx-install&lt;/code&gt; function tries to mimic the original vim plugin&#39;s behaviour, i.e. &lt;code&gt;cx&lt;/code&gt; in normal state bound to &lt;code&gt;evil-exchange&lt;/code&gt;, &lt;code&gt;cxc&lt;/code&gt; in normal state bound to &lt;code&gt;evil-exchange-cancel&lt;/code&gt;, and &lt;code&gt;X&lt;/code&gt; in visual state bound to &lt;code&gt;evil-exchange&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some packages may redefine &lt;code&gt;c&lt;/code&gt; (&lt;code&gt;evil-change&lt;/code&gt;) in normal state or/and &lt;code&gt;x&lt;/code&gt; in operator state, which will conflict with the vim style bindings (&lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cxc&lt;/code&gt;). In this case, you may have to unbind them to make &lt;code&gt;evil-exchange-cx-install&lt;/code&gt; work. Any PRs are welcome for compatibility.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>