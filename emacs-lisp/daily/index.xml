<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-15T01:39:42Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>haskell/haskell-mode</title>
    <updated>2022-07-15T01:39:42Z</updated>
    <id>tag:github.com,2022-07-15:/haskell/haskell-mode</id>
    <link href="https://github.com/haskell/haskell-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs mode for Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://rawgithub.com/haskell/haskell-mode/master/images/haskell-mode.svg?sanitize=true&#34; width=&#34;35&#34; height=&#34;35&#34;&gt; Haskell Mode for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;This is an Emacs mode for editing, developing and debugging Haskell programs. &lt;a href=&#34;http://haskell.github.io/haskell-mode/&#34;&gt;Home page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/haskell/haskell-mode&#34;&gt;&lt;img src=&#34;https://travis-ci.org/haskell/haskell-mode.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-mode/actions&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/haskell-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/haskell-mode-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/haskell-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/haskell-mode-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-mode/raw/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL3-blue.svg?sanitize=true&#34; alt=&#34;License GPL3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/HaskellMode&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/HaskellMode.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I just want to thank everybody involved in one way or another with the Haskell Emacs tooling. It is one of the best language experiences I had in Emacs. -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/2xjum3/haskellmode_february_2015_developments/cp0qa9a&#34;&gt;cocreature, 2015-03-01&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I&#39;ve been using it for a long time and love it. Great work on haskell-mode! Keep up the good work! -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/316hcm/month_in_haskell_mode_march_2015/cpyutph&#34;&gt;LukeHoersten, 2015-04-02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This sounds wonderful. Does anything similar exist for Vim? -- &lt;a href=&#34;https://www.reddit.com/r/haskell/comments/3bsa0f/month_in_haskell_mode_june_2015/cspdbb6&#34;&gt;earldouglas, 2015-07-02&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Users manual: &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/latest/&#34;&gt;latest version&lt;/a&gt;, older versions: &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.12/&#34;&gt;13.12&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.14/&#34;&gt;13.14&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.16/&#34;&gt;13.16&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.18/&#34;&gt;13.18&lt;/a&gt;, &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/13.20/&#34;&gt;13.20&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have this in your &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;init file&lt;/a&gt; (usually &lt;code&gt;~/.emacs&lt;/code&gt;). If you already have &lt;code&gt;custom-set-variables&lt;/code&gt;, merge its contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;package)&#xA;(custom-set-variables&#xA; ;; custom-set-variables was added by Custom.&#xA; ;; If you edit it by hand, you could mess it up, so be careful.&#xA; ;; Your init file should contain only one such instance.&#xA; ;; If there is more than one, they won&#39;t work right.&#xA; &#39;(package-archives&#xA;   (quote&#xA;    ((&#34;gnu&#34; . &#34;https://elpa.gnu.org/packages/&#34;)&#xA;     (&#34;melpa&#34; . &#34;https://melpa.org/packages/&#34;)))))&#xA;(package-initialize)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run emacs, and evaluate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-refresh-contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then follow by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET haskell-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Voil√†! &lt;code&gt;haskell-mode&lt;/code&gt; is installed! You should be able to edit Haskell source code in color now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Haskell-mode&lt;/code&gt; has much much more to offer but the above should get you going!&lt;/p&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;p&gt;For setup instructions, please consult the integrated &lt;code&gt;haskell-mode&lt;/code&gt; Info manual which can be accessed after installation via &lt;code&gt;M-x info-display-manual [RET] haskell-mode&lt;/code&gt;. Alternatively, you can also direct your browser to the &lt;a href=&#34;http://haskell.github.io/haskell-mode/manual/latest/&#34;&gt;the online haskell-mode manual&lt;/a&gt; for setup and user guide.&lt;/p&gt; &#xA;&lt;h2&gt;Installation - more information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; supports GNU Emacs version 25.1 or later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; is available from &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; (releases) and &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; (git snapshots). The latter will generally be considerably more up-to-date, and is recommended for most users.&lt;/p&gt; &#xA;&lt;p&gt;Other means of obtaining &lt;code&gt;haskell-mode&lt;/code&gt; include &lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt;, &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Emacs Prelude&lt;/a&gt; and &lt;a href=&#34;https://packages.debian.org/search?keywords=haskell-mode&#34;&gt;Debian package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation from git repository&lt;/h2&gt; &#xA;&lt;p&gt;Running &lt;code&gt;haskell-mode&lt;/code&gt; directly from sources is easy but requires a little preparation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/haskell/haskell-mode.git&lt;/code&gt; into a suitable directory, e.g. &lt;code&gt;~/lib/emacs/haskell-mode/&lt;/code&gt; where &lt;code&gt;~&lt;/code&gt; stands for your home directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Assuming you have unpacked the various haskell-mode modules (&lt;code&gt;haskell-mode.el&lt;/code&gt; and the rest) in the directory &lt;code&gt;~/lib/emacs/haskell-mode/&lt;/code&gt;, you need to generate various files, the autoloads file (&lt;code&gt;haskell-mode-autoloads.el&lt;/code&gt;) is one among them. Invoke:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make EMACS=/path/to/your/emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then adding the following command to your &lt;code&gt;.emacs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-to-list &#39;load-path &#34;~/lib/emacs/haskell-mode/&#34;)&#xA;(require &#39;haskell-mode-autoloads)&#xA;(add-to-list &#39;Info-default-directory-list &#34;~/lib/emacs/haskell-mode/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation from git repository on macOS&lt;/h3&gt; &#xA;&lt;p&gt;There are a couple of things to note if you want to install directly from git on macOS systems, as of version 10.13 High Sierra:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The version of makeinfo that is installed by default in /usr/bin is quite old and will cause the above make command to exit with an error. Installing the texinfo package using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; will fix this. Be sure to follow the post-install instructions to add its bin directory to your shell&#39;s PATH variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are running an Emacs distribution packaged as a macOS application. such as the one available at &lt;a href=&#34;https://emacsformacosx.com/&#34;&gt;https://emacsformacosx.com/&lt;/a&gt;, you&#39;ll need to add its executable to your PATH before the system&#39;s default Emacs version. That project&#39;s &lt;a href=&#34;https://emacsformacosx.com/tips&#34;&gt;Tips and Tricks&lt;/a&gt; page has detailed instructions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you followed the above you are just a couple of steps away from contributing to &lt;code&gt;haskell-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;haskell-mode&lt;/code&gt; is actively seeking contributions from users of &lt;code&gt;haskell-mode&lt;/code&gt;. For more information have a look at &lt;a href=&#34;https://github.com/haskell/haskell-mode/wiki/Contributing&#34;&gt;the wiki page on contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Fanael/rainbow-delimiters</title>
    <updated>2022-07-15T01:39:42Z</updated>
    <id>tag:github.com,2022-07-15:/Fanael/rainbow-delimiters</id>
    <link href="https://github.com/Fanael/rainbow-delimiters" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs rainbow delimiters mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/rainbow-delimiters&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/rainbow-delimiters-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/rainbow-delimiters&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/rainbow-delimiters-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Fanael/rainbow-delimiters/actions&#34;&gt;&lt;img src=&#34;https://github.com/Fanael/rainbow-delimiters/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;rainbow-delimiters&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;rainbow-delimiters&lt;/code&gt; is a &#34;rainbow parentheses&#34;-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth. Each successive level is highlighted in a different color. This makes it easy to spot matching delimiters, orient yourself in the code, and tell which statements are at a given depth.&lt;/p&gt; &#xA;&lt;p&gt;Great care has been taken to make this mode fast. You shouldn&#39;t see any change in scrolling or editing speed when it&#39;s on even when working in delimiter-rich languages like Clojure or Emacs Lisp. It can be used with any language.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the colors &lt;code&gt;rainbow-delimiters&lt;/code&gt; uses. The default colors are intentionally subtle; they are unobtrusive enough to make the mode worth looking at even if you usually don&#39;t like rainbow parentheses modes. A number of major color themes such as Zenburn and Solarized have added their own faces for the mode.&lt;/p&gt; &#xA;&lt;p&gt;This is the official github repository for &lt;code&gt;rainbow-delimiters&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The latest &lt;strong&gt;release&lt;/strong&gt; of &lt;code&gt;rainbow-delimiters&lt;/code&gt; is always found at &lt;a href=&#34;https://github.com/Fanael/rainbow-delimiters/tree/master&#34;&gt;https://github.com/Fanael/rainbow-delimiters/tree/master&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way is to use &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;http://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt;. If either is in your &lt;code&gt;package-archives&lt;/code&gt;, do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install RET rainbow-delimiters RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, open &lt;code&gt;rainbow-delimiters.el&lt;/code&gt; in Emacs and use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install-from-buffer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any other methods of installation are unsupported.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To toggle the mode in the current buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x rainbow-delimiters-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start the mode automatically in &lt;code&gt;foo-mode&lt;/code&gt;, add the following to your init file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;foo-mode-hook #&#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start the mode automatically in most programming modes (Emacs 24 and above):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-hook &#39;prog-mode-hook #&#39;rainbow-delimiters-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Global mode&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s no &lt;code&gt;global-rainbow-delimiters-mode&lt;/code&gt; anymore. It used to exist, but it was impossible to keep it from breaking some major modes. It&#39;s &lt;em&gt;strongly recommended&lt;/em&gt; to use major mode hooks instead, as shown above. There&#39;s nothing stopping you from defining &lt;code&gt;global-rainbow-delimiters-mode&lt;/code&gt; yourself, but if it breaks something, you&#39;re on your own.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;To customize various options, including the color theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x customize-group rainbow-delimiters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify custom colors by customizing following faces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Faces take the form &lt;code&gt;rainbow-delimiters-depth-N-face&lt;/code&gt;, with N being the depth. Depth begins at 1, the outermost color. Faces exist for depths 1-9.&lt;/li&gt; &#xA; &lt;li&gt;The unmatched delimiter face: &lt;code&gt;rainbow-delimiters-unmatched-face&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The mismatched delimiter face: &lt;code&gt;rainbow-delimiters-mismatched-face&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>zevlg/telega.el</title>
    <updated>2022-07-15T01:39:42Z</updated>
    <id>tag:github.com,2022-07-15:/zevlg/telega.el</id>
    <link href="https://github.com/zevlg/telega.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GNU Emacs telegram client (unofficial)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/zevlg/telega.el/actions&#34;&gt;&lt;img src=&#34;https://github.com/zevlg/telega.el/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zevlg/telega.el/actions&#34;&gt;&lt;img src=&#34;https://github.com/zevlg/telega.el/workflows/DOCKER/badge.svg?sanitize=true&#34; alt=&#34;DOCKER image build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/emacs_telega&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%40emacs__telega-%2335ADE1?logo=telegram&#34; alt=&#34;Telegram chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tdlib/td&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TDLib-v1.8.0-%2335ADE1&#34; alt=&#34;TDLib&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/telega&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/telega-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/telega&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/telega-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://guix.gnu.org/packages/emacs-telega-0.7.1-1.1d28dc2/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GNU%20Guix-0.7.1-blue&#34; alt=&#34;GNU Guix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/telega&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/backers/telega?logo=opencollective&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/telega&#34;&gt;&lt;img src=&#34;https://opencollective.com/telega/backers.svg?avatarHeight=32&amp;amp;width=600&#34; alt=&#34;Backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zevlg/telega.el/master/etc/telega-logo.svg?sanitize=true&#34; alt=&#34;logo&#34;&gt; telega.el&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://zevlg.github.io/telega.el/&#34;&gt;Telega Manual&lt;/a&gt; for comprehensive documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Latest telega.el release can be found in the &lt;a href=&#34;https://github.com/zevlg/telega.el/tree/release-0.8.0&#34;&gt;https://github.com/zevlg/telega.el/tree/release-0.8.0&lt;/a&gt; branch, it is compatible with the latest TDLib major release 1.8.0&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;telega.el&lt;/code&gt; is full featured unofficial client for &lt;a href=&#34;https://telegram.org&#34; title=&#34;Telegram&#34;&gt;Telegram&lt;/a&gt; platform for &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34; title=&#34;GNU Emacs&#34;&gt;GNU Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;telega.el&lt;/code&gt; is actively developed, for this reason, some features are not implemented, or they are present just as skeleton for future implementation. However, the core parts are mature enough so that it is possible to use &lt;code&gt;telega.el&lt;/code&gt; for basic chat.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Use on your own risk, see &lt;a href=&#34;https://github.com/zevlg/telega.el/issues/353&#34;&gt;#353&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;In some random order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Listing chats, reordering chats according to internal Telegram order&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Getting info about users, groups and supergroups&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Joining chats by invitation link &lt;code&gt;M-x telega-chat-join-by-link RET&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fetching chat history, sending messages, replies, edits, deleting&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Resend failed messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Creating new groups, upgrading basicgroup to supergroup&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Forwarding messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; D-Bus notifications on incoming messages in chats with enabled notifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Voice/Video calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Downloading files from the cloud&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Uploading files/media (also pasting images from clipboard) to the cloud&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Display chat actions, such as &#34;@user is typing...&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Display/Update chat&#39;s draft message&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Company backends for emoji (&lt;code&gt;:&amp;lt;emoji&amp;gt;&lt;/code&gt; syntax), usernames, hashtags, bot commands completions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Secret chats&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Online global searching chats/contacts/messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Avatars, Photos, Stickers, Animated Stickers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Animated GIF, via ffplay&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Special messages such as location/live location, voice/video messages, contacts, self-destruct photo/video, etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Poll messages, Poll creation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Games, Game Scores&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Handling local links, such as &#34;tg:&#34; or &#34;&lt;a href=&#34;https://t.me/xxx&#34;&gt;https://t.me/xxx&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ReplyMarkup (inline keyboard buttons) in the messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; InstantView for web pages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Blocking/Unblocking users, listing blocked users&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inline bots requests, via &#34;@bot query&#xA;  &lt;tab&gt;&#xA;   &#34;&#xA;  &lt;/tab&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chat Lists, &#34;Archived Chats&#34;, see &lt;a href=&#34;https://github.com/zevlg/telega.el/issues/100&#34;&gt;telega#100&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Searching for messages in chat (PARTLY)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Shared media&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple accounts&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Traffic control, see &lt;a href=&#34;https://github.com/zevlg/telega.el/issues/62&#34;&gt;telega#62&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://translations.telegram.org&#34;&gt;TranslationsPlatform&lt;/a&gt; support (PARTLY)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Message scheduling, Reminders&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cloud themes, see &lt;a href=&#34;https://github.com/tdlib/td/issues/691&#34;&gt;TDLib#691&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Telegram Folders (since TDLib 1.6.6)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Disable/Enable message notification on receiver side&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sticker Outlines (since TDLib 1.7.X+), see Emacs Story - &lt;a href=&#34;https://t.me/emacs_stories/73&#34;&gt;https://t.me/emacs_stories/73&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Voice Chats (since TDLib 1.7.X+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Unique features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Expressive &lt;code&gt;ibuffer&lt;/code&gt;-like chats filtering&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Powerful &lt;a href=&#34;https://zevlg.github.io/telega.el/#sorting-chats&#34;&gt;chats sorting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom order for chats (some chats on top, some chats on bottom, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://zevlg.github.io/telega.el/index-master.html#client-side-messages-ignoring&#34;&gt;Client side messages filtering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get diff for the message edits, see &lt;a href=&#34;https://zevlg.github.io/telega/screen-13.png&#34;&gt;screenshot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://zevlg.github.io/telega.el/#telega-squash-message-mode&#34;&gt;Messages squashing&lt;/a&gt; minor mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://zevlg.github.io/telega.el/#telega-mnzel--display-emacs-content-inside-telega-messages&#34;&gt;Highlight code blocks&lt;/a&gt; minor mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://zevlg.github.io/telega.el/#telega-storiesel--display-emacs-stories-in-the-dashboard&#34;&gt;Emacs Stories&lt;/a&gt; - share your Emacs experience with other Emacs users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://zevlg.github.io/telega.el/index-master.html#telega-adblockel--block-advertisement-messages&#34;&gt;AdBlock&lt;/a&gt; - block advertisement messages in Telegram channels.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And much more.&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;Root buffer screen:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://zevlg.github.io/telega/telega-31.png&#34; alt=&#34;screen31&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chat in &lt;a href=&#34;https://t.me/emacs_en&#34; title=&#34;emacs_en&#34;&gt;@emacs_en&lt;/a&gt; group:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://zevlg.github.io/telega/screen-11.png&#34; alt=&#34;screen11&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dashboard with Emacs Stories and important chats:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://zevlg.github.io/telega/emacs-stories-dashboard.png&#34; alt=&#34;dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Starting with telega.el&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://zevlg.github.io/telega.el/&#34;&gt;Telega Manual&lt;/a&gt; for comprehensive documentation.&lt;/p&gt; &#xA;&lt;h1&gt;How to contribute&lt;/h1&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://t.me/emacs_telega&#34; title=&#34;Telegram group&#34;&gt;Telegram group&lt;/a&gt; to discuss the development of &lt;code&gt;telega.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Submitting &lt;a href=&#34;https://github.com/zevlg/telega.el/issues&#34;&gt;issues&lt;/a&gt; is exceptionally helpful.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;telega.el&lt;/code&gt; is licensed under GNU GPL version 3.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: &lt;strong&gt;I have this error while installing telega&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Cannot open load file: No such file or directory, visual-fill-column&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: &lt;code&gt;telega.el&lt;/code&gt; depends on the &lt;code&gt;visual-fill-column&lt;/code&gt; package, please install it first. This package is available from &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: &lt;strong&gt;I have this error while running telega&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(error &#34;Invalid image type ‚Äòsvg‚Äô&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and/or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(error &#34;Invalid image type ‚Äòimagemagick‚Äô&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: The appropriate behavior is adjusted based on what version of Emacs you use. If you are using 26.3 or older you need to ensure that your Emacs was configured with SVG and ImageMagick support. SVG support is provided using the &lt;code&gt;librsvg&lt;/code&gt; library, and ImageMagick is provided by &lt;code&gt;libmagickcore&lt;/code&gt; and &lt;code&gt;libmagickwand&lt;/code&gt; development libraries.&lt;/p&gt; &#xA;&lt;p&gt;If you are using Emacs 27.1+ the ImageMagick support was deprecated as it posed a significant security issue, but &lt;code&gt;telega&lt;/code&gt; now relies on the in-built (and faster) &lt;code&gt;image-transforms&lt;/code&gt; for those versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: &lt;strong&gt;Does telega have proxy support?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, use &lt;code&gt;telega-proxies&lt;/code&gt; custom variable, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq telega-proxies&#xA;      (list&#xA;       &#39;(:server &#34;1.2.3.4&#34; :port 8080 :enable :false&#xA;                 :type (:@type &#34;proxyTypeSocks5&#34;&#xA;                               :username &#34;rkn&#34; :password &#34;jopa&#34;))&#xA;       &#39;(:server &#34;2.3.4.5&#34; :port 8088 :enable t&#xA;                 :type (:@type &#34;proxyTypeSocks5&#34;&#xA;                               :username &#34;rkn&#34; :password &#34;jopa&#34;))&#xA;       ))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;C-h v telega-proxies RET&lt;/code&gt; for full range of proxy types.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: &lt;strong&gt;Stickers are not shown.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: If you are using Emacs 26.3 or older, ensure you it was configured with ImageMagick support. Next, install the &lt;code&gt;webp&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: &lt;strong&gt;There are no glyphs for some unicode characters.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Please either install &lt;code&gt;fonts-symbola&lt;/code&gt; package, or run &lt;code&gt;guix package -i font-gnu-{freefont,unifont}&lt;/code&gt; on GNU Guix&lt;/p&gt; &#xA;&lt;p&gt;If using &lt;code&gt;fonts-symbola&lt;/code&gt;, add this to your init.el:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(set-fontset-font t &#39;unicode &#34;Symbola&#34; nil &#39;append)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: &lt;strong&gt;There is some formatting issues when some unicode characters are used.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, partly. If character has full width of multiple ordinary chars you can tweak &lt;code&gt;char-width-table&lt;/code&gt;. Add code like this to your init.el:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq telega-symbol-unread &#34;üÑå&#34;)&#xA;&#xA;(defun my-telega-load ()&#xA;  ;; üÑå occupies two full chars, but (string-width &#34;üÑå&#34;) returns 1&#xA;  ;; so we install custom widths to `char-width-table&#39;&#xA;  (telega-symbol-set-width telega-symbol-unread 2)&#xA;&#xA;  ;; ... other code&#xA;  )&#xA;&#xA;(add-hook &#39;telega-load-hook &#39;my-telega-load)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also &lt;code&gt;telega-symbol-widths&lt;/code&gt; custom variable, you might want to modify it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: &lt;strong&gt;Is there erc-like chats tracking functionality?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, set &lt;code&gt;telega-use-tracking-for&lt;/code&gt; to non-nil&lt;/p&gt; &#xA;&lt;p&gt;Tracking is done only for opened chats, i.e. chats having corresponding chat buffer.&lt;/p&gt; &#xA;&lt;p&gt;Its value is a &lt;a href=&#34;https://zevlg.github.io/telega.el/#chat-filters&#34;&gt;Chat Filter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, to enable tracking for chats with enabled notifications or for chats where you have unread mention, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq telega-use-tracking-for &#39;(or unmuted mention))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: &lt;strong&gt;Is it possible to use telega in tty-only Emacs (aka emacs-nox)?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, set &lt;code&gt;telega-use-images&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; before starting &lt;code&gt;telega&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: &lt;strong&gt;Is it possible to add markup to messages?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, use &lt;code&gt;C-u RET&lt;/code&gt; to send a message with markup&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://zevlg.github.io/telega.el/#sending-ordinary-messages&#34;&gt;Sending ordinary messages&lt;/a&gt; for details&lt;/p&gt; &#xA;&lt;p&gt;You may also find &lt;code&gt;telega-mnz.el&lt;/code&gt; from the &lt;code&gt;contrib&lt;/code&gt; directory to be complimentary.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: &lt;strong&gt;I&#39;ve enabled &lt;code&gt;telega-notifications-mode&lt;/code&gt;, but notifications does not show&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Make sure your time is correct&lt;/p&gt; &#xA;&lt;p&gt;Eval &lt;code&gt;(telega-time-seconds)&lt;/code&gt; to get UTC time in your Emacs, it should be more or less the same as on &lt;a href=&#34;https://www.unixtimestamp.com/&#34;&gt;https://www.unixtimestamp.com/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>