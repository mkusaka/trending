<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-30T01:35:06Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>awth13/org-appear</title>
    <updated>2022-10-30T01:35:06Z</updated>
    <id>tag:github.com,2022-10-30:/awth13/org-appear</id>
    <link href="https://github.com/awth13/org-appear" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toggle visibility of hidden Org mode element parts upon entering and leaving an element&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://melpa.org/#/org-appear][file:https://melpa.org/packages/org-appear-badge.svg]] [[https://github.com/awth13/org-appear/actions/workflows/check.yml][file:https://github.com/awth13/org-appear/actions/workflows/check.yml/badge.svg?branch=master]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;org-appear&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make invisible parts of Org elements appear visible.&lt;/p&gt; &#xA;&lt;p&gt;** About&lt;/p&gt; &#xA;&lt;p&gt;[[https://orgmode.org/][Org mode]] provides a way to toggle visibility of hidden elements such as emphasis markers, links, etc. by customising specific variables, e.g., &lt;del&gt;org-hide-emphasis-markers&lt;/del&gt;. However, it is currently not possible to do this interactively and on an element-by-element basis. This package, inspired by [[https://github.com/io12/org-fragtog][org-fragtog]], enables automatic visibility toggling depending on cursor position. Hidden element parts appear when the cursor enters an element and disappear when it leaves.&lt;/p&gt; &#xA;&lt;p&gt;[[file:demo.gif]]&lt;/p&gt; &#xA;&lt;p&gt;** Installation&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to install &lt;del&gt;org-appear&lt;/del&gt; is from MELPA, using your favourite package manager or &lt;del&gt;package-install&lt;/del&gt;. For Guix users, &lt;del&gt;org-appear&lt;/del&gt; is also available in the official GNU Guix channel.&lt;/p&gt; &#xA;&lt;p&gt;** Manual installation&lt;/p&gt; &#xA;&lt;p&gt;With [[https://github.com/raxod502/straight.el][straight.el]], simply put the following line in &lt;del&gt;init.el&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(straight-use-package &#39;(org-appear :type git :host github :repo &#34;awth13/org-appear&#34;))&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, git clone this repository and point Emacs to it using the &lt;del&gt;:load-path&lt;/del&gt; keyword of &lt;del&gt;use-package&lt;/del&gt; or &lt;del&gt;require&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Usage&lt;/p&gt; &#xA;&lt;p&gt;The package can be enabled interactively or automatically on Org mode start-up:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;org-mode-hook &#39;org-appear-mode)&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;By default, toggling is instantaneous and only emphasis markers are toggled. The following custom variables can be changed to enable additional functionality.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;org-appear-autoemphasis :: if non-nil and &lt;del&gt;org-hide-emphasis-markers&lt;/del&gt; is on, toggle emphasis markers&lt;/li&gt; &#xA; &lt;li&gt;org-appear-autolinks :: if non-nil and &lt;del&gt;org-link-descriptive&lt;/del&gt; is on, toggle links&lt;/li&gt; &#xA; &lt;li&gt;org-appear-autosubmarkers :: if non-nil and &lt;del&gt;org-pretty-entities&lt;/del&gt; is on, toggle subscripts and superscripts&lt;/li&gt; &#xA; &lt;li&gt;org-appear-autoentities :: if non-nil and &lt;del&gt;org-pretty-entities&lt;/del&gt; is on, toggle Org entitites&lt;/li&gt; &#xA; &lt;li&gt;org-appear-autokeywords :: if non-nil and &lt;del&gt;org-hidden-keywords&lt;/del&gt; is on, toggle keywords in &lt;del&gt;org-hidden-keywords&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;org-appear-inside-latex :: if non-nil, toggle entities and sub/superscripts in LaTeX fragments&lt;/li&gt; &#xA; &lt;li&gt;org-appear-delay :: seconds of delay before toggling&lt;/li&gt; &#xA; &lt;li&gt;org-appear-trigger :: when to toggle elements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If Org mode custom variables that control visibility of elements are configured to show hidden parts, the respective &lt;del&gt;org-appear&lt;/del&gt; settings do not have an effect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-appear-trigger&lt;/del&gt; can be set to &lt;del&gt;always&lt;/del&gt;, &lt;del&gt;on-change&lt;/del&gt;, or &lt;del&gt;manual&lt;/del&gt;. With &lt;del&gt;on-change&lt;/del&gt;, elements will be toggled only when the buffer is modified or on mouse click. This option disables delayed toggling. With &lt;del&gt;manual&lt;/del&gt;, toggling must be enabled by calling &lt;del&gt;org-appear-manual-start&lt;/del&gt;. &lt;del&gt;org-appear-manual-stop&lt;/del&gt; is used to disable toggling with this option.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;manual&lt;/del&gt; option is useful for, e.g., integrating &lt;del&gt;org-appear&lt;/del&gt; with &lt;del&gt;evil-mode&lt;/del&gt;. Below is an example configuration for toggling elements in Insert mode only. Note that &lt;del&gt;org-appear&lt;/del&gt; expects to be enabled in Org mode buffers only, which is why the example attaches &lt;del&gt;evil-mode&lt;/del&gt; hooks to the Org mode startup hook.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;(setq org-appear-trigger &#39;manual) (add-hook &#39;org-mode-hook (lambda () (add-hook &#39;evil-insert-state-entry-hook #&#39;org-appear-manual-start nil t) (add-hook &#39;evil-insert-state-exit-hook #&#39;org-appear-manual-stop nil t)))&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Acknowledgements&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to [[https://github.com/SPFabGerman][SPFabGerman]], who came up with the idea and extended &lt;del&gt;org-appear&lt;/del&gt; beyond emphasis marker toggling, and [[https://github.com/daviwil][daviwil]], who proposed the &lt;del&gt;org-appear&lt;/del&gt; name.&lt;/p&gt; &#xA;&lt;p&gt;** Known Issues&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-appear&lt;/del&gt; does not handle overlapping emphasis elements correctly, e.g.,&lt;/p&gt; &#xA;&lt;p&gt;#+begin_example &lt;em&gt;Why would someone /nest emphasis&lt;/em&gt; like that?/ #+end_example&lt;/p&gt; &#xA;&lt;p&gt;In the above example, &lt;del&gt;org-appear&lt;/del&gt; can only detect and reveal the first (bold) element. This is due to the reliance on the &lt;del&gt;org-element&lt;/del&gt; API -- &lt;del&gt;org-element-context&lt;/del&gt; in particular -- which also fails to detect the second (italic) element.&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-appear&lt;/del&gt; will fail to detect elements nested inside certain other elements, such as comments or document titles.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vspinu/math-symbol-lists</title>
    <updated>2022-10-30T01:35:06Z</updated>
    <id>tag:github.com,2022-10-30:/vspinu/math-symbol-lists</id>
    <link href="https://github.com/vspinu/math-symbol-lists" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lists of Unicode mathematical symbols and latex commands&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a &#34;storage&#34; package used by completion engines such as &lt;code&gt;company-math.el&lt;/code&gt; and &lt;code&gt;ac-math.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Defined (a)lists are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;math-symbol-list-basic&lt;/code&gt; &lt;code&gt;math-symbol-list-extended&lt;/code&gt; &lt;code&gt;math-symbol-list-packages&lt;/code&gt; &lt;code&gt;math-symbol-list-latex-commands&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known packages that use these lists&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vspinu/company-math&#34;&gt;company-math&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vspinu/ac-math&#34;&gt;ac-math&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpapp/unicode-math-input&#34;&gt;unicode-math-input&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dajva/rg.el</title>
    <updated>2022-10-30T01:35:06Z</updated>
    <id>tag:github.com,2022-10-30:/dajva/rg.el</id>
    <link href="https://github.com/dajva/rg.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs search tool based on ripgrep&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rg.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dajva/rg.el/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?style=flat&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/rg&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/rg-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/rg&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/rg-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dajva/rg.el/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/dajva/rg.el/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/dajva/rg.el&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/dajva/rg.el/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Ripgrep is a replacement for both grep like (search one file) and ag like (search many files) tools. It&#39;s fast and versatile and written in Rust. For some introduction and benchmarks, see &lt;a href=&#34;http://blog.burntsushi.net/ripgrep/&#34;&gt;ripgrep is faster than {grep, ag, git grep, ucg, pt, sift}&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dajva/rg.el/master/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This package is available on &lt;a href=&#34;https://stable.melpa.org/#/rg&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;http://melpa.org/#/rg&#34;&gt;MELPA&lt;/a&gt;. Install with &lt;code&gt;M-x package-install&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt; &lt;code&gt;rg&lt;/code&gt; from within Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It is also available in GNU Guix as &lt;a href=&#34;https://guix.gnu.org/en/packages/emacs-rg-2.2.0/&#34;&gt;emacs-rg&lt;/a&gt;. Install with &lt;code&gt;guix package -i emacs-rg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to install manually just put &lt;code&gt;rg.el&lt;/code&gt; and the rest of the elisp files somewhere in your load path and add require the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(require &#39;rg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;rg&lt;/code&gt; and friends are autoloaded symbols which means it&#39;s also possible to defer loading if you have autoloading setup.&lt;/p&gt; &#xA;&lt;h3&gt;Setup key bindings&lt;/h3&gt; &#xA;&lt;p&gt;This will setup the default key bindings in a non lazy way. If you care about startup performance see the next example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(rg-enable-default-bindings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rgel.readthedocs.io&#34;&gt;documentation&lt;/a&gt; for how to handle lazy loading.&lt;/p&gt; &#xA;&lt;h3&gt;Use old defaults&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;rg.el&lt;/code&gt; 2.0.0 will use new default settings to improve look and feel, more consistent key bindings etc. If you want to use the old defaults add this to your &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(rg-use-old-defaults)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rg-menu&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to use a &lt;a href=&#34;https://github.com/magit/magit&#34;&gt;magit&lt;/a&gt; like interface as a complement to regular key maps, replace &lt;code&gt;(rg-enable-default-bindings)&lt;/code&gt; with &lt;code&gt;(rg-enable-menu)&lt;/code&gt;. The menus are built with &lt;a href=&#34;https://github.com/magit/transient&#34;&gt;transient&lt;/a&gt;, which means that the menus can be modified in the same way as in magit.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Info documentation is included in the package. Online documentation: &lt;a href=&#34;https://rgel.readthedocs.io&#34;&gt;https://rgel.readthedocs.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;http://cask.github.io/&#34;&gt;cask&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;make deps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run tests:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dajva/rg.el/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>