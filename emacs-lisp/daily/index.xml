<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-23T01:34:21Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emacs-citar/citar</title>
    <updated>2023-07-23T01:34:21Z</updated>
    <id>tag:github.com,2023-07-23:/emacs-citar/citar</id>
    <link href="https://github.com/emacs-citar/citar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package to quickly find and act on bibliographic references, and edit org, markdown, and latex academic documents.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://melpa.org/#/citar][file:https://melpa.org/packages/citar-badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Citar :PROPERTIES: :CUSTOM_ID: citar :END:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#features][Features]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#configuration][Configuration]]&lt;/li&gt; &#xA; &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA; &lt;li&gt;[[#comparisons][Comparisons]]&lt;/li&gt; &#xA; &lt;li&gt;[[#acknowledgements][Acknowledgements]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Features :PROPERTIES: :CUSTOM_ID: features :END:&lt;/p&gt; &#xA;&lt;p&gt;Citar provides a highly-configurable =completing-read= front-end to browse and act on BibTeX, BibLaTeX, and CSL JSON bibliographic data, and LaTeX, markdown, and org-cite editing support.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;quick filtering and selection of bibliographic entries from the minibuffer, and various commands to run against them.&lt;/li&gt; &#xA; &lt;li&gt;a small =citar-embark= companion package, that provides contextual actions in the minibuffer, and also at-point in org, markdown, and LaTeX buffers.&lt;/li&gt; &#xA; &lt;li&gt;seamless caching of multiple global and local bibliographic sources&lt;/li&gt; &#xA; &lt;li&gt;configurable APIs for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;indicatars, that signal the presence of related resources in the minibuffer&lt;/li&gt; &#xA;   &lt;li&gt;notes, to integrate with dedicated note packages, with external packages available for =org-roam=, =denote=, and =zk=&lt;/li&gt; &#xA;   &lt;li&gt;major-mode adapters&lt;/li&gt; &#xA;   &lt;li&gt;entry-opening, to go to the original entry data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s a screenshot with [[https://github.com/minad/vertico][vertico]] and symbol customization [[https://github.com/bdarcus/citar#icons][noted below]].&lt;/p&gt; &#xA;&lt;p&gt;#+caption: vertico with citar [[file:images/vertico.png]]&lt;/p&gt; &#xA;&lt;p&gt;And here&#39;s =citar-capf= in a markdown buffer.&lt;/p&gt; &#xA;&lt;p&gt;#+caption: completion-at-point in a markdown buffer [[file:images/capf-md.png]]&lt;/p&gt; &#xA;&lt;p&gt;To see citar in action with org-cite, you can watch [[https://emacsconf.org/2021/talks/research/][this Emacs Conf 2021 presentation]] by [[https://github.com/rka97][Ahmed Khaled]].&lt;/p&gt; &#xA;&lt;p&gt;** Installation :PROPERTIES: :CUSTOM_ID: installation :END:&lt;/p&gt; &#xA;&lt;p&gt;There are a variety of ways to install citar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Doom Emacs :: The easiest way to install and configure citar and related packages is to use the [[https://github.com/hlissner/doom-emacs/tree/master/modules/tools/biblio][Doom Emacs biblio module]] with the &lt;del&gt;vertico&lt;/del&gt; completion module.&lt;/li&gt; &#xA; &lt;li&gt;MELPA :: citar is also available via [[https://melpa.org/#/citar][MELPA]].&lt;/li&gt; &#xA; &lt;li&gt;GUIX :: provides the &lt;del&gt;emacs-citar&lt;/del&gt; package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, the following packages are strongly recommended for the best experience.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;[[https://github.com/minad/vertico][Vertico]] (completion interface)&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/orderless][Orderless]] (completion style)&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/oantolin/embark][Embark]] (contextual actions)&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/marginalia][Marginalia]] (annotations, and also candidate classification for Embark)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In particular, if you want to narrow your search using authors, titles, etc (i.e., not only citation keys), you need to use a completion style that is order independent; for example, [[https://github.com/oantolin/orderless][Orderless]] with &lt;del&gt;completion-styles&lt;/del&gt; set to &lt;del&gt;(orderless basic)&lt;/del&gt; (see [[https://github.com/oantolin/orderless#overview][example config]]).&lt;/p&gt; &#xA;&lt;p&gt;We also recommend Emacs 28 or newer.&lt;/p&gt; &#xA;&lt;p&gt;** Configuration :PROPERTIES: :CUSTOM_ID: configuration :END:&lt;/p&gt; &#xA;&lt;p&gt;*** Basic :PROPERTIES: :CUSTOM_ID: basic :END:&lt;/p&gt; &#xA;&lt;p&gt;This is the minimal configuration, and will work with any completing-read compliant vertical completion UI, like Vertico, or the built-in icomplete-vertical, with actions available via =M-x= commands.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package citar :custom (citar-bibliography &#39;(&#34;~/bib/references.bib&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** =citar-capf=&lt;/p&gt; &#xA;&lt;p&gt;This package includes a &lt;del&gt;completion-at-point&lt;/del&gt; function to complete citation keys in the buffer, which you can configure like so:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package citar :custom (citar-bibliography &#39;(&#34;~/bib/references.bib&#34;)) :hook (LaTeX-mode . citar-capf-setup) (org-mode . citar-capf-setup)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Embark&lt;/p&gt; &#xA;&lt;p&gt;The =citar-embark= package adds contextual access actions in the minibuffer and at-point via the &lt;del&gt;citar-embark-mode&lt;/del&gt; minor mode.&lt;/p&gt; &#xA;&lt;p&gt;When using Embark, the Citar actions are generic, and work the same across org, markdown, and latex modes.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package citar-embark :after citar embark :no-require :config (citar-embark-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Org-Cite&lt;/p&gt; &#xA;&lt;p&gt;This shows the buffer actions made available by =citar-embark=:&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: org-cite at-point integration with =embark-act= [[file:images/org-cite-embark-point.png]]&lt;/p&gt; &#xA;&lt;p&gt;If you want to use Citar only in Org-Mode, this is the best option.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package citar :no-require :custom (org-cite-global-bibliography &#39;(&#34;~/bib/references.bib&#34;)) (org-cite-insert-processor &#39;citar) (org-cite-follow-processor &#39;citar) (org-cite-activate-processor &#39;citar) (citar-bibliography org-cite-global-bibliography) ;; optional: org-cite-insert is also bound to C-c C-x C-@ :bind (:map org-mode-map :package org (&#34;C-c b&#34; . #&#39;org-cite-insert))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can insert citations with the =org-cite-insert= command, which is bound to =C-c C-x C-@= in Org-Mode buffers. The optional &lt;del&gt;:bind&lt;/del&gt; command above also gives it the shorter =C-c b= binding.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to have the Embark menu open with =org-open-at-point=, you should set this variable.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq citar-at-point-function &#39;embark-act) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can invoke both =embark-act= and =embark-dwim=, however, independently of =org-at-point=, and in other modes such as =latex-mode=.&lt;/p&gt; &#xA;&lt;p&gt;*** Major-mode adapters :PROPERTIES: :CUSTOM_ID: major-mode-adapters :END:&lt;/p&gt; &#xA;&lt;p&gt;Citar includes an adapter framework to enable major-mode specific editing integration. Such adapters can provide the following capabilities, which one can configure with the &lt;del&gt;citar-major-mode-functions&lt;/del&gt; alist:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;del&gt;insert-keys&lt;/del&gt;: to insert citation keys (this may go away though)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;insert-citation&lt;/del&gt;: to insert citations&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;insert-edit&lt;/del&gt;: to insert citations or edit at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;local-bib-files&lt;/del&gt;: to find bibliographic files associated with a buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;key-at-point&lt;/del&gt;: returns the citation key at point&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;citation-at-point&lt;/del&gt;: returns the list of keys in the citation at point&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Citar currently includes the following such adapters:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;del&gt;citar-org&lt;/del&gt;: by default, only supports &lt;del&gt;org-cite&lt;/del&gt;, but can one can configure for other formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;citar-latex&lt;/del&gt;: configurable bibtex, natbib and biblatex support (requires AUCTeX)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;citar-markdown&lt;/del&gt;: by default, only supports the &lt;del&gt;pandoc&lt;/del&gt; citation syntax&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;None of these should require any configuration, and should load as needed.&lt;/p&gt; &#xA;&lt;p&gt;*** Opening reference entries&lt;/p&gt; &#xA;&lt;p&gt;The =citar-open-entry= command will open the source data entry. You may configure this using &lt;del&gt;citar-open-entry-function&lt;/del&gt;. By default, this uses &lt;del&gt;citar-open-entry-in-file&lt;/del&gt;, which will open the relevant bibliographic file and move point to the entry. The other included option is &lt;del&gt;citar-open-entry-in-zotero&lt;/del&gt;, which will select the item in Zotero. Note that functionality depends on [[https://retorque.re/zotero-better-bibtex/][Better BibTeX]] (which you should be using anyway!).&lt;/p&gt; &#xA;&lt;p&gt;** Rich UI :PROPERTIES: :CUSTOM_ID: rich-ui :END:&lt;/p&gt; &#xA;&lt;p&gt;There are three sections of the browsing UI.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The prefix, exploiting the affixation feature only available starting with Emacs 28, and holding the symbols to indicate the presence of PDFs or notes associated with the entries.&lt;/li&gt; &#xA; &lt;li&gt;The main display, which by default shows author, title, and date.&lt;/li&gt; &#xA; &lt;li&gt;The suffix, which by default shows citekey, reference type, and (if present) tags or keywords.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can search against all of the above content. For the prefix, you can filter for associated files or notes using =has:file= or =has:notes= respectively (and at least with &lt;del&gt;orderless&lt;/del&gt;, even the =:p= or =:n= shorthand).&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: UI sections [[file:images/ui-segments.png]]&lt;/p&gt; &#xA;&lt;p&gt;*** Templates&lt;/p&gt; &#xA;&lt;p&gt;The =citar-templates= variable configures formatting for these sections, as well as the default note function. Here&#39;s the default value:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq citar-templates &#39;((main . &#34;${author editor:30%sn} ${date year issued:4} ${title:48}&#34;) (suffix . &#34; ${=key= id:15} ${=type=:12} ${tags keywords:*}&#34;) (preview . &#34;${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n&#34;) (note . &#34;Notes on ${author editor:%etal}, ${title}&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You may include multiple variables in a field; the formatter will print the first one it finds.&lt;/li&gt; &#xA; &lt;li&gt;If you plan to use CSL JSON at all, you can and should include CSL JSON variables names where appropriate as such options. The default main template dates field demonstrates this.&lt;/li&gt; &#xA; &lt;li&gt;The asterisk signals to the formatter to use available space for the column.&lt;/li&gt; &#xA; &lt;li&gt;The note template does not take widths, as formatting is inline there rather than columnar.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;del&gt;%&lt;/del&gt; character preceeds a token defined as a key in &lt;del&gt;citar-display-transform-functions&lt;/del&gt;, whose value is a list of functions and optional arguments. Note that if you include this, if you also include a width specification, it must come after the width.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*** Indicators&lt;/p&gt; &#xA;&lt;p&gt;The UI includes configurable indicators. By default, it includes plain text indicators for, each of which indicates the presence of different resources related to the reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;notes&lt;/li&gt; &#xA; &lt;li&gt;library files&lt;/li&gt; &#xA; &lt;li&gt;links&lt;/li&gt; &#xA; &lt;li&gt;cited (for references cited in the current buffer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For other indicators, see the [[https://github.com/emacs-citar/citar/wiki/Indicators][wiki]].&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a screenshot using this configuration, which removes the links indicator, and mixes plain text and an icon indicator using &lt;del&gt;all-the-icons&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq citar-indicators (list citar-indicator-files ; plain text citar-indicator-notes-icons)) ; icon #+end_src&lt;/p&gt; &#xA;&lt;p&gt;#+caption: UI with customized indicators. #+name: fig-indicators [[images/indicators.png]]&lt;/p&gt; &#xA;&lt;p&gt;You can create your own indicators, of course. Here&#39;s an example indicator definition incorporating icons:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar citar-indicator-notes-icons (citar-indicator-create :symbol (all-the-icons-material &#34;speaker_notes&#34; :face &#39;all-the-icons-blue :v-adjust -0.3) :function #&#39;citar-has-notes :padding &#34; &#34; :tag &#34;has:notes&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind, however, the included predicate functions must be performance-optimized, since the completion UI runs them on your entire library every time you open it.&lt;/p&gt; &#xA;&lt;p&gt;** Test Script :PROPERTIES: :CUSTOM_ID: test-script :END:&lt;/p&gt; &#xA;&lt;p&gt;The repository =test= directory also includes a script you can use to run this and associated packages in the =emacs -Q= sandbox. To do that, simply run =./run.sh= from the =test= directory.&lt;/p&gt; &#xA;&lt;p&gt;** History and predefined searches :PROPERTIES: :CUSTOM_ID: history-and-predefined-searches :END:&lt;/p&gt; &#xA;&lt;p&gt;=citar= has functionality similar to the [[https://github.com/tmalsburg/helm-bibtex#p][predefined search]] functionality in =helm-bibtex= and =ivy-bibtex=, but with a different implementation. Rather than create a new command with the search terms as argument, you just set the =citar-presets= variable, and add the strings you want to access:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq citar-presets &#39;(&#34;one search string&#34; &#34;another search string&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You then have two ways to access these strings from the completion prompt:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;by using =M-n= from the prompt, which will cycle through the strings&lt;/li&gt; &#xA; &lt;li&gt;by calling =citar-insert-preset= with a keybinding, and then selecting the string&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;=citar= also preserves the history of your selections (see caveat below about multiple candidate selection though), which are also accessible in your completion UI, but by using =M-p=. You can save this history across sessions by adding =citar-history= to =savehist-additional-variables=.&lt;/p&gt; &#xA;&lt;p&gt;** Refreshing the library display :PROPERTIES: :CUSTOM_ID: refreshing-the-library-display :END:&lt;/p&gt; &#xA;&lt;p&gt;Citar uses a cache to speed up library display. If a bib file changes, the cache will automatically update the next time you run a Citar command.&lt;/p&gt; &#xA;&lt;p&gt;Note that cached data preformatted completion candidates are independently tracked by file. So, for example, if you have one very large bibliography file that changes a lot, you might consider splitting into one large file that is more stable, and one-or-more smaller ones that change more frequently.&lt;/p&gt; &#xA;&lt;p&gt;** Notes&lt;/p&gt; &#xA;&lt;p&gt;Citar offers configurable note-taking and access integration. The &lt;del&gt;citar-notes-sources&lt;/del&gt; variable configures note backends, and &lt;del&gt;citar-notes-source&lt;/del&gt; activates your chosen backend.&lt;/p&gt; &#xA;&lt;p&gt;A backend primarily specifies functions to update the Citar display, to create the completion candidates, and to open existing and new notes. See the &lt;del&gt;citar-notes-sources&lt;/del&gt; docstring for details, and the =citar-register-notes-source= and =citar-remove-notes-source= convenience functions.&lt;/p&gt; &#xA;&lt;p&gt;** Files, file association and file-field parsing&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;del&gt;citar-library-paths&lt;/del&gt; set, the relevant open commands will look in those directories for file names of =CITEKEY.EXTENSION=. They will also parse contents of a file-field. The &lt;del&gt;citar-file-parser-functions&lt;/del&gt; variable governs which parsers to use, and there are two included parsers:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The default =citar-file-parser-default= parser works for simple colon or semi-colon-delimited lists of file paths, as in Zotero.&lt;/li&gt; &#xA; &lt;li&gt;The =citar-file-parser-triplet= works for Mendeley and Calibre, which represent files using a format like =:/path/file.pdf:PDF=.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you have a mix of entries created with Zotero and Calibre, you can set it like so and it will parse both:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq citar-file-parser-functions &#39;(citar-file-parser-default citar-file-parser-triplet)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;citar-library-file-extensions&lt;/del&gt; variable governs which file extensions the open commands will recognize; when &lt;code&gt;nil&lt;/code&gt;, it will recognize all extensions. The &lt;del&gt;citar-file-additional-files-separator&lt;/del&gt; variable defines what patterns citar should identify for multiple library files for the same reference key. Here&#39;s an example to only recognize pdf and jpg extensions, but additional file names of the form &lt;del&gt;test-1.jpg&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq citar-library-file-extensions (list &#34;pdf&#34; &#34;jpg&#34;) citar-file-additional-files-separator &#34;-&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To change how citar opens files with given extensions, customize the &lt;del&gt;citar-file-open-functions&lt;/del&gt; variable defined in =citar-file.el=.&lt;/p&gt; &#xA;&lt;p&gt;When used with embark and consult, you will have a range of alternate actions available for the candidates.&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: File candidates with embark options [[file:images/file-browser-embark.png]]&lt;/p&gt; &#xA;&lt;p&gt;*** BibTeX Crossref File Support&lt;/p&gt; &#xA;&lt;p&gt;For BibTeX entries that have a &#39;crossref&#39; field, Citar will associate the entry&#39;s key with the resources (files, notes, links) that are associated with the cross-referenced entry.&lt;/p&gt; &#xA;&lt;p&gt;For example: consider an entry for &#34;Baym1965&#34; that has a &#39;crossref&#39; field &#34;Meyers1999&#34;. When citar-open is called and &#34;Baym1965&#34; is selected, the minibuffer will list all files, notes, and links associated with both &#34;Baym1965&#34; and &#34;Meyers1999&#34;. The proper prefixes, denoting an associated file, note, or link, will also be listed with each candidate in the minibuffer.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: For the BibTeX crossref feature to work properly, the entry with the &#39;crossref&#39; field must come &lt;em&gt;before&lt;/em&gt; the cross-referenced entry in the bib file. (This is a requirement of BibTeX, not of Citar specifically.) In the example above, then, the entry for &#34;Baym1965&#34; must come before the entry for &#34;Meyers1999&#34;.&lt;/p&gt; &#xA;&lt;p&gt;** Usage :PROPERTIES: :CUSTOM_ID: usage :END:&lt;/p&gt; &#xA;&lt;p&gt;You have a few different ways to use citar.&lt;/p&gt; &#xA;&lt;p&gt;*** Org-cite&lt;/p&gt; &#xA;&lt;p&gt;Citar includes an org-cite =citar= processor, with &#34;insert,&#34; &#34;activate&#34; and &#34;follow&#34; capabilities. When speaking about org-cite, &lt;em&gt;citations&lt;/em&gt; refer to a set of one or more &lt;em&gt;references (citation-references)&lt;/em&gt;, each of which may have text that precedes it (prefix) and text that proceeds it (suffix). To learn more about org-cite, visit the [[https://orgmode.org/manual/Citations.html][Citations page in the Org Manual]].&lt;/p&gt; &#xA;&lt;p&gt;The &#34;insert processor&#34; uses =citar-select-refs= to browse your library to insert and edit citations and citation references using the =org-cite-insert= command. The command is context-aware, so &lt;em&gt;its behavior depends on the point&#39;s location in a citation&lt;/em&gt;. For example, if point:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;precedes the colon, you are on the /citation prefix/ and will be prompted to edit the style&lt;/li&gt; &#xA; &lt;li&gt;is on an existing citation-reference, you will be prompted to replace it&lt;/li&gt; &#xA; &lt;li&gt;follows or precedes a citation-reference, you will be prompted to add a new citation-reference&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &#34;activate processor&#34; runs the list of functions in &lt;del&gt;citar-org-activation-functions&lt;/del&gt;, which by default is the &lt;del&gt;basic&lt;/del&gt; processor from &lt;del&gt;oc-basic&lt;/del&gt; to provide fontification, and also a little function that adds a keymap (&lt;del&gt;citar-org-citation-map&lt;/del&gt;) for editing citations at point. The &lt;del&gt;citar-org-citation-map&lt;/del&gt; keymap includes the following bindings that provide additional citation and citation-reference editing options.&lt;/p&gt; &#xA;&lt;p&gt;| key | binding | description | |-------------+---------------------------------+-----------------------------------------------------| | C-c C-x DEL | citar-org-delete-citation | delete citation or citation-reference at point | | C-c C-x k | citar-org-kill-citation | kill citation or citation-reference at point | | S-&#xA; &lt;left&gt;&#xA;   | citar-org-shift-reference-left | move citation-reference at point left | | S-&#xA;  &lt;right&gt;&#xA;    | citar-org-shift-reference-right | move citation-reference at point right | | M-p | citar-org-update-prefix-suffix | update prefix and suffix of reference at point, or, | | | | when called with prefix arg, update all | | | | citation-references in citation at point | | &#xA;   &lt;mouse-1&gt;&#xA;     | citar-dwim | call the value of =citar-at-point-function= at point | | &#xA;    &lt;mouse-3&gt;&#xA;      | embark-act | call =embark-act= at point |&#xA;    &lt;/mouse-3&gt;&#xA;   &lt;/mouse-1&gt;&#xA;  &lt;/right&gt;&#xA; &lt;/left&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &#34;follow processor&#34; provides at-point functionality accessible via the =org-open-at-point= command. By default, in org-mode with org-cite support, when point is on a citation or citation-reference, and you invoke =org-open-at-point=, it will run the command set in =citar-at-point-function=, which is =citar-open= by default. Changing the value of =citar-at-point-function= to =embark-act= with embark installed and configured will provide access to the standard citar commands at point.&lt;/p&gt; &#xA;&lt;p&gt;Org-cite citations include optional &#34;styles&#34; and &#34;variants&#34; to locally modify the citation rendering. When inserting a new citation, calling =org-cite-insert= with a prefix arg will prompt to select a style. To edit an existing citation&#39;s style, just make sure &lt;em&gt;point is on the citation prefix&lt;/em&gt; before running =org-cite-insert=, and you will get a list of available styles. That list is based on your configuration; if you have the =oc-natbib= and =oc-csl= processors configured, for example, the list will include the styles and variants available in those two processors. The variants included in the bundled processors include the following, with the shortcuts in parentheses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=bare= (=b=): without surrounding punctuation&lt;/li&gt; &#xA; &lt;li&gt;=caps= (=c=): force initial capitalization&lt;/li&gt; &#xA; &lt;li&gt;=full= (=f=): ignore et al shortening for author names&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Generally, you shouldn&#39;t need these, but they can be useful in certain circumstances. If an export processor doesn&#39;t support a specific variant for a specific style, it should just fallback to the base style. For example, if you specify =text/f=, and the export processor you use doesn&#39;t support the =f= variant there, it should just output as if you specified =text=.&lt;/p&gt; &#xA;&lt;p&gt;#+CAPTION: citation styles [[file:images/oc-styles.png]]&lt;/p&gt; &#xA;&lt;p&gt;*** =M-x= :PROPERTIES: :CUSTOM_ID: m-x :END:&lt;/p&gt; &#xA;&lt;p&gt;Simply do =M-x= and select the command that you want, enter the terms to find the item you are looking for, and hit return. This runs the default action: the command you invoked.&lt;/p&gt; &#xA;&lt;p&gt;*** Access an alternate action via =embark-act= :PROPERTIES: :CUSTOM_ID: access-an-alternate-action-via-embark-act :END:&lt;/p&gt; &#xA;&lt;p&gt;If while browsing you instead would rather edit that record, and you have embark installed and configured, this is where =embark-act= comes in. Simply input the keybinding for =embark-act= (in my case =C-o=), and select the alternate action.&lt;/p&gt; &#xA;&lt;p&gt;*** Use =embark-collect-snapshot= :PROPERTIES: :CUSTOM_ID: use-embark-collect-snapshot :END:&lt;/p&gt; &#xA;&lt;p&gt;A final option, that can be useful: run =embark-collect-snapshot= (=S=) from =embark-act=. This will select the candidate subset, and open it in a separate buffer. From there, you can run the same options discussed above using =embark-act= (which is also bound to =a= in the collect buffer).&lt;/p&gt; &#xA;&lt;p&gt;So, for example, say you are working on a paper. You hold the complete super-set of items you are interested in citing at some point in that buffer. From there, you can run different actions on the candidates at will, rather than search individually for each item you want to cite.&lt;/p&gt; &#xA;&lt;p&gt;*** Use =citar-dwim= :PROPERTIES: :CUSTOM_ID: use-citar-dwim :END:&lt;/p&gt; &#xA;&lt;p&gt;=M-x citar-dwim= will run the default action on citation keys found at point directly. If you have =embark= installed, you use can =embark-dwim= instead for the same behavior, and =embark-act= for additional actions at-point.&lt;/p&gt; &#xA;&lt;p&gt;If no citation key is found, the minibuffer will open for selection. You can disable this behavior by setting =citar-at-point-fallback= to nil.&lt;/p&gt; &#xA;&lt;p&gt;** Related Packages&lt;/p&gt; &#xA;&lt;p&gt;The following packages extend or otherwise enhance citar.&lt;/p&gt; &#xA;&lt;p&gt;*** Notes Sources&lt;/p&gt; &#xA;&lt;p&gt;These small packages provide citar notes sources, and so tighter integration with the respective notes management packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/emacs-citar/citar-org-roam][citar-org-roam]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/pprevos/citar-denote][citar-denote]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/localauthor/zk][zk-citar]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Comparisons :PROPERTIES: :CUSTOM_ID: comparisons :END:&lt;/p&gt; &#xA;&lt;p&gt;To understand how citar compares to other packages like =org-ref=, =ivy-bibtex= and =helm-bibtex= (and the related =bibtex-completion=), see the [[https://github.com/emacs-citar/citar/wiki/Comparisons][comparisons]] page on the wiki.&lt;/p&gt; &#xA;&lt;p&gt;** Acknowledgements :PROPERTIES: :CUSTOM_ID: acknowledgements :END:&lt;/p&gt; &#xA;&lt;p&gt;The ideas in this project were initially worked out in a [[https://github.com/tmalsburg/helm-bibtex/issues/353][conversation]] with [[https://github.com/mtreca][Maxime Tréca]] and [[https://github.com/minad][Daniel Mendler]]. Daniel, author of [[https://github.com/minad/consult][consult]] and [[https://github.com/minad/marginalia][marginalia]], helped us understand the possibilities of the new suite of completing-read packages, while Maxime came up with an [[https://github.com/tmalsburg/helm-bibtex/pull/355][initial prototype]].&lt;/p&gt; &#xA;&lt;p&gt;This code takes those ideas and re-implements them to fill out the feature set, and also optimize the code clarity and performance.&lt;/p&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;org-edit-src-content-indentation: 0&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>Elilif/emacs-immersive-translate</title>
    <updated>2023-07-23T01:34:21Z</updated>
    <id>tag:github.com,2023-07-23:/Elilif/emacs-immersive-translate</id>
    <link href="https://github.com/Elilif/emacs-immersive-translate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: immersive-translate: Immersive Bilingual Translation (WIP)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;项目简介 受 [[https://github.com/immersive-translate/immersive-translate][immersive-translate/immersive-translate]] 的启发，在 Emacs 中实现了类似的功能。&lt;/li&gt; &#xA; &lt;li&gt;使用截图 ** elfeed [[images/screenshots/elfeed.png]] ** nov [[images/screenshots/nov.png]] ** info [[images/screenshots/info.png]] ** helpful/help [[images/screenshots/help.png]]&lt;/li&gt; &#xA; &lt;li&gt;安装 您的设备上需要先安装 [[https://curl.se/][curl]] ，如果需要使用 translate-shell 后端，则需要安装 [[https://github.com/soimort/translate-shell][translate-shell]] 。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;load-path &#34;/path-to/emacs-immersive-translate/&#34;) (require &#39;immersive-translate) (add-hook &#39;elfeed-show-mode-hook #&#39;immersive-translate-setup) (add-hook &#39;nov-pre-html-render-hook #&#39;immersive-translate-setup) ;; use Baidu Translation (setq immersive-translate-backend &#39;baidu immersive-translate-baidu-appid &#34;your-appid&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; use ChatGPT ;; (setq immersive-translate-backend &#39;chatgpt ;; immersive-translate-chatgpt-host &#34;api.openai.com&#34;)&lt;/p&gt; &#xA;&lt;p&gt;;; use translate-shell ;; (setq immersive-translate-backend &#39;trans)&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-buffer=&lt;/p&gt; &lt;p&gt;翻译当前 buffer 。 &lt;em&gt;注意&lt;/em&gt;: 这可能会消耗大量 Token 。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-paragraph=&lt;/p&gt; &lt;p&gt;翻译当前段落。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-clear=&lt;/p&gt; &lt;p&gt;清除所有翻译文本。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-auto-mode=&lt;/p&gt; &lt;p&gt;开启后，自动翻译当前窗口可见部分的内容。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-abort=&lt;/p&gt; &lt;p&gt;停止当前 buffer 所有的正在进行的翻译进程。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;自定义设置&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-backend=&lt;/p&gt; &lt;p&gt;所使用的翻译后端。详见 [[#api_key][API 密钥设置]] 一节。&lt;/p&gt; &lt;p&gt;目前可用的翻译服务&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;chatgpt (&lt;a href=&#34;https://openai.com/api/&#34;&gt;https://openai.com/api/&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;baidu (&lt;a href=&#34;https://fanyi-api.baidu.com/&#34;&gt;https://fanyi-api.baidu.com/&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;translate-shell (&lt;a href=&#34;https://github.com/soimort/translate-shell&#34;&gt;https://github.com/soimort/translate-shell&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-auto-idle=&lt;/p&gt; &lt;p&gt;开启 =immersive-translate-auto-mode= 后，执行下次翻译时所需要的 Emacs 空闲时间。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-exclude-shr-tag=&lt;/p&gt; &lt;p&gt;此变量中的标签所包含的文本都不会翻译 。此变量适用于所有由 =shr.el= 生成的 buffer， 如 =elfeed-show-mode= 、=nov-mode= 和 =mu4e-view-mode= 中的 buffer 。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-chatgpt-system-prompt=&lt;/p&gt; &lt;p&gt;System prompt used by ChatGPT.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-chatgpt-user-prompt=&lt;/p&gt; &lt;p&gt;User prompt used by ChatGPT.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;=immersive-translate-disable-predicates=&lt;/p&gt; &lt;p&gt;当当前段落不需要翻译时，返回 =t= 。此列表中的函数不接受任何参数。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;更多自定义配置见：=M-x customize-group RET immersive-translate RET=&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API 密钥设置 :PROPERTIES: :CUSTOM_ID: api_key :END: 此插件的翻译服务需要你申请对应服务的 API 密钥才能使用，详见 [[https://immersivetranslate.com/docs/services/][翻译服务 API 申请]] 。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;此插件通过内置的 =auth-source.el= 来获取用户的密钥：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;ChatGPT&lt;/p&gt; &lt;p&gt;假设您的 =immersive-translate-chatgpt-host= 为 &#34;api.openai.com&#34; , API 密钥为 123456 。则在 =~/.authinfo= 中添加如下文本： #+begin_example machine api.openai.com login apikey password 123456 #+end_example&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;百度翻译&lt;/p&gt; &lt;p&gt;假设您的 =immersive-translate-baidu-appid= 为 &#34;foobar&#34; ，API 密钥为123456 。则在 =~/.authinfo= 中添加如下文本： #+begin_example machine fanyi-api.baidu.com login foobar password 123456 #+end_example&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;添加新的翻译后端 (欢迎 PR!) ** 添加在线翻译服务 如果想要添加新的翻译服务，可以查看变量 =immersive-translate-curl-get-translation-alist= 和 =immersive-translate-curl-get-args-alist= 。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;变量 =immersive-translate-curl-get-args-alist= 中的函数用于构造请求时所需的输入 参数。&lt;/p&gt; &#xA;&lt;p&gt;变量 =immersive-translate-curl-get-translation-alist= 中的函数用于解析 =curl= 返回的 翻译结果。 ** 添加本地翻译软件 参考 [[immersive-translate-trans.el]]&lt;/p&gt;</summary>
  </entry>
</feed>