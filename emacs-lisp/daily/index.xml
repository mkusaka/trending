<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-14T01:45:00Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>abicky/nodejs-repl.el</title>
    <updated>2022-06-14T01:45:00Z</updated>
    <id>tag:github.com,2022-06-14:/abicky/nodejs-repl.el</id>
    <link href="https://github.com/abicky/nodejs-repl.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run Node.js REPL and communicate with the process&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nodejs-repl.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/abicky/nodejs-repl.el/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run Node.js REPL in Emacs&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;This program is derived from comint-mode and provides the following features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;token completion, same as Node.js REPL&lt;/li&gt; &#xA; &lt;li&gt;file name completion in string&lt;/li&gt; &#xA; &lt;li&gt;incremental history search&lt;/li&gt; &#xA; &lt;li&gt;sending JavaScript codes to REPL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Put this file in your Emacs lisp path (e.g. ~/.emacs.d/site-lisp) and add the following line to your .emacs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;nodejs-repl)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Type &lt;code&gt;M-x nodejs-repl&lt;/code&gt; to run Node.js REPL. See also &lt;code&gt;comint-mode&lt;/code&gt; to check key bindings.&lt;/p&gt; &#xA;&lt;p&gt;You can define key bindings to send JavaScript codes to REPL like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;js-mode-hook&#xA;          (lambda ()&#xA;            (define-key js-mode-map (kbd &#34;C-x C-e&#34;) &#39;nodejs-repl-send-last-expression)&#xA;            (define-key js-mode-map (kbd &#34;C-c C-j&#34;) &#39;nodejs-repl-send-line)&#xA;            (define-key js-mode-map (kbd &#34;C-c C-r&#34;) &#39;nodejs-repl-send-region)&#xA;            (define-key js-mode-map (kbd &#34;C-c C-c&#34;) &#39;nodejs-repl-send-buffer)&#xA;            (define-key js-mode-map (kbd &#34;C-c C-l&#34;) &#39;nodejs-repl-load-file)&#xA;            (define-key js-mode-map (kbd &#34;C-c C-z&#34;) &#39;nodejs-repl-switch-to-repl)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a version manager such as nvm is used to run different versions of Node.js, it is often desirable to start the REPL of the version specified in the .nvmrc file per project. In such case, customize the &lt;code&gt;nodejs-repl-command&lt;/code&gt; variable with a function symbol. That function should query nvm for the Node.js command to run. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;nodejs-repl)&#xA;(defun nvm-which ()&#xA;  (let* ((shell (concat (getenv &#34;SHELL&#34;) &#34; -l -c &#39;nvm which&#39;&#34;))&#xA;         (output (shell-command-to-string shell)))&#xA;    (cadr (split-string output &#34;[\n]+&#34; t))))&#xA;(setq nodejs-repl-command #&#39;nvm-which)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;nvm-which&lt;/code&gt; function can be simpler, and perhaps can run faster, too, if using Bash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(defun nvm-which ()&#xA;  (let ((output (shell-command-to-string &#34;source ~/.nvm/nvm.sh; nvm which&#34;)))&#xA;    (cadr (split-string output &#34;[\n]+&#34; t))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Takeshi Arabiki (abicky)&lt;/p&gt; &#xA;&lt;h2&gt;Copyright and License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2012-2020 Takeshi Arabiki (abicky)&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purcell/mmm-mode</title>
    <updated>2022-06-14T01:45:00Z</updated>
    <id>tag:github.com,2022-06-14:/purcell/mmm-mode</id>
    <link href="https://github.com/purcell/mmm-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;New official home for mmm-mode, fixed for Emacs &gt;= 23&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;                      MMM Mode for Emacs&#xA;                      ==================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OVERVIEW&lt;/p&gt; &#xA;&lt;p&gt;MMM Mode is a minor mode for Emacs that allows Multiple Major Modes to coexist in one buffer. It is well-suited to editing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preprocessed code, such as server-side Ruby, Perl or PHP embedded in HTML&lt;/li&gt; &#xA; &lt;li&gt;Code generating code, such as HTML output by CGI scripts&lt;/li&gt; &#xA; &lt;li&gt;Embedded code, such as Javascript in HTML&lt;/li&gt; &#xA; &lt;li&gt;Literate programming: code interspersed with documentation, e.g. Noweb&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;INSTALLATION&lt;/p&gt; &#xA;&lt;p&gt;Use any of the following options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Users of package.el (a.k.a. ELPA) can easily install MMM Mode from the ELPA package repository at &lt;a href=&#34;https://elpa.gnu.org/&#34;&gt;https://elpa.gnu.org/&lt;/a&gt; -- this is the preferred and best-supported installation mechanism.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since currently MMM Mode is written in pure Emacs Lisp, you could just copy all the *.el files in the distribution to a directory in your `load-path&#39;, and optionally byte-compile them manually (see the Emacs Manual). The configure installation also installs the MMM Mode info manual in your site info directory, so if you&#39;re installing manually, you might want to do that too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MMM Mode has a standard GNU configure-driven installation. (See the file INSTALL for generic instructions, most of which don&#39;t apply.) To install in the standard locations, unpack the archive, `cd&#39; to the mmm-mode-X.X.X directory created, and run these commands:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;make maintainer-clean # optional step&#xA;./autogen.sh&#xA;./configure&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have more than one version of emacs installed and want to use MMM in a version other than /usr/bin/emacs, you must set the environment variable EMACS before running `configure&#39;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;EMACS=/usr/bin/xemacs ./configure&#xA;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use MMM in more than one version of emacs, you must either have separate site-lisp directories (such as Debian does), or load it from source every time; byte-compiled files are not portable between emacsen.&lt;/p&gt; &#xA;&lt;p&gt;CONFIGURATION&lt;/p&gt; &#xA;&lt;p&gt;Once MMM Mode is installed, it has to be configured correctly. This can be done in a site-start file or in user&#39;s initialization files; usually the latter is preferable, except possibly for autoloads. First the package needs to be loaded, with either&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;mmm-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or instead, to save time during emacs startup,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;mmm-auto)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you will probably want to set something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq mmm-global-mode &#39;maybe)&#xA;(mmm-add-mode-ext-class &#39;html-mode &#34;\\.php\\&#39;&#34; &#39;html-php)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first line tells MMM Mode to load itself whenever you open an appropriate file, and the second is an example which says to notice PHP regions in html-mode files having a `.php&#39; extension. Both lines are necessary.&lt;/p&gt; &#xA;&lt;p&gt;You will, of course, want to change and duplicate the second line according to your needs. either of the first two parameters can be `nil&#39;, meaning not to consider that criterion. For example, if all your html files, regardless of extension, are Mason components, you will want something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(mmm-add-mode-ext-class &#39;html-mode nil &#39;mason)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;whereas if all your files with a `.nw&#39; extension, regardless of primary mode (some may be LaTeX, others HTML, say) are Noweb, you will prefer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(mmm-add-mode-ext-class nil &#34;\\.nw\\&#39;&#34; &#39;noweb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the info file for more extensive documentation, and for other configuration options.&lt;/p&gt; &#xA;&lt;p&gt;DOCUMENTATION&lt;/p&gt; &#xA;&lt;p&gt;For further information, see (in order) the accompanying info file, the documentation strings of functions and variables, the comments in the source code, and the source code itself.&lt;/p&gt; &#xA;&lt;p&gt;UPDATES&lt;/p&gt; &#xA;&lt;p&gt;The latest version of MMM Mode should always be available from &lt;a href=&#34;https://github.com/purcell/mmm-mode&#34;&gt;https://github.com/purcell/mmm-mode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FEEDBACK&lt;/p&gt; &#xA;&lt;p&gt;Bug reports, suggestions and questions can be submitted at &lt;a href=&#34;https://github.com/purcell/mmm-mode/issues&#34;&gt;https://github.com/purcell/mmm-mode/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks for using MMM Mode!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-lsp/dap-mode</title>
    <updated>2022-06-14T01:45:00Z</updated>
    <id>tag:github.com,2022-06-14:/emacs-lsp/dap-mode</id>
    <link href="https://github.com/emacs-lsp/dap-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs ❤️ Debug Adapter Protocol&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://melpa.org/#/dap-mode][file:https://melpa.org/packages/dap-mode-badge.svg]] [[https://stable.melpa.org/#/dap-mode][file:https://stable.melpa.org/packages/dap-mode-badge.svg]] [[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]] [[https://github.com/emacs-lsp/dap-mode/actions][file:https://github.com/emacs-lsp/dap-mode/workflows/CI/badge.svg]] [[https://discord.gg/swuxy5AAgT][file:https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dap-mode ** Table of Contents :TOC_4_gh:noexport:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#dap-mode][dap-mode]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#summary][Summary]] &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;[[#project-status][Project status]]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;[[#usage][Usage]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#features][Features]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#configuration][Configuration]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#gallery][Gallery]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#extending-dap-with-new-debug-servers][Extending DAP with new Debug servers]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#links][Links]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#acknowledgments][Acknowledgments]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Summary Emacs client/library for [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]] is a wire protocol for communication between client and Debug Server. It&#39;s similar to the [[https://github.com/Microsoft/language-server-protocol][LSP]] but provides integration with debug server. *** Project status The API considered unstable until 1.0 release is out. It is tested against Java, Python, Ruby, Elixir and LLDB (C/C++/Objective-C/Swift). ** Usage The main entry points are &lt;del&gt;dap-debug&lt;/del&gt; and &lt;del&gt;dap-debug-edit-template&lt;/del&gt;. The first one asks for a registered debug template and starts the configuration using the default values for that particular configuration. The latter creates a debug template which could be customized before running. &lt;del&gt;dap-debug-edit-template&lt;/del&gt; will prepare a template declaration inside a temporary buffer. You should execute this code using &lt;del&gt;C-M-x&lt;/del&gt; for the changes to apply. You should also copy this code into your Emacs configuration if you wish to make it persistent.&lt;/p&gt; &#xA;&lt;p&gt;dap-mode also provides a [[https://github.com/abo-abo/hydra][hydra]] with &lt;del&gt;dap-hydra&lt;/del&gt;. You can automatically trigger the hydra when the program hits a breakpoint by using the following code.&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC elisp (add-hook &#39;dap-stopped-hook (lambda (arg) (call-interactively #&#39;dap-hydra))) #+END_SRC ** [[https://emacs-lsp.github.io/dap-mode/page/features/][Features]] ** [[https://emacs-lsp.github.io/dap-mode/page/configuration/][Configuration]] ** [[https://emacs-lsp.github.io/dap-mode/page/gallery][Gallery]] ** [[https://emacs-lsp.github.io/dap-mode/page/adding-debug-server][Extending DAP with new Debug servers]] ** Links&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/emacs-lsp/lsp-java][LSP Java]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/][Debug Adapter Protocol Server Implementations]] ** Acknowledgments&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/danielmartin][Daniel Martin]] - LLDB integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/kiennq][Kien Nguyen]] - NodeJS debugger, Edge debuggers, automatic extension installation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/Ladicle][Aya Igarashi]] - Go debugger integration.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/nbfalcon][Nikita Bloshchanevich]] - launch.json support (+ variable expansion), debugpy support, (with some groundwork by yyoncho) runInTerminal support, various bug fixes.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>