<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-07T01:36:23Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>manateelazycat/aweshell</title>
    <updated>2022-11-07T01:36:23Z</updated>
    <id>tag:github.com,2022-11-07:/manateelazycat/aweshell</id>
    <link href="https://github.com/manateelazycat/aweshell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Awesome shell extension base on eshell with wonderful features!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/aweshell/master/aweshell.gif&#34;&gt; &#xA;&lt;h1&gt;What is aweshell?&lt;/h1&gt; &#xA;&lt;p&gt;I created &lt;code&gt;multi-term.el&lt;/code&gt; and use it many years.&lt;/p&gt; &#xA;&lt;p&gt;Now I&#39;m a big fans of &lt;code&gt;eshell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So I wrote &lt;code&gt;aweshell.el&lt;/code&gt; to extend &lt;code&gt;eshell&lt;/code&gt; with these features:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create and manage multiple eshell buffers.&lt;/li&gt; &#xA; &lt;li&gt;Add some useful commands, such as: clear buffer, toggle sudo etc.&lt;/li&gt; &#xA; &lt;li&gt;Display extra information and color like zsh, powered by `eshell-prompt-extras&#39;&lt;/li&gt; &#xA; &lt;li&gt;Add Fish-like history autosuggestions.&lt;/li&gt; &#xA; &lt;li&gt;Validate and highlight command before post to eshell.&lt;/li&gt; &#xA; &lt;li&gt;Change buffer name by directory change.&lt;/li&gt; &#xA; &lt;li&gt;Add completions for git command.&lt;/li&gt; &#xA; &lt;li&gt;Fix error `command not found&#39; in MacOS.&lt;/li&gt; &#xA; &lt;li&gt;Integrate `eshell-up&#39;.&lt;/li&gt; &#xA; &lt;li&gt;Unpack archive file.&lt;/li&gt; &#xA; &lt;li&gt;Open file with alias e.&lt;/li&gt; &#xA; &lt;li&gt;Output &#34;did you mean ...&#34; helper when you typo.&lt;/li&gt; &#xA; &lt;li&gt;Make cat file with syntax highlight.&lt;/li&gt; &#xA; &lt;li&gt;Alert user when background process finished or aborted.&lt;/li&gt; &#xA; &lt;li&gt;Complete shell command arguments like IDE feeling.&lt;/li&gt; &#xA; &lt;li&gt;Dedicated shell window like IDE bottom terminal window.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Put &lt;code&gt;aweshell.el&lt;/code&gt;, &lt;code&gt;eshell-prompt-extras.el&lt;/code&gt;, &lt;code&gt;exec-path-from-shell.el&lt;/code&gt; to your load-path. The load-path is usually ~/elisp/. It&#39;s set in your ~/.emacs like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Elisp&#34;&gt;(add-to-list &#39;load-path (expand-file-name &#34;~/elisp&#34;))&#xA;(require &#39;aweshell)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bind your favorite key to functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Elisp&#34;&gt;aweshell-new&#xA;aweshell-next&#xA;aweshell-prev&#xA;aweshell-clear-buffer&#xA;aweshell-sudo-toggle&#xA;aweshell-switch-buffer&#xA;aweshell-dedicated-toggle&#xA;aweshell-dedicated-open&#xA;aweshell-dedicated-close&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Customize&lt;/h1&gt; &#xA;&lt;p&gt;Customize variables below by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Elisp&#34;&gt;M-x customize-group RET aweshell RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Elisp&#34;&gt;aweshell-complete-selection-key&#xA;aweshell-clear-buffer-key&#xA;aweshell-sudo-toggle-key&#xA;aweshell-use-exec-path-from-shell&#xA;aweshell-dedicated-window-height&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Customize prompt as directed in &lt;a href=&#34;https://github.com/kaihaosw/eshell-prompt-extras#themes&#34;&gt;eshell-prompt-extras&#39; README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dedicated window&lt;/h2&gt; &#xA;&lt;p&gt;You can use command &lt;code&gt;aweshell-dedicated-toggle&lt;/code&gt; to pop dedicated window at bottom of frame.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/manateelazycat/aweshell/master/aweshell-dedicated.gif&#34;&gt; &#xA;&lt;h2&gt;Aliases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/peterwvj/eshell-up&#34;&gt;eshell-up&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In alias file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias up eshell-up $1&#xA;alias pk eshell-up-peek $1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other customization of eshell-up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Elisp&#34;&gt;(setq eshell-up-ignore-case nil)&#xA;(setq eshell-up-print-parent-dir t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;If you got error that random space insert, you perhaps need turn off &lt;code&gt;aweshell-auto-suggestion-p&lt;/code&gt; with &lt;code&gt;(setq aweshell-auto-suggestion-p nil)&lt;/code&gt;, meantime auto suggestion feature will turn off.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hlissner/evil-snipe</title>
    <updated>2022-11-07T01:36:23Z</updated>
    <id>tag:github.com,2022-11-07:/hlissner/evil-snipe</id>
    <link href="https://github.com/hlissner/evil-snipe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;2-char searching ala vim-sneak &amp; vim-seek, for evil-mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made_with-Doom_Emacs-blueviolet.svg?style=flat-square&amp;amp;logo=GNU%20Emacs&amp;amp;logoColor=white&#34; alt=&#34;Made with Doom Emacs&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/tag/hlissner/evil-snipe.svg?label=release&amp;amp;style=flat-square&#34; alt=&#34;Release tag&#34;&gt; &lt;a href=&#34;http://melpa.org/#/evil-snipe&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/evil-snipe-badge.svg?style=flat-square&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/hlissner/evil-snipe/CI/master?style=flat-square&#34; alt=&#34;Build status&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;evil-snipe&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hlissner/evil-snipe/screenshots/cover.jpg&#34; alt=&#34;Sniper!&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Evil-snipe emulates &lt;a href=&#34;https://github.com/goldfeld/vim-seek&#34;&gt;vim-seek&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt; in &lt;a href=&#34;https://gitorious.org/evil/pages/Home&#34;&gt;evil-mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It provides 2-character motions for quickly (and more accurately) jumping around text, compared to evil&#39;s built-in f/F/t/T motions, incrementally highlighting candidate targets as you type.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Evil-snipe is available on MELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install evil-snipe&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;evil-snipe)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;evil-snipe&lt;/code&gt; comes with two global modes: &lt;code&gt;evil-snipe-mode&lt;/code&gt; and &lt;code&gt;evil-snipe-override-mode&lt;/code&gt;, and two local modes: &lt;code&gt;evil-snipe-local-mode&lt;/code&gt; and &lt;code&gt;evil-snipe-override-local-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can either a) enable one or both globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(evil-snipe-mode +1)&#xA;(evil-snipe-override-mode +1)&#xA;&#xA;;; and disable in specific modes&#xA;(push &#39;python-mode evil-snipe-disabled-modes)&#xA;&#xA;;; or disable it manually&#xA;(add-hook &#39;python-mode-hook #&#39;turn-off-evil-snipe-mode)&#xA;(add-hook &#39;python-mode-hook #&#39;turn-off-evil-snipe-override-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or b) enable one or both locally, where you need it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;python-mode-hook &#39;turn-on-evil-snipe-mode)&#xA;(add-hook &#39;python-mode-hook &#39;turn-on-evil-snipe-override-local-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;By default, snipe only binds &lt;kbd&gt;s&lt;/kbd&gt; (forward)/&lt;kbd&gt;S&lt;/kbd&gt; (backward) to &lt;code&gt;evil-snipe-s&lt;/code&gt; and &lt;code&gt;evil-snipe-S&lt;/code&gt;, respectively. In operator mode, snipe is bound to &lt;kbd&gt;z&lt;/kbd&gt;/&lt;kbd&gt;Z&lt;/kbd&gt; and &lt;kbd&gt;x&lt;/kbd&gt;/&lt;kbd&gt;X&lt;/kbd&gt; (exclusive).&lt;/p&gt; &#xA;&lt;p&gt;The last snipe can be repeated with &lt;kbd&gt;s&lt;/kbd&gt;/&lt;kbd&gt;S&lt;/kbd&gt; after a successful snipe (or with &lt;kbd&gt;s&lt;/kbd&gt;+&lt;kbd&gt;RET&lt;/kbd&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Evil-snipe can override evil-mode&#39;s native motions with 1-char sniping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Globally&#xA;(evil-snipe-override-mode 1)&#xA;&#xA;;; Or locally&#xA;(add-hook &#39;ruby-mode-hook &#39;evil-snipe-override-local-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The benefit of this is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Incremental highlighting&lt;/li&gt; &#xA; &lt;li&gt;You can repeat searches with &lt;kbd&gt;f&lt;/kbd&gt;, &lt;kbd&gt;F&lt;/kbd&gt;, &lt;kbd&gt;t&lt;/kbd&gt; and &lt;kbd&gt;T&lt;/kbd&gt; (ala &lt;a href=&#34;https://github.com/rhysd/clever-f.vim&#34;&gt;Clever-F&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;;&lt;/kbd&gt; and &lt;kbd&gt;,&lt;/kbd&gt; are available for repeating searches (and won&#39;t interfere with the original maps; they take effect only after a successful snipe)&lt;/li&gt; &#xA; &lt;li&gt;A more streamlined experience in general&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;Search scope&lt;/h3&gt; &#xA;&lt;p&gt;These three variables determine the scope of snipes (and the incremental highlighter):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-scope&lt;/code&gt; (default: &lt;code&gt;line&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-repeat-scope&lt;/code&gt; (default: &lt;code&gt;whole-line&lt;/code&gt;) Scope while &lt;em&gt;repeating&lt;/em&gt; searches with &lt;code&gt;evil-snipe-repeat&lt;/code&gt; or &lt;code&gt;evil-snipe-repeat-reverse&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-spillover-scope&lt;/code&gt; (default: &lt;code&gt;nil&lt;/code&gt;) Scope to expand to when a snipe fails. Only useful if set to a broader scope than &lt;code&gt;evil-snipe-scope&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are the possible settings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;line&lt;/td&gt; &#xA;   &lt;td&gt;rest of the current line after cursor (&lt;code&gt;vim-seek&lt;/code&gt; behavior)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;buffer&lt;/td&gt; &#xA;   &lt;td&gt;rest of the buffer after cursor (&lt;code&gt;vim-sneak&lt;/code&gt; behavior)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;visible&lt;/td&gt; &#xA;   &lt;td&gt;the rest of the &lt;em&gt;visible&lt;/em&gt; buffer after cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;whole-line&lt;/td&gt; &#xA;   &lt;td&gt;same as &lt;code&gt;&#39;line&lt;/code&gt;, but highlights on either side of cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;whole-buffer&lt;/td&gt; &#xA;   &lt;td&gt;same as &lt;code&gt;&#39;buffer&lt;/code&gt;, but highlights &lt;em&gt;all&lt;/em&gt; matches in buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;whole-visible&lt;/td&gt; &#xA;   &lt;td&gt;same as &lt;code&gt;&#39;visible&lt;/code&gt;, but highlights &lt;em&gt;all&lt;/em&gt; visible matches in buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Character aliases&lt;/h3&gt; &#xA;&lt;p&gt;Specific characters can be aliased to regex patterns by modifying &lt;code&gt;evil-snipe-aliases&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To map &lt;kbd&gt;[&lt;/kbd&gt; to any opening parentheses or bracket &lt;strong&gt;in all modes&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(push &#39;(?\[ &#34;[[{(]&#34;) evil-snipe-aliases)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Therefore, &lt;kbd&gt;s&lt;/kbd&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;kbd&gt;[&lt;/kbd&gt; will match &lt;code&gt;a[&lt;/code&gt;, &lt;code&gt;a{&lt;/code&gt; or &lt;code&gt;a(&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To map &lt;kbd&gt;:&lt;/kbd&gt; to a python function (but only in &lt;code&gt;python-mode&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(add-hook &#39;python-mode-hook&#xA;  (lambda ()&#xA;    (make-variable-buffer-local &#39;evil-snipe-aliases)&#xA;    (push &#39;(?: &#34;def .+:&#34;) evil-snipe-aliases)))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Faces&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-first-match-face&lt;/code&gt;: The first highlighted match.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-matches-face&lt;/code&gt;: The rest of the highlighted matches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sniping in visual mode&lt;/h3&gt; &#xA;&lt;p&gt;To avoid binding conflicts, evil-snipe has no visual mode bindings. You can add them with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(evil-define-key &#39;visual evil-snipe-local-mode-map &#34;z&#34; &#39;evil-snipe-s)&#xA;(evil-define-key &#39;visual evil-snipe-local-mode-map &#34;Z&#34; &#39;evil-snipe-S)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration into avy/evil-easymotion&lt;/h3&gt; &#xA;&lt;p&gt;This will allow you to quickly hop into avy/evil-easymotion right after a snipe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(define-key evil-snipe-parent-transient-map (kbd &#34;C-;&#34;)&#xA;  (evilem-create &#39;evil-snipe-repeat&#xA;                 :bind ((evil-snipe-scope &#39;buffer)&#xA;                        (evil-snipe-enable-highlight)&#xA;                        (evil-snipe-enable-incremental-highlight))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Thanks to &lt;a href=&#34;https://github.com/PythonNut&#34;&gt;PythonNut&lt;/a&gt; for this. &lt;a href=&#34;https://github.com/hlissner/evil-snipe/issues/25#issuecomment-208068419&#34;&gt;More info here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Conflicts with other plugins&lt;/h2&gt; &#xA;&lt;p&gt;It seems &lt;code&gt;evil-snipe-override-mode&lt;/code&gt; causes problems in Magit buffers, to fix this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(add-hook &#39;magit-mode-hook &#39;turn-off-evil-snipe-override-mode)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;Other settings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-enable-highlight&lt;/code&gt; (default: &lt;code&gt;t&lt;/code&gt;) Highlight first match.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-enable-incremental-highlight&lt;/code&gt; (default: &lt;code&gt;t&lt;/code&gt;) Incrementally highlight all matches in scope.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-override-evil-repeat-keys&lt;/code&gt; (default: &lt;code&gt;t&lt;/code&gt;) Whether or not evil-snipe will override evil&#39;s default &lt;kbd&gt;;&lt;/kbd&gt; and &lt;kbd&gt;,&lt;/kbd&gt; mappings with snipe&#39;s (when &lt;code&gt;evil-snipe-override-mode&lt;/code&gt; is on).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-repeat-keys&lt;/code&gt; (default &lt;code&gt;t&lt;/code&gt;) If non-nil, pressing &lt;kbd&gt;s&lt;/kbd&gt;/&lt;kbd&gt;S&lt;/kbd&gt; after a search will repeat it. If &lt;code&gt;evil-snipe-override-evil&lt;/code&gt; is non-nil, this applies to f/F/t/T as well.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-show-prompt&lt;/code&gt; (default &lt;code&gt;t&lt;/code&gt;) Whether or not to show the &#34;N&amp;gt;&#34; prompt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-smart-case&lt;/code&gt; (default &lt;code&gt;nil&lt;/code&gt;) If non-nil, searches will be case-insenstive unless your search contains a capital letter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-auto-scroll&lt;/code&gt; (default &lt;code&gt;nil&lt;/code&gt;) If non-nil, the window will scroll to follow the cursor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-auto-disable-substitute&lt;/code&gt; (default: &lt;code&gt;t&lt;/code&gt;) Whether or not evil&#39;s default substitute mappings (s/S) are unset. They can sometimes interfere with snipe. Must be set &lt;em&gt;before&lt;/em&gt; evil-snipe is loaded.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-skip-leading-whitespace&lt;/code&gt; (default &lt;code&gt;t&lt;/code&gt;) If non-nil, sniping will skip over leading whitespace when you search for whitespace.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-tab-increment&lt;/code&gt; (default &lt;code&gt;nil&lt;/code&gt;) If non-nil, pressing TAB in the snipe prompt will increase the size of the snipe buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-use-vim-sneak-bindings&lt;/code&gt; (default &lt;code&gt;nil&lt;/code&gt;) If non-nil, evil-snipe binds z/Z to exclusive sniping in operator state, but leaves the x/X bindings free. This mirrors the default bindings of vim-sneak, and frees up cx/cX to be used by &lt;a href=&#34;https://github.com/Dewdrops/evil-exchange&#34;&gt;evil-exchange&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-mode&lt;/code&gt; / &lt;code&gt;evil-snipe-local-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-override-mode&lt;/code&gt; / &lt;code&gt;evil-snipe-override-local-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-repeat&lt;/code&gt; / &lt;code&gt;evil-snipe-repeat-reverse&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-s&lt;/code&gt; / &lt;code&gt;evil-snipe-S&lt;/code&gt;: inclusive 2-char sniping&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-x&lt;/code&gt; / &lt;code&gt;evil-snipe-X&lt;/code&gt;: exclusive 2-char sniping&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-f&lt;/code&gt; / &lt;code&gt;evil-snipe-F&lt;/code&gt;: inclusive 1-char sniping&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;evil-snipe-t&lt;/code&gt; / &lt;code&gt;evil-snipe-T&lt;/code&gt;: exclusive 1-char sniping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Default keybindings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(evil-define-key &#39;(normal motion) evil-snipe-local-mode-map&#xA;  &#34;s&#34; &#39;evil-snipe-s&#xA;  &#34;S&#34; &#39;evil-snipe-S)&#xA;&#xA;(evil-define-key &#39;operator evil-snipe-local-mode-map&#xA;  &#34;z&#34; &#39;evil-snipe-s&#xA;  &#34;Z&#34; &#39;evil-snipe-S&#xA;  &#34;x&#34; &#39;evil-snipe-x&#xA;  &#34;X&#34; &#39;evil-snipe-X)&#xA;&#xA;(evil-define-key &#39;motion evil-snipe-override-local-mode-map&#xA;  &#34;f&#34; &#39;evil-snipe-f&#xA;  &#34;F&#34; &#39;evil-snipe-F&#xA;  &#34;t&#34; &#39;evil-snipe-t&#xA;  &#34;T&#34; &#39;evil-snipe-T)&#xA;&#xA;(when evil-snipe-override-evil-repeat-keys&#xA;  (evil-define-key &#39;motion map&#xA;    &#34;;&#34; &#39;evil-snipe-repeat&#xA;    &#34;,&#34; &#39;evil-snipe-repeat-reverse))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>edkolev/evil-goggles</title>
    <updated>2022-11-07T01:36:23Z</updated>
    <id>tag:github.com,2022-11-07:/edkolev/evil-goggles</id>
    <link href="https://github.com/edkolev/evil-goggles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display visual hint on evil edit operations&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/edkolev/evil-goggles&#34;&gt;&lt;img src=&#34;https://travis-ci.org/edkolev/evil-goggles.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/evil-goggles.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/evil-goggles.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/evil-goggles&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/evil-goggles-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;evil-goggles&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1532071/26526401/2d10961e-4382-11e7-8c40-5b7fb3a79756.jpg&#34; alt=&#34;evil-goggles&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;evil-goggles-mode&lt;/code&gt; displays a visual hint when editing with &lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1532071/25412512/ece4e108-29d7-11e7-90ba-834923c05a02.gif&#34; alt=&#34;yank-paste-delete&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1532071/25314980/2df8fbbc-2856-11e7-926f-8d23bcbda934.gif&#34; alt=&#34;change&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1532071/25258972/e14d6412-264b-11e7-8d20-9c930c78c179.gif&#34; alt=&#34;join-lines&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1532071/25314629/889ae018-2850-11e7-9c9b-579edda38771.gif&#34; alt=&#34;indent-region&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1532071/30509413-ce64fc84-9ab8-11e7-9f33-107c1a62f653.gif&#34; alt=&#34;undo-redo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1532071/25314628/889ab1c4-2850-11e7-9cf5-c801b8293583.gif&#34; alt=&#34;fast-replace&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Enable &lt;code&gt;(evil-goggles-mode)&lt;/code&gt;, then edit text like you normally would, try for example &lt;code&gt;yy&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;dd&lt;/code&gt; in normal state.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;with &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt; from &lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;NonGNU ELPA&lt;/a&gt; or &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(use-package evil-goggles&#xA;  :ensure t&#xA;  :config&#xA;  (evil-goggles-mode)&#xA;&#xA;  ;; optionally use diff-mode&#39;s faces; as a result, deleted text&#xA;  ;; will be highlighed with `diff-removed` face which is typically&#xA;  ;; some red color (as defined by the color theme)&#xA;  ;; other faces such as `diff-added` will be used for other actions&#xA;  (evil-goggles-use-diff-faces))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;without &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt; from &lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;NonGNU ELPA&lt;/a&gt; or &lt;a href=&#34;https://melpa.org&#34;&gt;MELPA&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install RET evil-goggles RET&lt;/code&gt;, then add in &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;(evil-goggles-mode)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Actions with visual hint&lt;/h2&gt; &#xA;&lt;h4&gt;edit actions with hint&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;delete&lt;/li&gt; &#xA; &lt;li&gt;change&lt;/li&gt; &#xA; &lt;li&gt;yank&lt;/li&gt; &#xA; &lt;li&gt;paste&lt;/li&gt; &#xA; &lt;li&gt;indent (&lt;code&gt;=&lt;/code&gt; operator)&lt;/li&gt; &#xA; &lt;li&gt;join&lt;/li&gt; &#xA; &lt;li&gt;format (&lt;code&gt;gq&lt;/code&gt; operator)&lt;/li&gt; &#xA; &lt;li&gt;shift left and right (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; operators)&lt;/li&gt; &#xA; &lt;li&gt;undo&lt;/li&gt; &#xA; &lt;li&gt;redo&lt;/li&gt; &#xA; &lt;li&gt;set mark&lt;/li&gt; &#xA; &lt;li&gt;start/stop macro recording&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;evil plugins with hint&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;surround &lt;a href=&#34;https://github.com/timcharper/evil-surround&#34;&gt;evil-surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;commentary &lt;a href=&#34;https://github.com/linktohack/evil-commentary&#34;&gt;evil-commentary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;nerd-commenter &lt;a href=&#34;https://github.com/redguardtoo/evil-nerd-commenter&#34;&gt;evil-nerd-commenter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;replace with register &lt;a href=&#34;https://github.com/Dewdrops/evil-ReplaceWithRegister&#34;&gt;evil-ReplaceWithRegister&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;evil-org &lt;a href=&#34;https://github.com/Somelauw/evil-org-mode/issues&#34;&gt;evil-org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customizations&lt;/h2&gt; &#xA;&lt;h4&gt;Appearance Customization&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To pulse the visual hint, rather than just show and hide it:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq evil-goggles-pulse t) ;; default is to pulse when running in a graphic display&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To change the default face:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(custom-set-faces&#xA; &#39;(evil-goggles-default-face ((t (:inherit &#39;highlight))))) ;; default is to inherit &#39;region&#xA;;; run `M-x list-faces-display` in a fresh emacs to get a list of faces on your emacs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, all goggles&#39; faces inherit &lt;code&gt;evil-goggles-default-face&lt;/code&gt;, which in turn inherits emacs&#39; &lt;code&gt;region&lt;/code&gt; face.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To use different faces per edit action:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(custom-set-faces&#xA; &#39;(evil-goggles-delete-face ((t (:inherit &#39;shadow))))&#xA; &#39;(evil-goggles-paste-face ((t (:inherit &#39;lazy-highlight))))&#xA; &#39;(evil-goggles-yank-face ((t (:inherit &#39;isearch-fail)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The following faces are defined by evil-goggles:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;evil-goggles-default-face - inherits from `region` by default&#xA;&#xA;evil-goggles-delete-face - this, and the others below, inherit from `evil-goggles-default-face`&#xA;evil-goggles-change-face&#xA;evil-goggles-indent-face&#xA;evil-goggles-yank-face&#xA;evil-goggles-join-face&#xA;evil-goggles-fill-and-move-face&#xA;evil-goggles-paste-face&#xA;evil-goggles-shift-face&#xA;evil-goggles-surround-face&#xA;evil-goggles-commentary-face&#xA;evil-goggles-nerd-commenter-face&#xA;evil-goggles-replace-with-register-face&#xA;evil-goggles-set-marker-face&#xA;evil-goggles-undo-redo-add-face&#xA;evil-goggles-undo-redo-remove-face&#xA;evil-goggles-undo-redo-change-face&#xA;evil-goggles-record-macro-face&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Other Customizations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The duration of the overlay is configured with &lt;code&gt;evil-goggles-duration&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq evil-goggles-duration 0.100) ;; default is 0.200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For more fine grained duration configuration, these can be modified:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; this variable affects &#34;blocking&#34; hints, for example when deleting - the hint is displayed,&#xA;;; the deletion is delayed (blocked) until the hint disappers, then the hint is removed and the&#xA;;; deletion executed; it makes sense to have this duration short&#xA;(setq evil-goggles-blocking-duration 0.100) ;; default is nil, i.e. use `evil-goggles-duration&#39;&#xA;&#xA;;; this variable affects &#34;async&#34; hints, for example when indenting - the indentation&#xA;;; is performed with the hint visible, i.e. the hint is displayed, the action (indent) is&#xA;;; executed (asynchronous), then the hint is removed, highlighting the result of the indentation&#xA;(setq evil-goggles-async-duration 0.900) ;; default is nil, i.e. use `evil-goggles-duration&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To disable the hint on certain actions modify these variable before &lt;code&gt;evil-goggles-mode&lt;/code&gt; is started:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;;; to disable the hint when pasting:&#xA;(setq evil-goggles-enable-paste nil)&#xA;&#xA;;; list of all on/off variables, their default value is `t`:&#xA;;;&#xA;;; evil-goggles-enable-delete&#xA;;; evil-goggles-enable-change&#xA;;; evil-goggles-enable-indent&#xA;;; evil-goggles-enable-yank&#xA;;; evil-goggles-enable-join&#xA;;; evil-goggles-enable-fill-and-move&#xA;;; evil-goggles-enable-paste&#xA;;; evil-goggles-enable-shift&#xA;;; evil-goggles-enable-surround&#xA;;; evil-goggles-enable-commentary&#xA;;; evil-goggles-enable-nerd-commenter&#xA;;; evil-goggles-enable-replace-with-register&#xA;;; evil-goggles-enable-set-marker&#xA;;; evil-goggles-enable-undo&#xA;;; evil-goggles-enable-redo&#xA;;; evil-goggles-enable-record-macro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;NEWS - Recent Significant Changes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[Jul 01, 2018] Make async hint cleanup more robust&lt;/li&gt; &#xA; &lt;li&gt;[Jun 01, 2018] Refactor code to not use :around advice-s, which was a source of edge-case-issues&lt;/li&gt; &#xA; &lt;li&gt;[Feb 05, 2018] Show hint on start/stop macro recording&lt;/li&gt; &#xA; &lt;li&gt;[Dec 02, 2017] Pulsing hints is no longer experimental&lt;/li&gt; &#xA; &lt;li&gt;[Nov 03, 2017] Add options &lt;code&gt;evil-goggles-async-duration&lt;/code&gt; and &lt;code&gt;evil-goggles-blocking-duration&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Sep 17, 2017] Add experimental support for pulsing hints (no longer experimental since Dec 02, 2017)&lt;/li&gt; &#xA; &lt;li&gt;[Sep 16, 2017] Support for undo/redo is no longer experimental&lt;/li&gt; &#xA; &lt;li&gt;[Sep 13, 2017] Emacs 24 support&lt;/li&gt; &#xA; &lt;li&gt;[Aug 02, 2017] Add experimental support for undo/redo (no longer experimental since Sep 16, 2017)&lt;/li&gt; &#xA; &lt;li&gt;[May 28, 2017] Switched to using per-action on/off custom variables, deprecated &lt;code&gt;evil-goggles-blacklist&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;[May 28, 2017] Switched to using custom faces per action, deprecated &lt;code&gt;evil-goggles-faces-alist&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>