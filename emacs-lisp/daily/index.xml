<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-20T01:38:30Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shopify/shadowenv.el</title>
    <updated>2022-07-20T01:38:30Z</updated>
    <id>tag:github.com,2022-07-20:/Shopify/shadowenv.el</id>
    <link href="https://github.com/Shopify/shadowenv.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shadowenv integration for emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;shadowenv.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/shadowenv&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/shadowenv-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://shopify.github.io/shadowenv&#34;&gt;Shadowenv&lt;/a&gt; integration for emacs, per-buffer environment shadowing and eshell integration. Display the number of shadowed environment variables in the mode line.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;shadowenv-mode&lt;/code&gt; Toggle shadowenv mode in a buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shadowenv-global-mode&lt;/code&gt; Enable global shadowenv mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shadowenv-reload&lt;/code&gt; Reload shadowenv environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shadowenv-shadows&lt;/code&gt; Display changes to the current environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;use-package&lt;/h2&gt; &#xA;&lt;p&gt;Here is an example &lt;code&gt;use-package&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package shadowenv&#xA;  :ensure t&#xA;  :hook (after-init . shadowenv-global-mode))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>atomontage/xterm-color</title>
    <updated>2022-07-20T01:38:30Z</updated>
    <id>tag:github.com,2022-07-20:/atomontage/xterm-color</id>
    <link href="https://github.com/atomontage/xterm-color" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ANSI &amp; xterm-256 color text property translator for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[https://opensource.org/licenses/BSD-2-Clause][https://img.shields.io/badge/license-BSD-blue.svg]] [[https://melpa.org/#/xterm-color][https://melpa.org/packages/xterm-color-badge.svg]] [[http://stable.melpa.org/#/xterm-color][https://stable.melpa.org/packages/xterm-color-badge.svg]]&lt;/p&gt; &#xA;&lt;p&gt;xterm-color.el is an ANSI control sequence to text-property translator.&lt;/p&gt; &#xA;&lt;p&gt;Translation takes place through state machine emulation which provides a far more accurate, comprehensive result than ansi-color.el that is built-into Emacs, without compromising on performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Regular ANSI color support&lt;/li&gt; &#xA; &lt;li&gt;XTERM 256 color support&lt;/li&gt; &#xA; &lt;li&gt;Truecolor (24-bit) support&lt;/li&gt; &#xA; &lt;li&gt;AIXTERM bright foreground color&lt;/li&gt; &#xA; &lt;li&gt;AIXTERM bright background color (since 1.8)&lt;/li&gt; &#xA; &lt;li&gt;Use bold instead of bright (since 1.8)&lt;/li&gt; &#xA; &lt;li&gt;When colorizing entire buffers, optional overlay support (since 2.0)&lt;/li&gt; &#xA; &lt;li&gt;Optionally, filter out ANSI control sequences (since 2.0)&lt;/li&gt; &#xA; &lt;li&gt;Works with compilation-mode&lt;/li&gt; &#xA; &lt;li&gt;Works with eshell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Simple and most flexible method:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp ;; Clone this repository, ensure directory of xterm-color.el is in your ;; load-path and add the following to your init file: (require &#39;xterm-color)&lt;/p&gt; &#xA;&lt;p&gt;;; You should byte-compile xterm-color.el for maximum performance. #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can install through [[https://melpa.org/][MELPA]] or some other Emacs package manager.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage Interactively or from Emacs Lisp, call &lt;del&gt;xterm-color-colorize-buffer&lt;/del&gt; to colorize an entire buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may customize &lt;del&gt;xterm-color-debug&lt;/del&gt; (default nil, if non-nil you will get warnings in &lt;em&gt;Messages&lt;/em&gt; when unsupported escape sequences are encountered), &lt;del&gt;xterm-color-use-bold-for-bright&lt;/del&gt; (default nil), &lt;del&gt;xterm-color-names&lt;/del&gt;, &lt;del&gt;xterm-color-names-bright&lt;/del&gt;. Additionally, you may set &lt;del&gt;xterm-color-preserve-properties&lt;/del&gt; to t (default nil, should be set to t only if using xterm-color with eshell, see below).&lt;/p&gt; &#xA;&lt;p&gt;If you want to filter out all ANSI control sequences, without applying them to the text, set &lt;del&gt;xterm-color-render&lt;/del&gt; to nil.&lt;/p&gt; &#xA;&lt;p&gt;A buffer-local face attribute cache is used since 1.8 to improve performance. This means that if changes are made to &lt;del&gt;xterm-color-names&lt;/del&gt; or &lt;del&gt;xterm-color-names-bright&lt;/del&gt; or &lt;del&gt;xterm-color-use-bold-for-bright&lt;/del&gt; at runtime, &lt;del&gt;xterm-color-clear-cache&lt;/del&gt; should be called in a buffer with activated xterm-color for changes to take effect in that buffer.&lt;/p&gt; &#xA;&lt;p&gt;** Comint You can replace ansi-color.el with xterm-color for all comint buffers, but you should take into account modes that propertize strings and pass them through &lt;del&gt;comint-preoutput-filter-functions&lt;/del&gt; since &lt;del&gt;xterm-color-filter&lt;/del&gt; will strip all text properties (this is done to get maximum performance). The recommended configuration that avoids issues is to remove &lt;del&gt;ansi-color-process-output&lt;/del&gt; from &lt;del&gt;comint-output-filter-functions&lt;/del&gt; and add &lt;del&gt;xterm-color-filter&lt;/del&gt; as the &lt;em&gt;first&lt;/em&gt; hook in the buffer-local &lt;del&gt;comint-preoutput-filter-functions&lt;/del&gt; for any comint-based mode that you would like it to affect (e.g. shell-mode).&lt;/p&gt; &#xA;&lt;p&gt;Additionally, it is recommended to disable font-locking for shell-mode buffers [[https://github.com/atomontage/xterm-color/issues/28][since it interacts badly with comint and drastically affects performance]]. Font locking in shell-mode buffers is superfluous since xterm-color.el will handle faces fine by itself.&lt;/p&gt; &#xA;&lt;p&gt;Example configuration for shell-mode (M-x shell):&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq comint-output-filter-functions (remove &#39;ansi-color-process-output comint-output-filter-functions))&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;shell-mode-hook (lambda () ;; Disable font-locking in this buffer to improve performance (font-lock-mode -1) ;; Prevent font-locking from being re-enabled in this buffer (make-local-variable &#39;font-lock-function) (setq font-lock-function (lambda (_) nil)) (add-hook &#39;comint-preoutput-filter-functions &#39;xterm-color-filter nil t)))&lt;/p&gt; &#xA;&lt;p&gt;;; Also set TERM accordingly (xterm-256color) in the shell itself. #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;del&gt;compilation-shell-minor-mode&lt;/del&gt; (NOTE: not the same as compilation-mode) with shell-mode buffers that have xterm-color enabled is NOT recommended, as &lt;del&gt;compilation-shell-minor-mode&lt;/del&gt; depends on font-locking and causes severe performance degradation. Omit the statements that disable font-locking in the shell-mode example configuration if you need it.&lt;/p&gt; &#xA;&lt;p&gt;** Eshell An example configuration for eshell:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (require &#39;eshell) ; or use with-eval-after-load&lt;/p&gt; &#xA;&lt;p&gt;(add-hook &#39;eshell-before-prompt-hook (lambda () (setq xterm-color-preserve-properties t)))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;eshell-preoutput-filter-functions &#39;xterm-color-filter) (setq eshell-output-filter-functions (remove &#39;eshell-handle-ansi-color eshell-output-filter-functions)) (setenv &#34;TERM&#34; &#34;xterm-256color&#34;) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Compilation buffers For standalone compilation buffers use the following configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq compilation-environment &#39;(&#34;TERM=xterm-256color&#34;))&lt;/p&gt; &#xA;&lt;p&gt;(defun my/advice-compilation-filter (f proc string) (funcall f proc (xterm-color-filter string)))&lt;/p&gt; &#xA;&lt;p&gt;(advice-add &#39;compilation-filter :around #&#39;my/advice-compilation-filter) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: This compilation-mode configuration will break [[https://github.com/Wilfred/ag.el][ag.el]] and [[https://github.com/dajva/rg.el][rg.el]], since these packages expect ANSI control sequences to be part of compilation output so that they can be used for matching. Suggestions for these packages to improve the way they perform matching [[https://github.com/dajva/rg.el/issues/65][already]] [[https://github.com/atomontage/xterm-color/issues/37][exist]].&lt;/p&gt; &#xA;&lt;p&gt;** Other For programmatic usage from Emacs Lisp, call &lt;del&gt;xterm-color-filter&lt;/del&gt; to propertize strings that you can then insert into a buffer. All state is kept in buffer-local variables which means that control sequences can span &lt;del&gt;xterm-color-filter&lt;/del&gt; calls (state machine processing).&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (let ((buffer (generate-new-buffer &#34;&lt;em&gt;xterm-color-test&lt;/em&gt;&#34;))) (with-current-buffer buffer (insert (xterm-color-filter &#34;\x1b[0;1;3;4&#34;)) (insert (xterm-color-filter &#34;;35&#34;)) (insert (xterm-color-filter &#34;;51mThis is only a test&#34;)) (insert (xterm-color-filter &#34;\x1b[0m&#34;))) (switch-to-buffer buffer)) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test #+BEGIN_SRC emacs-lisp M-x xterm-color-test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For comint or eshell:&lt;/p&gt; &#xA;&lt;p&gt;M-x shell || M-x eshell&lt;/p&gt; &#xA;&lt;p&gt;perl tests/xterm-colortest &amp;amp;&amp;amp; perl tests/256colors2.pl&lt;/p&gt; &#xA;&lt;p&gt;printf &#34;\x1b[0;1;3;4;35;51mThis is only a test\x1b[0m\n&#34;&lt;/p&gt; &#xA;&lt;p&gt;Comparison with ansi-color.el:&lt;/p&gt; &#xA;&lt;p&gt;M-x xterm-color-test-raw then M-x xterm-color-colorize-buffer&lt;/p&gt; &#xA;&lt;p&gt;and contrast with&lt;/p&gt; &#xA;&lt;p&gt;M-x xterm-color-test-raw then M-: (ansi-color-apply-on-region (point-min) (point-max))&lt;/p&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;[[file:img/xterm-color.png][file:img/xterm-color-thumb.png]] [[file:img/godwars2.png][file:img/godwars2-thumb.png]] [[file:img/wttr.png][file:img/wttr-thumb.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;License The code comes with a BSD-style license so you can basically do with it whatever you want.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Author xristos (AT) sdf (DOT) org&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>denrat/term-cursor.el</title>
    <updated>2022-07-20T01:38:30Z</updated>
    <id>tag:github.com,2022-07-20:/denrat/term-cursor.el</id>
    <link href="https://github.com/denrat/term-cursor.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bring GUI Emacs cursor behaviour to the terminal&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;term-cursor.el&lt;/h1&gt; &#xA;&lt;p&gt;Display Emacs cursor in terminal as it would be in GUI, with or without &lt;code&gt;evil-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Requires Emacs 26.&lt;/p&gt; &#xA;&lt;h2&gt;Compliance&lt;/h2&gt; &#xA;&lt;p&gt;For now, only VT520-compliant terminals are supported out of the box. You can still use &lt;a href=&#34;https://raw.githubusercontent.com/denrat/term-cursor.el/master/#my-terminal-is-not-supported&#34;&gt;your own escape codes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Tested in kitty, iTerm2, Alacritty and Terminal.app on macOS Mojave. Contribution is welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;code&gt;quelpa&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(quelpa &#39;(term-cursor :repo &#34;h0d/term-cursor.el&#34; :fetcher github))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manual&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Once `term-cursor.el&#39; has been added to load path&#xA;(require &#39;term-cursor)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MELPA pending.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; In a buffer&#xA;(term-cursor-mode)&#xA;&#xA;;; For all buffers&#xA;(global-term-cursor-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;My terminal is not supported&lt;/h2&gt; &#xA;&lt;p&gt;If you know the escape codes for your terminal, you can specify them in your configuration or through &lt;code&gt;M-x customize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(setq term-cursor-bar-escape-code        &#34;&amp;lt;your escape code&amp;gt;&#34;)&#xA;(setq term-cursor-underline-escape-code  &#34;&amp;lt;your escape code&amp;gt;&#34;)&#xA;(setq term-cursor-block-escape-code      &#34;&amp;lt;your escape code&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>