<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T01:40:34Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>magnars/multiple-cursors.el</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/magnars/multiple-cursors.el</id>
    <link href="https://github.com/magnars/multiple-cursors.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multiple cursors for emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/magnars/multiple-cursors.el/actions&#34;&gt;&lt;img src=&#34;https://github.com/magnars/multiple-cursors.el/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/multiple-cursors&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/multiple-cursors-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/multiple-cursors&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/multiple-cursors-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/multiple-cursors.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/multiple-cursors.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;multiple-cursors.el&lt;/h1&gt; &#xA;&lt;p&gt;Multiple cursors for Emacs. This is some pretty crazy functionality, so yes, there are kinks. Don&#39;t be afraid though, I&#39;ve been using it since 2011 with great success and much merriment.&lt;/p&gt; &#xA;&lt;h2&gt;Maintenance warning&lt;/h2&gt; &#xA;&lt;p&gt;I use this package every day, and have been doing so for years. It just works. At least, it works for all my use cases. And if it breaks somehow, I fix it.&lt;/p&gt; &#xA;&lt;p&gt;However, it has become painfully clear to me that I don&#39;t have time to fix problems I don&#39;t have. It&#39;s been years since I could keep pace with the issues and pull requests. Whenever I try, I keep getting feedback that my fix isn&#39;t good enough by some standard I don&#39;t particularly care about.&lt;/p&gt; &#xA;&lt;p&gt;So, I have closed the issue tracker and the pull requests. I hope you can happily use this package, just like I do. If it doesn&#39;t work for you, then I&#39;m sorry. Thankfully Emacs is infinitely malleable, you can probably fix it yourself.&lt;/p&gt; &#xA;&lt;p&gt;TLDR: &lt;em&gt;I am still maintaining this package&lt;/em&gt;, but I am no longer crowdsourcing a list of issues.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;I highly recommend installing multiple-cursors through &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s available on &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt;, &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt; and &lt;a href=&#34;https://elpa.nongnu.org/nongnu/multiple-cursors.html&#34;&gt;NonGNU ELPA&lt;/a&gt; (enabled by default from Emacs 28 onwards):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install multiple-cursors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The package depends on the &lt;code&gt;cl-lib&lt;/code&gt; package, so if you do not use &lt;code&gt;package.el&lt;/code&gt; or have a recent Emacs, you would need to install that too: see &lt;a href=&#34;http://elpa.gnu.org/packages/cl-lib.html&#34;&gt;GNU ELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;Start out with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(require &#39;multiple-cursors)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you have to set up your keybindings - multiple-cursors doesn&#39;t presume to know how you&#39;d like them laid out. Here are some examples:&lt;/p&gt; &#xA;&lt;p&gt;When you have an active region that spans multiple lines, the following will add a cursor to each line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &#34;C-S-c C-S-c&#34;) &#39;mc/edit-lines)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &#34;C-&amp;gt;&#34;) &#39;mc/mark-next-like-this)&#xA;(global-set-key (kbd &#34;C-&amp;lt;&#34;) &#39;mc/mark-previous-like-this)&#xA;(global-set-key (kbd &#34;C-c C-&amp;lt;&#34;) &#39;mc/mark-all-like-this)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First mark the word, then add more cursors.&lt;/p&gt; &#xA;&lt;p&gt;To get out of multiple-cursors-mode, press &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; or &lt;code&gt;C-g&lt;/code&gt;. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use &lt;code&gt;C-j&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Important note&lt;/h2&gt; &#xA;&lt;p&gt;Multiple cursors does not do well when you invoke its commands with &lt;code&gt;M-x&lt;/code&gt;. It needs to be bound to keys to work properly. Pull request to fix this is welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;http://emacsrocks.com/e13.html&#34;&gt;watch an intro to multiple-cursors at Emacs Rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command overview&lt;/h2&gt; &#xA;&lt;h3&gt;Mark one more occurrence&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-next-like-this&lt;/code&gt;: Adds a cursor and region at the next part of the buffer forwards that matches the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-next-like-this-word&lt;/code&gt;: Adds a cursor and region at the next part of the buffer forwards that matches the current region, if no region is selected it selects the word at the point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-next-like-this-symbol&lt;/code&gt;: Adds a cursor and region at the next part of the buffer forwards that matches the current region, if no region is selected it selects the symbol at the point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-next-word-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; but only for whole words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-next-symbol-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; but only for whole symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-previous-like-this&lt;/code&gt;: Adds a cursor and region at the next part of the buffer backwards that matches the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-previous-like-this-word&lt;/code&gt;: Adds a cursor and region at the next part of the buffer backwards that matches the current region, if no region is selected it selects the word at the point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-previous-like-this-symbol&lt;/code&gt;: Adds a cursor and region at the next part of the buffer backwards that matches the current region, if no region is selected it selects the symbol at the point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-previous-word-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-previous-like-this&lt;/code&gt; but only for whole words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-previous-symbol-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-previous-like-this&lt;/code&gt; but only for whole symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-more-like-this-extended&lt;/code&gt;: Use arrow keys to quickly mark/skip next/previous occurrences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/add-cursor-on-click&lt;/code&gt;: Bind to a mouse event to add cursors by clicking. See tips-section.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-pop&lt;/code&gt;: Set a cursor at the current point and move to the next (different) position on the mark stack. This allows for fine grained control over the placement of cursors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Juggle around with the current cursors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/unmark-next-like-this&lt;/code&gt;: Remove the cursor furthest down in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/unmark-previous-like-this&lt;/code&gt;: Remove the cursor furthest up in the buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/skip-to-next-like-this&lt;/code&gt;: Remove the cursor furthest down, marking the next occurrence down.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/skip-to-previous-like-this&lt;/code&gt;: Remove the cursor furthest up, marking the next occurrence up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mark many occurrences&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/edit-lines&lt;/code&gt;: Adds one cursor to each line in the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/edit-beginnings-of-lines&lt;/code&gt;: Adds a cursor at the start of each line in the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/edit-ends-of-lines&lt;/code&gt;: Adds a cursor at the end of each line in the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-like-this&lt;/code&gt;: Marks all parts of the buffer that matches the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-words-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-all-like-this&lt;/code&gt; but only for whole words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-symbols-like-this&lt;/code&gt;: Like &lt;code&gt;mc/mark-all-like-this&lt;/code&gt; but only for whole symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-in-region&lt;/code&gt;: Prompts for a string to match in the region, adding cursors to all of them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-like-this-in-defun&lt;/code&gt;: Marks all parts of the current defun that matches the current region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-words-like-this-in-defun&lt;/code&gt;: Like &lt;code&gt;mc/mark-all-like-this-in-defun&lt;/code&gt; but only for whole words.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-symbols-like-this-in-defun&lt;/code&gt;: Like &lt;code&gt;mc/mark-all-like-this-in-defun&lt;/code&gt; but only for whole symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-all-dwim&lt;/code&gt;: Tries to be smart about marking everything you want. Can be pressed multiple times.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Special&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;set-rectangular-region-anchor&lt;/code&gt;: Think of this one as &lt;code&gt;set-mark&lt;/code&gt; except you&#39;re marking a rectangular region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/mark-sgml-tag-pair&lt;/code&gt;: Mark the current opening and closing tag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/insert-numbers&lt;/code&gt;: Insert increasing numbers for each cursor, top to bottom.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/insert-letters&lt;/code&gt;: Insert increasing letters for each cursor, top to bottom.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/sort-regions&lt;/code&gt;: Sort the marked regions alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/reverse-regions&lt;/code&gt;: Reverse the order of the marked regions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/vertical-align&lt;/code&gt;: Aligns all cursors vertically with a given CHARACTER to the one with the highest column number (the rightest). (Might not behave as intended if more than one cursors are on the same line.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc/vertical-align-with-space&lt;/code&gt;: Aligns all cursors with whitespace like &lt;code&gt;mc/vertical-align&lt;/code&gt; does.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tips and tricks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To get out of multiple-cursors-mode, press &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; or &lt;code&gt;C-g&lt;/code&gt;. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use &lt;code&gt;C-j&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;(define-key mc/keymap (kbd &#34;&amp;lt;return&amp;gt;&#34;) nil)&lt;/code&gt; will make &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; insert a newline; multiple-cursors-mode can still be disabled with &lt;code&gt;C-g&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sometimes you end up with cursors outside of your view. You can scroll the screen to center on each cursor with &lt;code&gt;C-v&lt;/code&gt; and &lt;code&gt;M-v&lt;/code&gt; or you can press &lt;code&gt;C-&#39;&lt;/code&gt; to hide all lines without a cursor, press &lt;code&gt;C-&#39;&lt;/code&gt; again to unhide.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try pressing &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; with no region selected. It will just add a cursor on the next line.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try pressing &lt;code&gt;mc/mark-next-like-this-word&lt;/code&gt; or &lt;code&gt;mc/mark-next-like-this-symbol&lt;/code&gt; with no region selected. It will mark the word or symbol and add a cursor at the next occurrence&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try pressing &lt;code&gt;mc/mark-all-like-this-dwim&lt;/code&gt; on a tagname in html-mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Notice that the number of cursors active can be seen in the modeline.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you get out of multiple-cursors-mode and yank - it will yank only from the kill-ring of main cursor. To yank from the kill-rings of every cursor use yank-rectangle, normally found at C-x r y.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use &lt;code&gt;mc/reverse-regions&lt;/code&gt; with nothing selected and just one cursor. It will then flip the sexp at point and the one below it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you use &lt;code&gt;mc/edit-lines&lt;/code&gt;, you can give it a positive or negative prefix to change how it behaves on too short lines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you would like to keep the global bindings clean, and get custom keybindings when the region is active, you can try &lt;a href=&#34;https://github.com/fgallina/region-bindings-mode&#34;&gt;region-bindings-mode&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is a special hook that is run when the mode is diabled (which is equivalent to the number of cursors going back to 1): &lt;code&gt;multiple-cursors-mode-disabled-hook&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;BTW, I highly recommend adding &lt;code&gt;mc/mark-next-like-this&lt;/code&gt; to a key binding that&#39;s right next to the key for &lt;code&gt;er/expand-region&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Binding mouse events&lt;/h3&gt; &#xA;&lt;p&gt;To override a mouse event, you will likely have to also unbind the &lt;code&gt;down-mouse&lt;/code&gt; part of the event. Like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-unset-key (kbd &#34;M-&amp;lt;down-mouse-1&amp;gt;&#34;))&#xA;(global-set-key (kbd &#34;M-&amp;lt;mouse-1&amp;gt;&#34;) &#39;mc/add-cursor-on-click)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can do like me and find an unused, but less convenient, binding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &#34;C-S-&amp;lt;mouse-1&amp;gt;&#34;) &#39;mc/add-cursor-on-click)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unknown commands&lt;/h2&gt; &#xA;&lt;p&gt;Multiple-cursors uses two lists of commands to know what to do: the run-once list and the run-for-all list. It comes with a set of defaults, but it would be beyond silly to try and include all the known Emacs commands.&lt;/p&gt; &#xA;&lt;p&gt;So that&#39;s why multiple-cursors occasionally asks what to do about a command. It will then remember your choice by saving it in &lt;code&gt;~/.emacs.d/.mc-lists.el&lt;/code&gt;. You can change the location with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(setq mc/list-file &#34;/my/preferred/file&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NB! Make sure to do so before requiring multiple-cursors.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to set multiple-cursors to &#34;run-for-all&#34; for every command except for those that are listed in &lt;code&gt;mc/cmds-to-run-once&lt;/code&gt;. To enable this set &lt;code&gt;mc/always-run-for-all&lt;/code&gt; to non-nil. Add commands to be run once to &lt;code&gt;mc/cmds-to-run-once&lt;/code&gt; in &#34;.mc-lists.el&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Known limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;isearch-forward and isearch-backward aren&#39;t supported with multiple cursors. If you want this functionality, you can use &lt;a href=&#34;https://github.com/zk-phi/phi-search&#34;&gt;phi-search&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Commands run with &lt;code&gt;M-x&lt;/code&gt; won&#39;t be repeated for all cursors.&lt;/li&gt; &#xA; &lt;li&gt;All key bindings that refer to lambdas are always run for all cursors. If you need to limit it, you will have to give it a name.&lt;/li&gt; &#xA; &lt;li&gt;Redo might screw with your cursors. Undo works very well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Yes, please do. There&#39;s a suite of tests, so remember to add tests for your specific feature, or I might break it later.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll find the repo at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/magnars/multiple-cursors.el&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To fetch the test dependencies, install &lt;a href=&#34;https://github.com/rejeep/cask.el&#34;&gt;cask&lt;/a&gt; if you haven&#39;t already, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd /path/to/multiple-cursors&#xA;$ cask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./run-tests.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tkf&#34;&gt;Takafumi Arakaki&lt;/a&gt; has contributed several small improvements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/segv&#34;&gt;Marco Baringer&lt;/a&gt; contributed looping to &lt;code&gt;mc/cycle&lt;/code&gt; and adding cursors without region for mark-more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gvol&#34;&gt;Ivan Andrus&lt;/a&gt; added showing number of cursors in mode-line, and different options for how to handle short lines in &lt;code&gt;mc/edit-lines&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fuco1&#34;&gt;Fuco&lt;/a&gt; added the first version of &lt;code&gt;mc/mark-all-like-this-dwim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smithzvk&#34;&gt;Zach Kost-Smith&lt;/a&gt; added &lt;code&gt;mc/mark-pop&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mathrick&#34;&gt;Maciej Katafiasz&lt;/a&gt; added &lt;code&gt;mc/mark-all-dwim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lexa&#34;&gt;Aleksey Fedotov&lt;/a&gt; added &lt;code&gt;mc-hide-unmatched-lines-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtamagnan&#34;&gt;Jules Tamagnan&lt;/a&gt; added &lt;code&gt;mc/mark-next-like-this-word&lt;/code&gt; and &lt;code&gt;mc/mark-next-like-this-symbol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ilohmar&#34;&gt;Ingo Lohmar&lt;/a&gt; extended &lt;code&gt;mc/add-cursor-on-click&lt;/code&gt; to toggle cursors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndreaOrru&#34;&gt;Andrea Orru&lt;/a&gt; added &lt;code&gt;mc/mark-previous-like-this-word&lt;/code&gt;/&lt;code&gt;-symbol&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2012-2016 Magnar Sveen&lt;/p&gt; &#xA;&lt;p&gt;Author: Magnar Sveen &lt;a href=&#34;mailto:magnars@gmail.com&#34;&gt;magnars@gmail.com&lt;/a&gt; Keywords: editing cursors&lt;/p&gt; &#xA;&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>practicalli/spacemacs.d</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/practicalli/spacemacs.d</id>
    <link href="https://github.com/practicalli/spacemacs.d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;rich Clojure &amp; LSP config for Spacemacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Practicalli Spacemacs (develop) configuration&lt;/h1&gt; &#xA;&lt;p&gt;This GitHub repository contains the current configuration to support the &lt;a href=&#34;https://practical.li/spacemacs&#34;&gt;Practicalli Spacemacs book&lt;/a&gt;. It contains the layers recommended for use for enhanced Clojure development experience as well as numerous tweaks for general &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/&#34;&gt;Spacemacs&lt;/a&gt; usage. The configuration also contains a number of snippets (code and configuration templates) for specific languages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://practical.li/spacemacs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/practicalli/spacemacs/main/images/practicalli-spacemacs-book-banner.png&#34; alt=&#34;Spacemacs Practicalli - Interactive Clojure development with Emacs and CIDER&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spacemacs Develop (now the default branch)&lt;/li&gt; &#xA; &lt;li&gt;Emacs 27.2, 28.x or 29.0.50 (emacs-snapshot)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code fonts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ligature support works best in Emacs 28.x. If experiencing errors in Emacs 27.x and cannot upgrade, commend the &lt;code&gt;unicode&lt;/code&gt; layer configuration in &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Emacs 29.x works with ligatures, although each time Spacemacs starts a cache of the Unicode bindings is created, adding 20-30 seconds to startup time. This seems to be due to an issue with pcache and Emacs 29.x&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Freedesktop.org XDG_CONFIG_HOME supported&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SPACEMACSDIR&lt;/code&gt; set to &lt;code&gt;$XDG_CONFIG_HOME/spacemacs&lt;/code&gt; allows your Spacemacs configuration to be used from the standard Freedesktop.org configuration location, by default &lt;code&gt;$HOME/.config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;SPACEMACSDIR&lt;/code&gt; and &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; via the &lt;code&gt;.profile&lt;/code&gt; file for of your account on your Operating System, which supports desktop applicaiton launchers and terminal shells. Or to support only terminal shells, add those variables to the shell resource files (e.g. &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;.zshenv&lt;/code&gt;) of your operating system.&lt;/p&gt; &#xA;&lt;h2&gt;Recommended Command Line tools&lt;/h2&gt; &#xA;&lt;p&gt;There are several &lt;a href=&#34;https://practicalli.github.io/spacemacs/before-you-start/recommended-command-line-tools.html&#34;&gt;command line tools that should be installed&lt;/a&gt; to support the use of the Practicalli Spacemacs configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Using this configuration directly&lt;/h2&gt; &#xA;&lt;p&gt;Visit GitHub and fork the practicalli/spacemacs.d repository. A fork is recommended so you can add your own customisations and save them to your own repository.&lt;/p&gt; &#xA;&lt;p&gt;In a terminal window, use git clone to copy your fork to your computer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone git@github.com:practicalli/spacemacs.d.git ~/.spacemacs.d&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are happy to use my Spacemacs configuration as it is, then remove your &lt;code&gt;~/.spacemacs&lt;/code&gt; file and start Emacs.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Configuration is optimised for languages that are read left to right. Change the configuration to use &lt;code&gt;(setq-default bidi-paragraph-direction &#39;right-to-left)&lt;/code&gt; if you use right to left read languages. Comment out this configuration if you use both.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Use this configuration as an example&lt;/h2&gt; &#xA;&lt;p&gt;Clone this repository and review the configurations I have chosen, not everything may be to your preferred way of working.&lt;/p&gt; &#xA;&lt;p&gt;The recommended approach is to use a diff tool, such as &lt;code&gt;ediff&lt;/code&gt; in Emacs, &lt;code&gt;SPC D f&lt;/code&gt; in Spacemacs, to compare my configuration with your own existing configuration.&lt;/p&gt; &#xA;&lt;h2&gt;The main configuration file&lt;/h2&gt; &#xA;&lt;p&gt;The file &lt;code&gt;.spacemacs.d/init.el&lt;/code&gt; is read by Spacemacs if the &lt;code&gt;.spacemacs&lt;/code&gt; file does not exist. You can used either file as your main Spacemacs configuration file (but obviously not both at the same time). In this repository, the &lt;code&gt;.spacemacs&lt;/code&gt; file is a symbolic link to &lt;code&gt;.spacemacs/init.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;Please join the &lt;a href=&#34;http://clojure.net/&#34;&gt;Clojurians Slack community&lt;/a&gt; and ask questions in either the &lt;code&gt;#practicalli&lt;/code&gt; or &lt;code&gt;#spacemacs&lt;/code&gt; channels.&lt;/p&gt; &#xA;&lt;p&gt;Thank you&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/practical_li&#34;&gt;@practical_li&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mooz/js2-mode</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/mooz/js2-mode</id>
    <link href="https://github.com/mooz/js2-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Improved JavaScript editing mode for GNU Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;About &lt;a href=&#34;https://github.com/mooz/js2-mode/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/mooz/js2-mode/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.gnu.org/packages/js2-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.gnu.org/packages/js2-mode.svg?sanitize=true&#34; alt=&#34;GNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/js2-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/js2-mode-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Improved JavaScript editing mode for GNU Emacs (&lt;a href=&#34;http://elpa.gnu.org/packages/js2-mode.html&#34;&gt;description here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For some of the latest changes, see &lt;a href=&#34;https://github.com/mooz/js2-mode/raw/master/NEWS.md&#34;&gt;latest user-visible changes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;The stable versions are hosted at &lt;a href=&#34;http://elpa.gnu.org/&#34;&gt;GNU ELPA&lt;/a&gt; (&lt;kbd&gt;M-x list-packages&lt;/kbd&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can also install the latest development version from &lt;a href=&#34;https://melpa.org/#/getting-started&#34;&gt;MELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Emacs 24.1+ and &lt;code&gt;cl-lib&lt;/code&gt; (either built-in or installed from GNU ELPA).&lt;/p&gt; &#xA;&lt;h1&gt;React and JSX&lt;/h1&gt; &#xA;&lt;p&gt;The currently recommended solution is to install Emacs 27 (you can &lt;a href=&#34;http://git.savannah.gnu.org/cgit/emacs.git/tree/INSTALL.REPO&#34;&gt;build from source&lt;/a&gt; or e.g. install a snapshot from a &lt;a href=&#34;https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa&#34;&gt;PPA&lt;/a&gt;) and use &lt;code&gt;js-mode&lt;/code&gt; as the major mode. To make use of the JS2 AST and the packages that integrate with it, we recommend &lt;code&gt;js2-minor-mode&lt;/code&gt;. See the corresponding &lt;a href=&#34;https://github.com/mooz/js2-mode/raw/bb73461c2c7048d811b38e6b533a30fb5fdcea93/js2-mode.el#L57&#34;&gt;instructions in the Commentary&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;js-mode&lt;/code&gt; in Emacs 27 includes full support for syntax highlighting and indenting of JSX syntax.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/felipeochoa/rjsx-mode/&#34;&gt;rjsx-mode&lt;/a&gt; is an alternative option which comes with certain tradeoffs.&lt;/p&gt; &#xA;&lt;h1&gt;Bugs&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;See broken syntax highlighting and timer errors? Recently upgraded Emacs from version 24.2 or earlier? Try &lt;a href=&#34;https://github.com/mooz/js2-mode/issues/72&#34;&gt;reinstalling or byte-recompiling&lt;/a&gt; the package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Any indentation problems should be reported with &lt;code&gt;M-x report-emacs-bug&lt;/code&gt; (please try reproducing them with &lt;code&gt;js-mode&lt;/code&gt; first, for clarity). Starting with Emacs 25, &lt;code&gt;js2-mode&lt;/code&gt; delegates indentation to the indentation engine of &lt;code&gt;js-mode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please report other problems at &lt;a href=&#34;http://github.com/mooz/js2-mode/issues&#34;&gt;http://github.com/mooz/js2-mode/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;js2-mode&lt;/code&gt; is subject to the same &lt;a href=&#34;http://www.gnu.org/prep/maintain/html_node/Copyright-Papers.html&#34;&gt;copyright assignment&lt;/a&gt; policy as Emacs itself, &lt;code&gt;org-mode&lt;/code&gt;, &lt;code&gt;CEDET&lt;/code&gt; and other packages in &lt;a href=&#34;http://elpa.gnu.org/packages/&#34;&gt;GNU ELPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;a href=&#34;http://www.gnu.org/prep/maintain/html_node/Legally-Significant.html#Legally-Significant&#34;&gt;legally significant&lt;/a&gt; contributions can only be accepted after the author has completed their paperwork. Please ask for the request form, and we&#39;ll send it to you.&lt;/p&gt; &#xA;&lt;h1&gt;See Also&lt;/h1&gt; &#xA;&lt;p&gt;Some third-party modes that use the generated syntax tree:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/magnars/js2-refactor.el&#34;&gt;js2-refactor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skeeto/skewer-mode&#34;&gt;skewer-mode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wandersoncferreira/code-review</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/wandersoncferreira/code-review</id>
    <link href="https://github.com/wandersoncferreira/code-review" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code Reviews in Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_v3-green.svg?sanitize=true&#34; alt=&#34;GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/code-review&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/code-review-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/wandersoncferreira/code-review/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;a href=&#34;https://patreon.com/bartuka&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Dbartuka%26type%3Dpatrons&amp;amp;style=flat&#34; alt=&#34;Support me on Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Code Review&lt;/h1&gt; &#xA;&lt;p&gt;Package to help you perform code reviews from your VC provider. Currently supports Github and basic Gitlab and Bitbucket workflows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wandersoncferreira/code-review/master/docs/code_review_demo.png&#34; alt=&#34;Demo of code review package&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Link to same PR on Github: &lt;a href=&#34;https://github.com/wandersoncferreira/dotfiles/pull/5&#34;&gt;https://github.com/wandersoncferreira/dotfiles/pull/5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;The Emacs everywhere goal continues. These are the main features of &lt;code&gt;code-review&lt;/code&gt; to help you never leave Emacs to do Pull Request reviews.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start review from URL via &lt;code&gt;code-review-start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modern UI using &lt;a href=&#34;https://emacsair.me/2020/01/23/magit-section/&#34;&gt;magit-section&lt;/a&gt; and &lt;a href=&#34;https://github.com/magit/transient&#34;&gt;transient&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read Pull Request comments&lt;/li&gt; &#xA; &lt;li&gt;Reply to comments&lt;/li&gt; &#xA; &lt;li&gt;Include code suggestions&lt;/li&gt; &#xA; &lt;li&gt;View &lt;code&gt;outdated&lt;/code&gt; comments with the right diff hunk context&lt;/li&gt; &#xA; &lt;li&gt;Approve, Reject or Request Changes for your PRs&lt;/li&gt; &#xA; &lt;li&gt;Integrated with &lt;code&gt;forge-topic-view&lt;/code&gt; via &lt;code&gt;code-review-forge-pr-at-point&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fast track commands like &#34;LGTM! Approved&#34;&lt;/li&gt; &#xA; &lt;li&gt;Review using single commits to focus on diff&lt;/li&gt; &#xA; &lt;li&gt;Set labels on RET. See details &lt;a href=&#34;https://raw.githubusercontent.com/wandersoncferreira/code-review/master/docs/multi-value-selection.md&#34;&gt;Multi value selection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set assignee. Use transient &lt;code&gt;sy&lt;/code&gt; option to &lt;code&gt;assign yourself&lt;/code&gt; to the PR.&lt;/li&gt; &#xA; &lt;li&gt;Set milestone. See details &lt;a href=&#34;https://raw.githubusercontent.com/wandersoncferreira/code-review/master/docs/milestone.md&#34;&gt;push access required&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit PR title&lt;/li&gt; &#xA; &lt;li&gt;Edit PR description body&lt;/li&gt; &#xA; &lt;li&gt;Merge your PR. &lt;em&gt;(beta feature) See details &lt;a href=&#34;https://raw.githubusercontent.com/wandersoncferreira/code-review/master/docs/merge.md&#34;&gt;merge&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reactions. See details &lt;a href=&#34;https://raw.githubusercontent.com/wandersoncferreira/code-review/master/docs/reactions.md&#34;&gt;react to comments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Promote comments to new issues.&lt;/li&gt; &#xA; &lt;li&gt;Save/Resume in-progress Reviews&lt;/li&gt; &#xA; &lt;li&gt;Visit binary files in Dired or Remote. Example &lt;a href=&#34;https://github.com/wandersoncferreira/code-review/pull/90&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mention user with &lt;code&gt;C-c @&lt;/code&gt; in &lt;code&gt;*code-review-comment*&lt;/code&gt; buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Highly recommend using the transient menu in the &lt;code&gt;*Code Review*&lt;/code&gt; buffer by pressing &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The basic workflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RET&lt;/code&gt; on a hunk diff line to add a comment&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RET&lt;/code&gt; on a local comment to edit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RET&lt;/code&gt; on a previous sent comment to include a reply&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c C-k&lt;/code&gt; on a local comment to remove it&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r s f&lt;/code&gt; to enable transient and Set a feedback&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r a&lt;/code&gt; to approve the PR | &lt;code&gt;r r&lt;/code&gt; to reject the PR | &lt;code&gt;r c&lt;/code&gt; to add comments in the PR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can include your own bindings to functions like &lt;code&gt;code-review-set-feedback&lt;/code&gt;, &lt;code&gt;code-review-submit-approve&lt;/code&gt;, &lt;code&gt;code-review-submit-request-changes&lt;/code&gt;, and &lt;code&gt;code-review-submit-comments&lt;/code&gt; to not rely on the transient panel. But I think you should see it :]&lt;/p&gt; &#xA;&lt;p&gt;Take a look at which features are available to each integrated forge &lt;a href=&#34;https://raw.githubusercontent.com/wandersoncferreira/code-review/master/docs/forge_support.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Missing something? Please, &lt;a href=&#34;https://github.com/wandersoncferreira/code-review/issues/new&#34;&gt;let us know&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;I highly recommend installing &lt;code&gt;code-review&lt;/code&gt; through &lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s available on &lt;code&gt;MELPA&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install code-review&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then you can either &lt;code&gt;M-x code-review-start&lt;/code&gt; and provide a PR URL or &lt;code&gt;M-x code-review-forge-pr-at-point&lt;/code&gt; if you are in a forge buffer over a PR.&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;h3&gt;Code Review&lt;/h3&gt; &#xA;&lt;p&gt;Define line wrap in comment sections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq code-review-fill-column 80)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change how &lt;code&gt;code-review&lt;/code&gt; splits the buffer when opening a new PR. Defaults to &lt;code&gt;#&#39;switch-to-buffer-other-window&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq code-review-new-buffer-window-strategy #&#39;switch-to-buffer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the destination where binary files is downloaded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq code-review-download-dir &#34;/tmp/code-review/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Experimental&lt;/h4&gt; &#xA;&lt;p&gt;Use passwords configured for forge. The default is &lt;code&gt;&#39;code-review&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(setq code-review-auth-login-marker &#39;forge)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Forge specific&lt;/h3&gt; &#xA;&lt;p&gt;Follow the documentation to your version control provider to see more details for the setup and configuration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wandersoncferreira/code-review/master/docs/github.md&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wandersoncferreira/code-review/master/docs/gitlab.md&#34;&gt;Gitlab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wandersoncferreira/code-review/master/docs/bitbucket.md&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Keybindings&lt;/h1&gt; &#xA;&lt;p&gt;You can access the transient panel by hitting &lt;code&gt;r&lt;/code&gt; from any place of the &lt;code&gt;Code Review&lt;/code&gt; buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wandersoncferreira/code-review/master/docs/code_review_transient.png&#34; alt=&#34;Transient keybindings&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Binding&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Object&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;hunk&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Add Comment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;comment&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Add Reply&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;local comment (not sent to forge yet)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Edit local comment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C-c C-k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;local comment&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Delete local comment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C-c C-c&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Comment Buffer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Register your local comment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C-c C-k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Comment Buffer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cancel your local comment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C-c C-r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;comment&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Add Reaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C-c C-n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;comment&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Promote to new issue&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C-c C-r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;pr description&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Add Reaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;reaction (on emoji symbol)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Endorse or Remove Reaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Request Reviewer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Request reviewer at point&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Binding suggestions&lt;/h2&gt; &#xA;&lt;p&gt;You can place &lt;code&gt;code-review-forge-pr-at-point&lt;/code&gt; to a key binding for your convenience:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(define-key forge-topic-mode-map (kbd &#34;C-c r&#34;) &#39;code-review-forge-pr-at-point)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not an Evil user you can set the letter &lt;code&gt;k&lt;/code&gt;, for example, to delete a local comment or feedback at point.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(define-key code-review-feedback-section-map (kbd &#34;k&#34;) &#39;code-review-section-delete-comment)&#xA;(define-key code-review-local-comment-section-map (kbd &#34;k&#34;) &#39;code-review-section-delete-comment)&#xA;(define-key code-review-reply-comment-section-map (kbd &#34;k&#34;) &#39;code-review-section-delete-comment)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Move between comments using &lt;code&gt;C-c C-n&lt;/code&gt; and &lt;code&gt;C-c C-p&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(define-key code-review-mode-map (kbd &#34;C-c C-n&#34;) &#39;code-review-comment-jump-next)&#xA;(define-key code-review-mode-map (kbd &#34;C-c C-p&#34;) &#39;code-review-comment-jump-previous)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Extension to other forges&lt;/h1&gt; &#xA;&lt;p&gt;The package allows you to write integration with other forges to leverage these functionalities. Take a look at &lt;code&gt;code-review-interfaces.el&lt;/code&gt; to see which functions need to be implemented.&lt;/p&gt; &#xA;&lt;h1&gt;Thanks&lt;/h1&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/charignon&#34;&gt;Laurent Charignon&lt;/a&gt; for the awesome &lt;a href=&#34;https://github.com/charignon/github-review&#34;&gt;github-review&lt;/a&gt; package and stewardship. Github Review made me more familiar with the problem domain and &lt;code&gt;code-review&lt;/code&gt; is an attempt to build on top of it.&lt;/p&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/agzam&#34;&gt;Ag Ibragimov&lt;/a&gt; for the amazing idea to use &lt;code&gt;magit-section&lt;/code&gt; to build a more suitable interface to this problem.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purcell/package-lint</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/purcell/package-lint</id>
    <link href="https://github.com/purcell/package-lint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A linting library for elisp package metadata&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/package-lint&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/package-lint-badge.svg?sanitize=true&#34; alt=&#34;Melpa Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/package-lint&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/package-lint-badge.svg?sanitize=true&#34; alt=&#34;Melpa Stable Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purcell/package-lint/actions&#34;&gt;&lt;img src=&#34;https://github.com/purcell/package-lint/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;&lt;img alt=&#34;Support me&#34; src=&#34;https://img.shields.io/badge/Support%20Me-%F0%9F%92%97-ff69b4.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;package-lint&lt;/h1&gt; &#xA;&lt;p&gt;This library provides a linter for the metadata in Emacs Lisp files which are intended to be packages. You can integrate it into your build process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;package-lint&lt;/code&gt; detects various issues that may make your package uninstallable or unusable for some users, and it warns about significant deviations from the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html&#34;&gt;Elisp coding conventions&lt;/a&gt;, such as non-compliant symbol naming, and use of reserved keybindings. Among other community uses, &lt;code&gt;package-lint&lt;/code&gt; is a prerequisite for submission of packages to MELPA.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;package-lint&lt;/code&gt; can be used standalone, but see also the &lt;a href=&#34;https://github.com/purcell/flycheck-package&#34;&gt;flycheck-package&lt;/a&gt; and &lt;code&gt;package-lint-flymake&lt;/code&gt; packages, which both use &lt;code&gt;package-lint&lt;/code&gt; to conveniently display packaging errors directly in the buffer while writing elisp packages.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to get &lt;code&gt;package-lint&lt;/code&gt; is as a package from the &lt;a href=&#34;http://melpa.org&#34;&gt;MELPA&lt;/a&gt; repository. The version of &lt;code&gt;package-lint&lt;/code&gt; there will always be up-to-date. There are also packages in &lt;a href=&#34;http://stable.melpa.org&#34;&gt;MELPA Stable&lt;/a&gt;, which track the &lt;a href=&#34;https://github.com/purcell/flycheck-package/tags&#34;&gt;latest numbered tag&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use the command &lt;code&gt;package-lint-current-buffer&lt;/code&gt; interactively, or use &lt;code&gt;package-lint-buffer&lt;/code&gt; if linting programmatically.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a package author, you can include &lt;code&gt;package-lint&lt;/code&gt; in your build process by ensuring that the package is installed, and then using the function &lt;code&gt;package-lint-batch-and-exit&lt;/code&gt; to lint your files -- see &lt;code&gt;run-tests.sh&lt;/code&gt; in this repo for an example.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Additional checks for future versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WARN: header line formatting / capitalisation&lt;/li&gt; &#xA; &lt;li&gt;trailing line presence / formatting&lt;/li&gt; &#xA; &lt;li&gt;WARN: library is called *-mode but doesn&#39;t provide a major mode&lt;/li&gt; &#xA; &lt;li&gt;checkdoc failures for interactive functions / defcustoms&lt;/li&gt; &#xA; &lt;li&gt;trailing whitespace?&lt;/li&gt; &#xA; &lt;li&gt;themes which aren&#39;t in a matching *-theme.el file&lt;/li&gt; &#xA; &lt;li&gt;use of unsafe local variables&lt;/li&gt; &#xA; &lt;li&gt;local variable set in header line&lt;/li&gt; &#xA; &lt;li&gt;using commentary to talk about load[- ]path and installation&lt;/li&gt; &#xA; &lt;li&gt;lack of autoloads&lt;/li&gt; &#xA; &lt;li&gt;references to README files which won&#39;t be bundled in a package&lt;/li&gt; &#xA; &lt;li&gt;use of CamelCase identifiers&lt;/li&gt; &#xA; &lt;li&gt;Defining a &lt;code&gt;-mode&lt;/code&gt; function directly instead of using &lt;code&gt;define-derived-mode&lt;/code&gt; or &lt;code&gt;define-minor-mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Referring to &lt;code&gt;display-graphic-p&lt;/code&gt; or &lt;code&gt;window-system&lt;/code&gt; in &lt;code&gt;-theme.el&lt;/code&gt; files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the file &lt;code&gt;LICENSE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;package-lint&lt;/code&gt; was written by &lt;a href=&#34;https://github.com/purcell&#34;&gt;Steve Purcell&lt;/a&gt; with significant contributions from &lt;a href=&#34;https://github.com/Fanael&#34;&gt;Fanael Linithien&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Author links:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sanityinc&#34;&gt;💝 Support this project and my other Open Source work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://uk.linkedin.com/in/stevepurcell&#34;&gt;💼 LinkedIn profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sanityinc.com/&#34;&gt;✍ sanityinc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/sanityinc&#34;&gt;🐦 @sanityinc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fanael.github.io/&#34;&gt;✍ fanael.github.io&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DiamondBond/emacs</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/DiamondBond/emacs</id>
    <link href="https://github.com/DiamondBond/emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Emacs configuration.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Diamond&#39;s Emacs #+AUTHOR: index #+EMAIL: &lt;a href=&#34;mailto:diamondbond1@gmail.com&#34;&gt;diamondbond1@gmail.com&lt;/a&gt; #+LANGUAGE: en #+CREATOR: Emacs 28.1 (Org mode 9.5.3) #+OPTIONS: toc:2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[./img/screenshot.png]]&lt;/p&gt; &#xA;&lt;p&gt;#+begin_quote&lt;/p&gt; &#xA;&lt;p&gt;Simple Emacs configuration aimed at enhancing the default experience, akin to something equidistant between vanilla &amp;amp; doom.&lt;/p&gt; &#xA;&lt;p&gt;#+end_quote&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preview&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://diamondbond.neocities.org/emacs.html][The entire config file can be viewed here in HTML format]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://github.com/DiamondBond/emacs/blob/master/docs/emacsfromsource.org][Emacs build instructions]].&lt;/p&gt; &#xA;&lt;p&gt;Clone this repo:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ git clone &lt;a href=&#34;https://github.com/diamondbond/emacs.git&#34;&gt;https://github.com/diamondbond/emacs.git&lt;/a&gt; ~/.emacs.d --depth 1 #+end_src&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/DiamondBond/emacs/blob/master/bin/tangle.sh][Tangle]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ cd ~/.emacs.d/bin $ ./tangle.sh #+end_src&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Please run tangle.sh whenever you edit a =.org= configuration file.&lt;/p&gt; &#xA;&lt;p&gt;** Icons&lt;/p&gt; &#xA;&lt;p&gt;If you care about fancy icons, install the fonts provided by [[https://github.com/domtronn/all-the-icons.el][all the icons]]:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp M-x all-the-icons-install-fonts #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** LSP&lt;/p&gt; &#xA;&lt;p&gt;Most IDE-like features are provided by the [[https://github.com/emacs-lsp/lsp-mode][LSP]] package. For it to work properly, you need to install the appropriate [[https://github.com/emacs-lsp/lsp-mode#supported-languages][language servers]].&lt;/p&gt; &#xA;&lt;p&gt;** Email&lt;/p&gt; &#xA;&lt;p&gt;Refer to the [[https://github.com/DiamondBond/emacs/blob/master/docs/setupemail.org][Email setup documentation]] for this functionality.&lt;/p&gt; &#xA;&lt;p&gt;** Dependencies&lt;/p&gt; &#xA;&lt;p&gt;Refer to the [[https://github.com/DiamondBond/emacs/blob/master/docs/dependencies.org][Dependencies documentation]].&lt;/p&gt; &#xA;&lt;p&gt;** Customization&lt;/p&gt; &#xA;&lt;p&gt;Edit =.emacs.d/globals.org= to change the default username, email address, nicks &amp;amp; browser.&lt;/p&gt; &#xA;&lt;p&gt;Edit =.emacs.d/userconfig.org= to add your custom settings and/or override base settings.&lt;/p&gt; &#xA;&lt;p&gt;You may also edit =.emacs.d/config.org= directly, but your custom settings might be wiped out during an update.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Tangling&lt;/p&gt; &#xA;&lt;p&gt;This Emacs configuration will auto-tangle all the related configuration .org files on save via the [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] package.&lt;/p&gt; &#xA;&lt;p&gt;Add tangle.sh to =$PATH= in your =~/.bashrc= file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh PATH=&#34;$HOME/.emacs.d/bin:$PATH&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Now you can call tangle.sh from anywhere.&lt;/p&gt; &#xA;&lt;p&gt;I recommend adding this alias to your =~/.bash_aliases= file:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh alias edaemon=&#34;tangle.sh &amp;amp;&amp;amp; emacs --daemon&#34; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This will tangle any changes made and start the Emacs daemon.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: call =tangle.sh= with an arbitrary arg to use [[https://github.com/DiamondBond/bin/blob/master/auth-restore.sh][M-x auth-restore]].&lt;/p&gt; &#xA;&lt;p&gt;** Running&lt;/p&gt; &#xA;&lt;p&gt;Start Emacs with:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ edaemon #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Connect to the Emacs daemon via =emacsclient= with the following command:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src sh $ emacsclient -c -n -a &#39;emacs&#39; #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Updating&lt;/p&gt; &#xA;&lt;p&gt;Update this Emacs configuration and upgrade its packages with:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp M-x config/update #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Quiting&lt;/p&gt; &#xA;&lt;p&gt;Ask the Emacs daemon to gracefully exit with:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp M-x kill-emacs #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>minad/cape</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/minad/cape</id>
    <link href="https://github.com/minad/cape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦸cape.el - Completion At Point Extensions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: cape.el - Let your completions fly! #+author: Daniel Mendler #+language: en #+export_file_name: cape.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Cape: (cape). #+texinfo_dir_desc: Completion At Point Extensions&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/cape.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/cape.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/cape.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/cape.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://melpa.org/#/cape&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/cape-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;https://stable.melpa.org/#/cape&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/cape-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cape provides a bunch of Completion At Point Extensions which can be used in combination with my [[https://github.com/minad/corfu][Corfu]] completion UI or the default completion UI. The completion backends used by &lt;del&gt;completion-at-point&lt;/del&gt; are so called &lt;del&gt;completion-at-point-functions&lt;/del&gt; (Capfs). In principle, the Capfs provided by Cape can also be used by [[https://github.com/company-mode/company-mode][Company]].&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;img src=&#34;https://github.com/minad/cape/raw/logo/cape.png?raw=true&#34; align=&#34;right&#34; width=&#34;30%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can register the &lt;del&gt;cape-*&lt;/del&gt; functions in the &lt;del&gt;completion-at-point-functions&lt;/del&gt; list. This makes the backends available for completion, which is usually invoked by pressing &lt;del&gt;TAB&lt;/del&gt; or &lt;del&gt;M-TAB&lt;/del&gt;. The functions can also be invoked interactively to trigger the respective completion at point. You can bind them directly to a key in your user configuration. Notable commands/capfs are &lt;del&gt;cape-line&lt;/del&gt; for completion of a line from the current buffer and &lt;del&gt;cape-file&lt;/del&gt; for completion of a file name. The command &lt;del&gt;cape-symbol&lt;/del&gt; is particularily useful for documentation of Elisp packages or configurations, since it completes elisp symbols anywhere.&lt;/p&gt; &#xA;&lt;p&gt;On the more experimental side, Cape has the super power to transform Company backends into Capfs and merge multiple Capfs into a Super-Capf! These transformers allow you to still take advantage of Company backends even if you are not using Company as frontend.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available Capfs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-dabbrev&lt;/del&gt;: Complete word from current buffers&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-file&lt;/del&gt;: Complete file name&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-history&lt;/del&gt;: Complete from Eshell, Comint or minibuffer history&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-keyword&lt;/del&gt;: Complete programming language keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-symbol&lt;/del&gt;: Complete Elisp symbol&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-abbrev&lt;/del&gt;: Complete abbreviation (&lt;del&gt;add-global-abbrev&lt;/del&gt;, &lt;del&gt;add-mode-abbrev&lt;/del&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-ispell&lt;/del&gt;: Complete word from Ispell dictionary&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-dict&lt;/del&gt;: Complete word from dictionary file&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-line&lt;/del&gt;: Complete entire line from current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-tex&lt;/del&gt;: Complete unicode char from TeX command, e.g. &lt;del&gt;\hbar&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-sgml&lt;/del&gt;: Complete unicode char from Sgml entity, e.g., &lt;del&gt;&amp;amp;alpha&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-rfc1345&lt;/del&gt;: Complete unicode char using RFC 1345 mnemonics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cape is available on GNU ELPA and MELPA. You can install the package with &lt;del&gt;package-install&lt;/del&gt;. In the long term some of the Capfs provided by this package could be upstreamed into Emacs itself.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable Corfu completion UI ;; See the Corfu README for more configuration tips. (use-package corfu :init (global-corfu-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; Add extensions (use-package cape ;; Bind dedicated completion commands ;; Alternative prefix keys: C-c p, M-p, M-+, ... :bind ((&#34;C-c p p&#34; . completion-at-point) ;; capf (&#34;C-c p t&#34; . complete-tag) ;; etags (&#34;C-c p d&#34; . cape-dabbrev) ;; or dabbrev-completion (&#34;C-c p h&#34; . cape-history) (&#34;C-c p f&#34; . cape-file) (&#34;C-c p k&#34; . cape-keyword) (&#34;C-c p s&#34; . cape-symbol) (&#34;C-c p a&#34; . cape-abbrev) (&#34;C-c p i&#34; . cape-ispell) (&#34;C-c p l&#34; . cape-line) (&#34;C-c p w&#34; . cape-dict) (&#34;C-c p \&#34; . cape-tex) (&#34;C-c p _&#34; . cape-tex) (&#34;C-c p ^&#34; . cape-tex) (&#34;C-c p &amp;amp;&#34; . cape-sgml) (&#34;C-c p r&#34; . cape-rfc1345)) :init ;; Add &lt;code&gt;completion-at-point-functions&#39;, used by &lt;/code&gt;completion-at-point&#39;. (add-to-list &#39;completion-at-point-functions #&#39;cape-file) (add-to-list &#39;completion-at-point-functions #&#39;cape-dabbrev) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-history) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-keyword) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-tex) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-sgml) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-rfc1345) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-abbrev) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-ispell) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-dict) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-symbol) ;;(add-to-list &#39;completion-at-point-functions #&#39;cape-line) ) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Experimental features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Company adapter&lt;/p&gt; &#xA;&lt;p&gt;/Wrap your Company backend in a Cape and turn it into a Capf!/&lt;/p&gt; &#xA;&lt;p&gt;Cape provides an adapter for Company backends &lt;del&gt;cape-company-to-capf&lt;/del&gt;. The adapter transforms Company backends to Capfs which are understood by the built-in Emacs completion mechanism. The function is approximately the inverse of the &lt;del&gt;company-capf&lt;/del&gt; backend from Company. The adapter is still experimental and may have certain edge cases. The adapter can be used as follows:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use Company backends as Capfs. (setq-local completion-at-point-functions (mapcar #&#39;cape-company-to-capf (list #&#39;company-files #&#39;company-ispell #&#39;company-dabbrev))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Note that the adapter does not require Company to be installed. Backends implementing the Company specification do not necessarily have to depend on Company, however in practice most backends do. The following shows a small example completion backend, which can be used with both &lt;del&gt;completion-at-point&lt;/del&gt; (Corfu, default completion) and Company.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar emojis &#39;((&#34;:-D&#34; . &#34;😀&#34;) (&#34;;-)&#34; . &#34;😉&#34;) (&#34;:-/&#34; . &#34;😕&#34;) (&#34;:-(&#34; . &#34;🙁&#34;) (&#34;:-*&#34; . &#34;😙&#34;)))&lt;/p&gt; &#xA;&lt;p&gt;(defun emoji-backend (action &amp;amp;optional arg &amp;amp;rest _) (pcase action (&#39;prefix (and (memq (char-before) &#39;(?: ?;)) (cons (string (char-before)) t))) (&#39;candidates (all-completions arg emojis)) (&#39;annotation (concat &#34; &#34; (cdr (assoc arg emojis)))) (&#39;post-completion (let ((str (buffer-substring (- (point) 3) (point)))) (delete-region (- (point) 3) (point)) (insert (cdr (assoc str emojis)))))))&lt;/p&gt; &#xA;&lt;p&gt;;; Register emoji backend with `completion-at-point&#39; (setq completion-at-point-functions (list (cape-company-to-capf #&#39;emoji-backend)))&lt;/p&gt; &#xA;&lt;p&gt;;; Register emoji backend with Company. (setq company-backends &#39;(emoji-backend)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;It is possible to merge/group multiple Company backends and use them as a single Capf using the &lt;del&gt;company--multi-backend-adapter&lt;/del&gt; function from Company. The adapter transforms multiple Company backends into a single Company backend, which can then be used as a Capf via &lt;del&gt;cape-company-to-capf&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (require &#39;company) ;; Use the company-dabbrev and company-elisp backends together. (setq completion-at-point-functions (list (cape-company-to-capf (apply-partially #&#39;company--multi-backend-adapter &#39;(company-dabbrev company-elisp))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Super-Capf - Merging multiple Capfs&lt;/p&gt; &#xA;&lt;p&gt;/Throw multiple Capfs under the Cape and get a Super-Capf!/&lt;/p&gt; &#xA;&lt;p&gt;Cape supports merging multiple Capfs using the function &lt;del&gt;cape-super-capf&lt;/del&gt;. This feature is experimental and should only be used in special scenarios. &lt;em&gt;Don&#39;t use cape-super-capf if you are not 100% sure that you need it!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;del&gt;cape-super-capf&lt;/del&gt; is not needed if you want to use multiple Capfs which are tried one by one, e.g., it is perfectly possible to use &lt;del&gt;cape-file&lt;/del&gt; together with the lsp-mode Capf or other programming mode Capfs by adding &lt;del&gt;cape-file&lt;/del&gt; to the &lt;del&gt;completion-at-point-functions&lt;/del&gt; list. The file completion will be available in comments and string literals. &lt;del&gt;cape-super-capf&lt;/del&gt; is only needed if you want to combine multiple Capfs, such that the candidates from multiple sources appear /together/ in the completion list at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Completion table merging works only for tables which are sufficiently well-behaved and tables which do not define completion boundaries. &lt;del&gt;cape-super-capf&lt;/del&gt; has the same restrictions as &lt;del&gt;completion-table-merge&lt;/del&gt; and &lt;del&gt;completion-table-in-turn&lt;/del&gt;. As a simple rule of thumb, &lt;del&gt;cape-super-capf&lt;/del&gt; works only well for static completion functions like &lt;del&gt;cape-dabbrev&lt;/del&gt;, &lt;del&gt;cape-keyword&lt;/del&gt;, &lt;del&gt;cape-ispell&lt;/del&gt;, etc., but not for complex multi-step completions like &lt;del&gt;cape-file&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Merge the dabbrev, dict and keyword capfs, display candidates together. (setq-local completion-at-point-functions (list (cape-super-capf #&#39;cape-dabbrev #&#39;cape-dict #&#39;cape-keyword))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See also the aforementioned &lt;del&gt;company--multi-backend-adapter&lt;/del&gt; from Company, which allows you to merge multiple Company backends.&lt;/p&gt; &#xA;&lt;p&gt;** Capf-Buster - Cache busting&lt;/p&gt; &#xA;&lt;p&gt;/The Capf-Buster ensures that you always get a fresh set of candidates!/&lt;/p&gt; &#xA;&lt;p&gt;If a Capf caches the candidates for too long we can use a cache busting Capf-transformer. For example the Capf merging function &lt;del&gt;cape-super-capf&lt;/del&gt; creates a Capf, which caches the candidates for the whole lifetime of the Capf. Therefore you may want to combine a merged Capf with a cache buster under some circumstances. It is noteworthy that the &lt;del&gt;company-capf&lt;/del&gt; backend from Company refreshes the completion table frequently. With the &lt;del&gt;cape-capf-buster&lt;/del&gt; we can achieve a similarly refreshing strategy.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (setq-local completion-at-point-functions (list (cape-capf-buster #&#39;some-caching-capf))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Other Capf transformers&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-interactive-capf&lt;/del&gt;: Create a Capf which can be called interactively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-accept-all&lt;/del&gt;, &lt;del&gt;cape-capf-accept-all&lt;/del&gt;: Create a Capf which accepts every input as valid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-silent&lt;/del&gt;, &lt;del&gt;cape-capf-silent&lt;/del&gt;: Wrap a chatty Capf and silence it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-purify&lt;/del&gt;, &lt;del&gt;cape-capf-purify&lt;/del&gt;: Purify a broken Capf and ensure that it does not modify the buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-noninterruptible&lt;/del&gt;, &lt;del&gt;cape-capf-noninterruptible:&lt;/del&gt; Protect a Capf which does not like to be interrupted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-case-fold&lt;/del&gt;, &lt;del&gt;cape-capf-case-fold&lt;/del&gt;: Create a Capf which is case insensitive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-properties&lt;/del&gt;, &lt;del&gt;cape-capf-properties&lt;/del&gt;: Add completion properties to a Capf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-predicate&lt;/del&gt;, &lt;del&gt;cape-capf-predicate&lt;/del&gt;: Add candidate predicate to a Capf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;cape-wrap-prefix-length&lt;/del&gt;, &lt;del&gt;cape-capf-prefix-length&lt;/del&gt;: Enforce a minimal prefix length.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/cape.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-tree-sitter/tree-sitter-langs</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/emacs-tree-sitter/tree-sitter-langs</id>
    <link href="https://github.com/emacs-tree-sitter/tree-sitter-langs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Language bundle for Emacs&#39;s tree-sitter package&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Tree-sitter Language Bundle for Emacs&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_HTML &lt;a href=&#34;https://dev.azure.com/emacs-tree-sitter/tree-sitter-langs/_build/latest?definitionId=2&amp;amp;branchName=master&#34; rel=&#34;nofollow&#34;&gt; &lt;img src=&#34;https://dev.azure.com/emacs-tree-sitter/tree-sitter-langs/_apis/build/status/ci?branchName=master&amp;amp;label=build&amp;amp;api-version=6.0-preview.1&#34; alt=&#34;Build Status&#34; style=&#34;max-width:100%;&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs/actions/workflows/main.yml&#34;&gt; &lt;img src=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34; style=&#34;max-width: 100%;&#34;&gt; &lt;/a&gt; #+END_HTML&lt;/p&gt; &#xA;&lt;p&gt;This is a convenient language bundle for the Emacs package [[https://github.com/emacs-tree-sitter/elisp-tree-sitter][tree-sitter]]. It serves as an interim distribution mechanism, until &lt;del&gt;tree-sitter&lt;/del&gt; is widespread enough for language-specific major modes to incorporate its functionalities.&lt;/p&gt; &#xA;&lt;p&gt;For each supported language, this package provides:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pre-compiled grammar binaries for 3 major platforms: macOS, Linux and Windows, on x86_64. In the future, &lt;del&gt;tree-sitter-langs&lt;/del&gt; may provide tooling for major modes to do this on their own.&lt;/li&gt; &#xA; &lt;li&gt;An optional &lt;del&gt;highlights.scm&lt;/del&gt; file that provides highlighting patterns. This is mainly intended for major modes that are not aware of &lt;del&gt;tree-sitter&lt;/del&gt;. A language major mode that wants to use &lt;del&gt;tree-sitter&lt;/del&gt; for syntax highlighting should instead provide the query patterns on its own, using the mechanisms defined by [[https://emacs-tree-sitter.github.io/syntax-highlighting/interface-for-modes/][tree-sitter-hl]].&lt;/li&gt; &#xA; &lt;li&gt;Optional query patterns for other minor modes that provide high-level functionalities on top of &lt;del&gt;tree-sitter&lt;/del&gt;, such as code folding, evil text objects... As with highlighting patterns, major modes that are directly aware of &lt;del&gt;tree-sitter&lt;/del&gt; should provide the query patterns on their own.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;** Highlighting Queries&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;Note&lt;/em&gt;: Highlighting styles are a mattter of taste.&lt;/h1&gt; &#xA;&lt;p&gt;Highlighting query patterns for a language are in the file &lt;del&gt;queries/&#xA;  &lt;lang&gt;&#xA;   /highlights.scm&#xA;  &lt;/lang&gt;&lt;/del&gt;. Most of them are &lt;em&gt;intentionally different&lt;/em&gt; from those from upstream repositories, which are more geared towards /GitHub&#39;s use cases/. We try to be more consistent with /Emacs&#39;s existing conventions/. (For some languages, this is WIP, so their patterns may look similar to upstream&#39;s.)&lt;/p&gt; &#xA;&lt;p&gt;In general, try to follow what the docstrings of &lt;del&gt;tree-sitter-hl-face:&lt;/del&gt; faces say. Most importantly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Definitions and uses should be differentiated: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;@function&lt;/del&gt; vs. &lt;del&gt;@function.call&lt;/del&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;@method&lt;/del&gt; vs. &lt;del&gt;@method.call&lt;/del&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;@type.parameter&lt;/del&gt; vs. &lt;del&gt;@type.argument&lt;/del&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;@variable&lt;/del&gt; and &lt;del&gt;@variable.parameter&lt;/del&gt; should be applied only to declarations/definitions/bindings/mutations (/writes/), not usage (/reads/).&lt;/li&gt; &#xA; &lt;li&gt;Special faces should have high priority (placed earlier in the pattern list): &lt;del&gt;@function.macro&lt;/del&gt;, &lt;del&gt;@type.builtin&lt;/del&gt;, &lt;del&gt;@variable.special&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Patterns whose internals may be highlighted should have low priority (placed towards the end). Example: strings with interpolation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Mode-specific highlighting Some languages are associated with multiple major modes. Mode-specific highlighting patterns are provided by the files &lt;del&gt;queries/&#xA;  &lt;lang&gt;&#xA;   /highlights.&#xA;   &lt;major-mode&gt;&#xA;    .scm&#xA;   &lt;/major-mode&gt;&#xA;  &lt;/lang&gt;&lt;/del&gt;. These are combined with the base highlighting patterns in &lt;del&gt;queries/&#xA;  &lt;lang&gt;&#xA;   /highlights.scm&#xA;  &lt;/lang&gt;&lt;/del&gt;, but have higher precedence.&lt;/p&gt; &#xA;&lt;p&gt;** Building Grammars from Source Note: If you also plan to work on [[https://github.com/emacs-tree-sitter/elisp-tree-sitter#building-grammars-from-source][elisp-tree-sitter]], it might be more convenient to work with this repository as a submodule.&lt;/p&gt; &#xA;&lt;p&gt;*** Tools and dependencies&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install [[https://cask.readthedocs.io][cask]].&lt;/li&gt; &#xA; &lt;li&gt;Install ELisp dependencies: #+begin_src bash cask install #+end_src&lt;/li&gt; &#xA; &lt;li&gt;Install NodeJS. It is needed to generate the grammar code from the JavaScript DSL. The recommended tool to manage NodeJS is [[https://volta.sh/][volta]].&lt;/li&gt; &#xA; &lt;li&gt;Install [[https://tree-sitter.github.io/tree-sitter/creating-parsers#installation][tree-sitter CLI tool]]. (Its binary can also be downloaded directly from [[https://github.com/tree-sitter/tree-sitter/releases][GitHub]].) &lt;em&gt;Note: versions 0.20+ cannot be used, as they introduce [[https://github.com/tree-sitter/tree-sitter/pull/1157][a breaking change]] in binary storage location&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** Building grammars To build a specific language&#39;s grammar, run &lt;del&gt;script/compile&lt;/del&gt;. (See the list of registered languages in [[./repos][repos/]].) For example: #+begin_src bash script/compile rust #+end_src&lt;/p&gt; &#xA;&lt;p&gt;To build all registered languages, and creating the bundle: #+begin_src bash script/compile all #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Adding a new grammar&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register a new submodule. For example: #+begin_src bash # git submodule add -b &#xA;  &lt;branch&gt;&#xA;    -- &#xA;   &lt;git-url&gt;&#xA;     repos/&#xA;    &lt;lang&gt;&#xA;      git submodule add -b master -- &#xA;     &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-rust&#34;&gt;https://github.com/tree-sitter/tree-sitter-rust&lt;/a&gt; repos/rust #+end_src&#xA;    &lt;/lang&gt;&#xA;   &lt;/git-url&gt;&#xA;  &lt;/branch&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modify its settings in [[.gitmodules][.gitmodules]]: #+begin_src conf update = none ignore = dirty #+end_src&lt;/li&gt; &#xA; &lt;li&gt;Try building and testing it. For example: #+begin_src bash script/compile rust script/test rust #+end_src&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>magit/ghub</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/magit/ghub</id>
    <link href="https://github.com/magit/ghub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Client libraries for the APIs of various Git forges&lt;/p&gt;&lt;hr&gt;&lt;p&gt;** Ghub — Client libraries for the APIs of various Git forges&lt;/p&gt; &#xA;&lt;p&gt;Ghub provides basic support for using the APIs of various Git forges from Emacs packages. Originally it only supported the Github REST API, but now it also supports the Github GraphQL API as well as the REST APIs of Gitlab, Gitea, Gogs and Bitbucket.&lt;/p&gt; &#xA;&lt;p&gt;Ghub abstracts access to API resources using only a handful of basic functions such as &lt;del&gt;ghub-get&lt;/del&gt;. These are convenience wrappers around &lt;del&gt;ghub-request&lt;/del&gt;. Additional forge-specific wrappers like &lt;del&gt;glab-put&lt;/del&gt;, &lt;del&gt;gtea-put&lt;/del&gt;, &lt;del&gt;gogs-post&lt;/del&gt; and &lt;del&gt;buck-delete&lt;/del&gt; are also available. Ghub does not provide any resource-specific functions, with the exception of &lt;del&gt;FORGE-repository-id&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When accessing Github, then Ghub handles the creation and storage of access tokens using a setup wizard to make it easier for users to get started. The tokens for other forges have to be created manually.&lt;/p&gt; &#xA;&lt;p&gt;Ghub is intentionally limited to only provide these two essential features — basic request functions and guided setup — to avoid being too opinionated, which would hinder wide adoption. It is assumed that wide adoption would make life easier for users and maintainers alike, because then all packages that talk to forge APIs could be configured the same way.&lt;/p&gt; &#xA;&lt;p&gt;Please consult the [[https://magit.vc/manual/ghub][manual]] for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jacktasia/dumb-jump</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/jacktasia/dumb-jump</id>
    <link href="https://github.com/jacktasia/dumb-jump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;an Emacs &#34;jump to definition&#34; package for 50+ languages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dumb-jump&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jacktasia/dumb-jump/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://coveralls.io/github/jacktasia/dumb-jump?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/jacktasia/dumb-jump/badge.svg?branch=master&amp;amp;service=github&amp;amp;x=1&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/dumb-jump&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/dumb-jump-badge.svg?x=6&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/dumb-jump&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/dumb-jump-badge.svg?x=1&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jacktasia/dumb-jump/master/media/dumb-jump-example-v2.gif?raw=true&#34; alt=&#34;Dumb Jump GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dumb Jump&lt;/strong&gt; is an Emacs &#34;jump to definition&#34; package with support for 50+ programming languages that favors &#34;just working&#34;. This means minimal -- and ideally zero -- configuration with absolutely no stored indexes (TAGS) or persistent background processes. Dumb Jump requires at least GNU Emacs &lt;code&gt;24.3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;How it works&lt;/h4&gt; &#xA;&lt;p&gt;Dumb Jump uses &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;The Silver Searcher&lt;/a&gt; &lt;code&gt;ag&lt;/code&gt;, &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt; &lt;code&gt;rg&lt;/code&gt;, or &lt;code&gt;grep&lt;/code&gt; to find potential definitions of a function or variable under point. It uses a set of regular expressions based on the file extension, or &lt;code&gt;major-mode&lt;/code&gt;, of the current buffer. The matches are run through a shared set of heuristic methods to find the best candidate to jump to. If it can&#39;t decide it will present the user with a list in a pop-menu, helm, or ivy (see &lt;code&gt;dumb-jump-selector&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Success Rate&lt;/h4&gt; &#xA;&lt;p&gt;For the currently &lt;a href=&#34;https://raw.githubusercontent.com/jacktasia/dumb-jump/master/#supported-languages&#34;&gt;supported languages&lt;/a&gt; it seems to do a good job of finding what you want. If you find a case where it does not work as expected do not hesitate to &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/issues&#34;&gt;open an issue&lt;/a&gt;. It can be slow if it needs to use &lt;code&gt;grep&lt;/code&gt; and/or a project is large. Although it can be sped up by &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher#installing&#34;&gt;installing &lt;code&gt;ag&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/BurntSushi/ripgrep#installation&#34;&gt;installing &lt;code&gt;rg&lt;/code&gt;&lt;/a&gt; and/or creating a &lt;code&gt;.dumbjump&lt;/code&gt; file in your project&#39;s root directory with paths that should be excluded (&lt;a href=&#34;https://raw.githubusercontent.com/jacktasia/dumb-jump/master/#configuration&#34;&gt;see configuration&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Supported Languages&lt;/h2&gt; &#xA;&lt;p&gt;There is currently basic support for the following languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apex&lt;/li&gt; &#xA; &lt;li&gt;Bash&lt;/li&gt; &#xA; &lt;li&gt;C/C++&lt;/li&gt; &#xA; &lt;li&gt;C#&lt;/li&gt; &#xA; &lt;li&gt;Clojure&lt;/li&gt; &#xA; &lt;li&gt;CoffeeScript&lt;/li&gt; &#xA; &lt;li&gt;Common Lisp&lt;/li&gt; &#xA; &lt;li&gt;Coq&lt;/li&gt; &#xA; &lt;li&gt;Crystal&lt;/li&gt; &#xA; &lt;li&gt;Dart&lt;/li&gt; &#xA; &lt;li&gt;Elixir&lt;/li&gt; &#xA; &lt;li&gt;Emacs Lisp&lt;/li&gt; &#xA; &lt;li&gt;Erlang&lt;/li&gt; &#xA; &lt;li&gt;F#&lt;/li&gt; &#xA; &lt;li&gt;Faust&lt;/li&gt; &#xA; &lt;li&gt;Fennel&lt;/li&gt; &#xA; &lt;li&gt;Fortran&lt;/li&gt; &#xA; &lt;li&gt;Go&lt;/li&gt; &#xA; &lt;li&gt;Groovy&lt;/li&gt; &#xA; &lt;li&gt;Haskell&lt;/li&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA; &lt;li&gt;JavaScript&lt;/li&gt; &#xA; &lt;li&gt;Julia&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&lt;/li&gt; &#xA; &lt;li&gt;LaTeX&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;Matlab&lt;/li&gt; &#xA; &lt;li&gt;Nim&lt;/li&gt; &#xA; &lt;li&gt;Nix&lt;/li&gt; &#xA; &lt;li&gt;Objective-C&lt;/li&gt; &#xA; &lt;li&gt;OCaml&lt;/li&gt; &#xA; &lt;li&gt;OpenSCAD&lt;/li&gt; &#xA; &lt;li&gt;Org mode&lt;/li&gt; &#xA; &lt;li&gt;Pascal&lt;/li&gt; &#xA; &lt;li&gt;Perl&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Protocol Buffers&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;R&lt;/li&gt; &#xA; &lt;li&gt;Racket&lt;/li&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Sass&lt;/li&gt; &#xA; &lt;li&gt;Scala&lt;/li&gt; &#xA; &lt;li&gt;Scheme&lt;/li&gt; &#xA; &lt;li&gt;SML&lt;/li&gt; &#xA; &lt;li&gt;Solidity&lt;/li&gt; &#xA; &lt;li&gt;SQL&lt;/li&gt; &#xA; &lt;li&gt;Swift&lt;/li&gt; &#xA; &lt;li&gt;SystemVerilog&lt;/li&gt; &#xA; &lt;li&gt;Tcl&lt;/li&gt; &#xA; &lt;li&gt;Terraform / HCL&lt;/li&gt; &#xA; &lt;li&gt;TypeScript&lt;/li&gt; &#xA; &lt;li&gt;Vala&lt;/li&gt; &#xA; &lt;li&gt;VHDL&lt;/li&gt; &#xA; &lt;li&gt;Zig&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have any issues with the existing languages, or you want support for another one, then please &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/issues&#34;&gt;open an issue&lt;/a&gt;. PRs are also welcome. If you&#39;d like to add a language these PRs for &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/pull/33&#34;&gt;lua&lt;/a&gt; and &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/pull/57&#34;&gt;rust&lt;/a&gt; are good examples.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install Dumb Jump is via &lt;code&gt;package.el&lt;/code&gt;. It&#39;s available on &lt;a href=&#34;http://melpa.org/#/dumb-jump&#34;&gt;MELPA&lt;/a&gt;: &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;package-install dumb-jump&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Spacemacs&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using an up-to-date Spacemacs, then you already have Dumb Jump by default just make sure you install &lt;code&gt;ag&lt;/code&gt; or &lt;code&gt;rg&lt;/code&gt; (see below) to ensure you have the best experience.&lt;/p&gt; &#xA;&lt;h4&gt;Installing &lt;code&gt;ag&lt;/code&gt; or &lt;code&gt;rg&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Dumb Jump performs best with The Silver Searcher &lt;code&gt;ag&lt;/code&gt; (&lt;a href=&#34;https://github.com/ggreer/the_silver_searcher#installing&#34;&gt;ag install instructions&lt;/a&gt;) or ripgrep &lt;code&gt;rg&lt;/code&gt; (&lt;a href=&#34;https://github.com/BurntSushi/ripgrep#installation&#34;&gt;rg install instructions&lt;/a&gt;) installed on your system.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;Basic&lt;/h4&gt; &#xA;&lt;p&gt;To enable the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&#34;&gt;xref&lt;/a&gt; backend, evaluate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;xref-backend-functions #&#39;dumb-jump-xref-activate)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or add it to your initialisation file. Using this, you can now use &lt;kbd&gt;M-.&lt;/kbd&gt; (or &lt;kbd&gt;gd&lt;/kbd&gt; when using Evil).&lt;/p&gt; &#xA;&lt;p&gt;Xref can be customized to use &lt;code&gt;completing-read&lt;/code&gt; to select a target. That way a completion framework of your choice (Icomplete, Helm, Ivy, ...) will be used instead of the default pop-up buffer. To do this, evaluate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq xref-show-definitions-function #&#39;xref-show-definitions-completing-read)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the function &lt;code&gt;xref-show-definitions-completing-read&lt;/code&gt; requires at least Xref 1.1.0. This can either be downloaded from ELPA or is bundled with Emacs 28.1 or newer.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h5&gt;Excluding project directories&lt;/h5&gt; &#xA;&lt;p&gt;Dumb Jump will automatically look for a project root. If it&#39;s not finding one then either put a &lt;code&gt;.dumbjump&lt;/code&gt; file in your project root and optionally add excluded directories to make it faster.&lt;/p&gt; &#xA;&lt;p&gt;Project root directory denoters: &lt;code&gt;.dumbjump&lt;/code&gt; &lt;code&gt;.projectile&lt;/code&gt; &lt;code&gt;.git&lt;/code&gt; &lt;code&gt;.hg&lt;/code&gt; &lt;code&gt;.fslckout&lt;/code&gt; &lt;code&gt;.bzr&lt;/code&gt; &lt;code&gt;_darcs&lt;/code&gt; &lt;code&gt;.svn&lt;/code&gt; &lt;code&gt;Makefile&lt;/code&gt; &lt;code&gt;PkgInfo&lt;/code&gt; &lt;code&gt;-pkg.el&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to stop a directory from registering as the project root (and have Dumb Jump keep looking) add an empty &lt;code&gt;.dumbjumpignore&lt;/code&gt; file in that directory.&lt;/p&gt; &#xA;&lt;h5&gt;Example &lt;code&gt;.dumbjump&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;-tests&#xA;-node_modules&#xA;-build&#xA;-images&#xA;+../some-lib/src&#xA;+/usr/lib/src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt; When adding paths outside of the project (using &lt;code&gt;+&lt;/code&gt;) ensure you use &lt;code&gt;dumb-jump-force-searcher&lt;/code&gt; of either &lt;code&gt;&#39;ag&lt;/code&gt; or &lt;code&gt;&#39;rg&lt;/code&gt; (see below). This is required because the default searcher (&lt;code&gt;git-grep&lt;/code&gt;) won&#39;t be able to search outside of the project root. This edge case will be fixed in a future release. That is, &lt;code&gt;git-grep&lt;/code&gt; will NOT be set as the default searcher if a &lt;code&gt;.dumbjump&lt;/code&gt; is present with a &lt;code&gt;+&lt;/code&gt; path outside of the repo.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;.emacs&lt;/code&gt; options&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-default-project &#34;~/code&#34;)&lt;/code&gt; to change default project if one is not found (defaults to &lt;code&gt;~&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-quiet t)&lt;/code&gt; if Dumb Jump is too chatty.&lt;/li&gt; &#xA; &lt;li&gt;To support more languages and/or definition types customize &lt;code&gt;dumb-jump-find-rules&lt;/code&gt; variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-force-searcher &#39;rg)&lt;/code&gt; to force the search program Dumb Jump should use. It will &lt;em&gt;always&lt;/em&gt; use this searcher. If not set (&lt;code&gt;nil&lt;/code&gt;) Dumb Jump will use &lt;code&gt;git-grep&lt;/code&gt; if it&#39;s a git project and if not will try searchers in the following order &lt;code&gt;ag&lt;/code&gt;, &lt;code&gt;rg&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt; (first installed wins). This is necessary if you want full control over the searcher Dumb Jump uses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-prefer-searcher &#39;rg)&lt;/code&gt; to let Dumb Jump know your searcher preference. If set this will still use &lt;code&gt;git-grep&lt;/code&gt; if it&#39;s a git project (because it&#39;s the fastest), but will you use whatever you set here in any other situation. If not set Dumb Jump will follow the same order as mentioned in the &lt;code&gt;dumb-jump-force-searcher&lt;/code&gt; description. At this time setting this value is only necessary if you prefer &lt;code&gt;rg&lt;/code&gt; but have &lt;code&gt;ag&lt;/code&gt; installed too.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-git-grep-search-args &#34;&#34;)&lt;/code&gt; to set additional command line arguments when using git-grep for searching (defaults to &lt;code&gt;&#34;&#34;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-ag-search-args &#34;&#34;)&lt;/code&gt; to set additional command line arguments when using ag for searching (defaults to &lt;code&gt;&#34;&#34;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(setq dumb-jump-rg-search-args &#34;&#34;)&lt;/code&gt; to set additional command line arguments when using rg for searching (defaults to &lt;code&gt;&#34;--pcre2&#34;&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;If your project has multi-line method signatures &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/issues/129&#34;&gt;you should use &lt;code&gt;ag&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/issues/255&#34;&gt;&lt;code&gt;rg&lt;/code&gt; version &lt;code&gt;0.10.0&lt;/code&gt; or higher&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;p&gt;To learn more about how Dumb Jump picks a searcher see &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/issues/109&#34;&gt;this issue&lt;/a&gt; and this &lt;a href=&#34;https://github.com/jacktasia/dumb-jump/pull/111&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Hydra for effieciency&lt;/h5&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;Hydra&lt;/a&gt; installed, the following is an example hydra for easily using Dumb-Jump and not needing to remember the bindings or function names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(defhydra dumb-jump-hydra (:color blue :columns 3)&#xA;    &#34;Dumb Jump&#34;&#xA;    (&#34;j&#34; dumb-jump-go &#34;Go&#34;)&#xA;    (&#34;o&#34; dumb-jump-go-other-window &#34;Other window&#34;)&#xA;    (&#34;e&#34; dumb-jump-go-prefer-external &#34;Go external&#34;)&#xA;    (&#34;x&#34; dumb-jump-go-prefer-external-other-window &#34;Go external other window&#34;)&#xA;    (&#34;i&#34; dumb-jump-go-prompt &#34;Prompt&#34;)&#xA;    (&#34;l&#34; dumb-jump-quick-look &#34;Quick look&#34;)&#xA;    (&#34;b&#34; dumb-jump-back &#34;Back&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be explicitly bound or used inside another hydra (if you already use something like &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;Avy&lt;/a&gt;/&lt;a href=&#34;https://github.com/winterTTr/ace-jump-mode&#34;&gt;Ace&lt;/a&gt; or similar for general &#34;jumping&#34;).&lt;/p&gt; &#xA;&lt;h4&gt;Debugging a jump&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;set-variable dumb-jump-debug t&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;try to jump&lt;/li&gt; &#xA; &lt;li&gt;go to buffer &lt;code&gt;*Messages*&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;More details &lt;a href=&#34;http://p.cweiske.de/506&#34;&gt;here&lt;/a&gt;. Thanks to @cweiske and @Glumanda99&lt;/p&gt; &#xA;&lt;h2&gt;Obsolete commands and options&lt;/h2&gt; &#xA;&lt;p&gt;Older versions of dumb jump didn&#39;t use xref, and instead had custom commands. These, while marked obsolete, can still be used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-go&lt;/code&gt; (former) core functionality. Attempts to jump to the definition for the thing under point. This has been replaced in the new interface with &lt;code&gt;xref-find-definitions&lt;/code&gt; (&lt;kbd&gt;M-.&lt;/kbd&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-back&lt;/code&gt; jumps back to where you were when you jumped. These are chained so if you go down a rabbit hole you can get back out or where you want to be. This has been replaced with &lt;code&gt;xref-pop-marker-stack&lt;/code&gt; (&lt;kbd&gt;M-,&lt;/kbd&gt;), but is mostly equivalent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-quick-look&lt;/code&gt; like &lt;code&gt;dumb-jump-go&lt;/code&gt; but &lt;strong&gt;only&lt;/strong&gt; shows tooltip with &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, and &lt;code&gt;context&lt;/code&gt; it does not jump.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-go-other-window&lt;/code&gt; exactly like &lt;code&gt;dumb-jump-go&lt;/code&gt; but uses &lt;code&gt;find-file-other-window&lt;/code&gt; instead of &lt;code&gt;find-file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-go-prefer-external&lt;/code&gt; like &lt;code&gt;dumb-jump-go&lt;/code&gt; but will prefer definitions not in the current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-go-prefer-external-other-window&lt;/code&gt; expected combination of &lt;code&gt;dumb-jump-go-prefer-external&lt;/code&gt; and &lt;code&gt;dumb-jump-go-other-window&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-go-prompt&lt;/code&gt; exactly like &lt;code&gt;dumb-jump-go&lt;/code&gt; but prompts user for function to jump to&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A few user options only have an effect when used with the legacy interface. These are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-after-jump-hook&lt;/code&gt; (use &lt;code&gt;xref-after-jump-hook&lt;/code&gt; instead)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-before-jump-hook&lt;/code&gt; (use &lt;code&gt;xref-after-return-hook&lt;/code&gt; instead)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-selector&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-aggressive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-use-visible-window&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dumb-jump-confirm-jump-to-modified-file&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The minor mode &lt;code&gt;dumb-jump-mode&lt;/code&gt; binds a few of these commands by default.&lt;/p&gt; &#xA;&lt;p&gt;If you still use Emacs 24 or older, you won&#39;t have xref, and have to use the legacy interface instead. In that case, there will also be no &#34;obsolete&#34; warnings.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;I wanted &#34;jump to definition&#34; functionality to &#34;just work&#34; in emacs. I use IntelliJ for Java and this functionality is basically the only thing I miss when I switch back to emacs for work in other languages. There are certainly other packages that offer this type of functionality, but they all require significantly more configuration and are often limited to a particular language. An alternative may be worth setting up if you are in a specific project or language often (see &lt;a href=&#34;https://raw.githubusercontent.com/jacktasia/dumb-jump/master/#alternatives&#34;&gt;alternatives&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feedback is very welcome via GitHub issues. I will consider supporting other languages either via issue request or PR. If submitting a PR then please add tests as well.&lt;/p&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;Opening a PR will use CircleCI to run all the tests against all the supported emacs versions and search programs.&lt;/p&gt; &#xA;&lt;h3&gt;Running tests locally&lt;/h3&gt; &#xA;&lt;p&gt;There are a lot of options for running the tests locally:&lt;/p&gt; &#xA;&lt;h4&gt;Basic/Classic&lt;/h4&gt; &#xA;&lt;p&gt;requires &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt; using your local emacs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /path/to/dumb-jump&#xA;cask&#xA;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Concurrent&lt;/h4&gt; &#xA;&lt;p&gt;requires golang and &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt; using your local emacs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /path/to/dumb-jump&#xA;cask&#xA;make test-concurrent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker (latest emacs)&lt;/h4&gt; &#xA;&lt;p&gt;only requires docker and runs tests against emacs 26.1&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /path/to/dumb-jump&#xA;cask&#xA;make test-in-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker (all supported emacs versions)&lt;/h4&gt; &#xA;&lt;p&gt;only requires docker and runs tests against all supported emacs versions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /path/to/dumb-jump&#xA;cask&#xA;make test-all-in-docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;Here is a list of potential alternative packages for emacs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Tags-Tables.html&#34;&gt;Tags&lt;/a&gt; supports multiple languages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/global/&#34;&gt;GNU Global&lt;/a&gt; supports multiple languages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ternjs.net/&#34;&gt;Tern&lt;/a&gt; for JavaScript&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jorgenschaefer/elpy&#34;&gt;elpy&lt;/a&gt; for Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgutov/robe&#34;&gt;robe&lt;/a&gt; for Ruby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of these were sourced from this &lt;a href=&#34;http://emacs.stackexchange.com/questions/10125/can-emacs-support-go-to-declaration-of-function-in-an-entire-project&#34;&gt;emacs StackExchange answer&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sshaw/git-link</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/sshaw/git-link</id>
    <link href="https://github.com/sshaw/git-link" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs package to get the GitHub/Bitbucket/GitLab/... URL for a buffer location&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-link&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/git-link&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/git-link-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/sshaw/git-link&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sshaw/git-link.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Interactive Emacs functions that create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link&lt;/code&gt; returns the URL for the current buffer&#39;s file location at the current line number or active region.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-commit&lt;/code&gt; returns the URL for the commit at point.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-homepage&lt;/code&gt; returns the URL for the repository&#39;s homepage.&lt;/p&gt; &#xA;&lt;p&gt;URLs are added to the kill ring.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Functions can be called interactively (&lt;code&gt;M-x git-link&lt;/code&gt;) or via a key binding of your choice. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(global-set-key (kbd &#34;C-c g l&#34;) &#39;git-link)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a prefix argument prompt for the remote&#39;s name. Defaults to &lt;code&gt;&#34;origin&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With a prefix argument of &lt;code&gt;-&lt;/code&gt;, generate a link without line numbers.&lt;/p&gt; &#xA;&lt;p&gt;Works with Dired, Magit, VC revisions, and Tramp too.&lt;/p&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;Global setting are elisp variables. They can be set directly or via &lt;code&gt;M-x customize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Local settings are managed via the repository&#39;s git configuration. They can be set via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git config --local --add setting value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Local settings have precedence over global settings.&lt;/p&gt; &#xA;&lt;h4&gt;Global&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-default-remote&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote to link to, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-default-branch&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote branch to link to, defaults to the current branch.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-open-in-browser&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If non-&lt;code&gt;nil&lt;/code&gt; also open link in browser via &lt;code&gt;browse-url&lt;/code&gt;, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-use-commit&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If non-&lt;code&gt;nil&lt;/code&gt; use the latest commit&#39;s hash in the link instead of the branch name, defaults to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link-use-single-line-number&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If &lt;code&gt;nil&lt;/code&gt; line numbers are only added when the selection contains more than 1 line, defaults to &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;git-link&lt;/code&gt; will exclude line numbers when invoked with the &lt;code&gt;-&lt;/code&gt; prefix argument.&lt;/p&gt; &#xA;&lt;h4&gt;Local&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link.remote&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote to link to.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;git-link.branch&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;Name of the remote branch to link to.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Services&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/devops/&#34;&gt;Azure DevOps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/codecommit/&#34;&gt;AWS CodeCommit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://bitbucket.com&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/&#34;&gt;Codeberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/Cgit&#34;&gt;cgit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com&#34;&gt;GitLab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gitorious.org&#34;&gt;Gitorious&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.savannah.gnu.org/cgit&#34;&gt;Savannah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcegraph.com&#34;&gt;Sourcegraph&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcehut.org&#34;&gt;sourcehut&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Git Timemachine&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://gitlab.com/pidu/git-timemachine&#34;&gt;&lt;code&gt;git-timemachine-mode&lt;/code&gt;&lt;/a&gt; is active &lt;code&gt;git-link&lt;/code&gt; generates a URL for the version of the file being visited.&lt;/p&gt; &#xA;&lt;h3&gt;Sourcegraph&lt;/h3&gt; &#xA;&lt;p&gt;To link to files on a Sourcegraph server add a git remote pointing to the repository&#39;s Sourcegraph page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git remote add sourcegraph https://sourcegraph.com/github.com/sshaw/copy-as-format&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Links can be generated by &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#usage&#34;&gt;specifying &lt;code&gt;sourcegraph&lt;/code&gt; as your remote&lt;/a&gt; when calling the desired link function or by &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#settings&#34;&gt;setting &lt;code&gt;sourcegraph&lt;/code&gt; as the default remote&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that the remote can be named anything but its URL&#39;s host must match what&#39;s in the associated link function&#39;s alist. This defaults to &lt;code&gt;&#34;sourcegraph&#34;&lt;/code&gt; but can be changed. See &lt;a href=&#34;https://raw.githubusercontent.com/sshaw/git-link/master/#building-links-and-adding-services&#34;&gt;Building Links and Adding Services&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;URLs with ports or an http scheme will not work. It&#39;s a trivial fix so if it&#39;s a problem for you please open an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Building Links and Adding Services&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-remote-alist&lt;/code&gt; is an alist containing &lt;code&gt;(REGEXP FUNCTION)&lt;/code&gt; elements. The FUNCTION creates URLs for file on remote host names that match the REGEXP. To add (or modify) how URLs are created for a given host, add appropriate elements to this list.&lt;/p&gt; &#xA;&lt;p&gt;As an example, one of the default elements in this alist is &lt;code&gt;(&#34;gitlab&#34; git-link-gitlab)&lt;/code&gt;. So the &lt;code&gt;git-link-gitlab&lt;/code&gt; function will be used to create URLs to files in remotes that match the &lt;em&gt;regexp&lt;/em&gt; &lt;code&gt;&#34;gitlab&#34;&lt;/code&gt;. That would cover common Gitlab host URLs like &lt;em&gt;&#34;gitlab.com&#34;&lt;/em&gt;, &lt;em&gt;&#34;gitlab.example.com&#34;&lt;/em&gt; and &lt;em&gt;&#34;gitlab.example.org&#34;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-link-commit-remote-alist&lt;/code&gt; is also an alist containing &lt;code&gt;(REGEXP FUNCTION)&lt;/code&gt; elements. Here, the FUNCTION creates URLs to the commit pages, for remote hosts matching REGEXP.&lt;/p&gt; &#xA;&lt;p&gt;If you use a self-hosted version of one of the supported services, but your remote URL does match with the defaults, you can configure these link function alists. For example, for a GitHub Enterprise instance at &lt;code&gt;gh.example.com&lt;/code&gt;, you could add the following to your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(eval-after-load &#39;git-link&#xA; &#39;(progn&#xA;   (add-to-list &#39;git-link-remote-alist&#xA;     &#39;(&#34;gh\\.example\\.com&#34; git-link-github))&#xA;   (add-to-list &#39;git-link-commit-remote-alist&#xA;     &#39;(&#34;gh\\.example\\.com&#34; git-link-commit-github))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;git-link&lt;/code&gt; signature is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOSTNAME DIRNAME FILENAME BRANCH COMMIT START END&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOSTNAME&lt;/code&gt; hostname of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIRNAME&lt;/code&gt; directory portion of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FILENAME&lt;/code&gt; source file, relative to &lt;code&gt;DIRNAME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BRANCH&lt;/code&gt; active branch, may be &lt;code&gt;nil&lt;/code&gt; if the repo&#39;s in &#34;detached HEAD&#34; state&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; SHA of the latest commit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;START&lt;/code&gt; starting line number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;END&lt;/code&gt; ending line number, &lt;code&gt;nil&lt;/code&gt; unless region is active&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;git-link-commit&lt;/code&gt; signature is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOSTNAME DIRNAME COMMIT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HOSTNAME&lt;/code&gt; hostname of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DIRNAME&lt;/code&gt; directory portion of the remote&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt; SHA of the commit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;See Also&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sshaw/copy-as-format&#34;&gt;copy-as-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sshaw/output-as-format&#34;&gt;output-as-format&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More tests!&lt;/li&gt; &#xA; &lt;li&gt;Consolidate &lt;code&gt;git-link-*-alist&lt;/code&gt;s&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git-link-grep&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>gagbo/consult-lsp</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/gagbo/consult-lsp</id>
    <link href="https://github.com/gagbo/consult-lsp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LSP-mode and consult.el helping each other&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Consult LSP-mode integration #+AUTHOR: Gerry Agbobada #+LANGUAGE: en&lt;/p&gt; &#xA;&lt;p&gt;#+HTML: &lt;a href=&#34;https://melpa.org/#/consult-lsp&#34;&gt;&lt;img alt=&#34;MELPA&#34; src=&#34;https://melpa.org/packages/consult-lsp-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+HTML: &lt;a href=&#34;https://stable.melpa.org/#/consult-lsp&#34;&gt;&lt;img alt=&#34;MELPA Stable&#34; src=&#34;https://stable.melpa.org/packages/consult-lsp-badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Introduction Helm and Ivy users have extra commands that leverage lsp-mode extra information, let&#39;s try to mimic a few features of [[https://github.com/emacs-lsp/helm-lsp][helm-lsp]] and [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] in consult workflow (tested with selectrum and dogfed with vertico)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Screenshots&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They tend not to be updated as often as changes happen, sorry if there are slight differences in UI. Those shots are more about giving an idea of what&#39;s happening.&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-lsp-diagnostics [[https://github.com/gagbo/consult-lsp/blob/screenshots/media/consult-lsp-diagnostics.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-lsp-symbols [[https://github.com/gagbo/consult-lsp/blob/screenshots/media/consult-lsp-symbols.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;#+caption: consult-lsp-file-symbols [[https://github.com/gagbo/consult-lsp/blob/screenshots/media/consult-lsp-file-symbols.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;consult-lsp-diagnostics :: Select diagnostics from current workspace. Pass prefix argument to search all workspaces&lt;/li&gt; &#xA; &lt;li&gt;consult-lsp-symbols :: Select symbols from current workspace. Pass prefix argument to search all workspaces.&lt;/li&gt; &#xA; &lt;li&gt;consult-lsp-file-symbols :: Interactively select a symbol from the current file, in a manner similar to consult-line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is currently no plan to add an interface to list and/or act on code-actions, but contributions are welcome!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration ** Customize Look and Feel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package provides 2 entry points per command in order to customize the appearance of candidates in the selection/completion interface. This is mostly for advanced users who are somewhat familiar with consult API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=*-transformer-function= :: Adapter function, responsible for transforming lsp data into a valid consult candidate. a valid &#34;consult candidate&#34; is more often than not a propertized string, with specific properties to enable extra features.&lt;/li&gt; &#xA; &lt;li&gt;=*-annotate-builder-function= :: Builder function, which returns a valid lambda for annotation/affixation support. This allows to add extra information to the candidates in the interface. The &lt;em&gt;returned&lt;/em&gt; lambda must take 1 argument and produce either a single string or a list of 3 elements (candidate prefix suffix), just as expected by either annotation-function or affixation-function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You are encouraged to take a look at the default values if you wish to customize these, especially the &lt;code&gt;file-symbols&lt;/code&gt; one, which is probably the easiest ones to grok, and use marginalia.&lt;/p&gt; &#xA;&lt;p&gt;** Keys *** Categories for symbols =consult-lsp-symbols= and =consult-lsp-file-symbols= can have the set of &#34;narrow&#34; keys you like by customizing =consult-lsp-symbols-narrow=.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;del&gt;cdrs&lt;/del&gt; of the alist must match the symbol types returned by LSP servers, AND have an &#34;Other&#34; key for everything that is not included.&lt;/p&gt; &#xA;&lt;p&gt;You can find categories by looking for the [[https://microsoft.github.io/language-server-protocol/specification.html#textDocument_documentSymbol][SymbolKind enum]] in the LSP specification.&lt;/p&gt; &#xA;&lt;p&gt;*** Bindings As you can do with helm-lsp,&lt;/p&gt; &#xA;&lt;p&gt;Use the following line to replace xref-find-apropos in lsp-mode controlled buffers:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (define-key lsp-mode-map [remap xref-find-apropos] #&#39;consult-lsp-symbols) #+end_src&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zkry/yaml.el</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/zkry/yaml.el</id>
    <link href="https://github.com/zkry/yaml.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YAML parser in Elisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;yaml.el&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/yaml&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/yaml-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;yaml.el is a YAML parser written in Emacs List without any external dependencies. It provides an interface similar to the Emacs JSON parsing utility. The functions provided are as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(yaml-parse-string string &amp;amp;rest args)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following keyword args are accepted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:object-type&lt;/code&gt; specifies the Lisp data structure to store parsed objects data in. It takes the following symbols: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;hash-table&lt;/code&gt; (default)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;alist&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;plist&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:object-key-type&lt;/code&gt; specifies how map keys should be handled. It takes the following symbols: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;string&lt;/code&gt; (default)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;symbol&lt;/code&gt; keys of maps will be converted to symbols. Not that this matches the behavior of the JSON parser.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:sequence-type&lt;/code&gt; specifies the Lisp data structure to store the parsed sequences in. It takes the following symbols: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;array&lt;/code&gt; (default)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;list&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:null-object&lt;/code&gt; specifies the lisp object to use for nulls. Defaults to the symbol &lt;code&gt;:null&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:false-object&lt;/code&gt; specifies the lisp object to use for false. Defaults to the symbol &lt;code&gt;:false&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(yaml-encode object)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function &lt;code&gt;yaml-encode&lt;/code&gt; will encode a Lisp object to a YAML string.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Until this is published to MELPA you will need to use the code from this repo directly. You can put yaml.el in you load path directly or use a tool like use-package or straight.el.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-emacs-lisp&#34;&gt;(require &#39;yaml)&#xA;&#xA;(yaml-parse-string &#34;&#xA;recipe:&#xA;  ingredients:&#xA;  - milk&#xA;  - eggs&#xA;  - oil&#xA;  - flour&#xA;  duration: 10&#xA;  steps: null&#34; :object-type &#39;alist&#xA;               :sequence-type &#39;array&#xA;               :null-object :empty)&#xA;&#xA;;; =&amp;gt; ((&#34;recipe&#34; (&#34;ingredients&#34; . [&#34;milk&#34; &#34;eggs&#34; &#34;oil&#34; &#34;flour&#34;]) (&#34;duration&#34; . 10) (&#34;steps&#34; . :empty)))&#xA;&#xA;(yaml-parse-string &#34;&#xA;translations:&#xA;  one: бір&#xA;  two: екі&#xA;  three: үш&#34;)&#xA;&#xA;;; =&amp;gt; #s(hash-table ... data (&#34;translations&#34; #s(hash-table ...)))&#xA;&#xA;&#xA;(yaml-encode &#39;(&#34;omitted&#34; ((count . 3) (value . 10) (items (&#34;ruby&#34; &#34;diamond&#34;))) &#34;omitted&#34;))&#xA;&#xA;;; =&amp;gt; &#34;&#xA;- omitted&#xA;- count: 3&#xA;  value: 10&#xA;  items:&#xA;    ruby: [diamond]&#xA;- omitted&#34;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Since this is implemented in Emacs Lisp performance is probably not the best. An alternative implementation using libyaml exists and can be found &lt;a href=&#34;https://github.com/syohex/emacs-libyaml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a very deeply nested YAML file and your &lt;code&gt;max-lisp-eval-depth&lt;/code&gt; variable is set too low, these is a chance that you might hit the maximum Lisp eval depth limit. In the future I may work on changing the parsing algorithm to avoid this problem but in the meantime you can bump up the &lt;code&gt;max-lisp-eval-depth&lt;/code&gt; variable in your config.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Sterlingg/json-snatcher</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/Sterlingg/json-snatcher</id>
    <link href="https://github.com/Sterlingg/json-snatcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get the path to a JSON element in Emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#json-snatcher.el&lt;/p&gt; &#xA;&lt;p&gt;Say you&#39;re looking through a large JSON file, and see a value that you want to extract programmatically. This Emacs extension will allow you to snatch the path to this value.&lt;/p&gt; &#xA;&lt;p&gt;Available on MELPA at &lt;a href=&#34;http://melpa.milkbox.net/#/json-snatcher&#34;&gt;http://melpa.milkbox.net/#/json-snatcher&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First include the package&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;json-snatcher)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the following lines to your .emacs file, which sets a hotkey when editing JSON files in either js or js2 mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun js-mode-bindings ()&#xA;&#34;Sets a hotkey for using the json-snatcher plugin&#34;&#xA;&#x9; (when (string-match  &#34;\\.json$&#34; (buffer-name))&#xA;        (local-set-key (kbd &#34;C-c C-g&#34;) &#39;jsons-print-path)))&#xA;(add-hook &#39;js-mode-hook &#39;js-mode-bindings)&#xA;(add-hook &#39;js2-mode-hook &#39;js-mode-bindings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example of the plugin at work&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Sterlingg/json-snatcher/raw/master/Demo/demo.gif&#34; alt=&#34;Lights, Camera, Action!&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-tree-sitter/elisp-tree-sitter</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/emacs-tree-sitter/elisp-tree-sitter</id>
    <link href="https://github.com/emacs-tree-sitter/elisp-tree-sitter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tree-sitter bindings for Emacs Lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ELisp Tree-sitter &lt;img src=&#34;https://raw.githubusercontent.com/emacs-tree-sitter/elisp-tree-sitter/master/doc/static/img/emacs-tree-sitter-96x96.png&#34; align=&#34;left&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://emacs-tree-sitter.github.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-latest-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/emacs-tree-sitter/elisp-tree-sitter/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/emacs-tree-sitter/elisp-tree-sitter/_apis/build/status/ci?branchName=master&amp;amp;label=build&amp;amp;api-version=6.0-preview.1&#34; alt=&#34;Azure Pipelines&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an Emacs Lisp binding for &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;tree-sitter&lt;/a&gt;, an incremental parsing library. It requires Emacs 25.1 or above, built with dynamic module support.&lt;/p&gt; &#xA;&lt;p&gt;It aims to be the foundation for a new breed of Emacs packages that understand code structurally. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Faster, fine-grained code highlighting.&lt;/li&gt; &#xA; &lt;li&gt;More flexible code folding.&lt;/li&gt; &#xA; &lt;li&gt;Structural editing (like Paredit, or even better) for non-Lisp code.&lt;/li&gt; &#xA; &lt;li&gt;More informative indexing for imenu.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The author of tree-sitter articulated its merits a lot better in this &lt;a href=&#34;https://www.thestrangeloop.com/2018/tree-sitter---a-new-parsing-system-for-programming-tools.html&#34;&gt;Strange Loop talk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://emacs-tree-sitter.github.io/installation/&#34;&gt;installation section&lt;/a&gt; in the documentation.&lt;/p&gt; &#xA;&lt;p&gt;If you want to hack on &lt;code&gt;emacs-tree-sitter&lt;/code&gt; itself, see the next section instead.&lt;/p&gt; &#xA;&lt;h2&gt;Setup for Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On Windows, use Powershell instead of Bash or cmd.exe.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repo with the &lt;code&gt;--recursive&lt;/code&gt; flag.&lt;/li&gt; &#xA; &lt;li&gt;Add 3 of its directories to &lt;code&gt;load-path&lt;/code&gt;: &lt;code&gt;core/&lt;/code&gt;, &lt;code&gt;lisp/&lt;/code&gt; and &lt;code&gt;langs/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://cask.readthedocs.io&#34;&gt;cask&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;bin/setup&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to hack on the high-level features (in Lisp) only:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make changes to the &lt;code&gt;.el&lt;/code&gt; files.&lt;/li&gt; &#xA; &lt;li&gt;Add tests to &lt;code&gt;tree-sitter-tests.el&lt;/code&gt; and run them with &lt;code&gt;bin/test&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to build additional (or all) grammars from source, or work on the core dynamic module, see the next 2 sections.&lt;/p&gt; &#xA;&lt;h3&gt;Building grammars from source&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are only interested in building the grammar binaries, not the dynamic module, check out &lt;a href=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs#building-grammars-from-source&#34;&gt;tree-sitter-langs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install NodeJS. It is needed to generate the grammar code from the JavaScript DSL. The recommended tool to manage NodeJS is &lt;a href=&#34;https://volta.sh/&#34;&gt;volta&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/creating-parsers#installation&#34;&gt;tree-sitter CLI tool&lt;/a&gt;: (Its binary can also be downloaded directly from &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter/releases&#34;&gt;GitHub&lt;/a&gt;.) &lt;strong&gt;Note: version 0.20+ cannot be used, as they introduced &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter/pull/1157&#34;&gt;a breaking change&lt;/a&gt; in binary storage location.&lt;/strong&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For yarn user&#xA;yarn global add tree-sitter-cli@0.19.3&#xA;&#xA;# For npm user&#xA;npm install -g tree-sitter-cli@0.19.3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;langs/script/compile&lt;/code&gt;. For example: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;langs/script/compile rust&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Working on the dynamic module&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://rustup.rs/&#34;&gt;Rust toolchain&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Test: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Continuously rebuild and test on change (requires &lt;a href=&#34;https://github.com/passcod/cargo-watch&#34;&gt;cargo-watch&lt;/a&gt;): &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/test watch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To test against a different version of Emacs, set the environment variable &lt;code&gt;EMACS&lt;/code&gt; (e.g. &lt;code&gt;EMACS=/snap/bin/emacs make test&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tree-sitter in Emacs&#39;s core: &lt;a href=&#34;https://github.com/casouri/emacs&#34;&gt;https://github.com/casouri/emacs&lt;/a&gt; (the future)&lt;/li&gt; &#xA; &lt;li&gt;Binding through C instead of Rust: &lt;a href=&#34;https://github.com/karlotness/tree-sitter.el&#34;&gt;https://github.com/karlotness/tree-sitter.el&lt;/a&gt; (dormant)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed. Please take a look at the &lt;a href=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter/issues&#34;&gt;issue list&lt;/a&gt; for ideas, or &lt;a href=&#34;https://github.com/emacs-tree-sitter/elisp-tree-sitter/issues/new&#34;&gt;create a new issue&lt;/a&gt; to describe any idea you have for improvement.&lt;/p&gt; &#xA;&lt;p&gt;For language-specific issues/features, please check out &lt;a href=&#34;https://github.com/emacs-tree-sitter/tree-sitter-langs&#34;&gt;tree-sitter-langs&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;Show respect and empathy towards others. Both technical empathy and general empathy are highly valued.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-lsp/lsp-mode</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/emacs-lsp/lsp-mode</id>
    <link href="https://github.com/emacs-lsp/lsp-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs client/library for the Language Server Protocol&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;h2&gt;title: LSP Mode - Language Server Protocol support for Emacs description: Language Server Protocol support with multiples languages support for Emacs root_file: README.md&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melpa.org/#/lsp-mode&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/lsp-mode-badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/lsp-mode&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/lsp-mode-badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/swuxy5AAgT&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/789885435026604033/widget.png?style=shield&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/emacs-lsp/lsp-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/logo.png&#34; width=&#34;240&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;Language Server Protocol Support for Emacs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacs-lsp/lsp-mode/master/examples/head.png&#34; alt=&#34;LSP mode&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode&#34;&gt;&lt;strong&gt;homepage&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/installation&#34;&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/languages&#34;&gt;&lt;strong&gt;languages&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/settings/mode/&#34;&gt;&lt;strong&gt;settings&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/&#34;&gt;&lt;strong&gt;tutorials&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/troubleshooting&#34;&gt;&lt;strong&gt;troubleshooting&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/gallery&#34;&gt;&lt;strong&gt;screenshots&lt;/strong&gt;&lt;/a&gt; • &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/faq&#34;&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;❤️&lt;/span&gt; &lt;strong&gt;Community Driven&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;💎&lt;/span&gt; &lt;strong&gt;Fully featured&lt;/strong&gt; - supports &lt;strong&gt;all&lt;/strong&gt; features in Language Server Protocol v3.14.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🚀&lt;/span&gt; &lt;strong&gt;Fast&lt;/strong&gt; - see &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/performance&#34;&gt;performance section&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🌟&lt;/span&gt; &lt;strong&gt;Flexible&lt;/strong&gt; - choose between full-blown IDE with flashy UI or minimal distraction free.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;⚙&lt;/span&gt; &lt;strong&gt;Easy to configure&lt;/strong&gt; - works out of the box and automatically upgrades if additional packages are present.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Client for &lt;a href=&#34;https://github.com/Microsoft/language-server-protocol/&#34;&gt;Language Server Protocol&lt;/a&gt; (v3.14). &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode&#34;&gt;lsp-mode&lt;/a&gt; aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like &lt;code&gt;company&lt;/code&gt;, &lt;code&gt;flycheck&lt;/code&gt; and &lt;code&gt;projectile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Non-blocking asynchronous calls&lt;/li&gt; &#xA; &lt;li&gt;Real-time Diagnostics/linting via &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt; (recommended) or &lt;code&gt;flymake&lt;/code&gt; when Emacs &amp;gt; 26 (requires flymake&amp;gt;=1.0.5)&lt;/li&gt; &#xA; &lt;li&gt;Code completion - &lt;code&gt;company-capf&lt;/code&gt; / &lt;code&gt;completion-at-point&lt;/code&gt; (note that &lt;a href=&#34;https://github.com/tigersoldier/company-lsp&#34;&gt;company-lsp&lt;/a&gt; is no longer supported).&lt;/li&gt; &#xA; &lt;li&gt;Hovers - using &lt;a href=&#34;https://emacs-lsp.github.io/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code actions - via &lt;code&gt;lsp-execute-code-action&lt;/code&gt;, &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#code-actions-on-modeline&#34;&gt;modeline&lt;/a&gt; (recommended) or &lt;a href=&#34;https://emacs-lsp.github.io/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; sideline.&lt;/li&gt; &#xA; &lt;li&gt;Code outline - using builtin &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html&#34;&gt;imenu&lt;/a&gt; or &lt;code&gt;helm-imenu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code navigation - using builtin &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html&#34;&gt;xref&lt;/a&gt;, &lt;a href=&#34;https://github.com/emacs-lsp/lsp-treemacs&#34;&gt;lsp-treemacs&lt;/a&gt; tree views or &lt;a href=&#34;https://emacs-lsp.github.io/lsp-ui&#34;&gt;lsp-ui&lt;/a&gt; peek functions.&lt;/li&gt; &#xA; &lt;li&gt;Code lens&lt;/li&gt; &#xA; &lt;li&gt;Symbol highlights&lt;/li&gt; &#xA; &lt;li&gt;Formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#project-errors-on-modeline&#34;&gt;Project errors&lt;/a&gt; on modeline&lt;/li&gt; &#xA; &lt;li&gt;Debugger - &lt;a href=&#34;https://emacs-lsp.github.io/dap-mode/&#34;&gt;dap-mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#breadcrumb-on-headerline&#34;&gt;Breadcrumb on headerline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helm integration - &lt;a href=&#34;https://github.com/emacs-lsp/helm-lsp/&#34;&gt;helm-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ivy integration - &lt;a href=&#34;https://github.com/emacs-lsp/lsp-ivy/&#34;&gt;lsp-ivy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Consult integration - &lt;a href=&#34;https://github.com/gagbo/consult-lsp&#34;&gt;consult-lsp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Treemacs integration - &lt;a href=&#34;https://github.com/emacs-lsp/lsp-treemacs&#34;&gt;lsp-treemacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Semantic tokens as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justbur/emacs-which-key/&#34;&gt;which-key&lt;/a&gt; integration for better discovery&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#iedit&#34;&gt;iedit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#dired&#34;&gt;dired&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/main-features/#integrations&#34;&gt;ido&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Presentations/demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/SystemCrafters&#34;&gt;System Crafters&lt;/a&gt; channel &lt;a href=&#34;https://www.youtube.com/playlist?list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN&#34;&gt;Emacs IDE Videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skybert&#34;&gt;skybert&lt;/a&gt;&#39;s emacsconf &lt;a href=&#34;https://media.emacsconf.org/2019/19.html&#34;&gt;presentation&lt;/a&gt; (Java)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thatwist&#34;&gt;thatwist&lt;/a&gt;&#39;s ScalaUA Conference &lt;a href=&#34;https://www.youtube.com/watch?v=x7ey0ifcqAg&amp;amp;feature=youtu.be&#34;&gt;presentation&lt;/a&gt; (Scala)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/lsp-docker/&#34;&gt;lsp-docker&lt;/a&gt; - provide docker image with preconfigured language servers with corresponding emacs configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sebastiencs/company-box/&#34;&gt;company-box&lt;/a&gt; - &lt;code&gt;company&lt;/code&gt; frontend with icons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emacs-lsp/dap-mode&#34;&gt;dap-mode&lt;/a&gt; - Debugger integration for &lt;code&gt;lsp-mode&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; - An alternative minimal LSP implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justbur/emacs-which-key/&#34;&gt;which-key&lt;/a&gt; - Emacs package that displays available keybindings in popup&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bbatsov/projectile/&#34;&gt;projectile&lt;/a&gt; - Project Interaction Library for Emacs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ubolonton/emacs-tree-sitter&#34;&gt;emacs-tree-sitter&lt;/a&gt; - Faster, fine-grained code highlighting via &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;tree-sitter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://akrl.sdf.org/gccemacs.html&#34;&gt;gccemacs&lt;/a&gt; - modified Emacs capable of compiling and running Emacs Lisp as native code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very much welcome!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Documentation for clients is generated from doc comments in the clients themselves (see &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-doc.el&#34;&gt;lsp-doc.el&lt;/a&gt;) and some metadata (see &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode/raw/master/docs/lsp-clients.json&#34;&gt;lsp-clients.json&lt;/a&gt;) so please submit corrections accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Support the project&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;emacs-lsp&lt;/code&gt; organization has more than &lt;strong&gt;20,000 lines of code&lt;/strong&gt;, to keep all of this working, we need to implement new features and help the community on a lot of issues.&lt;/p&gt; &#xA;&lt;p&gt;You can help us keep going and improving it by &lt;strong&gt;&lt;a href=&#34;https://github.com/sponsors/emacs-lsp&#34;&gt;supporting the project&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/emacs-lsp&#34;&gt;&lt;img src=&#34;https://opencollective.com/emacs-lsp/tiers/backer.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Members&lt;/h3&gt; &#xA;&lt;p&gt;Here it is a list of the current &lt;code&gt;lsp-mode&lt;/code&gt; members and what they are primary working on/responsible for.&lt;/p&gt; &#xA;&lt;table id=&#34;emacs-lsp-members&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/totbwf&#34;&gt; &lt;img src=&#34;https://github.com/totbwf.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;totbwf&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;totbwf&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; F# &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/brotzeit&#34;&gt; &lt;img src=&#34;https://github.com/brotzeit.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;brotzeit&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;brotzeit&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Rust &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/dsyzling&#34;&gt; &lt;img src=&#34;https://github.com/dsyzling.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;dsyzling&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;dsyzling&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Scala &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/kurnevsky&#34;&gt; &lt;img src=&#34;https://github.com/kurnevsky.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;kurnevsky&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kurnevsky&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Scala | Rust &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/seagle0128&#34;&gt; &lt;img src=&#34;https://github.com/seagle0128.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;seagle0128&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;seagle0128&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Go | Python MS &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/sebastiansturm&#34;&gt; &lt;img src=&#34;https://github.com/sebastiansturm.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;sebastiansturm&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;sebastiansturm&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core | C++ &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/vibhavp&#34;&gt; &lt;img src=&#34;https://github.com/vibhavp.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;vibhavp&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;vibhavp&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/yyoncho&#34;&gt; &lt;img src=&#34;https://github.com/yyoncho.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;yyoncho&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;yyoncho&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core | Java &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/ericdallo&#34;&gt; &lt;img src=&#34;https://github.com/ericdallo.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;ericdallo&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;ericdallo&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Dart/Flutter | Clojure &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/danielmartin&#34;&gt; &lt;img src=&#34;https://github.com/danielmartin.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;danielmartin&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;danielmartin&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; C++ | Swift &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/kiennq&#34;&gt; &lt;img src=&#34;https://github.com/kiennq.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;kiennq&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;kiennq&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; completions | pwsh &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/nbfalcon&#34;&gt; &lt;img src=&#34;https://github.com/nbfalcon.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;nbfalcon&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;nbfalcon&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; lsp-mode core | iedit &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://github.com/psibi&#34;&gt; &lt;img src=&#34;https://github.com/psibi.png&#34; width=&#34;100px;&#34; style=&#34;border-radius: 50%;&#34; alt=&#34;psibi&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;psibi&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &#xA;     &lt;br&gt; Terraform &#xA;    &lt;/div&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>slim-template/emacs-slim</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/slim-template/emacs-slim</id>
    <link href="https://github.com/slim-template/emacs-slim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Syntax highlighting for Slim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Synopsis&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;slim-mode&lt;/code&gt; provides Emacs support for editing &lt;a href=&#34;http://slim-lang.com&#34;&gt;Slim&lt;/a&gt; templates. It&#39;s based on &lt;code&gt;haml-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i50.tinypic.com/2441b8i.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;All users are encouraged to install &lt;code&gt;slim-mode&lt;/code&gt; via package.el.&lt;/p&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;p&gt;Just drop &lt;code&gt;slim-mode.el&lt;/code&gt; somewhere in your &lt;code&gt;load-path&lt;/code&gt;. I favour the folder &lt;code&gt;~/.emacs.d/vendor&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;load-path &#34;~/emacs.d/vendor&#34;)&#xA;(require &#39;slim-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Marmalade&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re an Emacs 24 user or you have a recent version of package.el you can install &lt;code&gt;slim-mode&lt;/code&gt; from the &lt;a href=&#34;http://marmalade-repo.org/&#34;&gt;Marmalade&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;MELPA&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re an Emacs 24 user or you have a recent version of package.el you can install &lt;code&gt;slim-mode&lt;/code&gt; from the &lt;a href=&#34;http://melpa.milkbox.net/&#34;&gt;MELPA&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;Emacs Prelude&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;slim-mode&lt;/code&gt; is part of the &lt;a href=&#34;https://github.com/bbatsov/prelude&#34;&gt;Emacs Prelude&lt;/a&gt;. If you&#39;re a Prelude user - &lt;code&gt;slim-mode&lt;/code&gt; is already properly configured and ready for action.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Just start editing slim files. :-)&lt;/p&gt; &#xA;&lt;h1&gt;Caveats&lt;/h1&gt; &#xA;&lt;p&gt;The mode is a work in progress and not everything is implemented yet. Be patient and send bug reports when you notice that something is wrong/missing/not perfect.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Check out the project&#39;s &lt;a href=&#34;https://github.com/slim-template/emacs-slim/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open&#34;&gt;issue list&lt;/a&gt; a list of unresolved issues. By the way - feel free to fix any of them and sent us a pull request. :-)&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/slim-template/emacs-slim/contributors&#34;&gt;list&lt;/a&gt; of all the people who have contributed to the development of &lt;code&gt;slim-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs &amp;amp; Improvements&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and suggestions for improvements are always welcome. GitHub pull requests are even better! :-)&lt;/p&gt; &#xA;&lt;p&gt;Cheers,&lt;br&gt; The &lt;code&gt;slim-mode&lt;/code&gt; Team&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacs-php/php-mode</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/emacs-php/php-mode</id>
    <link href="https://github.com/emacs-php/php-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful and flexible Emacs major mode for editing PHP scripts&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Emacs PHP Mode&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Emacs-28.1-blue.svg?sanitize=true&#34; alt=&#34;Emacs: 28.1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://php.net/manual/migration81.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lang-PHP%208.1-brightgreen.svg?sanitize=true&#34; alt=&#34;lang: PHP 8.1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://php.net/downloads.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lang-PHP%207-green.svg?sanitize=true&#34; alt=&#34;lang: PHP 7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emacs-php/php-mode/actions&#34;&gt;&lt;img src=&#34;https://github.com/emacs-php/php-mode/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_v3-green.svg?sanitize=true&#34; alt=&#34;GPL v3&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu/php-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/php-mode.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/php-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/php-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;A powerful and flexible Emacs major mode for editing PHP scripts&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Please submit any bug reports or feature requests by creating issues on &lt;a href=&#34;https://github.com/emacs-php/php-mode&#34;&gt;the GitHub page for PHP Mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PHP Mode works on Emacs 25.2 or later.&lt;/strong&gt; PHP Mode may work with older versions of Emacs but this is not guaranteed. Bug reports for problems related to using PHP Mode with older versions of Emacs will most like &lt;em&gt;not&lt;/em&gt; be addressed.&lt;/p&gt; &#xA;&lt;p&gt;The current support policy can be found on the &lt;a href=&#34;https://github.com/emacs-php/php-mode/wiki/Supported-Version&#34;&gt;Supported Version&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;(RECOMMENDED)&lt;/strong&gt; Install from NonGNU ELPA&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elpa.nongnu.org/nongnu/php-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu/php-mode.svg?sanitize=true&#34; alt=&#34;NonGNU ELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://elpa.nongnu.org/nongnu-devel/php-mode.html&#34;&gt;&lt;img src=&#34;https://elpa.nongnu.org/nongnu-devel/php-mode.svg?sanitize=true&#34; alt=&#34;NonGNU-devel ELPA&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emacs 28 (latest stable release) includes &lt;a href=&#34;https://elpa.nongnu.org/&#34;&gt;NonGNU ELPA&lt;/a&gt; as the default package repository.&lt;/p&gt; &#xA;&lt;h3&gt;Install from MELPA&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://melpa.org/#/php-mode&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/php-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/php-mode&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/php-mode-badge.svg?sanitize=true&#34; alt=&#34;melpa stable badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;With GNU Emacs 24 or later then you can use its &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html&#34;&gt;package&lt;/a&gt; feature (or &lt;a href=&#34;https://github.com/cask/cask&#34;&gt;Cask&lt;/a&gt;) to install PHP Mode from &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; or &lt;a href=&#34;https://stable.melpa.org/&#34;&gt;MELPA Stable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install using OS package system&lt;/h3&gt; &#xA;&lt;p&gt;PHP Mode is available from &lt;a href=&#34;https://repology.org/project/emacs:php-mode/versions&#34;&gt;package systems provided by several OSs&lt;/a&gt;. On Debian, and operating systems derived from it, such as Ubuntu, the easiest way to add PHP support to Emacs is &lt;code&gt;sudo apt install elpa-php-mode&lt;/code&gt;. &#34;Stable&#34; releases of these operating systems include a well-tested frozen version of this package that is always older than the latest upstream version of PHP Mode. Autoloads and byte-compilation are automatic.&lt;/p&gt; &#xA;&lt;p&gt;Please consider installing the package provided in &lt;code&gt;sid&lt;/code&gt; (aka: &#34;unstable&#34;, a rolling release) in order to benefit from the latest PHP Mode features and performance improvements. The latest version can be found here: &lt;a href=&#34;https://packages.debian.org/sid/elpa-php-mode&#34;&gt;&lt;code&gt;elpa-php-mode&lt;/code&gt;&lt;/a&gt;. Investigate &#34;apt-pinning&#34; to make tracking this update stream automatic.&lt;/p&gt; &#xA;&lt;p&gt;Also, the &lt;code&gt;php-elisp&lt;/code&gt; package provided by &lt;a href=&#34;https://packages.debian.org/stretch/php-elisp&#34;&gt;Debian 9 (stretch)&lt;/a&gt; and &lt;a href=&#34;https://packages.ubuntu.com/cosmic/php-elisp&#34;&gt;Ubuntu 18.10&lt;/a&gt; and earlier is &lt;a href=&#34;https://github.com/emacs-php/php-mode/issues/430&#34;&gt;extremely old&lt;/a&gt;, so &lt;strong&gt;PLEASE DO NOT INSTALL IT&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to depend on a package manager, you can install Lisp files directly in the traditional way. See &lt;a href=&#34;https://github.com/emacs-php/php-mode/wiki/Manual-installation&#34;&gt;Manual installation&lt;/a&gt; for our recommended setup method.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;PHP Mode&#39;s default style might not be what you expect. Before filing a bug, please try the following: &lt;code&gt;C-h v php-mode-coding-style&lt;/code&gt;, to get the list of available styles. Then use &lt;code&gt;M-x php-set-style&lt;/code&gt; for each of these, to check to see if one of them is to your liking. Use &lt;code&gt;TODO: Please comment on what config method you&#39;d like to recommend to users&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;p&gt;When reporting a bug please run the function &lt;code&gt;M-x php-mode-debug&lt;/code&gt; and include its output in your bug report. This helps up reproduce any problem you may have.&lt;/p&gt; &#xA;&lt;h2&gt;Experimental and In-Progress Features&lt;/h2&gt; &#xA;&lt;h3&gt;CC Mode, CEDET, EDE, and Semantic&lt;/h3&gt; &#xA;&lt;p&gt;In 2013 Daniel Haxney began rewriting parts of PHP Mode in terms of Emacs&#39; built-in CC Mode. This laid the foundation for incorporating some of the inherit IDE-ish features of Emacs, such as CEDET, EDE, and Semantic. Support for these tools continues to improve thanks to the work of Andrea Turso, Steven Rémot, Joris Steyn, and others. If you wish to test, contribute to, or simply experiment with such features then &lt;a href=&#34;https://github.com/emacs-php/php-mode/issues/256&#34;&gt;this thread is a good place to start&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;PHP 7 Support&lt;/h3&gt; &#xA;&lt;p&gt;PHP 7 has been released. PHP Mode supports the following features and changes from PHP 7:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Type-hints for return values in functions and methods receive syntax highlighting in the same way as type-hints for function and method parameters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PHP Mode treats &lt;code&gt;yield from&lt;/code&gt; as keyword in the same way it already does for a sole &lt;code&gt;yield&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It recognizes &lt;code&gt;strict_types&lt;/code&gt; as a special declaration in the same way as &lt;code&gt;ticks&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;New Keywords&lt;/h3&gt; &#xA;&lt;p&gt;Now PHP Mode supports syntax highlighting for new keywords which PHP 5.4 introduced, e.g. those related to traits, such as &lt;code&gt;insteadof&lt;/code&gt;. Also supported are the older keywords &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Constants&lt;/h3&gt; &#xA;&lt;p&gt;Syntax highlighting includes every magic constant and predefined constant listed on the official PHP site. However, some constants from specific extensions are not currently included.&lt;/p&gt; &#xA;&lt;h3&gt;Traits, Interfaces, and Namespaces&lt;/h3&gt; &#xA;&lt;p&gt;Traits, interfaces, and namespaces now appear under Imenu listings. Fontification behaves properly for namespaces as well, so that code like &lt;code&gt;namespace Foo\Bar\Baz&lt;/code&gt; no longer looks like a warning. This is also true for namespace aliases, e.g. &lt;code&gt;use &amp;lt;namespace&amp;gt; as &amp;lt;alias&amp;gt;&lt;/code&gt;; currently the aliased name is not listed in Imenu, but future versions will address this.&lt;/p&gt; &#xA;&lt;h3&gt;Treatment of Underscores&lt;/h3&gt; &#xA;&lt;p&gt;PHP Mode treats underscores as ‘symbol constituents’ (in Emacs terminology) so that you can use keys like &lt;code&gt;M-f&lt;/code&gt; and &lt;code&gt;M-b&lt;/code&gt; to move through the individual parts of a variable name like &lt;code&gt;$foo_bar_baz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chained Method Calls&lt;/h3&gt; &#xA;&lt;p&gt;PHP Mode can align method calls over multiple lines anchored around the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$object-&amp;gt;foo()&#xA;       -&amp;gt;bar()&#xA;       -&amp;gt;baz();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This behaviour is off by default, but you can customize the variable &lt;code&gt;php-mode-lineup-cascaded-calls&lt;/code&gt; to enable this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Alignment will only work if you use one of the php-mode coding styles or inherit one of the styles.&lt;/p&gt; &#xA;&lt;h3&gt;Nested Array Formatting&lt;/h3&gt; &#xA;&lt;p&gt;Nested function calls and &lt;code&gt;array()&lt;/code&gt; structures now look better by default (or at least in my opinion). Here is an example of the style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$results = Post::model()-&amp;gt;find(&#xA;    array(&#xA;        &#39;select&#39; =&amp;gt; &#39;title&#39;,&#xA;        &#39;condition&#39; =&amp;gt; &#39;postID=:postID&#39;,&#xA;        &#39;params&#39; =&amp;gt; array(&#39;:postID&#39; =&amp;gt; 10),&#xA;    )&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Anonymous Functions&lt;/h3&gt; &#xA;&lt;p&gt;Anonymous functions such as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$greet = function($name) { ... };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will now appear on Imenu; in this case the name will be &lt;code&gt;$greet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Flymake Support&lt;/h3&gt; &#xA;&lt;p&gt;By customizing the variable &lt;code&gt;php-executable&lt;/code&gt; you can enable Flymake mode in order to see warnings and errors in real-time as you write code.&lt;/p&gt; &#xA;&lt;h3&gt;Search Local Documentation&lt;/h3&gt; &#xA;&lt;p&gt;The key command &lt;code&gt;C-c C-f&lt;/code&gt; will search the PHP website for documentation on the word under the cursor. However, if you have a &lt;a href=&#34;http://us2.php.net/download-docs.php&#34;&gt;local copy of the PHP documentation&lt;/a&gt; then PHP Mode will try searching that documentation first. All you need to do is customize the variable &lt;code&gt;php-manual-path&lt;/code&gt; and give it the path to your copy of the documentation. If PHP Mode cannot find something locally then it will still fallback on searching the PHP website.&lt;/p&gt; &#xA;&lt;h3&gt;Executing Regions of PHP&lt;/h3&gt; &#xA;&lt;p&gt;The command &lt;code&gt;php-send-region&lt;/code&gt;, which is bound to &lt;code&gt;C-c C-r&lt;/code&gt; by default, will execute the selected region of PHP code. In conjunction with the Emacs command &lt;code&gt;C-x h&lt;/code&gt; you can use this to execute an entire file. Any output will appear in a buffer called &lt;code&gt;*PHP*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;PHPDoc Tag / Annotation Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;PHPDoc is a documentation format similar to &lt;a href=&#34;https://en.wikipedia.org/wiki/Javadoc&#34;&gt;JavaDoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are &lt;code&gt;@param&lt;/code&gt;, &lt;code&gt;@return&lt;/code&gt;, &lt;code&gt;@var&lt;/code&gt;... etc in the notation called &lt;strong&gt;tag&lt;/strong&gt;, look at &lt;a href=&#34;https://phpdoc.org/docs/latest/references/phpdoc/tags/index.html&#34;&gt;list of tags defined by phpDocumentor2&lt;/a&gt;. (These tags are compatible with static type checkers like PhpStorm and &lt;a href=&#34;https://github.com/etsy/phan&#34;&gt;Phan&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;In addition, it also partially supports notation called &lt;strong&gt;annotation&lt;/strong&gt;. Annotation has a slightly different grammar from tag, and the example is &lt;code&gt;@Annotation(attr1=&#34;vvv&#34;, attr2=&#34;zzz&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://symfony.com/&#34;&gt;Symfony&lt;/a&gt; project and &lt;a href=&#34;https://github.com/goaop/framework&#34;&gt;Go! AOP&lt;/a&gt; and some projects/frameworks use annotation grammer based on &lt;a href=&#34;https://www.doctrine-project.org/projects/doctrine-annotations/en/latest/index.html&#34;&gt;Doctrine Annotations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**&#xA; * Summary of Product class&#xA; *&#xA; * @copyright 2112 John Doe&#xA; * @license https://spdx.org/licenses/Apache-2.0.html Apache License 2.0&#xA; * @ORM\Entity&#xA; * @ORM\Table(name=&#34;product&#34;)&#xA; */&#xA;class Product&#xA;{&#xA;    /**&#xA;     * @ORM\Id&#xA;     * @ORM\Column(type=&#34;integer&#34;)&#xA;     * @ORM\GeneratedValue(strategy=&#34;AUTO&#34;)&#xA;     */&#xA;    protected $id;&#xA;&#xA;    /**&#xA;     * @ORM\Column(type=&#34;string&#34;, length=100)&#xA;     */&#xA;    protected $name;&#xA;&#xA;    /**&#xA;     * @ORM\Column(type=&#34;decimal&#34;, scale=2)&#xA;     */&#xA;    protected $price;&#xA;&#xA;    /**&#xA;     * @ORM\Column(type=&#34;text&#34;)&#xA;     */&#xA;    protected $description;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The annotations are the lines that begin with the &lt;code&gt;@&lt;/code&gt; character, and PHP Mode will give these special highlighting to help them stand out.&lt;/p&gt; &#xA;&lt;p&gt;PHP Mode has not fully supported &lt;a href=&#34;https://github.com/phpDocumentor/fig-standards/raw/master/proposed/phpdoc.md&#34;&gt;PSR-5: PHPDoc (Draft)&lt;/a&gt; yet. We want to support them, but the current implementation still limited. See issue &lt;a href=&#34;https://github.com/emacs-php/php-mode/issues/478&#34;&gt;#478&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Coding Styles&lt;/h3&gt; &#xA;&lt;p&gt;By default PHP Mode tries to provide a reasonable style for indentation and formatting, which you can use via the function &lt;code&gt;php-enable-default-coding-style&lt;/code&gt;. However, it provides other options suited for particular projects which you may find useful. Other coding styles are available through these functions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;php-enable-pear-coding-style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php-enable-drupal-coding-style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php-enable-wordpress-coding-style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php-enable-symfony2-coding-style&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php-enable-psr2-coding-style&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;They will help format your code for PEAR/PSR-2 projects, or work on Drupal, WordPress, and Symfony2 software, respectively. You may enable any of them by default by running &lt;code&gt;M-x customize-group &amp;lt;RET&amp;gt; php&lt;/code&gt; and looking for the ‘PHP Mode Coding Style’ option. You may also enable any of these via a hook, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;php-mode-hook &#39;php-enable-default-coding-style)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Symfony2 Style&lt;/h4&gt; &#xA;&lt;p&gt;With this style method call chains can be formatted with indented continuation and a hanging semi-colon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    $user1&#xA;        -&amp;gt;setCreateDate(new \DateTime(&#39;2007-05-07 01:34:45&#39;))&#xA;        -&amp;gt;setLastDate(new \DateTime(&#39;2012-08-18 19:03:02&#39;))&#xA;        -&amp;gt;setUsername(&#39;jay&#39;)&#xA;    ;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This style is used widely throughout Symfony2 source code even if it is not explicitly mentioned in their conventions documents.&lt;/p&gt; &#xA;&lt;h3&gt;Avoid HTML Template Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Many developers use PHP Mode to edit pure PHP scripts (e.g. files with only PHP and no HTML). A basic compatibility layer with HTML has historically been part of PHP Mode but it does not work perfectly and can cause some bad side effects such as slowness and incorrect font locking. Configuring the &lt;code&gt;php-template-compatibility&lt;/code&gt; property with a &lt;code&gt;nil&lt;/code&gt; will cancel any attempt of HTML compatibility. &lt;a href=&#34;http://web-mode.org/&#34;&gt;Web Mode&lt;/a&gt; is a great alternative to PHP Mode if you need to work with PHP scripts that do contain HTML and other markup.&lt;/p&gt; &#xA;&lt;h3&gt;Subword Mode&lt;/h3&gt; &#xA;&lt;p&gt;GNU Emacs comes with &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/ccmode/Subword-Movement.html&#34;&gt;Subword Mode&lt;/a&gt;, a minor mode that allows you to navigate the parts of a &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%A1%E3%83%AB%E3%82%B1%E3%83%BC%E3%82%B9&#34;&gt;camelCase&lt;/a&gt; as if they were separate words. For example, PHP Mode treats the variable &lt;code&gt;$fooBarBaz&lt;/code&gt; as a whole name by default. But if you enable Subword Mode then Emacs will treat the variable name as three separate words, and therefore word-related commands (e.g. &lt;code&gt;M-f&lt;/code&gt;, &lt;code&gt;M-b&lt;/code&gt;, &lt;code&gt;M-d&lt;/code&gt;) will only affect the camelCase part of the name under the cursor.&lt;/p&gt; &#xA;&lt;p&gt;If you want to always use Subword Mode for PHP files then you can add this to your Emacs configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-hook &#39;php-mode-hook (lambda () (subword-mode 1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key-binding &lt;code&gt;C-c C-w&lt;/code&gt; will also toggle Subword Mode on and off.&lt;/p&gt; &#xA;&lt;h3&gt;Insert current class/namespace&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(with-eval-after-load &#39;php-mode&#xA;  (define-key php-mode-map (kbd &#34;C-c C--&#34;) &#39;php-current-class)&#xA;  (define-key php-mode-map (kbd &#34;C-c C-=&#34;) &#39;php-current-namespace))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other Packages for PHP programming&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Completions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/xcwen/ac-php&#34;&gt;ac-php&lt;/a&gt;: &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;company-mode&lt;/a&gt; and &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;auto-complete&lt;/a&gt; for PHP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Syntax checking &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/flycheck/flycheck/&#34;&gt;flycheck&lt;/a&gt;: On the fly syntax checker&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/purcell/flymake-php&#34;&gt;flymake-php&lt;/a&gt;: flymake for PHP files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Snippet &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ejmr/php-auto-yasnippets&#34;&gt;php-auto-yasnippets&lt;/a&gt;: Dynamically Generated YASnippets for PHP Code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Documentation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/leoliu/ggtags&#34;&gt;ggtags&lt;/a&gt;: eldoc by using GNU global tags&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sabof/php-eldoc&#34;&gt;php-eldoc&lt;/a&gt;: eldoc backend for PHP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Testing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nlamirault/phpunit.el&#34;&gt;phpunit&lt;/a&gt;: phpunit test command tool&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Style &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nishimaki10/emacs-phpcbf&#34;&gt;phpcbf&lt;/a&gt;: PHP_CodeSniffer for Emacs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Semantic &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/stevenremot/ede-php-autoload&#34;&gt;ede-php-autoload&lt;/a&gt;: Semantic for PHP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Framework &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/k1LoW/emacs-cake&#34;&gt;cake&lt;/a&gt;: minor-mode for CakePHP&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/k1LoW/emacs-cake2&#34;&gt;cake2&lt;/a&gt;: minor-mode for CakePHP2&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/emacs-php/php-mode/master/CONTRIBUTING.md#english&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The Wiki&lt;/h2&gt; &#xA;&lt;p&gt;The GitHub project page has a &lt;a href=&#34;https://github.com/emacs-php/php-mode/wiki&#34;&gt;wiki&lt;/a&gt; that you should feel free to edit. The wiki lists the features and bugs that are on plan to include in upcoming versions of PHP Mode. It is also a place to add any tips to make the mode more useful.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;PHP Mode is licensed under &lt;a href=&#34;https://www.gnu.org/licenses/quick-guide-gplv3.html&#34;&gt;GNU General Public License Version 3&lt;/a&gt; (GPLv3).&lt;/p&gt; &#xA;&lt;p&gt;This project originated in &lt;code&gt;php-mode.el&lt;/code&gt; written by &lt;a href=&#34;https://github.com/turadg&#34;&gt;Turadg Aleahmad&lt;/a&gt; in 1999. In 2013 &lt;a href=&#34;https://github.com/haxney&#34;&gt;Daniel Hackney&lt;/a&gt; began rewriting parts of PHP Mode in terms of Emacs&#39; built-in CC Mode. Other contributors are listed in &lt;a href=&#34;https://github.com/emacs-php/php-mode/wiki/Authors&#34;&gt;Authors&lt;/a&gt; and &lt;a href=&#34;https://github.com/emacs-php/php-mode/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project was maintained by &lt;a href=&#34;https://github.com/ejmr&#34;&gt;Eric James Michael Ritz&lt;/a&gt; until 2017. Currently, the &lt;a href=&#34;https://github.com/emacs-php&#34;&gt;Friends of Emacs-PHP Development&lt;/a&gt; community inherits PHP Mode.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code&gt;Copyright (C) 2018-2020  Friends of Emacs-PHP development&#xA;Copyright (C) 1999, 2000, 2001, 2003, 2004 Turadg Aleahmad&#xA;              2008 Aaron S. Hawley&#xA;              2011, 2012, 2013, 2014, 2015, 2016, 2017 Eric James Michael Ritz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA; &lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA; &lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>ZehCnaS34/zonokai-emacs</title>
    <updated>2022-06-02T01:40:34Z</updated>
    <id>tag:github.com,2022-06-02:/ZehCnaS34/zonokai-emacs</id>
    <link href="https://github.com/ZehCnaS34/zonokai-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blue based theme with red green and yellow accents. (OG)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zonokai theme&lt;/h1&gt; &#xA;&lt;p&gt;A blue based theme for emacs. With green red yellow orange accent colors.&lt;/p&gt; &#xA;&lt;p&gt;The theme started out as just a blue one, but it now supports a red version. The red version is generated by taking the complement of the blue version with some tweaks to make the visibility of the red one more pleasing to the eye. btw, I still like the blue theme better.&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;This theme is made for emacs 24 and up.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;This theme is available on &lt;a href=&#34;https://melpa.org/&#34;&gt;MELPA&lt;/a&gt; package.el If you don&#39;t have that repo, add it and then run a.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x package-install zonokai-theme&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;M-x load-theme&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The default theme (and advised one) is Zonokai-blue. To load the blue theme add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(load-theme &#39;zonokai-blue t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to your Emacs configuration.&lt;/p&gt; &#xA;&lt;p&gt;the Zonokai-red theme is still being polished. But if you still would like to try it out, add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(load-theme &#39;zonokai-red t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tell me how you like it. If you want to add some font faces, just make a pull&lt;/p&gt; &#xA;&lt;h3&gt;Customizing&lt;/h3&gt; &#xA;&lt;h5&gt;TODO:&lt;/h5&gt; &#xA;&lt;p&gt;Going to add some stuff like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mode-line settings&lt;/li&gt; &#xA; &lt;li&gt;fringe color&lt;/li&gt; &#xA; &lt;li&gt;italics&lt;/li&gt; &#xA; &lt;li&gt;bold&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Blue version&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ZehCnaS34/zonokai-emacs/raw/master/blue.png&#34; alt=&#34;blue&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Red version&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ZehCnaS34/zonokai-emacs/raw/master/red.png&#34; alt=&#34;red&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>