<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-25T01:33:56Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rexim/org-cliplink</title>
    <updated>2022-10-25T01:33:56Z</updated>
    <id>tag:github.com,2022-10-25:/rexim/org-cliplink</id>
    <link href="https://github.com/rexim/org-cliplink" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Insert org-mode links from clipboard&lt;/p&gt;&lt;hr&gt;&lt;p&gt;[[http://melpa.org/#/org-cliplink][file:http://melpa.org/packages/org-cliplink-badge.svg]] [[https://travis-ci.org/rexim/org-cliplink][file:https://travis-ci.org/rexim/org-cliplink.svg?branch=master]] [[https://coveralls.io/r/rexim/org-cliplink][file:https://coveralls.io/repos/rexim/org-cliplink/badge.svg]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;org-cliplink&lt;/p&gt; &lt;p&gt;[[http://i.imgur.com/oA0birm.gif]]&lt;/p&gt; &lt;p&gt;A simple command that takes a URL from the clipboard and inserts an org-mode link with a title of a page found by the URL into the current buffer.&lt;/p&gt; &lt;p&gt;This code was a part of my Emacs config almost a year. I decided to publish it as a separate package in case someone needs this feature too.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Usage&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** org-cliplink&lt;/p&gt; &#xA;&lt;p&gt;Bind &lt;del&gt;org-cliplink&lt;/del&gt; function to something. For example, put this line in your init file:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (global-set-key (kbd &#34;C-x p i&#34;) &#39;org-cliplink) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;Then copy any http/https URL to the clipboard, switch to the Emacs window and hit &lt;del&gt;C-x p i&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** org-cliplink-capture&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;org-cliplink&lt;/del&gt; version for [[https://www.gnu.org/software/emacs/manual/html_node/org/Capture.html#Capture][org-capture]] templates. Makes synchronous request. Returns the link instead of inserting it to the current buffer. &lt;em&gt;Doesn’t support Basic Auth. Doesn’t support cURL transport.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is how it&#39;s supposed to be used in [[https://www.gnu.org/software/emacs/manual/html_node/org/Capture-templates.html#Capture-templates][org-capture-templates]]:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (setq org-capture-templates &#39;((&#34;K&#34; &#34;Cliplink capture task&#34; entry (file &#34;&#34;) &#34;* TODO %(org-cliplink-capture) \n SCHEDULED: %t\n&#34; :empty-lines 1))) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Custom Transformers&lt;/p&gt; &#xA;&lt;p&gt;You can actually customize how org-cliplink transforms and inserts url and title to the current buffer. To do that use &lt;del&gt;org-cliplink-insert-transformed-title&lt;/del&gt; function. It takes the URL and a CALLBACK which is invoked when the title is retrieved.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to strip off &lt;del&gt;Github - &#xA;  &lt;description&gt;&#xA;   :&#xA;  &lt;/description&gt;&lt;/del&gt; from the GitHub titles you can implement the following &lt;del&gt;custom-org-cliplink&lt;/del&gt; function and use it instead of the original &lt;del&gt;org-cliplink&lt;/del&gt;:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp (defun custom-org-cliplink () (interactive) (org-cliplink-insert-transformed-title (org-cliplink-clipboard-content) ;take the URL from the CLIPBOARD (lambda (url title) (let* ((parsed-url (url-generic-parse-url url)) ;parse the url (clean-title (cond ;; if the host is github.com, cleanup the title ((string= (url-host parsed-url) &#34;github.com&#34;) (replace-regexp-in-string &#34;GitHub - .&lt;em&gt;: \(.&lt;/em&gt;\)&#34; &#34;\1&#34; title)) ;; otherwise keep the original title (t title)))) ;; forward the title to the default org-cliplink transformer (org-cliplink-org-mode-link-transformer url clean-title))))) #+END_SRC&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Requirements&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux&lt;/li&gt; &#xA;   &lt;li&gt;Emacs version 24.4+&lt;/li&gt; &#xA;   &lt;li&gt;cURL 7.35.0+ (optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Windows&lt;/p&gt; &#xA;&lt;p&gt;Windows is not officially supported until [[https://github.com/rexim/org-cliplink/issues/35][#35]] is resolved.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GnuTLS — if you use Emacs installation from the official GNU FTP server — &lt;a href=&#34;ftp://ftp.gnu.org/gnu/emacs/windows/&#34;&gt;ftp://ftp.gnu.org/gnu/emacs/windows/&lt;/a&gt; — you may simply download the latest version of GnuTLS from &lt;a href=&#34;ftp://ftp.gnutls.org/gcrypt/gnutls/w32/&#34;&gt;ftp://ftp.gnutls.org/gcrypt/gnutls/w32/&lt;/a&gt; and copy the content of the downloaded archive to the emacs installation folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Bugs&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rexim/org-cliplink/labels/bug&#34;&gt;https://github.com/rexim/org-cliplink/labels/bug&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Development&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;open &lt;del&gt;org-cliplink.el&lt;/del&gt; in Emacs;&lt;/li&gt; &#xA;   &lt;li&gt;change something;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;M-x eval-buffer RET&lt;/del&gt;;&lt;/li&gt; &#xA;   &lt;li&gt;manual testing;&lt;/li&gt; &#xA;   &lt;li&gt;go to 3 until it&#39;s done;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Automated testing&lt;/p&gt; &#xA;&lt;p&gt;For automated testing you need to install [[http://cask.readthedocs.org/en/latest/][Cask]] first.&lt;/p&gt; &#xA;&lt;p&gt;To run unit tests:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC bash $ cask # only once to download development dependencies $ cask exec ert-runner #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;To run integration and unit tests together:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC bash $ ./run-travis-ci.sh #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This exact script is run on every push to [[https://github.com/rexim/org-cliplink][org-cliplink GitHub repo]] on [[https://travis-ci.org/rexim/org-cliplink/][Travis CI]] (that&#39;s why it&#39;s called &lt;del&gt;run-travis-ci.sh&lt;/del&gt;). This script starts up a testing web-server, executes integrations tests defined in &lt;del&gt;*-integration-tests.el&lt;/del&gt; files and executes unit tests after that.&lt;/p&gt; &#xA;&lt;p&gt;You can start the testing web-server standalone:&lt;/p&gt; &#xA;&lt;p&gt;#+BEGIN_SRC bash $ ./run-testing-server.py #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;It requires Python 2.7.6+. It will serve &lt;del&gt;test-data/site&lt;/del&gt; folder on different ports with different features (like HTTPS, Gziped content, Basic Auth, etc.).&lt;/p&gt; &#xA;&lt;p&gt;To stop the server just &lt;del&gt;^C&lt;/del&gt; it.&lt;/p&gt; &#xA;&lt;p&gt;The automated testing stuff was tested only under Linux so far.&lt;/p&gt; &#xA;&lt;p&gt;** Contribution&lt;/p&gt; &#xA;&lt;p&gt;This command doesn&#39;t handle some cases (like different encodings) but I do my best to improve it. If you find this code useful and want to make a contribution I&#39;m waiting for your pull requests. :)&lt;/p&gt; &#xA;&lt;p&gt;Thanks.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>emacsmirror/org-contrib</title>
    <updated>2022-10-25T01:33:56Z</updated>
    <id>tag:github.com,2022-10-25:/emacsmirror/org-contrib</id>
    <link href="https://github.com/emacsmirror/org-contrib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unmaintained add-ons for Org-mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This repository contains add-ons to Org.&lt;/p&gt; &#xA;&lt;p&gt;You can use them by installing the &lt;code&gt;org-contrib&lt;/code&gt; NonGNU ELPA package from &lt;a href=&#34;https://elpa.nongnu.org/nongnu/&#34;&gt;https://elpa.nongnu.org/nongnu/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Please help maintaining these add-ons&lt;/h1&gt; &#xA;&lt;p&gt;Files in this repository used to live in the Org repository but have been filtered out of the Org 9.5 release. The &lt;code&gt;contrib/&lt;/code&gt; directory used to contain a &lt;code&gt;scripts/&lt;/code&gt; directory that now lives on &lt;a href=&#34;https://code.orgmode.org/bzg/worg/src/master/code&#34;&gt;the Worg repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Files in this repository receive little if no maintainance and there is no guaranty that they are compatible with the Org stable version.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For files a &lt;code&gt;Maintainer&lt;/code&gt; header and a &lt;code&gt;Homepage&lt;/code&gt; pointing outside of this repository are in transition: they are maintained and will be removed from the next minor or major release of this repository. As a user, please carefully track the new URL where the add-on is now maintained.&lt;/p&gt; &#xA;&lt;p&gt;If you want to maintain some of these add-ons, please send me an email at &lt;code&gt;bzg@gnu.org&lt;/code&gt; once you set up a separate repository for them.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;All files in this repository are licensed under the GNU General Public License, either version 3 of the License, or (at your option) any later version. See &lt;a href=&#34;https://raw.githubusercontent.com/emacsmirror/org-contrib/master/COPYING&#34;&gt;COPYING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Files to remove from the next release&lt;/h1&gt; &#xA;&lt;p&gt;If a file has a &#34;Homepage:&#34; keyword, it will be removed from the next minor or major release.&lt;/p&gt; &#xA;&lt;h1&gt;Other files&lt;/h1&gt; &#xA;&lt;h2&gt;Org utils&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-annotate-file.el:&lt;/strong&gt; Annotate a file with org syntax&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-bibtex-extras.el:&lt;/strong&gt; Extras for working with org-bibtex entries&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-checklist.el:&lt;/strong&gt; org functions for checklist handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-choose.el:&lt;/strong&gt; Use TODO keywords to mark decision states&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-collector.el:&lt;/strong&gt; Collect properties into tables&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-contribdir.el:&lt;/strong&gt; Dummy file to mark the org contrib Lisp directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-depend.el:&lt;/strong&gt; TODO dependencies for Org-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-effectiveness.el:&lt;/strong&gt; Measuring your personal effectiveness&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-eldoc.el:&lt;/strong&gt; Eldoc documentation for SRC blocks&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-eval.el:&lt;/strong&gt; The &#xA;  &lt;lisp&gt;&#xA;    tag, adapted from Muse&#xA;  &lt;/lisp&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-eval-light.el:&lt;/strong&gt; Evaluate in-buffer code on demand&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-expiry.el:&lt;/strong&gt; Expiry mechanism for Org entries&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-git-link.el:&lt;/strong&gt; Provide org links to specific file version&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-interactive-query.el:&lt;/strong&gt; Interactive modification of tags query&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-invoice.el:&lt;/strong&gt; Help manage client invoices in OrgMode&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-learn.el:&lt;/strong&gt; SuperMemo&#39;s incremental learning algorithm&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-license.el:&lt;/strong&gt; Insert free licenses to your org documents&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-mac-iCal.el:&lt;/strong&gt; Imports events from iCal.app to the Emacs diary&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-mairix.el:&lt;/strong&gt; Hook mairix search into Org for different MUAs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-panel.el:&lt;/strong&gt; Simple routines for us with bad memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-registry.el:&lt;/strong&gt; A registry for Org links&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-screen.el:&lt;/strong&gt; Visit screen sessions through Org-mode links&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-screenshot.el:&lt;/strong&gt; Take and manage screenshots in Org-mode files&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-secretary.el:&lt;/strong&gt; Team management with org-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-static-mathjax.el:&lt;/strong&gt; Muse-like tags in Org-mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-sudoku.el:&lt;/strong&gt; Create and solve SUDOKU puzzles in Org tables&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-toc.el:&lt;/strong&gt; Table of contents for Org-mode buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-track.el:&lt;/strong&gt; Keep up with Org development&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;org-wikinodes.el:&lt;/strong&gt; CamelCase wiki-like links for Org&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Org exporters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ox-bibtex.el:&lt;/strong&gt; Export bibtex fragments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ox-confluence.el:&lt;/strong&gt; Confluence Wiki exporter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ox-deck.el:&lt;/strong&gt; deck.js presentations exporter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ox-extra.el:&lt;/strong&gt; Convenience functions for org export&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ox-freemind.el:&lt;/strong&gt; Freemind exporter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ox-groff.el:&lt;/strong&gt; Groff exporter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ox-s5.el:&lt;/strong&gt; S5 presentations exporter&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ox-taskjuggler.el:&lt;/strong&gt; TaskJuggler exporter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Org link&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ol-bookmark.el:&lt;/strong&gt; Links to bookmarks&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ol-elisp-symbol.el:&lt;/strong&gt; Links to Emacs-lisp symbols&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ol-git-link.el:&lt;/strong&gt; Links to specific file version&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ol-mew.el:&lt;/strong&gt; Links to Mew messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ol-vm.el:&lt;/strong&gt; Support for links to VM messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ol-wl.el:&lt;/strong&gt; Support for links to Wanderlust messages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Org Babel languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-abc.el:&lt;/strong&gt; Org-mode Babel Functions for ABC&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-asymptote.el:&lt;/strong&gt; Org-mode Babel Functions for Asymptote&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-coq.el:&lt;/strong&gt; Org-mode Babel Functions for Coq&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-csharp.el:&lt;/strong&gt; Org-mode Babel Functions for csharp evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-ebnf.el:&lt;/strong&gt; Org-mode Babel Functions for EBNF&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-eukleides.el:&lt;/strong&gt; Org-mode Babel Functions for eukleides evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-fomus.el:&lt;/strong&gt; Org-mode Babel Functions for fomus evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-hledger.el:&lt;/strong&gt; Org-mode Babel Functions for hledger&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-io.el:&lt;/strong&gt; Org-mode Babel Functions for Io&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-J.el:&lt;/strong&gt; Org-mode Babel Functions for J&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-ledger.el:&lt;/strong&gt; Org-mode Babel Functions for Ledger&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-mathomatic.el:&lt;/strong&gt; Org-mode Babel Functions for mathomatic evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-mscgen.el:&lt;/strong&gt; Org-mode Babel Functions for Mscgen&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-oz.el:&lt;/strong&gt; Org-mode Babel Functions for Oz evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-picolisp.el:&lt;/strong&gt; Org-mode Babel Functions for Picolisp&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-shen.el:&lt;/strong&gt; Org-mode Babel Functions for Shen&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-stan.el:&lt;/strong&gt; Babel Functions for Stan&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-stata.el:&lt;/strong&gt; Org-mode Babel Functions for Stata evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-tcl.el:&lt;/strong&gt; Org-mode Babel Functions for tcl evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-vala.el:&lt;/strong&gt; Org-mode Babel Functions for Vala&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ob-vbnet.el:&lt;/strong&gt; Org-mode Babel Functions for VB.Net evaluation&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>