<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-02T01:27:23Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ahyatt/llm</title>
    <updated>2023-11-02T01:27:23Z</updated>
    <id>tag:github.com,2023-11-02:/ahyatt/llm</id>
    <link href="https://github.com/ahyatt/llm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A package abstracting llm capabilities for emacs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: llm package for emacs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction This is a library for interfacing with Large Language Models. It allows elisp code to use LLMs, but allows gives the end-user an option to choose which LLM they would prefer. This is especially useful for LLMs, since there are various high-quality ones that in which API access costs money, as well as locally installed ones that are free, but of medium quality. Applications using LLMs can use this library to make sure their application works regardless of whether the user has a local LLM or is paying for API access.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The functionality supported by LLMs is not completely consistent, nor are their APIs. In this library we attempt to abstract functionality to a higher level, because sometimes those higher level concepts are supported by an API, and othertimes they must be put in more low-level concepts. One such higher-level concept is &#34;examples&#34; where the client can show example interactions to demonstrate a pattern for the LLM. The GCloud Vertex API has an explicit API for examples, but for Open AI&#39;s API, examples must be specified by modifying the system prompt. Open AI has the concept of a system prompt, whereas Vertex API does not. These are the kinds of API differences we attempt to hide by having higher-level concepts in our API.&lt;/p&gt; &#xA;&lt;p&gt;Some functionality may not be supported by LLMs. Any unsupported functionality with throw a &lt;del&gt;&#39;not-implemented&lt;/del&gt; signal.&lt;/p&gt; &#xA;&lt;p&gt;This package is simple at the moment, but will grow as both LLMs and functionality is added.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setting up providers Users who use an application that uses this package should not need to install it. The llm module should be installed as a dependency when you install the package that uses it. You do need to make sure to both require and set up the provider you will be using. Typically, applications will have a variable you can set. For example, let&#39;s say there&#39;s a package called &#34;llm-refactoring&#34;, which has a variable &lt;del&gt;llm-refactoring-provider&lt;/del&gt;. You would set it up like so:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package llm-refactoring :init (require &#39;llm-openai) (setq llm-refactoring-provider (make-llm-openai :key my-openai-key)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Here &lt;del&gt;my-openai-key&lt;/del&gt; would be a variable you set up before with your Open AI key. Or, just substitute the key itself as a string. It&#39;s important that you remember never to check your key into a public repository such as github, because your key must be kept private. Anyone with your key can use the API, and you will be charged. ** Open AI You can set up with &lt;del&gt;make-llm-openai&lt;/del&gt;, with the following parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;:key&lt;/del&gt;, the Open AI key that you get when you sign up to use Open AI&#39;s APIs. Remember to keep this private. This is non-optional.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:chat-model&lt;/del&gt;: A model name from the [[https://platform.openai.com/docs/models/gpt-4][list of Open AI&#39;s model names.]] Keep in mind some of these are not available to everyone. This is optional, and will default to a reasonable 3.5 model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:embedding-model&lt;/del&gt;: A model name from [[https://platform.openai.com/docs/guides/embeddings/embedding-models][list of Open AI&#39;s embedding model names.]] This is optional, and will default to a reasonable model. ** Vertex You can set up with &lt;del&gt;make-llm-vertex&lt;/del&gt;, with the following parameters:&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:project&lt;/del&gt;: Your project number from Google Cloud that has Vertex API enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:chat-model&lt;/del&gt;: A model name from the [[https://cloud.google.com/vertex-ai/docs/generative-ai/chat/chat-prompts#supported_model][list of Vertex&#39;s model names.]] This is optional, and will default to a reasonable model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:embedding-model&lt;/del&gt;: A model name from the [[https://cloud.google.com/vertex-ai/docs/generative-ai/embeddings/get-text-embeddings#supported_models][list of Vertex&#39;s embedding model names.]] This is optional, and will default to a reasonable model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to the provider, which you may want multiple of (for example, to charge against different projects), there are customizable variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;llm-vertex-gcloud-binary&lt;/del&gt;: The binary to use for generating the API key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;llm-vertex-gcloud-region&lt;/del&gt;: The gcloud region to use. It&#39;s good to set this to a region near where you are for best latency. Defaults to &#34;us-central1&#34;. ** Ollama [[https://ollama.ai/][Ollama]] is a way to run large language models locally. There are [[https://ollama.ai/library][many different models]] you can use with it. You set it up with the following parameters:&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:host&lt;/del&gt;: The host that ollama is run on. This is optional and will default to localhost.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:port&lt;/del&gt;: The port that ollama is run on. This is optional and will default to the default ollama port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:chat-model&lt;/del&gt;: The model name to use for chat. This is not optional for chat use, since there is no default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:embedding-model&lt;/del&gt;: The model name to use for embeddings. This is not optional for embedding use, since there is no default. ** GPT4All [[https://gpt4all.io/index.html][GPT4All]] is a way to run large language models locally. To use it with =llm= package, you must click &#34;Enable API Server&#34; in the settings. It does not offer embeddings or streaming functionality, though, so Ollama might be a better fit for users who are not already set up with local models. You can set it up with the following parameters:&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:host&lt;/del&gt;: The host that GPT4All is run on. This is optional and will default to localhost.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:port&lt;/del&gt;: The port that GPT4All is run on. This is optional and will default to the default ollama port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:chat-model&lt;/del&gt;: The model name to use for chat. This is not optional for chat use, since there is no default. ** Fake This is a client that makes no call, but it just there for testing and debugging. Mostly this is of use to programmatic clients of the llm package, but end users can also use it to understand what will be sent to the LLMs. It has the following parameters:&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:output-to-buffer&lt;/del&gt;: if non-nil, the buffer or buffer name to append the request sent to the LLM to.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:chat-action-func&lt;/del&gt;: a function that will be called to provide a string or symbol and message cons which are used to raise an error.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;:embedding-action-func&lt;/del&gt;: a function that will be called to provide a vector or symbol and message cons which are used to raise an error.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=llm= and the use of non-free LLMs The =llm= package is part of GNU Emacs by being part of GNU ELPA. Unfortunately, the most popular LLMs in use are non-free, which is not what GNU software should be promoting by inclusion. On the other hand, by use of the =llm= package, the user can make sure that any client that codes against it will work with free models that come along. It&#39;s likely that sophisticated free LLMs will, emerge, although it&#39;s unclear right now what free software means with respsect to LLMs. Because of this tradeoff, we have decided to warn the user when using non-free LLMs (which is every LLM supported right now except the fake one). You can turn this off the same way you turn off any other warning, by clicking on the left arrow next to the warning when it comes up. Alternatively, you can set &lt;del&gt;llm-warn-on-nonfree&lt;/del&gt; to &lt;del&gt;nil&lt;/del&gt;. This can be set via customization as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build upon the example from before: #+begin_src emacs-lisp (use-package llm-refactoring :init (require &#39;llm-openai) (setq llm-refactoring-provider (make-llm-openai :key my-openai-key) llm-warn-on-nonfree nil) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Programmatic use Client applications should require the =llm= package, and code against it. Most functions are generic, and take a struct representing a provider as the first argument. The client code, or the user themselves can then require the specific module, such as =llm-openai=, and create a provider with a function such as &lt;del&gt;(make-llm-openai :key user-api-key)&lt;/del&gt;. The client application will use this provider to call all the generic functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For all callbacks, the callback will be executed in the buffer the function was first called from. If the buffer has been killed, it will be executed in a temporary buffer instead. ** Main functions&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;llm-chat provider prompt&lt;/del&gt;: With user-chosen &lt;del&gt;provider&lt;/del&gt; , and a &lt;del&gt;llm-chat-prompt&lt;/del&gt; structure (containing context, examples, interactions, and parameters such as temperature and max tokens), send that prompt to the LLM and wait for the string output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;llm-chat-async provider prompt response-callback error-callback&lt;/del&gt;: Same as &lt;del&gt;llm-chat&lt;/del&gt;, but executes in the background. Takes a &lt;del&gt;response-callback&lt;/del&gt; which will be called with the text response. The &lt;del&gt;error-callback&lt;/del&gt; will be called in case of error, with the error symbol and an error message.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;llm-chat-streaming provider prompt partial-callback response-callback error-callback&lt;/del&gt;: Similar to &lt;del&gt;llm-chat-async&lt;/del&gt;, but request a streaming response. As the response is built up, &lt;del&gt;partial-callback&lt;/del&gt; is called with the all the text retrieved up to the current point. Finally, &lt;del&gt;reponse-callback&lt;/del&gt; is called with the complete text.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;llm-embedding provider string&lt;/del&gt;: With the user-chosen &lt;del&gt;provider&lt;/del&gt;, send a string and get an embedding, which is a large vector of floating point values. The embedding represents the semantic meaning of the string, and the vector can be compared against other vectors, where smaller distances between the vectors represent greater semantic similarity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;llm-embedding-async provider string vector-callback error-callback&lt;/del&gt;: Same as &lt;del&gt;llm-embedding&lt;/del&gt; but this is processed asynchronously. &lt;del&gt;vector-callback&lt;/del&gt; is called with the vector embedding, and, in case of error, &lt;del&gt;error-callback&lt;/del&gt; is called with the same arguments as in &lt;del&gt;llm-chat-async&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;del&gt;llm-count-tokens provider string&lt;/del&gt;: Count how many tokens are in &lt;del&gt;string&lt;/del&gt;. This may vary by &lt;del&gt;provider&lt;/del&gt;, because some provideres implement an API for this, but typically is always about the same. This gives an estimate if the provider has no API support.&lt;/p&gt; &lt;p&gt;And the following helper functions:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;del&gt;llm-make-simple-chat-prompt text&lt;/del&gt;: For the common case of just wanting a simple text prompt without the richness that &lt;del&gt;llm-chat-prompt&lt;/del&gt; struct provides, use this to turn a string into a &lt;del&gt;llm-chat-prompt&lt;/del&gt; that can be passed to the main functions above.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;llm-chat-prompt-to-text prompt&lt;/del&gt;: Somewhat opposite of the above, from a prompt, return a string representation. This is not usually suitable for passing to LLMs, but for debugging purposes.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;llm-chat-streaming-to-point provider prompt buffer point finish-callback&lt;/del&gt;: Same basic arguments as &lt;del&gt;llm-chat-streaming&lt;/del&gt;, but will stream to &lt;del&gt;point&lt;/del&gt; in &lt;del&gt;buffer&lt;/del&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;del&gt;llm-chat-prompt-append-response prompt response role&lt;/del&gt;: Append a new response (from the user, usually) to the prompt. The &lt;del&gt;role&lt;/del&gt; is optional, and defaults to &lt;del&gt;&#39;user&lt;/del&gt;. ** How to handle conversations Conversations can take place by repeatedly calling &lt;del&gt;llm-chat&lt;/del&gt; and its variants. For a conversation, the entire prompt must be a variable, because the &lt;del&gt;llm-chat-prompt-interactions&lt;/del&gt; slot will be getting changed by the chat functions to store the conversation. For some providers, this will store the history directly in &lt;del&gt;llm-chat-prompt-interactions&lt;/del&gt;, but for others (such as ollama), the conversation history is opaque. For that reason, the correct way to handle a conversation is to repeatedly call &lt;del&gt;llm-chat&lt;/del&gt; or variants, and after each time, add the new user text with &lt;del&gt;llm-chat-prompt-append-response&lt;/del&gt;. The following is an example:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defvar-local llm-chat-streaming-prompt nil) (defun start-or-continue-conversation (text) &#34;Called when the user has input TEXT as the next input.&#34; (if llm-chat-streaming-prompt (llm-chat-prompt-append-response llm-chat-streaming-prompt text) (setq llm-chat-streaming-prompt (llm-make-simple-chat-prompt text)) (llm-chat-streaming-to-point provider llm-chat-streaming-prompt (current-buffer) (point-max) (lambda ())))) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions If you are interested in creating a provider, please send a pull request, or open a bug. This library is part of GNU ELPA, so any major provider that we include in this module needs to be written by someone with FSF papers. However, you can always write a module and put it on a different package archive, such as MELPA.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>