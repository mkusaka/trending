<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-22T01:34:28Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ema2159/centaur-tabs</title>
    <updated>2023-07-22T01:34:28Z</updated>
    <id>tag:github.com,2023-07-22:/ema2159/centaur-tabs</id>
    <link href="https://github.com/ema2159/centaur-tabs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs plugin aiming to become an aesthetic, modern looking tabs plugin&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: Centaur tabs #+CREATOR: Emmanuel Bustos T. #+OPTIONS: toc:nil&lt;/p&gt; &#xA;&lt;p&gt;[[https://melpa.org/#/centaur-tabs][file:https://melpa.org/packages/centaur-tabs-badge.svg]] [[https://stable.melpa.org/#/centaur-tabs][file:https://stable.melpa.org/packages/centaur-tabs-badge.svg]] [[http://www.gnu.org/licenses/gpl-3.0][file:https://img.shields.io/badge/License-GPL%20v3-blue.svg]]&lt;/p&gt; &#xA;&lt;p&gt;[[./images/centaur.png]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contents :TOC:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[#what-is-this][What is this?]]&lt;/li&gt; &#xA; &lt;li&gt;[[#installation][Installation]]&lt;/li&gt; &#xA; &lt;li&gt;[[#customization][Customization]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#headline-face][Headline face]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tab-styles][Tab Styles]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tab-height][Tab height]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tab-icons][Tab icons]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#plain-icons][Plain icons]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#graying-out-icons][Graying out icons]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#selected-tab-bar][Selected tab bar]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#customize-the-close-button][Customize the close button]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#customize-the-modified-marker][Customize the modified marker]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#change-the-font-family-and-height][Change the font family and height]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#disable-centaur-tabs-in-selected-buffers][Disable centaur-tabs in selected buffers]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#buffer-groups][Buffer groups]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#show-buffer-groups-names-instead-of-buffer-names-in-tabs][Show buffer groups names instead of buffer names in tabs]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#enable-vim-like-tab-motions][Enable Vim like tab motions]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#prevent-the-access-to-specified-buffers][Prevent the access to specified buffers]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tab-cycling][Tab cycling]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#buffer-reordering-thanks-to-jixiuf][Buffer reordering (thanks to jixiuf)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#alphabetical-buffer-reordering-thanks-to-cburroughs][Alphabetical buffer reordering (thanks to cburroughs)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#fixed-tab-length][Fixed tab length]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#selectrum-integration-revert-to-completing-read][Selectrum integration (revert to &lt;del&gt;completing-read&lt;/del&gt;)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#helm-integration][Helm integration]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#ivy-integration][Ivy integration]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#projectile-integration][Projectile integration]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#mouse-support-thanks-to-alvarogonzalezsotillo][Mouse support (thanks to alvarogonzalezsotillo)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#new-tab-button-thanks-to-lucasgruss][New-tab button (thanks to lucasgruss)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#tab-count-thanks-to-kamilwaheed][Tab count (thanks to kamilwaheed)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#ace-jump-thanks-to-simon-lin][Ace jump (thanks to Simon-Lin)]]&lt;/li&gt; &#xA;   &lt;li&gt;[[#key-bindings][Key bindings]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#to-do-1719][TO DO]]&lt;/li&gt; &#xA; &lt;li&gt;[[#my-personal-configuration][My personal configuration]]&lt;/li&gt; &#xA; &lt;li&gt;[[#useful-commands][Useful commands]]&lt;/li&gt; &#xA; &lt;li&gt;[[#common-issues][Common issues]] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[#icons-not-showing][Icons not showing]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;[[#known-supported-theme-plugins][Known supported theme plugins]]&lt;/li&gt; &#xA; &lt;li&gt;[[#how-to-contribute][How to contribute]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;What is this? This projects aims to become an aesthetic, functional and efficient tabs plugin for Emacs with a lot of customization options. Although this is a fork from [[https://github.com/manateelazycat/awesome-tab][awesome-tab]] (that I forked with the permission from the author and it&#39;s also based on [[https://github.com/dholm/tabbar][tabbar]]) it&#39;s been heavily modified so now it may be considered a different package. Also this package integrates functionalities from [[https://github.com/mattfidler/tabbar-ruler.el][tabbar-ruler]].&lt;/p&gt; &lt;p&gt;It currently looks like this (although there&#39;s a ton of possible configurations):&lt;/p&gt; &lt;p&gt;[[./screenshot.png]]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Installation You can download this package from MELPA. This is a basic &lt;del&gt;use-package&lt;/del&gt; configuration: #+BEGIN_SRC emacs-lisp :tangle yes (use-package centaur-tabs :demand :config (centaur-tabs-mode t) :bind (&#34;C-&#xA;   &lt;prior&gt;&#xA;    &#34; . centaur-tabs-backward) (&#34;C-&#xA;    &lt;next&gt;&#xA;     &#34; . centaur-tabs-forward)) #+END_SRC&#xA;    &lt;/next&gt;&#xA;   &lt;/prior&gt;&lt;/p&gt; &lt;p&gt;Or if you use require: #+BEGIN_SRC emacs-lisp :tangle yes (require &#39;centaur-tabs) (centaur-tabs-mode t) (global-set-key (kbd &#34;C-&#xA;   &lt;prior&gt;&#xA;    &#34;) &#39;centaur-tabs-backward) (global-set-key (kbd &#34;C-&#xA;    &lt;next&gt;&#xA;     &#34;) &#39;centaur-tabs-forward) #+END_SRC&#xA;    &lt;/next&gt;&#xA;   &lt;/prior&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Customization This package is heavily customizable, with many options available to the user. Here are some of them: ** Headline face You can make the headline face match the centaur-tabs-default face. This makes the tabbar have an uniform appearance. In your configuration use the following function: #+BEGIN_SRC emacs-lisp :tangle yes (centaur-tabs-headline-match) #+END_SRC ** Tab Styles To change the tab style, modify the centaur-tabs-style variable like this: #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-style &#34;bar&#34;) #+END_SRC&lt;/p&gt; &lt;p&gt;The options available are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;alternate&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;[[./images/alternate.png]]&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;bar&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;[[./images/bar.png]]&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;box&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;[[./images/box.png]]&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;chamfer&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;[[./images/chamfer.png]]&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;rounded&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;[[./images/rounded.png]]&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;slant&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;[[./images/slant.png]]&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;wave&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;[[./images/wave.png]]&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;zigzag&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;[[./images/zigzag.png]]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Tab height To change the tab height do #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-height 32) #+END_SRC ** Tab icons To display themed icons from all the icons #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-set-icons t) #+END_SRC ** Plain icons To make icons plain (same color as tabs&#39; text): #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-plain-icons t) #+END_SRC ** Graying out icons To gray out icons for the unselected tabs: #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-gray-out-icons &#39;buffer) #+END_SRC ** Selected tab bar To display a colored bar at the left of the selected tab #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-set-bar &#39;left) #+END_SRC [[./images/bar.png]]&lt;/p&gt; &#xA;&lt;p&gt;To display an overline over the selected tab: #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-set-bar &#39;over) #+END_SRC [[./images/overline.png]]&lt;/p&gt; &#xA;&lt;p&gt;To display an underline over the selected tab: #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-set-bar &#39;under) ;; Note: If you&#39;re not using Spacmeacs, in order for the underline to display ;; correctly you must add the following line: (setq x-underline-at-descent-line t) #+END_SRC [[./images/underline.png]]&lt;/p&gt; &#xA;&lt;p&gt;The color can be customized via the centaur-tabs-active-bar-face face. ** Customize the close button To disable the close button #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-set-close-button nil) #+END_SRC To change the displayed string for the close button #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-close-button &#34;X&#34;) #+END_SRC Also there are two faces to customize the close button string: centaur-tabs-close-unselected and centaur-tabs-close-selected ** Customize the modified marker To display a marker indicating that a buffer has been modified (atom-style) #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-set-modified-marker t) #+END_SRC To change the displayed string for the modified-marker #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-modified-marker &#34;*&#34;) #+END_SRC Also there are two faces to customize the close button string: centaur-tabs-modified-marker-unselected and centaur-tabs-modified-marker-selected&lt;/p&gt; &#xA;&lt;p&gt;[[./images/marker.png]] ** Change the font family and height To easily customize the tabs font by changing it&#39;s height and font family use the following function: #+BEGIN_SRC emacs-lisp :tangle yes (centaur-tabs-change-fonts &#34;arial&#34; 160) #+END_SRC ** Disable centaur-tabs in selected buffers To disable the tabs in a buffer just add a hook to the &lt;del&gt;centaur-tabs-local-mode&lt;/del&gt; function like this: #+BEGIN_SRC emacs-lisp :tangle yes (add-hook &#39;dired-mode-hook &#39;centaur-tabs-local-mode) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;or with &lt;del&gt;use-package&lt;/del&gt;: #+BEGIN_SRC emacs-lisp :tangle yes (use-package centaur-tabs ... :hook (dired-mode . centaur-tabs-local-mode) ...) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Buffer groups To customize the way that the buffers are grouped modify the &lt;del&gt;centaur-tabs-buffer-groups&lt;/del&gt; function like this: #+BEGIN_SRC emacs-lisp :tangle yes (defun centaur-tabs-buffer-groups () &#34;`centaur-tabs-buffer-groups&#39; control buffers&#39; group rules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Group centaur-tabs with mode if buffer is derived from `eshell-mode&#39; `emacs-lisp-mode&#39; `dired-mode&#39; `org-mode&#39; `magit-mode&#39;.&#xA; All buffer name start with * will group to \&#34;Emacs\&#34;.&#xA; Other buffer group by `centaur-tabs-get-group-name&#39; with project name.&#34;&#xA;   (list&#xA;    (cond&#xA;     ((or (string-equal &#34;*&#34; (substring (buffer-name) 0 1))&#xA;          (memq major-mode &#39;(magit-process-mode&#xA;                             magit-status-mode&#xA;                             magit-diff-mode&#xA;                             magit-log-mode&#xA;                             magit-file-mode&#xA;                             magit-blob-mode&#xA;                             magit-blame-mode&#xA;                             )))&#xA;      &#34;Emacs&#34;)&#xA;     ((derived-mode-p &#39;prog-mode)&#xA;      &#34;Editing&#34;)&#xA;     ((derived-mode-p &#39;dired-mode)&#xA;      &#34;Dired&#34;)&#xA;     ((memq major-mode &#39;(helpful-mode&#xA;                         help-mode))&#xA;      &#34;Help&#34;)&#xA;     ((memq major-mode &#39;(org-mode&#xA;                         org-agenda-clockreport-mode&#xA;                         org-src-mode&#xA;                         org-agenda-mode&#xA;                         org-beamer-mode&#xA;                         org-indent-mode&#xA;                         org-bullets-mode&#xA;                         org-cdlatex-mode&#xA;                         org-agenda-log-mode&#xA;                         diary-mode))&#xA;      &#34;OrgMode&#34;)&#xA;     (t&#xA;      (centaur-tabs-get-group-name (current-buffer))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;** Show buffer groups names instead of buffer names in tabs If you want your tabs to display buffer groups names instead of buffer names you can put the following in your configuration: #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs--buffer-show-groups t) #+END_SRC You can toggle between the two options interactively with the &lt;del&gt;(centaur-tabs-toggle-groups)&lt;/del&gt; command. ** Enable Vim like tab motions To enable Vim like tab changing binds #+BEGIN_SRC emacs-lisp :tangle yes (define-key evil-normal-state-map (kbd &#34;g t&#34;) &#39;centaur-tabs-forward) (define-key evil-normal-state-map (kbd &#34;g T&#34;) &#39;centaur-tabs-backward) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;or with &lt;del&gt;use-package&lt;/del&gt;: #+BEGIN_SRC emacs-lisp :tangle yes (use-package centaur-tabs ... :bind (:map evil-normal-state-map (&#34;g t&#34; . centaur-tabs-forward) (&#34;g T&#34; . centaur-tabs-backward)) ...) #+END_SRC ** Prevent the access to specified buffers You can prevent the access to some buffers via tab motions changing the following function like this: #+BEGIN_SRC emacs-lisp :tangle yes (defun centaur-tabs-hide-tab (x) &#34;Do no to show buffer X in tabs.&#34; (let ((name (format &#34;%s&#34; x))) (or ;; Current window is not dedicated window. (window-dedicated-p (selected-window))&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; ;; Buffer name not match below blacklist.&#xA; (string-prefix-p &#34;*epc&#34; name)&#xA; (string-prefix-p &#34;*helm&#34; name)&#xA; (string-prefix-p &#34;*Helm&#34; name)&#xA; (string-prefix-p &#34;*Compile-Log*&#34; name)&#xA; (string-prefix-p &#34;*lsp&#34; name)&#xA; (string-prefix-p &#34;*company&#34; name)&#xA; (string-prefix-p &#34;*Flycheck&#34; name)&#xA; (string-prefix-p &#34;*tramp&#34; name)&#xA; (string-prefix-p &#34; *Mini&#34; name)&#xA; (string-prefix-p &#34;*help&#34; name)&#xA; (string-prefix-p &#34;*straight&#34; name)&#xA; (string-prefix-p &#34; *temp&#34; name)&#xA; (string-prefix-p &#34;*Help&#34; name)&#xA; (string-prefix-p &#34;*mybuf&#34; name)&#xA;&#xA; ;; Is not magit buffer.&#xA; (and (string-prefix-p &#34;magit&#34; name)&#xA;      (not (file-name-extension name)))&#xA; )))&#xA; #+END_SRC&#xA; The function shown is the default function from the =centaur-tabs= configuration, adding the =(string-prefix-p &#34;*​mybuf&#34; name)= part to prevent the access to every buffer with its name ending in &#34;mybuf&#34;. You can either add this function as it is to preserve =centaur-tabs= default filters and add any Boolean function that you want to filter your buffers (i.e =string-prefix-p= or =string-suffix-p=) like in this example with the &#34;mybuf&#34; line, or completely override the function with your custom filters if you completely know what you&#39;re doing.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** Tab cycling The default behaviour from the &lt;del&gt;centaur-tabs-forward/backward&lt;/del&gt; functions is to go through all the tabs in the current group and then change the group. If this is something that is to desired to be changed the &lt;del&gt;centaur-tabs-cycle-scope&lt;/del&gt; custom must be changed like this: #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-cycle-scope &#39;tabs) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;There are three options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&#39;default: (Already described)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#39;tabs: Cycle through visible tabs (that is, the tabs in the current group)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&#39;groups: Navigate through tab groups only ** Buffer reordering (thanks to jixiuf) To enable an automatic buffer reordering function use the following function in your configuration: #+BEGIN_SRC emacs-lisp :tangle yes (centaur-tabs-enable-buffer-reordering) #+END_SRC #+BEGIN_SRC emacs-lisp :tangle yes ;; When the currently selected tab(A) is at the right of the last visited ;; tab(B), move A to the right of B. When the currently selected tab(A) is ;; at the left of the last visited tab(B), move A to the left of B (setq centaur-tabs-adjust-buffer-order t)&lt;/p&gt; &lt;p&gt;;; Move the currently selected tab to the left of the the last visited tab. (setq centaur-tabs-adjust-buffer-order &#39;left)&lt;/p&gt; &lt;p&gt;;; Move the currently selected tab to the right of the the last visited tab. (setq centaur-tabs-adjust-buffer-order &#39;right) #+END_SRC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This works the following way. If there&#39;s a certain group of tabs like the following:&lt;/p&gt; &#xA;&lt;p&gt;|tab1.el | tab2.js | tab3.c | tab4.py |&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re in a tab and change to another tab in the group (via Ido, Ivy or Helm) the new tab will move to the right side of the tab you were, so if you&#39;re on &lt;del&gt;tab1.el&lt;/del&gt; and you clicked &lt;del&gt;tab4.py&lt;/del&gt; the tabs order will be the following:&lt;/p&gt; &#xA;&lt;p&gt;| tab1.el | tab4.py | tab2.js | tab3.c |&lt;/p&gt; &#xA;&lt;p&gt;And then if you were on &lt;del&gt;tab4.py&lt;/del&gt; and changed to &lt;del&gt;tab2.js&lt;/del&gt;, the tabs order will be the following:&lt;/p&gt; &#xA;&lt;p&gt;| tab1.el | tab4.py | tab2.js | tab3.c |&lt;/p&gt; &#xA;&lt;p&gt;the order doesn&#39;t change, because the tabs are already next to each other.&lt;/p&gt; &#xA;&lt;p&gt;And now if you were on &lt;del&gt;tab2.js&lt;/del&gt; and changed to &lt;del&gt;tab1.el&lt;/del&gt;, the tabs order will be the following: | tab4.py | tab1.el | tab2.js | tab3.c |&lt;/p&gt; &#xA;&lt;p&gt;This functionality doesn&#39;t take effect when using centaur-tabs motion functions like &lt;del&gt;centaur-tabs-backward/forward&lt;/del&gt;. ** Alphabetical buffer reordering (thanks to cburroughs) To enable an automatic alpabetical buffer reordering, put the following lines in your configuration. #+BEGIN_SRC emacs-lisp :tangle yes (centaur-tabs-enable-buffer-alphabetical-reordering) (setq centaur-tabs-adjust-buffer-order t) #+END_SRC This function will trigger each time a non centaur-tabs motion command is executed. NOTE: Given the Emacs behaviour when opening a new file is a little bit funky, when a new tab is opened, it will always be placed at the right of the last visited buffer. This behaviour needs to be investigated in order to see if a possible solution exists. ** Fixed tab length If you desire to make the width of your tabs fixed, you have to modify the &lt;del&gt;centaur-tabs-label-fixed-length&lt;/del&gt; custom variable with the maximum length desired (defaults to 0 for dynamic). Example: #+BEGIN_SRC emacs-lisp :tangle yes (setq centaur-tabs-label-fixed-length 8) #+END_SRC Would render the following tabs:&lt;/p&gt; &#xA;&lt;p&gt;|foo.org|a_very_d...|bar.org|&lt;/p&gt; &#xA;&lt;p&gt;** [[https://github.com/raxod502/selectrum][Selectrum]] integration (revert to &lt;del&gt;completing-read&lt;/del&gt;) Turn off default &lt;del&gt;ido-mode&lt;/del&gt; completions by customising &lt;del&gt;centaur-tabs-enable-ido-completion&lt;/del&gt; in order to revert to Emacs&#39; native &lt;del&gt;completing-read&lt;/del&gt;. ** Helm integration You can integrate Helm with centaur-tabs for changing tab-groups. Just add helm-source-centaur-tabs-group in helm-source-list. Then you&#39;ll be able to use &lt;del&gt;(centaur-tabs-build-helm-source)&lt;/del&gt; function and bind it to any key you want. (I&#39;m not a Helm user so I&#39;ll not be able to solve problems related to this). ** Ivy integration You can integrate Ivy with centaur-tabs for changing tab-groups. Just use the &lt;del&gt;(centaur-tabs-counsel-switch-group)&lt;/del&gt; and bind it to any key you want. ** Projectile integration You can group your tabs by Projectile&#39;s project. Just use the following function in your configuration: #+BEGIN_SRC emacs-lisp :tangle yes (centaur-tabs-group-by-projectile-project) #+END_SRC&lt;/p&gt; &#xA;&lt;p&gt;This function can be called interactively to enable Projectile grouping. To go back to centaur-tabs&#39;s user defined (or default) buffer grouping function you can interactively call: #+BEGIN_SRC emacs-lisp :tangle yes (centaur-tabs-group-buffer-groups) #+END_SRC ** Mouse support (thanks to alvarogonzalezsotillo)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Just click in a tab to change the buffer of the current window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the mouse wheel to close a buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Right click on empty space to show a tab groups popup.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Right click on a tab to show a context menu. The options are inspired by the options provided by VSCode. [[file:images/tab-context-menu.png]]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the mouse wheel to invoke &lt;del&gt;centaur-tabs-backward/forward&lt;/del&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the =centaur-tabs-show-navigation-buttons= custom variable to =t= to display cool navigation buttons. With the CTRL key, the left and right navigation buttons will move the tabs through the tab line. [[file:images/navigation-buttons.png]] ** New-tab button (thanks to lucasgruss) The new-tab button is a button at the right of the tabs that will spawn a new tab based on the current context. For instance in &lt;del&gt;vterm/eshell/ansi-term&lt;/del&gt; mode, the new tab will spawn a new buffer corresponding to the current major mode. In &lt;del&gt;eww&lt;/del&gt;, you are prompted for a search term and the result is displayed in a new buffer. The default behaviour in other modes is to open a new empty buffer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;the variable &lt;del&gt;centaur-tabs-show-new-tab-button&lt;/del&gt; controls whether the button is shown.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;the variable &lt;del&gt;centaur-tabs-new-tab-text&lt;/del&gt; controls the appearance of the button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;the function &lt;del&gt;centaur-tabs--create-new-tab&lt;/del&gt; controls the behaviour of the context-based new tab.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Tab count (thanks to kamilwaheed) Adds a count of the current tab position in the total number of tabs in the current window. Controlled by the variable &lt;del&gt;centaur-tabs-show-count&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;** Ace jump (thanks to Simon-Lin) Enables quick tab switching through an Ace-jump/Avy-like interface. To use it, interactively call the &lt;del&gt;centaur-tabs-ace-jump&lt;/del&gt; function. While on Ace-jump mode, you can press &lt;del&gt;?&lt;/del&gt; to display a menu showing the possible actions available. [[file:images/ace-jump.png]]&lt;/p&gt; &#xA;&lt;p&gt;** Key bindings If you want to enable a series of key bindings with different tab managing functions, put the following in your configuration before the package is loaded (if you use =use-package=, this should go in the =:init= section): #+BEGIN_SRC emacs-lisp (setq centaur-tabs-enable-key-bindings t) #+END_SRC This will enable a series of key bindings for centaur-tabs prefixed by &#34;C-c t&#34;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;TO DO [17/19]&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrate all-the-icons&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Improve all the icons placing&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix all the icons background&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add selected, unselected, selected-modified and unselected-modified faces&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make function to inherit tabbar faces&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Group tabs by projectile&#39;s project (was already implemented but not for projectile)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create PR to different theme packages for this package&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add modified marker icon option&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add sideline for selected tab (atom style)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add overline for selected tab (atom style). It&#39;s easy to add to the text, but not to the icon, so for any who figures it out a PR is welcome.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add easy tab style configuration function. (Atom, Sublime, VS Code... like &lt;del&gt;(centaur-tabs-tab-theme &#34;atom&#34;)&lt;/del&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make icon insert after the separator&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add a customizable close button&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Explore if &lt;del&gt;after-modifying-buffer&lt;/del&gt; function can be improved&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix messages buffer icon an FontAwesome errors&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Check for Elscreen compatibility&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add this package to MELPA&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make a configuration to display buffer groups names instead of buffer names in tabs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add full evil-mode support with tab commands&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;My personal configuration My personal configuration for reference:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+BEGIN_SRC emacs-lisp :tangle yes (use-package centaur-tabs :init (setq centaur-tabs-enable-key-bindings t) :config (setq centaur-tabs-style &#34;bar&#34; centaur-tabs-height 32 centaur-tabs-set-icons t centaur-tabs-show-new-tab-button t centaur-tabs-set-modified-marker t centaur-tabs-show-navigation-buttons t centaur-tabs-set-bar &#39;under centaur-tabs-show-count nil ;; centaur-tabs-label-fixed-length 15 ;; centaur-tabs-gray-out-icons &#39;buffer ;; centaur-tabs-plain-icons t x-underline-at-descent-line t centaur-tabs-left-edge-margin nil) (centaur-tabs-change-fonts (face-attribute &#39;default :font) 110) (centaur-tabs-headline-match) ;; (centaur-tabs-enable-buffer-alphabetical-reordering) ;; (setq centaur-tabs-adjust-buffer-order t) (centaur-tabs-mode t) (setq uniquify-separator &#34;/&#34;) (setq uniquify-buffer-name-style &#39;forward) (defun centaur-tabs-buffer-groups () &#34;`centaur-tabs-buffer-groups&#39; control buffers&#39; group rules.&lt;/p&gt; &#xA;&lt;p&gt;Group centaur-tabs with mode if buffer is derived from &lt;code&gt;eshell-mode&#39; &lt;/code&gt;emacs-lisp-mode&#39; &lt;code&gt;dired-mode&#39; &lt;/code&gt;org-mode&#39; &lt;code&gt;magit-mode&#39;. All buffer name start with * will group to \&#34;Emacs\&#34;. Other buffer group by &lt;/code&gt;centaur-tabs-get-group-name&#39; with project name.&#34; (list (cond ;; ((not (eq (file-remote-p (buffer-file-name)) nil)) ;; &#34;Remote&#34;) ((or (string-equal &#34;*&#34; (substring (buffer-name) 0 1)) (memq major-mode &#39;(magit-process-mode magit-status-mode magit-diff-mode magit-log-mode magit-file-mode magit-blob-mode magit-blame-mode ))) &#34;Emacs&#34;) ((derived-mode-p &#39;prog-mode) &#34;Editing&#34;) ((derived-mode-p &#39;dired-mode) &#34;Dired&#34;) ((memq major-mode &#39;(helpful-mode help-mode)) &#34;Help&#34;) ((memq major-mode &#39;(org-mode org-agenda-clockreport-mode org-src-mode org-agenda-mode org-beamer-mode org-indent-mode org-bullets-mode org-cdlatex-mode org-agenda-log-mode diary-mode)) &#34;OrgMode&#34;) (t (centaur-tabs-get-group-name (current-buffer)))))) :hook (dashboard-mode . centaur-tabs-local-mode) (term-mode . centaur-tabs-local-mode) (calendar-mode . centaur-tabs-local-mode) (org-agenda-mode . centaur-tabs-local-mode) :bind (&#34;C-&#xA; &lt;prior&gt;&#xA;  &#34; . centaur-tabs-backward) (&#34;C-&#xA;  &lt;next&gt;&#xA;   &#34; . centaur-tabs-forward) (&#34;C-S-&#xA;   &lt;prior&gt;&#xA;    &#34; . centaur-tabs-move-current-tab-to-left) (&#34;C-S-&#xA;    &lt;next&gt;&#xA;     &#34; . centaur-tabs-move-current-tab-to-right) (:map evil-normal-state-map (&#34;g t&#34; . centaur-tabs-forward) (&#34;g T&#34; . centaur-tabs-backward))) #+END_SRC&#xA;    &lt;/next&gt;&#xA;   &lt;/prior&gt;&#xA;  &lt;/next&gt;&#xA; &lt;/prior&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Useful commands Centaur tabs has plenty of useful commands for manipulating tabs and tab groups. Some of them are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;=(centaur-tabs-kill-all-buffers-in-current-group)=: Kills all buffers in current tab group.&lt;/li&gt; &#xA;   &lt;li&gt;=(centaur-tabs-kill-match-buffers-in-current-group)=: Kills all buffers in current tab group with the same extension as the current buffer.&lt;/li&gt; &#xA;   &lt;li&gt;=(centaur-tabs-keep-match-buffers-in-current-group)=: Asks for a file extension and kills all the buffers with a different extension.&lt;/li&gt; &#xA;   &lt;li&gt;=(centaur-tabs-kill-other-buffers-in-current-group)=: Kills all buffers in current tab group except the current buffer.&lt;/li&gt; &#xA;   &lt;li&gt;=(centaur-tabs-kill-unmodified-buffers-in-current-group)=: Kills all buffers in current tab group that are unmodified.&lt;/li&gt; &#xA;   &lt;li&gt;=(centaur-tabs-select-beg-tab)=: Selects the first tab of the group.&lt;/li&gt; &#xA;   &lt;li&gt;=(centaur-tabs-select-end-tab)=: Selects the last tab of the group.&lt;/li&gt; &#xA;   &lt;li&gt;=(centaur-tabs-forward-group)=: Go to the next tab group.&lt;/li&gt; &#xA;   &lt;li&gt;=(centaur-tabs-backward-group)=: Go to the previous tab group.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Common issues ** Icons not showing If the icons in your tabs are not showing, it is likely because of one of the two following reasons: *** all-the-icons not installed If [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] is not installed properly, your mode icons won&#39;t show up. To solve this issue, you have to install all-the-icons and follow the instructions indicated in its repository. *** Font with required unicode symbols missing If you get something like the following image in your tabs:&lt;/p&gt; &lt;p&gt;[[./images/font-missing.png]]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;it is likely that you&#39;re missing a font that has the required unicode symbols. To solve this issue, simply install a font that has this symbols such as Google Noto Sans Symbols2.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Known supported theme plugins &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[[https://github.com/jonathanchu/atom-one-dark-theme][Atom One Dark Theme]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/belak/base16-emacs][Base16]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/SavchenkoValeriy/emacs-chocolate-theme][Chocolate Theme]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/hlissner/emacs-doom-themes][Doom Themes]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/ogdenwebb/emacs-kaolin-themes][Kaolin Themes]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/nashamri/spacemacs-theme][Spacemacs Theme]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/ianpan870102/tron-legacy-emacs-theme][Tron Legacy]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/ianpan870102/wilmersdorf-emacs-theme][Wilmersdorf Theme]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/bbatsov/zenburn-emacs][Zenburn]]&lt;/li&gt; &#xA;   &lt;li&gt;[[https://github.com/bbatsov/solarized-emacs][Solarized]]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;How to contribute You can contribute by forking the repo and then creating a pull request with the changes you consider will improve the package. There&#39;s a TO DO list with wanted features so you can start from there. I&#39;ll be glad to receive help. Please try to keep the code as clear and documented as possible.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nicolas-graves/ibrowse.el</title>
    <updated>2023-07-22T01:34:28Z</updated>
    <id>tag:github.com,2023-07-22:/nicolas-graves/ibrowse.el</id>
    <link href="https://github.com/nicolas-graves/ibrowse.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interact with your browser from Emacs&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;ibrowse&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ibrowse stands for interactive browse, its goal is to be able to control your web browser through common actions, be it on browser &lt;em&gt;tabs&lt;/em&gt;, &lt;em&gt;history&lt;/em&gt; or &lt;em&gt;bookmarks&lt;/em&gt; using Emacs.&lt;/p&gt; &#xA;&lt;p&gt;It relies on the =completing-read= built-in interface, and thus benefits grealty from integration with =consult=, =marginalia=, =vertico= and =embark=. Development constraints I&#39;ll try to respect are to avoid javascript or the need for any additional browser extension (try to rely on native options instead). For supported functionality and comparison with similar packages, check-out below (c is for Chromium, f for Firefox, * means the implementation is not fully functional) :&lt;/p&gt; &#xA;&lt;p&gt;| package | updated | tab | bookmark | history | |---------------------+---------+-----------------+------------------------+-----------| | [[https://github.com/kawabata/helm-chrome][helm-chrome]] | 2016 | | c(json) | | | [[https://github.com/xuchunyang/helm-chrome-history][helm-chrome-history]] | 2019 | | | c(sql*) | | [[https://github.com/xuchunyang/helm-chrome-control][helm-chrome-control]] | 2019 | c(mac+js) | | | | [[https://github.com/anticomputer/chrome.el][chrome.el]] | 2021 | c(cdp) | | | | [[https://github.com/BlueBoxWare/counsel-chrome-bm][counsel-chrome-bm]] | 2021 | | c(json) | | | [[https://github.com/cireu/counsel-ffdata][counsel-ffdata]] | 2019 | | f(sql*) | f(sql*) | | [[https://github.com/emacs-helm/helm-firefox][helm-firefox]] | 2022 | | f(html) | | | [[https://github.com/bitspook/spookfox][spookfox]] | 2023 | c,f(ws*) | | | | [[https://github.com/nicolas-graves/ibrowse.el/README.org][ibrowse.el]] | 2023 | c(cdp), f(cdp*) | c(json+radix), f(sql*) | c,f(sql*) |&lt;/p&gt; &#xA;&lt;p&gt;Please note that the depth of actions is not comparable, much more actions are available in this package, see below. PR are welcome for other browsers/protocols/functionalities!&lt;/p&gt; &#xA;&lt;p&gt;It is composed of three control functionalities for your browser :&lt;/p&gt; &#xA;&lt;p&gt;** ibrowse-tab.el&lt;/p&gt; &#xA;&lt;p&gt;To use the functions in =ibrowse-tab.el=, you need to use the Chromium Developer Protocol. Simply run your browser with the option =--remote-debugging-port=9222=.&lt;/p&gt; &#xA;&lt;p&gt;The Firefox CDP implementation is not complete, and action =ibrowse-tab-select= is only available in Chromium. It will probably only be available once the following feature is implemented in Firefox&#39;s Webdriver BiDi implementation : [[https://bugzilla.mozilla.org/show_bug.cgi?id=1841004][browsingContext.activate]].&lt;/p&gt; &#xA;&lt;p&gt;This file currently introduces the following commands :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=ibrowse-tab-select=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-tab-close=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-tab-copy-url=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-tab-insert-org-link=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-tab-insert-markdown-link=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Copying url title is a native embark option.&lt;/p&gt; &#xA;&lt;p&gt;** ibrowse-history.el&lt;/p&gt; &#xA;&lt;p&gt;This file has a dependency on =ibrowse-sql.el=, which itself depends on =sqlite3=.&lt;/p&gt; &#xA;&lt;p&gt;Warning about SQL : Actions on SQL databases can&#39;t work with an open browser (Chromium and Firefox lock their databases). =ibrowse-history= will record the command you want to execute on the database in =ibrowse-sql-queue=, and retry the command every =ibrowse-sql-retry-interval= seconds. If trying to close emacs without =ibrowse-sql-queue= empty, you will be prompted for a confirmation. Close the browser before Emacs for the commands to be applied.&lt;/p&gt; &#xA;&lt;p&gt;This file will introduce the following commands :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=ibrowse-history-browse-url=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-history-delete=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-history-copy-url=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-history-insert-org-link=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-history-insert-markdown-link=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** ibrowse-bookmark.el&lt;/p&gt; &#xA;&lt;p&gt;For Firefox, this file has a dependency on =ibrowse-sql.el=, the warning above about SQL applies as well.&lt;/p&gt; &#xA;&lt;p&gt;This file will introduce the following commands :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=ibrowse-bookmark-delete=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-bookmark-add=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-bookmark-browse-url=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-bookmark-copy-url=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-bookmark-insert-org-link=&lt;/li&gt; &#xA; &lt;li&gt;=ibrowse-bookmark-insert-markdown-link=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Embark functionalities&lt;/p&gt; &#xA;&lt;p&gt;If you have =embark= installed, all actions for tabs, bookmark or history items can be swapped with another one (/Actually.../ and /But first.../ =embark-act= functionality, see [[https://karthinks.com/software/fifteen-ways-to-use-embark/][this blog post]]).&lt;/p&gt; &#xA;&lt;p&gt;Embark also allows to act on multiple entries as one (you can simply use embark actions to open several tabs or delete several history items at once).&lt;/p&gt; &#xA;&lt;p&gt;** Changelog&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;TODO : Implement Nyxt and Emacs&#39; browsers interaction.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TODO : Replace CDP by Webdriver BiDi in a near future.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TODO : Add actions to print or screenshot a page.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TODO : Improve implementation of SQL based on the built-in Emacs SQL support. For this, we would need the built-in Emacs SQL support to handle open the file with =immutability=1=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TODO : Proper testing in different environments would greatly help.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;0.2.0: Better file independence. Better SQL use. Better browser switch. Handle locked databases situation (queue + timer). Less file copies. Remove emacsql dependency. Split ibrowse-bookmark.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;0.1.9: Implement Firefox history and bookmark commands. Better SQL implementation. Handle browser switch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;0.1.1 to 0.1.8: Various packaging fixes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;0.1.0: Initial release for inclusion in Guix and Melpa.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Inspiration&lt;/p&gt; &#xA;&lt;p&gt;This package is originally inspired by the [[https://github.com/kevinmorio/rofi-switch-browser-tabs][Rofi Switch Browser Tabs]] scripts and the [[https://github.com/cpitclaudel/biblio.el][biblio.el]] package, but aspires to have broader functionalities, more integrated with Emacs. While writing the package, I also stumbled upon other packages, shown in the above table. All implement very close features to ibrowse, but are either more developped (=chrome.el= has a major mode frontend, which I considered unnecessary for a daily use with embark and the minibuffer), rely on =helm= or javascript code, or have more limited functionality. I occasionnally copied snippets of code from some of these packages, but gave credit to authors in copyrights and only copied GPLv3+ code, making this package an &#34;aggregate&#34; also under GPLv3+.&lt;/p&gt;</summary>
  </entry>
</feed>