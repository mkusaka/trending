<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-16T01:27:54Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>svaante/dape</title>
    <updated>2023-10-16T01:27:54Z</updated>
    <id>tag:github.com,2023-10-16:/svaante/dape</id>
    <link href="https://github.com/svaante/dape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Debug Adapter Protocol for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Dape - Debug Adapter Protocol for Emacs #+author: Daniel Pettersson #+property: header-args :results silent #+language: en&lt;/p&gt; &#xA;&lt;p&gt;Dape is an debug adapter client for Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;del&gt;dape-configs&lt;/del&gt; to set up your debug adapter configurations. To initiate debugging sessions, use the command &lt;del&gt;dape&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For complete functionality, activate &lt;del&gt;eldoc-mode&lt;/del&gt; in your source buffers and enable &lt;del&gt;repeat-mode&lt;/del&gt; for ergonomics.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Log breakpoints&lt;/li&gt; &#xA; &lt;li&gt;Conditional breakpoints&lt;/li&gt; &#xA; &lt;li&gt;Variable explorer&lt;/li&gt; &#xA; &lt;li&gt;Variable watch&lt;/li&gt; &#xA; &lt;li&gt;Variable hover with &lt;del&gt;eldoc&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;REPL&lt;/li&gt; &#xA; &lt;li&gt;Memory viewer with &lt;del&gt;hexl&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;compile&lt;/del&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;Debug adapter configuration ergonomics&lt;/li&gt; &#xA; &lt;li&gt;No dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[[https://raw.githubusercontent.com/svaante/dape/resources/screenshot.png]] Screenshot taken with [[https://github.com/protesilaos/ef-themes][ef-trio-dark]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configuration Currently =Dape= does not come with any debug adapter configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package dape ;; Currently only on github :straight (dape :type git :host github :repo &#34;svaante/dape&#34;) :config ;; Use n for next etc. in REPL ;; (setq dape-repl-use-shorthand t)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; By default dape uses gdb keybinding prefix&#xA;;; (setq dape-key-prefix &#34;\C-x\C-a&#34;)&#xA;&#xA;;; Kill compile buffer on build success&#xA;;; (add-hook &#39;dape-compile-compile-hooks &#39;kill-buffer)&#xA;&#xA;;; Projectile users&#xA;;; (setq dape-cwd-fn &#39;projectile-project-root)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Differences with dap-mode [[https://github.com/emacs-lsp/dap-mode][dap-mode]] is the most popular alternative and is of course much more mature and probably more feature rich (have not used &lt;del&gt;dap-mode&lt;/del&gt; extensively).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dape has no dependencies outside of packages included in emacs, and tries to use get as much out of them possible.&lt;/p&gt; &#xA;&lt;p&gt;Dape takes a slightly different approach to configuration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dape does not support &lt;del&gt;launch.json&lt;/del&gt; files, if per project configuration is needed use &lt;del&gt;dir-locals&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Tries to simplify configuration, by having just a plist.&lt;/li&gt; &#xA; &lt;li&gt;Dape tries to improve config ergonomics in &lt;del&gt;dape&lt;/del&gt; completing-read by using options to change/add plist entries in an already existing config, example: &lt;del&gt;adapter-config :program ＂/home/user/b.out＂ compile ＂gcc -g -o b.out main.c＂&lt;/del&gt;.&lt;/li&gt; &#xA; &lt;li&gt;No magic, no special variables. Instead, functions and variables are resolved before starting a new session.&lt;/li&gt; &#xA; &lt;li&gt;No batteries included. Many, suffer from a significant drawback: they&#39;re tightly coupled with the vscode extension they&#39;re bundled with. This tight coupling results in launch/attach requests being specific to each adapter, devoid of reasonable defaults as they are stored within the extension itself, leading to an ever-changing and unstable API. Consequently, attempting to include default configurations for each adapter seems like a losing proposition.&lt;/li&gt; &#xA; &lt;li&gt;Tries to be envision to how debug adapter configuration would be implemented in emacs if vscode never existed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supported debug adapters In theory all debug adapters should be compatible with =Dape=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Javascript - vscode-js-debug To install &lt;del&gt;vscode-js-debug&lt;/del&gt; pull down the [[https://github.com/microsoft/vscode-js-debug][repo]]. #+begin_src sh npm install npx gulp dapDebugServer #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Example launch configuration for &lt;del&gt;node&lt;/del&gt;. #+begin_src emacs-lisp (add-to-list &#39;dape-configs `(vscode-js-node modes (js-mode js-ts-mode) host &#34;localhost&#34; port 8123 command &#34;node&#34; command-cwd &#34;path/to/vscode-js-debug/dist/&#34; command-args (&#34;src/dapDebugServer.js&#34; &#34;8123&#34;) :type &#34;pwa-node&#34; :request &#34;launch&#34; :cwd dape-cwd-fn :program dape-find-file-buffer-default :outputCapture &#34;console&#34; :sourceMapRenames t :pauseForSourceMap nil :enableContentValidation t :autoAttachChildProcesses t :console &#34;internalConsole&#34; :killBehavior &#34;forceful&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For more information see [[https://github.com/microsoft/vscode-js-debug/blob/main/OPTIONS.md][OPTIONS.md]].&lt;/p&gt; &#xA;&lt;p&gt;** Go - delve See [[https://github.com/go-delve/delve/tree/master/Documentation/installation][delve installation]].&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;dape-configs `(delve modes (go-mode go-ts-mode) command &#34;dlv&#34; command-args (&#34;dap&#34; &#34;--listen&#34; &#34;127.0.0.1:55878&#34;) command-cwd dape-cwd-fn host &#34;127.0.0.1&#34; port 55878 :type &#34;debug&#34; :request &#34;launch&#34; :cwd dape-cwd-fn :program dape-cwd-fn)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;For more information see [[https://github.com/go-delve/delve/blob/master/Documentation/usage/dlv_dap.md][documentation]].&lt;/p&gt; &#xA;&lt;p&gt;** C, C++ and Rust Download latest [[https://github.com/vadimcn/codelldb/releases][release]] and unpack &lt;del&gt;vsix&lt;/del&gt; file with your favorite unzipper.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;dape-configs &#39;(codelldb modes (c-mode c-ts-mode c++-mode c++-ts-mode rust-ts-mode rust-mode) ;; Replace vadimcn.vscode-lldb with the vsix directory you just extracted command &#34;path/to/vadimcn.vscode-lldb/adapter/codelldb&#34; host &#34;localhost&#34; port 5818 command-args (&#34;--port&#34; &#34;5818&#34;) :type &#34;lldb&#34; :request &#34;launch&#34; :cwd dape-cwd-fn :program dape-find-file)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See [[https://github.com/vadimcn/codelldb/blob/v1.10.0/MANUAL.md][manual]] for more information.&lt;/p&gt; &#xA;&lt;p&gt;** C and C++ - cppdbg Download latest [[https://github.com/microsoft/vscode-cpptools/releases][release]] and unpack &lt;del&gt;vsix&lt;/del&gt; file with your favorite unzipper. Then &lt;del&gt;chmod +x debugAdapters/bin/OpenDebugAD7&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Replace ms-vscode.cpptools with the vsix directory you just extracted (setq dape-cppdbg-command &#34;path/to/ms-vscode.cpptools/debugAdapters/bin/OpenDebugAD7&#34;) (add-to-list &#39;dape-configs `(cppdbg modes (c-mode c-ts-mode c++-mode c++-ts-mode) command-cwd ,(file-name-directory dape--cppdbg-command) command cppdbg-command :type &#34;cppdbg&#34; :request &#34;launch&#34; :cwd dape-cwd-fn :program dape-find-file :MIMode ,(cond ((executable-find &#34;gdb&#34;) &#34;gdb&#34;) ((executable-find &#34;lldb&#34;) &#34;lldb&#34;)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See [[https://code.visualstudio.com/docs/cpp/launch-json-reference][options]].&lt;/p&gt; &#xA;&lt;p&gt;** Python - debugpy Install debugpy with pip &lt;del&gt;pip install debugpy&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;dape-configs `(debugpy modes (python-ts-mode python-mode) command &#34;python3&#34; command-args (&#34;-m&#34; &#34;debugpy.adapter&#34;) :type &#34;executable&#34; :request &#34;launch&#34; :cwd dape-cwd-fn :program dape-find-file-buffer-default)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;See [[https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings][options]].&lt;/p&gt; &#xA;&lt;p&gt;** Other untested adapters If you find a working configuration for any other debug adapter please submit a PR.&lt;/p&gt; &#xA;&lt;p&gt;See [[https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/][microsofts list]] for other adapters, your mileage will vary.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Roadmap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More options for indicator placement&lt;/li&gt; &#xA; &lt;li&gt;Improving completion in REPL&lt;/li&gt; &#xA; &lt;li&gt;Usage of &#34;setVariable&#34; inside of &lt;del&gt;&lt;em&gt;dape-info&lt;/em&gt;&lt;/del&gt; buffer&lt;/li&gt; &#xA; &lt;li&gt;Improve memory reader with auto reload and write functionality&lt;/li&gt; &#xA; &lt;li&gt;Individual thread controls&lt;/li&gt; &#xA; &lt;li&gt;Variable values displayed in source buffer, this seams to require integration with lsp-mode and eglot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bugs and issues Before reporting any issues take a look at &lt;del&gt;&lt;em&gt;dape-debug&lt;/em&gt;&lt;/del&gt; buffer with all debug messages enabled. &lt;del&gt;(setq dape--debug-on &#39;(io info error std-server)&lt;/del&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>