<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-08T01:27:14Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>isamert/swagg.el</title>
    <updated>2023-09-08T01:27:14Z</updated>
    <id>tag:github.com,2023-09-08:/isamert/swagg.el</id>
    <link href="https://github.com/isamert/swagg.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Swagger UI for Emacs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+TITLE: swagg.el&lt;/p&gt; &#xA;&lt;p&gt;/swagg.el/ is an Emacs package that lets you fetch and interact with OpenAPI (formerly Swagger) definitions. You can think of it like a Swagger UI that your app has but works for multiple definitions and it&#39;s right inside your Emacs frame!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation swagg is available through [[https://melpa.org/#/swagg][MELPA]]. If you have it set up already, just do &lt;del&gt;M-x package-install swagg&lt;/del&gt; and you are good to go. Otherwise please see [[https://melpa.org/#/getting-started][MELPA getting started]] page to learn how you can install packages through MELPA or see the following installation options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Another way to install =swagg.el= would be using either [[https://github.com/radian-software/straight.el][straight]] or [[https://github.com/quelpa/quelpa-use-package][quelpa]] package managers:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp ;; Using straight: (use-package swagg :straight (:host github :repo &#34;isamert/swagg.el&#34;))&lt;/p&gt; &#xA;&lt;p&gt;;; Using quelpa: (use-package swagg :quelpa (swagg :fetcher github :repo &#34;isamert/swagg.el&#34;)) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Set the variable &lt;del&gt;swagg-definitions&lt;/del&gt;. Here I added Swagger definitions for GitHub and GitLab. Notice that /swagg.el/ supports both &lt;del&gt;json&lt;/del&gt; and &lt;del&gt;yaml&lt;/del&gt; definitions. Definition files may be local files too.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq swagg-definitions &#39;((:name &#34;GitHub&#34; :json &#34;&lt;a href=&#34;https://raw.githubusercontent.com/github/rest-api-description/main/descriptions/api.github.com/api.github.com.json&#34;&gt;https://raw.githubusercontent.com/github/rest-api-description/main/descriptions/api.github.com/api.github.com.json&lt;/a&gt;&#34; :base &#34;&lt;a href=&#34;https://api.github.com&#34;&gt;https://api.github.com&lt;/a&gt;&#34;) (:name &#34;GitLab&#34; :yaml &#34;&lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab/-/raw/master/doc/api/openapi/openapi.yaml&#34;&gt;https://gitlab.com/gitlab-org/gitlab/-/raw/master/doc/api/openapi/openapi.yaml&lt;/a&gt;&#34; :base &#34;&lt;a href=&#34;https://gitlab.com/api&#34;&gt;https://gitlab.com/api&lt;/a&gt;&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it. Now you can use the following functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;swagg-request&lt;/del&gt; :: Lets you interactively select an endpoint, using &lt;del&gt;completing-read&lt;/del&gt; and then asks interactively for all required query strings, query parameters etc. and makes the request. Result of the request is shown in a separate special buffer. Only response body is shown. If you want to display headers, call &lt;del&gt;swagg-display-headers&lt;/del&gt; in the response buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;swagg-request-with-rest-block&lt;/del&gt; :: Same as above, but instead of making the request, insert rest style request string that you can use with [[https://github.com/federicotdn/verb][verb]], [[https://github.com/pashky/restclient.el][restclient]], [[https://github.com/zweifisch/ob-http][ob-http]] etc. Now you can utilize one of these packages to send your request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that /swagg.el/ caches the definitions on the first fetch. If your definition changes, you may need to call &lt;del&gt;swagg-invalidate-cache&lt;/del&gt; function.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please do &lt;del&gt;M-x customize-group swagg RET&lt;/del&gt; to see all customization options. Most of them are pretty self-explanatory. Here, I will go over some more obscure customizations:&lt;/p&gt; &#xA;&lt;p&gt;** Binding variables&lt;/p&gt; &#xA;&lt;p&gt;Each time you call one of the interactive functions and select and endpoint to work on, you&#39;ll be prompted for each variable that endpoint requires. Entering some of these variables, like authentication headers, can become repetitive. For this, you can pre-bind these variables while setting the definitions:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src elisp (setq swagg-definitions &#39;((:name &#34;...&#34; :json &#34;...&#34; :base &#34;...&#34; ;; To bind query parameters: :query &#39;((param1 . &#34;somevalue&#34;) (param2 . &#34;somevalue2&#34;)) ;; To bind headers: :header &#39;((token . &#34;12345&#34;) (another-header . &#34;value&#34;)) ;; To bind anything with given name: :any ((param . &#34;22&#34;) (token . &#34;000&#34;))) ...)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;When you bind parameters like this, they will appear as the default string while constructing the request. If you want them to be never asked and automatically accepted as given parameters, set &lt;del&gt;swagg-auto-accept-bound-values&lt;/del&gt; to a non nil value.&lt;/p&gt; &#xA;&lt;p&gt;As a side note, swagg automatically remembers the values you entered for the session, see &lt;del&gt;swagg-remember-inputs&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;del&gt;swagg-request&lt;/del&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[[file:https://github.com/isamert/swagg.el/assets/8031017/b36eb792-8f10-412b-9901-eb41f8ed5b84.gif]]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[[file:https://github.com/isamert/swagg.el/assets/8031017/256f1baa-95bd-4b33-82af-e0ed79217a80.gif]]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;del&gt;swagg-request-with-rest-block&lt;/del&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[[file:https://github.com/isamert/swagg.el/assets/8031017/ec08f4df-2015-4e40-b502-e59f211edf3f.gif]]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>majecty/.ema.d-personal</title>
    <updated>2023-09-08T01:27:14Z</updated>
    <id>tag:github.com,2023-09-08:/majecty/.ema.d-personal</id>
    <link href="https://github.com/majecty/.ema.d-personal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Emacs Prelude&lt;/h1&gt; &#xA;&lt;p&gt;Emacs is probably the best text editor in the world. However, the process of coming up with a useful Emacs configuration is long and difficult. It&#39;s this process that separates you from truly taking advantage of Emacs&#39;s power. I like to refer to this process as the &lt;strong&gt;Prelude&lt;/strong&gt;. &lt;strong&gt;Emacs Prelude&lt;/strong&gt; has the goal to ease the initial Emacs setup process and to provide you with a much more powerful and productive experience than the one you get out of the box. By using &lt;strong&gt;Emacs Prelude&lt;/strong&gt; you&#39;re basically getting a &lt;em&gt;&#34;Get me out of the Prelude, I just want to use Emacs&#34;&lt;/em&gt; card.&lt;/p&gt; &#xA;&lt;p&gt;Emacs Prelude is compatible &lt;strong&gt;ONLY with GNU Emacs 24.x&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Fast Forward&lt;/h2&gt; &#xA;&lt;p&gt;Assuming you&#39;re using an Unix-like OS (&lt;code&gt;*BSD&lt;/code&gt;, &lt;code&gt;GNU/Linux&lt;/code&gt;, &lt;code&gt;OS X&lt;/code&gt;, &lt;code&gt;Solaris&lt;/code&gt;, etc), you already have Emacs 24 installed, as well as &lt;code&gt;git&lt;/code&gt; &amp;amp; &lt;code&gt;curl&lt;/code&gt; you can skip the whole manual and just type in your favorite shell the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now power up your Emacs, sit back and enjoy Prelude, forgetting about the rest of this manual.&lt;/p&gt; &#xA;&lt;p&gt;There are two environment variables you can use to control the source repository and the installation directory. To change the installation directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export PRELUDE_INSTALL_DIR=&#34;$HOME/.emacs.d&#34; &amp;amp;&amp;amp; curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change the source repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export PRELUDE_URL=&#34;https://github.com/yourname/prelude.git&#34; &amp;amp;&amp;amp; curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the installer will back up any existing &lt;code&gt;.emacs&lt;/code&gt; file or &lt;code&gt;.emacs.d&lt;/code&gt; since it will unpack Prelude&#39;s code in &lt;code&gt;.emacs.d&lt;/code&gt;. If you&#39;re doing a manual install make sure you don&#39;t have a &lt;code&gt;.emacs&lt;/code&gt; file or back up your existing &lt;code&gt;.emacs.d&lt;/code&gt; directory manually.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to adjust your &lt;code&gt;prelude-modules.el&lt;/code&gt; file once the installation is done. By default most of the modules that ship with Prelude are not loaded.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Emacs 24&lt;/h2&gt; &#xA;&lt;p&gt;Obviously to use the Emacs Prelude you have to install Emacs 24 first. Have a look at the &lt;a href=&#34;http://wikemacs.org/wiki/Installing_Emacs&#34;&gt;WikEmacs articles on installing Emacs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Automated&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;strong&gt;Emacs Prelude&lt;/strong&gt; via the command line with either &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;. Naturally &lt;code&gt;git&lt;/code&gt; is also required.&lt;/p&gt; &#xA;&lt;h4&gt;Via Curl&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;curl&lt;/code&gt; type the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via Wget&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;wget&lt;/code&gt; type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget --no-check-certificate https://github.com/bbatsov/prelude/raw/master/utils/installer.sh -O - | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git://github.com/bbatsov/prelude.git path/to/local/repo&#xA;$ ln -s path/to/local/repo ~/.emacs.d&#xA;$ cd ~/.emacs.d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;d do well to replace &lt;code&gt;~/.emacs.d&lt;/code&gt; with the value of &lt;code&gt;user-emacs-directory&lt;/code&gt; for your OS. You can check the value by doing &lt;code&gt;C-h v user-emacs-directory&lt;/code&gt; inside Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Enabling additional modules&lt;/h2&gt; &#xA;&lt;p&gt;By default most of the modules that ship with Prelude are not loaded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; Uncomment the modules you&#39;d like to use and restart Prelude afterwards&#xA;&#xA;(require &#39;prelude-c)&#xA;;; (require &#39;prelude-clojure)&#xA;;; (require &#39;prelude-coffee)&#xA;;; (require &#39;prelude-common-lisp)&#xA;;; (require &#39;prelude-css)&#xA;(require &#39;prelude-emacs-lisp)&#xA;(require &#39;prelude-erc)&#xA;;; (require &#39;prelude-erlang)&#xA;;; (require &#39;prelude-haskell)&#xA;(require &#39;prelude-js)&#xA;;; (require &#39;prelude-latex)&#xA;(require &#39;prelude-lisp)&#xA;;; (require &#39;prelude-markdown)&#xA;;; (require &#39;prelude-mediawiki)&#xA;(require &#39;prelude-org)&#xA;(require &#39;prelude-perl)&#xA;;; (require &#39;prelude-python)&#xA;;; (require &#39;prelude-ruby)&#xA;;; (require &#39;prelude-scala)&#xA;(require &#39;prelude-scheme)&#xA;;; (require &#39;prelude-scss)&#xA;(require &#39;prelude-xml)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll need to adjust your &lt;code&gt;prelude-modules.el&lt;/code&gt; file once the installation is done.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Nothing fancy here. Just start Emacs as usual. Personally I run Emacs in daemon mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ emacs --daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Afterwards I connect to the server with either a terminal or a GUI client like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ emacsclient -t&#xA;$ emacsclient -c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;d probably do well to put a few aliases in your &lt;code&gt;.zshrc&lt;/code&gt; (or &lt;code&gt;.bashrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias e=emacsclient -t&#xA;alias ec=emacsclient -c&#xA;alias vim=emacsclient -t&#xA;alias vi=emacsclient -t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The last two aliases are helpful if you&#39;re used to editing files from the command line using &lt;code&gt;vi(m)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting to know Prelude&lt;/h2&gt; &#xA;&lt;p&gt;Certainly the best way to understand how Prelude enhances the default Emacs experience is to peruse Prelude&#39;s source code (which is obviously written in Emacs Lisp). Understanding the code is not necessary of course. Prelude includes a &lt;code&gt;prelude-mode&lt;/code&gt; minor Emacs mode which collects some of the additional functionality added by Prelude. It also adds an additional keymap that binds many of those extensions to keybindings.&lt;/p&gt; &#xA;&lt;h3&gt;Keymap&lt;/h3&gt; &#xA;&lt;h4&gt;Global&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-M-h&lt;/code&gt; - &lt;code&gt;backward-kill-word&lt;/code&gt; (as in Bash/Zsh)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x \&lt;/code&gt; - &lt;code&gt;align-regexp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-+&lt;/code&gt; - &lt;code&gt;text-scale-increase&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C--&lt;/code&gt; - &lt;code&gt;text-scale-decrease&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x O&lt;/code&gt; - return you to the previous window (the inverse of &lt;code&gt;other-window&lt;/code&gt; (&lt;code&gt;C-x o&lt;/code&gt;))&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x ^&lt;/code&gt; - &lt;code&gt;join-line&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x p&lt;/code&gt; - &lt;code&gt;proced&lt;/code&gt; (manage processes form Emacs, works only in Linux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x m&lt;/code&gt; - start eshell&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x M-m&lt;/code&gt; - start your default shell&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x C-m&lt;/code&gt; - sames as &lt;code&gt;M-x&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-h A&lt;/code&gt; - &lt;code&gt;apropos&lt;/code&gt; (search in all Emacs symbols)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;M-\&lt;/code&gt; - &lt;code&gt;hippie-expand&lt;/code&gt; (a replacement for the default &lt;code&gt;dabbrev-expand&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x C-b&lt;/code&gt; - &lt;code&gt;ibuffer&lt;/code&gt; (a replacement for the default &lt;code&gt;buffer-list&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;F12&lt;/code&gt; - toggle the Emacs menu bar&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-x g&lt;/code&gt; - open Magit&#39;s status buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-=&lt;/code&gt; - &lt;code&gt;expand-region&lt;/code&gt; (incremental text selection)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Prelude Mode&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c o&lt;/code&gt; - open the currently visited file with external program&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c g&lt;/code&gt; - search in Google for the thing under point (or an interactive query)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shift+return&lt;/code&gt; - insert an empty line and indent it properly (as in most IDEs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;control+shift+up&lt;/code&gt; - move the current line up&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;control+shift+down&lt;/code&gt; - move the current line down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c n&lt;/code&gt; - fix indentation in buffer and strip whitespace&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c f&lt;/code&gt; - open recently visitted file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-M-\&lt;/code&gt; - indent region (if selected) or the entire buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c u&lt;/code&gt; - open URL in your default browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c e&lt;/code&gt; - eval a bit of Emacs Lisp code and replace it with its result&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c s&lt;/code&gt; - swap two active windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c d&lt;/code&gt; - duplicate the current line (or region)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c r&lt;/code&gt; - rename the currently visited file and buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c t&lt;/code&gt; - open a terminal emulator (&lt;code&gt;ansi-term&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c k&lt;/code&gt; - kill all open buffers except the one you&#39;re currently in&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C-c h&lt;/code&gt; - open Helm (a useful means of navigating your buffers and project files)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Projectile&lt;/h4&gt; &#xA;&lt;p&gt;Here&#39;s a list of the interactive Emacs Lisp functions, provided by projectile:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-find-file&lt;/code&gt; &lt;kbd&gt;C-c p f&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-grep&lt;/code&gt; &lt;kbd&gt;C-c p g&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-switch-to-buffer&lt;/code&gt; &lt;kbd&gt;C-c p b&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-multi-occur&lt;/code&gt; &lt;kbd&gt;C-c p o&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-replace&lt;/code&gt; &lt;kbd&gt;C-c p r&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-invalidate-cache&lt;/code&gt; &lt;kbd&gt;C-c p i&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-regenerate-tags&lt;/code&gt; &lt;kbd&gt;C-c p t&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-kill-buffers&lt;/code&gt; &lt;kbd&gt;C-c p k&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-dired&lt;/code&gt; &lt;kbd&gt;C-c p d&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-recentf&lt;/code&gt; &lt;kbd&gt;C-c p e&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-ack&lt;/code&gt; &lt;kbd&gt;C-c p a&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-compile-project&lt;/code&gt; &lt;kbd&gt;C-c p l&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectile-test-project&lt;/code&gt; &lt;kbd&gt;C-c p p&lt;/kbd&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Automatic package installation&lt;/h3&gt; &#xA;&lt;p&gt;The default Prelude installation comes with a bare minimum of functionality. It will however install add-ons for various programming languages and frameworks on demand. For instance - if you try to open a &lt;code&gt;.clj&lt;/code&gt; file &lt;code&gt;clojure-mode&lt;/code&gt;, &lt;code&gt;nrepl.el&lt;/code&gt; and prelude&#39;s enhanced Lisp configuration will be installed automatically for you.&lt;/p&gt; &#xA;&lt;p&gt;You can, of course, install anything you wish manually as well.&lt;/p&gt; &#xA;&lt;h3&gt;Color Themes&lt;/h3&gt; &#xA;&lt;p&gt;Emacs 24 ships with a new theming facility that effectively renders the old color-theme package obsolete. Emacs 24 provides a dozen of built-in themes you can use out-of-the-box by invoking the &lt;code&gt;M-x load-theme&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bbatsov/zenburn-emacs&#34;&gt;Zenburn&lt;/a&gt; is the default color theme in Prelude, but you can change it at your discretion. Why Zenburn? I (and lots of hackers around the world) find it pretty neat for some reason. Personally I find the default theme pretty tiresome for the eyes, that&#39;s why I took that &#34;controversial&#34; decision to replace it. You can, of course, easily go back to the default (or select another theme entirely).&lt;/p&gt; &#xA;&lt;p&gt;To disable Zenburn just put in your personal config the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(disable-theme &#39;zenburn)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use another theme altogether by adding something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(load-theme &#39;solarized-dark t)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;P.S. Solarized is not available by default - you&#39;ll have to install it from MELPA first.&lt;/p&gt; &#xA;&lt;h3&gt;Personalizing&lt;/h3&gt; &#xA;&lt;p&gt;Fork the official Prelude repo and add your own touch to it. You&#39;re advised to avoid changing stuff outside of the personal folder to avoid having to deal with git merge conflicts in the future.&lt;/p&gt; &#xA;&lt;h4&gt;Disabling whitespace-mode&lt;/h4&gt; &#xA;&lt;p&gt;Although &lt;code&gt;whitespace-mode&lt;/code&gt; is awesome some people might find it too intrusive. You can disable it in your personal config with the following bit of code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq prelude-whitespace nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disable flyspell-mode&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re not fond of spellchecking on the fly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq prelude-flyspell nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caveats &amp;amp; Pitfalls&lt;/h2&gt; &#xA;&lt;h3&gt;Problems with flyspell-mode&lt;/h3&gt; &#xA;&lt;p&gt;Prelude makes heavy use of the flyspell-mode package for spell checking of various things. The proper operation of flyspell depends on the presence of the &lt;code&gt;aspell&lt;/code&gt; program and an &lt;code&gt;en&lt;/code&gt; dictionary on your system. You can install &lt;code&gt;aspell&lt;/code&gt; and the dictionary on OS X with &lt;code&gt;homebrew&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install aspell --with-lang=en&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux distros - just use your distro&#39;s package manager.&lt;/p&gt; &#xA;&lt;h3&gt;Ugly colors in the terminal Emacs version&lt;/h3&gt; &#xA;&lt;p&gt;If your Emacs looks considerably uglier in a terminal (compared to the GUI version) try adding this to your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export TERM=xterm-256color&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source the &lt;code&gt;.bashrc&lt;/code&gt; file and start Emacs again.&lt;/p&gt; &#xA;&lt;h3&gt;MELPA error on initial startup&lt;/h3&gt; &#xA;&lt;p&gt;If you get some http connection error related to the MELPA repo just do a manual &lt;code&gt;M-x package-refresh-contents&lt;/code&gt; and restart Emacs afterwards.&lt;/p&gt; &#xA;&lt;h3&gt;No arrow navigation in editor buffers&lt;/h3&gt; &#xA;&lt;p&gt;This is not a bug - it&#39;s a feature! I firmly believe that the one true way to use Emacs is by using it the way it was intended to be used (as far as navigation is concerned at least). That&#39;s why I&#39;ve disabled all movement commands with arrows (and keys like page up, page down, etc) - to prevent you from being tempted to use them.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d still like to use the arrow keys just invoke &lt;code&gt;M-x guru-mode&lt;/code&gt; to enable them for the duration of your current Emacs session or add the following snippet to your personal Emacs customization to enable them permanently:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq prelude-guru nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows compatibility&lt;/h3&gt; &#xA;&lt;p&gt;While everything in Prelude should work fine in Windows, I test it only with Linux &amp;amp; OSX, so there are Windows related problems from time to time. This situation will probably improve over time.&lt;/p&gt; &#xA;&lt;h2&gt;Share the knowledge&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://wikemacs.org&#34;&gt;WikEmacs&lt;/a&gt; collects useful resources for working with GNU Emacs. Please, take the time to peruse and improve them as you accumulate knowledge about Emacs. Prelude makes this especially easy, since it bundles &lt;a href=&#34;http://wikemacs.org/wiki/Mediawiki.el&#34;&gt;MediaWiki support&lt;/a&gt; + the settings required to access WikEmacs right away.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Check out the project&#39;s &lt;a href=&#34;https://github.com/bbatsov/prelude/issues?sort=created&amp;amp;direction=desc&amp;amp;state=open&#34;&gt;issue list&lt;/a&gt; a list of unresolved issues. By the way - feel free to fix any of them and send me a pull request. :-)&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Support is available via the Prelude Google Group &lt;a href=&#34;mailto:emacs-prelude@googlegroups.com&#34;&gt;emacs-prelude@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://github.com/bbatsov/prelude/contributors&#34;&gt;list&lt;/a&gt; of all the people who have contributed to the development of Emacs Prelude.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs &amp;amp; Improvements&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and suggestions for improvements are always welcome. GitHub pull requests are even better! :-)&lt;/p&gt; &#xA;&lt;p&gt;Cheers,&lt;br&gt; &lt;a href=&#34;https://twitter.com/bbatsov&#34;&gt;Bozhidar&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Sarcasm/irony-mode</title>
    <updated>2023-09-08T01:27:14Z</updated>
    <id>tag:github.com,2023-09-08:/Sarcasm/irony-mode</id>
    <link href="https://github.com/Sarcasm/irony-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A C/C++ minor mode for Emacs powered by libclang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Irony-Mode&lt;/h1&gt; &#xA;&lt;h2&gt;A C/C++ minor mode powered by &lt;a href=&#34;http://clang.llvm.org/doxygen/group__CINDEX.html&#34; title=&#34;libclang: C Interface to Clang&#34;&gt;libclang&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;irony-mode&lt;/code&gt; is an Emacs minor-mode that aims at improving the editing experience for the C, C++ and Objective-C languages. It works by using a combination of an Emacs package and a C++ program (&lt;code&gt;irony-server&lt;/code&gt;) exposing &lt;a href=&#34;http://clang.llvm.org/doxygen/group__CINDEX.html&#34; title=&#34;libclang: C Interface to Clang&#34;&gt;libclang&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Code completion:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With Emacs&#39; built-in &lt;code&gt;completion-at-point-functions&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;With &lt;a href=&#34;https://github.com/company-mode/company-mode&#34; title=&#34;Company-Mode&#34;&gt;company-mode&lt;/a&gt;&#39;s backend: &lt;a href=&#34;https://github.com/Sarcasm/company-irony&#34; title=&#34;Company Irony&#34;&gt;company-irony&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Syntax checking:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With &lt;a href=&#34;http://www.flycheck.org&#34; title=&#34;Flycheck -- Modern Emacs syntax checking&#34;&gt;flycheck&lt;/a&gt;&#39;s checker: &lt;a href=&#34;https://github.com/Sarcasm/flycheck-irony&#34; title=&#34;Flycheck Irony&#34;&gt;flycheck-irony&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eldoc&lt;/code&gt; integration: &lt;a href=&#34;https://github.com/ikirill/irony-eldoc&#34; title=&#34;irony-eldoc -- irony-mode support for eldoc-mode&#34;&gt;irony-eldoc&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/abo-abo/swiper#counsel&#34; title=&#34;Counsel on Github&#34;&gt;counsel&lt;/a&gt; integration: &lt;a href=&#34;https://oremacs.com/2017/03/28/emacs-cpp-ide/&#34;&gt;https://oremacs.com/2017/03/28/emacs-cpp-ide/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;Elisp dependencies&lt;/h3&gt; &#xA;&lt;p&gt;These dependencies will be installed automatically when using the &lt;a href=&#34;https://raw.githubusercontent.com/Sarcasm/irony-mode/master/#installation&#34;&gt;standard installation&lt;/a&gt; procedure described below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://elpa.gnu.org/packages/cl-lib.html&#34; title=&#34;cl-lib&#34;&gt;cl-lib&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Built-in since Emacs 24.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://edward.oconnor.cx/2006/03/json.el&#34; title=&#34;Introducing json.el&#34;&gt;json&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Built-in since Emacs 23.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/capitaomorte/yasnippet&#34; title=&#34;YASnippet&#34;&gt;YASnippet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional. May be used to provide post-completion expansion of function arguments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Irony-Server prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;irony-server&lt;/code&gt; provides the &lt;a href=&#34;http://clang.llvm.org/doxygen/group__CINDEX.html&#34; title=&#34;libclang: C Interface to Clang&#34;&gt;libclang&lt;/a&gt; interface to &lt;code&gt;irony-mode&lt;/code&gt;. It uses a simple protocol based on S-expression. This server, written in C++ and requires the following packages to be installed on your system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cmake.org&#34; title=&#34;CMake&#34;&gt;CMake&lt;/a&gt; &amp;gt;= 2.8.3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://clang.llvm.org/doxygen/group__CINDEX.html&#34; title=&#34;libclang: C Interface to Clang&#34;&gt;libclang&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install &lt;code&gt;irony-mode&lt;/code&gt; and its dependencies is to use a package manager.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;a href=&#34;https://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  M-x package-install RET irony RET&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;apt&lt;/code&gt; on Debian ≥10 and derivatives&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  sudo apt install elpa-irony&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Exactly one package manager should manage &lt;code&gt;irony-mode&lt;/code&gt;. If using apt, but the MELPA package is desired, uninstall the version managed by apt; Likewise, installing from both MELPA and &lt;code&gt;straight.el&lt;/code&gt; may result in a state that requires a manual workaround.&lt;/p&gt; &#xA;&lt;h4&gt;To install the latest Debian-supported &lt;code&gt;irony-mode &lt;/code&gt; and Clang&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://backports.debian.org/&#34;&gt;backports&lt;/a&gt; mechanism is the recommended and officially supported method of accessing newer versions than &lt;code&gt;Debian stable&lt;/code&gt; provides. For example on Debian 10 (buster):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    sudo apt install -t buster-backports elpa-irony&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If one requires a newer version of Clang/LLVM than the one provided in backports, the following repository is available: &lt;a href=&#34;https://apt.llvm.org&#34;&gt;LLVM Debian/Ubuntu nightly packages.&lt;/a&gt; This unofficial repository is maintained by Sylvestre Ledru, who is responsible for the official Debian package. His repository also supports Ubuntu and derivatives. When using this unofficial repository, it is recommended to use the &lt;em&gt;MELPA package&lt;/em&gt; of irony-mode and to uninstall &lt;code&gt;elpa-irony&lt;/code&gt;. Finally, when switching from apt to MELPA, the following action is required: &lt;code&gt;M-x irony-install-server RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;(add-hook &#39;c++-mode-hook &#39;irony-mode)&#xA;(add-hook &#39;c-mode-hook &#39;irony-mode)&#xA;(add-hook &#39;objc-mode-hook &#39;irony-mode)&#xA;&#xA;(add-hook &#39;irony-mode-hook &#39;irony-cdb-autosetup-compile-options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows considerations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;irony-mode&lt;/code&gt; should work fine on Windows but there are some things to take care of first.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;libclang.dll&lt;/code&gt; is expected to be available in the &lt;code&gt;PATH&lt;/code&gt; or in Emacs&#39; &lt;code&gt;exec-path&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Emacs &amp;gt;= 24.4 is required.&lt;/strong&gt; A bug in previous versions makes irony unuseable (Emacs bug #18420).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;w32-pipe-read-delay&lt;/code&gt; default value of &lt;code&gt;50&lt;/code&gt; should be changed. This should not cause any issue on today&#39;s version of Windows. The default value of &lt;code&gt;50&lt;/code&gt; may be lowered in mainline Emacs in future versions, until then, I suggest to set it to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;w32-pipe-buffer-size&lt;/code&gt;, introduced by Emacs 25, can be set to a larger value than the default to improve &lt;code&gt;irony-server&lt;/code&gt; communication performances (c.f. &lt;a href=&#34;https://github.com/Sarcasm/irony-mode/issues/321&#34;&gt;https://github.com/Sarcasm/irony-mode/issues/321&lt;/a&gt;). The variable to customize is &lt;code&gt;irony-server-w32-pipe-buffer-size&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Windows configuration tweaks to add to your Emacs configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-el&#34;&gt;;; Windows performance tweaks&#xA;;;&#xA;(when (boundp &#39;w32-pipe-read-delay)&#xA;  (setq w32-pipe-read-delay 0))&#xA;;; Set the buffer size to 64K on Windows (from the original 4K)&#xA;(when (boundp &#39;w32-pipe-buffer-size)&#xA;  (setq irony-server-w32-pipe-buffer-size (* 64 1024)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;On the first run, &lt;code&gt;irony-mode&lt;/code&gt; will ask you to build and install &lt;code&gt;irony-server&lt;/code&gt;. To do so, type &lt;code&gt;M-x irony-install-server RET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To tune &lt;code&gt;irony-mode&lt;/code&gt;, use &lt;code&gt;customize&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x customize-group RET irony RET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to provide context sensitive and accurate information, &lt;code&gt;irony-mode&lt;/code&gt; needs to know about the compiler flags used to parse the current buffer. The best way to achieve this is to use a &lt;a href=&#34;https://raw.githubusercontent.com/Sarcasm/irony-mode/master/#compilation-database&#34;&gt;Compilation Database&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compilation Database&lt;/h2&gt; &#xA;&lt;p&gt;In order to work correctly, &lt;code&gt;irony-mode&lt;/code&gt; needs to know the compile flags. &lt;code&gt;irony-cdb&lt;/code&gt; aims to provide &lt;em&gt;as automatic as possible&lt;/em&gt; compile flags discovery, with minimal user input.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to &lt;code&gt;irony-cdb-autosetup-compile-options&lt;/code&gt; and &lt;code&gt;irony-cdb-compilation-databases&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Right now &lt;code&gt;irony-cdb&lt;/code&gt; supports the following compilation databases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://clang.llvm.org/docs/JSONCompilationDatabase.html&#34; title=&#34;Clang: JSONCompilationDatabase&#34;&gt;JSON Compilation Database&lt;/a&gt; - A JSON formatted file generated by various build tools. The file is named &lt;code&gt;compile_commands.json&lt;/code&gt;, it lists the compile options associated to each file in the project.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.cmake.org&#34; title=&#34;CMake&#34;&gt;CMake &amp;gt;= 2.8.5&lt;/a&gt; will generate a compilation database in the build directory when issuing the following command &lt;code&gt;cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON &amp;lt;...&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://ninja-build.org&#34; title=&#34;Ninja&#34;&gt;ninja &amp;gt;= 1.2&lt;/a&gt; will generate a JSON Compilation Database when using the &lt;code&gt;compdb&lt;/code&gt; tool.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rizsotto/Bear&#34; title=&#34;Bear&#34;&gt;Bear&lt;/a&gt; generates a JSON Compilation Database file by &#34;monitoring&#34; the build of a project. The typical usage for a &lt;code&gt;make&lt;/code&gt;-based project will be &lt;code&gt;bear -- make -B&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Rip-Rip/clang_complete/raw/c8673142759b87316265eb0edd1f620196ec1fba/doc/clang_complete.txt#L55&#34; title=&#34;.clang_complete&#34;&gt;.clang_complete&lt;/a&gt; - A file at the root of your project containing the compilation flags, one per line. This is compatible with the with plugin &lt;a href=&#34;https://github.com/Rip-Rip/clang_complete&#34; title=&#34;clang_complete Vim plugin&#34;&gt;Rip-Rip/clang_complete&lt;/a&gt;. If you want to generate the &lt;code&gt;.clang_complete&lt;/code&gt; automatically, take a look at the &lt;a href=&#34;https://github.com/Rip-Rip/clang_complete/raw/c8673142759b87316265eb0edd1f620196ec1fba/doc/clang_complete.txt#L270&#34; title=&#34;cc_args.py documentation&#34;&gt;cc_args.py documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More detailed information on compilation database is available here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sarcasm.github.io/notes/dev/compilation-database.html&#34;&gt;https://sarcasm.github.io/notes/dev/compilation-database.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;It&#39;s slow, why?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A bug in old version of Clang (at least &#39;3.1-8&#39;) caused the completion to fail on the standard library types. To eliminate this bug an optimisation has been disabled in the parsing of a translation unit. This result in a slower parsing.&lt;/p&gt; &#xA;&lt;p&gt;This only affect old versions of Clang (&amp;lt; 3.2), it is suggested to update your libclang installation if you want to take advantage of the optimizations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;libclang.so: cannot open shared object file...&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Compiling &lt;code&gt;irony-server&lt;/code&gt; succeed but you have the following message when you try to run the &lt;code&gt;irony-server&lt;/code&gt; executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#39;irony-server: error while loading shared libraries: libclang.so: cannot open shared object file: No such file or directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;libclang&lt;/code&gt; is installed in a non-standard location (one that is missing from the path list of the dynamic loader, see &lt;em&gt;ld.so.conf&lt;/em&gt;) you can tell CMake to use the &lt;a href=&#34;http://en.wikipedia.org/wiki/Rpath&#34; title=&#34;rpath Wikipedia article&#34;&gt;rpath&lt;/a&gt; when installing the target &lt;code&gt;irony-server&lt;/code&gt;. To enable rpath in CMake use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON &amp;lt;args...&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re running OS X, you can also use &lt;code&gt;install_name_tool&lt;/code&gt; to explicitly tell &lt;code&gt;irony-server&lt;/code&gt; where an appropriate version of &lt;code&gt;libclang.dylib&lt;/code&gt; lives. For example, Homebrew (with &lt;code&gt;brew install llvm --with-clang&lt;/code&gt;) will install a &lt;code&gt;libclang.dylib&lt;/code&gt; library at &lt;code&gt;/usr/local/opt/llvm/lib/libclang.dylib&lt;/code&gt;; you can instruct &lt;code&gt;irony-server&lt;/code&gt; to use this with something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install_name_tool -change @rpath/libclang.dylib /usr/local/opt/llvm/lib/libclang.dylib irony-server&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>