<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-16T01:35:29Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Ferada/ifc-mode</title>
    <updated>2022-09-16T01:35:29Z</updated>
    <id>tag:github.com,2022-09-16:/Ferada/ifc-mode</id>
    <link href="https://github.com/Ferada/ifc-mode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs IFC SPF mode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;IFC-MODE - Major mode for editing IFC SPF files.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2012 Olof-Joachim Frahm &lt;a href=&#34;mailto:olof@macrolet.net&#34;&gt;olof@macrolet.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Release under a Simplified BSD license.&lt;/p&gt; &#xA;&lt;h1&gt;INSTALLATION&lt;/h1&gt; &#xA;&lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; to generate syntax and toc files. The necessary files are downloaded and then preprocessed to extract the IFC types.&lt;/p&gt; &#xA;&lt;p&gt;Then add the following to your &lt;code&gt;.emacs&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(add-to-list &#39;load-path &#34;~/path/to/ifc-mode&#34;)&#xA;(autoload &#39;ifc-spf-mode &#34;ifc-mode&#34;&#xA;  &#34;Major mode for editing IFC SPF files.&#34; t)&#xA;(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.ifc$&#34; . ifc-spf-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(At the moment only IFC2X3 TC1 is used, but in principle all definitions can be switched rather easily (load another generated file and change the documentation root URL). This could also be done automatically by parsing the correct version from the visited file.)&lt;/p&gt; &#xA;&lt;h1&gt;USAGE&lt;/h1&gt; &#xA;&lt;p&gt;Syntax highlighting is enabled for the predefined IFC types and enumerations. Additionally two functions for following object IDs are available: With &lt;code&gt;ifc-mode-find-tag&lt;/code&gt;, which is bound to &lt;code&gt;M-.&lt;/code&gt; by default, the buffer is searched for a numeric tag at the point like &lt;code&gt;#42=&lt;/code&gt;. With &lt;code&gt;ifc-mode-find-uses&lt;/code&gt;, bound to &lt;code&gt;M-_&lt;/code&gt; and &lt;code&gt;M-?&lt;/code&gt;, the buffer is searched for only &lt;code&gt;#42&lt;/code&gt;, i.e. all uses of that ID.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using evil-mode, &lt;code&gt;evil-search-symbol-forward&lt;/code&gt; and &lt;code&gt;-backward&lt;/code&gt; can be used instead of &lt;code&gt;ifc-mode-find-uses&lt;/code&gt;, because they do essentially the same (searching for the next symbol) and additionally wrap around the buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ifc-mode-pop-find-tag&lt;/code&gt;, or the default &lt;code&gt;pop-tag-mark&lt;/code&gt;, restore the previous point. (Wrap-around for &lt;code&gt;ifc-mode-find-uses&lt;/code&gt; isn&#39;t yet implemented, but would definitely be useful to have.)&lt;/p&gt; &#xA;&lt;p&gt;Documentation can be found using &lt;code&gt;ifc-mode-docs-lookup&lt;/code&gt;, bound to &lt;code&gt;C-c C-d h&lt;/code&gt;. The point has to be over an IFC identifier, e.g. &lt;code&gt;IFCMATERIAL&lt;/code&gt;, which has to be in the list of defined types. (Resolving enumeration values isn&#39;t implemented yet.)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sudeepdino008/emacs-configuration</title>
    <updated>2022-09-16T01:35:29Z</updated>
    <id>tag:github.com,2022-09-16:/sudeepdino008/emacs-configuration</id>
    <link href="https://github.com/sudeepdino008/emacs-configuration" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Contains my .emacs file .emacs.d directory.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>emacsfodder/move-text</title>
    <updated>2022-09-16T01:35:29Z</updated>
    <id>tag:github.com,2022-09-16:/emacsfodder/move-text</id>
    <link href="https://github.com/emacsfodder/move-text" rel="alternate"></link>
    <summary type="html">&lt;p&gt;move current line or region up or down&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/emacsfodder/move-text/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/emacsfodder/move-text/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Move-Text CI Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://melpa.org/#/move-text&#34;&gt;&lt;img src=&#34;https://melpa.org/packages/move-text-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stable.melpa.org/#/move-text&#34;&gt;&lt;img src=&#34;https://stable.melpa.org/packages/move-text-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Move Text&lt;/h1&gt; &#xA;&lt;p&gt;MoveText allows you to move the current line using M-up / M-down (or any other bindings you choose) if a region is marked, it will move the region instead.&lt;/p&gt; &#xA;&lt;p&gt;Using the prefix arg (C-u &lt;em&gt;number&lt;/em&gt; or META &lt;em&gt;number&lt;/em&gt;) will predetermine how many lines to move.&lt;/p&gt; &#xA;&lt;p&gt;Install from MELPA (or MELPA stable)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;M-x package-install move-text &amp;lt;RETURN&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the default bindings, add the following to .emacs anywhere after &lt;code&gt;(package-initialize)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(move-text-default-bindings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sets the keyboard shortcuts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Meta&lt;/kbd&gt;-&lt;kbd&gt;up&lt;/kbd&gt; &lt;code&gt;move-text-up&lt;/code&gt; (line or active region)&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Meta&lt;/kbd&gt;-&lt;kbd&gt;down&lt;/kbd&gt; &lt;code&gt;move-text-down&lt;/code&gt; (line or active region)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demonstration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emacsfodder/move-text/master/move-text.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Indent after moving...&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jbreeden&#34;&gt;@jbreeden&lt;/a&gt; gave us this useful function advice to have Emacs re-indent the text in-and-around a text move.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun indent-region-advice (&amp;amp;rest ignored)&#xA;  (let ((deactivate deactivate-mark))&#xA;    (if (region-active-p)&#xA;        (indent-region (region-beginning) (region-end))&#xA;      (indent-region (line-beginning-position) (line-end-position)))&#xA;    (setq deactivate-mark deactivate)))&#xA;&#xA;(advice-add &#39;move-text-up :after &#39;indent-region-advice)&#xA;(advice-add &#39;move-text-down :after &#39;indent-region-advice)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>