<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-29T01:31:13Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>liuyinz/mini-echo.el</title>
    <updated>2023-10-29T01:31:13Z</updated>
    <id>tag:github.com,2023-10-29:/liuyinz/mini-echo.el</id>
    <link href="https://github.com/liuyinz/mini-echo.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Show buffer status in echo area , get rid of mode-line!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mini-echo.el&lt;/h1&gt; &#xA;&lt;p&gt;Echo buffer status in minibuffer window instead of mode-line. A lightweight replacement of &lt;a href=&#34;https://github.com/kiennq/emacs-mini-modeline&#34;&gt;mini-modeline&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdown-toc start --&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#mini-echoel&#34;&gt;mini-echo.el&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#screenshot&#34;&gt;Screenshot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#install&#34;&gt;Install&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#dependencies&#34;&gt;dependencies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#package&#34;&gt;package&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#feature&#34;&gt;Feature&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#similar-package&#34;&gt;Similar Package&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#todo&#34;&gt;Todo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/example.gif&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs, version &amp;gt;= 28.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;package&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manually&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Clone and add to &lt;code&gt;load-path&lt;/code&gt;, require the package.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Melpa&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: This package isn&#39;t available in melpa yet.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;This package is available on [MELPA].&lt;/del&gt; Install with &lt;code&gt;M-x package-install&lt;/code&gt; &lt;code&gt;RET&lt;/code&gt; &lt;code&gt;binky&lt;/code&gt; within Emacs.&lt;/p&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;light-weight, very simple structure and no many configs&lt;/li&gt; &#xA; &lt;li&gt;don&#39;t use mode-line at all, same experience in terminal&lt;/li&gt; &#xA; &lt;li&gt;port lots of segments from &lt;a href=&#34;https://github.com/seagle0128/doom-modeline&#34;&gt;doom-modeline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;easy to add new segment with macro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(require &#39;mini-echo)&#xA;(mini-echo-mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are three ways to adjust mini-echo segments display:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;mini-echo-default-segments&lt;/code&gt;: variable, plist of segments which are default to all major-modes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; set default segments of long/short style&#xA;(setq mini-echo-default-segments&#xA;  &#39;(:long (&#34;major-mode&#34; &#34;buffer-name&#34; &#34;vcs&#34; &#34;buffer-position&#34;&#xA;           &#34;buffer-size&#34; &#34;flymake&#34; &#34;process&#34; &#34;selection-info&#34;&#xA;           &#34;narrow&#34; &#34;macro&#34; &#34;profiler&#34;)&#xA;    :short (&#34;buffer-name-short&#34; &#34;buffer-position&#34; &#34;process&#34;&#xA;            &#34;profiler&#34; &#34;selection-info&#34; &#34;narrow&#34; &#34;macro&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;mini-echo-rules&lt;/code&gt;: variable, list of rules which are only take effect in some major mode, the format is as below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; Concell of (SEGMENT . POSITION) is required to adjust the appearence.&#xA;;; 0 means hide the segment in major mode if it&#39;s displayed by default.&#xA;;; non-zero number means the order of segment to be put, it&#39;s counted from 1.&#xA;(setq mini-echo-rules&#xA;      &#39;((emacs-lisp-mode :long ((&#34;evil&#34; . 1) (&#34;buffer-size&#34; . 4))&#xA;                         :short ((&#34;vcs&#34; . 0)))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example meaning: when &lt;code&gt;emacs-lisp-mode&lt;/code&gt; is enabled, long-style shows &#34;evil&#34; segment in first place, shows &#34;buffer-size&#34; segment in fourth place (right-align). short-style hide &#34;vcs&#34; segment.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;code&gt;mini-echo-toggle&lt;/code&gt;: command, show or hide some segment temporarily&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Other options are here, see more info please check the file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; write your own predicate function to switch style&#xA;(setq mini-echo-short-style-predicate #&#39;your-own-predicate)&#xA;&#xA;;; set separator to concat information&#xA;(setq mini-echo-separator &#34; &#34;)&#xA;&#xA;;; adjust window-divider-mode appearence&#xA;(setq mini-echo-window-divider-args &#39;(t 1 1))&#xA;&#xA;;;; adjust update interval as you wish&#xA;(setq mini-echo-update-interval 0.3)&#xA;&#xA;;;; adjust the number to avoid truncation or wrap line of minibuffer window&#xA;(setq mini-echo-right-padding 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Write a segment with &lt;code&gt;mini-echo-define-segment&lt;/code&gt;, e.g.&lt;/p&gt; &#xA;&lt;p&gt;keywords format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:fetch&lt;/code&gt;: sexp, which runs when mini-echo update by interval.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:update&lt;/code&gt;: sexp, which runs when &lt;code&gt;:hook&lt;/code&gt; or &lt;code&gt;:advice&lt;/code&gt; is triggered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:update-hook&lt;/code&gt;: list of hooks which run &lt;code&gt;:update&lt;/code&gt; after it called, e.g. update &#34;vcs&#34; status after run &lt;code&gt;find-file-hook&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:update-advice&lt;/code&gt;: alist of (symbol . how) which runs &lt;code&gt;:update&lt;/code&gt; after it called, e.g. update &#34;vcs&#34; status after run &lt;code&gt;vc-refresh-state&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:setup&lt;/code&gt;: sexp, which runs when the segment is first activated , e.g. load library &lt;code&gt;keycast&lt;/code&gt; when activate &lt;code&gt;keycast&lt;/code&gt; segment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(mini-echo-define-segment &#34;vcs&#34;&#xA;  &#34;Return vcs info of current buffer.&#34;&#xA;  :fetch mini-echo--vcs-status&#xA;  :update-hook &#39;(find-file-hook after-save-hook after-revert-hook)&#xA;  :update-advice &#39;((vc-refresh-state . :after))&#xA;  :update&#xA;  (setq mini-echo--vcs-status&#xA;        (when (and vc-mode buffer-file-name)&#xA;          (let* ((backend (vc-backend buffer-file-name))&#xA;                 (branch (substring vc-mode (+ (if (eq backend &#39;Hg) 2 3) 2)))&#xA;                 (limit mini-echo-vcs-max-length)&#xA;                 (face (cl-case (vc-state buffer-file-name backend)&#xA;                         (needs-update &#39;warning)&#xA;                         ((removed conflict unregistered) &#39;error)&#xA;                         (t &#39;success))))&#xA;            (propertize (concat &#34;@&#34; (if (&amp;gt; (length branch) limit)&#xA;                                        (concat (substring branch 0 (- limit 3))&#xA;                                                &#34;..&#34;)&#xA;                                      branch))&#xA;                        &#39;face `(:inherit (,face bold)))))))&#xA;&#xA;(mini-echo-define-segment &#34;time&#34;&#xA;  &#34;Return current time info.&#34;&#xA;  :fetch&#xA;  (propertize display-time-string &#39;face &#39;mini-echo-time)&#xA;  :setup (display-time-mode 1))&#xA;&#xA;(mini-echo-define-segment &#34;keycast&#34;&#xA;  &#34;Display keycast info.&#34;&#xA;  :update-hook &#39;(post-command-hook)&#xA;  :fetch&#xA;  (keycast--format mini-echo-keycast-format)&#xA;  :update&#xA;  (keycast--update)&#xA;  :setup (require &#39;keycast))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, please see &lt;a href=&#34;https://raw.githubusercontent.com/liuyinz/mini-echo.el/master/mini-echo-segments.el&#34;&gt;mini-echo-segments.el&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Similar Package&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tautologyclub/feebleline&#34;&gt;feebleline&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kiennq/emacs-mini-modeline&#34;&gt;mini-modeline&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/manateelazycat/awesome-tray&#34;&gt;awesome-tray&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; rewrite mini-echo-define-macro&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add minibuffer background to distinguish in terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; setup segments per buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add environment support, such as python, node.js, asdf...&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add support to highlight current window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;How to distinguish current window ?&lt;/p&gt; &lt;p&gt;Highlight current window is still on development, you could set hl-line-mode, or use some dim other window package for now. e.g.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; or (global-hl-line-mode)&#xA;(hl-line-mode)&#xA;;; Only highliht current buffer in current window&#xA;(setq hl-line-sticky-flag nil)&#xA;(setq global-hl-line-sticky-flag nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to show window border in terminal?&lt;/p&gt; &lt;p&gt;Due to &lt;code&gt;window-divider-mode&lt;/code&gt; is not available in terminal, you need to use other measures to identify window. In terminal, internal-border is displayed, so only need to solve horizontal border problem. Enable packages like tabbar or topsy to help highlight horizontal border instead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>