<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T01:39:51Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mickeynp/ligature.el</title>
    <updated>2022-06-04T01:39:51Z</updated>
    <id>tag:github.com,2022-06-04:/mickeynp/ligature.el</id>
    <link href="https://github.com/mickeynp/ligature.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display typographical ligatures in Emacs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;================================ Typographic Ligatures in Emacs&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: cascadia-code-full.svg&lt;/p&gt; &#xA;&lt;p&gt;This package maps ordinary graphemes (characters) to fancy ligatures, if both your version of Emacs and the font supports it.&lt;/p&gt; &#xA;&lt;p&gt;With this package you can control where Emacs must display ligatures. That is useful if you only want a subset of the ligatures in certain major modes, for instance, or if you want to ensure that some modes have no ligatures at all.&lt;/p&gt; &#xA;&lt;p&gt;If you know what you&#39;re doing, you can skip to the end for an example that works with &lt;code&gt;Cascadia Code&lt;/code&gt; (and most probably other fonts, too).&lt;/p&gt; &#xA;&lt;h1&gt;Compatibility and Version Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Support for this feature is new. You must meet a number of requirements to ensure the package works correctly:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You must use Emacs 28 or later, or backport a fix to Emacs 27.x;&lt;/p&gt; &lt;p&gt;You can check by typing &lt;code&gt;M-x emacs-version&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There are critical issues in Emacs 27.1 and 27.2. Ideally, if at all possible, you should attempt to use a build of Emacs that includes this fix. See below for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your Emacs must be built with Harfbuzz enabled -- this is the default as of Emacs 27.1, but obscure platforms may not support it;&lt;/p&gt; &lt;p&gt;You can check by typing &lt;code&gt;C-h v system-configuration-features&lt;/code&gt;. Search for the word &lt;code&gt;HARFBUZZ&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You must have a font that supports the particular typographical ligature you wish to display. Emacs should skip the ones it does not recognize, however;&lt;/p&gt; &lt;p&gt;Common programming fonts include &lt;code&gt;Cascadia Code &amp;lt;https://github.com/microsoft/cascadia-code&amp;gt;&lt;/code&gt;&lt;strong&gt;, &lt;code&gt;Fira Code &amp;lt;https://github.com/tonsky/FiraCode&amp;gt;&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;Iosevka &amp;lt;https://github.com/be5invis/Iosevka&amp;gt;&lt;/code&gt;&lt;strong&gt;, and &lt;code&gt;JetBrains Mono &amp;lt;https://github.com/JetBrains/JetBrainsMono&amp;gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;For variable width fonts, the world is your oyster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ideally, your Emacs is built with Cairo support. Without it, you may experience issues;&lt;/p&gt; &lt;p&gt;You can check by typing &lt;code&gt;C-h v cairo-version-string&lt;/code&gt;. If you cannot find it, you probably don&#39;t have it built: you can double check by looking at &lt;code&gt;system-configuration-features&lt;/code&gt; -- see above.&lt;/p&gt; &lt;p&gt;a. Older versions of Cairo apparently have some issues. &lt;code&gt;cairo-version-string&lt;/code&gt; should say &#34;1.16.0&#34; or later.&lt;/p&gt; &lt;p&gt;See above. It may work perfectly fine with a lower version, however.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Crash issues in Emacs 27.1 and Emacs 27.2&lt;/h2&gt; &#xA;&lt;p&gt;If you are using a release build of Emacs 27.x then you may &lt;code&gt;experience hangs or crashes &amp;lt;https://github.com/mickeynp/ligature.el/issues/10&amp;gt;&lt;/code&gt;__ with the following message::&lt;/p&gt; &#xA;&lt;p&gt;Attempt to shape unibyte text&lt;/p&gt; &#xA;&lt;p&gt;The source of the fix is &lt;code&gt;this commit &amp;lt;http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=fe903c5ab7354b97f80ecf1b01ca3ff1027be446&amp;gt;&lt;/code&gt;__, but it did not make it into Emacs 27.1 or 27.2, unfortunately.&lt;/p&gt; &#xA;&lt;p&gt;However, if you built Emacs off the &lt;code&gt;master&lt;/code&gt; branch then you most certainly have the fix already.&lt;/p&gt; &#xA;&lt;h1&gt;How does it work?&lt;/h1&gt; &#xA;&lt;p&gt;Unlike almost all text editors that support ligatures, you are free to choose which ligatures you want and which modes they apply to. That is rather important as you may only want some ligatures in certain modes, and perhaps none at all in other modes. With this package you can freely pick and choose.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart Guide&lt;/h2&gt; &#xA;&lt;p&gt;You can copy and paste the example snippet near the end. It&#39;ll give you basic support for &lt;em&gt;Cascadia Code&lt;/em&gt;, but many of the ligations are similar across fonts. You will most likely have to amend this sample if you want fancier features.&lt;/p&gt; &#xA;&lt;h2&gt;Adding New Ligations&lt;/h2&gt; &#xA;&lt;p&gt;This is very easy to do. You can create ligations with the function &lt;code&gt;ligature-set-ligatures&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You must also enable &lt;code&gt;M-x ligature-mode&lt;/code&gt; in the mode(s) you want it to apply to. The ligations are disabled if you turn off this minor mode, and you can enable it &lt;em&gt;globally&lt;/em&gt; with &lt;code&gt;M-x global-ligature-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You must have the list of ligations you want Emacs to ligate. For instance, &lt;code&gt;==&amp;gt;&lt;/code&gt; to turn into an arrow, for example. You also need the list of major mode(s) you want it apply to; or, you can tell the ligation engine to apply it everywhere. You can make as many calls to &lt;code&gt;ligature-set-ligatures&lt;/code&gt; as you like.&lt;/p&gt; &#xA;&lt;p&gt;Here is a very simple example that enables simple HTML ligations for web-related major modes using the &lt;em&gt;string notation&lt;/em&gt; to create ligations::&lt;/p&gt; &#xA;&lt;p&gt;(ligature-set-ligatures &#39;(html-mode nxml-mode web-mode) &#39;(&#34;&#xA; &lt;!--&#34; &#34;--&gt;&#34; &#34;&amp;lt;/&amp;gt;&#34; &#34;&amp;lt;/&#34; &#34;/&amp;gt;&#34; &#34;://&#34;))&lt;/p&gt; &#xA;&lt;p&gt;When you evaluate the form the change should take effect immediately in &lt;code&gt;html-mode&lt;/code&gt;, &lt;code&gt;nxml-mode&lt;/code&gt;, and &lt;code&gt;web-mode&lt;/code&gt;. Occasionally, you may have to &#34;reload&#34; the configuration in a major mode. This is usually only required if you are experimenting. Simply toggle &lt;code&gt;M-x ligature-mode&lt;/code&gt; or &lt;code&gt;M-x global-ligature-mode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also supply &lt;code&gt;t&lt;/code&gt; in lieu of a list of major modes. Any ligations registered with &lt;code&gt;t&lt;/code&gt; will have their ligations applied &lt;em&gt;everywhere&lt;/em&gt; in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;Complex Compositions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Some fonts support variable-length ligations, such as headings or arrows. The usual *string notation* used above is not always enough. You can build your own regular expressions and the ligation engine will try -- emphasis *try* -- to combine your custom regular expressions with any existing *string notations* that may already exist.&#xA;&#xA;To use the regular expression syntax you can add forms of ``(STR-CHAR . REGEXP)``, like so::&#xA;&#xA;  (ligature-set-ligatures &#39;markdown-mode &#39;((&#34;=&#34; (rx (+ &#34;=&#34;) (? (| &#34;&amp;gt;&#34; &#34;&amp;lt;&#34;))))&#xA;                                           (&#34;-&#34; (rx (+ &#34;-&#34;)))))&#xA;&#xA;This creates two ligation mappings: one for ligations beginning with ``=`` and the other for ``-``. You must give the starting character of a ligation so Emacs&#39;s composition engine knows how to compose the beginning of a ligature. The second part of the form is an ``rx`` macro call that defines the regular expression. In this case it will match any length of ``=`` followed by an optional ``&amp;lt;`` or ``&amp;gt;`` to add arrow support.&#xA;&#xA;&#xA;Removing or browsing existing compositions&#xA;------------------------------------------&#xA;&#xA;If you are experimenting and you want to clear all existing compositions, you can do so with this command::&#xA;&#xA;  (setq ligature-composition-table nil)&#xA;&#xA;You can also view the variable&#39;s contents if you want to see how the ligation tool works. You can even edit it manually (see ``Technical Details`` below.)&#xA;&#xA;&#xA;&#xA;Technical Details&#xA;-----------------&#xA;&#xA;Each buffer you want the ligatures to apply to require a call to ``ligature-generate-ligatures``. That command will check against a table of registered ligatures if the current buffer&#39;s major mode has any associated ligatures and, if it does, what they are. The command will check against anything that may be considered a valid parent of your buffer&#39;s major mode: for instance, a lot of programming major modes inherit from ``prog-mode``, so assigning ligatures to that major mode is a good way to ensure they work in most programming modes.&#xA;&#xA;To create a ligature mapping you can either update the alist ``ligature-composition-table`` directly or use the helper function ``ligature-set-ligatures``. I recommend you start with the latter helper function and only modify the table if you have complex requirements.&#xA;&#xA;How do I install it?&#xA;====================&#xA;&#xA;MELPA support etc. is coming soon, but until then, you can clone the repository and paste one of the example snippets below.&#xA;&#xA;These example snippets enables all ligatures for ``prog-mode`` and any&#xA;major mode that derives from that mode; that is usually most&#xA;programming-related modes.&#xA;&#xA;You can find more font configurations in the `Wiki &amp;lt;https://github.com/mickeynp/ligature.el/wiki&amp;gt;`__&#xA;&#xA;Example Font Configuration: Cascadia Code&#xA;-----------------------------------------&#xA;&#xA;This snippet is designed for the *Cascadia Code* font;&#xA;you may find it won&#39;t work 100% if you use a different one.&#xA;&#xA;::&#xA;&#xA;  (use-package ligature&#xA;    :load-path &#34;path-to-ligature-repo&#34;&#xA;    :config&#xA;    ;; Enable the &#34;www&#34; ligature in every possible major mode&#xA;    (ligature-set-ligatures &#39;t &#39;(&#34;www&#34;))&#xA;    ;; Enable traditional ligature support in eww-mode, if the&#xA;    ;; `variable-pitch&#39; face supports it&#xA;    (ligature-set-ligatures &#39;eww-mode &#39;(&#34;ff&#34; &#34;fi&#34; &#34;ffi&#34;))&#xA;    ;; Enable all Cascadia Code ligatures in programming modes&#xA;    (ligature-set-ligatures &#39;prog-mode &#39;(&#34;|||&amp;gt;&#34; &#34;&amp;lt;|||&#34; &#34;&amp;lt;==&amp;gt;&#34; &#34;&amp;lt;!--&#34; &#34;####&#34; &#34;~~&amp;gt;&#34; &#34;***&#34; &#34;||=&#34; &#34;||&amp;gt;&#34;&#xA;                                         &#34;:::&#34; &#34;::=&#34; &#34;=:=&#34; &#34;===&#34; &#34;==&amp;gt;&#34; &#34;=!=&#34; &#34;=&amp;gt;&amp;gt;&#34; &#34;=&amp;lt;&amp;lt;&#34; &#34;=/=&#34; &#34;!==&#34;&#xA;                                         &#34;!!.&#34; &#34;&amp;gt;=&amp;gt;&#34; &#34;&amp;gt;&amp;gt;=&#34; &#34;&amp;gt;&amp;gt;&amp;gt;&#34; &#34;&amp;gt;&amp;gt;-&#34; &#34;&amp;gt;-&amp;gt;&#34; &#34;-&amp;gt;&amp;gt;&#34; &#34;--&amp;gt;&#34; &#34;---&#34; &#34;-&amp;lt;&amp;lt;&#34;&#xA;                                         &#34;&amp;lt;~~&#34; &#34;&amp;lt;~&amp;gt;&#34; &#34;&amp;lt;*&amp;gt;&#34; &#34;&amp;lt;||&#34; &#34;&amp;lt;|&amp;gt;&#34; &#34;&amp;lt;$&amp;gt;&#34; &#34;&amp;lt;==&#34; &#34;&amp;lt;=&amp;gt;&#34; &#34;&amp;lt;=&amp;lt;&#34; &#34;&amp;lt;-&amp;gt;&#34;&#xA;                                         &#34;&amp;lt;--&#34; &#34;&amp;lt;-&amp;lt;&#34; &#34;&amp;lt;&amp;lt;=&#34; &#34;&amp;lt;&amp;lt;-&#34; &#34;&amp;lt;&amp;lt;&amp;lt;&#34; &#34;&amp;lt;+&amp;gt;&#34; &#34;&amp;lt;/&amp;gt;&#34; &#34;###&#34; &#34;#_(&#34; &#34;..&amp;lt;&#34;&#xA;                                         &#34;...&#34; &#34;+++&#34; &#34;/==&#34; &#34;///&#34; &#34;_|_&#34; &#34;www&#34; &#34;&amp;amp;&amp;amp;&#34; &#34;^=&#34; &#34;~~&#34; &#34;~@&#34; &#34;~=&#34;&#xA;                                         &#34;~&amp;gt;&#34; &#34;~-&#34; &#34;**&#34; &#34;*&amp;gt;&#34; &#34;*/&#34; &#34;||&#34; &#34;|}&#34; &#34;|]&#34; &#34;|=&#34; &#34;|&amp;gt;&#34; &#34;|-&#34; &#34;{|&#34;&#xA;                                         &#34;[|&#34; &#34;]#&#34; &#34;::&#34; &#34;:=&#34; &#34;:&amp;gt;&#34; &#34;:&amp;lt;&#34; &#34;$&amp;gt;&#34; &#34;==&#34; &#34;=&amp;gt;&#34; &#34;!=&#34; &#34;!!&#34; &#34;&amp;gt;:&#34;&#xA;                                         &#34;&amp;gt;=&#34; &#34;&amp;gt;&amp;gt;&#34; &#34;&amp;gt;-&#34; &#34;-~&#34; &#34;-|&#34; &#34;-&amp;gt;&#34; &#34;--&#34; &#34;-&amp;lt;&#34; &#34;&amp;lt;~&#34; &#34;&amp;lt;*&#34; &#34;&amp;lt;|&#34; &#34;&amp;lt;:&#34;&#xA;                                         &#34;&amp;lt;$&#34; &#34;&amp;lt;=&#34; &#34;&amp;lt;&amp;gt;&#34; &#34;&amp;lt;-&#34; &#34;&amp;lt;&amp;lt;&#34; &#34;&amp;lt;+&#34; &#34;&amp;lt;/&#34; &#34;#{&#34; &#34;#[&#34; &#34;#:&#34; &#34;#=&#34; &#34;#!&#34;&#xA;                                         &#34;##&#34; &#34;#(&#34; &#34;#?&#34; &#34;#_&#34; &#34;%%&#34; &#34;.=&#34; &#34;.-&#34; &#34;..&#34; &#34;.?&#34; &#34;+&amp;gt;&#34; &#34;++&#34; &#34;?:&#34;&#xA;                                         &#34;?=&#34; &#34;?.&#34; &#34;??&#34; &#34;;;&#34; &#34;/*&#34; &#34;/=&#34; &#34;/&amp;gt;&#34; &#34;//&#34; &#34;__&#34; &#34;~~&#34; &#34;(*&#34; &#34;*)&#34;&#xA;                                         &#34;\\\\&#34; &#34;://&#34;))&#xA;    ;; Enables ligature checks globally in all buffers. You can also do it&#xA;    ;; per mode with `ligature-mode&#39;.&#xA;    (global-ligature-mode t))&#xA;&#xA;Can I contribute support for more fonts?&#xA;========================================&#xA;&#xA;I&#39;m glad you asked. Yes, please. If you want to configure ligatures&#xA;for common programming fonts not already listed here, please raise a&#xA;PR.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>SystemCrafters/rational-emacs</title>
    <updated>2022-06-04T01:39:51Z</updated>
    <id>tag:github.com,2022-06-04:/SystemCrafters/rational-emacs</id>
    <link href="https://github.com/SystemCrafters/rational-emacs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A sensible base Emacs configuration.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: Rational Emacs&lt;/p&gt; &#xA;&lt;p&gt;A sensible starting point for hacking your own Emacs configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note&lt;/em&gt;: =rational-emacs= is under active development. While the intent of this project is to provide a stable Emacs configuration for use by anyone, it is not yet stable enough for everyday or production use. The rapid pace of changes could cause your configuration to break on your next pull of the repository. If you are not expecting or prepared to encounter such issues, we would recommend you wait for things to stabilize a bit before using.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quick Start&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install emacs &amp;gt;= 27.2 from your distribution&#39;s repositories.&lt;/p&gt; &#xA;&lt;p&gt;Clone this repository to =&lt;del&gt;/.emacs.d= or =&lt;/del&gt;/.config/emacs=:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: Command to clone System Crafters Rational Emacs =git= repository. #+name: li#git_clone #+begin_src sh&lt;/p&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://github.com/SystemCrafters/rational-emacs&#34;&gt;https://github.com/SystemCrafters/rational-emacs&lt;/a&gt; ~/.config/emacs&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;This will set up the minimal configuration. If you&#39;d like a more fully-configured experience, see [[#customization][Customization]].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Principles&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This configuration and all associated modules intend to follow the below priniciples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Some of these may change over time as we learn from this process.&lt;/p&gt; &#xA;&lt;p&gt;** Minimal, modular configuration&lt;/p&gt; &#xA;&lt;p&gt;The core configuration only sets up Emacs to have a cleaner presentation with sensible defaults. It is up to the user to decide which of the various =rational-*= modules to load and when to load them.&lt;/p&gt; &#xA;&lt;p&gt;Configuration modules should depend on other modules and the base configuration as little as possible. When a configuration module needs to integrate with other functionality in Emacs, the standard extensibility points of each package should be used (instead of expecting our own configuration module).&lt;/p&gt; &#xA;&lt;p&gt;The implication is that someone should be able to install or copy code from a =rational-*= module into their own configuration /without/ using Rational Emacs.&lt;/p&gt; &#xA;&lt;p&gt;** Prioritize built-in Emacs functionality&lt;/p&gt; &#xA;&lt;p&gt;Where possible, we will leverage built-in Emacs functionality instead of external packages, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=project.el= instead of =Projectile=&lt;/li&gt; &#xA; &lt;li&gt;=tab-bar-mode= instead of =Perspective.el=, =persp-mode=, =eyebrowse=, etc&lt;/li&gt; &#xA; &lt;li&gt;=eglot= instead of =lsp-mode= (because =eglot= prioritizes built-in functionality)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Possibly&lt;/em&gt; =vc-mode= by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Works well in the terminal&lt;/p&gt; &#xA;&lt;p&gt;Some people prefer to use Emacs in the terminal instead of as a graphical program. This configuration should work well in this case too! This also enables the use of Emacs in Termux on Android.&lt;/p&gt; &#xA;&lt;p&gt;** Can be integrated with a Guix configuration&lt;/p&gt; &#xA;&lt;p&gt;It should be possible to customize aspects of the Rational Emacs configuration inside of a Guix Home configuration so that things like font sizes, themes, etc can be system-specific.&lt;/p&gt; &#xA;&lt;p&gt;It can also use packages installed via the Guix package manager instead of =package.el=.&lt;/p&gt; &#xA;&lt;p&gt;** Works well with =Chemacs2=&lt;/p&gt; &#xA;&lt;p&gt;=Chemacs2= is an excellent tool for enabling the use of multiple Emacs configurations simultaneously. This configuration will behave well when used with =Chemacs2= so that users can try and use different Emacs configurations as needed.&lt;/p&gt; &#xA;&lt;p&gt;** Helps you learn Emacs Lisp&lt;/p&gt; &#xA;&lt;p&gt;Instead of providing a higher-level configuration system out of the box like other Emacs configurations, we follow standard Emacs Lisp patterns so that you can learn by reading the configuration.&lt;/p&gt; &#xA;&lt;p&gt;** Reversible&lt;/p&gt; &#xA;&lt;p&gt;Not everyone will agree with our decisions, so each customization should be easily reversible in the users =config.el= file.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why use it?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why choose this configuration over /Doom Emacs/, /Spacemacs/, /Prelude/, or others?&lt;/p&gt; &#xA;&lt;p&gt;The goal of this configuration is to make it easier to write your own Emacs configuration while using pre-made configuration parts maintained by the community. Instead of using a monolithic, all-encompassing approach, we strive to ensure that all parts of this configuration are optional or interchangeable.&lt;/p&gt; &#xA;&lt;p&gt;You should even be able to use the configuration modules we provide with your own =init.el= file without using this base configuration repo!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is a list of the built-in modules that you may load. They are located in directory =$RATIONAL_EMACS_HOME/modules=, which are in the directory your =git= clone from listing [[li#git_clone]]. Follow the links to each to get more information about how they can be configured!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[file:modules/rational-defaults.el][rational-defaults]] :: Sensible default settings for Emacs&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-use-package.el][rational-use-package]] :: Configuration for =use-package=&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-updates.el][rational-updates]] :: Tools to upgrade Rational Emacs&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-completion.el][rational-completion]] :: A better selection framework configuration based on =Vertico=&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-ui.el][rational-ui]] :: Extra UI configuration for a better experience (mode line, etc)&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-windows.el][rational-windows]] :: Window management configuration&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-editing.el][rational-editing]] :: Settings for the editing component (whitespace trimming etc.)&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-evil.el][rational-evil]] :: An =evil-mode= configuration&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-org.el][rational-org]] :: A few tweaks to Org-mode (org-appear, clickable hyperlinks etc.)&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-project.el][rational-project]] :: Built in project management alternative to =projectile=&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-speedbar.el][rational-speedbar]] :: A file-tree&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-screencast.el][rational-screencast]] :: Tools for doing screencasts&lt;/li&gt; &#xA; &lt;li&gt;[[file:modules/rational-compile.el][rational-compile]] :: Set up automatic compilation for some emacs-lisp files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Modules that we will be adding in the future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;rational-desktop :: A desktop environment centered around =EXWM=&lt;/li&gt; &#xA; &lt;li&gt;rational-present :: Tools for giving presentations&lt;/li&gt; &#xA; &lt;li&gt;rational-workspace :: An improved workspace experience based on =tab-bar-mode=&lt;/li&gt; &#xA; &lt;li&gt;rational-shell :: A starter configuration for =eshell= and =vterm=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add your own customization to this configuration, create a configuraton file in one of the following directories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=~/.rational-emacs/=&lt;/li&gt; &#xA; &lt;li&gt;=~/.config/rational-emacs/=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rational Emacs looks out for two configuration files in one of those places:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;=config.el= – General configuration. Here you can set any Emacs configuration variables, face attributes, themes, etc. In short: anything that would normally go into =init.el= goes here.&lt;/li&gt; &#xA; &lt;li&gt;=early-config.el= – Configuration that needs to happen early during Emacs startup (see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][&#34;The Early Init File&#34;]] in the Emacs Manual for details), like customizing the process of initializing the package system etc. In short: anything, that would normally go into =early-init.el= goes here.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you prefer to explicitly control where your =config.el= and =early-config.el= are found for Rational Emacs, you may provide a value for the =RATIONAL_EMACS_HOME= environment variable, either on the command line or in your shell configuration. This variable should only contain the path to the =config.el= files, for example:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: Set environment variable =RATIONAL_EMACS_HOME= to the path of the configuration directory. #+begin_src shell RATIONAL_EMACS_HOME=~/my-rational-emacs-config #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** How the rational config file is found&lt;/p&gt; &#xA;&lt;p&gt;The rational config files (=config.el= and =early-config.el=) are found in the =rational-config-path=. That path will match exactly one of the following scenarios, in the order specified:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using =Chemacs2= (See below for more on this) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The environment variable =RATIONAL_EMACS_HOME= is used if provided in the profile definition.&lt;/li&gt; &#xA;   &lt;li&gt;The =rational-emacs= subdirectory of the profile is used when no environment variable is provided in the profile definition.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use the value found in the =RATIONAL_EMACS_HOME= environment variable.&lt;/li&gt; &#xA; &lt;li&gt;The environment variable =XDG_CONFIG_HOME= is present or the path =$HOME/.config/rational-emacs= exists. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;These normally resolve to the same file, so build the path from the =XDG_CONFIG_HOME= environment variable or the explicit path =~/.config/rational-emacs=&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use the =HOME= environment variable to make the path, which expands to =$HOME/.rational-emacs=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the =rational-config-path= is determined, if it does not exist in the filesystem, it is created. However, just the path is created, the files =config.el= and =early-config.el= must be created by you.&lt;/p&gt; &#xA;&lt;p&gt;** Example Configuration:&lt;/p&gt; &#xA;&lt;p&gt;To make use of the sensible defaults that Rational Emacs aims to provide, the first thing in your user configuration is to choose, which of the modules you want to use.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say for example, you want to have a look at all the modules, but you don&#39;t want to use =evil-mode= and you have no use for the screencasting module. Also, you need the advanced project management features of projectile, so you don&#39;t want built-in project management either. In that case, your example config might begin like this:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: Example of basic Rational Emacs =config.el= file. #+begin_src emacs-lisp (require &#39;rational-defaults) ; Sensible default settings for Emacs (require &#39;rational-use-package) ; Configuration for &lt;code&gt;use-package&lt;/code&gt; (require &#39;rational-updates) ; Tools to upgrade Rational Emacs (require &#39;rational-completion) ; selection framework based on &lt;code&gt;vertico&lt;/code&gt; (require &#39;rational-ui) ; Better UI experience (modeline etc.) (require &#39;rational-windows) ; Window management configuration (require &#39;rational-editing) ; Whitspace trimming, auto parens etc. ;(require &#39;rational-evil) ; An &lt;code&gt;evil-mode&lt;/code&gt; configuration (require &#39;rational-org) ; org-appear, clickable hyperlinks etc. ;(require &#39;rational-project) ; built-in alternative to projectile (require &#39;rational-speedbar) ; built-in file-tree ;(require &#39;rational-screencast) ; show current command and binding in modeline&lt;/p&gt; &#xA;&lt;p&gt;;; Further settings and customizations follow here... ;; ... #+end_src&lt;/p&gt; &#xA;&lt;p&gt;More detailed example config files can be found in the folder =examples=.&lt;/p&gt; &#xA;&lt;p&gt;** The =custom.el= file&lt;/p&gt; &#xA;&lt;p&gt;The =custom.el= file will hold the auto-generated code from the Emacs Customization UI, and other packages that similarly add code to the variables and faces form in the =init.el= file.&lt;/p&gt; &#xA;&lt;p&gt;*** Simplified overview of how Emacs Customization works&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Customizable values are defined with the =defcustom= form, and can be&#xA;customized using the Easy Customization UI. A complete discussion is out of&#xA;scope for this document, instead see the Emacs Manual for more information.&#xA;&#xA;There are several states a value can be in, for our purposes, we will only&#xA;consider two of them: the default state and the changed state. These are not&#xA;the &#34;official&#34; names but easily convey the concepts of the variable. If a&#xA;value is in the default state, looking in the Customization UI, the state&#xA;will be listed as =STANDARD=. Rational Emacs takes the approach of using the&#xA;=customize-set-variable= to update the values defined with&#xA;=defcustom=. This will show the values as =SET for current session only= in&#xA;the Customization UI. This is normal since the values are set each time&#xA;emacs starts. They are technically &#34;SAVED&#34; since they exist as emacs-lisp&#xA;code, but since they are not in a =custom-set-variables= form the&#xA;Customization UI only sees them as &#34;SET for the current session only&#34;.&#xA;&#xA;A =SAVED and set= value means the Customization code has written the&#xA;configuration to disk to be loaded again the next time Emacs starts. When&#xA;Emacs saves the configuration from the Customization UI, it simply adds a&#xA;couple of forms to the end of your initialization file (typically&#xA;=init.el=), with comments warning about having more than one form with the&#xA;same name:&#xA;&#xA;#+name: custom.el&#xA;#+caption: Example =custom.el= file contents.&#xA;#+begin_src emacs-lisp&#xA;  (custom-set-variables&#xA;   ;; custom-set-variables was added by Custom.&#xA;   ;; If you edit it by hand, you could mess it up, so be careful.&#xA;   ;; Your init file should contain only one such instance.&#xA;   ;; If there is more than one, they won&#39;t work right.&#xA;   &#39;(rational-ui-default-font &#39;(:font &#34;JetBrains Mono&#34; :weight light :height 185))&#xA;   &#39;(rational-ui-display-line-numbers t))&#xA;  (custom-set-faces&#xA;   ;; custom-set-faces was added by Custom.&#xA;   ;; If you edit it by hand, you could mess it up, so be careful.&#xA;   ;; Your init file should contain only one such instance.&#xA;   ;; If there is more than one, they won&#39;t work right.&#xA;   )&#xA;#+end_src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Loading the =custom.el= file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;When ~rational-load-custom-file~ is non-nil (the default), the =custom.el=&#xA;file is loaded /after/ the initialization process, including after the user&#xA;=config.el= is loaded.&#xA;&#xA;The customization variable values (as set in =init.el= with&#xA;=customize-set-variables=) are in the =SET for current session only= state,&#xA;unless altered by a saved customization loaded from =custom.el=. Any values&#xA;set through the Customization UI or other work flows, for example by using&#xA;the =org-agenda-to-front= or =org-remove-file= functions, which write to the&#xA;=custom-set-variables= form, are preserved in the =custom.el= file if they are&#xA;saved for future sessions (as by the Customization UI widget, or by code).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;*** Not loading the =custom.el= file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;To not load the =custom file=, change the value for the&#xA;~rational-load-custom-file~  to =nil= in your =config.el=.&#xA;&#xA;Using =customize-set-variable= in Emacs Lisp has the same effect as using&#xA;the Customization UI, except the customization is not saved to =custom.el=&#xA;as if you had used the Customization UI *and* used the widget to save the&#xA;customizations for future sessions.&#xA;&#xA;If you choose to follow this pattern, customizing variables in your&#xA;=config.el= only (not using the UI) then you may never need to load&#xA;=custom.el=. However, there are some caveats: using certain work flows with&#xA;Org Agenda files or risky variables in =.dir-locals.el= which write to the&#xA;=custom.el= file will never be applied, even though they are saved in the&#xA;custom file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using it with =Chemacs2=&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have the =Chemacs2= configuration cloned to =&lt;del&gt;/.emacs.d= or =&lt;/del&gt;/.config/emacs=, you can clone =rational-emacs= anywhere you like and add an entry to it in your =~/.emacs-profiles.el= file:&lt;/p&gt; &#xA;&lt;p&gt;You can then put your =early-config.el= and =config.el= files in the subfolder =&lt;del&gt;/path/to/rational-emacs/rational-emacs=. So, for example if you installed Rational Emacs to =&lt;/del&gt;/.rational-emacs=, then your =early-config.el= and =config.el= files would be in the path =~/.rational-emacs/rational-emacs=. This is the default path, but you can change the name to something else, see below for examples.&lt;/p&gt; &#xA;&lt;p&gt;#+caption: Example of a =Chemacs2= user profile file in =~/.emacs-profiles.el=. #+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;p&gt;((&#34;rational&#34; . ((user-emacs-directory . &#34;~/path/to/rational-emacs&#34;))))&lt;/p&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to put your Rational Emacs customizations elsewhere (for example in a folder called &lt;code&gt;config&lt;/code&gt; or maybe &lt;code&gt;personal&lt;/code&gt;), you can specify the =RATIONAL_EMACS_HOME= environment variable, for example like this:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: User =Chemacs2= profile file =~/.emacs-profiles.el= with environment variable. #+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;((&#34;rational&#34; . ((user-emacs-directory . &#34;~/path/to/rational-emacs&#34;)&#xA;                (env . ((&#34;RATIONAL_EMACS_HOME&#34; . &#34;~/path/to/rational-emacs/personal&#34;))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or some place completely different:&lt;/p&gt; &#xA;&lt;p&gt;#+caption: User =Chemacs2= profile file =~/.emacs-profiles.el= with Rational Emacs config files set to another path. #+begin_src emacs-lisp&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;((&#34;rational&#34; . ((user-emacs-directory . &#34;~/path/to/rational-emacs&#34;)&#xA;                (env . ((&#34;RATIONAL_EMACS_HOME&#34; . &#34;~/rational-config/personal&#34;))))))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Then launch it with =emacs --with-profile rational=!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributing [[http://makeapullrequest.com][https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square]] [[https://github.com/bbatsov/emacs-lisp-style-guide][https://img.shields.io/badge/elisp-style%20guide-purple.svg?style=flat-square]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is a community-run modular Emacs configuration, for which we appreciate feedback in the form of issues and pull requests. Feel free to open an issue prior to opening a pull request if you&#39;re not certain your idea is in the spirit of the [[https://github.com/SystemCrafters/rational-emacs/blob/master/README.org#Principles][Principles]].&lt;/p&gt; &#xA;&lt;p&gt;If you enjoy crafting your computing experience, join the [[https://systemcrafters.net/][SystemCrafters]] community!&lt;/p&gt; &#xA;&lt;p&gt;** Contributing Tips for Elisp&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prefer =customize-set-variable= instead of =setq= for =defcustom= values. This helps make sure constructors or setters attached to the variable are run when the value is set.&lt;/li&gt; &#xA; &lt;li&gt;Provide =defcustom= variables for things we expect the user to modify and make sure it is in the appropriate group.&lt;/li&gt; &#xA; &lt;li&gt;Provide verbose doc-strings for =defvar=, =defcustom=, =defun=, =defmacro=, etc to clearly document what is going on.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to follow doc-string guidelines (see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Documentation-Tips.html][Documentation Tips]] or [[info:elisp#Documentation Tips][elisp#Documentation Tips]])&lt;/li&gt; &#xA; &lt;li&gt;Add comments for blocks of code, especially to describe /why/ the code is present, or the intention. These comments serve as documentation when reading the code where a doc-string is not an option.&lt;/li&gt; &#xA; &lt;li&gt;Add or update documentation in the /docs/ folder. Especially for new modules, please provide the info file with your PR. (see [[file:docs/CONTRIBUTING.org][Contributing Documentation]])&lt;/li&gt; &#xA; &lt;li&gt;If your PR addresses an issue, whether it closes or fixes the issue, or is just related to it, please add the issue number in your commit message or the description of your PR so they can be linked together.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributing Tips for Issues&lt;/p&gt; &#xA;&lt;p&gt;We welcome your questions and ideas, please open an issue if you have one!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you feel there is a defect with what we provide, please provide the steps necessary to reproduce the issue. A minimal configuration, a link to your configuration, or a gist/pastebin link or similar is appreciated to help us work toward a solution together.&lt;/li&gt; &#xA; &lt;li&gt;If you feel there is a missing feature, please describe your feature in as much detail as possible so we understand your request.&lt;/li&gt; &#xA; &lt;li&gt;If you have a question, be as specific as possible so we can understand how to help you as best we can.&lt;/li&gt; &#xA; &lt;li&gt;PRs to address any of the issues you might raise are appreciated and encouraged! If you don&#39;t provide one, please be patient with us, it may take longer to fix an issue or provide a missing feature. That being said, please feel free to check on the status of issues from time to time if it has been a while since the last activity.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Troubleshooting&lt;/p&gt; &lt;p&gt;Some tips when things don&#39;t seem to work right.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** A package (suddenly?) fails to work&lt;/p&gt; &#xA;&lt;p&gt;This scenario happened frequently when upgading to Emacs 28. It also may occur in other scenarios as well. Usually, you will see some message indicating some symbol is void or some function or command does not exist. More often than not, the package maintainer is using a feature from another package which has not yet been released. The new feature is available in the development version of the package however.&lt;/p&gt; &#xA;&lt;p&gt;Here are some example issues where things went wrong:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/SystemCrafters/rational-emacs/issues/126][Wrong number of arguments error]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/SystemCrafters/rational-emacs/issues/132][Example config doesn&#39;t start]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/SystemCrafters/rational-emacs/issues/140][there are some bugs in package &#34;helpful&#34;]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some strategies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check the code on the package source control page (ie GitHub, GitLab or whatever), and make sure the missing code is present on the =master= branch.&lt;/li&gt; &#xA; &lt;li&gt;Look at the code associated with the released version (you need to look at the most recent tag for this). If the code is missing there, ask the maintainer for a new release. Often, there are years between releases of Emacs packages, but that depends completely on the package maintainer. Some of them release more frequently, others only on request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have done the steps above, you can choose to take one of these actions in your configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option 1 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use =M-x package-list-packages= to display the list of packages.&lt;/li&gt; &#xA;   &lt;li&gt;Find the package in the list which doesn&#39;t work for you, it will have either the /installed/ or /dependency/ status.&lt;/li&gt; &#xA;   &lt;li&gt;Press the =enter= key to get more details on the package an look near the bottom of the metadata, you should see a line with &#34;Other Versions&#34;. Choose the development version - it will have a version number that looks like a date and the text =(melpa)= next to it. Press =enter= on this version.&lt;/li&gt; &#xA;   &lt;li&gt;Following the step above will take you to the same package but from the MELPA repository, and you&#39;ll see a button at the top labeled =Install=. Click this button.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Optionally&lt;/em&gt; you can go back to the list of packages, find previous installed version, press the letter &#39;D&#39; and then the letter &#39;X&#39; to uninstall that version.&lt;/li&gt; &#xA;   &lt;li&gt;Restart Emacs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Option 2 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Edit your =early-config.el= file.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Near the bottom, add a line similar to this to pin the offending package to MELPA (make sure to replace /package-name/ with the name of the actual package):&lt;/p&gt; &lt;p&gt;#+begin_src emacs-lisp (add-to-list &#39;package-pinned-packages (cons &#39;package-name &#34;melpa&#34;)) #+end_src&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use =M-x package-list-packages= to display the list of packages.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Find the package in the list, press the letter &#39;D&#39; and the letter &#39;X&#39; to uninstall that package.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Restart Emacs, the package should be installed from MELPA thus using the development version of the package instead of the released version.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Regardless, always feel free to open an issue here and we can help you out. Please be as complete as possible in your description of the problem. Include any stack traces Emacs provides (ie start Emacs with: =emacs --debug-init=), mention the version number of the package you are installing, and anything you might have tried but which didn&#39;t work for you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This code is licensed under the MIT License. Why? So you can copy the code from this configuration!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Local Variables:&lt;/h1&gt; &#xA;&lt;h1&gt;fill-column: 80&lt;/h1&gt; &#xA;&lt;h1&gt;eval: (auto-fill-mode 1)&lt;/h1&gt; &#xA;&lt;h1&gt;End:&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>minad/corfu</title>
    <updated>2022-06-04T01:39:51Z</updated>
    <id>tag:github.com,2022-06-04:/minad/corfu</id>
    <link href="https://github.com/minad/corfu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🏝️ corfu.el - Completion Overlay Region FUnction&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+title: corfu.el - Completion Overlay Region FUnction #+author: Daniel Mendler #+language: en #+export_file_name: corfu.texi #+texinfo_dir_category: Emacs misc features #+texinfo_dir_title: Corfu: (corfu). #+texinfo_dir_desc: Completion Overlay Region FUnction&lt;/p&gt; &#xA;&lt;p&gt;#+html: &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;&lt;img alt=&#34;GNU Emacs&#34; src=&#34;https://github.com/minad/corfu/raw/screenshots/emacs.svg?raw=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/packages/corfu.html&#34;&gt;&lt;img alt=&#34;GNU ELPA&#34; src=&#34;https://elpa.gnu.org/packages/corfu.svg?sanitize=true&#34;&gt;&lt;/a&gt; #+html: &lt;a href=&#34;http://elpa.gnu.org/devel/corfu.html&#34;&gt;&lt;img alt=&#34;GNU-devel ELPA&#34; src=&#34;https://elpa.gnu.org/devel/corfu.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu enhances completion at point with a small completion popup. The current candidates are shown in a popup below or above the point. Corfu is the minimalistic &lt;del&gt;completion-in-region&lt;/del&gt; counterpart of the [[https://github.com/minad/vertico][Vertico]] minibuffer UI.&lt;/p&gt; &#xA;&lt;p&gt;Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion UI. Completions are either provided by commands like &lt;del&gt;dabbrev-completion&lt;/del&gt; or by pluggable backends (&lt;del&gt;completion-at-point-functions&lt;/del&gt;, Capfs). Most programming language major modes implement a Capf. Furthermore the language server packages, [[https://github.com/joaotavora/eglot][Eglot]] and [[https://github.com/emacs-lsp/lsp-mode][Lsp-mode]], use Capfs which talk to the LSP server to retrieve the completions. Corfu does not include its own completion backends. The Emacs built-in Capfs and the Capfs provided by other programming language packages are usually sufficient. A few additional Capfs and completion utilities are provided by the [[https://github.com/minad/cape][Cape]] package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Corfu uses child frames to show the popup and falls back to the default setting of the &lt;del&gt;completion-in-region-function&lt;/del&gt; on non-graphical displays. If you want to use Corfu in the terminal, install the package [[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]], which provides an alternative overlay-based display.&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/corfu/blob/screenshots/light.png?raw=true]]&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/minad/corfu/blob/screenshots/dark.png?raw=true]]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Timer-based auto-completions (/off/ by default, set &lt;del&gt;corfu-auto&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Popup display with scrollbar indicator and arrow key navigation.&lt;/li&gt; &#xA; &lt;li&gt;The popup can be summoned explicitly by pressing =TAB= at any time.&lt;/li&gt; &#xA; &lt;li&gt;The current candidate is inserted with =TAB= and selected with =RET=.&lt;/li&gt; &#xA; &lt;li&gt;Candidates sorting by prefix, string length and alphabetically.&lt;/li&gt; &#xA; &lt;li&gt;The selected candidate is previewed (configurable via &lt;del&gt;corfu-preview-current&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The selected candidate automatically committed on further input by default. (configurable via &lt;del&gt;corfu-preview-current&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The [[https://github.com/oantolin/orderless][Orderless]] completion style is supported. The filter string can contain arbitrary characters, after inserting a space via =M-SPC= (configurable via &lt;del&gt;corfu-quit-at-boundary&lt;/del&gt; and &lt;del&gt;corfu-separator&lt;/del&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Deferred completion style highlighting for performance.&lt;/li&gt; &#xA; &lt;li&gt;Support for candidate annotations and documentation in the echo area.&lt;/li&gt; &#xA; &lt;li&gt;Deprecated candidates are crossed out in the display.&lt;/li&gt; &#xA; &lt;li&gt;Icons can be provided by an external package via margin formatter functions.&lt;/li&gt; &#xA; &lt;li&gt;Extensions: Quick keys, Index keys, Sorting by history, Candidate documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation and Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu is available from [[http://elpa.gnu.org/packages/corfu.html][GNU ELPA]], such that it can be installed directly via &lt;del&gt;package-install&lt;/del&gt;. After installation, the global minor mode can be enabled with =M-x global-corfu-mode=. In order to configure Corfu and other packages in your init.el, you may want to use &lt;del&gt;use-package&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Corfu is highly flexible and customizable via &lt;del&gt;corfu-*&lt;/del&gt; customization variables, such that you can adapt it precisely to your requirements. However in order to quickly try out the Corfu completion package, it should be sufficient to activate &lt;del&gt;global-corfu-mode&lt;/del&gt;. You can experiment with manual completion for example in an Elisp buffer or in an Eshell or Shell buffer. For auto completion, set &lt;del&gt;corfu-auto=t&lt;/del&gt; before turning on &lt;del&gt;global-corfu-mode&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package corfu ;; Optional customizations ;; :custom ;; (corfu-cycle t) ;; Enable cycling for `corfu-next/previous&#39; ;; (corfu-auto t) ;; Enable auto completion ;; (corfu-separator ?\s) ;; Orderless field separator ;; (corfu-quit-at-boundary nil) ;; Never quit at completion boundary ;; (corfu-quit-no-match nil) ;; Never quit, even if there is no match ;; (corfu-preview-current nil) ;; Disable current candidate preview ;; (corfu-preselect-first nil) ;; Disable candidate preselection ;; (corfu-on-exact-match nil) ;; Configure handling of exact matches ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area ;; (corfu-scroll-margin 5) ;; Use scroll margin&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Enable Corfu only for certain modes.&#xA;;; :hook ((prog-mode . corfu-mode)&#xA;;;        (shell-mode . corfu-mode)&#xA;;;        (eshell-mode . corfu-mode))&#xA;&#xA;;; Recommended: Enable Corfu globally.&#xA;;; This is recommended since Dabbrev can be used globally (M-/).&#xA;;; See also `corfu-excluded-modes&#39;.&#xA;:init&#xA;(global-corfu-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;;; A few more useful configurations... (use-package emacs :init ;; TAB cycle if there are only few candidates (setq completion-cycle-threshold 3)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Emacs 28: Hide commands in M-x which do not apply to the current mode.&#xA;;; Corfu commands are hidden, since they are not supposed to be used via M-x.&#xA;;; (setq read-extended-command-predicate&#xA;;;       #&#39;command-completion-default-include-p)&#xA;&#xA;;; Enable indentation+completion using the TAB key.&#xA;;; `completion-at-point&#39; is often bound to M-TAB.&#xA;(setq tab-always-indent &#39;complete))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;Dabbrev completion is based on =completion-in-region= and can be used with Corfu. You may want to swap the =dabbrev-completion= with the =dabbrev-expand= key for easier access, if you prefer completion. Also take a look at the =cape-dabbrev= completion at point function provided by my [[https://github.com/minad/cape][Cape]] package.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Use Dabbrev with Corfu! (use-package dabbrev ;; Swap M-/ and C-M-/ :bind ((&#34;M-/&#34; . dabbrev-completion) (&#34;C-M-/&#34; . dabbrev-expand)) ;; Other useful Dabbrev configurations. :custom (dabbrev-ignored-buffer-regexps &#39;(&#34;\.\(?:pdf\|jpe?g\|png\)\&#39;&#34;))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;If you start to configure the package more deeply, I recommend to give the Orderless completion style a try for filtering. Orderless completion is different from the familiar prefix TAB completion. Corfu can be used with the default completion styles. The use of Orderless is not a necessity.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Optionally use the `orderless&#39; completion style. (use-package orderless :init ;; Configure a custom style dispatcher (see the Consult wiki) ;; (setq orderless-style-dispatchers &#39;(+orderless-dispatch) ;; orderless-component-separator #&#39;orderless-escapable-split-on-space) (setq completion-styles &#39;(orderless basic) completion-category-defaults nil completion-category-overrides &#39;((file (styles . (partial-completion)))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;The =basic= completion style is specified as fallback in addition to =orderless= in order to ensure that completion commands which rely on dynamic completion tables, e.g., &lt;del&gt;completion-table-dynamic&lt;/del&gt; or &lt;del&gt;completion-table-in-turn&lt;/del&gt;, work correctly. See =+orderless-dispatch= in the [[https://github.com/minad/consult/wiki][Consult wiki]] for an advanced Orderless style dispatcher. Additionally enable =partial-completion= for file path expansion. =partial-completion= is important for file wildcard support. Multiple files can be opened at once with =find-file= if you enter a wildcard. You may also give the =initials= completion style a try.&lt;/p&gt; &#xA;&lt;p&gt;See also the [[https://github.com/minad/corfu/wiki][Corfu Wiki]] for additional configuration tips. In particular the Lsp-mode configuration is documented in the wiki. For more general documentation read the chapter about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html][Emacs manual]]. If you want to create your own Capfs, you can find documentation about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]].&lt;/p&gt; &#xA;&lt;p&gt;** Auto completion&lt;/p&gt; &#xA;&lt;p&gt;Auto completion is disabled by default, but can be enabled by setting &lt;del&gt;corfu-auto=t&lt;/del&gt;. Furthermore you may want to configure Corfu to quit completion eagerly, such that the completion popup stays out of your way when it appeared unexpectedly.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Enable auto completion and configure quitting (setq corfu-auto t corfu-quit-no-match &#39;separator) ;; or t #+end_src&lt;/p&gt; &#xA;&lt;p&gt;In general, I recommend to experiment a bit with the various settings and key bindings to find a configuration which works for you. There is no one size fits all solution. Some people like auto completion, some like manual completion, some want to cycle with TAB and some with the arrow keys...&lt;/p&gt; &#xA;&lt;p&gt;** Completing with Corfu in the minibuffer&lt;/p&gt; &#xA;&lt;p&gt;Corfu can be used for completion in the minibuffer, since it relies on child frames to display the candidates. By default, &lt;del&gt;global-corfu-mode&lt;/del&gt; does not activate &lt;del&gt;corfu-mode&lt;/del&gt; in the minibuffer, to avoid interference with specialised minibuffer completion UIs like Vertico or Mct. However you may still want to enable Corfu completion for commands like &lt;del&gt;M-:&lt;/del&gt; (&lt;del&gt;eval-expression&lt;/del&gt;) or &lt;del&gt;M-!&lt;/del&gt; (&lt;del&gt;shell-command&lt;/del&gt;), which read from the minibuffer. Activate &lt;del&gt;corfu-mode&lt;/del&gt; only if &lt;del&gt;completion-at-point&lt;/del&gt; is bound in the minibuffer-local keymap to achieve this effect.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-enable-in-minibuffer () &#34;Enable Corfu in the minibuffer if `completion-at-point&#39; is bound.&#34; (when (where-is-internal #&#39;completion-at-point (list (current-local-map))) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook &#39;minibuffer-setup-hook #&#39;corfu-enable-in-minibuffer) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;You can also enable Corfu more generally for every minibuffer, as long as no other completion UI is active. If you use Mct or Vertico as your main minibuffer completion UI, the following snippet should yield the desired result.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-enable-always-in-minibuffer () &#34;Enable Corfu in the minibuffer if Vertico/Mct are not active.&#34; (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook &#39;minibuffer-setup-hook #&#39;corfu-enable-always-in-minibuffer 1) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Completing with Corfu in the Eshell or Shell&lt;/p&gt; &#xA;&lt;p&gt;When completing in the Eshell I recommend conservative local settings without auto completion, such that the completion behavior is similar to widely used shells like Bash, Zsh or Fish.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (add-hook &#39;eshell-mode-hook (lambda () (setq-local corfu-auto nil) (corfu-mode))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;When pressing =RET= while the Corfu popup is visible, the &lt;del&gt;corfu-insert&lt;/del&gt; command will be invoked. This command does inserts the currently selected candidate, but it does not send the prompt input to Eshell or the comint process. Therefore you often have to press =RET= twice which feels like an unnecessary double confirmation. Fortunately it is easy to improve this! In my configuration I define the advice &lt;del&gt;corfu-send-shell&lt;/del&gt; which sends the candidate after insertion.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-send-shell (&amp;amp;rest _) &#34;Send completion candidate when inside comint/eshell.&#34; (cond ((and (derived-mode-p &#39;eshell-mode) (fboundp &#39;eshell-send-input)) (eshell-send-input)) ((and (derived-mode-p &#39;comint-mode) (fboundp &#39;comint-send-input)) (comint-send-input))))&lt;/p&gt; &#xA;&lt;p&gt;(advice-add #&#39;corfu-insert :after #&#39;corfu-send-shell) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Shell completion uses the flexible &lt;del&gt;pcomplete&lt;/del&gt; mechanism internally, which allows you to program the completions per shell command. If you want to know more, look into this [[https://www.masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs][blog post]], which shows how to configure pcomplete for git commands. I recommend the [[https://github.com/JonWaltman/pcmpl-args.el][pcmpl-args]] package which extends Pcomplete with completion support and helpful annotation support for more commands. Similar to the Fish shell, pcmpl-args uses man page parsing and --help output parsing to dynamically generate completions. This package brings Eshell completion to another level!&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately Pcomplete has a few technical issues, which we can work around with the [[https://github.com/minad/cape][Cape]] library (Completion at point extensions). Cape provides wrappers, which sanitize the pcomplete function. Ideally the bugs in pcomplete should be fixed upstream. &lt;em&gt;For now these two advices are strongly recommended to achieve a sane Eshell experience.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Silence the pcomplete capf, no errors or messages! (advice-add &#39;pcomplete-completions-at-point :around #&#39;cape-wrap-silent)&lt;/p&gt; &#xA;&lt;p&gt;;; Ensure that pcomplete does not write to the buffer ;; and behaves as a pure `completion-at-point-function&#39;. (advice-add &#39;pcomplete-completions-at-point :around #&#39;cape-wrap-purify) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Orderless completion&lt;/p&gt; &#xA;&lt;p&gt;[[https://github.com/oantolin/orderless][Orderless]] is an advanced completion style that supports multi-component search filters separated by a configurable character (space, by default). Normally, entering characters like space which lie outside the completion region boundaries (words, typically) causes Corfu to quit. This behavior is helpful with auto-completion, which may pop-up when not desired, e.g. on entering a new variable name. Just keep typing and Corfu will get out of the way.&lt;/p&gt; &#xA;&lt;p&gt;But orderless search terms can contain arbitrary characters; they are also interpreted as regular expressions. To use orderless, set &lt;del&gt;corfu-separator&lt;/del&gt; (a space, by default) to the primary character of your orderless component separator.&lt;/p&gt; &#xA;&lt;p&gt;Then, when a new orderless component is desired, use =M-SPC= (&lt;del&gt;corfu-insert-separator&lt;/del&gt;) to enter the /first/ component separator in the input, and arbitrary orderless search terms and new separators can be entered thereafter.&lt;/p&gt; &#xA;&lt;p&gt;To treat the entire input as Orderless input, you can set the customization option &lt;del&gt;corfu-quit-at-boundary=t&lt;/del&gt;. This disables the predicate which checks if the current completion boundary has been left. In contrast, if you /always/ want to quit at the boundary, simply set &lt;del&gt;corfu-quit-at-boundary=nil&lt;/del&gt;. By default &lt;del&gt;corfu-quit-at-boundary&lt;/del&gt; is set to &lt;del&gt;separator&lt;/del&gt; which quits at completion boundaries as long as no separator has been inserted with &lt;del&gt;corfu-insert-separator&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, there exists the user option &lt;del&gt;corfu-quit-no-match&lt;/del&gt; which is set to =separator= by default. With this setting Corfu stays alive as soon as you start advanced filtering with a &lt;del&gt;corfu-separator&lt;/del&gt; even if there are no matches, for example due to a typo. As long as no separator character has been inserted with &lt;del&gt;corfu-insert-separator&lt;/del&gt;, Corfu will still quit if there are no matches. This ensures that the Corfu popup goes away quickly if completion is not possible.&lt;/p&gt; &#xA;&lt;p&gt;In the following we show two configurations, one which works best with auto completion and one which may work better with manual completion if you prefer to always use =SPC= to separate the Orderless components.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp ;; Auto completion example (use-package corfu :custom (corfu-auto t) ;; Enable auto completion ;; (corfu-separator ?_) ;; Set to orderless separator, if not using space :bind ;; Another key binding can be used, such as S-SPC. ;; (:map corfu-map (&#34;M-SPC&#34; . corfu-insert-separator)) :init (global-corfu-mode))&lt;/p&gt; &#xA;&lt;p&gt;;; Manual completion example (use-package corfu :custom ;; (corfu-separator ?_) ;; Set to orderless separator, if not using space :bind ;; Configure SPC for separator insertion (:map corfu-map (&#34;SPC&#34; . corfu-insert-separator)) :init (global-corfu-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** TAB-and-Go completion&lt;/p&gt; &#xA;&lt;p&gt;You may be interested in configuring Corfu in TAB-and-Go style. Pressing TAB moves to the next candidate and further input will then commit the selection. Note that further input will not expand snippets or templates, which may not be desired but which leads overall to a more predictable behavior. In order to force snippet expansion, confirm a candidate explicitly with &lt;del&gt;RET&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (use-package corfu ;; TAB-and-Go customizations :custom (corfu-cycle t) ;; Enable cycling for `corfu-next/previous&#39; (corfu-preselect-first nil) ;; Disable candidate preselection&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;;; Use TAB for cycling, default is `corfu-complete&#39;.&#xA;:bind&#xA;(:map corfu-map&#xA;      (&#34;TAB&#34; . corfu-next)&#xA;      ([tab] . corfu-next)&#xA;      (&#34;S-TAB&#34; . corfu-previous)&#xA;      ([backtab] . corfu-previous))&#xA;&#xA;:init&#xA;(global-corfu-mode))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;#+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Transfer completion to the minibuffer&lt;/p&gt; &#xA;&lt;p&gt;Sometimes it is useful to transfer the Corfu completion session to the minibuffer, since the minibuffer offers richer interaction features. In particular, [[https://github.com/oantolin/embark][Embark]] is available in the minibuffer, such that you can act on the candidates or export/collect the candidates to a separate buffer. Hopefully we can also add Corfu-support to Embark in the future, such that at least export/collect is possible directly from Corfu. But in my opinion having the ability to transfer the Corfu completion to the minibuffer is an even better feature, since further completion can be performed there.&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;del&gt;corfu-move-to-minibuffer&lt;/del&gt; is defined here in terms of &lt;del&gt;consult-completion-in-region&lt;/del&gt;, which uses the minibuffer completion UI via &lt;del&gt;completing-read&lt;/del&gt;.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp (defun corfu-move-to-minibuffer () (interactive) (let ((completion-extra-properties corfu--extra) completion-cycle-threshold completion-cycling) (apply #&#39;consult-completion-in-region completion-in-region--data))) (define-key corfu-map &#34;\M-m&#34; #&#39;corfu-move-to-minibuffer) #+end_src&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Key bindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu uses a transient keymap &lt;del&gt;corfu-map&lt;/del&gt; which is active while the popup is shown. The keymap defines the following remappings and bindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;beginning-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-first&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;end-of-buffer&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-last&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-down-command&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-scroll-down&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;scroll-up-command&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-scroll-up&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;next-line&lt;/del&gt;, =down=, =M-n= -&amp;gt; &lt;del&gt;corfu-next&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;previous-line&lt;/del&gt;, =up=, =M-p= -&amp;gt; &lt;del&gt;corfu-previous&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;completion-at-point&lt;/del&gt;, =TAB= -&amp;gt; &lt;del&gt;corfu-complete&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=RET= -&amp;gt; &lt;del&gt;corfu-insert&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-g= -&amp;gt; &lt;del&gt;corfu-info-location&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-h= -&amp;gt; &lt;del&gt;corfu-info-documentation&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=M-SPC= -&amp;gt; &lt;del&gt;corfu-insert-separator&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;=C-g= -&amp;gt; &lt;del&gt;corfu-quit&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;keyboard-escape-quit&lt;/del&gt; -&amp;gt; &lt;del&gt;corfu-reset&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensions :properties: :custom_id: extensions &lt;span&gt;🔚&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We maintain small extension packages to Corfu in this repository in the subdirectory [[https://github.com/minad/corfu/tree/main/extensions][extensions/]]. The extensions are installed together with Corfu if you pull the package from ELPA. The extensions are inactive by default and can be enabled manually if desired. Furthermore it is possible to install all of the files separately, both &lt;del&gt;corfu.el&lt;/del&gt; and the &lt;del&gt;corfu-*.el&lt;/del&gt; extensions. Currently the following extensions come with the Corfu ELPA package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-history.el][corfu-history]]: =corfu-history-mode= to remember selected candidates and to improve sorting.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-indexed.el][corfu-indexed]]: =corfu-indexed-mode= to select indexed candidates with prefix arguments.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-info.el][corfu-info]]: Actions to access the candidate location and documentation.&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/minad/corfu/blob/main/extensions/corfu-quick.el][corfu-quick]]: Commands to select using Avy-style quick keys.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the Commentary of those files for configuration details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complementary packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Corfu works well together with all packages providing code completion via the &lt;del&gt;completion-at-point-functions&lt;/del&gt;. Many modes and packages already provide a Capf out of the box. Nevertheless you may want to look into complementary packages to enhance your setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]]: The corfu-terminal package provides an overlay-based display for Corfu, such that you can use Corfu in terminal Emacs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/galeo/corfu-doc][corfu-doc]]: The corfu-doc package displays the candidate documentation in a popup next to the Corfu popup, similar to =company-quickhelp=.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/oantolin/orderless][Orderless]]: Corfu supports completion styles, including the advanced [[https://github.com/oantolin/orderless][Orderless]] completion style, where the filtering expressions are separated by spaces or another character (see &lt;del&gt;corfu-separator&lt;/del&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/cape][Cape]]: Additional Capf backends and =completion-in-region= commands are provided by the [[https://github.com/minad/cape][Cape]] package. Among others, the package supplies a file path and a dabbrev completion backend. Cape provides the &lt;del&gt;cape-company-to-capf&lt;/del&gt; adapter to reuse Company backends in Corfu. Furthermore the function &lt;del&gt;cape-super-capf&lt;/del&gt; can merge multiple Capfs, such that the candidates of multiple Capfs are displayed together at the same time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/jdtsmith/kind-icon][kind-icon]]: Icons are supported by Corfu via an external package. For example the [[https://github.com/jdtsmith/kind-icon][kind-icon]] package provides beautifully styled SVG icons based on monochromatic icon sets like material design.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/JonWaltman/pcmpl-args.el][pcmpl-args]]: Extend the Eshell/Shell Pcomplete mechanism with support for many more commands. Similar to the Fish shell, Pcomplete uses man page parsing to dynamically retrieve the completions and helpful annotations. This package brings Eshell completions to another level!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/tempel][Tempel]]: Tiny template/snippet package with templates in Lisp syntax, which can be used in conjunction with Corfu.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/vertico][Vertico]]: You may also want to look into my [[https://github.com/minad/vertico][Vertico]] package. Vertico is the minibuffer completion counterpart of Corfu.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/company-mode/company-mode][Company]]: Company is a widely used and mature completion package, which implements a similar interaction model and popup UI as Corfu. While Corfu relies exclusively on the standard Emacs completion API (Capfs), Company defines its own API for the backends. Company includes its completion backends, which are incompatible with the Emacs completion infrastructure. As a result of this design, Company is a more complex package than Corfu. Company by default uses overlays for the popup in contrast to the child frames used by Corfu. Overall both packages work well, but Company integrates less tightly with Emacs. The &lt;del&gt;completion-styles&lt;/del&gt; support is more limited and the &lt;del&gt;completion-at-point&lt;/del&gt; command and the &lt;del&gt;completion-in-region&lt;/del&gt; function do not invoke Company.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://git.sr.ht/~protesilaos/mct][Mct]]: Protesilaos&#39; Minibuffer Confines Transcended package supports both minibuffer completion and completion in region. It reuses the default completion UI for this purpose and installs a timer which live updates the completion buffer. The main advantage of Mct is that you work with a regular Emacs buffer instead of with a popup. You can take advantage of the usual Emacs commands to navigate in the completions buffer. On top, Mct enhances the movement such that you can quickly switch between the completions buffer and the minibuffer or the region which is being completed. Mct does not support timer-based auto completion, but the integration into Emacs is naturally tight.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[https://github.com/minad/consult][consult-completion-in-region]]: The Consult package provides the function &lt;del&gt;consult-completion-in-region&lt;/del&gt; which can be set as &lt;del&gt;completion-in-region-function&lt;/del&gt; such that it handles &lt;del&gt;completion-at-point&lt;/del&gt;. The function works by transferring the in-buffer completion to the minibuffer. In the minibuffer, the minibuffer completion UI, for example [[https://github.com/minad/vertico][Vertico]] takes over. If you prefer to perform all your completions in the minibuffer &lt;del&gt;consult-completion-in-region&lt;/del&gt; is your best option.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since this package is part of [[http://elpa.gnu.org/packages/corfu.html][GNU ELPA]] contributions require a copyright assignment to the FSF.&lt;/p&gt;</summary>
  </entry>
</feed>