<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-08T01:33:33Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>abo-abo/zoutline</title>
    <updated>2023-08-08T01:33:33Z</updated>
    <id>tag:github.com,2023-08-08:/abo-abo/zoutline</id>
    <link href="https://github.com/abo-abo/zoutline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs library for outlines&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>abo-abo/lispy</title>
    <updated>2023-08-08T01:33:33Z</updated>
    <id>tag:github.com,2023-08-08:/abo-abo/lispy</id>
    <link href="https://github.com/abo-abo/lispy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Short and sweet LISP editing&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL_3-green.svg?sanitize=true&#34; alt=&#34;License GPL 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/abo-abo/lispy&#34;&gt;&lt;img src=&#34;https://travis-ci.org/abo-abo/lispy.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/abo-abo/lispy?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/abo-abo/lispy/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/lispy&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/lispy-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/lispy&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/lispy-badge.svg?sanitize=true&#34; alt=&#34;MELPA Stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/images/lispy-logo.png&#34; alt=&#34;lispy logo&#34;&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;short and sweet LISP editing&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc/generate-toc again --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#introduction&#34;&gt;Introduction&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#relation-to-vi&#34;&gt;Relation to vi&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#function-reference&#34;&gt;Function reference&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#installation-instructions&#34;&gt;Installation instructions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#via-melpa&#34;&gt;via MELPA&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#via-el-get&#34;&gt;via el-get&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#configuration-instructions&#34;&gt;Configuration instructions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#customization-instructions&#34;&gt;Customization instructions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#operating-on-lists&#34;&gt;Operating on lists&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#how-to-get-into-list-editing-mode-special&#34;&gt;How to get into list-editing mode (special)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#digit-keys-in-special&#34;&gt;Digit keys in special&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#how-to-get-out-of-special&#34;&gt;How to get out of special&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#list-commands-overview&#34;&gt;List commands overview&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#inserting-pairs&#34;&gt;Inserting pairs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#reversible-commands&#34;&gt;Reversible commands&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#keys-that-modify-whitespace&#34;&gt;Keys that modify whitespace&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#command-chaining&#34;&gt;Command chaining&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#navigating-with-ace-jump-mode-related-commands&#34;&gt;Navigating with &lt;code&gt;avy&lt;/code&gt;-related commands&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#operating-on-regions&#34;&gt;Operating on regions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#ways-to-activate-region&#34;&gt;Ways to activate region&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#move-region-around&#34;&gt;Move region around&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#switch-to-the-other-side-of-the-region&#34;&gt;Switch to the other side of the region&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#growshrink-region&#34;&gt;Grow/shrink region&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#commands-that-operate-on-region&#34;&gt;Commands that operate on region&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#ide-like-features&#34;&gt;IDE-like features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#demos&#34;&gt;Demos&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-1&#34;&gt;Demo 1: Practice generating code&lt;/a&gt;](#demo-1-practice-generating-codehttpabo-abogithubiolispydemo-1)&lt;/li&gt; &#xA;   &lt;li&gt;[&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-2&#34;&gt;Demo 2: The substitution model for procedure application&lt;/a&gt;](#demo-2-the-substitution-model-for-procedure-applicationhttpabo-abogithubiolispydemo-2)&lt;/li&gt; &#xA;   &lt;li&gt;[&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-3&#34;&gt;Demo 3: Down the rabbit hole&lt;/a&gt;](#demo-3-down-the-rabbit-holehttpabo-abogithubiolispydemo-3)&lt;/li&gt; &#xA;   &lt;li&gt;[&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-4&#34;&gt;Demo 4: Project Euler p100 and Clojure&lt;/a&gt;](#demo-4-project-euler-p100-and-clojurehttpabo-abogithubiolispydemo-4)&lt;/li&gt; &#xA;   &lt;li&gt;[&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-5&#34;&gt;Demo 5: -&amp;gt;&amp;gt;ification&lt;/a&gt;](#demo-5--ificationhttpabo-abogithubiolispydemo-5)&lt;/li&gt; &#xA;   &lt;li&gt;[&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-6&#34;&gt;Demo 6: cond-&amp;gt;if-&amp;gt;cond&lt;/a&gt;](#demo-6-cond-if-condhttpabo-abogithubiolispydemo-6)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#screencasts&#34;&gt;Screencasts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;This package reimagines Paredit - a popular method to navigate and edit LISP code in Emacs.&lt;/p&gt; &#xA;&lt;p&gt;The killer-feature are the short bindings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;command&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;binding&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;binding&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;paredit-forward&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;C-M-f&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;j&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;lispy-down&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;paredit-backward&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;C-M-b&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;k&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;lispy-up&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;paredit-backward-up&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;C-M-u&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;h&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;lispy-left&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;paredit-forward-up&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;C-M-n&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;l&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;lispy-right&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;paredit-raise-sexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;M-r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;lispy-raise&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;paredit-convolute-sexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;M-?&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;C&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;lispy-convolute&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;paredit-forward-slurp-sexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;C-)&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;&amp;gt;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;lispy-slurp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;paredit-forward-barf-sexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;C-}&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;&amp;lt;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;lispy-barf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;paredit-backward-slurp-sexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;C-(&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;&amp;gt;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;lispy-slurp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;paredit-backward-barf-sexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;C-{&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;&amp;lt;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;lispy-barf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Most of more than 100 interactive commands that &lt;code&gt;lispy&lt;/code&gt; provides are bound to &lt;kbd&gt;a&lt;/kbd&gt;-&lt;kbd&gt;z&lt;/kbd&gt; and &lt;kbd&gt;A&lt;/kbd&gt;-&lt;kbd&gt;Z&lt;/kbd&gt; in &lt;code&gt;lispy-mode&lt;/code&gt;. You can see the full command reference with many examples &lt;a href=&#34;http://abo-abo.github.io/lispy/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The price for these short bindings is that they are only active when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the point is before an open paren: &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt; or &lt;code&gt;{&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;the point is after a close paren: &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;the region is active&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The advantage of short bindings is that you are more likely to use them. As you use them more, you learn how to combine them, increasing your editing efficiency.&lt;/p&gt; &#xA;&lt;p&gt;To further facilitate building complex commands from smaller commands, &lt;code&gt;lispy-mode&lt;/code&gt; binds &lt;code&gt;digit-argument&lt;/code&gt; to &lt;kbd&gt;0&lt;/kbd&gt;-&lt;kbd&gt;9&lt;/kbd&gt;. For example, you can mark the third element of the list with &lt;kbd&gt;3m&lt;/kbd&gt;. You can then mark third through fifth element (three total) with &lt;kbd&gt;2&amp;gt;&lt;/kbd&gt; or &lt;kbd&gt;&amp;gt;&amp;gt;&lt;/kbd&gt;. You can then move the selection to the last three elements of the list with &lt;kbd&gt;99j&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are currently using Paredit, note that &lt;code&gt;lispy-mode&lt;/code&gt; and &lt;code&gt;paredit-mode&lt;/code&gt; can actually coexist with very few conflicts, although there would be some redundancy.&lt;/p&gt; &#xA;&lt;h2&gt;Relation to vi&lt;/h2&gt; &#xA;&lt;p&gt;The key binding method is influenced by vi, although this isn&#39;t modal editing &lt;em&gt;per se&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a quote from Wikipedia on how vi works, in case you don&#39;t know:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;vi is a modal editor: it operates in either insert mode (where typed text becomes part of the document) or normal mode (where keystrokes are interpreted as commands that control the edit session). For example, typing i while in normal mode switches the editor to insert mode, but typing i again at this point places an &#34;i&#34; character in the document. From insert mode, pressing ESC switches the editor back to normal mode.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here&#39;s an illustration of Emacs, vi and lispy bindings for inserting a char and calling a command:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;insert &#34;j&#34;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;forward-list&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Emacs&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;j&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;C-M-n&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vi in insert mode&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;j&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;impossible&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vi in normal mode&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;impossible&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;j&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lispy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;j&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;j&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Advantages/disadvantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs can both insert and call commands without switching modes (since it has none), but the command bindings are long&lt;/li&gt; &#xA; &lt;li&gt;vi has short command bindings, but you have to switch modes between inserting and calling commands&lt;/li&gt; &#xA; &lt;li&gt;lispy has short command bindings and doesn&#39;t need to switch modes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of course it&#39;s not magic, lispy needs to have normal/insert mode to perform both functions with &lt;kbd&gt;j&lt;/kbd&gt;. The difference from vi is that the mode is &lt;strong&gt;explicit&lt;/strong&gt; instead of &lt;strong&gt;implicit&lt;/strong&gt; - it&#39;s determined by the point position or the region state:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you are in normal mode when the point is before/after paren or the region is active&lt;/li&gt; &#xA; &lt;li&gt;otherwise you are in insert mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So people who generally like Emacs bindings (like me) can have the cake and eat it too (no dedicated insert mode + shorter key bindings). While people who like vi can still get an experience that&#39;s reasonably close to vi for LISP editing (since vi&#39;s line-based approach isn&#39;t very appropriate for LISP anyway).&lt;/p&gt; &#xA;&lt;p&gt;But if you ask:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;What if I want to insert when the point is before/after paren or the region is active?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The answer is that because of the LISP syntax you don&#39;t want to write this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;j(progn&#xA;   (forward-char 1))k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, Emacs does nothing special by default when the region is active and you press a normal key, so new commands can be called in that situation.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Basic navigation by-list and by-region:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;h&lt;/kbd&gt; moves left&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;j&lt;/kbd&gt; moves down&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;k&lt;/kbd&gt; moves up&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;l&lt;/kbd&gt; moves right&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;f&lt;/kbd&gt; steps inside the list&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;b&lt;/kbd&gt; moves back in history for all above commands&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Paredit transformations, callable by plain letters:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;&amp;gt;&lt;/kbd&gt; slurps&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;&amp;lt;&lt;/kbd&gt; barfs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;r&lt;/kbd&gt; raises&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;C&lt;/kbd&gt; convolutes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;s&lt;/kbd&gt; moves down&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;w&lt;/kbd&gt; moves up&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IDE-like features for Elisp, Clojure, Scheme, Common Lisp, Hy, Python and Julia:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;e&lt;/kbd&gt; evals&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;E&lt;/kbd&gt; evals and inserts&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;g&lt;/kbd&gt; jumps to any tag in the current directory with semantic&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;G&lt;/kbd&gt; jumps to any tag in the current file&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;M-.&lt;/kbd&gt; jumps to symbol, &lt;kbd&gt;M-,&lt;/kbd&gt; jumps back&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;F&lt;/kbd&gt; jumps to symbol, &lt;kbd&gt;D&lt;/kbd&gt; jumps back&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;C-1&lt;/kbd&gt; shows documentation in an overlay&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;C-2&lt;/kbd&gt; shows arguments in an overlay&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/#lispy-edebug-stop&#34;&gt;&lt;kbd&gt;Z&lt;/kbd&gt;&lt;/a&gt; breaks out of &lt;code&gt;edebug&lt;/code&gt;, while storing current function&#39;s arguments&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some pictures &lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#ide-like-features&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code manipulation: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;i&lt;/kbd&gt; prettifies code (remove extra space, hanging parens ...)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;xi&lt;/kbd&gt; transforms &lt;code&gt;cond&lt;/code&gt; expression to equivalent &lt;code&gt;if&lt;/code&gt; expressions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;xc&lt;/kbd&gt; transforms &lt;code&gt;if&lt;/code&gt; expressions to an equivalent &lt;code&gt;cond&lt;/code&gt; expression&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;x&amp;gt;&lt;/kbd&gt; transforms expressions from/to an equivalent &lt;code&gt;thread-last&lt;/code&gt; expression&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;xf&lt;/kbd&gt; flattens function or macro call (extract body and substitute arguments)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;xr&lt;/kbd&gt; evals and replaces&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;xl&lt;/kbd&gt; turns current &lt;code&gt;defun&lt;/code&gt; into a &lt;code&gt;lambda&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;xd&lt;/kbd&gt; turns current &lt;code&gt;lambda&lt;/code&gt; into a &lt;code&gt;defun&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;O&lt;/kbd&gt; formats the code into one line&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;M&lt;/kbd&gt; formats the code into multiple lines&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Misc. bindings: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;outlines navigation/folding (&lt;kbd&gt;J&lt;/kbd&gt;, &lt;kbd&gt;K&lt;/kbd&gt;, &lt;kbd&gt;I&lt;/kbd&gt;, &lt;kbd&gt;i&lt;/kbd&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;narrow/widen (&lt;kbd&gt;N&lt;/kbd&gt;, &lt;kbd&gt;W&lt;/kbd&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ediff&lt;/code&gt; (&lt;kbd&gt;b&lt;/kbd&gt;, &lt;kbd&gt;B&lt;/kbd&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ert&lt;/code&gt; (&lt;kbd&gt;T&lt;/kbd&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;edebug&lt;/code&gt; (&lt;kbd&gt;xe&lt;/kbd&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Function reference&lt;/h2&gt; &#xA;&lt;p&gt;Most functions are cataloged and described at &lt;a href=&#34;http://abo-abo.github.io/lispy/&#34;&gt;http://abo-abo.github.io/lispy/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Installation instructions&lt;/h2&gt; &#xA;&lt;h3&gt;via MELPA&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s easiest/recommended to install from &lt;a href=&#34;http://melpa.org/&#34;&gt;MELPA&lt;/a&gt;. Here&#39;s a minimal MELPA configuration for your &lt;code&gt;~/.emacs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(package-initialize)&#xA;(add-to-list &#39;package-archives &#39;(&#34;melpa&#34; . &#34;http://melpa.org/packages/&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Afterwards, &lt;kbd&gt;M-x package-install RET lispy RET&lt;/kbd&gt; (you might want to &lt;kbd&gt;M-x package-refresh-contents RET&lt;/kbd&gt; beforehand if you haven&#39;t done so recently).&lt;/p&gt; &#xA;&lt;h3&gt;via el-get&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dimitri/el-get&#34;&gt;el-get&lt;/a&gt; also features a lispy recipe. Use &lt;kbd&gt;M-x el-get-install RET lispy RET&lt;/kbd&gt; to install.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration instructions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enable lispy automatically for certain modes&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;After installing, you can call &lt;kbd&gt;M-x lispy-mode&lt;/kbd&gt; for any buffer with a LISP dialect source. To have &lt;code&gt;lispy-mode&lt;/code&gt; activated automatically, use something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(add-hook &#39;emacs-lisp-mode-hook (lambda () (lispy-mode 1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enable lispy for &lt;code&gt;eval-expression&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Although I prefer to eval things in &lt;code&gt;*scratch*&lt;/code&gt;, sometimes &lt;kbd&gt;M-:&lt;/kbd&gt; - &lt;code&gt;eval-expression&lt;/code&gt; is handy. Here&#39;s how to use lispy in the minibuffer during &lt;code&gt;eval-expression&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(defun conditionally-enable-lispy ()&#xA;  (when (eq this-command &#39;eval-expression)&#xA;    (lispy-mode 1)))&#xA;(add-hook &#39;minibuffer-setup-hook &#39;conditionally-enable-lispy)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization instructions&lt;/h2&gt; &#xA;&lt;p&gt;If you want to replace some of the &lt;code&gt;lispy-mode&lt;/code&gt;&#39;s bindings you can do it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cl&#34;&gt;(eval-after-load &#34;lispy&#34;&#xA;  `(progn&#xA;     ;; replace a global binding with own function&#xA;     (define-key lispy-mode-map (kbd &#34;C-e&#34;) &#39;my-custom-eol)&#xA;     ;; replace a global binding with major-mode&#39;s default&#xA;     (define-key lispy-mode-map (kbd &#34;C-j&#34;) nil)&#xA;     ;; replace a local binding&#xA;     (lispy-define-key lispy-mode-map &#34;s&#34; &#39;lispy-down)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compatibility with other modes&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;lispy-compat&lt;/code&gt; variable to enable compatibility with modes that could otherwise conflict. These currently include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;god-mode&lt;/li&gt; &#xA; &lt;li&gt;magit-blame-mode&lt;/li&gt; &#xA; &lt;li&gt;edebug&lt;/li&gt; &#xA; &lt;li&gt;cider&lt;/li&gt; &#xA; &lt;li&gt;macrostep&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default setting only enables compatibility with &lt;code&gt;edebug&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Operating on lists&lt;/h1&gt; &#xA;&lt;h2&gt;How to get into list-editing mode (special)&lt;/h2&gt; &#xA;&lt;p&gt;The plain keys will call commands when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the point is positioned before paren&lt;/li&gt; &#xA; &lt;li&gt;the point is positioned after paren&lt;/li&gt; &#xA; &lt;li&gt;the region is active&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When one of the first two conditions is true, I say that the point is special. When the point is special, it&#39;s very clear to which sexp the list-manipulating command will be applied to, what the result be and where the point should end up afterwards. You can enhance this effect with &lt;code&gt;show-paren-mode&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an illustration to this effect, with &lt;code&gt;lispy-clone&lt;/code&gt; (here, &lt;code&gt;|&lt;/code&gt; represents the point):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;before&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;key&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;after&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;(looking-at &#34;(&#34;)|&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;(looking-at &#34;(&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;(looking-at &#34;(&#34;)|&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;before&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;key&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;after&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;|(looking-at &#34;(&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;|(looking-at &#34;(&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt; (looking-at &#34;(&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can use plain Emacs navigation commands to get into special, or you can use some of the dedicated commands:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key Binding&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-forward&lt;/code&gt; - move to the end of the closest list, analogous to &lt;kbd&gt;C-M-n&lt;/kbd&gt; (&lt;code&gt;forward-list&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-backward&lt;/code&gt; - move to the start of the closest list, analogous to &lt;kbd&gt;C-M-p&lt;/kbd&gt; (&lt;code&gt;backward-list&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-3&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-right&lt;/code&gt; - exit current list forwards, analogous to &lt;code&gt;up-list&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;)&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-right-nostring&lt;/code&gt; exit current list forwards, but self-insert in strings and comments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These are the few lispy commands that don&#39;t care whether the point is special or not. Other such bindings are &lt;kbd&gt;DEL&lt;/kbd&gt;, &lt;kbd&gt;C-d&lt;/kbd&gt;, &lt;kbd&gt;C-k&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Special is useful for manipulating/navigating lists. If you want to manipulate symbols, use &lt;a href=&#34;https://raw.githubusercontent.com/abo-abo/lispy/master/#operating-on-regions&#34;&gt;region selection&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h2&gt;Digit keys in special&lt;/h2&gt; &#xA;&lt;p&gt;When special, the digit keys call &lt;code&gt;digit-argument&lt;/code&gt; which is very useful since most lispy commands accept a numeric argument. For instance, &lt;kbd&gt;3c&lt;/kbd&gt; is equivalent to &lt;kbd&gt;ccc&lt;/kbd&gt; (clone sexp 3 times), and &lt;kbd&gt;4j&lt;/kbd&gt; is equivalent to &lt;kbd&gt;jjjj&lt;/kbd&gt; (move point 4 sexps down).&lt;/p&gt; &#xA;&lt;p&gt;Some useful applications are &lt;kbd&gt;9l&lt;/kbd&gt; and &lt;kbd&gt;9h&lt;/kbd&gt; - they exit list forwards and backwards respectively at most 9 times which makes them effectively equivalent to &lt;code&gt;end-of-defun&lt;/code&gt; and &lt;code&gt;beginning-of-defun&lt;/code&gt;. Or you can move to the last sexp of the file with &lt;kbd&gt;999j&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to get out of special&lt;/h2&gt; &#xA;&lt;p&gt;To get out of the special position, you can use any of the good-old navigational commands such as &lt;kbd&gt;C-f&lt;/kbd&gt; or &lt;kbd&gt;C-n&lt;/kbd&gt;. Additionally &lt;kbd&gt;SPC&lt;/kbd&gt; will break out of special to get around the situation when you have the point between the open parens like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(|(&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and want to start inserting; &lt;kbd&gt;SPC&lt;/kbd&gt; will change the code to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(| (&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List commands overview&lt;/h2&gt; &#xA;&lt;h3&gt;Inserting pairs&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a list of commands for inserting &lt;a href=&#34;http://abo-abo.github.io/lispy/#lispy-pair&#34;&gt;pairs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;key&lt;/th&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;(&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/#lispy-parens&#34;&gt;&lt;code&gt;lispy-parens&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;{&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/#lispy-braces&#34;&gt;&lt;code&gt;lispy-braces&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;}&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/#lispy-brackets&#34;&gt;&lt;code&gt;lispy-brackets&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;&#34;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/#lispy-quotes&#34;&gt;&lt;code&gt;lispy-quotes&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Reversible commands&lt;/h3&gt; &#xA;&lt;p&gt;A lot of Lispy commands come in pairs - one reverses the other:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;key&lt;/th&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;key&lt;/th&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;j&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-down&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;k&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-up&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;s&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-move-down&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;w&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-move-up&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;&amp;gt;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-slurp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;&amp;lt;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-barf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-clone&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-d&lt;/kbd&gt; or &lt;kbd&gt;DEL&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-convolute&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reverses itself&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;d&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-different&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;d&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reverses itself&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;M-j&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-split&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;+&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-join&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;O&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-oneline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;M&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-multiline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;S&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-stringify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-u &#34;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-quotes&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-comment&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-u ;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-comment&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;xi&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-to-ifs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;xc&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-to-cond&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;x&amp;gt;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-toggle-thread-last&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;x&amp;gt;&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reverses itself&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Keys that modify whitespace&lt;/h3&gt; &#xA;&lt;p&gt;These commands handle whitespace in addition to inserting the expected thing.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;key&lt;/th&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;SPC&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-space&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;:&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-colon&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;^&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-hat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;C-m&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-newline-and-indent&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Command chaining&lt;/h3&gt; &#xA;&lt;p&gt;Most special commands will leave the point special after they&#39;re done. This allows to chain them as well as apply them continuously by holding the key. Some useful hold-able keys are &lt;kbd&gt;jkf&amp;lt;&amp;gt;cws;&lt;/kbd&gt;. Not so useful, but fun is &lt;kbd&gt;/&lt;/kbd&gt;: start it from &lt;code&gt;|(&lt;/code&gt; position and hold until all your Lisp code is turned into Python :).&lt;/p&gt; &#xA;&lt;h3&gt;Navigating with &lt;code&gt;avy&lt;/code&gt;-related commands&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;key&lt;/th&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;q&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-ace-paren&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Q&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-ace-char&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-ace-symbol&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;H&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-ace-symbol-replace&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;-&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lispy-ace-subword&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;kbd&gt;q&lt;/kbd&gt; - &lt;code&gt;lispy-ace-paren&lt;/code&gt; jumps to a &#34;(&#34; character within current top-level form (e.g. &lt;code&gt;defun&lt;/code&gt;). It&#39;s much faster than typing in the &lt;code&gt;avy&lt;/code&gt; binding + selecting &#34;(&#34;, and there&#39;s less candidates, since they&#39;re limited to the current top-level form.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;a&lt;/kbd&gt; - &lt;code&gt;lispy-ace-symbol&lt;/code&gt; will let you select which symbol to mark within current form. This can be followed up with e.g. eval, describe, follow, raise etc. Or you can simply &lt;kbd&gt;m&lt;/kbd&gt; to deactivate the mark and edit from there.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;-&lt;/kbd&gt; - &lt;code&gt;lispy-ace-subword&lt;/code&gt; is a niche command for a neat combo. Start with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(buffer-substring-no-properties&#xA; (region-beginning)|)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Type &lt;kbd&gt;c&lt;/kbd&gt;, &lt;kbd&gt;-&lt;/kbd&gt;, &lt;kbd&gt;b&lt;/kbd&gt; and &lt;kbd&gt;C-d&lt;/kbd&gt; to get:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(buffer-substring-no-properties&#xA; (region-beginning)&#xA; (region-|))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fill &lt;code&gt;end&lt;/code&gt; to finish the statement.&lt;/p&gt; &#xA;&lt;h1&gt;Operating on regions&lt;/h1&gt; &#xA;&lt;p&gt;Sometimes the expression that you want to operate on isn&#39;t bounded by parens. In that case you can mark it with a region and operate on that.&lt;/p&gt; &#xA;&lt;h2&gt;Ways to activate region&lt;/h2&gt; &#xA;&lt;p&gt;While in special:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mark a sexp with &lt;kbd&gt;m&lt;/kbd&gt; - &lt;code&gt;lispy-mark-list&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mark a symbol within sexp &lt;kbd&gt;a&lt;/kbd&gt; - &lt;code&gt;lispy-ace-symbol&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While not in special:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;C-SPC&lt;/kbd&gt; - &lt;code&gt;set-mark-command&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;mark a symbol at point with &lt;kbd&gt;M-m&lt;/kbd&gt; - &lt;code&gt;lispy-mark-symbol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;mark containing expression (list or string or comment) with &lt;kbd&gt;C-M-,&lt;/kbd&gt; - &lt;code&gt;lispy-mark&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Move region around&lt;/h2&gt; &#xA;&lt;p&gt;The arrow keys &lt;kbd&gt;j&lt;/kbd&gt;/&lt;kbd&gt;k&lt;/kbd&gt; will move the region up/down within the current list. The actual code will not be changed.&lt;/p&gt; &#xA;&lt;h2&gt;Switch to the other side of the region&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;kbd&gt;d&lt;/kbd&gt; - &lt;code&gt;lispy-different&lt;/code&gt; to switch between different sides of the region. The side is important since the grow/shrink operations apply to current side of the region.&lt;/p&gt; &#xA;&lt;h2&gt;Grow/shrink region&lt;/h2&gt; &#xA;&lt;p&gt;Use a combination of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&amp;gt;&lt;/kbd&gt; - &lt;code&gt;lispy-slurp&lt;/code&gt; - extend by one sexp from the current side. Use digit argument to extend by several sexps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;&amp;lt;&lt;/kbd&gt; - &lt;code&gt;lispy-barf&lt;/code&gt; - shrink by one sexp from the current side. Use digit argument to shrink by several sexps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The other two arrow keys will mark the parent list of the current region:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;h&lt;/kbd&gt; - &lt;code&gt;lispy-left&lt;/code&gt; - mark the parent list with the point on the left&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;l&lt;/kbd&gt; - &lt;code&gt;lispy-right&lt;/code&gt; - mark the parent list with the point on the right&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To do the reverse of the previous operation, i.e. to mark the first child of marked list, use &lt;kbd&gt;i&lt;/kbd&gt; - &lt;code&gt;lispy-tab&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Commands that operate on region&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;m&lt;/kbd&gt; - &lt;code&gt;lispy-mark-list&lt;/code&gt; - deactivate region&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;c&lt;/kbd&gt; - &lt;code&gt;lispy-clone&lt;/code&gt; - clone region and keep it active&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;s&lt;/kbd&gt; - &lt;code&gt;lispy-move-down&lt;/code&gt; - move region one sexp down&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;w&lt;/kbd&gt; - &lt;code&gt;lispy-move-up&lt;/code&gt; - move region one sexp up&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;u&lt;/kbd&gt; - &lt;code&gt;lispy-undo&lt;/code&gt; - deactivate region and undo&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;t&lt;/kbd&gt; - &lt;code&gt;lispy-teleport&lt;/code&gt; - move region inside the sexp you select with &lt;code&gt;lispy-ace-paren&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;C&lt;/kbd&gt; - &lt;code&gt;lispy-convolute&lt;/code&gt; - exchange the order of application of two sexps that contain region&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;n&lt;/kbd&gt; - &lt;code&gt;lispy-new-copy&lt;/code&gt; - copy region as kill without deactivating the mark&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;P&lt;/kbd&gt; - &lt;code&gt;lispy-paste&lt;/code&gt; - replace region with current kill&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;IDE-like features&lt;/h1&gt; &#xA;&lt;p&gt;These features are specific to the Lisp dialect used. Currently Elisp and Clojure (via &lt;code&gt;cider&lt;/code&gt;) are supported. There&#39;s also basic evaluation support for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scheme (via &lt;code&gt;geiser&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Common lisp (via &lt;code&gt;slime&lt;/code&gt; or &lt;code&gt;sly&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Hy (via &lt;code&gt;comint&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Python (via &lt;code&gt;comint&lt;/code&gt; and &lt;code&gt;jedi&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Julia (via &lt;code&gt;julia-shell&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;lispy-describe-inline&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bound to &lt;kbd&gt;C-1&lt;/kbd&gt;. Show the doc for the current function inline.&lt;/p&gt; &#xA;&lt;p&gt;&lt;kbd&gt;C-h f&lt;/kbd&gt; is fine, but the extra buffer, and having to navigate to a symbol is tiresome. &lt;kbd&gt;C-1&lt;/kbd&gt; toggles on/off the inline doc for current function. No extra buffer necessary:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/abo-abo/lispy/master/images/doc-elisp.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how it looks for Clojure:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/abo-abo/lispy/master/images/doc-clojure.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;lispy-arglist-inline&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bound to &lt;kbd&gt;C-2&lt;/kbd&gt;. Show arguments for current function inline.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;eldoc-mode&lt;/code&gt; is cool, but it shows you arguments &lt;em&gt;over there&lt;/em&gt; and you&#39;re writing &lt;em&gt;over here&lt;/em&gt;!. No problem, &lt;kbd&gt;C-2&lt;/kbd&gt; fixes that:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/abo-abo/lispy/master/images/arglist-elisp.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you see, normal, &amp;amp;optional and &amp;amp;rest arguments have each a different face. Here&#39;s how it looks for Clojure:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/abo-abo/lispy/master/images/arglist-clojure.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;lispy-goto&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bound to &lt;kbd&gt;g&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use completion to select a symbol to jump to from all top-level symbols in the in current directory.&lt;/p&gt; &#xA;&lt;p&gt;Works out of the box for Elisp, Scheme and Common Lisp. &lt;a href=&#34;https://github.com/kototama/clojure-semantic&#34;&gt;clojure-semantic&lt;/a&gt; is required for Clojure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;lispy-eval&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a feature similar to &lt;code&gt;ipython-notebook&lt;/code&gt;. Evaluating an Emacs outline will evaluate all of the outline&#39;s code and echo the result of the last expression. When an outline ends with a colon (&lt;code&gt;:&lt;/code&gt;), the result will instead be inserted into the buffer. If the evaluation result changes for whatever reason, it will be replaced after each subsequent &lt;kbd&gt;e&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Python, Clojure, and Julia currently have a slightly better notebook support, pressing &lt;kbd&gt;e&lt;/kbd&gt; on the parent outline will evaluate all the children outlines sequentially. This allows to arrange scripts hierarchically, with relatively few top-level outlines and relatively many total outlines. Each outline&#39;s output can be examined by adding a &lt;code&gt;:&lt;/code&gt; to the title of the outline.&lt;/p&gt; &#xA;&lt;p&gt;The following example shows a buffer before and after pressing &lt;kbd&gt;e&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/abo-abo/lispy/images/lispy-python-notebook.png&#34; alt=&#34;lispy-python-notebook.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is one top-level outline, with one level-2 child, which in turn has a four level-3 children. Three of these children end in &lt;code&gt;:&lt;/code&gt;, so their output will be updated after the eval.&lt;/p&gt; &#xA;&lt;h1&gt;Demos&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-1&#34;&gt;Demo 1: Practice generating code&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-2&#34;&gt;Demo 2: The substitution model for procedure application&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-3&#34;&gt;Demo 3: Down the rabbit hole&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-4&#34;&gt;Demo 4: Project Euler p100 and Clojure&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-5&#34;&gt;Demo 5: -&amp;gt;&amp;gt;ification&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://abo-abo.github.io/lispy/demo-6&#34;&gt;Demo 6: cond-&amp;gt;if-&amp;gt;cond&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;Screencasts&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The older stuff can be found on &lt;a href=&#34;http://vimeo.com/user24828177/videos&#34;&gt;vimeo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The newer stuff is on &lt;a href=&#34;https://www.youtube.com/user/abo5abo/videos&#34;&gt;https://www.youtube.com/user/abo5abo/videos&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>