<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-14T01:30:08Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pkryger/difftastic.el</title>
    <updated>2025-01-14T01:30:08Z</updated>
    <id>tag:github.com,2025-01-14:/pkryger/difftastic.el</id>
    <link href="https://github.com/pkryger/difftastic.el" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wrapper for difftastic&lt;/p&gt;&lt;hr&gt;&lt;p&gt;#+STARTUP: showeverything #+STARTUP: literallinks #+OPTIONS: toc:nil num:nil author:nil&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;difftastic.el - Wrapper for difftastic :PROPERTIES: :CUSTOM_ID: difftastic.el---wrapper-for-difftastic :END: [[https://melpa.org/#/difftastic][https://melpa.org/packages/difftastic-badge.svg]] [[https://github.com/pkryger/difftastic.el/actions/workflows/test.yml][https://github.com/pkryger/difftastic.el/actions/workflows/test.yml/badge.svg]] [[https://coveralls.io/github/pkryger/difftastic.el?branch=main][https://coveralls.io/repos/github/pkryger/difftastic.el/badge.svg?branch=main]]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Description :PROPERTIES: :CUSTOM_ID: description :END: The =difftastic= Emacs package is designed to integrate [[https://github.com/wilfred/difftastic][difftastic]] - a structural diff tool - into your Emacs workflow, enhancing your code review and comparison experience. This package automatically displays =difftastic=&#39;s output within Emacs using faces from your user theme, ensuring consistency with your overall coding environment.&lt;/p&gt; &#xA;&lt;p&gt;** Features :PROPERTIES: :CUSTOM_ID: features :END:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configure faces to your likening. By default =magit-diff-*= faces from your user them are used for consistent visual experience.&lt;/li&gt; &#xA; &lt;li&gt;Chunks and file navigation using &lt;del&gt;n&lt;/del&gt; / &lt;del&gt;N&lt;/del&gt; and &lt;del&gt;p&lt;/del&gt; / &lt;del&gt;P&lt;/del&gt; in generated diffs.&lt;/li&gt; &#xA; &lt;li&gt;DWIM workflows from =magit=.&lt;/li&gt; &#xA; &lt;li&gt;Rerun =difftastic= with &lt;del&gt;g&lt;/del&gt; to use current window width to &#34;reflow&#34; content and/or to force language change (when called with prefix).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Installation :PROPERTIES: :CUSTOM_ID: installation :END: *** Installing from MELPA :PROPERTIES: :CUSTOM_ID: installing-from-melpa :END: The easiest way to install and keep =difftastic= up-to-date is using Emacs&#39; built-in package manager. =difftastic= is available in the MELPA repository. Refer to &lt;a href=&#34;https://melpa.org/#/getting-started&#34;&gt;https://melpa.org/#/getting-started&lt;/a&gt; for how to install a package from MELPA.&lt;/p&gt; &#xA;&lt;p&gt;Please see [[#configuration][Configuration]] section for example configuration.&lt;/p&gt; &#xA;&lt;p&gt;You can use any of the package managers that supports installation from MELPA. It can be one of (but not limited to): one of the built-in =package=, =use-package=, or any other package manger that handles autoloads generation, for example (in alphabetical order) [[https://github.com/emacscollective/borg][Borg]], [[https://github.com/progfolio/elpaca][Elpaca]], [[https://github.com/quelpa/quelpa][Quelpa]], or [[https://github.com/radian-software/straight.el][straight.el]].&lt;/p&gt; &#xA;&lt;p&gt;*** Installing from GitHub :PROPERTIES: :CUSTOM_ID: installing-from-github :END: The preferred method is to use built-in =use-package=. Add the following to your Emacs configuration file (usually =&lt;del&gt;/.emacs= or =&lt;/del&gt;/.emacs.d/init.el=):&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :results value silent (use-package difftastic :defer t :vc (:url &#34;&lt;a href=&#34;https://github.com/pkryger/difftastic.el.git&#34;&gt;https://github.com/pkryger/difftastic.el.git&lt;/a&gt;&#34; :rev :newest))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can do a manual checkout and install it from there, for example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to a directory of your choice, for example =~/src/difftastic=.&lt;/li&gt; &#xA; &lt;li&gt;Add the following lines to your Emacs configuration file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :results value silent (use-package difftastic :defer t :vc t :load-path &#34;~/src/difftastic&#34;) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Yet another option is to use any of the package managers that supports installation from GitHub or a an existing checkout. That could be =package-vc=, or any of package managers listed in [[#installing-from-melpa][Installing from MELPA]].&lt;/p&gt; &#xA;&lt;p&gt;**** Manual installation Note, that this method does not generate autoloads. As a consequence it will cause the whole package and it&#39;s dependencies (including =magit=) to be loaded at startup. If you want to avoid this, ensure autoloads set up on Emacs startup. See [[#installing-from-melpa][Installing from MELPA]] a few package managers that can generate autoloads when package is installed.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository to a directory of your choice, for example =~/src/difftastic=.&lt;/li&gt; &#xA; &lt;li&gt;Add the following line to your Emacs configuration file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :results value silent (add-to-list &#39;load-path &#34;~/src/difftastic&#34;) (require &#39;difftastic) (require &#39;difftastic-bindings) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Configuration :PROPERTIES: :CUSTOM_ID: configuration :END: This section assumes you have =difftastic=&#39;s autoloads set up at Emacs startup. If you have installed =difftastic= using built-in =package= or =use-package= then you should be all set.&lt;/p&gt; &#xA;&lt;p&gt;To configure =difftastic= commands in relevant =magit= prefixes and keymaps, use the following code snippet in your Emacs configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :results value silent (difftastic-bindings-mode) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or, if you use =use-package=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :results value silent (use-package difftastic-bindings :ensure difftastic ;; or nil if you prefer manual installation :config (difftastic-bindings-mode)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;This will bind &lt;del&gt;D&lt;/del&gt; to =difftastic-magit-diff= and &lt;del&gt;S&lt;/del&gt; to =difftastic-magit-show= in =magit-diff= and =magit-blame= transient prefixes as well as in =magit-blame-read-only-map=. Please refer to =difftastic-bindings= documentation to see how to change default bindings.&lt;/p&gt; &#xA;&lt;p&gt;You can adjust what bindings you want to have configured by changing values of =difftastic-bindings-alist=, =difftastic-bindings-prefixes=, and =difftastic-bindings-keymaps=. You need to turn the =difftastic-bindings-mode= off and on again to apply the changes.&lt;/p&gt; &#xA;&lt;p&gt;The =difftastic-bindings=mode= was designed to have minimal dependencies and be reasonably fast to load, while providing a mechanism to bind =difftastic= commands, such that they are available in relevant contexts.&lt;/p&gt; &#xA;&lt;p&gt;*** Manual Key Bindings Configuration :PROPERTIES: :CUSTOM_ID: manual_key_Bindings_configuration :END:&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to use mechanism delivered by =difftastic-bindings-mode= you can write your own configuration. As a starting point the following snippets demonstrate how to achieve roughly the same effect as =difftastic-bindings-mode=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :results value silent (require &#39;difftastic) (require &#39;transient)&lt;/p&gt; &#xA;&lt;p&gt;(let ((suffix [(&#34;D&#34; &#34;Difftastic diff (dwim)&#34; difftastic-magit-diff) (&#34;S&#34; &#34;Difftastic show&#34; difftastic-magit-show)])) (with-eval-after-load &#39;magit-diff (unless (equal (transient-parse-suffix &#39;magit-diff suffix) (transient-get-suffix &#39;magit-diff &#39;(-1 -1))) (transient-append-suffix &#39;magit-diff &#39;(-1 -1) suffix))) (with-eval-after-load &#39;magit-blame (unless (equal (transient-parse-suffix &#39;magit-blame suffix) (transient-get-suffix &#39;magit-blame &#39;(-1))) (transient-append-suffix &#39;magit-blame &#39;(-1) suffix)) (keymap-set magit-blame-read-only-mode-map &#34;D&#34; #&#39;difftastic-magit-show) (keymap-set magit-blame-read-only-mode-map &#34;S&#34; #&#39;difftastic-magit-show))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;Or, if you use =use-package=:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :results value silent (use-package difftastic :defer t :init (use-package transient ; to silence compiler warnings :autoload (transient-get-suffix transient-parse-suffix))&lt;/p&gt; &#xA;&lt;p&gt;(let ((suffix [(&#34;D&#34; &#34;Difftastic diff (dwim)&#34; difftastic-magit-diff) (&#34;S&#34; &#34;Difftastic show&#34; difftastic-magit-show)])) (use-package magit-blame :defer t :ensure magit :bind (:map magit-blame-read-only-mode-map (&#34;D&#34; . #&#39;difftastic-magit-diff) (&#34;S&#34; . #&#39;difftastic-magit-show)) :config (unless (equal (transient-parse-suffix &#39;magit-blame suffix) (transient-get-suffix &#39;magit-blame &#39;(-1))) (transient-append-suffix &#39;magit-blame &#39;(-1) suffix))) (use-package magit-diff :defer t :ensure magit :config (unless (equal (transient-parse-suffix &#39;magit-diff suffix) (transient-get-suffix &#39;magit-diff &#39;(-1 -1))) (transient-append-suffix &#39;magit-diff &#39;(-1 -1) suffix))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Usage :PROPERTIES: :CUSTOM_ID: usage :END: The following commands are meant to help to interact with =difftastic=. Commands are followed by their default keybindings in =difftastic-mode= (in parenthesis).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=difftastic-magit-diff= - show the result of =git diff ARGS -- FILES= with =difftastic=. This is the main entry point for DWIM action, so it tries to guess revision or range.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-magit-show= - show the result of =git show ARG= with =difftastic=. It tries to guess =ARG=, and ask for it when can&#39;t. When called with prefix argument it will ask for =ARG=.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-files= - show the result of =difft FILE-A FILE-B=. When called with prefix argument it will ask for language to use, instead of relaying on =difftastic=&#39;s detection mechanism.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-buffers= - show the result of =difft BUFFER-A BUFFER-B=. Language is guessed based on buffers modes. When called with prefix argument it will ask for language to use.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-dired-diff= - same as =dired-diff=, but with =difftastic-files= instead of the built-in =diff=.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-rerun= (&lt;del&gt;g&lt;/del&gt;) - rerun difftastic for the current buffer. It runs difftastic again in the current buffer, but respects the window configuration. It uses =difftastic-rerun-requested-window-width-function= which, by default, returns current window width (instead of =difftastic-requested-window-width-function=). It will also reuse current buffer and will not call =difftastic-display-buffer-function=. When called with prefix argument it will ask for language to use.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-next-chunk= (&lt;del&gt;n&lt;/del&gt;), =difftastic-next-file= (&lt;del&gt;N&lt;/del&gt;) - move point to a next logical chunk or a next file respectively.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-previous-chunk= (&lt;del&gt;p&lt;/del&gt;), =difftastic-previous-file= (&lt;del&gt;P&lt;/del&gt;) - move point to a previous logical chunk or a previous file respectively.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-toggle-chunk= (&lt;del&gt;TAB&lt;/del&gt; or &lt;del&gt;C-i&lt;/del&gt;) - toggle visibility of a chunk at point. The point has to be in a chunk header. When called with a prefix all file chunks from the header to the end of the file. See also =difftastic-hide-chunk= and =difftastic=show-chunk=.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-git-diff-range= - transform =ARGS= for difftastic and show the result of =git diff ARGS REV-OR-RANGE -- FILES= with =difftastic=.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Customization :PROPERTIES: :CUSTOM_ID: customization :END: *** Face Customization :PROPERTIES: :CUSTOM_ID: face-customization :END: You can customize the appearance of =difftastic= output by adjusting the faces used for highlighting. To customize a faces, use the following code snippet in your configuration:&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :results value silent ;; Customize faces used to display difftastic output. (setq difftastic-normal-colors-vector (vector ;; use black face from &lt;code&gt;ansi-color&#39; (aref ansi-color-normal-colors-vector 0) ;; use face for removed marker from &lt;/code&gt;difftastic&#39; (aref difftastic-normal-colors-vector 1) ;; use face for added marker from &lt;code&gt;difftastic&#39; (aref difftastic-normal-colors-vector 2) &#39;my-section-face &#39;my-comment-face &#39;my-string-face &#39;my-warning-face ;; use white face from &lt;/code&gt;ansi-color&#39; (aref ansi-color-normal-colors-vector 7)))&lt;/p&gt; &#xA;&lt;p&gt;;; Customize highlight faces (setq difftastic-highlight-alist `((,(aref difftastic-normal-colors-vector 2) . my-added-highlight) (,(aref difftastic-normal-colors-vector 1) . my-removed-highlight)))&lt;/p&gt; &#xA;&lt;p&gt;;; Disable highlight faces (use difftastic&#39;s default) (setq difftastic-highlight-alist nil) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Window management :PROPERTIES: :CUSTOM_ID: window-management :END: The =difftastic= relies on the =difft= command line tool to produce an output that can be displayed in an Emacs buffer window. In short: it runs the =difft=, converts ANSI codes into user defined colors and displays it in window. The =difft= can be instructed with a hint to help it produce a content that can fit into user output, by specifying a requested width. However, the latter is not always respected.&lt;/p&gt; &#xA;&lt;p&gt;The =difftastic= provides a few variables to let you customize these aspects of interaction with =difft=:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;=difftastic-requested-window-width-function= - this function is called for a first (i.e., not a rerun) call to =difft=. It shall return the requested width of the output. For example this can be a half of a current frame (or a window) if the output is meant to be presented side by side.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-rerun-requested-window-width-function= - this function is called for a rerun (i.e., not a first) call to =difft=. It shall return requested window width of the output. For example this can be a current window width if the output is meant to fill the whole window.&lt;/li&gt; &#xA; &lt;li&gt;=difftastic-display-buffer-function= - this function is called after a first call to =difft=. It is meant to select an appropriate Emacs mechanism to display the =difft= output.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** Contributing :PROPERTIES: :CUSTOM_ID: contributing :END: Contributions are welcome! Feel free to submit issues and pull requests on the [[https://github.com/pkryger/difftastic.el][GitHub repository]].&lt;/p&gt; &#xA;&lt;p&gt;*** Testing :PROPERTIES: :CUSTOM_ID: testing :END: When creating a pull request make sure all tests in [[file:test/difftastic.t.el]] are passing. When adding a new functionality, please strive to add tests for it as well.&lt;/p&gt; &#xA;&lt;p&gt;To run tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;open the [[file:test/difftastic.t.el]]&lt;/li&gt; &#xA; &lt;li&gt;type &lt;del&gt;M-x eval-buffer &#xA;   &lt;ret&gt;&lt;/ret&gt;&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;open the [[file:test/difftastic-bindings.t.el]]&lt;/li&gt; &#xA; &lt;li&gt;type &lt;del&gt;M-x eval-buffer &#xA;   &lt;ret&gt;&lt;/ret&gt;&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;type &lt;del&gt;M-x ert &#xA;   &lt;ret&gt;&#xA;     t &#xA;    &lt;ret&gt;&lt;/ret&gt;&#xA;   &lt;/ret&gt;&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;** README.org and Commentary authoring and exporting :noexport: The [[file:README.org]] file is a source of =Commentary= section in the [[file:difftastic.el]]. That is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;content of Commentary should be authored in the [[file:README.org]] file,&lt;/li&gt; &#xA; &lt;li&gt;should some content in the [[file:README.org]] file be omitted from Commentary section, it shall be tagged with =noexport= tag,&lt;/li&gt; &#xA; &lt;li&gt;Commentary section can be generated, verified, and saved to [[file:difftastic.el]] using snippets in the following subsections.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*** One time set up Just run the following snippet. It will define a new export backend used to export contents of this file to [[file:difftastic.el]].&lt;/p&gt; &#xA;&lt;p&gt;#+name: export-commentary-setup #+begin_src emacs-lisp :results none (defun difftastic-org-export-commentary-remove-top-level (backend) &#34;Remove top level headline from export. BACKEND is the export back-end being used, as a symbol.&#34; (org-map-entries (lambda () (when (and (eq backend &#39;difftastic-commentary) (looking-at &#34;^* &#34;)) (delete-region (point) (save-excursion (outline-next-heading) (point))) (setq org-map-continue-from (point))))))&lt;/p&gt; &#xA;&lt;p&gt;(add-to-list &#39;org-export-before-parsing-functions #&#39;difftastic-org-export-commentary-remove-top-level)&lt;/p&gt; &#xA;&lt;p&gt;(defun difftastic-org-export-commentary-src-block (src-block _contents info) &#34;Transcode a SRC-BLOCK element from Org to Commentary. CONTENTS is nil. INFO is a plist used as a communication channel.&#34; (org-element-normalize-string (org-export-format-code-default src-block info)))&lt;/p&gt; &#xA;&lt;p&gt;(defun difftastic-org-export-commentary-final-output (contents _backend _info) &#34;Transcode CONTENTS element from Org to Commentary.&#34; (replace-regexp-in-string &#34;^;;\&#39;&#34; &#34;&#34; (replace-regexp-in-string &#34;^;; $&#34; &#34;;;&#34; (replace-regexp-in-string &#34;^&#34; &#34;;; &#34; contents))))&lt;/p&gt; &#xA;&lt;p&gt;(org-export-define-derived-backend &#39;difftastic-commentary &#39;ascii :translate-alist &#39;((src-block . difftastic-org-export-commentary-src-block)) :filters-alist &#39;((:filter-final-output . difftastic-org-export-commentary-final-output)))&lt;/p&gt; &#xA;&lt;p&gt;(defmacro with-difftastic-org-export-commentary-defaults (body) &#34;Execute BODY with difftastic org export commentary defaults.&#34; `(let ((org-ascii-text-width 75) (org-ascii-global-margin 0) (org-ascii-inner-margin 0)) ,body)) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Validate generated Commentary content To quickly validate generated Commentary content - which may be usefull for developing exporting mechanism, or to iterate over different documentation formats - you can use the following snippet. When =flycheck= is available it will create a custom checker and run it in the generated buffer. However, the =checkdoc= doesn&#39;t run in =org-mode= buffer, so the generated content may have issues that are not highlighted while authoring. Please open the [[file:difftastic.el]] and check it for any new issues.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :results none (with-difftastic-org-export-commentary-defaults (org-export-to-buffer &#39;difftastic-commentary &#34;&lt;em&gt;Org DIFFTASTIC-COMMENTARY Export&lt;/em&gt;&#34; nil nil nil nil nil (lambda () (emacs-lisp-mode) (when (require &#39;flycheck nil t) (flycheck-define-checker emacs-difftastic-commentary-checkdoc &#34;An Emacs Lisp style checker using CheckDoc.&lt;/p&gt; &#xA;&lt;p&gt;Adjusted for commentary checks, boosting all diagnostics to errors and filtering header and footer ones. The checker runs `checkdoc-current-buffer&#39;.&#34; :command (&#34;emacs&#34; (eval flycheck-emacs-args) &#34;--eval&#34; (eval (flycheck-sexp-to-string (flycheck-emacs-lisp-checkdoc-variables-form))) &#34;--eval&#34; (eval flycheck-emacs-lisp-checkdoc-form) &#34;--&#34; source) :error-patterns ((error line-start (file-name) &#34;:&#34; line &#34;: &#34; (message) line-end)) :error-filter (lambda (errors) (cl-remove-if (lambda (err) (string-match (rx (or &#34;The first line should be of the form: &#34;;;; package --- Summary&#34;&#34; &#34;You should have a summary line (&#34;;;; .* --- .*&#34;)&#34; &#34;You should have a section marked &#34;;;; Commentary:&#34;&#34; &#34;You should have a section marked &#34;;;; Code:&#34;&#34; (seq &#34;The footer should be: (provide &#39;&#34; (one-or-more alnum) &#34;)\n;;; &#34; (one-or-more alnum) &#34; ends here&#34;))) (flycheck-error-message err))) errors)) :modes (emacs-lisp-mode) :enabled flycheck--emacs-lisp-checkdoc-enabled-p) (add-to-list &#39;flycheck-disabled-checkers &#39;emacs-lisp-checkdoc) (setf (car (flycheck-checker-get &#39;emacs-difftastic-commentary-checkdoc &#39;command)) flycheck-this-emacs-executable) ;; Do not clobber user configuration (make-local-variable &#39;flycheck-checkers) (add-to-list &#39;flycheck-checkers &#39;emacs-difftastic-commentary-checkdoc) (flycheck-mode))))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;*** Save generated Commentary content To generate the Commentary section and save it to [[file:difftastic.el]] file, you can use the following snippet. This step should be performed each time this file changes, such that the Commentary content remains up to date.&lt;/p&gt; &#xA;&lt;p&gt;Note that =checkdoc= doesn&#39;t run in =org-mode= buffer, so the generated content may have issues that are not highlighted while authoring. Please open the [[file:difftastic.el]] and check it for any new issues.&lt;/p&gt; &#xA;&lt;p&gt;#+begin_src emacs-lisp :results none (with-difftastic-org-export-commentary-defaults (let ((org-export-show-temporary-export-buffer nil) (export-buffer &#34;&lt;em&gt;Org DIFFTASTIC-COMMENTARY Export&lt;/em&gt;&#34;)) (org-export-to-buffer &#39;difftastic-commentary export-buffer) (with-current-buffer (find-file-noselect &#34;difftastic.el&#34;) (goto-char (point-min)) (let ((start (progn (re-search-forward &#34;^;;; Commentary:$&#34;) (beginning-of-line 3) (point))) (end (progn (re-search-forward &#34;^;;; Code:$&#34;) (end-of-line 0) (point)))) (delete-region start end)) (insert (with-current-buffer export-buffer (buffer-string))) (save-buffer)))) #+end_src&lt;/p&gt; &#xA;&lt;p&gt;** Acknowledgments :noexport: :PROPERTIES: :CUSTOM_ID: acknowledgments :END: This package was inspired by the need for an integration of =difftastic= within Emacs, enhancing the code review process for developers.&lt;/p&gt; &#xA;&lt;p&gt;This work is based on Tassilo Horn&#39;s [[https://tsdh.org/posts/2022-08-01-difftastic-diffing-with-magit.html][blog entry]].&lt;/p&gt; &#xA;&lt;p&gt;=magit-diff= keybindings and a concept of updating faces comes from a Shiv Jha-Mathur&#39;s [[https://shivjm.blog/better-magit-diffs/][blog entry]].&lt;/p&gt; &#xA;&lt;p&gt;This all has been strongly influenced by - a class in itself - [[https://github.com/magit/magit][Magit]] and [[https://github.com/magit/transient][Transient]] Emacs packages by Jonas Bernoulli.&lt;/p&gt; &#xA;&lt;p&gt;** Similar packages :noexport: :PROPERTIES: :CUSTOM_ID: similar-packages :END: *** Diff ANSI :PROPERTIES: :CUSTOM_ID: diff-ansi :END: There&#39;s a [[https://codeberg.org/ideasman42/emacs-diff-ansi][diff-ansi]] package available. I haven&#39;t spent much time on it, but at a first glance it doesn&#39;t seem that it supports =difftastic= out of box. Perhaps it is possible to configure it to support =difftastic= as a custom tool.&lt;/p&gt; &#xA;&lt;p&gt;** License :noexport: :PROPERTIES: :CUSTOM_ID: license :END: This package is licensed under the [[https://www.gnu.org/licenses/gpl-3.0.en.html][GPLv3 License]].&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Happy coding! If you encounter any issues or have suggestions for improvements, please don&#39;t hesitate to reach out on the [[https://github.com/pkryger/difftastic.el][GitHub repository]]. Your feedback is highly appreciated.&lt;/p&gt; &#xA;&lt;h1&gt;LocalWords: MELPA DWIM&lt;/h1&gt;</summary>
  </entry>
</feed>