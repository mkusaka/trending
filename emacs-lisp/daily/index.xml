<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Emacs Lisp Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-26T01:28:24Z</updated>
  <subtitle>Daily Trending of Emacs Lisp in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kiwanami/emacs-widget-mvc</title>
    <updated>2024-01-26T01:28:24Z</updated>
    <id>tag:github.com,2024-01-26:/kiwanami/emacs-widget-mvc</id>
    <link href="https://github.com/kiwanami/emacs-widget-mvc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web like MVC framework for emacs lisp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Widget MVC&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kiwanami/emacs-widget-mvc&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kiwanami/emacs-widget-mvc.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/kiwanami/emacs-widget-mvc&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/kiwanami/emacs-widget-mvc/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://melpa.org/#/widget-mvc&#34;&gt;&lt;img src=&#34;http://melpa.org/packages/widget-mvc-badge.svg?sanitize=true&#34; alt=&#34;MELPA&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stable.melpa.org/#/widget-mvc&#34;&gt;&lt;img src=&#34;http://stable.melpa.org/packages/widget-mvc-badge.svg?sanitize=true&#34; alt=&#34;MELPA stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kiwanami/emacs-widget-mvc/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/kiwanami/emacs-widget-mvc.svg?sanitize=true&#34; alt=&#34;Tag Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;&lt;img src=&#34;http://img.shields.io/:license-gpl3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a GUI framework for emacs lisp. It is designed for the programmers who arefamiliar with the conventional Web MVC frameworks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚒&lt;/span&gt; &lt;strong&gt;This is under construction!&lt;/strong&gt; &lt;span&gt;⚒&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Applications&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sample Code&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun wmvc:demo ()&#xA;  (interactive)&#xA;  (let ((src `(&#xA;               ,(propertize &#34;Form Sample&#34; &#39;face &#39;info-title-1) BR&#xA;               &#34;This is a sample template.\nA normal text is inserted as is.&#34; BR&#xA;               &#34;BR inserts a line break.&#34; BR BR&#xA;               (message :name error :face compilation-error) BR&#xA;               &#34;  Input A  : &#34;&#xA;               (input :name input-a :type text :size 30) BR&#xA;               &#34;  Input B  : &#34;&#xA;               (input :name input-b :type text :size 30) &#34;(decimal 0 - 12)&#34; BR&#xA;               &#34;  Password : &#34;&#xA;               (input :name password :type password :size 20) BR&#xA;               &#34;  Option   : &#34;&#xA;               &#34;Alpha&#34; (input :name check-a :type checkbox) &#34; &#34;&#xA;               &#34;Beta&#34;  (input :name check-b :type checkbox) &#34; &#34;&#xA;               &#34;Gamma&#34; (input :name check-c :type checkbox) BR&#xA;               &#34;  Radio Select : &#34;&#xA;               (input :name radio-a :type radio&#xA;                      :options ((&#34;select1&#34; . 1) (&#34;select2&#34; . 2) (&#34;select3&#34; . 3) (&#34;select4&#34; . 4)))&#xA;               BR&#xA;               &#34;  Select1  : &#34;&#xA;               (input :name select1 :type select&#xA;                      :options (&#34;select1&#34; &#34;select2&#34; &#34;select3&#34; &#34;select4&#34;))&#xA;               BR&#xA;               &#34;  Select2  : &#34;&#xA;               (input :name select2 :type select&#xA;                      :options ((&#34;select1&#34; . 1) (&#34;select2&#34; . 2) (&#34;select3&#34; . 3) (&#34;select4&#34; . 4)))&#xA;               BR BR&#xA;               &#34;    &#34; (button :title &#34;OK&#34; :action on-submit :validation t)&#xA;               &#34;  &#34; (button :title &#34;Cancel&#34; :action on-cancel)))&#xA;        (model&#xA;         &#39;((input-a . &#34;&#34;)  (input-b . &#34;6&#34;)&#xA;           (password . &#34;&#34;) (check-a . t) (check-b . nil) (check-c . nil)&#xA;           (radio-a . 4) (select1 . &#34;select2&#34;) (select2 . 3)))&#xA;        (validations&#xA;         &#39;((input-a . wmvc:validation-integer)&#xA;           (input-b . (wmvc:validation-decimal :min 0 :max 12))&#xA;           (password . (wmvc:validation-length :min 5 :max 10))&#xA;           ))&#xA;        (action-mapping&#xA;         &#39;((on-submit . wmvc:demo-submit-action)&#xA;           (on-cancel . (lambda (model)&#xA;                          (message &#34;canceled&#34;)&#xA;                          (kill-this-buffer)))))&#xA;        (attributes &#39;()))&#xA;    (pop-to-buffer&#xA;     (wmvc:build-buffer&#xA;      :buffer (wmvc:get-new-buffer)&#xA;      :tmpl src :model model :actions action-mapping&#xA;      :validations validations :attributes attributes))))&#xA;&#xA;(defun wmvc:demo-submit-action (model)&#xA;  (message &#34;MODEL : %S&#34; model)&#xA;  (kill-this-buffer))&#xA;&#xA;&#xA;;; M-x wmvc:demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kiwanami/emacs-widget-mvc/master/demo1.png&#34; alt=&#34;Screenshot Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Manual installation&lt;/h2&gt; &#xA;&lt;p&gt;Place those programs and this one (&lt;code&gt;widget-mvc.el&lt;/code&gt;) in your load path and add following code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;widget-mvc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Package is also available on melpa&lt;/p&gt; &#xA;&lt;h1&gt;API Document&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;API Overview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cacoo.com/diagrams/O42ZDzbVzZx31o7e-EFE0F.png&#34; alt=&#34;Lifecycle Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Details&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;EPC is licensed under GPL v3.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;(C) 2013 SAKURAI Masashi. m.sakurai at kiwanami.net&lt;/p&gt;</summary>
  </entry>
</feed>